
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	0000166d 	andeq	r1, r0, sp, ror #12
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001667 	andeq	r1, r0, r7, ror #12
       c:	00001669 	andeq	r1, r0, r9, ror #12
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	0000166b 	andeq	r1, r0, fp, ror #12
      14:	0000166b 	andeq	r1, r0, fp, ror #12
		when (&__input_pins, st);
      18:	0000166b 	andeq	r1, r0, fp, ror #12
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	0000166b 	andeq	r1, r0, fp, ror #12
      30:	0000166b 	andeq	r1, r0, fp, ror #12
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	0000166b 	andeq	r1, r0, fp, ror #12
      3c:	0000166b 	andeq	r1, r0, fp, ror #12
      40:	00000a31 	andeq	r0, r0, r1, lsr sl
      44:	0000166b 	andeq	r1, r0, fp, ror #12
      48:	0000166b 	andeq	r1, r0, fp, ror #12
}
      4c:	0000166b 	andeq	r1, r0, fp, ror #12
      50:	000005f1 	strdeq	r0, [r0], -r1
      54:	000008f1 	strdeq	r0, [r0], -r1
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	0000166b 	andeq	r1, r0, fp, ror #12
	    pbutton++) {
      5c:	0000166b 	andeq	r1, r0, fp, ror #12
      60:	0000166b 	andeq	r1, r0, fp, ror #12
	if (!button_still_pressed (__button_list [pbutton]))
      64:	0000166b 	andeq	r1, r0, fp, ror #12
      68:	0000166b 	andeq	r1, r0, fp, ror #12
      6c:	0000166b 	andeq	r1, r0, fp, ror #12
      70:	0000166b 	andeq	r1, r0, fp, ror #12
      74:	0000166b 	andeq	r1, r0, fp, ror #12
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	0000166b 	andeq	r1, r0, fp, ror #12
      7c:	0000166b 	andeq	r1, r0, fp, ror #12
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	0000166b 	andeq	r1, r0, fp, ror #12
      84:	0000166b 	andeq	r1, r0, fp, ror #12
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	0000166b 	andeq	r1, r0, fp, ror #12
      8c:	0000166b 	andeq	r1, r0, fp, ror #12
      90:	0000166b 	andeq	r1, r0, fp, ror #12
      94:	0000166b 	andeq	r1, r0, fp, ror #12
      98:	0000166b 	andeq	r1, r0, fp, ror #12
		goto Done;

	if (baction == NULL)
      9c:	0000166b 	andeq	r1, r0, fp, ror #12
      a0:	0000166b 	andeq	r1, r0, fp, ror #12
		goto Term;

	(*baction) (pbutton);
      a4:	0000166b 	andeq	r1, r0, fp, ror #12

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	0000166b 	andeq	r1, r0, fp, ror #12
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000166b 	andeq	r1, r0, fp, ror #12
      b0:	0000166b 	andeq	r1, r0, fp, ror #12
endthread
      b4:	0000166b 	andeq	r1, r0, fp, ror #12
      b8:	0000166b 	andeq	r1, r0, fp, ror #12
      bc:	0000166b 	andeq	r1, r0, fp, ror #12
      c0:	0000166b 	andeq	r1, r0, fp, ror #12
      c4:	0000166b 	andeq	r1, r0, fp, ror #12

000000c8 <blinker>:
      c8:	2802      	cmp	r0, #2
      ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
word adjustTime(word time) {
    return (time * SECOND)/1000;
}

// Finite state machine for flashing the LEDs and displaying cycle characters
fsm blinker {
      cc:	f000 808b 	beq.w	1e6 <_Min_Stack_Size+0xe6>
      d0:	f200 808e 	bhi.w	1f0 <_Min_Stack_Size+0xf0>
      d4:	4f48      	ldr	r7, [pc, #288]	; (1f8 <_Min_Stack_Size+0xf8>)
      d6:	4e49      	ldr	r6, [pc, #292]	; (1fc <_Min_Stack_Size+0xfc>)
      d8:	4949      	ldr	r1, [pc, #292]	; (200 <_Min_Stack_Size+0x100>)
      da:	4c4a      	ldr	r4, [pc, #296]	; (204 <_Min_Stack_Size+0x104>)
      dc:	2800      	cmp	r0, #0
      de:	d160      	bne.n	1a2 <_Min_Stack_Size+0xa2>
    // Flag for which LED cycle to show
    int ledFlag = 0;
        
    state Check_PERIOD:
        // Determine the LED, character and on and off times based on the desired LED
        if(ledFlag == 0) {
      e0:	4a49      	ldr	r2, [pc, #292]	; (208 <_Min_Stack_Size+0x108>)
      e2:	f8df c160 	ldr.w	ip, [pc, #352]	; 244 <_Min_Stack_Size+0x144>
      e6:	6813      	ldr	r3, [r2, #0]
      e8:	4d48      	ldr	r5, [pc, #288]	; (20c <_Min_Stack_Size+0x10c>)
      ea:	2b00      	cmp	r3, #0
      ec:	d137      	bne.n	15e <_Min_Stack_Size+0x5e>
            led = redLed;
      ee:	4848      	ldr	r0, [pc, #288]	; (210 <_Min_Stack_Size+0x110>)
      f0:	6800      	ldr	r0, [r0, #0]
      f2:	6038      	str	r0, [r7, #0]
            ch = redCharacter;
      f4:	4847      	ldr	r0, [pc, #284]	; (214 <_Min_Stack_Size+0x114>)
      f6:	7800      	ldrb	r0, [r0, #0]
      f8:	f88c 0000 	strb.w	r0, [ip]
            onTime = redOn;
      fc:	4846      	ldr	r0, [pc, #280]	; (218 <_Min_Stack_Size+0x118>)
      fe:	8800      	ldrh	r0, [r0, #0]
     100:	8028      	strh	r0, [r5, #0]
            offTime = redOff;
     102:	4846      	ldr	r0, [pc, #280]	; (21c <_Min_Stack_Size+0x11c>)
        } else {
            led = greenLed;
            ch = greenCharacter;
            onTime = greenOn;
            offTime = greenOff;
     104:	8800      	ldrh	r0, [r0, #0]
        }
        
        // toggle the LED flag
        ledFlag = 1 - ledFlag;
     106:	f1c3 0301 	rsb	r3, r3, #1
            offTime = greenOff;
     10a:	8030      	strh	r0, [r6, #0]
    return (time * SECOND)/1000;
     10c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        ledFlag = 1 - ledFlag;
     110:	6013      	str	r3, [r2, #0]
    return (time * SECOND)/1000;
     112:	8833      	ldrh	r3, [r6, #0]
     114:	882a      	ldrh	r2, [r5, #0]
     116:	029b      	lsls	r3, r3, #10
     118:	fbb3 f3f0 	udiv	r3, r3, r0
     11c:	0292      	lsls	r2, r2, #10
     11e:	fbb2 f2f0 	udiv	r2, r2, r0
     122:	8033      	strh	r3, [r6, #0]
        // adjust on and off times
        onTime = adjustTime(onTime);
        offTime = adjustTime(offTime);

        // Whether to display the cycle character
        if (displayCycle)
     124:	780b      	ldrb	r3, [r1, #0]
    return (time * SECOND)/1000;
     126:	802a      	strh	r2, [r5, #0]
        if (displayCycle)
     128:	b12b      	cbz	r3, 136 <_Min_Stack_Size+0x36>
            ser_outf(Check_PERIOD, "%c ", ch);
     12a:	2000      	movs	r0, #0
     12c:	f89c 2000 	ldrb.w	r2, [ip]
     130:	493b      	ldr	r1, [pc, #236]	; (220 <_Min_Stack_Size+0x120>)
     132:	f001 fbab 	bl	188c <ser_outf>

        if(onTime > 0){
     136:	882b      	ldrh	r3, [r5, #0]
     138:	b333      	cbz	r3, 188 <_Min_Stack_Size+0x88>
            // Turns the LED on
            leds(led,1);
     13a:	683a      	ldr	r2, [r7, #0]
     13c:	4b39      	ldr	r3, [pc, #228]	; (224 <_Min_Stack_Size+0x124>)
     13e:	b9d2      	cbnz	r2, 176 <_Min_Stack_Size+0x76>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Set the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	2240      	movs	r2, #64	; 0x40
     142:	601a      	str	r2, [r3, #0]
     144:	7823      	ldrb	r3, [r4, #0]
     146:	091b      	lsrs	r3, r3, #4
     148:	f003 030e 	and.w	r3, r3, #14
     14c:	7822      	ldrb	r2, [r4, #0]
     14e:	f363 1207 	bfi	r2, r3, #4, #4
     152:	7022      	strb	r2, [r4, #0]

            // Set the delay
            delay(onTime, OFF_PERIOD);
     154:	2101      	movs	r1, #1
     156:	8828      	ldrh	r0, [r5, #0]
        if (displayCycle)
            ser_outf(Check_PERIOD, "%c ", 'F');

        // Set the delay if it is set
        if(offTime > 0)
            delay(offTime, Check_PERIOD);
     158:	f001 f81c 	bl	1194 <delay>
     15c:	e017      	b.n	18e <_Min_Stack_Size+0x8e>
            led = greenLed;
     15e:	4832      	ldr	r0, [pc, #200]	; (228 <_Min_Stack_Size+0x128>)
     160:	6800      	ldr	r0, [r0, #0]
     162:	6038      	str	r0, [r7, #0]
            ch = greenCharacter;
     164:	4831      	ldr	r0, [pc, #196]	; (22c <_Min_Stack_Size+0x12c>)
     166:	7800      	ldrb	r0, [r0, #0]
     168:	f88c 0000 	strb.w	r0, [ip]
            onTime = greenOn;
     16c:	4830      	ldr	r0, [pc, #192]	; (230 <_Min_Stack_Size+0x130>)
     16e:	8800      	ldrh	r0, [r0, #0]
     170:	8028      	strh	r0, [r5, #0]
            offTime = greenOff;
     172:	4830      	ldr	r0, [pc, #192]	; (234 <_Min_Stack_Size+0x134>)
     174:	e7c6      	b.n	104 <_Min_Stack_Size+0x4>
            leds(led,1);
     176:	2a01      	cmp	r2, #1
     178:	d1ec      	bne.n	154 <_Min_Stack_Size+0x54>
     17a:	2280      	movs	r2, #128	; 0x80
     17c:	601a      	str	r2, [r3, #0]
     17e:	7823      	ldrb	r3, [r4, #0]
     180:	091b      	lsrs	r3, r3, #4
     182:	f003 030d 	and.w	r3, r3, #13
     186:	e7e1      	b.n	14c <_Min_Stack_Size+0x4c>
            proceed OFF_PERIOD;
     188:	2001      	movs	r0, #1
     18a:	f000 ffb3 	bl	10f4 <proceed>
        when(&On, Check_PERIOD);
     18e:	2100      	movs	r1, #0
     190:	4829      	ldr	r0, [pc, #164]	; (238 <_Min_Stack_Size+0x138>)
     192:	f000 ffb9 	bl	1108 <__pi_wait>
        when(&stopProcess, Stop);
     196:	2102      	movs	r1, #2
     198:	4828      	ldr	r0, [pc, #160]	; (23c <_Min_Stack_Size+0x13c>)
     19a:	f000 ffb5 	bl	1108 <__pi_wait>
        release;
     19e:	f000 fd75 	bl	c8c <__pi_release>
        leds(led,0);
     1a2:	683a      	ldr	r2, [r7, #0]
     1a4:	4b26      	ldr	r3, [pc, #152]	; (240 <_Min_Stack_Size+0x140>)
     1a6:	b9aa      	cbnz	r2, 1d4 <_Min_Stack_Size+0xd4>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	2240      	movs	r2, #64	; 0x40
     1aa:	601a      	str	r2, [r3, #0]
     1ac:	7823      	ldrb	r3, [r4, #0]
     1ae:	091b      	lsrs	r3, r3, #4
     1b0:	f003 030e 	and.w	r3, r3, #14
     1b4:	7822      	ldrb	r2, [r4, #0]
     1b6:	f363 1207 	bfi	r2, r3, #4, #4
     1ba:	7022      	strb	r2, [r4, #0]
        if (displayCycle)
     1bc:	780b      	ldrb	r3, [r1, #0]
     1be:	b123      	cbz	r3, 1ca <_Min_Stack_Size+0xca>
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	2246      	movs	r2, #70	; 0x46
     1c2:	2000      	movs	r0, #0
     1c4:	4916      	ldr	r1, [pc, #88]	; (220 <_Min_Stack_Size+0x120>)
     1c6:	f001 fb61 	bl	188c <ser_outf>
        if(offTime > 0)
     1ca:	8830      	ldrh	r0, [r6, #0]
     1cc:	2800      	cmp	r0, #0
     1ce:	d0dc      	beq.n	18a <_Min_Stack_Size+0x8a>
            delay(offTime, Check_PERIOD);
     1d0:	2100      	movs	r1, #0
     1d2:	e7c1      	b.n	158 <_Min_Stack_Size+0x58>
        leds(led,0);
     1d4:	2a01      	cmp	r2, #1
     1d6:	d1f1      	bne.n	1bc <_Min_Stack_Size+0xbc>
     1d8:	2280      	movs	r2, #128	; 0x80
     1da:	601a      	str	r2, [r3, #0]
     1dc:	7823      	ldrb	r3, [r4, #0]
     1de:	091b      	lsrs	r3, r3, #4
     1e0:	f003 030d 	and.w	r3, r3, #13
     1e4:	e7e6      	b.n	1b4 <_Min_Stack_Size+0xb4>

        when(&On, Check_PERIOD);
        when(&stopProcess, Stop);
        release;
    state Stop:
        finish;
     1e6:	2000      	movs	r0, #0

}
     1e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        finish;
     1ec:	f001 b8ce 	b.w	138c <kill>
}
     1f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
     1f4:	f000 bf10 	b.w	1018 <__pi_badstate>
     1f8:	2000001c 	andcs	r0, r0, ip, lsl r0
     1fc:	20000024 	andcs	r0, r0, r4, lsr #32
     200:	20000016 	andcs	r0, r0, r6, lsl r0
     204:	20000098 	mulcs	r0, r8, r0
     208:	20000020 	andcs	r0, r0, r0, lsr #32
     20c:	20000026 	andcs	r0, r0, r6, lsr #32
     210:	20000028 	andcs	r0, r0, r8, lsr #32
     214:	20000008 	andcs	r0, r0, r8
     218:	2000002e 	andcs	r0, r0, lr, lsr #32
     21c:	2000002c 	andcs	r0, r0, ip, lsr #32
     220:	00002cc4 	andeq	r2, r0, r4, asr #25
     224:	40022090 	mulmi	r2, r0, r0
     228:	20000004 	andcs	r0, r0, r4
     22c:	20000000 	andcs	r0, r0, r0
     230:	2000001a 	andcs	r0, r0, sl, lsl r0
     234:	20000018 	andcs	r0, r0, r8, lsl r0
     238:	2000000c 	andcs	r0, r0, ip
     23c:	20000030 	andcs	r0, r0, r0, lsr r0
     240:	400220a0 	andmi	r2, r2, r0, lsr #1
     244:	20000015 	andcs	r0, r0, r5, lsl r0

00000248 <processSettingsInput>:
 * 
 * Returns:
 *  Returns 0 if the input settings were processed successfully, and 1 if not
*/
int processSettingsInput(char * settingsInput){
    word numbers[] = {0, 0, 0, 0};
     248:	2300      	movs	r3, #0
int processSettingsInput(char * settingsInput){
     24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int numbersIndex = 0;
     24c:	461c      	mov	r4, r3
    word numbers[] = {0, 0, 0, 0};
     24e:	e9cd 3300 	strd	r3, r3, [sp]

    word number = 0;

    // Extract the intervals from the settings input string
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     252:	1e41      	subs	r1, r0, #1
     254:	3031      	adds	r0, #49	; 0x31
        if(settingsInput[i] == ' ') {
     256:	f811 5f01 	ldrb.w	r5, [r1, #1]!
     25a:	2d20      	cmp	r5, #32
     25c:	d11b      	bne.n	296 <processSettingsInput+0x4e>
            // seperate the input on the spaces
            numbers[numbersIndex] = number;
     25e:	aa02      	add	r2, sp, #8
     260:	eb02 0244 	add.w	r2, r2, r4, lsl #1
     264:	f822 3c08 	strh.w	r3, [r2, #-8]
            number = 0;
     268:	2300      	movs	r3, #0
            numbersIndex++;
     26a:	3401      	adds	r4, #1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	4281      	cmp	r1, r0
     26e:	d1f2      	bne.n	256 <processSettingsInput+0xe>
    redOff = numbers[1];

    greenOn = numbers[2];
    greenOff = numbers[3];

    return 0;
     270:	2000      	movs	r0, #0
    redOn = numbers[0];
     272:	4b10      	ldr	r3, [pc, #64]	; (2b4 <processSettingsInput+0x6c>)
     274:	f8bd 2000 	ldrh.w	r2, [sp]
     278:	801a      	strh	r2, [r3, #0]
    redOff = numbers[1];
     27a:	4b0f      	ldr	r3, [pc, #60]	; (2b8 <processSettingsInput+0x70>)
     27c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
     280:	801a      	strh	r2, [r3, #0]
    greenOn = numbers[2];
     282:	4b0e      	ldr	r3, [pc, #56]	; (2bc <processSettingsInput+0x74>)
     284:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     288:	801a      	strh	r2, [r3, #0]
    greenOff = numbers[3];
     28a:	4b0d      	ldr	r3, [pc, #52]	; (2c0 <processSettingsInput+0x78>)
     28c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     290:	801a      	strh	r2, [r3, #0]
}
     292:	b002      	add	sp, #8
     294:	bd70      	pop	{r4, r5, r6, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     296:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
     29a:	b2d6      	uxtb	r6, r2
     29c:	2e09      	cmp	r6, #9
     29e:	d805      	bhi.n	2ac <processSettingsInput+0x64>
            number = number * 10;
     2a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            number += settingsInput[i] - 48;
     2a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
     2a8:	b29b      	uxth	r3, r3
     2aa:	e7df      	b.n	26c <processSettingsInput+0x24>
        } else if(settingsInput[i] == '-') {
     2ac:	2d2d      	cmp	r5, #45	; 0x2d
     2ae:	d1dd      	bne.n	26c <processSettingsInput+0x24>
            return 1;
     2b0:	2001      	movs	r0, #1
     2b2:	e7ee      	b.n	292 <processSettingsInput+0x4a>
     2b4:	2000002e 	andcs	r0, r0, lr, lsr #32
     2b8:	2000002c 	andcs	r0, r0, ip, lsr #32
     2bc:	2000001a 	andcs	r0, r0, sl, lsl r0
     2c0:	20000018 	andcs	r0, r0, r8, lsl r0

000002c4 <root>:

// Root finite state machine that handles user input
fsm root {
     2c4:	b530      	push	{r4, r5, lr}
     2c6:	b091      	sub	sp, #68	; 0x44
     2c8:	280a      	cmp	r0, #10
     2ca:	f200 80b8 	bhi.w	43e <root+0x17a>
     2ce:	e8df f000 	tbb	[pc, r0]
     2d2:	140f0a06 	strne	r0, [pc], #-2566	; 2da <root+0x16>
     2d6:	48352925 	ldmdami	r5!, {r0, r2, r5, r8, fp, sp}
     2da:	00746059 	rsbseq	r6, r4, r9, asr r0
    fsmcode blinkerCode;

    Boolean blinkerRunning = NO;
        
    state Initial:
        ser_outf(Initial, "Enter your name: ");
     2de:	2000      	movs	r0, #0
     2e0:	4958      	ldr	r1, [pc, #352]	; (444 <root+0x180>)
     2e2:	f001 fad3 	bl	188c <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     2e6:	2214      	movs	r2, #20
     2e8:	2001      	movs	r0, #1
     2ea:	4957      	ldr	r1, [pc, #348]	; (448 <root+0x184>)
     2ec:	f001 fa92 	bl	1814 <ser_in>

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	2002      	movs	r0, #2
     2f2:	4a55      	ldr	r2, [pc, #340]	; (448 <root+0x184>)
     2f4:	4955      	ldr	r1, [pc, #340]	; (44c <root+0x188>)
     2f6:	f001 fac9 	bl	188c <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     2fa:	2003      	movs	r0, #3
     2fc:	4954      	ldr	r1, [pc, #336]	; (450 <root+0x18c>)
     2fe:	aa03      	add	r2, sp, #12
     300:	f001 faee 	bl	18e0 <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     304:	f89d 300c 	ldrb.w	r3, [sp, #12]
     308:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     30c:	2b41      	cmp	r3, #65	; 0x41
     30e:	d16f      	bne.n	3f0 <root+0x12c>
            proceed Adjust_Intervals;
     310:	2004      	movs	r0, #4
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     312:	f000 feef 	bl	10f4 <proceed>
        }

        proceed Show_Menu;
     316:	2002      	movs	r0, #2
     318:	f000 feec 	bl	10f4 <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	2000      	movs	r0, #0
     31e:	494d      	ldr	r1, [pc, #308]	; (454 <root+0x190>)
     320:	f001 fab4 	bl	188c <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	2232      	movs	r2, #50	; 0x32
     326:	2005      	movs	r0, #5
     328:	a903      	add	r1, sp, #12
     32a:	f001 fa73 	bl	1814 <ser_in>

        if(processSettingsInput(settings) != 0)
     32e:	a803      	add	r0, sp, #12
     330:	f7ff ff8a 	bl	248 <processSettingsInput>
     334:	b110      	cbz	r0, 33c <root+0x78>
            proceed Adjust_Intervals;
     336:	2004      	movs	r0, #4
     338:	f000 fedc 	bl	10f4 <proceed>

    state Start_Blinker:

        if(!blinkerRunning) {
     33c:	4d46      	ldr	r5, [pc, #280]	; (458 <root+0x194>)
     33e:	4c47      	ldr	r4, [pc, #284]	; (45c <root+0x198>)
     340:	7829      	ldrb	r1, [r5, #0]
     342:	2900      	cmp	r1, #0
     344:	d160      	bne.n	408 <root+0x144>
            
            diag("Number of %d: %d", blinkerCode, runningNumber);

            trigger(&stopProcess);

            blinkerCode = runfsm blinker;
     346:	4846      	ldr	r0, [pc, #280]	; (460 <root+0x19c>)
     348:	f001 f8c8 	bl	14dc <__pi_fork>
            blinkerRunning = YES;
     34c:	2301      	movs	r3, #1
     34e:	702b      	strb	r3, [r5, #0]
        }

        On = YES;
     350:	2301      	movs	r3, #1
            blinkerCode = runfsm blinker;
     352:	6020      	str	r0, [r4, #0]
        On = YES;
     354:	4843      	ldr	r0, [pc, #268]	; (464 <root+0x1a0>)
     356:	7003      	strb	r3, [r0, #0]

        trigger(&On);
     358:	f000 fef0 	bl	113c <__pi_trigger>

        proceed Show_Menu;
     35c:	2002      	movs	r0, #2
     35e:	f000 fec9 	bl	10f4 <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     362:	4b41      	ldr	r3, [pc, #260]	; (468 <root+0x1a4>)
     364:	4a41      	ldr	r2, [pc, #260]	; (46c <root+0x1a8>)
     366:	881b      	ldrh	r3, [r3, #0]
     368:	2007      	movs	r0, #7
     36a:	9301      	str	r3, [sp, #4]
     36c:	4b40      	ldr	r3, [pc, #256]	; (470 <root+0x1ac>)
     36e:	4941      	ldr	r1, [pc, #260]	; (474 <root+0x1b0>)
     370:	881b      	ldrh	r3, [r3, #0]
     372:	9300      	str	r3, [sp, #0]
     374:	4b40      	ldr	r3, [pc, #256]	; (478 <root+0x1b4>)
     376:	8812      	ldrh	r2, [r2, #0]
     378:	881b      	ldrh	r3, [r3, #0]
     37a:	f001 fa87 	bl	188c <ser_outf>
            redOff,
            greenOn,
            greenOff
        );

        proceed Show_Menu;
     37e:	2002      	movs	r0, #2
     380:	f000 feb8 	bl	10f4 <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	2008      	movs	r0, #8
     386:	493d      	ldr	r1, [pc, #244]	; (47c <root+0x1b8>)
     388:	f001 fa80 	bl	188c <ser_outf>
        displayCycle = YES;
     38c:	2201      	movs	r2, #1
     38e:	4b3c      	ldr	r3, [pc, #240]	; (480 <root+0x1bc>)
     390:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", &ch);
     392:	2009      	movs	r0, #9
     394:	492e      	ldr	r1, [pc, #184]	; (450 <root+0x18c>)
     396:	aa03      	add	r2, sp, #12
     398:	f001 faa2 	bl	18e0 <ser_inf>
        
        // ensures monitoring only stops when 'S' or 's' are entered
        if(ch == 'S' || ch == 's'){
     39c:	f89d 300c 	ldrb.w	r3, [sp, #12]
     3a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     3a4:	2b53      	cmp	r3, #83	; 0x53
     3a6:	d105      	bne.n	3b4 <root+0xf0>
            displayCycle = NO;
     3a8:	2200      	movs	r2, #0
     3aa:	4b35      	ldr	r3, [pc, #212]	; (480 <root+0x1bc>)
            proceed Show_Menu;
     3ac:	2002      	movs	r0, #2
            displayCycle = NO;
     3ae:	701a      	strb	r2, [r3, #0]
            proceed Show_Menu;
     3b0:	f000 fea0 	bl	10f4 <proceed>
        }
        
        proceed Monitor;
     3b4:	2008      	movs	r0, #8
     3b6:	f000 fe9d 	bl	10f4 <proceed>

    state Stop:
        On = NO;
     3ba:	2200      	movs	r2, #0
     3bc:	4b29      	ldr	r3, [pc, #164]	; (464 <root+0x1a0>)
     3be:	701a      	strb	r2, [r3, #0]

        // Makes sure that the blinker code hasa been assigned to an actual value first
        if(blinkerCode != 0x0) {
     3c0:	4b26      	ldr	r3, [pc, #152]	; (45c <root+0x198>)
     3c2:	6818      	ldr	r0, [r3, #0]
     3c4:	b108      	cbz	r0, 3ca <root+0x106>
            killall(blinkerCode);
     3c6:	f001 f809 	bl	13dc <killall>
        }

        trigger(&stopProcess);
     3ca:	482e      	ldr	r0, [pc, #184]	; (484 <root+0x1c0>)
     3cc:	f000 feb6 	bl	113c <__pi_trigger>
     3d0:	2240      	movs	r2, #64	; 0x40
     3d2:	4b2d      	ldr	r3, [pc, #180]	; (488 <root+0x1c4>)

        // turn off all LEDs
        leds_all(0);

        proceed Show_Menu;
     3d4:	2002      	movs	r0, #2
     3d6:	601a      	str	r2, [r3, #0]
     3d8:	2280      	movs	r2, #128	; 0x80
     3da:	601a      	str	r2, [r3, #0]
        leds_all(0);
     3dc:	4a2b      	ldr	r2, [pc, #172]	; (48c <root+0x1c8>)
     3de:	7813      	ldrb	r3, [r2, #0]
     3e0:	7813      	ldrb	r3, [r2, #0]
     3e2:	f36f 1307 	bfc	r3, #4, #4
     3e6:	7013      	strb	r3, [r2, #0]
        proceed Show_Menu;
     3e8:	f000 fe84 	bl	10f4 <proceed>
     3ec:	b011      	add	sp, #68	; 0x44
     3ee:	bd30      	pop	{r4, r5, pc}
        } else if (choice == 'S' || choice == 's') {
     3f0:	2b53      	cmp	r3, #83	; 0x53
     3f2:	d101      	bne.n	3f8 <root+0x134>
            proceed Stop;
     3f4:	200a      	movs	r0, #10
     3f6:	e78c      	b.n	312 <root+0x4e>
        } else if (choice == 'V' || choice == 'v') {
     3f8:	2b56      	cmp	r3, #86	; 0x56
     3fa:	d101      	bne.n	400 <root+0x13c>
            proceed View_Settings;
     3fc:	2007      	movs	r0, #7
     3fe:	e788      	b.n	312 <root+0x4e>
        } else if (choice == 'M' || choice == 'm') {
     400:	2b4d      	cmp	r3, #77	; 0x4d
     402:	d188      	bne.n	316 <root+0x52>
            proceed Monitor;
     404:	2008      	movs	r0, #8
     406:	e784      	b.n	312 <root+0x4e>
     408:	2240      	movs	r2, #64	; 0x40
     40a:	4b1f      	ldr	r3, [pc, #124]	; (488 <root+0x1c4>)
     40c:	601a      	str	r2, [r3, #0]
     40e:	2280      	movs	r2, #128	; 0x80
     410:	601a      	str	r2, [r3, #0]
            leds_all(0);
     412:	4a1e      	ldr	r2, [pc, #120]	; (48c <root+0x1c8>)
            killall(blinkerCode);
     414:	6820      	ldr	r0, [r4, #0]
            leds_all(0);
     416:	7813      	ldrb	r3, [r2, #0]
     418:	7813      	ldrb	r3, [r2, #0]
     41a:	f36f 1307 	bfc	r3, #4, #4
     41e:	7013      	strb	r3, [r2, #0]
            killall(blinkerCode);
     420:	f000 ffdc 	bl	13dc <killall>
            sint runningNumber = crunning(blinkerCode);
     424:	6820      	ldr	r0, [r4, #0]
     426:	f000 fee3 	bl	11f0 <crunning>
            diag("Number of %d: %d", blinkerCode, runningNumber);
     42a:	6821      	ldr	r1, [r4, #0]
            sint runningNumber = crunning(blinkerCode);
     42c:	4602      	mov	r2, r0
            diag("Number of %d: %d", blinkerCode, runningNumber);
     42e:	4818      	ldr	r0, [pc, #96]	; (490 <root+0x1cc>)
     430:	f001 f87a 	bl	1528 <diag>
            trigger(&stopProcess);
     434:	4813      	ldr	r0, [pc, #76]	; (484 <root+0x1c0>)
     436:	f000 fe81 	bl	113c <__pi_trigger>
            blinkerCode = runfsm blinker;
     43a:	2100      	movs	r1, #0
     43c:	e783      	b.n	346 <root+0x82>
     43e:	f000 fdeb 	bl	1018 <__pi_badstate>
     442:	e7d3      	b.n	3ec <root+0x128>
     444:	00002cc8 	andeq	r2, r0, r8, asr #25
     448:	20000031 	andcs	r0, r0, r1, lsr r0
     44c:	00002cda 	ldrdeq	r2, [r0], -sl
     450:	00002d6b 	andeq	r2, r0, fp, ror #26
     454:	00002d6e 	andeq	r2, r0, lr, ror #26
     458:	20000014 	andcs	r0, r0, r4, lsl r0
     45c:	20000010 	andcs	r0, r0, r0, lsl r0
     460:	000000c9 	andeq	r0, r0, r9, asr #1
     464:	2000000c 	andcs	r0, r0, ip
     468:	20000018 	andcs	r0, r0, r8, lsl r0
     46c:	2000002e 	andcs	r0, r0, lr, lsr #32
     470:	2000001a 	andcs	r0, r0, sl, lsl r0
     474:	00002db2 			; <UNDEFINED> instruction: 0x00002db2
     478:	2000002c 	andcs	r0, r0, ip, lsr #32
     47c:	00002ded 	andeq	r2, r0, sp, ror #27
     480:	20000016 	andcs	r0, r0, r6, lsl r0
     484:	20000030 	andcs	r0, r0, r0, lsr r0
     488:	400220a0 	andmi	r2, r2, r0, lsr #1
     48c:	20000098 	mulcs	r0, r8, r0
     490:	00002da1 	andeq	r2, r0, r1, lsr #27

00000494 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     494:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     496:	4801      	ldr	r0, [pc, #4]	; (49c <devinit_uart+0x8>)
     498:	f000 becc 	b.w	1234 <adddevfunc>
     49c:	000007e1 	andeq	r0, r0, r1, ror #15

000004a0 <udelay>:
void udelay (volatile word n) {
     4a0:	b082      	sub	sp, #8
     4a2:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     4a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     4aa:	b29b      	uxth	r3, r3
     4ac:	b90b      	cbnz	r3, 4b2 <udelay+0x12>
}
     4ae:	b002      	add	sp, #8
     4b0:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     4b2:	2304      	movs	r3, #4
	while (n--);
     4b4:	461a      	mov	r2, r3
     4b6:	3b01      	subs	r3, #1
     4b8:	b29b      	uxth	r3, r3
     4ba:	2a00      	cmp	r2, #0
     4bc:	d1fa      	bne.n	4b4 <udelay+0x14>
		n--;
     4be:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     4c2:	3b01      	subs	r3, #1
     4c4:	b29b      	uxth	r3, r3
     4c6:	f8ad 3006 	strh.w	r3, [sp, #6]
     4ca:	e7ec      	b.n	4a6 <udelay+0x6>

000004cc <mdelay>:
void mdelay (volatile word n) {
     4cc:	b507      	push	{r0, r1, r2, lr}
     4ce:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     4d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     4d6:	b29b      	uxth	r3, r3
     4d8:	b913      	cbnz	r3, 4e0 <mdelay+0x14>
}
     4da:	b003      	add	sp, #12
     4dc:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     4e0:	f240 30e7 	movw	r0, #999	; 0x3e7
     4e4:	f7ff ffdc 	bl	4a0 <udelay>
		n--;
     4e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     4ec:	3b01      	subs	r3, #1
     4ee:	b29b      	uxth	r3, r3
     4f0:	f8ad 3006 	strh.w	r3, [sp, #6]
     4f4:	e7ed      	b.n	4d2 <mdelay+0x6>
	...

000004f8 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     4f8:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     4fa:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     4fc:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     4fe:	d505      	bpl.n	50c <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     500:	4b0a      	ldr	r3, [pc, #40]	; (52c <__pi_ondomain+0x34>)
     502:	78da      	ldrb	r2, [r3, #3]
     504:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     506:	bf84      	itt	hi
     508:	2201      	movhi	r2, #1
     50a:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     50c:	4d08      	ldr	r5, [pc, #32]	; (530 <__pi_ondomain+0x38>)
     50e:	4620      	mov	r0, r4
     510:	682b      	ldr	r3, [r5, #0]
     512:	695b      	ldr	r3, [r3, #20]
     514:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     516:	682b      	ldr	r3, [r5, #0]
     518:	4620      	mov	r0, r4
     51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     51c:	4798      	blx	r3
     51e:	2801      	cmp	r0, #1
     520:	d1f9      	bne.n	516 <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     522:	4b02      	ldr	r3, [pc, #8]	; (52c <__pi_ondomain+0x34>)
     524:	6858      	ldr	r0, [r3, #4]
     526:	4304      	orrs	r4, r0
     528:	605c      	str	r4, [r3, #4]
}
     52a:	bd38      	pop	{r3, r4, r5, pc}
     52c:	20000098 	mulcs	r0, r8, r0
     530:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000534 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     534:	460a      	mov	r2, r1
     536:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     538:	4601      	mov	r1, r0
     53a:	480f      	ldr	r0, [pc, #60]	; (578 <__pi_syserror+0x44>)
     53c:	f000 fff4 	bl	1528 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     540:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     542:	2540      	movs	r5, #64	; 0x40
     544:	462f      	mov	r7, r5
     546:	4e0d      	ldr	r6, [pc, #52]	; (57c <__pi_syserror+0x48>)
     548:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     54a:	490d      	ldr	r1, [pc, #52]	; (580 <__pi_syserror+0x4c>)
     54c:	6037      	str	r7, [r6, #0]
     54e:	6034      	str	r4, [r6, #0]
     550:	780b      	ldrb	r3, [r1, #0]
     552:	780b      	ldrb	r3, [r1, #0]
     554:	20c8      	movs	r0, #200	; 0xc8
     556:	f36f 1307 	bfc	r3, #4, #4
     55a:	700b      	strb	r3, [r1, #0]
     55c:	f7ff ffb6 	bl	4cc <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	4b08      	ldr	r3, [pc, #32]	; (584 <__pi_syserror+0x50>)
     562:	20c8      	movs	r0, #200	; 0xc8
     564:	601d      	str	r5, [r3, #0]
     566:	601c      	str	r4, [r3, #0]
     568:	780b      	ldrb	r3, [r1, #0]
     56a:	780b      	ldrb	r3, [r1, #0]
     56c:	f36f 1307 	bfc	r3, #4, #4
     570:	700b      	strb	r3, [r1, #0]
     572:	f7ff ffab 	bl	4cc <mdelay>
	while (1) {
     576:	e7e7      	b.n	548 <__pi_syserror+0x14>
     578:	00002e09 	andeq	r2, r0, r9, lsl #28
     57c:	40022090 	mulmi	r2, r0, r0
     580:	20000098 	mulcs	r0, r8, r0
     584:	400220a0 	andmi	r2, r2, r0, lsr #1

00000588 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     588:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     58a:	4b0a      	ldr	r3, [pc, #40]	; (5b4 <tci_run_delay_timer+0x2c>)
     58c:	881c      	ldrh	r4, [r3, #0]
     58e:	4b0a      	ldr	r3, [pc, #40]	; (5b8 <tci_run_delay_timer+0x30>)
     590:	8818      	ldrh	r0, [r3, #0]
     592:	4b0a      	ldr	r3, [pc, #40]	; (5bc <tci_run_delay_timer+0x34>)
     594:	1b00      	subs	r0, r0, r4
     596:	b284      	uxth	r4, r0
     598:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59a:	f001 fdc7 	bl	212c <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     59e:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5a0:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5a2:	4b07      	ldr	r3, [pc, #28]	; (5c0 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     5a8:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	6018      	str	r0, [r3, #0]
	sti_tim;
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <tci_run_delay_timer+0x3c>)
     5b0:	601a      	str	r2, [r3, #0]
}
     5b2:	bd10      	pop	{r4, pc}
     5b4:	20000096 	mulcs	r0, r6, r0
     5b8:	20000094 	mulcs	r0, r4, r0
     5bc:	20000046 	andcs	r0, r0, r6, asr #32
     5c0:	40092018 	andmi	r2, r9, r8, lsl r0
     5c4:	43240280 			; <UNDEFINED> instruction: 0x43240280

000005c8 <tci_run_auxiliary_timer>:
	cli_aux;
     5c8:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     5ca:	b510      	push	{r4, lr}
	cli_aux;
     5cc:	4c06      	ldr	r4, [pc, #24]	; (5e8 <tci_run_auxiliary_timer+0x20>)
     5ce:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	f001 fdac 	bl	212c <NOROM_AONRTCCurrent64BitValueGet>
     5d4:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     5d6:	4b05      	ldr	r3, [pc, #20]	; (5ec <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     5dc:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     5de:	6018      	str	r0, [r3, #0]
	sti_aux;
     5e0:	2301      	movs	r3, #1
     5e2:	6023      	str	r3, [r4, #0]
}
     5e4:	bd10      	pop	{r4, pc}
     5e6:	bf00      	nop
     5e8:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     5ec:	40092020 	andmi	r2, r9, r0, lsr #32

000005f0 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     5f0:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f2:	4b3b      	ldr	r3, [pc, #236]	; (6e0 <AONRTCIntHandler+0xf0>)
     5f4:	6818      	ldr	r0, [r3, #0]
     5f6:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     5fa:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     5fe:	d542      	bpl.n	686 <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     600:	4b38      	ldr	r3, [pc, #224]	; (6e4 <AONRTCIntHandler+0xf4>)
     602:	6819      	ldr	r1, [r3, #0]
     604:	2900      	cmp	r1, #0
     606:	d053      	beq.n	6b0 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     608:	880a      	ldrh	r2, [r1, #0]
     60a:	2a00      	cmp	r2, #0
     60c:	d04e      	beq.n	6ac <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     60e:	3a01      	subs	r2, #1
     610:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     612:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     614:	685c      	ldr	r4, [r3, #4]
     616:	b194      	cbz	r4, 63e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     618:	8821      	ldrh	r1, [r4, #0]
     61a:	b111      	cbz	r1, 622 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     61c:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     61e:	3901      	subs	r1, #1
     620:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     622:	689c      	ldr	r4, [r3, #8]
     624:	b15c      	cbz	r4, 63e <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     626:	8821      	ldrh	r1, [r4, #0]
     628:	b111      	cbz	r1, 630 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     62a:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     62c:	3901      	subs	r1, #1
     62e:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     630:	68d9      	ldr	r1, [r3, #12]
     632:	b121      	cbz	r1, 63e <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     634:	880b      	ldrh	r3, [r1, #0]
     636:	b113      	cbz	r3, 63e <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     638:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     63a:	3b01      	subs	r3, #1
     63c:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     63e:	4b2a      	ldr	r3, [pc, #168]	; (6e8 <AONRTCIntHandler+0xf8>)
     640:	7819      	ldrb	r1, [r3, #0]
     642:	0909      	lsrs	r1, r1, #4
     644:	d047      	beq.n	6d6 <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     646:	7859      	ldrb	r1, [r3, #1]
     648:	1c4a      	adds	r2, r1, #1
     64a:	b2d2      	uxtb	r2, r2
     64c:	705a      	strb	r2, [r3, #1]
     64e:	b9d1      	cbnz	r1, 686 <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     650:	781a      	ldrb	r2, [r3, #0]
     652:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     656:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     658:	d02c      	beq.n	6b4 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     65a:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	bf42      	ittt	mi
     65e:	2140      	movmi	r1, #64	; 0x40
     660:	4a22      	ldrmi	r2, [pc, #136]	; (6ec <AONRTCIntHandler+0xfc>)
     662:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     664:	781a      	ldrb	r2, [r3, #0]
     666:	0692      	lsls	r2, r2, #26
     668:	bf42      	ittt	mi
     66a:	2180      	movmi	r1, #128	; 0x80
     66c:	4a1f      	ldrmi	r2, [pc, #124]	; (6ec <AONRTCIntHandler+0xfc>)
     66e:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     670:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     672:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     674:	781a      	ldrb	r2, [r3, #0]
     676:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     67a:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     67c:	781a      	ldrb	r2, [r3, #0]
     67e:	0752      	lsls	r2, r2, #29
     680:	d501      	bpl.n	686 <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     682:	22c8      	movs	r2, #200	; 0xc8
     684:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     686:	07c3      	lsls	r3, r0, #31
     688:	d50f      	bpl.n	6aa <AONRTCIntHandler+0xba>
		cli_tim;
     68a:	2100      	movs	r1, #0
     68c:	4b18      	ldr	r3, [pc, #96]	; (6f0 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     68e:	4a19      	ldr	r2, [pc, #100]	; (6f4 <AONRTCIntHandler+0x104>)
     690:	4819      	ldr	r0, [pc, #100]	; (6f8 <AONRTCIntHandler+0x108>)
		cli_tim;
     692:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     694:	8803      	ldrh	r3, [r0, #0]
     696:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     698:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     69a:	4423      	add	r3, r4
		RISE_N_SHINE;
     69c:	4a12      	ldr	r2, [pc, #72]	; (6e8 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     69e:	b29b      	uxth	r3, r3
     6a0:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     6a2:	7813      	ldrb	r3, [r2, #0]
     6a4:	f043 0302 	orr.w	r3, r3, #2
     6a8:	7013      	strb	r3, [r2, #0]
}
     6aa:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     6ac:	2201      	movs	r2, #1
     6ae:	e7b1      	b.n	614 <AONRTCIntHandler+0x24>
     6b0:	2201      	movs	r2, #1
     6b2:	e7c4      	b.n	63e <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     6b4:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b6:	bf42      	ittt	mi
     6b8:	2140      	movmi	r1, #64	; 0x40
     6ba:	4a10      	ldrmi	r2, [pc, #64]	; (6fc <AONRTCIntHandler+0x10c>)
     6bc:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     6be:	781a      	ldrb	r2, [r3, #0]
     6c0:	0691      	lsls	r1, r2, #26
     6c2:	bf42      	ittt	mi
     6c4:	2180      	movmi	r1, #128	; 0x80
     6c6:	4a0d      	ldrmi	r2, [pc, #52]	; (6fc <AONRTCIntHandler+0x10c>)
     6c8:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     6ca:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     6cc:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     6ce:	781a      	ldrb	r2, [r3, #0]
     6d0:	f042 0208 	orr.w	r2, r2, #8
     6d4:	e7d1      	b.n	67a <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     6d6:	2a00      	cmp	r2, #0
     6d8:	d0d5      	beq.n	686 <AONRTCIntHandler+0x96>
			cli_aux;
     6da:	4b09      	ldr	r3, [pc, #36]	; (700 <AONRTCIntHandler+0x110>)
     6dc:	6019      	str	r1, [r3, #0]
     6de:	e7d2      	b.n	686 <AONRTCIntHandler+0x96>
     6e0:	40092004 	andmi	r2, r9, r4
     6e4:	200000a4 	andcs	r0, r0, r4, lsr #1
     6e8:	20000098 	mulcs	r0, r8, r0
     6ec:	40022090 	mulmi	r2, r0, r0
     6f0:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6f4:	20000046 	andcs	r0, r0, r6, asr #32
     6f8:	200000a0 	andcs	r0, r0, r0, lsr #1
     6fc:	400220a0 	andmi	r2, r2, r0, lsr #1
     700:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000704 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     706:	2600      	movs	r6, #0
     708:	4b0e      	ldr	r3, [pc, #56]	; (744 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     70a:	4f0f      	ldr	r7, [pc, #60]	; (748 <tci_update_delay_ticks+0x44>)
	cli_tim;
     70c:	601e      	str	r6, [r3, #0]
	if (setdel) {
     70e:	883d      	ldrh	r5, [r7, #0]
     710:	b19d      	cbz	r5, 73a <tci_update_delay_ticks+0x36>
		if (force) {
     712:	b1a0      	cbz	r0, 73e <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	4b0d      	ldr	r3, [pc, #52]	; (74c <tci_update_delay_ticks+0x48>)
     716:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	f001 fd08 	bl	212c <NOROM_AONRTCCurrent64BitValueGet>
     71c:	0d80      	lsrs	r0, r0, #22
     71e:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     722:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     726:	b280      	uxth	r0, r0
     728:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     72a:	1b2c      	subs	r4, r5, r4
	return NO;
     72c:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     72e:	4b08      	ldr	r3, [pc, #32]	; (750 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     730:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     732:	881a      	ldrh	r2, [r3, #0]
     734:	4414      	add	r4, r2
     736:	b2a4      	uxth	r4, r4
     738:	801c      	strh	r4, [r3, #0]
}
     73a:	4628      	mov	r0, r5
     73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     73e:	2501      	movs	r5, #1
     740:	601d      	str	r5, [r3, #0]
		return YES;
     742:	e7fa      	b.n	73a <tci_update_delay_ticks+0x36>
     744:	43240280 			; <UNDEFINED> instruction: 0x43240280
     748:	20000046 	andcs	r0, r0, r6, asr #32
     74c:	40092018 	andmi	r2, r9, r8, lsl r0
     750:	200000a0 	andcs	r0, r0, r0, lsr #1

00000754 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     756:	4e0f      	ldr	r6, [pc, #60]	; (794 <__pi_uart_setrate+0x40>)
     758:	4d0f      	ldr	r5, [pc, #60]	; (798 <__pi_uart_setrate+0x44>)
     75a:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     75e:	68db      	ldr	r3, [r3, #12]
     760:	4628      	mov	r0, r5
     762:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     764:	2264      	movs	r2, #100	; 0x64
     766:	6833      	ldr	r3, [r6, #0]
     768:	4628      	mov	r0, r5
     76a:	4362      	muls	r2, r4
     76c:	685e      	ldr	r6, [r3, #4]
     76e:	490b      	ldr	r1, [pc, #44]	; (79c <__pi_uart_setrate+0x48>)
     770:	2360      	movs	r3, #96	; 0x60
     772:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	4a0a      	ldr	r2, [pc, #40]	; (7a0 <__pi_uart_setrate+0x4c>)
}
     776:	2001      	movs	r0, #1
     778:	6813      	ldr	r3, [r2, #0]
     77a:	f043 0310 	orr.w	r3, r3, #16
     77e:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	6853      	ldr	r3, [r2, #4]
     782:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     786:	f043 0301 	orr.w	r3, r3, #1
     78a:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     78c:	4b05      	ldr	r3, [pc, #20]	; (7a4 <__pi_uart_setrate+0x50>)
     78e:	801c      	strh	r4, [r3, #0]
}
     790:	bd70      	pop	{r4, r5, r6, pc}
     792:	bf00      	nop
     794:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     798:	40001000 	andmi	r1, r0, r0
     79c:	02dc6c00 	sbcseq	r6, ip, #0, 24
     7a0:	4000102c 	andmi	r1, r0, ip, lsr #32
     7a4:	20000048 	andcs	r0, r0, r8, asr #32

000007a8 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	4a08      	ldr	r2, [pc, #32]	; (7cc <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     7aa:	4909      	ldr	r1, [pc, #36]	; (7d0 <reinit_uart+0x28>)
     7ac:	6813      	ldr	r3, [r2, #0]
     7ae:	f043 0310 	orr.w	r3, r3, #16
     7b2:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	2212      	movs	r2, #18
     7b6:	4b07      	ldr	r3, [pc, #28]	; (7d4 <reinit_uart+0x2c>)
     7b8:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7ba:	4a07      	ldr	r2, [pc, #28]	; (7d8 <reinit_uart+0x30>)
     7bc:	6813      	ldr	r3, [r2, #0]
     7be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     7c2:	6013      	str	r3, [r2, #0]
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <reinit_uart+0x34>)
     7c6:	8818      	ldrh	r0, [r3, #0]
     7c8:	f7ff bfc4 	b.w	754 <__pi_uart_setrate>
     7cc:	4000102c 	andmi	r1, r0, ip, lsr #32
     7d0:	20000084 	andcs	r0, r0, r4, lsl #1
     7d4:	40001034 	andmi	r1, r0, r4, lsr r0
     7d8:	40001030 	andmi	r1, r0, r0, lsr r0
     7dc:	20000048 	andcs	r0, r0, r8, asr #32

000007e0 <ioreq_uart_a>:
	switch (operation) {
     7e0:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     7e6:	460d      	mov	r5, r1
     7e8:	4614      	mov	r4, r2
     7ea:	2803      	cmp	r0, #3
     7ec:	d86e      	bhi.n	8cc <ioreq_uart_a+0xec>
     7ee:	e8df f000 	tbb	[pc, r0]
     7f2:	5a471253 	bpl	11c5146 <__ccfg+0x11a519e>
				*buf++ = uart_a_read;
     7f6:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     7fa:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     7fc:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     800:	b11e      	cbz	r6, 80a <ioreq_uart_a+0x2a>
     802:	f8d8 3000 	ldr.w	r3, [r8]
     806:	06d8      	lsls	r0, r3, #27
     808:	d5f5      	bpl.n	7f6 <ioreq_uart_a+0x16>
			if (len != operation) {
     80a:	42a6      	cmp	r6, r4
     80c:	d00a      	beq.n	824 <ioreq_uart_a+0x44>
				return operation - len;
     80e:	1ba4      	subs	r4, r4, r6
}
     810:	4620      	mov	r0, r4
     812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     816:	4616      	mov	r6, r2
			uart_a_disable_int;
     818:	4f2e      	ldr	r7, [pc, #184]	; (8d4 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     81a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8e8 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     81e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8ec <ioreq_uart_a+0x10c>
     822:	e7ed      	b.n	800 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     824:	683b      	ldr	r3, [r7, #0]
     826:	2015      	movs	r0, #21
     828:	695b      	ldr	r3, [r3, #20]
     82a:	4798      	blx	r3
			if (uart_a_char_available) {
     82c:	f8d8 3000 	ldr.w	r3, [r8]
     830:	06d9      	lsls	r1, r3, #27
     832:	d404      	bmi.n	83e <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     834:	683b      	ldr	r3, [r7, #0]
     836:	2015      	movs	r0, #21
     838:	691b      	ldr	r3, [r3, #16]
     83a:	4798      	blx	r3
				goto Redo_rx;
     83c:	e7e0      	b.n	800 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     83e:	4a26      	ldr	r2, [pc, #152]	; (8d8 <ioreq_uart_a+0xf8>)
     840:	7993      	ldrb	r3, [r2, #6]
     842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     846:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     84a:	7193      	strb	r3, [r2, #6]
			return -2;
     84c:	e7e0      	b.n	810 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     84e:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     852:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     854:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     858:	b11e      	cbz	r6, 862 <ioreq_uart_a+0x82>
     85a:	f8d8 3000 	ldr.w	r3, [r8]
     85e:	069a      	lsls	r2, r3, #26
     860:	d5f5      	bpl.n	84e <ioreq_uart_a+0x6e>
			if (len != operation) {
     862:	42a6      	cmp	r6, r4
     864:	d1d3      	bne.n	80e <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     866:	683b      	ldr	r3, [r7, #0]
     868:	2015      	movs	r0, #21
     86a:	695b      	ldr	r3, [r3, #20]
     86c:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     86e:	f8d8 3000 	ldr.w	r3, [r8]
     872:	069b      	lsls	r3, r3, #26
     874:	d40b      	bmi.n	88e <ioreq_uart_a+0xae>
				uart_a_enable_int;
     876:	683b      	ldr	r3, [r7, #0]
     878:	2015      	movs	r0, #21
     87a:	691b      	ldr	r3, [r3, #16]
     87c:	4798      	blx	r3
				goto Redo_tx;
     87e:	e7eb      	b.n	858 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     880:	4616      	mov	r6, r2
			uart_a_disable_int;
     882:	4f14      	ldr	r7, [pc, #80]	; (8d4 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     884:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8e8 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     888:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8ec <ioreq_uart_a+0x10c>
     88c:	e7e4      	b.n	858 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     88e:	4a12      	ldr	r2, [pc, #72]	; (8d8 <ioreq_uart_a+0xf8>)
     890:	7993      	ldrb	r3, [r2, #6]
     892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     896:	e7d6      	b.n	846 <ioreq_uart_a+0x66>
			uart_a_enable_int;
     898:	4b0e      	ldr	r3, [pc, #56]	; (8d4 <ioreq_uart_a+0xf4>)
     89a:	2015      	movs	r0, #21
     89c:	681b      	ldr	r3, [r3, #0]
			return 0;
     89e:	2400      	movs	r4, #0
			uart_a_enable_int;
     8a0:	691b      	ldr	r3, [r3, #16]
     8a2:	4798      	blx	r3
			return 0;
     8a4:	e7b4      	b.n	810 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     8a6:	2a01      	cmp	r2, #1
     8a8:	d109      	bne.n	8be <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     8aa:	490b      	ldr	r1, [pc, #44]	; (8d8 <ioreq_uart_a+0xf8>)
     8ac:	8828      	ldrh	r0, [r5, #0]
     8ae:	f7ff ff51 	bl	754 <__pi_uart_setrate>
     8b2:	2800      	cmp	r0, #0
     8b4:	d1ac      	bne.n	810 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     8b6:	2003      	movs	r0, #3
     8b8:	4908      	ldr	r1, [pc, #32]	; (8dc <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     8ba:	f7ff fe3b 	bl	534 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     8be:	2a02      	cmp	r2, #2
     8c0:	d104      	bne.n	8cc <ioreq_uart_a+0xec>
	return urates [0];
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <ioreq_uart_a+0x100>)
				return 1;
     8c4:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c6:	881b      	ldrh	r3, [r3, #0]
     8c8:	800b      	strh	r3, [r1, #0]
				return 1;
     8ca:	e7a1      	b.n	810 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     8cc:	2002      	movs	r0, #2
     8ce:	4905      	ldr	r1, [pc, #20]	; (8e4 <ioreq_uart_a+0x104>)
     8d0:	e7f3      	b.n	8ba <ioreq_uart_a+0xda>
     8d2:	bf00      	nop
     8d4:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     8d8:	20000084 	andcs	r0, r0, r4, lsl #1
     8dc:	00002e18 	andeq	r2, r0, r8, lsl lr
     8e0:	20000048 	andcs	r0, r0, r8, asr #32
     8e4:	00002e1c 	andeq	r2, r0, ip, lsl lr
     8e8:	40001018 	andmi	r1, r0, r8, lsl r0
     8ec:	40001000 	andmi	r1, r0, r0

000008f0 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     8f4:	b530      	push	{r4, r5, lr}
     8f6:	4b29      	ldr	r3, [pc, #164]	; (99c <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	4c29      	ldr	r4, [pc, #164]	; (9a0 <UART0IntHandler+0xb0>)
     8fa:	601a      	str	r2, [r3, #0]
     8fc:	6822      	ldr	r2, [r4, #0]
     8fe:	06d5      	lsls	r5, r2, #27
     900:	d423      	bmi.n	94a <UART0IntHandler+0x5a>
     902:	4b28      	ldr	r3, [pc, #160]	; (9a4 <UART0IntHandler+0xb4>)
     904:	799a      	ldrb	r2, [r3, #6]
     906:	0610      	lsls	r0, r2, #24
     908:	d51f      	bpl.n	94a <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90a:	799a      	ldrb	r2, [r3, #6]
     90c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     910:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     912:	4a25      	ldr	r2, [pc, #148]	; (9a8 <UART0IntHandler+0xb8>)
     914:	7813      	ldrb	r3, [r2, #0]
     916:	f043 0302 	orr.w	r3, r3, #2
     91a:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     91c:	4b23      	ldr	r3, [pc, #140]	; (9ac <UART0IntHandler+0xbc>)
     91e:	681a      	ldr	r2, [r3, #0]
     920:	b19a      	cbz	r2, 94a <UART0IntHandler+0x5a>
     922:	4610      	mov	r0, r2
     924:	2300      	movs	r3, #0
     926:	f830 1b10 	ldrh.w	r1, [r0], #16
     92a:	f001 0107 	and.w	r1, r1, #7
     92e:	4299      	cmp	r1, r3
     930:	dd09      	ble.n	946 <UART0IntHandler+0x56>
     932:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     936:	3301      	adds	r3, #1
     938:	f515 7f81 	cmn.w	r5, #258	; 0x102
     93c:	d1f7      	bne.n	92e <UART0IntHandler+0x3e>
     93e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     942:	889b      	ldrh	r3, [r3, #4]
     944:	8013      	strh	r3, [r2, #0]
     946:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     948:	e7ea      	b.n	920 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94a:	6823      	ldr	r3, [r4, #0]
     94c:	0699      	lsls	r1, r3, #26
     94e:	d424      	bmi.n	99a <UART0IntHandler+0xaa>
     950:	4b14      	ldr	r3, [pc, #80]	; (9a4 <UART0IntHandler+0xb4>)
     952:	799a      	ldrb	r2, [r3, #6]
     954:	0652      	lsls	r2, r2, #25
     956:	d520      	bpl.n	99a <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     958:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	799a      	ldrb	r2, [r3, #6]
     95e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     962:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     964:	4a10      	ldr	r2, [pc, #64]	; (9a8 <UART0IntHandler+0xb8>)
     966:	7813      	ldrb	r3, [r2, #0]
     968:	f043 0302 	orr.w	r3, r3, #2
     96c:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     96e:	4b0f      	ldr	r3, [pc, #60]	; (9ac <UART0IntHandler+0xbc>)
     970:	681a      	ldr	r2, [r3, #0]
     972:	b192      	cbz	r2, 99a <UART0IntHandler+0xaa>
     974:	4610      	mov	r0, r2
     976:	2300      	movs	r3, #0
     978:	f830 1b10 	ldrh.w	r1, [r0], #16
     97c:	f001 0107 	and.w	r1, r1, #7
     980:	4299      	cmp	r1, r3
     982:	dd08      	ble.n	996 <UART0IntHandler+0xa6>
     984:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     988:	3301      	adds	r3, #1
     98a:	42a5      	cmp	r5, r4
     98c:	d1f8      	bne.n	980 <UART0IntHandler+0x90>
     98e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     992:	889b      	ldrh	r3, [r3, #4]
     994:	8013      	strh	r3, [r2, #0]
     996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     998:	e7eb      	b.n	972 <UART0IntHandler+0x82>
	}

	RTNI;
}
     99a:	bd30      	pop	{r4, r5, pc}
     99c:	40001044 	andmi	r1, r0, r4, asr #32
     9a0:	40001018 	andmi	r1, r0, r8, lsl r0
     9a4:	20000084 	andcs	r0, r0, r4, lsl #1
     9a8:	20000098 	mulcs	r0, r8, r0
     9ac:	2000004c 	andcs	r0, r0, ip, asr #32

000009b0 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     9b6:	4e0c      	ldr	r6, [pc, #48]	; (9e8 <__buttons_setirq+0x38>)
     9b8:	4d0c      	ldr	r5, [pc, #48]	; (9ec <__buttons_setirq+0x3c>)
     9ba:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	4c0c      	ldr	r4, [pc, #48]	; (9f0 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     9be:	0a1b      	lsrs	r3, r3, #8
     9c0:	fa01 f203 	lsl.w	r2, r1, r3
     9c4:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9c6:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9ca:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     9ce:	0a1b      	lsrs	r3, r3, #8
     9d0:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9d2:	01db      	lsls	r3, r3, #7
     9d4:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     9d8:	4322      	orrs	r2, r4
     9da:	4323      	orrs	r3, r4
     9dc:	6010      	str	r0, [r2, #0]
     9de:	6029      	str	r1, [r5, #0]
     9e0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     9e2:	b662      	cpsie	i
			val;
	}
	sti;
}
     9e4:	bd70      	pop	{r4, r5, r6, pc}
     9e6:	bf00      	nop
     9e8:	00002f04 	andeq	r2, r0, r4, lsl #30
     9ec:	400220e0 	andmi	r2, r2, r0, ror #1
     9f0:	42000048 	andmi	r0, r0, #72	; 0x48

000009f4 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     9f6:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	2200      	movs	r2, #0
     9fa:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	4f09      	ldr	r7, [pc, #36]	; (a24 <__pinlist_setirq+0x30>)
     9fe:	4c0a      	ldr	r4, [pc, #40]	; (a28 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	490a      	ldr	r1, [pc, #40]	; (a2c <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a02:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     a04:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a0a:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a0e:	01db      	lsls	r3, r3, #7
     a10:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     a14:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     a16:	2a04      	cmp	r2, #4
     a18:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a1a:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     a1c:	d1f1      	bne.n	a02 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     a1e:	b662      	cpsie	i
			val;
	}
	sti;
}
     a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a22:	bf00      	nop
     a24:	00002f00 	andeq	r2, r0, r0, lsl #30
     a28:	400220e0 	andmi	r2, r2, r0, ror #1
     a2c:	42000048 	andmi	r0, r0, #72	; 0x48

00000a30 <GPIOIntHandler>:
void GPIOIntHandler () {
     a30:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     a32:	4c23      	ldr	r4, [pc, #140]	; (ac0 <GPIOIntHandler+0x90>)
     a34:	6822      	ldr	r2, [r4, #0]
     a36:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     a3a:	d01e      	beq.n	a7a <GPIOIntHandler+0x4a>
	buttons_disable ();
     a3c:	2000      	movs	r0, #0
     a3e:	f7ff ffb7 	bl	9b0 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     a42:	4b20      	ldr	r3, [pc, #128]	; (ac4 <GPIOIntHandler+0x94>)
     a44:	4d20      	ldr	r5, [pc, #128]	; (ac8 <GPIOIntHandler+0x98>)
     a46:	681a      	ldr	r2, [r3, #0]
     a48:	b192      	cbz	r2, a70 <GPIOIntHandler+0x40>
     a4a:	4610      	mov	r0, r2
     a4c:	2300      	movs	r3, #0
     a4e:	f830 1b10 	ldrh.w	r1, [r0], #16
     a52:	f001 0107 	and.w	r1, r1, #7
     a56:	4299      	cmp	r1, r3
     a58:	dd08      	ble.n	a6c <GPIOIntHandler+0x3c>
     a5a:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     a5e:	3301      	adds	r3, #1
     a60:	42ae      	cmp	r6, r5
     a62:	d1f8      	bne.n	a56 <GPIOIntHandler+0x26>
     a64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     a68:	889b      	ldrh	r3, [r3, #4]
     a6a:	8013      	strh	r3, [r2, #0]
     a6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     a6e:	e7eb      	b.n	a48 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     a70:	4a16      	ldr	r2, [pc, #88]	; (acc <GPIOIntHandler+0x9c>)
     a72:	7813      	ldrb	r3, [r2, #0]
     a74:	f043 0302 	orr.w	r3, r3, #2
     a78:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     a7a:	6823      	ldr	r3, [r4, #0]
     a7c:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     a80:	d01d      	beq.n	abe <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     a82:	4b10      	ldr	r3, [pc, #64]	; (ac4 <GPIOIntHandler+0x94>)
     a84:	4c12      	ldr	r4, [pc, #72]	; (ad0 <GPIOIntHandler+0xa0>)
     a86:	6818      	ldr	r0, [r3, #0]
     a88:	b190      	cbz	r0, ab0 <GPIOIntHandler+0x80>
     a8a:	4601      	mov	r1, r0
     a8c:	2300      	movs	r3, #0
     a8e:	f831 2b10 	ldrh.w	r2, [r1], #16
     a92:	f002 0207 	and.w	r2, r2, #7
     a96:	429a      	cmp	r2, r3
     a98:	dd08      	ble.n	aac <GPIOIntHandler+0x7c>
     a9a:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     a9e:	3301      	adds	r3, #1
     aa0:	42a5      	cmp	r5, r4
     aa2:	d1f8      	bne.n	a96 <GPIOIntHandler+0x66>
     aa4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     aa8:	889b      	ldrh	r3, [r3, #4]
     aaa:	8003      	strh	r3, [r0, #0]
     aac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     aae:	e7eb      	b.n	a88 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     ab0:	f7ff ffa0 	bl	9f4 <__pinlist_setirq>
	RISE_N_SHINE;
     ab4:	4a05      	ldr	r2, [pc, #20]	; (acc <GPIOIntHandler+0x9c>)
     ab6:	7813      	ldrb	r3, [r2, #0]
     ab8:	f043 0302 	orr.w	r3, r3, #2
     abc:	7013      	strb	r3, [r2, #0]
}
     abe:	bd70      	pop	{r4, r5, r6, pc}
     ac0:	400220e0 	andmi	r2, r2, r0, ror #1
     ac4:	2000004c 	andcs	r0, r0, ip, asr #32
     ac8:	00002f04 	andeq	r2, r0, r4, lsl #30
     acc:	20000098 	mulcs	r0, r8, r0
     ad0:	00002f00 	andeq	r2, r0, r0, lsl #30

00000ad4 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	4c58      	ldr	r4, [pc, #352]	; (c3c <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     ada:	2004      	movs	r0, #4
     adc:	f7ff fd0c 	bl	4f8 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	6823      	ldr	r3, [r4, #0]
     ae2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     ae6:	69db      	ldr	r3, [r3, #28]
     ae8:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aea:	6823      	ldr	r3, [r4, #0]
     aec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     af2:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	6823      	ldr	r3, [r4, #0]
     af6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     afc:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     afe:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	2600      	movs	r6, #0
     b02:	4c4f      	ldr	r4, [pc, #316]	; (c40 <system_init+0x16c>)
     b04:	4f4f      	ldr	r7, [pc, #316]	; (c44 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b06:	f8df c17c 	ldr.w	ip, [pc, #380]	; c84 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0a:	f8df e17c 	ldr.w	lr, [pc, #380]	; c88 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b0e:	f8df 8140 	ldr.w	r8, [pc, #320]	; c50 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b12:	f8df 9134 	ldr.w	r9, [pc, #308]	; c48 <system_init+0x174>
     b16:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     b1e:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b22:	0091      	lsls	r1, r2, #2
     b24:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     b28:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     b2c:	ea05 0a0c 	and.w	sl, r5, ip
     b30:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     b34:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b36:	bf44      	itt	mi
     b38:	ea41 010e 	orrmi.w	r1, r1, lr
     b3c:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     b3e:	fa03 f202 	lsl.w	r2, r3, r2
     b42:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	bf4c      	ite	mi
     b46:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4a:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b4e:	2e11      	cmp	r6, #17
     b50:	d1e2      	bne.n	b18 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b52:	2540      	movs	r5, #64	; 0x40
     b54:	2680      	movs	r6, #128	; 0x80
     b56:	4b3c      	ldr	r3, [pc, #240]	; (c48 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     b58:	493c      	ldr	r1, [pc, #240]	; (c4c <system_init+0x178>)
     b5a:	601d      	str	r5, [r3, #0]
     b5c:	601e      	str	r6, [r3, #0]
     b5e:	780b      	ldrb	r3, [r1, #0]
     b60:	780b      	ldrb	r3, [r1, #0]
     b62:	20c8      	movs	r0, #200	; 0xc8
     b64:	f36f 1307 	bfc	r3, #4, #4
     b68:	700b      	strb	r3, [r1, #0]
     b6a:	f7ff fcaf 	bl	4cc <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b6e:	4b38      	ldr	r3, [pc, #224]	; (c50 <system_init+0x17c>)
     b70:	20c8      	movs	r0, #200	; 0xc8
     b72:	601d      	str	r5, [r3, #0]
     b74:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b76:	2601      	movs	r6, #1
	all_leds_blink;
     b78:	780b      	ldrb	r3, [r1, #0]
     b7a:	780b      	ldrb	r3, [r1, #0]
     b7c:	f36f 1307 	bfc	r3, #4, #4
     b80:	700b      	strb	r3, [r1, #0]
     b82:	f7ff fca3 	bl	4cc <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     b86:	4b33      	ldr	r3, [pc, #204]	; (c54 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	4a33      	ldr	r2, [pc, #204]	; (c58 <system_init+0x184>)
     b8a:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	4b33      	ldr	r3, [pc, #204]	; (c5c <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     b8e:	4d34      	ldr	r5, [pc, #208]	; (c60 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b90:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b92:	4b34      	ldr	r3, [pc, #208]	; (c64 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     b94:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b96:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     b98:	682b      	ldr	r3, [r5, #0]
     b9a:	691b      	ldr	r3, [r3, #16]
     b9c:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     b9e:	f000 fba9 	bl	12f4 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     ba2:	682b      	ldr	r3, [r5, #0]
     ba4:	2010      	movs	r0, #16
     ba6:	691b      	ldr	r3, [r3, #16]
     ba8:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     baa:	2002      	movs	r0, #2
     bac:	f7ff fca4 	bl	4f8 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	68ab      	ldr	r3, [r5, #8]
     bb2:	f44f 7000 	mov.w	r0, #512	; 0x200
     bb6:	69db      	ldr	r3, [r3, #28]
     bb8:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bba:	68ab      	ldr	r3, [r5, #8]
     bbc:	f44f 7000 	mov.w	r0, #512	; 0x200
     bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     bc2:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	68ab      	ldr	r3, [r5, #8]
     bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
     bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     bcc:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     bce:	2260      	movs	r2, #96	; 0x60
     bd0:	4b25      	ldr	r3, [pc, #148]	; (c68 <system_init+0x194>)
     bd2:	6026      	str	r6, [r4, #0]
     bd4:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     bd6:	f7ff fde7 	bl	7a8 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     bda:	f000 fe07 	bl	17ec <ee_open>
     bde:	f000 fe0f 	bl	1800 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be2:	f001 ff9f 	bl	2b24 <NOROM_SysCtrlResetSourceGet>
     be6:	2808      	cmp	r0, #8
     be8:	d11a      	bne.n	c20 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     bea:	4b20      	ldr	r3, [pc, #128]	; (c6c <system_init+0x198>)
     bec:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     bf2:	3b04      	subs	r3, #4
     bf4:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     bfa:	3324      	adds	r3, #36	; 0x24
     bfc:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     bfe:	2000      	movs	r0, #0
     c00:	f7ff fc48 	bl	494 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	4a1a      	ldr	r2, [pc, #104]	; (c70 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     c06:	2015      	movs	r0, #21
     c08:	6813      	ldr	r3, [r2, #0]
     c0a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     c0e:	6013      	str	r3, [r2, #0]
     c10:	4b13      	ldr	r3, [pc, #76]	; (c60 <system_init+0x18c>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	691b      	ldr	r3, [r3, #16]
     c16:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     c1c:	f7ff bcd4 	b.w	5c8 <tci_run_auxiliary_timer>
		diag ("");
     c20:	4814      	ldr	r0, [pc, #80]	; (c74 <system_init+0x1a0>)
     c22:	f000 fc81 	bl	1528 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c26:	4814      	ldr	r0, [pc, #80]	; (c78 <system_init+0x1a4>)
     c28:	f000 fc7e 	bl	1528 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	4913      	ldr	r1, [pc, #76]	; (c7c <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     c2e:	4814      	ldr	r0, [pc, #80]	; (c80 <system_init+0x1ac>)
     c30:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     c34:	b289      	uxth	r1, r1
     c36:	f000 fc77 	bl	1528 <diag>
     c3a:	e7e0      	b.n	bfe <system_init+0x12a>
     c3c:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     c40:	60082028 	andvs	r2, r8, r8, lsr #32
     c44:	00002e88 	andeq	r2, r0, r8, lsl #29
     c48:	40022090 	mulmi	r2, r0, r0
     c4c:	20000098 	mulcs	r0, r8, r0
     c50:	400220a0 	andmi	r2, r2, r0, lsr #1
     c54:	40092024 	andmi	r2, r9, r4, lsr #32
     c58:	00050003 	andeq	r0, r5, r3
     c5c:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     c60:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     c64:	40092000 	andmi	r2, r9, r0
     c68:	20000048 	andcs	r0, r0, r8, asr #32
     c6c:	4009400c 	andmi	r4, r9, ip
     c70:	40001038 	andmi	r1, r0, r8, lsr r0
     c74:	00002dec 	andeq	r2, r0, ip, ror #27
     c78:	00002e20 	andeq	r2, r0, r0, lsr #28
     c7c:	200000b8 	strhcs	r0, [r0], -r8
     c80:	00002e6c 	andeq	r2, r0, ip, ror #28
     c84:	7f077f3f 	svcvc	0x00077f3f
     c88:	42441a00 	submi	r1, r4, #0, 20

00000c8c <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     c8c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     c90:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c92:	4b79      	ldr	r3, [pc, #484]	; (e78 <__pi_release+0x1ec>)
     c94:	af00      	add	r7, sp, #0
     c96:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     c9a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     c9e:	681a      	ldr	r2, [r3, #0]
     ca0:	4b76      	ldr	r3, [pc, #472]	; (e7c <__pi_release+0x1f0>)
     ca2:	429a      	cmp	r2, r3
     ca4:	d127      	bne.n	cf6 <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ca6:	4e76      	ldr	r6, [pc, #472]	; (e80 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     ca8:	2100      	movs	r1, #0
     caa:	f64f 70ff 	movw	r0, #65535	; 0xffff
     cae:	f000 f9bb 	bl	1028 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     cb2:	4a74      	ldr	r2, [pc, #464]	; (e84 <__pi_release+0x1f8>)
     cb4:	4b74      	ldr	r3, [pc, #464]	; (e88 <__pi_release+0x1fc>)
     cb6:	6812      	ldr	r2, [r2, #0]
     cb8:	601a      	str	r2, [r3, #0]
     cba:	681a      	ldr	r2, [r3, #0]
     cbc:	b9fa      	cbnz	r2, cfe <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cbe:	4c73      	ldr	r4, [pc, #460]	; (e8c <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     cc2:	4d73      	ldr	r5, [pc, #460]	; (e90 <__pi_release+0x204>)
     cc4:	782b      	ldrb	r3, [r5, #0]
     cc6:	f3c3 0240 	ubfx	r2, r3, #1, #1
     cca:	0798      	lsls	r0, r3, #30
     ccc:	607a      	str	r2, [r7, #4]
     cce:	f100 80cd 	bmi.w	e6c <__pi_release+0x1e0>
	system_event_count ++;
     cd2:	4a70      	ldr	r2, [pc, #448]	; (e94 <__pi_release+0x208>)
     cd4:	6813      	ldr	r3, [r2, #0]
     cd6:	3301      	adds	r3, #1
     cd8:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     cda:	78ea      	ldrb	r2, [r5, #3]
     cdc:	2a01      	cmp	r2, #1
     cde:	b2d3      	uxtb	r3, r2
     ce0:	d017      	beq.n	d12 <__pi_release+0x86>
     ce2:	2b02      	cmp	r3, #2
     ce4:	d031      	beq.n	d4a <__pi_release+0xbe>
     ce6:	2b00      	cmp	r3, #0
     ce8:	f040 8095 	bne.w	e16 <__pi_release+0x18a>
			__WFI ();
     cec:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     cee:	b662      	cpsie	i
     cf0:	bf00      	nop
     cf2:	bf00      	nop
     cf4:	e7e4      	b.n	cc0 <__pi_release+0x34>
	check_stack_overflow;
     cf6:	200b      	movs	r0, #11
     cf8:	4967      	ldr	r1, [pc, #412]	; (e98 <__pi_release+0x20c>)
     cfa:	f7ff fc1b 	bl	534 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     cfe:	6851      	ldr	r1, [r2, #4]
     d00:	b129      	cbz	r1, d0e <__pi_release+0x82>
     d02:	8810      	ldrh	r0, [r2, #0]
     d04:	0704      	lsls	r4, r0, #28
     d06:	d102      	bne.n	d0e <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	0900      	lsrs	r0, r0, #4
     d0a:	4788      	blx	r1
			goto Redo;
     d0c:	e7cc      	b.n	ca8 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     d0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     d10:	e7d2      	b.n	cb8 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d12:	4a62      	ldr	r2, [pc, #392]	; (e9c <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d16:	6813      	ldr	r3, [r2, #0]
     d18:	f043 0301 	orr.w	r3, r3, #1
     d1c:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d1e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     d22:	f043 0303 	orr.w	r3, r3, #3
     d26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2a:	4b5d      	ldr	r3, [pc, #372]	; (ea0 <__pi_release+0x214>)
     d2c:	681b      	ldr	r3, [r3, #0]
     d2e:	699b      	ldr	r3, [r3, #24]
     d30:	4798      	blx	r3
     d32:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	6823      	ldr	r3, [r4, #0]
     d36:	f043 0304 	orr.w	r3, r3, #4
     d3a:	6023      	str	r3, [r4, #0]
			__WFI ();
     d3c:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d3e:	6823      	ldr	r3, [r4, #0]
     d40:	f023 0304 	bic.w	r3, r3, #4
     d44:	6023      	str	r3, [r4, #0]
     d46:	6833      	ldr	r3, [r6, #0]
}
     d48:	e7d1      	b.n	cee <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4a:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d4e:	687a      	ldr	r2, [r7, #4]
     d50:	4b54      	ldr	r3, [pc, #336]	; (ea4 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d52:	f8df b188 	ldr.w	fp, [pc, #392]	; edc <__pi_release+0x250>
     d56:	601a      	str	r2, [r3, #0]
     d58:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5a:	f8df a144 	ldr.w	sl, [pc, #324]	; ea0 <__pi_release+0x214>
     d5e:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d62:	6833      	ldr	r3, [r6, #0]
     d64:	4b50      	ldr	r3, [pc, #320]	; (ea8 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d66:	f8df 9178 	ldr.w	r9, [pc, #376]	; ee0 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6a:	f8c3 8000 	str.w	r8, [r3]
     d6e:	6868      	ldr	r0, [r5, #4]
     d70:	f8da 3000 	ldr.w	r3, [sl]
     d74:	f040 0020 	orr.w	r0, r0, #32
     d78:	699b      	ldr	r3, [r3, #24]
     d7a:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	4b4b      	ldr	r3, [pc, #300]	; (eac <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d7e:	2103      	movs	r1, #3
     d80:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	f8d9 3000 	ldr.w	r3, [r9]
     d88:	4849      	ldr	r0, [pc, #292]	; (eb0 <__pi_release+0x224>)
     d8a:	f023 0303 	bic.w	r3, r3, #3
     d8e:	f8c9 3000 	str.w	r3, [r9]
     d92:	4b48      	ldr	r3, [pc, #288]	; (eb4 <__pi_release+0x228>)
     d94:	681a      	ldr	r2, [r3, #0]
     d96:	6852      	ldr	r2, [r2, #4]
     d98:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d9a:	6878      	ldr	r0, [r7, #4]
     d9c:	f001 fd82 	bl	28a4 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     da0:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da2:	6822      	ldr	r2, [r4, #0]
     da4:	f042 0204 	orr.w	r2, r2, #4
     da8:	6022      	str	r2, [r4, #0]
			__WFI ();
     daa:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     dae:	4b41      	ldr	r3, [pc, #260]	; (eb4 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     db0:	f022 0204 	bic.w	r2, r2, #4
     db4:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	4641      	mov	r1, r8
     dba:	685b      	ldr	r3, [r3, #4]
     dbc:	483c      	ldr	r0, [pc, #240]	; (eb0 <__pi_release+0x224>)
     dbe:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	4a3c      	ldr	r2, [pc, #240]	; (eb8 <__pi_release+0x22c>)
     dc6:	f043 0303 	orr.w	r3, r3, #3
     dca:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dce:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dd2:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     dd4:	0699      	lsls	r1, r3, #26
     dd6:	d5fc      	bpl.n	dd2 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	f8da 3000 	ldr.w	r3, [sl]
     ddc:	6868      	ldr	r0, [r5, #4]
     dde:	695b      	ldr	r3, [r3, #20]
     de0:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de2:	4d2f      	ldr	r5, [pc, #188]	; (ea0 <__pi_release+0x214>)
     de4:	4b2a      	ldr	r3, [pc, #168]	; (e90 <__pi_release+0x204>)
     de6:	6858      	ldr	r0, [r3, #4]
     de8:	682b      	ldr	r3, [r5, #0]
     dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     dec:	4798      	blx	r3
     dee:	2801      	cmp	r0, #1
     df0:	d1f8      	bne.n	de4 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     df2:	4b2d      	ldr	r3, [pc, #180]	; (ea8 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	4a2d      	ldr	r2, [pc, #180]	; (eac <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     df6:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df8:	2300      	movs	r3, #0
     dfa:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	4b29      	ldr	r3, [pc, #164]	; (ea4 <__pi_release+0x218>)
     dfe:	6018      	str	r0, [r3, #0]
     e00:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     e02:	f001 fe5f 	bl	2ac4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     e06:	f7ff fccf 	bl	7a8 <reinit_uart>
     e0a:	4a2c      	ldr	r2, [pc, #176]	; (ebc <__pi_release+0x230>)
     e0c:	6813      	ldr	r3, [r2, #0]
     e0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     e12:	6013      	str	r3, [r2, #0]
}
     e14:	e76b      	b.n	cee <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e16:	4b2a      	ldr	r3, [pc, #168]	; (ec0 <__pi_release+0x234>)
     e18:	2001      	movs	r0, #1
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	68db      	ldr	r3, [r3, #12]
     e1e:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	4a28      	ldr	r2, [pc, #160]	; (ec4 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e22:	4929      	ldr	r1, [pc, #164]	; (ec8 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e24:	6813      	ldr	r3, [r2, #0]
     e26:	f023 0301 	bic.w	r3, r3, #1
     e2a:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	4b27      	ldr	r3, [pc, #156]	; (ecc <__pi_release+0x240>)
     e2e:	681a      	ldr	r2, [r3, #0]
     e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     e34:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e36:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     e3a:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e3c:	604a      	str	r2, [r1, #4]
     e3e:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	687a      	ldr	r2, [r7, #4]
     e42:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	687a      	ldr	r2, [r7, #4]
     e46:	4b22      	ldr	r3, [pc, #136]	; (ed0 <__pi_release+0x244>)
     e48:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4a:	2201      	movs	r2, #1
     e4c:	4b21      	ldr	r3, [pc, #132]	; (ed4 <__pi_release+0x248>)
     e4e:	601a      	str	r2, [r3, #0]
     e50:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e52:	4a19      	ldr	r2, [pc, #100]	; (eb8 <__pi_release+0x22c>)
     e54:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e56:	069b      	lsls	r3, r3, #26
     e58:	d4fc      	bmi.n	e54 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5a:	2201      	movs	r2, #1
     e5c:	4b1e      	ldr	r3, [pc, #120]	; (ed8 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     e5e:	2037      	movs	r0, #55	; 0x37
     e60:	601a      	str	r2, [r3, #0]
     e62:	4b0f      	ldr	r3, [pc, #60]	; (ea0 <__pi_release+0x214>)
     e64:	681b      	ldr	r3, [r3, #0]
     e66:	699b      	ldr	r3, [r3, #24]
     e68:	4798      	blx	r3
			goto DeepSleep;
     e6a:	e763      	b.n	d34 <__pi_release+0xa8>
	__SLEEP;
     e6c:	782b      	ldrb	r3, [r5, #0]
     e6e:	f36f 0341 	bfc	r3, #1, #1
     e72:	702b      	strb	r3, [r5, #0]
     e74:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     e76:	e717      	b.n	ca8 <__pi_release+0x1c>
     e78:	20005000 	andcs	r5, r0, r0
     e7c:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     e80:	4009202c 	andmi	r2, r9, ip, lsr #32
     e84:	2000004c 	andcs	r0, r0, ip, asr #32
     e88:	200000b4 	strhcs	r0, [r0], -r4
     e8c:	e000ed10 	and	lr, r0, r0, lsl sp
     e90:	20000098 	mulcs	r0, r8, r0
     e94:	2000008c 	andcs	r0, r0, ip, lsl #1
     e98:	00002e83 	andeq	r2, r0, r3, lsl #29
     e9c:	4008218c 	andmi	r2, r8, ip, lsl #3
     ea0:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     ea4:	4009400c 	andmi	r4, r9, ip
     ea8:	60082028 	andvs	r2, r8, r8, lsr #32
     eac:	43040180 	movwmi	r0, #16768	; 0x4180
     eb0:	40034000 	andmi	r4, r3, r0
     eb4:	100001d8 	ldrdne	r0, [r0], -r8
     eb8:	40091014 	andmi	r1, r9, r4, lsl r0
     ebc:	40001038 	andmi	r1, r0, r8, lsr r0
     ec0:	100001a0 	andne	r0, r0, r0, lsr #3
     ec4:	40091010 	andmi	r1, r9, r0, lsl r0
     ec8:	40093000 	andmi	r3, r9, r0
     ecc:	40091040 	andmi	r1, r9, r0, asr #32
     ed0:	43220420 			; <UNDEFINED> instruction: 0x43220420
     ed4:	40091018 	andmi	r1, r9, r8, lsl r0
     ed8:	43040188 	movwmi	r0, #16776	; 0x4188
     edc:	43220200 			; <UNDEFINED> instruction: 0x43220200
     ee0:	40082224 	andmi	r2, r8, r4, lsr #4

00000ee4 <main>:

#include "scheduler.h"

}

int main (void) {
     ee4:	b510      	push	{r4, lr}
     ee6:	4b11      	ldr	r3, [pc, #68]	; (f2c <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	4911      	ldr	r1, [pc, #68]	; (f30 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     eea:	4a12      	ldr	r2, [pc, #72]	; (f34 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     eec:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	4293      	cmp	r3, r2
     ef2:	d1fb      	bne.n	eec <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	4c10      	ldr	r4, [pc, #64]	; (f38 <main+0x54>)
	system_init ();
     ef6:	f7ff fded 	bl	ad4 <system_init>
	tcv_init ();
     efa:	f000 fbb3 	bl	1664 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     efe:	6823      	ldr	r3, [r4, #0]
     f00:	2129      	movs	r1, #41	; 0x29
     f02:	2000      	movs	r0, #0
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	6823      	ldr	r3, [r4, #0]
     f0a:	2120      	movs	r1, #32
     f0c:	681b      	ldr	r3, [r3, #0]
     f0e:	2001      	movs	r0, #1
     f10:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f12:	2100      	movs	r1, #0
     f14:	4809      	ldr	r0, [pc, #36]	; (f3c <main+0x58>)
     f16:	f000 fae1 	bl	14dc <__pi_fork>
     f1a:	4b09      	ldr	r3, [pc, #36]	; (f40 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     f1c:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f1e:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     f20:	2010      	movs	r0, #16
     f22:	f000 f937 	bl	1194 <delay>
     f26:	b662      	cpsie	i

	sti;

	__pi_release ();
     f28:	f7ff feb0 	bl	c8c <__pi_release>
     f2c:	20004bfc 	strdcs	r4, [r0], -ip
     f30:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     f34:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     f38:	10000184 	andne	r0, r0, r4, lsl #3
     f3c:	000002c5 	andeq	r0, r0, r5, asr #5
     f40:	200000b4 	strhcs	r0, [r0], -r4

00000f44 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     f44:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     f46:	4b0d      	ldr	r3, [pc, #52]	; (f7c <killev+0x38>)
	wfun = (aword)(pid->code);
     f48:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     f4a:	681a      	ldr	r2, [r3, #0]
     f4c:	b1aa      	cbz	r2, f7a <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     f4e:	4614      	mov	r4, r2
     f50:	f834 1b10 	ldrh.w	r1, [r4], #16
     f54:	2300      	movs	r3, #0
     f56:	f001 0107 	and.w	r1, r1, #7
     f5a:	e001      	b.n	f60 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     f5c:	42b5      	cmp	r5, r6
     f5e:	d006      	beq.n	f6e <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     f60:	4299      	cmp	r1, r3
     f62:	dd08      	ble.n	f76 <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     f64:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f68:	3301      	adds	r3, #1
     f6a:	42a8      	cmp	r0, r5
     f6c:	d1f6      	bne.n	f5c <killev+0x18>
			    ) {
				wakeupev (i, j);
     f6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f72:	889b      	ldrh	r3, [r3, #4]
     f74:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f78:	e7e8      	b.n	f4c <killev+0x8>
				break;
			}
		}
	}
}
     f7a:	bd70      	pop	{r4, r5, r6, pc}
     f7c:	2000004c 	andcs	r0, r0, ip, asr #32

00000f80 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	4a1d      	ldr	r2, [pc, #116]	; (ff8 <qfree+0x78>)
static void qfree (aword *ch) {
     f82:	b530      	push	{r4, r5, lr}
     f84:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f86:	6813      	ldr	r3, [r2, #0]
     f88:	b93b      	cbnz	r3, f9a <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f8a:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f8c:	4a1a      	ldr	r2, [pc, #104]	; (ff8 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f8e:	bb53      	cbnz	r3, fe6 <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f90:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f92:	4b1a      	ldr	r3, [pc, #104]	; (ffc <qfree+0x7c>)
	m_setnextp (cc, ch);
     f94:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f96:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     f98:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9a:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     f9e:	3101      	adds	r1, #1
     fa0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     fa4:	4288      	cmp	r0, r1
     fa6:	d10b      	bne.n	fc0 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     fa8:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     faa:	f850 0c04 	ldr.w	r0, [r0, #-4]
     fae:	f853 1c04 	ldr.w	r1, [r3, #-4]
     fb2:	4401      	add	r1, r0
     fb4:	4618      	mov	r0, r3
     fb6:	3101      	adds	r1, #1
     fb8:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	e7e3      	b.n	f88 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	f850 1c04 	ldr.w	r1, [r0, #-4]
     fc4:	3101      	adds	r1, #1
     fc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     fca:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     fcc:	bf03      	ittte	eq
     fce:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     fd4:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     fd8:	461a      	movne	r2, r3
     fda:	bf02      	ittt	eq
     fdc:	1949      	addeq	r1, r1, r5
     fde:	3101      	addeq	r1, #1
     fe0:	f840 1c04 	streq.w	r1, [r0, #-4]
     fe4:	e7ea      	b.n	fbc <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     fe6:	f853 4c04 	ldr.w	r4, [r3, #-4]
     fea:	f850 1c04 	ldr.w	r1, [r0, #-4]
     fee:	428c      	cmp	r4, r1
     ff0:	d2ce      	bcs.n	f90 <qfree+0x10>
		chunk = m_nextp (chunk))
     ff2:	461a      	mov	r2, r3
     ff4:	681b      	ldr	r3, [r3, #0]
     ff6:	e7ca      	b.n	f8e <qfree+0xe>
     ff8:	20000060 	andcs	r0, r0, r0, rrx
     ffc:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00001000 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	4a03      	ldr	r2, [pc, #12]	; (1010 <dgout+0x10>)
    1002:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
    1004:	071b      	lsls	r3, r3, #28
    1006:	d4fc      	bmi.n	1002 <dgout+0x2>
	diag_wchar (c, a);
    1008:	4b02      	ldr	r3, [pc, #8]	; (1014 <dgout+0x14>)
    100a:	b2c0      	uxtb	r0, r0
    100c:	6018      	str	r0, [r3, #0]
}
    100e:	4770      	bx	lr
    1010:	40001018 	andmi	r1, r0, r8, lsl r0
    1014:	40001000 	andmi	r1, r0, r0

00001018 <__pi_badstate>:
	syserror (ESTATE, "state");
    1018:	2007      	movs	r0, #7
void __pi_badstate (void) {
    101a:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
    101c:	4901      	ldr	r1, [pc, #4]	; (1024 <__pi_badstate+0xc>)
    101e:	f7ff fa89 	bl	534 <__pi_syserror>
    1022:	bf00      	nop
    1024:	00002ecc 	andeq	r2, r0, ip, asr #29

00001028 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
    1028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    102a:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	4608      	mov	r0, r1
    102e:	f7ff fb69 	bl	704 <tci_update_delay_ticks>
    1032:	2800      	cmp	r0, #0
    1034:	d154      	bne.n	10e0 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1036:	4b2b      	ldr	r3, [pc, #172]	; (10e4 <update_n_wake+0xbc>)
    1038:	4d2b      	ldr	r5, [pc, #172]	; (10e8 <update_n_wake+0xc0>)
    103a:	8819      	ldrh	r1, [r3, #0]
    103c:	882a      	ldrh	r2, [r5, #0]
    103e:	b289      	uxth	r1, r1
    1040:	428a      	cmp	r2, r1
    1042:	492a      	ldr	r1, [pc, #168]	; (10ec <update_n_wake+0xc4>)
    1044:	d803      	bhi.n	104e <update_n_wake+0x26>
    1046:	8808      	ldrh	r0, [r1, #0]
    1048:	b280      	uxth	r0, r0
    104a:	4282      	cmp	r2, r0
    104c:	d20d      	bcs.n	106a <update_n_wake+0x42>
    104e:	881e      	ldrh	r6, [r3, #0]
    1050:	8808      	ldrh	r0, [r1, #0]
    1052:	b2b6      	uxth	r6, r6
    1054:	b280      	uxth	r0, r0
    1056:	4286      	cmp	r6, r0
    1058:	d236      	bcs.n	10c8 <update_n_wake+0xa0>
    105a:	8818      	ldrh	r0, [r3, #0]
    105c:	b280      	uxth	r0, r0
    105e:	4282      	cmp	r2, r0
    1060:	d903      	bls.n	106a <update_n_wake+0x42>
    1062:	8808      	ldrh	r0, [r1, #0]
    1064:	b280      	uxth	r0, r0
    1066:	4282      	cmp	r2, r0
    1068:	d32e      	bcc.n	10c8 <update_n_wake+0xa0>
		for_all_tasks (i) {
    106a:	4a21      	ldr	r2, [pc, #132]	; (10f0 <update_n_wake+0xc8>)
    106c:	6810      	ldr	r0, [r2, #0]
    106e:	b918      	cbnz	r0, 1078 <update_n_wake+0x50>
	__pi_mintk = znew + min;
    1070:	8818      	ldrh	r0, [r3, #0]
    1072:	4404      	add	r4, r0
    1074:	802c      	strh	r4, [r5, #0]
    1076:	e02c      	b.n	10d2 <update_n_wake+0xaa>
			if (!twaiting (i))
    1078:	8806      	ldrh	r6, [r0, #0]
    107a:	0732      	lsls	r2, r6, #28
    107c:	d51b      	bpl.n	10b6 <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
    107e:	881f      	ldrh	r7, [r3, #0]
    1080:	8842      	ldrh	r2, [r0, #2]
    1082:	b2bf      	uxth	r7, r7
    1084:	42ba      	cmp	r2, r7
    1086:	d803      	bhi.n	1090 <update_n_wake+0x68>
    1088:	880f      	ldrh	r7, [r1, #0]
    108a:	b2bf      	uxth	r7, r7
    108c:	42ba      	cmp	r2, r7
    108e:	d20f      	bcs.n	10b0 <update_n_wake+0x88>
    1090:	f8b3 c000 	ldrh.w	ip, [r3]
    1094:	880f      	ldrh	r7, [r1, #0]
    1096:	fa1f fc8c 	uxth.w	ip, ip
    109a:	b2bf      	uxth	r7, r7
    109c:	45bc      	cmp	ip, r7
    109e:	d20c      	bcs.n	10ba <update_n_wake+0x92>
    10a0:	881f      	ldrh	r7, [r3, #0]
    10a2:	b2bf      	uxth	r7, r7
    10a4:	42ba      	cmp	r2, r7
    10a6:	d903      	bls.n	10b0 <update_n_wake+0x88>
    10a8:	880f      	ldrh	r7, [r1, #0]
    10aa:	b2bf      	uxth	r7, r7
    10ac:	42ba      	cmp	r2, r7
    10ae:	d304      	bcc.n	10ba <update_n_wake+0x92>
				wakeuptm (i);
    10b0:	f026 060f 	bic.w	r6, r6, #15
    10b4:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    10b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    10b8:	e7d9      	b.n	106e <update_n_wake+0x46>
				d = i->Timer - znew;
    10ba:	881e      	ldrh	r6, [r3, #0]
    10bc:	1b92      	subs	r2, r2, r6
    10be:	b292      	uxth	r2, r2
    10c0:	4294      	cmp	r4, r2
    10c2:	bf28      	it	cs
    10c4:	4614      	movcs	r4, r2
    10c6:	e7f6      	b.n	10b6 <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	8818      	ldrh	r0, [r3, #0]
    10ca:	1a12      	subs	r2, r2, r0
    10cc:	b292      	uxth	r2, r2
    10ce:	4294      	cmp	r4, r2
    10d0:	d9ce      	bls.n	1070 <update_n_wake+0x48>
	__pi_old = znew;
    10d2:	881b      	ldrh	r3, [r3, #0]
    10d4:	b29b      	uxth	r3, r3
    10d6:	800b      	strh	r3, [r1, #0]
}
    10d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    10dc:	f7ff ba54 	b.w	588 <tci_run_delay_timer>
}
    10e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10e2:	bf00      	nop
    10e4:	200000a0 	andcs	r0, r0, r0, lsr #1
    10e8:	20000094 	mulcs	r0, r4, r0
    10ec:	20000096 	mulcs	r0, r6, r0
    10f0:	2000004c 	andcs	r0, r0, ip, asr #32

000010f4 <proceed>:
void proceed (word state) {
    10f4:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    10f6:	4b03      	ldr	r3, [pc, #12]	; (1104 <proceed+0x10>)
    10f8:	0100      	lsls	r0, r0, #4
    10fa:	681b      	ldr	r3, [r3, #0]
    10fc:	8018      	strh	r0, [r3, #0]
	release;
    10fe:	f7ff fdc5 	bl	c8c <__pi_release>
    1102:	bf00      	nop
    1104:	200000b4 	strhcs	r0, [r0], -r4

00001108 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1108:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    110a:	4b0a      	ldr	r3, [pc, #40]	; (1134 <__pi_wait+0x2c>)
    110c:	681c      	ldr	r4, [r3, #0]
    110e:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	f013 0f04 	tst.w	r3, #4
    1114:	f003 0207 	and.w	r2, r3, #7
    1118:	d003      	beq.n	1122 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    111a:	2005      	movs	r0, #5
    111c:	4906      	ldr	r1, [pc, #24]	; (1138 <__pi_wait+0x30>)
    111e:	f7ff fa09 	bl	534 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    1122:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    1126:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    1128:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    112a:	8191      	strh	r1, [r2, #12]
    112c:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    112e:	8023      	strh	r3, [r4, #0]
}
    1130:	bd10      	pop	{r4, pc}
    1132:	bf00      	nop
    1134:	200000b4 	strhcs	r0, [r0], -r4
    1138:	00002ed2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>

0000113c <__pi_trigger>:
void __pi_trigger (aword event) {
    113c:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    113e:	4b0b      	ldr	r3, [pc, #44]	; (116c <__pi_trigger+0x30>)
    1140:	681a      	ldr	r2, [r3, #0]
    1142:	b192      	cbz	r2, 116a <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    1144:	4614      	mov	r4, r2
    1146:	2300      	movs	r3, #0
    1148:	f834 1b10 	ldrh.w	r1, [r4], #16
    114c:	f001 0107 	and.w	r1, r1, #7
    1150:	4299      	cmp	r1, r3
    1152:	dd08      	ble.n	1166 <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    1154:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    1158:	3301      	adds	r3, #1
    115a:	4285      	cmp	r5, r0
    115c:	d1f8      	bne.n	1150 <__pi_trigger+0x14>
				wakeupev (i, j);
    115e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1162:	889b      	ldrh	r3, [r3, #4]
    1164:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    1166:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1168:	e7eb      	b.n	1142 <__pi_trigger+0x6>
}
    116a:	bd30      	pop	{r4, r5, pc}
    116c:	2000004c 	andcs	r0, r0, ip, asr #32

00001170 <__pi_join>:
aword __pi_join (aword pid, word st) {
    1170:	b510      	push	{r4, lr}
    1172:	4604      	mov	r4, r0
	for_all_tasks (i) {
    1174:	4b06      	ldr	r3, [pc, #24]	; (1190 <__pi_join+0x20>)
    1176:	681b      	ldr	r3, [r3, #0]
    1178:	b90b      	cbnz	r3, 117e <__pi_join+0xe>
	return 0;
    117a:	461c      	mov	r4, r3
    117c:	e004      	b.n	1188 <__pi_join+0x18>
		if ((aword)i == pid) {
    117e:	42a3      	cmp	r3, r4
    1180:	d104      	bne.n	118c <__pi_join+0x1c>
			__pi_wait (pid, st);
    1182:	4620      	mov	r0, r4
    1184:	f7ff ffc0 	bl	1108 <__pi_wait>
}
    1188:	4620      	mov	r0, r4
    118a:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    118c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    118e:	e7f3      	b.n	1178 <__pi_join+0x8>
    1190:	2000004c 	andcs	r0, r0, ip, asr #32

00001194 <delay>:
void delay (word d, word state) {
    1194:	b538      	push	{r3, r4, r5, lr}
    1196:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1198:	4d0a      	ldr	r5, [pc, #40]	; (11c4 <delay+0x30>)
    119a:	682a      	ldr	r2, [r5, #0]
    119c:	8813      	ldrh	r3, [r2, #0]
    119e:	f003 0307 	and.w	r3, r3, #7
    11a2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    11a6:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    11a8:	2101      	movs	r1, #1
    11aa:	f7ff ff3d 	bl	1028 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    11ae:	4b06      	ldr	r3, [pc, #24]	; (11c8 <delay+0x34>)
    11b0:	8818      	ldrh	r0, [r3, #0]
    11b2:	682b      	ldr	r3, [r5, #0]
    11b4:	4404      	add	r4, r0
    11b6:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    11b8:	682a      	ldr	r2, [r5, #0]
    11ba:	8813      	ldrh	r3, [r2, #0]
    11bc:	f043 0308 	orr.w	r3, r3, #8
    11c0:	8013      	strh	r3, [r2, #0]
}
    11c2:	bd38      	pop	{r3, r4, r5, pc}
    11c4:	200000b4 	strhcs	r0, [r0], -r4
    11c8:	20000096 	mulcs	r0, r6, r0

000011cc <running>:
	if (fun == NULL)
    11cc:	4603      	mov	r3, r0
    11ce:	b910      	cbnz	r0, 11d6 <running+0xa>
		return (int) __pi_curr;
    11d0:	4b05      	ldr	r3, [pc, #20]	; (11e8 <running+0x1c>)
    11d2:	6818      	ldr	r0, [r3, #0]
    11d4:	4770      	bx	lr
	for_all_tasks (i)
    11d6:	4a05      	ldr	r2, [pc, #20]	; (11ec <running+0x20>)
    11d8:	6810      	ldr	r0, [r2, #0]
    11da:	b900      	cbnz	r0, 11de <running+0x12>
}
    11dc:	4770      	bx	lr
		if (i->code == fun)
    11de:	6842      	ldr	r2, [r0, #4]
    11e0:	429a      	cmp	r2, r3
    11e2:	d0fb      	beq.n	11dc <running+0x10>
	for_all_tasks (i)
    11e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    11e6:	e7f8      	b.n	11da <running+0xe>
    11e8:	200000b4 	strhcs	r0, [r0], -r4
    11ec:	2000004c 	andcs	r0, r0, ip, asr #32

000011f0 <crunning>:
word crunning (fsmcode fun) {
    11f0:	4601      	mov	r1, r0
	c = 0;
    11f2:	2000      	movs	r0, #0
	for_all_tasks (i)
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <crunning+0x1c>)
    11f6:	681a      	ldr	r2, [r3, #0]
    11f8:	b902      	cbnz	r2, 11fc <crunning+0xc>
}
    11fa:	4770      	bx	lr
		if (i->code == fun)
    11fc:	6853      	ldr	r3, [r2, #4]
	for_all_tasks (i)
    11fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		if (i->code == fun)
    1200:	428b      	cmp	r3, r1
			c++;
    1202:	bf04      	itt	eq
    1204:	1c43      	addeq	r3, r0, #1
    1206:	b298      	uxtheq	r0, r3
	for_all_tasks (i)
    1208:	e7f6      	b.n	11f8 <crunning+0x8>
    120a:	bf00      	nop
    120c:	2000004c 	andcs	r0, r0, ip, asr #32

00001210 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1210:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1212:	2000      	movs	r0, #0
    1214:	5c1a      	ldrb	r2, [r3, r0]
    1216:	b902      	cbnz	r2, 121a <__pi_strlen+0xa>
}
    1218:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    121a:	3001      	adds	r0, #1
    121c:	e7fa      	b.n	1214 <__pi_strlen+0x4>

0000121e <__pi_memcpy>:
	while (n--)
    121e:	3801      	subs	r0, #1
    1220:	440a      	add	r2, r1
    1222:	4291      	cmp	r1, r2
    1224:	d100      	bne.n	1228 <__pi_memcpy+0xa>
}
    1226:	4770      	bx	lr
		*dest++ = *src++;
    1228:	f811 3b01 	ldrb.w	r3, [r1], #1
    122c:	f800 3f01 	strb.w	r3, [r0, #1]!
    1230:	e7f7      	b.n	1222 <__pi_memcpy+0x4>
	...

00001234 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    1236:	b119      	cbz	r1, 1240 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1238:	2003      	movs	r0, #3
    123a:	4905      	ldr	r1, [pc, #20]	; (1250 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    123c:	f7ff f97a 	bl	534 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1240:	4b04      	ldr	r3, [pc, #16]	; (1254 <adddevfunc+0x20>)
    1242:	681a      	ldr	r2, [r3, #0]
    1244:	b112      	cbz	r2, 124c <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    1246:	2004      	movs	r0, #4
    1248:	4901      	ldr	r1, [pc, #4]	; (1250 <adddevfunc+0x1c>)
    124a:	e7f7      	b.n	123c <adddevfunc+0x8>
	ioreq [loc] = rf;
    124c:	6018      	str	r0, [r3, #0]
}
    124e:	bd08      	pop	{r3, pc}
    1250:	00002ed5 	ldrdeq	r2, [r0], -r5
    1254:	20000050 	andcs	r0, r0, r0, asr r0

00001258 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    125c:	4604      	mov	r4, r0
    125e:	4616      	mov	r6, r2
    1260:	461d      	mov	r5, r3
    1262:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1266:	b921      	cbnz	r1, 1272 <io+0x1a>
    1268:	f8df 9084 	ldr.w	r9, [pc, #132]	; 12f0 <io+0x98>
    126c:	f8d9 3000 	ldr.w	r3, [r9]
    1270:	b91b      	cbnz	r3, 127a <io+0x22>
		syserror (ENODEVICE, "io");
    1272:	2001      	movs	r0, #1
    1274:	491d      	ldr	r1, [pc, #116]	; (12ec <io+0x94>)
    1276:	f7ff f95d 	bl	534 <__pi_syserror>
	if (len == 0)
    127a:	f1b8 0f00 	cmp.w	r8, #0
    127e:	d028      	beq.n	12d2 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	4642      	mov	r2, r8
    1282:	4629      	mov	r1, r5
    1284:	4630      	mov	r0, r6
    1286:	4798      	blx	r3
	if (ret >= 0)
    1288:	2800      	cmp	r0, #0
    128a:	da23      	bge.n	12d4 <io+0x7c>
	if (ret == -1) {
    128c:	1c41      	adds	r1, r0, #1
    128e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1292:	d108      	bne.n	12a6 <io+0x4e>
		if (retry == WNONE)
    1294:	429c      	cmp	r4, r3
    1296:	d01c      	beq.n	12d2 <io+0x7a>
		iowait (dev, operation, retry);
    1298:	4621      	mov	r1, r4
    129a:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    129e:	f7ff ff33 	bl	1108 <__pi_wait>
			release;
    12a2:	f7ff fcf3 	bl	c8c <__pi_release>
	if (ret == -2) {
    12a6:	1c82      	adds	r2, r0, #2
    12a8:	d116      	bne.n	12d8 <io+0x80>
		if (retry != WNONE) {
    12aa:	429c      	cmp	r4, r3
    12ac:	f8d9 9000 	ldr.w	r9, [r9]
    12b0:	d00a      	beq.n	12c8 <io+0x70>
			iowait (dev, operation, retry);
    12b2:	4621      	mov	r1, r4
    12b4:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    12b8:	f7ff ff26 	bl	1108 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    12bc:	4642      	mov	r2, r8
    12be:	4629      	mov	r1, r5
    12c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12c4:	47c8      	blx	r9
    12c6:	e7ec      	b.n	12a2 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    12c8:	4642      	mov	r2, r8
    12ca:	4629      	mov	r1, r5
    12cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12d0:	47c8      	blx	r9
		return 0;
    12d2:	2000      	movs	r0, #0
}
    12d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    12d8:	429c      	cmp	r4, r3
    12da:	d0fa      	beq.n	12d2 <io+0x7a>
		delay (-ret - 2, retry);
    12dc:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    12e0:	30fe      	adds	r0, #254	; 0xfe
    12e2:	4621      	mov	r1, r4
    12e4:	b280      	uxth	r0, r0
    12e6:	f7ff ff55 	bl	1194 <delay>
		release;
    12ea:	e7da      	b.n	12a2 <io+0x4a>
    12ec:	00002eda 	ldrdeq	r2, [r0], -sl
    12f0:	20000050 	andcs	r0, r0, r0, asr r0

000012f4 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	4a0d      	ldr	r2, [pc, #52]	; (132c <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    12f6:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f8:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    12fc:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1300:	089b      	lsrs	r3, r3, #2
    1302:	1e59      	subs	r1, r3, #1
    1304:	29ff      	cmp	r1, #255	; 0xff
    1306:	d803      	bhi.n	1310 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1308:	2004      	movs	r0, #4
    130a:	4909      	ldr	r1, [pc, #36]	; (1330 <__pi_malloc_init+0x3c>)
    130c:	f7ff f912 	bl	534 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	4908      	ldr	r1, [pc, #32]	; (1334 <__pi_malloc_init+0x40>)
    1312:	1d10      	adds	r0, r2, #4
    1314:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1316:	2000      	movs	r0, #0
    1318:	4907      	ldr	r1, [pc, #28]	; (1338 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    131a:	3b02      	subs	r3, #2
    131c:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    131e:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1322:	4a06      	ldr	r2, [pc, #24]	; (133c <__pi_malloc_init+0x48>)
    1324:	6013      	str	r3, [r2, #0]
    1326:	4a06      	ldr	r2, [pc, #24]	; (1340 <__pi_malloc_init+0x4c>)
    1328:	6013      	str	r3, [r2, #0]
}
    132a:	bd08      	pop	{r3, pc}
    132c:	200000b8 	strhcs	r0, [r0], -r8
    1330:	00002edd 	ldrdeq	r2, [r0], -sp
    1334:	20000060 	andcs	r0, r0, r0, rrx
    1338:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    133c:	20000054 	andcs	r0, r0, r4, asr r0
    1340:	2000005c 	andcs	r0, r0, ip, asr r0

00001344 <__pi_free>:
void __pi_free (aword *ch) {
    1344:	b508      	push	{r3, lr}
	if (ch == NULL)
    1346:	b1c8      	cbz	r0, 137c <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1348:	f850 3c04 	ldr.w	r3, [r0, #-4]
    134c:	2b00      	cmp	r3, #0
    134e:	db03      	blt.n	1358 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1350:	2006      	movs	r0, #6
    1352:	490b      	ldr	r1, [pc, #44]	; (1380 <__pi_free+0x3c>)
    1354:	f7ff f8ee 	bl	534 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    1358:	490a      	ldr	r1, [pc, #40]	; (1384 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    135a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    135e:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1360:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1364:	4413      	add	r3, r2
    1366:	600b      	str	r3, [r1, #0]
	QFREE;
    1368:	f7ff fe0a 	bl	f80 <qfree>
	if (mevent [MA_NP] . nwait) {
    136c:	4806      	ldr	r0, [pc, #24]	; (1388 <__pi_free+0x44>)
    136e:	7803      	ldrb	r3, [r0, #0]
    1370:	b123      	cbz	r3, 137c <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1372:	f7ff fee3 	bl	113c <__pi_trigger>
		mevent [MA_NP] . nwait --;
    1376:	7803      	ldrb	r3, [r0, #0]
    1378:	3b01      	subs	r3, #1
    137a:	7003      	strb	r3, [r0, #0]
}
    137c:	bd08      	pop	{r3, pc}
    137e:	bf00      	nop
    1380:	00002ee2 	andeq	r2, r0, r2, ror #29
    1384:	20000054 	andcs	r0, r0, r4, asr r0
    1388:	20000058 	andcs	r0, r0, r8, asr r0

0000138c <kill>:
void kill (aword pid) {
    138c:	b510      	push	{r4, lr}
	if (pid == 0)
    138e:	b908      	cbnz	r0, 1394 <kill+0x8>
		pid = (aword) __pi_curr;
    1390:	4b0f      	ldr	r3, [pc, #60]	; (13d0 <kill+0x44>)
    1392:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1394:	2200      	movs	r2, #0
	for_all_tasks (i) {
    1396:	4b0f      	ldr	r3, [pc, #60]	; (13d4 <kill+0x48>)
    1398:	681c      	ldr	r4, [r3, #0]
    139a:	b91c      	cbnz	r4, 13a4 <kill+0x18>
	syserror (EREQPAR, "kpi");
    139c:	2003      	movs	r0, #3
    139e:	490e      	ldr	r1, [pc, #56]	; (13d8 <kill+0x4c>)
    13a0:	f7ff f8c8 	bl	534 <__pi_syserror>
		if ((aword)i == pid) {
    13a4:	4284      	cmp	r4, r0
    13a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    13a8:	d10e      	bne.n	13c8 <kill+0x3c>
			if (j == NULL)
    13aa:	b95a      	cbnz	r2, 13c4 <kill+0x38>
				__PCB = i->Next;
    13ac:	6019      	str	r1, [r3, #0]
			killev (i);
    13ae:	4620      	mov	r0, r4
    13b0:	f7ff fdc8 	bl	f44 <killev>
			ufree (i);
    13b4:	f7ff ffc6 	bl	1344 <__pi_free>
			if (i == __pi_curr)
    13b8:	4b05      	ldr	r3, [pc, #20]	; (13d0 <kill+0x44>)
    13ba:	681b      	ldr	r3, [r3, #0]
    13bc:	42a3      	cmp	r3, r4
    13be:	d106      	bne.n	13ce <kill+0x42>
				release;
    13c0:	f7ff fc64 	bl	c8c <__pi_release>
				j->Next = i->Next;
    13c4:	62d1      	str	r1, [r2, #44]	; 0x2c
    13c6:	e7f2      	b.n	13ae <kill+0x22>
    13c8:	4622      	mov	r2, r4
    13ca:	460c      	mov	r4, r1
    13cc:	e7e5      	b.n	139a <kill+0xe>
}
    13ce:	bd10      	pop	{r4, pc}
    13d0:	200000b4 	strhcs	r0, [r0], -r4
    13d4:	2000004c 	andcs	r0, r0, ip, asr #32
    13d8:	00002ee7 	andeq	r2, r0, r7, ror #29

000013dc <killall>:
void killall (fsmcode fun) {
    13dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	j = NULL;
    13e0:	2400      	movs	r4, #0
	rel = NO;
    13e2:	4626      	mov	r6, r4
	for (i = __PCB; i != NULL; ) {
    13e4:	4d11      	ldr	r5, [pc, #68]	; (142c <killall+0x50>)
void killall (fsmcode fun) {
    13e6:	4607      	mov	r7, r0
			if (i == __pi_curr)
    13e8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1430 <killall+0x54>
	for (i = __PCB; i != NULL; ) {
    13ec:	6828      	ldr	r0, [r5, #0]
    13ee:	b910      	cbnz	r0, 13f6 <killall+0x1a>
	if (rel)
    13f0:	b1ce      	cbz	r6, 1426 <killall+0x4a>
		release;
    13f2:	f7ff fc4b 	bl	c8c <__pi_release>
		if (i->code == fun) {
    13f6:	6843      	ldr	r3, [r0, #4]
    13f8:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
    13fc:	42bb      	cmp	r3, r7
    13fe:	d10c      	bne.n	141a <killall+0x3e>
			if (j == NULL)
    1400:	b974      	cbnz	r4, 1420 <killall+0x44>
				__PCB = k;
    1402:	f8c5 8000 	str.w	r8, [r5]
			if (i == __pi_curr)
    1406:	f8d9 3000 	ldr.w	r3, [r9]
				rel = YES;
    140a:	4283      	cmp	r3, r0
    140c:	bf08      	it	eq
    140e:	2601      	moveq	r6, #1
			killev (i);
    1410:	f7ff fd98 	bl	f44 <killev>
			ufree (i);
    1414:	f7ff ff96 	bl	1344 <__pi_free>
			i = k;
    1418:	4620      	mov	r0, r4
    141a:	4604      	mov	r4, r0
    141c:	4640      	mov	r0, r8
    141e:	e7e6      	b.n	13ee <killall+0x12>
				j->Next = k;
    1420:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    1424:	e7ef      	b.n	1406 <killall+0x2a>
}
    1426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    142a:	bf00      	nop
    142c:	2000004c 	andcs	r0, r0, ip, asr #32
    1430:	200000b4 	strhcs	r0, [r0], -r4

00001434 <__pi_malloc>:
	if (size < 8)
    1434:	2807      	cmp	r0, #7
		_size = 2;
    1436:	bf98      	it	ls
    1438:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    143a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	4b21      	ldr	r3, [pc, #132]	; (14c4 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    143e:	bf88      	it	hi
    1440:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1442:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1444:	4920      	ldr	r1, [pc, #128]	; (14c8 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1446:	bf88      	it	hi
    1448:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    144a:	b94c      	cbnz	r4, 1460 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    144c:	4a1f      	ldr	r2, [pc, #124]	; (14cc <__pi_malloc+0x98>)
    144e:	7853      	ldrb	r3, [r2, #1]
    1450:	2bff      	cmp	r3, #255	; 0xff
    1452:	d001      	beq.n	1458 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1454:	3301      	adds	r3, #1
    1456:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1458:	2200      	movs	r2, #0
    145a:	4b1d      	ldr	r3, [pc, #116]	; (14d0 <__pi_malloc+0x9c>)
    145c:	601a      	str	r2, [r3, #0]
	return chunk;
    145e:	e02f      	b.n	14c0 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1460:	6862      	ldr	r2, [r4, #4]
    1462:	428a      	cmp	r2, r1
    1464:	d003      	beq.n	146e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1466:	2006      	movs	r0, #6
    1468:	491a      	ldr	r1, [pc, #104]	; (14d4 <__pi_malloc+0xa0>)
    146a:	f7ff f863 	bl	534 <__pi_syserror>
		if (m_size (chunk) >= _size)
    146e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1472:	4285      	cmp	r5, r0
    1474:	d202      	bcs.n	147c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1476:	4623      	mov	r3, r4
    1478:	4614      	mov	r4, r2
    147a:	e7e6      	b.n	144a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    147c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    147e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1482:	1a1b      	subs	r3, r3, r0
    1484:	2b08      	cmp	r3, #8
    1486:	d909      	bls.n	149c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1488:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    148c:	3001      	adds	r0, #1
    148e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1492:	3b01      	subs	r3, #1
    1494:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1498:	f7ff fd72 	bl	f80 <qfree>
		mevent [MA_NP] . nfail = 0;
    149c:	2200      	movs	r2, #0
    149e:	4b0b      	ldr	r3, [pc, #44]	; (14cc <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    14a0:	490d      	ldr	r1, [pc, #52]	; (14d8 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    14a2:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    14a4:	f854 2c04 	ldr.w	r2, [r4, #-4]
    14a8:	680b      	ldr	r3, [r1, #0]
    14aa:	1a9b      	subs	r3, r3, r2
    14ac:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14ae:	4908      	ldr	r1, [pc, #32]	; (14d0 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    14b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14b4:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    14b6:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14ba:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    14bc:	bf38      	it	cc
    14be:	600b      	strcc	r3, [r1, #0]
}
    14c0:	4620      	mov	r0, r4
    14c2:	bd38      	pop	{r3, r4, r5, pc}
    14c4:	20000060 	andcs	r0, r0, r0, rrx
    14c8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    14cc:	20000058 	andcs	r0, r0, r8, asr r0
    14d0:	2000005c 	andcs	r0, r0, ip, asr r0
    14d4:	00002eeb 	andeq	r2, r0, fp, ror #29
    14d8:	20000054 	andcs	r0, r0, r4, asr r0

000014dc <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    14dc:	b538      	push	{r3, r4, r5, lr}
    14de:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e0:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    14e2:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e4:	f7ff ffa6 	bl	1434 <__pi_malloc>
    14e8:	2300      	movs	r3, #0
    14ea:	b138      	cbz	r0, 14fc <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    14ec:	4a07      	ldr	r2, [pc, #28]	; (150c <__pi_fork+0x30>)
	i->Status = 0;
    14ee:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    14f0:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    14f2:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    14f4:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    14f8:	b90b      	cbnz	r3, 14fe <__pi_fork+0x22>
			__PCB = i;
    14fa:	6010      	str	r0, [r2, #0]
}
    14fc:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    14fe:	461a      	mov	r2, r3
    1500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1502:	2b00      	cmp	r3, #0
    1504:	d1fb      	bne.n	14fe <__pi_fork+0x22>
			j->Next = i;
    1506:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1508:	e7f8      	b.n	14fc <__pi_fork+0x20>
    150a:	bf00      	nop
    150c:	2000004c 	andcs	r0, r0, ip, asr #32

00001510 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1510:	4a04      	ldr	r2, [pc, #16]	; (1524 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1512:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1514:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1516:	4803      	ldr	r0, [pc, #12]	; (1524 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1518:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    151a:	bf1c      	itt	ne
    151c:	3301      	addne	r3, #1
    151e:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1520:	f7ff bdf2 	b.w	1108 <__pi_wait>
    1524:	20000058 	andcs	r0, r0, r8, asr r0

00001528 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1528:	b40f      	push	{r0, r1, r2, r3}
    152a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    152e:	ab0a      	add	r3, sp, #40	; 0x28
    1530:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1534:	2015      	movs	r0, #21
	va_start (ap, mess);
    1536:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1538:	4b46      	ldr	r3, [pc, #280]	; (1654 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    153a:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    153c:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    153e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 165c <diag+0x134>
	diag_disable_int (a, is);
    1542:	695b      	ldr	r3, [r3, #20]
    1544:	4798      	blx	r3
	while (*mess != '\0') {
    1546:	7820      	ldrb	r0, [r4, #0]
    1548:	b998      	cbnz	r0, 1572 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    154a:	200d      	movs	r0, #13
    154c:	f7ff fd58 	bl	1000 <dgout>
	dgout ('\n');
    1550:	200a      	movs	r0, #10
    1552:	f7ff fd55 	bl	1000 <dgout>
    1556:	4a40      	ldr	r2, [pc, #256]	; (1658 <diag+0x130>)
    1558:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    155a:	071b      	lsls	r3, r3, #28
    155c:	d4fc      	bmi.n	1558 <diag+0x30>
	diag_enable_int (a, is);
    155e:	4b3d      	ldr	r3, [pc, #244]	; (1654 <diag+0x12c>)
    1560:	2015      	movs	r0, #21
    1562:	681b      	ldr	r3, [r3, #0]
    1564:	691b      	ldr	r3, [r3, #16]
    1566:	4798      	blx	r3
}
    1568:	b003      	add	sp, #12
    156a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    156e:	b004      	add	sp, #16
    1570:	4770      	bx	lr
		if (*mess == '%') {
    1572:	2825      	cmp	r0, #37	; 0x25
    1574:	f104 0601 	add.w	r6, r4, #1
    1578:	d169      	bne.n	164e <diag+0x126>
			if (*mess == 'l') {
    157a:	9b01      	ldr	r3, [sp, #4]
    157c:	7862      	ldrb	r2, [r4, #1]
    157e:	f853 1b04 	ldr.w	r1, [r3], #4
    1582:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1584:	bf08      	it	eq
    1586:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1588:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    158a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    158c:	bf0c      	ite	eq
    158e:	2520      	moveq	r5, #32
				bc = 16;
    1590:	2510      	movne	r5, #16
			switch (*mess) {
    1592:	2b75      	cmp	r3, #117	; 0x75
    1594:	d04e      	beq.n	1634 <diag+0x10c>
    1596:	d80a      	bhi.n	15ae <diag+0x86>
    1598:	2b64      	cmp	r3, #100	; 0x64
    159a:	d01c      	beq.n	15d6 <diag+0xae>
    159c:	2b73      	cmp	r3, #115	; 0x73
    159e:	d052      	beq.n	1646 <diag+0x11e>
				dgout ('%');
    15a0:	2025      	movs	r0, #37	; 0x25
    15a2:	f7ff fd2d 	bl	1000 <dgout>
				dgout (*mess);
    15a6:	7830      	ldrb	r0, [r6, #0]
    15a8:	f7ff fd2a 	bl	1000 <dgout>
    15ac:	e010      	b.n	15d0 <diag+0xa8>
			switch (*mess) {
    15ae:	2b78      	cmp	r3, #120	; 0x78
    15b0:	d1f6      	bne.n	15a0 <diag+0x78>
    15b2:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    15b4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1660 <diag+0x138>
					i += 4;
    15b8:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    15ba:	1b2b      	subs	r3, r5, r4
    15bc:	fa21 f303 	lsr.w	r3, r1, r3
    15c0:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    15c4:	f819 0003 	ldrb.w	r0, [r9, r3]
    15c8:	f7ff fd1a 	bl	1000 <dgout>
				while (i < bc) {
    15cc:	42a5      	cmp	r5, r4
    15ce:	dcf3      	bgt.n	15b8 <diag+0x90>
			mess++;
    15d0:	3601      	adds	r6, #1
					d /= 10;
    15d2:	4634      	mov	r4, r6
    15d4:	e7b7      	b.n	1546 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    15d6:	1e6b      	subs	r3, r5, #1
    15d8:	fa21 f303 	lsr.w	r3, r1, r3
    15dc:	07da      	lsls	r2, r3, #31
    15de:	d509      	bpl.n	15f4 <diag+0xcc>
					dgout ('-');
    15e0:	202d      	movs	r0, #45	; 0x2d
    15e2:	f7ff fd0d 	bl	1000 <dgout>
					if (bc == 16)
    15e6:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    15e8:	bf04      	itt	eq
    15ea:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    15ee:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    15f2:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    15f4:	f242 7410 	movw	r4, #10000	; 0x2710
    15f8:	2d10      	cmp	r5, #16
    15fa:	bf18      	it	ne
    15fc:	4644      	movne	r4, r8
					v = (word) (val / d);
    15fe:	fbb1 f5f4 	udiv	r5, r1, r4
    1602:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1604:	b935      	cbnz	r5, 1614 <diag+0xec>
    1606:	2c01      	cmp	r4, #1
    1608:	d004      	beq.n	1614 <diag+0xec>
					d /= 10;
    160a:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    160e:	e7f6      	b.n	15fe <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1610:	4c12      	ldr	r4, [pc, #72]	; (165c <diag+0x134>)
    1612:	e7f4      	b.n	15fe <diag+0xd6>
					dgout (v + '0');
    1614:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1618:	b280      	uxth	r0, r0
    161a:	f7ff fcf1 	bl	1000 <dgout>
					if (d == 0) break;
    161e:	2c09      	cmp	r4, #9
					d /= 10;
    1620:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1624:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1628:	d9d2      	bls.n	15d0 <diag+0xa8>
					v = (word) (val / d);
    162a:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    162e:	461c      	mov	r4, r3
					v = (word) (val / d);
    1630:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1632:	e7ef      	b.n	1614 <diag+0xec>
				if (bc == 16)
    1634:	2d10      	cmp	r5, #16
    1636:	d1eb      	bne.n	1610 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1638:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    163c:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    163e:	e7de      	b.n	15fe <diag+0xd6>
					dgout (*s);
    1640:	f7ff fcde 	bl	1000 <dgout>
					s++;
    1644:	3101      	adds	r1, #1
				while (*s != '\0') {
    1646:	7808      	ldrb	r0, [r1, #0]
    1648:	2800      	cmp	r0, #0
    164a:	d1f9      	bne.n	1640 <diag+0x118>
    164c:	e7c0      	b.n	15d0 <diag+0xa8>
			dgout (*mess++);
    164e:	f7ff fcd7 	bl	1000 <dgout>
    1652:	e7be      	b.n	15d2 <diag+0xaa>
    1654:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1658:	40001018 	andmi	r1, r0, r8, lsl r0
    165c:	3b9aca00 	blcc	fe6b3e64 <_estack+0xde6aee64>
    1660:	00002ef0 	strdeq	r2, [r0], -r0

00001664 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1664:	4770      	bx	lr

00001666 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1666:	e7fe      	b.n	1666 <NmiSR>

00001668 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1668:	e7fe      	b.n	1668 <FaultISR>

0000166a <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    166a:	e7fe      	b.n	166a <AONIntHandler>

0000166c <ResetISR>:
{
    166c:	b508      	push	{r3, lr}
    SetupTrimDevice();
    166e:	f000 fddb 	bl	2228 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1672:	4b0c      	ldr	r3, [pc, #48]	; (16a4 <zero_loop+0x20>)
    pui32Src = &_etext;
    1674:	4a0c      	ldr	r2, [pc, #48]	; (16a8 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1676:	490d      	ldr	r1, [pc, #52]	; (16ac <zero_loop+0x28>)
    1678:	428b      	cmp	r3, r1
    167a:	d30d      	bcc.n	1698 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    167c:	480c      	ldr	r0, [pc, #48]	; (16b0 <zero_loop+0x2c>)
    167e:	490d      	ldr	r1, [pc, #52]	; (16b4 <zero_loop+0x30>)
    1680:	f04f 0200 	mov.w	r2, #0

00001684 <zero_loop>:
    1684:	4288      	cmp	r0, r1
    1686:	bfb8      	it	lt
    1688:	f840 2b04 	strlt.w	r2, [r0], #4
    168c:	dbfa      	blt.n	1684 <zero_loop>
   main();
    168e:	f7ff fc29 	bl	ee4 <main>
    FaultISR();
    1692:	f7ff ffe9 	bl	1668 <FaultISR>
}
    1696:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1698:	f852 0b04 	ldr.w	r0, [r2], #4
    169c:	f843 0b04 	str.w	r0, [r3], #4
    16a0:	e7ea      	b.n	1678 <ResetISR+0xc>
    16a2:	bf00      	nop
    16a4:	20000000 	andcs	r0, r0, r0
    16a8:	00002f08 	andeq	r2, r0, r8, lsl #30
    16ac:	20000009 	andcs	r0, r0, r9
    16b0:	2000000c 	andcs	r0, r0, ip
    16b4:	200000b8 	strhcs	r0, [r0], -r8

000016b8 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    16b8:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    16ba:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    16c0:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    16c2:	4907      	ldr	r1, [pc, #28]	; (16e0 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c4:	4d07      	ldr	r5, [pc, #28]	; (16e4 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16c6:	4c08      	ldr	r4, [pc, #32]	; (16e8 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c8:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    16ca:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    16cc:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    16ce:	b2c0      	uxtb	r0, r0
			b |= 1;
    16d0:	bf48      	it	mi
    16d2:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    16d6:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16d8:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    16da:	600a      	str	r2, [r1, #0]
    16dc:	d1f4      	bne.n	16c8 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    16de:	bd70      	pop	{r4, r5, r6, pc}
    16e0:	400220a0 	andmi	r2, r2, r0, lsr #1
    16e4:	400220c0 	andmi	r2, r2, r0, asr #1
    16e8:	40022090 	mulmi	r2, r0, r0

000016ec <put_byte>:

static void put_byte (byte b) {
    16ec:	b530      	push	{r4, r5, lr}
    16ee:	2308      	movs	r3, #8
    16f0:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    16f8:	4c06      	ldr	r4, [pc, #24]	; (1714 <put_byte+0x28>)
    16fa:	4a07      	ldr	r2, [pc, #28]	; (1718 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    16fc:	f010 0f80 	tst.w	r0, #128	; 0x80
    1700:	bf14      	ite	ne
    1702:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1704:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1706:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1708:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    170a:	6021      	str	r1, [r4, #0]
		b <<= 1;
    170c:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    170e:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1710:	d1f4      	bne.n	16fc <put_byte+0x10>
	}
}
    1712:	bd30      	pop	{r4, r5, pc}
    1714:	40022090 	mulmi	r2, r0, r0
    1718:	400220a0 	andmi	r2, r2, r0, lsr #1

0000171c <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    171c:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    171e:	b510      	push	{r4, lr}
    1720:	4c03      	ldr	r4, [pc, #12]	; (1730 <cmd_0+0x14>)
    1722:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1724:	f7ff ffe2 	bl	16ec <put_byte>
    1728:	2300      	movs	r3, #0
    172a:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    172c:	bd10      	pop	{r4, pc}
    172e:	bf00      	nop
    1730:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001734 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1738:	4604      	mov	r4, r0
    173a:	460d      	mov	r5, r1
    173c:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    173e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1784 <wwait+0x50>
    1742:	4e0f      	ldr	r6, [pc, #60]	; (1780 <wwait+0x4c>)
    1744:	f898 3000 	ldrb.w	r3, [r8]
    1748:	b14b      	cbz	r3, 175e <wwait+0x2a>
	put_byte (CMD_RDSR);
    174a:	2005      	movs	r0, #5
    174c:	6037      	str	r7, [r6, #0]
    174e:	f7ff ffcd 	bl	16ec <put_byte>
	r = get_byte ();
    1752:	f7ff ffb1 	bl	16b8 <get_byte>
    1756:	2300      	movs	r3, #0
    1758:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    175a:	07c3      	lsls	r3, r0, #31
    175c:	d401      	bmi.n	1762 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    175e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1762:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1766:	429c      	cmp	r4, r3
    1768:	d103      	bne.n	1772 <wwait+0x3e>
			mdelay (1);
    176a:	2001      	movs	r0, #1
    176c:	f7fe feae 	bl	4cc <mdelay>
    1770:	e7e8      	b.n	1744 <wwait+0x10>
			delay (del, st);
    1772:	4621      	mov	r1, r4
    1774:	4628      	mov	r0, r5
    1776:	f7ff fd0d 	bl	1194 <delay>
			release;
    177a:	f7ff fa87 	bl	c8c <__pi_release>
    177e:	bf00      	nop
    1780:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1784:	20000064 	andcs	r0, r0, r4, rrx

00001788 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    178a:	4d0c      	ldr	r5, [pc, #48]	; (17bc <ready+0x34>)
    178c:	782f      	ldrb	r7, [r5, #0]
    178e:	b147      	cbz	r7, 17a2 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1790:	2101      	movs	r1, #1
    1792:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1796:	f7ff ffcd 	bl	1734 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    179a:	2200      	movs	r2, #0
    179c:	4b08      	ldr	r3, [pc, #32]	; (17c0 <ready+0x38>)
    179e:	701a      	strb	r2, [r3, #0]
}
    17a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    17a2:	2401      	movs	r4, #1
    17a4:	4e07      	ldr	r6, [pc, #28]	; (17c4 <ready+0x3c>)
	udelay (1);
    17a6:	4620      	mov	r0, r4
    17a8:	6034      	str	r4, [r6, #0]
    17aa:	f7fe fe79 	bl	4a0 <udelay>
	udelay (1);
    17ae:	4620      	mov	r0, r4
    17b0:	6037      	str	r7, [r6, #0]
    17b2:	f7fe fe75 	bl	4a0 <udelay>
		dopen = DOPEN_TEMP;
    17b6:	2302      	movs	r3, #2
    17b8:	702b      	strb	r3, [r5, #0]
    17ba:	e7ee      	b.n	179a <ready+0x12>
    17bc:	20000064 	andcs	r0, r0, r4, rrx
    17c0:	20000065 	andcs	r0, r0, r5, rrx
    17c4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000017c8 <cclose>:
static void cclose () {
    17c8:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    17ca:	4c07      	ldr	r4, [pc, #28]	; (17e8 <cclose+0x20>)
    17cc:	7823      	ldrb	r3, [r4, #0]
    17ce:	2b02      	cmp	r3, #2
    17d0:	d109      	bne.n	17e6 <cclose+0x1e>
		wwait (WNONE, 1);
    17d2:	2101      	movs	r1, #1
    17d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    17d8:	f7ff ffac 	bl	1734 <wwait>
	cmd_0 (CMD_DP);
    17dc:	20b9      	movs	r0, #185	; 0xb9
    17de:	f7ff ff9d 	bl	171c <cmd_0>
		dopen = 0;
    17e2:	2300      	movs	r3, #0
    17e4:	7023      	strb	r3, [r4, #0]
}
    17e6:	bd10      	pop	{r4, pc}
    17e8:	20000064 	andcs	r0, r0, r4, rrx

000017ec <ee_open>:

// ============================================================================

word ee_open () {
    17ec:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    17ee:	f7ff ffcb 	bl	1788 <ready>
	dopen = DOPEN_PERM;
    17f2:	2201      	movs	r2, #1
    17f4:	4b01      	ldr	r3, [pc, #4]	; (17fc <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    17f6:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    17f8:	701a      	strb	r2, [r3, #0]
}
    17fa:	bd08      	pop	{r3, pc}
    17fc:	20000064 	andcs	r0, r0, r4, rrx

00001800 <ee_close>:

void ee_close () {

	if (dopen) {
    1800:	4b03      	ldr	r3, [pc, #12]	; (1810 <ee_close+0x10>)
    1802:	781a      	ldrb	r2, [r3, #0]
    1804:	b11a      	cbz	r2, 180e <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1806:	2202      	movs	r2, #2
    1808:	701a      	strb	r2, [r3, #0]
		cclose ();
    180a:	f7ff bfdd 	b.w	17c8 <cclose>
	}
}
    180e:	4770      	bx	lr
    1810:	20000064 	andcs	r0, r0, r4, rrx

00001814 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1816:	4604      	mov	r4, r0
    1818:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    181a:	4615      	mov	r5, r2
    181c:	b37a      	cbz	r2, 187e <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    181e:	4e19      	ldr	r6, [pc, #100]	; (1884 <ser_in+0x70>)
    1820:	6830      	ldr	r0, [r6, #0]
    1822:	b988      	cbnz	r0, 1848 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1824:	4818      	ldr	r0, [pc, #96]	; (1888 <ser_in+0x74>)
    1826:	f7ff fcd1 	bl	11cc <running>
    182a:	b948      	cbnz	r0, 1840 <ser_in+0x2c>
			prcs = runthread (__inserial);
    182c:	4601      	mov	r1, r0
    182e:	4816      	ldr	r0, [pc, #88]	; (1888 <ser_in+0x74>)
    1830:	f7ff fe54 	bl	14dc <__pi_fork>
			if (prcs == 0) {
    1834:	b920      	cbnz	r0, 1840 <ser_in+0x2c>
				npwait (st);
    1836:	4620      	mov	r0, r4
    1838:	f7ff fe6a 	bl	1510 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    183c:	f7ff fa26 	bl	c8c <__pi_release>
		join (prcs, st);
    1840:	4621      	mov	r1, r4
    1842:	f7ff fc95 	bl	1170 <__pi_join>
    1846:	e7f9      	b.n	183c <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1848:	7803      	ldrb	r3, [r0, #0]
    184a:	b9a3      	cbnz	r3, 1876 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    184c:	7844      	ldrb	r4, [r0, #1]
    184e:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1850:	42ac      	cmp	r4, r5
		prcs = len-1;
    1852:	bfa8      	it	ge
    1854:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1858:	4622      	mov	r2, r4
    185a:	4638      	mov	r0, r7
    185c:	6831      	ldr	r1, [r6, #0]
    185e:	f7ff fcde 	bl	121e <__pi_memcpy>
	ufree (__inpline);
    1862:	6830      	ldr	r0, [r6, #0]
    1864:	f7ff fd6e 	bl	1344 <__pi_free>
	__inpline = NULL;
    1868:	2300      	movs	r3, #0
    186a:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    186c:	783a      	ldrb	r2, [r7, #0]
    186e:	b102      	cbz	r2, 1872 <ser_in+0x5e>
		buf [prcs] = '\0';
    1870:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1872:	4620      	mov	r0, r4
    1874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1876:	f7ff fccb 	bl	1210 <__pi_strlen>
    187a:	4604      	mov	r4, r0
    187c:	e7e8      	b.n	1850 <ser_in+0x3c>
		return 0;
    187e:	4614      	mov	r4, r2
    1880:	e7f7      	b.n	1872 <ser_in+0x5e>
    1882:	bf00      	nop
    1884:	20000070 	andcs	r0, r0, r0, ror r0
    1888:	000019b1 			; <UNDEFINED> instruction: 0x000019b1

0000188c <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    188c:	b40e      	push	{r1, r2, r3}
    188e:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1890:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1892:	4812      	ldr	r0, [pc, #72]	; (18dc <ser_outf+0x50>)
    1894:	f7ff fc9a 	bl	11cc <running>
    1898:	4606      	mov	r6, r0
    189a:	b120      	cbz	r0, 18a6 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    189c:	4621      	mov	r1, r4
    189e:	f7ff fc67 	bl	1170 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    18a2:	f7ff f9f3 	bl	c8c <__pi_release>
	va_start (ap, m);
    18a6:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18a8:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    18aa:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18ac:	f000 fa36 	bl	1d1c <vform>
    18b0:	4605      	mov	r5, r0
    18b2:	b918      	cbnz	r0, 18bc <ser_outf+0x30>
		umwait (st);
    18b4:	4620      	mov	r0, r4
    18b6:	f7ff fe2b 	bl	1510 <__pi_waitmem>
    18ba:	e7f2      	b.n	18a2 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    18bc:	4601      	mov	r1, r0
    18be:	4807      	ldr	r0, [pc, #28]	; (18dc <ser_outf+0x50>)
    18c0:	f7ff fe0c 	bl	14dc <__pi_fork>
    18c4:	b918      	cbnz	r0, 18ce <ser_outf+0x42>
		ufree (buf);
    18c6:	4628      	mov	r0, r5
    18c8:	f7ff fd3c 	bl	1344 <__pi_free>
		npwait (st);
    18cc:	e7f2      	b.n	18b4 <ser_outf+0x28>
		release;
	}

	return 0;
}
    18ce:	4630      	mov	r0, r6
    18d0:	b003      	add	sp, #12
    18d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    18d6:	b003      	add	sp, #12
    18d8:	4770      	bx	lr
    18da:	bf00      	nop
    18dc:	00001941 	andeq	r1, r0, r1, asr #18

000018e0 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    18e0:	b40e      	push	{r1, r2, r3}
    18e2:	b533      	push	{r0, r1, r4, r5, lr}
    18e4:	9905      	ldr	r1, [sp, #20]
    18e6:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    18e8:	b321      	cbz	r1, 1934 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    18ea:	4d13      	ldr	r5, [pc, #76]	; (1938 <ser_inf+0x58>)
    18ec:	6828      	ldr	r0, [r5, #0]
    18ee:	b988      	cbnz	r0, 1914 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    18f0:	4812      	ldr	r0, [pc, #72]	; (193c <ser_inf+0x5c>)
    18f2:	f7ff fc6b 	bl	11cc <running>
    18f6:	b948      	cbnz	r0, 190c <ser_inf+0x2c>
			prcs = runthread (__inserial);
    18f8:	4601      	mov	r1, r0
    18fa:	4810      	ldr	r0, [pc, #64]	; (193c <ser_inf+0x5c>)
    18fc:	f7ff fdee 	bl	14dc <__pi_fork>
			if (prcs == 0) {
    1900:	b920      	cbnz	r0, 190c <ser_inf+0x2c>
				npwait (st);
    1902:	4620      	mov	r0, r4
    1904:	f7ff fe04 	bl	1510 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1908:	f7ff f9c0 	bl	c8c <__pi_release>
		join (prcs, st);
    190c:	4621      	mov	r1, r4
    190e:	f7ff fc2f 	bl	1170 <__pi_join>
    1912:	e7f9      	b.n	1908 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1914:	aa06      	add	r2, sp, #24
    1916:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1918:	f000 fa28 	bl	1d6c <vscan>
    191c:	4604      	mov	r4, r0

	ufree (__inpline);
    191e:	6828      	ldr	r0, [r5, #0]
    1920:	f7ff fd10 	bl	1344 <__pi_free>
	__inpline = NULL;
    1924:	2300      	movs	r3, #0
    1926:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1928:	4620      	mov	r0, r4
    192a:	b002      	add	sp, #8
    192c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1930:	b003      	add	sp, #12
    1932:	4770      	bx	lr
		return 0;
    1934:	460c      	mov	r4, r1
    1936:	e7f7      	b.n	1928 <ser_inf+0x48>
    1938:	20000070 	andcs	r0, r0, r0, ror r0
    193c:	000019b1 			; <UNDEFINED> instruction: 0x000019b1

00001940 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    1940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1942:	4b18      	ldr	r3, [pc, #96]	; (19a4 <__outserial+0x64>)
    1944:	681b      	ldr	r3, [r3, #0]
    1946:	689d      	ldr	r5, [r3, #8]
    1948:	b130      	cbz	r0, 1958 <__outserial+0x18>
    194a:	280a      	cmp	r0, #10
    194c:	d00d      	beq.n	196a <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    194e:	b003      	add	sp, #12
    1950:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1954:	f7ff bb60 	b.w	1018 <__pi_badstate>
	ptr = data;
    1958:	4b13      	ldr	r3, [pc, #76]	; (19a8 <__outserial+0x68>)
    195a:	4c14      	ldr	r4, [pc, #80]	; (19ac <__outserial+0x6c>)
    195c:	601d      	str	r5, [r3, #0]
	if (*ptr)
    195e:	782b      	ldrb	r3, [r5, #0]
    1960:	b1e3      	cbz	r3, 199c <__outserial+0x5c>
		len = strlen (ptr);
    1962:	4628      	mov	r0, r5
    1964:	f7ff fc54 	bl	1210 <__pi_strlen>
    1968:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    196a:	4e0f      	ldr	r6, [pc, #60]	; (19a8 <__outserial+0x68>)
    196c:	4f0f      	ldr	r7, [pc, #60]	; (19ac <__outserial+0x6c>)
    196e:	883b      	ldrh	r3, [r7, #0]
    1970:	2201      	movs	r2, #1
    1972:	9300      	str	r3, [sp, #0]
    1974:	2100      	movs	r1, #0
    1976:	6833      	ldr	r3, [r6, #0]
    1978:	200a      	movs	r0, #10
    197a:	f7ff fc6d 	bl	1258 <io>
	ptr += quant;
    197e:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1980:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    1982:	4403      	add	r3, r0
	len -= quant;
    1984:	1a24      	subs	r4, r4, r0
	ptr += quant;
    1986:	6033      	str	r3, [r6, #0]
	len -= quant;
    1988:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    198a:	2c00      	cmp	r4, #0
    198c:	d1ef      	bne.n	196e <__outserial+0x2e>
		ufree (data);
    198e:	4628      	mov	r0, r5
    1990:	f7ff fcd8 	bl	1344 <__pi_free>
		finish;
    1994:	4620      	mov	r0, r4
    1996:	f7ff fcf9 	bl	138c <kill>
    199a:	e7e8      	b.n	196e <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    199c:	786b      	ldrb	r3, [r5, #1]
    199e:	3303      	adds	r3, #3
    19a0:	6023      	str	r3, [r4, #0]
    19a2:	e7e2      	b.n	196a <__outserial+0x2a>
    19a4:	200000b4 	strhcs	r0, [r0], -r4
    19a8:	2000006c 	andcs	r0, r0, ip, rrx
    19ac:	20000068 	andcs	r0, r0, r8, rrx

000019b0 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    19b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    19b2:	4d42      	ldr	r5, [pc, #264]	; (1abc <__inserial+0x10c>)
    19b4:	682a      	ldr	r2, [r5, #0]
    19b6:	6894      	ldr	r4, [r2, #8]
    19b8:	2803      	cmp	r0, #3
    19ba:	d87a      	bhi.n	1ab2 <__inserial+0x102>
    19bc:	e8df f000 	tbb	[pc, r0]
    19c0:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    19c4:	4b3e      	ldr	r3, [pc, #248]	; (1ac0 <__inserial+0x110>)
    19c6:	681b      	ldr	r3, [r3, #0]
    19c8:	b113      	cbz	r3, 19d0 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    19ca:	2000      	movs	r0, #0
    19cc:	f7ff fcde 	bl	138c <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    19d0:	2040      	movs	r0, #64	; 0x40
    19d2:	f7ff fd2f 	bl	1434 <__pi_malloc>
    19d6:	4b3b      	ldr	r3, [pc, #236]	; (1ac4 <__inserial+0x114>)
    19d8:	4604      	mov	r4, r0
    19da:	6018      	str	r0, [r3, #0]
    19dc:	b918      	cbnz	r0, 19e6 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    19de:	f7ff fd97 	bl	1510 <__pi_waitmem>
		release;
    19e2:	f7ff f953 	bl	c8c <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    19e6:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    19e8:	682b      	ldr	r3, [r5, #0]
    19ea:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    19ec:	4b36      	ldr	r3, [pc, #216]	; (1ac8 <__inserial+0x118>)
    19ee:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    19f0:	2001      	movs	r0, #1
    19f2:	2200      	movs	r2, #0
    19f4:	4d33      	ldr	r5, [pc, #204]	; (1ac4 <__inserial+0x114>)
    19f6:	9000      	str	r0, [sp, #0]
    19f8:	682b      	ldr	r3, [r5, #0]
    19fa:	4611      	mov	r1, r2
    19fc:	f7ff fc2c 	bl	1258 <io>
	if (ptr == (char*) data) { // new line
    1a00:	682b      	ldr	r3, [r5, #0]
    1a02:	42a3      	cmp	r3, r4
    1a04:	d10d      	bne.n	1a22 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    1a06:	7823      	ldrb	r3, [r4, #0]
    1a08:	b923      	cbnz	r3, 1a14 <__inserial+0x64>
			ptr++;
    1a0a:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    1a0c:	2002      	movs	r0, #2
			ptr++;
    1a0e:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    1a10:	f7ff fb70 	bl	10f4 <proceed>
		}

		if (*ptr < 0x20)
    1a14:	682b      	ldr	r3, [r5, #0]
    1a16:	781b      	ldrb	r3, [r3, #0]
    1a18:	2b1f      	cmp	r3, #31
    1a1a:	d802      	bhi.n	1a22 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    1a1c:	2001      	movs	r0, #1
    1a1e:	f7ff fb69 	bl	10f4 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    1a22:	682b      	ldr	r3, [r5, #0]
    1a24:	781a      	ldrb	r2, [r3, #0]
    1a26:	2a0a      	cmp	r2, #10
    1a28:	d001      	beq.n	1a2e <__inserial+0x7e>
    1a2a:	2a0d      	cmp	r2, #13
    1a2c:	d105      	bne.n	1a3a <__inserial+0x8a>
		*ptr = '\0';
    1a2e:	2000      	movs	r0, #0
    1a30:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    1a32:	4b23      	ldr	r3, [pc, #140]	; (1ac0 <__inserial+0x110>)
    1a34:	601c      	str	r4, [r3, #0]
		finish;
    1a36:	f7ff fca9 	bl	138c <kill>
	}

	if (len) {
    1a3a:	4923      	ldr	r1, [pc, #140]	; (1ac8 <__inserial+0x118>)
    1a3c:	680b      	ldr	r3, [r1, #0]
    1a3e:	b123      	cbz	r3, 1a4a <__inserial+0x9a>
		ptr++;
    1a40:	682a      	ldr	r2, [r5, #0]
		len--;
    1a42:	3b01      	subs	r3, #1
		ptr++;
    1a44:	3201      	adds	r2, #1
    1a46:	602a      	str	r2, [r5, #0]
		len--;
    1a48:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    1a4a:	2001      	movs	r0, #1
    1a4c:	f7ff fb52 	bl	10f4 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    1a50:	2301      	movs	r3, #1
    1a52:	2200      	movs	r2, #0
    1a54:	4d1b      	ldr	r5, [pc, #108]	; (1ac4 <__inserial+0x114>)
    1a56:	9300      	str	r3, [sp, #0]
    1a58:	4611      	mov	r1, r2
    1a5a:	682b      	ldr	r3, [r5, #0]
    1a5c:	2002      	movs	r0, #2
    1a5e:	f7ff fbfb 	bl	1258 <io>
	len -= 2;
    1a62:	4819      	ldr	r0, [pc, #100]	; (1ac8 <__inserial+0x118>)
    1a64:	6803      	ldr	r3, [r0, #0]
    1a66:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    1a68:	682b      	ldr	r3, [r5, #0]
    1a6a:	f813 1b01 	ldrb.w	r1, [r3], #1
    1a6e:	3101      	adds	r1, #1
		len = *ptr + 1;
    1a70:	4291      	cmp	r1, r2
    1a72:	bfd4      	ite	le
    1a74:	6001      	strle	r1, [r0, #0]
    1a76:	6002      	strgt	r2, [r0, #0]
	ptr++;
    1a78:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a7a:	2200      	movs	r2, #0
    1a7c:	4f12      	ldr	r7, [pc, #72]	; (1ac8 <__inserial+0x118>)
    1a7e:	4d11      	ldr	r5, [pc, #68]	; (1ac4 <__inserial+0x114>)
    1a80:	883b      	ldrh	r3, [r7, #0]
    1a82:	4611      	mov	r1, r2
    1a84:	9300      	str	r3, [sp, #0]
    1a86:	682b      	ldr	r3, [r5, #0]
    1a88:	2003      	movs	r0, #3
    1a8a:	f7ff fbe5 	bl	1258 <io>
	len -= quant;
    1a8e:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a90:	4606      	mov	r6, r0
	len -= quant;
    1a92:	1a18      	subs	r0, r3, r0
    1a94:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1a96:	b918      	cbnz	r0, 1aa0 <__inserial+0xf0>
		__inpline = (char*)data;
    1a98:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <__inserial+0x110>)
    1a9a:	601c      	str	r4, [r3, #0]
		finish;
    1a9c:	f7ff fc76 	bl	138c <kill>
	}
	ptr += quant;
    1aa0:	6828      	ldr	r0, [r5, #0]
    1aa2:	4430      	add	r0, r6
    1aa4:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    1aa6:	2003      	movs	r0, #3

endstrand
    1aa8:	b003      	add	sp, #12
    1aaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    1aae:	f7ff bb21 	b.w	10f4 <proceed>
endstrand
    1ab2:	b003      	add	sp, #12
    1ab4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1ab8:	f7ff baae 	b.w	1018 <__pi_badstate>
    1abc:	200000b4 	strhcs	r0, [r0], -r4
    1ac0:	20000070 	andcs	r0, r0, r0, ror r0
    1ac4:	20000078 	andcs	r0, r0, r8, ror r0
    1ac8:	20000074 	andcs	r0, r0, r4, ror r0

00001acc <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    1acc:	f8dc 2000 	ldr.w	r2, [ip]
    1ad0:	b132      	cbz	r2, 1ae0 <outc.5724+0x14>
    1ad2:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1ad6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    1ada:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    1adc:	bf88      	it	hi
    1ade:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    1ae0:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1ae4:	3301      	adds	r3, #1
    1ae6:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    1aea:	4770      	bx	lr

00001aec <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1af0:	461c      	mov	r4, r3
    1af2:	ab0c      	add	r3, sp, #48	; 0x30
    1af4:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    1af6:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1af8:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    1afa:	4f86      	ldr	r7, [pc, #536]	; (1d14 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1afc:	9001      	str	r0, [sp, #4]
    1afe:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    1b02:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1b06:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    1b0a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    1b0e:	d118      	bne.n	1b42 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    1b10:	f892 9001 	ldrb.w	r9, [r2, #1]
    1b14:	1c95      	adds	r5, r2, #2
				outc ('\\');
    1b16:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    1b1a:	f1b9 0f00 	cmp.w	r9, #0
    1b1e:	d10b      	bne.n	1b38 <__pi_vfparse+0x4c>
				outc ('\\');
    1b20:	205c      	movs	r0, #92	; 0x5c
    1b22:	f7ff ffd3 	bl	1acc <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    1b26:	4648      	mov	r0, r9
    1b28:	f10d 0c04 	add.w	ip, sp, #4
    1b2c:	f7ff ffce 	bl	1acc <outc.5724>
			if (c == '\0')
    1b30:	f1b9 0f00 	cmp.w	r9, #0
    1b34:	d103      	bne.n	1b3e <__pi_vfparse+0x52>
    1b36:	e027      	b.n	1b88 <__pi_vfparse+0x9c>
			outc (c);
    1b38:	4648      	mov	r0, r9
				outc (val);
    1b3a:	f7ff ffc7 	bl	1acc <outc.5724>
				val = (word) va_arg (ap, aword);
    1b3e:	462a      	mov	r2, r5
    1b40:	e7e1      	b.n	1b06 <__pi_vfparse+0x1a>
		if (c == '%') {
    1b42:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1b46:	f040 80e2 	bne.w	1d0e <__pi_vfparse+0x222>
			c = *fm++;
    1b4a:	f892 8001 	ldrb.w	r8, [r2, #1]
    1b4e:	1c95      	adds	r5, r2, #2
			switch (c) {
    1b50:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    1b54:	f000 80cd 	beq.w	1cf2 <__pi_vfparse+0x206>
    1b58:	d81b      	bhi.n	1b92 <__pi_vfparse+0xa6>
    1b5a:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    1b5e:	d033      	beq.n	1bc8 <__pi_vfparse+0xdc>
    1b60:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    1b64:	d067      	beq.n	1c36 <__pi_vfparse+0x14a>
    1b66:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    1b6a:	f000 80bc 	beq.w	1ce6 <__pi_vfparse+0x1fa>
				outc ('%');
    1b6e:	2025      	movs	r0, #37	; 0x25
    1b70:	f10d 0c04 	add.w	ip, sp, #4
    1b74:	f7ff ffaa 	bl	1acc <outc.5724>
				outc (c);
    1b78:	4640      	mov	r0, r8
    1b7a:	f10d 0c04 	add.w	ip, sp, #4
    1b7e:	f7ff ffa5 	bl	1acc <outc.5724>
				if (c == '\0')
    1b82:	f1b8 0f00 	cmp.w	r8, #0
    1b86:	d1da      	bne.n	1b3e <__pi_vfparse+0x52>
Ret:
				return d;
    1b88:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1b8c:	b004      	add	sp, #16
    1b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1b92:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1b96:	d017      	beq.n	1bc8 <__pi_vfparse+0xdc>
    1b98:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1b9c:	d1e7      	bne.n	1b6e <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    1b9e:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1ba2:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1ba6:	fa1f f983 	uxth.w	r9, r3
    1baa:	fa49 f308 	asr.w	r3, r9, r8
    1bae:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1bb2:	5cf8      	ldrb	r0, [r7, r3]
    1bb4:	f10d 0c04 	add.w	ip, sp, #4
    1bb8:	f7ff ff88 	bl	1acc <outc.5724>
					if (i == 0)
    1bbc:	f1b8 0f00 	cmp.w	r8, #0
    1bc0:	d0bd      	beq.n	1b3e <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1bc2:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1bc6:	e7f0      	b.n	1baa <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1bc8:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1bcc:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1bd0:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1bd4:	d10a      	bne.n	1bec <__pi_vfparse+0x100>
    1bd6:	041b      	lsls	r3, r3, #16
    1bd8:	d508      	bpl.n	1bec <__pi_vfparse+0x100>
					outc ('-');
    1bda:	202d      	movs	r0, #45	; 0x2d
    1bdc:	f10d 0c04 	add.w	ip, sp, #4
    1be0:	f7ff ff74 	bl	1acc <outc.5724>
					val = (~val) + 1;
    1be4:	f1c9 0900 	rsb	r9, r9, #0
    1be8:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    1bec:	2305      	movs	r3, #5
				enci (10000);
    1bee:	f242 7810 	movw	r8, #10000	; 0x2710
    1bf2:	fbb9 f0f8 	udiv	r0, r9, r8
    1bf6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1bfa:	d103      	bne.n	1c04 <__pi_vfparse+0x118>
    1bfc:	3b01      	subs	r3, #1
    1bfe:	d117      	bne.n	1c30 <__pi_vfparse+0x144>
    1c00:	f04f 0801 	mov.w	r8, #1
    1c04:	fa1f fa80 	uxth.w	sl, r0
    1c08:	f10d 0c04 	add.w	ip, sp, #4
    1c0c:	3030      	adds	r0, #48	; 0x30
    1c0e:	f7ff ff5d 	bl	1acc <outc.5724>
    1c12:	fbb8 f3f6 	udiv	r3, r8, r6
    1c16:	fb08 991a 	mls	r9, r8, sl, r9
    1c1a:	f1b8 0f09 	cmp.w	r8, #9
    1c1e:	fa1f f989 	uxth.w	r9, r9
    1c22:	b29b      	uxth	r3, r3
    1c24:	d98b      	bls.n	1b3e <__pi_vfparse+0x52>
    1c26:	fbb9 f0f3 	udiv	r0, r9, r3
    1c2a:	4698      	mov	r8, r3
    1c2c:	b2c0      	uxtb	r0, r0
    1c2e:	e7e9      	b.n	1c04 <__pi_vfparse+0x118>
    1c30:	fbb8 f8f6 	udiv	r8, r8, r6
    1c34:	e7dd      	b.n	1bf2 <__pi_vfparse+0x106>
				c = *fm;
    1c36:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    1c38:	2b64      	cmp	r3, #100	; 0x64
    1c3a:	d001      	beq.n	1c40 <__pi_vfparse+0x154>
    1c3c:	2b75      	cmp	r3, #117	; 0x75
    1c3e:	d132      	bne.n	1ca6 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    1c40:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    1c42:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    1c46:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    1c4a:	d109      	bne.n	1c60 <__pi_vfparse+0x174>
    1c4c:	f1ba 0f00 	cmp.w	sl, #0
    1c50:	da06      	bge.n	1c60 <__pi_vfparse+0x174>
						outc ('-');
    1c52:	202d      	movs	r0, #45	; 0x2d
    1c54:	f10d 0c04 	add.w	ip, sp, #4
    1c58:	f7ff ff38 	bl	1acc <outc.5724>
						val = (~val) + 1;
    1c5c:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    1c60:	230a      	movs	r3, #10
					enci (1000000000UL);
    1c62:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1d18 <__pi_vfparse+0x22c>
    1c66:	fbba f9f8 	udiv	r9, sl, r8
    1c6a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1c6e:	d103      	bne.n	1c78 <__pi_vfparse+0x18c>
    1c70:	3b01      	subs	r3, #1
    1c72:	d115      	bne.n	1ca0 <__pi_vfparse+0x1b4>
    1c74:	f04f 0801 	mov.w	r8, #1
    1c78:	f10d 0c04 	add.w	ip, sp, #4
    1c7c:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1c80:	f7ff ff24 	bl	1acc <outc.5724>
    1c84:	f1b8 0f09 	cmp.w	r8, #9
    1c88:	fbb8 f3f6 	udiv	r3, r8, r6
    1c8c:	fb08 aa19 	mls	sl, r8, r9, sl
    1c90:	f67f af55 	bls.w	1b3e <__pi_vfparse+0x52>
    1c94:	fbba f9f3 	udiv	r9, sl, r3
    1c98:	4698      	mov	r8, r3
    1c9a:	fa5f f989 	uxtb.w	r9, r9
    1c9e:	e7eb      	b.n	1c78 <__pi_vfparse+0x18c>
    1ca0:	fbb8 f8f6 	udiv	r8, r8, r6
    1ca4:	e7df      	b.n	1c66 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1ca6:	2b78      	cmp	r3, #120	; 0x78
    1ca8:	d114      	bne.n	1cd4 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1caa:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1cae:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1cb2:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1cb4:	fa29 f308 	lsr.w	r3, r9, r8
    1cb8:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1cbc:	5cf8      	ldrb	r0, [r7, r3]
    1cbe:	f10d 0c04 	add.w	ip, sp, #4
    1cc2:	f7ff ff03 	bl	1acc <outc.5724>
						if (i == 0)
    1cc6:	f1b8 0f00 	cmp.w	r8, #0
    1cca:	f43f af38 	beq.w	1b3e <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1cce:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1cd2:	e7ef      	b.n	1cb4 <__pi_vfparse+0x1c8>
					outc ('%');
    1cd4:	4648      	mov	r0, r9
    1cd6:	f10d 0c04 	add.w	ip, sp, #4
    1cda:	f7ff fef7 	bl	1acc <outc.5724>
					outc ('l');
    1cde:	4640      	mov	r0, r8
    1ce0:	f10d 0c04 	add.w	ip, sp, #4
    1ce4:	e729      	b.n	1b3a <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1ce6:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1cea:	f10d 0c04 	add.w	ip, sp, #4
    1cee:	b280      	uxth	r0, r0
    1cf0:	e723      	b.n	1b3a <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1cf2:	f854 3b04 	ldr.w	r3, [r4], #4
    1cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1cfa:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1cfe:	2800      	cmp	r0, #0
    1d00:	f43f af1d 	beq.w	1b3e <__pi_vfparse+0x52>
					outc (*st);
    1d04:	f10d 0c04 	add.w	ip, sp, #4
    1d08:	f7ff fee0 	bl	1acc <outc.5724>
					st++;
    1d0c:	e7f5      	b.n	1cfa <__pi_vfparse+0x20e>
		c = *fm++;
    1d0e:	1c55      	adds	r5, r2, #1
    1d10:	e709      	b.n	1b26 <__pi_vfparse+0x3a>
    1d12:	bf00      	nop
    1d14:	00002ef0 	strdeq	r2, [r0], -r0
    1d18:	3b9aca00 	blcc	fe6b4520 <_estack+0xde6af520>

00001d1c <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d20:	460e      	mov	r6, r1
    1d22:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1d24:	4604      	mov	r4, r0
    1d26:	b140      	cbz	r0, 1d3a <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1d28:	4613      	mov	r3, r2
    1d2a:	460a      	mov	r2, r1
    1d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1d30:	f7ff fedc 	bl	1aec <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1d34:	4620      	mov	r0, r4
    1d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1d3a:	4608      	mov	r0, r1
    1d3c:	f7ff fa68 	bl	1210 <__pi_strlen>
    1d40:	f100 0511 	add.w	r5, r0, #17
    1d44:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1d46:	4628      	mov	r0, r5
    1d48:	f7ff fb74 	bl	1434 <__pi_malloc>
    1d4c:	4604      	mov	r4, r0
    1d4e:	2800      	cmp	r0, #0
    1d50:	d0f0      	beq.n	1d34 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1d52:	463b      	mov	r3, r7
    1d54:	4632      	mov	r2, r6
    1d56:	4629      	mov	r1, r5
    1d58:	f7ff fec8 	bl	1aec <__pi_vfparse>
    1d5c:	4285      	cmp	r5, r0
    1d5e:	4680      	mov	r8, r0
    1d60:	d2e8      	bcs.n	1d34 <vform+0x18>
		ufree (res);
    1d62:	4620      	mov	r0, r4
    1d64:	f7ff faee 	bl	1344 <__pi_free>
		goto Again;
    1d68:	4645      	mov	r5, r8
    1d6a:	e7ec      	b.n	1d46 <vform+0x2a>

00001d6c <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1d6c:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1d6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1d72:	2800      	cmp	r0, #0
    1d74:	f000 81b5 	beq.w	20e2 <vscan+0x376>
    1d78:	2900      	cmp	r1, #0
    1d7a:	f000 81b4 	beq.w	20e6 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1d7e:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1d80:	270a      	movs	r7, #10
    1d82:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1d84:	f8df c370 	ldr.w	ip, [pc, #880]	; 20f8 <vscan+0x38c>
    1d88:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1d8a:	f811 0b01 	ldrb.w	r0, [r1], #1
    1d8e:	b170      	cbz	r0, 1dae <vscan+0x42>
		if (*fmt++ != '%')
    1d90:	2825      	cmp	r0, #37	; 0x25
    1d92:	d1f9      	bne.n	1d88 <vscan+0x1c>
		switch (*fmt++) {
    1d94:	7870      	ldrb	r0, [r6, #1]
    1d96:	1cb1      	adds	r1, r6, #2
    1d98:	286c      	cmp	r0, #108	; 0x6c
    1d9a:	f000 80e1 	beq.w	1f60 <vscan+0x1f4>
    1d9e:	d809      	bhi.n	1db4 <vscan+0x48>
    1da0:	2863      	cmp	r0, #99	; 0x63
    1da2:	f000 8184 	beq.w	20ae <vscan+0x342>
    1da6:	2864      	cmp	r0, #100	; 0x64
    1da8:	d043      	beq.n	1e32 <vscan+0xc6>
    1daa:	2800      	cmp	r0, #0
    1dac:	d1ec      	bne.n	1d88 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1dae:	4620      	mov	r0, r4
    1db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1db4:	2875      	cmp	r0, #117	; 0x75
    1db6:	d074      	beq.n	1ea2 <vscan+0x136>
    1db8:	2878      	cmp	r0, #120	; 0x78
    1dba:	f000 8098 	beq.w	1eee <vscan+0x182>
    1dbe:	2873      	cmp	r0, #115	; 0x73
    1dc0:	d1e2      	bne.n	1d88 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1dc2:	7818      	ldrb	r0, [r3, #0]
    1dc4:	461e      	mov	r6, r3
    1dc6:	f1a0 0e09 	sub.w	lr, r0, #9
    1dca:	fa5f fe8e 	uxtb.w	lr, lr
    1dce:	f1be 0f17 	cmp.w	lr, #23
    1dd2:	4698      	mov	r8, r3
    1dd4:	f103 0301 	add.w	r3, r3, #1
    1dd8:	f240 8173 	bls.w	20c2 <vscan+0x356>
			if (*buf == '\0')
    1ddc:	2800      	cmp	r0, #0
    1dde:	d0e6      	beq.n	1dae <vscan+0x42>
			if (*buf != ',') {
    1de0:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1de2:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1de6:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1dea:	d00e      	beq.n	1e0a <vscan+0x9e>
    1dec:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1dee:	f818 3b01 	ldrb.w	r3, [r8], #1
    1df2:	f1a3 0009 	sub.w	r0, r3, #9
    1df6:	2801      	cmp	r0, #1
    1df8:	d907      	bls.n	1e0a <vscan+0x9e>
    1dfa:	2b0d      	cmp	r3, #13
    1dfc:	d005      	beq.n	1e0a <vscan+0x9e>
    1dfe:	2b2c      	cmp	r3, #44	; 0x2c
    1e00:	d003      	beq.n	1e0a <vscan+0x9e>
    1e02:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1e06:	f040 8163 	bne.w	20d0 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1e0a:	f896 8000 	ldrb.w	r8, [r6]
    1e0e:	4633      	mov	r3, r6
    1e10:	f1a8 0009 	sub.w	r0, r8, #9
    1e14:	b2c0      	uxtb	r0, r0
    1e16:	2817      	cmp	r0, #23
    1e18:	f106 0601 	add.w	r6, r6, #1
    1e1c:	f240 815b 	bls.w	20d6 <vscan+0x36a>
			if (*buf == ',') buf++;
    1e20:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1e24:	bf08      	it	eq
    1e26:	4633      	moveq	r3, r6
			*sap = '\0';
    1e28:	f88e 5000 	strb.w	r5, [lr]
			break;
    1e2c:	e7ac      	b.n	1d88 <vscan+0x1c>
		    case 'd': scani (word); break;
    1e2e:	2e00      	cmp	r6, #0
    1e30:	d0bd      	beq.n	1dae <vscan+0x42>
    1e32:	469e      	mov	lr, r3
    1e34:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e38:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1e3c:	2809      	cmp	r0, #9
    1e3e:	d923      	bls.n	1e88 <vscan+0x11c>
    1e40:	2e2d      	cmp	r6, #45	; 0x2d
    1e42:	d001      	beq.n	1e48 <vscan+0xdc>
    1e44:	2e2b      	cmp	r6, #43	; 0x2b
    1e46:	d1f2      	bne.n	1e2e <vscan+0xc2>
    1e48:	7818      	ldrb	r0, [r3, #0]
    1e4a:	469e      	mov	lr, r3
    1e4c:	3830      	subs	r0, #48	; 0x30
    1e4e:	2809      	cmp	r0, #9
    1e50:	d8ef      	bhi.n	1e32 <vscan+0xc6>
    1e52:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1e56:	f1d9 0800 	rsbs	r8, r9, #0
    1e5a:	eb48 0809 	adc.w	r8, r8, r9
    1e5e:	f852 6b04 	ldr.w	r6, [r2], #4
    1e62:	3401      	adds	r4, #1
    1e64:	8035      	strh	r5, [r6, #0]
    1e66:	f89e 0000 	ldrb.w	r0, [lr]
    1e6a:	4673      	mov	r3, lr
    1e6c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1e70:	f1b9 0f09 	cmp.w	r9, #9
    1e74:	f10e 0e01 	add.w	lr, lr, #1
    1e78:	d909      	bls.n	1e8e <vscan+0x122>
    1e7a:	f1b8 0f00 	cmp.w	r8, #0
    1e7e:	d183      	bne.n	1d88 <vscan+0x1c>
    1e80:	8830      	ldrh	r0, [r6, #0]
    1e82:	4240      	negs	r0, r0
    1e84:	8030      	strh	r0, [r6, #0]
    1e86:	e77f      	b.n	1d88 <vscan+0x1c>
    1e88:	f04f 0800 	mov.w	r8, #0
    1e8c:	e7e7      	b.n	1e5e <vscan+0xf2>
    1e8e:	8833      	ldrh	r3, [r6, #0]
    1e90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e94:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1e98:	3030      	adds	r0, #48	; 0x30
    1e9a:	8030      	strh	r0, [r6, #0]
    1e9c:	e7e3      	b.n	1e66 <vscan+0xfa>
		    case 'u': scanu (word); break;
    1e9e:	2800      	cmp	r0, #0
    1ea0:	d085      	beq.n	1dae <vscan+0x42>
    1ea2:	7818      	ldrb	r0, [r3, #0]
    1ea4:	461e      	mov	r6, r3
    1ea6:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1eaa:	f1be 0f09 	cmp.w	lr, #9
    1eae:	f103 0301 	add.w	r3, r3, #1
    1eb2:	d8f4      	bhi.n	1e9e <vscan+0x132>
    1eb4:	f852 eb04 	ldr.w	lr, [r2], #4
    1eb8:	3401      	adds	r4, #1
    1eba:	f8ae 5000 	strh.w	r5, [lr]
    1ebe:	7830      	ldrb	r0, [r6, #0]
    1ec0:	4633      	mov	r3, r6
    1ec2:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1ec6:	f1b8 0f09 	cmp.w	r8, #9
    1eca:	f106 0601 	add.w	r6, r6, #1
    1ece:	f63f af5b 	bhi.w	1d88 <vscan+0x1c>
    1ed2:	f8be 3000 	ldrh.w	r3, [lr]
    1ed6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1eda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1ede:	3830      	subs	r0, #48	; 0x30
    1ee0:	f8ae 0000 	strh.w	r0, [lr]
    1ee4:	e7eb      	b.n	1ebe <vscan+0x152>
		    case 'x': scanx (word); break;
    1ee6:	f1be 0f00 	cmp.w	lr, #0
    1eea:	f43f af60 	beq.w	1dae <vscan+0x42>
    1eee:	f893 e000 	ldrb.w	lr, [r3]
    1ef2:	461e      	mov	r6, r3
    1ef4:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1ef8:	2809      	cmp	r0, #9
    1efa:	f103 0301 	add.w	r3, r3, #1
    1efe:	d904      	bls.n	1f0a <vscan+0x19e>
    1f00:	f02e 0020 	bic.w	r0, lr, #32
    1f04:	3841      	subs	r0, #65	; 0x41
    1f06:	2805      	cmp	r0, #5
    1f08:	d8ed      	bhi.n	1ee6 <vscan+0x17a>
    1f0a:	f852 eb04 	ldr.w	lr, [r2], #4
    1f0e:	3401      	adds	r4, #1
    1f10:	f8ae 5000 	strh.w	r5, [lr]
    1f14:	f106 0805 	add.w	r8, r6, #5
    1f18:	f896 9000 	ldrb.w	r9, [r6]
    1f1c:	4633      	mov	r3, r6
    1f1e:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1f22:	b2c0      	uxtb	r0, r0
    1f24:	2809      	cmp	r0, #9
    1f26:	f106 0601 	add.w	r6, r6, #1
    1f2a:	f240 80de 	bls.w	20ea <vscan+0x37e>
    1f2e:	f029 0020 	bic.w	r0, r9, #32
    1f32:	3841      	subs	r0, #65	; 0x41
    1f34:	2805      	cmp	r0, #5
    1f36:	f63f af27 	bhi.w	1d88 <vscan+0x1c>
    1f3a:	4546      	cmp	r6, r8
    1f3c:	f43f af24 	beq.w	1d88 <vscan+0x1c>
    1f40:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1f44:	2b05      	cmp	r3, #5
    1f46:	bf94      	ite	ls
    1f48:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1f4c:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1f50:	b2c0      	uxtb	r0, r0
    1f52:	f8be 3000 	ldrh.w	r3, [lr]
    1f56:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1f5a:	f8ae 0000 	strh.w	r0, [lr]
    1f5e:	e7db      	b.n	1f18 <vscan+0x1ac>
			switch (*fmt++) {
    1f60:	78b0      	ldrb	r0, [r6, #2]
    1f62:	1cf1      	adds	r1, r6, #3
    1f64:	2875      	cmp	r0, #117	; 0x75
    1f66:	d07d      	beq.n	2064 <vscan+0x2f8>
    1f68:	d831      	bhi.n	1fce <vscan+0x262>
    1f6a:	2800      	cmp	r0, #0
    1f6c:	f43f af1f 	beq.w	1dae <vscan+0x42>
    1f70:	2864      	cmp	r0, #100	; 0x64
    1f72:	f47f af09 	bne.w	1d88 <vscan+0x1c>
    1f76:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1f78:	f813 6b01 	ldrb.w	r6, [r3], #1
    1f7c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1f80:	2809      	cmp	r0, #9
    1f82:	d962      	bls.n	204a <vscan+0x2de>
    1f84:	2e2d      	cmp	r6, #45	; 0x2d
    1f86:	d001      	beq.n	1f8c <vscan+0x220>
    1f88:	2e2b      	cmp	r6, #43	; 0x2b
    1f8a:	d15b      	bne.n	2044 <vscan+0x2d8>
    1f8c:	7818      	ldrb	r0, [r3, #0]
    1f8e:	4698      	mov	r8, r3
    1f90:	3830      	subs	r0, #48	; 0x30
    1f92:	2809      	cmp	r0, #9
    1f94:	d8ef      	bhi.n	1f76 <vscan+0x20a>
    1f96:	3e2d      	subs	r6, #45	; 0x2d
    1f98:	4270      	negs	r0, r6
    1f9a:	4170      	adcs	r0, r6
    1f9c:	f852 eb04 	ldr.w	lr, [r2], #4
    1fa0:	3401      	adds	r4, #1
    1fa2:	f8ce 5000 	str.w	r5, [lr]
    1fa6:	f898 6000 	ldrb.w	r6, [r8]
    1faa:	4643      	mov	r3, r8
    1fac:	3e30      	subs	r6, #48	; 0x30
    1fae:	fa5f f986 	uxtb.w	r9, r6
    1fb2:	f1b9 0f09 	cmp.w	r9, #9
    1fb6:	f108 0801 	add.w	r8, r8, #1
    1fba:	d948      	bls.n	204e <vscan+0x2e2>
    1fbc:	2800      	cmp	r0, #0
    1fbe:	f47f aee3 	bne.w	1d88 <vscan+0x1c>
    1fc2:	f8de 0000 	ldr.w	r0, [lr]
    1fc6:	4240      	negs	r0, r0
    1fc8:	f8ce 0000 	str.w	r0, [lr]
    1fcc:	e6dc      	b.n	1d88 <vscan+0x1c>
    1fce:	2878      	cmp	r0, #120	; 0x78
    1fd0:	f47f aeda 	bne.w	1d88 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1fd4:	f893 e000 	ldrb.w	lr, [r3]
    1fd8:	461e      	mov	r6, r3
    1fda:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1fde:	2809      	cmp	r0, #9
    1fe0:	f103 0301 	add.w	r3, r3, #1
    1fe4:	d904      	bls.n	1ff0 <vscan+0x284>
    1fe6:	f02e 0020 	bic.w	r0, lr, #32
    1fea:	3841      	subs	r0, #65	; 0x41
    1fec:	2805      	cmp	r0, #5
    1fee:	d85a      	bhi.n	20a6 <vscan+0x33a>
    1ff0:	f852 eb04 	ldr.w	lr, [r2], #4
    1ff4:	3401      	adds	r4, #1
    1ff6:	f8ce 5000 	str.w	r5, [lr]
    1ffa:	f106 0809 	add.w	r8, r6, #9
    1ffe:	f896 9000 	ldrb.w	r9, [r6]
    2002:	4633      	mov	r3, r6
    2004:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    2008:	b2c0      	uxtb	r0, r0
    200a:	2809      	cmp	r0, #9
    200c:	f106 0601 	add.w	r6, r6, #1
    2010:	d96f      	bls.n	20f2 <vscan+0x386>
    2012:	f029 0020 	bic.w	r0, r9, #32
    2016:	3841      	subs	r0, #65	; 0x41
    2018:	2805      	cmp	r0, #5
    201a:	f63f aeb5 	bhi.w	1d88 <vscan+0x1c>
    201e:	4546      	cmp	r6, r8
    2020:	f43f aeb2 	beq.w	1d88 <vscan+0x1c>
    2024:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    2028:	2b05      	cmp	r3, #5
    202a:	bf94      	ite	ls
    202c:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    2030:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    2034:	b2c0      	uxtb	r0, r0
    2036:	f8de 3000 	ldr.w	r3, [lr]
    203a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    203e:	f8ce 0000 	str.w	r0, [lr]
    2042:	e7dc      	b.n	1ffe <vscan+0x292>
		    	    case 'd': scani (lword); break;
    2044:	2e00      	cmp	r6, #0
    2046:	d196      	bne.n	1f76 <vscan+0x20a>
    2048:	e6b1      	b.n	1dae <vscan+0x42>
    204a:	2000      	movs	r0, #0
    204c:	e7a6      	b.n	1f9c <vscan+0x230>
    204e:	f8de 3000 	ldr.w	r3, [lr]
    2052:	b2b6      	uxth	r6, r6
    2054:	437b      	muls	r3, r7
    2056:	1b9e      	subs	r6, r3, r6
    2058:	f8ce 6000 	str.w	r6, [lr]
    205c:	e7a3      	b.n	1fa6 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    205e:	2800      	cmp	r0, #0
    2060:	f43f aea5 	beq.w	1dae <vscan+0x42>
    2064:	7818      	ldrb	r0, [r3, #0]
    2066:	461e      	mov	r6, r3
    2068:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    206c:	f1be 0f09 	cmp.w	lr, #9
    2070:	f103 0301 	add.w	r3, r3, #1
    2074:	d8f3      	bhi.n	205e <vscan+0x2f2>
    2076:	f852 eb04 	ldr.w	lr, [r2], #4
    207a:	3401      	adds	r4, #1
    207c:	f8ce 5000 	str.w	r5, [lr]
    2080:	7830      	ldrb	r0, [r6, #0]
    2082:	4633      	mov	r3, r6
    2084:	3830      	subs	r0, #48	; 0x30
    2086:	fa5f f880 	uxtb.w	r8, r0
    208a:	f1b8 0f09 	cmp.w	r8, #9
    208e:	f106 0601 	add.w	r6, r6, #1
    2092:	f63f ae79 	bhi.w	1d88 <vscan+0x1c>
    2096:	f8de 3000 	ldr.w	r3, [lr]
    209a:	b280      	uxth	r0, r0
    209c:	fb07 0003 	mla	r0, r7, r3, r0
    20a0:	f8ce 0000 	str.w	r0, [lr]
    20a4:	e7ec      	b.n	2080 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    20a6:	f1be 0f00 	cmp.w	lr, #0
    20aa:	d193      	bne.n	1fd4 <vscan+0x268>
    20ac:	e67f      	b.n	1dae <vscan+0x42>
			if ((c = *buf++) == '\0')
    20ae:	f813 0b01 	ldrb.w	r0, [r3], #1
    20b2:	2800      	cmp	r0, #0
    20b4:	f43f ae7b 	beq.w	1dae <vscan+0x42>
			sap = va_arg (ap, char*);
    20b8:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    20bc:	3401      	adds	r4, #1
			*sap = c;
    20be:	7030      	strb	r0, [r6, #0]
			break;
    20c0:	e662      	b.n	1d88 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    20c2:	fa2c fe0e 	lsr.w	lr, ip, lr
    20c6:	f01e 0f01 	tst.w	lr, #1
    20ca:	f47f ae7a 	bne.w	1dc2 <vscan+0x56>
    20ce:	e687      	b.n	1de0 <vscan+0x74>
						*sap++ = *buf++;
    20d0:	f80e 3b01 	strb.w	r3, [lr], #1
    20d4:	e68a      	b.n	1dec <vscan+0x80>
			while (isspace (*buf)) buf++;
    20d6:	fa2c f000 	lsr.w	r0, ip, r0
    20da:	07c0      	lsls	r0, r0, #31
    20dc:	f53f ae95 	bmi.w	1e0a <vscan+0x9e>
    20e0:	e6a2      	b.n	1e28 <vscan+0xbc>
		return 0;
    20e2:	4604      	mov	r4, r0
    20e4:	e663      	b.n	1dae <vscan+0x42>
    20e6:	460c      	mov	r4, r1
    20e8:	e661      	b.n	1dae <vscan+0x42>
		    case 'x': scanx (word); break;
    20ea:	4546      	cmp	r6, r8
    20ec:	f47f af31 	bne.w	1f52 <vscan+0x1e6>
    20f0:	e64a      	b.n	1d88 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    20f2:	4546      	cmp	r6, r8
    20f4:	d19f      	bne.n	2036 <vscan+0x2ca>
    20f6:	e647      	b.n	1d88 <vscan+0x1c>
    20f8:	00800013 	addeq	r0, r0, r3, lsl r0

000020fc <NOROM_AONBatMonTemperatureGetDegC>:
    20fc:	4b08      	ldr	r3, [pc, #32]	; (2120 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    20fe:	6818      	ldr	r0, [r3, #0]
    2100:	4b08      	ldr	r3, [pc, #32]	; (2124 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    2102:	7819      	ldrb	r1, [r3, #0]
    2104:	4b08      	ldr	r3, [pc, #32]	; (2128 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    2106:	681a      	ldr	r2, [r3, #0]
    2108:	f340 0310 	sbfx	r3, r0, #0, #17
    210c:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    2110:	b248      	sxtb	r0, r1
    2112:	4350      	muls	r0, r2
    2114:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    2118:	3080      	adds	r0, #128	; 0x80
    211a:	1200      	asrs	r0, r0, #8
    211c:	4770      	bx	lr
    211e:	bf00      	nop
    2120:	40095030 	andmi	r5, r9, r0, lsr r0
    2124:	5000130c 	andpl	r1, r0, ip, lsl #6
    2128:	40095028 	andmi	r5, r9, r8, lsr #32

0000212c <NOROM_AONRTCCurrent64BitValueGet>:
    212c:	4b03      	ldr	r3, [pc, #12]	; (213c <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    212e:	4904      	ldr	r1, [pc, #16]	; (2140 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    2130:	681a      	ldr	r2, [r3, #0]
    2132:	6808      	ldr	r0, [r1, #0]
    2134:	6819      	ldr	r1, [r3, #0]
    2136:	4291      	cmp	r1, r2
    2138:	d1f8      	bne.n	212c <NOROM_AONRTCCurrent64BitValueGet>
    213a:	4770      	bx	lr
    213c:	40092008 	andmi	r2, r9, r8
    2140:	4009200c 	andmi	r2, r9, ip

00002144 <NOROM_CPUcpsid>:
    2144:	f3ef 8010 	mrs	r0, PRIMASK
    2148:	b672      	cpsid	i
    214a:	4770      	bx	lr

0000214c <NOROM_CPUcpsie>:
    214c:	f3ef 8010 	mrs	r0, PRIMASK
    2150:	b662      	cpsie	i
    2152:	4770      	bx	lr

00002154 <TrimAfterColdResetWakeupFromShutDown>:
    2154:	b538      	push	{r3, r4, r5, lr}
    2156:	4605      	mov	r5, r0
    2158:	4b26      	ldr	r3, [pc, #152]	; (21f4 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    215a:	2201      	movs	r2, #1
    215c:	601a      	str	r2, [r3, #0]
    215e:	4b26      	ldr	r3, [pc, #152]	; (21f8 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    2160:	681b      	ldr	r3, [r3, #0]
    2162:	2b00      	cmp	r3, #0
    2164:	d0fb      	beq.n	215e <TrimAfterColdResetWakeupFromShutDown+0xa>
    2166:	4b25      	ldr	r3, [pc, #148]	; (21fc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    2168:	22c0      	movs	r2, #192	; 0xc0
    216a:	601a      	str	r2, [r3, #0]
    216c:	4b24      	ldr	r3, [pc, #144]	; (2200 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    216e:	681b      	ldr	r3, [r3, #0]
    2170:	079b      	lsls	r3, r3, #30
    2172:	bf5f      	itttt	pl
    2174:	4b23      	ldrpl	r3, [pc, #140]	; (2204 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    2176:	4a24      	ldrpl	r2, [pc, #144]	; (2208 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    2178:	681b      	ldrpl	r3, [r3, #0]
    217a:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    217e:	bf5c      	itt	pl
    2180:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    2184:	7013      	strbpl	r3, [r2, #0]
    2186:	4b21      	ldr	r3, [pc, #132]	; (220c <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    2188:	2200      	movs	r2, #0
    218a:	601a      	str	r2, [r3, #0]
    218c:	4b20      	ldr	r3, [pc, #128]	; (2210 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    218e:	681c      	ldr	r4, [r3, #0]
    2190:	4620      	mov	r0, r4
    2192:	f000 f8d9 	bl	2348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    2196:	4628      	mov	r0, r5
    2198:	4621      	mov	r1, r4
    219a:	f000 fa0d 	bl	25b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    219e:	f240 221d 	movw	r2, #541	; 0x21d
    21a2:	4b1c      	ldr	r3, [pc, #112]	; (2214 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    21a4:	681b      	ldr	r3, [r3, #0]
    21a6:	b29b      	uxth	r3, r3
    21a8:	4293      	cmp	r3, r2
    21aa:	d814      	bhi.n	21d6 <TrimAfterColdResetWakeupFromShutDown+0x82>
    21ac:	4a1a      	ldr	r2, [pc, #104]	; (2218 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    21ae:	6813      	ldr	r3, [r2, #0]
    21b0:	6812      	ldr	r2, [r2, #0]
    21b2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    21b6:	f3c2 4203 	ubfx	r2, r2, #16, #4
    21ba:	b103      	cbz	r3, 21be <TrimAfterColdResetWakeupFromShutDown+0x6a>
    21bc:	3b01      	subs	r3, #1
    21be:	1f91      	subs	r1, r2, #6
    21c0:	2901      	cmp	r1, #1
    21c2:	bf86      	itte	hi
    21c4:	3202      	addhi	r2, #2
    21c6:	f002 020f 	andhi.w	r2, r2, #15
    21ca:	2207      	movls	r2, #7
    21cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    21d0:	4a12      	ldr	r2, [pc, #72]	; (221c <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    21d2:	b2db      	uxtb	r3, r3
    21d4:	7013      	strb	r3, [r2, #0]
    21d6:	4620      	mov	r0, r4
    21d8:	f000 fabc 	bl	2754 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    21dc:	4b10      	ldr	r3, [pc, #64]	; (2220 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    21de:	2002      	movs	r0, #2
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	68db      	ldr	r3, [r3, #12]
    21e4:	4798      	blx	r3
    21e6:	4b05      	ldr	r3, [pc, #20]	; (21fc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    21e8:	2240      	movs	r2, #64	; 0x40
    21ea:	601a      	str	r2, [r3, #0]
    21ec:	4b0d      	ldr	r3, [pc, #52]	; (2224 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    21ee:	2201      	movs	r2, #1
    21f0:	601a      	str	r2, [r3, #0]
    21f2:	bd38      	pop	{r3, r4, r5, pc}
    21f4:	40091010 	andmi	r1, r9, r0, lsl r0
    21f8:	43220294 			; <UNDEFINED> instruction: 0x43220294
    21fc:	400c6000 	andmi	r6, ip, r0
    2200:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2204:	50003fac 	andpl	r3, r0, ip, lsr #31
    2208:	40086256 	andmi	r6, r8, r6, asr r2
    220c:	40091040 	andmi	r1, r9, r0, asr #32
    2210:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2214:	50001314 	andpl	r1, r0, r4, lsl r3
    2218:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    221c:	40086002 	andmi	r6, r8, r2
    2220:	100001a0 	andne	r0, r0, r0, lsr #3
    2224:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00002228 <NOROM_SetupTrimDevice>:
    2228:	b510      	push	{r4, lr}
    222a:	4b1f      	ldr	r3, [pc, #124]	; (22a8 <NOROM_SetupTrimDevice+0x80>)
    222c:	681c      	ldr	r4, [r3, #0]
    222e:	1c63      	adds	r3, r4, #1
    2230:	bf08      	it	eq
    2232:	2400      	moveq	r4, #0
    2234:	f000 fcde 	bl	2bf4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    2238:	4b1c      	ldr	r3, [pc, #112]	; (22ac <NOROM_SetupTrimDevice+0x84>)
    223a:	2200      	movs	r2, #0
    223c:	601a      	str	r2, [r3, #0]
    223e:	4a1c      	ldr	r2, [pc, #112]	; (22b0 <NOROM_SetupTrimDevice+0x88>)
    2240:	2301      	movs	r3, #1
    2242:	6013      	str	r3, [r2, #0]
    2244:	4a1b      	ldr	r2, [pc, #108]	; (22b4 <NOROM_SetupTrimDevice+0x8c>)
    2246:	6013      	str	r3, [r2, #0]
    2248:	f000 fa3e 	bl	26c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    224c:	4b1a      	ldr	r3, [pc, #104]	; (22b8 <NOROM_SetupTrimDevice+0x90>)
    224e:	681b      	ldr	r3, [r3, #0]
    2250:	b123      	cbz	r3, 225c <NOROM_SetupTrimDevice+0x34>
    2252:	4b1a      	ldr	r3, [pc, #104]	; (22bc <NOROM_SetupTrimDevice+0x94>)
    2254:	4620      	mov	r0, r4
    2256:	681b      	ldr	r3, [r3, #0]
    2258:	f7ff ff7c 	bl	2154 <TrimAfterColdResetWakeupFromShutDown>
    225c:	4b18      	ldr	r3, [pc, #96]	; (22c0 <NOROM_SetupTrimDevice+0x98>)
    225e:	2200      	movs	r2, #0
    2260:	601a      	str	r2, [r3, #0]
    2262:	4a18      	ldr	r2, [pc, #96]	; (22c4 <NOROM_SetupTrimDevice+0x9c>)
    2264:	6813      	ldr	r3, [r2, #0]
    2266:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    226a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    226e:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    2272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2276:	6013      	str	r3, [r2, #0]
    2278:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    227c:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    2280:	6813      	ldr	r3, [r2, #0]
    2282:	f3c3 3301 	ubfx	r3, r3, #12, #2
    2286:	2b01      	cmp	r3, #1
    2288:	bf01      	itttt	eq
    228a:	6813      	ldreq	r3, [r2, #0]
    228c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    2290:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2294:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2298:	bf04      	itt	eq
    229a:	6011      	streq	r1, [r2, #0]
    229c:	6013      	streq	r3, [r2, #0]
    229e:	4b0a      	ldr	r3, [pc, #40]	; (22c8 <NOROM_SetupTrimDevice+0xa0>)
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d1fb      	bne.n	229e <NOROM_SetupTrimDevice+0x76>
    22a6:	bd10      	pop	{r4, pc}
    22a8:	5000131c 	andpl	r1, r0, ip, lsl r3
    22ac:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    22b0:	400c605c 	andmi	r6, ip, ip, asr r0
    22b4:	43042208 	movwmi	r2, #16904	; 0x4208
    22b8:	43280180 			; <UNDEFINED> instruction: 0x43280180
    22bc:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    22c0:	4008218c 	andmi	r2, r8, ip, lsl #3
    22c4:	40032048 	andmi	r2, r3, r8, asr #32
    22c8:	4268000c 	rsbmi	r0, r8, #12

000022cc <NOROM_SetupSetVddrLevel>:
    22cc:	b530      	push	{r4, r5, lr}
    22ce:	4b19      	ldr	r3, [pc, #100]	; (2334 <NOROM_SetupSetVddrLevel+0x68>)
    22d0:	681a      	ldr	r2, [r3, #0]
    22d2:	4b19      	ldr	r3, [pc, #100]	; (2338 <NOROM_SetupSetVddrLevel+0x6c>)
    22d4:	f3c2 6204 	ubfx	r2, r2, #24, #5
    22d8:	781b      	ldrb	r3, [r3, #0]
    22da:	2a15      	cmp	r2, #21
    22dc:	f003 031f 	and.w	r3, r3, #31
    22e0:	bf88      	it	hi
    22e2:	3a20      	subhi	r2, #32
    22e4:	2b15      	cmp	r3, #21
    22e6:	bf88      	it	hi
    22e8:	3b20      	subhi	r3, #32
    22ea:	4293      	cmp	r3, r2
    22ec:	d020      	beq.n	2330 <NOROM_SetupSetVddrLevel+0x64>
    22ee:	4913      	ldr	r1, [pc, #76]	; (233c <NOROM_SetupSetVddrLevel+0x70>)
    22f0:	2000      	movs	r0, #0
    22f2:	6008      	str	r0, [r1, #0]
    22f4:	4608      	mov	r0, r1
    22f6:	1ad1      	subs	r1, r2, r3
    22f8:	2902      	cmp	r1, #2
    22fa:	dc05      	bgt.n	2308 <NOROM_SetupSetVddrLevel+0x3c>
    22fc:	f06f 0401 	mvn.w	r4, #1
    2300:	42a1      	cmp	r1, r4
    2302:	bfb8      	it	lt
    2304:	4621      	movlt	r1, r4
    2306:	e000      	b.n	230a <NOROM_SetupSetVddrLevel+0x3e>
    2308:	2102      	movs	r1, #2
    230a:	440b      	add	r3, r1
    230c:	490c      	ldr	r1, [pc, #48]	; (2340 <NOROM_SetupSetVddrLevel+0x74>)
    230e:	4d0d      	ldr	r5, [pc, #52]	; (2344 <NOROM_SetupSetVddrLevel+0x78>)
    2310:	680c      	ldr	r4, [r1, #0]
    2312:	f003 041f 	and.w	r4, r3, #31
    2316:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    231a:	802c      	strh	r4, [r5, #0]
    231c:	4293      	cmp	r3, r2
    231e:	f04f 0401 	mov.w	r4, #1
    2322:	600c      	str	r4, [r1, #0]
    2324:	d1e7      	bne.n	22f6 <NOROM_SetupSetVddrLevel+0x2a>
    2326:	680b      	ldr	r3, [r1, #0]
    2328:	600c      	str	r4, [r1, #0]
    232a:	680b      	ldr	r3, [r1, #0]
    232c:	6004      	str	r4, [r0, #0]
    232e:	680b      	ldr	r3, [r1, #0]
    2330:	bd30      	pop	{r4, r5, pc}
    2332:	bf00      	nop
    2334:	50001388 	andpl	r1, r0, r8, lsl #7
    2338:	40086206 	andmi	r6, r8, r6, lsl #4
    233c:	43200098 			; <UNDEFINED> instruction: 0x43200098
    2340:	4009202c 	andmi	r2, r9, ip, lsr #32
    2344:	4008626c 	andmi	r6, r8, ip, ror #4

00002348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    2348:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    234c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2350:	b510      	push	{r4, lr}
    2352:	4604      	mov	r4, r0
    2354:	d10f      	bne.n	2376 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    2356:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    235a:	4a1e      	ldr	r2, [pc, #120]	; (23d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    235c:	2380      	movs	r3, #128	; 0x80
    235e:	7013      	strb	r3, [r2, #0]
    2360:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    2364:	f802 3c10 	strb.w	r3, [r2, #-16]
    2368:	f7ff ffb0 	bl	22cc <NOROM_SetupSetVddrLevel>
    236c:	4b1a      	ldr	r3, [pc, #104]	; (23d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    236e:	681b      	ldr	r3, [r3, #0]
    2370:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2374:	e003      	b.n	237e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    2376:	4b19      	ldr	r3, [pc, #100]	; (23dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    2378:	681b      	ldr	r3, [r3, #0]
    237a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    237e:	2b15      	cmp	r3, #21
    2380:	bf88      	it	hi
    2382:	3b20      	subhi	r3, #32
    2384:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2388:	3301      	adds	r3, #1
    238a:	2b15      	cmp	r3, #21
    238c:	dc05      	bgt.n	239a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    238e:	f06f 0209 	mvn.w	r2, #9
    2392:	4293      	cmp	r3, r2
    2394:	bfb8      	it	lt
    2396:	4613      	movlt	r3, r2
    2398:	e000      	b.n	239c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    239a:	2315      	movs	r3, #21
    239c:	4a10      	ldr	r2, [pc, #64]	; (23e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    239e:	f003 031f 	and.w	r3, r3, #31
    23a2:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    23a6:	8013      	strh	r3, [r2, #0]
    23a8:	4b0e      	ldr	r3, [pc, #56]	; (23e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    23aa:	681b      	ldr	r3, [r3, #0]
    23ac:	f013 0302 	ands.w	r3, r3, #2
    23b0:	bf0a      	itet	eq
    23b2:	4a0d      	ldreq	r2, [pc, #52]	; (23e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    23b4:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    23b8:	6013      	streq	r3, [r2, #0]
    23ba:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    23be:	4a0b      	ldr	r2, [pc, #44]	; (23ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    23c0:	f083 0301 	eor.w	r3, r3, #1
    23c4:	6013      	str	r3, [r2, #0]
    23c6:	f3c4 6480 	ubfx	r4, r4, #26, #1
    23ca:	4b09      	ldr	r3, [pc, #36]	; (23f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    23cc:	f084 0401 	eor.w	r4, r4, #1
    23d0:	601c      	str	r4, [r3, #0]
    23d2:	bd10      	pop	{r4, pc}
    23d4:	40086225 	andmi	r6, r8, r5, lsr #4
    23d8:	50001388 	andpl	r1, r0, r8, lsl #7
    23dc:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    23e0:	4008626e 	andmi	r6, r8, lr, ror #4
    23e4:	40090000 	andmi	r0, r9, r0
    23e8:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    23ec:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    23f0:	43200008 			; <UNDEFINED> instruction: 0x43200008

000023f4 <NOROM_SetupGetTrimForAnabypassValue1>:
    23f4:	4b15      	ldr	r3, [pc, #84]	; (244c <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    23f6:	0381      	lsls	r1, r0, #14
    23f8:	681b      	ldr	r3, [r3, #0]
    23fa:	f3c3 6283 	ubfx	r2, r3, #26, #4
    23fe:	f3c3 238f 	ubfx	r3, r3, #10, #16
    2402:	d41f      	bmi.n	2444 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2404:	f340 2007 	sbfx	r0, r0, #8, #8
    2408:	2800      	cmp	r0, #0
    240a:	da19      	bge.n	2440 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    240c:	085b      	lsrs	r3, r3, #1
    240e:	d105      	bne.n	241c <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    2410:	0852      	lsrs	r2, r2, #1
    2412:	bf06      	itte	eq
    2414:	2301      	moveq	r3, #1
    2416:	461a      	moveq	r2, r3
    2418:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    241c:	3001      	adds	r0, #1
    241e:	e7f3      	b.n	2408 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    2420:	005b      	lsls	r3, r3, #1
    2422:	f043 0301 	orr.w	r3, r3, #1
    2426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    242a:	d308      	bcc.n	243e <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    242c:	0052      	lsls	r2, r2, #1
    242e:	f042 0201 	orr.w	r2, r2, #1
    2432:	2a0f      	cmp	r2, #15
    2434:	bf86      	itte	hi
    2436:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    243a:	220f      	movhi	r2, #15
    243c:	2301      	movls	r3, #1
    243e:	3801      	subs	r0, #1
    2440:	2800      	cmp	r0, #0
    2442:	d1ed      	bne.n	2420 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    2444:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    2448:	4770      	bx	lr
    244a:	bf00      	nop
    244c:	50001350 	andpl	r1, r0, r0, asr r3

00002450 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    2450:	4a04      	ldr	r2, [pc, #16]	; (2464 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    2452:	6813      	ldr	r3, [r2, #0]
    2454:	6810      	ldr	r0, [r2, #0]
    2456:	f3c3 0387 	ubfx	r3, r3, #2, #8
    245a:	f000 0003 	and.w	r0, r0, #3
    245e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    2462:	4770      	bx	lr
    2464:	50001350 	andpl	r1, r0, r0, asr r3

00002468 <NOROM_SetupGetTrimForAmpcompTh2>:
    2468:	4b02      	ldr	r3, [pc, #8]	; (2474 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    246a:	6818      	ldr	r0, [r3, #0]
    246c:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    2470:	4770      	bx	lr
    2472:	bf00      	nop
    2474:	50001374 	andpl	r1, r0, r4, ror r3

00002478 <NOROM_SetupGetTrimForAmpcompTh1>:
    2478:	4b03      	ldr	r3, [pc, #12]	; (2488 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    247a:	6818      	ldr	r0, [r3, #0]
    247c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2480:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	50001370 	andpl	r1, r0, r0, ror r3

0000248c <NOROM_SetupGetTrimForAmpcompCtrl>:
    248c:	b570      	push	{r4, r5, r6, lr}
    248e:	4b15      	ldr	r3, [pc, #84]	; (24e4 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    2490:	4915      	ldr	r1, [pc, #84]	; (24e8 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    2492:	681c      	ldr	r4, [r3, #0]
    2494:	6809      	ldr	r1, [r1, #0]
    2496:	f3c4 5203 	ubfx	r2, r4, #20, #4
    249a:	f011 0501 	ands.w	r5, r1, #1
    249e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    24a2:	d113      	bne.n	24cc <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    24a4:	4911      	ldr	r1, [pc, #68]	; (24ec <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    24a6:	6809      	ldr	r1, [r1, #0]
    24a8:	f341 2603 	sbfx	r6, r1, #8, #4
    24ac:	18b2      	adds	r2, r6, r2
    24ae:	d403      	bmi.n	24b8 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    24b0:	2a0f      	cmp	r2, #15
    24b2:	bfa8      	it	ge
    24b4:	220f      	movge	r2, #15
    24b6:	e000      	b.n	24ba <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    24b8:	462a      	mov	r2, r5
    24ba:	f341 3103 	sbfx	r1, r1, #12, #4
    24be:	18cb      	adds	r3, r1, r3
    24c0:	d403      	bmi.n	24ca <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    24c2:	2b0f      	cmp	r3, #15
    24c4:	bfa8      	it	ge
    24c6:	230f      	movge	r3, #15
    24c8:	e000      	b.n	24cc <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    24ca:	2300      	movs	r3, #0
    24cc:	b2a1      	uxth	r1, r4
    24ce:	2821      	cmp	r0, #33	; 0x21
    24d0:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    24d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    24d8:	bf84      	itt	hi
    24da:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    24de:	4323      	orrhi	r3, r4
    24e0:	4618      	mov	r0, r3
    24e2:	bd70      	pop	{r4, r5, r6, pc}
    24e4:	50001378 	andpl	r1, r0, r8, ror r3
    24e8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    24ec:	50003fac 	andpl	r3, r0, ip, lsr #31

000024f0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    24f0:	281f      	cmp	r0, #31
    24f2:	bf83      	ittte	hi
    24f4:	4b02      	ldrhi	r3, [pc, #8]	; (2500 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    24f6:	6818      	ldrhi	r0, [r3, #0]
    24f8:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    24fc:	2000      	movls	r0, #0
    24fe:	4770      	bx	lr
    2500:	50001398 	mulpl	r0, r8, r3

00002504 <NOROM_SetupGetTrimForAdcShModeEn>:
    2504:	2821      	cmp	r0, #33	; 0x21
    2506:	bf83      	ittte	hi
    2508:	4b02      	ldrhi	r3, [pc, #8]	; (2514 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    250a:	6818      	ldrhi	r0, [r3, #0]
    250c:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    2510:	2001      	movls	r0, #1
    2512:	4770      	bx	lr
    2514:	5000138c 	andpl	r1, r0, ip, lsl #7

00002518 <NOROM_SetupGetTrimForAdcShVbufEn>:
    2518:	2821      	cmp	r0, #33	; 0x21
    251a:	bf83      	ittte	hi
    251c:	4b02      	ldrhi	r3, [pc, #8]	; (2528 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    251e:	6818      	ldrhi	r0, [r3, #0]
    2520:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    2524:	2001      	movls	r0, #1
    2526:	4770      	bx	lr
    2528:	5000138c 	andpl	r1, r0, ip, lsl #7

0000252c <NOROM_SetupGetTrimForXoscHfCtl>:
    252c:	281f      	cmp	r0, #31
    252e:	bf81      	itttt	hi
    2530:	4b07      	ldrhi	r3, [pc, #28]	; (2550 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    2532:	681b      	ldrhi	r3, [r3, #0]
    2534:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    2538:	0080      	lslhi	r0, r0, #2
    253a:	bf81      	itttt	hi
    253c:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    2540:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    2544:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    2548:	4318      	orrhi	r0, r3
    254a:	bf98      	it	ls
    254c:	2000      	movls	r0, #0
    254e:	4770      	bx	lr
    2550:	50001398 	mulpl	r0, r8, r3

00002554 <NOROM_SetupGetTrimForXoscHfFastStart>:
    2554:	4b02      	ldr	r3, [pc, #8]	; (2560 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    2556:	6818      	ldr	r0, [r3, #0]
    2558:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    255c:	4770      	bx	lr
    255e:	bf00      	nop
    2560:	5000138c 	andpl	r1, r0, ip, lsl #7

00002564 <NOROM_SetupGetTrimForRadcExtCfg>:
    2564:	281f      	cmp	r0, #31
    2566:	bf81      	itttt	hi
    2568:	4b07      	ldrhi	r3, [pc, #28]	; (2588 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    256a:	681b      	ldrhi	r3, [r3, #0]
    256c:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    2570:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    2574:	bf81      	itttt	hi
    2576:	0400      	lslhi	r0, r0, #16
    2578:	031b      	lslhi	r3, r3, #12
    257a:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    257e:	b29b      	uxthhi	r3, r3
    2580:	bf8c      	ite	hi
    2582:	4318      	orrhi	r0, r3
    2584:	4801      	ldrls	r0, [pc, #4]	; (258c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    2586:	4770      	bx	lr
    2588:	50001398 	mulpl	r0, r8, r3
    258c:	403f8000 	eorsmi	r8, pc, r0

00002590 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    2590:	2821      	cmp	r0, #33	; 0x21
    2592:	bf83      	ittte	hi
    2594:	4b02      	ldrhi	r3, [pc, #8]	; (25a0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    2596:	6818      	ldrhi	r0, [r3, #0]
    2598:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    259c:	2000      	movls	r0, #0
    259e:	4770      	bx	lr
    25a0:	5000138c 	andpl	r1, r0, ip, lsl #7

000025a4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    25a4:	2821      	cmp	r0, #33	; 0x21
    25a6:	bf83      	ittte	hi
    25a8:	4b02      	ldrhi	r3, [pc, #8]	; (25b4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    25aa:	6818      	ldrhi	r0, [r3, #0]
    25ac:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    25b0:	2000      	movls	r0, #0
    25b2:	4770      	bx	lr
    25b4:	5000138c 	andpl	r1, r0, ip, lsl #7

000025b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    25b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    25ba:	4605      	mov	r5, r0
    25bc:	4608      	mov	r0, r1
    25be:	f7ff ff19 	bl	23f4 <NOROM_SetupGetTrimForAnabypassValue1>
    25c2:	4c39      	ldr	r4, [pc, #228]	; (26a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    25c4:	4602      	mov	r2, r0
    25c6:	2118      	movs	r1, #24
    25c8:	4620      	mov	r0, r4
    25ca:	f000 fb33 	bl	2c34 <NOROM_DDI32RegWrite>
    25ce:	f7ff ff3f 	bl	2450 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    25d2:	4b36      	ldr	r3, [pc, #216]	; (26ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    25d4:	b280      	uxth	r0, r0
    25d6:	681b      	ldr	r3, [r3, #0]
    25d8:	9000      	str	r0, [sp, #0]
    25da:	685e      	ldr	r6, [r3, #4]
    25dc:	4620      	mov	r0, r4
    25de:	212c      	movs	r1, #44	; 0x2c
    25e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    25e4:	2300      	movs	r3, #0
    25e6:	47b0      	blx	r6
    25e8:	4b31      	ldr	r3, [pc, #196]	; (26b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    25ea:	4620      	mov	r0, r4
    25ec:	681a      	ldr	r2, [r3, #0]
    25ee:	211c      	movs	r1, #28
    25f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
    25f4:	f000 fb1e 	bl	2c34 <NOROM_DDI32RegWrite>
    25f8:	f7ff ff36 	bl	2468 <NOROM_SetupGetTrimForAmpcompTh2>
    25fc:	2114      	movs	r1, #20
    25fe:	4602      	mov	r2, r0
    2600:	4620      	mov	r0, r4
    2602:	f000 fb17 	bl	2c34 <NOROM_DDI32RegWrite>
    2606:	f7ff ff37 	bl	2478 <NOROM_SetupGetTrimForAmpcompTh1>
    260a:	2110      	movs	r1, #16
    260c:	4602      	mov	r2, r0
    260e:	4620      	mov	r0, r4
    2610:	f000 fb10 	bl	2c34 <NOROM_DDI32RegWrite>
    2614:	4628      	mov	r0, r5
    2616:	f7ff ff39 	bl	248c <NOROM_SetupGetTrimForAmpcompCtrl>
    261a:	210c      	movs	r1, #12
    261c:	4602      	mov	r2, r0
    261e:	4620      	mov	r0, r4
    2620:	f000 fb08 	bl	2c34 <NOROM_DDI32RegWrite>
    2624:	4628      	mov	r0, r5
    2626:	f7ff ff6d 	bl	2504 <NOROM_SetupGetTrimForAdcShModeEn>
    262a:	0040      	lsls	r0, r0, #1
    262c:	4e21      	ldr	r6, [pc, #132]	; (26b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    262e:	f040 0020 	orr.w	r0, r0, #32
    2632:	b2c0      	uxtb	r0, r0
    2634:	7030      	strb	r0, [r6, #0]
    2636:	4628      	mov	r0, r5
    2638:	f7ff ff6e 	bl	2518 <NOROM_SetupGetTrimForAdcShVbufEn>
    263c:	f040 0010 	orr.w	r0, r0, #16
    2640:	b2c0      	uxtb	r0, r0
    2642:	7030      	strb	r0, [r6, #0]
    2644:	4628      	mov	r0, r5
    2646:	f7ff ff71 	bl	252c <NOROM_SetupGetTrimForXoscHfCtl>
    264a:	2128      	movs	r1, #40	; 0x28
    264c:	4602      	mov	r2, r0
    264e:	4620      	mov	r0, r4
    2650:	f000 faf0 	bl	2c34 <NOROM_DDI32RegWrite>
    2654:	4628      	mov	r0, r5
    2656:	f7ff ff4b 	bl	24f0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    265a:	0040      	lsls	r0, r0, #1
    265c:	4b16      	ldr	r3, [pc, #88]	; (26b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    265e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    2662:	b2c0      	uxtb	r0, r0
    2664:	7018      	strb	r0, [r3, #0]
    2666:	4628      	mov	r0, r5
    2668:	f7ff ff92 	bl	2590 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    266c:	00c0      	lsls	r0, r0, #3
    266e:	4b13      	ldr	r3, [pc, #76]	; (26bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    2670:	f060 007f 	orn	r0, r0, #127	; 0x7f
    2674:	b2c0      	uxtb	r0, r0
    2676:	7018      	strb	r0, [r3, #0]
    2678:	4628      	mov	r0, r5
    267a:	f7ff ff93 	bl	25a4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    267e:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    2682:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    2686:	4b0e      	ldr	r3, [pc, #56]	; (26c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2688:	b280      	uxth	r0, r0
    268a:	8018      	strh	r0, [r3, #0]
    268c:	4628      	mov	r0, r5
    268e:	f7ff ff69 	bl	2564 <NOROM_SetupGetTrimForRadcExtCfg>
    2692:	2108      	movs	r1, #8
    2694:	4602      	mov	r2, r0
    2696:	4620      	mov	r0, r4
    2698:	f000 facc 	bl	2c34 <NOROM_DDI32RegWrite>
    269c:	4b09      	ldr	r3, [pc, #36]	; (26c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    269e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    26a2:	601a      	str	r2, [r3, #0]
    26a4:	b002      	add	sp, #8
    26a6:	bd70      	pop	{r4, r5, r6, pc}
    26a8:	400ca000 	andmi	sl, ip, r0
    26ac:	100001a4 	andne	r0, r0, r4, lsr #3
    26b0:	5000137c 	andpl	r1, r0, ip, ror r3
    26b4:	400ca149 	andmi	sl, ip, r9, asr #2
    26b8:	400ca14c 	andmi	sl, ip, ip, asr #2
    26bc:	400ca141 	andmi	sl, ip, r1, asr #2
    26c0:	400ca1dc 	ldrdmi	sl, [ip], -ip
    26c4:	400ca040 	andmi	sl, ip, r0, asr #32

000026c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    26c8:	b530      	push	{r4, r5, lr}
    26ca:	4b14      	ldr	r3, [pc, #80]	; (271c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    26cc:	681b      	ldr	r3, [r3, #0]
    26ce:	2b00      	cmp	r3, #0
    26d0:	d1fb      	bne.n	26ca <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    26d2:	4a13      	ldr	r2, [pc, #76]	; (2720 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    26d4:	4913      	ldr	r1, [pc, #76]	; (2724 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    26d6:	6813      	ldr	r3, [r2, #0]
    26d8:	6809      	ldr	r1, [r1, #0]
    26da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    26de:	f023 0307 	bic.w	r3, r3, #7
    26e2:	f011 0f04 	tst.w	r1, #4
    26e6:	4614      	mov	r4, r2
    26e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    26ec:	d003      	beq.n	26f6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    26ee:	f043 0305 	orr.w	r3, r3, #5
    26f2:	6013      	str	r3, [r2, #0]
    26f4:	bd30      	pop	{r4, r5, pc}
    26f6:	490c      	ldr	r1, [pc, #48]	; (2728 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    26f8:	f043 0004 	orr.w	r0, r3, #4
    26fc:	680d      	ldr	r5, [r1, #0]
    26fe:	07ad      	lsls	r5, r5, #30
    2700:	d009      	beq.n	2716 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    2702:	f043 0307 	orr.w	r3, r3, #7
    2706:	6013      	str	r3, [r2, #0]
    2708:	680b      	ldr	r3, [r1, #0]
    270a:	f003 0303 	and.w	r3, r3, #3
    270e:	2b03      	cmp	r3, #3
    2710:	d1fa      	bne.n	2708 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    2712:	6020      	str	r0, [r4, #0]
    2714:	bd30      	pop	{r4, r5, pc}
    2716:	6010      	str	r0, [r2, #0]
    2718:	bd30      	pop	{r4, r5, pc}
    271a:	bf00      	nop
    271c:	4268000c 	rsbmi	r0, r8, #12
    2720:	40034004 	andmi	r4, r3, r4
    2724:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2728:	40034000 	andmi	r4, r3, r0

0000272c <NOROM_SetupSetAonRtcSubSecInc>:
    272c:	4b07      	ldr	r3, [pc, #28]	; (274c <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    272e:	b282      	uxth	r2, r0
    2730:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2734:	601a      	str	r2, [r3, #0]
    2736:	6058      	str	r0, [r3, #4]
    2738:	2201      	movs	r2, #1
    273a:	3308      	adds	r3, #8
    273c:	601a      	str	r2, [r3, #0]
    273e:	4a04      	ldr	r2, [pc, #16]	; (2750 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    2740:	6812      	ldr	r2, [r2, #0]
    2742:	2a00      	cmp	r2, #0
    2744:	d0fb      	beq.n	273e <NOROM_SetupSetAonRtcSubSecInc+0x12>
    2746:	2200      	movs	r2, #0
    2748:	601a      	str	r2, [r3, #0]
    274a:	4770      	bx	lr
    274c:	400c603c 	andmi	r6, ip, ip, lsr r0
    2750:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00002754 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    2754:	f3c0 4381 	ubfx	r3, r0, #18, #2
    2758:	2b01      	cmp	r3, #1
    275a:	b510      	push	{r4, lr}
    275c:	4604      	mov	r4, r0
    275e:	d002      	beq.n	2766 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    2760:	2b02      	cmp	r3, #2
    2762:	d02f      	beq.n	27c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    2764:	e02a      	b.n	27bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    2766:	4b42      	ldr	r3, [pc, #264]	; (2870 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    2768:	681b      	ldr	r3, [r3, #0]
    276a:	039a      	lsls	r2, r3, #14
    276c:	d426      	bmi.n	27bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    276e:	4a41      	ldr	r2, [pc, #260]	; (2874 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    2770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2774:	6011      	str	r1, [r2, #0]
    2776:	4940      	ldr	r1, [pc, #256]	; (2878 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    2778:	f3c3 3003 	ubfx	r0, r3, #12, #4
    277c:	680a      	ldr	r2, [r1, #0]
    277e:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    2782:	4302      	orrs	r2, r0
    2784:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2788:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    278c:	600a      	str	r2, [r1, #0]
    278e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    2792:	f3c3 2003 	ubfx	r0, r3, #8, #4
    2796:	f022 020f 	bic.w	r2, r2, #15
    279a:	4302      	orrs	r2, r0
    279c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    27a0:	f841 2c01 	str.w	r2, [r1, #-1]
    27a4:	f851 2c02 	ldr.w	r2, [r1, #-2]
    27a8:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    27ac:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    27b0:	4313      	orrs	r3, r2
    27b2:	f851 2c02 	ldr.w	r2, [r1, #-2]
    27b6:	f841 3c02 	str.w	r3, [r1, #-2]
    27ba:	e003      	b.n	27c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    27bc:	4b2d      	ldr	r3, [pc, #180]	; (2874 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    27be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    27c2:	601a      	str	r2, [r3, #0]
    27c4:	4b2d      	ldr	r3, [pc, #180]	; (287c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    27c6:	681b      	ldr	r3, [r3, #0]
    27c8:	071b      	lsls	r3, r3, #28
    27ca:	bf5e      	ittt	pl
    27cc:	4b2c      	ldrpl	r3, [pc, #176]	; (2880 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    27ce:	2240      	movpl	r2, #64	; 0x40
    27d0:	601a      	strpl	r2, [r3, #0]
    27d2:	4b2c      	ldr	r3, [pc, #176]	; (2884 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    27d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    27d8:	601a      	str	r2, [r3, #0]
    27da:	f7ff febb 	bl	2554 <NOROM_SetupGetTrimForXoscHfFastStart>
    27de:	4b2a      	ldr	r3, [pc, #168]	; (2888 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    27e0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    27e4:	b2c0      	uxtb	r0, r0
    27e6:	7018      	strb	r0, [r3, #0]
    27e8:	f3c4 5081 	ubfx	r0, r4, #22, #2
    27ec:	2801      	cmp	r0, #1
    27ee:	d00b      	beq.n	2808 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    27f0:	d302      	bcc.n	27f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    27f2:	2802      	cmp	r0, #2
    27f4:	d026      	beq.n	2844 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    27f6:	e028      	b.n	284a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    27f8:	2004      	movs	r0, #4
    27fa:	2101      	movs	r1, #1
    27fc:	f000 fa1e 	bl	2c3c <NOROM_OSCClockSourceSet>
    2800:	4822      	ldr	r0, [pc, #136]	; (288c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    2802:	f7ff ff93 	bl	272c <NOROM_SetupSetAonRtcSubSecInc>
    2806:	e024      	b.n	2852 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2808:	f000 fa46 	bl	2c98 <NOROM_OSCClockSourceGet>
    280c:	4604      	mov	r4, r0
    280e:	2004      	movs	r0, #4
    2810:	4621      	mov	r1, r4
    2812:	f000 fa13 	bl	2c3c <NOROM_OSCClockSourceSet>
    2816:	2004      	movs	r0, #4
    2818:	f000 fa3e 	bl	2c98 <NOROM_OSCClockSourceGet>
    281c:	42a0      	cmp	r0, r4
    281e:	d1fa      	bne.n	2816 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    2820:	4b1b      	ldr	r3, [pc, #108]	; (2890 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    2822:	681c      	ldr	r4, [r3, #0]
    2824:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    2828:	f7ff ff80 	bl	272c <NOROM_SetupSetAonRtcSubSecInc>
    282c:	4b19      	ldr	r3, [pc, #100]	; (2894 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    282e:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    2832:	681b      	ldr	r3, [r3, #0]
    2834:	0e20      	lsrs	r0, r4, #24
    2836:	681b      	ldr	r3, [r3, #0]
    2838:	2107      	movs	r1, #7
    283a:	4798      	blx	r3
    283c:	4b0d      	ldr	r3, [pc, #52]	; (2874 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    283e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2842:	601a      	str	r2, [r3, #0]
    2844:	2004      	movs	r0, #4
    2846:	2103      	movs	r1, #3
    2848:	e001      	b.n	284e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    284a:	2004      	movs	r0, #4
    284c:	2102      	movs	r1, #2
    284e:	f000 f9f5 	bl	2c3c <NOROM_OSCClockSourceSet>
    2852:	4b11      	ldr	r3, [pc, #68]	; (2898 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    2854:	4a11      	ldr	r2, [pc, #68]	; (289c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    2856:	681b      	ldr	r3, [r3, #0]
    2858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    285c:	7013      	strb	r3, [r2, #0]
    285e:	f647 0218 	movw	r2, #30744	; 0x7818
    2862:	4b0f      	ldr	r3, [pc, #60]	; (28a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    2864:	801a      	strh	r2, [r3, #0]
    2866:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    286a:	3b44      	subs	r3, #68	; 0x44
    286c:	681b      	ldr	r3, [r3, #0]
    286e:	bd10      	pop	{r4, pc}
    2870:	5000138c 	andpl	r1, r0, ip, lsl #7
    2874:	400ca040 	andmi	sl, ip, r0, asr #32
    2878:	4008600c 	andmi	r6, r8, ip
    287c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2880:	400ca068 	andmi	sl, ip, r8, rrx
    2884:	400ca080 	andmi	sl, ip, r0, lsl #1
    2888:	400ca108 	andmi	sl, ip, r8, lsl #2
    288c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    2890:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2894:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2898:	5000136c 	andpl	r1, r0, ip, ror #6
    289c:	400cb00b 	andmi	fp, ip, fp
    28a0:	400cb070 	andmi	fp, ip, r0, ror r0

000028a4 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    28a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28a8:	4b77      	ldr	r3, [pc, #476]	; (2a88 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    28aa:	4607      	mov	r7, r0
    28ac:	681b      	ldr	r3, [r3, #0]
    28ae:	4e77      	ldr	r6, [pc, #476]	; (2a8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    28b0:	f013 0f02 	tst.w	r3, #2
    28b4:	d004      	beq.n	28c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    28b6:	2308      	movs	r3, #8
    28b8:	71b3      	strb	r3, [r6, #6]
    28ba:	4a75      	ldr	r2, [pc, #468]	; (2a90 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    28bc:	4b75      	ldr	r3, [pc, #468]	; (2a94 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    28be:	e0df      	b.n	2a80 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    28c0:	f7ff fc1c 	bl	20fc <NOROM_AONBatMonTemperatureGetDegC>
    28c4:	4b74      	ldr	r3, [pc, #464]	; (2a98 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    28c6:	681d      	ldr	r5, [r3, #0]
    28c8:	172a      	asrs	r2, r5, #28
    28ca:	02ac      	lsls	r4, r5, #10
    28cc:	f102 0101 	add.w	r1, r2, #1
    28d0:	d408      	bmi.n	28e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    28d2:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    28d6:	10db      	asrs	r3, r3, #3
    28d8:	2b08      	cmp	r3, #8
    28da:	bfa8      	it	ge
    28dc:	2308      	movge	r3, #8
    28de:	4299      	cmp	r1, r3
    28e0:	bfb8      	it	lt
    28e2:	4619      	movlt	r1, r3
    28e4:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    28e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    28ec:	d10a      	bne.n	2904 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    28ee:	4b6b      	ldr	r3, [pc, #428]	; (2a9c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    28f0:	681a      	ldr	r2, [r3, #0]
    28f2:	681b      	ldr	r3, [r3, #0]
    28f4:	f3c2 2204 	ubfx	r2, r2, #8, #5
    28f8:	2a15      	cmp	r2, #21
    28fa:	bf88      	it	hi
    28fc:	3a20      	subhi	r2, #32
    28fe:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2902:	e00a      	b.n	291a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2904:	4b66      	ldr	r3, [pc, #408]	; (2aa0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2906:	681a      	ldr	r2, [r3, #0]
    2908:	4b66      	ldr	r3, [pc, #408]	; (2aa4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    290a:	f3c2 6204 	ubfx	r2, r2, #24, #5
    290e:	681b      	ldr	r3, [r3, #0]
    2910:	2a15      	cmp	r2, #21
    2912:	bf88      	it	hi
    2914:	3a20      	subhi	r2, #32
    2916:	f3c3 4304 	ubfx	r3, r3, #16, #5
    291a:	2b15      	cmp	r3, #21
    291c:	440a      	add	r2, r1
    291e:	bf88      	it	hi
    2920:	3b20      	subhi	r3, #32
    2922:	2a15      	cmp	r2, #21
    2924:	dc05      	bgt.n	2932 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    2926:	f06f 0109 	mvn.w	r1, #9
    292a:	428a      	cmp	r2, r1
    292c:	bfb8      	it	lt
    292e:	460a      	movlt	r2, r1
    2930:	e000      	b.n	2934 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    2932:	2215      	movs	r2, #21
    2934:	4c5c      	ldr	r4, [pc, #368]	; (2aa8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    2936:	f002 011f 	and.w	r1, r2, #31
    293a:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    293e:	8021      	strh	r1, [r4, #0]
    2940:	495a      	ldr	r1, [pc, #360]	; (2aac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    2942:	6809      	ldr	r1, [r1, #0]
    2944:	f011 0403 	ands.w	r4, r1, #3
    2948:	bf18      	it	ne
    294a:	2401      	movne	r4, #1
    294c:	0749      	lsls	r1, r1, #29
    294e:	bf48      	it	mi
    2950:	f044 0402 	orrmi.w	r4, r4, #2
    2954:	b10f      	cbz	r7, 295a <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    2956:	f044 0404 	orr.w	r4, r4, #4
    295a:	f996 1007 	ldrsb.w	r1, [r6, #7]
    295e:	1a41      	subs	r1, r0, r1
    2960:	2904      	cmp	r1, #4
    2962:	dc03      	bgt.n	296c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    2964:	4949      	ldr	r1, [pc, #292]	; (2a8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2966:	7989      	ldrb	r1, [r1, #6]
    2968:	428c      	cmp	r4, r1
    296a:	d06f      	beq.n	2a4c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    296c:	f1b0 010f 	subs.w	r1, r0, #15
    2970:	9101      	str	r1, [sp, #4]
    2972:	f004 0101 	and.w	r1, r4, #1
    2976:	f8df a144 	ldr.w	sl, [pc, #324]	; 2abc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    297a:	f004 0904 	and.w	r9, r4, #4
    297e:	f004 0802 	and.w	r8, r4, #2
    2982:	460f      	mov	r7, r1
    2984:	d42a      	bmi.n	29dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2986:	9901      	ldr	r1, [sp, #4]
    2988:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    298c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    2990:	f1be 0f07 	cmp.w	lr, #7
    2994:	9101      	str	r1, [sp, #4]
    2996:	d801      	bhi.n	299c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2998:	d104      	bne.n	29a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    299a:	e001      	b.n	29a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    299c:	f04f 0e07 	mov.w	lr, #7
    29a0:	2106      	movs	r1, #6
    29a2:	e000      	b.n	29a6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    29a4:	4671      	mov	r1, lr
    29a6:	f8df b118 	ldr.w	fp, [pc, #280]	; 2ac0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    29aa:	3101      	adds	r1, #1
    29ac:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    29b0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    29b4:	ebc1 0c0c 	rsb	ip, r1, ip
    29b8:	fa5f f18c 	uxtb.w	r1, ip
    29bc:	f1b9 0f00 	cmp.w	r9, #0
    29c0:	d002      	beq.n	29c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    29c2:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    29c6:	4459      	add	r1, fp
    29c8:	f1b8 0f00 	cmp.w	r8, #0
    29cc:	d002      	beq.n	29d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    29ce:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    29d2:	4459      	add	r1, fp
    29d4:	b12f      	cbz	r7, 29e2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    29d6:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    29da:	e002      	b.n	29e2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    29dc:	f04f 0e00 	mov.w	lr, #0
    29e0:	4671      	mov	r1, lr
    29e2:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    29e6:	fa5f fc8a 	uxtb.w	ip, sl
    29ea:	f1b9 0f00 	cmp.w	r9, #0
    29ee:	d002      	beq.n	29f6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    29f0:	f3ca 2907 	ubfx	r9, sl, #8, #8
    29f4:	44cc      	add	ip, r9
    29f6:	f1b8 0f00 	cmp.w	r8, #0
    29fa:	d002      	beq.n	2a02 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    29fc:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2a00:	44c4      	add	ip, r8
    2a02:	b10f      	cbz	r7, 2a08 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2a04:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2a08:	1a9b      	subs	r3, r3, r2
    2a0a:	2b01      	cmp	r3, #1
    2a0c:	bfb8      	it	lt
    2a0e:	2301      	movlt	r3, #1
    2a10:	9f01      	ldr	r7, [sp, #4]
    2a12:	2234      	movs	r2, #52	; 0x34
    2a14:	4353      	muls	r3, r2
    2a16:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    2a1a:	4379      	muls	r1, r7
    2a1c:	b2ed      	uxtb	r5, r5
    2a1e:	436b      	muls	r3, r5
    2a20:	3180      	adds	r1, #128	; 0x80
    2a22:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    2a26:	fbb3 f1f1 	udiv	r1, r3, r1
    2a2a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    2a2e:	4561      	cmp	r1, ip
    2a30:	bf28      	it	cs
    2a32:	4661      	movcs	r1, ip
    2a34:	287f      	cmp	r0, #127	; 0x7f
    2a36:	80b1      	strh	r1, [r6, #4]
    2a38:	dc05      	bgt.n	2a46 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    2a3a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    2a3e:	4298      	cmp	r0, r3
    2a40:	bfb8      	it	lt
    2a42:	4618      	movlt	r0, r3
    2a44:	e000      	b.n	2a48 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    2a46:	207f      	movs	r0, #127	; 0x7f
    2a48:	71f0      	strb	r0, [r6, #7]
    2a4a:	71b4      	strb	r4, [r6, #6]
    2a4c:	4b18      	ldr	r3, [pc, #96]	; (2ab0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    2a4e:	2100      	movs	r1, #0
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	6033      	str	r3, [r6, #0]
    2a54:	88b3      	ldrh	r3, [r6, #4]
    2a56:	2b1e      	cmp	r3, #30
    2a58:	bf9e      	ittt	ls
    2a5a:	4a0c      	ldrls	r2, [pc, #48]	; (2a8c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2a5c:	231f      	movls	r3, #31
    2a5e:	8093      	strhls	r3, [r2, #4]
    2a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2a64:	d302      	bcc.n	2a6c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    2a66:	085b      	lsrs	r3, r3, #1
    2a68:	3101      	adds	r1, #1
    2a6a:	e7f9      	b.n	2a60 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    2a6c:	4a11      	ldr	r2, [pc, #68]	; (2ab4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    2a6e:	3b0f      	subs	r3, #15
    2a70:	430a      	orrs	r2, r1
    2a72:	091b      	lsrs	r3, r3, #4
    2a74:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    2a78:	4a06      	ldr	r2, [pc, #24]	; (2a94 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    2a7a:	6013      	str	r3, [r2, #0]
    2a7c:	4b0e      	ldr	r3, [pc, #56]	; (2ab8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    2a7e:	2200      	movs	r2, #0
    2a80:	601a      	str	r2, [r3, #0]
    2a82:	b003      	add	sp, #12
    2a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a88:	40090000 	andmi	r0, r9, r0
    2a8c:	2000007c 	andcs	r0, r0, ip, ror r0
    2a90:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2a94:	40091030 	andmi	r1, r9, r0, lsr r0
    2a98:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2a9c:	50001388 	andpl	r1, r0, r8, lsl #7
    2aa0:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2aa4:	5000113c 	andpl	r1, r0, ip, lsr r1
    2aa8:	4008626e 	andmi	r6, r8, lr, ror #4
    2aac:	40082224 	andmi	r2, r8, r4, lsr #4
    2ab0:	40092008 	andmi	r2, r9, r8
    2ab4:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2ab8:	40091034 	andmi	r1, r9, r4, lsr r0
    2abc:	5000139c 	mulpl	r0, ip, r3
    2ac0:	50001398 	mulpl	r0, r8, r3

00002ac4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2ac4:	b510      	push	{r4, lr}
    2ac6:	4b14      	ldr	r3, [pc, #80]	; (2b18 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2ac8:	681c      	ldr	r4, [r3, #0]
    2aca:	b2a4      	uxth	r4, r4
    2acc:	b314      	cbz	r4, 2b14 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    2ace:	f7ff fb15 	bl	20fc <NOROM_AONBatMonTemperatureGetDegC>
    2ad2:	4b12      	ldr	r3, [pc, #72]	; (2b1c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2ad4:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2ad8:	4290      	cmp	r0, r2
    2ada:	da05      	bge.n	2ae8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    2adc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    2ae0:	4290      	cmp	r0, r2
    2ae2:	bfb8      	it	lt
    2ae4:	4610      	movlt	r0, r2
    2ae6:	71d8      	strb	r0, [r3, #7]
    2ae8:	889a      	ldrh	r2, [r3, #4]
    2aea:	490c      	ldr	r1, [pc, #48]	; (2b1c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2aec:	4294      	cmp	r4, r2
    2aee:	d310      	bcc.n	2b12 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    2af0:	4b0b      	ldr	r3, [pc, #44]	; (2b20 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    2af2:	6808      	ldr	r0, [r1, #0]
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	1aa4      	subs	r4, r4, r2
    2af8:	3302      	adds	r3, #2
    2afa:	1a1b      	subs	r3, r3, r0
    2afc:	2b1f      	cmp	r3, #31
    2afe:	bf28      	it	cs
    2b00:	231f      	movcs	r3, #31
    2b02:	085b      	lsrs	r3, r3, #1
    2b04:	40dc      	lsrs	r4, r3
    2b06:	4414      	add	r4, r2
    2b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2b0c:	4294      	cmp	r4, r2
    2b0e:	bf28      	it	cs
    2b10:	4614      	movcs	r4, r2
    2b12:	808c      	strh	r4, [r1, #4]
    2b14:	bd10      	pop	{r4, pc}
    2b16:	bf00      	nop
    2b18:	40091034 	andmi	r1, r9, r4, lsr r0
    2b1c:	2000007c 	andcs	r0, r0, ip, ror r0
    2b20:	40092008 	andmi	r2, r9, r8

00002b24 <NOROM_SysCtrlResetSourceGet>:
    2b24:	4b04      	ldr	r3, [pc, #16]	; (2b38 <NOROM_SysCtrlResetSourceGet+0x14>)
    2b26:	681a      	ldr	r2, [r3, #0]
    2b28:	0412      	lsls	r2, r2, #16
    2b2a:	bf5a      	itte	pl
    2b2c:	6818      	ldrpl	r0, [r3, #0]
    2b2e:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    2b32:	2008      	movmi	r0, #8
    2b34:	4770      	bx	lr
    2b36:	bf00      	nop
    2b38:	40090004 	andmi	r0, r9, r4

00002b3c <NOROM_ChipInfo_GetChipFamily>:
    2b3c:	f64b 129a 	movw	r2, #47514	; 0xb99a
    2b40:	4b10      	ldr	r3, [pc, #64]	; (2b84 <NOROM_ChipInfo_GetChipFamily+0x48>)
    2b42:	6818      	ldr	r0, [r3, #0]
    2b44:	f3c0 300f 	ubfx	r0, r0, #12, #16
    2b48:	4290      	cmp	r0, r2
    2b4a:	d106      	bne.n	2b5a <NOROM_ChipInfo_GetChipFamily+0x1e>
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	0f1b      	lsrs	r3, r3, #28
    2b50:	2b0b      	cmp	r3, #11
    2b52:	bf0c      	ite	eq
    2b54:	2004      	moveq	r0, #4
    2b56:	2000      	movne	r0, #0
    2b58:	e011      	b.n	2b7e <NOROM_ChipInfo_GetChipFamily+0x42>
    2b5a:	f64b 13be 	movw	r3, #47550	; 0xb9be
    2b5e:	4298      	cmp	r0, r3
    2b60:	d00a      	beq.n	2b78 <NOROM_ChipInfo_GetChipFamily+0x3c>
    2b62:	f64b 3341 	movw	r3, #47937	; 0xbb41
    2b66:	4298      	cmp	r0, r3
    2b68:	d008      	beq.n	2b7c <NOROM_ChipInfo_GetChipFamily+0x40>
    2b6a:	f64b 3320 	movw	r3, #47904	; 0xbb20
    2b6e:	4298      	cmp	r0, r3
    2b70:	bf14      	ite	ne
    2b72:	20ff      	movne	r0, #255	; 0xff
    2b74:	2002      	moveq	r0, #2
    2b76:	e002      	b.n	2b7e <NOROM_ChipInfo_GetChipFamily+0x42>
    2b78:	2001      	movs	r0, #1
    2b7a:	e000      	b.n	2b7e <NOROM_ChipInfo_GetChipFamily+0x42>
    2b7c:	2003      	movs	r0, #3
    2b7e:	b240      	sxtb	r0, r0
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	50001318 	andpl	r1, r0, r8, lsl r3

00002b88 <NOROM_ChipInfo_GetHwRevision>:
    2b88:	b538      	push	{r3, r4, r5, lr}
    2b8a:	4b19      	ldr	r3, [pc, #100]	; (2bf0 <NOROM_ChipInfo_GetHwRevision+0x68>)
    2b8c:	681d      	ldr	r5, [r3, #0]
    2b8e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2b92:	6818      	ldr	r0, [r3, #0]
    2b94:	0f2d      	lsrs	r5, r5, #28
    2b96:	b2c4      	uxtb	r4, r0
    2b98:	2c80      	cmp	r4, #128	; 0x80
    2b9a:	bf28      	it	cs
    2b9c:	2400      	movcs	r4, #0
    2b9e:	f7ff ffcd 	bl	2b3c <NOROM_ChipInfo_GetChipFamily>
    2ba2:	2804      	cmp	r0, #4
    2ba4:	d821      	bhi.n	2bea <NOROM_ChipInfo_GetHwRevision+0x62>
    2ba6:	e8df f000 	tbb	[pc, r0]
    2baa:	1b1b1303 	blne	6c77be <__ccfg+0x6a7816>
    2bae:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2bb2:	2d07      	cmp	r5, #7
    2bb4:	d819      	bhi.n	2bea <NOROM_ChipInfo_GetHwRevision+0x62>
    2bb6:	e8df f005 	tbb	[pc, r5]
    2bba:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    2bbe:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2bc2:	2014      	movs	r0, #20
    2bc4:	e012      	b.n	2bec <NOROM_ChipInfo_GetHwRevision+0x64>
    2bc6:	2015      	movs	r0, #21
    2bc8:	e010      	b.n	2bec <NOROM_ChipInfo_GetHwRevision+0x64>
    2bca:	f104 0016 	add.w	r0, r4, #22
    2bce:	e00a      	b.n	2be6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2bd0:	b125      	cbz	r5, 2bdc <NOROM_ChipInfo_GetHwRevision+0x54>
    2bd2:	2d02      	cmp	r5, #2
    2bd4:	d109      	bne.n	2bea <NOROM_ChipInfo_GetHwRevision+0x62>
    2bd6:	f104 0014 	add.w	r0, r4, #20
    2bda:	e004      	b.n	2be6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2bdc:	200a      	movs	r0, #10
    2bde:	e005      	b.n	2bec <NOROM_ChipInfo_GetHwRevision+0x64>
    2be0:	b91d      	cbnz	r5, 2bea <NOROM_ChipInfo_GetHwRevision+0x62>
    2be2:	f104 000a 	add.w	r0, r4, #10
    2be6:	b2c0      	uxtb	r0, r0
    2be8:	e000      	b.n	2bec <NOROM_ChipInfo_GetHwRevision+0x64>
    2bea:	20ff      	movs	r0, #255	; 0xff
    2bec:	b240      	sxtb	r0, r0
    2bee:	bd38      	pop	{r3, r4, r5, pc}
    2bf0:	50001318 	andpl	r1, r0, r8, lsl r3

00002bf4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2bf4:	b508      	push	{r3, lr}
    2bf6:	f7ff ffa1 	bl	2b3c <NOROM_ChipInfo_GetChipFamily>
    2bfa:	2801      	cmp	r0, #1
    2bfc:	d103      	bne.n	2c06 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2bfe:	f7ff ffc3 	bl	2b88 <NOROM_ChipInfo_GetHwRevision>
    2c02:	2813      	cmp	r0, #19
    2c04:	dc00      	bgt.n	2c08 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2c06:	e7fe      	b.n	2c06 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2c08:	bd08      	pop	{r3, pc}
	...

00002c0c <AuxAdiDdiSafeWrite.constprop.1>:
    2c0c:	b538      	push	{r3, r4, r5, lr}
    2c0e:	4604      	mov	r4, r0
    2c10:	460d      	mov	r5, r1
    2c12:	f7ff fa97 	bl	2144 <NOROM_CPUcpsid>
    2c16:	4b06      	ldr	r3, [pc, #24]	; (2c30 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2c18:	681a      	ldr	r2, [r3, #0]
    2c1a:	2a00      	cmp	r2, #0
    2c1c:	d0fb      	beq.n	2c16 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    2c1e:	2201      	movs	r2, #1
    2c20:	6025      	str	r5, [r4, #0]
    2c22:	601a      	str	r2, [r3, #0]
    2c24:	b918      	cbnz	r0, 2c2e <AuxAdiDdiSafeWrite.constprop.1+0x22>
    2c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c2a:	f7ff ba8f 	b.w	214c <NOROM_CPUcpsie>
    2c2e:	bd38      	pop	{r3, r4, r5, pc}
    2c30:	400c8000 	andmi	r8, ip, r0

00002c34 <NOROM_DDI32RegWrite>:
    2c34:	4408      	add	r0, r1
    2c36:	4611      	mov	r1, r2
    2c38:	f7ff bfe8 	b.w	2c0c <AuxAdiDdiSafeWrite.constprop.1>

00002c3c <NOROM_OSCClockSourceSet>:
    2c3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2c3e:	460c      	mov	r4, r1
    2c40:	07c1      	lsls	r1, r0, #31
    2c42:	4605      	mov	r5, r0
    2c44:	d509      	bpl.n	2c5a <NOROM_OSCClockSourceSet+0x1e>
    2c46:	4b12      	ldr	r3, [pc, #72]	; (2c90 <NOROM_OSCClockSourceSet+0x54>)
    2c48:	b2a2      	uxth	r2, r4
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	2100      	movs	r1, #0
    2c4e:	9200      	str	r2, [sp, #0]
    2c50:	685e      	ldr	r6, [r3, #4]
    2c52:	4810      	ldr	r0, [pc, #64]	; (2c94 <NOROM_OSCClockSourceSet+0x58>)
    2c54:	2201      	movs	r2, #1
    2c56:	460b      	mov	r3, r1
    2c58:	47b0      	blx	r6
    2c5a:	07aa      	lsls	r2, r5, #30
    2c5c:	d509      	bpl.n	2c72 <NOROM_OSCClockSourceSet+0x36>
    2c5e:	4b0c      	ldr	r3, [pc, #48]	; (2c90 <NOROM_OSCClockSourceSet+0x54>)
    2c60:	b2a2      	uxth	r2, r4
    2c62:	681b      	ldr	r3, [r3, #0]
    2c64:	9200      	str	r2, [sp, #0]
    2c66:	685e      	ldr	r6, [r3, #4]
    2c68:	480a      	ldr	r0, [pc, #40]	; (2c94 <NOROM_OSCClockSourceSet+0x58>)
    2c6a:	2100      	movs	r1, #0
    2c6c:	2202      	movs	r2, #2
    2c6e:	2301      	movs	r3, #1
    2c70:	47b0      	blx	r6
    2c72:	076b      	lsls	r3, r5, #29
    2c74:	d509      	bpl.n	2c8a <NOROM_OSCClockSourceSet+0x4e>
    2c76:	4b06      	ldr	r3, [pc, #24]	; (2c90 <NOROM_OSCClockSourceSet+0x54>)
    2c78:	b2a4      	uxth	r4, r4
    2c7a:	681b      	ldr	r3, [r3, #0]
    2c7c:	9400      	str	r4, [sp, #0]
    2c7e:	685c      	ldr	r4, [r3, #4]
    2c80:	4804      	ldr	r0, [pc, #16]	; (2c94 <NOROM_OSCClockSourceSet+0x58>)
    2c82:	2100      	movs	r1, #0
    2c84:	220c      	movs	r2, #12
    2c86:	2302      	movs	r3, #2
    2c88:	47a0      	blx	r4
    2c8a:	b002      	add	sp, #8
    2c8c:	bd70      	pop	{r4, r5, r6, pc}
    2c8e:	bf00      	nop
    2c90:	100001a4 	andne	r0, r0, r4, lsr #3
    2c94:	400ca000 	andmi	sl, ip, r0

00002c98 <NOROM_OSCClockSourceGet>:
    2c98:	b510      	push	{r4, lr}
    2c9a:	4b08      	ldr	r3, [pc, #32]	; (2cbc <NOROM_OSCClockSourceGet+0x24>)
    2c9c:	2804      	cmp	r0, #4
    2c9e:	681b      	ldr	r3, [r3, #0]
    2ca0:	f04f 0134 	mov.w	r1, #52	; 0x34
    2ca4:	68dc      	ldr	r4, [r3, #12]
    2ca6:	bf07      	ittee	eq
    2ca8:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2cac:	231d      	moveq	r3, #29
    2cae:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2cb2:	231c      	movne	r3, #28
    2cb4:	4802      	ldr	r0, [pc, #8]	; (2cc0 <NOROM_OSCClockSourceGet+0x28>)
    2cb6:	47a0      	blx	r4
    2cb8:	bd10      	pop	{r4, pc}
    2cba:	bf00      	nop
    2cbc:	100001a4 	andne	r0, r0, r4, lsr #3
    2cc0:	400ca000 	andmi	sl, ip, r0
    2cc4:	00206325 	eoreq	r6, r0, r5, lsr #6
    2cc8:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2ccc:	6f792072 	svcvs	0x00792072
    2cd0:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2cd4:	3a656d61 	bcc	195e260 <__ccfg+0x193e2b8>
    2cd8:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2cdc:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 2b34 <NOROM_SysCtrlResetSourceGet+0x10>
    2ce0:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2ce4:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2ce8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2cec:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2cf0:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2cf4:	20656874 	rsbcs	r6, r5, r4, ror r8
    2cf8:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2cfc:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2d00:	706f2067 	rsbvc	r2, pc, r7, rrx
    2d04:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2d08:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2d0c:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2d10:	6a642941 	bvs	190d21c <__ccfg+0x18ed274>
    2d14:	20747375 	rsbscs	r7, r4, r5, ror r3
    2d18:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2d1c:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2d20:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2d24:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2d28:	0a747261 	beq	1d1f6b4 <__ccfg+0x1cff70c>
    2d2c:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2d30:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2d34:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2d38:	6f697461 	svcvs	0x00697461
    2d3c:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2d40:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2d44:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2d48:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2d4c:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2d50:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2d54:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2d58:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2d5c:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2d60:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2d64:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2d68:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2d6c:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2d70:	20726574 	rsbscs	r6, r2, r4, ror r5
    2d74:	20656874 	rsbcs	r6, r5, r4, ror r8
    2d78:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2d7c:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2d80:	52282073 	eorpl	r2, r8, #115	; 0x73
    2d84:	4f206465 	svcmi	0x00206465
    2d88:	4f202c4e 	svcmi	0x00202c4e
    2d8c:	202c4646 	eorcs	r4, ip, r6, asr #12
    2d90:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2d94:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2d98:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2d9c:	203a2946 	eorscs	r2, sl, r6, asr #18
    2da0:	6d754e00 	ldclvs	14, cr4, [r5, #-0]
    2da4:	20726562 	rsbscs	r6, r2, r2, ror #10
    2da8:	2520666f 	strcs	r6, [r0, #-1647]!	; 0xfffff991
    2dac:	25203a64 	strcs	r3, [r0, #-2660]!	; 0xfffff59c
    2db0:	52280064 	eorpl	r0, r8, #100	; 0x64
    2db4:	4f206465 	svcmi	0x00206465
    2db8:	4f202c4e 	svcmi	0x00202c4e
    2dbc:	202c4646 	eorcs	r4, ip, r6, asr #12
    2dc0:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2dc4:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2dc8:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2dcc:	69202946 	stmdbvs	r0!, {r1, r2, r6, r8, fp, sp}
    2dd0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2dd4:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
    2dd8:	2528203a 	strcs	r2, [r8, #-58]!	; 0xffffffc6
    2ddc:	25202c64 	strcs	r2, [r0, #-3172]!	; 0xfffff39c
    2de0:	25202c64 	strcs	r2, [r0, #-3172]!	; 0xfffff39c
    2de4:	25202c64 	strcs	r2, [r0, #-3172]!	; 0xfffff39c
    2de8:	0d0a2964 	vstreq.16	s4, [sl, #-200]	; 0xffffff38	; <UNPREDICTABLE>
    2dec:	6e6f4d00 	cdpvs	13, 6, cr4, cr15, cr0, {0}
    2df0:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2df4:	72702820 	rsbsvc	r2, r0, #32, 16	; 0x200000
    2df8:	20737365 	rsbscs	r7, r3, r5, ror #6
    2dfc:	6f742053 	svcvs	0x00742053
    2e00:	6f747320 	svcvs	0x00747320
    2e04:	203a2970 	eorscs	r2, sl, r0, ror r9
    2e08:	53595300 	cmppl	r9, #0, 6
    2e0c:	3a525245 	bcc	1497728 <__ccfg+0x1477780>
    2e10:	2c782520 	cfldr64cs	mvdx2, [r8], #-128	; 0xffffff80
    2e14:	00732520 	rsbseq	r2, r3, r0, lsr #10
    2e18:	00726175 	rsbseq	r6, r2, r5, ror r1
    2e1c:	00696175 	rsbeq	r6, r9, r5, ror r1
    2e20:	4f636950 	svcmi	0x00636950
    2e24:	35762053 	ldrbcc	r2, [r6, #-83]!	; 0xffffffad
    2e28:	502f342e 	eorpl	r3, pc, lr, lsr #8
    2e2c:	30383147 	eorscc	r3, r8, r7, asr #2
    2e30:	41323232 	teqmi	r2, r2, lsr r2
    2e34:	3143432d 	cmpcc	r3, sp, lsr #6
    2e38:	5f303533 	svcpl	0x00303533
    2e3c:	4e55414c 	rdfmism	f4, f5, #4.0
    2e40:	4c584843 	mrrcmi	8, 4, r4, r8, cr3
    2e44:	4328202c 			; <UNDEFINED> instruction: 0x4328202c
    2e48:	6c4f2029 	mcrrvs	0, 2, r2, pc, cr9
    2e4c:	656e6f73 	strbvs	r6, [lr, #-3955]!	; 0xfffff08d
    2e50:	6f432074 	svcvs	0x00432074
    2e54:	6e756d6d 	cdpvs	13, 7, cr6, cr5, cr13, {3}
    2e58:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
    2e5c:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2e60:	3032202c 	eorscc	r2, r2, ip, lsr #32
    2e64:	322d3230 	eorcc	r3, sp, #48, 4
    2e68:	00383130 	eorseq	r3, r8, r0, lsr r1
    2e6c:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
    2e70:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
    2e74:	4d415220 	sfmmi	f5, 2, [r1, #-128]	; 0xffffff80
    2e78:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
    2e7c:	74796220 	ldrbtvc	r6, [r9], #-544	; 0xfffffde0
    2e80:	73007365 	movwvc	r7, #869	; 0x365
    2e84:	00000074 	andeq	r0, r0, r4, ror r0

00002e88 <port_confs>:
    2e88:	00306080 	eorseq	r6, r0, r0, lsl #1
    2e8c:	00386080 	eorseq	r6, r8, r0, lsl #1
    2e90:	00186010 	andseq	r6, r8, r0, lsl r0
    2e94:	2010400f 	andscs	r4, r0, pc
    2e98:	30694000 	rsbcc	r4, r9, r0
    2e9c:	30714000 	rsbscc	r4, r1, r0
    2ea0:	00b86008 	adcseq	r6, r8, r8
    2ea4:	60c94000 	sbcvs	r4, r9, r0
    2ea8:	60d14000 	sbcsvs	r4, r1, r0
    2eac:	60d94000 	sbcsvs	r4, r9, r0
    2eb0:	60e14000 	rscvs	r4, r1, r0
    2eb4:	00096380 	andeq	r6, r9, r0, lsl #7
    2eb8:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2ebc:	20402000 	subcs	r2, r0, r0
    2ec0:	00486080 	subeq	r6, r8, r0, lsl #1
    2ec4:	00506080 	subseq	r6, r0, r0, lsl #1
    2ec8:	00a06000 	adceq	r6, r0, r0
    2ecc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2ed0:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2ed4:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2ed8:	6f690076 	svcvs	0x00690076
    2edc:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2ee0:	616d0031 	cmnvs	sp, r1, lsr r0
    2ee4:	6b00676c 	blvs	1cc9c <_etext+0x19d94>
    2ee8:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2eec:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002ef0 <__pi_hex_enc_table>:
    2ef0:	33323130 	teqcc	r2, #48, 2
    2ef4:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2ef8:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2efc:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002f00 <__input_pins>:
    2f00:	9c9b9a99 	vldmials	fp, {s18-s170}

00002f04 <__button_list>:
    2f04:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .data:

20000000 <greenCharacter>:
char greenCharacter = 'G';
20000000:	00000047 	andeq	r0, r0, r7, asr #32

20000004 <greenLed>:
int greenLed = 1;
20000004:	00000001 	andeq	r0, r0, r1

20000008 <redCharacter>:
char redCharacter = 'R';
20000008:	Address 0x0000000020000008 is out of bounds.


Disassembly of section .bss:

2000000c <On>:
2000000c:	00000000 	andeq	r0, r0, r0

20000010 <blinkerCode.5775>:
20000010:	00000000 	andeq	r0, r0, r0

20000014 <blinkerRunning.5776>:
	...

20000015 <ch.5749>:
	...

20000016 <displayCycle>:
	...

20000018 <greenOff>:
	...

2000001a <greenOn>:
	...

2000001c <led.5748>:
2000001c:	00000000 	andeq	r0, r0, r0

20000020 <ledFlag.5752>:
20000020:	00000000 	andeq	r0, r0, r0

20000024 <offTime.5751>:
	...

20000026 <onTime.5750>:
	...

20000028 <redLed>:
int redLed = 0;
20000028:	00000000 	andeq	r0, r0, r0

2000002c <redOff>:
	...

2000002e <redOn>:
	...

20000030 <stopProcess>:
	...

20000031 <username.5774>:
	...

20000046 <setdel>:
	...

20000048 <urates>:
static word urates [N_UARTS];
20000048:	00000000 	andeq	r0, r0, r0

2000004c <__PCB>:
2000004c:	00000000 	andeq	r0, r0, r0

20000050 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000050:	00000000 	andeq	r0, r0, r0

20000054 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000054:	00000000 	andeq	r0, r0, r0

20000058 <mevent>:
20000058:	00000000 	andeq	r0, r0, r0

2000005c <mnfree>:
2000005c:	00000000 	andeq	r0, r0, r0

20000060 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000060:	00000000 	andeq	r0, r0, r0

20000064 <dopen>:
	...

20000065 <dstat>:
20000065:	 	andeq	r0, r0, r0

20000068 <len.5699>:
20000068:	00000000 	andeq	r0, r0, r0

2000006c <ptr.5698>:
2000006c:	00000000 	andeq	r0, r0, r0

20000070 <__inpline>:
char *__inpline = NULL;
20000070:	00000000 	andeq	r0, r0, r0

20000074 <len.5700>:
20000074:	00000000 	andeq	r0, r0, r0

20000078 <ptr.5699>:
20000078:	00000000 	andeq	r0, r0, r0

2000007c <powerQualGlobals>:
	...

20000084 <__pi_uart>:
	...

2000008c <system_event_count>:
2000008c:	00000000 	andeq	r0, r0, r0

20000090 <entropy>:
20000090:	00000000 	andeq	r0, r0, r0

20000094 <__pi_mintk>:
	...

20000096 <__pi_old>:
	...

20000098 <__pi_systat>:
	...

200000a0 <__pi_new>:
200000a0:	00000000 	andeq	r0, r0, r0

200000a4 <__pi_utims>:
	...

200000b4 <__pi_curr>:
200000b4:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000b8 <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000008af 	andeq	r0, r0, pc, lsr #17
       4:	00000003 	andeq	r0, r0, r3
    return (time * SECOND)/1000;
       8:	01040000 	mrseq	r0, (UNDEF: 4)
}
       c:	00000157 	andeq	r0, r0, r7, asr r1
      10:	0002c50c 	andeq	ip, r2, ip, lsl #10
      14:	0003a800 	andeq	sl, r3, r0, lsl #16
      18:	0000f800 	andeq	pc, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000039c 	muleq	r0, ip, r3
      2c:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
      30:	03000003 	movweq	r0, #3
      34:	0000169d 	muleq	r0, sp, r6
      38:	3f122803 	svccc	0x00122803
      3c:	02000000 	andeq	r0, r0, #0
}
      40:	00b00504 	adcseq	r0, r0, r4, lsl #10
      44:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      48:	0000ab05 	andeq	sl, r0, r5, lsl #22
      4c:	22510300 	subscs	r0, r1, #0, 6
      50:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      54:	00005917 	andeq	r5, r0, r7, lsl r9
		release;
      58:	08010200 	stmdaeq	r1, {r9}
      5c:	0000039a 	muleq	r0, sl, r3
      60:	00213f03 	eoreq	r3, r1, r3, lsl #30
      64:	1c310300 	ldcne	3, cr0, [r1], #-0
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	58070202 	stmdapl	r7, {r1, r9}
      70:	03000002 	movweq	r0, #2
      74:	00001808 	andeq	r1, r0, r8, lsl #16
      78:	7f1b3403 	svcvc	0x001b3403
      7c:	02000000 	andeq	r0, r0, #0
      80:	00850704 	addeq	r0, r5, r4, lsl #14
      84:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      88:	00008007 	andeq	r8, r0, r7
      8c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
	descriptors [fd] = s;
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	8a070402 	bhi	1c10a4 <__ccfg+0x1a10fc>
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	00000423 	andeq	r0, r0, r3, lsr #8
		syserror (EMALLOC, "tcv05");
      a0:	4d112604 	ldcmi	6, cr2, [r1, #-16]
      a4:	03000000 	movweq	r0, #0
      a8:	00001615 	andeq	r1, r0, r5, lsl r6
      ac:	60122704 	andsvs	r2, r2, r4, lsl #14
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	000000a7 	andeq	r0, r0, r7, lsr #1
      b8:	00049103 	andeq	r9, r4, r3, lsl #2
      bc:	11280400 			; <UNDEFINED> instruction: 0x11280400
      c0:	00000033 	andeq	r0, r0, r3, lsr r0
      c4:	00140d03 	andseq	r0, r4, r3, lsl #26
      c8:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      cc:	0000004d 	andeq	r0, r0, sp, asr #32
      d0:	0000c406 	andeq	ip, r0, r6, lsl #8
      d4:	16660300 	strbtne	r0, [r6], -r0, lsl #6
      d8:	2c040000 	stccs	0, cr0, [r4], {-0}
      dc:	00007312 	andeq	r7, r0, r2, lsl r3
      e0:	00d50500 	sbcseq	r0, r5, r0, lsl #10
      e4:	8b030000 	blhi	c00ec <__ccfg+0xa0144>
      e8:	04000002 	streq	r0, [r0], #-2
      ec:	0073122d 	rsbseq	r1, r3, sp, lsr #4
      f0:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	80093204 	andhi	r3, r9, r4, lsl #4
			curr += 0x1000;
      f8:	08000001 	stmdaeq	r0, {r0}
      fc:	000002a6 	andeq	r0, r0, r6, lsr #5
		if (from >= EE_SIZE || upto < from)
     100:	c4073404 	strgt	r3, [r7], #-1028	; 0xfffffbfc
     104:	01000000 	mrseq	r0, (UNDEF: 0)
			upto = EE_SIZE - 1;
     108:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
     10c:	000000a4 	andeq	r0, r0, r4, lsr #1
     110:	c4033504 	strgt	r3, [r3], #-1284	; 0xfffffafc
     114:	01000000 	mrseq	r0, (UNDEF: 0)
     118:	08000601 	stmdaeq	r0, {r0, r9, sl}
     11c:	00000274 	andeq	r0, r0, r4, ror r2
     120:	c4033604 	strgt	r3, [r3], #-1540	; 0xfffff9fc
     124:	01000000 	mrseq	r0, (UNDEF: 0)
        if (displayCycle)
     128:	08000501 	stmdaeq	r0, {r0, r8, sl}
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	00000432 	andeq	r0, r0, r2, lsr r4
     130:	c4033704 	strgt	r3, [r3], #-1796	; 0xfffff8fc
     134:	01000000 	mrseq	r0, (UNDEF: 0)
        if(onTime > 0){
     138:	08000401 	stmdaeq	r0, {r0, sl}
            leds(led,1);
     13c:	0000042b 	andeq	r0, r0, fp, lsr #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	c4033804 	strgt	r3, [r3], #-2052	; 0xfffff7fc
     144:	01000000 	mrseq	r0, (UNDEF: 0)
     148:	09000004 	stmdbeq	r0, {r2}
     14c:	0000041c 	andeq	r0, r0, ip, lsl r4
     150:	c4073a04 	strgt	r3, [r7], #-2564	; 0xfffff5fc
            delay(onTime, OFF_PERIOD);
     154:	01000000 	mrseq	r0, (UNDEF: 0)
            delay(offTime, Check_PERIOD);
     158:	00004c09 	andeq	r4, r0, r9, lsl #24
     15c:	033c0400 	teqeq	ip, #0, 8
            led = greenLed;
     160:	000000c4 	andeq	r0, r0, r4, asr #1
            ch = greenCharacter;
     164:	00790902 	rsbseq	r0, r9, r2, lsl #18
     168:	3d040000 	stccc	0, cr0, [r4, #-0]
            onTime = greenOn;
     16c:	0000c403 	andeq	ip, r0, r3, lsl #8
     170:	46090300 	strmi	r0, [r9], -r0, lsl #6
            offTime = greenOff;
     174:	04000001 	streq	r0, [r0], #-1
            leds(led,1);
     178:	00d5083f 	sbcseq	r0, r5, pc, lsr r8
     17c:	00040000 	andeq	r0, r4, r0
     180:	00045b03 	andeq	r5, r4, r3, lsl #22
     184:	03410400 	movteq	r0, #5120	; 0x1400
            proceed OFF_PERIOD;
     188:	000000f2 	strdeq	r0, [r0], -r2
     18c:	00018006 	andeq	r8, r1, r6
        when(&On, Check_PERIOD);
     190:	029a0a00 	addseq	r0, sl, #0, 20
     194:	43040000 	movwmi	r0, #16384	; 0x4000
        when(&stopProcess, Stop);
     198:	00018c1a 	andeq	r8, r1, sl, lsl ip
     19c:	0a010100 	beq	405a4 <__ccfg+0x205fc>
        release;
     1a0:	00000306 	andeq	r0, r0, r6, lsl #6
        leds(led,0);
     1a4:	ad0e4504 	cfstr32ge	mvfx4, [lr, #-16]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	01000001 	tsteq	r0, r1
     1ac:	b3040b01 	movwlt	r0, #19201	; 0x4b01
     1b0:	02000001 	andeq	r0, r0, #1
     1b4:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
     1b8:	b3050000 	movwlt	r0, #20480	; 0x5000
        if (displayCycle)
     1bc:	0a000001 	beq	1c8 <_Min_Stack_Size+0xc8>
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	00000314 	andeq	r0, r0, r4, lsl r3
     1c4:	ad1e4504 	cfldr32ge	mvfx4, [lr, #-16]
     1c8:	01000001 	tsteq	r0, r1
        if(offTime > 0)
     1cc:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
            delay(offTime, Check_PERIOD);
     1d0:	01fe098f 	mvnseq	r0, pc, lsl #19
        leds(led,0);
     1d4:	ad090000 	stcge	0, cr0, [r9, #-0]
     1d8:	05000002 	streq	r0, [r0, #-2]
     1dc:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
     1e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     1e4:	00000647 	andeq	r0, r0, r7, asr #12
}
     1e8:	a7079105 	strge	r9, [r7, -r5, lsl #2]
        finish;
     1ec:	04000000 	streq	r0, [r0], #-0
}
     1f0:	0004a809 	andeq	sl, r4, r9, lsl #16
     1f4:	10920500 	addsne	r0, r2, r0, lsl #10
     1f8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1fc:	39030006 	stmdbcc	r3, {r1, r2}
     200:	05000004 	streq	r0, [r0, #-4]
     204:	01cd0393 			; <UNDEFINED> instruction: 0x01cd0393
     208:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
     20c:	15000001 	strne	r0, [r0, #-1]
     210:	0d000002 	stceq	0, cr0, [r0, #-8]
     214:	00420a00 	subeq	r0, r2, r0, lsl #20
     218:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     21c:	00020a0f 	andeq	r0, r2, pc, lsl #20
     220:	0c010100 	stfeqs	f0, [r1], {-0}
     224:	000000a7 	andeq	r0, r0, r7, lsr #1
     228:	00000233 	andeq	r0, r0, r3, lsr r2
     22c:	0000940e 	andeq	r9, r0, lr, lsl #8
     230:	07000300 	streq	r0, [r0, -r0, lsl #6]
     234:	09910601 	ldmibeq	r1, {r0, r9, sl}
     238:	0000025d 	andeq	r0, r0, sp, asr r2
     23c:	00049b08 	andeq	r9, r4, r8, lsl #22
     240:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     244:	000000c4 	andeq	r0, r0, r4, asr #1
    word numbers[] = {0, 0, 0, 0};
     248:	00010701 	andeq	r0, r1, r1, lsl #14
    int numbersIndex = 0;
     24c:	00003d08 	andeq	r3, r0, r8, lsl #26
    word numbers[] = {0, 0, 0, 0};
     250:	03940600 	orrseq	r0, r4, #0, 12
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	000000c4 	andeq	r0, r0, r4, asr #1
        if(settingsInput[i] == ' ') {
     258:	00000101 	andeq	r0, r0, r1, lsl #2
     25c:	026b0300 	rsbeq	r0, fp, #0, 6
            numbers[numbersIndex] = number;
     260:	96060000 	strls	r0, [r6], -r0
     264:	00023303 	andeq	r3, r2, r3, lsl #6
            number = 0;
     268:	025d0500 	subseq	r0, sp, #0, 10
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
    return 0;
     270:	79000002 	stmdbvc	r0, {r1}
    redOn = numbers[0];
     274:	0d000002 	stceq	0, cr0, [r0, #-8]
     278:	026e0500 	rsbeq	r0, lr, #0, 10
    redOff = numbers[1];
     27c:	d00a0000 	andle	r0, sl, r0
     280:	06000002 	streq	r0, [r0], -r2
    greenOn = numbers[2];
     284:	0279179c 	rsbseq	r1, r9, #156, 14	; 0x2700000
     288:	01010000 	mrseq	r0, (UNDEF: 1)
    greenOff = numbers[3];
     28c:	0000b30c 	andeq	fp, r0, ip, lsl #6
     290:	00029700 	andeq	r9, r2, r0, lsl #14
}
     294:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	0000028c 	andeq	r0, r0, ip, lsl #5
     29c:	00038c0a 	andeq	r8, r3, sl, lsl #24
            number = number * 10;
     2a0:	13060700 	movwne	r0, #26368	; 0x6700
            number += settingsInput[i] - 48;
     2a4:	00000297 	muleq	r0, r7, r2
     2a8:	260a0101 	strcs	r0, [sl], -r1, lsl #2
        } else if(settingsInput[i] == '-') {
     2ac:	05000001 	streq	r0, [r0, #-1]
            return 1;
     2b0:	00d50ec3 	sbcseq	r0, r5, r3, asr #29
     2b4:	01010000 	mrseq	r0, (UNDEF: 1)
     2b8:	0004b50f 	andeq	fp, r4, pc, lsl #10
     2bc:	016e0800 	cmneq	lr, r0, lsl #16
     2c0:	0002c510 	andeq	ip, r2, r0, lsl r5
fsm root {
     2c4:	cb040b00 	blgt	102ecc <__ccfg+0xe2f24>
     2c8:	10000002 	andne	r0, r0, r2
     2cc:	0002d701 	andeq	sp, r2, r1, lsl #14
     2d0:	00a71100 	adceq	r1, r7, r0, lsl #2
     2d4:	0c000000 	stceq	0, cr0, [r0], {-0}
     2d8:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
     2dc:	000002e2 	andeq	r0, r0, r2, ror #5
        ser_outf(Initial, "Enter your name: ");
     2e0:	d705000d 	strle	r0, [r5, -sp]
     2e4:	12000002 	andne	r0, r0, #2
        ser_in(Get_Name, username, NAME_LENGTH);
     2e8:	0000046b 	andeq	r0, r0, fp, ror #8
     2ec:	13017f08 	movwne	r7, #7944	; 0x1f08
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	000002e2 	andeq	r0, r0, r2, ror #5
     2f4:	84120101 	ldrhi	r0, [r2], #-257	; 0xfffffeff
     2f8:	08000003 	stmdaeq	r0, {r0, r1}
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	e1140182 	tst	r4, r2, lsl #3
     300:	01000000 	mrseq	r0, (UNDEF: 0)
        if (choice == 'A' || choice == 'a'){
     304:	04a01201 	strteq	r1, [r0], #513	; 0x201
     308:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     30c:	00d50e02 	sbcseq	r0, r5, r2, lsl #28
            proceed Adjust_Intervals;
     310:	01010000 	mrseq	r0, (UNDEF: 1)
            proceed Monitor;
     314:	03080813 	movweq	r0, #34835	; 0x8813
        proceed Show_Menu;
     318:	033b0903 	teqeq	fp, #49152	; 0xc000
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	49140000 	ldmdbmi	r4, {}	; <UNPREDICTABLE>
     320:	08000022 	stmdaeq	r0, {r1, r5}
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	a7070307 	strge	r0, [r7, -r7, lsl #6]
     328:	00000000 	andeq	r0, r0, r0
     32c:	00059914 	andeq	r9, r5, r4, lsl r9
        if(processSettingsInput(settings) != 0)
     330:	03080800 	movweq	r0, #34816	; 0x8800
     334:	0000e608 	andeq	lr, r0, r8, lsl #12
            proceed Adjust_Intervals;
     338:	0f000400 	svceq	0x00000400
        if(!blinkerRunning) {
     33c:	0000024b 	andeq	r0, r0, fp, asr #4
     340:	03030908 	movweq	r0, #14600	; 0x3908
     344:	00000314 	andeq	r0, r0, r4, lsl r3
            blinkerCode = runfsm blinker;
     348:	0004d215 	andeq	sp, r4, r5, lsl r2
            blinkerRunning = YES;
     34c:	0b083000 	bleq	20c354 <__ccfg+0x1ec3ac>
        On = YES;
     350:	03ab0803 			; <UNDEFINED> instruction: 0x03ab0803
     354:	bd140000 	ldclt	0, cr0, [r4, #-0]
        trigger(&On);
     358:	08000004 	stmdaeq	r0, {r2}
        proceed Show_Menu;
     35c:	a7070314 	smladge	r7, r4, r3, r0
     360:	00000000 	andeq	r0, r0, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	0002b714 	andeq	fp, r2, r4, lsl r7
     368:	03150800 	tsteq	r5, #0, 16
     36c:	0000a707 	andeq	sl, r0, r7, lsl #14
     370:	b8140200 	ldmdalt	r4, {r9}
     374:	08000004 	stmdaeq	r0, {r2}
     378:	b80a0316 	stmdalt	sl, {r1, r2, r4, r8, r9}
     37c:	04000002 	streq	r0, [r0], #-2
        proceed Show_Menu;
     380:	000f9414 	andeq	r9, pc, r4, lsl r4	; <UNPREDICTABLE>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	03170800 	tsteq	r7, #0, 16
     388:	0000e608 	andeq	lr, r0, r8, lsl #12
        displayCycle = YES;
     38c:	64140800 	ldrvs	r0, [r4], #-2048	; 0xfffff800
     390:	08000004 	stmdaeq	r0, {r2}
        ser_inf(Await_Stop, "%c", &ch);
     394:	ab0f0318 	blge	3c0ffc <__ccfg+0x3a1054>
     398:	0c000003 	stceq	0, cr0, [r0], {3}
        if(ch == 'S' || ch == 's'){
     39c:	0002b214 	andeq	fp, r2, r4, lsl r2
     3a0:	03190800 	tsteq	r9, #0, 16
     3a4:	0003bb15 	andeq	fp, r3, r5, lsl fp
            displayCycle = NO;
     3a8:	0c002c00 	stceq	12, cr2, [r0], {-0}
            proceed Show_Menu;
     3ac:	0000033b 	andeq	r0, r0, fp, lsr r3
     3b0:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
        proceed Monitor;
     3b4:	0000940e 	andeq	r9, r0, lr, lsl #8
     3b8:	0b000300 	bleq	fc0 <qfree+0x40>
        On = NO;
     3bc:	00034804 	andeq	r4, r3, r4, lsl #16
        if(blinkerCode != 0x0) {
     3c0:	04dd0f00 	ldrbeq	r0, [sp], #3840	; 0xf00
     3c4:	1c080000 	stcne	0, cr0, [r8], {-0}
            killall(blinkerCode);
     3c8:	03481b03 	movteq	r1, #35587	; 0x8b03
        trigger(&stopProcess);
     3cc:	7a120000 	bvc	4803d4 <__ccfg+0x46042c>
     3d0:	08000003 	stmdaeq	r0, {r0, r1}
        proceed Show_Menu;
     3d4:	dd14031e 	ldcle	3, cr0, [r4, #-120]	; 0xffffff88
     3d8:	01000003 	tsteq	r0, r3
        leds_all(0);
     3dc:	c1040b01 	tstgt	r4, r1, lsl #22
     3e0:	16000003 	strne	r0, [r0], -r3
     3e4:	00000282 	andeq	r0, r0, r2, lsl #5
        proceed Show_Menu;
     3e8:	8d051501 	cfstr32hi	mvfx1, [r5, #-4]
     3ec:	01000000 	mrseq	r0, (UNDEF: 0)
        } else if (choice == 'S' || choice == 's') {
     3f0:	00040305 	andeq	r0, r4, r5, lsl #6
            proceed Stop;
     3f4:	e8162000 	ldmda	r6, {sp}
        } else if (choice == 'V' || choice == 'v') {
     3f8:	01000004 	tsteq	r0, r4
            proceed View_Settings;
     3fc:	01b30616 			; <UNDEFINED> instruction: 0x01b30616
        } else if (choice == 'M' || choice == 'm') {
     400:	05010000 	streq	r0, [r1, #-0]
            proceed Monitor;
     404:	00000003 	andeq	r0, r0, r3
     408:	02bd1620 	adcseq	r1, sp, #32, 12	; 0x2000000
     40c:	17010000 	strne	r0, [r1, -r0]
     410:	0000a706 	andeq	sl, r0, r6, lsl #14
            killall(blinkerCode);
     414:	03050100 	movweq	r0, #20736	; 0x5100
            leds_all(0);
     418:	2000001a 	andcs	r0, r0, sl, lsl r0
     41c:	0002fd16 	andeq	pc, r2, r6, lsl sp	; <UNPREDICTABLE>
            killall(blinkerCode);
     420:	06180100 	ldreq	r0, [r8], -r0, lsl #2
            sint runningNumber = crunning(blinkerCode);
     424:	000000a7 	andeq	r0, r0, r7, lsr #1
     428:	18030501 	stmdane	r3, {r0, r8, sl}
     42c:	16200000 	strtne	r0, [r0], -r0
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	00000053 	andeq	r0, r0, r3, asr r0
            trigger(&stopProcess);
     434:	8d051a01 	vstrhi	s2, [r5, #-4]
     438:	01000000 	mrseq	r0, (UNDEF: 0)
            blinkerCode = runfsm blinker;
     43c:	00280305 	eoreq	r0, r8, r5, lsl #6
     440:	f0162000 			; <UNDEFINED> instruction: 0xf0162000
     444:	01000002 	tsteq	r0, r2
     448:	01b3061b 			; <UNDEFINED> instruction: 0x01b3061b
     44c:	05010000 	streq	r0, [r1, #-0]
     450:	00000803 	andeq	r0, r0, r3, lsl #16
     454:	047e1620 	ldrbteq	r1, [lr], #-1568	; 0xfffff9e0
     458:	1c010000 	stcne	0, cr0, [r1], {-0}
     45c:	0000a706 	andeq	sl, r0, r6, lsl #14
     460:	03050100 	movweq	r0, #20736	; 0x5100
     464:	2000002e 	andcs	r0, r0, lr, lsr #32
     468:	00040216 	andeq	r0, r4, r6, lsl r2
     46c:	061d0100 	ldreq	r0, [sp], -r0, lsl #2
     470:	000000a7 	andeq	r0, r0, r7, lsr #1
     474:	2c030501 	cfstr32cs	mvfx0, [r3], {1}
     478:	17200000 	strne	r0, [r0, -r0]!
     47c:	01006e4f 	tsteq	r0, pc, asr #28
     480:	009b0920 	addseq	r0, fp, r0, lsr #18
     484:	05010000 	streq	r0, [r1, #-0]
     488:	00000c03 	andeq	r0, r0, r3, lsl #24
     48c:	04841620 	streq	r1, [r4], #1568	; 0x620
     490:	21010000 	mrscs	r0, (UNDEF: 1)
static void devinit_uart (int devnum) {
     494:	00009b09 	andeq	r9, r0, r9, lsl #22
	adddevfunc (ioreq_uart_a, devnum);
     498:	03050100 	movweq	r0, #20736	; 0x5100
     49c:	20000016 	andcs	r0, r0, r6, lsl r0
void udelay (volatile word n) {
     4a0:	0000b916 	andeq	fp, r0, r6, lsl r9
     4a4:	09220100 	stmdbeq	r2!, {r8}
	while (n) {
     4a8:	0000009b 	muleq	r0, fp, r0
     4ac:	30030501 	andcc	r0, r3, r1, lsl #10
}
     4b0:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
	while (n--);
     4b4:	00050601 	andeq	r0, r5, r1, lsl #12
     4b8:	06a80100 	strteq	r0, [r8], r0, lsl #2
     4bc:	0002c401 	andeq	ip, r2, r1, lsl #8
		n--;
     4c0:	00049400 	andeq	r9, r4, r0, lsl #8
     4c4:	6d9c0100 	ldfvss	f0, [ip]
     4c8:	19000006 	stmdbne	r0, {r1, r2}
void mdelay (volatile word n) {
     4cc:	000000e5 	andeq	r0, r0, r5, ror #1
     4d0:	a711a801 	ldrge	sl, [r1, -r1, lsl #16]
	while (n) {
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	1a000000 	bne	4e0 <mdelay+0x14>
}
     4dc:	00000116 	andeq	r0, r0, r6, lsl r1
		udelay (999);
     4e0:	de14b001 	cdple	0, 1, cr11, cr4, cr1, {0}
     4e4:	1a000002 	bne	4f4 <mdelay+0x28>
		n--;
     4e8:	0000005a 	andeq	r0, r0, sl, asr r0
     4ec:	e617b301 	ldr	fp, [r7], -r1, lsl #6
     4f0:	1a000002 	bne	500 <__pi_ondomain+0x8>
     4f4:	000000c5 	andeq	r0, r0, r5, asr #1
void __pi_ondomain (lword d) {
     4f8:	f018b601 			; <UNDEFINED> instruction: 0xf018b601
     4fc:	1a000002 	bne	50c <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     500:	00000440 	andeq	r0, r0, r0, asr #8
     504:	fa19bf01 	blx	670110 <__ccfg+0x650168>
			__pi_systat.effpdm = 1;
     508:	1a000002 	bne	518 <__pi_ondomain+0x20>
	PRCMPowerDomainOn (d);
     50c:	000003df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     510:	1c1fd001 	ldcne	0, cr13, [pc], {1}
     514:	1a000003 	bne	528 <__pi_ondomain+0x30>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	0000034e 	andeq	r0, r0, lr, asr #6
     51c:	241cd301 	ldrcs	sp, [ip], #-769	; 0xfffffcff
     520:	1a000003 	bne	534 <__pi_syserror>
	__pi_systat.ondmns |= d;
     524:	000000ed 	andeq	r0, r0, sp, ror #1
     528:	3c1cdb01 			; <UNDEFINED> instruction: 0x3c1cdb01
}
     52c:	1a000003 	bne	540 <__pi_syserror+0xc>
     530:	00000364 	andeq	r0, r0, r4, ror #6
void __pi_syserror (word ec, const char *m) {
     534:	621cf601 	andsvs	pc, ip, #1048576	; 0x100000
	diag ("SYSERR: %x, %s", ec, m);
     538:	1b000003 	blne	54c <__pi_syserror+0x18>
     53c:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
     540:	16010001 	strne	r0, [r1], -r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	00000384 	andeq	r0, r0, r4, lsl #7
     548:	0002dd1b 	andeq	sp, r2, fp, lsl sp
     54c:	01040100 	mrseq	r0, (UNDEF: 20)
		all_leds_blink;
     550:	00039219 	andeq	r9, r3, r9, lsl r2
     554:	01391b00 	teqeq	r9, r0, lsl #22
     558:	10010000 	andne	r0, r1, r0
     55c:	03ba1301 			; <UNDEFINED> instruction: 0x03ba1301
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	901c0000 	andsls	r0, ip, r0
     564:	1d000000 	stcne	0, cr0, [r0, #-0]
     568:	00000291 	muleq	r0, r1, r2
     56c:	6d11aa01 	vldrvs	s20, [r1, #-4]
     570:	05000006 	streq	r0, [r0, #-6]
     574:	00003103 	andeq	r3, r0, r3, lsl #2
	while (1) {
     578:	00311d20 	eorseq	r1, r1, r0, lsr #26
     57c:	ac010000 	stcge	0, cr0, [r1], {-0}
     580:	0002b814 	andeq	fp, r2, r4, lsl r8
     584:	10030500 	andne	r0, r3, r0, lsl #10
void tci_run_delay_timer () {
     588:	1d200000 	stcne	0, cr0, [r0, #-0]
	setdel = __pi_mintk - __pi_old;
     58c:	000004f7 	strdeq	r0, [r0], -r7
     590:	9b14ae01 	blls	52bd9c <__ccfg+0x50bdf4>
     594:	05000000 	streq	r0, [r0, #-0]
     598:	00001403 	andeq	r1, r0, r3, lsl #8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	00a81e20 	adceq	r1, r8, r0, lsr #28
     5a0:	05b70000 	ldreq	r0, [r7, #0]!
     5a4:	ae1d0000 	cdpge	0, 1, cr0, cr13, cr0, {0}
     5a8:	01000004 	tsteq	r0, r4
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	01b30ec0 			; <UNDEFINED> instruction: 0x01b30ec0
	sti_tim;
     5b0:	91030000 	mrsls	r0, (UNDEF: 3)
}
     5b4:	1f007fbc 	svcne	0x00007fbc
     5b8:	00000324 	andeq	r0, r0, r4, lsr #6
     5bc:	0000033c 	andeq	r0, r0, ip, lsr r3
     5c0:	000005d5 	ldrdeq	r0, [r0], -r5
     5c4:	00033d1d 	andeq	r3, r3, sp, lsl sp
	cli_aux;
     5c8:	0ed40100 	cdpeq	1, 13, cr0, cr4, cr0, {0}
     5cc:	0000067d 	andeq	r0, r0, sp, ror r6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	7fbc9103 	svcvc	0x00bc9103
     5d4:	00c01e00 	sbceq	r1, r0, r0, lsl #28
     5d8:	061b0000 	ldreq	r0, [fp], -r0
     5dc:	d7200000 	strle	r0, [r0, -r0]!
	sti_aux;
     5e0:	01000000 	mrseq	r0, (UNDEF: 0)
}
     5e4:	00b812e6 	adcseq	r1, r8, r6, ror #5
     5e8:	5f210000 	svcpl	0x00210000
     5ec:	08000008 	stmdaeq	r0, {r3}
void AONRTCIntHandler () {
     5f0:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	01000004 	tsteq	r0, r4
     5f8:	060427e2 	streq	r2, [r4], -r2, ror #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	6e220000 	cdpvs	0, 2, cr0, cr2, cr0, {0}
		if (__pi_utims [0] == 0)
     600:	00000008 	andeq	r0, r0, r8
     604:	00085f23 	andeq	r5, r8, r3, lsr #30
		if (*(__pi_utims [0])) {
     608:	00040e00 	andeq	r0, r4, r0, lsl #28
     60c:	00041200 	andeq	r1, r4, r0, lsl #4
			(*(__pi_utims [0]))--;
     610:	3ae20100 	bcc	ff880a18 <_estack+0xdf87ba18>
		if (__pi_utims [1] == 0)
     614:	00086e22 	andeq	r6, r8, r2, lsr #28
		if (*(__pi_utims [1])) {
     618:	1f000000 	svcne	0x00000000
			aux_timer_inactive = 0;
     61c:	00000392 	muleq	r0, r2, r3
			(*(__pi_utims [1]))--;
     620:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
		if (__pi_utims [2] == 0)
     624:	00000639 	andeq	r0, r0, r9, lsr r6
		if (*(__pi_utims [2])) {
     628:	00686324 	rsbeq	r6, r8, r4, lsr #6
			(*(__pi_utims [2]))--;
     62c:	0e010501 	cfsh32eq	mvfx0, mvfx1, #1
		if (__pi_utims [3] != 0) {
     630:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
			if (*(__pi_utims [3])) {
     634:	7fbc9103 	svcvc	0x00bc9103
				aux_timer_inactive = 0;
     638:	085f2500 	ldmdaeq	pc, {r8, sl, sp}^	; <UNPREDICTABLE>
				(*(__pi_utims [3]))--;
     63c:	03d00000 	bicseq	r0, r0, #0
	if (__pi_systat.ledsts) {
     640:	00e00000 	rsceq	r0, r0, r0
     644:	1b010000 	blne	4064c <__ccfg+0x206a4>
		if (__pi_systat.ledblc++ == 0) {
     648:	06542301 	ldrbeq	r2, [r4], -r1, lsl #6
     64c:	6e220000 	cdpvs	0, 2, cr0, cr2, cr0, {0}
			if (__pi_systat.ledblk) {
     650:	00000008 	andeq	r0, r0, r8
     654:	00085f26 	andeq	r5, r8, r6, lsr #30
     658:	0003d800 	andeq	sp, r3, r0, lsl #16
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	0003dc00 	andeq	sp, r3, r0, lsl #24
     660:	011b0100 	tsteq	fp, r0, lsl #2
				if (__pi_systat.ledsts & 0x2)
     664:	086e2236 	stmdaeq	lr!, {r1, r2, r4, r5, r9, sp}^
     668:	00000000 	andeq	r0, r0, r0
     66c:	01b30c00 			; <UNDEFINED> instruction: 0x01b30c00
				if (__pi_systat.ledsts & 0x4)
     670:	067d0000 	ldrbteq	r0, [sp], -r0
				__pi_systat.ledblk = 0;
     674:	940e0000 	strls	r0, [lr], #-0
     678:	13000000 	movwne	r0, #0
			if (__pi_systat.fstblk)
     67c:	01b30c00 			; <UNDEFINED> instruction: 0x01b30c00
     680:	068d0000 	streq	r0, [sp], r0
				__pi_systat.ledblc = 200;
     684:	940e0000 	strls	r0, [lr], #-0
	if (events & AON_RTC_EVFLAGS_CH0) {
     688:	31000000 	mrscc	r0, (UNDEF: 0)
		cli_tim;
     68c:	20012700 	andcs	r2, r1, r0, lsl #14
		__pi_new += setdel;
     690:	01000003 	tsteq	r0, r3
     694:	8d010582 	cfstr32hi	mvfx0, [r1, #-520]	; 0xfffffdf8
		setdel = 0;
     698:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
		RISE_N_SHINE;
     69c:	c4000002 	strgt	r0, [r0], #-2
		__pi_new += setdel;
     6a0:	01000002 	tsteq	r0, r2
		RISE_N_SHINE;
     6a4:	0006f99c 	muleq	r6, ip, r9
     6a8:	006b1900 	rsbeq	r1, fp, r0, lsl #18
		aux_timer_inactive = 1;
     6ac:	82010000 	andhi	r0, r1, #0
     6b0:	0001ad21 	andeq	sl, r1, r1, lsr #26
				if (__pi_systat.ledsts & 0x1)
     6b4:	00001e00 	andeq	r1, r0, r0, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b8:	04091d00 	streq	r1, [r9], #-3328	; 0xfffff300
     6bc:	83010000 	movwhi	r0, #4096	; 0x1000
				if (__pi_systat.ledsts & 0x2)
     6c0:	0002230a 	andeq	r2, r2, sl, lsl #6
     6c4:	68910200 	ldmvs	r1, {r9}
     6c8:	00009728 	andeq	r9, r0, r8, lsr #14
				if (__pi_systat.ledsts & 0x8)
     6cc:	09840100 	stmibeq	r4, {r8}
				__pi_systat.ledblk = 1;
     6d0:	0000008d 	andeq	r0, r0, sp, lsl #1
     6d4:	00000031 	andeq	r0, r0, r1, lsr r0
		if (aux_timer_inactive) {
     6d8:	00027b28 	andeq	r7, r2, r8, lsr #22
			cli_aux;
     6dc:	0a860100 	beq	fe180ae4 <_estack+0xde17bae4>
     6e0:	000000a7 	andeq	r0, r0, r7, lsr #1
     6e4:	00000044 	andeq	r0, r0, r4, asr #32
     6e8:	0000781c 	andeq	r7, r0, ip, lsl r8
     6ec:	00692900 	rsbeq	r2, r9, r0, lsl #18
     6f0:	8d0e8901 	vstrhi.16	s16, [lr, #-2]	; <UNPREDICTABLE>
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	35011800 	strcc	r1, [r1, #-2048]	; 0xfffff800
     6fc:	01000003 	tsteq	r0, r3
     700:	c8010632 	stmdagt	r1, {r1, r4, r5, r9, sl}
word tci_update_delay_ticks (Boolean force) {
     704:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
	cli_tim;
     708:	01000002 	tsteq	r0, r2
     70c:	00083f9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
	if (setdel) {
     710:	00e51900 	rsceq	r1, r5, r0, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	32010000 	andcc	r0, r1, #0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	0000a714 	andeq	sl, r0, r4, lsl r7
     71c:	00007800 	andeq	r7, r0, r0, lsl #16
     720:	00101a00 	andseq	r1, r0, r0, lsl #20
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	3c010000 	stccc	0, cr0, [r1], {-0}
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	0000e019 	andeq	lr, r0, r9, lsl r0
	return NO;
     72c:	01031a00 	tsteq	r3, r0, lsl #20
			setdel = 0;
     730:	62010000 	andvs	r0, r1, #0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	0001a219 	andeq	sl, r1, r9, lsl r2
     738:	01391a00 	teqeq	r9, r0, lsl #20
}
     73c:	73010000 	movwvc	r0, #4096	; 0x1000
		sti_tim;
     740:	0001e613 	andeq	lr, r1, r3, lsl r6
		return YES;
     744:	00001c00 	andeq	r1, r0, r0, lsl #24
     748:	6c2a0000 	stcvs	0, cr0, [sl], #-0
     74c:	01006465 	tsteq	r0, r5, ror #8
     750:	008d1033 	addeq	r1, sp, r3, lsr r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	03050000 	movweq	r0, #20480	; 0x5000
	UARTDisable (UART0_BASE);
     758:	2000001c 	andcs	r0, r0, ip, lsl r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	0068632a 	rsbeq	r6, r8, sl, lsr #6
	UARTDisable (UART0_BASE);
     760:	b3113401 	tstlt	r1, #16777216	; 0x1000000
	UARTConfigSetExpClk (UART0_BASE,
     764:	05000001 	streq	r0, [r0, #-1]
     768:	00001503 	andeq	r1, r0, r3, lsl #10
     76c:	03d81d20 	bicseq	r1, r8, #32, 26	; 0x800
     770:	36010000 	strcc	r0, [r1], -r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	0000a711 	andeq	sl, r0, r1, lsl r7
     778:	26030500 	strcs	r0, [r3], -r0, lsl #10
     77c:	1d200000 	stcne	0, cr0, [r0, #-0]
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	00000346 	andeq	r0, r0, r6, asr #6
     784:	a7113701 	ldrge	r3, [r1, -r1, lsl #14]
     788:	05000000 	streq	r0, [r0, #-0]
	urates [0] = rate;
     78c:	00002403 	andeq	r2, r0, r3, lsl #8
}
     790:	04531d20 	ldrbeq	r1, [r3], #-3360	; 0xfffff2e0
     794:	3a010000 	bcc	4079c <__ccfg+0x207f4>
     798:	00008d10 	andeq	r8, r0, r0, lsl sp
     79c:	20030500 	andcs	r0, r3, r0, lsl #10
     7a0:	2b200000 	blcs	8007a8 <__ccfg+0x7e0800>
     7a4:	0000083f 	andeq	r0, r0, pc, lsr r8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	0000010c 	andeq	r0, r0, ip, lsl #2
     7ac:	00000020 	andeq	r0, r0, r0, lsr #32
     7b0:	bd124e01 	ldclt	14, cr4, [r2, #-4]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	22000007 	andcs	r0, r0, #7
     7b8:	00000852 	andeq	r0, r0, r2, asr r8
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	083f2b00 	ldmdaeq	pc!, {r8, r9, fp, sp}	; <UNPREDICTABLE>
     7c0:	01120000 	tsteq	r2, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	00500000 	subseq	r0, r0, r0
     7c8:	4f010000 	svcmi	0x00010000
     7cc:	0007d713 	andeq	sp, r7, r3, lsl r7
     7d0:	08522200 	ldmdaeq	r2, {r9, sp}^
     7d4:	2c000000 	stccs	0, cr0, [r0], {-0}
     7d8:	0000087c 	andeq	r0, r0, ip, ror r8
     7dc:	00000140 	andeq	r0, r0, r0, asr #2
	switch (operation) {
     7e0:	00000144 	andeq	r0, r0, r4, asr #2
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	01595701 	cmpeq	r9, r1, lsl #14
     7e8:	000007f2 	strdeq	r0, [r0], -r2
     7ec:	00088b22 	andeq	r8, r8, r2, lsr #22
     7f0:	7c2c0000 	stcvc	0, cr0, [ip], #-0
     7f4:	7a000008 	bvc	81c <ioreq_uart_a+0x3c>
				*buf++ = uart_a_read;
     7f8:	7e000001 	cdpvc	0, 0, cr0, cr0, cr1, {0}
     7fc:	01000001 	tsteq	r0, r1
			while (len && uart_a_char_available) {
     800:	0d01b457 	cfstrseq	mvf11, [r1, #-348]	; 0xfffffea4
     804:	22000008 	andcs	r0, r0, #8
     808:	0000088b 	andeq	r0, r0, fp, lsl #17
			if (len != operation) {
     80c:	085f2100 	ldmdaeq	pc, {r8, sp}^	; <UNPREDICTABLE>
}
     810:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     814:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
			uart_a_disable_int;
     818:	64010000 	strvs	r0, [r1], #-0
			if (uart_a_char_available) {
     81c:	00082735 	andeq	r2, r8, r5, lsr r7
				*buf++ = uart_a_read;
     820:	086e2200 	stmdaeq	lr!, {r9, sp}^
			uart_a_disable_int;
     824:	23000000 	movwcs	r0, #0
     828:	0000085f 	andeq	r0, r0, pc, asr r8
			if (uart_a_char_available) {
     82c:	000001d8 	ldrdeq	r0, [r0], -r8
     830:	000001dc 	ldrdeq	r0, [r0], -ip
				uart_a_enable_int;
     834:	22916401 	addscs	r6, r1, #16777216	; 0x1000000
     838:	0000086e 	andeq	r0, r0, lr, ror #16
				goto Redo_rx;
     83c:	2d000000 	stccs	0, cr0, [r0, #-0]
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     840:	00041101 	andeq	r1, r4, r1, lsl #2
     844:	062d0100 	strteq	r0, [sp], -r0, lsl #2
			return -2;
     848:	0000a701 	andeq	sl, r0, r1, lsl #14
     84c:	085f0100 	ldmdaeq	pc, {r8}^	; <UNPREDICTABLE>
				uart_a_write (*buf);
     850:	962e0000 	strtls	r0, [lr], -r0
     854:	01000004 	tsteq	r0, r4
			while (len && uart_a_room_in_tx) {
     858:	00a7162d 	adceq	r1, r7, sp, lsr #12
     85c:	2f000000 	svccs	0x00000000
     860:	000004c4 	andeq	r0, r0, r4, asr #9
			if (len != operation) {
     864:	01015402 	tsteq	r1, r2, lsl #8
			uart_a_disable_int;
     868:	087c0301 	ldmdaeq	ip!, {r0, r8, r9}^
     86c:	4d300000 	ldcmi	0, cr0, [r0, #-0]
			if (uart_a_room_in_tx) {
     870:	02000001 	andeq	r0, r0, #1
     874:	73190154 	tstvc	r9, #84, 2
				uart_a_enable_int;
     878:	00000000 	andeq	r0, r0, r0
     87c:	0000252f 	andeq	r2, r0, pc, lsr #10
				*buf++ = uart_a_read;
     880:	011e0200 	tsteq	lr, r0, lsl #4
			if (uart_a_room_in_tx) {
     884:	99030101 	stmdbls	r3, {r0, r8}
				uart_a_write (*buf);
     888:	30000008 	andcc	r0, r0, r8
     88c:	0000014d 	andeq	r0, r0, sp, asr #2
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	17011e02 	strne	r1, [r1, -r2, lsl #28]
     894:	00000073 	andeq	r0, r0, r3, ror r0
			uart_a_enable_int;
     898:	083f3100 	ldmdaeq	pc!, {r8, ip, sp}	; <UNPREDICTABLE>
	...
			return 0;
     8a4:	9c010000 	stcls	0, cr0, [r1], {-0}
			if (len == UART_CNTRL_SETRATE) {
     8a8:	00085232 	andeq	r5, r8, r2, lsr r2
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	0000b700 	andeq	fp, r0, r0, lsl #14
     8b0:	8c000000 	stchi	0, cr0, [r0], {-0}
     8b4:	03000014 	movweq	r0, #20
				syserror (EREQPAR, "uar");
     8b8:	0002ed00 	andeq	lr, r2, r0, lsl #26
			syserror (ENOOPER, "uai");
     8bc:	57010400 	strpl	r0, [r1, -r0, lsl #8]
			if (len == UART_CNTRL_GETRATE) {
     8c0:	0c000001 	stceq	0, cr0, [r0], {1}
				return 1;
     8c4:	0000097d 	andeq	r0, r0, sp, ror r9
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	000003a8 	andeq	r0, r0, r8, lsr #7
			syserror (ENOOPER, "uai");
     8cc:	00000588 	andeq	r0, r0, r8, lsl #11
     8d0:	00000000 	andeq	r0, r0, r0
     8d4:	000005cd 	andeq	r0, r0, sp, asr #11
     8d8:	9c060102 	stflss	f0, [r6], {2}
     8dc:	02000003 	andeq	r0, r0, #3
     8e0:	03f80502 	mvnseq	r0, #8388608	; 0x800000
     8e4:	9d030000 	stcls	0, cr0, [r3, #-0]
     8e8:	10000016 	andne	r0, r0, r6, lsl r0
     8ec:	003f1828 	eorseq	r1, pc, r8, lsr #16
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	04020000 	streq	r0, [r2], #-0
void UART0IntHandler () {
     8f4:	0000b005 	andeq	fp, r0, r5
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     8fc:	000000ab 	andeq	r0, r0, fp, lsr #1
     900:	00225103 	eoreq	r5, r2, r3, lsl #2
     904:	182e1000 	stmdane	lr!, {ip}
     908:	00000059 	andeq	r0, r0, r9, asr r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	9a080102 	bls	200d1c <__ccfg+0x1e0d74>
     910:	03000003 	movweq	r0, #3
		RISE_N_SHINE;
     914:	0000213f 	andeq	r2, r0, pc, lsr r1
     918:	6c193110 	ldfvss	f3, [r9], {16}
		i_trigger (devevent (UART_A, READ));
     91c:	02000000 	andeq	r0, r0, #0
     920:	02580702 	subseq	r0, r8, #524288	; 0x80000
     924:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
     928:	10000018 	andne	r0, r0, r8, lsl r0
     92c:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
     930:	04020000 	streq	r0, [r2], #-0
     934:	00008507 	andeq	r8, r0, r7, lsl #10
     938:	07080200 	streq	r0, [r8, -r0, lsl #4]
     93c:	00000080 	andeq	r0, r0, r0, lsl #1
     940:	69050404 	stmdbvs	r5, {r2, sl}
     944:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     948:	008a0704 	addeq	r0, sl, r4, lsl #14
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	23030000 	movwcs	r0, #12288	; 0x3000
     950:	11000004 	tstne	r0, r4
     954:	004d1226 	subeq	r1, sp, r6, lsr #4
		i_trigger (devevent (UART_A, WRITE));
     958:	15030000 	strne	r0, [r3, #-0]
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	11000016 	tstne	r0, r6, lsl r0
     960:	00601227 	rsbeq	r1, r0, r7, lsr #4
		RISE_N_SHINE;
     964:	a7050000 	strge	r0, [r5, -r0]
     968:	06000000 	streq	r0, [r0], -r0
     96c:	000000a7 	andeq	r0, r0, r7, lsr #1
		i_trigger (devevent (UART_A, WRITE));
     970:	00049103 	andeq	r9, r4, r3, lsl #2
     974:	12281100 	eorne	r1, r8, #0, 2
     978:	00000033 	andeq	r0, r0, r3, lsr r0
     97c:	00140d03 	andseq	r0, r4, r3, lsl #26
     980:	122b1100 	eorne	r1, fp, #0, 2
     984:	0000004d 	andeq	r0, r0, sp, asr #32
     988:	0000c906 	andeq	ip, r0, r6, lsl #18
     98c:	00c90500 	sbceq	r0, r9, r0, lsl #10
     990:	66030000 	strvs	r0, [r3], -r0
     994:	11000016 	tstne	r0, r6, lsl r0
     998:	0073122c 	rsbseq	r1, r3, ip, lsr #4
}
     99c:	df050000 	svcle	0x00050000
     9a0:	03000000 	movweq	r0, #0
     9a4:	0000028b 	andeq	r0, r0, fp, lsl #5
     9a8:	73122d11 	tstvc	r2, #1088	; 0x440
     9ac:	03000000 	movweq	r0, #0
void __buttons_setirq (int val) {
     9b0:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
     9b8:	07000001 	streq	r0, [r0, -r1]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	0000a704 	andeq	sl, r0, r4, lsl #14
     9c0:	11080800 	tstne	r8, r0, lsl #16
     9c4:	019c0932 	orrseq	r0, ip, r2, lsr r9
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	a6090000 	strge	r0, [r9], -r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	11000002 	tstne	r0, r2
     9d0:	00c90734 	sbceq	r0, r9, r4, lsr r7
     9d4:	01010000 	mrseq	r0, (UNDEF: 1)
     9d8:	a4090007 	strge	r0, [r9], #-7
     9dc:	11000000 	mrsne	r0, (UNDEF: 0)
     9e0:	00c90335 	sbceq	r0, r9, r5, lsr r3
}
     9e4:	01010000 	mrseq	r0, (UNDEF: 1)
     9e8:	74090006 	strvc	r0, [r9], #-6
     9ec:	11000002 	tstne	r0, r2
     9f0:	00c90336 	sbceq	r0, r9, r6, lsr r3
void __pinlist_setirq (int val) {
     9f4:	01010000 	mrseq	r0, (UNDEF: 1)
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	32090005 	andcc	r0, r9, #5
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	11000004 	tstne	r0, r4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	00c90337 	sbceq	r0, r9, r7, lsr r3
	for (i = 0; i < N_PINLIST; i++) {
     a04:	01010000 	mrseq	r0, (UNDEF: 1)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a08:	2b090004 	blcs	240a20 <__ccfg+0x220a78>
     a0c:	11000004 	tstne	r0, r4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a10:	00c90338 	sbceq	r0, r9, r8, lsr r3
     a14:	04010000 	streq	r0, [r1], #-0
     a18:	1c0a0000 	stcne	0, cr0, [sl], {-0}
	for (i = 0; i < N_PINLIST; i++) {
     a1c:	11000004 	tstne	r0, r4
}
     a20:	00c9073a 	sbceq	r0, r9, sl, lsr r7
     a24:	0a010000 	beq	40a2c <__ccfg+0x20a84>
     a28:	0000004c 	andeq	r0, r0, ip, asr #32
     a2c:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
void GPIOIntHandler () {
     a30:	02000000 	andeq	r0, r0, #0
if (buttons_int) {
     a34:	0000790a 	andeq	r7, r0, sl, lsl #18
     a38:	033d1100 	teqeq	sp, #0, 2
	buttons_disable ();
     a3c:	000000c9 	andeq	r0, r0, r9, asr #1
     a40:	01460a03 	cmpeq	r6, r3, lsl #20
	i_trigger ((aword)&__button_list);
     a44:	3f110000 	svccc	0x00110000
     a48:	0000df08 	andeq	sp, r0, r8, lsl #30
     a4c:	03000400 	movweq	r0, #1024	; 0x400
     a50:	0000045b 	andeq	r0, r0, fp, asr r4
     a54:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
     a58:	06000001 	streq	r0, [r0], -r1
     a5c:	0000019c 	muleq	r0, ip, r1
     a60:	00029a0b 	andeq	r9, r2, fp, lsl #20
     a64:	1a431100 	bne	10c4e6c <__ccfg+0x10a4ec4>
     a68:	000001a8 	andeq	r0, r0, r8, lsr #3
     a6c:	060b0101 	streq	r0, [fp], -r1, lsl #2
	RISE_N_SHINE;
     a70:	11000003 	tstne	r0, r3
     a74:	01c90e45 	biceq	r0, r9, r5, asr #28
     a78:	01010000 	mrseq	r0, (UNDEF: 1)
if (pin_sensor_int) {
     a7c:	01cf0407 	biceq	r0, pc, r7, lsl #8
     a80:	01020000 	mrseq	r0, (UNDEF: 2)
	i_trigger ((aword)(&__input_pins));
     a84:	0003a308 	andeq	sl, r3, r8, lsl #6
     a88:	01cf0500 	biceq	r0, pc, r0, lsl #10
     a8c:	140b0000 	strne	r0, [fp], #-0
     a90:	11000003 	tstne	r0, r3
     a94:	01c91e45 	biceq	r1, r9, r5, asr #28
     a98:	01010000 	mrseq	r0, (UNDEF: 1)
     a9c:	8f120808 	svchi	0x00120808
     aa0:	00021a09 	andeq	r1, r2, r9, lsl #20
     aa4:	02ad0a00 	adceq	r0, sp, #0, 20
     aa8:	90120000 	andsls	r0, r2, r0
     aac:	0000730b 	andeq	r7, r0, fp, lsl #6
	__pinsen_disable_and_clear;
     ab0:	470a0000 	strmi	r0, [sl, -r0]
	RISE_N_SHINE;
     ab4:	12000006 	andne	r0, r0, #6
     ab8:	00a70891 	umlaleq	r0, r7, r1, r8
     abc:	0a040000 	beq	100ac4 <__ccfg+0xe0b1c>
}
     ac0:	000004a8 	andeq	r0, r0, r8, lsr #9
     ac4:	d5109212 	ldrle	r9, [r0, #-530]	; 0xfffffdee
     ac8:	06000000 	streq	r0, [r0], -r0
     acc:	04390300 	ldrteq	r0, [r9], #-768	; 0xfffffd00
     ad0:	93120000 	tstls	r2, #0
void system_init () {
     ad4:	0001e903 	andeq	lr, r1, r3, lsl #18
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	021a0500 	andseq	r0, sl, #0, 10
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	1a0c0000 	bne	300ae4 <__ccfg+0x2e0b3c>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	36000002 	strcc	r0, [r0], -r2
     ae4:	0d000002 	stceq	0, cr0, [r0, #-8]
     ae8:	00420b00 	subeq	r0, r2, r0, lsl #22
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aec:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
     af0:	00022b0f 	andeq	r2, r2, pc, lsl #22
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	07010100 	streq	r0, [r1, -r0, lsl #2]
     af8:	0000da04 	andeq	sp, r0, r4, lsl #20
     afc:	13010800 	movwne	r0, #6144	; 0x1800
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	02740991 	rsbseq	r0, r4, #2375680	; 0x244000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b04:	9b090000 	blls	240b0c <__ccfg+0x220b64>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	13000004 	movwne	r0, #4
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	00c90793 	smulleq	r0, r9, r3, r7
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	07010000 	streq	r0, [r1, -r0]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	3d090001 	stccc	0, cr0, [r9, #-4]
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	13000000 	movwne	r0, #0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	00c90394 	smulleq	r0, r9, r4, r3
		pin = (port_confs [i] >> 19) & 0x1f;
     b20:	01010000 	mrseq	r0, (UNDEF: 1)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b24:	03000000 	movweq	r0, #0
     b28:	0000026b 	andeq	r0, r0, fp, ror #4
     b2c:	4a039613 	bmi	e6380 <__ccfg+0xc63d8>
     b30:	05000002 	streq	r0, [r0, #-2]
		if (port_confs [i] & 0x80)
     b34:	00000274 	andeq	r0, r0, r4, ror r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	0002800c 	andeq	r8, r2, ip
     b3c:	00029000 	andeq	r9, r2, r0
		if (port_confs [i] & 0x40)
     b40:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	00000285 	andeq	r0, r0, r5, lsl #5
     b48:	0002d00b 	andeq	sp, r2, fp
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4c:	179c1300 	ldrne	r1, [ip, r0, lsl #6]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	00000290 	muleq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b54:	b30c0101 	movwlt	r0, #49409	; 0xc101
	all_leds_blink;
     b58:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     b5c:	0d000002 	stceq	0, cr0, [r0, #-8]
     b60:	02a30500 	adceq	r0, r3, #0, 10
     b64:	8c0b0000 	stchi	0, cr0, [fp], {-0}
     b68:	14000003 	strne	r0, [r0], #-3
     b6c:	02ae1306 	adceq	r1, lr, #402653184	; 0x18000000
     b70:	01010000 	mrseq	r0, (UNDEF: 1)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	0001260b 	andeq	r2, r1, fp, lsl #12
     b78:	0ec31200 	cdpeq	2, 12, cr1, cr3, cr0, {0}
     b7c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b80:	b50e0101 	strlt	r0, [lr, #-257]	; 0xfffffeff
     b84:	15000004 	strne	r0, [r0, #-4]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	dc10016e 	ldfles	f0, [r0], {110}	; 0x6e
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	07000002 	streq	r0, [r0, -r2]
     b90:	0002e204 	andeq	lr, r2, r4, lsl #4
	IntEnable (INT_AON_RTC_COMB);
     b94:	ee010f00 	cdp	15, 0, cr0, cr1, cr0, {0}
     b98:	10000002 	andne	r0, r0, r2
     b9c:	000000a7 	andeq	r0, r0, r7, lsr #1
	__pi_malloc_init ();
     ba0:	01d60c00 	bicseq	r0, r6, r0, lsl #24
	IntEnable (INT_AON_GPIO_EDGE);
     ba4:	02f90000 	rscseq	r0, r9, #0
     ba8:	000d0000 	andeq	r0, sp, r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     bac:	0002ee05 	andeq	lr, r2, r5, lsl #28
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	046b1100 	strbteq	r1, [fp], #-256	; 0xffffff00
     bb4:	7f150000 	svcvc	0x00150000
     bb8:	02f91601 	rscseq	r1, r9, #1048576	; 0x100000
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	01010000 	mrseq	r0, (UNDEF: 1)
     bc0:	00038411 	andeq	r8, r3, r1, lsl r4
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	01821500 	orreq	r1, r2, r0, lsl #10
     bc8:	0000eb14 	andeq	lr, r0, r4, lsl fp
     bcc:	11010100 	mrsne	r0, (UNDEF: 17)
	urates [0] = UART_RATE / 100;
     bd0:	000004a0 	andeq	r0, r0, r0, lsr #9
     bd4:	0e02d815 	mcreq	8, 0, sp, cr2, cr5, {0}
	reinit_uart ();
     bd8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
	EXTRA_INITIALIZERS;
     bdc:	08120101 	ldmdaeq	r2, {r0, r8}
     be0:	09030315 	stmdbeq	r3, {r0, r2, r4, r8, r9}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	00000352 	andeq	r0, r0, r2, asr r3
     be8:	00224913 	eoreq	r4, r2, r3, lsl r9
     bec:	03071500 	movweq	r1, #29952	; 0x7500
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	0000a707 	andeq	sl, r0, r7, lsl #14
     bf4:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	15000005 	strne	r0, [r0, #-5]
     bfc:	f0080308 			; <UNDEFINED> instruction: 0xf0080308
			devinit [i] . init (devinit [i] . param);
     c00:	04000000 	streq	r0, [r0], #-0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	024b0e00 	subeq	r0, fp, #0, 28
     c08:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
     c0c:	032b0303 			; <UNDEFINED> instruction: 0x032b0303
	IntEnable (INT_UART0_COMB);
     c10:	d2140000 	andsle	r0, r4, #0
     c14:	30000004 	andcc	r0, r0, r4
}
     c18:	08030b15 	stmdaeq	r3, {r0, r2, r4, r8, r9, fp}
	tci_run_auxiliary_timer ();
     c1c:	000003c2 	andeq	r0, r0, r2, asr #7
		diag ("");
     c20:	0004bd13 	andeq	fp, r4, r3, lsl sp
     c24:	03141500 	tsteq	r4, #0, 10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c28:	0000a708 	andeq	sl, r0, r8, lsl #14
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	b7130000 	ldrlt	r0, [r3, -r0]
		diag ("Leftover RAM: %d bytes",
     c30:	15000002 	strne	r0, [r0, #-2]
     c34:	a7080315 	smladge	r8, r5, r3, r0
     c38:	02000000 	andeq	r0, r0, #0
     c3c:	0004b813 	andeq	fp, r4, r3, lsl r8
     c40:	03161500 	tsteq	r6, #0, 10
     c44:	0002cf0b 	andeq	ip, r2, fp, lsl #30
     c48:	94130400 	ldrls	r0, [r3], #-1024	; 0xfffffc00
     c4c:	1500000f 	strne	r0, [r0, #-15]
     c50:	f0090317 			; <UNDEFINED> instruction: 0xf0090317
     c54:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     c58:	00046413 	andeq	r6, r4, r3, lsl r4
     c5c:	03181500 	tsteq	r8, #0, 10
     c60:	0003c20f 	andeq	ip, r3, pc, lsl #4
     c64:	b2130c00 	andslt	r0, r3, #0, 24
     c68:	15000002 	strne	r0, [r0, #-2]
     c6c:	d2150319 	andsle	r0, r5, #1677721600	; 0x64000000
     c70:	2c000003 	stccs	0, cr0, [r0], {3}
     c74:	03520c00 	cmpeq	r2, #0, 24
     c78:	03d20000 	bicseq	r0, r2, #0
     c7c:	94150000 	ldrls	r0, [r5], #-0
     c80:	03000000 	movweq	r0, #0
     c84:	5f040700 	svcpl	0x00040700
     c88:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
__attribute__ ((noreturn)) void __pi_release () {
     c8c:	000004dd 	ldrdeq	r0, [r0], -sp
     c90:	1b031c15 	blne	c7cec <__ccfg+0xa7d44>
     c94:	0000035f 	andeq	r0, r0, pc, asr r3
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	00037a11 	andeq	r7, r3, r1, lsl sl
	check_stack_overflow;
     c9c:	031e1500 	tsteq	lr, #0, 10
     ca0:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
     ca4:	07010100 	streq	r0, [r1, -r0, lsl #2]
	update_n_wake (MAX_WORD, NO);
     ca8:	0003d804 	andeq	sp, r3, r4, lsl #16
     cac:	050b0b00 	streq	r0, [fp, #-2816]	; 0xfffff500
     cb0:	1d160000 	ldcne	0, cr0, [r6, #-0]
	for_all_tasks (__pi_curr) {
     cb4:	0000a713 	andeq	sl, r0, r3, lsl r7
     cb8:	0b010100 	bleq	410c0 <__ccfg+0x21118>
     cbc:	00000775 	andeq	r0, r0, r5, ror r7
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	b81a1e16 	ldmdalt	sl, {r1, r2, r4, r9, sl, fp, ip}
	__SLEEP;
     cc4:	01000000 	mrseq	r0, (UNDEF: 0)
     cc8:	09050b01 	stmdbeq	r5, {r0, r8, r9, fp}
     ccc:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
     cd0:	0000b824 	andeq	fp, r0, r4, lsr #16
	system_event_count ++;
     cd4:	0b010100 	bleq	410dc <__ccfg+0x21134>
     cd8:	00000634 	andeq	r0, r0, r4, lsr r6
	switch (__pi_systat.effpdm) {
     cdc:	f4142216 			; <UNDEFINED> instruction: 0xf4142216
     ce0:	01000003 	tsteq	r0, r3
     ce4:	057d0301 	ldrbeq	r0, [sp, #-769]!	; 0xfffffcff
     ce8:	43160000 	tstmi	r6, #0
			__WFI ();
     cec:	00043e10 	andeq	r3, r4, r0, lsl lr
     cf0:	44040700 	strmi	r0, [r4], #-1792	; 0xfffff900
     cf4:	0f000004 	svceq	0x00000004
	check_stack_overflow;
     cf8:	00045001 	andeq	r5, r4, r1
     cfc:	008d1000 	addeq	r1, sp, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     d00:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     d04:	09461608 	stmdbeq	r6, {r3, r9, sl, ip}^
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	00000474 	andeq	r0, r0, r4, ror r4
			goto Redo;
     d0c:	000adb0a 	andeq	sp, sl, sl, lsl #22
	for_all_tasks (__pi_curr) {
     d10:	0f4a1600 	svceq	0x004a1600
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	00000432 	andeq	r0, r0, r2, lsr r4
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	07e20a00 	strbeq	r0, [r2, r0, lsl #20]!
     d1c:	4b160000 	blmi	580d24 <__ccfg+0x560d7c>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	00008d07 	andeq	r8, r0, r7, lsl #26
     d24:	03000400 	movweq	r0, #1024	; 0x400
     d28:	00000603 	andeq	r0, r0, r3, lsl #12
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2c:	50034c16 	andpl	r4, r3, r6, lsl ip
     d30:	05000004 	streq	r0, [r0, #-4]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	00000474 	andeq	r0, r0, r4, ror r4
     d38:	0000fc0c 	andeq	pc, r0, ip, lsl #24
			__WFI ();
     d3c:	00049500 	andeq	r9, r4, r0, lsl #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d40:	00941500 	addseq	r1, r4, r0, lsl #10
     d44:	00030000 	andeq	r0, r3, r0
}
     d48:	0009550b 	andeq	r5, r9, fp, lsl #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	120d0100 	andne	r0, sp, #0, 2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	00000485 	andeq	r0, r0, r5, lsl #9
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	800c0101 	andhi	r0, ip, r1, lsl #2
     d58:	b3000004 	movwlt	r0, #4
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5c:	15000004 	strne	r0, [r0, #-4]
     d60:	00000094 	muleq	r0, r4, r0
     d64:	a3050001 	movwge	r0, #20481	; 0x5001
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	16000004 	strne	r0, [r0], -r4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	00000960 	andeq	r0, r0, r0, ror #18
     d70:	b318cf01 	tstlt	r8, #1, 30
     d74:	0c000004 	stceq	0, cr0, [r0], {4}
     d78:	000000eb 	andeq	r0, r0, fp, ror #1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	000004d4 	ldrdeq	r0, [r0], -r4
     d80:	00009415 	andeq	r9, r0, r5, lsl r4
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	05001000 	streq	r1, [r0, #-0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	000004c4 	andeq	r0, r0, r4, asr #9
     d8c:	00076217 	andeq	r6, r7, r7, lsl r2
     d90:	0dec0100 	stfeqe	f0, [ip]
     d94:	000004d4 	ldrdeq	r0, [r0], -r4
     d98:	88030501 	stmdahi	r3, {r0, r8, sl}
			SysCtrlSetRechargeBeforePowerDown
     d9c:	1800002e 	stmdane	r0, {r1, r2, r3, r5}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da0:	000005e2 	andeq	r0, r0, r2, ror #11
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da4:	0d010c01 	stceq	12, cr0, [r1, #-4]
     da8:	000000a7 	andeq	r0, r0, r7, lsr #1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	00460305 	subeq	r0, r6, r5, lsl #6
     db0:	36192000 	ldrcc	r2, [r9], -r0
     db4:	01000002 	tsteq	r0, r2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	050802d0 	streq	r0, [r8, #-720]	; 0xfffffd30
     dbc:	00008403 	andeq	r8, r0, r3, lsl #8
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	00a70c20 	adceq	r0, r7, r0, lsr #24
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	051e0000 	ldreq	r0, [lr, #-0]
     dc8:	94150000 	ldrls	r0, [r5], #-0
     dcc:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dd0:	05631800 	strbeq	r1, [r3, #-2048]!	; 0xfffff800
			while (!(AONWUCPowerStatusGet () &
     dd4:	d2010000 	andle	r0, r1, #0
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	050e0d02 	streq	r0, [lr, #-3330]	; 0xfffff2fe
     ddc:	03050000 	movweq	r0, #20480	; 0x5000
     de0:	20000048 	andcs	r0, r0, r8, asr #32
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de4:	0002c119 	andeq	ip, r2, r9, lsl r1
     de8:	048c0100 	streq	r0, [ip], #256	; 0x100
     dec:	8c030507 	cfstr32hi	mvfx0, [r3], {7}
     df0:	1a200000 	bne	800df8 <__ccfg+0x7e0e50>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	00055701 	andeq	r5, r5, r1, lsl #14
     df8:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	008d0105 	addeq	r0, sp, r5, lsl #2
     e00:	0ee40000 	cdpeq	0, 14, cr0, cr4, cr0, {0}
			SysCtrlAdjustRechargeAfterPowerDown ();
     e04:	0f440000 	svceq	0x00440000
			reinit_uart ();
     e08:	9c010000 	stcls	0, cr0, [r1], {-0}
     e0c:	00000584 	andeq	r0, r0, r4, lsl #11
     e10:	0005701b 	andeq	r7, r5, fp, lsl r0
}
     e14:	00057200 	andeq	r7, r5, r0, lsl #4
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	00691c00 	rsbeq	r1, r9, r0, lsl #24
     e1c:	11057601 	tstne	r5, r1, lsl #12
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	000000bd 	strheq	r0, [r0], -sp
     e24:	11f71d00 	mvnsne	r1, r0, lsl #26
     e28:	0f260000 	svceq	0x00260000
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	0f280000 	svceq	0x00280000
     e30:	8d010000 	stchi	0, cr0, [r1, #-0]
     e34:	1e000205 	cdpne	2, 0, cr0, cr0, cr5, {0}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e38:	0007fc01 	andeq	pc, r7, r1, lsl #24
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e3c:	05680100 	strbeq	r0, [r8, #-256]!	; 0xffffff00
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	000c8c21 	andeq	r8, ip, r1, lsr #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	000ee400 	andeq	lr, lr, r0, lsl #8
     e48:	e49c0100 	ldr	r0, [ip], #256	; 0x100
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	1f000007 	svcne	0x00000007
     e50:	00000809 	andeq	r0, r0, r9, lsl #16
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	2001080d 	andcs	r0, r1, sp, lsl #16
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	000011d0 	ldrdeq	r1, [r0], -r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	00000c8c 	andeq	r0, r0, ip, lsl #25
     e60:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			PRCMPowerDomainOff (
     e64:	02056a01 	andeq	r6, r5, #4096	; 0x1000
     e68:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
	__SLEEP;
     e6c:	0011df21 	andseq	sp, r1, r1, lsr #30
     e70:	12220000 	eorne	r0, r2, #0
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	a6000008 	strge	r0, [r0], -r8
	goto Redo;
     e78:	f000000c 			; <UNDEFINED> instruction: 0xf000000c
     e7c:	0d000003 	stceq	0, cr0, [r0, #-12]
     e80:	07b30227 	ldreq	r0, [r3, r7, lsr #4]!
     e84:	f0230000 			; <UNDEFINED> instruction: 0xf0230000
     e88:	24000003 	strcs	r0, [r0], #-3
     e8c:	00000820 	andeq	r0, r0, r0, lsr #16
     e90:	00000d34 	andeq	r0, r0, r4, lsr sp
     e94:	00125c25 	andseq	r5, r2, r5, lsr #24
     e98:	000ca600 	andeq	sl, ip, r0, lsl #12
     e9c:	00041800 	andeq	r1, r4, r0, lsl #16
     ea0:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
     ea4:	14381d04 	ldrtne	r1, [r8], #-3332	; 0xfffff2fc
     ea8:	0d1e0000 	ldceq	0, cr0, [lr, #-0]
     eac:	0d2a0000 	stceq	0, cr0, [sl, #-0]
     eb0:	a4010000 	strge	r0, [r1], #-0
     eb4:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
     eb8:	32000012 	andcc	r0, r0, #18
     ebc:	3400000d 	strcc	r0, [r0], #-13
     ec0:	0100000d 	tsteq	r0, sp
     ec4:	250404aa 	strcs	r0, [r4, #-1194]	; 0xfffffb56
     ec8:	000012c0 	andeq	r1, r0, r0, asr #5
     ecc:	00000d4a 	andeq	r0, r0, sl, asr #26
     ed0:	00000430 	andeq	r0, r0, r0, lsr r4
     ed4:	0404bb01 	streq	fp, [r4], #-2817	; 0xfffff4ff
     ed8:	00144325 	andseq	r4, r4, r5, lsr #6
     edc:	000d4a00 	andeq	r4, sp, r0, lsl #20
     ee0:	00045000 	andeq	r5, r4, r0
int main (void) {
     ee4:	04c50100 	strbeq	r0, [r5], #256	; 0x100
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	128e2004 	addne	r2, lr, #4
     eec:	0d520000 	ldcleq	0, cr0, [r2, #-0]
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	04700000 	ldrbteq	r0, [r0], #-0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	c0010000 	andgt	r0, r1, r0
	system_init ();
     ef8:	06510404 	ldrbeq	r0, [r1], -r4, lsl #8
	tcv_init ();
     efc:	9d210000 	stcls	0, cr0, [r1, #-0]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f00:	00000012 	andeq	r0, r0, r2, lsl r0
     f04:	00125c1d 	andseq	r5, r2, sp, lsl ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	000d6200 	andeq	r6, sp, r0, lsl #4
     f0c:	000d6400 	andeq	r6, sp, r0, lsl #8
     f10:	04c30100 	strbeq	r0, [r3], #256	; 0x100
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f14:	142d2504 	strtne	r2, [sp], #-1284	; 0xfffffafc
     f18:	0d660000 	stcleq	0, cr0, [r6, #-0]
	delay (16, 0);
     f1c:	04900000 	ldreq	r0, [r0], #0
     f20:	d5010000 	strle	r0, [r1, #-0]
     f24:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
	__pi_release ();
     f28:	7c000014 	stcvc	0, cr0, [r0], {20}
     f2c:	b000000d 	andlt	r0, r0, sp
     f30:	01000004 	tsteq	r0, r4
     f34:	8e0404cc 	cdphi	4, 0, cr0, cr4, cr12, {6}
     f38:	21000006 	tstcs	r0, r6
     f3c:	0000145d 	andeq	r1, r0, sp, asr r4
     f40:	125c1d00 	subsne	r1, ip, #0, 26
static void killev (__pi_pcb_t *pid) {
     f44:	0da00000 	stceq	0, cr0, [r0]
	wfun = (aword)(pid->code);
     f48:	0da20000 	stceq	0, cr0, [r2]
	for_all_tasks (i) {
     f4c:	df010000 	svcle	0x00010000
		for (j = 0; j < nevents (i); j++) {
     f50:	38250404 	stmdacc	r5!, {r2, sl}
     f54:	c0000014 	andgt	r0, r0, r4, lsl r0
     f58:	c800000d 	stmdagt	r0, {r0, r2, r3}
			    || i->Events [j] . Event == wfun
     f5c:	01000004 	tsteq	r0, r4
		for (j = 0; j < nevents (i); j++) {
     f60:	250404e8 	strcs	r0, [r4, #-1256]	; 0xfffffb18
			if (i->Events [j] . Event == (aword)pid
     f64:	0000127f 	andeq	r1, r0, pc, ror r2
     f68:	00000dc4 	andeq	r0, r0, r4, asr #27
     f6c:	000004e0 	andeq	r0, r0, r0, ror #9
				wakeupev (i, j);
     f70:	0d04ee01 	stceq	14, cr14, [r4, #-4]
     f74:	00128e26 	andseq	r8, r2, r6, lsr #28
	for_all_tasks (i) {
     f78:	000dce00 	andeq	ip, sp, r0, lsl #28
}
     f7c:	000dd200 	andeq	sp, sp, r0, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
static void qfree (aword *ch) {
     f84:	0006dc04 	andeq	sp, r6, r4, lsl #24
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	129d2100 	addsne	r2, sp, #0, 2
	cc = (aword*)(mpools + MA_NP);
     f8c:	25000000 	strcs	r0, [r0, #-0]
	m_setnextp (ch, chunk);
     f90:	00001443 	andeq	r1, r0, r3, asr #8
	m_setnextp (cc, ch);
     f94:	00000df2 	strdeq	r0, [r0], -r2
}
     f98:	000004f8 	strdeq	r0, [r0], -r8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	0404f701 	streq	pc, [r4], #-1793	; 0xfffff8ff
     fa0:	00144e20 	andseq	r4, r4, r0, lsr #28
     fa4:	000df400 	andeq	pc, sp, r0, lsl #8
			m_setnextp (cc, m_nextp (chunk));
     fa8:	00051000 	andeq	r1, r5, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
     fb0:	00070804 	andeq	r0, r7, r4, lsl #16
     fb4:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
     fb8:	1d000000 	stcne	0, cr0, [r0, #-0]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	00000dfc 	strdeq	r0, [r0], -ip
     fc4:	00000e00 	andeq	r0, r0, r0, lsl #28
     fc8:	0404fd01 	streq	pc, [r4], #-3329	; 0xfffff2ff
			m_setnextp (cc, m_nextp (chunk));
     fcc:	00125c1d 	andseq	r5, r2, sp, lsl ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	000e0000 	andeq	r0, lr, r0
     fd4:	000e0200 	andeq	r0, lr, r0, lsl #4
     fd8:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     fdc:	0b952604 	bleq	fe54a7f4 <_estack+0xde5457f4>
     fe0:	0e0a0000 	cdpeq	0, 0, cr0, cr10, cr0, {0}
     fe4:	0e160000 	cdpeq	0, 1, cr0, cr6, cr0, {0}
			if (m_size (chunk) >= m_size (ch))
     fe8:	0d010000 	stceq	0, cr0, [r1, #-0]
     fec:	075c0405 	ldrbeq	r0, [ip, -r5, lsl #8]
     ff0:	11270000 			; <UNDEFINED> instruction: 0x11270000
		chunk = m_nextp (chunk))
     ff4:	0a000013 	beq	1048 <update_n_wake+0x20>
     ff8:	1400000e 	strne	r0, [r0], #-14
     ffc:	0100000e 	tsteq	r0, lr
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
	diag_wait (a);
    1004:	0000132d 	andeq	r1, r0, sp, lsr #6
	diag_wchar (c, a);
    1008:	00132021 	andseq	r2, r3, r1, lsr #32
    100c:	1d000000 	stcne	0, cr0, [r0, #-0]
}
    1010:	0000125c 	andeq	r1, r0, ip, asr r2
    1014:	00000e3e 	andeq	r0, r0, lr, lsr lr
	syserror (ESTATE, "state");
    1018:	00000e40 	andeq	r0, r0, r0, asr #28
    101c:	04053e01 	streq	r3, [r5], #-3585	; 0xfffff1ff
    1020:	0012741d 	andseq	r7, r2, sp, lsl r4
    1024:	000e4000 	andeq	r4, lr, r0
void update_n_wake (word min, Boolean force) {
    1028:	000e5000 	andeq	r5, lr, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	05410100 	strbeq	r0, [r1, #-256]	; 0xffffff00
    1030:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
    1034:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	0e520000 	cdpeq	0, 5, cr0, cr2, cr0, {0}
    103c:	44010000 	strmi	r0, [r1], #-0
    1040:	7f250405 	svcvc	0x00250405
    1044:	52000012 	andpl	r0, r0, #18
    1048:	2800000e 	stmdacs	r0, {r1, r2, r3}
    104c:	01000005 	tsteq	r0, r5
    1050:	250b0547 	strcs	r0, [fp, #-1351]	; 0xfffffab9
    1054:	0000146b 	andeq	r1, r0, fp, ror #8
    1058:	00000e5a 	andeq	r0, r0, sl, asr lr
    105c:	00000540 	andeq	r0, r0, r0, asr #10
    1060:	04054b01 	streq	r4, [r5], #-2817	; 0xfffff4ff
    1064:	ed280000 	stc	0, cr0, [r8, #-0]
    1068:	c0000011 	andgt	r0, r0, r1, lsl r0
		for_all_tasks (i) {
    106c:	c200000c 	andgt	r0, r0, #12
	__pi_mintk = znew + min;
    1070:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    1074:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
			if (!twaiting (i))
    1078:	ee000011 	mcr	0, 0, r0, cr0, cr1, {0}
    107c:	f000000c 			; <UNDEFINED> instruction: 0xf000000c
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
    1084:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
    1088:	74000011 	strvc	r0, [r0], #-17	; 0xffffffef
    108c:	7600000e 	strvc	r0, [r0], -lr
    1090:	0d00000e 	stceq	0, cr0, [r0, #-56]	; 0xffffffc8
    1094:	1a000227 	bne	1938 <ser_inf+0x58>
    1098:	00087401 	andeq	r7, r8, r1, lsl #8
    109c:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0xffffff00
    10a0:	00a70106 	adceq	r0, r7, r6, lsl #2
	...
    10ac:	9c010000 	stcls	0, cr0, [r1], {-0}
				wakeuptm (i);
    10b0:	00000812 	andeq	r0, r0, r2, lsl r8
    10b4:	00637329 	rsbeq	r7, r3, r9, lsr #6
		for_all_tasks (i) {
    10b8:	07055e01 	streq	r5, [r5, -r1, lsl #28]
				d = i->Timer - znew;
    10bc:	000000a7 	andeq	r0, r0, r7, lsr #1
    10c0:	000000ca 	andeq	r0, r0, sl, asr #1
    10c4:	07942a00 	ldreq	r2, [r4, r0, lsl #20]
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    10cc:	2a031404 	bcs	c60e4 <__ccfg+0xa613c>
    10d0:	2b000008 	blcs	10f8 <proceed+0x4>
	__pi_old = znew;
    10d4:	00000a28 	andeq	r0, r0, r8, lsr #20
}
    10d8:	0104ad01 	tsteq	r4, r1, lsl #26
	TCI_RUN_DELAY_TIMER;
    10dc:	38012c00 	stmdacc	r1, {sl, fp, sp}
}
    10e0:	01000007 	tsteq	r0, r7
    10e4:	0106047e 	tsteq	r6, lr, ror r4
	...
    10f0:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
void proceed (word state) {
    10f4:	a82d0000 	stmdage	sp!, {}	; <UNPREDICTABLE>
	prcdstate (__pi_curr, state);
    10f8:	01000002 	tsteq	r0, r2
    10fc:	a719047e 			; <UNDEFINED> instruction: 0xa719047e
	release;
    1100:	dd000000 	stcle	0, cr0, [r0, #-0]
    1104:	00000000 	andeq	r0, r0, r0
void __pi_wait (aword event, word state) {
    1108:	05c1011e 	strbeq	r0, [r1, #286]	; 0x11e
	sint j = nevents (__pi_curr);
    110c:	01010000 	mrseq	r0, (UNDEF: 1)
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	0ad40604 	beq	ff502928 <_estack+0xdf4fd928>
    1114:	0c8c0000 	stceq	0, cr0, [ip], {0}
    1118:	9c010000 	stcls	0, cr0, [r1], {-0}
		syserror (ENEVENTS, "sw");
    111c:	00000a1e 	andeq	r0, r0, lr, lsl sl
    1120:	000bfe2e 	andeq	pc, fp, lr, lsr #28
	setestate (__pi_curr->Events [j], state, event);
    1124:	000c0400 	andeq	r0, ip, r0, lsl #8
	incwait (__pi_curr);
    1128:	00088600 	andeq	r8, r8, r0, lsl #12
	setestate (__pi_curr->Events [j], state, event);
    112c:	00691c00 	rsbeq	r1, r9, r0, lsl #24
}
    1130:	0b046b01 	bleq	11bd3c <__ccfg+0xfbd94>
    1134:	0000008d 	andeq	r0, r0, sp, lsl #1
    1138:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
void __pi_trigger (aword event) {
    113c:	0afe0000 	beq	fff81144 <_estack+0xdff7c144>
	for_all_tasks (i) {
    1140:	02b00000 	adcseq	r0, r0, #0
		for (j = 0; j < nevents (i); j++) {
    1144:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1148:	54200204 	strtpl	r0, [r0], #-516	; 0xfffffdfc
    114c:	0000000f 	andeq	r0, r0, pc
    1150:	d000000b 	andle	r0, r0, fp
			if (i->Events [j] . Event == event) {
    1154:	01000002 	tsteq	r0, r2
    1158:	1a02040b 	bne	8218c <__ccfg+0x621e4>
    115c:	23000009 	movwcs	r0, #9
				wakeupev (i, j);
    1160:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1164:	000f612f 	andeq	r6, pc, pc, lsr #2
	for_all_tasks (i) {
    1168:	0f6d3000 	svceq	0x006d3000
}
    116c:	02d00000 	sbcseq	r0, r0, #0
aword __pi_join (aword pid, word st) {
    1170:	6e310000 	cdpvs	0, 3, cr0, cr1, cr0, {0}
	for_all_tasks (i) {
    1174:	f000000f 			; <UNDEFINED> instruction: 0xf000000f
    1178:	22000000 	andcs	r0, r0, #0
	return 0;
    117c:	000013c9 	andeq	r1, r0, r9, asr #7
		if ((aword)i == pid) {
    1180:	00000b0a 	andeq	r0, r0, sl, lsl #22
			__pi_wait (pid, st);
    1184:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
}
    1188:	e704fa01 	str	pc, [r4, -r1, lsl #20]
	for_all_tasks (i) {
    118c:	21000008 	tstcs	r0, r8
    1190:	000013e5 	andeq	r1, r0, r5, ror #7
void delay (word d, word state) {
    1194:	0013d821 	andseq	sp, r3, r1, lsr #16
	settstate (__pi_curr, state);
    1198:	f3220000 	vhadd.u32	d0, d2, d0
    119c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    11a0:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    11a4:	01000003 	tsteq	r0, r3
	update_n_wake (d, YES);
    11a8:	090104fe 	stmdbeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl}
    11ac:	02210000 	eoreq	r0, r1, #0
	__pi_curr->Timer = __pi_old + d;
    11b0:	00000014 	andeq	r0, r0, r4, lsl r0
    11b4:	00141032 	andseq	r1, r4, r2, lsr r0
	inctimer (__pi_curr);
    11b8:	000b1200 	andeq	r1, fp, r0, lsl #4
    11bc:	00032000 	andeq	r2, r3, r0
    11c0:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
}
    11c4:	00141f21 	andseq	r1, r4, r1, lsr #30
    11c8:	00000000 	andeq	r0, r0, r0
	if (fun == NULL)
    11cc:	14102000 	ldrne	r2, [r0], #-0
		return (int) __pi_curr;
    11d0:	0b520000 	bleq	14811d8 <__ccfg+0x1461230>
    11d4:	03380000 	teqeq	r8, #0
	for_all_tasks (i)
    11d8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
}
    11dc:	09350204 	ldmdbeq	r5!, {r2, r9}
		if (i->code == fun)
    11e0:	1f210000 	svcne	0x00210000
	for_all_tasks (i)
    11e4:	00000014 	andeq	r0, r0, r4, lsl r0
    11e8:	00141020 	andseq	r1, r4, r0, lsr #32
    11ec:	000b5400 	andeq	r5, fp, r0, lsl #8
word crunning (fsmcode fun) {
    11f0:	00035800 	andeq	r5, r3, r0, lsl #16
	for_all_tasks (i)
    11f4:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    11f8:	00095002 	andeq	r5, r9, r2
		if (i->code == fun)
    11fc:	141f2100 	ldrne	r2, [pc], #-256	; 1204 <crunning+0x14>
    1200:	20000000 	andcs	r0, r0, r0
			c++;
    1204:	000013f3 	strdeq	r1, [r0], -r3
	for_all_tasks (i)
    1208:	00000b6e 	andeq	r0, r0, lr, ror #22
    120c:	00000370 	andeq	r0, r0, r0, ror r3
int __pi_strlen (const char *s) {
    1210:	02040e01 	andeq	r0, r4, #1, 28
	for (i = 0; *(s+i) != '\0'; i++);
    1214:	0000096b 	andeq	r0, r0, fp, ror #18
}
    1218:	00140221 	andseq	r0, r4, r1, lsr #4
	for (i = 0; *(s+i) != '\0'; i++);
    121c:	f3260000 	vhadd.u32	d0, d6, d0
	while (n--)
    1220:	74000013 	strvc	r0, [r0], #-19	; 0xffffffed
    1224:	7600000b 	strvc	r0, [r0], -fp
		*dest++ = *src++;
    1228:	0100000b 	tsteq	r0, fp
    122c:	8602040e 	strhi	r0, [r2], -lr, lsl #8
    1230:	21000009 	tstcs	r0, r9
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	00001402 	andeq	r1, r0, r2, lsl #8
		syserror (EREQPAR, "addv");
    1238:	12342000 	eorsne	r2, r4, #0
		syserror (ERESOURCE, "addv");
    123c:	0b860000 	bleq	fe181244 <_estack+0xde17c244>
	if (ioreq [loc] != NULL)
    1240:	03880000 	orreq	r0, r8, #0
    1244:	1b010000 	blne	4124c <__ccfg+0x212a4>
		syserror (ERESOURCE, "addv");
    1248:	09a10204 	stmibeq	r1!, {r2, r9}
	ioreq [loc] = rf;
    124c:	43210000 			; <UNDEFINED> instruction: 0x43210000
}
    1250:	00000012 	andeq	r0, r0, r2, lsl r0
    1254:	000ccb26 	andeq	ip, ip, r6, lsr #22
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	000bb000 	andeq	fp, fp, r0
    125c:	000bda00 	andeq	sp, fp, r0, lsl #20
    1260:	043e0100 	ldrteq	r0, [lr], #-256	; 0xffffff00
    1264:	0009c802 	andeq	ip, r9, r2, lsl #16
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1268:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    126c:	0bce0000 	bleq	ff381274 <_estack+0xdf37c274>
    1270:	03a00000 	moveq	r0, #0
		syserror (ENODEVICE, "io");
    1274:	01010000 	mrseq	r0, (UNDEF: 1)
    1278:	26000203 	strcs	r0, [r0], -r3, lsl #4
	if (len == 0)
    127c:	000012ab 	andeq	r1, r0, fp, lsr #5
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	00000bea 	andeq	r0, r0, sl, ror #23
    1284:	00000bfe 	strdeq	r0, [r0], -lr
	if (ret >= 0)
    1288:	03045101 	movweq	r5, #16641	; 0x4101
	if (ret == -1) {
    128c:	000009ef 	andeq	r0, r0, pc, ror #19
    1290:	0012b61d 	andseq	fp, r2, sp, lsl r6
		if (retry == WNONE)
    1294:	000bea00 	andeq	lr, fp, r0, lsl #20
		iowait (dev, operation, retry);
    1298:	000bee00 	andeq	lr, fp, r0, lsl #28
    129c:	01140b00 	tsteq	r4, r0, lsl #22
    12a0:	95330005 	ldrls	r0, [r3, #-5]!
			release;
    12a4:	0400000b 	streq	r0, [r0], #-11
	if (ret == -2) {
    12a8:	b800000c 	stmdalt	r0, {r2, r3}
		if (retry != WNONE) {
    12ac:	01000003 	tsteq	r0, r3
    12b0:	33020472 	movwcc	r0, #9330	; 0x2472
			iowait (dev, operation, retry);
    12b4:	00001311 	andeq	r1, r0, r1, lsl r3
    12b8:	00000c04 	andeq	r0, r0, r4, lsl #24
			(ioreq [dev]) (NONE, buf, len);
    12bc:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    12c0:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
    12c4:	00132d21 	andseq	r2, r3, r1, lsr #26
		(ioreq [dev]) (NONE, buf, len);
    12c8:	13202100 	nopne	{0}	; <UNPREDICTABLE>
    12cc:	00000000 	andeq	r0, r0, r0
    12d0:	9b012c00 	blls	4c2d8 <__ccfg+0x2c330>
}
    12d4:	01000008 	tsteq	r0, r8
	if (retry != WNONE) {
    12d8:	010603ed 	smlatteq	r6, sp, r3, r0
		delay (-ret - 2, retry);
    12dc:	000009f4 	strdeq	r0, [r0], -r4
    12e0:	00000a30 	andeq	r0, r0, r0, lsr sl
    12e4:	0aa79c01 	beq	fe9e82f0 <_estack+0xde9e32f0>
    12e8:	76340000 	ldrtvc	r0, [r4], -r0
		release;
    12ec:	01006c61 	tsteq	r0, r1, ror #24
    12f0:	8d1c03ed 	ldchi	3, cr0, [ip, #-948]	; 0xfffffc4c
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
    12f8:	00692950 	rsbeq	r2, r9, r0, asr r9
    12fc:	0603ef01 	streq	lr, [r3], -r1, lsl #30
    1300:	0000008d 	andeq	r0, r0, sp, lsl #1
    1304:	0000010e 	andeq	r0, r0, lr, lsl #2
		syserror (ERESOURCE, "mal1");
    1308:	006e6229 	rsbeq	r6, lr, r9, lsr #4
    130c:	0803f001 	stmdaeq	r3, {r0, ip, sp, lr, pc}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1314:	0000012c 	andeq	r0, r0, ip, lsr #2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1318:	0011ed25 	andseq	lr, r1, r5, lsr #26
	m_size (mpools [0]) = mlen - m_hdrlen;
    131c:	0009f400 	andeq	pc, r9, r0, lsl #8
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1320:	00027000 	andeq	r7, r2, r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1324:	03f20100 	mvnseq	r0, #0, 2
    1328:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
}
    132c:	09fa0000 	ldmibeq	sl!, {}^	; <UNPREDICTABLE>
    1330:	02880000 	addeq	r0, r8, #0
    1334:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    1338:	0a950303 	beq	fe541f4c <_estack+0xde53cf4c>
    133c:	bb350000 	bllt	d41344 <__ccfg+0xd2139c>
    1340:	2c000013 	stccs	0, cr0, [r0], {19}
void __pi_free (aword *ch) {
    1344:	00000001 	andeq	r0, r0, r1
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1348:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
    134c:	000a1e00 	andeq	r1, sl, r0, lsl #28
		syserror (EMALLOC, "malg");
    1350:	000a2000 	andeq	r2, sl, r0
    1354:	03f90100 	mvnseq	r0, #0, 2
	mcfree [MA_NP] += m_size (ch);
    1358:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
		m_size (ch) ^= MALLOC_UMASK;
    135c:	0000083f 	andeq	r0, r0, pc, lsr r8
    1360:	0603da01 	streq	sp, [r3], -r1, lsl #20
	mcfree [MA_NP] += m_size (ch);
    1364:	0009b001 	andeq	fp, r9, r1
	QFREE;
    1368:	0009f400 	andeq	pc, r9, r0, lsl #8
	if (mevent [MA_NP] . nwait) {
    136c:	2c9c0100 	ldfcss	f0, [ip], {0}
    1370:	3400000b 	strcc	r0, [r0], #-11
		trigger ((aword)(&(mevent [MA_NP])));
    1374:	006c6176 	rsbeq	r6, ip, r6, ror r1
		mevent [MA_NP] . nwait --;
    1378:	1c03da01 			; <UNDEFINED> instruction: 0x1c03da01
}
    137c:	0000008d 	andeq	r0, r0, sp, lsl #1
    1380:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
    1384:	03dc0100 	bicseq	r0, ip, #0, 2
    1388:	00008d06 	andeq	r8, r0, r6, lsl #26
void kill (aword pid) {
    138c:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
		pid = (aword) __pi_curr;
    1390:	03dd0100 	bicseq	r0, sp, #0, 2
	j = NULL;
    1394:	0000df08 	andeq	sp, r0, r8, lsl #30
	for_all_tasks (i) {
    1398:	00013f00 	andeq	r3, r1, r0, lsl #30
	syserror (EREQPAR, "kpi");
    139c:	11ed2500 	mvnne	r2, r0, lsl #10
    13a0:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
		if ((aword)i == pid) {
    13a4:	02280000 	eoreq	r0, r8, #0
    13a8:	df010000 	svcle	0x00010000
				__PCB = i->Next;
    13ac:	ac200203 	sfmge	f0, 4, [r0], #-12
			killev (i);
    13b0:	b4000013 	strlt	r0, [r0], #-19	; 0xffffffed
			ufree (i);
    13b4:	40000009 	andmi	r0, r0, r9
			if (i == __pi_curr)
    13b8:	01000002 	tsteq	r0, r2
    13bc:	1a0303e2 	bne	c234c <__ccfg+0xa23a4>
				release;
    13c0:	3500000b 	strcc	r0, [r0, #-11]
				j->Next = i->Next;
    13c4:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
    13c8:	00000152 	andeq	r0, r0, r2, asr r1
    13cc:	11f71d00 	mvnsne	r1, r0, lsl #26
}
    13d0:	09e20000 	stmibeq	r2!, {}^	; <UNPREDICTABLE>
    13d4:	09e40000 	stmibeq	r4!, {}^	; <UNPREDICTABLE>
    13d8:	e6010000 	str	r0, [r1], -r0
void killall (fsmcode fun) {
    13dc:	1e000203 	cdpne	2, 0, cr0, cr0, cr3, {0}
	j = NULL;
    13e0:	0008ac01 	andeq	sl, r8, r1, lsl #24
	for (i = __PCB; i != NULL; ) {
    13e4:	03c60100 	biceq	r0, r6, #0, 2
			if (i == __pi_curr)
    13e8:	000a3006 	andeq	r3, sl, r6
	for (i = __PCB; i != NULL; ) {
    13ec:	000ad400 	andeq	sp, sl, r0, lsl #8
	if (rel)
    13f0:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
		release;
    13f4:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
		if (i->code == fun) {
    13f8:	00000a42 	andeq	r0, r0, r2, asr #20
    13fc:	00000a70 	andeq	r0, r0, r0, ror sl
			if (j == NULL)
    1400:	00000b6e 	andeq	r0, r0, lr, ror #22
				__PCB = k;
    1404:	07006a36 	smladxeq	r0, r6, sl, r6
			if (i == __pi_curr)
    1408:	008d0203 	addeq	r0, sp, r3, lsl #4
				rel = YES;
    140c:	01650000 	cmneq	r5, r0
			killev (i);
    1410:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
			ufree (i);
    1414:	02030700 	andeq	r0, r3, #0, 14
			i = k;
    1418:	000003f4 	strdeq	r0, [r0], -r4
    141c:	00000178 	andeq	r0, r0, r8, ror r1
				j->Next = k;
    1420:	0a823700 	beq	fe08f028 <_estack+0xde08a028>
    1424:	0ab00000 	beq	fec0142c <_estack+0xdebfc42c>
}
    1428:	6a360000 	bvs	d81430 <__ccfg+0xd61488>
    142c:	02020800 	andeq	r0, r2, #0, 16
    1430:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (size < 8)
    1434:	0000018b 	andeq	r0, r0, fp, lsl #3
		_size = 2;
    1438:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	03f40202 	mvnseq	r0, #536870912	; 0x20000000
		_size = (((aword)size) + 3) >> 2;
    1440:	019e0000 	orrseq	r0, lr, r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1444:	00000000 	andeq	r0, r0, r0
		_size = (((aword)size) + 3) >> 2;
    1448:	0006c038 	andeq	ip, r6, r8, lsr r0
		if (mevent [MA_NP] . nfail != 255)
    144c:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
    1450:	011e0314 	tsteq	lr, r4, lsl r3
			mevent [MA_NP] . nfail ++;
    1454:	00000a18 	andeq	r0, r0, r8, lsl sl
		mnfree [MA_NP] = 0;
    1458:	06038201 	streq	r8, [r3], -r1, lsl #4
    145c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1460:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    1464:	0c289c01 	stceq	12, cr9, [r8], #-4
			syserror (EMALLOC, "malc");
    1468:	1c2e0000 	stcne	0, cr0, [lr], #-0
    146c:	4a000009 	bmi	1498 <__pi_malloc+0x64>
		if (m_size (chunk) >= _size)
    1470:	e3000009 	movw	r0, #9
    1474:	2900000b 	stmdbcs	r0, {r0, r1, r3}
		chunk = m_nextp (chunk)) {
    1478:	8901006a 	stmdbhi	r1, {r1, r3, r5, r6}
		m_setnextp (cc, m_nextp (chunk));
    147c:	008d0303 	addeq	r0, sp, r3, lsl #6
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1480:	01b10000 			; <UNDEFINED> instruction: 0x01b10000
    1484:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
			m_size (chunk) = _size;
    1488:	03890100 	orreq	r0, r9, #0, 2
			cc = chunk + _size + m_hdrlen;
    148c:	0003f403 	andeq	pc, r3, r3, lsl #8
    1490:	0001c400 	andeq	ip, r1, r0, lsl #8
			m_size (cc) = waste - m_hdrlen;
    1494:	101b0000 	andsne	r0, fp, r0
			QFREE;
    1498:	0b000002 	bleq	14a8 <__pi_malloc+0x74>
		mevent [MA_NP] . nfail = 0;
    149c:	2900000c 	stmdbcs	r0, {r2, r3}
		mcfree [MA_NP] -= m_size (chunk);
    14a0:	8f01006a 	svchi	0x0001006a
    14a4:	008d0303 	addeq	r0, sp, r3, lsl #6
    14a8:	01d70000 	bicseq	r0, r7, r0
    14ac:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
		m_size (chunk) |= MALLOC_UMASK;
    14b0:	038f0100 	orreq	r0, pc, #0, 2
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14b4:	0003f403 	andeq	pc, r3, r3, lsl #8
		m_size (chunk) |= MALLOC_UMASK;
    14b8:	0001ea00 	andeq	lr, r1, r0, lsl #20
			mnfree [MA_NP] = mcfree [MA_NP];
    14bc:	e7330000 	ldr	r0, [r3, -r0]!
}
    14c0:	f0000012 			; <UNDEFINED> instruction: 0xf0000012
    14c4:	f0000008 			; <UNDEFINED> instruction: 0xf0000008
    14c8:	01000001 	tsteq	r0, r1
    14cc:	21020384 	smlabbcs	r2, r4, r3, r0
    14d0:	00001303 	andeq	r1, r0, r3, lsl #6
    14d4:	0012f621 	andseq	pc, r2, r1, lsr #12
    14d8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
aword __pi_fork (fsmcode func, aword data) {
    14dc:	000007c4 	andeq	r0, r0, r4, asr #15
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e0:	0d037d01 	stceq	13, cr7, [r3, #-4]
    14e4:	00049401 	andeq	r9, r4, r1, lsl #8
    14e8:	0004a000 	andeq	sl, r4, r0
		if ((j = __PCB) == NULL)
    14ec:	529c0100 	addspl	r0, ip, #0, 2
	i->Next = NULL;
    14f0:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
	i->data = data;
    14f4:	00000976 	andeq	r0, r0, r6, ror r9
		if ((j = __PCB) == NULL)
    14f8:	1f037d01 	svcne	0x00037d01
}
    14fc:	0000008d 	andeq	r0, r0, sp, lsl #1
			for (; j->Next != NULL; j = j->Next);
    1500:	000001fd 	strdeq	r0, [r0], -sp
    1504:	09483a00 	stmdbeq	r8, {r9, fp, ip, sp}^
	return (aword) i;
    1508:	10010000 	andne	r0, r1, r0
    150c:	8d010c03 	stchi	12, cr0, [r1, #-12]
	if (mevent [MA_NP] . nwait != 255)
    1510:	e0000000 	and	r0, r0, r0
    1514:	f0000007 			; <UNDEFINED> instruction: 0xf0000007
    1518:	01000008 	tsteq	r0, r8
		mevent [MA_NP] . nwait ++;
    151c:	000ccb9c 	muleq	ip, ip, fp
	wait ((aword)(&(mevent [MA_NP])), state);
    1520:	07452d00 	strbeq	r2, [r5, -r0, lsl #26]
    1524:	10010000 	andne	r0, r1, r0
void diag (const char *mess, ...) {
    1528:	008d1e03 	addeq	r1, sp, r3, lsl #28
    152c:	021b0000 	andseq	r0, fp, #0
    1530:	623b0000 	eorsvs	r0, fp, #0
	diag_disable_int (a, is);
    1534:	01006675 	tsteq	r0, r5, ror r6
    1538:	c92f0310 	stmdbgt	pc!, {r4, r8, r9}	; <UNPREDICTABLE>
    153c:	2e000001 	cdpcs	0, 0, cr0, cr0, cr1, {0}
				d = (bc == 16) ? 10000 : 1000000000;
    1540:	3b000002 	blcc	1550 <diag+0x28>
	diag_disable_int (a, is);
    1544:	006e656c 	rsbeq	r6, lr, ip, ror #10
	while (*mess != '\0') {
    1548:	38031001 	stmdacc	r3, {r0, ip}
	dgout ('\r');
    154c:	0000008d 	andeq	r0, r0, sp, lsl #1
	dgout ('\n');
    1550:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1554:	00066c2b 	andeq	r6, r6, fp, lsr #24
    1558:	03180100 	tsteq	r8, #0, 2
	diag_wait (a);
    155c:	076d2b01 	strbeq	r2, [sp, -r1, lsl #22]!
	diag_enable_int (a, is);
    1560:	3d010000 	stccc	0, cr0, [r1, #-0]
    1564:	44270103 	strtmi	r0, [r7], #-259	; 0xfffffefd
}
    1568:	c200000d 	andgt	r0, r0, #13
    156c:	c4000008 	strgt	r0, [r0], #-8
    1570:	01000008 	tsteq	r0, r8
		if (*mess == '%') {
    1574:	21150365 	tstcs	r5, r5, ror #6
    1578:	00000d58 	andeq	r0, r0, r8, asr sp
			if (*mess == 'l') {
    157c:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    1580:	01000008 	tsteq	r0, r8
				mess++;
    1584:	010d02fc 	strdeq	r0, [sp, -ip]
				val = va_arg (ap, lword);
    1588:	00080f3c 	andeq	r0, r8, ip, lsr pc
				bc = 32;
    158c:	02f00100 	rscseq	r0, r0, #0, 2
				bc = 16;
    1590:	0007a80d 	andeq	sl, r7, sp, lsl #16
			switch (*mess) {
    1594:	0007e000 	andeq	lr, r7, r0
    1598:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    159c:	2000000d 	andcs	r0, r0, sp
				dgout ('%');
    15a0:	0000133b 	andeq	r1, r0, fp, lsr r3
    15a4:	000007a8 	andeq	r0, r0, r8, lsr #15
				dgout (*mess);
    15a8:	000001d8 	ldrdeq	r0, [r0], -r8
    15ac:	0202f501 	andeq	pc, r2, #4194304	; 0x400000
			switch (*mess) {
    15b0:	00000d07 	andeq	r0, r0, r7, lsl #26
					v = __pi_hex_enc_table [
    15b4:	00134a21 	andseq	r4, r3, r1, lsr #20
					i += 4;
    15b8:	75260000 	strvc	r0, [r6, #-0]!
					(val >> (bc - i)) & 0xf];
    15bc:	b4000013 	strlt	r0, [r0], #-19	; 0xffffffed
    15c0:	ba000007 	blt	15e4 <diag+0xbc>
					dgout (v);
    15c4:	01000007 	tsteq	r0, r7
    15c8:	2c0202f6 	sfmcs	f0, 4, [r2], {246}	; 0xf6
				while (i < bc) {
    15cc:	2100000d 	tstcs	r0, sp
			mess++;
    15d0:	0000139e 	muleq	r0, lr, r3
					d /= 10;
    15d4:	00139121 	andseq	r9, r3, r1, lsr #2
				if ((val >> (bc - 1)) & 1) {
    15d8:	13842100 	orrne	r2, r4, #0, 2
    15dc:	27000000 	strcs	r0, [r0, -r0]
					dgout ('-');
    15e0:	000012ca 	andeq	r1, r0, sl, asr #5
    15e4:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
						val |= 0xffff0000;
    15e8:	000007c4 	andeq	r0, r0, r4, asr #15
    15ec:	0202f701 	andeq	pc, r2, #262144	; 0x40000
    15f0:	0012d921 	andseq	sp, r2, r1, lsr #18
				d = (bc == 16) ? 10000 : 1000000000;
    15f4:	3d000000 	stccc	0, cr0, [r0, #-0]
    15f8:	00063a01 	andeq	r3, r6, r1, lsl #20
    15fc:	02eb0100 	rsceq	r0, fp, #0, 2
					v = (word) (val / d);
    1600:	00a70106 	adceq	r0, r7, r6, lsl #2
					if (v || d == 1) break;
    1604:	65010000 	strvs	r0, [r1, #-0]
    1608:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
					d /= 10;
    160c:	01006175 	tsteq	r0, r5, ror r1
				d = (bc == 16) ? 10000 : 1000000000;
    1610:	652702eb 	strvs	r0, [r7, #-747]!	; 0xfffffd15
					dgout (v + '0');
    1614:	0000000d 	andeq	r0, r0, sp
    1618:	02260407 	eoreq	r0, r6, #117440512	; 0x7000000
    161c:	011a0000 	tsteq	sl, r0
					d /= 10;
    1620:	000006f3 	strdeq	r0, [r0], -r3
					val = val - (v * d);
    1624:	0902d401 	stmdbeq	r2, {r0, sl, ip, lr, pc}
					if (d == 0) break;
    1628:	00009b01 	andeq	r9, r0, r1, lsl #22
					v = (word) (val / d);
    162c:	00075400 	andeq	r5, r7, r0, lsl #8
    1630:	0007a800 	andeq	sl, r7, r0, lsl #16
				if (bc == 16)
    1634:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
				d = (bc == 16) ? 10000 : 1000000000;
    1638:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
					val &= 0xffff;
    163c:	00000647 	andeq	r0, r0, r7, asr #12
					dgout (*s);
    1640:	2102d401 	tstcs	r2, r1, lsl #8
					s++;
    1644:	000000a7 	andeq	r0, r0, r7, lsr #1
				while (*s != '\0') {
    1648:	0000035c 	andeq	r0, r0, ip, asr r3
    164c:	0061753b 	rsbeq	r7, r1, fp, lsr r5
			dgout (*mess++);
    1650:	2f02d401 	svccs	0x0002d401
    1654:	00000dc1 	andeq	r0, r0, r1, asr #27
    1658:	0000036f 	andeq	r0, r0, pc, ror #6
    165c:	00135833 	andseq	r5, r3, r3, lsr r8
    1660:	00077400 	andeq	r7, r7, r0, lsl #8
}
    1664:	0001c000 	andeq	ip, r1, r0
    while(1)
    1668:	02e60100 	rsceq	r0, r6, #0, 2
{
    166c:	13672102 	cmnne	r7, #-2147483648	; 0x80000000
    SetupTrimDevice();
    1670:	00000000 	andeq	r0, r0, r0
    pui32Src = &_etext;
    1674:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1678:	011a0000 	tsteq	sl, r0
    __asm("    ldr     r0, =_bss\n"
    167c:	00000a3e 	andeq	r0, r0, lr, lsr sl
    1680:	06018a01 	streq	r8, [r1], -r1, lsl #20
    1684:	0000a701 	andeq	sl, r0, r1, lsl #14
    1688:	00070400 	andeq	r0, r7, r0, lsl #8
    168c:	00075400 	andeq	r5, r7, r0, lsl #8
   main();
    1690:	0f9c0100 	svceq	0x009c0100
    FaultISR();
    1694:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
        *pui32Dest++ = *pui32Src++;
    1698:	0000081b 	andeq	r0, r0, fp, lsl r8
    169c:	26018a01 	strcs	r8, [r1], -r1, lsl #20
    16a0:	0000009b 	muleq	r0, fp, r0
    16a4:	00000382 	andeq	r0, r0, r2, lsl #7
    16a8:	0058453f 	subseq	r4, r8, pc, lsr r5
    16ac:	0101a401 	tsteq	r1, r1, lsl #8
    16b0:	000f461d 	andeq	r4, pc, sp, lsl r6	; <UNPREDICTABLE>
    16b4:	00071800 	andeq	r1, r7, r0, lsl #16
static byte get_byte () {
    16b8:	00072200 	andeq	r2, r7, r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16bc:	019c0100 	orrseq	r0, ip, r0, lsl #2
    16c0:	011e001a 	tsteq	lr, sl, lsl r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c4:	000007d1 	ldrdeq	r0, [r0], -r1
    16c8:	06013801 	streq	r3, [r1], -r1, lsl #16
		if (ee_inp)
    16cc:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			b |= 1;
    16d0:	00000704 	andeq	r0, r0, r4, lsl #14
    16d4:	0ec19c01 	cdpeq	12, 12, cr9, cr1, cr1, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16d8:	e6400000 	strb	r0, [r0], -r0
	for (b = 0, i = 0; i < 8; i++) {
    16dc:	01000008 	tsteq	r0, r8
}
    16e0:	df08013a 	svcle	0x0008013a
    16e4:	a0000000 	andge	r0, r0, r0
    16e8:	41000003 	tstmi	r0, r3
static void put_byte (byte b) {
    16ec:	00545545 	subseq	r5, r4, r5, asr #10
    16f0:	01016801 	tsteq	r1, r1, lsl #16
    16f4:	0000063e 	andeq	r0, r0, lr, lsr r6
    16f8:	0001a823 	andeq	sl, r1, r3, lsr #16
		if (b & 0x80)
    16fc:	074f4000 	strbeq	r4, [pc, -r0]
    1700:	47010000 	strmi	r0, [r1, -r0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1704:	009b0b01 	addseq	r0, fp, r1, lsl #22
	for (i = 0; i < 8; i++) {
    1708:	03eb0000 	mvneq	r0, #0
		b <<= 1;
    170c:	10420000 	subne	r0, r2, r0
	for (i = 0; i < 8; i++) {
    1710:	5c000014 	stcpl	0, cr0, [r0], {20}
}
    1714:	64000006 	strvs	r0, [r0], #-6
    1718:	05000006 	streq	r0, [r0, #-6]
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    171c:	0e75060d 	cdpeq	6, 7, cr0, cr5, cr13, {0}
    1720:	1f210000 	svcne	0x00210000
	put_byte (cmd);
    1724:	00000014 	andeq	r0, r0, r4, lsl r0
    1728:	00141042 	andseq	r1, r4, r2, asr #32
}
    172c:	00066800 	andeq	r6, r6, r0, lsl #16
    1730:	00067000 	andeq	r7, r6, r0
static void wwait (word st, word del) {
    1734:	060f0500 	streq	r0, [pc], -r0, lsl #10
    1738:	00000e8f 	andeq	r0, r0, pc, lsl #29
    173c:	00141f21 	andseq	r1, r4, r1, lsr #30
	while (dopen && (rdsr () & 1)) {
    1740:	f3420000 	vhadd.u8	d16, d2, d0
    1744:	b6000013 			; <UNDEFINED> instruction: 0xb6000013
    1748:	be000006 	cdplt	0, 0, cr0, cr0, cr6, {0}
    174c:	05000006 	streq	r0, [r0, #-6]
	put_byte (CMD_RDSR);
    1750:	0ea90617 	mcreq	6, 5, r0, cr9, cr7, {0}
	r = get_byte ();
    1754:	02210000 	eoreq	r0, r1, #0
    1758:	00000014 	andeq	r0, r0, r4, lsl r0
	while (dopen && (rdsr () & 1)) {
    175c:	0013f343 	andseq	pc, r3, r3, asr #6
}
    1760:	0006c200 	andeq	ip, r6, r0, lsl #4
		if (st == WNONE)
    1764:	0006ca00 	andeq	ip, r6, r0, lsl #20
    1768:	06190500 	ldreq	r0, [r9], -r0, lsl #10
			mdelay (1);
    176c:	00140221 	andseq	r0, r4, r1, lsr #4
    1770:	00000000 	andeq	r0, r0, r0
			delay (del, st);
    1774:	0883011e 	stmeq	r3, {r1, r2, r3, r4, r8}
    1778:	2b010000 	blcs	41780 <__ccfg+0x217d8>
			release;
    177c:	05c80601 	strbeq	r0, [r8, #1537]	; 0x601
    1780:	05f00000 	ldrbeq	r0, [r0, #0]!
    1784:	9c010000 	stcls	0, cr0, [r1], {-0}
static void ready () {
    1788:	00000ef1 	strdeq	r0, [r0], -r1
	if (dopen) {
    178c:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
		wwait (WNONE, 1);
    1790:	0005d000 	andeq	sp, r5, r0
    1794:	00019000 	andeq	r9, r1, r0
    1798:	01320100 	teqeq	r2, r0, lsl #2
	dstat = 0;
    179c:	0f38212c 	svceq	0x0038212c
}
    17a0:	00000000 	andeq	r0, r0, r0
    17a4:	07e8011e 			; <UNDEFINED> instruction: 0x07e8011e
    17a8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
	udelay (1);
    17ac:	05880601 	streq	r0, [r8, #1537]	; 0x601
    17b0:	05c80000 	strbeq	r0, [r8]
	udelay (1);
    17b4:	9c010000 	stcls	0, cr0, [r1], {-0}
		dopen = DOPEN_TEMP;
    17b8:	00000f25 	andeq	r0, r0, r5, lsr #30
    17bc:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    17c0:	00059a00 	andeq	r9, r5, r0, lsl #20
    17c4:	00017000 	andeq	r7, r1, r0
static void cclose () {
    17c8:	01250100 			; <UNDEFINED> instruction: 0x01250100
	if (dopen == DOPEN_TEMP) {
    17cc:	0f38352c 	svceq	0x0038352c
    17d0:	042a0000 	strteq	r0, [sl], #-0
		wwait (WNONE, 1);
    17d4:	00000000 	andeq	r0, r0, r0
    17d8:	0008df44 	andeq	sp, r8, r4, asr #30
	cmd_0 (CMD_DP);
    17dc:	01170100 	tsteq	r7, r0, lsl #2
    17e0:	00df0115 	sbcseq	r0, pc, r5, lsl r1	; <UNPREDICTABLE>
		dopen = 0;
    17e4:	46030000 	strmi	r0, [r3], -r0
}
    17e8:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
word ee_open () {
    17ec:	006c6564 	rsbeq	r6, ip, r4, ror #10
	ready ();
    17f0:	22011701 	andcs	r1, r1, #262144	; 0x40000
	dopen = DOPEN_PERM;
    17f4:	000000a7 	andeq	r0, r0, r7, lsr #1
    17f8:	055c4500 	ldrbeq	r4, [ip, #-1280]	; 0xfffffb00
}
    17fc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
	if (dopen) {
    1800:	00a71401 	adceq	r1, r7, r1, lsl #8
    1804:	46030000 	strmi	r0, [r3], -r0
		dopen = DOPEN_TEMP;
    1808:	00000a32 	andeq	r0, r0, r2, lsr sl
		cclose ();
    180c:	0314ee01 	tsteq	r4, #1, 28
}
    1810:	00000f7a 	andeq	r0, r0, sl, ror pc
int ser_in (word st, char *buf, int len) {
    1814:	6e697047 	cdpvs	0, 6, cr7, cr9, cr7, {2}
    1818:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
	if (len == 0)
    181c:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (__inpline == NULL) {
    1820:	00694748 	rsbeq	r4, r9, r8, asr #14
		if ((prcs = running (__inserial)) == 0) {
    1824:	8d0bf401 	cfstrshi	mvf15, [fp, #-4]
    1828:	00000000 	andeq	r0, r0, r0
			prcs = runthread (__inserial);
    182c:	68014900 	stmdavs	r1, {r8, fp, lr}
    1830:	01000009 	tsteq	r0, r9
			if (prcs == 0) {
    1834:	34010698 	strcc	r0, [r1], #-1688	; 0xfffff968
				npwait (st);
    1838:	88000005 	stmdahi	r0, {r0, r2}
		release;
    183c:	01000005 	tsteq	r0, r5
		join (prcs, st);
    1840:	0010249c 	mulseq	r0, ip, r4
    1844:	63654a00 	cmnvs	r5, #0, 20
	if (*__inpline == NULL) // bin cmd
    1848:	1a980100 	bne	fe601c50 <_estack+0xde5fcc50>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    184c:	000000a7 	andeq	r0, r0, r7, lsr #1
	if (prcs >= len)
    1850:	0000043d 	andeq	r0, r0, sp, lsr r4
		prcs = len-1;
    1854:	01006d4a 	tsteq	r0, sl, asr #26
	memcpy (buf, __inpline, prcs);
    1858:	10242a98 	mlane	r4, r8, sl, r2
    185c:	04500000 	ldrbeq	r0, [r0], #-0
    1860:	ed280000 	stc	0, cr0, [r8, #-0]
	ufree (__inpline);
    1864:	40000011 	andmi	r0, r0, r1, lsl r0
	__inpline = NULL;
    1868:	42000005 	andmi	r0, r0, #5
	if (*buf) // if it's NULL, it's a bin cmd
    186c:	01000005 	tsteq	r0, r5
		buf [prcs] = '\0';
    1870:	102202a8 	eorne	r0, r2, r8, lsr #5
}
    1874:	42000014 	andmi	r0, r0, #20
		prcs = strlen (__inpline);
    1878:	20000005 	andcs	r0, r0, r5
    187c:	01000001 	tsteq	r0, r1
		return 0;
    1880:	0fd903b8 	svceq	0x00d903b8
    1884:	1f210000 	svcne	0x00210000
    1888:	00000014 	andeq	r0, r0, r4, lsl r0
int ser_outf (word st, const char *m, ...) {
    188c:	00141022 	andseq	r1, r4, r2, lsr #32
    1890:	00054800 	andeq	r4, r5, r0, lsl #16
	if ((prcs = running (__outserial)) != 0) {
    1894:	00014000 	andeq	r4, r1, r0
    1898:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
		join (prcs, st);
    189c:	00000ff3 	strdeq	r0, [r0], -r3
    18a0:	00141f21 	andseq	r1, r4, r1, lsr #30
		release;
    18a4:	f3220000 	vhadd.u32	d0, d2, d0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18a8:	60000013 	andvs	r0, r0, r3, lsl r0
    18ac:	58000005 	stmdapl	r0, {r0, r2}
    18b0:	01000001 	tsteq	r0, r1
		umwait (st);
    18b4:	100d03b8 			; <UNDEFINED> instruction: 0x100d03b8
    18b8:	02210000 	eoreq	r0, r1, #0
	if (runstrand (__outserial, buf) == 0) {
    18bc:	00000014 	andeq	r0, r0, r4, lsl r0
    18c0:	0013f343 	andseq	pc, r3, r3, asr #6
    18c4:	00056600 	andeq	r6, r5, r0, lsl #12
		ufree (buf);
    18c8:	00056800 	andeq	r6, r5, r0, lsl #16
		npwait (st);
    18cc:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
}
    18d0:	00140221 	andseq	r0, r4, r1, lsr #4
    18d4:	07000000 	streq	r0, [r0, -r0]
    18d8:	0001d604 	andeq	sp, r1, r4, lsl #12
    18dc:	0e014900 	vmlaeq.f16	s8, s2, s0	; <UNPREDICTABLE>
int ser_inf (word st, const char *fmt, ...) {
    18e0:	01000009 	tsteq	r0, r9
    18e4:	00010672 	andeq	r0, r1, r2, ror r6
	if (fmt == NULL)
    18e8:	00000000 	andeq	r0, r0, r0
	if (__inpline == NULL) {
    18ec:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((prcs = running (__inserial)) == 0) {
    18f0:	0010ca9c 	mulseq	r0, ip, sl
    18f4:	74734a00 	ldrbtvc	r4, [r3], #-2560	; 0xfffff600
			prcs = runthread (__inserial);
    18f8:	18720100 	ldmdane	r2!, {r8}^
    18fc:	000000a7 	andeq	r0, r0, r7, lsr #1
			if (prcs == 0) {
    1900:	0000046e 	andeq	r0, r0, lr, ror #8
				npwait (st);
    1904:	6e65734a 	cdpvs	3, 6, cr7, cr5, cr10, {2}
		release;
    1908:	28720100 	ldmdacs	r2!, {r8}^
		join (prcs, st);
    190c:	00000244 	andeq	r0, r0, r4, asr #4
    1910:	00000481 	andeq	r0, r0, r1, lsl #9
	va_start (ap, fmt);
    1914:	6c61764a 	stclvs	6, cr7, [r1], #-296	; 0xfffffed8
	prcs = vscan (__inpline, fmt, ap);
    1918:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
    191c:	000000fc 	strdeq	r0, [r0], -ip
	ufree (__inpline);
    1920:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
	__inpline = NULL;
    1924:	0005774b 	andeq	r7, r5, fp, asr #14
}
    1928:	0e740100 	rpweqs	f0, f4, f0
    192c:	000000c9 	andeq	r0, r0, r9, asr #1
    1930:	00000305 	andeq	r0, r0, r5, lsl #6
		return 0;
    1934:	554c0000 	strbpl	r0, [ip, #-0]
    1938:	0100000a 	tsteq	r0, sl
    193c:	00000178 	andeq	r0, r0, r8, ror r1
strand (__outserial, const char*)
    1940:	204d0000 	subcs	r0, sp, r0
    1944:	00000012 	andeq	r0, r0, r2, lsl r0
    1948:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    194c:	01000005 	tsteq	r0, r5
endstrand
    1950:	01420381 	smlalbbeq	r0, r2, r1, r3
    1954:	00000012 	andeq	r0, r0, r2, lsl r0
	ptr = data;
    1958:	00000000 	andeq	r0, r0, r0
    195c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*ptr)
    1960:	10b9127e 	adcsne	r1, r9, lr, ror r2
		len = strlen (ptr);
    1964:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
    1968:	00000012 	andeq	r0, r0, r2, lsl r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    196c:	00122a28 	andseq	r2, r2, r8, lsr #20
	...
    1978:	03840100 	orreq	r0, r4, #0, 2
    197c:	fc014e00 	stc2	14, cr4, [r1], {-0}
	len -= quant;
    1980:	01000009 	tsteq	r0, r9
    1984:	00010662 	andeq	r0, r1, r2, ror #12
    1988:	00000000 	andeq	r0, r0, r0
	if (len == 0) {
    198c:	01000000 	mrseq	r0, (UNDEF: 0)
		ufree (data);
    1990:	1601499c 			; <UNDEFINED> instruction: 0x1601499c
		finish;
    1994:	01000005 	tsteq	r0, r5
    1998:	0001064f 	andeq	r0, r1, pc, asr #12
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    199c:	00000000 	andeq	r0, r0, r0
    19a0:	01000000 	mrseq	r0, (UNDEF: 0)
    19a4:	0011079c 	mulseq	r1, ip, r7
    19a8:	12512800 	subsne	r2, r1, #0, 16
	...
strand (__inserial, address)
    19b4:	5f010000 	svcpl	0x00010000
    19b8:	01490003 	cmpeq	r9, r3
    19bc:	0000054d 	andeq	r0, r0, sp, asr #10
    19c0:	01063b01 	tsteq	r6, r1, lsl #22
	...
		finish;
    19cc:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    19d0:	644a0000 	strbvs	r0, [sl], #-0
    19d4:	1c3b0100 	ldfnes	f0, [fp], #-0
    19d8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    19dc:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
		umwait (IM_INIT);
    19e0:	0d014900 	vstreq.16	s8, [r1, #-0]	; <UNPREDICTABLE>
		release;
    19e4:	01000006 	tsteq	r0, r6
	savedata (data);
    19e8:	f801062b 			; <UNDEFINED> instruction: 0xf801062b
	len = MAX_LINE_LENGTH;
    19ec:	34000004 	strcc	r0, [r0], #-4
	io (IM_READ, __cport, READ, ptr, 1);
    19f0:	01000005 	tsteq	r0, r5
    19f4:	0011559c 	mulseq	r1, ip, r5
    19f8:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    19fc:	df1b2b01 	svcle	0x001b2b01
	if (ptr == (char*) data) { // new line
    1a00:	db000000 	blle	1a08 <__inserial+0x58>
    1a04:	00000004 	andeq	r0, r0, r4
		if (*ptr == '\0') { // bin cmd
    1a08:	08500149 	ldmdaeq	r0, {r0, r3, r6, r8}^
			proceed (IM_BIN);
    1a0c:	20010000 	andcs	r0, r1, r0
    1a10:	04cc0106 	strbeq	r0, [ip], #262	; 0x106
		if (*ptr < 0x20)
    1a14:	04f60000 	ldrbteq	r0, [r6], #0
    1a18:	9c010000 	stcls	0, cr0, [r1], {-0}
			proceed (IM_READ);
    1a1c:	0000117c 	andeq	r1, r0, ip, ror r1
    1a20:	01006e4a 	tsteq	r0, sl, asr #28
	if (*ptr == '\n' || *ptr == '\r') {
    1a24:	00b81c20 	adcseq	r1, r8, r0, lsr #24
    1a28:	04f90000 	ldrbteq	r0, [r9], #0
    1a2c:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
		*ptr = '\0';
    1a30:	0008ed01 	andeq	lr, r8, r1, lsl #26
		__inpline = (char*)data;
    1a34:	06190100 	ldreq	r0, [r9], -r0, lsl #2
		finish;
    1a38:	0004a001 	andeq	sl, r4, r1
	if (len) {
    1a3c:	0004cc00 	andeq	ip, r4, r0, lsl #24
		ptr++;
    1a40:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
    1a44:	4f000011 	svcmi	0x00000011
		len--;
    1a48:	1901006e 	stmdbne	r1, {r1, r2, r3, r5, r6}
	proceed (IM_READ);
    1a4c:	0000b81c 	andeq	fp, r0, ip, lsl r8
	io (IM_BIN, __cport, READ, ptr, 1);
    1a50:	43500100 	cmpmi	r0, #0, 2
    1a54:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
    1a58:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    1a5c:	000004be 			; <UNDEFINED> instruction: 0x000004be
    1a60:	21031b01 	tstcs	r3, r1, lsl #22
	len -= 2;
    1a64:	000011c5 	andeq	r1, r0, r5, asr #3
	if (len > *ptr + 1) // 1 for 0x04
    1a68:	10500000 	subsne	r0, r0, r0
    1a6c:	0100000a 	tsteq	r0, sl
		len = *ptr + 1;
    1a70:	03011415 	movweq	r1, #5141	; 0x1415
    1a74:	000011d0 	ldrdeq	r1, [r0], -r0
	ptr++;
    1a78:	01006e51 	tsteq	r0, r1, asr lr
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a7c:	00b82b15 	adcseq	r2, r8, r5, lsl fp
    1a80:	52000000 	andpl	r0, r0, #0
    1a84:	000005f9 	strdeq	r0, [r0], -r9
    1a88:	35011a03 	strcc	r1, [r1, #-2563]	; 0xfffff5fd
    1a8c:	11ed0301 	mvnne	r0, r1, lsl #6
    1a90:	01530000 	cmpeq	r3, r0
	len -= quant;
    1a94:	0300000a 	movweq	r0, #10
		__inpline = (char*)data;
    1a98:	7348011a 	movtvc	r0, #33050	; 0x811a
		finish;
    1a9c:	00000000 	andeq	r0, r0, r0
	ptr += quant;
    1aa0:	00085754 	andeq	r5, r8, r4, asr r7
    1aa4:	355b0300 	ldrbcc	r0, [fp, #-768]	; 0xfffffd00
endstrand
    1aa8:	6a540301 	bvs	15026b4 <__ccfg+0x14e270c>
    1aac:	03000005 	movweq	r0, #5
	proceed (IM_BINL);
    1ab0:	03013550 	movweq	r3, #5456	; 0x1550
endstrand
    1ab4:	00092d55 	andeq	r2, r9, r5, asr sp
    1ab8:	01bf0f00 			; <UNDEFINED> instruction: 0x01bf0f00
    1abc:	00007301 	andeq	r7, r0, r1, lsl #6
    1ac0:	12200300 	eorne	r0, r0, #0, 6
    1ac4:	b4160000 	ldrlt	r0, [r6], #-0
    1ac8:	0f000009 	svceq	0x00000009
		if (res && (d < n))
    1acc:	00730ec1 	rsbseq	r0, r3, r1, asr #29
    1ad0:	54000000 	strpl	r0, [r0], #-0
    1ad4:	000008f4 	strdeq	r0, [r0], -r4
    1ad8:	0101900f 	tsteq	r1, pc
			res [d] = (char) c;
    1adc:	05345403 	ldreq	r5, [r4, #-1027]!	; 0xfffffbfd
		d++;
    1ae0:	7b0f0000 	blvc	3c1ae8 <__ccfg+0x3a1b40>
    1ae4:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    1ae8:	000007a7 	andeq	r0, r0, r7, lsr #15
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1aec:	0103660a 	tsteq	r3, sl, lsl #12
    1af0:	12510301 	subsne	r0, r1, #67108864	; 0x4000000
    1af4:	7e530000 	cdpvc	0, 5, cr0, cr3, cr0, {0}
				enci (10000);
    1af8:	0a000007 	beq	1b1c <__pi_vfparse+0x30>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1afc:	731f0366 	tstvc	pc, #-1744830463	; 0x98000001
    1b00:	00000000 	andeq	r0, r0, r0
	d = 0;
    1b04:	0008cc56 	andeq	ip, r8, r6, asr ip
		c = *fm++;
    1b08:	014c0200 	mrseq	r0, (UNDEF: 108)
		if (c == '\\') {
    1b0c:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
			if ((c = *fm++) == '\0') {
    1b10:	00000865 	andeq	r0, r0, r5, ror #16
    1b14:	0101c402 	tsteq	r1, r2, lsl #8
				outc ('\\');
    1b18:	06805703 	streq	r5, [r0], r3, lsl #14
			if ((c = *fm++) == '\0') {
    1b1c:	ad020000 	stcge	0, cr0, [r2, #-0]
				outc ('\\');
    1b20:	00730101 	rsbseq	r0, r3, r1, lsl #2
    1b24:	56030000 	strpl	r0, [r3], -r0
			outc (c);
    1b28:	000005cd 	andeq	r0, r0, sp, asr #11
    1b2c:	0102450e 	tsteq	r2, lr, lsl #10
			if (c == '\0')
    1b30:	9f580301 	svcls	0x00580301
    1b34:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
			outc (c);
    1b38:	0101022c 	tsteq	r1, ip, lsr #4
				outc (val);
    1b3c:	00000073 	andeq	r0, r0, r3, ror r0
				val = (word) va_arg (ap, aword);
    1b40:	058a5203 	streq	r5, [sl, #515]	; 0x203
		if (c == '%') {
    1b44:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    1b48:	03010101 	movweq	r0, #4353	; 0x1101
			c = *fm++;
    1b4c:	000012ab 	andeq	r1, r0, fp, lsr #5
			switch (c) {
    1b50:	00054453 	andeq	r4, r5, r3, asr r4
    1b54:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
    1b58:	0000731f 	andeq	r7, r0, pc, lsl r3
    1b5c:	05560000 	ldrbeq	r0, [r6, #-0]
    1b60:	0b000007 	bleq	1b84 <__pi_vfparse+0x98>
    1b64:	0101010f 	tsteq	r1, pc, lsl #2
    1b68:	064c5403 	strbeq	r5, [ip], -r3, lsl #8
    1b6c:	ed0c0000 	stc	0, cr0, [ip, #-0]
				outc ('%');
    1b70:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    1b74:	0000091a 	andeq	r0, r0, sl, lsl r9
				outc (c);
    1b78:	0101d60c 	tsteq	r1, ip, lsl #12
    1b7c:	061b5203 	ldreq	r5, [fp], -r3, lsl #4
    1b80:	40060000 	andmi	r0, r6, r0
				if (c == '\0')
    1b84:	03010104 	movweq	r0, #4356	; 0x1104
				return d;
    1b88:	000012e7 	andeq	r1, r0, r7, ror #5
}
    1b8c:	00078b53 	andeq	r8, r7, r3, asr fp
    1b90:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
			switch (c) {
    1b94:	00007324 	andeq	r7, r0, r4, lsr #6
    1b98:	b4520000 	ldrblt	r0, [r2], #-0
    1b9c:	06000005 	streq	r0, [r0], -r5
				for (i = 12; ; i -= 4) {
    1ba0:	01010391 			; <UNDEFINED> instruction: 0x01010391
				val = (word) va_arg (ap, aword);
    1ba4:	00131103 	andseq	r1, r3, r3, lsl #2
						[ (val >> i) & 0xf ]);
    1ba8:	078b5300 	streq	r5, [fp, r0, lsl #6]
    1bac:	91060000 	mrsls	r0, (UNDEF: 6)
    1bb0:	00731703 	rsbseq	r1, r3, r3, lsl #14
					outc (__pi_hex_enc_table
    1bb4:	e6530000 	ldrb	r0, [r3], -r0
    1bb8:	06000006 	streq	r0, [r0], -r6
					if (i == 0)
    1bbc:	732a0391 			; <UNDEFINED> instruction: 0x732a0391
    1bc0:	00000000 	andeq	r0, r0, r0
				for (i = 12; ; i -= 4) {
    1bc4:	0009c752 	andeq	ip, r9, r2, asr r7
				val = (word) va_arg (ap, aword);
    1bc8:	030c0600 	movweq	r0, #50688	; 0xc600
				if (c == 'd' && (val & 0x8000) != 0) {
    1bcc:	3b030101 	blcc	c1fd8 <__ccfg+0xa2030>
				val = (word) va_arg (ap, aword);
    1bd0:	53000013 	movwpl	r0, #19
				if (c == 'd' && (val & 0x8000) != 0) {
    1bd4:	0000078b 	andeq	r0, r0, fp, lsl #15
    1bd8:	18030c06 	stmdane	r3, {r1, r2, sl, fp}
					outc ('-');
    1bdc:	00000073 	andeq	r0, r0, r3, ror r0
    1be0:	0006e653 	andeq	lr, r6, r3, asr r6
					val = (~val) + 1;
    1be4:	030c0600 	movweq	r0, #50688	; 0xc600
    1be8:	0000732b 	andeq	r7, r0, fp, lsr #6
				for (i = 12; ; i -= 4) {
    1bec:	d7520000 	ldrble	r0, [r2, -r0]
				enci (10000);
    1bf0:	06000006 	streq	r0, [r0], -r6
    1bf4:	010101e7 	smlatteq	r1, r7, r1, r0
    1bf8:	00135803 	andseq	r5, r3, r3, lsl #16
    1bfc:	078b5300 	streq	r5, [fp, r0, lsl #6]
    1c00:	e7060000 	str	r0, [r6, -r0]
    1c04:	00731901 	rsbseq	r1, r3, r1, lsl #18
    1c08:	52000000 	andpl	r0, r0, #0
    1c0c:	00000821 	andeq	r0, r0, r1, lsr #16
    1c10:	0101ba06 	tsteq	r1, r6, lsl #20
    1c14:	13750301 	cmnne	r5, #67108864	; 0x4000000
    1c18:	8b530000 	blhi	14c1c20 <__ccfg+0x14a1c78>
    1c1c:	06000007 	streq	r0, [r0], -r7
    1c20:	731501ba 	tstvc	r5, #-2147483602	; 0x8000002e
    1c24:	00000000 	andeq	r0, r0, r0
    1c28:	0008bb52 	andeq	fp, r8, r2, asr fp
    1c2c:	01390600 	teqeq	r9, r0, lsl #12
    1c30:	ac030101 	stfges	f0, [r3], {1}
    1c34:	53000013 	movwpl	r0, #19
				if (c == 'd' || c == 'u') {
    1c38:	0000078b 	andeq	r0, r0, fp, lsl #15
    1c3c:	1b013906 	blne	5005c <__ccfg+0x300b4>
					if (c == 'd' &&
    1c40:	00000073 	andeq	r0, r0, r3, ror r0
					val = va_arg (ap, lword);
    1c44:	00067453 	andeq	r7, r6, r3, asr r4
					fm++;
    1c48:	01390600 	teqeq	r9, r0, lsl #12
					if (c == 'd' &&
    1c4c:	0000732e 	andeq	r7, r0, lr, lsr #6
    1c50:	06605300 	strbteq	r5, [r0], -r0, lsl #6
						outc ('-');
    1c54:	3a060000 	bcc	181c5c <__ccfg+0x161cb4>
    1c58:	00731b01 	rsbseq	r1, r3, r1, lsl #22
						val = (~val) + 1;
    1c5c:	52000000 	andpl	r0, r0, #0
				enci (10000);
    1c60:	0000082c 	andeq	r0, r0, ip, lsr #16
					enci (1000000000UL);
    1c64:	01028404 	tsteq	r2, r4, lsl #8
    1c68:	13c90301 	bicne	r0, r9, #67108864	; 0x4000000
    1c6c:	4d530000 	ldclmi	0, cr0, [r3, #-0]
    1c70:	04000001 	streq	r0, [r0], #-1
    1c74:	731e0284 	tstvc	lr, #132, 4	; 0x40000008
    1c78:	00000000 	andeq	r0, r0, r0
    1c7c:	00051c52 	andeq	r1, r5, r2, asr ip
    1c80:	02060400 	andeq	r0, r6, #0, 8
    1c84:	f3030101 	vrhadd.u8	d0, d3, d1
    1c88:	53000013 	movwpl	r0, #19
    1c8c:	0000014d 	andeq	r0, r0, sp, asr #2
    1c90:	23020604 	movwcs	r0, #9732	; 0x2604
    1c94:	00000073 	andeq	r0, r0, r3, ror r0
    1c98:	0009ea53 	andeq	lr, r9, r3, asr sl
    1c9c:	02060400 	andeq	r0, r6, #0, 8
    1ca0:	00007337 	andeq	r7, r0, r7, lsr r3
    1ca4:	c4520000 	ldrbgt	r0, [r2], #-0
				} else if (c == 'x') {
    1ca8:	04000004 	streq	r0, [r0], #-4
					for (i = 28; ; i -= 4) {
    1cac:	01010154 	tsteq	r1, r4, asr r1
					val = va_arg (ap, lword);
    1cb0:	00141003 	andseq	r1, r4, r3
							[ (val >> i) & 0xf ]);
    1cb4:	014d5300 	mrseq	r5, (UNDEF: 125)
    1cb8:	54040000 	strpl	r0, [r4], #-0
						outc (__pi_hex_enc_table
    1cbc:	00731901 	rsbseq	r1, r3, r1, lsl #18
    1cc0:	52000000 	andpl	r0, r0, #0
    1cc4:	00000025 	andeq	r0, r0, r5, lsr #32
						if (i == 0)
    1cc8:	01011e04 	tsteq	r1, r4, lsl #28
    1ccc:	142d0301 	strtne	r0, [sp], #-769	; 0xfffffcff
					for (i = 28; ; i -= 4) {
    1cd0:	4d530000 	ldclmi	0, cr0, [r3, #-0]
					outc ('%');
    1cd4:	04000001 	streq	r0, [r0], #-1
    1cd8:	7317011e 	tstvc	r7, #-2147483641	; 0x80000007
    1cdc:	00000000 	andeq	r0, r0, r0
					outc ('l');
    1ce0:	00071e56 	andeq	r1, r7, r6, asr lr
    1ce4:	04630900 	strbteq	r0, [r3], #-2304	; 0xfffff700
				val = (word) va_arg (ap, aword);
    1ce8:	56030101 	strpl	r0, [r3], -r1, lsl #2
				outc (val);
    1cec:	00000690 	muleq	r0, r0, r6
    1cf0:	01045409 	tsteq	r4, r9, lsl #8
				while (*st != '\0') {
    1cf4:	a9560301 	ldmdbge	r6, {r0, r8, r9}^
    1cf8:	09000006 	stmdbeq	r0, {r1, r2}
    1cfc:	0101022a 	tsteq	r1, sl, lsr #4
    1d00:	09d55203 	ldmibeq	r5, {r0, r1, r9, ip, lr}^
					outc (*st);
    1d04:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    1d08:	03010101 	movweq	r0, #4353	; 0x1101
					st++;
    1d0c:	0000146b 	andeq	r1, r0, fp, ror #8
		c = *fm++;
    1d10:	0006b553 	andeq	fp, r6, r3, asr r5
    1d14:	01680900 	cmneq	r8, r0, lsl #18
    1d18:	0000731f 	andeq	r7, r0, pc, lsl r3
char *vform (char *res, const char *fm, va_list aq) {
    1d1c:	e9560000 	ldmdb	r6, {}^	; <UNPREDICTABLE>
    1d20:	09000005 	stmdbeq	r0, {r0, r2}
	if (res != NULL) {
    1d24:	01010132 	tsteq	r1, r2, lsr r1
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1d28:	0d445903 	vstreq.16	s11, [r4, #-6]	; <UNPREDICTABLE>
	...
}
    1d34:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d38:	000d5835 	andeq	r5, sp, r5, lsr r8
	fml = strlen (fm) + 17;
    1d3c:	00050c00 	andeq	r0, r5, r0, lsl #24
    1d40:	1f000000 	svcne	0x00000000
    1d44:	03000012 	movweq	r0, #18
	if ((res = (char*) umalloc (fml)) == NULL)
    1d48:	00085900 	andeq	r5, r8, r0, lsl #18
    1d4c:	57010400 	strpl	r0, [r1, -r0, lsl #8]
    1d50:	0c000001 	stceq	0, cr0, [r0], {1}
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1d54:	00000ae0 	andeq	r0, r0, r0, ror #21
    1d58:	000003a8 	andeq	r0, r0, r8, lsr #7
    1d5c:	00000700 	andeq	r0, r0, r0, lsl #14
    1d60:	00000000 	andeq	r0, r0, r0
		ufree (res);
    1d64:	00001b2d 	andeq	r1, r0, sp, lsr #22
		goto Again;
    1d68:	9c060102 	stflss	f0, [r6], {2}
	if (buf == NULL || fmt == NULL)
    1d6c:	02000003 	andeq	r0, r0, #3
int vscan (const char *buf, const char *fmt, va_list ap) {
    1d70:	03f80502 	mvnseq	r0, #8388608	; 0x800000
	if (buf == NULL || fmt == NULL)
    1d74:	9d030000 	stcls	0, cr0, [r3, #-0]
    1d78:	03000016 	movweq	r0, #22
    1d7c:	003f1828 	eorseq	r1, pc, r8, lsr #16
		    	    case 'u': scanu (lword); break;
    1d80:	04020000 	streq	r0, [r2], #-0
			while (isspace (*buf)) buf++;
    1d84:	0000b005 	andeq	fp, r0, r5
    1d88:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
	while (*fmt != '\0') {
    1d8c:	000000ab 	andeq	r0, r0, fp, lsr #1
		if (*fmt++ != '%')
    1d90:	00225103 	eoreq	r5, r2, r3, lsl #2
		switch (*fmt++) {
    1d94:	182e0300 	stmdane	lr!, {r8, r9}
    1d98:	00000059 	andeq	r0, r0, r9, asr r0
    1d9c:	9a080102 	bls	2021ac <__ccfg+0x1e2204>
    1da0:	03000003 	movweq	r0, #3
    1da4:	0000213f 	andeq	r2, r0, pc, lsr r1
    1da8:	6c193103 	ldfvss	f3, [r9], {3}
    1dac:	02000000 	andeq	r0, r0, #0
}
    1db0:	02580702 	subseq	r0, r8, #524288	; 0x80000
		switch (*fmt++) {
    1db4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    1db8:	03000018 	movweq	r0, #24
    1dbc:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    1dc0:	04020000 	streq	r0, [r2], #-0
			while (isspace (*buf)) buf++;
    1dc4:	00008507 	andeq	r8, r0, r7, lsl #10
    1dc8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1dcc:	00000080 	andeq	r0, r0, r0, lsl #1
    1dd0:	69050404 	stmdbvs	r5, {r2, sl}
    1dd4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1dd8:	008a0704 	addeq	r0, sl, r4, lsl #14
			if (*buf == '\0')
    1ddc:	9b030000 	blls	c1de4 <__ccfg+0xa1e3c>
			if (*buf != ',') {
    1de0:	0400000b 	streq	r0, [r0], #-11
			sap = va_arg (ap, char*);
    1de4:	00a71b28 	adceq	r1, r7, r8, lsr #22
			nc++;
    1de8:	b1050000 	mrslt	r0, (UNDEF: 5)
			if (*buf != ',') {
    1dec:	0400000a 	streq	r0, [r0], #-10
				while (!isspace (*buf) && *buf != ',' &&
    1df0:	00bf000b 	adcseq	r0, pc, fp
    1df4:	51060000 	mrspl	r0, (UNDEF: 6)
    1df8:	bf00000c 	svclt	0x0000000c
    1dfc:	00000000 	andeq	r0, r0, r0
    1e00:	04070001 	streq	r0, [r7], #-1
    1e04:	000ab303 	andeq	fp, sl, r3, lsl #6
    1e08:	18630400 	stmdane	r3!, {sl}^
			while (isspace (*buf)) buf++;
    1e0c:	0000009b 	muleq	r0, fp, r0
    1e10:	00042303 	andeq	r2, r4, r3, lsl #6
    1e14:	12260500 	eorne	r0, r6, #0, 10
    1e18:	0000004d 	andeq	r0, r0, sp, asr #32
    1e1c:	00161503 	andseq	r1, r6, r3, lsl #10
			if (*buf == ',') buf++;
    1e20:	12270500 	eorne	r0, r7, #0, 10
    1e24:	00000060 	andeq	r0, r0, r0, rrx
			*sap = '\0';
    1e28:	0000d908 	andeq	sp, r0, r8, lsl #18
			break;
    1e2c:	00d90900 	sbcseq	r0, r9, r0, lsl #18
		    case 'd': scani (word); break;
    1e30:	91030000 	mrsls	r0, (UNDEF: 3)
    1e34:	05000004 	streq	r0, [r0, #-4]
    1e38:	00331228 	eorseq	r1, r3, r8, lsr #4
    1e3c:	0d030000 	stceq	0, cr0, [r3, #-0]
    1e40:	05000014 	streq	r0, [r0, #-20]	; 0xffffffec
    1e44:	004d122b 	subeq	r1, sp, fp, lsr #4
    1e48:	fb090000 	blx	241e52 <__ccfg+0x221eaa>
    1e4c:	03000000 	movweq	r0, #0
    1e50:	00001666 	andeq	r1, r0, r6, ror #12
    1e54:	73122c05 	tstvc	r2, #1280	; 0x500
    1e58:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1e5c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1e60:	00028b03 	andeq	r8, r2, r3, lsl #22
    1e64:	122d0500 	eorne	r0, sp, #0, 10
    1e68:	00000073 	andeq	r0, r0, r3, ror r0
    1e6c:	0007bc03 	andeq	fp, r7, r3, lsl #24
    1e70:	102e0500 	eorne	r0, lr, r0, lsl #10
    1e74:	00000135 	andeq	r0, r0, r5, lsr r1
    1e78:	00d9040a 	sbcseq	r0, r9, sl, lsl #8
    1e7c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    1e80:	c9093205 	stmdbgt	r9, {r0, r2, r9, ip, sp}
    1e84:	0c000001 	stceq	0, cr0, [r0], {1}
    1e88:	000002a6 	andeq	r0, r0, r6, lsr #5
    1e8c:	fb073405 	blx	1ceeaa <__ccfg+0x1aef02>
    1e90:	01000000 	mrseq	r0, (UNDEF: 0)
    1e94:	0c000701 	stceq	7, cr0, [r0], {1}
    1e98:	000000a4 	andeq	r0, r0, r4, lsr #1
    1e9c:	fb033505 	blx	cf2ba <__ccfg+0xaf312>
		    case 'u': scanu (word); break;
    1ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea4:	0c000601 	stceq	6, cr0, [r0], {1}
    1ea8:	00000274 	andeq	r0, r0, r4, ror r2
    1eac:	fb033605 	blx	cf6ca <__ccfg+0xaf722>
    1eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb4:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    1eb8:	00000432 	andeq	r0, r0, r2, lsr r4
    1ebc:	fb033705 	blx	cfada <__ccfg+0xafb32>
    1ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ec4:	0c000401 	cfstrseq	mvf0, [r0], {1}
    1ec8:	0000042b 	andeq	r0, r0, fp, lsr #8
    1ecc:	fb033805 	blx	cfeea <__ccfg+0xaff42>
    1ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed4:	0d000004 	stceq	0, cr0, [r0, #-16]
    1ed8:	0000041c 	andeq	r0, r0, ip, lsl r4
    1edc:	fb073a05 	blx	1d06fa <__ccfg+0x1b0752>
    1ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ee4:	00004c0d 	andeq	r4, r0, sp, lsl #24
		    case 'x': scanx (word); break;
    1ee8:	033c0500 	teqeq	ip, #0, 10
    1eec:	000000fb 	strdeq	r0, [r0], -fp
    1ef0:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    1ef4:	3d050000 	stccc	0, cr0, [r5, #-0]
    1ef8:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1efc:	460d0300 	strmi	r0, [sp], -r0, lsl #6
    1f00:	05000001 	streq	r0, [r0, #-1]
    1f04:	010c083f 	tsteq	ip, pc, lsr r8
    1f08:	00040000 	andeq	r0, r4, r0
    1f0c:	00045b03 	andeq	r5, r4, r3, lsl #22
    1f10:	03410500 	movteq	r0, #5376	; 0x1500
    1f14:	0000013b 	andeq	r0, r0, fp, lsr r1
    1f18:	0001c909 	andeq	ip, r1, r9, lsl #18
    1f1c:	029a0e00 	addseq	r0, sl, #0, 28
    1f20:	43050000 	movwmi	r0, #20480	; 0x5000
    1f24:	0001d51a 	andeq	sp, r1, sl, lsl r5
    1f28:	0e010100 	adfeqs	f0, f1, f0
    1f2c:	00000306 	andeq	r0, r0, r6, lsl #6
    1f30:	f60e4505 			; <UNDEFINED> instruction: 0xf60e4505
    1f34:	01000001 	tsteq	r0, r1
    1f38:	fc040a01 	stc2	10, cr0, [r4], {1}	; <UNPREDICTABLE>
    1f3c:	02000001 	andeq	r0, r0, #1
    1f40:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
    1f44:	fc080000 	stc2	0, cr0, [r8], {-0}
    1f48:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1f4c:	00000314 	andeq	r0, r0, r4, lsl r3
    1f50:	f61e4505 			; <UNDEFINED> instruction: 0xf61e4505
    1f54:	01000001 	tsteq	r0, r1
    1f58:	06080b01 	streq	r0, [r8], -r1, lsl #22
    1f5c:	0247098f 	subeq	r0, r7, #2342912	; 0x23c000
			switch (*fmt++) {
    1f60:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    1f64:	06000002 	streq	r0, [r0], -r2
    1f68:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
    1f6c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1f70:	00000647 	andeq	r0, r0, r7, asr #12
    1f74:	d9089106 	stmdble	r8, {r1, r2, r8, ip, pc}
		    	    case 'd': scani (lword); break;
    1f78:	04000000 	streq	r0, [r0], #-0
    1f7c:	0004a80d 	andeq	sl, r4, sp, lsl #16
    1f80:	10920600 	addsne	r0, r2, r0, lsl #12
    1f84:	00000107 	andeq	r0, r0, r7, lsl #2
    1f88:	39030006 	stmdbcc	r3, {r1, r2}
    1f8c:	06000004 	streq	r0, [r0], -r4
    1f90:	02160393 	andseq	r0, r6, #1275068418	; 0x4c000002
    1f94:	470f0000 	strmi	r0, [pc, -r0]
    1f98:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    1f9c:	10000002 	andne	r0, r0, r2
    1fa0:	00420e00 	subeq	r0, r2, r0, lsl #28
    1fa4:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    1fa8:	0002530f 	andeq	r5, r2, pc, lsl #6
    1fac:	0b010100 	bleq	423b4 <__ccfg+0x2240c>
    1fb0:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    1fb4:	00000296 	muleq	r0, r6, r2
    1fb8:	00049b0c 	andeq	r9, r4, ip, lsl #22
    1fbc:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    1fc0:	000000fb 	strdeq	r0, [r0], -fp
    1fc4:	00010701 	andeq	r0, r1, r1, lsl #14
    1fc8:	00003d0c 	andeq	r3, r0, ip, lsl #26
    1fcc:	03940700 	orrseq	r0, r4, #0, 14
    1fd0:	000000fb 	strdeq	r0, [r0], -fp
		    	    case 'x': scanx (lword); break;
    1fd4:	00000101 	andeq	r0, r0, r1, lsl #2
    1fd8:	026b0300 	rsbeq	r0, fp, #0, 6
    1fdc:	96070000 	strls	r0, [r7], -r0
    1fe0:	00026c03 	andeq	r6, r2, r3, lsl #24
    1fe4:	02960800 	addseq	r0, r6, #0, 16
    1fe8:	a20f0000 	andge	r0, pc, #0
    1fec:	b2000002 	andlt	r0, r0, #2
    1ff0:	10000002 	andne	r0, r0, r2
    1ff4:	02a70800 	adceq	r0, r7, #0, 16
    1ff8:	d00e0000 	andle	r0, lr, r0
    1ffc:	07000002 	streq	r0, [r0, -r2]
    2000:	02b2179c 	adcseq	r1, r2, #156, 14	; 0x2700000
    2004:	01010000 	mrseq	r0, (UNDEF: 1)
    2008:	0000e50f 	andeq	lr, r0, pc, lsl #10
    200c:	0002d000 	andeq	sp, r2, r0
    2010:	08001000 	stmdaeq	r0, {ip}
    2014:	000002c5 	andeq	r0, r0, r5, asr #5
    2018:	00038c0e 	andeq	r8, r3, lr, lsl #24
    201c:	13060800 	movwne	r0, #26624	; 0x6800
    2020:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2024:	260e0101 	strcs	r0, [lr], -r1, lsl #2
    2028:	06000001 	streq	r0, [r0], -r1
    202c:	010c0ec3 	smlabteq	ip, r3, lr, r0
    2030:	01010000 	mrseq	r0, (UNDEF: 1)
    2034:	0004b511 	andeq	fp, r4, r1, lsl r5
    2038:	016e0900 	cmneq	lr, r0, lsl #18
    203c:	0002fe10 	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
    2040:	04040a00 	streq	r0, [r4], #-2560	; 0xfffff600
		    	    case 'd': scani (lword); break;
    2044:	12000003 	andne	r0, r0, #3
    2048:	00031001 	andeq	r1, r3, r1
    204c:	00d91300 	sbcseq	r1, r9, r0, lsl #6
    2050:	0f000000 	svceq	0x00000000
    2054:	00000203 	andeq	r0, r0, r3, lsl #4
    2058:	0000031b 	andeq	r0, r0, fp, lsl r3
    205c:	10080010 	andne	r0, r8, r0, lsl r0
		    	    case 'u': scanu (lword); break;
    2060:	14000003 	strne	r0, [r0], #-3
    2064:	0000046b 	andeq	r0, r0, fp, ror #8
    2068:	16017f09 	strne	r7, [r1], -r9, lsl #30
    206c:	0000031b 	andeq	r0, r0, fp, lsl r3
    2070:	84140101 	ldrhi	r0, [r4], #-257	; 0xfffffeff
    2074:	09000003 	stmdbeq	r0, {r0, r1}
    2078:	18140182 	ldmdane	r4, {r1, r7, r8}
    207c:	01000001 	tsteq	r0, r1
    2080:	04a01401 	strteq	r1, [r0], #1025	; 0x401
    2084:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    2088:	010c0e02 	tsteq	ip, r2, lsl #28
    208c:	01010000 	mrseq	r0, (UNDEF: 1)
    2090:	03090815 	movweq	r0, #38933	; 0x9815
    2094:	03740903 	cmneq	r4, #49152	; 0xc000
    2098:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
    209c:	09000022 	stmdbeq	r0, {r1, r5}
    20a0:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    20a4:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    20a8:	00059916 	andeq	r9, r5, r6, lsl r9
    20ac:	03080900 	movweq	r0, #35072	; 0x8900
			if ((c = *buf++) == '\0')
    20b0:	00011d08 	andeq	r1, r1, r8, lsl #26
    20b4:	11000400 	tstne	r0, r0, lsl #8
			sap = va_arg (ap, char*);
    20b8:	0000024b 	andeq	r0, r0, fp, asr #4
			nc++;
    20bc:	03030909 	movweq	r0, #14601	; 0x3909
			break;
    20c0:	0000034d 	andeq	r0, r0, sp, asr #6
			while (isspace (*buf)) buf++;
    20c4:	0004d217 	andeq	sp, r4, r7, lsl r2
    20c8:	0b093000 	bleq	24e0d0 <__ccfg+0x22e128>
    20cc:	03e40803 	mvneq	r0, #196608	; 0x30000
						*sap++ = *buf++;
    20d0:	bd160000 	ldclt	0, cr0, [r6, #-0]
    20d4:	09000004 	stmdbeq	r0, {r2}
			while (isspace (*buf)) buf++;
    20d8:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
    20dc:	00000000 	andeq	r0, r0, r0
    20e0:	0002b716 	andeq	fp, r2, r6, lsl r7
		return 0;
    20e4:	03150900 	tsteq	r5, #0, 18
    20e8:	0000d908 	andeq	sp, r0, r8, lsl #18
		    case 'x': scanx (word); break;
    20ec:	b8160200 	ldmdalt	r6, {r9}
    20f0:	09000004 	stmdbeq	r0, {r2}
		    	    case 'x': scanx (lword); break;
    20f4:	f10b0316 			; <UNDEFINED> instruction: 0xf10b0316
    20f8:	04000002 	streq	r0, [r0], #-2
    20fc:	000f9416 	andeq	r9, pc, r6, lsl r4	; <UNPREDICTABLE>
    2100:	03170900 	tsteq	r7, #0, 18
    2104:	00011d09 	andeq	r1, r1, r9, lsl #26
    2108:	64160800 	ldrvs	r0, [r6], #-2048	; 0xfffff800
    210c:	09000004 	stmdbeq	r0, {r2}
    2110:	e40f0318 	str	r0, [pc], #-792	; 2118 <NOROM_AONBatMonTemperatureGetDegC+0x1c>
    2114:	0c000003 	stceq	0, cr0, [r0], {3}
    2118:	0002b216 	andeq	fp, r2, r6, lsl r2
    211c:	03190900 	tsteq	r9, #0, 18
    2120:	0003f415 	andeq	pc, r3, r5, lsl r4	; <UNPREDICTABLE>
    2124:	0f002c00 	svceq	0x00002c00
    2128:	00000374 	andeq	r0, r0, r4, ror r3
    212c:	000003f4 	strdeq	r0, [r0], -r4
    2130:	00009418 	andeq	r9, r0, r8, lsl r4
    2134:	0a000300 	beq	2d3c <NOROM_OSCClockSourceGet+0xa4>
    2138:	00038104 	andeq	r8, r3, r4, lsl #2
    213c:	04dd1100 	ldrbeq	r1, [sp], #256	; 0x100
    2140:	1c090000 	stcne	0, cr0, [r9], {-0}
    2144:	03811b03 	orreq	r1, r1, #3072	; 0xc00
    2148:	7a140000 	bvc	502150 <__ccfg+0x4e21a8>
    214c:	09000003 	stmdbeq	r0, {r0, r1}
    2150:	1614031e 			; <UNDEFINED> instruction: 0x1614031e
    2154:	01000004 	tsteq	r0, r4
    2158:	fa040a01 	blx	104964 <__ccfg+0xe49bc>
    215c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    2160:	0000050b 	andeq	r0, r0, fp, lsl #10
    2164:	d9131d0a 	ldmdble	r3, {r1, r3, r8, sl, fp, ip}
    2168:	01000000 	mrseq	r0, (UNDEF: 0)
    216c:	07750e01 	ldrbeq	r0, [r5, -r1, lsl #28]!
    2170:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2174:	0000ea1a 	andeq	lr, r0, sl, lsl sl
    2178:	0e010100 	adfeqs	f0, f1, f0
    217c:	00000905 	andeq	r0, r0, r5, lsl #18
    2180:	ea241e0a 	b	9099b0 <__ccfg+0x8e9a08>
    2184:	01000000 	mrseq	r0, (UNDEF: 0)
    2188:	06340e01 	ldrteq	r0, [r4], -r1, lsl #28
    218c:	220a0000 	andcs	r0, sl, #0
    2190:	00041614 	andeq	r1, r4, r4, lsl r6
    2194:	03010100 	movweq	r0, #4352	; 0x1100
    2198:	00000a5d 	andeq	r0, r0, sp, asr sl
    219c:	600f440a 	andvs	r4, pc, sl, lsl #8
    21a0:	0a000004 	beq	21b8 <TrimAfterColdResetWakeupFromShutDown+0x64>
    21a4:	00046604 	andeq	r6, r4, r4, lsl #12
    21a8:	8d011900 	vstrhi.16	s2, [r1, #-0]	; <UNPREDICTABLE>
    21ac:	80000000 	andhi	r0, r0, r0
    21b0:	13000004 	movwne	r0, #4
    21b4:	0000008d 	andeq	r0, r0, sp, lsl #1
    21b8:	0001f613 	andeq	pc, r1, r3, lsl r6	; <UNPREDICTABLE>
    21bc:	008d1300 	addeq	r1, sp, r0, lsl #6
    21c0:	1a000000 	bne	21c8 <TrimAfterColdResetWakeupFromShutDown+0x74>
    21c4:	0000033e 	andeq	r0, r0, lr, lsr r3
    21c8:	05070c01 	streq	r0, [r7, #-3073]	; 0xfffff3ff
    21cc:	00009003 	andeq	r9, r0, r3
    21d0:	0c271b20 			; <UNDEFINED> instruction: 0x0c271b20
    21d4:	10010000 	andne	r0, r1, r0
    21d8:	00010c07 	andeq	r0, r1, r7, lsl #24
    21dc:	03050100 	movweq	r0, #20736	; 0x5100
    21e0:	00000000 	andeq	r0, r0, r0
    21e4:	0004461a 	andeq	r4, r4, sl, lsl r6
    21e8:	0d1a0100 	ldfeqs	f0, [sl, #-0]
    21ec:	004c0305 	subeq	r0, ip, r5, lsl #6
    21f0:	540f2000 	strpl	r2, [pc], #-0	; 21f8 <TrimAfterColdResetWakeupFromShutDown+0xa4>
    21f4:	bf000004 	svclt	0x00000004
    21f8:	18000004 	stmdane	r0, {r2}
    21fc:	00000094 	muleq	r0, r4, r0
    2200:	951c0000 	ldrls	r0, [ip, #-0]
    2204:	0100000a 	tsteq	r0, sl
    2208:	04af141e 	strteq	r1, [pc], #1054	; 2210 <TrimAfterColdResetWakeupFromShutDown+0xbc>
    220c:	03050000 	movweq	r0, #20480	; 0x5000
    2210:	20000050 	andcs	r0, r0, r0, asr r0
    2214:	0001da1a 	andeq	sp, r1, sl, lsl sl
    2218:	13220100 			; <UNDEFINED> instruction: 0x13220100
    221c:	00980305 	addseq	r0, r8, r5, lsl #6
    2220:	071a2000 	ldreq	r2, [sl, -r0]
    2224:	01000004 	tsteq	r0, r4
    2228:	03050d27 	movweq	r0, #23847	; 0x5d27
    222c:	200000b4 	strhcs	r0, [r0], -r4
    2230:	00041c1a 	andeq	r1, r4, sl, lsl ip
    2234:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    2238:	00940305 	addseq	r0, r4, r5, lsl #6
    223c:	2a1a2000 	bcs	68a244 <__ccfg+0x66a29c>
    2240:	01000004 	tsteq	r0, r4
    2244:	03050f31 	movweq	r0, #24369	; 0x5f31
    2248:	20000096 	mulcs	r0, r6, r0
    224c:	0004381a 	andeq	r3, r4, sl, lsl r8
    2250:	19310100 	ldmdbne	r1!, {r8}
    2254:	00a00305 	adceq	r0, r0, r5, lsl #6
    2258:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    225c:	27000001 	strcs	r0, [r0, -r1]
    2260:	18000005 	stmdane	r0, {r0, r2}
    2264:	00000094 	muleq	r0, r4, r0
    2268:	551b0003 	ldrpl	r0, [fp, #-3]
    226c:	01000009 	tsteq	r0, r9
    2270:	05170a36 	ldreq	r0, [r7, #-2614]	; 0xfffff5ca
    2274:	05010000 	streq	r0, [r1, #-0]
    2278:	0000a403 	andeq	sl, r0, r3, lsl #8
    227c:	03201a20 			; <UNDEFINED> instruction: 0x03201a20
    2280:	3f010000 	svccc	0x00010000
    2284:	f003050c 			; <UNDEFINED> instruction: 0xf003050c
    2288:	1a00002e 	bne	2348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    228c:	0000032f 	andeq	r0, r0, pc, lsr #6
    2290:	050d4501 	streq	r4, [sp, #-1281]	; 0xfffffaff
    2294:	00000003 	andeq	r0, r0, r3
    2298:	01020b00 	tsteq	r2, r0, lsl #22
    229c:	057a0949 	ldrbeq	r0, [sl, #-2377]!	; 0xfffff6b7
    22a0:	890d0000 	stmdbhi	sp, {}	; <UNPREDICTABLE>
    22a4:	0100000a 	tsteq	r0, sl
    22a8:	00fb074a 	rscseq	r0, fp, sl, asr #14
    22ac:	0d000000 	stceq	0, cr0, [r0, #-0]
    22b0:	00000c6b 	andeq	r0, r0, fp, ror #24
    22b4:	fb074b01 	blx	1d4ec2 <__ccfg+0x1b4f1a>
    22b8:	01000000 	mrseq	r0, (UNDEF: 0)
    22bc:	0b920300 	bleq	fe482ec4 <_estack+0xde47dec4>
    22c0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    22c4:	00055603 	andeq	r5, r5, r3, lsl #12
    22c8:	057a0f00 	ldrbeq	r0, [sl, #-3840]!	; 0xfffff100
    22cc:	05960000 	ldreq	r0, [r6]
    22d0:	94180000 	ldrls	r0, [r8], #-0
    22d4:	00000000 	andeq	r0, r0, r0
    22d8:	0bc71c00 	bleq	ff1c92e0 <_estack+0xdf1c42e0>
    22dc:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    22e0:	00058611 	andeq	r8, r5, r1, lsl r6
    22e4:	58030500 	stmdapl	r3, {r8, sl}
    22e8:	0f200000 	svceq	0x00200000
    22ec:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    22f0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    22f4:	00009418 	andeq	r9, r0, r8, lsl r4
    22f8:	0a000000 	beq	2300 <NOROM_SetupSetVddrLevel+0x34>
    22fc:	00011d04 	andeq	r1, r1, r4, lsl #26
    2300:	0aaa1d00 	beq	fea89708 <_estack+0xdea84708>
    2304:	bd010000 	stclt	0, cr0, [r1, #-0]
    2308:	05a80f02 	streq	r0, [r8, #3842]!	; 0xf02
    230c:	03050000 	movweq	r0, #20480	; 0x5000
    2310:	20000060 	andcs	r0, r0, r0, rrx
    2314:	00011d0f 	andeq	r1, r1, pc, lsl #26
    2318:	0005e100 	andeq	lr, r5, r0, lsl #2
    231c:	00941800 	addseq	r1, r4, r0, lsl #16
    2320:	00000000 	andeq	r0, r0, r0
    2324:	000b4d1d 	andeq	r4, fp, sp, lsl sp
    2328:	02c20100 	sbceq	r0, r2, #0, 2
    232c:	0005d10e 	andeq	sp, r5, lr, lsl #2
    2330:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    2334:	1d200000 	stcne	0, cr0, [r0, #-0]
    2338:	00000baa 	andeq	r0, r0, sl, lsr #23
    233c:	2602c201 	strcs	ip, [r2], -r1, lsl #4
    2340:	000005d1 	ldrdeq	r0, [r0], -r1
    2344:	00540305 	subseq	r0, r4, r5, lsl #6
    2348:	011e2000 	tsteq	lr, r0
    234c:	00000bf3 	strdeq	r0, [r0], -r3
    2350:	07052f01 	streq	r2, [r5, -r1, lsl #30]
    2354:	00010c01 	andeq	r0, r1, r1, lsl #24
	...
    2360:	1f9c0100 	svcne	0x009c0100
    2364:	000b8101 	andeq	r8, fp, r1, lsl #2
    2368:	04820100 	streq	r0, [r2], #256	; 0x100
    236c:	15280106 	strne	r0, [r8, #-262]!	; 0xfffffefa
    2370:	16640000 	strbtne	r0, [r4], -r0
    2374:	9c010000 	stcls	0, cr0, [r1], {-0}
    2378:	0000070e 	andeq	r0, r0, lr, lsl #14
    237c:	000bc220 	andeq	ip, fp, r0, lsr #4
    2380:	04820100 	streq	r0, [r2], #256	; 0x100
    2384:	00070e18 	andeq	r0, r7, r8, lsl lr
    2388:	00051f00 	andeq	r1, r5, r0, lsl #30
    238c:	76222100 	strtvc	r2, [r2], -r0, lsl #2
    2390:	01006c61 	tsteq	r0, r1, ror #24
    2394:	0c080487 	cfstrseq	mvf0, [r8], {135}	; 0x87
    2398:	5f000001 	svcpl	0x00000001
    239c:	23000005 	movwcs	r0, #5
    23a0:	01007061 	tsteq	r0, r1, rrx
    23a4:	c10a0488 	smlabbgt	sl, r8, r4, r0
    23a8:	02000000 	andeq	r0, r0, #0
    23ac:	62224c91 	eorvs	r4, r2, #37120	; 0x9100
    23b0:	89010063 	stmdbhi	r1, {r0, r1, r5, r6}
    23b4:	00ef0704 	rsceq	r0, pc, r4, lsl #14
    23b8:	059e0000 	ldreq	r0, [lr]
    23bc:	76220000 	strtvc	r0, [r2], -r0
    23c0:	048a0100 	streq	r0, [sl], #256	; 0x100
    23c4:	0000d907 	andeq	sp, r0, r7, lsl #18
    23c8:	0005d200 	andeq	sp, r5, r0, lsl #4
    23cc:	73692400 	cmnvc	r9, #0, 8
    23d0:	048b0100 	streq	r0, [fp], #256	; 0x100
    23d4:	0000fb07 	andeq	pc, r0, r7, lsl #22
    23d8:	0c7b2500 	cfldr64eq	mvdx2, [fp], #-0
    23dc:	b0010000 	andlt	r0, r1, r0
    23e0:	15f40104 	ldrbne	r0, [r4, #260]!	; 0x104
    23e4:	b4260000 	strtlt	r0, [r6], #-0
    23e8:	d0000015 	andle	r0, r0, r5, lsl r0
    23ec:	c0000015 	andgt	r0, r0, r5, lsl r0
    23f0:	22000006 	andcs	r0, r0, #6
    23f4:	9f010069 	svcls	0x00010069
    23f8:	00ef0a04 	rsceq	r0, pc, r4, lsl #20
    23fc:	05fb0000 	ldrbeq	r0, [fp, #0]!
    2400:	27000000 	strcs	r0, [r0, -r0]
    2404:	000006b8 			; <UNDEFINED> instruction: 0x000006b8
    2408:	000006d9 	ldrdeq	r0, [r0], -r9
    240c:	01006422 	tsteq	r0, r2, lsr #8
    2410:	0c0b04a9 	cfstrseq	mvf0, [fp], {169}	; 0xa9
    2414:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    2418:	00000006 	andeq	r0, r0, r6
    241c:	00164026 	andseq	r4, r6, r6, lsr #32
    2420:	00164e00 	andseq	r4, r6, r0, lsl #28
    2424:	0006f600 	andeq	pc, r6, r0, lsl #12
    2428:	00732200 	rsbseq	r2, r3, r0, lsl #4
    242c:	0b04c601 	bleq	133c38 <__ccfg+0x113c90>
    2430:	000001f6 	strdeq	r0, [r0], -r6
    2434:	00000637 	andeq	r0, r0, r7, lsr r6
    2438:	10c12800 	sbcne	r2, r1, r0, lsl #16
    243c:	15560000 	ldrbne	r0, [r6, #-0]
    2440:	06e80000 	strbteq	r0, [r8], r0
    2444:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2448:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    244c:	00000010 	andeq	r0, r0, r0, lsl r0
    2450:	03040a00 	movweq	r0, #18944	; 0x4a00
    2454:	2a000002 	bcs	2464 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>
    2458:	00000c4b 	andeq	r0, r0, fp, asr #24
    245c:	0d044701 	stceq	7, cr4, [r4, #-4]
    2460:	00100001 	andseq	r0, r0, r1
    2464:	00101800 	andseq	r1, r0, r0, lsl #16
    2468:	539c0100 	orrspl	r0, ip, #0, 2
    246c:	2b000007 	blcs	2490 <NOROM_SetupGetTrimForAmpcompCtrl+0x4>
    2470:	47010063 	strmi	r0, [r1, -r3, rrx]
    2474:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2478:	064a0000 	strbeq	r0, [sl], -r0
    247c:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2480:	00000010 	andeq	r0, r0, r0, lsl r0
    2484:	60000010 	andvs	r0, r0, r0, lsl r0
    2488:	01000006 	tsteq	r0, r6
    248c:	29020449 	stmdbcs	r2, {r0, r3, r6, sl}
    2490:	000010d4 	ldrdeq	r1, [r0], -r4
    2494:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2498:	00000b32 	andeq	r0, r0, r2, lsr fp
    249c:	06042801 	streq	r2, [r4], -r1, lsl #16
    24a0:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    24ac:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    24b0:	2b000007 	blcs	24d4 <NOROM_SetupGetTrimForAmpcompCtrl+0x48>
    24b4:	0100636e 	tsteq	r0, lr, ror #6
    24b8:	291c0428 	ldmdbcs	ip, {r3, r5, sl}
    24bc:	5d000001 	stcpl	0, cr0, [r0, #-4]
    24c0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    24c4:	00000c13 	andeq	r0, r0, r3, lsl ip
    24c8:	09043101 	stmdbeq	r4, {r0, r8, ip, sp}
    24cc:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    24d0:	0000067b 	andeq	r0, r0, fp, ror r6
    24d4:	78616d22 	stmdavc	r1!, {r1, r5, r8, sl, fp, sp, lr}^
    24d8:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    24dc:	00011d08 	andeq	r1, r1, r8, lsl #26
    24e0:	00069900 	andeq	r9, r6, r0, lsl #18
    24e4:	0b482d00 	bleq	120d8ec <__ccfg+0x11ed944>
    24e8:	32010000 	andcc	r0, r1, #0
    24ec:	011d0d04 	tsteq	sp, r4, lsl #26
    24f0:	06b70000 	ldrteq	r0, [r7], r0
    24f4:	2c000000 	stccs	0, cr0, [r0], {-0}
    24f8:	000c0001 	andeq	r0, ip, r1
    24fc:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    2500:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    250c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2510:	000007e3 	andeq	r0, r0, r3, ror #15
    2514:	6e696d2b 	cdpvs	13, 6, cr6, cr9, cr11, {1}
    2518:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    251c:	0001291c 	andeq	r2, r1, ip, lsl r9
    2520:	0006e000 	andeq	lr, r6, r0
    2524:	011f0000 	tsteq	pc, r0
    2528:	00000be6 	andeq	r0, r0, r6, ror #23
    252c:	06040201 	streq	r0, [r4], -r1, lsl #4
    2530:	00151001 	andseq	r1, r5, r1
    2534:	00152800 	andseq	r2, r5, r0, lsl #16
    2538:	0e9c0100 	fmleqe	f0, f4, f0
    253c:	20000008 	andcs	r0, r0, r8
    2540:	00000bd6 	ldrdeq	r0, [r0], -r6
    2544:	19040201 	stmdbne	r4, {r0, r9}
    2548:	000000d9 	ldrdeq	r0, [r0], -r9
    254c:	000006f3 	strdeq	r0, [r0], -r3
    2550:	7c012c00 	stcvc	12, cr2, [r1], {-0}
    2554:	0100000a 	tsteq	r0, sl
    2558:	010803a3 	smlatbeq	r8, r3, r3, r0
    255c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2560:	00001434 	andeq	r1, r0, r4, lsr r4
    2564:	000014dc 	ldrdeq	r1, [r0], -ip
    2568:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    256c:	ec200000 	stc	0, cr0, [r0], #-0
    2570:	01000013 	tsteq	r0, r3, lsl r0
    2574:	d91a03a3 	ldmdble	sl, {r0, r1, r5, r7, r8, r9}
    2578:	06000000 	streq	r0, [r0], -r0
    257c:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    2580:	00000c13 	andeq	r0, r0, r3, lsl ip
    2584:	0903ab01 	stmdbeq	r3, {r0, r8, r9, fp, sp, pc}
    2588:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    258c:	00000719 	andeq	r0, r0, r9, lsl r7
    2590:	00636322 	rsbeq	r6, r3, r2, lsr #6
    2594:	1103ab01 	tstne	r3, r1, lsl #22
    2598:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    259c:	0000074d 	andeq	r0, r0, sp, asr #14
    25a0:	000bb12d 	andeq	fp, fp, sp, lsr #2
    25a4:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    25a8:	00011d15 	andeq	r1, r1, r5, lsl sp
    25ac:	00077600 	andeq	r7, r7, r0, lsl #12
    25b0:	13eb2d00 	mvnne	r2, #0, 26
    25b4:	af010000 	svcge	0x00010000
    25b8:	011d0803 	tsteq	sp, r3, lsl #16
    25bc:	07890000 	streq	r0, [r9, r0]
    25c0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    25c4:	000c7101 	andeq	r7, ip, r1, lsl #2
    25c8:	037c0100 	cmneq	ip, #0, 2
    25cc:	9d010106 	stflss	f0, [r1, #-24]	; 0xffffffe8
    25d0:	2f000008 	svccs	0x00000008
    25d4:	01006863 	tsteq	r0, r3, ror #16
    25d8:	b818037c 	ldmdalt	r8, {r2, r3, r4, r5, r6, r8, r9}
    25dc:	00000005 	andeq	r0, r0, r5
    25e0:	000a8f2a 	andeq	r8, sl, sl, lsr #30
    25e4:	034a0100 	movteq	r0, #41216	; 0xa100
    25e8:	0f80010d 	svceq	0x0080010d
    25ec:	10000000 	andne	r0, r0, r0
    25f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    25f4:	000008e7 	andeq	r0, r0, r7, ror #17
    25f8:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    25fc:	1b034a01 	blne	d4e08 <__ccfg+0xb4e60>
    2600:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2604:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
    2608:	000c132d 	andeq	r1, ip, sp, lsr #6
    260c:	03570100 	cmpeq	r7, #0, 2
    2610:	0005b809 	andeq	fp, r5, r9, lsl #16
    2614:	0007d100 	andeq	sp, r7, r0, lsl #2
    2618:	63632200 	cmnvs	r3, #0, 4
    261c:	03570100 	cmpeq	r7, #0, 2
    2620:	0005b811 	andeq	fp, r5, r1, lsl r8
    2624:	00081200 	andeq	r1, r8, r0, lsl #4
    2628:	01300000 	teqeq	r0, r0
    262c:	00000acf 	andeq	r0, r0, pc, asr #21
    2630:	0602f001 	streq	pc, [r2], -r1
    2634:	000012f4 	strdeq	r1, [r0], -r4
    2638:	00001344 	andeq	r1, r0, r4, asr #6
    263c:	09119c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}
    2640:	5c2d0000 	stcpl	0, cr0, [sp], #-0
    2644:	0100000b 	tsteq	r0, fp
    2648:	1d0802f5 	sfmne	f0, 4, [r8, #-980]	; 0xfffffc2c
    264c:	46000001 	strmi	r0, [r0], -r1
    2650:	00000008 	andeq	r0, r0, r8
    2654:	6f690131 	svcvs	0x00690131
    2658:	02790100 	rsbseq	r0, r9, #0, 2
    265c:	00ef0106 	rsceq	r0, pc, r6, lsl #2
    2660:	12580000 	subsne	r0, r8, #0
    2664:	12f40000 	rscsne	r0, r4, #0
    2668:	9c010000 	stcls	0, cr0, [r1], {-0}
    266c:	00000994 	muleq	r0, r4, r9
    2670:	000bb720 	andeq	fp, fp, r0, lsr #14
    2674:	02790100 	rsbseq	r0, r9, #0, 2
    2678:	0000d90f 	andeq	sp, r0, pc, lsl #18
    267c:	00086400 	andeq	r6, r8, r0, lsl #8
    2680:	65642b00 	strbvs	r2, [r4, #-2816]!	; 0xfffff500
    2684:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    2688:	00d91b02 	sbcseq	r1, r9, r2, lsl #22
    268c:	08820000 	stmeq	r2, {}	; <UNPREDICTABLE>
    2690:	45200000 	strmi	r0, [r0, #-0]!
    2694:	01000007 	tsteq	r0, r7
    2698:	d9250279 	stmdble	r5!, {r0, r3, r4, r5, r6, r9}
    269c:	a0000000 	andge	r0, r0, r0
    26a0:	2b000008 	blcs	26c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    26a4:	00667562 	rsbeq	r7, r6, r2, ror #10
    26a8:	36027901 	strcc	r7, [r2], -r1, lsl #18
    26ac:	000001f6 	strdeq	r0, [r0], -r6
    26b0:	000008be 			; <UNDEFINED> instruction: 0x000008be
    26b4:	6e656c2b 	cdpvs	12, 6, cr6, cr5, cr11, {1}
    26b8:	02790100 	rsbseq	r0, r9, #0, 2
    26bc:	0000d940 	andeq	sp, r0, r0, asr #18
    26c0:	0008dc00 	andeq	sp, r8, r0, lsl #24
    26c4:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    26c8:	7b010074 	blvc	428a0 <__ccfg+0x228f8>
    26cc:	00ef0702 	rsceq	r0, pc, r2, lsl #14
    26d0:	08fc0000 	ldmeq	ip!, {}^	; <UNPREDICTABLE>
    26d4:	1f000000 	svcne	0x00000000
    26d8:	000b6f01 	andeq	r6, fp, r1, lsl #30
    26dc:	02690100 	rsbeq	r0, r9, #0, 2
    26e0:	12340106 	eorsne	r0, r4, #-2147483647	; 0x80000001
    26e4:	12580000 	subsne	r0, r8, #0
    26e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    26ec:	000009cf 	andeq	r0, r0, pc, asr #19
    26f0:	0066722b 	rsbeq	r7, r6, fp, lsr #4
    26f4:	1e026901 	vmlane.f16	s12, s4, s2	; <UNPREDICTABLE>
    26f8:	00000454 	andeq	r0, r0, r4, asr r4
    26fc:	00000930 	andeq	r0, r0, r0, lsr r9
    2700:	636f6c2b 	cmnvs	pc, #11008	; 0x2b00
    2704:	02690100 	rsbeq	r0, r9, #0, 2
    2708:	00008d26 	andeq	r8, r0, r6, lsr #26
    270c:	00095900 	andeq	r5, r9, r0, lsl #18
    2710:	011f0000 	tsteq	pc, r0
    2714:	00000c82 	andeq	r0, r0, r2, lsl #25
    2718:	06025f01 	streq	r5, [r2], -r1, lsl #30
    271c:	00000001 	andeq	r0, r0, r1
    2720:	00000000 	andeq	r0, r0, r0
    2724:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2728:	2000000a 	andcs	r0, r0, sl
    272c:	00000bbd 			; <UNDEFINED> instruction: 0x00000bbd
    2730:	19025f01 	stmdbne	r2, {r0, r8, r9, sl, fp, ip, lr}
    2734:	000001f6 	strdeq	r0, [r0], -r6
    2738:	00000982 	andeq	r0, r0, r2, lsl #19
    273c:	01006332 	tsteq	r0, r2, lsr r3
    2740:	fc24025f 	stc2	2, cr0, [r4], #-380	; 0xfffffe84
    2744:	01000001 	tsteq	r0, r1
    2748:	006e2b51 	rsbeq	r2, lr, r1, asr fp
    274c:	2b025f01 	blcs	9a358 <__ccfg+0x7a3b0>
    2750:	0000008d 	andeq	r0, r0, sp, lsl #1
    2754:	000009a0 	andeq	r0, r0, r0, lsr #19
    2758:	3f011f00 	svccc	0x00011f00
    275c:	0100000c 	tsteq	r0, ip
    2760:	01060259 	tsteq	r6, r9, asr r2
    2764:	0000121e 	andeq	r1, r0, lr, lsl r2
    2768:	00001232 	andeq	r1, r0, r2, lsr r2
    276c:	0a619c01 	beq	1869778 <__ccfg+0x18497d0>
    2770:	bd200000 	stclt	0, cr0, [r0, #-0]
    2774:	0100000b 	tsteq	r0, fp
    2778:	f6190259 			; <UNDEFINED> instruction: 0xf6190259
    277c:	b3000001 	movwlt	r0, #1
    2780:	2b000009 	blcs	27ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x58>
    2784:	00637273 	rsbeq	r7, r3, r3, ror r2
    2788:	2b025901 	blcs	98b94 <__ccfg+0x78bec>
    278c:	0000070e 	andeq	r0, r0, lr, lsl #14
    2790:	000009c6 	andeq	r0, r0, r6, asr #19
    2794:	01006e2b 	tsteq	r0, fp, lsr #28
    2798:	8d340259 	lfmhi	f0, 4, [r4, #-356]!	; 0xfffffe9c
    279c:	e4000000 	str	r0, [r0], #-0
    27a0:	00000009 	andeq	r0, r0, r9
    27a4:	0cb3011f 	ldfeqs	f0, [r3], #124	; 0x7c
    27a8:	54010000 	strpl	r0, [r1], #-0
    27ac:	00010602 	andeq	r0, r1, r2, lsl #12
    27b0:	00000000 	andeq	r0, r0, r0
    27b4:	01000000 	mrseq	r0, (UNDEF: 0)
    27b8:	000aa69c 	muleq	sl, ip, r6
    27bc:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    27c0:	1a025401 	bne	977cc <__ccfg+0x77824>
    27c4:	000001f6 	strdeq	r0, [r0], -r6
    27c8:	000009f7 	strdeq	r0, [r0], -r7
    27cc:	0100732b 	tsteq	r0, fp, lsr #6
    27d0:	0e290254 	mcreq	2, 1, r0, cr9, cr4, {2}
    27d4:	0a000007 	beq	27f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    27d8:	3200000a 	andcc	r0, r0, #10
    27dc:	5401006e 	strpl	r0, [r1], #-110	; 0xffffff92
    27e0:	008d3002 	addeq	r3, sp, r2
    27e4:	52010000 	andpl	r0, r1, #0
    27e8:	86011f00 	strhi	r1, [r1], -r0, lsl #30
    27ec:	0100000b 	tsteq	r0, fp
    27f0:	0106024e 	tsteq	r6, lr, asr #4
	...
    27fc:	0ade9c01 	beq	ff7a9808 <_estack+0xdf7a4808>
    2800:	642b0000 	strtvs	r0, [fp], #-0
    2804:	024e0100 	subeq	r0, lr, #0, 2
    2808:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    280c:	000a1d00 	andeq	r1, sl, r0, lsl #26
    2810:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    2814:	28024e01 	stmdacs	r2, {r0, r9, sl, fp, lr}
    2818:	0000070e 	andeq	r0, r0, lr, lsl #14
    281c:	00000a3b 	andeq	r0, r0, fp, lsr sl
    2820:	8e011f00 	cdphi	15, 0, cr1, cr1, cr0, {0}
    2824:	0100000c 	tsteq	r0, ip
    2828:	01060247 	tsteq	r6, r7, asr #4
	...
    2834:	0b259c01 	bleq	969840 <__ccfg+0x949898>
    2838:	642b0000 	strtvs	r0, [fp], #-0
    283c:	02470100 	subeq	r0, r7, #0, 2
    2840:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    2844:	000a4e00 	andeq	r4, sl, r0, lsl #28
    2848:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    284c:	29024701 	stmdbcs	r2, {r0, r8, r9, sl, lr}
    2850:	0000070e 	andeq	r0, r0, lr, lsl #14
    2854:	00000a6c 	andeq	r0, r0, ip, ror #20
    2858:	01006e2b 	tsteq	r0, fp, lsr #28
    285c:	8d300247 	lfmhi	f0, 4, [r0, #-284]!	; 0xfffffee4
    2860:	7f000000 	svcvc	0x00000000
    2864:	0000000a 	andeq	r0, r0, sl
    2868:	0a70011f 	beq	1c02cec <__ccfg+0x1be2d44>
    286c:	42010000 	andmi	r0, r1, #0
    2870:	00010602 	andeq	r0, r1, r2, lsl #12
    2874:	00000000 	andeq	r0, r0, r0
    2878:	01000000 	mrseq	r0, (UNDEF: 0)
    287c:	000b5d9c 	muleq	fp, ip, sp
    2880:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    2884:	19024201 	stmdbne	r2, {r0, r9, lr}
    2888:	000001f6 	strdeq	r0, [r0], -r6
    288c:	00000a92 	muleq	r0, r2, sl
    2890:	0100732b 	tsteq	r0, fp, lsr #6
    2894:	0e280242 	cdpeq	2, 2, cr0, cr8, cr2, {2}
    2898:	a5000007 	strge	r0, [r0, #-7]
    289c:	0000000a 	andeq	r0, r0, sl
    28a0:	0b26012c 	bleq	982d58 <__ccfg+0x962db0>
    28a4:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    28a8:	8d010502 	cfstr32hi	mvfx0, [r1, #-8]
    28ac:	10000000 	andne	r0, r0, r0
    28b0:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    28b4:	01000012 	tsteq	r0, r2, lsl r0
    28b8:	000b999c 	muleq	fp, ip, r9
    28bc:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    28c0:	1e023901 	vmlane.f16	s6, s4, s2	; <UNPREDICTABLE>
    28c4:	0000070e 	andeq	r0, r0, lr, lsl #14
    28c8:	00000ac3 	andeq	r0, r0, r3, asr #21
    28cc:	01006922 	tsteq	r0, r2, lsr #18
    28d0:	8d06023b 	sfmhi	f0, 4, [r6, #-236]	; 0xffffff14
    28d4:	e1000000 	mrs	r0, (UNDEF: 0)
    28d8:	0000000a 	andeq	r0, r0, sl
    28dc:	0b3f012c 	bleq	fc2d94 <__ccfg+0xfa2dec>
    28e0:	2d010000 	stccs	0, cr0, [r1, #-0]
    28e4:	d9010602 	stmdble	r1, {r1, r9, sl}
    28e8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    28ec:	10000011 	andne	r0, r0, r1, lsl r0
    28f0:	01000012 	tsteq	r0, r2, lsl r0
    28f4:	000be69c 	muleq	fp, ip, r6
    28f8:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    28fc:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    2900:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    2904:	0af40000 	beq	ffd0290c <_estack+0xdfcfd90c>
    2908:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    290c:	022f0100 	eoreq	r0, pc, #0, 2
    2910:	0004160e 	andeq	r1, r4, lr, lsl #12
    2914:	000b1200 	andeq	r1, fp, r0, lsl #4
    2918:	00632200 	rsbeq	r2, r3, r0, lsl #4
    291c:	07023001 	streq	r3, [r2, -r1]
    2920:	000000d9 	ldrdeq	r0, [r0], -r9
    2924:	00000b30 	andeq	r0, r0, r0, lsr fp
    2928:	40012c00 	andmi	r2, r1, r0, lsl #24
    292c:	0100000b 	tsteq	r0, fp
    2930:	0107021f 	tsteq	r7, pc, lsl r2
    2934:	0000011d 	andeq	r0, r0, sp, lsl r1
    2938:	000011cc 	andeq	r1, r0, ip, asr #3
    293c:	000011f0 	strdeq	r1, [r0], -r0
    2940:	0c229c01 	stceq	12, cr9, [r2], #-4
    2944:	662b0000 	strtvs	r0, [fp], -r0
    2948:	01006e75 	tsteq	r0, r5, ror lr
    294c:	f118021f 			; <UNDEFINED> instruction: 0xf118021f
    2950:	43000002 	movwmi	r0, #2
    2954:	2300000b 	movwcs	r0, #11
    2958:	21010069 	tstcs	r1, r9, rrx
    295c:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    2960:	50010000 	andpl	r0, r1, r0
    2964:	31012c00 	tstcc	r1, r0, lsl #24
    2968:	0100000c 	tsteq	r0, ip
    296c:	01090213 	tsteq	r9, r3, lsl r2
    2970:	000002f1 	strdeq	r0, [r0], -r1
	...
    297c:	0c609c01 	stcleq	12, cr9, [r0], #-4
    2980:	702b0000 	eorvc	r0, fp, r0
    2984:	01006469 	tsteq	r0, r9, ror #8
    2988:	1d180213 	lfmne	f0, 4, [r8, #-76]	; 0xffffffb4
    298c:	6c000001 	stcvs	0, cr0, [r0], {1}
    2990:	2200000b 	andcs	r0, r0, #11
    2994:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    2998:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    299c:	0b8a0000 	bleq	fe2829a4 <_estack+0xde27d9a4>
    29a0:	1f000000 	svcne	0x00000000
    29a4:	000bf801 	andeq	pc, fp, r1, lsl #16
    29a8:	01f50100 	mvnseq	r0, r0, lsl #2
    29ac:	13dc0106 	bicsne	r0, ip, #-2147483647	; 0x80000001
    29b0:	14340000 	ldrtne	r0, [r4], #-0
    29b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    29b8:	00000cc9 	andeq	r0, r0, r9, asr #25
    29bc:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    29c0:	01f50100 	mvnseq	r0, r0, lsl #2
    29c4:	0002f117 	andeq	pc, r2, r7, lsl r1	; <UNPREDICTABLE>
    29c8:	000ba800 	andeq	sl, fp, r0, lsl #16
    29cc:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    29d0:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
    29d4:	00cd0a01 	sbceq	r0, sp, r1, lsl #20
    29d8:	0bc60000 	bleq	ff1829e0 <_estack+0xdf17d9e0>
    29dc:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    29e0:	01fa0100 	mvnseq	r0, r0, lsl #2
    29e4:	0004160e 	andeq	r1, r4, lr, lsl #12
    29e8:	000bd900 	andeq	sp, fp, r0, lsl #18
    29ec:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    29f0:	1201fa01 	andne	pc, r1, #4096	; 0x1000
    29f4:	00000416 	andeq	r0, r0, r6, lsl r4
    29f8:	00000c0d 	andeq	r0, r0, sp, lsl #24
    29fc:	01006b22 	tsteq	r0, r2, lsr #22
    2a00:	161601fa 			; <UNDEFINED> instruction: 0x161601fa
    2a04:	2b000004 	blcs	2a1c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x178>
    2a08:	0000000c 	andeq	r0, r0, ip
    2a0c:	0aa5011f 	beq	fe942e90 <_estack+0xde93de90>
    2a10:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2a14:	8c010601 	stchi	6, cr0, [r1], {1}
    2a18:	dc000013 	stcle	0, cr0, [r0], {19}
    2a1c:	01000013 	tsteq	r0, r3, lsl r0
    2a20:	000d0e9c 	muleq	sp, ip, lr
    2a24:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    2a28:	d9010064 	stmdble	r1, {r2, r5, r6}
    2a2c:	011d1201 	tsteq	sp, r1, lsl #4
    2a30:	0c490000 	mareq	acc0, r0, r9
    2a34:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2a38:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    2a3c:	0004160e 	andeq	r1, r4, lr, lsl #12
    2a40:	000c7d00 	andeq	r7, ip, r0, lsl #26
    2a44:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    2a48:	1201dd01 	andne	sp, r1, #1, 26	; 0x40
    2a4c:	00000416 	andeq	r0, r0, r6, lsl r4
    2a50:	0a692a00 	beq	1a4d258 <__ccfg+0x1a2d2b0>
    2a54:	c4010000 	strgt	r0, [r1], #-0
    2a58:	44010d01 	strmi	r0, [r1], #-3329	; 0xfffff2ff
    2a5c:	8000000f 	andhi	r0, r0, pc
    2a60:	0100000f 	tsteq	r0, pc
    2a64:	000d639c 	muleq	sp, ip, r3
    2a68:	69703200 	ldmdbvs	r0!, {r9, ip, sp}^
    2a6c:	c4010064 	strgt	r0, [r1], #-100	; 0xffffff9c
    2a70:	04162101 	ldreq	r2, [r6], #-257	; 0xfffffeff
    2a74:	50010000 	andpl	r0, r1, r0
    2a78:	000c662d 	andeq	r6, ip, sp, lsr #12
    2a7c:	01c80100 	biceq	r0, r8, r0, lsl #2
    2a80:	00011d08 	andeq	r1, r1, r8, lsl #26
    2a84:	000ca600 	andeq	sl, ip, r0, lsl #12
    2a88:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    2a8c:	0601c901 	streq	ip, [r1], -r1, lsl #18
    2a90:	0000008d 	andeq	r0, r0, sp, lsl #1
    2a94:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    2a98:	01006923 	tsteq	r0, r3, lsr #18
    2a9c:	160e01ca 	strne	r0, [lr], -sl, asr #3
    2aa0:	01000004 	tsteq	r0, r4
    2aa4:	012c0052 	qsubeq	r0, r2, ip
    2aa8:	00000c39 	andeq	r0, r0, r9, lsr ip
    2aac:	0601b301 	streq	fp, [r1], -r1, lsl #6
    2ab0:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    2abc:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    2ac0:	2b00000d 	blcs	2afc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x38>
    2ac4:	00646970 	rsbeq	r6, r4, r0, ror r9
    2ac8:	1301b301 	movwne	fp, #4865	; 0x1301
    2acc:	0000011d 	andeq	r0, r0, sp, lsl r1
    2ad0:	00000ccc 	andeq	r0, r0, ip, asr #25
    2ad4:	01006922 	tsteq	r0, r2, lsr #18
    2ad8:	160e01b5 			; <UNDEFINED> instruction: 0x160e01b5
    2adc:	ea000004 	b	2af4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x30>
    2ae0:	0000000c 	andeq	r0, r0, ip
    2ae4:	0a880133 	beq	fe202fb8 <_estack+0xde1fdfb8>
    2ae8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2aec:	00010601 	andeq	r0, r1, r1, lsl #12
    2af0:	00000000 	andeq	r0, r0, r0
    2af4:	01000000 	mrseq	r0, (UNDEF: 0)
    2af8:	f0011f9c 			; <UNDEFINED> instruction: 0xf0011f9c
    2afc:	01000018 	tsteq	r0, r8, lsl r0
    2b00:	0106019a 			; <UNDEFINED> instruction: 0x0106019a
    2b04:	00001194 	muleq	r0, r4, r1
    2b08:	000011cc 	andeq	r1, r0, ip, asr #3
    2b0c:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    2b10:	642b0000 	strtvs	r0, [fp], #-0
    2b14:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2b18:	0000d912 	andeq	sp, r0, r2, lsl r9
    2b1c:	000d0800 	andeq	r0, sp, r0, lsl #16
    2b20:	0bd62000 	bleq	ff58ab28 <_estack+0xdf585b28>
    2b24:	9a010000 	bls	42b2c <__ccfg+0x22b84>
    2b28:	00d91a01 	sbcseq	r1, r9, r1, lsl #20
    2b2c:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
    2b30:	2c000000 	stccs	0, cr0, [r0], {-0}
    2b34:	000c9b01 	andeq	r9, ip, r1, lsl #22
    2b38:	01880100 	orreq	r0, r8, r0, lsl #2
    2b3c:	011d0107 	tsteq	sp, r7, lsl #2
    2b40:	11700000 	cmnne	r0, r0
    2b44:	11940000 	orrsne	r0, r4, r0
    2b48:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b4c:	00000e3e 	andeq	r0, r0, lr, lsr lr
    2b50:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2b54:	01880100 	orreq	r0, r8, r0, lsl #2
    2b58:	00011d18 	andeq	r1, r1, r8, lsl sp
    2b5c:	000d2e00 	andeq	r2, sp, r0, lsl #28
    2b60:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    2b64:	01880100 	orreq	r0, r8, r0, lsl #2
    2b68:	0000d922 	andeq	sp, r0, r2, lsr #18
    2b6c:	000d5700 	andeq	r5, sp, r0, lsl #14
    2b70:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2b74:	0e018a01 	vmlaeq.f32	s16, s2, s2
    2b78:	00000416 	andeq	r0, r0, r6, lsl r4
    2b7c:	00000d75 	andeq	r0, r0, r5, ror sp
    2b80:	61011f00 	tstvs	r1, r0, lsl #30
    2b84:	0100000b 	tsteq	r0, fp
    2b88:	01060178 	tsteq	r6, r8, ror r1
	...
    2b94:	0e969c01 	cdpeq	12, 9, cr9, cr6, cr1, {0}
    2b98:	702b0000 	eorvc	r0, fp, r0
    2b9c:	01006469 	tsteq	r0, r9, ror #8
    2ba0:	1d1b0178 	ldfnes	f0, [fp, #-480]	; 0xfffffe20
    2ba4:	93000001 	movwls	r0, #1
    2ba8:	2000000d 	andcs	r0, r0, sp
    2bac:	00000bc8 	andeq	r0, r0, r8, asr #23
    2bb0:	26017801 	strcs	r7, [r1], -r1, lsl #16
    2bb4:	0000011d 	andeq	r0, r0, sp, lsl r1
    2bb8:	00000da6 	andeq	r0, r0, r6, lsr #27
    2bbc:	01006923 	tsteq	r0, r3, lsr #18
    2bc0:	160e017c 			; <UNDEFINED> instruction: 0x160e017c
    2bc4:	01000004 	tsteq	r0, r4
    2bc8:	006a2250 	rsbeq	r2, sl, r0, asr r2
    2bcc:	07017d01 	streq	r7, [r1, -r1, lsl #26]
    2bd0:	0000008d 	andeq	r0, r0, sp, lsl #1
    2bd4:	00000dc4 	andeq	r0, r0, r4, asr #27
    2bd8:	19011f00 	stmdbne	r1, {r8, r9, sl, fp, ip}
    2bdc:	0100000b 	tsteq	r0, fp
    2be0:	01060166 	tsteq	r6, r6, ror #2
    2be4:	0000113c 	andeq	r1, r0, ip, lsr r1
    2be8:	00001170 	andeq	r1, r0, r0, ror r1
    2bec:	0edb9c01 	cdpeq	12, 13, cr9, cr11, cr1, {0}
    2bf0:	c8340000 	ldmdagt	r4!, {}	; <UNPREDICTABLE>
    2bf4:	0100000b 	tsteq	r0, fp
    2bf8:	1d1a0166 	ldfnes	f0, [sl, #-408]	; 0xfffffe68
    2bfc:	01000001 	tsteq	r0, r1
    2c00:	006a2250 	rsbeq	r2, sl, r0, asr r2
    2c04:	06016a01 	streq	r6, [r1], -r1, lsl #20
    2c08:	0000008d 	andeq	r0, r0, sp, lsl #1
    2c0c:	00000de2 	andeq	r0, r0, r2, ror #27
    2c10:	01006923 	tsteq	r0, r3, lsr #18
    2c14:	160e016b 	strne	r0, [lr], -fp, ror #2
    2c18:	01000004 	tsteq	r0, r4
    2c1c:	012e0052 	qsubeq	r0, r2, lr
    2c20:	00000bdc 	ldrdeq	r0, [r0], -ip
    2c24:	06015901 	streq	r5, [r1], -r1, lsl #18
    2c28:	0f110101 	svceq	0x00110101
    2c2c:	c8350000 	ldmdagt	r5!, {}	; <UNPREDICTABLE>
    2c30:	0100000b 	tsteq	r0, fp
    2c34:	1d170159 	ldfnes	f0, [r7, #-356]	; 0xfffffe9c
    2c38:	35000001 	strcc	r0, [r0, #-1]
    2c3c:	00000bd6 	ldrdeq	r0, [r0], -r6
    2c40:	23015901 	movwcs	r5, #6401	; 0x1901
    2c44:	000000d9 	ldrdeq	r0, [r0], -r9
    2c48:	01006a24 	tsteq	r0, r4, lsr #20
    2c4c:	ef07015d 	svc	0x0007015d
    2c50:	00000000 	andeq	r0, r0, r0
    2c54:	0b54011f 	bleq	15030d8 <__ccfg+0x14e3130>
    2c58:	53010000 	movwpl	r0, #4096	; 0x1000
    2c5c:	f4010601 	vst1.8	{d0-d2}, [r1], r1
    2c60:	08000010 	stmdaeq	r0, {r4}
    2c64:	01000011 	tsteq	r0, r1, lsl r0
    2c68:	000f3c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    2c6c:	0bd62000 	bleq	ff58ac74 <_estack+0xdf585c74>
    2c70:	53010000 	movwpl	r0, #4096	; 0x1000
    2c74:	00d91401 	sbcseq	r1, r9, r1, lsl #8
    2c78:	0df50000 	ldcleq	0, cr0, [r5]
    2c7c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2c80:	000a9b01 	andeq	r9, sl, r1, lsl #22
    2c84:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    2c88:	011d0107 	tsteq	sp, r7, lsl #2
    2c8c:	14dc0000 	ldrbne	r0, [ip], #0
    2c90:	15100000 	ldrne	r0, [r0, #-0]
    2c94:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c98:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    2c9c:	000b7520 	andeq	r7, fp, r0, lsr #10
    2ca0:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    2ca4:	0002f11a 	andeq	pc, r2, sl, lsl r1	; <UNPREDICTABLE>
    2ca8:	000e0800 	andeq	r0, lr, r0, lsl #16
    2cac:	0f942000 	svceq	0x00942000
    2cb0:	2c010000 	stccs	0, cr0, [r1], {-0}
    2cb4:	011d2601 	tsteq	sp, r1, lsl #12
    2cb8:	0e260000 	cdpeq	0, 2, cr0, cr6, cr0, {0}
    2cbc:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2cc0:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    2cc4:	0004160e 	andeq	r1, r4, lr, lsl #12
    2cc8:	36500100 	ldrbcc	r0, [r0], -r0, lsl #2
    2ccc:	00000690 	muleq	r0, r0, r6
    2cd0:	01006a22 	tsteq	r0, r2, lsr #20
    2cd4:	160f013d 			; <UNDEFINED> instruction: 0x160f013d
    2cd8:	44000004 	strmi	r0, [r0], #-4
    2cdc:	0000000e 	andeq	r0, r0, lr
    2ce0:	19013700 	stmdbne	r1, {r8, r9, sl, ip, sp}
    2ce4:	0100000c 	tsteq	r0, ip
    2ce8:	010106af 	smlatbeq	r1, pc, r6, r0	; <UNPREDICTABLE>
    2cec:	00000fe3 	andeq	r0, r0, r3, ror #31
    2cf0:	6e696d38 	mcrvs	13, 3, r6, cr9, cr8, {1}
    2cf4:	1aaf0100 	bne	febc30fc <_estack+0xdebbe0fc>
    2cf8:	000000d9 	ldrdeq	r0, [r0], -r9
    2cfc:	00081b39 	andeq	r1, r8, r9, lsr fp
    2d00:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    2d04:	000000cd 	andeq	r0, r0, sp, asr #1
    2d08:	0100693a 	tsteq	r0, sl, lsr r9
    2d0c:	04160ebd 	ldreq	r0, [r6], #-3773	; 0xfffff143
    2d10:	643a0000 	ldrtvs	r0, [sl], #-0
    2d14:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    2d18:	000000d9 	ldrdeq	r0, [r0], -r9
    2d1c:	4b4f4d3b 	blmi	13d6210 <__ccfg+0x13b6268>
    2d20:	01090100 	mrseq	r0, (UNDEF: 25)
    2d24:	013c0001 	teqeq	ip, r1
    2d28:	00000c56 	andeq	r0, r0, r6, asr ip
    2d2c:	0106a701 	tsteq	r6, r1, lsl #14
	...
    2d38:	10189c01 	andsne	r9, r8, r1, lsl #24
    2d3c:	743d0000 	ldrtvc	r0, [sp], #-0
    2d40:	1fa70100 	svcne	0x00a70100
    2d44:	00000129 	andeq	r0, r0, r9, lsr #2
    2d48:	00000e6d 	andeq	r0, r0, sp, ror #28
    2d4c:	0100763d 	tsteq	r0, sp, lsr r6
    2d50:	00d927a7 	sbcseq	r2, r9, r7, lsr #15
    2d54:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
    2d58:	3c000000 	stccc	0, cr0, [r0], {-0}
    2d5c:	000ca501 	andeq	sl, ip, r1, lsl #10
    2d60:	068f0100 	streq	r0, [pc], r0, lsl #2
    2d64:	00000001 	andeq	r0, r0, r1
    2d68:	00000000 	andeq	r0, r0, r0
    2d6c:	4e9c0100 	fmlmie	f0, f4, f0
    2d70:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2d74:	01007475 	tsteq	r0, r5, ror r4
    2d78:	01291d8f 	smlawbeq	r9, pc, sp, r1	; <UNPREDICTABLE>
    2d7c:	0e930000 	cdpeq	0, 9, cr0, cr3, cr0, {0}
    2d80:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    2d84:	06930100 	ldreq	r0, [r3], r0, lsl #2
    2d88:	0000008d 	andeq	r0, r0, sp, lsl #1
    2d8c:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    2d90:	bb013c00 	bllt	51d98 <__ccfg+0x31df0>
    2d94:	0100000a 	tsteq	r0, sl
    2d98:	0001067f 	andeq	r0, r1, pc, ror r6
    2d9c:	00000000 	andeq	r0, r0, r0
    2da0:	01000000 	mrseq	r0, (UNDEF: 0)
    2da4:	0010849c 	mulseq	r0, ip, r4
    2da8:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    2dac:	1a7f0100 	bne	1fc31b4 <__ccfg+0x1fa320c>
    2db0:	00000129 	andeq	r0, r0, r9, lsr #2
    2db4:	00000ecf 	andeq	r0, r0, pc, asr #29
    2db8:	0100693e 	tsteq	r0, lr, lsr r9
    2dbc:	008d0683 	addeq	r0, sp, r3, lsl #13
    2dc0:	0ef80000 	cdpeq	0, 15, cr0, cr8, cr0, {0}
    2dc4:	3f000000 	svccc	0x00000000
    2dc8:	000bce01 	andeq	ip, fp, r1, lsl #28
    2dcc:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2dd0:	00101801 	andseq	r1, r0, r1, lsl #16
    2dd4:	00102800 	andseq	r2, r0, r0, lsl #16
    2dd8:	409c0100 	addsmi	r0, ip, r0, lsl #2
    2ddc:	00000b7a 	andeq	r0, r0, sl, ror fp
    2de0:	01145f01 	tsteq	r4, r1, lsl #30
    2de4:	00000416 	andeq	r0, r0, r6, lsl r4
    2de8:	0010c101 	andseq	ip, r0, r1, lsl #2
    2dec:	69703800 	ldmdbvs	r0!, {fp, ip, sp}^
    2df0:	5f010064 	svcpl	0x00010064
    2df4:	00011d22 	andeq	r1, r1, r2, lsr #26
    2df8:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    2dfc:	16176101 	ldrne	r6, [r7], -r1, lsl #2
    2e00:	00000004 	andeq	r0, r0, r4
    2e04:	000ac641 	andeq	ip, sl, r1, asr #12
    2e08:	029e0200 	addseq	r0, lr, #0, 4
    2e0c:	10e20101 	rscne	r0, r2, r1, lsl #2
    2e10:	e2030000 	and	r0, r3, #0
    2e14:	35000010 	strcc	r0, [r0, #-16]
    2e18:	0000078b 	andeq	r0, r0, fp, lsl #15
    2e1c:	13029e02 	movwne	r9, #11778	; 0x2e02
    2e20:	00000073 	andeq	r0, r0, r3, ror r0
    2e24:	02010200 	andeq	r0, r1, #0, 4
    2e28:	00000c0d 	andeq	r0, r0, sp, lsl #24
    2e2c:	00109842 	andseq	r9, r0, r2, asr #16
	...
    2e38:	2e9c0100 	fmlcse	f0, f4, f0
    2e3c:	43000011 	movwmi	r0, #17
    2e40:	000010aa 	andeq	r1, r0, sl, lsr #1
    2e44:	00000f16 	andeq	r0, r0, r6, lsl pc
    2e48:	0010b644 	andseq	fp, r0, r4, asr #12
    2e4c:	000f3f00 	andeq	r3, pc, r0, lsl #30
    2e50:	10984500 	addsne	r4, r8, r0, lsl #10
	...
    2e5c:	5f010000 	svcpl	0x00010000
    2e60:	10aa4314 	adcne	r4, sl, r4, lsl r3
    2e64:	0f5d0000 	svceq	0x005d0000
    2e68:	b6460000 	strblt	r0, [r6], -r0
    2e6c:	00000010 	andeq	r0, r0, r0, lsl r0
    2e70:	0f9e4200 	svceq	0x009e4200
    2e74:	10280000 	eorne	r0, r8, r0
    2e78:	10f40000 	rscsne	r0, r4, r0
    2e7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e80:	0000119a 	muleq	r0, sl, r1
    2e84:	000fad43 	andeq	sl, pc, r3, asr #26
    2e88:	000f7000 	andeq	r7, pc, r0
    2e8c:	0fb94300 	svceq	0x00b94300
    2e90:	0f830000 	svceq	0x00830000
    2e94:	c5460000 	strbgt	r0, [r6, #-0]
    2e98:	4600000f 	strmi	r0, [r0], -pc
    2e9c:	00000fcf 	andeq	r0, r0, pc, asr #31
    2ea0:	000f9e47 	andeq	r9, pc, r7, asr #28
    2ea4:	00103600 	andseq	r3, r0, r0, lsl #12
    2ea8:	00067800 	andeq	r7, r6, r0, lsl #16
    2eac:	06af0100 	strteq	r0, [pc], r0, lsl #2
    2eb0:	000fb929 	andeq	fp, pc, r9, lsr #18
    2eb4:	0fad4300 	svceq	0x00ad4300
    2eb8:	0f960000 	svceq	0x00960000
    2ebc:	78360000 	ldmdavc	r6!, {}	; <UNPREDICTABLE>
    2ec0:	44000006 	strmi	r0, [r0], #-6
    2ec4:	00000fc5 	andeq	r0, r0, r5, asr #31
    2ec8:	00000fbf 			; <UNDEFINED> instruction: 0x00000fbf
    2ecc:	000fcf46 	andeq	ip, pc, r6, asr #30
    2ed0:	0fd94800 	svceq	0x00d94800
    2ed4:	10d20000 	sbcsne	r0, r2, r0
    2ed8:	00000000 	andeq	r0, r0, r0
    2edc:	0edb4200 	cdpeq	2, 13, cr4, cr11, cr0, {0}
    2ee0:	11080000 	mrsne	r0, (UNDEF: 8)
    2ee4:	113c0000 	teqne	ip, r0
    2ee8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2eec:	000011ee 	andeq	r1, r0, lr, ror #3
    2ef0:	000eeb43 	andeq	lr, lr, r3, asr #22
    2ef4:	000fdd00 	andeq	sp, pc, r0, lsl #26
    2ef8:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    2efc:	0ffb0000 	svceq	0x00fb0000
    2f00:	05460000 	strbeq	r0, [r6, #-0]
    2f04:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    2f08:	00000edb 	ldrdeq	r0, [r0], -fp
    2f0c:	0000111a 	andeq	r1, r0, sl, lsl r1
    2f10:	00001122 	andeq	r1, r0, r2, lsr #2
    2f14:	06015901 	streq	r5, [r1], -r1, lsl #18
    2f18:	000eeb43 	andeq	lr, lr, r3, asr #22
    2f1c:	00101900 	andseq	r1, r0, r0, lsl #18
    2f20:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    2f24:	102c0000 	eorne	r0, ip, r0
    2f28:	05460000 	strbeq	r0, [r6, #-0]
    2f2c:	0000000f 	andeq	r0, r0, pc
    2f30:	08804a00 	stmeq	r0, {r9, fp, lr}
    2f34:	13440000 	movtne	r0, #16384	; 0x4000
    2f38:	138c0000 	orrne	r0, ip, #0
    2f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f40:	00089043 	andeq	r9, r8, r3, asr #32
    2f44:	00103f00 	andseq	r3, r0, r0, lsl #30
    2f48:	08804900 	stmeq	r0, {r8, fp, lr}
    2f4c:	13500000 	cmpne	r0, #0
    2f50:	13580000 	cmpne	r8, #0
    2f54:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2f58:	90430603 	subls	r0, r3, r3, lsl #12
    2f5c:	5d000008 	stcpl	0, cr0, [r0, #-32]	; 0xffffffe0
    2f60:	00000010 	andeq	r0, r0, r0, lsl r0
    2f64:	13330000 	teqne	r3, #0
    2f68:	00030000 	andeq	r0, r3, r0
    2f6c:	00000cc8 	andeq	r0, r0, r8, asr #25
    2f70:	01570104 	cmpeq	r7, r4, lsl #2
    2f74:	f40c0000 	vst4.8	{d0-d3}, [ip], r0
    2f78:	a800000c 	stmdage	r0, {r2, r3}
    2f7c:	80000003 	andhi	r0, r0, r3
    2f80:	00000008 	andeq	r0, r0, r8
    2f84:	11000000 	mrsne	r0, (UNDEF: 0)
    2f88:	0200002a 	andeq	r0, r0, #42	; 0x2a
    2f8c:	039c0601 	orrseq	r0, ip, #1048576	; 0x100000
    2f90:	02020000 	andeq	r0, r2, #0
    2f94:	0003f805 	andeq	pc, r3, r5, lsl #16
    2f98:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2f9c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    2fa0:	ab050802 	blge	144fb0 <__ccfg+0x125008>
    2fa4:	03000000 	movweq	r0, #0
    2fa8:	00002251 	andeq	r2, r0, r1, asr r2
    2fac:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    2fb0:	02000000 	andeq	r0, r0, #0
    2fb4:	039a0801 	orrseq	r0, sl, #65536	; 0x10000
    2fb8:	3f030000 	svccc	0x00030000
    2fbc:	02000021 	andeq	r0, r0, #33	; 0x21
    2fc0:	00601931 	rsbeq	r1, r0, r1, lsr r9
    2fc4:	02020000 	andeq	r0, r2, #0
    2fc8:	00025807 	andeq	r5, r2, r7, lsl #16
    2fcc:	18080300 	stmdane	r8, {r8, r9}
    2fd0:	34020000 	strcc	r0, [r2], #-0
    2fd4:	00007319 	andeq	r7, r0, r9, lsl r3
    2fd8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2fdc:	00000085 	andeq	r0, r0, r5, lsl #1
    2fe0:	80070802 	andhi	r0, r7, r2, lsl #16
    2fe4:	04000000 	streq	r0, [r0], #-0
    2fe8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2fec:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2ff0:	00008a07 	andeq	r8, r0, r7, lsl #20
    2ff4:	0b9b0300 	bleq	fe6c3bfc <_estack+0xde6bebfc>
    2ff8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2ffc:	00009b1b 	andeq	r9, r0, fp, lsl fp
    3000:	0ab10500 	beq	fec44408 <_estack+0xdec3f408>
    3004:	0d040000 	stceq	0, cr0, [r4, #-0]
    3008:	0000b300 	andeq	fp, r0, r0, lsl #6
    300c:	0c510600 	mrrceq	6, 0, r0, r1, cr0
    3010:	00b30000 	adcseq	r0, r3, r0
    3014:	01000000 	mrseq	r0, (UNDEF: 0)
    3018:	03040700 	movweq	r0, #18176	; 0x4700
    301c:	00000ab3 			; <UNDEFINED> instruction: 0x00000ab3
    3020:	8f186303 	svchi	0x00186303
    3024:	03000000 	movweq	r0, #0
    3028:	00000423 	andeq	r0, r0, r3, lsr #8
    302c:	41122604 	tstmi	r2, r4, lsl #12
    3030:	03000000 	movweq	r0, #0
    3034:	00001615 	andeq	r1, r0, r5, lsl r6
    3038:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    303c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3040:	000000cd 	andeq	r0, r0, sp, asr #1
    3044:	0000cd09 	andeq	ip, r0, r9, lsl #26
    3048:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    304c:	2b040000 	blcs	103054 <__ccfg+0xe30ac>
    3050:	00004112 	andeq	r4, r0, r2, lsl r1
    3054:	00e30900 	rsceq	r0, r3, r0, lsl #18
    3058:	e3080000 	movw	r0, #32768	; 0x8000
    305c:	03000000 	movweq	r0, #0
    3060:	00001666 	andeq	r1, r0, r6, ror #12
    3064:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    3068:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    306c:	000000f9 	strdeq	r0, [r0], -r9
    3070:	00028b03 	andeq	r8, r2, r3, lsl #22
    3074:	122d0400 	eorne	r0, sp, #0, 8
    3078:	00000067 	andeq	r0, r0, r7, rrx
    307c:	0007bc03 	andeq	fp, r7, r3, lsl #24
    3080:	102e0400 	eorne	r0, lr, r0, lsl #8
    3084:	00000122 	andeq	r0, r0, r2, lsr #2
    3088:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    308c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    3090:	b6093204 	strlt	r3, [r9], -r4, lsl #4
    3094:	0c000001 	stceq	0, cr0, [r0], {1}
    3098:	000002a6 	andeq	r0, r0, r6, lsr #5
    309c:	e3073404 	movw	r3, #29700	; 0x7404
    30a0:	01000000 	mrseq	r0, (UNDEF: 0)
    30a4:	0c000701 	stceq	7, cr0, [r0], {1}
    30a8:	000000a4 	andeq	r0, r0, r4, lsr #1
    30ac:	e3033504 	movw	r3, #13572	; 0x3504
    30b0:	01000000 	mrseq	r0, (UNDEF: 0)
    30b4:	0c000601 	stceq	6, cr0, [r0], {1}
    30b8:	00000274 	andeq	r0, r0, r4, ror r2
    30bc:	e3033604 	movw	r3, #13828	; 0x3604
    30c0:	01000000 	mrseq	r0, (UNDEF: 0)
    30c4:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    30c8:	00000432 	andeq	r0, r0, r2, lsr r4
    30cc:	e3033704 	movw	r3, #14084	; 0x3704
    30d0:	01000000 	mrseq	r0, (UNDEF: 0)
    30d4:	0c000401 	cfstrseq	mvf0, [r0], {1}
    30d8:	0000042b 	andeq	r0, r0, fp, lsr #8
    30dc:	e3033804 	movw	r3, #14340	; 0x3804
    30e0:	01000000 	mrseq	r0, (UNDEF: 0)
    30e4:	0d000004 	stceq	0, cr0, [r0, #-16]
    30e8:	0000041c 	andeq	r0, r0, ip, lsl r4
    30ec:	e3073a04 	movw	r3, #31236	; 0x7a04
    30f0:	01000000 	mrseq	r0, (UNDEF: 0)
    30f4:	00004c0d 	andeq	r4, r0, sp, lsl #24
    30f8:	033c0400 	teqeq	ip, #0, 8
    30fc:	000000e3 	andeq	r0, r0, r3, ror #1
    3100:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    3104:	3d040000 	stccc	0, cr0, [r4, #-0]
    3108:	0000e303 	andeq	lr, r0, r3, lsl #6
    310c:	460d0300 	strmi	r0, [sp], -r0, lsl #6
    3110:	04000001 	streq	r0, [r0], #-1
    3114:	00f9083f 	rscseq	r0, r9, pc, lsr r8
    3118:	00040000 	andeq	r0, r4, r0
    311c:	00045b03 	andeq	r5, r4, r3, lsl #22
    3120:	03410400 	movteq	r0, #5120	; 0x1400
    3124:	00000128 	andeq	r0, r0, r8, lsr #2
    3128:	0001b609 	andeq	fp, r1, r9, lsl #12
    312c:	029a0e00 	addseq	r0, sl, #0, 28
    3130:	43040000 	movwmi	r0, #16384	; 0x4000
    3134:	0001c21a 	andeq	ip, r1, sl, lsl r2
    3138:	0e010100 	adfeqs	f0, f1, f0
    313c:	00000306 	andeq	r0, r0, r6, lsl #6
    3140:	e30e4504 	movw	r4, #58628	; 0xe504
    3144:	01000001 	tsteq	r0, r1
    3148:	e9040a01 	stmdb	r4, {r0, r9, fp}
    314c:	02000001 	andeq	r0, r0, #1
    3150:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
    3154:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    3158:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    315c:	00000314 	andeq	r0, r0, r4, lsl r3
    3160:	e31e4504 	tst	lr, #4, 10	; 0x1000000
    3164:	01000001 	tsteq	r0, r1
    3168:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    316c:	0234098f 	eorseq	r0, r4, #2342912	; 0x23c000
    3170:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    3174:	05000002 	streq	r0, [r0, #-2]
    3178:	00670b90 	mlseq	r7, r0, fp, r0
    317c:	0d000000 	stceq	0, cr0, [r0, #-0]
    3180:	00000647 	andeq	r0, r0, r7, asr #12
    3184:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    3188:	04000000 	streq	r0, [r0], #-0
    318c:	0004a80d 	andeq	sl, r4, sp, lsl #16
    3190:	10920500 	addsne	r0, r2, r0, lsl #10
    3194:	000000ef 	andeq	r0, r0, pc, ror #1
    3198:	39030006 	stmdbcc	r3, {r1, r2}
    319c:	05000004 	streq	r0, [r0, #-4]
    31a0:	02030393 	andeq	r0, r3, #1275068418	; 0x4c000002
    31a4:	340f0000 	strcc	r0, [pc], #-0	; 31ac <__exidx_end+0x2a4>
    31a8:	4b000002 	blmi	31b8 <__exidx_end+0x2b0>
    31ac:	10000002 	andne	r0, r0, r2
    31b0:	00420e00 	subeq	r0, r2, r0, lsl #28
    31b4:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    31b8:	0002400f 	andeq	r4, r2, pc
    31bc:	0a010100 	beq	435c4 <__ccfg+0x2361c>
    31c0:	0000f404 	andeq	pc, r0, r4, lsl #8
    31c4:	06010b00 	streq	r0, [r1], -r0, lsl #22
    31c8:	02890991 	addeq	r0, r9, #2375680	; 0x244000
    31cc:	9b0c0000 	blls	3031d4 <__ccfg+0x2e322c>
    31d0:	06000004 	streq	r0, [r0], -r4
    31d4:	00e30793 	smlaleq	r0, r3, r3, r7
    31d8:	07010000 	streq	r0, [r1, -r0]
    31dc:	3d0c0001 	stccc	0, cr0, [ip, #-4]
    31e0:	06000000 	streq	r0, [r0], -r0
    31e4:	00e30394 	smlaleq	r0, r3, r4, r3
    31e8:	01010000 	mrseq	r0, (UNDEF: 1)
    31ec:	03000000 	movweq	r0, #0
    31f0:	0000026b 	andeq	r0, r0, fp, ror #4
    31f4:	5f039606 	svcpl	0x00039606
    31f8:	08000002 	stmdaeq	r0, {r1}
    31fc:	00000289 	andeq	r0, r0, r9, lsl #5
    3200:	0002950f 	andeq	r9, r2, pc, lsl #10
    3204:	0002a500 	andeq	sl, r2, r0, lsl #10
    3208:	08001000 	stmdaeq	r0, {ip}
    320c:	0000029a 	muleq	r0, sl, r2
    3210:	0002d00e 	andeq	sp, r2, lr
    3214:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    3218:	000002a5 	andeq	r0, r0, r5, lsr #5
    321c:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    3220:	c3000000 	movwgt	r0, #0
    3224:	10000002 	andne	r0, r0, r2
    3228:	02b80800 	adcseq	r0, r8, #0, 16
    322c:	8c0e0000 	stchi	0, cr0, [lr], {-0}
    3230:	07000003 	streq	r0, [r0, -r3]
    3234:	02c31306 	sbceq	r1, r3, #402653184	; 0x18000000
    3238:	01010000 	mrseq	r0, (UNDEF: 1)
    323c:	0001260e 	andeq	r2, r1, lr, lsl #12
    3240:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    3244:	000000f9 	strdeq	r0, [r0], -r9
    3248:	b5110101 	ldrlt	r0, [r1, #-257]	; 0xfffffeff
    324c:	08000004 	stmdaeq	r0, {r2}
    3250:	f110016e 			; <UNDEFINED> instruction: 0xf110016e
    3254:	0a000002 	beq	3264 <__exidx_end+0x35c>
    3258:	0002f704 	andeq	pc, r2, r4, lsl #14
    325c:	03011200 	movweq	r1, #4608	; 0x1200
    3260:	13000003 	movwne	r0, #3
    3264:	000000cd 	andeq	r0, r0, sp, asr #1
    3268:	01f00f00 	mvnseq	r0, r0, lsl #30
    326c:	030e0000 	movweq	r0, #57344	; 0xe000
    3270:	00100000 	andseq	r0, r0, r0
    3274:	00030308 	andeq	r0, r3, r8, lsl #6
    3278:	046b1400 	strbteq	r1, [fp], #-1024	; 0xfffffc00
    327c:	7f080000 	svcvc	0x00080000
    3280:	030e1601 	movweq	r1, #58881	; 0xe601
    3284:	01010000 	mrseq	r0, (UNDEF: 1)
    3288:	00038414 	andeq	r8, r3, r4, lsl r4
    328c:	01820800 	orreq	r0, r2, r0, lsl #16
    3290:	00010514 	andeq	r0, r1, r4, lsl r5
    3294:	0b010100 	bleq	4369c <__ccfg+0x236f4>
    3298:	09080904 	stmdbeq	r8, {r2, r8, fp}
    329c:	00000355 	andeq	r0, r0, r5, asr r3
    32a0:	000f130d 	andeq	r1, pc, sp, lsl #6
    32a4:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    32a8:	000000cd 	andeq	r0, r0, sp, asr #1
    32ac:	0e910d00 	cdpeq	13, 9, cr0, cr1, cr0, {0}
    32b0:	10090000 	andne	r0, r9, r0
    32b4:	0000cd03 	andeq	ip, r0, r3, lsl #26
    32b8:	03000200 	movweq	r0, #512	; 0x200
    32bc:	00000f01 	andeq	r0, r0, r1, lsl #30
    32c0:	31031109 	tstcc	r3, r9, lsl #2
    32c4:	0b000003 	bleq	32d8 <__exidx_end+0x3d0>
    32c8:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    32cc:	000003d3 	ldrdeq	r0, [r0], -r3
    32d0:	000ef10d 	andeq	pc, lr, sp, lsl #2
    32d4:	08170900 	ldmdaeq	r7, {r8, fp}
    32d8:	000003ed 	andeq	r0, r0, sp, ror #7
    32dc:	0df90d00 	ldcleq	13, cr0, [r9]
    32e0:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    32e4:	00040808 	andeq	r0, r4, r8, lsl #16
    32e8:	610d0400 	tstvs	sp, r0, lsl #8
    32ec:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    32f0:	043e0819 	ldrteq	r0, [lr], #-2073	; 0xfffff7e7
    32f4:	0d080000 	stceq	0, cr0, [r8, #-0]
    32f8:	00000eaf 	andeq	r0, r0, pc, lsr #29
    32fc:	59081a09 	stmdbpl	r8, {r0, r3, r9, fp, ip}
    3300:	0c000004 	stceq	0, cr0, [r0], {4}
    3304:	000e200d 	andeq	r2, lr, sp
    3308:	081b0900 	ldmdaeq	fp, {r8, fp}
    330c:	0000046f 	andeq	r0, r0, pc, ror #8
    3310:	0ef90d10 	mrceq	13, 7, r0, cr9, cr0, {0}
    3314:	1c090000 	stcne	0, cr0, [r9], {-0}
    3318:	00046f08 	andeq	r6, r4, r8, lsl #30
    331c:	380d1400 	stmdacc	sp, {sl, ip}
    3320:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3324:	046f081d 	strbteq	r0, [pc], #-2077	; 332c <__exidx_end+0x424>
    3328:	0d180000 	ldceq	0, cr0, [r8, #-0]
    332c:	00000d6b 	andeq	r0, r0, fp, ror #26
    3330:	81061e09 	tsthi	r6, r9, lsl #28
    3334:	1c000000 	stcne	0, cr0, [r0], {-0}
    3338:	81011500 	tsthi	r1, r0, lsl #10
    333c:	ed000000 	stc	0, cr0, [r0, #-0]
    3340:	13000003 	movwne	r0, #3
    3344:	00000081 	andeq	r0, r0, r1, lsl #1
    3348:	00008113 	andeq	r8, r0, r3, lsl r1
    334c:	00b51300 	adcseq	r1, r5, r0, lsl #6
    3350:	0a000000 	beq	3358 <__exidx_end+0x450>
    3354:	0003d304 	andeq	sp, r3, r4, lsl #6
    3358:	81011500 	tsthi	r1, r0, lsl #10
    335c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3360:	13000004 	movwne	r0, #4
    3364:	00000081 	andeq	r0, r0, r1, lsl #1
    3368:	00008113 	andeq	r8, r0, r3, lsl r1
    336c:	040a0000 	streq	r0, [sl], #-0
    3370:	000003f3 	strdeq	r0, [r0], -r3
    3374:	00810115 	addeq	r0, r1, r5, lsl r1
    3378:	04320000 	ldrteq	r0, [r2], #-0
    337c:	81130000 	tsthi	r3, r0
    3380:	13000000 	movwne	r0, #0
    3384:	00000116 	andeq	r0, r0, r6, lsl r1
    3388:	00008113 	andeq	r8, r0, r3, lsl r1
    338c:	04321300 	ldrteq	r1, [r2], #-768	; 0xfffffd00
    3390:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3394:	00000004 	andeq	r0, r0, r4
    3398:	0081040a 	addeq	r0, r1, sl, lsl #8
    339c:	040a0000 	streq	r0, [sl], #-0
    33a0:	00000355 	andeq	r0, r0, r5, asr r3
    33a4:	040e040a 	streq	r0, [lr], #-1034	; 0xfffffbf6
    33a8:	01150000 	tsteq	r5, r0
    33ac:	00000081 	andeq	r0, r0, r1, lsl #1
    33b0:	00000459 	andeq	r0, r0, r9, asr r4
    33b4:	00011613 	andeq	r1, r1, r3, lsl r6
    33b8:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    33bc:	0a000000 	beq	33c4 <__exidx_end+0x4bc>
    33c0:	00044404 	andeq	r4, r4, r4, lsl #8
    33c4:	81011500 	tsthi	r1, r0, lsl #10
    33c8:	6f000000 	svcvs	0x00000000
    33cc:	13000004 	movwne	r0, #4
    33d0:	00000116 	andeq	r0, r0, r6, lsl r1
    33d4:	5f040a00 	svcpl	0x00040a00
    33d8:	03000004 	movweq	r0, #4
    33dc:	00000d56 	andeq	r0, r0, r6, asr sp
    33e0:	61031f09 	tstvs	r3, r9, lsl #30
    33e4:	08000003 	stmdaeq	r0, {r0, r1}
    33e8:	00000475 	andeq	r0, r0, r5, ror r4
    33ec:	000db616 	andeq	fp, sp, r6, lsl r6
    33f0:	24090800 	strcs	r0, [r9], #-2048	; 0xfffff800
    33f4:	0004ae08 	andeq	sl, r4, r8, lsl #28
    33f8:	0d470d00 	stcleq	13, cr0, [r7, #-0]
    33fc:	25090000 	strcs	r0, [r9, #-0]
    3400:	0004ae18 	andeq	sl, r4, r8, lsl lr
    3404:	ca0d0000 	bgt	34340c <__ccfg+0x323464>
    3408:	0900000c 	stmdbeq	r0, {r2, r3}
    340c:	04ae0626 	strteq	r0, [lr], #1574	; 0x626
    3410:	00040000 	andeq	r0, r4, r0
    3414:	0486040a 	streq	r0, [r6], #1034	; 0x40a
    3418:	c4030000 	strgt	r0, [r3], #-0
    341c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3420:	04861e29 	streq	r1, [r6], #3625	; 0xe29
    3424:	23030000 	movwcs	r0, #12288	; 0x3000
    3428:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    342c:	04861e2a 	streq	r1, [r6], #3626	; 0xe2a
    3430:	020b0000 	andeq	r0, fp, #0
    3434:	36023f09 	strcc	r3, [r2], -r9, lsl #30
    3438:	0c000005 	stceq	0, cr0, [r0], {5}
    343c:	00000e96 	muleq	r0, r6, lr
    3440:	cd094009 	stcgt	0, cr4, [r9, #-36]	; 0xffffffdc
    3444:	02000000 	andeq	r0, r0, #0
    3448:	0c000f01 	stceq	15, cr0, [r0], {1}
    344c:	00000f75 	andeq	r0, r0, r5, ror pc
    3450:	cd044109 	stfgts	f4, [r4, #-36]	; 0xffffffdc
    3454:	02000000 	andeq	r0, r0, #0
    3458:	0c000e01 	stceq	14, cr0, [r0], {1}
    345c:	00000de6 	andeq	r0, r0, r6, ror #27
    3460:	cd044209 	sfmgt	f4, 4, [r4, #-36]	; 0xffffffdc
    3464:	02000000 	andeq	r0, r0, #0
    3468:	0c000d01 	stceq	13, cr0, [r0], {1}
    346c:	00000eb7 			; <UNDEFINED> instruction: 0x00000eb7
    3470:	cd044309 	stcgt	3, cr4, [r4, #-36]	; 0xffffffdc
    3474:	02000000 	andeq	r0, r0, #0
    3478:	0c000607 	stceq	6, cr0, [r0], {7}
    347c:	00000f31 	andeq	r0, r0, r1, lsr pc
    3480:	cd044409 	cfstrsgt	mvf4, [r4, #-36]	; 0xffffffdc
    3484:	02000000 	andeq	r0, r0, #0
    3488:	0c000303 	stceq	3, cr0, [r0], {3}
    348c:	00000e83 	andeq	r0, r0, r3, lsl #29
    3490:	cd044509 	cfstr32gt	mvfx4, [r4, #-36]	; 0xffffffdc
    3494:	02000000 	andeq	r0, r0, #0
    3498:	00000003 	andeq	r0, r0, r3
    349c:	3d090217 	sfmcc	f0, 4, [r9, #-92]	; 0xffffffa4
    34a0:	00055609 	andeq	r5, r5, r9, lsl #12
    34a4:	0ded1800 	stcleq	8, cr1, [sp]
    34a8:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    34ac:	0000cd07 	andeq	ip, r0, r7, lsl #26
    34b0:	00621900 	rsbeq	r1, r2, r0, lsl #18
    34b4:	cc044609 	stcgt	6, cr4, [r4], {9}
    34b8:	00000004 	andeq	r0, r0, r4
    34bc:	000ccf03 	andeq	ip, ip, r3, lsl #30
    34c0:	03470900 	movteq	r0, #30976	; 0x7900
    34c4:	00000536 	andeq	r0, r0, r6, lsr r5
    34c8:	50090817 	andpl	r0, r9, r7, lsl r8
    34cc:	00058405 	andeq	r8, r5, r5, lsl #8
    34d0:	0f571800 	svceq	0x00571800
    34d4:	51090000 	mrspl	r0, (UNDEF: 9)
    34d8:	0004b410 	andeq	fp, r4, r0, lsl r4
    34dc:	0e451800 	cdpeq	8, 4, cr1, cr5, cr0, {0}
    34e0:	52090000 	andpl	r0, r9, #0
    34e4:	0003550b 	andeq	r5, r3, fp, lsl #10
    34e8:	66160000 	ldrvs	r0, [r6], -r0
    34ec:	0c00000f 	stceq	0, cr0, [r0], {15}
    34f0:	b7084c09 	strlt	r4, [r8, -r9, lsl #24]
    34f4:	1a000005 	bne	3510 <__exidx_end+0x608>
    34f8:	58090075 	stmdapl	r9, {r0, r2, r4, r5, r6}
    34fc:	00056207 	andeq	r6, r5, r7, lsl #4
    3500:	380d0000 	stmdacc	sp, {}	; <UNPREDICTABLE>
    3504:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    3508:	00cd0763 	sbceq	r0, sp, r3, ror #14
    350c:	0d080000 	stceq	0, cr0, [r8, #-0]
    3510:	00000f18 	andeq	r0, r0, r8, lsl pc
    3514:	56106809 	ldrpl	r6, [r0], -r9, lsl #16
    3518:	0a000005 	beq	3534 <__exidx_end+0x62c>
    351c:	0dd20300 	ldcleq	3, cr0, [r2]
    3520:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    3524:	0005841f 	andeq	r8, r5, pc, lsl r4
    3528:	090c0b00 	stmdbeq	ip, {r8, r9, fp}
    352c:	05e7097b 	strbeq	r0, [r7, #2427]!	; 0x97b
    3530:	310d0000 	mrscc	r0, (UNDEF: 13)
    3534:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3538:	04c0117f 	strbeq	r1, [r0], #383	; 0x17f
    353c:	0d000000 	stceq	0, cr0, [r0, #-0]
    3540:	00000ee6 	andeq	r0, r0, r6, ror #29
    3544:	56118309 	ldrpl	r8, [r1], -r9, lsl #6
    3548:	08000005 	stmdaeq	r0, {r0, r2}
    354c:	0e730300 	cdpeq	3, 7, cr0, cr3, cr0, {0}
    3550:	92090000 	andls	r0, r9, #0
    3554:	0005c303 	andeq	ip, r5, r3, lsl #6
    3558:	04a01400 	strteq	r1, [r0], #1024	; 0x400
    355c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    3560:	00f90e02 	rscseq	r0, r9, r2, lsl #28
    3564:	01010000 	mrseq	r0, (UNDEF: 1)
    3568:	0308081b 	movweq	r0, #34843	; 0x881b
    356c:	06290903 	strteq	r0, [r9], -r3, lsl #18
    3570:	491c0000 	ldmdbmi	ip, {}	; <UNPREDICTABLE>
    3574:	08000022 	stmdaeq	r0, {r1, r5}
    3578:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    357c:	00000000 	andeq	r0, r0, r0
    3580:	0005991c 	andeq	r9, r5, ip, lsl r9
    3584:	03080800 	movweq	r0, #34816	; 0x8800
    3588:	00010a08 	andeq	r0, r1, r8, lsl #20
    358c:	11000400 	tstne	r0, r0, lsl #8
    3590:	0000024b 	andeq	r0, r0, fp, asr #4
    3594:	03030908 	movweq	r0, #14600	; 0x3908
    3598:	00000602 	andeq	r0, r0, r2, lsl #12
    359c:	0004d21d 	andeq	sp, r4, sp, lsl r2
    35a0:	0b083000 	bleq	20f5a8 <__ccfg+0x1ef600>
    35a4:	06990803 	ldreq	r0, [r9], r3, lsl #16
    35a8:	bd1c0000 	ldclt	0, cr0, [ip, #-0]
    35ac:	08000004 	stmdaeq	r0, {r2}
    35b0:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    35b4:	00000000 	andeq	r0, r0, r0
    35b8:	0002b71c 	andeq	fp, r2, ip, lsl r7
    35bc:	03150800 	tsteq	r5, #0, 16
    35c0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    35c4:	b81c0200 	ldmdalt	ip, {r9}
    35c8:	08000004 	stmdaeq	r0, {r2}
    35cc:	e40b0316 	str	r0, [fp], #-790	; 0xfffffcea
    35d0:	04000002 	streq	r0, [r0], #-2
    35d4:	000f941c 	andeq	r9, pc, ip, lsl r4	; <UNPREDICTABLE>
    35d8:	03170800 	tsteq	r7, #0, 16
    35dc:	00010a09 	andeq	r0, r1, r9, lsl #20
    35e0:	641c0800 	ldrvs	r0, [ip], #-2048	; 0xfffff800
    35e4:	08000004 	stmdaeq	r0, {r2}
    35e8:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    35ec:	0c000006 	stceq	0, cr0, [r0], {6}
    35f0:	0002b21c 	andeq	fp, r2, ip, lsl r2
    35f4:	03190800 	tsteq	r9, #0, 16
    35f8:	0006a915 	andeq	sl, r6, r5, lsl r9
    35fc:	0f002c00 	svceq	0x00002c00
    3600:	00000629 	andeq	r0, r0, r9, lsr #12
    3604:	000006a9 	andeq	r0, r0, r9, lsr #13
    3608:	0000881e 	andeq	r8, r0, lr, lsl r8
    360c:	0a000300 	beq	4214 <__exidx_end+0x130c>
    3610:	00063604 	andeq	r3, r6, r4, lsl #12
    3614:	04dd1100 	ldrbeq	r1, [sp], #256	; 0x100
    3618:	1c080000 	stcne	0, cr0, [r8], {-0}
    361c:	06361b03 	ldrteq	r1, [r6], -r3, lsl #22
    3620:	7a140000 	bvc	503628 <__ccfg+0x4e3680>
    3624:	08000003 	stmdaeq	r0, {r0, r1}
    3628:	cb14031e 	blgt	5042a8 <__ccfg+0x4e4300>
    362c:	01000006 	tsteq	r0, r6
    3630:	af040a01 	svcge	0x00040a01
    3634:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    3638:	0000050b 	andeq	r0, r0, fp, lsl #10
    363c:	cd131d0a 	ldcgt	13, cr1, [r3, #-40]	; 0xffffffd8
    3640:	01000000 	mrseq	r0, (UNDEF: 0)
    3644:	07750e01 	ldrbeq	r0, [r5, -r1, lsl #28]!
    3648:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    364c:	0000de1a 	andeq	sp, r0, sl, lsl lr
    3650:	0e010100 	adfeqs	f0, f1, f0
    3654:	00000905 	andeq	r0, r0, r5, lsl #18
    3658:	de241e0a 	cdple	14, 2, cr1, cr4, cr10, {0}
    365c:	01000000 	mrseq	r0, (UNDEF: 0)
    3660:	06340e01 	ldrteq	r0, [r4], -r1, lsl #28
    3664:	220a0000 	andcs	r0, sl, #0
    3668:	0006cb14 	andeq	ip, r6, r4, lsl fp
    366c:	03010100 	movweq	r0, #4352	; 0x1100
    3670:	00000d4c 	andeq	r0, r0, ip, asr #26
    3674:	150f0e0b 	strne	r0, [pc, #-3595]	; 2871 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11d>
    3678:	0a000007 	beq	369c <__exidx_end+0x794>
    367c:	00071b04 	andeq	r1, r7, r4, lsl #22
    3680:	81011500 	tsthi	r1, r0, lsl #10
    3684:	30000000 	andcc	r0, r0, r0
    3688:	13000007 	movwne	r0, #7
    368c:	00000081 	andeq	r0, r0, r1, lsl #1
    3690:	00011613 	andeq	r1, r1, r3, lsl r6
    3694:	400f0000 	andmi	r0, pc, r0
    3698:	40000007 	andmi	r0, r0, r7
    369c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    36a0:	00000088 	andeq	r0, r0, r8, lsl #1
    36a4:	040a0007 	streq	r0, [sl], #-7
    36a8:	000005e7 	andeq	r0, r0, r7, ror #11
    36ac:	000e011f 	andeq	r0, lr, pc, lsl r1
    36b0:	150d0c00 	strne	r0, [sp, #-3072]	; 0xfffff400
    36b4:	00000730 	andeq	r0, r0, r0, lsr r7
    36b8:	00000305 	andeq	r0, r0, r5, lsl #6
    36bc:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
    36c0:	68000007 	stmdavs	r0, {r0, r1, r2}
    36c4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    36c8:	00000088 	andeq	r0, r0, r8, lsl #1
    36cc:	881f0002 	ldmdahi	pc, {r1}	; <UNPREDICTABLE>
    36d0:	0c00000e 	stceq	0, cr0, [r0], {14}
    36d4:	07581413 	smmlaeq	r8, r3, r4, r1
    36d8:	03050000 	movweq	r0, #20480	; 0x5000
    36dc:	00000000 	andeq	r0, r0, r0
    36e0:	00078a0f 	andeq	r8, r7, pc, lsl #20
    36e4:	00078a00 	andeq	r8, r7, r0, lsl #20
    36e8:	00881e00 	addeq	r1, r8, r0, lsl #28
    36ec:	00020000 	andeq	r0, r2, r0
    36f0:	04c0040a 	strbeq	r0, [r0], #1034	; 0x40a
    36f4:	ae1f0000 	cdpge	0, 1, cr0, cr15, cr0, {0}
    36f8:	0c00000d 	stceq	0, cr0, [r0], {13}
    36fc:	077a1319 			; <UNDEFINED> instruction: 0x077a1319
    3700:	03050000 	movweq	r0, #20480	; 0x5000
    3704:	00000000 	andeq	r0, r0, r0
    3708:	0000810f 	andeq	r8, r0, pc, lsl #2
    370c:	0007b200 	andeq	fp, r7, r0, lsl #4
    3710:	00881e00 	addeq	r1, r8, r0, lsl #28
    3714:	00020000 	andeq	r0, r2, r0
    3718:	000d861f 	andeq	r8, sp, pc, lsl r6
    371c:	0f1e0c00 	svceq	0x001e0c00
    3720:	000007a2 	andeq	r0, r0, r2, lsr #15
    3724:	00000305 	andeq	r0, r0, r5, lsl #6
    3728:	d40f0000 	strle	r0, [pc], #-0	; 3730 <__exidx_end+0x828>
    372c:	d4000007 	strle	r0, [r0], #-7
    3730:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3734:	00000088 	andeq	r0, r0, r8, lsl #1
    3738:	040a0002 	streq	r0, [sl], #-2
    373c:	00000481 	andeq	r0, r0, r1, lsl #9
    3740:	000f5e1f 	andeq	r5, pc, pc, lsl lr	; <UNPREDICTABLE>
    3744:	1b230c00 	blne	8c674c <__ccfg+0x8a67a4>
    3748:	000007c4 	andeq	r0, r0, r4, asr #15
    374c:	00000305 	andeq	r0, r0, r5, lsl #6
    3750:	01200000 			; <UNDEFINED> instruction: 0x01200000
    3754:	00000ea6 	andeq	r0, r0, r6, lsr #29
    3758:	01050d01 	tsteq	r5, r1, lsl #26
    375c:	00166401 	andseq	r6, r6, r1, lsl #8
    3760:	00166600 	andseq	r6, r6, r0, lsl #12
    3764:	219c0100 	orrscs	r0, ip, r0, lsl #2
    3768:	000d9501 	andeq	r9, sp, r1, lsl #10
    376c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3770:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    377c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3780:	00000863 	andeq	r0, r0, r3, ror #16
    3784:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3788:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    378c:	0000812d 	andeq	r8, r0, sp, lsr #2
    3790:	00107000 	andseq	r7, r0, r0
    3794:	114e2300 	mrsne	r2, SPSR_hyp
    3798:	00000000 	andeq	r0, r0, r0
    379c:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
    37a0:	0a010000 	beq	437a8 <__ccfg+0x23800>
    37a4:	60240905 	eorvs	r0, r4, r5, lsl #18
    37a8:	8e000011 	mcrhi	0, 0, r0, cr0, cr1, {0}
    37ac:	25000010 	strcs	r0, [r0, #-16]
    37b0:	00000868 	andeq	r0, r0, r8, ror #16
    37b4:	00116b26 	andseq	r6, r1, r6, lsr #22
    37b8:	0010a100 	andseq	sl, r0, r0, lsl #2
    37bc:	11762600 	cmnne	r6, r0, lsl #12
    37c0:	10bf0000 	adcsne	r0, pc, r0
    37c4:	00000000 	andeq	r0, r0, r0
    37c8:	db012700 	blle	4d3d0 <__ccfg+0x2d428>
    37cc:	0100000e 	tsteq	r0, lr
    37d0:	010104fa 	strdeq	r0, [r1, -sl]
	...
    37dc:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    37e0:	70220000 	eorvc	r0, r2, r0
    37e4:	0100746b 	tsteq	r0, fp, ror #8
    37e8:	163004fa 			; <UNDEFINED> instruction: 0x163004fa
    37ec:	e9000001 	stmdb	r0, {r0}
    37f0:	28000010 	stmdacs	r0, {r4}
    37f4:	fe010062 	cdp2	0, 0, cr0, cr1, cr2, {3}
    37f8:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    37fc:	11070000 	mrsne	r0, (UNDEF: 7)
    3800:	0a000000 	beq	3808 <__exidx_end+0x900>
    3804:	0005b704 	andeq	fp, r5, r4, lsl #14
    3808:	dd012100 	stfles	f2, [r1, #-0]
    380c:	0100000c 	tsteq	r0, ip
    3810:	010104e9 	smlatteq	r1, r9, r4, r0
    3814:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3820:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    3824:	70220000 	eorvc	r0, r2, r0
    3828:	01007968 	tsteq	r0, r8, ror #18
    382c:	812f04e9 	smulwthi	pc, r9, r4	; <UNPREDICTABLE>
    3830:	25000000 	strcs	r0, [r0, #-0]
    3834:	28000011 	stmdacs	r0, {r0, r4}
    3838:	0100716f 	tsteq	r0, pc, ror #2
    383c:	8a0b04ed 	bhi	2c4bf8 <__ccfg+0x2a4c50>
    3840:	43000007 	movwmi	r0, #7
    3844:	28000011 	stmdacs	r0, {r0, r4}
    3848:	ee010062 	cdp	0, 0, cr0, cr1, cr2, {3}
    384c:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3850:	11560000 	cmpne	r6, r0
    3854:	21000000 	mrscs	r0, (UNDEF: 0)
    3858:	000d6001 	andeq	r6, sp, r1
    385c:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    3860:	01160101 	tsteq	r6, r1, lsl #2
	...
    386c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3870:	00000950 	andeq	r0, r0, r0, asr r9
    3874:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3878:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    387c:	0000812f 	andeq	r8, r0, pc, lsr #2
    3880:	00117500 	andseq	r7, r1, r0, lsl #10
    3884:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    3888:	d201006e 	andle	r0, r1, #110	; 0x6e
    388c:	04323904 	ldrteq	r3, [r2], #-2308	; 0xfffff6fc
    3890:	11930000 	orrsne	r0, r3, r0
    3894:	6f280000 	svcvs	0x00280000
    3898:	d7010071 	smlsdxle	r1, r1, r0, r0
    389c:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    38a0:	11b10000 			; <UNDEFINED> instruction: 0x11b10000
    38a4:	62280000 	eorvs	r0, r8, #0
    38a8:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    38ac:	00089d0c 	andeq	r9, r8, ip, lsl #26
    38b0:	0011cf00 	andseq	ip, r1, r0, lsl #30
    38b4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    38b8:	00000f4c 	andeq	r0, r0, ip, asr #30
    38bc:	0104a101 	tsteq	r4, r1, lsl #2
    38c0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    38cc:	eb9c0100 	bl	fe703cd4 <_estack+0xde6fecd4>
    38d0:	22000009 	andcs	r0, r0, #9
    38d4:	00796870 	rsbseq	r6, r9, r0, ror r8
    38d8:	2b04a101 	blcs	12bce4 <__ccfg+0x10bd3c>
    38dc:	00000081 	andeq	r0, r0, r1, lsl #1
    38e0:	000011f9 	strdeq	r1, [r0], -r9
    38e4:	01007022 	tsteq	r0, r2, lsr #32
    38e8:	163804a1 	ldrtne	r0, [r8], -r1, lsr #9
    38ec:	2d000001 	stccs	0, cr0, [r0, #-4]
    38f0:	22000012 	andcs	r0, r0, #18
    38f4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    38f8:	3f04a101 	svccc	0x0004a101
    38fc:	00000081 	andeq	r0, r0, r1, lsl #1
    3900:	00001261 	andeq	r1, r0, r1, ror #4
    3904:	676c7029 	strbvs	r7, [ip, -r9, lsr #32]!
    3908:	04a60100 	strteq	r0, [r6], #256	; 0x100
    390c:	00008106 	andeq	r8, r0, r6, lsl #2
    3910:	73642800 	cmnvc	r4, #0, 16
    3914:	a6010070 			; <UNDEFINED> instruction: 0xa6010070
    3918:	00810b04 	addeq	r0, r1, r4, lsl #22
    391c:	12950000 	addsne	r0, r5, #0
    3920:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
    3924:	01007365 	tsteq	r0, r5, ror #6
    3928:	811004a6 	tsthi	r0, r6, lsr #9
    392c:	02000000 	andeq	r0, r0, #0
    3930:	612a5091 			; <UNDEFINED> instruction: 0x612a5091
    3934:	a7010070 	smlsdxge	r1, r0, r0, r0
    3938:	03550b04 	cmpeq	r5, #4, 22	; 0x1000
    393c:	91020000 	mrsls	r0, (UNDEF: 2)
    3940:	00632854 	rsbeq	r2, r3, r4, asr r8
    3944:	0a04a801 	beq	12d950 <__ccfg+0x10d9a8>
    3948:	00000116 	andeq	r0, r0, r6, lsl r1
    394c:	000012b3 			; <UNDEFINED> instruction: 0x000012b3
    3950:	3c012100 	stfccs	f2, [r1], {-0}
    3954:	0100000d 	tsteq	r0, sp
    3958:	01010487 	smlabbeq	r1, r7, r4, r0
    395c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3968:	0a4a9c01 	beq	12aa974 <__ccfg+0x128a9cc>
    396c:	70220000 	eorvc	r0, r2, r0
    3970:	01007968 	tsteq	r0, r8, ror #18
    3974:	812b0487 	smlawbhi	fp, r7, r4, r0
    3978:	c6000000 	strgt	r0, [r0], -r0
    397c:	22000012 	andcs	r0, r0, #18
    3980:	01007370 	tsteq	r0, r0, ror r3
    3984:	093a0487 	ldmdbeq	sl!, {r0, r1, r2, r7, sl}
    3988:	e4000007 	str	r0, [r0], #-7
    398c:	2b000012 	blcs	39dc <__exidx_end+0xad4>
    3990:	00000d6f 	andeq	r0, r0, pc, ror #26
    3994:	42048701 	andmi	r8, r4, #262144	; 0x40000
    3998:	00000081 	andeq	r0, r0, r1, lsl #1
    399c:	00001302 	andeq	r1, r0, r2, lsl #6
    39a0:	01007128 	tsteq	r0, r8, lsr #2
    39a4:	8a0b048d 	bhi	2c4be0 <__ccfg+0x2a4c38>
    39a8:	20000007 	andcs	r0, r0, r7
    39ac:	00000013 	andeq	r0, r0, r3, lsl r0
    39b0:	0e28012c 	sufeqep	f0, f0, #4.0
    39b4:	86010000 	strhi	r0, [r1], -r0
    39b8:	16010103 	strne	r0, [r1], -r3, lsl #2
    39bc:	01000001 	tsteq	r0, r1
    39c0:	00000a91 	muleq	r0, r1, sl
    39c4:	0013ec2d 	andseq	lr, r3, sp, lsr #24
    39c8:	03860100 	orreq	r0, r6, #0, 2
    39cc:	0000812d 	andeq	r8, r0, sp, lsr #2
    39d0:	73642e00 	cmnvc	r4, #0, 28
    39d4:	86010070 			; <UNDEFINED> instruction: 0x86010070
    39d8:	00813703 	addeq	r3, r1, r3, lsl #14
    39dc:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    39e0:	01007365 	tsteq	r0, r5, ror #6
    39e4:	81400386 	smlalbbhi	r0, r0, r6, r3	; <UNPREDICTABLE>
    39e8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    39ec:	8a010070 	bhi	43bb4 <__ccfg+0x23c0c>
    39f0:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    39f4:	27000000 	strcs	r0, [r0, -r0]
    39f8:	000d2f01 	andeq	r2, sp, r1, lsl #30
    39fc:	037f0100 	cmneq	pc, #0, 2
    3a00:	00000101 	andeq	r0, r0, r1, lsl #2
    3a04:	00000000 	andeq	r0, r0, r0
    3a08:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a0c:	00000acb 	andeq	r0, r0, fp, asr #21
    3a10:	01007022 	tsteq	r0, r2, lsr #32
    3a14:	1632037f 			; <UNDEFINED> instruction: 0x1632037f
    3a18:	4f000001 	svcmi	0x00000001
    3a1c:	22000013 	andcs	r0, r0, #19
    3a20:	00707364 	rsbseq	r7, r0, r4, ror #6
    3a24:	39037f01 	stmdbcc	r3, {r0, r8, r9, sl, fp, ip, sp, lr}
    3a28:	00000081 	andeq	r0, r0, r1, lsl #1
    3a2c:	00001362 	andeq	r1, r0, r2, ror #6
    3a30:	bf012100 	svclt	0x00012100
    3a34:	0100000e 	tsteq	r0, lr
    3a38:	0101036b 	tsteq	r1, fp, ror #6
    3a3c:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3a48:	0b259c01 	bleq	96aa54 <__ccfg+0x94aaac>
    3a4c:	70220000 	eorvc	r0, r2, r0
    3a50:	036b0100 	cmneq	fp, #0, 2
    3a54:	00011633 	andeq	r1, r1, r3, lsr r6
    3a58:	00137500 	andseq	r7, r3, r0, lsl #10
    3a5c:	0f3f2b00 	svceq	0x003f2b00
    3a60:	6b010000 	blvs	43a68 <__ccfg+0x23ac0>
    3a64:	00813a03 	addeq	r3, r1, r3, lsl #20
    3a68:	13930000 	orrsne	r0, r3, #0
    3a6c:	70280000 	eorvc	r0, r8, r0
    3a70:	6f010063 	svcvs	0x00010063
    3a74:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3a78:	13b10000 			; <UNDEFINED> instruction: 0x13b10000
    3a7c:	70290000 	eorvc	r0, r9, r0
    3a80:	6f010070 	svcvs	0x00010070
    3a84:	089d1103 	ldmeq	sp, {r0, r1, r8, ip}
    3a88:	27000000 	strcs	r0, [r0, -r0]
    3a8c:	000da201 	andeq	sl, sp, r1, lsl #4
    3a90:	03630100 	cmneq	r3, #0, 2
    3a94:	00000101 	andeq	r0, r0, r1, lsl #2
    3a98:	00000000 	andeq	r0, r0, r0
    3a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3aa0:	00000b5f 	andeq	r0, r0, pc, asr fp
    3aa4:	01007022 	tsteq	r0, r2, lsr #32
    3aa8:	16310363 	ldrtne	r0, [r1], -r3, ror #6
    3aac:	cf000001 	svcgt	0x00000001
    3ab0:	22000013 	andcs	r0, r0, #19
    3ab4:	00796870 	rsbseq	r6, r9, r0, ror r8
    3ab8:	38036301 	stmdacc	r3, {r0, r8, r9, sp, lr}
    3abc:	00000081 	andeq	r0, r0, r1, lsl #1
    3ac0:	000013ed 	andeq	r1, r0, sp, ror #7
    3ac4:	ca012700 	bgt	4d6cc <__ccfg+0x2d724>
    3ac8:	0100000e 	tsteq	r0, lr
    3acc:	0101035a 	tsteq	r1, sl, asr r3
	...
    3ad8:	0b999c01 	bleq	fe66aae4 <_estack+0xde665ae4>
    3adc:	70220000 	eorvc	r0, r2, r0
    3ae0:	035a0100 	cmpeq	sl, #0, 2
    3ae4:	00011631 	andeq	r1, r1, r1, lsr r6
    3ae8:	00140b00 	andseq	r0, r4, r0, lsl #22
    3aec:	65732200 	ldrbvs	r2, [r3, #-512]!	; 0xfffffe00
    3af0:	5a010073 	bpl	43cc4 <__ccfg+0x23d1c>
    3af4:	00813803 	addeq	r3, r1, r3, lsl #16
    3af8:	14290000 	strtne	r0, [r9], #-0
    3afc:	2c000000 	stccs	0, cr0, [r0], {-0}
    3b00:	000f7e01 	andeq	r7, pc, r1, lsl #28
    3b04:	03520100 	cmpeq	r2, #0, 2
    3b08:	00810101 	addeq	r0, r1, r1, lsl #2
    3b0c:	d5010000 	strle	r0, [r1, #-0]
    3b10:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    3b14:	00796870 	rsbseq	r6, r9, r0, ror r8
    3b18:	2d035201 	sfmcs	f5, 4, [r3, #-4]
    3b1c:	00000081 	andeq	r0, r0, r1, lsl #1
    3b20:	74706f2e 	ldrbtvc	r6, [r0], #-3886	; 0xfffff0d2
    3b24:	03520100 	cmpeq	r2, #0, 2
    3b28:	00008136 	andeq	r8, r0, r6, lsr r1
    3b2c:	72612e00 	rsbvc	r2, r1, #0, 28
    3b30:	52010067 	andpl	r0, r1, #103	; 0x67
    3b34:	01164303 	tsteq	r6, r3, lsl #6
    3b38:	21000000 	mrscs	r0, (UNDEF: 0)
    3b3c:	000ce801 	andeq	lr, ip, r1, lsl #16
    3b40:	03330100 	teqeq	r3, #0, 2
    3b44:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3b50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b54:	00000c3e 	andeq	r0, r0, lr, lsr ip
    3b58:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3b5c:	2c033301 	stccs	3, cr3, [r3], {1}
    3b60:	00000081 	andeq	r0, r0, r1, lsl #1
    3b64:	00001447 	andeq	r1, r0, r7, asr #8
    3b68:	74706f22 	ldrbtvc	r6, [r0], #-3874	; 0xfffff0de
    3b6c:	03330100 	teqeq	r3, #0, 2
    3b70:	00008134 	andeq	r8, r0, r4, lsr r1
    3b74:	00148600 	andseq	r8, r4, r0, lsl #12
    3b78:	72612200 	rsbvc	r2, r1, #0, 4
    3b7c:	33010067 	movwcc	r0, #4199	; 0x1067
    3b80:	01164103 	tsteq	r6, r3, lsl #2
    3b84:	14af0000 	strtne	r0, [pc], #0	; 3b8c <__exidx_end+0xc84>
    3b88:	002f0000 	eoreq	r0, pc, r0
    3b8c:	00000000 	andeq	r0, r0, r0
    3b90:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3b94:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    3b98:	07d41503 	ldrbeq	r1, [r4, r3, lsl #10]
    3b9c:	14d80000 	ldrbne	r0, [r8], #0
    3ba0:	00000000 	andeq	r0, r0, r0
    3ba4:	0d7d0127 	ldfeqe	f0, [sp, #-156]!	; 0xffffff64
    3ba8:	2b010000 	blcs	43bb0 <__ccfg+0x23c08>
    3bac:	00010103 	andeq	r0, r1, r3, lsl #2
    3bb0:	00000000 	andeq	r0, r0, r0
    3bb4:	01000000 	mrseq	r0, (UNDEF: 0)
    3bb8:	000c679c 	muleq	ip, ip, r7
    3bbc:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3bc0:	2e032b01 	vmlacs.f64	d2, d3, d1
    3bc4:	00000116 	andeq	r0, r0, r6, lsl r1
    3bc8:	000014eb 	andeq	r1, r0, fp, ror #9
    3bcc:	57012100 	strpl	r2, [r1, -r0, lsl #2]
    3bd0:	0100000e 	tsteq	r0, lr
    3bd4:	0101031a 	tsteq	r1, sl, lsl r3
    3bd8:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3be4:	0cc19c01 	stcleq	12, cr9, [r1], {1}
    3be8:	70220000 	eorvc	r0, r2, r0
    3bec:	031a0100 	tsteq	sl, #0, 2
    3bf0:	0001162e 	andeq	r1, r1, lr, lsr #12
    3bf4:	00150900 	andseq	r0, r5, r0, lsl #18
    3bf8:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    3bfc:	1a010066 	bne	43d9c <__ccfg+0x23df4>
    3c00:	02593d03 	subseq	r3, r9, #3, 26	; 0xc0
    3c04:	15270000 	strne	r0, [r7, #-0]!
    3c08:	6c220000 	stcvs	0, cr0, [r2], #-0
    3c0c:	01006e65 	tsteq	r0, r5, ror #28
    3c10:	8146031a 	cmphi	r6, sl, lsl r3
    3c14:	3a000000 	bcc	3c1c <__exidx_end+0xd14>
    3c18:	29000015 	stmdbcs	r0, {r0, r2, r4}
    3c1c:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    3c20:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3c24:	21000000 	mrscs	r0, (UNDEF: 0)
    3c28:	000e9d01 	andeq	r9, lr, r1, lsl #26
    3c2c:	03080100 	movweq	r0, #33024	; 0x8100
    3c30:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3c3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c40:	00000d1b 	andeq	r0, r0, fp, lsl sp
    3c44:	01007022 	tsteq	r0, r2, lsr #32
    3c48:	162d0308 	strtne	r0, [sp], -r8, lsl #6
    3c4c:	58000001 	stmdapl	r0, {r0}
    3c50:	22000015 	andcs	r0, r0, #21
    3c54:	00667562 	rsbeq	r7, r6, r2, ror #10
    3c58:	36030801 	strcc	r0, [r3], -r1, lsl #16
    3c5c:	00000d1b 	andeq	r0, r0, fp, lsl sp
    3c60:	00001576 	andeq	r1, r0, r6, ror r5
    3c64:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3c68:	03080100 	movweq	r0, #33024	; 0x8100
    3c6c:	0000813f 	andeq	r8, r0, pc, lsr r1
    3c70:	00159400 	andseq	r9, r5, r0, lsl #8
    3c74:	00622900 	rsbeq	r2, r2, r0, lsl #18
    3c78:	0c030c01 	stceq	12, cr0, [r3], {1}
    3c7c:	0000089d 	muleq	r0, sp, r8
    3c80:	e3040a00 	movw	r0, #18944	; 0x4a00
    3c84:	21000000 	mrscs	r0, (UNDEF: 0)
    3c88:	000e4e01 	andeq	r4, lr, r1, lsl #28
    3c8c:	02cd0100 	sbceq	r0, sp, #0, 2
    3c90:	01160101 	tsteq	r6, r1, lsl #2
	...
    3c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ca0:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    3ca4:	000bd62b 	andeq	sp, fp, fp, lsr #12
    3ca8:	02cd0100 	sbceq	r0, sp, #0, 2
    3cac:	0000cd2e 	andeq	ip, r0, lr, lsr #26
    3cb0:	0015b200 	andseq	fp, r5, r0, lsl #4
    3cb4:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3cb8:	02cd0100 	sbceq	r0, sp, #0, 2
    3cbc:	00008139 	andeq	r8, r0, r9, lsr r1
    3cc0:	0015d000 	andseq	sp, r5, r0
    3cc4:	0f382b00 	svceq	0x00382b00
    3cc8:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3ccc:	00814102 	addeq	r4, r1, r2, lsl #2
    3cd0:	15f90000 	ldrbne	r0, [r9, #0]!
    3cd4:	75220000 	strvc	r0, [r2, #-0]!
    3cd8:	01006772 	tsteq	r0, r2, ror r7
    3cdc:	c11102ce 	tstgt	r1, lr, asr #5
    3ce0:	43000000 	movwmi	r0, #0
    3ce4:	28000016 	stmdacs	r0, {r1, r2, r4}
    3ce8:	cf010062 	svcgt	0x00010062
    3cec:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3cf0:	16560000 	ldrbne	r0, [r6], -r0
    3cf4:	40300000 	eorsmi	r0, r0, r0
    3cf8:	0100000e 	tsteq	r0, lr
    3cfc:	550b02d0 	strpl	r0, [fp, #-720]	; 0xfffffd30
    3d00:	02000003 	andeq	r0, r0, #3
    3d04:	732a6491 			; <UNDEFINED> instruction: 0x732a6491
    3d08:	02d10100 	sbcseq	r0, r1, #0, 2
    3d0c:	0007400d 	andeq	r4, r7, sp
    3d10:	28570100 	ldmdacs	r7, {r8}^
    3d14:	00646965 	rsbeq	r6, r4, r5, ror #18
    3d18:	0602d201 	streq	sp, [r2], -r1, lsl #4
    3d1c:	00000081 	andeq	r0, r0, r1, lsl #1
    3d20:	00001674 	andeq	r1, r0, r4, ror r6
    3d24:	0d012100 	stfeqs	f2, [r1, #-0]
    3d28:	0100000e 	tsteq	r0, lr
    3d2c:	010102a4 	smlatbeq	r1, r4, r2, r0
    3d30:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3d3c:	0e729c01 	cdpeq	12, 7, cr9, cr2, cr1, {0}
    3d40:	66220000 	strtvs	r0, [r2], -r0
    3d44:	a4010064 	strge	r0, [r1], #-100	; 0xffffff9c
    3d48:	00812a02 	addeq	r2, r1, r2, lsl #20
    3d4c:	169d0000 	ldrne	r0, [sp], r0
    3d50:	3f2b0000 	svccc	0x002b0000
    3d54:	0100000f 	tsteq	r0, pc
    3d58:	813202a4 	teqhi	r2, r4, lsr #5
    3d5c:	d1000000 	mrsle	r0, (UNDEF: 0)
    3d60:	28000016 	stmdacs	r0, {r1, r2, r4}
    3d64:	a8010073 	stmdage	r1, {r0, r1, r4, r5, r6}
    3d68:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3d6c:	17050000 	strne	r0, [r5, -r0]
    3d70:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    3d74:	a9010071 	stmdbge	r1, {r0, r4, r5, r6}
    3d78:	00810602 	addeq	r0, r1, r2, lsl #12
    3d7c:	176a0000 	strbne	r0, [sl, -r0]!
    3d80:	72280000 	eorvc	r0, r8, #0
    3d84:	aa010071 	bge	43f50 <__ccfg+0x23fa8>
    3d88:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3d8c:	17880000 	strne	r0, [r8, r0]
    3d90:	62280000 	eorvs	r0, r8, #0
    3d94:	02ab0100 	adceq	r0, fp, #0, 2
    3d98:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3d9c:	0017a600 	andseq	sl, r7, r0, lsl #12
    3da0:	0df33100 	ldfeqe	f3, [r3]
    3da4:	c0010000 	andgt	r0, r1, r0
    3da8:	00000102 	andeq	r0, r0, r2, lsl #2
    3dac:	4e320000 	cdpmi	0, 3, cr0, cr2, cr0, {0}
    3db0:	00000011 	andeq	r0, r0, r1, lsl r0
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	01000000 	mrseq	r0, (UNDEF: 0)
    3dbc:	330a02bb 	movwcc	r0, #41659	; 0xa2bb
    3dc0:	00001160 	andeq	r1, r0, r0, ror #2
    3dc4:	00116b26 	andseq	r6, r1, r6, lsr #22
    3dc8:	0017cf00 	andseq	ip, r7, r0, lsl #30
    3dcc:	11762600 	cmnne	r6, r0, lsl #12
    3dd0:	17e20000 	strbne	r0, [r2, r0]!
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	0cc00121 	stfeqe	f0, [r0], {33}	; 0x21
    3ddc:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3de0:	81010102 	tsthi	r1, r2, lsl #2
	...
    3dec:	01000000 	mrseq	r0, (UNDEF: 0)
    3df0:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    3df4:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3df8:	027d0100 	rsbseq	r0, sp, #0, 2
    3dfc:	0000812a 	andeq	r8, r0, sl, lsr #2
    3e00:	0017f500 	andseq	pc, r7, r0, lsl #10
    3e04:	0f3f2b00 	svceq	0x003f2b00
    3e08:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3e0c:	00813202 	addeq	r3, r1, r2, lsl #4
    3e10:	18290000 	stmdane	r9!, {}	; <UNPREDICTABLE>
    3e14:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3e18:	02810100 	addeq	r0, r1, #0, 2
    3e1c:	0007400d 	andeq	r4, r7, sp
    3e20:	00185200 	andseq	r5, r8, r0, lsl #4
    3e24:	716e2800 	cmnvc	lr, r0, lsl #16
    3e28:	02820100 	addeq	r0, r2, #0, 2
    3e2c:	00008106 	andeq	r8, r0, r6, lsl #2
    3e30:	0018b700 	andseq	fp, r8, r0, lsl #14
    3e34:	71722800 	cmnvc	r2, r0, lsl #16
    3e38:	02830100 	addeq	r0, r3, #0, 2
    3e3c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3e40:	0018d500 	andseq	sp, r8, r0, lsl #10
    3e44:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3e48:	0c028401 	cfstrseq	mvf8, [r2], {1}
    3e4c:	0000089d 	muleq	r0, sp, r8
    3e50:	000018fe 	strdeq	r1, [r0], -lr
    3e54:	44012100 	strmi	r2, [r1], #-256	; 0xffffff00
    3e58:	0100000f 	tsteq	r0, pc
    3e5c:	01010256 	tsteq	r1, r6, asr r2
    3e60:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3e6c:	0f5c9c01 	svceq	0x005c9c01
    3e70:	d62b0000 	strtle	r0, [fp], -r0
    3e74:	0100000b 	tsteq	r0, fp
    3e78:	cd2d0256 	sfmgt	f0, 4, [sp, #-344]!	; 0xfffffea8
    3e7c:	32000000 	andcc	r0, r0, #0
    3e80:	22000019 	andcs	r0, r0, #25
    3e84:	01006466 	tsteq	r0, r6, ror #8
    3e88:	81380256 	teqhi	r8, r6, asr r2
    3e8c:	45000000 	strmi	r0, [r0, #-0]
    3e90:	28000019 	stmdacs	r0, {r0, r3, r4}
    3e94:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
    3e98:	01160a02 	tsteq	r6, r2, lsl #20
    3e9c:	19840000 	stmibne	r4, {}	; <UNPREDICTABLE>
    3ea0:	62280000 	eorvs	r0, r8, #0
    3ea4:	025e0100 	subseq	r0, lr, #0, 2
    3ea8:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3eac:	00199700 	andseq	r9, r9, r0, lsl #14
    3eb0:	71722800 	cmnvc	r2, r0, lsl #16
    3eb4:	025f0100 	subseq	r0, pc, #0, 2
    3eb8:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3ebc:	0019c000 	andseq	ip, r9, r0
    3ec0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3ec4:	00000f0a 	andeq	r0, r0, sl, lsl #30
    3ec8:	01024a01 	tsteq	r2, r1, lsl #20
    3ecc:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3ed8:	999c0100 	ldmibls	ip, {r8}
    3edc:	2200000f 	andcs	r0, r0, #15
    3ee0:	0064726f 	rsbeq	r7, r4, pc, ror #4
    3ee4:	29024a01 	stmdbcs	r2, {r0, r9, fp, lr}
    3ee8:	00000081 	andeq	r0, r0, r1, lsl #1
    3eec:	000019fa 	strdeq	r1, [r0], -sl
    3ef0:	006c7034 	rsbeq	r7, ip, r4, lsr r0
    3ef4:	3f024a01 	svccc	0x00024a01
    3ef8:	000007d4 	ldrdeq	r0, [r0], -r4
    3efc:	21005101 	tstcs	r0, r1, lsl #2
    3f00:	000e6901 	andeq	r6, lr, r1, lsl #18
    3f04:	02290100 	eoreq	r0, r9, #0, 2
    3f08:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3f14:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f18:	00000ff6 	strdeq	r0, [r0], -r6
    3f1c:	000bd62b 	andeq	sp, fp, fp, lsr #12
    3f20:	02290100 	eoreq	r0, r9, #0, 2
    3f24:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    3f28:	001a1800 	andseq	r1, sl, r0, lsl #16
    3f2c:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3f30:	02290100 	eoreq	r0, r9, #0, 2
    3f34:	00008136 	andeq	r8, r0, r6, lsr r1
    3f38:	001a3600 	andseq	r3, sl, r0, lsl #12
    3f3c:	00732800 	rsbseq	r2, r3, r0, lsl #16
    3f40:	0d022b01 	vstreq	d2, [r2, #-4]
    3f44:	00000740 	andeq	r0, r0, r0, asr #14
    3f48:	00001a80 	andeq	r1, r0, r0, lsl #21
    3f4c:	01006228 	tsteq	r0, r8, lsr #4
    3f50:	9d0c022c 	sfmls	f0, 4, [ip, #-176]	; 0xffffff50
    3f54:	93000008 	movwls	r0, #8
    3f58:	0000001a 	andeq	r0, r0, sl, lsl r0
    3f5c:	0d740121 	ldfeqe	f0, [r4, #-132]!	; 0xffffff7c
    3f60:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3f64:	81010101 	tsthi	r1, r1, lsl #2
	...
    3f70:	01000000 	mrseq	r0, (UNDEF: 0)
    3f74:	0010839c 	mulseq	r0, ip, r3
    3f78:	0bd62b00 	bleq	ff58eb80 <_estack+0xdf589b80>
    3f7c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3f80:	00cd2a01 	sbceq	r2, sp, r1, lsl #20
    3f84:	1aa60000 	bne	fe983f8c <_estack+0xde97ef8c>
    3f88:	70220000 	eorvc	r0, r2, r0
    3f8c:	01007968 	tsteq	r0, r8, ror #18
    3f90:	813501f6 	teqhi	r5, r6	; <illegal shifter operand>
    3f94:	cf000000 	svcgt	0x00000000
    3f98:	2b00001a 	blcs	4008 <__exidx_end+0x1100>
    3f9c:	00000ed6 	ldrdeq	r0, [r0], -r6
    3fa0:	3e01f601 	cfmadd32cc	mvax0, mvfx15, mvfx1, mvfx1
    3fa4:	00000081 	andeq	r0, r0, r1, lsl #1
    3fa8:	00001b24 	andeq	r1, r0, r4, lsr #22
    3fac:	64662835 	strbtvs	r2, [r6], #-2101	; 0xfffff7cb
    3fb0:	01f80100 	mvnseq	r0, r0, lsl #2
    3fb4:	00008106 	andeq	r8, r0, r6, lsl #2
    3fb8:	001b5c00 	andseq	r5, fp, r0, lsl #24
    3fbc:	0de13600 	stcleq	6, cr3, [r1]
    3fc0:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3fc4:	05560a01 	ldrbeq	r0, [r6, #-2561]	; 0xfffff5ff
    3fc8:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3fcc:	01fa0100 	mvnseq	r0, r0, lsl #2
    3fd0:	0007400d 	andeq	r4, r7, sp
    3fd4:	001b7a00 	andseq	r7, fp, r0, lsl #20
    3fd8:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    3fdc:	01fc0100 	mvnseq	r0, r0, lsl #2
    3fe0:	0000b50b 	andeq	fp, r0, fp, lsl #10
    3fe4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3fe8:	17012700 	strne	r2, [r1, -r0, lsl #14]
    3fec:	0100000e 	tsteq	r0, lr
    3ff0:	0101013b 	tsteq	r1, fp, lsr r1
	...
    3ffc:	10bb9c01 	adcsne	r9, fp, r1, lsl #24
    4000:	70220000 	eorvc	r0, r2, r0
    4004:	013b0100 	teqeq	fp, r0, lsl #2
    4008:	0001162e 	andeq	r1, r1, lr, lsr #12
    400c:	001bc400 	andseq	ip, fp, r0, lsl #8
    4010:	00622800 	rsbeq	r2, r2, r0, lsl #16
    4014:	0c014101 	stfeqs	f4, [r1], {1}
    4018:	0000089d 	muleq	r0, sp, r8
    401c:	00001bed 	andeq	r1, r0, sp, ror #23
    4020:	70613700 	rsbvc	r3, r1, r0, lsl #14
    4024:	14010062 	strne	r0, [r1], #-98	; 0xffffff9e
    4028:	9d010101 	stflss	f0, [r1, #-4]
    402c:	00000008 	andeq	r0, r0, r8
    4030:	00000000 	andeq	r0, r0, r0
    4034:	01000000 	mrseq	r0, (UNDEF: 0)
    4038:	0011029c 	mulseq	r1, ip, r2
    403c:	13ec2b00 	mvnne	r2, #0, 22
    4040:	14010000 	strne	r0, [r1], #-0
    4044:	00cd2b01 	sbceq	r2, sp, r1, lsl #22
    4048:	1c210000 	stcne	0, cr0, [r1], #-0
    404c:	702a0000 	eorvc	r0, sl, r0
    4050:	01190100 	tsteq	r9, r0, lsl #2
    4054:	00089d0c 	andeq	r9, r8, ip, lsl #26
    4058:	29500100 	ldmdbcs	r0, {r8}^
    405c:	01007363 	tsteq	r0, r3, ror #6
    4060:	cd07011a 	stfgts	f0, [r7, #-104]	; 0xffffff98
    4064:	00000000 	andeq	r0, r0, r0
    4068:	706c7238 	rsbvc	r7, ip, r8, lsr r2
    406c:	01040100 	mrseq	r0, (UNDEF: 20)
    4070:	00000101 	andeq	r0, r0, r1, lsl #2
    4074:	00000000 	andeq	r0, r0, r0
    4078:	9c010000 	stcls	0, cr0, [r1], {-0}
    407c:	0000112a 	andeq	r1, r0, sl, lsr #2
    4080:	01007022 	tsteq	r0, r2, lsr #32
    4084:	9d2b0104 	stflss	f0, [fp, #-16]!
    4088:	34000008 	strcc	r0, [r0], #-8
    408c:	0000001c 	andeq	r0, r0, ip, lsl r0
    4090:	000d3439 	andeq	r3, sp, r9, lsr r4
    4094:	01e00100 	mvneq	r0, r0, lsl #2
    4098:	114e0101 	cmpne	lr, r1, lsl #2
    409c:	703a0000 	eorsvc	r0, sl, r0
    40a0:	2fe00100 	svccs	0x00e00100
    40a4:	0000089d 	muleq	r0, sp, r8
    40a8:	0076643a 	rsbseq	r6, r6, sl, lsr r4
    40ac:	8136e001 	teqhi	r6, r1
    40b0:	00000000 	andeq	r0, r0, r0
    40b4:	000d8f3b 	andeq	r8, sp, fp, lsr pc
    40b8:	01cf0100 	biceq	r0, pc, r0, lsl #2
    40bc:	00008101 	andeq	r8, r0, r1, lsl #2
    40c0:	11810100 	orrne	r0, r1, r0, lsl #2
    40c4:	6f3a0000 	svcvs	0x003a0000
    40c8:	cf010071 	svcgt	0x00010071
    40cc:	00078a2b 	andeq	r8, r7, fp, lsr #20
    40d0:	716e3c00 	cmnvc	lr, r0, lsl #24
    40d4:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    40d8:	00000081 	andeq	r0, r0, r1, lsl #1
    40dc:	0100623c 	tsteq	r0, ip, lsr r2
    40e0:	089d0cd4 	ldmeq	sp, {r2, r4, r6, r7, sl, fp}
    40e4:	3d000000 	stccc	0, cr0, [r0, #-0]
    40e8:	00716e65 	rsbseq	r6, r1, r5, ror #28
    40ec:	0101a801 	tsteq	r1, r1, lsl #16
    40f0:	0011a401 	andseq	sl, r1, r1, lsl #8
    40f4:	00713a00 	rsbseq	r3, r1, r0, lsl #20
    40f8:	8a2aa801 	bhi	aae104 <__ccfg+0xa8e15c>
    40fc:	3a000007 	bcc	4120 <__exidx_end+0x1218>
    4100:	a8010070 	stmdage	r1, {r4, r5, r6}
    4104:	00089d37 	andeq	r9, r8, r7, lsr sp
    4108:	643d0000 	ldrtvs	r0, [sp], #-0
    410c:	01007165 	tsteq	r0, r5, ror #2
    4110:	0101017f 	tsteq	r1, pc, ror r1
    4114:	000011bd 			; <UNDEFINED> instruction: 0x000011bd
    4118:	0100703a 	tsteq	r0, sl, lsr r0
    411c:	089d2b7f 	ldmeq	sp, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    4120:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4124:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    4130:	11f29c01 	mvnsne	r9, r1, lsl #24
    4134:	b23f0000 	eorslt	r0, pc, #0
    4138:	01000011 	tsteq	r0, r1, lsl r0
    413c:	11a44050 			; <UNDEFINED> instruction: 0x11a44050
	...
    4148:	7f010000 	svcvc	0x00010000
    414c:	11b22401 			; <UNDEFINED> instruction: 0x11b22401
    4150:	1c470000 	marne	acc0, r0, r7
    4154:	00000000 	andeq	r0, r0, r0
    4158:	0011813e 	andseq	r8, r1, lr, lsr r1
	...
    4164:	3b9c0100 	blcc	fe70456c <_estack+0xde6ff56c>
    4168:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    416c:	0000118f 	andeq	r1, r0, pc, lsl #3
    4170:	00001c5a 	andeq	r1, r0, sl, asr ip
    4174:	00119924 	andseq	r9, r1, r4, lsr #18
    4178:	001c8e00 	andseq	r8, ip, r0, lsl #28
    417c:	11814000 	orrne	r4, r1, r0
	...
    4188:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    418c:	118f2401 	orrne	r2, pc, r1, lsl #8
    4190:	1cc20000 	stclne	0, cr0, [r2], {0}
    4194:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    4198:	e0000011 	and	r0, r0, r1, lsl r0
    419c:	0000001c 	andeq	r0, r0, ip, lsl r0
    41a0:	112a3e00 			; <UNDEFINED> instruction: 0x112a3e00
	...
    41ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    41b0:	00001280 	andeq	r1, r0, r0, lsl #5
    41b4:	00113824 	andseq	r3, r1, r4, lsr #16
    41b8:	001cfe00 	andseq	pc, ip, r0, lsl #28
    41bc:	11422400 	cmpne	r2, r0, lsl #8
    41c0:	1d530000 	ldclne	0, cr0, [r3, #-0]
    41c4:	2a410000 	bcs	10441cc <__ccfg+0x1024224>
    41c8:	00000011 	andeq	r0, r0, r1, lsl r0
    41cc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    41d0:	01000008 	tsteq	r0, r8
    41d4:	423301e0 	eorsmi	r0, r3, #224, 2	; 0x38
    41d8:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    41dc:	00001138 	andeq	r1, r0, r8, lsr r1
    41e0:	00001d66 	andeq	r1, r0, r6, ror #26
    41e4:	993e0000 	ldmdbls	lr!, {}	; <UNPREDICTABLE>
    41e8:	0000000b 	andeq	r0, r0, fp
    41ec:	00000000 	andeq	r0, r0, r0
    41f0:	01000000 	mrseq	r0, (UNDEF: 0)
    41f4:	0012d89c 	mulseq	r2, ip, r8
    41f8:	0bad2400 	bleq	feb4d200 <_estack+0xdeb48200>
    41fc:	1d840000 	stcne	0, cr0, [r4]
    4200:	ba240000 	blt	904208 <__ccfg+0x8e4260>
    4204:	a200000b 	andge	r0, r0, #11
    4208:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    420c:	00000bc7 	andeq	r0, r0, r7, asr #23
    4210:	00001dcb 	andeq	r1, r0, fp, asr #27
    4214:	000b9932 	andeq	r9, fp, r2, lsr r9
	...
    4220:	03520100 	cmpeq	r2, #0, 2
    4224:	0bad3301 	bleq	feb50e30 <_estack+0xdeb4be30>
    4228:	ba240000 	blt	904230 <__ccfg+0x8e4288>
    422c:	f400000b 	vst4.8	{d0-d3}, [r0], fp
    4230:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4234:	00000bc7 	andeq	r0, r0, r7, asr #23
    4238:	00001e07 	andeq	r1, r0, r7, lsl #28
    423c:	4a420000 	bmi	1084244 <__ccfg+0x106429c>
    4240:	0000000a 	andeq	r0, r0, sl
    4244:	00000000 	andeq	r0, r0, r0
    4248:	01000000 	mrseq	r0, (UNDEF: 0)
    424c:	0a5e249c 	beq	178d4c4 <__ccfg+0x176d51c>
    4250:	1e1a0000 	cdpne	0, 1, cr0, cr10, cr0, {0}
    4254:	6b240000 	blvs	90425c <__ccfg+0x8e42b4>
    4258:	2d00000a 	stccs	0, cr0, [r0, #-40]	; 0xffffffd8
    425c:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    4260:	00000a78 	andeq	r0, r0, r8, ror sl
    4264:	00001e8d 	andeq	r1, r0, sp, lsl #29
    4268:	000a8526 	andeq	r8, sl, r6, lsr #10
    426c:	001ed700 	andseq	sp, lr, r0, lsl #14
    4270:	0a4a3200 	beq	1290a78 <__ccfg+0x1270ad0>
	...
    427c:	86010000 	strhi	r0, [r1], -r0
    4280:	5e330103 	rsfpls	f0, f3, f3
    4284:	2400000a 	strcs	r0, [r0], #-10
    4288:	00000a6b 	andeq	r0, r0, fp, ror #20
    428c:	00001f0b 	andeq	r1, r0, fp, lsl #30
    4290:	000a7833 	andeq	r7, sl, r3, lsr r8
    4294:	0a854300 	beq	fe154e9c <_estack+0xde14fe9c>
    4298:	00000000 	andeq	r0, r0, r0
    429c:	00017400 	andeq	r7, r1, r0, lsl #8
    42a0:	a4000300 	strge	r0, [r0], #-768	; 0xfffffd00
    42a4:	04000010 	streq	r0, [r0], #-16
    42a8:	00015701 	andeq	r5, r1, r1, lsl #14
    42ac:	0fcc0c00 	svceq	0x00cc0c00
    42b0:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    42b4:	09780000 	ldmdbeq	r8!, {}^	; <UNPREDICTABLE>
    42b8:	00000000 	andeq	r0, r0, r0
    42bc:	36cc0000 	strbcc	r0, [ip], r0
    42c0:	01020000 	mrseq	r0, (UNDEF: 2)
    42c4:	00039c06 	andeq	r9, r3, r6, lsl #24
    42c8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    42cc:	000003f8 	strdeq	r0, [r0], -r8
    42d0:	b0050402 	andlt	r0, r5, r2, lsl #8
    42d4:	02000000 	andeq	r0, r0, #0
    42d8:	00ab0508 	adceq	r0, fp, r8, lsl #10
    42dc:	01020000 	mrseq	r0, (UNDEF: 2)
    42e0:	00039a08 	andeq	r9, r3, r8, lsl #20
    42e4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    42e8:	00000258 	andeq	r0, r0, r8, asr r2
    42ec:	00180803 	andseq	r0, r8, r3, lsl #16
    42f0:	19340200 	ldmdbne	r4!, {r9}
    42f4:	0000005b 	andeq	r0, r0, fp, asr r0
    42f8:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    42fc:	02000000 	andeq	r0, r0, #0
    4300:	00800708 	addeq	r0, r0, r8, lsl #14
    4304:	04040000 	streq	r0, [r4], #-0
    4308:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    430c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4310:	0000008a 	andeq	r0, r0, sl, lsl #1
    4314:	00820405 	addeq	r0, r2, r5, lsl #8
    4318:	77060000 	strvc	r0, [r6, -r0]
    431c:	07000000 	streq	r0, [r0, -r0]
    4320:	4f040501 	svcmi	0x00040501
    4324:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4328:	00000fbf 			; <UNDEFINED> instruction: 0x00000fbf
    432c:	4f117f01 	svcmi	0x00117f01
    4330:	01000000 	mrseq	r0, (UNDEF: 0)
    4334:	0f930801 	svceq	0x00930801
    4338:	80010000 	andhi	r0, r1, r0
    433c:	00004f11 	andeq	r4, r0, r1, lsl pc
    4340:	08010100 	stmdaeq	r1, {r8}
    4344:	0000100f 	andeq	r1, r0, pc
    4348:	4f118101 	svcmi	0x00118101
    434c:	01000000 	mrseq	r0, (UNDEF: 0)
    4350:	100a0801 	andne	r0, sl, r1, lsl #16
    4354:	82010000 	andhi	r0, r1, #0
    4358:	00004f11 	andeq	r4, r0, r1, lsl pc
    435c:	08010100 	stmdaeq	r1, {r8}
    4360:	00000fc6 	andeq	r0, r0, r6, asr #31
    4364:	4f118301 	svcmi	0x00118301
    4368:	01000000 	mrseq	r0, (UNDEF: 0)
    436c:	0f8b0801 	svceq	0x008b0801
    4370:	84010000 	strhi	r0, [r1], #-0
    4374:	00004f11 	andeq	r4, r0, r1, lsl pc
    4378:	09010100 	stmdbeq	r1, {r8}
    437c:	0000007d 	andeq	r0, r0, sp, ror r0
    4380:	000000ee 	andeq	r0, r0, lr, ror #1
    4384:	0000700a 	andeq	r7, r0, sl
    4388:	06003100 	streq	r3, [r0], -r0, lsl #2
    438c:	000000de 	ldrdeq	r0, [r0], -lr
    4390:	0010280b 	andseq	r2, r0, fp, lsl #16
    4394:	0f8e0100 	svceq	0x008e0100
    4398:	000000ee 	andeq	r0, r0, lr, ror #1
    439c:	00030501 	andeq	r0, r3, r1, lsl #10
    43a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    43a4:	00001016 	andeq	r1, r0, r6, lsl r0
    43a8:	01012801 	tsteq	r1, r1, lsl #16
    43ac:	00166a01 	andseq	r6, r6, r1, lsl #20
    43b0:	00166c00 	andseq	r6, r6, r0, lsl #24
    43b4:	0c9c0100 	ldfeqs	f0, [ip], {0}
    43b8:	00000fa2 	andeq	r0, r0, r2, lsr #31
    43bc:	01011601 	tsteq	r1, r1, lsl #12
    43c0:	00166801 	andseq	r6, r6, r1, lsl #16
    43c4:	00166a00 	andseq	r6, r6, r0, lsl #20
    43c8:	0c9c0100 	ldfeqs	f0, [ip], {0}
    43cc:	00000fb2 			; <UNDEFINED> instruction: 0x00000fb2
    43d0:	01010401 	tsteq	r1, r1, lsl #8
    43d4:	00166601 	andseq	r6, r6, r1, lsl #12
    43d8:	00166800 	andseq	r6, r6, r0, lsl #16
    43dc:	0d9c0100 	ldfeqs	f0, [ip]
    43e0:	00103f01 	andseq	r3, r0, r1, lsl #30
    43e4:	01d20100 	bicseq	r0, r2, r0, lsl #2
    43e8:	00166c01 	andseq	r6, r6, r1, lsl #24
    43ec:	0016b000 	andseq	fp, r6, r0
    43f0:	0e9c0100 	fmleqe	f0, f4, f0
    43f4:	00000f99 	muleq	r0, r9, pc	; <UNPREDICTABLE>
    43f8:	840fd401 	strhi	sp, [pc], #-1025	; 4400 <__exidx_end+0x14f8>
    43fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    4400:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    4404:	00001035 	andeq	r1, r0, r5, lsr r0
    4408:	841ad401 	ldrhi	sp, [sl], #-1025	; 0xfffffbff
    440c:	3c000000 	stccc	0, cr0, [r0], {-0}
    4410:	0000001f 	andeq	r0, r0, pc, lsl r0
    4414:	00053700 	andeq	r3, r5, r0, lsl #14
    4418:	69000300 	stmdbvs	r0, {r8, r9}
    441c:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    4420:	00015701 	andeq	r5, r1, r1, lsl #14
    4424:	109f0c00 	addsne	r0, pc, r0, lsl #24
    4428:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    442c:	37f30000 	ldrbcc	r0, [r3, r0]!
    4430:	01020000 	mrseq	r0, (UNDEF: 2)
    4434:	00039c06 	andeq	r9, r3, r6, lsl #24
    4438:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    443c:	000003f8 	strdeq	r0, [r0], -r8
    4440:	b0050402 	andlt	r0, r5, r2, lsl #8
    4444:	02000000 	andeq	r0, r0, #0
    4448:	00ab0508 	adceq	r0, fp, r8, lsl #10
    444c:	51030000 	mrspl	r0, (UNDEF: 3)
    4450:	01000022 	tsteq	r0, r2, lsr #32
    4454:	0045182e 	subeq	r1, r5, lr, lsr #16
    4458:	01020000 	mrseq	r0, (UNDEF: 2)
    445c:	00039a08 	andeq	r9, r3, r8, lsl #20
    4460:	213f0300 	teqcs	pc, r0, lsl #6
    4464:	31010000 	mrscc	r0, (UNDEF: 1)
    4468:	00005819 	andeq	r5, r0, r9, lsl r8
    446c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4470:	00000258 	andeq	r0, r0, r8, asr r2
    4474:	00180803 	andseq	r0, r8, r3, lsl #16
    4478:	19340100 	ldmdbne	r4!, {r8}
    447c:	0000006b 	andeq	r0, r0, fp, rrx
    4480:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    4484:	02000000 	andeq	r0, r0, #0
    4488:	00800708 	addeq	r0, r0, r8, lsl #14
    448c:	04040000 	streq	r0, [r4], #-0
    4490:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4494:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4498:	0000008a 	andeq	r0, r0, sl, lsl #1
    449c:	2f025805 	svccs	0x00025805
    44a0:	0001af09 	andeq	sl, r1, r9, lsl #30
    44a4:	11f90600 	mvnsne	r0, r0, lsl #12
    44a8:	31020000 	mrscc	r0, (UNDEF: 2)
    44ac:	00005f10 	andeq	r5, r0, r0, lsl pc
    44b0:	0e060000 	cdpeq	0, 0, cr0, cr6, cr0, {0}
    44b4:	02000011 	andeq	r0, r0, #17
    44b8:	005f1032 	subseq	r1, pc, r2, lsr r0	; <UNPREDICTABLE>
    44bc:	06040000 	streq	r0, [r4], -r0
    44c0:	000010d6 	ldrdeq	r1, [r0], -r6
    44c4:	5f103302 	svcpl	0x00103302
    44c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    44cc:	00108906 	andseq	r8, r0, r6, lsl #18
    44d0:	10340200 	eorsne	r0, r4, r0, lsl #4
    44d4:	0000005f 	andeq	r0, r0, pc, asr r0
    44d8:	1048060c 	subne	r0, r8, ip, lsl #12
    44dc:	35020000 	strcc	r0, [r2, #-0]
    44e0:	00005f10 	andeq	r5, r0, r0, lsl pc
    44e4:	59061000 	stmdbpl	r6, {ip}
    44e8:	02000010 	andeq	r0, r0, #16
    44ec:	005f1036 	subseq	r1, pc, r6, lsr r0	; <UNPREDICTABLE>
    44f0:	06140000 	ldreq	r0, [r4], -r0
    44f4:	00001079 	andeq	r1, r0, r9, ror r0
    44f8:	5f103702 	svcpl	0x00103702
    44fc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    4500:	00119e06 	andseq	r9, r1, r6, lsl #28
    4504:	10380200 	eorsne	r0, r8, r0, lsl #4
    4508:	0000005f 	andeq	r0, r0, pc, asr r0
    450c:	10ee061c 	rscne	r0, lr, ip, lsl r6
    4510:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    4514:	00005f10 	andeq	r5, r0, r0, lsl pc
    4518:	fe062000 	cdp2	0, 0, cr2, cr6, cr0, {0}
    451c:	02000010 	andeq	r0, r0, #16
    4520:	005f103a 	subseq	r1, pc, sl, lsr r0	; <UNPREDICTABLE>
    4524:	06240000 	strteq	r0, [r4], -r0
    4528:	000011c4 	andeq	r1, r0, r4, asr #3
    452c:	5f103b02 	svcpl	0x00103b02
    4530:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4534:	0011d406 	andseq	sp, r1, r6, lsl #8
    4538:	103c0200 	eorsne	r0, ip, r0, lsl #4
    453c:	0000005f 	andeq	r0, r0, pc, asr r0
    4540:	106a062c 	rsbne	r0, sl, ip, lsr #12
    4544:	3d020000 	stccc	0, cr0, [r2, #-0]
    4548:	00005f10 	andeq	r5, r0, r0, lsl pc
    454c:	64063000 	strvs	r3, [r6], #-0
    4550:	02000011 	andeq	r0, r0, #17
    4554:	005f103e 	subseq	r1, pc, lr, lsr r0	; <UNPREDICTABLE>
    4558:	06340000 	ldrteq	r0, [r4], -r0
    455c:	00001209 	andeq	r1, r0, r9, lsl #4
    4560:	5f103f02 	svcpl	0x00103f02
    4564:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4568:	00111f06 	andseq	r1, r1, r6, lsl #30
    456c:	10400200 	subne	r0, r0, r0, lsl #4
    4570:	0000005f 	andeq	r0, r0, pc, asr r0
    4574:	1133063c 	teqne	r3, ip, lsr r6
    4578:	41020000 	mrsmi	r0, (UNDEF: 2)
    457c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4580:	88064000 	stmdahi	r6, {lr}
    4584:	02000011 	andeq	r0, r0, #17
    4588:	005f1042 	subseq	r1, pc, r2, asr #32
    458c:	06440000 	strbeq	r0, [r4], -r0
    4590:	00001174 	andeq	r1, r0, r4, ror r1
    4594:	5f104302 	svcpl	0x00104302
    4598:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    459c:	0011af06 	andseq	sl, r1, r6, lsl #30
    45a0:	10440200 	subne	r0, r4, r0, lsl #4
    45a4:	0000005f 	andeq	r0, r0, pc, asr r0
    45a8:	11e4064c 	mvnne	r0, ip, asr #12
    45ac:	45020000 	strmi	r0, [r2, #-0]
    45b0:	00005f10 	andeq	r5, r0, r0, lsl pc
    45b4:	4e065000 	cdpmi	0, 0, cr5, cr6, cr0, {0}
    45b8:	02000011 	andeq	r0, r0, #17
    45bc:	005f1046 	subseq	r1, pc, r6, asr #32
    45c0:	00540000 	subseq	r0, r4, r0
    45c4:	00114703 	andseq	r4, r1, r3, lsl #14
    45c8:	03470200 	movteq	r0, #29184	; 0x7200
    45cc:	00000087 	andeq	r0, r0, r7, lsl #1
    45d0:	0001af07 	andeq	sl, r1, r7, lsl #30
    45d4:	10980800 	addsne	r0, r8, r0, lsl #16
    45d8:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    45dc:	0001bb15 	andeq	fp, r1, r5, lsl fp
    45e0:	03010100 	movweq	r0, #4352	; 0x1100
    45e4:	00001615 	andeq	r1, r0, r5, lsl r6
    45e8:	4c122703 	ldcmi	7, cr2, [r2], {3}
    45ec:	07000000 	streq	r0, [r0, -r0]
    45f0:	000001ce 	andeq	r0, r0, lr, asr #3
    45f4:	0001ce09 	andeq	ip, r1, r9, lsl #28
    45f8:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    45fc:	2b030000 	blcs	c4604 <__ccfg+0xa465c>
    4600:	00003912 	andeq	r3, r0, r2, lsl r9
    4604:	01e40900 	mvneq	r0, r0, lsl #18
    4608:	66030000 	strvs	r0, [r3], -r0
    460c:	03000016 	movweq	r0, #22
    4610:	005f122c 	subseq	r1, pc, ip, lsr #4
    4614:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    4618:	03000001 	movweq	r0, #1
    461c:	0000028b 	andeq	r0, r0, fp, lsl #5
    4620:	5f122d03 	svcpl	0x00122d03
    4624:	05000000 	streq	r0, [r0, #-0]
    4628:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    462c:	000002a0 	andeq	r0, r0, r0, lsr #5
    4630:	0002a60a 	andeq	sl, r2, sl, lsl #12
    4634:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    4638:	000001e4 	andeq	r0, r0, r4, ror #3
    463c:	00070101 	andeq	r0, r7, r1, lsl #2
    4640:	0000a40a 	andeq	sl, r0, sl, lsl #8
    4644:	03350300 	teqeq	r5, #0, 6
    4648:	000001e4 	andeq	r0, r0, r4, ror #3
    464c:	00060101 	andeq	r0, r6, r1, lsl #2
    4650:	0002740a 	andeq	r7, r2, sl, lsl #8
    4654:	03360300 	teqeq	r6, #0, 6
    4658:	000001e4 	andeq	r0, r0, r4, ror #3
    465c:	00050101 	andeq	r0, r5, r1, lsl #2
    4660:	0004320a 	andeq	r3, r4, sl, lsl #4
    4664:	03370300 	teqeq	r7, #0, 6
    4668:	000001e4 	andeq	r0, r0, r4, ror #3
    466c:	00040101 	andeq	r0, r4, r1, lsl #2
    4670:	00042b0a 	andeq	r2, r4, sl, lsl #22
    4674:	03380300 	teqeq	r8, #0, 6
    4678:	000001e4 	andeq	r0, r0, r4, ror #3
    467c:	00000401 	andeq	r0, r0, r1, lsl #8
    4680:	00041c06 	andeq	r1, r4, r6, lsl #24
    4684:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    4688:	000001e4 	andeq	r0, r0, r4, ror #3
    468c:	004c0601 	subeq	r0, ip, r1, lsl #12
    4690:	3c030000 	stccc	0, cr0, [r3], {-0}
    4694:	0001e403 	andeq	lr, r1, r3, lsl #8
    4698:	79060200 	stmdbvc	r6, {r9}
    469c:	03000000 	movweq	r0, #0
    46a0:	01e4033d 	mvneq	r0, sp, lsr r3
    46a4:	06030000 	streq	r0, [r3], -r0
    46a8:	00000146 	andeq	r0, r0, r6, asr #2
    46ac:	f5083f03 			; <UNDEFINED> instruction: 0xf5083f03
    46b0:	04000001 	streq	r0, [r0], #-1
    46b4:	045b0300 	ldrbeq	r0, [fp], #-768	; 0xfffffd00
    46b8:	41030000 	mrsmi	r0, (UNDEF: 3)
    46bc:	00021203 	andeq	r1, r2, r3, lsl #4
    46c0:	02a00900 	adceq	r0, r0, #0, 18
    46c4:	9a080000 	bls	2046cc <__ccfg+0x1e4724>
    46c8:	03000002 	movweq	r0, #2
    46cc:	02ac1a43 	adceq	r1, ip, #274432	; 0x43000
    46d0:	01010000 	mrseq	r0, (UNDEF: 1)
    46d4:	00030608 	andeq	r0, r3, r8, lsl #12
    46d8:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    46dc:	000002cd 	andeq	r0, r0, sp, asr #5
    46e0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    46e4:	000002d3 	ldrdeq	r0, [r0], -r3
    46e8:	a3080102 	movwge	r0, #33026	; 0x8102
    46ec:	07000003 	streq	r0, [r0, -r3]
    46f0:	000002d3 	ldrdeq	r0, [r0], -r3
    46f4:	00031408 	andeq	r1, r3, r8, lsl #8
    46f8:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    46fc:	000002cd 	andeq	r0, r0, sp, asr #5
    4700:	08050101 	stmdaeq	r5, {r0, r8}
    4704:	1e098f04 	cdpne	15, 0, cr8, cr9, cr4, {0}
    4708:	06000003 	streq	r0, [r0], -r3
    470c:	000002ad 	andeq	r0, r0, sp, lsr #5
    4710:	5f0b9004 	svcpl	0x000b9004
    4714:	00000000 	andeq	r0, r0, r0
    4718:	00064706 	andeq	r4, r6, r6, lsl #14
    471c:	08910400 	ldmeq	r1, {sl}
    4720:	000001ce 	andeq	r0, r0, lr, asr #3
    4724:	04a80604 	strteq	r0, [r8], #1540	; 0x604
    4728:	92040000 	andls	r0, r4, #0
    472c:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    4730:	03000600 	movweq	r0, #1536	; 0x600
    4734:	00000439 	andeq	r0, r0, r9, lsr r4
    4738:	ed039304 	stc	3, cr9, [r3, #-16]
    473c:	0c000002 	stceq	0, cr0, [r0], {2}
    4740:	0000031e 	andeq	r0, r0, lr, lsl r3
    4744:	00000335 	andeq	r0, r0, r5, lsr r3
    4748:	4208000d 	andmi	r0, r8, #13
    474c:	04000000 	streq	r0, [r0], #-0
    4750:	032a0f99 			; <UNDEFINED> instruction: 0x032a0f99
    4754:	01010000 	mrseq	r0, (UNDEF: 1)
    4758:	91050105 	tstls	r5, r5, lsl #2
    475c:	00036d09 	andeq	r6, r3, r9, lsl #26
    4760:	049b0a00 	ldreq	r0, [fp], #2560	; 0xa00
    4764:	93050000 	movwls	r0, #20480	; 0x5000
    4768:	0001e407 	andeq	lr, r1, r7, lsl #8
    476c:	01070100 	mrseq	r0, (UNDEF: 23)
    4770:	003d0a00 	eorseq	r0, sp, r0, lsl #20
    4774:	94050000 	strls	r0, [r5], #-0
    4778:	0001e403 	andeq	lr, r1, r3, lsl #8
    477c:	00010100 	andeq	r0, r1, r0, lsl #2
    4780:	6b030000 	blvs	c4788 <__ccfg+0xa47e0>
    4784:	05000002 	streq	r0, [r0, #-2]
    4788:	03430396 	movteq	r0, #13206	; 0x3396
    478c:	6d070000 	stcvs	0, cr0, [r7, #-0]
    4790:	0c000003 	stceq	0, cr0, [r0], {3}
    4794:	00000379 	andeq	r0, r0, r9, ror r3
    4798:	00000389 	andeq	r0, r0, r9, lsl #7
    479c:	7e07000d 	cdpvc	0, 0, cr0, cr7, cr13, {0}
    47a0:	08000003 	stmdaeq	r0, {r0, r1}
    47a4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    47a8:	89179c05 	ldmdbhi	r7, {r0, r2, sl, fp, ip, pc}
    47ac:	01000003 	tsteq	r0, r3
    47b0:	01da0c01 	bicseq	r0, sl, r1, lsl #24
    47b4:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
    47b8:	000d0000 	andeq	r0, sp, r0
    47bc:	00039c07 	andeq	r9, r3, r7, lsl #24
    47c0:	038c0800 	orreq	r0, ip, #0, 16
    47c4:	06060000 	streq	r0, [r6], -r0
    47c8:	0003a713 	andeq	sl, r3, r3, lsl r7
    47cc:	08010100 	stmdaeq	r1, {r8}
    47d0:	00000126 	andeq	r0, r0, r6, lsr #2
    47d4:	f50ec304 			; <UNDEFINED> instruction: 0xf50ec304
    47d8:	01000001 	tsteq	r0, r1
    47dc:	04b50e01 	ldrteq	r0, [r5], #3585	; 0xe01
    47e0:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    47e4:	03d51001 	bicseq	r1, r5, #1
    47e8:	040b0000 	streq	r0, [fp], #-0
    47ec:	000003db 	ldrdeq	r0, [r0], -fp
    47f0:	03e7010f 	mvneq	r0, #-1073741821	; 0xc0000003
    47f4:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    47f8:	00000001 	andeq	r0, r0, r1
    47fc:	0002da0c 	andeq	sp, r2, ip, lsl #20
    4800:	0003f200 	andeq	pc, r3, r0, lsl #4
    4804:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    4808:	000003e7 	andeq	r0, r0, r7, ror #7
    480c:	00046b11 	andeq	r6, r4, r1, lsl fp
    4810:	017f0700 	cmneq	pc, r0, lsl #14
    4814:	0003f216 	andeq	pc, r3, r6, lsl r2	; <UNPREDICTABLE>
    4818:	11010100 	mrsne	r0, (UNDEF: 17)
    481c:	00000384 	andeq	r0, r0, r4, lsl #7
    4820:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    4824:	00000201 	andeq	r0, r0, r1, lsl #4
    4828:	a0110101 	andsge	r0, r1, r1, lsl #2
    482c:	07000004 	streq	r0, [r0, -r4]
    4830:	f50e02d8 			; <UNDEFINED> instruction: 0xf50e02d8
    4834:	01000001 	tsteq	r0, r1
    4838:	07081201 	streq	r1, [r8, -r1, lsl #4]
    483c:	4b090303 	blmi	245450 <__ccfg+0x2254a8>
    4840:	13000004 	movwne	r0, #4
    4844:	00002249 	andeq	r2, r0, r9, asr #4
    4848:	07030707 	streq	r0, [r3, -r7, lsl #14]
    484c:	000001ce 	andeq	r0, r0, lr, asr #3
    4850:	05991300 	ldreq	r1, [r9, #768]	; 0x300
    4854:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    4858:	02060803 	andeq	r0, r6, #196608	; 0x30000
    485c:	00040000 	andeq	r0, r4, r0
    4860:	00024b0e 	andeq	r4, r2, lr, lsl #22
    4864:	03090700 	movweq	r0, #38656	; 0x9700
    4868:	00042403 	andeq	r2, r4, r3, lsl #8
    486c:	04d21400 	ldrbeq	r1, [r2], #1024	; 0x400
    4870:	07300000 	ldreq	r0, [r0, -r0]!
    4874:	bb08030b 	bllt	2054a8 <__ccfg+0x1e5500>
    4878:	13000004 	movwne	r0, #4
    487c:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    4880:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    4884:	000001ce 	andeq	r0, r0, lr, asr #3
    4888:	02b71300 	adcseq	r1, r7, #0, 6
    488c:	15070000 	strne	r0, [r7, #-0]
    4890:	01ce0803 	biceq	r0, lr, r3, lsl #16
    4894:	13020000 	movwne	r0, #8192	; 0x2000
    4898:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    489c:	0b031607 	bleq	ca0c0 <__ccfg+0xaa118>
    48a0:	000003c8 	andeq	r0, r0, r8, asr #7
    48a4:	0f941304 	svceq	0x00941304
    48a8:	17070000 	strne	r0, [r7, -r0]
    48ac:	02060903 	andeq	r0, r6, #49152	; 0xc000
    48b0:	13080000 	movwne	r0, #32768	; 0x8000
    48b4:	00000464 	andeq	r0, r0, r4, ror #8
    48b8:	0f031807 	svceq	0x00031807
    48bc:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    48c0:	02b2130c 	adcseq	r1, r2, #12, 6	; 0x30000000
    48c4:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    48c8:	04cb1503 	strbeq	r1, [fp], #1283	; 0x503
    48cc:	002c0000 	eoreq	r0, ip, r0
    48d0:	00044b0c 	andeq	r4, r4, ip, lsl #22
    48d4:	0004cb00 	andeq	ip, r4, r0, lsl #22
    48d8:	00801500 	addeq	r1, r0, r0, lsl #10
    48dc:	00030000 	andeq	r0, r3, r0
    48e0:	0458040b 	ldrbeq	r0, [r8], #-1035	; 0xfffffbf5
    48e4:	dd0e0000 	stcle	0, cr0, [lr, #-0]
    48e8:	07000004 	streq	r0, [r0, -r4]
    48ec:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    48f0:	11000004 	tstne	r0, r4
    48f4:	0000037a 	andeq	r0, r0, sl, ror r3
    48f8:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    48fc:	000004ed 	andeq	r0, r0, sp, ror #9
    4900:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4904:	000004d1 	ldrdeq	r0, [r0], -r1
    4908:	00050b08 	andeq	r0, r5, r8, lsl #22
    490c:	131d0800 	tstne	sp, #0, 16
    4910:	000001ce 	andeq	r0, r0, lr, asr #3
    4914:	75080101 	strvc	r0, [r8, #-257]	; 0xfffffeff
    4918:	08000007 	stmdaeq	r0, {r0, r1, r2}
    491c:	01df1a1e 	bicseq	r1, pc, lr, lsl sl	; <UNPREDICTABLE>
    4920:	01010000 	mrseq	r0, (UNDEF: 1)
    4924:	00090508 	andeq	r0, r9, r8, lsl #10
    4928:	241e0800 	ldrcs	r0, [lr], #-2048	; 0xfffff800
    492c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4930:	34080101 	strcc	r0, [r8], #-257	; 0xfffffeff
    4934:	08000006 	stmdaeq	r0, {r1, r2}
    4938:	04ed1422 	strbteq	r1, [sp], #1058	; 0x422
    493c:	01010000 	mrseq	r0, (UNDEF: 1)
    4940:	0001c016 	andeq	ip, r1, r6, lsl r0
    4944:	02170900 	andseq	r0, r7, #0, 18
    4948:	a803050e 	stmdage	r3, {r1, r2, r3, r8, sl}
    494c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4950:	00000500 	andeq	r0, r0, r0, lsl #10
    4954:	12880003 	addne	r0, r8, #3
    4958:	01040000 	mrseq	r0, (UNDEF: 4)
    495c:	00000157 	andeq	r0, r0, r7, asr r1
    4960:	0012500c 	andseq	r5, r2, ip
    4964:	0003a800 	andeq	sl, r3, r0, lsl #16
    4968:	0009c800 	andeq	ip, r9, r0, lsl #16
    496c:	00000000 	andeq	r0, r0, r0
    4970:	00397c00 	eorseq	r7, r9, r0, lsl #24
    4974:	06010200 	streq	r0, [r1], -r0, lsl #4
    4978:	0000039c 	muleq	r0, ip, r3
    497c:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    4980:	02000003 	andeq	r0, r0, #3
    4984:	00b00504 	adcseq	r0, r0, r4, lsl #10
    4988:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    498c:	0000ab05 	andeq	sl, r0, r5, lsl #22
    4990:	22510300 	subscs	r0, r1, #0, 6
    4994:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    4998:	00004d18 	andeq	r4, r0, r8, lsl sp
    499c:	08010200 	stmdaeq	r1, {r9}
    49a0:	0000039a 	muleq	r0, sl, r3
    49a4:	00213f03 	eoreq	r3, r1, r3, lsl #30
    49a8:	19310400 	ldmdbne	r1!, {sl}
    49ac:	00000060 	andeq	r0, r0, r0, rrx
    49b0:	58070202 	stmdapl	r7, {r1, r9}
    49b4:	03000002 	movweq	r0, #2
    49b8:	00001808 	andeq	r1, r0, r8, lsl #16
    49bc:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    49c0:	02000000 	andeq	r0, r0, #0
    49c4:	00850704 	addeq	r0, r5, r4, lsl #14
    49c8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    49cc:	00008007 	andeq	r8, r0, r7
    49d0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    49d4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    49d8:	8a070402 	bhi	1c59e8 <__ccfg+0x1a5a40>
    49dc:	03000000 	movweq	r0, #0
    49e0:	00001615 	andeq	r1, r0, r5, lsl r6
    49e4:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    49e8:	05000000 	streq	r0, [r0, #-0]
    49ec:	0000008f 	andeq	r0, r0, pc, lsl #1
    49f0:	00008f06 	andeq	r8, r0, r6, lsl #30
    49f4:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    49f8:	2b050000 	blcs	144a00 <__ccfg+0x124a58>
    49fc:	00004112 	andeq	r4, r0, r2, lsl r1
    4a00:	00a50600 	adceq	r0, r5, r0, lsl #12
    4a04:	a5050000 	strge	r0, [r5, #-0]
    4a08:	03000000 	movweq	r0, #0
    4a0c:	00001666 	andeq	r1, r0, r6, ror #12
    4a10:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    4a14:	05000000 	streq	r0, [r0, #-0]
    4a18:	000000bb 	strheq	r0, [r0], -fp
    4a1c:	00028b03 	andeq	r8, r2, r3, lsl #22
    4a20:	122d0500 	eorne	r0, sp, #0, 10
    4a24:	00000067 	andeq	r0, r0, r7, rrx
    4a28:	0007bc03 	andeq	fp, r7, r3, lsl #24
    4a2c:	102e0500 	eorne	r0, lr, r0, lsl #10
    4a30:	000000e4 	andeq	r0, r0, r4, ror #1
    4a34:	008f0407 	addeq	r0, pc, r7, lsl #8
    4a38:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    4a3c:	78093205 	stmdavc	r9, {r0, r2, r9, ip, sp}
    4a40:	09000001 	stmdbeq	r0, {r0}
    4a44:	000002a6 	andeq	r0, r0, r6, lsr #5
    4a48:	a5073405 	strge	r3, [r7, #-1029]	; 0xfffffbfb
    4a4c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a50:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    4a54:	000000a4 	andeq	r0, r0, r4, lsr #1
    4a58:	a5033505 	strge	r3, [r3, #-1285]	; 0xfffffafb
    4a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a60:	09000601 	stmdbeq	r0, {r0, r9, sl}
    4a64:	00000274 	andeq	r0, r0, r4, ror r2
    4a68:	a5033605 	strge	r3, [r3, #-1541]	; 0xfffff9fb
    4a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a70:	09000501 	stmdbeq	r0, {r0, r8, sl}
    4a74:	00000432 	andeq	r0, r0, r2, lsr r4
    4a78:	a5033705 	strge	r3, [r3, #-1797]	; 0xfffff8fb
    4a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a80:	09000401 	stmdbeq	r0, {r0, sl}
    4a84:	0000042b 	andeq	r0, r0, fp, lsr #8
    4a88:	a5033805 	strge	r3, [r3, #-2053]	; 0xfffff7fb
    4a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    4a90:	0a000004 	beq	4aa8 <__exidx_end+0x1ba0>
    4a94:	0000041c 	andeq	r0, r0, ip, lsl r4
    4a98:	a5073a05 	strge	r3, [r7, #-2565]	; 0xfffff5fb
    4a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    4aa0:	00004c0a 	andeq	r4, r0, sl, lsl #24
    4aa4:	033c0500 	teqeq	ip, #0, 10
    4aa8:	000000a5 	andeq	r0, r0, r5, lsr #1
    4aac:	00790a02 	rsbseq	r0, r9, r2, lsl #20
    4ab0:	3d050000 	stccc	0, cr0, [r5, #-0]
    4ab4:	0000a503 	andeq	sl, r0, r3, lsl #10
    4ab8:	460a0300 	strmi	r0, [sl], -r0, lsl #6
    4abc:	05000001 	streq	r0, [r0, #-1]
    4ac0:	00bb083f 	adcseq	r0, fp, pc, lsr r8
    4ac4:	00040000 	andeq	r0, r4, r0
    4ac8:	00045b03 	andeq	r5, r4, r3, lsl #22
    4acc:	03410500 	movteq	r0, #5376	; 0x1500
    4ad0:	000000ea 	andeq	r0, r0, sl, ror #1
    4ad4:	00017806 	andeq	r7, r1, r6, lsl #16
    4ad8:	029a0b00 	addseq	r0, sl, #0, 22
    4adc:	43050000 	movwmi	r0, #20480	; 0x5000
    4ae0:	0001841a 	andeq	r8, r1, sl, lsl r4
    4ae4:	0b010100 	bleq	44eec <__ccfg+0x24f44>
    4ae8:	00000306 	andeq	r0, r0, r6, lsl #6
    4aec:	a50e4505 	strge	r4, [lr, #-1285]	; 0xfffffafb
    4af0:	01000001 	tsteq	r0, r1
    4af4:	ab040701 	blge	106700 <__ccfg+0xe6758>
    4af8:	02000001 	andeq	r0, r0, #1
    4afc:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
    4b00:	ab050000 	blge	144b08 <__ccfg+0x124b60>
    4b04:	0b000001 	bleq	4b10 <__exidx_end+0x1c08>
    4b08:	00000314 	andeq	r0, r0, r4, lsl r3
    4b0c:	a51e4505 	ldrge	r4, [lr, #-1285]	; 0xfffffafb
    4b10:	01000001 	tsteq	r0, r1
    4b14:	06080801 	streq	r0, [r8], -r1, lsl #16
    4b18:	01f6098f 	mvnseq	r0, pc, lsl #19
    4b1c:	ad0a0000 	stcge	0, cr0, [sl, #-0]
    4b20:	06000002 	streq	r0, [r0], -r2
    4b24:	00670b90 	mlseq	r7, r0, fp, r0
    4b28:	0a000000 	beq	4b30 <__exidx_end+0x1c28>
    4b2c:	00000647 	andeq	r0, r0, r7, asr #12
    4b30:	8f089106 	svchi	0x00089106
    4b34:	04000000 	streq	r0, [r0], #-0
    4b38:	0004a80a 	andeq	sl, r4, sl, lsl #16
    4b3c:	10920600 	addsne	r0, r2, r0, lsl #12
    4b40:	000000b1 	strheq	r0, [r0], -r1
    4b44:	39030006 	stmdbcc	r3, {r1, r2}
    4b48:	06000004 	streq	r0, [r0], -r4
    4b4c:	01c50393 			; <UNDEFINED> instruction: 0x01c50393
    4b50:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    4b54:	0d000001 	stceq	0, cr0, [r0, #-4]
    4b58:	0d000002 	stceq	0, cr0, [r0, #-8]
    4b5c:	00420b00 	subeq	r0, r2, r0, lsl #22
    4b60:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    4b64:	0002020f 	andeq	r0, r2, pc, lsl #4
    4b68:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4b6c:	0000b604 	andeq	fp, r0, r4, lsl #12
    4b70:	07010800 	streq	r0, [r1, -r0, lsl #16]
    4b74:	024b0991 	subeq	r0, fp, #2375680	; 0x244000
    4b78:	9b090000 	blls	244b80 <__ccfg+0x224bd8>
    4b7c:	07000004 	streq	r0, [r0, -r4]
    4b80:	00a50793 	umlaleq	r0, r5, r3, r7
    4b84:	07010000 	streq	r0, [r1, -r0]
    4b88:	3d090001 	stccc	0, cr0, [r9, #-4]
    4b8c:	07000000 	streq	r0, [r0, -r0]
    4b90:	00a50394 	umlaleq	r0, r5, r4, r3
    4b94:	01010000 	mrseq	r0, (UNDEF: 1)
    4b98:	03000000 	movweq	r0, #0
    4b9c:	0000026b 	andeq	r0, r0, fp, ror #4
    4ba0:	21039607 	tstcs	r3, r7, lsl #12
    4ba4:	05000002 	streq	r0, [r0, #-2]
    4ba8:	0000024b 	andeq	r0, r0, fp, asr #4
    4bac:	0002570c 	andeq	r5, r2, ip, lsl #14
    4bb0:	00026700 	andeq	r6, r2, r0, lsl #14
    4bb4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4bb8:	0000025c 	andeq	r0, r0, ip, asr r2
    4bbc:	0002d00b 	andeq	sp, r2, fp
    4bc0:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    4bc4:	00000267 	andeq	r0, r0, r7, ror #4
    4bc8:	9b0c0101 	blls	304fd4 <__ccfg+0x2e502c>
    4bcc:	85000000 	strhi	r0, [r0, #-0]
    4bd0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4bd4:	027a0500 	rsbseq	r0, sl, #0, 10
    4bd8:	8c0b0000 	stchi	0, cr0, [fp], {-0}
    4bdc:	08000003 	stmdaeq	r0, {r0, r1}
    4be0:	02851306 	addeq	r1, r5, #402653184	; 0x18000000
    4be4:	01010000 	mrseq	r0, (UNDEF: 1)
    4be8:	0001260b 	andeq	r2, r1, fp, lsl #12
    4bec:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    4bf0:	000000bb 	strheq	r0, [r0], -fp
    4bf4:	b50e0101 	strlt	r0, [lr, #-257]	; 0xfffffeff
    4bf8:	09000004 	stmdbeq	r0, {r2}
    4bfc:	b310016e 	tstlt	r0, #-2147483621	; 0x8000001b
    4c00:	07000002 	streq	r0, [r0, -r2]
    4c04:	0002b904 	andeq	fp, r2, r4, lsl #18
    4c08:	c5010f00 	strgt	r0, [r1, #-3840]	; 0xfffff100
    4c0c:	10000002 	andne	r0, r0, r2
    4c10:	0000008f 	andeq	r0, r0, pc, lsl #1
    4c14:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    4c18:	02d00000 	sbcseq	r0, r0, #0
    4c1c:	000d0000 	andeq	r0, sp, r0
    4c20:	0002c505 	andeq	ip, r2, r5, lsl #10
    4c24:	046b1100 	strbteq	r1, [fp], #-256	; 0xffffff00
    4c28:	7f090000 	svcvc	0x00090000
    4c2c:	02d01601 	sbcseq	r1, r0, #1048576	; 0x100000
    4c30:	01010000 	mrseq	r0, (UNDEF: 1)
    4c34:	00038411 	andeq	r8, r3, r1, lsl r4
    4c38:	01820900 	orreq	r0, r2, r0, lsl #18
    4c3c:	0000c714 	andeq	ip, r0, r4, lsl r7
    4c40:	11010100 	mrsne	r0, (UNDEF: 17)
    4c44:	000004a0 	andeq	r0, r0, r0, lsr #9
    4c48:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    4c4c:	000000bb 	strheq	r0, [r0], -fp
    4c50:	08120101 	ldmdaeq	r2, {r0, r8}
    4c54:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    4c58:	00000329 	andeq	r0, r0, r9, lsr #6
    4c5c:	00224913 	eoreq	r4, r2, r3, lsl r9
    4c60:	03070900 	movweq	r0, #30976	; 0x7900
    4c64:	00008f07 	andeq	r8, r0, r7, lsl #30
    4c68:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    4c6c:	09000005 	stmdbeq	r0, {r0, r2}
    4c70:	cc080308 	stcgt	3, cr0, [r8], {8}
    4c74:	04000000 	streq	r0, [r0], #-0
    4c78:	024b0e00 	subeq	r0, fp, #0, 28
    4c7c:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    4c80:	03020303 	movweq	r0, #8963	; 0x2303
    4c84:	d2140000 	andsle	r0, r4, #0
    4c88:	30000004 	andcc	r0, r0, r4
    4c8c:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    4c90:	00000399 	muleq	r0, r9, r3
    4c94:	0004bd13 	andeq	fp, r4, r3, lsl sp
    4c98:	03140900 	tsteq	r4, #0, 18
    4c9c:	00008f08 	andeq	r8, r0, r8, lsl #30
    4ca0:	b7130000 	ldrlt	r0, [r3, -r0]
    4ca4:	09000002 	stmdbeq	r0, {r1}
    4ca8:	8f080315 	svchi	0x00080315
    4cac:	02000000 	andeq	r0, r0, #0
    4cb0:	0004b813 	andeq	fp, r4, r3, lsl r8
    4cb4:	03160900 	tsteq	r6, #0, 18
    4cb8:	0002a60b 	andeq	sl, r2, fp, lsl #12
    4cbc:	94130400 	ldrls	r0, [r3], #-1024	; 0xfffffc00
    4cc0:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    4cc4:	cc090317 	stcgt	3, cr0, [r9], {23}
    4cc8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4ccc:	00046413 	andeq	r6, r4, r3, lsl r4
    4cd0:	03180900 	tsteq	r8, #0, 18
    4cd4:	0003990f 	andeq	r9, r3, pc, lsl #18
    4cd8:	b2130c00 	andslt	r0, r3, #0, 24
    4cdc:	09000002 	stmdbeq	r0, {r1}
    4ce0:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    4ce4:	2c000003 	stccs	0, cr0, [r0], {3}
    4ce8:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
    4cec:	03a90000 			; <UNDEFINED> instruction: 0x03a90000
    4cf0:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    4cf4:	03000000 	movweq	r0, #0
    4cf8:	36040700 	strcc	r0, [r4], -r0, lsl #14
    4cfc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    4d00:	000004dd 	ldrdeq	r0, [r0], -sp
    4d04:	1b031c09 	blne	cbd30 <__ccfg+0xabd88>
    4d08:	00000336 	andeq	r0, r0, r6, lsr r3
    4d0c:	00037a11 	andeq	r7, r3, r1, lsl sl
    4d10:	031e0900 	tsteq	lr, #0, 18
    4d14:	0003cb14 	andeq	ip, r3, r4, lsl fp
    4d18:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4d1c:	0003af04 	andeq	sl, r3, r4, lsl #30
    4d20:	050b0b00 	streq	r0, [fp, #-2816]	; 0xfffff500
    4d24:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    4d28:	00008f13 	andeq	r8, r0, r3, lsl pc
    4d2c:	0b010100 	bleq	45134 <__ccfg+0x2518c>
    4d30:	00000775 	andeq	r0, r0, r5, ror r7
    4d34:	a01a1e0a 	andsge	r1, sl, sl, lsl #28
    4d38:	01000000 	mrseq	r0, (UNDEF: 0)
    4d3c:	09050b01 	stmdbeq	r5, {r0, r8, r9, fp}
    4d40:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    4d44:	0000a024 	andeq	sl, r0, r4, lsr #32
    4d48:	0b010100 	bleq	45150 <__ccfg+0x251a8>
    4d4c:	00000634 	andeq	r0, r0, r4, lsr r6
    4d50:	cb14220a 	blgt	50d580 <__ccfg+0x4ed5d8>
    4d54:	01000003 	tsteq	r0, r3
    4d58:	026c1601 	rsbeq	r1, ip, #1048576	; 0x100000
    4d5c:	0d010000 	stceq	0, cr0, [r1, #-0]
    4d60:	00030510 	andeq	r0, r3, r0, lsl r5
    4d64:	1700002f 	strne	r0, [r0, -pc, lsr #32]
    4d68:	00123001 	andseq	r3, r2, r1
    4d6c:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    4d70:	00000001 	andeq	r0, r0, r1
    4d74:	00000000 	andeq	r0, r0, r0
    4d78:	bb9c0100 	bllt	fe705180 <_estack+0xde700180>
    4d7c:	18000004 	stmdane	r0, {r2}
    4d80:	01007473 	tsteq	r0, r3, ror r4
    4d84:	008f1c11 	addeq	r1, pc, r1, lsl ip	; <UNPREDICTABLE>
    4d88:	1f5a0000 	svcne	0x005a0000
    4d8c:	2b190000 	blcs	644d94 <__ccfg+0x624dec>
    4d90:	01000012 	tsteq	r0, r2, lsl r0
    4d94:	021b2c11 	andseq	r2, fp, #4352	; 0x1100
    4d98:	1f780000 	svcne	0x00780000
    4d9c:	76180000 	ldrvc	r0, [r8], -r0
    4da0:	01006c61 	tsteq	r0, r1, ror #24
    4da4:	00d83a11 	sbcseq	r3, r8, r1, lsl sl
    4da8:	1f960000 	svcne	0x00960000
    4dac:	701a0000 	andsvc	r0, sl, r0
    4db0:	12130100 	andsne	r0, r3, #0, 2
    4db4:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4db8:	0100691b 	tsteq	r0, fp, lsl r9
    4dbc:	008f0714 	addeq	r0, pc, r4, lsl r7	; <UNPREDICTABLE>
    4dc0:	1fb40000 	svcne	0x00b40000
    4dc4:	761a0000 	ldrvc	r0, [sl], -r0
    4dc8:	07150100 	ldreq	r0, [r5, -r0, lsl #2]
    4dcc:	000000a5 	andeq	r0, r0, r5, lsr #1
    4dd0:	0004d41c 	andeq	sp, r4, ip, lsl r4
	...
    4ddc:	031c0100 	tsteq	ip, #0, 2
    4de0:	0004de1c 	andeq	sp, r4, ip, lsl lr
	...
    4dec:	031f0100 	tsteq	pc, #0, 2
    4df0:	0004e81d 	andeq	lr, r4, sp, lsl r8
    4df4:	00000000 	andeq	r0, r0, r0
    4df8:	0009a000 	andeq	sl, r9, r0
    4dfc:	0b260100 	bleq	985204 <__ccfg+0x96525c>
    4e00:	0004f61e 	andeq	pc, r4, lr, lsl r6	; <UNPREDICTABLE>
    4e04:	001fc700 	andseq	ip, pc, r0, lsl #14
    4e08:	07000000 	streq	r0, [r0, -r0]
    4e0c:	00025704 	andeq	r5, r2, r4, lsl #14
    4e10:	40011f00 	andmi	r1, r1, r0, lsl #30
    4e14:	01000012 	tsteq	r0, r2, lsl r0
    4e18:	0000060f 	andeq	r0, r0, pc, lsl #12
    4e1c:	00000000 	andeq	r0, r0, r0
    4e20:	9c010000 	stcls	0, cr0, [r1], {-0}
    4e24:	00085720 	andeq	r5, r8, r0, lsr #14
    4e28:	355b0200 	ldrbcc	r0, [fp, #-512]	; 0xfffffe00
    4e2c:	6a200301 	bvs	805a38 <__ccfg+0x7e5a90>
    4e30:	02000005 	andeq	r0, r0, #5
    4e34:	03013550 	movweq	r3, #5456	; 0x1550
    4e38:	00121e21 	andseq	r1, r2, r1, lsr #28
    4e3c:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    4e40:	00006701 	andeq	r6, r0, r1, lsl #14
    4e44:	4d220300 	stcmi	3, cr0, [r2, #-0]
    4e48:	03000001 	movweq	r0, #1
    4e4c:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    4e50:	00000000 	andeq	r0, r0, r0
    4e54:	000004f6 	strdeq	r0, [r0], -r6
    4e58:	14790003 	ldrbtne	r0, [r9], #-3
    4e5c:	01040000 	mrseq	r0, (UNDEF: 4)
    4e60:	00000157 	andeq	r0, r0, r7, asr r1
    4e64:	0012aa0c 	andseq	sl, r2, ip, lsl #20
    4e68:	0003a800 	andeq	sl, r3, r0, lsl #16
    4e6c:	000a4000 	andeq	r4, sl, r0
    4e70:	00000000 	andeq	r0, r0, r0
    4e74:	003c1900 	eorseq	r1, ip, r0, lsl #18
    4e78:	06010200 	streq	r0, [r1], -r0, lsl #4
    4e7c:	0000039c 	muleq	r0, ip, r3
    4e80:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    4e84:	02000003 	andeq	r0, r0, #3
    4e88:	00b00504 	adcseq	r0, r0, r4, lsl #10
    4e8c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4e90:	0000ab05 	andeq	sl, r0, r5, lsl #22
    4e94:	22510300 	subscs	r0, r1, #0, 6
    4e98:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    4e9c:	00004d18 	andeq	r4, r0, r8, lsl sp
    4ea0:	08010200 	stmdaeq	r1, {r9}
    4ea4:	0000039a 	muleq	r0, sl, r3
    4ea8:	00213f03 	eoreq	r3, r1, r3, lsl #30
    4eac:	19310300 	ldmdbne	r1!, {r8, r9}
    4eb0:	00000060 	andeq	r0, r0, r0, rrx
    4eb4:	58070202 	stmdapl	r7, {r1, r9}
    4eb8:	03000002 	movweq	r0, #2
    4ebc:	00001808 	andeq	r1, r0, r8, lsl #16
    4ec0:	73193403 	tstvc	r9, #50331648	; 0x3000000
    4ec4:	02000000 	andeq	r0, r0, #0
    4ec8:	00850704 	addeq	r0, r5, r4, lsl #14
    4ecc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4ed0:	00008007 	andeq	r8, r0, r7
    4ed4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4ed8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4edc:	8a070402 	bhi	1c5eec <__ccfg+0x1a5f44>
    4ee0:	03000000 	movweq	r0, #0
    4ee4:	00001615 	andeq	r1, r0, r5, lsl r6
    4ee8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    4eec:	05000000 	streq	r0, [r0, #-0]
    4ef0:	0000008f 	andeq	r0, r0, pc, lsl #1
    4ef4:	00008f06 	andeq	r8, r0, r6, lsl #30
    4ef8:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    4efc:	2b040000 	blcs	104f04 <__ccfg+0xe4f5c>
    4f00:	00004112 	andeq	r4, r0, r2, lsl r1
    4f04:	00a50600 	adceq	r0, r5, r0, lsl #12
    4f08:	66030000 	strvs	r0, [r3], -r0
    4f0c:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    4f10:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    4f14:	b6050000 	strlt	r0, [r5], -r0
    4f18:	03000000 	movweq	r0, #0
    4f1c:	0000028b 	andeq	r0, r0, fp, lsl #5
    4f20:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    4f24:	07000000 	streq	r0, [r0, -r0]
    4f28:	09320408 	ldmdbeq	r2!, {r3, sl}
    4f2c:	00000161 	andeq	r0, r0, r1, ror #2
    4f30:	0002a608 	andeq	sl, r2, r8, lsl #12
    4f34:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    4f38:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f3c:	00070101 	andeq	r0, r7, r1, lsl #2
    4f40:	0000a408 	andeq	sl, r0, r8, lsl #8
    4f44:	03350400 	teqeq	r5, #0, 8
    4f48:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f4c:	00060101 	andeq	r0, r6, r1, lsl #2
    4f50:	00027408 	andeq	r7, r2, r8, lsl #8
    4f54:	03360400 	teqeq	r6, #0, 8
    4f58:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f5c:	00050101 	andeq	r0, r5, r1, lsl #2
    4f60:	00043208 	andeq	r3, r4, r8, lsl #4
    4f64:	03370400 	teqeq	r7, #0, 8
    4f68:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f6c:	00040101 	andeq	r0, r4, r1, lsl #2
    4f70:	00042b08 	andeq	r2, r4, r8, lsl #22
    4f74:	03380400 	teqeq	r8, #0, 8
    4f78:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f7c:	00000401 	andeq	r0, r0, r1, lsl #8
    4f80:	00041c09 	andeq	r1, r4, r9, lsl #24
    4f84:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    4f88:	000000a5 	andeq	r0, r0, r5, lsr #1
    4f8c:	004c0901 	subeq	r0, ip, r1, lsl #18
    4f90:	3c040000 	stccc	0, cr0, [r4], {-0}
    4f94:	0000a503 	andeq	sl, r0, r3, lsl #10
    4f98:	79090200 	stmdbvc	r9, {r9}
    4f9c:	04000000 	streq	r0, [r0], #-0
    4fa0:	00a5033d 	adceq	r0, r5, sp, lsr r3
    4fa4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4fa8:	00000146 	andeq	r0, r0, r6, asr #2
    4fac:	b6083f04 	strlt	r3, [r8], -r4, lsl #30
    4fb0:	04000000 	streq	r0, [r0], #-0
    4fb4:	045b0300 	ldrbeq	r0, [fp], #-768	; 0xfffffd00
    4fb8:	41040000 	mrsmi	r0, (UNDEF: 4)
    4fbc:	0000d303 	andeq	sp, r0, r3, lsl #6
    4fc0:	01610600 	cmneq	r1, r0, lsl #12
    4fc4:	9a0a0000 	bls	284fcc <__ccfg+0x265024>
    4fc8:	04000002 	streq	r0, [r0], #-2
    4fcc:	016d1a43 	cmneq	sp, r3, asr #20
    4fd0:	01010000 	mrseq	r0, (UNDEF: 1)
    4fd4:	0003060a 	andeq	r0, r3, sl, lsl #12
    4fd8:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    4fdc:	0000018e 	andeq	r0, r0, lr, lsl #3
    4fe0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4fe4:	00000194 	muleq	r0, r4, r1
    4fe8:	a3080102 	movwge	r0, #33026	; 0x8102
    4fec:	05000003 	streq	r0, [r0, #-3]
    4ff0:	00000194 	muleq	r0, r4, r1
    4ff4:	0003140a 	andeq	r1, r3, sl, lsl #8
    4ff8:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    4ffc:	0000018e 	andeq	r0, r0, lr, lsl #3
    5000:	08070101 	stmdaeq	r7, {r0, r8}
    5004:	df098f05 	svcle	0x00098f05
    5008:	09000001 	stmdbeq	r0, {r0}
    500c:	000002ad 	andeq	r0, r0, sp, lsr #5
    5010:	670b9005 	strvs	r9, [fp, -r5]
    5014:	00000000 	andeq	r0, r0, r0
    5018:	00064709 	andeq	r4, r6, r9, lsl #14
    501c:	08910500 	ldmeq	r1, {r8, sl}
    5020:	0000008f 	andeq	r0, r0, pc, lsl #1
    5024:	04a80904 	strteq	r0, [r8], #2308	; 0x904
    5028:	92050000 	andls	r0, r5, #0
    502c:	0000b110 	andeq	fp, r0, r0, lsl r1
    5030:	03000600 	movweq	r0, #1536	; 0x600
    5034:	00000439 	andeq	r0, r0, r9, lsr r4
    5038:	ae039305 	cdpge	3, 0, cr9, cr3, cr5, {0}
    503c:	0c000001 	stceq	0, cr0, [r0], {1}
    5040:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5044:	000001f6 	strdeq	r0, [r0], -r6
    5048:	420a000d 	andmi	r0, sl, #13
    504c:	05000000 	streq	r0, [r0, #-0]
    5050:	01eb0f99 	strexheq	r0, r9, [fp]
    5054:	01010000 	mrseq	r0, (UNDEF: 1)
    5058:	91060107 	tstls	r6, r7, lsl #2
    505c:	00022e09 	andeq	r2, r2, r9, lsl #28
    5060:	049b0800 	ldreq	r0, [fp], #2048	; 0x800
    5064:	93060000 	movwls	r0, #24576	; 0x6000
    5068:	0000a507 	andeq	sl, r0, r7, lsl #10
    506c:	01070100 	mrseq	r0, (UNDEF: 23)
    5070:	003d0800 	eorseq	r0, sp, r0, lsl #16
    5074:	94060000 	strls	r0, [r6], #-0
    5078:	0000a503 	andeq	sl, r0, r3, lsl #10
    507c:	00010100 	andeq	r0, r1, r0, lsl #2
    5080:	6b030000 	blvs	c5088 <__ccfg+0xa50e0>
    5084:	06000002 	streq	r0, [r0], -r2
    5088:	02040396 	andeq	r0, r4, #1476395010	; 0x58000002
    508c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    5090:	0c000002 	stceq	0, cr0, [r0], {2}
    5094:	0000023a 	andeq	r0, r0, sl, lsr r2
    5098:	0000024a 	andeq	r0, r0, sl, asr #4
    509c:	3f05000d 	svccc	0x0005000d
    50a0:	0a000002 	beq	50b0 <__exidx_end+0x21a8>
    50a4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    50a8:	4a179c06 	bmi	5ec0c8 <__ccfg+0x5cc120>
    50ac:	01000002 	tsteq	r0, r2
    50b0:	009b0c01 	addseq	r0, fp, r1, lsl #24
    50b4:	02680000 	rsbeq	r0, r8, #0
    50b8:	000d0000 	andeq	r0, sp, r0
    50bc:	00025d05 	andeq	r5, r2, r5, lsl #26
    50c0:	038c0a00 	orreq	r0, ip, #0, 20
    50c4:	06070000 	streq	r0, [r7], -r0
    50c8:	00026813 	andeq	r6, r2, r3, lsl r8
    50cc:	0a010100 	beq	454d4 <__ccfg+0x2552c>
    50d0:	00000126 	andeq	r0, r0, r6, lsr #2
    50d4:	b60ec305 	strlt	ip, [lr], -r5, lsl #6
    50d8:	01000000 	mrseq	r0, (UNDEF: 0)
    50dc:	04b50e01 	ldrteq	r0, [r5], #3585	; 0xe01
    50e0:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    50e4:	02961001 	addseq	r1, r6, #1
    50e8:	040b0000 	streq	r0, [fp], #-0
    50ec:	0000029c 	muleq	r0, ip, r2
    50f0:	02a8010f 	adceq	r0, r8, #-1073741821	; 0xc0000003
    50f4:	8f100000 	svchi	0x00100000
    50f8:	00000000 	andeq	r0, r0, r0
    50fc:	00019b0c 	andeq	r9, r1, ip, lsl #22
    5100:	0002b300 	andeq	fp, r2, r0, lsl #6
    5104:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5108:	000002a8 	andeq	r0, r0, r8, lsr #5
    510c:	00046b11 	andeq	r6, r4, r1, lsl fp
    5110:	017f0800 	cmneq	pc, r0, lsl #16
    5114:	0002b316 	andeq	fp, r2, r6, lsl r3
    5118:	11010100 	mrsne	r0, (UNDEF: 17)
    511c:	00000384 	andeq	r0, r0, r4, lsl #7
    5120:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    5124:	000000c2 	andeq	r0, r0, r2, asr #1
    5128:	a0110101 	andsge	r0, r1, r1, lsl #2
    512c:	08000004 	stmdaeq	r0, {r2}
    5130:	b60e02d8 			; <UNDEFINED> instruction: 0xb60e02d8
    5134:	01000000 	mrseq	r0, (UNDEF: 0)
    5138:	08081201 	stmdaeq	r8, {r0, r9, ip}
    513c:	0c090303 	stceq	3, cr0, [r9], {3}
    5140:	13000003 	movwne	r0, #3
    5144:	00002249 	andeq	r2, r0, r9, asr #4
    5148:	07030708 	streq	r0, [r3, -r8, lsl #14]
    514c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5150:	05991300 	ldreq	r1, [r9, #768]	; 0x300
    5154:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5158:	00c70803 	sbceq	r0, r7, r3, lsl #16
    515c:	00040000 	andeq	r0, r4, r0
    5160:	00024b0e 	andeq	r4, r2, lr, lsl #22
    5164:	03090800 	movweq	r0, #38912	; 0x9800
    5168:	0002e503 	andeq	lr, r2, r3, lsl #10
    516c:	04d21400 	ldrbeq	r1, [r2], #1024	; 0x400
    5170:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    5174:	7c08030b 	stcvc	3, cr0, [r8], {11}
    5178:	13000003 	movwne	r0, #3
    517c:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    5180:	08031408 	stmdaeq	r3, {r3, sl, ip}
    5184:	0000008f 	andeq	r0, r0, pc, lsl #1
    5188:	02b71300 	adcseq	r1, r7, #0, 6
    518c:	15080000 	strne	r0, [r8, #-0]
    5190:	008f0803 	addeq	r0, pc, r3, lsl #16
    5194:	13020000 	movwne	r0, #8192	; 0x2000
    5198:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    519c:	0b031608 	bleq	ca9c4 <__ccfg+0xaaa1c>
    51a0:	00000289 	andeq	r0, r0, r9, lsl #5
    51a4:	0f941304 	svceq	0x00941304
    51a8:	17080000 	strne	r0, [r8, -r0]
    51ac:	00c70903 	sbceq	r0, r7, r3, lsl #18
    51b0:	13080000 	movwne	r0, #32768	; 0x8000
    51b4:	00000464 	andeq	r0, r0, r4, ror #8
    51b8:	0f031808 	svceq	0x00031808
    51bc:	0000037c 	andeq	r0, r0, ip, ror r3
    51c0:	02b2130c 	adcseq	r1, r2, #12, 6	; 0x30000000
    51c4:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    51c8:	038c1503 	orreq	r1, ip, #12582912	; 0xc00000
    51cc:	002c0000 	eoreq	r0, ip, r0
    51d0:	00030c0c 	andeq	r0, r3, ip, lsl #24
    51d4:	00038c00 	andeq	r8, r3, r0, lsl #24
    51d8:	00881500 	addeq	r1, r8, r0, lsl #10
    51dc:	00030000 	andeq	r0, r3, r0
    51e0:	0319040b 	tsteq	r9, #184549376	; 0xb000000
    51e4:	dd0e0000 	stcle	0, cr0, [lr, #-0]
    51e8:	08000004 	stmdaeq	r0, {r2}
    51ec:	191b031c 	ldmdbne	fp, {r2, r3, r4, r8, r9}
    51f0:	11000003 	tstne	r0, r3
    51f4:	0000037a 	andeq	r0, r0, sl, ror r3
    51f8:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    51fc:	000003ae 	andeq	r0, r0, lr, lsr #7
    5200:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5204:	00000392 	muleq	r0, r2, r3
    5208:	00050b0a 	andeq	r0, r5, sl, lsl #22
    520c:	131d0900 	tstne	sp, #0, 18
    5210:	0000008f 	andeq	r0, r0, pc, lsl #1
    5214:	750a0101 	strvc	r0, [sl, #-257]	; 0xfffffeff
    5218:	09000007 	stmdbeq	r0, {r0, r1, r2}
    521c:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    5220:	01010000 	mrseq	r0, (UNDEF: 1)
    5224:	0009050a 	andeq	r0, r9, sl, lsl #10
    5228:	241e0900 	ldrcs	r0, [lr], #-2304	; 0xfffff700
    522c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5230:	340a0101 	strcc	r0, [sl], #-257	; 0xfffffeff
    5234:	09000006 	stmdbeq	r0, {r1, r2}
    5238:	03ae1422 			; <UNDEFINED> instruction: 0x03ae1422
    523c:	01010000 	mrseq	r0, (UNDEF: 1)
    5240:	00129916 	andseq	r9, r2, r6, lsl r9
    5244:	0f080100 	svceq	0x00080100
    5248:	00000296 	muleq	r0, r6, r2
    524c:	00000305 	andeq	r0, r0, r5, lsl #6
    5250:	e6160000 	ldr	r0, [r6], -r0
    5254:	01000012 	tsteq	r0, r2, lsl r0
    5258:	008f0d09 	addeq	r0, pc, r9, lsl #26
    525c:	03050000 	movweq	r0, #20480	; 0x5000
    5260:	00000000 	andeq	r0, r0, r0
    5264:	00026d17 	andeq	r6, r2, r7, lsl sp
    5268:	0c0a0100 	stfeqs	f0, [sl], {-0}
    526c:	2f040305 	svccs	0x00040305
    5270:	01180000 	tsteq	r8, r0
    5274:	000012fb 	strdeq	r1, [r0], -fp
    5278:	01065801 	tsteq	r6, r1, lsl #16
	...
    5284:	04479c01 	strbeq	r9, [r7], #-3073	; 0xfffff3ff
    5288:	61190000 	tstvs	r9, r0
    528c:	01007463 	tsteq	r0, r3, ror #8
    5290:	02961d58 	addseq	r1, r6, #88, 26	; 0x1600
    5294:	1fda0000 	svcne	0x00da0000
    5298:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    529c:	0012ee01 	andseq	lr, r2, r1, lsl #28
    52a0:	011c0100 	tsteq	ip, r0, lsl #2
    52a4:	00000001 	andeq	r0, r0, r1
    52a8:	00000000 	andeq	r0, r0, r0
    52ac:	de9c0100 	fmllee	f0, f4, f0
    52b0:	1a000004 	bne	52c8 <__exidx_end+0x23c0>
    52b4:	000000e5 	andeq	r0, r0, r5, ror #1
    52b8:	8f011c01 	svchi	0x00011c01
    52bc:	16000000 	strne	r0, [r0], -r0
    52c0:	1b000020 	blne	5348 <__exidx_end+0x2440>
    52c4:	00001294 	muleq	r0, r4, r2
    52c8:	00012101 	andeq	r2, r1, r1, lsl #2
    52cc:	1b000000 	blne	52d4 <__exidx_end+0x23cc>
    52d0:	000012a1 	andeq	r1, r0, r1, lsr #5
    52d4:	00013001 	andeq	r3, r1, r1
    52d8:	1b000000 	blne	52e0 <__exidx_end+0x23d8>
    52dc:	000013f8 	strdeq	r1, [r0], -r8
    52e0:	00013701 	andeq	r3, r1, r1, lsl #14
    52e4:	1c000000 	stcne	0, cr0, [r0], {-0}
    52e8:	000004de 	ldrdeq	r0, [r0], -lr
    52ec:	00000000 	andeq	r0, r0, r0
    52f0:	000009e0 	andeq	r0, r0, r0, ror #19
    52f4:	ad072b01 	vstrge	d2, [r7, #-4]
    52f8:	1d000004 	stcne	0, cr0, [r0, #-16]
    52fc:	000004ec 	andeq	r0, r0, ip, ror #9
    5300:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    5304:	00000000 	andeq	r0, r0, r0
    5308:	0a080000 	beq	205310 <__ccfg+0x1e5368>
    530c:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5310:	0004c707 	andeq	ip, r4, r7, lsl #14
    5314:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    5318:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    531c:	000004de 	ldrdeq	r0, [r0], -lr
    5320:	00000000 	andeq	r0, r0, r0
    5324:	00000a20 	andeq	r0, r0, r0, lsr #20
    5328:	1d074a01 	vstrne	s8, [r7, #-4]
    532c:	000004ec 	andeq	r0, r0, ip, ror #9
    5330:	1e1f0000 	cdpne	0, 1, cr0, cr15, cr0, {0}
    5334:	02000012 	andeq	r0, r0, #18
    5338:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    533c:	03000000 	movweq	r0, #0
    5340:	00014d20 	andeq	r4, r1, r0, lsr #26
    5344:	18a40200 	stmiane	r4!, {r9}
    5348:	00000067 	andeq	r0, r0, r7, rrx
    534c:	0aa70000 	beq	fe9c5354 <_estack+0xde9c0354>
    5350:	00030000 	andeq	r0, r3, r0
    5354:	00001644 	andeq	r1, r0, r4, asr #12
    5358:	01570104 	cmpeq	r7, r4, lsl #2
    535c:	860c0000 	strhi	r0, [ip], -r0
    5360:	a8000013 	stmdage	r0, {r0, r1, r4}
    5364:	e0000003 	and	r0, r0, r3
    5368:	0000000b 	andeq	r0, r0, fp
    536c:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    5370:	0200003f 	andeq	r0, r0, #63	; 0x3f
    5374:	039c0601 	orrseq	r0, ip, #1048576	; 0x100000
    5378:	02020000 	andeq	r0, r2, #0
    537c:	0003f805 	andeq	pc, r3, r5, lsl #16
    5380:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5384:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    5388:	ab050802 	blge	147398 <__ccfg+0x1273f0>
    538c:	03000000 	movweq	r0, #0
    5390:	00002251 	andeq	r2, r0, r1, asr r2
    5394:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    5398:	02000000 	andeq	r0, r0, #0
    539c:	039a0801 	orrseq	r0, sl, #65536	; 0x10000
    53a0:	3f030000 	svccc	0x00030000
    53a4:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    53a8:	00601931 	rsbeq	r1, r0, r1, lsr r9
    53ac:	02020000 	andeq	r0, r2, #0
    53b0:	00025807 	andeq	r5, r2, r7, lsl #16
    53b4:	18080300 	stmdane	r8, {r8, r9}
    53b8:	34040000 	strcc	r0, [r4], #-0
    53bc:	00007319 	andeq	r7, r0, r9, lsl r3
    53c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    53c4:	00000085 	andeq	r0, r0, r5, lsl #1
    53c8:	80070802 	andhi	r0, r7, r2, lsl #16
    53cc:	04000000 	streq	r0, [r0], #-0
    53d0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    53d4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    53d8:	00008a07 	andeq	r8, r0, r7, lsl #20
    53dc:	04230300 	strteq	r0, [r3], #-768	; 0xfffffd00
    53e0:	26050000 	strcs	r0, [r5], -r0
    53e4:	00004112 	andeq	r4, r0, r2, lsl r1
    53e8:	16150300 	ldrne	r0, [r5], -r0, lsl #6
    53ec:	27050000 	strcs	r0, [r5, -r0]
    53f0:	00005412 	andeq	r5, r0, r2, lsl r4
    53f4:	009b0500 	addseq	r0, fp, r0, lsl #10
    53f8:	9b060000 	blls	185400 <__ccfg+0x165458>
    53fc:	03000000 	movweq	r0, #0
    5400:	0000140d 	andeq	r1, r0, sp, lsl #8
    5404:	41122b05 	tstmi	r2, r5, lsl #22
    5408:	06000000 	streq	r0, [r0], -r0
    540c:	000000b1 	strheq	r0, [r0], -r1
    5410:	0000b105 	andeq	fp, r0, r5, lsl #2
    5414:	16660300 	strbtne	r0, [r6], -r0, lsl #6
    5418:	2c050000 	stccs	0, cr0, [r5], {-0}
    541c:	00006712 	andeq	r6, r0, r2, lsl r7
    5420:	00c70500 	sbceq	r0, r7, r0, lsl #10
    5424:	8b030000 	blhi	c542c <__ccfg+0xa5484>
    5428:	05000002 	streq	r0, [r0, #-2]
    542c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    5430:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    5434:	72093205 	andvc	r3, r9, #1342177280	; 0x50000000
    5438:	08000001 	stmdaeq	r0, {r0}
    543c:	000002a6 	andeq	r0, r0, r6, lsr #5
    5440:	b1073405 	tstlt	r7, r5, lsl #8
    5444:	01000000 	mrseq	r0, (UNDEF: 0)
    5448:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    544c:	000000a4 	andeq	r0, r0, r4, lsr #1
    5450:	b1033505 	tstlt	r3, r5, lsl #10
    5454:	01000000 	mrseq	r0, (UNDEF: 0)
    5458:	08000601 	stmdaeq	r0, {r0, r9, sl}
    545c:	00000274 	andeq	r0, r0, r4, ror r2
    5460:	b1033605 	tstlt	r3, r5, lsl #12
    5464:	01000000 	mrseq	r0, (UNDEF: 0)
    5468:	08000501 	stmdaeq	r0, {r0, r8, sl}
    546c:	00000432 	andeq	r0, r0, r2, lsr r4
    5470:	b1033705 	tstlt	r3, r5, lsl #14
    5474:	01000000 	mrseq	r0, (UNDEF: 0)
    5478:	08000401 	stmdaeq	r0, {r0, sl}
    547c:	0000042b 	andeq	r0, r0, fp, lsr #8
    5480:	b1033805 	tstlt	r3, r5, lsl #16
    5484:	01000000 	mrseq	r0, (UNDEF: 0)
    5488:	09000004 	stmdbeq	r0, {r2}
    548c:	0000041c 	andeq	r0, r0, ip, lsl r4
    5490:	b1073a05 	tstlt	r7, r5, lsl #20
    5494:	01000000 	mrseq	r0, (UNDEF: 0)
    5498:	00004c09 	andeq	r4, r0, r9, lsl #24
    549c:	033c0500 	teqeq	ip, #0, 10
    54a0:	000000b1 	strheq	r0, [r0], -r1
    54a4:	00790902 	rsbseq	r0, r9, r2, lsl #18
    54a8:	3d050000 	stccc	0, cr0, [r5, #-0]
    54ac:	0000b103 	andeq	fp, r0, r3, lsl #2
    54b0:	46090300 	strmi	r0, [r9], -r0, lsl #6
    54b4:	05000001 	streq	r0, [r0, #-1]
    54b8:	00c7083f 	sbceq	r0, r7, pc, lsr r8
    54bc:	00040000 	andeq	r0, r4, r0
    54c0:	00045b03 	andeq	r5, r4, r3, lsl #22
    54c4:	03410500 	movteq	r0, #5376	; 0x1500
    54c8:	000000e4 	andeq	r0, r0, r4, ror #1
    54cc:	00017206 	andeq	r7, r1, r6, lsl #4
    54d0:	029a0a00 	addseq	r0, sl, #0, 20
    54d4:	43050000 	movwmi	r0, #20480	; 0x5000
    54d8:	00017e1a 	andeq	r7, r1, sl, lsl lr
    54dc:	0a010100 	beq	458e4 <__ccfg+0x2593c>
    54e0:	00000306 	andeq	r0, r0, r6, lsl #6
    54e4:	9f0e4505 	svcls	0x000e4505
    54e8:	01000001 	tsteq	r0, r1
    54ec:	a5040b01 	strge	r0, [r4, #-2817]	; 0xfffff4ff
    54f0:	02000001 	andeq	r0, r0, #1
    54f4:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
    54f8:	a5050000 	strge	r0, [r5, #-0]
    54fc:	0a000001 	beq	5508 <__exidx_end+0x2600>
    5500:	00000314 	andeq	r0, r0, r4, lsl r3
    5504:	9f1e4505 	svcls	0x001e4505
    5508:	01000001 	tsteq	r0, r1
    550c:	06080701 	streq	r0, [r8], -r1, lsl #14
    5510:	01f0098f 	mvnseq	r0, pc, lsl #19
    5514:	ad090000 	stcge	0, cr0, [r9, #-0]
    5518:	06000002 	streq	r0, [r0], -r2
    551c:	00670b90 	mlseq	r7, r0, fp, r0
    5520:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5524:	00000647 	andeq	r0, r0, r7, asr #12
    5528:	9b089106 	blls	229948 <__ccfg+0x2099a0>
    552c:	04000000 	streq	r0, [r0], #-0
    5530:	0004a809 	andeq	sl, r4, r9, lsl #16
    5534:	10920600 	addsne	r0, r2, r0, lsl #12
    5538:	000000bd 	strheq	r0, [r0], -sp
    553c:	39030006 	stmdbcc	r3, {r1, r2}
    5540:	06000004 	streq	r0, [r0], -r4
    5544:	01bf0393 			; <UNDEFINED> instruction: 0x01bf0393
    5548:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    554c:	07000001 	streq	r0, [r0, -r1]
    5550:	0d000002 	stceq	0, cr0, [r0, #-8]
    5554:	00420a00 	subeq	r0, r2, r0, lsl #20
    5558:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    555c:	0001fc0f 	andeq	pc, r1, pc, lsl #24
    5560:	0b010100 	bleq	45968 <__ccfg+0x259c0>
    5564:	0000c204 	andeq	ip, r0, r4, lsl #4
    5568:	07010700 	streq	r0, [r1, -r0, lsl #14]
    556c:	02450991 	subeq	r0, r5, #2375680	; 0x244000
    5570:	9b080000 	blls	205578 <__ccfg+0x1e55d0>
    5574:	07000004 	streq	r0, [r0, -r4]
    5578:	00b10793 	umlalseq	r0, r1, r3, r7
    557c:	07010000 	streq	r0, [r1, -r0]
    5580:	3d080001 	stccc	0, cr0, [r8, #-4]
    5584:	07000000 	streq	r0, [r0, -r0]
    5588:	00b10394 	umlalseq	r0, r1, r4, r3
    558c:	01010000 	mrseq	r0, (UNDEF: 1)
    5590:	03000000 	movweq	r0, #0
    5594:	0000026b 	andeq	r0, r0, fp, ror #4
    5598:	1b039607 	blne	eadbc <__ccfg+0xcae14>
    559c:	05000002 	streq	r0, [r0, #-2]
    55a0:	00000245 	andeq	r0, r0, r5, asr #4
    55a4:	0002510c 	andeq	r5, r2, ip, lsl #2
    55a8:	00026100 	andeq	r6, r2, r0, lsl #2
    55ac:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    55b0:	00000256 	andeq	r0, r0, r6, asr r2
    55b4:	0002d00a 	andeq	sp, r2, sl
    55b8:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    55bc:	00000261 	andeq	r0, r0, r1, ror #4
    55c0:	a70c0101 	strge	r0, [ip, -r1, lsl #2]
    55c4:	7f000000 	svcvc	0x00000000
    55c8:	0d000002 	stceq	0, cr0, [r0, #-8]
    55cc:	02740500 	rsbseq	r0, r4, #0, 10
    55d0:	8c0a0000 	stchi	0, cr0, [sl], {-0}
    55d4:	08000003 	stmdaeq	r0, {r0, r1}
    55d8:	027f1306 	rsbseq	r1, pc, #402653184	; 0x18000000
    55dc:	01010000 	mrseq	r0, (UNDEF: 1)
    55e0:	0001260a 	andeq	r2, r1, sl, lsl #12
    55e4:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    55e8:	000000c7 	andeq	r0, r0, r7, asr #1
    55ec:	b50e0101 	strlt	r0, [lr, #-257]	; 0xfffffeff
    55f0:	09000004 	stmdbeq	r0, {r2}
    55f4:	ad10016e 	ldfges	f0, [r0, #-440]	; 0xfffffe48
    55f8:	0b000002 	bleq	5608 <__exidx_end+0x2700>
    55fc:	0002b304 	andeq	fp, r2, r4, lsl #6
    5600:	bf010f00 	svclt	0x00010f00
    5604:	10000002 	andne	r0, r0, r2
    5608:	0000009b 	muleq	r0, fp, r0
    560c:	01ac0c00 			; <UNDEFINED> instruction: 0x01ac0c00
    5610:	02ca0000 	sbceq	r0, sl, #0
    5614:	000d0000 	andeq	r0, sp, r0
    5618:	0002bf05 	andeq	fp, r2, r5, lsl #30
    561c:	046b1100 	strbteq	r1, [fp], #-256	; 0xffffff00
    5620:	7f090000 	svcvc	0x00090000
    5624:	02ca1601 	sbceq	r1, sl, #1048576	; 0x100000
    5628:	01010000 	mrseq	r0, (UNDEF: 1)
    562c:	00038411 	andeq	r8, r3, r1, lsl r4
    5630:	01820900 	orreq	r0, r2, r0, lsl #18
    5634:	0000d314 	andeq	sp, r0, r4, lsl r3
    5638:	11010100 	mrsne	r0, (UNDEF: 17)
    563c:	000004a0 	andeq	r0, r0, r0, lsr #9
    5640:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    5644:	000000c7 	andeq	r0, r0, r7, asr #1
    5648:	08120101 	ldmdaeq	r2, {r0, r8}
    564c:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    5650:	00000323 	andeq	r0, r0, r3, lsr #6
    5654:	00224913 	eoreq	r4, r2, r3, lsl r9
    5658:	03070900 	movweq	r0, #30976	; 0x7900
    565c:	00009b07 	andeq	r9, r0, r7, lsl #22
    5660:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    5664:	09000005 	stmdbeq	r0, {r0, r2}
    5668:	d8080308 	stmdale	r8, {r3, r8, r9}
    566c:	04000000 	streq	r0, [r0], #-0
    5670:	024b0e00 	subeq	r0, fp, #0, 28
    5674:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    5678:	02fc0303 	rscseq	r0, ip, #201326592	; 0xc000000
    567c:	d2140000 	andsle	r0, r4, #0
    5680:	30000004 	andcc	r0, r0, r4
    5684:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    5688:	00000393 	muleq	r0, r3, r3
    568c:	0004bd13 	andeq	fp, r4, r3, lsl sp
    5690:	03140900 	tsteq	r4, #0, 18
    5694:	00009b08 	andeq	r9, r0, r8, lsl #22
    5698:	b7130000 	ldrlt	r0, [r3, -r0]
    569c:	09000002 	stmdbeq	r0, {r1}
    56a0:	9b080315 	blls	2062fc <__ccfg+0x1e6354>
    56a4:	02000000 	andeq	r0, r0, #0
    56a8:	0004b813 	andeq	fp, r4, r3, lsl r8
    56ac:	03160900 	tsteq	r6, #0, 18
    56b0:	0002a00b 	andeq	sl, r2, fp
    56b4:	94130400 	ldrls	r0, [r3], #-1024	; 0xfffffc00
    56b8:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    56bc:	d8090317 	stmdale	r9, {r0, r1, r2, r4, r8, r9}
    56c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    56c4:	00046413 	andeq	r6, r4, r3, lsl r4
    56c8:	03180900 	tsteq	r8, #0, 18
    56cc:	0003930f 	andeq	r9, r3, pc, lsl #6
    56d0:	b2130c00 	andslt	r0, r3, #0, 24
    56d4:	09000002 	stmdbeq	r0, {r1}
    56d8:	a3150319 	tstge	r5, #1677721600	; 0x64000000
    56dc:	2c000003 	stccs	0, cr0, [r0], {3}
    56e0:	03230c00 			; <UNDEFINED> instruction: 0x03230c00
    56e4:	03a30000 			; <UNDEFINED> instruction: 0x03a30000
    56e8:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    56ec:	03000000 	movweq	r0, #0
    56f0:	30040b00 	andcc	r0, r4, r0, lsl #22
    56f4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    56f8:	000004dd 	ldrdeq	r0, [r0], -sp
    56fc:	1b031c09 	blne	cc728 <__ccfg+0xac780>
    5700:	00000330 	andeq	r0, r0, r0, lsr r3
    5704:	00037a11 	andeq	r7, r3, r1, lsl sl
    5708:	031e0900 	tsteq	lr, #0, 18
    570c:	0003c514 	andeq	ip, r3, r4, lsl r5
    5710:	0b010100 	bleq	45b18 <__ccfg+0x25b70>
    5714:	0003a904 	andeq	sl, r3, r4, lsl #18
    5718:	050b0a00 	streq	r0, [fp, #-2560]	; 0xfffff600
    571c:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    5720:	00009b13 	andeq	r9, r0, r3, lsl fp
    5724:	0a010100 	beq	45b2c <__ccfg+0x25b84>
    5728:	00000775 	andeq	r0, r0, r5, ror r7
    572c:	ac1a1e0a 	ldcge	14, cr1, [sl], {10}
    5730:	01000000 	mrseq	r0, (UNDEF: 0)
    5734:	09050a01 	stmdbeq	r5, {r0, r9, fp}
    5738:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    573c:	0000ac24 	andeq	sl, r0, r4, lsr #24
    5740:	0a010100 	beq	45b48 <__ccfg+0x25ba0>
    5744:	00000634 	andeq	r0, r0, r4, lsr r6
    5748:	c514220a 	ldrgt	r2, [r4, #-522]	; 0xfffffdf6
    574c:	01000003 	tsteq	r0, r3
    5750:	037f1601 	cmneq	pc, #1048576	; 0x100000
    5754:	0f010000 	svceq	0x00010000
    5758:	0000c70f 	andeq	ip, r0, pc, lsl #14
    575c:	00030500 	andeq	r0, r3, r0, lsl #10
    5760:	16000000 	strne	r0, [r0], -r0
    5764:	0000135e 	andeq	r1, r0, lr, asr r3
    5768:	c7150f01 	ldrgt	r0, [r5, -r1, lsl #30]
    576c:	05000000 	streq	r0, [r0, #-0]
    5770:	00000003 	andeq	r0, r0, r3
    5774:	13e41600 	mvnne	r1, #0, 12
    5778:	10010000 	andne	r0, r1, r0
    577c:	00021514 	andeq	r1, r2, r4, lsl r5
    5780:	00030500 	andeq	r0, r3, r0, lsl #10
    5784:	16000000 	strne	r0, [r0], -r0
    5788:	00001344 	andeq	r1, r0, r4, asr #6
    578c:	b10d1201 	tstlt	sp, r1, lsl #4
    5790:	05000000 	streq	r0, [r0, #-0]
    5794:	00006403 	andeq	r6, r0, r3, lsl #8
    5798:	13d81620 	bicsne	r1, r8, #32, 12	; 0x2000000
    579c:	13010000 	movwne	r0, #4096	; 0x1000
    57a0:	0000b103 	andeq	fp, r0, r3, lsl #2
    57a4:	65030500 	strvs	r0, [r3, #-1280]	; 0xfffffb00
    57a8:	16200000 	strtne	r0, [r0], -r0
    57ac:	00000c3a 	andeq	r0, r0, sl, lsr ip
    57b0:	9b0d1501 	blls	34abbc <__ccfg+0x32ac14>
    57b4:	05000000 	streq	r0, [r0, #-0]
    57b8:	00000003 	andeq	r0, r0, r3
    57bc:	10011700 	andne	r1, r1, r0, lsl #14
    57c0:	03000013 	movweq	r0, #19
    57c4:	00000613 	andeq	r0, r0, r3, lsl r6
    57c8:	00000000 	andeq	r0, r0, r0
    57cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    57d0:	13e90118 	mvnne	r0, #24, 2
    57d4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    57d8:	00c70107 	sbceq	r0, r7, r7, lsl #2
	...
    57e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    57e8:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    57ec:	00726519 	rsbseq	r6, r2, r9, lsl r5
    57f0:	bc190803 	ldclt	8, cr0, [r9], {3}
    57f4:	4a000004 	bmi	580c <__exidx_end+0x2904>
    57f8:	1a000020 	bne	5880 <__exidx_end+0x2978>
    57fc:	00757265 	rsbseq	r7, r5, r5, ror #4
    5800:	c2240803 	eorgt	r0, r4, #196608	; 0x30000
    5804:	01000004 	tsteq	r0, r4
    5808:	040b0051 	streq	r0, [fp], #-81	; 0xffffffaf
    580c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5810:	00c7040b 	sbceq	r0, r7, fp, lsl #8
    5814:	011b0000 	tsteq	fp, r0
    5818:	0000136c 	andeq	r1, r0, ip, ror #6
    581c:	06016001 	streq	r6, [r1], -r1
    5820:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    582c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5830:	1c000004 	stcne	0, cr0, [r0], {4}
    5834:	01007473 	tsteq	r0, r3, ror r4
    5838:	9b140160 	blls	505dc0 <__ccfg+0x4e5e18>
    583c:	5d000000 	stcpl	0, cr0, [r0, #-0]
    5840:	00000020 	andeq	r0, r0, r0, lsr #32
    5844:	1363011d 	cmnne	r3, #1073741831	; 0x40000007
    5848:	5b010000 	blpl	45850 <__ccfg+0x258a8>
    584c:	00000601 	andeq	r0, r0, r1, lsl #12
    5850:	00000000 	andeq	r0, r0, r0
    5854:	9c010000 	stcls	0, cr0, [r1], {-0}
    5858:	133b011b 	teqne	fp, #-1073741818	; 0xc0000006
    585c:	21010000 	mrscs	r0, (UNDEF: 1)
    5860:	9b010601 	blls	4706c <__ccfg+0x270c4>
	...
    586c:	01000000 	mrseq	r0, (UNDEF: 0)
    5870:	0005c09c 	muleq	r5, ip, r0
    5874:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    5878:	01210100 			; <UNDEFINED> instruction: 0x01210100
    587c:	00009b15 	andeq	r9, r0, r5, lsl fp
    5880:	00207000 	eoreq	r7, r0, r0
    5884:	00611c00 	rsbeq	r1, r1, r0, lsl #24
    5888:	1f012101 	svcne	0x00012101
    588c:	000000c7 	andeq	r0, r0, r7, asr #1
    5890:	00002083 	andeq	r2, r0, r3, lsl #1
    5894:	0100731c 	tsteq	r0, ip, lsl r3
    5898:	152e0121 	strne	r0, [lr, #-289]!	; 0xfffffedf
    589c:	a1000002 	tstge	r0, r2
    58a0:	1c000020 	stcne	0, cr0, [r0], {32}
    58a4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    58a8:	36012101 	strcc	r2, [r1], -r1, lsl #2
    58ac:	0000009b 	muleq	r0, fp, r0
    58b0:	000020b4 	strheq	r2, [r0], -r4
    58b4:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    58b8:	07012301 	streq	r2, [r1, -r1, lsl #6]
    58bc:	0000009b 	muleq	r0, fp, r0
    58c0:	000020c7 	andeq	r2, r0, r7, asr #1
    58c4:	0013521f 	andseq	r5, r3, pc, lsl r2
    58c8:	01320100 	teqeq	r2, r0, lsl #2
    58cc:	00000001 	andeq	r0, r0, r1
    58d0:	09f62000 	ldmibeq	r6!, {sp}^
    58d4:	00000000 	andeq	r0, r0, r0
    58d8:	0bc80000 	bleq	ff2058e0 <_estack+0xdf2008e0>
    58dc:	43010000 	movwmi	r0, #4096	; 0x1000
    58e0:	05a30301 	streq	r0, [r3, #769]!	; 0x301
    58e4:	12210000 	eorne	r0, r1, #0
    58e8:	2100000a 	tstcs	r0, sl
    58ec:	00000a05 	andeq	r0, r0, r5, lsl #20
    58f0:	09f62200 	ldmibeq	r6!, {r9, sp}^
	...
    58fc:	50010000 	andpl	r0, r1, r0
    5900:	12210301 	eorne	r0, r1, #67108864	; 0x4000000
    5904:	2100000a 	tstcs	r0, sl
    5908:	00000a05 	andeq	r0, r0, r5, lsl #20
    590c:	01180000 	tsteq	r8, r0
    5910:	00001332 	andeq	r1, r0, r2, lsr r3
    5914:	0106cb01 	tsteq	r6, r1, lsl #22
    5918:	0000009b 	muleq	r0, fp, r0
	...
    5924:	06819c01 	streq	r9, [r1], r1, lsl #24
    5928:	73190000 	tstvc	r9, #0
    592c:	cb010074 	blgt	45b04 <__ccfg+0x25b5c>
    5930:	00009b15 	andeq	r9, r0, r5, lsl fp
    5934:	0020f000 	eoreq	pc, r0, r0
    5938:	13742300 	cmnne	r4, #0, 6
    593c:	cb010000 	blgt	45944 <__ccfg+0x2599c>
    5940:	0000c71f 	andeq	ip, r0, pc, lsl r7
    5944:	00210e00 	eoreq	r0, r1, r0, lsl #28
    5948:	131e2300 	tstne	lr, #0, 6
    594c:	cb010000 	blgt	45954 <__ccfg+0x259ac>
    5950:	0000c72b 	andeq	ip, r0, fp, lsr #14
    5954:	00213700 	eoreq	r3, r1, r0, lsl #14
    5958:	130a2400 	movwne	r2, #41984	; 0xa400
    595c:	e6010000 	str	r0, [r1], -r0
    5960:	00000001 	andeq	r0, r0, r1
    5964:	13f72400 	mvnsne	r2, #0, 8
    5968:	ea010000 	b	45970 <__ccfg+0x259c8>
    596c:	00000001 	andeq	r0, r0, r1
    5970:	085e2500 	ldmdaeq	lr, {r8, sl, sp}^
    5974:	00000000 	andeq	r0, r0, r0
    5978:	0b980000 	bleq	fe605980 <_estack+0xde600980>
    597c:	fc010000 	stc2	0, cr0, [r1], {-0}
    5980:	08782604 	ldmdaeq	r8!, {r2, r9, sl, sp}^
    5984:	21550000 	cmpcs	r5, r0
    5988:	6c260000 	stcvs	0, cr0, [r6], #-0
    598c:	68000008 	stmdavs	r0, {r3}
    5990:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    5994:	000009f6 	strdeq	r0, [r0], -r6
    5998:	00000000 	andeq	r0, r0, r0
    599c:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    59a0:	64024301 	strvs	r4, [r2], #-769	; 0xfffffcff
    59a4:	21000006 	tstcs	r0, r6
    59a8:	00000a12 	andeq	r0, r0, r2, lsl sl
    59ac:	000a0521 	andeq	r0, sl, r1, lsr #10
    59b0:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    59b4:	00000009 	andeq	r0, r0, r9
    59b8:	00000000 	andeq	r0, r0, r0
    59bc:	01000000 	mrseq	r0, (UNDEF: 0)
    59c0:	12210248 	eorne	r0, r1, #72, 4	; 0x80000004
    59c4:	2100000a 	tstcs	r0, sl
    59c8:	00000a05 	andeq	r0, r0, r5, lsl #20
    59cc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    59d0:	00137901 	andseq	r7, r3, r1, lsl #18
    59d4:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
    59d8:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    59e4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    59e8:	19000007 	stmdbne	r0, {r0, r1, r2}
    59ec:	b0010061 	andlt	r0, r1, r1, rrx
    59f0:	0000c715 	andeq	ip, r0, r5, lsl r7
    59f4:	00217b00 	eoreq	r7, r1, r0, lsl #22
    59f8:	00731900 	rsbseq	r1, r3, r0, lsl #18
    59fc:	041eb001 	ldreq	fp, [lr], #-1
    5a00:	a4000007 	strge	r0, [r0], #-7
    5a04:	19000021 	stmdbne	r0, {r0, r5}
    5a08:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5a0c:	9b26b001 	blls	9b1a18 <__ccfg+0x991a70>
    5a10:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    5a14:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    5a18:	000009f6 	strdeq	r0, [r0], -r6
    5a1c:	00000000 	andeq	r0, r0, r0
    5a20:	00000b80 	andeq	r0, r0, r0, lsl #23
    5a24:	e802ba01 	stmda	r2, {r0, r9, fp, ip, sp, pc}
    5a28:	21000006 	tstcs	r0, r6
    5a2c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5a30:	000a0521 	andeq	r0, sl, r1, lsr #10
    5a34:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5a38:	00000009 	andeq	r0, r0, r9
    5a3c:	00000000 	andeq	r0, r0, r0
    5a40:	01000000 	mrseq	r0, (UNDEF: 0)
    5a44:	122102c4 	eorne	r0, r1, #196, 4	; 0x4000000c
    5a48:	2100000a 	tstcs	r0, sl
    5a4c:	00000a05 	andeq	r0, r0, r5, lsl #20
    5a50:	040b0000 	streq	r0, [fp], #-0
    5a54:	000000b1 	strheq	r0, [r0], -r1
    5a58:	13290117 			; <UNDEFINED> instruction: 0x13290117
    5a5c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    5a60:	00180006 	andseq	r0, r8, r6
    5a64:	00181400 	andseq	r1, r8, r0, lsl #8
    5a68:	299c0100 	ldmibcs	ip, {r8}
    5a6c:	00134a01 	andseq	r4, r3, r1, lsl #20
    5a70:	06930100 	ldreq	r0, [r3], r0, lsl #2
    5a74:	0000009b 	muleq	r0, fp, r0
    5a78:	000017ec 	andeq	r1, r0, ip, ror #15
    5a7c:	00001800 	andeq	r1, r0, r0, lsl #16
    5a80:	f12a9c01 			; <UNDEFINED> instruction: 0xf12a9c01
    5a84:	01000013 	tsteq	r0, r3, lsl r0
    5a88:	17880d82 	strne	r0, [r8, r2, lsl #27]
    5a8c:	17c80000 	strbne	r0, [r8, r0]
    5a90:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a94:	00000796 	muleq	r0, r6, r7
    5a98:	00079f28 	andeq	r9, r7, r8, lsr #30
    5a9c:	0017a200 	andseq	sl, r7, r0, lsl #4
    5aa0:	0017b600 	andseq	fp, r7, r0, lsl #12
    5aa4:	038a0100 	orreq	r0, sl, #0, 2
    5aa8:	0009f627 	andeq	pc, r9, r7, lsr #12
    5aac:	0017a200 	andseq	sl, r7, r0, lsl #4
    5ab0:	000b5000 	andeq	r5, fp, r0
    5ab4:	02720100 	rsbseq	r0, r2, #0, 2
    5ab8:	00000779 	andeq	r0, r0, r9, ror r7
    5abc:	000a1221 	andeq	r1, sl, r1, lsr #4
    5ac0:	0a052100 	beq	14dec8 <__ccfg+0x12df20>
    5ac4:	25000000 	strcs	r0, [r0, #-0]
    5ac8:	000009f6 	strdeq	r0, [r0], -r6
    5acc:	000017ae 	andeq	r1, r0, lr, lsr #15
    5ad0:	00000b68 	andeq	r0, r0, r8, ror #22
    5ad4:	21027401 	tstcs	r2, r1, lsl #8
    5ad8:	00000a12 	andeq	r0, r0, r2, lsl sl
    5adc:	000a0521 	andeq	r0, sl, r1, lsr #10
    5ae0:	00000000 	andeq	r0, r0, r0
    5ae4:	0013d12b 	andseq	sp, r3, fp, lsr #2
    5ae8:	0d780100 	ldfeqe	f0, [r8, #-0]
    5aec:	13de2b01 	bicsne	r2, lr, #1024	; 0x400
    5af0:	6d010000 	stcvs	0, cr0, [r1, #-0]
    5af4:	fd2b010d 	stc2	1, cr0, [fp, #-52]!	; 0xffffffcc
    5af8:	01000013 	tsteq	r0, r3, lsl r0
    5afc:	2c010d66 	stccs	13, cr0, [r1], {102}	; 0x66
    5b00:	00001403 	andeq	r1, r0, r3, lsl #8
    5b04:	010d5801 	tsteq	sp, r1, lsl #16
    5b08:	00001734 	andeq	r1, r0, r4, lsr r7
    5b0c:	00001788 	andeq	r1, r0, r8, lsl #15
    5b10:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    5b14:	73190000 	tstvc	r9, #0
    5b18:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    5b1c:	00009b19 	andeq	r9, r0, r9, lsl fp
    5b20:	0021f600 	eoreq	pc, r1, r0, lsl #12
    5b24:	65641900 	strbvs	r1, [r4, #-2304]!	; 0xfffff700
    5b28:	5801006c 	stmdapl	r1, {r2, r3, r5, r6}
    5b2c:	00009b22 	andeq	r9, r0, r2, lsr #22
    5b30:	00220900 	eoreq	r0, r2, r0, lsl #18
    5b34:	08422500 	stmdaeq	r2, {r8, sl, sp}^
    5b38:	173c0000 	ldrne	r0, [ip, -r0]!
    5b3c:	0b080000 	bleq	205b44 <__ccfg+0x1e5b9c>
    5b40:	5c010000 	stcpl	0, cr0, [r1], {-0}
    5b44:	0b082d13 	bleq	210f98 <__ccfg+0x1f0ff0>
    5b48:	532e0000 			; <UNDEFINED> instruction: 0x532e0000
    5b4c:	1c000008 	stcne	0, cr0, [r0], {8}
    5b50:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    5b54:	000009f6 	strdeq	r0, [r0], -r6
    5b58:	0000173c 	andeq	r1, r0, ip, lsr r7
    5b5c:	00000b28 	andeq	r0, r0, r8, lsr #22
    5b60:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
    5b64:	21000008 	tstcs	r0, r8
    5b68:	00000a12 	andeq	r0, r0, r2, lsl sl
    5b6c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5b70:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5b74:	56000009 	strpl	r0, [r0], -r9
    5b78:	5a000017 	bpl	5bdc <__exidx_end+0x2cd4>
    5b7c:	01000017 	tsteq	r0, r7, lsl r0
    5b80:	12210254 	eorne	r0, r1, #84, 4	; 0x40000005
    5b84:	2100000a 	tstcs	r0, sl
    5b88:	00000a05 	andeq	r0, r0, r5, lsl #20
    5b8c:	00000000 	andeq	r0, r0, r0
    5b90:	0013812f 	andseq	r8, r3, pc, lsr #2
    5b94:	0d4b0100 	stfeqe	f0, [fp, #-0]
    5b98:	000000b1 	strheq	r0, [r0], -r1
    5b9c:	00085e01 	andeq	r5, r8, r1, lsl #28
    5ba0:	00723000 	rsbseq	r3, r2, r0
    5ba4:	b1074f01 	tstlt	r7, r1, lsl #30
    5ba8:	00000000 	andeq	r0, r0, r0
    5bac:	00135831 	andseq	r5, r3, r1, lsr r8
    5bb0:	0d410100 	stfeqe	f0, [r1, #-0]
    5bb4:	08830101 	stmeq	r3, {r0, r8}
    5bb8:	63320000 	teqvs	r2, #0
    5bbc:	0100646d 	tsteq	r0, sp, ror #8
    5bc0:	00b11941 	adcseq	r1, r1, r1, asr #18
    5bc4:	61320000 	teqvs	r2, r0
    5bc8:	24410100 	strbcs	r0, [r1], #-256	; 0xffffff00
    5bcc:	000000c7 	andeq	r0, r0, r7, asr #1
    5bd0:	13232c00 			; <UNDEFINED> instruction: 0x13232c00
    5bd4:	3a010000 	bcc	45bdc <__ccfg+0x25c34>
    5bd8:	171c010d 	ldrne	r0, [ip, -sp, lsl #2]
    5bdc:	17340000 	ldrne	r0, [r4, -r0]!
    5be0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5be4:	000008e5 	andeq	r0, r0, r5, ror #17
    5be8:	646d6319 	strbtvs	r6, [sp], #-793	; 0xfffffce7
    5bec:	193a0100 	ldmdbne	sl!, {r8}
    5bf0:	000000b1 	strheq	r0, [r0], -r1
    5bf4:	0000222f 	andeq	r2, r0, pc, lsr #4
    5bf8:	0009f627 	andeq	pc, r9, r7, lsr #12
    5bfc:	00171c00 	andseq	r1, r7, r0, lsl #24
    5c00:	000af000 	andeq	pc, sl, r0
    5c04:	023c0100 	eorseq	r0, ip, #0, 2
    5c08:	000008c9 	andeq	r0, r0, r9, asr #17
    5c0c:	000a1221 	andeq	r1, sl, r1, lsr #4
    5c10:	0a052100 	beq	14e018 <__ccfg+0x12e070>
    5c14:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5c18:	000009f6 	strdeq	r0, [r0], -r6
    5c1c:	00001728 	andeq	r1, r0, r8, lsr #14
    5c20:	0000172c 	andeq	r1, r0, ip, lsr #14
    5c24:	21023e01 	tstcs	r2, r1, lsl #28
    5c28:	00000a12 	andeq	r0, r0, r2, lsl sl
    5c2c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5c30:	2c000000 	stccs	0, cr0, [r0], {-0}
    5c34:	00001412 	andeq	r1, r0, r2, lsl r4
    5c38:	010d2901 	tsteq	sp, r1, lsl #18
    5c3c:	000016ec 	andeq	r1, r0, ip, ror #13
    5c40:	0000171c 	andeq	r1, r0, ip, lsl r7
    5c44:	09799c01 	ldmdbeq	r9!, {r0, sl, fp, ip, pc}^
    5c48:	62190000 	andsvs	r0, r9, #0
    5c4c:	1c290100 	stfnes	f0, [r9], #-0
    5c50:	000000b1 	strheq	r0, [r0], -r1
    5c54:	00002242 	andeq	r2, r0, r2, asr #4
    5c58:	01006930 	tsteq	r0, r0, lsr r9
    5c5c:	0081062b 	addeq	r0, r1, fp, lsr #12
    5c60:	3d270000 	stccc	0, cr0, [r7, #-0]
    5c64:	f400000a 	vst4.8	{d0-d3}, [r0], sl
    5c68:	b8000016 	stmdalt	r0, {r1, r2, r4}
    5c6c:	0100000a 	tsteq	r0, sl
    5c70:	092e0332 	stmdbeq	lr!, {r1, r4, r5, r8, r9}
    5c74:	4c210000 	stcmi	0, cr0, [r1], #-0
    5c78:	0000000a 	andeq	r0, r0, sl
    5c7c:	000a3d33 	andeq	r3, sl, r3, lsr sp
    5c80:	00170000 	andseq	r0, r7, r0
    5c84:	00170400 	andseq	r0, r7, r0, lsl #8
    5c88:	042f0100 	strteq	r0, [pc], #-256	; 5c90 <__exidx_end+0x2d88>
    5c8c:	00000948 	andeq	r0, r0, r8, asr #18
    5c90:	000a4c21 	andeq	r4, sl, r1, lsr #24
    5c94:	20330000 	eorscs	r0, r3, r0
    5c98:	0400000a 	streq	r0, [r0], #-10
    5c9c:	06000017 			; <UNDEFINED> instruction: 0x06000017
    5ca0:	01000017 	tsteq	r0, r7, lsl r0
    5ca4:	09620431 	stmdbeq	r2!, {r0, r4, r5, sl}^
    5ca8:	2f210000 	svccs	0x00210000
    5cac:	0000000a 	andeq	r0, r0, sl
    5cb0:	000a2025 	andeq	r2, sl, r5, lsr #32
    5cb4:	00170c00 	andseq	r0, r7, r0, lsl #24
    5cb8:	000ad800 	andeq	sp, sl, r0, lsl #16
    5cbc:	03330100 	teqeq	r3, #0, 2
    5cc0:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5cc4:	34000000 	strcc	r0, [r0], #-0
    5cc8:	00001409 	andeq	r1, r0, r9, lsl #8
    5ccc:	b10d1901 	tstlt	sp, r1, lsl #18
    5cd0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    5cd4:	ec000016 	stc	0, cr0, [r0], {22}
    5cd8:	01000016 	tsteq	r0, r6, lsl r0
    5cdc:	0009f69c 	muleq	r9, ip, r6
    5ce0:	00693000 	rsbeq	r3, r9, r0
    5ce4:	81061b01 	tsthi	r6, r1, lsl #22
    5ce8:	35000000 	strcc	r0, [r0, #-0]
    5cec:	1c010062 	stcne	0, cr0, [r1], {98}	; 0x62
    5cf0:	0000b107 	andeq	fp, r0, r7, lsl #2
    5cf4:	00226000 	eoreq	r6, r2, r0
    5cf8:	0a3d2700 	beq	f4f900 <__ccfg+0xf2f958>
    5cfc:	16bc0000 	ldrtne	r0, [ip], r0
    5d00:	0a580000 	beq	1605d08 <__ccfg+0x15e5d60>
    5d04:	22010000 	andcs	r0, r1, #0
    5d08:	0009c503 	andeq	ip, r9, r3, lsl #10
    5d0c:	0a4c2100 	beq	130e114 <__ccfg+0x12ee16c>
    5d10:	27000000 	strcs	r0, [r0, -r0]
    5d14:	00000a20 	andeq	r0, r0, r0, lsr #20
    5d18:	000016c2 	andeq	r1, r0, r2, asr #13
    5d1c:	00000a80 	andeq	r0, r0, r0, lsl #21
    5d20:	df032301 	svcle	0x00032301
    5d24:	21000009 	tstcs	r0, r9
    5d28:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5d2c:	0a5a2500 	beq	168f134 <__ccfg+0x166f18c>
    5d30:	16c40000 	strbne	r0, [r4], r0
    5d34:	0a980000 	beq	fe605d3c <_estack+0xde600d3c>
    5d38:	20010000 	andcs	r0, r1, r0
    5d3c:	0a6c2107 	beq	1b0e160 <__ccfg+0x1aee1b8>
    5d40:	00000000 	andeq	r0, r0, r0
    5d44:	00051c36 	andeq	r1, r5, r6, lsr ip
    5d48:	02060200 	andeq	r0, r6, #0, 4
    5d4c:	20030101 	andcs	r0, r3, r1, lsl #2
    5d50:	3700000a 	strcc	r0, [r0, -sl]
    5d54:	0000014d 	andeq	r0, r0, sp, asr #2
    5d58:	23020602 	movwcs	r0, #9730	; 0x2602
    5d5c:	00000067 	andeq	r0, r0, r7, rrx
    5d60:	0009ea37 	andeq	lr, r9, r7, lsr sl
    5d64:	02060200 	andeq	r0, r6, #0, 4
    5d68:	00006737 	andeq	r6, r0, r7, lsr r7
    5d6c:	c4360000 	ldrtgt	r0, [r6], #-0
    5d70:	02000004 	andeq	r0, r0, #4
    5d74:	01010154 	tsteq	r1, r4, asr r1
    5d78:	000a3d03 	andeq	r3, sl, r3, lsl #26
    5d7c:	014d3700 	cmpeq	sp, r0, lsl #14
    5d80:	54020000 	strpl	r0, [r2], #-0
    5d84:	00671901 	rsbeq	r1, r7, r1, lsl #18
    5d88:	36000000 	strcc	r0, [r0], -r0
    5d8c:	00000025 	andeq	r0, r0, r5, lsr #32
    5d90:	01011e02 	tsteq	r1, r2, lsl #28
    5d94:	0a5a0301 	beq	16869a0 <__ccfg+0x16669f8>
    5d98:	4d370000 	ldcmi	0, cr0, [r7, #-0]
    5d9c:	02000001 	andeq	r0, r0, #1
    5da0:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
    5da4:	00000000 	andeq	r0, r0, r0
    5da8:	00121e38 	andseq	r1, r2, r8, lsr lr
    5dac:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    5db0:	00006701 	andeq	r6, r0, r1, lsl #14
    5db4:	0a790300 	beq	1e469bc <__ccfg+0x1e26a14>
    5db8:	4d390000 	ldcmi	0, cr0, [r9, #-0]
    5dbc:	02000001 	andeq	r0, r0, #1
    5dc0:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    5dc4:	3a000000 	bcc	5dcc <__exidx_end+0x2ec4>
    5dc8:	00000796 	muleq	r0, r6, r7
    5dcc:	000017c8 	andeq	r1, r0, r8, asr #15
    5dd0:	000017ec 	andeq	r1, r0, ip, ror #15
    5dd4:	96289c01 	strtls	r9, [r8], -r1, lsl #24
    5dd8:	d2000007 	andle	r0, r0, #7
    5ddc:	e6000017 			; <UNDEFINED> instruction: 0xe6000017
    5de0:	01000017 	tsteq	r0, r7, lsl r0
    5de4:	a83b0d78 	ldmdage	fp!, {r3, r4, r5, r6, r8, sl, fp}
    5de8:	dc000007 	stcle	0, cr0, [r0], {7}
    5dec:	e2000017 	and	r0, r0, #23
    5df0:	01000017 	tsteq	r0, r7, lsl r0
    5df4:	0000037c 	andeq	r0, r0, ip, ror r3
    5df8:	00041200 	andeq	r1, r4, r0, lsl #4
    5dfc:	ea000300 	b	6a04 <__exidx_end+0x3afc>
    5e00:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    5e04:	00015701 	andeq	r5, r1, r1, lsl #14
    5e08:	14250c00 	strtne	r0, [r5], #-3072	; 0xfffff400
    5e0c:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    5e10:	0c600000 	stcleq	0, cr0, [r0], #-0
    5e14:	00000000 	andeq	r0, r0, r0
    5e18:	488e0000 	stmmi	lr, {}	; <UNPREDICTABLE>
    5e1c:	01020000 	mrseq	r0, (UNDEF: 2)
    5e20:	00039c06 	andeq	r9, r3, r6, lsl #24
    5e24:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5e28:	000003f8 	strdeq	r0, [r0], -r8
    5e2c:	b0050402 	andlt	r0, r5, r2, lsl #8
    5e30:	02000000 	andeq	r0, r0, #0
    5e34:	00ab0508 	adceq	r0, fp, r8, lsl #10
    5e38:	51030000 	mrspl	r0, (UNDEF: 3)
    5e3c:	02000022 	andeq	r0, r0, #34	; 0x22
    5e40:	004d182e 	subeq	r1, sp, lr, lsr #16
    5e44:	01020000 	mrseq	r0, (UNDEF: 2)
    5e48:	00039a08 	andeq	r9, r3, r8, lsl #20
    5e4c:	213f0300 	teqcs	pc, r0, lsl #6
    5e50:	31020000 	mrscc	r0, (UNDEF: 2)
    5e54:	00006019 	andeq	r6, r0, r9, lsl r0
    5e58:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5e5c:	00000258 	andeq	r0, r0, r8, asr r2
    5e60:	00180803 	andseq	r0, r8, r3, lsl #16
    5e64:	19340200 	ldmdbne	r4!, {r9}
    5e68:	00000073 	andeq	r0, r0, r3, ror r0
    5e6c:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    5e70:	02000000 	andeq	r0, r0, #0
    5e74:	00800708 	addeq	r0, r0, r8, lsl #14
    5e78:	04040000 	streq	r0, [r4], #-0
    5e7c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5e80:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5e84:	0000008a 	andeq	r0, r0, sl, lsl #1
    5e88:	00161503 	andseq	r1, r6, r3, lsl #10
    5e8c:	12270300 	eorne	r0, r7, #0, 6
    5e90:	00000054 	andeq	r0, r0, r4, asr r0
    5e94:	00008f05 	andeq	r8, r0, r5, lsl #30
    5e98:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    5e9c:	2b030000 	blcs	c5ea4 <__ccfg+0xa5efc>
    5ea0:	00004112 	andeq	r4, r0, r2, lsl r1
    5ea4:	00a00600 	adceq	r0, r0, r0, lsl #12
    5ea8:	66030000 	strvs	r0, [r3], -r0
    5eac:	03000016 	movweq	r0, #22
    5eb0:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5eb4:	b1050000 	mrslt	r0, (UNDEF: 5)
    5eb8:	03000000 	movweq	r0, #0
    5ebc:	0000028b 	andeq	r0, r0, fp, lsl #5
    5ec0:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    5ec4:	07000000 	streq	r0, [r0, -r0]
    5ec8:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    5ecc:	0000015c 	andeq	r0, r0, ip, asr r1
    5ed0:	0002a608 	andeq	sl, r2, r8, lsl #12
    5ed4:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    5ed8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5edc:	00070101 	andeq	r0, r7, r1, lsl #2
    5ee0:	0000a408 	andeq	sl, r0, r8, lsl #8
    5ee4:	03350300 	teqeq	r5, #0, 6
    5ee8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5eec:	00060101 	andeq	r0, r6, r1, lsl #2
    5ef0:	00027408 	andeq	r7, r2, r8, lsl #8
    5ef4:	03360300 	teqeq	r6, #0, 6
    5ef8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5efc:	00050101 	andeq	r0, r5, r1, lsl #2
    5f00:	00043208 	andeq	r3, r4, r8, lsl #4
    5f04:	03370300 	teqeq	r7, #0, 6
    5f08:	000000a0 	andeq	r0, r0, r0, lsr #1
    5f0c:	00040101 	andeq	r0, r4, r1, lsl #2
    5f10:	00042b08 	andeq	r2, r4, r8, lsl #22
    5f14:	03380300 	teqeq	r8, #0, 6
    5f18:	000000a0 	andeq	r0, r0, r0, lsr #1
    5f1c:	00000401 	andeq	r0, r0, r1, lsl #8
    5f20:	00041c09 	andeq	r1, r4, r9, lsl #24
    5f24:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    5f28:	000000a0 	andeq	r0, r0, r0, lsr #1
    5f2c:	004c0901 	subeq	r0, ip, r1, lsl #18
    5f30:	3c030000 	stccc	0, cr0, [r3], {-0}
    5f34:	0000a003 	andeq	sl, r0, r3
    5f38:	79090200 	stmdbvc	r9, {r9}
    5f3c:	03000000 	movweq	r0, #0
    5f40:	00a0033d 	adceq	r0, r0, sp, lsr r3
    5f44:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    5f48:	00000146 	andeq	r0, r0, r6, asr #2
    5f4c:	b1083f03 	tstlt	r8, r3, lsl #30
    5f50:	04000000 	streq	r0, [r0], #-0
    5f54:	045b0300 	ldrbeq	r0, [fp], #-768	; 0xfffffd00
    5f58:	41030000 	mrsmi	r0, (UNDEF: 3)
    5f5c:	0000ce03 	andeq	ip, r0, r3, lsl #28
    5f60:	015c0600 	cmpeq	ip, r0, lsl #12
    5f64:	9a0a0000 	bls	285f6c <__ccfg+0x265fc4>
    5f68:	03000002 	movweq	r0, #2
    5f6c:	01681a43 	cmneq	r8, r3, asr #20
    5f70:	01010000 	mrseq	r0, (UNDEF: 1)
    5f74:	0003060a 	andeq	r0, r3, sl, lsl #12
    5f78:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    5f7c:	00000189 	andeq	r0, r0, r9, lsl #3
    5f80:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5f84:	0000018f 	andeq	r0, r0, pc, lsl #3
    5f88:	a3080102 	movwge	r0, #33026	; 0x8102
    5f8c:	05000003 	streq	r0, [r0, #-3]
    5f90:	0000018f 	andeq	r0, r0, pc, lsl #3
    5f94:	0003140a 	andeq	r1, r3, sl, lsl #8
    5f98:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    5f9c:	00000189 	andeq	r0, r0, r9, lsl #3
    5fa0:	08070101 	stmdaeq	r7, {r0, r8}
    5fa4:	da098f04 	ble	269bbc <__ccfg+0x249c14>
    5fa8:	09000001 	stmdbeq	r0, {r0}
    5fac:	000002ad 	andeq	r0, r0, sp, lsr #5
    5fb0:	670b9004 	strvs	r9, [fp, -r4]
    5fb4:	00000000 	andeq	r0, r0, r0
    5fb8:	00064709 	andeq	r4, r6, r9, lsl #14
    5fbc:	08910400 	ldmeq	r1, {sl}
    5fc0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5fc4:	04a80904 	strteq	r0, [r8], #2308	; 0x904
    5fc8:	92040000 	andls	r0, r4, #0
    5fcc:	0000ac10 	andeq	sl, r0, r0, lsl ip
    5fd0:	03000600 	movweq	r0, #1536	; 0x600
    5fd4:	00000439 	andeq	r0, r0, r9, lsr r4
    5fd8:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    5fdc:	0c000001 	stceq	0, cr0, [r0], {1}
    5fe0:	000001da 	ldrdeq	r0, [r0], -sl
    5fe4:	000001f1 	strdeq	r0, [r0], -r1
    5fe8:	420a000d 	andmi	r0, sl, #13
    5fec:	04000000 	streq	r0, [r0], #-0
    5ff0:	01e60f99 	strexheq	r0, r9, [r6]
    5ff4:	01010000 	mrseq	r0, (UNDEF: 1)
    5ff8:	91050107 	tstls	r5, r7, lsl #2
    5ffc:	00022909 	andeq	r2, r2, r9, lsl #18
    6000:	049b0800 	ldreq	r0, [fp], #2048	; 0x800
    6004:	93050000 	movwls	r0, #20480	; 0x5000
    6008:	0000a007 	andeq	sl, r0, r7
    600c:	01070100 	mrseq	r0, (UNDEF: 23)
    6010:	003d0800 	eorseq	r0, sp, r0, lsl #16
    6014:	94050000 	strls	r0, [r5], #-0
    6018:	0000a003 	andeq	sl, r0, r3
    601c:	00010100 	andeq	r0, r1, r0, lsl #2
    6020:	6b030000 	blvs	c6028 <__ccfg+0xa6080>
    6024:	05000002 	streq	r0, [r0, #-2]
    6028:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    602c:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    6030:	0c000002 	stceq	0, cr0, [r0], {2}
    6034:	00000235 	andeq	r0, r0, r5, lsr r2
    6038:	00000245 	andeq	r0, r0, r5, asr #4
    603c:	3a05000d 	bcc	146078 <__ccfg+0x1260d0>
    6040:	0a000002 	beq	6050 <__exidx_end+0x3148>
    6044:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6048:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    604c:	01000002 	tsteq	r0, r2
    6050:	009b0c01 	addseq	r0, fp, r1, lsl #24
    6054:	02630000 	rsbeq	r0, r3, #0
    6058:	000d0000 	andeq	r0, sp, r0
    605c:	00025805 	andeq	r5, r2, r5, lsl #16
    6060:	038c0a00 	orreq	r0, ip, #0, 20
    6064:	06060000 	streq	r0, [r6], -r0
    6068:	00026313 	andeq	r6, r2, r3, lsl r3
    606c:	0a010100 	beq	46474 <__ccfg+0x264cc>
    6070:	00000126 	andeq	r0, r0, r6, lsr #2
    6074:	b10ec304 	tstlt	lr, r4, lsl #6
    6078:	01000000 	mrseq	r0, (UNDEF: 0)
    607c:	04b50e01 	ldrteq	r0, [r5], #3585	; 0xe01
    6080:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    6084:	02911001 	addseq	r1, r1, #1
    6088:	040b0000 	streq	r0, [fp], #-0
    608c:	00000297 	muleq	r0, r7, r2
    6090:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    6094:	8f100000 	svchi	0x00100000
    6098:	00000000 	andeq	r0, r0, r0
    609c:	0001960c 	andeq	r9, r1, ip, lsl #12
    60a0:	0002ae00 	andeq	sl, r2, r0, lsl #28
    60a4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    60a8:	000002a3 	andeq	r0, r0, r3, lsr #5
    60ac:	00046b11 	andeq	r6, r4, r1, lsl fp
    60b0:	017f0700 	cmneq	pc, r0, lsl #14
    60b4:	0002ae16 	andeq	sl, r2, r6, lsl lr
    60b8:	11010100 	mrsne	r0, (UNDEF: 17)
    60bc:	00000384 	andeq	r0, r0, r4, lsl #7
    60c0:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    60c4:	000000bd 	strheq	r0, [r0], -sp
    60c8:	a0110101 	andsge	r0, r1, r1, lsl #2
    60cc:	07000004 	streq	r0, [r0, -r4]
    60d0:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    60d4:	01000000 	mrseq	r0, (UNDEF: 0)
    60d8:	07081201 	streq	r1, [r8, -r1, lsl #4]
    60dc:	07090303 	streq	r0, [r9, -r3, lsl #6]
    60e0:	13000003 	movwne	r0, #3
    60e4:	00002249 	andeq	r2, r0, r9, asr #4
    60e8:	07030707 	streq	r0, [r3, -r7, lsl #14]
    60ec:	0000008f 	andeq	r0, r0, pc, lsl #1
    60f0:	05991300 	ldreq	r1, [r9, #768]	; 0x300
    60f4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    60f8:	00c20803 	sbceq	r0, r2, r3, lsl #16
    60fc:	00040000 	andeq	r0, r4, r0
    6100:	00024b0e 	andeq	r4, r2, lr, lsl #22
    6104:	03090700 	movweq	r0, #38656	; 0x9700
    6108:	0002e003 	andeq	lr, r2, r3
    610c:	04d21400 	ldrbeq	r1, [r2], #1024	; 0x400
    6110:	07300000 	ldreq	r0, [r0, -r0]!
    6114:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    6118:	13000003 	movwne	r0, #3
    611c:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    6120:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6124:	0000008f 	andeq	r0, r0, pc, lsl #1
    6128:	02b71300 	adcseq	r1, r7, #0, 6
    612c:	15070000 	strne	r0, [r7, #-0]
    6130:	008f0803 	addeq	r0, pc, r3, lsl #16
    6134:	13020000 	movwne	r0, #8192	; 0x2000
    6138:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    613c:	0b031607 	bleq	cb960 <__ccfg+0xab9b8>
    6140:	00000284 	andeq	r0, r0, r4, lsl #5
    6144:	0f941304 	svceq	0x00941304
    6148:	17070000 	strne	r0, [r7, -r0]
    614c:	00c20903 	sbceq	r0, r2, r3, lsl #18
    6150:	13080000 	movwne	r0, #32768	; 0x8000
    6154:	00000464 	andeq	r0, r0, r4, ror #8
    6158:	0f031807 	svceq	0x00031807
    615c:	00000377 	andeq	r0, r0, r7, ror r3
    6160:	02b2130c 	adcseq	r1, r2, #12, 6	; 0x30000000
    6164:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    6168:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    616c:	002c0000 	eoreq	r0, ip, r0
    6170:	0003070c 	andeq	r0, r3, ip, lsl #14
    6174:	00038700 	andeq	r8, r3, r0, lsl #14
    6178:	00881500 	addeq	r1, r8, r0, lsl #10
    617c:	00030000 	andeq	r0, r3, r0
    6180:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    6184:	dd0e0000 	stcle	0, cr0, [lr, #-0]
    6188:	07000004 	streq	r0, [r0, -r4]
    618c:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6190:	11000003 	tstne	r0, r3
    6194:	0000037a 	andeq	r0, r0, sl, ror r3
    6198:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    619c:	000003a9 	andeq	r0, r0, r9, lsr #7
    61a0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    61a4:	0000038d 	andeq	r0, r0, sp, lsl #7
    61a8:	00141b0a 	andseq	r1, r4, sl, lsl #22
    61ac:	0e090100 	adfeqe	f0, f1, f0
    61b0:	00000189 	andeq	r0, r0, r9, lsl #3
    61b4:	01160101 	tsteq	r6, r1, lsl #2
    61b8:	00001464 	andeq	r1, r0, r4, ror #8
    61bc:	01050d01 	tsteq	r5, r1, lsl #26
    61c0:	00000081 	andeq	r0, r0, r1, lsl #1
    61c4:	00001814 	andeq	r1, r0, r4, lsl r8
    61c8:	0000188c 	andeq	r1, r0, ip, lsl #17
    61cc:	73179c01 	tstvc	r7, #256	; 0x100
    61d0:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    61d4:	00008f12 	andeq	r8, r0, r2, lsl pc
    61d8:	00227e00 	eoreq	r7, r2, r0, lsl #28
    61dc:	75621700 	strbvc	r1, [r2, #-1792]!	; 0xfffff900
    61e0:	0d010066 	stceq	0, cr0, [r1, #-408]	; 0xfffffe68
    61e4:	0001891c 	andeq	r8, r1, ip, lsl r9
    61e8:	00229c00 	eoreq	r9, r2, r0, lsl #24
    61ec:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0xfffff900
    61f0:	0d01006e 	stceq	0, cr0, [r1, #-440]	; 0xfffffe48
    61f4:	00008125 	andeq	r8, r0, r5, lsr #2
    61f8:	0022f100 	eoreq	pc, r2, r0, lsl #2
    61fc:	146b1800 	strbtne	r1, [fp], #-2048	; 0xfffff800
    6200:	11010000 	mrsne	r0, (UNDEF: 1)
    6204:	00008106 	andeq	r8, r0, r6, lsl #2
    6208:	00234600 	eoreq	r4, r3, r0, lsl #12
    620c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6210:	03000004 	movweq	r0, #4
    6214:	001b3900 	andseq	r3, fp, r0, lsl #18
    6218:	57010400 	strpl	r0, [r1, -r0, lsl #8]
    621c:	0c000001 	stceq	0, cr0, [r0], {1}
    6220:	00001479 	andeq	r1, r0, r9, ror r4
    6224:	000003a8 	andeq	r0, r0, r8, lsr #7
    6228:	00000c70 	andeq	r0, r0, r0, ror ip
    622c:	00000000 	andeq	r0, r0, r0
    6230:	00004a53 	andeq	r4, r0, r3, asr sl
    6234:	9c060102 	stflss	f0, [r6], {2}
    6238:	02000003 	andeq	r0, r0, #3
    623c:	03f80502 	mvnseq	r0, #8388608	; 0x800000
    6240:	04020000 	streq	r0, [r2], #-0
    6244:	0000b005 	andeq	fp, r0, r5
    6248:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    624c:	000000ab 	andeq	r0, r0, fp, lsr #1
    6250:	00225103 	eoreq	r5, r2, r3, lsl #2
    6254:	182e0200 	stmdane	lr!, {r9}
    6258:	0000004d 	andeq	r0, r0, sp, asr #32
    625c:	9a080102 	bls	20666c <__ccfg+0x1e66c4>
    6260:	03000003 	movweq	r0, #3
    6264:	0000213f 	andeq	r2, r0, pc, lsr r1
    6268:	60193102 	andsvs	r3, r9, r2, lsl #2
    626c:	02000000 	andeq	r0, r0, #0
    6270:	02580702 	subseq	r0, r8, #524288	; 0x80000
    6274:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6278:	02000018 	andeq	r0, r0, #24
    627c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6280:	04020000 	streq	r0, [r2], #-0
    6284:	00008507 	andeq	r8, r0, r7, lsl #10
    6288:	07080200 	streq	r0, [r8, -r0, lsl #4]
    628c:	00000080 	andeq	r0, r0, r0, lsl #1
    6290:	69050404 	stmdbvs	r5, {r2, sl}
    6294:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6298:	008a0704 	addeq	r0, sl, r4, lsl #14
    629c:	9b030000 	blls	c62a4 <__ccfg+0xa62fc>
    62a0:	0300000b 	movweq	r0, #11
    62a4:	009b1b28 	addseq	r1, fp, r8, lsr #22
    62a8:	b1050000 	mrslt	r0, (UNDEF: 5)
    62ac:	0400000a 	streq	r0, [r0], #-10
    62b0:	00b30009 	adcseq	r0, r3, r9
    62b4:	51060000 	mrspl	r0, (UNDEF: 6)
    62b8:	b300000c 	movwlt	r0, #12
    62bc:	00000000 	andeq	r0, r0, r0
    62c0:	04070001 	streq	r0, [r7], #-1
    62c4:	000ab303 	andeq	fp, sl, r3, lsl #6
    62c8:	18630300 	stmdane	r3!, {r8, r9}^
    62cc:	0000008f 	andeq	r0, r0, pc, lsl #1
    62d0:	00161503 	andseq	r1, r6, r3, lsl #10
    62d4:	12270400 	eorne	r0, r7, #0, 8
    62d8:	00000054 	andeq	r0, r0, r4, asr r0
    62dc:	0000c108 	andeq	ip, r0, r8, lsl #2
    62e0:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    62e4:	2b040000 	blcs	1062ec <__ccfg+0xe6344>
    62e8:	00004112 	andeq	r4, r0, r2, lsl r1
    62ec:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    62f0:	66030000 	strvs	r0, [r3], -r0
    62f4:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    62f8:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    62fc:	e3080000 	movw	r0, #32768	; 0x8000
    6300:	03000000 	movweq	r0, #0
    6304:	0000028b 	andeq	r0, r0, fp, lsl #5
    6308:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    630c:	0a000000 	beq	6314 <__exidx_end+0x340c>
    6310:	09320408 	ldmdbeq	r2!, {r3, sl}
    6314:	0000018e 	andeq	r0, r0, lr, lsl #3
    6318:	0002a60b 	andeq	sl, r2, fp, lsl #12
    631c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    6320:	000000d2 	ldrdeq	r0, [r0], -r2
    6324:	00070101 	andeq	r0, r7, r1, lsl #2
    6328:	0000a40b 	andeq	sl, r0, fp, lsl #8
    632c:	03350400 	teqeq	r5, #0, 8
    6330:	000000d2 	ldrdeq	r0, [r0], -r2
    6334:	00060101 	andeq	r0, r6, r1, lsl #2
    6338:	0002740b 	andeq	r7, r2, fp, lsl #8
    633c:	03360400 	teqeq	r6, #0, 8
    6340:	000000d2 	ldrdeq	r0, [r0], -r2
    6344:	00050101 	andeq	r0, r5, r1, lsl #2
    6348:	0004320b 	andeq	r3, r4, fp, lsl #4
    634c:	03370400 	teqeq	r7, #0, 8
    6350:	000000d2 	ldrdeq	r0, [r0], -r2
    6354:	00040101 	andeq	r0, r4, r1, lsl #2
    6358:	00042b0b 	andeq	r2, r4, fp, lsl #22
    635c:	03380400 	teqeq	r8, #0, 8
    6360:	000000d2 	ldrdeq	r0, [r0], -r2
    6364:	00000401 	andeq	r0, r0, r1, lsl #8
    6368:	00041c0c 	andeq	r1, r4, ip, lsl #24
    636c:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    6370:	000000d2 	ldrdeq	r0, [r0], -r2
    6374:	004c0c01 	subeq	r0, ip, r1, lsl #24
    6378:	3c040000 	stccc	0, cr0, [r4], {-0}
    637c:	0000d203 	andeq	sp, r0, r3, lsl #4
    6380:	790c0200 	stmdbvc	ip, {r9}
    6384:	04000000 	streq	r0, [r0], #-0
    6388:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    638c:	0c030000 	stceq	0, cr0, [r3], {-0}
    6390:	00000146 	andeq	r0, r0, r6, asr #2
    6394:	e3083f04 	movw	r3, #36612	; 0x8f04
    6398:	04000000 	streq	r0, [r0], #-0
    639c:	045b0300 	ldrbeq	r0, [fp], #-768	; 0xfffffd00
    63a0:	41040000 	mrsmi	r0, (UNDEF: 4)
    63a4:	00010003 	andeq	r0, r1, r3
    63a8:	018e0900 	orreq	r0, lr, r0, lsl #18
    63ac:	9a0d0000 	bls	3463b4 <__ccfg+0x32640c>
    63b0:	04000002 	streq	r0, [r0], #-2
    63b4:	019a1a43 	orrseq	r1, sl, r3, asr #20
    63b8:	01010000 	mrseq	r0, (UNDEF: 1)
    63bc:	0003060d 	andeq	r0, r3, sp, lsl #12
    63c0:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    63c4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    63c8:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    63cc:	000001c1 	andeq	r0, r0, r1, asr #3
    63d0:	a3080102 	movwge	r0, #33026	; 0x8102
    63d4:	08000003 	stmdaeq	r0, {r0, r1}
    63d8:	000001c1 	andeq	r0, r0, r1, asr #3
    63dc:	0003140d 	andeq	r1, r3, sp, lsl #8
    63e0:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    63e4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    63e8:	080a0101 	stmdaeq	sl, {r0, r8}
    63ec:	0c098f05 	stceq	15, cr8, [r9], {5}
    63f0:	0c000002 	stceq	0, cr0, [r0], {2}
    63f4:	000002ad 	andeq	r0, r0, sp, lsr #5
    63f8:	670b9005 	strvs	r9, [fp, -r5]
    63fc:	00000000 	andeq	r0, r0, r0
    6400:	0006470c 	andeq	r4, r6, ip, lsl #14
    6404:	08910500 	ldmeq	r1, {r8, sl}
    6408:	000000c1 	andeq	r0, r0, r1, asr #1
    640c:	04a80c04 	strteq	r0, [r8], #3076	; 0xc04
    6410:	92050000 	andls	r0, r5, #0
    6414:	0000de10 	andeq	sp, r0, r0, lsl lr
    6418:	03000600 	movweq	r0, #1536	; 0x600
    641c:	00000439 	andeq	r0, r0, r9, lsr r4
    6420:	db039305 	blle	eb03c <__ccfg+0xcb094>
    6424:	0f000001 	svceq	0x00000001
    6428:	0000020c 	andeq	r0, r0, ip, lsl #4
    642c:	00000223 	andeq	r0, r0, r3, lsr #4
    6430:	420d0010 	andmi	r0, sp, #16
    6434:	05000000 	streq	r0, [r0, #-0]
    6438:	02180f99 	andseq	r0, r8, #612	; 0x264
    643c:	01010000 	mrseq	r0, (UNDEF: 1)
    6440:	9106010a 	tstls	r6, sl, lsl #2
    6444:	00025b09 	andeq	r5, r2, r9, lsl #22
    6448:	049b0b00 	ldreq	r0, [fp], #2816	; 0xb00
    644c:	93060000 	movwls	r0, #24576	; 0x6000
    6450:	0000d207 	andeq	sp, r0, r7, lsl #4
    6454:	01070100 	mrseq	r0, (UNDEF: 23)
    6458:	003d0b00 	eorseq	r0, sp, r0, lsl #22
    645c:	94060000 	strls	r0, [r6], #-0
    6460:	0000d203 	andeq	sp, r0, r3, lsl #4
    6464:	00010100 	andeq	r0, r1, r0, lsl #2
    6468:	6b030000 	blvs	c6470 <__ccfg+0xa64c8>
    646c:	06000002 	streq	r0, [r0], -r2
    6470:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    6474:	5b080000 	blpl	20647c <__ccfg+0x1e64d4>
    6478:	0f000002 	svceq	0x00000002
    647c:	00000267 	andeq	r0, r0, r7, ror #4
    6480:	00000277 	andeq	r0, r0, r7, ror r2
    6484:	6c080010 	stcvs	0, cr0, [r8], {16}
    6488:	0d000002 	stceq	0, cr0, [r0, #-8]
    648c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    6490:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    6494:	01000002 	tsteq	r0, r2
    6498:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    649c:	02950000 	addseq	r0, r5, #0
    64a0:	00100000 	andseq	r0, r0, r0
    64a4:	00028a08 	andeq	r8, r2, r8, lsl #20
    64a8:	038c0d00 	orreq	r0, ip, #0, 26
    64ac:	06070000 	streq	r0, [r7], -r0
    64b0:	00029513 	andeq	r9, r2, r3, lsl r5
    64b4:	0d010100 	stfeqs	f0, [r1, #-0]
    64b8:	00000126 	andeq	r0, r0, r6, lsr #2
    64bc:	e30ec305 	movw	ip, #58117	; 0xe305
    64c0:	01000000 	mrseq	r0, (UNDEF: 0)
    64c4:	04b51101 	ldrteq	r1, [r5], #257	; 0x101
    64c8:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    64cc:	02c31001 	sbceq	r1, r3, #1
    64d0:	040e0000 	streq	r0, [lr], #-0
    64d4:	000002c9 	andeq	r0, r0, r9, asr #5
    64d8:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    64dc:	c1130000 	tstgt	r3, r0
    64e0:	00000000 	andeq	r0, r0, r0
    64e4:	0001c80f 	andeq	ip, r1, pc, lsl #16
    64e8:	0002e000 	andeq	lr, r2, r0
    64ec:	08001000 	stmdaeq	r0, {ip}
    64f0:	000002d5 	ldrdeq	r0, [r0], -r5
    64f4:	00046b14 	andeq	r6, r4, r4, lsl fp
    64f8:	017f0800 	cmneq	pc, r0, lsl #16
    64fc:	0002e016 	andeq	lr, r2, r6, lsl r0
    6500:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6504:	00000384 	andeq	r0, r0, r4, lsl #7
    6508:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    650c:	000000ef 	andeq	r0, r0, pc, ror #1
    6510:	a0140101 	andsge	r0, r4, r1, lsl #2
    6514:	08000004 	stmdaeq	r0, {r2}
    6518:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    651c:	01000000 	mrseq	r0, (UNDEF: 0)
    6520:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    6524:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    6528:	16000003 	strne	r0, [r0], -r3
    652c:	00002249 	andeq	r2, r0, r9, asr #4
    6530:	07030708 	streq	r0, [r3, -r8, lsl #14]
    6534:	000000c1 	andeq	r0, r0, r1, asr #1
    6538:	05991600 	ldreq	r1, [r9, #1536]	; 0x600
    653c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6540:	00f40803 	rscseq	r0, r4, r3, lsl #16
    6544:	00040000 	andeq	r0, r4, r0
    6548:	00024b11 	andeq	r4, r2, r1, lsl fp
    654c:	03090800 	movweq	r0, #38912	; 0x9800
    6550:	00031203 	andeq	r1, r3, r3, lsl #4
    6554:	04d21700 	ldrbeq	r1, [r2], #1792	; 0x700
    6558:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    655c:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    6560:	16000003 	strne	r0, [r0], -r3
    6564:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    6568:	08031408 	stmdaeq	r3, {r3, sl, ip}
    656c:	000000c1 	andeq	r0, r0, r1, asr #1
    6570:	02b71600 	adcseq	r1, r7, #0, 12
    6574:	15080000 	strne	r0, [r8, #-0]
    6578:	00c10803 	sbceq	r0, r1, r3, lsl #16
    657c:	16020000 	strne	r0, [r2], -r0
    6580:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    6584:	0b031608 	bleq	cbdac <__ccfg+0xabe04>
    6588:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    658c:	0f941604 	svceq	0x00941604
    6590:	17080000 	strne	r0, [r8, -r0]
    6594:	00f40903 	rscseq	r0, r4, r3, lsl #18
    6598:	16080000 	strne	r0, [r8], -r0
    659c:	00000464 	andeq	r0, r0, r4, ror #8
    65a0:	0f031808 	svceq	0x00031808
    65a4:	000003a9 	andeq	r0, r0, r9, lsr #7
    65a8:	02b2160c 	adcseq	r1, r2, #12, 12	; 0xc00000
    65ac:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    65b0:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    65b4:	002c0000 	eoreq	r0, ip, r0
    65b8:	0003390f 	andeq	r3, r3, pc, lsl #18
    65bc:	0003b900 	andeq	fp, r3, r0, lsl #18
    65c0:	00881800 	addeq	r1, r8, r0, lsl #16
    65c4:	00030000 	andeq	r0, r3, r0
    65c8:	0346040e 	movteq	r0, #25614	; 0x640e
    65cc:	dd110000 	ldcle	0, cr0, [r1, #-0]
    65d0:	08000004 	stmdaeq	r0, {r2}
    65d4:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    65d8:	14000003 	strne	r0, [r0], #-3
    65dc:	0000037a 	andeq	r0, r0, sl, ror r3
    65e0:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    65e4:	000003db 	ldrdeq	r0, [r0], -fp
    65e8:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    65ec:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    65f0:	14700119 	ldrbtne	r0, [r0], #-281	; 0xfffffee7
    65f4:	0c010000 	stceq	0, cr0, [r1], {-0}
    65f8:	00810105 	addeq	r0, r1, r5, lsl #2
    65fc:	188c0000 	stmne	ip, {}	; <UNPREDICTABLE>
    6600:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    6604:	9c010000 	stcls	0, cr0, [r1], {-0}
    6608:	00000449 	andeq	r0, r0, r9, asr #8
    660c:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    6610:	c1140c01 	tstgt	r4, r1, lsl #24
    6614:	90000000 	andls	r0, r0, r0
    6618:	1b000023 	blne	66ac <__exidx_end+0x37a4>
    661c:	0c01006d 	stceq	0, cr0, [r1], {109}	; 0x6d
    6620:	00044924 	andeq	r4, r4, r4, lsr #18
    6624:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6628:	146b1d1c 	strbtne	r1, [fp], #-3356	; 0xfffff2e4
    662c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6630:	00008106 	andeq	r8, r0, r6, lsl #2
    6634:	0023a300 	eoreq	sl, r3, r0, lsl #6
    6638:	75621e00 	strbvc	r1, [r2, #-3584]!	; 0xfffff200
    663c:	0f010066 	svceq	0x00010066
    6640:	0001bb08 	andeq	fp, r1, r8, lsl #22
    6644:	0023e200 	eoreq	lr, r3, r0, lsl #4
    6648:	70611f00 	rsbvc	r1, r1, r0, lsl #30
    664c:	0a100100 	beq	406a54 <__ccfg+0x3e6aac>
    6650:	000000b5 	strheq	r0, [r0], -r5
    6654:	005c9102 	subseq	r9, ip, r2, lsl #2
    6658:	01c8040e 	biceq	r0, r8, lr, lsl #8
    665c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6660:	03000004 	movweq	r0, #4
    6664:	001ce500 	andseq	lr, ip, r0, lsl #10
    6668:	57010400 	strpl	r0, [r1, -r0, lsl #8]
    666c:	0c000001 	stceq	0, cr0, [r0], {1}
    6670:	000014ba 			; <UNDEFINED> instruction: 0x000014ba
    6674:	000003a8 	andeq	r0, r0, r8, lsr #7
    6678:	00000c80 	andeq	r0, r0, r0, lsl #25
    667c:	00000000 	andeq	r0, r0, r0
    6680:	00004bf5 	strdeq	r4, [r0], -r5
    6684:	9c060102 	stflss	f0, [r6], {2}
    6688:	02000003 	andeq	r0, r0, #3
    668c:	03f80502 	mvnseq	r0, #8388608	; 0x800000
    6690:	04020000 	streq	r0, [r2], #-0
    6694:	0000b005 	andeq	fp, r0, r5
    6698:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    669c:	000000ab 	andeq	r0, r0, fp, lsr #1
    66a0:	00225103 	eoreq	r5, r2, r3, lsl #2
    66a4:	182e0200 	stmdane	lr!, {r9}
    66a8:	0000004d 	andeq	r0, r0, sp, asr #32
    66ac:	9a080102 	bls	206abc <__ccfg+0x1e6b14>
    66b0:	03000003 	movweq	r0, #3
    66b4:	0000213f 	andeq	r2, r0, pc, lsr r1
    66b8:	60193102 	andsvs	r3, r9, r2, lsl #2
    66bc:	02000000 	andeq	r0, r0, #0
    66c0:	02580702 	subseq	r0, r8, #524288	; 0x80000
    66c4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    66c8:	02000018 	andeq	r0, r0, #24
    66cc:	00731934 	rsbseq	r1, r3, r4, lsr r9
    66d0:	04020000 	streq	r0, [r2], #-0
    66d4:	00008507 	andeq	r8, r0, r7, lsl #10
    66d8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    66dc:	00000080 	andeq	r0, r0, r0, lsl #1
    66e0:	69050404 	stmdbvs	r5, {r2, sl}
    66e4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    66e8:	008a0704 	addeq	r0, sl, r4, lsl #14
    66ec:	9b030000 	blls	c66f4 <__ccfg+0xa674c>
    66f0:	0300000b 	movweq	r0, #11
    66f4:	009b1b28 	addseq	r1, fp, r8, lsr #22
    66f8:	b1050000 	mrslt	r0, (UNDEF: 5)
    66fc:	0400000a 	streq	r0, [r0], #-10
    6700:	00b30009 	adcseq	r0, r3, r9
    6704:	51060000 	mrspl	r0, (UNDEF: 6)
    6708:	b300000c 	movwlt	r0, #12
    670c:	00000000 	andeq	r0, r0, r0
    6710:	04070001 	streq	r0, [r7], #-1
    6714:	000ab303 	andeq	fp, sl, r3, lsl #6
    6718:	18630300 	stmdane	r3!, {r8, r9}^
    671c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6720:	00161503 	andseq	r1, r6, r3, lsl #10
    6724:	12270400 	eorne	r0, r7, #0, 8
    6728:	00000054 	andeq	r0, r0, r4, asr r0
    672c:	0000c108 	andeq	ip, r0, r8, lsl #2
    6730:	140d0300 	strne	r0, [sp], #-768	; 0xfffffd00
    6734:	2b040000 	blcs	10673c <__ccfg+0xe6794>
    6738:	00004112 	andeq	r4, r0, r2, lsl r1
    673c:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    6740:	66030000 	strvs	r0, [r3], -r0
    6744:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    6748:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    674c:	e3080000 	movw	r0, #32768	; 0x8000
    6750:	03000000 	movweq	r0, #0
    6754:	0000028b 	andeq	r0, r0, fp, lsl #5
    6758:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    675c:	0a000000 	beq	6764 <__exidx_end+0x385c>
    6760:	09320408 	ldmdbeq	r2!, {r3, sl}
    6764:	0000018e 	andeq	r0, r0, lr, lsl #3
    6768:	0002a60b 	andeq	sl, r2, fp, lsl #12
    676c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    6770:	000000d2 	ldrdeq	r0, [r0], -r2
    6774:	00070101 	andeq	r0, r7, r1, lsl #2
    6778:	0000a40b 	andeq	sl, r0, fp, lsl #8
    677c:	03350400 	teqeq	r5, #0, 8
    6780:	000000d2 	ldrdeq	r0, [r0], -r2
    6784:	00060101 	andeq	r0, r6, r1, lsl #2
    6788:	0002740b 	andeq	r7, r2, fp, lsl #8
    678c:	03360400 	teqeq	r6, #0, 8
    6790:	000000d2 	ldrdeq	r0, [r0], -r2
    6794:	00050101 	andeq	r0, r5, r1, lsl #2
    6798:	0004320b 	andeq	r3, r4, fp, lsl #4
    679c:	03370400 	teqeq	r7, #0, 8
    67a0:	000000d2 	ldrdeq	r0, [r0], -r2
    67a4:	00040101 	andeq	r0, r4, r1, lsl #2
    67a8:	00042b0b 	andeq	r2, r4, fp, lsl #22
    67ac:	03380400 	teqeq	r8, #0, 8
    67b0:	000000d2 	ldrdeq	r0, [r0], -r2
    67b4:	00000401 	andeq	r0, r0, r1, lsl #8
    67b8:	00041c0c 	andeq	r1, r4, ip, lsl #24
    67bc:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    67c0:	000000d2 	ldrdeq	r0, [r0], -r2
    67c4:	004c0c01 	subeq	r0, ip, r1, lsl #24
    67c8:	3c040000 	stccc	0, cr0, [r4], {-0}
    67cc:	0000d203 	andeq	sp, r0, r3, lsl #4
    67d0:	790c0200 	stmdbvc	ip, {r9}
    67d4:	04000000 	streq	r0, [r0], #-0
    67d8:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    67dc:	0c030000 	stceq	0, cr0, [r3], {-0}
    67e0:	00000146 	andeq	r0, r0, r6, asr #2
    67e4:	e3083f04 	movw	r3, #36612	; 0x8f04
    67e8:	04000000 	streq	r0, [r0], #-0
    67ec:	045b0300 	ldrbeq	r0, [fp], #-768	; 0xfffffd00
    67f0:	41040000 	mrsmi	r0, (UNDEF: 4)
    67f4:	00010003 	andeq	r0, r1, r3
    67f8:	018e0900 	orreq	r0, lr, r0, lsl #18
    67fc:	9a0d0000 	bls	346804 <__ccfg+0x32685c>
    6800:	04000002 	streq	r0, [r0], #-2
    6804:	019a1a43 	orrseq	r1, sl, r3, asr #20
    6808:	01010000 	mrseq	r0, (UNDEF: 1)
    680c:	0003060d 	andeq	r0, r3, sp, lsl #12
    6810:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    6814:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6818:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    681c:	000001c1 	andeq	r0, r0, r1, asr #3
    6820:	a3080102 	movwge	r0, #33026	; 0x8102
    6824:	08000003 	stmdaeq	r0, {r0, r1}
    6828:	000001c1 	andeq	r0, r0, r1, asr #3
    682c:	0003140d 	andeq	r1, r3, sp, lsl #8
    6830:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    6834:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6838:	080a0101 	stmdaeq	sl, {r0, r8}
    683c:	0c098f05 	stceq	15, cr8, [r9], {5}
    6840:	0c000002 	stceq	0, cr0, [r0], {2}
    6844:	000002ad 	andeq	r0, r0, sp, lsr #5
    6848:	670b9005 	strvs	r9, [fp, -r5]
    684c:	00000000 	andeq	r0, r0, r0
    6850:	0006470c 	andeq	r4, r6, ip, lsl #14
    6854:	08910500 	ldmeq	r1, {r8, sl}
    6858:	000000c1 	andeq	r0, r0, r1, asr #1
    685c:	04a80c04 	strteq	r0, [r8], #3076	; 0xc04
    6860:	92050000 	andls	r0, r5, #0
    6864:	0000de10 	andeq	sp, r0, r0, lsl lr
    6868:	03000600 	movweq	r0, #1536	; 0x600
    686c:	00000439 	andeq	r0, r0, r9, lsr r4
    6870:	db039305 	blle	eb48c <__ccfg+0xcb4e4>
    6874:	0f000001 	svceq	0x00000001
    6878:	0000020c 	andeq	r0, r0, ip, lsl #4
    687c:	00000223 	andeq	r0, r0, r3, lsr #4
    6880:	420d0010 	andmi	r0, sp, #16
    6884:	05000000 	streq	r0, [r0, #-0]
    6888:	02180f99 	andseq	r0, r8, #612	; 0x264
    688c:	01010000 	mrseq	r0, (UNDEF: 1)
    6890:	9106010a 	tstls	r6, sl, lsl #2
    6894:	00025b09 	andeq	r5, r2, r9, lsl #22
    6898:	049b0b00 	ldreq	r0, [fp], #2816	; 0xb00
    689c:	93060000 	movwls	r0, #24576	; 0x6000
    68a0:	0000d207 	andeq	sp, r0, r7, lsl #4
    68a4:	01070100 	mrseq	r0, (UNDEF: 23)
    68a8:	003d0b00 	eorseq	r0, sp, r0, lsl #22
    68ac:	94060000 	strls	r0, [r6], #-0
    68b0:	0000d203 	andeq	sp, r0, r3, lsl #4
    68b4:	00010100 	andeq	r0, r1, r0, lsl #2
    68b8:	6b030000 	blvs	c68c0 <__ccfg+0xa6918>
    68bc:	06000002 	streq	r0, [r0], -r2
    68c0:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    68c4:	5b080000 	blpl	2068cc <__ccfg+0x1e6924>
    68c8:	0f000002 	svceq	0x00000002
    68cc:	00000267 	andeq	r0, r0, r7, ror #4
    68d0:	00000277 	andeq	r0, r0, r7, ror r2
    68d4:	6c080010 	stcvs	0, cr0, [r8], {16}
    68d8:	0d000002 	stceq	0, cr0, [r0, #-8]
    68dc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    68e0:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    68e4:	01000002 	tsteq	r0, r2
    68e8:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    68ec:	02950000 	addseq	r0, r5, #0
    68f0:	00100000 	andseq	r0, r0, r0
    68f4:	00028a08 	andeq	r8, r2, r8, lsl #20
    68f8:	038c0d00 	orreq	r0, ip, #0, 26
    68fc:	06070000 	streq	r0, [r7], -r0
    6900:	00029513 	andeq	r9, r2, r3, lsl r5
    6904:	0d010100 	stfeqs	f0, [r1, #-0]
    6908:	00000126 	andeq	r0, r0, r6, lsr #2
    690c:	e30ec305 	movw	ip, #58117	; 0xe305
    6910:	01000000 	mrseq	r0, (UNDEF: 0)
    6914:	04b51101 	ldrteq	r1, [r5], #257	; 0x101
    6918:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    691c:	02c31001 	sbceq	r1, r3, #1
    6920:	040e0000 	streq	r0, [lr], #-0
    6924:	000002c9 	andeq	r0, r0, r9, asr #5
    6928:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    692c:	c1130000 	tstgt	r3, r0
    6930:	00000000 	andeq	r0, r0, r0
    6934:	0001c80f 	andeq	ip, r1, pc, lsl #16
    6938:	0002e000 	andeq	lr, r2, r0
    693c:	08001000 	stmdaeq	r0, {ip}
    6940:	000002d5 	ldrdeq	r0, [r0], -r5
    6944:	00046b14 	andeq	r6, r4, r4, lsl fp
    6948:	017f0800 	cmneq	pc, r0, lsl #16
    694c:	0002e016 	andeq	lr, r2, r6, lsl r0
    6950:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6954:	00000384 	andeq	r0, r0, r4, lsl #7
    6958:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    695c:	000000ef 	andeq	r0, r0, pc, ror #1
    6960:	a0140101 	andsge	r0, r4, r1, lsl #2
    6964:	08000004 	stmdaeq	r0, {r2}
    6968:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    696c:	01000000 	mrseq	r0, (UNDEF: 0)
    6970:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    6974:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    6978:	16000003 	strne	r0, [r0], -r3
    697c:	00002249 	andeq	r2, r0, r9, asr #4
    6980:	07030708 	streq	r0, [r3, -r8, lsl #14]
    6984:	000000c1 	andeq	r0, r0, r1, asr #1
    6988:	05991600 	ldreq	r1, [r9, #1536]	; 0x600
    698c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6990:	00f40803 	rscseq	r0, r4, r3, lsl #16
    6994:	00040000 	andeq	r0, r4, r0
    6998:	00024b11 	andeq	r4, r2, r1, lsl fp
    699c:	03090800 	movweq	r0, #38912	; 0x9800
    69a0:	00031203 	andeq	r1, r3, r3, lsl #4
    69a4:	04d21700 	ldrbeq	r1, [r2], #1792	; 0x700
    69a8:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    69ac:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    69b0:	16000003 	strne	r0, [r0], -r3
    69b4:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    69b8:	08031408 	stmdaeq	r3, {r3, sl, ip}
    69bc:	000000c1 	andeq	r0, r0, r1, asr #1
    69c0:	02b71600 	adcseq	r1, r7, #0, 12
    69c4:	15080000 	strne	r0, [r8, #-0]
    69c8:	00c10803 	sbceq	r0, r1, r3, lsl #16
    69cc:	16020000 	strne	r0, [r2], -r0
    69d0:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
    69d4:	0b031608 	bleq	cc1fc <__ccfg+0xac254>
    69d8:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    69dc:	0f941604 	svceq	0x00941604
    69e0:	17080000 	strne	r0, [r8, -r0]
    69e4:	00f40903 	rscseq	r0, r4, r3, lsl #18
    69e8:	16080000 	strne	r0, [r8], -r0
    69ec:	00000464 	andeq	r0, r0, r4, ror #8
    69f0:	0f031808 	svceq	0x00031808
    69f4:	000003a9 	andeq	r0, r0, r9, lsr #7
    69f8:	02b2160c 	adcseq	r1, r2, #12, 12	; 0xc00000
    69fc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    6a00:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    6a04:	002c0000 	eoreq	r0, ip, r0
    6a08:	0003390f 	andeq	r3, r3, pc, lsl #18
    6a0c:	0003b900 	andeq	fp, r3, r0, lsl #18
    6a10:	00881800 	addeq	r1, r8, r0, lsl #16
    6a14:	00030000 	andeq	r0, r3, r0
    6a18:	0346040e 	movteq	r0, #25614	; 0x640e
    6a1c:	dd110000 	ldcle	0, cr0, [r1, #-0]
    6a20:	08000004 	stmdaeq	r0, {r2}
    6a24:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    6a28:	14000003 	strne	r0, [r0], #-3
    6a2c:	0000037a 	andeq	r0, r0, sl, ror r3
    6a30:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    6a34:	000003db 	ldrdeq	r0, [r0], -fp
    6a38:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    6a3c:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    6a40:	00141b0d 	andseq	r1, r4, sp, lsl #22
    6a44:	0e0a0100 	adfeqe	f0, f2, f0
    6a48:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6a4c:	01190101 	tsteq	r9, r1, lsl #2
    6a50:	000014fa 	strdeq	r1, [r0], -sl
    6a54:	01050e01 	tsteq	r5, r1, lsl #28
    6a58:	00000081 	andeq	r0, r0, r1, lsl #1
    6a5c:	000018e0 	andeq	r1, r0, r0, ror #17
    6a60:	00001940 	andeq	r1, r0, r0, asr #18
    6a64:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    6a68:	731a0000 	tstvc	sl, #0
    6a6c:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    6a70:	0000c113 	andeq	ip, r0, r3, lsl r1
    6a74:	00241600 	eoreq	r1, r4, r0, lsl #12
    6a78:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    6a7c:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    6a80:	00044923 	andeq	r4, r4, r3, lsr #18
    6a84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6a88:	146b1d1c 	strbtne	r1, [fp], #-3356	; 0xfffff2e4
    6a8c:	13010000 	movwne	r0, #4096	; 0x1000
    6a90:	00008106 	andeq	r8, r0, r6, lsl #2
    6a94:	00243400 	eoreq	r3, r4, r0, lsl #8
    6a98:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    6a9c:	0a140100 	beq	506ea4 <__ccfg+0x4e6efc>
    6aa0:	000000b5 	strheq	r0, [r0], -r5
    6aa4:	00649102 	rsbeq	r9, r4, r2, lsl #2
    6aa8:	01c8040e 	biceq	r0, r8, lr, lsl #8
    6aac:	2d000000 	stccs	0, cr0, [r0, #-0]
    6ab0:	03000004 	movweq	r0, #4
    6ab4:	001e8000 	andseq	r8, lr, r0
    6ab8:	57010400 	strpl	r0, [r1, -r0, lsl #8]
    6abc:	0c000001 	stceq	0, cr0, [r0], {1}
    6ac0:	00001502 	andeq	r1, r0, r2, lsl #10
    6ac4:	000003a8 	andeq	r0, r0, r8, lsr #7
    6ac8:	00000ca8 	andeq	r0, r0, r8, lsr #25
    6acc:	00000000 	andeq	r0, r0, r0
    6ad0:	00004da8 	andeq	r4, r0, r8, lsr #27
    6ad4:	9c060102 	stflss	f0, [r6], {2}
    6ad8:	02000003 	andeq	r0, r0, #3
    6adc:	03f80502 	mvnseq	r0, #8388608	; 0x800000
    6ae0:	04020000 	streq	r0, [r2], #-0
    6ae4:	0000b005 	andeq	fp, r0, r5
    6ae8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    6aec:	000000ab 	andeq	r0, r0, fp, lsr #1
    6af0:	00225103 	eoreq	r5, r2, r3, lsl #2
    6af4:	182e0200 	stmdane	lr!, {r9}
    6af8:	0000004d 	andeq	r0, r0, sp, asr #32
    6afc:	9a080102 	bls	206f0c <__ccfg+0x1e6f64>
    6b00:	03000003 	movweq	r0, #3
    6b04:	0000213f 	andeq	r2, r0, pc, lsr r1
    6b08:	60193102 	andsvs	r3, r9, r2, lsl #2
    6b0c:	02000000 	andeq	r0, r0, #0
    6b10:	02580702 	subseq	r0, r8, #524288	; 0x80000
    6b14:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    6b18:	02000018 	andeq	r0, r0, #24
    6b1c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6b20:	04020000 	streq	r0, [r2], #-0
    6b24:	00008507 	andeq	r8, r0, r7, lsl #10
    6b28:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6b2c:	00000080 	andeq	r0, r0, r0, lsl #1
    6b30:	69050404 	stmdbvs	r5, {r2, sl}
    6b34:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6b38:	008a0704 	addeq	r0, sl, r4, lsl #14
    6b3c:	15030000 	strne	r0, [r3, #-0]
    6b40:	03000016 	movweq	r0, #22
    6b44:	00541227 	subseq	r1, r4, r7, lsr #4
    6b48:	8f050000 	svchi	0x00050000
    6b4c:	03000000 	movweq	r0, #0
    6b50:	0000140d 	andeq	r1, r0, sp, lsl #8
    6b54:	41122b03 	tstmi	r2, r3, lsl #22
    6b58:	06000000 	streq	r0, [r0], -r0
    6b5c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6b60:	00166603 	andseq	r6, r6, r3, lsl #12
    6b64:	122c0300 	eorne	r0, ip, #0, 6
    6b68:	00000067 	andeq	r0, r0, r7, rrx
    6b6c:	0000b105 	andeq	fp, r0, r5, lsl #2
    6b70:	028b0300 	addeq	r0, fp, #0, 6
    6b74:	2d030000 	stccs	0, cr0, [r3, #-0]
    6b78:	00006712 	andeq	r6, r0, r2, lsl r7
    6b7c:	03080700 	movweq	r0, #34560	; 0x8700
    6b80:	015c0932 	cmpeq	ip, r2, lsr r9
    6b84:	a6080000 	strge	r0, [r8], -r0
    6b88:	03000002 	movweq	r0, #2
    6b8c:	00a00734 	adceq	r0, r0, r4, lsr r7
    6b90:	01010000 	mrseq	r0, (UNDEF: 1)
    6b94:	a4080007 	strge	r0, [r8], #-7
    6b98:	03000000 	movweq	r0, #0
    6b9c:	00a00335 	adceq	r0, r0, r5, lsr r3
    6ba0:	01010000 	mrseq	r0, (UNDEF: 1)
    6ba4:	74080006 	strvc	r0, [r8], #-6
    6ba8:	03000002 	movweq	r0, #2
    6bac:	00a00336 	adceq	r0, r0, r6, lsr r3
    6bb0:	01010000 	mrseq	r0, (UNDEF: 1)
    6bb4:	32080005 	andcc	r0, r8, #5
    6bb8:	03000004 	movweq	r0, #4
    6bbc:	00a00337 	adceq	r0, r0, r7, lsr r3
    6bc0:	01010000 	mrseq	r0, (UNDEF: 1)
    6bc4:	2b080004 	blcs	206bdc <__ccfg+0x1e6c34>
    6bc8:	03000004 	movweq	r0, #4
    6bcc:	00a00338 	adceq	r0, r0, r8, lsr r3
    6bd0:	04010000 	streq	r0, [r1], #-0
    6bd4:	1c090000 	stcne	0, cr0, [r9], {-0}
    6bd8:	03000004 	movweq	r0, #4
    6bdc:	00a0073a 	adceq	r0, r0, sl, lsr r7
    6be0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6be4:	0000004c 	andeq	r0, r0, ip, asr #32
    6be8:	a0033c03 	andge	r3, r3, r3, lsl #24
    6bec:	02000000 	andeq	r0, r0, #0
    6bf0:	00007909 	andeq	r7, r0, r9, lsl #18
    6bf4:	033d0300 	teqeq	sp, #0, 6
    6bf8:	000000a0 	andeq	r0, r0, r0, lsr #1
    6bfc:	01460903 	cmpeq	r6, r3, lsl #18
    6c00:	3f030000 	svccc	0x00030000
    6c04:	0000b108 	andeq	fp, r0, r8, lsl #2
    6c08:	03000400 	movweq	r0, #1024	; 0x400
    6c0c:	0000045b 	andeq	r0, r0, fp, asr r4
    6c10:	ce034103 	adfgts	f4, f3, f3
    6c14:	06000000 	streq	r0, [r0], -r0
    6c18:	0000015c 	andeq	r0, r0, ip, asr r1
    6c1c:	00029a0a 	andeq	r9, r2, sl, lsl #20
    6c20:	1a430300 	bne	10c7828 <__ccfg+0x10a7880>
    6c24:	00000168 	andeq	r0, r0, r8, ror #2
    6c28:	060a0101 	streq	r0, [sl], -r1, lsl #2
    6c2c:	03000003 	movweq	r0, #3
    6c30:	01890e45 	orreq	r0, r9, r5, asr #28
    6c34:	01010000 	mrseq	r0, (UNDEF: 1)
    6c38:	018f040b 	orreq	r0, pc, fp, lsl #8
    6c3c:	01020000 	mrseq	r0, (UNDEF: 2)
    6c40:	0003a308 	andeq	sl, r3, r8, lsl #6
    6c44:	018f0500 	orreq	r0, pc, r0, lsl #10
    6c48:	140a0000 	strne	r0, [sl], #-0
    6c4c:	03000003 	movweq	r0, #3
    6c50:	01891e45 	orreq	r1, r9, r5, asr #28
    6c54:	01010000 	mrseq	r0, (UNDEF: 1)
    6c58:	8f040807 	svchi	0x00040807
    6c5c:	0001da09 	andeq	sp, r1, r9, lsl #20
    6c60:	02ad0900 	adceq	r0, sp, #0, 18
    6c64:	90040000 	andls	r0, r4, r0
    6c68:	0000670b 	andeq	r6, r0, fp, lsl #14
    6c6c:	47090000 	strmi	r0, [r9, -r0]
    6c70:	04000006 	streq	r0, [r0], #-6
    6c74:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    6c78:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6c7c:	000004a8 	andeq	r0, r0, r8, lsr #9
    6c80:	ac109204 	lfmge	f1, 1, [r0], {4}
    6c84:	06000000 	streq	r0, [r0], -r0
    6c88:	04390300 	ldrteq	r0, [r9], #-768	; 0xfffffd00
    6c8c:	93040000 	movwls	r0, #16384	; 0x4000
    6c90:	0001a903 	andeq	sl, r1, r3, lsl #18
    6c94:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    6c98:	01f10000 	mvnseq	r0, r0
    6c9c:	000d0000 	andeq	r0, sp, r0
    6ca0:	0000420a 	andeq	r4, r0, sl, lsl #4
    6ca4:	0f990400 	svceq	0x00990400
    6ca8:	000001e6 	andeq	r0, r0, r6, ror #3
    6cac:	01070101 	tsteq	r7, r1, lsl #2
    6cb0:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    6cb4:	08000002 	stmdaeq	r0, {r1}
    6cb8:	0000049b 	muleq	r0, fp, r4
    6cbc:	a0079305 	andge	r9, r7, r5, lsl #6
    6cc0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cc4:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    6cc8:	0000003d 	andeq	r0, r0, sp, lsr r0
    6ccc:	a0039405 	andge	r9, r3, r5, lsl #8
    6cd0:	01000000 	mrseq	r0, (UNDEF: 0)
    6cd4:	00000001 	andeq	r0, r0, r1
    6cd8:	00026b03 	andeq	r6, r2, r3, lsl #22
    6cdc:	03960500 	orrseq	r0, r6, #0, 10
    6ce0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6ce4:	00022905 	andeq	r2, r2, r5, lsl #18
    6ce8:	02350c00 	eorseq	r0, r5, #0, 24
    6cec:	02450000 	subeq	r0, r5, #0
    6cf0:	000d0000 	andeq	r0, sp, r0
    6cf4:	00023a05 	andeq	r3, r2, r5, lsl #20
    6cf8:	02d00a00 	sbcseq	r0, r0, #0, 20
    6cfc:	9c050000 	stcls	0, cr0, [r5], {-0}
    6d00:	00024517 	andeq	r4, r2, r7, lsl r5
    6d04:	0c010100 	stfeqs	f0, [r1], {-0}
    6d08:	0000009b 	muleq	r0, fp, r0
    6d0c:	00000263 	andeq	r0, r0, r3, ror #4
    6d10:	5805000d 	stmdapl	r5, {r0, r2, r3}
    6d14:	0a000002 	beq	6d24 <__exidx_end+0x3e1c>
    6d18:	0000038c 	andeq	r0, r0, ip, lsl #7
    6d1c:	63130606 	tstvs	r3, #6291456	; 0x600000
    6d20:	01000002 	tsteq	r0, r2
    6d24:	01260a01 			; <UNDEFINED> instruction: 0x01260a01
    6d28:	c3040000 	movwgt	r0, #16384	; 0x4000
    6d2c:	0000b10e 	andeq	fp, r0, lr, lsl #2
    6d30:	0e010100 	adfeqs	f0, f1, f0
    6d34:	000004b5 			; <UNDEFINED> instruction: 0x000004b5
    6d38:	10016e07 	andne	r6, r1, r7, lsl #28
    6d3c:	00000291 	muleq	r0, r1, r2
    6d40:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    6d44:	010f0000 	mrseq	r0, CPSR
    6d48:	000002a3 	andeq	r0, r0, r3, lsr #5
    6d4c:	00008f10 	andeq	r8, r0, r0, lsl pc
    6d50:	960c0000 	strls	r0, [ip], -r0
    6d54:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    6d58:	0d000002 	stceq	0, cr0, [r0, #-8]
    6d5c:	02a30500 	adceq	r0, r3, #0, 10
    6d60:	6b110000 	blvs	446d68 <__ccfg+0x426dc0>
    6d64:	07000004 	streq	r0, [r0, -r4]
    6d68:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    6d6c:	01000002 	tsteq	r0, r2
    6d70:	03841101 	orreq	r1, r4, #1073741824	; 0x40000000
    6d74:	82070000 	andhi	r0, r7, #0
    6d78:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    6d7c:	01010000 	mrseq	r0, (UNDEF: 1)
    6d80:	0004a011 	andeq	sl, r4, r1, lsl r0
    6d84:	02d80700 	sbcseq	r0, r8, #0, 14
    6d88:	0000b10e 	andeq	fp, r0, lr, lsl #2
    6d8c:	12010100 	andne	r0, r1, #0, 2
    6d90:	03030708 	movweq	r0, #14088	; 0x3708
    6d94:	00030709 	andeq	r0, r3, r9, lsl #14
    6d98:	22491300 	subcs	r1, r9, #0, 6
    6d9c:	07070000 	streq	r0, [r7, -r0]
    6da0:	008f0703 	addeq	r0, pc, r3, lsl #14
    6da4:	13000000 	movwne	r0, #0
    6da8:	00000599 	muleq	r0, r9, r5
    6dac:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    6db0:	000000c2 	andeq	r0, r0, r2, asr #1
    6db4:	4b0e0004 	blmi	386dcc <__ccfg+0x366e24>
    6db8:	07000002 	streq	r0, [r0, -r2]
    6dbc:	e0030309 	and	r0, r3, r9, lsl #6
    6dc0:	14000002 	strne	r0, [r0], #-2
    6dc4:	000004d2 	ldrdeq	r0, [r0], -r2
    6dc8:	030b0730 	movweq	r0, #46896	; 0xb730
    6dcc:	00037708 	andeq	r7, r3, r8, lsl #14
    6dd0:	04bd1300 	ldrteq	r1, [sp], #768	; 0x300
    6dd4:	14070000 	strne	r0, [r7], #-0
    6dd8:	008f0803 	addeq	r0, pc, r3, lsl #16
    6ddc:	13000000 	movwne	r0, #0
    6de0:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    6de4:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    6de8:	0000008f 	andeq	r0, r0, pc, lsl #1
    6dec:	04b81302 	ldrteq	r1, [r8], #770	; 0x302
    6df0:	16070000 	strne	r0, [r7], -r0
    6df4:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    6df8:	13040000 	movwne	r0, #16384	; 0x4000
    6dfc:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    6e00:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    6e04:	000000c2 	andeq	r0, r0, r2, asr #1
    6e08:	04641308 	strbteq	r1, [r4], #-776	; 0xfffffcf8
    6e0c:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    6e10:	03770f03 	cmneq	r7, #3, 30
    6e14:	130c0000 	movwne	r0, #49152	; 0xc000
    6e18:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    6e1c:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    6e20:	00000387 	andeq	r0, r0, r7, lsl #7
    6e24:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    6e28:	87000003 	strhi	r0, [r0, -r3]
    6e2c:	15000003 	strne	r0, [r0, #-3]
    6e30:	00000088 	andeq	r0, r0, r8, lsl #1
    6e34:	040b0003 	streq	r0, [fp], #-3
    6e38:	00000314 	andeq	r0, r0, r4, lsl r3
    6e3c:	0004dd0e 	andeq	sp, r4, lr, lsl #26
    6e40:	031c0700 	tsteq	ip, #0, 14
    6e44:	0003141b 	andeq	r1, r3, fp, lsl r4
    6e48:	037a1100 	cmneq	sl, #0, 2
    6e4c:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    6e50:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    6e54:	01010000 	mrseq	r0, (UNDEF: 1)
    6e58:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    6e5c:	01160000 	tsteq	r6, r0
    6e60:	0000154c 	andeq	r1, r0, ip, asr #10
    6e64:	01011d01 	tsteq	r1, r1, lsl #26
    6e68:	00001940 	andeq	r1, r0, r0, asr #18
    6e6c:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    6e70:	042a9c01 	strteq	r9, [sl], #-3073	; 0xfffff3ff
    6e74:	e5170000 	ldr	r0, [r7, #-0]
    6e78:	01000000 	mrseq	r0, (UNDEF: 0)
    6e7c:	008f011d 	addeq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    6e80:	247e0000 	ldrbtcs	r0, [lr], #-0
    6e84:	94180000 	ldrls	r0, [r8], #-0
    6e88:	0100000f 	tsteq	r0, pc
    6e8c:	042a011d 	strteq	r0, [sl], #-285	; 0xfffffee3
    6e90:	24a70000 	strtcs	r0, [r7], #0
    6e94:	58190000 	ldmdapl	r9, {}	; <UNPREDICTABLE>
    6e98:	01000015 	tsteq	r0, r5, lsl r0
    6e9c:	901a0130 	andsls	r0, sl, r0, lsr r1
    6ea0:	1b00000c 	blne	6ed8 <__exidx_end+0x3fd0>
    6ea4:	00727470 	rsbseq	r7, r2, r0, ror r4
    6ea8:	2a152201 	bcs	54f6b4 <__ccfg+0x52f70c>
    6eac:	05000004 	streq	r0, [r0, #-4]
    6eb0:	00006c03 	andeq	r6, r0, r3, lsl #24
    6eb4:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    6eb8:	2301006e 	movwcs	r0, #4206	; 0x106e
    6ebc:	0000810d 	andeq	r8, r0, sp, lsl #2
    6ec0:	68030500 	stmdavs	r3, {r8, sl}
    6ec4:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    6ec8:	00001546 	andeq	r1, r0, r6, asr #10
    6ecc:	81062401 	tsthi	r6, r1, lsl #8
    6ed0:	d1000000 	mrsle	r0, (UNDEF: 0)
    6ed4:	00000024 	andeq	r0, r0, r4, lsr #32
    6ed8:	96040b00 	strls	r0, [r4], -r0, lsl #22
    6edc:	00000001 	andeq	r0, r0, r1
    6ee0:	00000440 	andeq	r0, r0, r0, asr #8
    6ee4:	1ff40003 	svcne	0x00f40003
    6ee8:	01040000 	mrseq	r0, (UNDEF: 4)
    6eec:	00000157 	andeq	r0, r0, r7, asr r1
    6ef0:	00156e0c 	andseq	r6, r5, ip, lsl #28
    6ef4:	0003a800 	andeq	sl, r3, r0, lsl #16
    6ef8:	000cd800 	andeq	sp, ip, r0, lsl #16
    6efc:	00000000 	andeq	r0, r0, r0
    6f00:	004f4d00 	subeq	r4, pc, r0, lsl #26
    6f04:	06010200 	streq	r0, [r1], -r0, lsl #4
    6f08:	0000039c 	muleq	r0, ip, r3
    6f0c:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    6f10:	02000003 	andeq	r0, r0, #3
    6f14:	00b00504 	adcseq	r0, r0, r4, lsl #10
    6f18:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6f1c:	0000ab05 	andeq	sl, r0, r5, lsl #22
    6f20:	22510300 	subscs	r0, r1, #0, 6
    6f24:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6f28:	00004d18 	andeq	r4, r0, r8, lsl sp
    6f2c:	08010200 	stmdaeq	r1, {r9}
    6f30:	0000039a 	muleq	r0, sl, r3
    6f34:	00213f03 	eoreq	r3, r1, r3, lsl #30
    6f38:	19310200 	ldmdbne	r1!, {r9}
    6f3c:	00000060 	andeq	r0, r0, r0, rrx
    6f40:	58070202 	stmdapl	r7, {r1, r9}
    6f44:	03000002 	movweq	r0, #2
    6f48:	00001808 	andeq	r1, r0, r8, lsl #16
    6f4c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6f50:	02000000 	andeq	r0, r0, #0
    6f54:	00850704 	addeq	r0, r5, r4, lsl #14
    6f58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6f5c:	00008007 	andeq	r8, r0, r7
    6f60:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6f64:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6f68:	8a070402 	bhi	1c7f78 <__ccfg+0x1a7fd0>
    6f6c:	03000000 	movweq	r0, #0
    6f70:	00001615 	andeq	r1, r0, r5, lsl r6
    6f74:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    6f78:	05000000 	streq	r0, [r0, #-0]
    6f7c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6f80:	00140d03 	andseq	r0, r4, r3, lsl #26
    6f84:	122b0300 	eorne	r0, fp, #0, 6
    6f88:	00000041 	andeq	r0, r0, r1, asr #32
    6f8c:	0000a006 	andeq	sl, r0, r6
    6f90:	16660300 	strbtne	r0, [r6], -r0, lsl #6
    6f94:	2c030000 	stccs	0, cr0, [r3], {-0}
    6f98:	00006712 	andeq	r6, r0, r2, lsl r7
    6f9c:	00b10500 	adcseq	r0, r1, r0, lsl #10
    6fa0:	8b030000 	blhi	c6fa8 <__ccfg+0xa7000>
    6fa4:	03000002 	movweq	r0, #2
    6fa8:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6fac:	bc030000 	stclt	0, cr0, [r3], {-0}
    6fb0:	03000007 	movweq	r0, #7
    6fb4:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    6fb8:	04070000 	streq	r0, [r7], #-0
    6fbc:	0000008f 	andeq	r0, r0, pc, lsl #1
    6fc0:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    6fc4:	00016e09 	andeq	r6, r1, r9, lsl #28
    6fc8:	02a60900 	adceq	r0, r6, #0, 18
    6fcc:	34030000 	strcc	r0, [r3], #-0
    6fd0:	0000a007 	andeq	sl, r0, r7
    6fd4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6fd8:	00a40900 	adceq	r0, r4, r0, lsl #18
    6fdc:	35030000 	strcc	r0, [r3, #-0]
    6fe0:	0000a003 	andeq	sl, r0, r3
    6fe4:	06010100 	streq	r0, [r1], -r0, lsl #2
    6fe8:	02740900 	rsbseq	r0, r4, #0, 18
    6fec:	36030000 	strcc	r0, [r3], -r0
    6ff0:	0000a003 	andeq	sl, r0, r3
    6ff4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6ff8:	04320900 	ldrteq	r0, [r2], #-2304	; 0xfffff700
    6ffc:	37030000 	strcc	r0, [r3, -r0]
    7000:	0000a003 	andeq	sl, r0, r3
    7004:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7008:	042b0900 	strteq	r0, [fp], #-2304	; 0xfffff700
    700c:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    7010:	0000a003 	andeq	sl, r0, r3
    7014:	00040100 	andeq	r0, r4, r0, lsl #2
    7018:	041c0a00 	ldreq	r0, [ip], #-2560	; 0xfffff600
    701c:	3a030000 	bcc	c7024 <__ccfg+0xa707c>
    7020:	0000a007 	andeq	sl, r0, r7
    7024:	4c0a0100 	stfmis	f0, [sl], {-0}
    7028:	03000000 	movweq	r0, #0
    702c:	00a0033c 	adceq	r0, r0, ip, lsr r3
    7030:	0a020000 	beq	87038 <__ccfg+0x67090>
    7034:	00000079 	andeq	r0, r0, r9, ror r0
    7038:	a0033d03 	andge	r3, r3, r3, lsl #26
    703c:	03000000 	movweq	r0, #0
    7040:	0001460a 	andeq	r4, r1, sl, lsl #12
    7044:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    7048:	000000b1 	strheq	r0, [r0], -r1
    704c:	5b030004 	blpl	c7064 <__ccfg+0xa70bc>
    7050:	03000004 	movweq	r0, #4
    7054:	00e00341 	rsceq	r0, r0, r1, asr #6
    7058:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    705c:	0b000001 	bleq	7068 <__exidx_end+0x4160>
    7060:	0000029a 	muleq	r0, sl, r2
    7064:	7a1a4303 	bvc	697c78 <__ccfg+0x677cd0>
    7068:	01000001 	tsteq	r0, r1
    706c:	03060b01 	movweq	r0, #27393	; 0x6b01
    7070:	45030000 	strmi	r0, [r3, #-0]
    7074:	00019b0e 	andeq	r9, r1, lr, lsl #22
    7078:	07010100 	streq	r0, [r1, -r0, lsl #2]
    707c:	0001a104 	andeq	sl, r1, r4, lsl #2
    7080:	08010200 	stmdaeq	r1, {r9}
    7084:	000003a3 	andeq	r0, r0, r3, lsr #7
    7088:	0001a105 	andeq	sl, r1, r5, lsl #2
    708c:	03140b00 	tsteq	r4, #0, 22
    7090:	45030000 	strmi	r0, [r3, #-0]
    7094:	00019b1e 	andeq	r9, r1, lr, lsl fp
    7098:	08010100 	stmdaeq	r1, {r8}
    709c:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    70a0:	000001ec 	andeq	r0, r0, ip, ror #3
    70a4:	0002ad0a 	andeq	sl, r2, sl, lsl #26
    70a8:	0b900400 	bleq	fe4080b0 <_estack+0xde4030b0>
    70ac:	00000067 	andeq	r0, r0, r7, rrx
    70b0:	06470a00 	strbeq	r0, [r7], -r0, lsl #20
    70b4:	91040000 	mrsls	r0, (UNDEF: 4)
    70b8:	00008f08 	andeq	r8, r0, r8, lsl #30
    70bc:	a80a0400 	stmdage	sl, {sl}
    70c0:	04000004 	streq	r0, [r0], #-4
    70c4:	00ac1092 	umlaleq	r1, ip, r2, r0
    70c8:	00060000 	andeq	r0, r6, r0
    70cc:	00043903 	andeq	r3, r4, r3, lsl #18
    70d0:	03930400 	orrseq	r0, r3, #0, 8
    70d4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    70d8:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    70dc:	00020300 	andeq	r0, r2, r0, lsl #6
    70e0:	0b000d00 	bleq	a4e8 <__exidx_end+0x75e0>
    70e4:	00000042 	andeq	r0, r0, r2, asr #32
    70e8:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    70ec:	01000001 	tsteq	r0, r1
    70f0:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    70f4:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    70f8:	9b090000 	blls	247100 <__ccfg+0x227158>
    70fc:	05000004 	streq	r0, [r0, #-4]
    7100:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    7104:	07010000 	streq	r0, [r1, -r0]
    7108:	3d090001 	stccc	0, cr0, [r9, #-4]
    710c:	05000000 	streq	r0, [r0, #-0]
    7110:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    7114:	01010000 	mrseq	r0, (UNDEF: 1)
    7118:	03000000 	movweq	r0, #0
    711c:	0000026b 	andeq	r0, r0, fp, ror #4
    7120:	11039605 	tstne	r3, r5, lsl #12
    7124:	05000002 	streq	r0, [r0, #-2]
    7128:	0000023b 	andeq	r0, r0, fp, lsr r2
    712c:	0002470c 	andeq	r4, r2, ip, lsl #14
    7130:	00025700 	andeq	r5, r2, r0, lsl #14
    7134:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7138:	0000024c 	andeq	r0, r0, ip, asr #4
    713c:	0002d00b 	andeq	sp, r2, fp
    7140:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    7144:	00000257 	andeq	r0, r0, r7, asr r2
    7148:	9b0c0101 	blls	307554 <__ccfg+0x2e75ac>
    714c:	75000000 	strvc	r0, [r0, #-0]
    7150:	0d000002 	stceq	0, cr0, [r0, #-8]
    7154:	026a0500 	rsbeq	r0, sl, #0, 10
    7158:	8c0b0000 	stchi	0, cr0, [fp], {-0}
    715c:	06000003 	streq	r0, [r0], -r3
    7160:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    7164:	01010000 	mrseq	r0, (UNDEF: 1)
    7168:	0001260b 	andeq	r2, r1, fp, lsl #12
    716c:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    7170:	000000b1 	strheq	r0, [r0], -r1
    7174:	b50e0101 	strlt	r0, [lr, #-257]	; 0xfffffeff
    7178:	07000004 	streq	r0, [r0, -r4]
    717c:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    7180:	07000002 	streq	r0, [r0, -r2]
    7184:	0002a904 	andeq	sl, r2, r4, lsl #18
    7188:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    718c:	10000002 	andne	r0, r0, r2
    7190:	0000008f 	andeq	r0, r0, pc, lsl #1
    7194:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    7198:	02c00000 	sbceq	r0, r0, #0
    719c:	000d0000 	andeq	r0, sp, r0
    71a0:	0002b505 	andeq	fp, r2, r5, lsl #10
    71a4:	046b1100 	strbteq	r1, [fp], #-256	; 0xffffff00
    71a8:	7f070000 	svcvc	0x00070000
    71ac:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    71b0:	01010000 	mrseq	r0, (UNDEF: 1)
    71b4:	00038411 	andeq	r8, r3, r1, lsl r4
    71b8:	01820700 	orreq	r0, r2, r0, lsl #14
    71bc:	0000bd14 	andeq	fp, r0, r4, lsl sp
    71c0:	11010100 	mrsne	r0, (UNDEF: 17)
    71c4:	000004a0 	andeq	r0, r0, r0, lsr #9
    71c8:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    71cc:	000000b1 	strheq	r0, [r0], -r1
    71d0:	08120101 	ldmdaeq	r2, {r0, r8}
    71d4:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    71d8:	00000319 	andeq	r0, r0, r9, lsl r3
    71dc:	00224913 	eoreq	r4, r2, r3, lsl r9
    71e0:	03070700 	movweq	r0, #30464	; 0x7700
    71e4:	00008f07 	andeq	r8, r0, r7, lsl #30
    71e8:	99130000 	ldmdbls	r3, {}	; <UNPREDICTABLE>
    71ec:	07000005 	streq	r0, [r0, -r5]
    71f0:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    71f4:	04000000 	streq	r0, [r0], #-0
    71f8:	024b0e00 	subeq	r0, fp, #0, 28
    71fc:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    7200:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    7204:	d2140000 	andsle	r0, r4, #0
    7208:	30000004 	andcc	r0, r0, r4
    720c:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    7210:	00000389 	andeq	r0, r0, r9, lsl #7
    7214:	0004bd13 	andeq	fp, r4, r3, lsl sp
    7218:	03140700 	tsteq	r4, #0, 14
    721c:	00008f08 	andeq	r8, r0, r8, lsl #30
    7220:	b7130000 	ldrlt	r0, [r3, -r0]
    7224:	07000002 	streq	r0, [r0, -r2]
    7228:	8f080315 	svchi	0x00080315
    722c:	02000000 	andeq	r0, r0, #0
    7230:	0004b813 	andeq	fp, r4, r3, lsl r8
    7234:	03160700 	tsteq	r6, #0, 14
    7238:	0002960b 	andeq	r9, r2, fp, lsl #12
    723c:	94130400 	ldrls	r0, [r3], #-1024	; 0xfffffc00
    7240:	0700000f 	streq	r0, [r0, -pc]
    7244:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    7248:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    724c:	00046413 	andeq	r6, r4, r3, lsl r4
    7250:	03180700 	tsteq	r8, #0, 14
    7254:	0003890f 	andeq	r8, r3, pc, lsl #18
    7258:	b2130c00 	andslt	r0, r3, #0, 24
    725c:	07000002 	streq	r0, [r0, -r2]
    7260:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    7264:	2c000003 	stccs	0, cr0, [r0], {3}
    7268:	03190c00 	tsteq	r9, #0, 24
    726c:	03990000 	orrseq	r0, r9, #0
    7270:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    7274:	03000000 	movweq	r0, #0
    7278:	26040700 	strcs	r0, [r4], -r0, lsl #14
    727c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    7280:	000004dd 	ldrdeq	r0, [r0], -sp
    7284:	1b031c07 	blne	ce2a8 <__ccfg+0xae300>
    7288:	00000326 	andeq	r0, r0, r6, lsr #6
    728c:	00037a11 	andeq	r7, r3, r1, lsl sl
    7290:	031e0700 	tsteq	lr, #0, 14
    7294:	0003bb14 	andeq	fp, r3, r4, lsl fp
    7298:	07010100 	streq	r0, [r1, -r0, lsl #2]
    729c:	00039f04 	andeq	r9, r3, r4, lsl #30
    72a0:	141b1600 	ldrne	r1, [fp], #-1536	; 0xfffffa00
    72a4:	0d010000 	stceq	0, cr0, [r1, #-0]
    72a8:	00019b07 	andeq	r9, r1, r7, lsl #22
    72ac:	03050100 	movweq	r0, #20736	; 0x5100
    72b0:	20000070 	andcs	r0, r0, r0, ror r0
    72b4:	15630117 	strbne	r0, [r3, #-279]!	; 0xfffffee9
    72b8:	23010000 	movwcs	r0, #4096	; 0x1000
    72bc:	19b00101 	ldmibne	r0!, {r0, r8}
    72c0:	1acc0000 	bne	ff3072c8 <_estack+0xdf3022c8>
    72c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    72c8:	0000e518 	andeq	lr, r0, r8, lsl r5
    72cc:	01230100 			; <UNDEFINED> instruction: 0x01230100
    72d0:	0000008f 	andeq	r0, r0, pc, lsl #1
    72d4:	000024e4 	andeq	r2, r0, r4, ror #9
    72d8:	000f9419 	andeq	r9, pc, r9, lsl r4	; <UNPREDICTABLE>
    72dc:	01230100 			; <UNDEFINED> instruction: 0x01230100
    72e0:	000000ce 	andeq	r0, r0, lr, asr #1
    72e4:	00002502 	andeq	r2, r0, r2, lsl #10
    72e8:	000cb81a 	andeq	fp, ip, sl, lsl r8
    72ec:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    72f0:	28010072 	stmdacs	r1, {r1, r4, r5, r6}
    72f4:	00019b0f 	andeq	r9, r1, pc, lsl #22
    72f8:	78030500 	stmdavc	r3, {r8, sl}
    72fc:	1b200000 	blne	807304 <__ccfg+0x7e735c>
    7300:	006e656c 	rsbeq	r6, lr, ip, ror #10
    7304:	810d2901 	tsthi	sp, r1, lsl #18
    7308:	05000000 	streq	r0, [r0, #-0]
    730c:	00007403 	andeq	r7, r0, r3, lsl #8
    7310:	15461920 	strbne	r1, [r6, #-2336]	; 0xfffff6e0
    7314:	2a010000 	bcs	4731c <__ccfg+0x27374>
    7318:	00008106 	andeq	r8, r0, r6, lsl #2
    731c:	00255800 	eoreq	r5, r5, r0, lsl #16
    7320:	00000000 	andeq	r0, r0, r0
    7324:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7328:	216c0003 	cmncs	ip, r3
    732c:	01040000 	mrseq	r0, (UNDEF: 4)
    7330:	00000157 	andeq	r0, r0, r7, asr r1
    7334:	0015b10c 	andseq	fp, r5, ip, lsl #2
    7338:	0003a800 	andeq	sl, r3, r0, lsl #16
    733c:	000d6000 	andeq	r6, sp, r0
    7340:	00000000 	andeq	r0, r0, r0
    7344:	00519c00 	subseq	r9, r1, r0, lsl #24
    7348:	06010200 	streq	r0, [r1], -r0, lsl #4
    734c:	0000039c 	muleq	r0, ip, r3
    7350:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    7354:	02000003 	andeq	r0, r0, #3
    7358:	00b00504 	adcseq	r0, r0, r4, lsl #10
    735c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7360:	0000ab05 	andeq	sl, r0, r5, lsl #22
    7364:	22510300 	subscs	r0, r1, #0, 6
    7368:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    736c:	00004d18 	andeq	r4, r0, r8, lsl sp
    7370:	08010200 	stmdaeq	r1, {r9}
    7374:	0000039a 	muleq	r0, sl, r3
    7378:	00213f03 	eoreq	r3, r1, r3, lsl #30
    737c:	19310200 	ldmdbne	r1!, {r9}
    7380:	00000060 	andeq	r0, r0, r0, rrx
    7384:	58070202 	stmdapl	r7, {r1, r9}
    7388:	03000002 	movweq	r0, #2
    738c:	00001808 	andeq	r1, r0, r8, lsl #16
    7390:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7394:	02000000 	andeq	r0, r0, #0
    7398:	00850704 	addeq	r0, r5, r4, lsl #14
    739c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    73a0:	00008007 	andeq	r8, r0, r7
    73a4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    73a8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    73ac:	8a070402 	bhi	1c83bc <__ccfg+0x1a8414>
    73b0:	03000000 	movweq	r0, #0
    73b4:	00000b9b 	muleq	r0, fp, fp
    73b8:	9b1b2803 	blls	6d13cc <__ccfg+0x6b1424>
    73bc:	05000000 	streq	r0, [r0, #-0]
    73c0:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    73c4:	b3000904 	movwlt	r0, #2308	; 0x904
    73c8:	06000000 	streq	r0, [r0], -r0
    73cc:	00000c51 	andeq	r0, r0, r1, asr ip
    73d0:	000000b3 	strheq	r0, [r0], -r3
    73d4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    73d8:	0ab30304 	beq	fecc7ff0 <_estack+0xdecc2ff0>
    73dc:	63030000 	movwvs	r0, #12288	; 0x3000
    73e0:	00008f18 	andeq	r8, r0, r8, lsl pc
    73e4:	16150300 	ldrne	r0, [r5], -r0, lsl #6
    73e8:	27040000 	strcs	r0, [r4, -r0]
    73ec:	00005412 	andeq	r5, r0, r2, lsl r4
    73f0:	00c10800 	sbceq	r0, r1, r0, lsl #16
    73f4:	0d030000 	stceq	0, cr0, [r3, #-0]
    73f8:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    73fc:	0041122b 	subeq	r1, r1, fp, lsr #4
    7400:	d2090000 	andle	r0, r9, #0
    7404:	03000000 	movweq	r0, #0
    7408:	00001666 	andeq	r1, r0, r6, ror #12
    740c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7410:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7414:	000000e3 	andeq	r0, r0, r3, ror #1
    7418:	00028b03 	andeq	r8, r2, r3, lsl #22
    741c:	122d0400 	eorne	r0, sp, #0, 8
    7420:	00000067 	andeq	r0, r0, r7, rrx
    7424:	0007bc03 	andeq	fp, r7, r3, lsl #24
    7428:	102e0400 	eorne	r0, lr, r0, lsl #8
    742c:	0000010c 	andeq	r0, r0, ip, lsl #2
    7430:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    7434:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    7438:	a0093204 	andge	r3, r9, r4, lsl #4
    743c:	0c000001 	stceq	0, cr0, [r0], {1}
    7440:	000002a6 	andeq	r0, r0, r6, lsr #5
    7444:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    7448:	01000000 	mrseq	r0, (UNDEF: 0)
    744c:	0c000701 	stceq	7, cr0, [r0], {1}
    7450:	000000a4 	andeq	r0, r0, r4, lsr #1
    7454:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    7458:	01000000 	mrseq	r0, (UNDEF: 0)
    745c:	0c000601 	stceq	6, cr0, [r0], {1}
    7460:	00000274 	andeq	r0, r0, r4, ror r2
    7464:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    7468:	01000000 	mrseq	r0, (UNDEF: 0)
    746c:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    7470:	00000432 	andeq	r0, r0, r2, lsr r4
    7474:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    7478:	01000000 	mrseq	r0, (UNDEF: 0)
    747c:	0c000401 	cfstrseq	mvf0, [r0], {1}
    7480:	0000042b 	andeq	r0, r0, fp, lsr #8
    7484:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    7488:	01000000 	mrseq	r0, (UNDEF: 0)
    748c:	0d000004 	stceq	0, cr0, [r0, #-16]
    7490:	0000041c 	andeq	r0, r0, ip, lsl r4
    7494:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    7498:	01000000 	mrseq	r0, (UNDEF: 0)
    749c:	00004c0d 	andeq	r4, r0, sp, lsl #24
    74a0:	033c0400 	teqeq	ip, #0, 8
    74a4:	000000d2 	ldrdeq	r0, [r0], -r2
    74a8:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    74ac:	3d040000 	stccc	0, cr0, [r4, #-0]
    74b0:	0000d203 	andeq	sp, r0, r3, lsl #4
    74b4:	460d0300 	strmi	r0, [sp], -r0, lsl #6
    74b8:	04000001 	streq	r0, [r0], #-1
    74bc:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    74c0:	00040000 	andeq	r0, r4, r0
    74c4:	00045b03 	andeq	r5, r4, r3, lsl #22
    74c8:	03410400 	movteq	r0, #5120	; 0x1400
    74cc:	00000112 	andeq	r0, r0, r2, lsl r1
    74d0:	0001a009 	andeq	sl, r1, r9
    74d4:	029a0e00 	addseq	r0, sl, #0, 28
    74d8:	43040000 	movwmi	r0, #16384	; 0x4000
    74dc:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    74e0:	0e010100 	adfeqs	f0, f1, f0
    74e4:	00000306 	andeq	r0, r0, r6, lsl #6
    74e8:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    74ec:	01000001 	tsteq	r0, r1
    74f0:	d3040a01 	movwle	r0, #18945	; 0x4a01
    74f4:	02000001 	andeq	r0, r0, #1
    74f8:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
    74fc:	d3080000 	movwle	r0, #32768	; 0x8000
    7500:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7504:	00000314 	andeq	r0, r0, r4, lsl r3
    7508:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    750c:	01000001 	tsteq	r0, r1
    7510:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    7514:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    7518:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    751c:	05000002 	streq	r0, [r0, #-2]
    7520:	00670b90 	mlseq	r7, r0, fp, r0
    7524:	0d000000 	stceq	0, cr0, [r0, #-0]
    7528:	00000647 	andeq	r0, r0, r7, asr #12
    752c:	c1089105 	tstgt	r8, r5, lsl #2
    7530:	04000000 	streq	r0, [r0], #-0
    7534:	0004a80d 	andeq	sl, r4, sp, lsl #16
    7538:	10920500 	addsne	r0, r2, r0, lsl #10
    753c:	000000de 	ldrdeq	r0, [r0], -lr
    7540:	39030006 	stmdbcc	r3, {r1, r2}
    7544:	05000004 	streq	r0, [r0, #-4]
    7548:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    754c:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    7550:	35000002 	strcc	r0, [r0, #-2]
    7554:	10000002 	andne	r0, r0, r2
    7558:	00420e00 	subeq	r0, r2, r0, lsl #28
    755c:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7560:	00022a0f 	andeq	r2, r2, pc, lsl #20
    7564:	0b010100 	bleq	4796c <__ccfg+0x279c4>
    7568:	09910601 	ldmibeq	r1, {r0, r9, sl}
    756c:	0000026d 	andeq	r0, r0, sp, ror #4
    7570:	00049b0c 	andeq	r9, r4, ip, lsl #22
    7574:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7578:	000000d2 	ldrdeq	r0, [r0], -r2
    757c:	00010701 	andeq	r0, r1, r1, lsl #14
    7580:	00003d0c 	andeq	r3, r0, ip, lsl #26
    7584:	03940600 	orrseq	r0, r4, #0, 12
    7588:	000000d2 	ldrdeq	r0, [r0], -r2
    758c:	00000101 	andeq	r0, r0, r1, lsl #2
    7590:	026b0300 	rsbeq	r0, fp, #0, 6
    7594:	96060000 	strls	r0, [r6], -r0
    7598:	00024303 	andeq	r4, r2, r3, lsl #6
    759c:	026d0800 	rsbeq	r0, sp, #0, 16
    75a0:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    75a4:	89000002 	stmdbhi	r0, {r1}
    75a8:	10000002 	andne	r0, r0, r2
    75ac:	027e0800 	rsbseq	r0, lr, #0, 16
    75b0:	d00e0000 	andle	r0, lr, r0
    75b4:	06000002 	streq	r0, [r0], -r2
    75b8:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    75bc:	01010000 	mrseq	r0, (UNDEF: 1)
    75c0:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    75c4:	0002a700 	andeq	sl, r2, r0, lsl #14
    75c8:	08001000 	stmdaeq	r0, {ip}
    75cc:	0000029c 	muleq	r0, ip, r2
    75d0:	00038c0e 	andeq	r8, r3, lr, lsl #24
    75d4:	13060700 	movwne	r0, #26368	; 0x6700
    75d8:	000002a7 	andeq	r0, r0, r7, lsr #5
    75dc:	260e0101 	strcs	r0, [lr], -r1, lsl #2
    75e0:	05000001 	streq	r0, [r0, #-1]
    75e4:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    75e8:	01010000 	mrseq	r0, (UNDEF: 1)
    75ec:	0004b511 	andeq	fp, r4, r1, lsl r5
    75f0:	016e0800 	cmneq	lr, r0, lsl #16
    75f4:	0002d510 	andeq	sp, r2, r0, lsl r5
    75f8:	db040a00 	blle	109e00 <__ccfg+0xe9e58>
    75fc:	12000002 	andne	r0, r0, #2
    7600:	0002e701 	andeq	lr, r2, r1, lsl #14
    7604:	00c11300 	sbceq	r1, r1, r0, lsl #6
    7608:	0f000000 	svceq	0x00000000
    760c:	000001da 	ldrdeq	r0, [r0], -sl
    7610:	000002f2 	strdeq	r0, [r0], -r2
    7614:	e7080010 	smlad	r8, r0, r0, r0
    7618:	14000002 	strne	r0, [r0], #-2
    761c:	0000046b 	andeq	r0, r0, fp, ror #8
    7620:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7624:	000002f2 	strdeq	r0, [r0], -r2
    7628:	84140101 	ldrhi	r0, [r4], #-257	; 0xfffffeff
    762c:	08000003 	stmdaeq	r0, {r0, r1}
    7630:	ef140182 	svc	0x00140182
    7634:	01000000 	mrseq	r0, (UNDEF: 0)
    7638:	04a01401 	strteq	r1, [r0], #1025	; 0x401
    763c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7640:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    7644:	01010000 	mrseq	r0, (UNDEF: 1)
    7648:	03080815 	movweq	r0, #34837	; 0x8815
    764c:	034b0903 	movteq	r0, #47363	; 0xb903
    7650:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
    7654:	08000022 	stmdaeq	r0, {r1, r5}
    7658:	c1070307 	tstgt	r7, r7, lsl #6
    765c:	00000000 	andeq	r0, r0, r0
    7660:	00059916 	andeq	r9, r5, r6, lsl r9
    7664:	03080800 	movweq	r0, #34816	; 0x8800
    7668:	0000f408 	andeq	pc, r0, r8, lsl #8
    766c:	11000400 	tstne	r0, r0, lsl #8
    7670:	0000024b 	andeq	r0, r0, fp, asr #4
    7674:	03030908 	movweq	r0, #14600	; 0x3908
    7678:	00000324 	andeq	r0, r0, r4, lsr #6
    767c:	0004d217 	andeq	sp, r4, r7, lsl r2
    7680:	0b083000 	bleq	213688 <__ccfg+0x1f36e0>
    7684:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    7688:	bd160000 	ldclt	0, cr0, [r6, #-0]
    768c:	08000004 	stmdaeq	r0, {r2}
    7690:	c1080314 	tstgt	r8, r4, lsl r3
    7694:	00000000 	andeq	r0, r0, r0
    7698:	0002b716 	andeq	fp, r2, r6, lsl r7
    769c:	03150800 	tsteq	r5, #0, 16
    76a0:	0000c108 	andeq	ip, r0, r8, lsl #2
    76a4:	b8160200 	ldmdalt	r6, {r9}
    76a8:	08000004 	stmdaeq	r0, {r2}
    76ac:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    76b0:	04000002 	streq	r0, [r0], #-2
    76b4:	000f9416 	andeq	r9, pc, r6, lsl r4	; <UNPREDICTABLE>
    76b8:	03170800 	tsteq	r7, #0, 16
    76bc:	0000f409 	andeq	pc, r0, r9, lsl #8
    76c0:	64160800 	ldrvs	r0, [r6], #-2048	; 0xfffff800
    76c4:	08000004 	stmdaeq	r0, {r2}
    76c8:	bb0f0318 	bllt	3c8330 <__ccfg+0x3a8388>
    76cc:	0c000003 	stceq	0, cr0, [r0], {3}
    76d0:	0002b216 	andeq	fp, r2, r6, lsl r2
    76d4:	03190800 	tsteq	r9, #0, 16
    76d8:	0003cb15 	andeq	ip, r3, r5, lsl fp
    76dc:	0f002c00 	svceq	0x00002c00
    76e0:	0000034b 	andeq	r0, r0, fp, asr #6
    76e4:	000003cb 	andeq	r0, r0, fp, asr #7
    76e8:	00008818 	andeq	r8, r0, r8, lsl r8
    76ec:	0a000300 	beq	82f4 <__exidx_end+0x53ec>
    76f0:	00035804 	andeq	r5, r3, r4, lsl #16
    76f4:	04dd1100 	ldrbeq	r1, [sp], #256	; 0x100
    76f8:	1c080000 	stcne	0, cr0, [r8], {-0}
    76fc:	03581b03 	cmpeq	r8, #3072	; 0xc00
    7700:	7a140000 	bvc	507708 <__ccfg+0x4e7760>
    7704:	08000003 	stmdaeq	r0, {r0, r1}
    7708:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    770c:	01000003 	tsteq	r0, r3
    7710:	d1040a01 	tstle	r4, r1, lsl #20
    7714:	19000003 	stmdbne	r0, {r0, r1}
    7718:	00160701 	andseq	r0, r6, r1, lsl #14
    771c:	07910100 	ldreq	r0, [r1, r0, lsl #2]
    7720:	0001cd01 	andeq	ip, r1, r1, lsl #26
    7724:	001d1c00 	andseq	r1, sp, r0, lsl #24
    7728:	001d6c00 	andseq	r6, sp, r0, lsl #24
    772c:	689c0100 	ldmvs	ip, {r8}
    7730:	1a000004 	bne	7748 <__exidx_end+0x4840>
    7734:	00736572 	rsbseq	r6, r3, r2, ror r5
    7738:	cd149101 	ldfgtd	f1, [r4, #-4]
    773c:	76000001 	strvc	r0, [r0], -r1
    7740:	1a000025 	bne	77dc <__exidx_end+0x48d4>
    7744:	01006d66 	tsteq	r0, r6, ror #26
    7748:	04682591 	strbteq	r2, [r8], #-1425	; 0xfffffa6f
    774c:	25c00000 	strbcs	r0, [r0]
    7750:	611a0000 	tstvs	sl, r0
    7754:	91010071 	tstls	r1, r1, ror r0
    7758:	0000b531 	andeq	fp, r0, r1, lsr r5
    775c:	0025ff00 	eoreq	pc, r5, r0, lsl #30
    7760:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    7764:	9301006c 	movwls	r0, #4204	; 0x106c
    7768:	0000c107 	andeq	ip, r0, r7, lsl #2
    776c:	00263300 	eoreq	r3, r6, r0, lsl #6
    7770:	00641b00 	rsbeq	r1, r4, r0, lsl #22
    7774:	c10c9301 	tstgt	ip, r1, lsl #6
    7778:	51000000 	mrspl	r0, (UNDEF: 0)
    777c:	1c000026 	stcne	0, cr0, [r0], {38}	; 0x26
    7780:	000015ef 	andeq	r1, r0, pc, ror #11
    7784:	46019e01 	strmi	r9, [r1], -r1, lsl #28
    7788:	0000001d 	andeq	r0, r0, sp, lsl r0
    778c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    7790:	011d0000 	tsteq	sp, r0
    7794:	000015fa 	strdeq	r1, [r0], -sl
    7798:	01060801 	tsteq	r6, r1, lsl #16
    779c:	000000c1 	andeq	r0, r0, r1, asr #1
    77a0:	00001aec 	andeq	r1, r0, ip, ror #21
    77a4:	00001d1c 	andeq	r1, r0, ip, lsl sp
    77a8:	721a9c01 	andsvc	r9, sl, #256	; 0x100
    77ac:	01007365 	tsteq	r0, r5, ror #6
    77b0:	01cd1a08 	biceq	r1, sp, r8, lsl #20
    77b4:	26640000 	strbtcs	r0, [r4], -r0
    77b8:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    77bc:	24080100 	strcs	r0, [r8], #-256	; 0xffffff00
    77c0:	000000c1 	andeq	r0, r0, r1, asr #1
    77c4:	00002677 	andeq	r2, r0, r7, ror r6
    77c8:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    77cc:	68330801 	ldmdavs	r3!, {r0, fp}
    77d0:	8a000004 	bhi	77e8 <__exidx_end+0x48e0>
    77d4:	1a000026 	bne	7874 <__exidx_end+0x496c>
    77d8:	01007061 	tsteq	r0, r1, rrx
    77dc:	00b53f08 	adcseq	r3, r5, r8, lsl #30
    77e0:	26b30000 	ldrtcs	r0, [r3], r0
    77e4:	631b0000 	tstvs	fp, #0
    77e8:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    77ec:	000001d3 	ldrdeq	r0, [r0], -r3
    77f0:	00002755 	andeq	r2, r0, r5, asr r7
    77f4:	0100641e 	tsteq	r0, lr, lsl r4
    77f8:	00c1070b 	sbceq	r0, r1, fp, lsl #14
    77fc:	91040000 	mrsls	r0, (UNDEF: 4)
    7800:	1f062354 	svcne	0x00062354
    7804:	000015f5 	strdeq	r1, [r0], -r5
    7808:	01070d01 	tsteq	r7, r1, lsl #26
    780c:	00001acc 	andeq	r1, r0, ip, asr #21
    7810:	00001aec 	andeq	r1, r0, ip, ror #21
    7814:	7c059c01 	stcvc	12, cr9, [r5], {1}
    7818:	06082300 	streq	r2, [r8], -r0, lsl #6
    781c:	00000509 	andeq	r0, r0, r9, lsl #10
    7820:	01006320 	tsteq	r0, r0, lsr #6
    7824:	00c1120d 	sbceq	r1, r1, sp, lsl #4
    7828:	50010000 	andpl	r0, r1, r0
    782c:	6f452100 	svcvs	0x00452100
    7830:	8801006c 	stmdahi	r1, {r2, r3, r5, r6}
    7834:	001b2601 	andseq	r2, fp, r1, lsl #12
    7838:	65522100 	ldrbvs	r2, [r2, #-256]	; 0xffffff00
    783c:	8b010074 	blhi	47a14 <__ccfg+0x27a6c>
    7840:	001b8801 	andseq	r8, fp, r1, lsl #16
    7844:	0d102200 	lfmeq	f2, 4, [r0, #-0]
    7848:	05450000 	strbeq	r0, [r5, #-0]
    784c:	76230000 	strtvc	r0, [r3], -r0
    7850:	01006c61 	tsteq	r0, r1, ror #24
    7854:	00c10a3a 	sbceq	r0, r1, sl, lsr sl
    7858:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    785c:	133a0100 	teqne	sl, #0, 2
    7860:	00000081 	andeq	r0, r0, r1, lsl #1
    7864:	0000283b 	andeq	r2, r0, fp, lsr r8
    7868:	0ce82200 	sfmeq	f2, 2, [r8]
    786c:	056d0000 	strbeq	r0, [sp, #-0]!
    7870:	761b0000 	ldrvc	r0, [fp], -r0
    7874:	01006c61 	tsteq	r0, r1, ror #24
    7878:	00c10a46 	sbceq	r0, r1, r6, asr #20
    787c:	284e0000 	stmdacs	lr, {}^	; <UNPREDICTABLE>
    7880:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    7884:	0f460100 	svceq	0x00460100
    7888:	000000c1 	andeq	r0, r0, r1, asr #1
    788c:	00002877 	andeq	r2, r0, r7, ror r8
    7890:	0d482200 	sfmeq	f2, 2, [r8, #-0]
    7894:	05950000 	ldreq	r0, [r5]
    7898:	761b0000 	ldrvc	r0, [fp], -r0
    789c:	01006c61 	tsteq	r0, r1, ror #24
    78a0:	00e30c55 	rsceq	r0, r3, r5, asr ip
    78a4:	28a00000 	stmiacs	r0!, {}	; <UNPREDICTABLE>
    78a8:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    78ac:	11550100 	cmpne	r5, r0, lsl #2
    78b0:	000000e3 	andeq	r0, r0, r3, ror #1
    78b4:	000028b3 			; <UNDEFINED> instruction: 0x000028b3
    78b8:	1caa2400 	cfstrsne	mvf2, [sl]
    78bc:	1cd40000 	ldclne	0, cr0, [r4], {0}
    78c0:	05bf0000 	ldreq	r0, [pc, #0]!	; 78c8 <__exidx_end+0x49c0>
    78c4:	761e0000 	ldrvc	r0, [lr], -r0
    78c8:	01006c61 	tsteq	r0, r1, ror #24
    78cc:	00e30c60 	rsceq	r0, r3, r0, ror #24
    78d0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    78d4:	0100691b 	tsteq	r0, fp, lsl r9
    78d8:	00810a61 	addeq	r0, r1, r1, ror #20
    78dc:	28dc0000 	ldmcs	ip, {}^	; <UNPREDICTABLE>
    78e0:	22000000 	andcs	r0, r0, #0
    78e4:	00000d30 	andeq	r0, r0, r0, lsr sp
    78e8:	000005d9 	ldrdeq	r0, [r0], -r9
    78ec:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    78f0:	0a710100 	beq	1c47cf8 <__ccfg+0x1c27d50>
    78f4:	000000c1 	andeq	r0, r0, r1, asr #1
    78f8:	000028ef 	andeq	r2, r0, pc, ror #17
    78fc:	1cf22500 	cfldr64ne	mvdx2, [r2]
    7900:	1d0e0000 	stcne	0, cr0, [lr, #-0]
    7904:	731b0000 	tstvc	fp, #0
    7908:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    790c:	0001cd0b 	andeq	ip, r1, fp, lsl #26
    7910:	00290f00 	eoreq	r0, r9, r0, lsl #30
    7914:	00000000 	andeq	r0, r0, r0
    7918:	0000058f 	andeq	r0, r0, pc, lsl #11
    791c:	237e0003 	cmncs	lr, #3
    7920:	01040000 	mrseq	r0, (UNDEF: 4)
    7924:	00000157 	andeq	r0, r0, r7, asr r1
    7928:	00161a0c 	andseq	r1, r6, ip, lsl #20
    792c:	0003a800 	andeq	sl, r3, r0, lsl #16
    7930:	000e0800 	andeq	r0, lr, r0, lsl #16
    7934:	00000000 	andeq	r0, r0, r0
    7938:	00555d00 	subseq	r5, r5, r0, lsl #26
    793c:	06010200 	streq	r0, [r1], -r0, lsl #4
    7940:	0000039c 	muleq	r0, ip, r3
    7944:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    7948:	02000003 	andeq	r0, r0, #3
    794c:	00b00504 	adcseq	r0, r0, r4, lsl #10
    7950:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7954:	0000ab05 	andeq	sl, r0, r5, lsl #22
    7958:	22510300 	subscs	r0, r1, #0, 6
    795c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7960:	00004d18 	andeq	r4, r0, r8, lsl sp
    7964:	08010200 	stmdaeq	r1, {r9}
    7968:	0000039a 	muleq	r0, sl, r3
    796c:	00213f03 	eoreq	r3, r1, r3, lsl #30
    7970:	19310200 	ldmdbne	r1!, {r9}
    7974:	00000060 	andeq	r0, r0, r0, rrx
    7978:	58070202 	stmdapl	r7, {r1, r9}
    797c:	03000002 	movweq	r0, #2
    7980:	00001808 	andeq	r1, r0, r8, lsl #16
    7984:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7988:	02000000 	andeq	r0, r0, #0
    798c:	00850704 	addeq	r0, r5, r4, lsl #14
    7990:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7994:	00008007 	andeq	r8, r0, r7
    7998:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    799c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    79a0:	8a070402 	bhi	1c89b0 <__ccfg+0x1a8a08>
    79a4:	03000000 	movweq	r0, #0
    79a8:	00000b9b 	muleq	r0, fp, fp
    79ac:	9b1b2803 	blls	6d19c0 <__ccfg+0x6b1a18>
    79b0:	05000000 	streq	r0, [r0, #-0]
    79b4:	00000ab1 			; <UNDEFINED> instruction: 0x00000ab1
    79b8:	b3000904 	movwlt	r0, #2308	; 0x904
    79bc:	06000000 	streq	r0, [r0], -r0
    79c0:	00000c51 	andeq	r0, r0, r1, asr ip
    79c4:	000000b3 	strheq	r0, [r0], -r3
    79c8:	07000100 	streq	r0, [r0, -r0, lsl #2]
    79cc:	0ab30304 	beq	fecc85e4 <_estack+0xdecc35e4>
    79d0:	63030000 	movwvs	r0, #12288	; 0x3000
    79d4:	00008f18 	andeq	r8, r0, r8, lsl pc
    79d8:	04230300 	strteq	r0, [r3], #-768	; 0xfffffd00
    79dc:	26040000 	strcs	r0, [r4], -r0
    79e0:	00004112 	andeq	r4, r0, r2, lsl r1
    79e4:	16150300 	ldrne	r0, [r5], -r0, lsl #6
    79e8:	27040000 	strcs	r0, [r4, -r0]
    79ec:	00005412 	andeq	r5, r0, r2, lsl r4
    79f0:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    79f4:	0d030000 	stceq	0, cr0, [r3, #-0]
    79f8:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    79fc:	0041122b 	subeq	r1, r1, fp, lsr #4
    7a00:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    7a04:	03000000 	movweq	r0, #0
    7a08:	00001666 	andeq	r1, r0, r6, ror #12
    7a0c:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    7a10:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    7a14:	000000ef 	andeq	r0, r0, pc, ror #1
    7a18:	00028b03 	andeq	r8, r2, r3, lsl #22
    7a1c:	122d0400 	eorne	r0, sp, #0, 8
    7a20:	00000067 	andeq	r0, r0, r7, rrx
    7a24:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    7a28:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    7a2c:	a0093204 	andge	r3, r9, r4, lsl #4
    7a30:	0c000001 	stceq	0, cr0, [r0], {1}
    7a34:	000002a6 	andeq	r0, r0, r6, lsr #5
    7a38:	de073404 	cdple	4, 0, cr3, cr7, cr4, {0}
    7a3c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a40:	0c000701 	stceq	7, cr0, [r0], {1}
    7a44:	000000a4 	andeq	r0, r0, r4, lsr #1
    7a48:	de033504 	cfsh32le	mvfx3, mvfx3, #4
    7a4c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a50:	0c000601 	stceq	6, cr0, [r0], {1}
    7a54:	00000274 	andeq	r0, r0, r4, ror r2
    7a58:	de033604 	cfmadd32le	mvax0, mvfx3, mvfx3, mvfx4
    7a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a60:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    7a64:	00000432 	andeq	r0, r0, r2, lsr r4
    7a68:	de033704 	cdple	7, 0, cr3, cr3, cr4, {0}
    7a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a70:	0c000401 	cfstrseq	mvf0, [r0], {1}
    7a74:	0000042b 	andeq	r0, r0, fp, lsr #8
    7a78:	de033804 	cdple	8, 0, cr3, cr3, cr4, {0}
    7a7c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a80:	0d000004 	stceq	0, cr0, [r0, #-16]
    7a84:	0000041c 	andeq	r0, r0, ip, lsl r4
    7a88:	de073a04 	vmlale.f32	s6, s14, s8
    7a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    7a90:	00004c0d 	andeq	r4, r0, sp, lsl #24
    7a94:	033c0400 	teqeq	ip, #0, 8
    7a98:	000000de 	ldrdeq	r0, [r0], -lr
    7a9c:	00790d02 	rsbseq	r0, r9, r2, lsl #26
    7aa0:	3d040000 	stccc	0, cr0, [r4, #-0]
    7aa4:	0000de03 	andeq	sp, r0, r3, lsl #28
    7aa8:	460d0300 	strmi	r0, [sp], -r0, lsl #6
    7aac:	04000001 	streq	r0, [r0], #-1
    7ab0:	00ef083f 	rsceq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    7ab4:	00040000 	andeq	r0, r4, r0
    7ab8:	00045b03 	andeq	r5, r4, r3, lsl #22
    7abc:	03410400 	movteq	r0, #5120	; 0x1400
    7ac0:	00000112 	andeq	r0, r0, r2, lsl r1
    7ac4:	0001a009 	andeq	sl, r1, r9
    7ac8:	029a0e00 	addseq	r0, sl, #0, 28
    7acc:	43040000 	movwmi	r0, #16384	; 0x4000
    7ad0:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    7ad4:	0e010100 	adfeqs	f0, f1, f0
    7ad8:	00000306 	andeq	r0, r0, r6, lsl #6
    7adc:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    7ae0:	01000001 	tsteq	r0, r1
    7ae4:	d3040a01 	movwle	r0, #18945	; 0x4a01
    7ae8:	02000001 	andeq	r0, r0, #1
    7aec:	03a30801 			; <UNDEFINED> instruction: 0x03a30801
    7af0:	d3080000 	movwle	r0, #32768	; 0x8000
    7af4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    7af8:	00000314 	andeq	r0, r0, r4, lsl r3
    7afc:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    7b00:	01000001 	tsteq	r0, r1
    7b04:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    7b08:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    7b0c:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    7b10:	05000002 	streq	r0, [r0, #-2]
    7b14:	00670b90 	mlseq	r7, r0, fp, r0
    7b18:	0d000000 	stceq	0, cr0, [r0, #-0]
    7b1c:	00000647 	andeq	r0, r0, r7, asr #12
    7b20:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    7b24:	04000000 	streq	r0, [r0], #-0
    7b28:	0004a80d 	andeq	sl, r4, sp, lsl #16
    7b2c:	10920500 	addsne	r0, r2, r0, lsl #10
    7b30:	000000ea 	andeq	r0, r0, sl, ror #1
    7b34:	39030006 	stmdbcc	r3, {r1, r2}
    7b38:	05000004 	streq	r0, [r0, #-4]
    7b3c:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    7b40:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    7b44:	35000002 	strcc	r0, [r0, #-2]
    7b48:	10000002 	andne	r0, r0, r2
    7b4c:	00420e00 	subeq	r0, r2, r0, lsl #28
    7b50:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7b54:	00022a0f 	andeq	r2, r2, pc, lsl #20
    7b58:	0b010100 	bleq	47f60 <__ccfg+0x27fb8>
    7b5c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    7b60:	0000026d 	andeq	r0, r0, sp, ror #4
    7b64:	00049b0c 	andeq	r9, r4, ip, lsl #22
    7b68:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7b6c:	000000de 	ldrdeq	r0, [r0], -lr
    7b70:	00010701 	andeq	r0, r1, r1, lsl #14
    7b74:	00003d0c 	andeq	r3, r0, ip, lsl #26
    7b78:	03940600 	orrseq	r0, r4, #0, 12
    7b7c:	000000de 	ldrdeq	r0, [r0], -lr
    7b80:	00000101 	andeq	r0, r0, r1, lsl #2
    7b84:	026b0300 	rsbeq	r0, fp, #0, 6
    7b88:	96060000 	strls	r0, [r6], -r0
    7b8c:	00024303 	andeq	r4, r2, r3, lsl #6
    7b90:	026d0800 	rsbeq	r0, sp, #0, 16
    7b94:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    7b98:	89000002 	stmdbhi	r0, {r1}
    7b9c:	10000002 	andne	r0, r0, r2
    7ba0:	027e0800 	rsbseq	r0, lr, #0, 16
    7ba4:	d00e0000 	andle	r0, lr, r0
    7ba8:	06000002 	streq	r0, [r0], -r2
    7bac:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    7bb0:	01010000 	mrseq	r0, (UNDEF: 1)
    7bb4:	0000d90f 	andeq	sp, r0, pc, lsl #18
    7bb8:	0002a700 	andeq	sl, r2, r0, lsl #14
    7bbc:	08001000 	stmdaeq	r0, {ip}
    7bc0:	0000029c 	muleq	r0, ip, r2
    7bc4:	00038c0e 	andeq	r8, r3, lr, lsl #24
    7bc8:	13060700 	movwne	r0, #26368	; 0x6700
    7bcc:	000002a7 	andeq	r0, r0, r7, lsr #5
    7bd0:	260e0101 	strcs	r0, [lr], -r1, lsl #2
    7bd4:	05000001 	streq	r0, [r0, #-1]
    7bd8:	00ef0ec3 	rsceq	r0, pc, r3, asr #29
    7bdc:	01010000 	mrseq	r0, (UNDEF: 1)
    7be0:	0004b511 	andeq	fp, r4, r1, lsl r5
    7be4:	016e0800 	cmneq	lr, r0, lsl #16
    7be8:	0002d510 	andeq	sp, r2, r0, lsl r5
    7bec:	db040a00 	blle	10a3f4 <__ccfg+0xea44c>
    7bf0:	12000002 	andne	r0, r0, #2
    7bf4:	0002e701 	andeq	lr, r2, r1, lsl #14
    7bf8:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    7bfc:	0f000000 	svceq	0x00000000
    7c00:	000001da 	ldrdeq	r0, [r0], -sl
    7c04:	000002f2 	strdeq	r0, [r0], -r2
    7c08:	e7080010 	smlad	r8, r0, r0, r0
    7c0c:	14000002 	strne	r0, [r0], #-2
    7c10:	0000046b 	andeq	r0, r0, fp, ror #8
    7c14:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7c18:	000002f2 	strdeq	r0, [r0], -r2
    7c1c:	84140101 	ldrhi	r0, [r4], #-257	; 0xfffffeff
    7c20:	08000003 	stmdaeq	r0, {r0, r1}
    7c24:	fb140182 	blx	508236 <__ccfg+0x4e828e>
    7c28:	01000000 	mrseq	r0, (UNDEF: 0)
    7c2c:	04a01401 	strteq	r1, [r0], #1025	; 0x401
    7c30:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7c34:	00ef0e02 	rsceq	r0, pc, r2, lsl #28
    7c38:	01010000 	mrseq	r0, (UNDEF: 1)
    7c3c:	03080815 	movweq	r0, #34837	; 0x8815
    7c40:	034b0903 	movteq	r0, #47363	; 0xb903
    7c44:	49160000 	ldmdbmi	r6, {}	; <UNPREDICTABLE>
    7c48:	08000022 	stmdaeq	r0, {r1, r5}
    7c4c:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    7c50:	00000000 	andeq	r0, r0, r0
    7c54:	00059916 	andeq	r9, r5, r6, lsl r9
    7c58:	03080800 	movweq	r0, #34816	; 0x8800
    7c5c:	00010008 	andeq	r0, r1, r8
    7c60:	11000400 	tstne	r0, r0, lsl #8
    7c64:	0000024b 	andeq	r0, r0, fp, asr #4
    7c68:	03030908 	movweq	r0, #14600	; 0x3908
    7c6c:	00000324 	andeq	r0, r0, r4, lsr #6
    7c70:	0004d217 	andeq	sp, r4, r7, lsl r2
    7c74:	0b083000 	bleq	213c7c <__ccfg+0x1f3cd4>
    7c78:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    7c7c:	bd160000 	ldclt	0, cr0, [r6, #-0]
    7c80:	08000004 	stmdaeq	r0, {r2}
    7c84:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    7c88:	00000000 	andeq	r0, r0, r0
    7c8c:	0002b716 	andeq	fp, r2, r6, lsl r7
    7c90:	03150800 	tsteq	r5, #0, 16
    7c94:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7c98:	b8160200 	ldmdalt	r6, {r9}
    7c9c:	08000004 	stmdaeq	r0, {r2}
    7ca0:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    7ca4:	04000002 	streq	r0, [r0], #-2
    7ca8:	000f9416 	andeq	r9, pc, r6, lsl r4	; <UNPREDICTABLE>
    7cac:	03170800 	tsteq	r7, #0, 16
    7cb0:	00010009 	andeq	r0, r1, r9
    7cb4:	64160800 	ldrvs	r0, [r6], #-2048	; 0xfffff800
    7cb8:	08000004 	stmdaeq	r0, {r2}
    7cbc:	bb0f0318 	bllt	3c8924 <__ccfg+0x3a897c>
    7cc0:	0c000003 	stceq	0, cr0, [r0], {3}
    7cc4:	0002b216 	andeq	fp, r2, r6, lsl r2
    7cc8:	03190800 	tsteq	r9, #0, 16
    7ccc:	0003cb15 	andeq	ip, r3, r5, lsl fp
    7cd0:	0f002c00 	svceq	0x00002c00
    7cd4:	0000034b 	andeq	r0, r0, fp, asr #6
    7cd8:	000003cb 	andeq	r0, r0, fp, asr #7
    7cdc:	00008818 	andeq	r8, r0, r8, lsl r8
    7ce0:	0a000300 	beq	88e8 <__exidx_end+0x59e0>
    7ce4:	00035804 	andeq	r5, r3, r4, lsl #16
    7ce8:	04dd1100 	ldrbeq	r1, [sp], #256	; 0x100
    7cec:	1c080000 	stcne	0, cr0, [r8], {-0}
    7cf0:	03581b03 	cmpeq	r8, #3072	; 0xc00
    7cf4:	7a140000 	bvc	507cfc <__ccfg+0x4e7d54>
    7cf8:	08000003 	stmdaeq	r0, {r0, r1}
    7cfc:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    7d00:	01000003 	tsteq	r0, r3
    7d04:	d1040a01 	tstle	r4, r1, lsl #20
    7d08:	19000003 	stmdbne	r0, {r0, r1}
    7d0c:	00165801 	andseq	r5, r6, r1, lsl #16
    7d10:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    7d14:	00008101 	andeq	r8, r0, r1, lsl #2
    7d18:	001d6c00 	andseq	r6, sp, r0, lsl #24
    7d1c:	0020fc00 	eoreq	pc, r0, r0, lsl #24
    7d20:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    7d24:	1a000005 	bne	7d40 <__exidx_end+0x4e38>
    7d28:	00667562 	rsbeq	r7, r6, r2, ror #10
    7d2c:	86180801 	ldrhi	r0, [r8], -r1, lsl #16
    7d30:	22000005 	andcs	r0, r0, #5
    7d34:	1a000029 	bne	7de0 <__exidx_end+0x4ed8>
    7d38:	00746d66 	rsbseq	r6, r4, r6, ror #26
    7d3c:	86290801 	strthi	r0, [r9], -r1, lsl #16
    7d40:	19000005 	stmdbne	r0, {r0, r2}
    7d44:	1a00002b 	bne	7df8 <__exidx_end+0x4ef0>
    7d48:	01007061 	tsteq	r0, r1, rrx
    7d4c:	00b53608 	adcseq	r3, r5, r8, lsl #12
    7d50:	2b4d0000 	blcs	1347d58 <__ccfg+0x1327db0>
    7d54:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
    7d58:	0a010063 	beq	47eec <__ccfg+0x27f44>
    7d5c:	00008106 	andeq	r8, r0, r6, lsl #2
    7d60:	002be600 	eoreq	lr, fp, r0, lsl #12
    7d64:	160d1c00 	strne	r1, [sp], -r0, lsl #24
    7d68:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    7d6c:	165e1c11 			; <UNDEFINED> instruction: 0x165e1c11
    7d70:	55010000 	strpl	r0, [r1, #-0]
    7d74:	1e2e1d16 	mcrne	13, 1, r1, cr14, cr6, {0}
    7d78:	1e9e0000 	cdpne	0, 9, cr0, cr14, cr0, {0}
    7d7c:	04880000 	streq	r0, [r8], #0
    7d80:	761e0000 	ldrvc	r0, [lr], -r0
    7d84:	01007061 	tsteq	r0, r1, rrx
    7d88:	010c114e 	tsteq	ip, lr, asr #2
    7d8c:	56010000 	strpl	r0, [r1], -r0
    7d90:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    7d94:	c1114e01 	tstgt	r1, r1, lsl #28
    7d98:	67000000 	strvs	r0, [r0, -r0]
    7d9c:	0000002c 	andeq	r0, r0, ip, lsr #32
    7da0:	001e9e1d 	andseq	r9, lr, sp, lsl lr
    7da4:	001ee600 	andseq	lr, lr, r0, lsl #12
    7da8:	0004a400 	andeq	sl, r4, r0, lsl #8
    7dac:	61761e00 	cmnvs	r6, r0, lsl #28
    7db0:	4f010070 	svcmi	0x00010070
    7db4:	00010c11 	andeq	r0, r1, r1, lsl ip
    7db8:	005e0100 	subseq	r0, lr, r0, lsl #2
    7dbc:	000db81f 	andeq	fp, sp, pc, lsl r8
    7dc0:	0004d500 	andeq	sp, r4, r0, lsl #10
    7dc4:	61761e00 	cmnvs	r6, r0, lsl #28
    7dc8:	50010070 	andpl	r0, r1, r0, ror r0
    7dcc:	00010c11 	andeq	r0, r1, r1, lsl ip
    7dd0:	205e0100 	subscs	r0, lr, r0, lsl #2
    7dd4:	01006364 	tsteq	r0, r4, ror #6
    7dd8:	00811150 	addeq	r1, r1, r0, asr r1
    7ddc:	631b0000 	tstvs	fp, #0
    7de0:	11500100 	cmpne	r0, r0, lsl #2
    7de4:	000001d3 	ldrdeq	r0, [r0], -r3
    7de8:	00002c85 	andeq	r2, r0, r5, lsl #25
    7dec:	0dd01f00 	ldcleq	15, cr1, [r0]
    7df0:	04fc0000 	ldrbteq	r0, [ip], #0
    7df4:	761e0000 	ldrvc	r0, [lr], -r0
    7df8:	01007061 	tsteq	r0, r1, rrx
    7dfc:	058c1655 	streq	r1, [ip, #1621]	; 0x655
    7e00:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7e04:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    7e08:	c1165501 	tstgt	r6, r1, lsl #10
    7e0c:	a3000000 	movwge	r0, #0
    7e10:	0000002c 	andeq	r0, r0, ip, lsr #32
    7e14:	000d801f 	andeq	r8, sp, pc, lsl r0
    7e18:	00051400 	andeq	r1, r5, r0, lsl #8
    7e1c:	61761e00 	cmnvs	r6, r0, lsl #28
    7e20:	56010070 			; <UNDEFINED> instruction: 0x56010070
    7e24:	00058c16 	andeq	r8, r5, r6, lsl ip
    7e28:	005e0100 	subseq	r0, lr, r0, lsl #2
    7e2c:	000de81f 	andeq	lr, sp, pc, lsl r8
    7e30:	00054500 	andeq	r4, r5, r0, lsl #10
    7e34:	61761e00 	cmnvs	r6, r0, lsl #28
    7e38:	57010070 	smlsdxpl	r1, r0, r0, r0
    7e3c:	00058c16 	andeq	r8, r5, r6, lsl ip
    7e40:	205e0100 	subscs	r0, lr, r0, lsl #2
    7e44:	01006364 	tsteq	r0, r4, ror #6
    7e48:	00811657 	addeq	r1, r1, r7, asr r6
    7e4c:	631b0000 	tstvs	fp, #0
    7e50:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    7e54:	000001d3 	ldrdeq	r0, [r0], -r3
    7e58:	00002cc1 	andeq	r2, r0, r1, asr #25
    7e5c:	20ae1d00 	adccs	r1, lr, r0, lsl #26
    7e60:	20c20000 	sbccs	r0, r2, r0
    7e64:	056f0000 	strbeq	r0, [pc, #-0]!	; 7e6c <__exidx_end+0x4f64>
    7e68:	631b0000 	tstvs	fp, #0
    7e6c:	095c0100 	ldmdbeq	ip, {r8}^
    7e70:	000001d3 	ldrdeq	r0, [r0], -r3
    7e74:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    7e78:	7061731e 	rsbvc	r7, r1, lr, lsl r3
    7e7c:	0d5c0100 	ldfeqe	f0, [ip, #-0]
    7e80:	000001cd 	andeq	r0, r0, sp, asr #3
    7e84:	21005601 	tstcs	r0, r1, lsl #12
    7e88:	00000d98 	muleq	r0, r8, sp
    7e8c:	7061731b 	rsbvc	r7, r1, fp, lsl r3
    7e90:	0a660100 	beq	1988298 <__ccfg+0x19682f0>
    7e94:	000001cd 	andeq	r0, r0, sp, asr #3
    7e98:	00002cf2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    7e9c:	040a0000 	streq	r0, [sl], #-0
    7ea0:	000001da 	ldrdeq	r0, [r0], -sl
    7ea4:	00ef040a 	rsceq	r0, pc, sl, lsl #8
    7ea8:	d5000000 	strle	r0, [r0, #-0]
    7eac:	04000000 	streq	r0, [r0], #-0
    7eb0:	00253a00 	eoreq	r3, r5, r0, lsl #20
    7eb4:	a5010400 	strge	r0, [r1, #-1024]	; 0xfffffc00
    7eb8:	01000016 	tsteq	r0, r6, lsl r0
    7ebc:	0000175e 	andeq	r1, r0, lr, asr r7
    7ec0:	0000179a 	muleq	r0, sl, r7
    7ec4:	00000e18 	andeq	r0, r0, r8, lsl lr
    7ec8:	00000000 	andeq	r0, r0, r0
    7ecc:	00005827 	andeq	r5, r0, r7, lsr #16
    7ed0:	00175502 	andseq	r5, r7, r2, lsl #10
    7ed4:	301b0200 	andscc	r0, fp, r0, lsl #4
    7ed8:	03000000 	movweq	r0, #0
    7edc:	039c0601 	orrseq	r0, ip, #1048576	; 0x100000
    7ee0:	01030000 	mrseq	r0, (UNDEF: 3)
    7ee4:	00039a08 	andeq	r9, r3, r8, lsl #20
    7ee8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    7eec:	000003f8 	strdeq	r0, [r0], -r8
    7ef0:	58070203 	stmdapl	r7, {r0, r1, r9}
    7ef4:	02000002 	andeq	r0, r0, #2
    7ef8:	0000169b 	muleq	r0, fp, r6
    7efc:	00573f02 	subseq	r3, r7, r2, lsl #30
    7f00:	04030000 	streq	r0, [r3], #-0
    7f04:	0000b005 	andeq	fp, r0, r5
    7f08:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7f0c:	00000085 	andeq	r0, r0, r5, lsl #1
    7f10:	ab050803 	blge	149f24 <__ccfg+0x129f7c>
    7f14:	03000000 	movweq	r0, #0
    7f18:	00800708 	addeq	r0, r0, r8, lsl #14
    7f1c:	04040000 	streq	r0, [r4], #-0
    7f20:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7f24:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7f28:	0000008a 	andeq	r0, r0, sl, lsl #1
    7f2c:	00175702 	andseq	r5, r7, r2, lsl #14
    7f30:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    7f34:	02000000 	andeq	r0, r0, #0
    7f38:	0000169d 	muleq	r0, sp, r6
    7f3c:	004c1f03 	subeq	r1, ip, r3, lsl #30
    7f40:	6c050000 	stcvs	0, cr0, [r5], {-0}
    7f44:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7f48:	00008caa 	andeq	r8, r0, sl, lsr #25
    7f4c:	0020fc00 	eoreq	pc, r0, r0, lsl #24
    7f50:	00003000 	andeq	r3, r0, r0
    7f54:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    7f58:	0000178f 	andeq	r1, r0, pc, lsl #15
    7f5c:	008c3e01 	addeq	r3, ip, r1, lsl #28
    7f60:	2d100000 	ldccs	0, cr0, [r0, #-0]
    7f64:	80060000 	andhi	r0, r6, r0
    7f68:	01000017 	tsteq	r0, r7, lsl r0
    7f6c:	00008c3f 	andeq	r8, r0, pc, lsr ip
    7f70:	002d2900 	eoreq	r2, sp, r0, lsl #18
    7f74:	168e0700 	strne	r0, [lr], r0, lsl #14
    7f78:	40010000 	andmi	r0, r1, r0
    7f7c:	00000081 	andeq	r0, r0, r1, lsl #1
    7f80:	00005101 	andeq	r5, r0, r1, lsl #2
    7f84:	00000143 	andeq	r0, r0, r3, asr #2
    7f88:	25a90004 	strcs	r0, [r9, #4]!
    7f8c:	01040000 	mrseq	r0, (UNDEF: 4)
    7f90:	000016a5 	andeq	r1, r0, r5, lsr #13
    7f94:	0018ab01 	andseq	sl, r8, r1, lsl #22
    7f98:	00179a00 	andseq	r9, r7, r0, lsl #20
    7f9c:	000e2800 	andeq	r2, lr, r0, lsl #16
    7fa0:	00000000 	andeq	r0, r0, r0
    7fa4:	00599200 	subseq	r9, r9, r0, lsl #4
    7fa8:	06010200 	streq	r0, [r1], -r0, lsl #4
    7fac:	0000039c 	muleq	r0, ip, r3
    7fb0:	9a080102 	bls	2083c0 <__ccfg+0x1e8418>
    7fb4:	02000003 	andeq	r0, r0, #3
    7fb8:	03f80502 	mvnseq	r0, #8388608	; 0x800000
    7fbc:	02020000 	andeq	r0, r2, #0
    7fc0:	00025807 	andeq	r5, r2, r7, lsl #16
    7fc4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7fc8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    7fcc:	00180603 	andseq	r0, r8, r3, lsl #12
    7fd0:	53410200 	movtpl	r0, #4608	; 0x1200
    7fd4:	02000000 	andeq	r0, r0, #0
    7fd8:	00850704 	addeq	r0, r5, r4, lsl #14
    7fdc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7fe0:	0000ab05 	andeq	sl, r0, r5, lsl #22
    7fe4:	18550300 	ldmdane	r5, {r8, r9}^
    7fe8:	5b020000 	blpl	87ff0 <__ccfg+0x68048>
    7fec:	0000006c 	andeq	r0, r0, ip, rrx
    7ff0:	80070802 	andhi	r0, r7, r2, lsl #16
    7ff4:	04000000 	streq	r0, [r0], #-0
    7ff8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7ffc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8000:	00008a07 	andeq	r8, r0, r7, lsl #20
    8004:	18080300 	stmdane	r8, {r8, r9}
    8008:	20030000 	andcs	r0, r3, r0
    800c:	00000048 	andeq	r0, r0, r8, asr #32
    8010:	00185703 	andseq	r5, r8, r3, lsl #14
    8014:	61260300 			; <UNDEFINED> instruction: 0x61260300
    8018:	05000000 	streq	r0, [r0, #-0]
    801c:	00001820 	andeq	r1, r0, r0, lsr #16
    8020:	81034504 	tsthi	r3, r4, lsl #10
    8024:	00000000 	andeq	r0, r0, r0
    8028:	20000000 	andcs	r0, r0, r0
    802c:	01000000 	mrseq	r0, (UNDEF: 0)
    8030:	0000dd9c 	muleq	r0, ip, sp
    8034:	18110600 	ldmdane	r1, {r9, sl}
    8038:	40010000 	andmi	r0, r1, r0
    803c:	00000081 	andeq	r0, r0, r1, lsl #1
    8040:	00002d5e 	andeq	r2, r0, lr, asr sp
    8044:	00186006 	andseq	r6, r8, r6
    8048:	81410100 	mrshi	r0, (UNDEF: 81)
    804c:	71000000 	mrsvc	r0, (UNDEF: 0)
    8050:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    8054:	00001843 	andeq	r1, r0, r3, asr #16
    8058:	00814201 	addeq	r4, r1, r1, lsl #4
    805c:	52010000 	andpl	r0, r1, #0
    8060:	18720500 	ldmdane	r2!, {r8, sl}^
    8064:	53040000 	movwpl	r0, #16384	; 0x4000
    8068:	00008c03 	andeq	r8, r0, r3, lsl #24
    806c:	00212c00 	eoreq	r2, r1, r0, lsl #24
    8070:	00001800 	andeq	r1, r0, r0, lsl #16
    8074:	2f9c0100 	svccs	0x009c0100
    8078:	08000001 	stmdaeq	r0, {r0}
    807c:	16590108 	ldrbne	r0, [r9], -r8, lsl #2
    8080:	09000001 	stmdbeq	r0, {r0}
    8084:	000017fa 	strdeq	r1, [r0], -sl
    8088:	008c5a01 	addeq	r5, ip, r1, lsl #20
    808c:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    8090:	01000018 	tsteq	r0, r8, lsl r0
    8094:	00012f5b 	andeq	r2, r1, fp, asr pc
    8098:	930a0000 	movwls	r0, #40960	; 0xa000
    809c:	01000018 	tsteq	r0, r8, lsl r0
    80a0:	0000f75c 	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
    80a4:	18430700 	stmdane	r3, {r8, r9, sl}^
    80a8:	5d010000 	stcpl	0, cr0, [r1, #-0]
    80ac:	00000081 	andeq	r0, r0, r1, lsl #1
    80b0:	0b005101 	bleq	1c4bc <__exidx_end+0x195b4>
    80b4:	00000081 	andeq	r0, r0, r1, lsl #1
    80b8:	0000013f 	andeq	r0, r0, pc, lsr r1
    80bc:	00013f0c 	andeq	r3, r1, ip, lsl #30
    80c0:	02000100 	andeq	r0, r0, #0, 2
    80c4:	18ca0704 	stmiane	sl, {r2, r8, r9, sl}^
    80c8:	36000000 	strcc	r0, [r0], -r0
    80cc:	04000001 	streq	r0, [r0], #-1
    80d0:	00265300 	eoreq	r5, r6, r0, lsl #6
    80d4:	a5010400 	strge	r0, [r1, #-1024]	; 0xfffffc00
    80d8:	01000016 	tsteq	r0, r6, lsl r0
    80dc:	00001926 	andeq	r1, r0, r6, lsr #18
    80e0:	0000179a 	muleq	r0, sl, r7
    80e4:	00000e40 	andeq	r0, r0, r0, asr #28
    80e8:	00000000 	andeq	r0, r0, r0
    80ec:	00005b3f 	andeq	r5, r0, pc, lsr fp
    80f0:	9c060102 	stflss	f0, [r6], {2}
    80f4:	02000003 	andeq	r0, r0, #3
    80f8:	039a0801 	orrseq	r0, sl, #65536	; 0x10000
    80fc:	02020000 	andeq	r0, r2, #0
    8100:	0003f805 	andeq	pc, r3, r5, lsl #16
    8104:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8108:	00000258 	andeq	r0, r0, r8, asr r2
    810c:	b0050402 	andlt	r0, r5, r2, lsl #8
    8110:	03000000 	movweq	r0, #0
    8114:	00001806 	andeq	r1, r0, r6, lsl #16
    8118:	00534102 	subseq	r4, r3, r2, lsl #2
    811c:	04020000 	streq	r0, [r2], #-0
    8120:	00008507 	andeq	r8, r0, r7, lsl #10
    8124:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8128:	000000ab 	andeq	r0, r0, fp, lsr #1
    812c:	80070802 	andhi	r0, r7, r2, lsl #16
    8130:	04000000 	streq	r0, [r0], #-0
    8134:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8138:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    813c:	00008a07 	andeq	r8, r0, r7, lsl #20
    8140:	18080300 	stmdane	r8, {r8, r9}
    8144:	20030000 	andcs	r0, r3, r0
    8148:	00000048 	andeq	r0, r0, r8, asr #32
    814c:	00190805 	andseq	r0, r9, r5, lsl #16
    8150:	766a0400 	strbtvc	r0, [sl], -r0, lsl #8
    8154:	44000000 	strmi	r0, [r0], #-0
    8158:	08000021 	stmdaeq	r0, {r0, r5}
    815c:	01000000 	mrseq	r0, (UNDEF: 0)
    8160:	0000a69c 	muleq	r0, ip, r6
    8164:	18f60600 	ldmne	r6!, {r9, sl}^
    8168:	77010000 	strvc	r0, [r1, -r0]
    816c:	00000076 	andeq	r0, r0, r6, ror r0
    8170:	19410500 	stmdbne	r1, {r8, sl}^
    8174:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    8178:	00000076 	andeq	r0, r0, r6, ror r0
    817c:	00000000 	andeq	r0, r0, r0
    8180:	00000006 	andeq	r0, r0, r6
    8184:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    8188:	f6060000 			; <UNDEFINED> instruction: 0xf6060000
    818c:	01000018 	tsteq	r0, r8, lsl r0
    8190:	000076c2 	andeq	r7, r0, r2, asr #13
    8194:	17050000 	strne	r0, [r5, -r0]
    8198:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    819c:	00007684 	andeq	r7, r0, r4, lsl #13
    81a0:	00214c00 	eoreq	r4, r1, r0, lsl #24
    81a4:	00000800 	andeq	r0, r0, r0, lsl #16
    81a8:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    81ac:	07000000 	streq	r0, [r0, -r0]
    81b0:	000018f6 	strdeq	r1, [r0], -r6
    81b4:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    81b8:	00000000 	andeq	r0, r0, r0
    81bc:	0018d308 	andseq	sp, r8, r8, lsl #6
    81c0:	015b0400 	cmpeq	fp, r0, lsl #8
    81c4:	00000076 	andeq	r0, r0, r6, ror r0
    81c8:	00000000 	andeq	r0, r0, r0
    81cc:	00000006 	andeq	r0, r0, r6
    81d0:	01189c01 	tsteq	r8, r1, lsl #24
    81d4:	f6070000 			; <UNDEFINED> instruction: 0xf6070000
    81d8:	01000018 	tsteq	r0, r8, lsl r0
    81dc:	0076015a 	rsbseq	r0, r6, sl, asr r1
    81e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    81e4:	000018e7 	andeq	r1, r0, r7, ror #17
    81e8:	00016c04 	andeq	r6, r1, r4, lsl #24
    81ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    81f0:	01000000 	mrseq	r0, (UNDEF: 0)
    81f4:	18fe0a9c 	ldmne	lr!, {r2, r3, r4, r7, r9, fp}^
    81f8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    81fc:	00007601 	andeq	r7, r0, r1, lsl #12
    8200:	00500100 	subseq	r0, r0, r0, lsl #2
    8204:	00020700 	andeq	r0, r2, r0, lsl #14
    8208:	03000400 	movweq	r0, #1024	; 0x400
    820c:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    8210:	0016a501 	andseq	sl, r6, r1, lsl #10
    8214:	1a0e0100 	bne	38861c <__ccfg+0x368674>
    8218:	179a0000 	ldrne	r0, [sl, r0]
    821c:	0e700000 	cdpeq	0, 7, cr0, cr0, cr0, {0}
    8220:	00000000 	andeq	r0, r0, r0
    8224:	5cdf0000 	ldclpl	0, cr0, [pc], {0}
    8228:	01020000 	mrseq	r0, (UNDEF: 2)
    822c:	00039c06 	andeq	r9, r3, r6, lsl #24
    8230:	08010200 	stmdaeq	r1, {r9}
    8234:	0000039a 	muleq	r0, sl, r3
    8238:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    823c:	02000003 	andeq	r0, r0, #3
    8240:	02580702 	subseq	r0, r8, #524288	; 0x80000
    8244:	04020000 	streq	r0, [r2], #-0
    8248:	0000b005 	andeq	fp, r0, r5
    824c:	18060300 	stmdane	r6, {r8, r9}
    8250:	41030000 	mrsmi	r0, (UNDEF: 3)
    8254:	00000053 	andeq	r0, r0, r3, asr r0
    8258:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    825c:	02000000 	andeq	r0, r0, #0
    8260:	00ab0508 	adceq	r0, fp, r8, lsl #10
    8264:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8268:	00008007 	andeq	r8, r0, r7
    826c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8270:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8274:	8a070402 	bhi	1c9284 <__ccfg+0x1a92dc>
    8278:	03000000 	movweq	r0, #0
    827c:	00001808 	andeq	r1, r0, r8, lsl #16
    8280:	00482004 	subeq	r2, r8, r4
    8284:	6b050000 	blvs	14828c <__ccfg+0x1282e4>
    8288:	0200001a 	andeq	r0, r0, #26
    828c:	06030330 			; <UNDEFINED> instruction: 0x06030330
    8290:	00001ad6 	ldrdeq	r1, [r0], -r6
    8294:	0501fd01 	streq	pc, [r1, #-3329]	; 0xfffff2ff
    8298:	00001a7e 	andeq	r1, r0, lr, ror sl
    829c:	01018201 	tsteq	r1, r1, lsl #4
    82a0:	00195907 	andseq	r5, r9, r7, lsl #18
    82a4:	010d0100 	mrseq	r0, (UNDEF: 29)
    82a8:	00002154 	andeq	r2, r0, r4, asr r1
    82ac:	000000d4 	ldrdeq	r0, [r0], -r4
    82b0:	016d9c01 	cmneq	sp, r1, lsl #24
    82b4:	59080000 	stmdbpl	r8, {}	; <UNPREDICTABLE>
    82b8:	0100001a 	tsteq	r0, sl, lsl r0
    82bc:	0076010d 	rsbseq	r0, r6, sp, lsl #2
    82c0:	2d840000 	stccs	0, cr0, [r4]
    82c4:	c5090000 	strgt	r0, [r9, #-0]
    82c8:	0100001a 	tsteq	r0, sl, lsl r0
    82cc:	0076010f 	rsbseq	r0, r6, pc, lsl #2
    82d0:	2db00000 	ldccs	0, cr0, [r0]
    82d4:	52090000 	andpl	r0, r9, #0
    82d8:	01000019 	tsteq	r0, r9, lsl r0
    82dc:	00760110 	rsbseq	r0, r6, r0, lsl r1
    82e0:	2dc30000 	stclcs	0, cr0, [r3]
    82e4:	810a0000 	mrshi	r0, (UNDEF: 10)
    82e8:	86000000 	strhi	r0, [r0], -r0
    82ec:	06000021 	streq	r0, [r0], -r1, lsr #32
    82f0:	01000000 	mrseq	r0, (UNDEF: 0)
    82f4:	ac0b0136 	stfges	f0, [fp], {54}	; 0x36
    82f8:	2a000021 	bcs	8384 <__exidx_end+0x547c>
    82fc:	1f000000 	svcne	0x00000000
    8300:	09000001 	stmdbeq	r0, {r0}
    8304:	00001b4b 	andeq	r1, r0, fp, asr #22
    8308:	76015301 	strvc	r5, [r1], -r1, lsl #6
    830c:	dc000000 	stcle	0, cr0, [r0], {-0}
    8310:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    8314:	00001aa7 	andeq	r1, r0, r7, lsr #21
    8318:	76015401 	strvc	r5, [r1], -r1, lsl #8
    831c:	ef000000 	svc	0x00000000
    8320:	0000002d 	andeq	r0, r0, sp, lsr #32
    8324:	0021960c 	eoreq	r9, r1, ip, lsl #12
    8328:	0001c300 	andeq	ip, r1, r0, lsl #6
    832c:	00013300 	andeq	r3, r1, r0, lsl #6
    8330:	50010d00 	andpl	r0, r1, r0, lsl #26
    8334:	00007402 	andeq	r7, r0, r2, lsl #8
    8338:	00219e0c 	eoreq	r9, r1, ip, lsl #28
    833c:	0001d400 	andeq	sp, r1, r0, lsl #8
    8340:	00014d00 	andeq	r4, r1, r0, lsl #26
    8344:	51010d00 	tstpl	r1, r0, lsl #26
    8348:	0d007402 	cfstrseq	mvf7, [r0, #-8]
    834c:	75025001 	strvc	r5, [r2, #-1]
    8350:	dc0c0000 	stcle	0, cr0, [ip], {-0}
    8354:	ea000021 	b	83e0 <__exidx_end+0x54d8>
    8358:	61000001 	tstvs	r0, r1
    835c:	0d000001 	stceq	0, cr0, [r0, #-4]
    8360:	74025001 	strvc	r5, [r2], #-1
    8364:	e60e0000 	str	r0, [lr], -r0
    8368:	0d000021 	stceq	0, cr0, [r0, #-132]	; 0xffffff7c
    836c:	32015001 	andcc	r5, r1, #1
    8370:	910f0000 	mrsls	r0, CPSR
    8374:	0700001a 	smladeq	r0, sl, r0, r0
    8378:	0022285f 	eoreq	r2, r2, pc, asr r8
    837c:	0000a400 	andeq	sl, r0, r0, lsl #8
    8380:	c39c0100 	orrsgt	r0, ip, #0, 2
    8384:	10000001 	andne	r0, r0, r1
    8388:	00001a59 	andeq	r1, r0, r9, asr sl
    838c:	00767201 	rsbseq	r7, r6, r1, lsl #4
    8390:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
    8394:	b2100000 	andslt	r0, r0, #0
    8398:	0100001a 	tsteq	r0, sl, lsl r0
    839c:	00007673 	andeq	r7, r0, r3, ror r6
    83a0:	002e2d00 	eoreq	r2, lr, r0, lsl #26
    83a4:	22381100 	eorscs	r1, r8, #0, 2
    83a8:	01fb0000 	mvnseq	r0, r0
    83ac:	4c110000 	ldcmi	0, cr0, [r1], {-0}
    83b0:	03000022 	movweq	r0, #34	; 0x22
    83b4:	12000002 	andne	r0, r0, #2
    83b8:	0000225c 	andeq	r2, r0, ip, asr r2
    83bc:	0000009b 	muleq	r0, fp, r0
    83c0:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    83c4:	00000074 	andeq	r0, r0, r4, ror r0
    83c8:	00197e13 	andseq	r7, r9, r3, lsl lr
    83cc:	d46c0500 	strbtle	r0, [ip], #-1280	; 0xfffffb00
    83d0:	14000001 	strne	r0, [r0], #-1
    83d4:	00000076 	andeq	r0, r0, r6, ror r0
    83d8:	19ae1300 	stmibne	lr!, {r8, r9, ip}
    83dc:	73050000 	movwvc	r0, #20480	; 0x5000
    83e0:	000001ea 	andeq	r0, r0, sl, ror #3
    83e4:	00007614 	andeq	r7, r0, r4, lsl r6
    83e8:	00761400 	rsbseq	r1, r6, r0, lsl #8
    83ec:	13000000 	movwne	r0, #0
    83f0:	000019de 	ldrdeq	r1, [r0], -lr
    83f4:	01fb7a05 	mvnseq	r7, r5, lsl #20
    83f8:	76140000 	ldrvc	r0, [r4], -r0
    83fc:	00000000 	andeq	r0, r0, r0
    8400:	001b0e15 	andseq	r0, fp, r5, lsl lr
    8404:	02430600 	subeq	r0, r3, #0, 12
    8408:	001a2b16 	andseq	r2, sl, r6, lsl fp
    840c:	00fd0500 	rscseq	r0, sp, r0, lsl #10
    8410:	00000b17 	andeq	r0, r0, r7, lsl fp
    8414:	28450004 	stmdacs	r5, {r2}^
    8418:	01040000 	mrseq	r0, (UNDEF: 4)
    841c:	000016a5 	andeq	r1, r0, r5, lsr #13
    8420:	001da601 	andseq	sl, sp, r1, lsl #12
    8424:	00179a00 	andseq	r9, r7, r0, lsl #20
    8428:	000eb800 	andeq	fp, lr, r0, lsl #16
    842c:	00000000 	andeq	r0, r0, r0
    8430:	005ecc00 	subseq	ip, lr, r0, lsl #24
    8434:	06010200 	streq	r0, [r1], -r0, lsl #4
    8438:	0000039c 	muleq	r0, ip, r3
    843c:	9a080102 	bls	20884c <__ccfg+0x1e88a4>
    8440:	02000003 	andeq	r0, r0, #3
    8444:	03f80502 	mvnseq	r0, #8388608	; 0x800000
    8448:	02020000 	andeq	r0, r2, #0
    844c:	00025807 	andeq	r5, r2, r7, lsl #16
    8450:	169b0300 	ldrne	r0, [fp], r0, lsl #6
    8454:	3f040000 	svccc	0x00040000
    8458:	0000004c 	andeq	r0, r0, ip, asr #32
    845c:	b0050402 	andlt	r0, r5, r2, lsl #8
    8460:	03000000 	movweq	r0, #0
    8464:	00001806 	andeq	r1, r0, r6, lsl #16
    8468:	005e4104 	subseq	r4, lr, r4, lsl #2
    846c:	04020000 	streq	r0, [r2], #-0
    8470:	00008507 	andeq	r8, r0, r7, lsl #10
    8474:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8478:	000000ab 	andeq	r0, r0, fp, lsr #1
    847c:	80070802 	andhi	r0, r7, r2, lsl #16
    8480:	04000000 	streq	r0, [r0], #-0
    8484:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8488:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    848c:	00008a07 	andeq	r8, r0, r7, lsl #20
    8490:	169d0300 	ldrne	r0, [sp], r0, lsl #6
    8494:	1f050000 	svcne	0x00050000
    8498:	00000041 	andeq	r0, r0, r1, asr #32
    849c:	00180803 	andseq	r0, r8, r3, lsl #16
    84a0:	53200500 	noppl	{0}	; <UNPREDICTABLE>
    84a4:	05000000 	streq	r0, [r0, #-0]
    84a8:	00001e39 	andeq	r1, r0, r9, lsr lr
    84ac:	0081e902 	addeq	lr, r1, r2, lsl #18
    84b0:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    84b4:	06000000 	streq	r0, [r0], -r0
    84b8:	00001b89 	andeq	r1, r0, r9, lsl #23
    84bc:	008ce902 	addeq	lr, ip, r2, lsl #18
    84c0:	92070000 	andls	r0, r7, #0
    84c4:	0200001e 	andeq	r0, r0, #30
    84c8:	000081ef 	andeq	r8, r0, pc, ror #3
    84cc:	be080000 	cdplt	0, 0, cr0, cr8, cr0, {0}
    84d0:	0200001b 	andeq	r0, r0, #27
    84d4:	00008cab 	andeq	r8, r0, fp, lsr #25
    84d8:	00e70100 	rsceq	r0, r7, r0, lsl #2
    84dc:	59090000 	stmdbpl	r9, {}	; <UNPREDICTABLE>
    84e0:	0100001a 	tsteq	r0, sl, lsl r0
    84e4:	008c0329 	addeq	r0, ip, r9, lsr #6
    84e8:	330a0000 	movwcc	r0, #40960	; 0xa000
    84ec:	0100001f 	tsteq	r0, pc, lsl r0
    84f0:	008c032b 	addeq	r0, ip, fp, lsr #6
    84f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84f8:	00001e71 	andeq	r1, r0, r1, ror lr
    84fc:	008c8102 	addeq	r8, ip, r2, lsl #2
    8500:	10010000 	andne	r0, r1, r0
    8504:	09000001 	stmdbeq	r0, {r0}
    8508:	00001a59 	andeq	r1, r0, r9, asr sl
    850c:	8c033c01 	stchi	12, cr3, [r3], {1}
    8510:	0a000000 	beq	8518 <__exidx_end+0x5610>
    8514:	00001ee2 	andeq	r1, r0, r2, ror #29
    8518:	8c033e01 	stchi	14, cr3, [r3], {1}
    851c:	00000000 	andeq	r0, r0, r0
    8520:	001d1f08 	andseq	r1, sp, r8, lsl #30
    8524:	8c880200 	sfmhi	f0, 4, [r8], {0}
    8528:	01000000 	mrseq	r0, (UNDEF: 0)
    852c:	00000139 	andeq	r0, r0, r9, lsr r1
    8530:	001a5909 	andseq	r5, sl, r9, lsl #18
    8534:	034f0100 	movteq	r0, #61696	; 0xf100
    8538:	0000008c 	andeq	r0, r0, ip, lsl #1
    853c:	001e560a 	andseq	r5, lr, sl, lsl #12
    8540:	03510100 	cmpeq	r1, #0, 2
    8544:	0000008c 	andeq	r0, r0, ip, lsl #1
    8548:	1c830800 	stcne	8, cr0, [r3], {0}
    854c:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    8550:	0000008c 	andeq	r0, r0, ip, lsl #1
    8554:	00016e01 	andeq	r6, r1, r1, lsl #28
    8558:	1a590900 	bne	164a960 <__ccfg+0x162a9b8>
    855c:	62010000 	andvs	r0, r1, #0
    8560:	00008c03 	andeq	r8, r0, r3, lsl #24
    8564:	1c130a00 			; <UNDEFINED> instruction: 0x1c130a00
    8568:	64010000 	strvs	r0, [r1], #-0
    856c:	00008c03 	andeq	r8, r0, r3, lsl #24
    8570:	1d540a00 	vldrne	s1, [r4, #-0]
    8574:	65010000 	strvs	r0, [r1, #-0]
    8578:	00008c03 	andeq	r8, r0, r3, lsl #24
    857c:	86080000 	strhi	r0, [r8], -r0
    8580:	0200001d 	andeq	r0, r0, #29
    8584:	00008cb2 			; <UNDEFINED> instruction: 0x00008cb2
    8588:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    858c:	59090000 	stmdbpl	r9, {}	; <UNPREDICTABLE>
    8590:	0100001a 	tsteq	r0, sl, lsl r0
    8594:	008c0394 	umulleq	r0, ip, r4, r3
    8598:	a20a0000 	andge	r0, sl, #0
    859c:	0100001c 	tsteq	r0, ip, lsl r0
    85a0:	008c0396 	umulleq	r0, ip, r6, r3
    85a4:	540a0000 	strpl	r0, [sl], #-0
    85a8:	0100001d 	tsteq	r0, sp, lsl r0
    85ac:	008c0397 	umulleq	r0, ip, r7, r3
    85b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    85b4:	00001c51 	andeq	r1, r0, r1, asr ip
    85b8:	008cb902 	addeq	fp, ip, r2, lsl #18
    85bc:	cc010000 	stcgt	0, cr0, [r1], {-0}
    85c0:	09000001 	stmdbeq	r0, {r0}
    85c4:	00001a59 	andeq	r1, r0, r9, asr sl
    85c8:	8c03b401 	cfstrshi	mvf11, [r3], {1}
    85cc:	0a000000 	beq	85d4 <__exidx_end+0x56cc>
    85d0:	00001d5e 	andeq	r1, r0, lr, asr sp
    85d4:	8c03b601 	stchi	6, cr11, [r3], {1}
    85d8:	00000000 	andeq	r0, r0, r0
    85dc:	001dfc08 	andseq	pc, sp, r8, lsl #24
    85e0:	8cdf0200 	lfmhi	f0, 2, [pc], {0}
    85e4:	01000000 	mrseq	r0, (UNDEF: 0)
    85e8:	000001f5 	strdeq	r0, [r0], -r5
    85ec:	001a5909 	andseq	r5, sl, r9, lsl #18
    85f0:	03c80100 	biceq	r0, r8, #0, 2
    85f4:	0000008c 	andeq	r0, r0, ip, lsl #1
    85f8:	001f530a 	andseq	r5, pc, sl, lsl #6
    85fc:	03ca0100 	biceq	r0, sl, #0, 2
    8600:	0000008c 	andeq	r0, r0, ip, lsl #1
    8604:	1ebc0800 	cdpne	8, 11, cr0, cr12, cr0, {0}
    8608:	d7020000 	strle	r0, [r2, -r0]
    860c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8610:	00021201 	andeq	r1, r2, r1, lsl #4
    8614:	20060a00 	andcs	r0, r6, r0, lsl #20
    8618:	83010000 	movwhi	r0, #4096	; 0x1000
    861c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8620:	650b0000 	strvs	r0, [fp, #-0]
    8624:	03000008 	movweq	r0, #8
    8628:	e30c03c4 	movw	r0, #50116	; 0xc3c4
    862c:	0200001f 	andeq	r0, r0, #31
    8630:	22cc010f 	sbccs	r0, ip, #-1073741821	; 0xc0000003
    8634:	007c0000 	rsbseq	r0, ip, r0
    8638:	9c010000 	stcls	0, cr0, [r1], {-0}
    863c:	000002c4 	andeq	r0, r0, r4, asr #5
    8640:	001ac50d 	andseq	ip, sl, sp, lsl #10
    8644:	8c7f0100 	ldfhie	f0, [pc], #-0	; 864c <__exidx_end+0x5744>
    8648:	40000000 	andmi	r0, r0, r0
    864c:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    8650:	00001ffb 	strdeq	r1, [r0], -fp
    8654:	008c8101 	addeq	r8, ip, r1, lsl #2
    8658:	7b0e0000 	blvc	388660 <__ccfg+0x3686b8>
    865c:	0100001d 	tsteq	r0, sp, lsl r0
    8660:	00008182 	andeq	r8, r0, r2, lsl #3
    8664:	0f520100 	svceq	0x00520100
    8668:	00001bee 	andeq	r1, r0, lr, ror #23
    866c:	00818301 	addeq	r8, r1, r1, lsl #6
    8670:	2e610000 	cdpcs	0, 6, cr0, cr1, cr0, {0}
    8674:	bc0f0000 	stclt	0, cr0, [pc], {-0}
    8678:	0100001c 	tsteq	r0, ip, lsl r0
    867c:	00008184 	andeq	r8, r0, r4, lsl #3
    8680:	002e7400 	eoreq	r7, lr, r0, lsl #8
    8684:	00971000 	addseq	r1, r7, r0
    8688:	22da0000 	sbcscs	r0, sl, #0
    868c:	0e880000 	cdpeq	0, 8, cr0, cr8, cr0, {0}
    8690:	97010000 	strls	r0, [r1, -r0]
    8694:	0000029b 	muleq	r0, fp, r2
    8698:	0000a711 	andeq	sl, r0, r1, lsl r7
    869c:	0e881200 	cdpeq	2, 8, cr1, cr8, cr0, {0}
    86a0:	b2130000 	andslt	r0, r3, #0
    86a4:	01000000 	mrseq	r0, (UNDEF: 0)
    86a8:	14000052 	strne	r0, [r0], #-82	; 0xffffffae
    86ac:	00000097 	muleq	r0, r7, r0
    86b0:	000022e4 	andeq	r2, r0, r4, ror #5
    86b4:	00000006 	andeq	r0, r0, r6
    86b8:	a7119801 	ldrge	r9, [r1, -r1, lsl #16]
    86bc:	15000000 	strne	r0, [r0, #-0]
    86c0:	000022e4 	andeq	r2, r0, r4, ror #5
    86c4:	00000006 	andeq	r0, r0, r6
    86c8:	0000b216 	andeq	fp, r0, r6, lsl r2
    86cc:	002ea200 	eoreq	sl, lr, r0, lsl #4
    86d0:	00000000 	andeq	r0, r0, r0
    86d4:	00197e17 	andseq	r7, r9, r7, lsl lr
    86d8:	486c0200 	stmdami	ip!, {r9}^
    86dc:	ac000023 	stcge	0, cr0, [r0], {35}	; 0x23
    86e0:	01000000 	mrseq	r0, (UNDEF: 0)
    86e4:	0003439c 	muleq	r3, ip, r3
    86e8:	1ac50d00 	bne	ff14baf0 <_estack+0xdf146af0>
    86ec:	bf010000 	svclt	0x00010000
    86f0:	0000008c 	andeq	r0, r0, ip, lsl #1
    86f4:	00002eb5 			; <UNDEFINED> instruction: 0x00002eb5
    86f8:	001f150f 	andseq	r1, pc, pc, lsl #10
    86fc:	81c10100 	bichi	r0, r1, r0, lsl #2
    8700:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    8704:	0f00002e 	svceq	0x0000002e
    8708:	0000202b 	andeq	r2, r0, fp, lsr #32
    870c:	0081c201 	addeq	ip, r1, r1, lsl #4
    8710:	2f120000 	svccs	0x00120000
    8714:	97180000 	ldrls	r0, [r8, -r0]
    8718:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    871c:	06000023 	streq	r0, [r0], -r3, lsr #32
    8720:	01000000 	mrseq	r0, (UNDEF: 0)
    8724:	000332ee 	andeq	r3, r3, lr, ror #5
    8728:	00a71100 	adceq	r1, r7, r0, lsl #2
    872c:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
    8730:	06000023 	streq	r0, [r0], -r3, lsr #32
    8734:	16000000 	strne	r0, [r0], -r0
    8738:	000000b2 	strheq	r0, [r0], -r2
    873c:	00002f39 	andeq	r2, r0, r9, lsr pc
    8740:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    8744:	1a000023 	bne	87d8 <__exidx_end+0x58d0>
    8748:	1a000002 	bne	8758 <__exidx_end+0x5850>
    874c:	74025001 	strvc	r5, [r2], #-1
    8750:	1b000000 	blne	8758 <__exidx_end+0x5850>
    8754:	00001b99 	muleq	r0, r9, fp
    8758:	008ca402 	addeq	sl, ip, r2, lsl #8
    875c:	23f40000 	mvnscs	r0, #0
    8760:	005c0000 	subseq	r0, ip, r0
    8764:	9c010000 	stcls	0, cr0, [r1], {-0}
    8768:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    876c:	001ac51c 	andseq	ip, sl, ip, lsl r5
    8770:	021f0100 	andseq	r0, pc, #0, 2
    8774:	0000008c 	andeq	r0, r0, ip, lsl #1
    8778:	00002f4c 	andeq	r2, r0, ip, asr #30
    877c:	001ead1d 	andseq	sl, lr, sp, lsl sp
    8780:	02210100 	eoreq	r0, r1, #0, 2
    8784:	0000008c 	andeq	r0, r0, ip, lsl #1
    8788:	00002f6d 	andeq	r2, r0, sp, ror #30
    878c:	001fc71d 	andseq	ip, pc, sp, lsl r7	; <UNPREDICTABLE>
    8790:	02220100 	eoreq	r0, r2, #0, 2
    8794:	0000008c 	andeq	r0, r0, ip, lsl #1
    8798:	00002f80 	andeq	r2, r0, r0, lsl #31
    879c:	001fd51d 	andseq	sp, pc, sp, lsl r5	; <UNPREDICTABLE>
    87a0:	02230100 	eoreq	r0, r3, #0, 2
    87a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87a8:	00002fce 	andeq	r2, r0, lr, asr #31
    87ac:	0020141d 	eoreq	r1, r0, sp, lsl r4
    87b0:	02240100 	eoreq	r0, r4, #0, 2
    87b4:	00000081 	andeq	r0, r0, r1, lsl #1
    87b8:	00003036 	andeq	r3, r0, r6, lsr r0
    87bc:	0020061d 	eoreq	r0, r0, sp, lsl r6
    87c0:	02250100 	eoreq	r0, r5, #0, 2
    87c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87c8:	00003055 	andeq	r3, r0, r5, asr r0
    87cc:	1dd11b00 	vldrne	d17, [r1]
    87d0:	c1020000 	mrsgt	r0, (UNDEF: 2)
    87d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    87d8:	00002450 	andeq	r2, r0, r0, asr r4
    87dc:	00000018 	andeq	r0, r0, r8, lsl r0
    87e0:	03e79c01 	mvneq	r9, #256	; 0x100
    87e4:	061d0000 	ldreq	r0, [sp], -r0
    87e8:	01000020 	tsteq	r0, r0, lsr #32
    87ec:	008c0267 	addeq	r0, ip, r7, ror #4
    87f0:	307a0000 	rsbscc	r0, sl, r0
    87f4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    87f8:	000001f5 	strdeq	r0, [r0], -r5
    87fc:	00000000 	andeq	r0, r0, r0
    8800:	00000010 	andeq	r0, r0, r0, lsl r0
    8804:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
    8808:	05160000 	ldreq	r0, [r6, #-0]
    880c:	a1000002 	tstge	r0, r2
    8810:	00000030 	andeq	r0, r0, r0, lsr r0
    8814:	001cff1b 	andseq	pc, ip, fp, lsl pc	; <UNPREDICTABLE>
    8818:	8c9d0200 	lfmhi	f0, 4, [sp], {0}
    881c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    8820:	10000024 	andne	r0, r0, r4, lsr #32
    8824:	01000000 	mrseq	r0, (UNDEF: 0)
    8828:	00043e9c 	muleq	r4, ip, lr
    882c:	20061d00 	andcs	r1, r6, r0, lsl #26
    8830:	97010000 	strls	r0, [r1, -r0]
    8834:	00008c02 	andeq	r8, r0, r2, lsl #24
    8838:	0030ba00 	eorseq	fp, r0, r0, lsl #20
    883c:	1ead1d00 	cdpne	13, 10, cr1, cr13, cr0, {0}
    8840:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    8844:	00008c02 	andeq	r8, r0, r2, lsl #24
    8848:	0030db00 	eorseq	sp, r0, r0, lsl #22
    884c:	df1b0000 	svcle	0x001b0000
    8850:	0200001c 	andeq	r0, r0, #28
    8854:	00008c96 	muleq	r0, r6, ip
    8858:	00247800 	eoreq	r7, r4, r0, lsl #16
    885c:	00001400 	andeq	r1, r0, r0, lsl #8
    8860:	789c0100 	ldmvc	ip, {r8}
    8864:	1d000004 	stcne	0, cr0, [r0, #-16]
    8868:	00002006 	andeq	r2, r0, r6
    886c:	8c02ba01 			; <UNDEFINED> instruction: 0x8c02ba01
    8870:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    8874:	1d000030 	stcne	0, cr0, [r0, #-192]	; 0xffffff40
    8878:	00001ead 	andeq	r1, r0, sp, lsr #29
    887c:	8c02bb01 			; <UNDEFINED> instruction: 0x8c02bb01
    8880:	0f000000 	svceq	0x00000000
    8884:	00000031 	andeq	r0, r0, r1, lsr r0
    8888:	001fa61b 	andseq	sl, pc, fp, lsl r6	; <UNPREDICTABLE>
    888c:	8c8f0200 	sfmhi	f0, 4, [pc], {0}
    8890:	8c000000 	stchi	0, cr0, [r0], {-0}
    8894:	64000024 	strvs	r0, [r0], #-36	; 0xffffffdc
    8898:	01000000 	mrseq	r0, (UNDEF: 0)
    889c:	0004fe9c 	muleq	r4, ip, lr
    88a0:	1a591c00 	bne	164f8a8 <__ccfg+0x162f900>
    88a4:	db010000 	blle	488ac <__ccfg+0x28904>
    88a8:	00008c02 	andeq	r8, r0, r2, lsl #24
    88ac:	00312200 	eorseq	r2, r1, r0, lsl #4
    88b0:	20061d00 	andcs	r1, r6, r0, lsl #26
    88b4:	dd010000 	stcle	0, cr0, [r1, #-0]
    88b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    88bc:	00314300 	eorseq	r4, r1, r0, lsl #6
    88c0:	1ead1d00 	cdpne	13, 10, cr1, cr13, cr0, {0}
    88c4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    88c8:	00008c02 	andeq	r8, r0, r2, lsl #24
    88cc:	00317700 	eorseq	r7, r1, r0, lsl #14
    88d0:	1c071d00 	stcne	13, cr1, [r7], {-0}
    88d4:	df010000 	svcle	0x00010000
    88d8:	00008c02 	andeq	r8, r0, r2, lsl #24
    88dc:	00318a00 	eorseq	r8, r1, r0, lsl #20
    88e0:	1f7e1d00 	svcne	0x007e1d00
    88e4:	e0010000 	and	r0, r1, r0
    88e8:	00008c02 	andeq	r8, r0, r2, lsl #24
    88ec:	0031b800 	eorseq	fp, r1, r0, lsl #16
    88f0:	1ea30a00 	vfmane.f32	s0, s6, s0
    88f4:	e1010000 	mrs	r0, (UNDEF: 1)
    88f8:	00008c02 	andeq	r8, r0, r2, lsl #24
    88fc:	1c771d00 	ldclne	13, cr1, [r7], #-0
    8900:	e2010000 	and	r0, r1, #0
    8904:	00008102 	andeq	r8, r0, r2, lsl #2
    8908:	0031e600 	eorseq	lr, r1, r0, lsl #12
    890c:	be1e0000 	cdplt	0, 1, cr0, cr14, cr0, {0}
    8910:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    8914:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    8918:	01000000 	mrseq	r0, (UNDEF: 0)
    891c:	00054a9c 	muleq	r5, ip, sl
    8920:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    8924:	32610000 	rsbcc	r0, r1, #0
    8928:	da160000 	ble	588930 <__ccfg+0x568988>
    892c:	82000000 	andhi	r0, r0, #0
    8930:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8934:	000024f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8938:	0000000a 	andeq	r0, r0, sl
    893c:	0000ce1f 	andeq	ip, r0, pc, lsl lr
    8940:	0032a100 	eorseq	sl, r2, r0, lsl #2
    8944:	24f21500 	ldrbtcs	r1, [r2], #1280	; 0x500
    8948:	000a0000 	andeq	r0, sl, r0
    894c:	da160000 	ble	588954 <__ccfg+0x5689ac>
    8950:	c2000000 	andgt	r0, r0, #0
    8954:	00000032 	andeq	r0, r0, r2, lsr r0
    8958:	e71e0000 	ldr	r0, [lr, -r0]
    895c:	04000000 	streq	r0, [r0], #-0
    8960:	14000025 	strne	r0, [r0], #-37	; 0xffffffdb
    8964:	01000000 	mrseq	r0, (UNDEF: 0)
    8968:	0005969c 	muleq	r5, ip, r6
    896c:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    8970:	32d50000 	sbcscc	r0, r5, #0
    8974:	03160000 	tsteq	r6, #0
    8978:	f6000001 			; <UNDEFINED> instruction: 0xf6000001
    897c:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8980:	00002506 	andeq	r2, r0, r6, lsl #10
    8984:	0000000a 	andeq	r0, r0, sl
    8988:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
    898c:	00331500 	eorseq	r1, r3, r0, lsl #10
    8990:	25061500 	strcs	r1, [r6, #-1280]	; 0xfffffb00
    8994:	000a0000 	andeq	r0, sl, r0
    8998:	03160000 	tsteq	r6, #0
    899c:	36000001 	strcc	r0, [r0], -r1
    89a0:	00000033 	andeq	r0, r0, r3, lsr r0
    89a4:	101e0000 	andsne	r0, lr, r0
    89a8:	18000001 	stmdane	r0, {r0}
    89ac:	14000025 	strne	r0, [r0], #-37	; 0xffffffdb
    89b0:	01000000 	mrseq	r0, (UNDEF: 0)
    89b4:	0005e29c 	muleq	r5, ip, r2
    89b8:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    89bc:	33490000 	movtcc	r0, #36864	; 0x9000
    89c0:	2c160000 	ldccs	0, cr0, [r6], {-0}
    89c4:	6a000001 	bvs	89d0 <__exidx_end+0x5ac8>
    89c8:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    89cc:	0000251a 	andeq	r2, r0, sl, lsl r5
    89d0:	0000000a 	andeq	r0, r0, sl
    89d4:	0001201f 	andeq	r2, r1, pc, lsl r0
    89d8:	00338900 	eorseq	r8, r3, r0, lsl #18
    89dc:	251a1500 	ldrcs	r1, [sl, #-1280]	; 0xfffffb00
    89e0:	000a0000 	andeq	r0, sl, r0
    89e4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    89e8:	aa000001 	bge	89f4 <__exidx_end+0x5aec>
    89ec:	00000033 	andeq	r0, r0, r3, lsr r0
    89f0:	391e0000 	ldmdbcc	lr, {}	; <UNPREDICTABLE>
    89f4:	2c000001 	stccs	0, cr0, [r0], {1}
    89f8:	28000025 	stmdacs	r0, {r0, r2, r5}
    89fc:	01000000 	mrseq	r0, (UNDEF: 0)
    8a00:	00063c9c 	muleq	r6, ip, ip
    8a04:	01491f00 	cmpeq	r9, r0, lsl #30
    8a08:	33bd0000 			; <UNDEFINED> instruction: 0x33bd0000
    8a0c:	55160000 	ldrpl	r0, [r6, #-0]
    8a10:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
    8a14:	20000033 	andcs	r0, r0, r3, lsr r0
    8a18:	00000161 	andeq	r0, r0, r1, ror #2
    8a1c:	00252e15 	eoreq	r2, r5, r5, lsl lr
    8a20:	00001c00 	andeq	r1, r0, r0, lsl #24
    8a24:	01491f00 	cmpeq	r9, r0, lsl #30
    8a28:	33fd0000 	mvnscc	r0, #0
    8a2c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    8a30:	1c000025 	stcne	0, cr0, [r0], {37}	; 0x25
    8a34:	16000000 	strne	r0, [r0], -r0
    8a38:	00000155 	andeq	r0, r0, r5, asr r1
    8a3c:	0000341e 	andeq	r3, r0, lr, lsl r4
    8a40:	00016116 	andeq	r6, r1, r6, lsl r1
    8a44:	00344b00 	eorseq	r4, r4, r0, lsl #22
    8a48:	00000000 	andeq	r0, r0, r0
    8a4c:	001c2c1b 	andseq	r2, ip, fp, lsl ip
    8a50:	8ccf0200 	sfmhi	f0, 2, [pc], {0}
    8a54:	54000000 	strpl	r0, [r0], #-0
    8a58:	10000025 	andne	r0, r0, r5, lsr #32
    8a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    8a60:	0006669c 	muleq	r6, ip, r6
    8a64:	1cc61d00 	stclne	13, cr1, [r6], {0}
    8a68:	84010000 	strhi	r0, [r1], #-0
    8a6c:	00008c03 	andeq	r8, r0, r3, lsl #24
    8a70:	00345e00 	eorseq	r5, r4, r0, lsl #28
    8a74:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    8a78:	64000001 	strvs	r0, [r0], #-1
    8a7c:	2c000025 	stccs	0, cr0, [r0], {37}	; 0x25
    8a80:	01000000 	mrseq	r0, (UNDEF: 0)
    8a84:	0006c09c 	muleq	r6, ip, r0
    8a88:	017e1f00 	cmneq	lr, r0, lsl #30
    8a8c:	34790000 	ldrbtcc	r0, [r9], #-0
    8a90:	8a160000 	bhi	588a98 <__ccfg+0x568af0>
    8a94:	9a000001 	bls	8aa0 <__exidx_end+0x5b98>
    8a98:	20000034 	andcs	r0, r0, r4, lsr r0
    8a9c:	00000196 	muleq	r0, r6, r1
    8aa0:	00256615 	eoreq	r6, r5, r5, lsl r6
    8aa4:	00001e00 	andeq	r1, r0, r0, lsl #28
    8aa8:	017e1f00 	cmneq	lr, r0, lsl #30
    8aac:	34bd0000 	ldrtcc	r0, [sp], #0
    8ab0:	66150000 	ldrvs	r0, [r5], -r0
    8ab4:	1e000025 	cdpne	0, 0, cr0, cr0, cr5, {1}
    8ab8:	16000000 	strne	r0, [r0], -r0
    8abc:	0000018a 	andeq	r0, r0, sl, lsl #3
    8ac0:	000034de 	ldrdeq	r3, [r0], -lr
    8ac4:	00019616 	andeq	r9, r1, r6, lsl r6
    8ac8:	00350b00 	eorseq	r0, r5, r0, lsl #22
    8acc:	00000000 	andeq	r0, r0, r0
    8ad0:	0001a31e 	andeq	sl, r1, lr, lsl r3
    8ad4:	00259000 	eoreq	r9, r5, r0
    8ad8:	00001400 	andeq	r1, r0, r0, lsl #8
    8adc:	0c9c0100 	ldfeqs	f0, [ip], {0}
    8ae0:	1f000007 	svcne	0x00000007
    8ae4:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    8ae8:	0000351e 	andeq	r3, r0, lr, lsl r5
    8aec:	0001bf16 	andeq	fp, r1, r6, lsl pc
    8af0:	00353f00 	eorseq	r3, r5, r0, lsl #30
    8af4:	25921500 	ldrcs	r1, [r2, #1280]	; 0x500
    8af8:	000a0000 	andeq	r0, sl, r0
    8afc:	b31f0000 	tstlt	pc, #0
    8b00:	5e000001 	cdppl	0, 0, cr0, cr0, cr1, {0}
    8b04:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8b08:	00002592 	muleq	r0, r2, r5
    8b0c:	0000000a 	andeq	r0, r0, sl
    8b10:	0001bf16 	andeq	fp, r1, r6, lsl pc
    8b14:	00357f00 	eorseq	r7, r5, r0, lsl #30
    8b18:	00000000 	andeq	r0, r0, r0
    8b1c:	0001cc1e 	andeq	ip, r1, lr, lsl ip
    8b20:	0025a400 	eoreq	sl, r5, r0, lsl #8
    8b24:	00001400 	andeq	r1, r0, r0, lsl #8
    8b28:	589c0100 	ldmpl	ip, {r8}
    8b2c:	1f000007 	svcne	0x00000007
    8b30:	000001dc 	ldrdeq	r0, [r0], -ip
    8b34:	00003592 	muleq	r0, r2, r5
    8b38:	0001e816 	andeq	lr, r1, r6, lsl r8
    8b3c:	0035b300 	eorseq	fp, r5, r0, lsl #6
    8b40:	25a61500 	strcs	r1, [r6, #1280]!	; 0x500
    8b44:	000a0000 	andeq	r0, sl, r0
    8b48:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
    8b4c:	d2000001 	andle	r0, r0, #1
    8b50:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8b54:	000025a6 	andeq	r2, r0, r6, lsr #11
    8b58:	0000000a 	andeq	r0, r0, sl
    8b5c:	0001e816 	andeq	lr, r1, r6, lsl r8
    8b60:	0035f300 	eorseq	pc, r5, r0, lsl #6
    8b64:	00000000 	andeq	r0, r0, r0
    8b68:	0019ae17 	andseq	sl, r9, r7, lsl lr
    8b6c:	b8730200 	ldmdalt	r3!, {r9}^
    8b70:	10000025 	andne	r0, r0, r5, lsr #32
    8b74:	01000001 	tsteq	r0, r1
    8b78:	0009639c 	muleq	r9, ip, r3
    8b7c:	1a591c00 	bne	164fb84 <__ccfg+0x162fbdc>
    8b80:	27010000 	strcs	r0, [r1, -r0]
    8b84:	00008c01 	andeq	r8, r0, r1, lsl #24
    8b88:	00360600 	eorseq	r0, r6, r0, lsl #12
    8b8c:	1ac51c00 	bne	ff14fb94 <_estack+0xdf14ab94>
    8b90:	27010000 	strcs	r0, [r1, -r0]
    8b94:	00008c01 	andeq	r8, r0, r1, lsl #24
    8b98:	00363200 	eorseq	r3, r6, r0, lsl #4
    8b9c:	1e301d00 	cdpne	13, 3, cr1, cr0, cr0, {0}
    8ba0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    8ba4:	00008c01 	andeq	r8, r0, r1, lsl #24
    8ba8:	00365300 	eorseq	r5, r6, r0, lsl #6
    8bac:	01f52100 	mvnseq	r2, r0, lsl #2
    8bb0:	25e80000 	strbcs	r0, [r8, #0]!
    8bb4:	0ea00000 	cdpeq	0, 10, cr0, cr0, cr0, {0}
    8bb8:	40010000 	andmi	r0, r1, r0
    8bbc:	0007c101 	andeq	ip, r7, r1, lsl #2
    8bc0:	0ea01200 	cdpeq	2, 10, cr1, cr0, cr0, {0}
    8bc4:	05160000 	ldreq	r0, [r6, #-0]
    8bc8:	21000002 	tstcs	r0, r2
    8bcc:	00000037 	andeq	r0, r0, r7, lsr r0
    8bd0:	25c22200 	strbcs	r2, [r2, #512]	; 0x200
    8bd4:	03430000 	movteq	r0, #12288	; 0x3000
    8bd8:	07d60000 	ldrbeq	r0, [r6, r0]
    8bdc:	011a0000 	tsteq	sl, r0
    8be0:	01f30350 	mvnseq	r0, r0, asr r3
    8be4:	ce220051 	mcrgt	0, 1, r0, cr2, cr1, {2}
    8be8:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8bec:	ef00000a 	svc	0x0000000a
    8bf0:	1a000007 	bne	8c14 <__exidx_end+0x5d0c>
    8bf4:	48015101 	stmdami	r1, {r0, r8, ip, lr}
    8bf8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bfc:	23000074 	movwcs	r0, #116	; 0x74
    8c00:	000025d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8c04:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    8c08:	0025e824 	eoreq	lr, r5, r4, lsr #16
    8c0c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    8c10:	0000081d 	andeq	r0, r0, sp, lsl r8
    8c14:	0153011a 	cmpeq	r3, sl, lsl r1
    8c18:	52011a30 	andpl	r1, r1, #48, 20	; 0x30000
    8c1c:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
    8c20:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8c24:	011a2c08 	tsteq	sl, r8, lsl #24
    8c28:	00740250 	rsbseq	r0, r4, r0, asr r2
    8c2c:	25f82200 	ldrbcs	r2, [r8, #512]!	; 0x200
    8c30:	0ad60000 	beq	ff588c38 <_estack+0xdf583c38>
    8c34:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
    8c38:	011a0000 	tsteq	sl, r0
    8c3c:	1a4c0151 	bne	1309188 <__ccfg+0x12e91e0>
    8c40:	74025001 	strvc	r5, [r2], #-1
    8c44:	fc230000 	stc2	0, cr0, [r3], #-0
    8c48:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    8c4c:	22000004 	andcs	r0, r0, #4
    8c50:	00002606 	andeq	r2, r0, r6, lsl #12
    8c54:	00000ad6 	ldrdeq	r0, [r0], -r6
    8c58:	00000858 	andeq	r0, r0, r8, asr r8
    8c5c:	0151011a 	cmpeq	r1, sl, lsl r1
    8c60:	50011a44 	andpl	r1, r1, r4, asr #20
    8c64:	00007402 	andeq	r7, r0, r2, lsl #8
    8c68:	00260a23 	eoreq	r0, r6, r3, lsr #20
    8c6c:	00043e00 	andeq	r3, r4, r0, lsl #28
    8c70:	26142200 	ldrcs	r2, [r4], -r0, lsl #4
    8c74:	0ad60000 	beq	ff588c7c <_estack+0xdf583c7c>
    8c78:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    8c7c:	011a0000 	tsteq	sl, r0
    8c80:	1a400151 	bne	10091cc <__ccfg+0xfe9224>
    8c84:	74025001 	strvc	r5, [r2], #-1
    8c88:	1a220000 	bne	888c90 <__ccfg+0x868ce8>
    8c8c:	78000026 	stmdavc	r0, {r1, r2, r5}
    8c90:	8e000004 	cdphi	0, 0, cr0, cr0, cr4, {0}
    8c94:	1a000008 	bne	8cbc <__exidx_end+0x5db4>
    8c98:	75025001 	strvc	r5, [r2, #-1]
    8c9c:	24220000 	strtcs	r0, [r2], #-0
    8ca0:	d6000026 	strle	r0, [r0], -r6, lsr #32
    8ca4:	a700000a 	strge	r0, [r0, -sl]
    8ca8:	1a000008 	bne	8cd0 <__exidx_end+0x5dc8>
    8cac:	3c015101 	stfccs	f5, [r1], {1}
    8cb0:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8cb4:	22000074 	andcs	r0, r0, #116	; 0x74
    8cb8:	0000262a 	andeq	r2, r0, sl, lsr #12
    8cbc:	000000e7 	andeq	r0, r0, r7, ror #1
    8cc0:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    8cc4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8cc8:	22000075 	andcs	r0, r0, #117	; 0x75
    8ccc:	0000263c 	andeq	r2, r0, ip, lsr r6
    8cd0:	00000110 	andeq	r0, r0, r0, lsl r1
    8cd4:	000008cf 	andeq	r0, r0, pc, asr #17
    8cd8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8cdc:	22000075 	andcs	r0, r0, #117	; 0x75
    8ce0:	0000264a 	andeq	r2, r0, sl, asr #12
    8ce4:	00000139 	andeq	r0, r0, r9, lsr r1
    8ce8:	000008e3 	andeq	r0, r0, r3, ror #17
    8cec:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8cf0:	22000075 	andcs	r0, r0, #117	; 0x75
    8cf4:	00002654 	andeq	r2, r0, r4, asr r6
    8cf8:	00000ad6 	ldrdeq	r0, [r0], -r6
    8cfc:	000008fd 	strdeq	r0, [r0], -sp
    8d00:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8d04:	011a2808 	tsteq	sl, r8, lsl #16
    8d08:	00740250 	rsbseq	r0, r4, r0, asr r2
    8d0c:	265a2200 	ldrbcs	r2, [sl], -r0, lsl #4
    8d10:	00be0000 	adcseq	r0, lr, r0
    8d14:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    8d18:	011a0000 	tsteq	sl, r0
    8d1c:	00750250 	rsbseq	r0, r5, r0, asr r2
    8d20:	266c2200 	strbtcs	r2, [ip], -r0, lsl #4
    8d24:	01a30000 			; <UNDEFINED> instruction: 0x01a30000
    8d28:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
    8d2c:	011a0000 	tsteq	sl, r0
    8d30:	00750250 	rsbseq	r0, r5, r0, asr r2
    8d34:	267e2200 	ldrbtcs	r2, [lr], -r0, lsl #4
    8d38:	01cc0000 	biceq	r0, ip, r0
    8d3c:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    8d40:	011a0000 	tsteq	sl, r0
    8d44:	00750250 	rsbseq	r0, r5, r0, asr r2
    8d48:	26922200 	ldrcs	r2, [r2], r0, lsl #4
    8d4c:	016e0000 	cmneq	lr, r0
    8d50:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    8d54:	011a0000 	tsteq	sl, r0
    8d58:	00750250 	rsbseq	r0, r5, r0, asr r2
    8d5c:	269c1900 	ldrcs	r1, [ip], r0, lsl #18
    8d60:	0ad60000 	beq	ff588d68 <_estack+0xdf583d68>
    8d64:	011a0000 	tsteq	sl, r0
    8d68:	1a380151 	bne	e092b4 <__ccfg+0xde930c>
    8d6c:	74025001 	strvc	r5, [r2], #-1
    8d70:	17000000 	strne	r0, [r0, -r0]
    8d74:	00001a2b 	andeq	r1, r0, fp, lsr #20
    8d78:	26c8fd02 	strbcs	pc, [r8], r2, lsl #26	; <UNPREDICTABLE>
    8d7c:	00640000 	rsbeq	r0, r4, r0
    8d80:	9c010000 	stcls	0, cr0, [r1], {-0}
    8d84:	00000989 	andeq	r0, r0, r9, lsl #19
    8d88:	001bfa1d 	andseq	pc, fp, sp, lsl sl	; <UNPREDICTABLE>
    8d8c:	03eb0100 	mvneq	r0, #0, 2
    8d90:	0000008c 	andeq	r0, r0, ip, lsl #1
    8d94:	0000373a 	andeq	r3, r0, sl, lsr r7
    8d98:	1f880c00 	svcne	0x00880c00
    8d9c:	06020000 	streq	r0, [r2], -r0
    8da0:	00272c01 	eoreq	r2, r7, r1, lsl #24
    8da4:	00002800 	andeq	r2, r0, r0, lsl #16
    8da8:	b09c0100 	addslt	r0, ip, r0, lsl #2
    8dac:	1c000009 	stcne	0, cr0, [r0], {9}
    8db0:	00001dc7 	andeq	r1, r0, r7, asr #27
    8db4:	8c041301 	stchi	3, cr1, [r4], {1}
    8db8:	55000000 	strpl	r0, [r0, #-0]
    8dbc:	00000037 	andeq	r0, r0, r7, lsr r0
    8dc0:	0019de17 	andseq	sp, r9, r7, lsl lr
    8dc4:	547a0200 	ldrbtpl	r0, [sl], #-512	; 0xfffffe00
    8dc8:	50000027 	andpl	r0, r0, r7, lsr #32
    8dcc:	01000001 	tsteq	r0, r1
    8dd0:	000ad69c 	muleq	sl, ip, r6
    8dd4:	1ac51c00 	bne	ff14fddc <_estack+0xdf14addc>
    8dd8:	9b010000 	blls	48de0 <__ccfg+0x28e38>
    8ddc:	00008c01 	andeq	r8, r0, r1, lsl #24
    8de0:	00377600 	eorseq	r7, r7, r0, lsl #12
    8de4:	1f261d00 	svcne	0x00261d00
    8de8:	9d010000 	stcls	0, cr0, [r1, #-0]
    8dec:	00008c01 	andeq	r8, r0, r1, lsl #24
    8df0:	0037d100 	eorseq	sp, r7, r0, lsl #2
    8df4:	1e301d00 	cdpne	13, 3, cr1, cr0, cr0, {0}
    8df8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    8dfc:	00008c01 	andeq	r8, r0, r1, lsl #24
    8e00:	0037e400 	eorseq	lr, r7, r0, lsl #8
    8e04:	1b7a1d00 	blne	1e9020c <__ccfg+0x1e70264>
    8e08:	9f010000 	svcls	0x00010000
    8e0c:	00008c01 	andeq	r8, r0, r1, lsl #24
    8e10:	0037f700 	eorseq	pc, r7, r0, lsl #14
    8e14:	1b551d00 	blne	155021c <__ccfg+0x1530274>
    8e18:	a0010000 	andge	r0, r1, r0
    8e1c:	00008c01 	andeq	r8, r0, r1, lsl #24
    8e20:	00381500 	eorseq	r1, r8, r0, lsl #10
    8e24:	02122500 	andseq	r2, r2, #0, 10
    8e28:	28660000 	stmdacs	r6!, {}^	; <UNPREDICTABLE>
    8e2c:	003e0000 	eorseq	r0, lr, r0
    8e30:	16010000 	strne	r0, [r1], -r0
    8e34:	27de2302 	ldrbcs	r2, [lr, r2, lsl #6]
    8e38:	063c0000 	ldrteq	r0, [ip], -r0
    8e3c:	00220000 	eoreq	r0, r2, r0
    8e40:	f2000028 	vhadd.s8	d0, d0, d24
    8e44:	4600000a 	strmi	r0, [r0], -sl
    8e48:	1a00000a 	bne	8e78 <__exidx_end+0x5f70>
    8e4c:	31015101 	tstcc	r1, r1, lsl #2
    8e50:	0150011a 	cmpeq	r0, sl, lsl r1
    8e54:	06220034 			; <UNDEFINED> instruction: 0x06220034
    8e58:	89000028 	stmdbhi	r0, {r3, r5}
    8e5c:	5d000009 	stcpl	0, cr0, [r0, #-36]	; 0xffffffdc
    8e60:	1a00000a 	bne	8e90 <__exidx_end+0x5f88>
    8e64:	0c055001 	stceq	0, cr5, [r5], {1}
    8e68:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    8e6c:	280c2300 	stmdacs	ip, {r8, r9, sp}
    8e70:	0b080000 	bleq	208e78 <__ccfg+0x1e8ed0>
    8e74:	16220000 	strtne	r0, [r2], -r0
    8e78:	f2000028 	vhadd.s8	d0, d0, d24
    8e7c:	7f00000a 	svcvc	0x0000000a
    8e80:	1a00000a 	bne	8eb0 <__exidx_end+0x5fa8>
    8e84:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    8e88:	50011a00 	andpl	r1, r1, r0, lsl #20
    8e8c:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8e90:	0000281c 	andeq	r2, r0, ip, lsl r8
    8e94:	00000b08 	andeq	r0, r0, r8, lsl #22
    8e98:	00000a92 	muleq	r0, r2, sl
    8e9c:	0150011a 	cmpeq	r0, sl, lsl r1
    8ea0:	2c220034 	stccs	0, cr0, [r2], #-208	; 0xffffff30
    8ea4:	89000028 	stmdbhi	r0, {r3, r5}
    8ea8:	ac000009 	stcge	0, cr0, [r0], {9}
    8eac:	1a00000a 	bne	8edc <__exidx_end+0x5fd4>
    8eb0:	74085001 	strvc	r5, [r8], #-1
    8eb4:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    8eb8:	001a00ff 	ldrsheq	r0, [sl], -pc	; <UNPREDICTABLE>
    8ebc:	00283c26 	eoreq	r3, r8, r6, lsr #24
    8ec0:	000acc00 	andeq	ip, sl, r0, lsl #24
    8ec4:	52011a00 	andpl	r1, r1, #0, 20
    8ec8:	60000c05 	andvs	r0, r0, r5, lsl #24
    8ecc:	011a6000 	tsteq	sl, r0
    8ed0:	1a370151 	bne	dc941c <__ccfg+0xda9474>
    8ed4:	74045001 	strvc	r5, [r4], #-1
    8ed8:	00254800 	eoreq	r4, r5, r0, lsl #16
    8edc:	00285223 	eoreq	r5, r8, r3, lsr #4
    8ee0:	000af200 	andeq	pc, sl, r0, lsl #4
    8ee4:	40270000 	eormi	r0, r7, r0
    8ee8:	0600001d 			; <UNDEFINED> instruction: 0x0600001d
    8eec:	0af201ca 	beq	ffc8961c <_estack+0xdfc8461c>
    8ef0:	8c280000 	stchi	0, cr0, [r8], #-0
    8ef4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8ef8:	0000008c 	andeq	r0, r0, ip, lsl #1
    8efc:	00008c28 	andeq	r8, r0, r8, lsr #24
    8f00:	62290000 	eorvs	r0, r9, #0
    8f04:	0700001b 	smladeq	r0, fp, r0, r0
    8f08:	000b08f9 	strdeq	r0, [fp], -r9
    8f0c:	008c2800 	addeq	r2, ip, r0, lsl #16
    8f10:	8c280000 	stchi	0, cr0, [r8], #-0
    8f14:	00000000 	andeq	r0, r0, r0
    8f18:	001efd2a 	andseq	pc, lr, sl, lsr #26
    8f1c:	01100700 	tsteq	r0, r0, lsl #14
    8f20:	0000008c 	andeq	r0, r0, ip, lsl #1
    8f24:	00008c28 	andeq	r8, r0, r8, lsr #24
    8f28:	23000000 	movwcs	r0, #0
    8f2c:	04000009 	streq	r0, [r0], #-9
    8f30:	002aa600 	eoreq	sl, sl, r0, lsl #12
    8f34:	a5010400 	strge	r0, [r1, #-1024]	; 0xfffffc00
    8f38:	01000016 	tsteq	r0, r6, lsl r0
    8f3c:	00002110 	andeq	r2, r0, r0, lsl r1
    8f40:	0000179a 	muleq	r0, sl, r7
    8f44:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    8f48:	00000000 	andeq	r0, r0, r0
    8f4c:	00006327 	andeq	r6, r0, r7, lsr #6
    8f50:	00175502 	andseq	r5, r7, r2, lsl #10
    8f54:	301b0600 	andscc	r0, fp, r0, lsl #12
    8f58:	03000000 	movweq	r0, #0
    8f5c:	039c0601 	orrseq	r0, ip, #1048576	; 0x100000
    8f60:	4f020000 	svcmi	0x00020000
    8f64:	06000022 	streq	r0, [r0], -r2, lsr #32
    8f68:	0000421d 	andeq	r4, r0, sp, lsl r2
    8f6c:	08010300 	stmdaeq	r1, {r8, r9}
    8f70:	0000039a 	muleq	r0, sl, r3
    8f74:	f8050203 			; <UNDEFINED> instruction: 0xf8050203
    8f78:	02000003 	andeq	r0, r0, #3
    8f7c:	0000213d 	andeq	r2, r0, sp, lsr r1
    8f80:	005b2b06 	subseq	r2, fp, r6, lsl #22
    8f84:	02030000 	andeq	r0, r3, #0
    8f88:	00025807 	andeq	r5, r2, r7, lsl #16
    8f8c:	169b0200 	ldrne	r0, [fp], r0, lsl #4
    8f90:	3f060000 	svccc	0x00060000
    8f94:	0000006d 	andeq	r0, r0, sp, rrx
    8f98:	b0050403 	andlt	r0, r5, r3, lsl #8
    8f9c:	02000000 	andeq	r0, r0, #0
    8fa0:	00001806 	andeq	r1, r0, r6, lsl #16
    8fa4:	007f4106 	rsbseq	r4, pc, r6, lsl #2
    8fa8:	04030000 	streq	r0, [r3], #-0
    8fac:	00008507 	andeq	r8, r0, r7, lsl #10
    8fb0:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    8fb4:	000000ab 	andeq	r0, r0, fp, lsr #1
    8fb8:	80070803 	andhi	r0, r7, r3, lsl #16
    8fbc:	04000000 	streq	r0, [r0], #-0
    8fc0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8fc4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    8fc8:	00008a07 	andeq	r8, r0, r7, lsl #20
    8fcc:	17570200 	ldrbne	r0, [r7, -r0, lsl #4]
    8fd0:	13070000 	movwne	r0, #28672	; 0x7000
    8fd4:	00000025 	andeq	r0, r0, r5, lsr #32
    8fd8:	00225102 	eoreq	r5, r2, r2, lsl #2
    8fdc:	37140700 	ldrcc	r0, [r4, -r0, lsl #14]
    8fe0:	02000000 	andeq	r0, r0, #0
    8fe4:	0000213f 	andeq	r2, r0, pc, lsr r1
    8fe8:	00501a07 	subseq	r1, r0, r7, lsl #20
    8fec:	9d020000 	stcls	0, cr0, [r2, #-0]
    8ff0:	07000016 	smladeq	r0, r6, r0, r0
    8ff4:	0000621f 	andeq	r6, r0, pc, lsl r2
    8ff8:	18080200 	stmdane	r8, {r9}
    8ffc:	20070000 	andcs	r0, r7, r0
    9000:	00000074 	andeq	r0, r0, r4, ror r0
    9004:	00232802 	eoreq	r2, r3, r2, lsl #16
    9008:	e4330800 	ldrt	r0, [r3], #-2048	; 0xfffff800
    900c:	05000000 	streq	r0, [r0, #-0]
    9010:	0000ea04 	andeq	lr, r0, r4, lsl #20
    9014:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    9018:	000000f1 	strdeq	r0, [r0], -r1
    901c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    9020:	00ad0800 	adceq	r0, sp, r0, lsl #16
    9024:	02000000 	andeq	r0, r0, #0
    9028:	0000239e 	muleq	r0, lr, r3
    902c:	01074209 	tsteq	r7, r9, lsl #4
    9030:	04050000 	streq	r0, [r5], #-0
    9034:	0000010d 	andeq	r0, r0, sp, lsl #2
    9038:	0000ce09 	andeq	ip, r0, r9, lsl #28
    903c:	00012600 	andeq	r2, r1, r0, lsl #12
    9040:	01260800 			; <UNDEFINED> instruction: 0x01260800
    9044:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9048:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    904c:	000000ce 	andeq	r0, r0, lr, asr #1
    9050:	ad040500 	cfstr32ge	mvfx0, [r4, #-0]
    9054:	02000000 	andeq	r0, r0, #0
    9058:	000024c7 	andeq	r2, r0, r7, asr #9
    905c:	01374609 	teqeq	r7, r9, lsl #12
    9060:	04050000 	streq	r0, [r5], #-0
    9064:	0000013d 	andeq	r0, r0, sp, lsr r1
    9068:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    906c:	25330200 	ldrcs	r0, [r3, #-512]!	; 0xfffffe00
    9070:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    9074:	00000137 	andeq	r0, r0, r7, lsr r1
    9078:	00227902 	eoreq	r7, r2, r2, lsl #18
    907c:	584a0900 	stmdapl	sl, {r8, fp}^
    9080:	05000001 	streq	r0, [r0, #-1]
    9084:	00015e04 	andeq	r5, r1, r4, lsl #28
    9088:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    908c:	016d0000 	cmneq	sp, r0
    9090:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9094:	00000000 	andeq	r0, r0, r0
    9098:	0021df02 	eoreq	sp, r1, r2, lsl #30
    909c:	374c0900 	strbcc	r0, [ip, -r0, lsl #18]
    90a0:	02000001 	andeq	r0, r0, #1
    90a4:	00002148 	andeq	r2, r0, r8, asr #2
    90a8:	01074e09 	tsteq	r7, r9, lsl #28
    90ac:	cf020000 	svcgt	0x00020000
    90b0:	09000021 	stmdbeq	r0, {r0, r5}
    90b4:	0000e451 	andeq	lr, r0, r1, asr r4
    90b8:	204b0200 	subcs	r0, fp, r0, lsl #4
    90bc:	53090000 	movwpl	r0, #36864	; 0x9000
    90c0:	00000199 	muleq	r0, r9, r1
    90c4:	019f0405 	orrseq	r0, pc, r5, lsl #8
    90c8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    90cc:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    90d0:	08000001 	stmdaeq	r0, {r0}
    90d4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    90d8:	0000b808 	andeq	fp, r0, r8, lsl #16
    90dc:	00b80800 	adcseq	r0, r8, r0, lsl #16
    90e0:	05000000 	streq	r0, [r0, #-0]
    90e4:	0000b804 	andeq	fp, r0, r4, lsl #16
    90e8:	23c20200 	biccs	r0, r2, #0, 4
    90ec:	57090000 	strpl	r0, [r9, -r0]
    90f0:	000001c9 	andeq	r0, r0, r9, asr #3
    90f4:	01cf0405 	biceq	r0, pc, r5, lsl #8
    90f8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    90fc:	e3000000 	movw	r0, #0
    9100:	08000001 	stmdaeq	r0, {r0}
    9104:	000001e3 	andeq	r0, r0, r3, ror #3
    9108:	0000ce08 	andeq	ip, r0, r8, lsl #28
    910c:	04050000 	streq	r0, [r5], #-0
    9110:	000000ce 	andeq	r0, r0, lr, asr #1
    9114:	00220202 	eoreq	r0, r2, r2, lsl #4
    9118:	c95a0900 	ldmdbgt	sl, {r8, fp}^
    911c:	02000001 	andeq	r0, r0, #1
    9120:	000022cb 	andeq	r2, r0, fp, asr #5
    9124:	01c95d09 	biceq	r5, r9, r9, lsl #26
    9128:	5d020000 	stcpl	0, cr0, [r2, #-0]
    912c:	09000020 	stmdbeq	r0, {r5}
    9130:	0001c960 	andeq	ip, r1, r0, ror #18
    9134:	23ed0200 	mvncs	r0, #0, 4
    9138:	63090000 	movwvs	r0, #36864	; 0x9000
    913c:	000000e4 	andeq	r0, r0, r4, ror #1
    9140:	00208302 	eoreq	r8, r0, r2, lsl #6
    9144:	20650900 	rsbcs	r0, r5, r0, lsl #18
    9148:	05000002 	streq	r0, [r0, #-2]
    914c:	00022604 	andeq	r2, r2, r4, lsl #12
    9150:	02310700 	eorseq	r0, r1, #0, 14
    9154:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9158:	00000000 	andeq	r0, r0, r0
    915c:	00254402 	eoreq	r4, r5, r2, lsl #8
    9160:	20670900 	rsbcs	r0, r7, r0, lsl #18
    9164:	02000002 	andeq	r0, r0, #2
    9168:	00002339 	andeq	r2, r0, r9, lsr r3
    916c:	00eb6909 	rsceq	r6, fp, r9, lsl #18
    9170:	12020000 	andne	r0, r2, #0
    9174:	09000025 	stmdbeq	r0, {r0, r2, r5}
    9178:	0000eb6b 	andeq	lr, r0, fp, ror #22
    917c:	22e70200 	rsccs	r0, r7, #0, 4
    9180:	6d090000 	stcvs	0, cr0, [r9, #-0]
    9184:	000000eb 	andeq	r0, r0, fp, ror #1
    9188:	0022f902 	eoreq	pc, r2, r2, lsl #18
    918c:	eb6f0900 	bl	1bcb594 <__ccfg+0x1bab5ec>
    9190:	0b000000 	bleq	9198 <__exidx_end+0x6290>
    9194:	557a094c 	ldrbpl	r0, [sl, #-2380]!	; 0xfffff6b4
    9198:	0c000003 	stceq	0, cr0, [r0], {3}
    919c:	0000229d 	muleq	r0, sp, r2
    91a0:	00fc7c09 	rscseq	r7, ip, r9, lsl #24
    91a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    91a8:	00002505 	andeq	r2, r0, r5, lsl #10
    91ac:	012c7d09 			; <UNDEFINED> instruction: 0x012c7d09
    91b0:	0c040000 	stceq	0, cr0, [r4], {-0}
    91b4:	000022c1 	andeq	r2, r0, r1, asr #5
    91b8:	01427e09 	cmpeq	r2, r9, lsl #28
    91bc:	0c080000 	stceq	0, cr0, [r8], {-0}
    91c0:	0000242c 	andeq	r2, r0, ip, lsr #8
    91c4:	014d7f09 	cmpeq	sp, r9, lsl #30
    91c8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    91cc:	0000243e 	andeq	r2, r0, lr, lsr r4
    91d0:	016d8009 	cmneq	sp, r9
    91d4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    91d8:	00002450 	andeq	r2, r0, r0, asr r4
    91dc:	01788109 	cmneq	r8, r9, lsl #2
    91e0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    91e4:	0000219b 	muleq	r0, fp, r1
    91e8:	01838209 	orreq	r8, r3, r9, lsl #4
    91ec:	0c180000 	ldceq	0, cr0, [r8], {-0}
    91f0:	000022b6 			; <UNDEFINED> instruction: 0x000022b6
    91f4:	018e8309 	orreq	r8, lr, r9, lsl #6
    91f8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    91fc:	00002407 	andeq	r2, r0, r7, lsl #8
    9200:	01be8409 			; <UNDEFINED> instruction: 0x01be8409
    9204:	0c200000 	stceq	0, cr0, [r0], #-0
    9208:	0000223e 	andeq	r2, r0, lr, lsr r2
    920c:	01e98509 	mvneq	r8, r9, lsl #10
    9210:	0c240000 	stceq	0, cr0, [r4], #-0
    9214:	00002259 	andeq	r2, r0, r9, asr r2
    9218:	01f48609 	mvnseq	r8, r9, lsl #12
    921c:	0c280000 	stceq	0, cr0, [r8], #-0
    9220:	00002474 	andeq	r2, r0, r4, ror r4
    9224:	01ff8709 	mvnseq	r8, r9, lsl #14
    9228:	0c2c0000 	stceq	0, cr0, [ip], #-0
    922c:	000021f0 	strdeq	r2, [r0], -r0
    9230:	02158809 	andseq	r8, r5, #589824	; 0x90000
    9234:	0c300000 	ldceq	0, cr0, [r0], #-0
    9238:	00002462 	andeq	r2, r0, r2, ror #8
    923c:	02318909 	eorseq	r8, r1, #147456	; 0x24000
    9240:	0c340000 	ldceq	0, cr0, [r4], #-0
    9244:	000022a3 	andeq	r2, r0, r3, lsr #5
    9248:	020a8a09 	andeq	r8, sl, #36864	; 0x9000
    924c:	0c380000 	ldceq	0, cr0, [r8], #-0
    9250:	00002317 	andeq	r2, r0, r7, lsl r3
    9254:	023c8b09 	eorseq	r8, ip, #9216	; 0x2400
    9258:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    925c:	0000241d 	andeq	r2, r0, sp, lsl r4
    9260:	02478c09 	subeq	r8, r7, #2304	; 0x900
    9264:	0c400000 	mareq	acc0, r0, r0
    9268:	00002218 	andeq	r2, r0, r8, lsl r2
    926c:	02528d09 	subseq	r8, r2, #576	; 0x240
    9270:	0c440000 	mareq	acc0, r0, r4
    9274:	00002074 	andeq	r2, r0, r4, ror r0
    9278:	025d8e09 	subseq	r8, sp, #9, 28	; 0x90
    927c:	00480000 	subeq	r0, r8, r0
    9280:	00237802 	eoreq	r7, r3, r2, lsl #16
    9284:	688f0900 	stmvs	pc, {r8, fp}	; <UNPREDICTABLE>
    9288:	0b000002 	bleq	9298 <__exidx_end+0x6390>
    928c:	994e0108 	stmdbls	lr, {r3, r8}^
    9290:	0c000003 	stceq	0, cr0, [r0], {3}
    9294:	000023bb 			; <UNDEFINED> instruction: 0x000023bb
    9298:	00ce4f01 	sbceq	r4, lr, r1, lsl #30
    929c:	0c000000 	stceq	0, cr0, [r0], {-0}
    92a0:	00002488 	andeq	r2, r0, r8, lsl #9
    92a4:	00b85001 	adcseq	r5, r8, r1
    92a8:	0c040000 	stceq	0, cr0, [r4], {-0}
    92ac:	00002247 	andeq	r2, r0, r7, asr #4
    92b0:	00ad5101 	adceq	r5, sp, r1, lsl #2
    92b4:	0c060000 	stceq	0, cr0, [r6], {-0}
    92b8:	00002186 	andeq	r2, r0, r6, lsl #3
    92bc:	00a25201 	adceq	r5, r2, r1, lsl #4
    92c0:	00070000 	andeq	r0, r7, r0
    92c4:	0024b402 	eoreq	fp, r4, r2, lsl #8
    92c8:	60530100 	subsvs	r0, r3, r0, lsl #2
    92cc:	0d000003 	stceq	0, cr0, [r0, #-12]
    92d0:	0000058a 	andeq	r0, r0, sl, lsl #11
    92d4:	0301dc02 	movweq	sp, #7170	; 0x1c02
    92d8:	000003be 			; <UNDEFINED> instruction: 0x000003be
    92dc:	0005440e 	andeq	r4, r5, lr, lsl #8
    92e0:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    92e4:	000000ce 	andeq	r0, r0, lr, asr #1
    92e8:	059f0f00 	ldreq	r0, [pc, #3840]	; a1f0 <__exidx_end+0x72e8>
    92ec:	2c020000 	stccs	0, cr0, [r2], {-0}
    92f0:	0000ce02 	andeq	ip, r0, r2, lsl #28
    92f4:	a9100300 	ldmdbge	r0, {r8, r9}
    92f8:	04000006 	streq	r0, [r0], #-6
    92fc:	1103022a 	tstne	r3, sl, lsr #4
    9300:	00001e39 	andeq	r1, r0, r9, lsr lr
    9304:	00c3e905 	sbceq	lr, r3, r5, lsl #18
    9308:	fb030000 	blx	c9312 <__ccfg+0xa936a>
    930c:	12000003 	andne	r0, r0, #3
    9310:	00001b89 	andeq	r1, r0, r9, lsl #23
    9314:	00cee905 	sbceq	lr, lr, r5, lsl #18
    9318:	92130000 	andsls	r0, r3, #0
    931c:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    9320:	0000c3ef 	andeq	ip, r0, pc, ror #7
    9324:	a70d0000 	strge	r0, [sp, -r0]
    9328:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    932c:	1503025c 	strne	r0, [r3, #-604]	; 0xfffffda4
    9330:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    9334:	00002175 	andeq	r2, r0, r5, ror r1
    9338:	ce025c04 	cdpgt	12, 0, cr5, cr2, cr4, {0}
    933c:	00000000 	andeq	r0, r0, r0
    9340:	00238c10 	eoreq	r8, r3, r0, lsl ip
    9344:	01400300 	mrseq	r0, SPSR_irq
    9348:	23480f03 	movtcs	r0, #36611	; 0x8f03
    934c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    9350:	00042b02 	andeq	r2, r4, r2, lsl #22
    9354:	01030300 	mrseq	r0, SP_svc
    9358:	000c0d02 	andeq	r0, ip, r2, lsl #26
    935c:	23d01400 	bicscs	r1, r0, #0, 8
    9360:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
    9364:	00000000 	andeq	r0, r0, r0
    9368:	000000f4 	strdeq	r0, [r0], -r4
    936c:	05cd9c01 	strbeq	r9, [sp, #3073]	; 0xc01
    9370:	36150000 	ldrcc	r0, [r5], -r0
    9374:	01000022 	tsteq	r0, r2, lsr #32
    9378:	0000ce7b 	andeq	ip, r0, fp, ror lr
    937c:	00382800 	eorseq	r2, r8, r0, lsl #16
    9380:	218d1600 	orrcs	r1, sp, r0, lsl #12
    9384:	7c010000 	stcvc	0, cr0, [r1], {-0}
    9388:	000000ce 	andeq	r0, r0, lr, asr #1
    938c:	a41707ff 	ldrge	r0, [r7], #-2047	; 0xfffff801
    9390:	00000003 	andeq	r0, r0, r3
    9394:	60000000 	andvs	r0, r0, r0
    9398:	0100000f 	tsteq	r0, pc
    939c:	00047d81 	andeq	r7, r4, r1, lsl #27
    93a0:	03b11800 			; <UNDEFINED> instruction: 0x03b11800
    93a4:	00010000 	andeq	r0, r1, r0
    93a8:	0003be19 	andeq	fp, r3, r9, lsl lr
    93ac:	00000000 	andeq	r0, r0, r0
    93b0:	00000400 	andeq	r0, r0, r0, lsl #8
    93b4:	1a820100 	bne	fe0897bc <_estack+0xde0847bc>
    93b8:	00000415 	andeq	r0, r0, r5, lsl r4
    93bc:	00000000 	andeq	r0, r0, r0
    93c0:	00000008 	andeq	r0, r0, r8
    93c4:	04a9a101 	strteq	sl, [r9], #257	; 0x101
    93c8:	001b0000 	andseq	r0, fp, r0
    93cc:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    93d0:	00000008 	andeq	r0, r0, r8
    93d4:	0003cb19 	andeq	ip, r3, r9, lsl fp
    93d8:	00000000 	andeq	r0, r0, r0
    93dc:	00000600 	andeq	r0, r0, r0, lsl #12
    93e0:	19b10100 	ldmibne	r1!, {r8}
    93e4:	0000041e 	andeq	r0, r0, lr, lsl r4
    93e8:	00000000 	andeq	r0, r0, r0
    93ec:	00000004 	andeq	r0, r0, r4
    93f0:	fb1ab201 	blx	6b5bfe <__ccfg+0x695c56>
    93f4:	00000003 	andeq	r0, r0, r3
    93f8:	0a000000 	beq	9400 <__exidx_end+0x64f8>
    93fc:	01000000 	mrseq	r0, (UNDEF: 0)
    9400:	0004e1b8 			; <UNDEFINED> instruction: 0x0004e1b8
    9404:	04081800 	streq	r1, [r8], #-2048	; 0xfffff800
    9408:	00110000 	andseq	r0, r1, r0
    940c:	0003cb19 	andeq	ip, r3, r9, lsl fp
    9410:	00000000 	andeq	r0, r0, r0
    9414:	00000400 	andeq	r0, r0, r0, lsl #8
    9418:	19b90100 	ldmibne	r9!, {r8}
    941c:	0000041e 	andeq	r0, r0, lr, lsl r4
    9420:	00000000 	andeq	r0, r0, r0
    9424:	00000002 	andeq	r0, r0, r2
    9428:	cb19ba01 	blgt	677c34 <__ccfg+0x657c8c>
    942c:	00000003 	andeq	r0, r0, r3
    9430:	06000000 	streq	r0, [r0], -r0
    9434:	01000000 	mrseq	r0, (UNDEF: 0)
    9438:	041e19cf 	ldreq	r1, [lr], #-2511	; 0xfffff631
    943c:	00000000 	andeq	r0, r0, r0
    9440:	00020000 	andeq	r0, r2, r0
    9444:	d0010000 	andle	r0, r1, r0
    9448:	0000001c 	andeq	r0, r0, ip, lsl r0
    944c:	00052e00 	andeq	r2, r5, r0, lsl #28
    9450:	50011d00 	andpl	r1, r1, r0, lsl #26
    9454:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
    9458:	00001c00 	andeq	r1, r0, r0, lsl #24
    945c:	053f0000 	ldreq	r0, [pc, #-0]!	; 9464 <__exidx_end+0x655c>
    9460:	011d0000 	tsteq	sp, r0
    9464:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    9468:	001e0007 	andseq	r0, lr, r7
    946c:	ef000000 	svc	0x00000000
    9470:	57000008 	strpl	r0, [r0, -r8]
    9474:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9478:	31015101 	tstcc	r1, r1, lsl #2
    947c:	0150011d 	cmpeq	r0, sp, lsl r1
    9480:	001e0033 	andseq	r0, lr, r3, lsr r0
    9484:	ef000000 	svc	0x00000000
    9488:	6f000008 	svcvs	0x00000008
    948c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9490:	33015101 	movwcc	r5, #4353	; 0x1101
    9494:	0150011d 	cmpeq	r0, sp, lsl r1
    9498:	001e0034 	andseq	r0, lr, r4, lsr r0
    949c:	05000000 	streq	r0, [r0, #-0]
    94a0:	82000009 	andhi	r0, r0, #9
    94a4:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    94a8:	31015001 	tstcc	r1, r1
    94ac:	00001c00 	andeq	r1, r0, r0, lsl #24
    94b0:	05910000 	ldreq	r0, [r1]
    94b4:	011d0000 	tsteq	sp, r0
    94b8:	00370150 	eorseq	r0, r7, r0, asr r1
    94bc:	0000001c 	andeq	r0, r0, ip, lsl r0
    94c0:	0005a000 	andeq	sl, r5, r0
    94c4:	50011d00 	andpl	r1, r1, r0, lsl #26
    94c8:	1c003701 	stcne	7, cr3, [r0], {1}
    94cc:	00000000 	andeq	r0, r0, r0
    94d0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    94d4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    94d8:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    94dc:	00000000 	andeq	r0, r0, r0
    94e0:	000005c0 	andeq	r0, r0, r0, asr #11
    94e4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    94e8:	1f000076 	svcne	0x00000076
    94ec:	00000000 	andeq	r0, r0, r0
    94f0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    94f4:	00000076 	andeq	r0, r0, r6, ror r0
    94f8:	0020e820 	eoreq	lr, r0, r0, lsr #16
    94fc:	01010a00 	tsteq	r1, r0, lsl #20
    9500:	000028a4 	andeq	r2, r0, r4, lsr #17
    9504:	00000220 	andeq	r0, r0, r0, lsr #4
    9508:	07c89c01 	strbeq	r9, [r8, r1, lsl #24]
    950c:	09210000 	stmdbeq	r1!, {}	; <UNPREDICTABLE>
    9510:	01000023 	tsteq	r0, r3, lsr #32
    9514:	0000ceda 	ldrdeq	ip, [r0], -sl
    9518:	00385300 	eorseq	r5, r8, r0, lsl #6
    951c:	206c1500 	rsbcs	r1, ip, r0, lsl #10
    9520:	dc010000 	stcle	0, cr0, [r1], {-0}
    9524:	000000c3 	andeq	r0, r0, r3, asr #1
    9528:	0000387f 	andeq	r3, r0, pc, ror r8
    952c:	00235415 	eoreq	r5, r3, r5, lsl r4
    9530:	c3dd0100 	bicsgt	r0, sp, #0, 2
    9534:	9d000000 	stcls	0, cr0, [r0, #-0]
    9538:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    953c:	0000228a 	andeq	r2, r0, sl, lsl #5
    9540:	00c3de01 	sbceq	sp, r3, r1, lsl #28
    9544:	38f70000 	ldmcc	r7!, {}^	; <UNPREDICTABLE>
    9548:	a6150000 	ldrge	r0, [r5], -r0
    954c:	01000024 	tsteq	r0, r4, lsr #32
    9550:	0000c3df 	ldrdeq	ip, [r0], -pc	; <UNPREDICTABLE>
    9554:	00391500 	eorseq	r1, r9, r0, lsl #10
    9558:	203d1500 	eorscs	r1, sp, r0, lsl #10
    955c:	e0010000 	and	r0, r1, r0
    9560:	000000c3 	andeq	r0, r0, r3, asr #1
    9564:	00003933 	andeq	r3, r0, r3, lsr r9
    9568:	00209422 	eoreq	r9, r0, r2, lsr #8
    956c:	c3e10100 	mvngt	r0, #0, 2
    9570:	01000000 	mrseq	r0, (UNDEF: 0)
    9574:	1ac51553 	bne	ff14eac8 <_estack+0xdf149ac8>
    9578:	e2010000 	and	r0, r1, #0
    957c:	000000ce 	andeq	r0, r0, lr, asr #1
    9580:	00003946 	andeq	r3, r0, r6, asr #18
    9584:	00238315 	eoreq	r8, r3, r5, lsl r3
    9588:	cee30100 	cdpgt	1, 14, cr0, cr3, cr0, {0}
    958c:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    9590:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    9594:	000020a8 	andeq	r2, r0, r8, lsr #1
    9598:	00cee401 	sbceq	lr, lr, r1, lsl #8
    959c:	39780000 	ldmdbcc	r8!, {}^	; <UNPREDICTABLE>
    95a0:	64230000 	strtvs	r0, [r3], #-0
    95a4:	e5010069 	str	r0, [r1, #-105]	; 0xffffff97
    95a8:	000000ce 	andeq	r0, r0, lr, asr #1
    95ac:	0000398b 	andeq	r3, r0, fp, lsl #19
    95b0:	69696423 	stmdbvs	r9!, {r0, r1, r5, sl, sp, lr}^
    95b4:	cee60100 	cdpgt	1, 14, cr0, cr6, cr0, {0}
    95b8:	c1000000 	mrsgt	r0, (UNDEF: 0)
    95bc:	23000039 	movwcs	r0, #57	; 0x39
    95c0:	01006974 	tsteq	r0, r4, ror r9
    95c4:	0000cee7 	andeq	ip, r0, r7, ror #29
    95c8:	0039f700 	eorseq	pc, r9, r0, lsl #14
    95cc:	64632300 	strbtvs	r2, [r3], #-768	; 0xfffffd00
    95d0:	cee80100 	cdpgt	1, 14, cr0, cr8, cr0, {0}
    95d4:	67000000 	strvs	r0, [r0, -r0]
    95d8:	2300003a 	movwcs	r0, #58	; 0x3a
    95dc:	01006c63 	tsteq	r0, r3, ror #24
    95e0:	0000cee9 	andeq	ip, r0, r9, ror #29
    95e4:	003a7a00 	eorseq	r7, sl, r0, lsl #20
    95e8:	20b91500 	adcscs	r1, r9, r0, lsl #10
    95ec:	ea010000 	b	495f4 <__ccfg+0x2964c>
    95f0:	000000ce 	andeq	r0, r0, lr, asr #1
    95f4:	00003a8d 	andeq	r3, r0, sp, lsl #21
    95f8:	01006b24 	tsteq	r0, r4, lsr #22
    95fc:	0000ceeb 	andeq	ip, r0, fp, ror #29
    9600:	22101300 	andscs	r1, r0, #0, 6
    9604:	ec010000 	stc	0, cr0, [r1], {-0}
    9608:	000000ce 	andeq	r0, r0, lr, asr #1
    960c:	0021bd15 	eoreq	fp, r1, r5, lsl sp
    9610:	ceed0100 	cdpgt	1, 14, cr0, cr13, cr0, {0}
    9614:	ab000000 	blge	961c <__exidx_end+0x6714>
    9618:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    961c:	00002181 	andeq	r2, r0, r1, lsl #3
    9620:	00ceee01 	sbceq	lr, lr, r1, lsl #28
    9624:	3ad40000 	bcc	ff50962c <_estack+0xdf50462c>
    9628:	b8150000 	ldmdalt	r5, {}	; <UNPREDICTABLE>
    962c:	01000021 	tsteq	r0, r1, lsr #32
    9630:	0000ceef 	andeq	ip, r0, pc, ror #29
    9634:	003af300 	eorseq	pc, sl, r0, lsl #6
    9638:	24101500 	ldrcs	r1, [r0], #-1280	; 0xfffffb00
    963c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    9640:	000007c8 	andeq	r0, r0, r8, asr #15
    9644:	00003b37 	andeq	r3, r0, r7, lsr fp
    9648:	0028d225 	eoreq	sp, r8, r5, lsr #4
    964c:	00001200 	andeq	r1, r0, r0, lsl #4
    9650:	00073b00 	andeq	r3, r7, r0, lsl #22
    9654:	23602600 	cmncs	r0, #0, 12
    9658:	0a010000 	beq	49660 <__ccfg+0x296b8>
    965c:	0000c301 	andeq	ip, r0, r1, lsl #6
    9660:	003b4f00 	eorseq	r4, fp, r0, lsl #30
    9664:	d4270000 	strtle	r0, [r7], #-0
    9668:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
    966c:	06000028 	streq	r0, [r0], -r8, lsr #32
    9670:	01000000 	mrseq	r0, (UNDEF: 0)
    9674:	07680111 			; <UNDEFINED> instruction: 0x07680111
    9678:	e4280000 	strt	r0, [r8], #-0
    967c:	29000003 	stmdbcs	r0, {r0, r1}
    9680:	000028f8 	strdeq	r2, [r0], -r8
    9684:	00000006 	andeq	r0, r0, r6
    9688:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    968c:	003b6200 	eorseq	r6, fp, r0, lsl #4
    9690:	27000000 	strcs	r0, [r0, -r0]
    9694:	000003d4 	ldrdeq	r0, [r0], -r4
    9698:	00002910 	andeq	r2, r0, r0, lsl r9
    969c:	00000006 	andeq	r0, r0, r6
    96a0:	95011b01 	strls	r1, [r1, #-2817]	; 0xfffff4ff
    96a4:	28000007 	stmdacs	r0, {r0, r1, r2}
    96a8:	000003e4 	andeq	r0, r0, r4, ror #7
    96ac:	00291029 	eoreq	r1, r9, r9, lsr #32
    96b0:	00000600 	andeq	r0, r0, r0, lsl #12
    96b4:	03ef2a00 	mvneq	r2, #0, 20
    96b8:	3b750000 	blcc	1d496c0 <__ccfg+0x1d29718>
    96bc:	00000000 	andeq	r0, r0, r0
    96c0:	0003d42b 	andeq	sp, r3, fp, lsr #8
    96c4:	00291a00 	eoreq	r1, r9, r0, lsl #20
    96c8:	000f7800 	andeq	r7, pc, r0, lsl #16
    96cc:	011f0100 	tsteq	pc, r0, lsl #2
    96d0:	000007be 			; <UNDEFINED> instruction: 0x000007be
    96d4:	0003e428 	andeq	lr, r3, r8, lsr #8
    96d8:	0f782c00 	svceq	0x00782c00
    96dc:	ef2a0000 	svc	0x002a0000
    96e0:	88000003 	stmdahi	r0, {r0, r1}
    96e4:	0000003b 	andeq	r0, r0, fp, lsr r0
    96e8:	28c41b00 	stmiacs	r4, {r8, r9, fp, ip}^
    96ec:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    96f0:	05000000 	streq	r0, [r0, #-0]
    96f4:	0007ce04 	andeq	ip, r7, r4, lsl #28
    96f8:	00ce2d00 	sbceq	r2, lr, r0, lsl #26
    96fc:	be200000 	cdplt	0, 2, cr0, cr0, cr0, {0}
    9700:	0a000020 	beq	9788 <__exidx_end+0x6880>
    9704:	2ac40117 	bcs	ff109b68 <_estack+0xdf104b68>
    9708:	00600000 	rsbeq	r0, r0, r0
    970c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9710:	00000833 	andeq	r0, r0, r3, lsr r8
    9714:	00206c26 	eoreq	r6, r0, r6, lsr #24
    9718:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    971c:	000000c3 	andeq	r0, r0, r3, asr #1
    9720:	00003b9b 	muleq	r0, fp, fp
    9724:	00226326 	eoreq	r6, r2, r6, lsr #6
    9728:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    972c:	000000ce 	andeq	r0, r0, lr, asr #1
    9730:	00003bc6 	andeq	r3, r0, r6, asr #23
    9734:	00222c26 	eoreq	r2, r2, r6, lsr #24
    9738:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    973c:	000000ce 	andeq	r0, r0, lr, asr #1
    9740:	00003bd9 	ldrdeq	r3, [r0], -r9
    9744:	0021bd26 	eoreq	fp, r1, r6, lsr #26
    9748:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    974c:	000000ce 	andeq	r0, r0, lr, asr #1
    9750:	00003c00 	andeq	r3, r0, r0, lsl #24
    9754:	002ad21b 	eoreq	sp, sl, fp, lsl r2
    9758:	00091b00 	andeq	r1, r9, r0, lsl #22
    975c:	d8200000 	stmdale	r0!, {}	; <UNPREDICTABLE>
    9760:	0a000024 	beq	97f8 <__exidx_end+0x68f0>
    9764:	00000129 	andeq	r0, r0, r9, lsr #2
    9768:	00780000 	rsbseq	r0, r8, r0
    976c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9770:	0000088a 	andeq	r0, r0, sl, lsl #17
    9774:	0022da26 	eoreq	sp, r2, r6, lsr #20
    9778:	01e70100 	mvneq	r0, r0, lsl #2
    977c:	000000ce 	andeq	r0, r0, lr, asr #1
    9780:	00003c29 	andeq	r3, r0, r9, lsr #24
    9784:	00249926 	eoreq	r9, r4, r6, lsr #18
    9788:	01e80100 	mvneq	r0, r0, lsl #2
    978c:	000000ce 	andeq	r0, r0, lr, asr #1
    9790:	00003c3c 	andeq	r3, r0, ip, lsr ip
    9794:	001ac526 	andseq	ip, sl, r6, lsr #10
    9798:	01e90100 	mvneq	r0, r0, lsl #2
    979c:	000000ce 	andeq	r0, r0, lr, asr #1
    97a0:	00003c4f 	andeq	r3, r0, pc, asr #24
    97a4:	0023ab26 	eoreq	sl, r3, r6, lsr #22
    97a8:	01ea0100 	mvneq	r0, r0, lsl #2
    97ac:	000000ce 	andeq	r0, r0, lr, asr #1
    97b0:	00003c62 	andeq	r3, r0, r2, ror #24
    97b4:	21592e00 	cmpcs	r9, r0, lsl #28
    97b8:	420a0000 	andmi	r0, sl, #0
    97bc:	0000ce01 	andeq	ip, r0, r1, lsl #28
    97c0:	002b2400 	eoreq	r2, fp, r0, lsl #8
    97c4:	00001800 	andeq	r1, r0, r0, lsl #16
    97c8:	229c0100 	addscs	r0, ip, #0, 2
    97cc:	00002522 	andeq	r2, r0, r2, lsr #10
    97d0:	03995501 	orrseq	r5, r9, #4194304	; 0x400000
    97d4:	03050000 	movweq	r0, #20480	; 0x5000
    97d8:	2000007c 	andcs	r0, r0, ip, ror r0
    97dc:	0000ce2f 	andeq	ip, r0, pc, lsr #28
    97e0:	0008c100 	andeq	ip, r8, r0, lsl #2
    97e4:	08c13000 	stmiaeq	r1, {ip, sp}^
    97e8:	000c0000 	andeq	r0, ip, r0
    97ec:	ca070403 	bgt	1ca800 <__ccfg+0x1aa858>
    97f0:	22000018 	andcs	r0, r0, #24
    97f4:	00002368 	andeq	r2, r0, r8, ror #6
    97f8:	08d96101 	ldmeq	r9, {r0, r8, sp, lr}^
    97fc:	03050000 	movweq	r0, #20480	; 0x5000
    9800:	00000000 	andeq	r0, r0, r0
    9804:	0008b12d 	andeq	fp, r8, sp, lsr #2
    9808:	21303100 	teqcs	r0, r0, lsl #2
    980c:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    9810:	000008ef 	andeq	r0, r0, pc, ror #17
    9814:	0000d908 	andeq	sp, r0, r8, lsl #18
    9818:	62310000 	eorsvs	r0, r1, #0
    981c:	0300001b 	movweq	r0, #27
    9820:	000905f9 	strdeq	r0, [r9], -r9
    9824:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    9828:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    982c:	00000000 	andeq	r0, r0, r0
    9830:	001efd32 	andseq	pc, lr, r2, lsr sp	; <UNPREDICTABLE>
    9834:	01100300 	tsteq	r0, r0, lsl #6
    9838:	000000ce 	andeq	r0, r0, lr, asr #1
    983c:	0000091b 	andeq	r0, r0, fp, lsl r9
    9840:	0000ce08 	andeq	ip, r0, r8, lsl #28
    9844:	6c330000 	ldcvs	0, cr0, [r3], #-0
    9848:	0b000016 	bleq	98a8 <__exidx_end+0x69a0>
    984c:	0000c3aa 	andeq	ip, r0, sl, lsr #7
    9850:	03cc0000 	biceq	r0, ip, #0
    9854:	00040000 	andeq	r0, r4, r0
    9858:	00002d60 	andeq	r2, r0, r0, ror #26
    985c:	16a50104 	strtne	r0, [r5], r4, lsl #2
    9860:	2b010000 	blcs	49868 <__ccfg+0x298c0>
    9864:	9a000028 	bls	990c <__exidx_end+0x6a04>
    9868:	f0000017 			; <UNDEFINED> instruction: 0xf0000017
    986c:	0000000f 	andeq	r0, r0, pc
    9870:	90000000 	andls	r0, r0, r0
    9874:	02000066 	andeq	r0, r0, #102	; 0x66
    9878:	039c0601 	orrseq	r0, ip, #1048576	; 0x100000
    987c:	01020000 	mrseq	r0, (UNDEF: 2)
    9880:	00039a08 	andeq	r9, r3, r8, lsl #20
    9884:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    9888:	000003f8 	strdeq	r0, [r0], -r8
    988c:	58070202 	stmdapl	r7, {r1, r9}
    9890:	02000002 	andeq	r0, r0, #2
    9894:	00b00504 	adcseq	r0, r0, r4, lsl #10
    9898:	06030000 	streq	r0, [r3], -r0
    989c:	03000018 	movweq	r0, #24
    98a0:	00005341 	andeq	r5, r0, r1, asr #6
    98a4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    98a8:	00000085 	andeq	r0, r0, r5, lsl #1
    98ac:	ab050802 	blge	14b8bc <__ccfg+0x12b914>
    98b0:	02000000 	andeq	r0, r0, #0
    98b4:	00800708 	addeq	r0, r0, r8, lsl #14
    98b8:	04040000 	streq	r0, [r4], #-0
    98bc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    98c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    98c4:	0000008a 	andeq	r0, r0, sl, lsl #1
    98c8:	00180803 	andseq	r0, r8, r3, lsl #16
    98cc:	48200400 	stmdami	r0!, {sl}
    98d0:	05000000 	streq	r0, [r0, #-0]
    98d4:	a2630201 	rsbge	r0, r3, #268435456	; 0x10000000
    98d8:	06000000 	streq	r0, [r0], -r0
    98dc:	00002765 	andeq	r2, r0, r5, ror #14
    98e0:	27a50600 	strcs	r0, [r5, r0, lsl #12]!
    98e4:	06020000 	streq	r0, [r2], -r0
    98e8:	00002715 	andeq	r2, r0, r5, lsl r7
    98ec:	25550604 	ldrbcs	r0, [r5, #-1540]	; 0xfffff9fc
    98f0:	00080000 	andeq	r0, r8, r0
    98f4:	00270103 	eoreq	r0, r7, r3, lsl #2
    98f8:	81680200 	cmnhi	r8, r0, lsl #4
    98fc:	05000000 	streq	r0, [r0, #-0]
    9900:	daa50201 	ble	fe94a10c <_estack+0xde94510c>
    9904:	06000000 	streq	r0, [r0], -r0
    9908:	0000281b 	andeq	r2, r0, fp, lsl r8
    990c:	256d067f 	strbcs	r0, [sp, #-1663]!	; 0xfffff981
    9910:	06000000 	streq	r0, [r0], -r0
    9914:	000028cc 	andeq	r2, r0, ip, asr #17
    9918:	27590601 	ldrbcs	r0, [r9, -r1, lsl #12]
    991c:	06020000 	streq	r0, [r2], -r0
    9920:	000028be 			; <UNDEFINED> instruction: 0x000028be
    9924:	26520603 	ldrbcs	r0, [r2], -r3, lsl #12
    9928:	00040000 	andeq	r0, r4, r0
    992c:	0028d803 	eoreq	sp, r8, r3, lsl #16
    9930:	adac0200 	sfmge	f0, 4, [ip]
    9934:	07000000 	streq	r0, [r0, -r0]
    9938:	013d0201 	teqeq	sp, r1, lsl #4
    993c:	00000125 	andeq	r0, r0, r5, lsr #2
    9940:	00272f06 	eoreq	r2, r7, r6, lsl #30
    9944:	1d067f00 	stcne	15, cr7, [r6, #-0]
    9948:	00000026 	andeq	r0, r0, r6, lsr #32
    994c:	00267906 	eoreq	r7, r6, r6, lsl #18
    9950:	b5060100 	strlt	r0, [r6, #-256]	; 0xffffff00
    9954:	02000026 	andeq	r0, r0, #38	; 0x26
    9958:	00280006 	eoreq	r0, r8, r6
    995c:	79060300 	stmdbvc	r6, {r8, r9}
    9960:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    9964:	00264106 	eoreq	r4, r6, r6, lsl #2
    9968:	da060500 	ble	18ad70 <__ccfg+0x16adc8>
    996c:	06000027 	streq	r0, [r0], -r7, lsr #32
    9970:	0027ed06 	eoreq	lr, r7, r6, lsl #26
    9974:	08000700 	stmdaeq	r0, {r8, r9, sl}
    9978:	00002605 	andeq	r2, r0, r5, lsl #12
    997c:	e5014702 	str	r4, [r1, #-1794]	; 0xfffff8fe
    9980:	07000000 	streq	r0, [r0, -r0]
    9984:	01590201 	cmpeq	r9, r1, lsl #4
    9988:	0000015f 	andeq	r0, r0, pc, asr r1
    998c:	0026a606 	eoreq	sl, r6, r6, lsl #12
    9990:	cf067f00 	svcgt	0x00067f00
    9994:	00000026 	andeq	r0, r0, r6, lsr #32
    9998:	00274b06 	eoreq	r4, r7, r6, lsl #22
    999c:	92060100 	andls	r0, r6, #0, 2
    99a0:	02000025 	andeq	r0, r0, #37	; 0x25
    99a4:	0027b506 	eoreq	fp, r7, r6, lsl #10
    99a8:	68060300 	stmdavs	r6, {r8, r9}
    99ac:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    99b0:	262e0800 	strtcs	r0, [lr], -r0, lsl #16
    99b4:	60020000 	andvs	r0, r2, r0
    99b8:	00013101 	andeq	r3, r1, r1, lsl #2
    99bc:	02010700 	andeq	r0, r1, #0, 14
    99c0:	019901b8 			; <UNDEFINED> instruction: 0x019901b8
    99c4:	e5060000 	str	r0, [r6, #-0]
    99c8:	7f000026 	svcvc	0x00000026
    99cc:	00281106 	eoreq	r1, r8, r6, lsl #2
    99d0:	76060a00 	strvc	r0, [r6], -r0, lsl #20
    99d4:	14000027 	strne	r0, [r0], #-39	; 0xffffffd9
    99d8:	00279b06 	eoreq	r9, r7, r6, lsl #22
    99dc:	41061500 	tstmi	r6, r0, lsl #10
    99e0:	16000027 	strne	r0, [r0], -r7, lsr #32
    99e4:	0027c706 	eoreq	ip, r7, r6, lsl #14
    99e8:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
    99ec:	00002610 	andeq	r2, r0, r0, lsl r6
    99f0:	6b01bf02 	blvs	79600 <__ccfg+0x59658>
    99f4:	09000001 	stmdbeq	r0, {r0}
    99f8:	00002857 	andeq	r2, r0, r7, asr r8
    99fc:	76010702 	strvc	r0, [r1], -r2, lsl #14
    9a00:	03000000 	movweq	r0, #0
    9a04:	0025a40a 	eoreq	sl, r5, sl, lsl #8
    9a08:	016a0200 	cmneq	sl, r0, lsl #4
    9a0c:	0000015f 	andeq	r0, r0, pc, asr r1
    9a10:	0001da01 	andeq	sp, r1, r1, lsl #20
    9a14:	26dd0b00 	ldrbcs	r0, [sp], r0, lsl #22
    9a18:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    9a1c:	0000015f 	andeq	r0, r0, pc, asr r1
    9a20:	00258a0b 	eoreq	r8, r5, fp, lsl #20
    9a24:	76690100 	strbtvc	r0, [r9], -r0, lsl #2
    9a28:	00000000 	andeq	r0, r0, r0
    9a2c:	00290509 	eoreq	r0, r9, r9, lsl #10
    9a30:	01320200 	teqeq	r2, r0, lsl #4
    9a34:	00000076 	andeq	r0, r0, r6, ror r0
    9a38:	28970c03 	ldmcs	r7, {r0, r1, sl, fp}
    9a3c:	72020000 	andvc	r0, r2, #0
    9a40:	000000a2 	andeq	r0, r0, r2, lsr #1
    9a44:	00000000 	andeq	r0, r0, r0
    9a48:	00000010 	andeq	r0, r0, r0, lsl r0
    9a4c:	c10d9c01 	tstgt	sp, r1, lsl #24
    9a50:	02000025 	andeq	r0, r0, #37	; 0x25
    9a54:	0000dab6 			; <UNDEFINED> instruction: 0x0000dab6
    9a58:	00000000 	andeq	r0, r0, r0
    9a5c:	00001800 	andeq	r1, r0, r0, lsl #16
    9a60:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    9a64:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    9a68:	000025fc 	strdeq	r2, [r0], -ip
    9a6c:	00da5201 	sbcseq	r5, sl, r1, lsl #4
    9a70:	3c750000 	ldclcc	0, cr0, [r5], #-0
    9a74:	0f000000 	svceq	0x00000000
    9a78:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9a7c:	00002b3c 	andeq	r2, r0, ip, lsr fp
    9a80:	0000004c 	andeq	r0, r0, ip, asr #32
    9a84:	026e9c01 	rsbeq	r9, lr, #256	; 0x100
    9a88:	c3100000 	tstgt	r0, #0
    9a8c:	9d000001 	stcls	0, cr0, [r0, #-4]
    9a90:	1000003c 	andne	r0, r0, ip, lsr r0
    9a94:	000001ce 	andeq	r0, r0, lr, asr #3
    9a98:	00003cbd 			; <UNDEFINED> instruction: 0x00003cbd
    9a9c:	002b4c11 	eoreq	r4, fp, r1, lsl ip
    9aa0:	00000e00 	andeq	r0, r0, r0, lsl #28
    9aa4:	01c31200 	biceq	r1, r3, r0, lsl #4
    9aa8:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
    9aac:	13000001 	movwne	r0, #1
    9ab0:	000001a5 	andeq	r0, r0, r5, lsr #3
    9ab4:	00002b4c 	andeq	r2, r0, ip, asr #22
    9ab8:	00000004 	andeq	r0, r0, r4
    9abc:	00007001 	andeq	r7, r0, r1
    9ac0:	00278014 	eoreq	r8, r7, r4, lsl r0
    9ac4:	01510200 	cmpeq	r1, r0, lsl #4
    9ac8:	00000125 	andeq	r0, r0, r5, lsr #2
    9acc:	00000000 	andeq	r0, r0, r0
    9ad0:	00000030 	andeq	r0, r0, r0, lsr r0
    9ad4:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
    9ad8:	d10e0000 	mrsle	r0, (UNDEF: 14)
    9adc:	01000027 	tsteq	r0, r7, lsr #32
    9ae0:	00012585 	andeq	r2, r1, r5, lsl #11
    9ae4:	003cf100 	eorseq	pc, ip, r0, lsl #2
    9ae8:	284b0b00 	stmdacs	fp, {r8, r9, fp}^
    9aec:	86010000 	strhi	r0, [r1], -r0
    9af0:	00000076 	andeq	r0, r0, r6, ror r0
    9af4:	0026f30e 	eoreq	pc, r6, lr, lsl #6
    9af8:	76870100 	strvc	r0, [r7], r0, lsl #2
    9afc:	11000000 	mrsne	r0, (UNDEF: 0)
    9b00:	1300003d 	movwne	r0, #61	; 0x3d
    9b04:	000001da 	ldrdeq	r0, [r0], -sl
    9b08:	00000000 	andeq	r0, r0, r0
    9b0c:	00000004 	andeq	r0, r0, r4
    9b10:	00158601 	andseq	r8, r5, r1, lsl #12
    9b14:	b2000000 	andlt	r0, r0, #0
    9b18:	00000001 	andeq	r0, r0, r1
    9b1c:	00287516 	eoreq	r7, r8, r6, lsl r5
    9b20:	01190200 	tsteq	r9, r0, lsl #4
    9b24:	00000076 	andeq	r0, r0, r6, ror r0
    9b28:	0002e803 	andeq	lr, r2, r3, lsl #16
    9b2c:	265f1700 	ldrbcs	r1, [pc], -r0, lsl #14
    9b30:	1b020000 	blne	89b38 <__ccfg+0x69b90>
    9b34:	00007601 	andeq	r7, r0, r1, lsl #12
    9b38:	df140000 	svcle	0x00140000
    9b3c:	02000025 	andeq	r0, r0, #37	; 0x25
    9b40:	019901c9 	orrseq	r0, r9, r9, asr #3
    9b44:	2b880000 	blcs	fe209b4c <_estack+0xde204b4c>
    9b48:	006c0000 	rsbeq	r0, ip, r0
    9b4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9b50:	00000365 	andeq	r0, r0, r5, ror #6
    9b54:	00263b0e 	eoreq	r3, r6, lr, lsl #22
    9b58:	99a80100 	stmibls	r8!, {r8}
    9b5c:	24000001 	strcs	r0, [r0], #-1
    9b60:	0b00003d 	bleq	9c5c <__exidx_end+0x6d54>
    9b64:	000026c6 	andeq	r2, r0, r6, asr #13
    9b68:	0076a901 	rsbseq	sl, r6, r1, lsl #18
    9b6c:	8c180000 	ldchi	0, cr0, [r8], {-0}
    9b70:	01000028 	tsteq	r0, r8, lsr #32
    9b74:	000076aa 	andeq	r7, r0, sl, lsr #13
    9b78:	19540100 	ldmdbne	r4, {r8}^
    9b7c:	000001a5 	andeq	r0, r0, r5, lsr #3
    9b80:	00002b8a 	andeq	r2, r0, sl, lsl #23
    9b84:	00000fc0 	andeq	r0, r0, r0, asr #31
    9b88:	ca1aa901 	bgt	6b3f94 <__ccfg+0x693fec>
    9b8c:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    9b90:	d800002b 	stmdale	r0, {r0, r1, r3, r5}
    9b94:	0100000f 	tsteq	r0, pc
    9b98:	00035baa 	andeq	r5, r3, sl, lsr #23
    9b9c:	0fd81b00 	svceq	0x00d81b00
    9ba0:	db100000 	blle	409ba8 <__ccfg+0x3e9c00>
    9ba4:	81000002 	tsthi	r0, r2
    9ba8:	0000003d 	andeq	r0, r0, sp, lsr r0
    9bac:	2ba21500 	blcs	fe88efb4 <_estack+0xde889fb4>
    9bb0:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9bb4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9bb8:	0000268a 	andeq	r2, r0, sl, lsl #13
    9bbc:	72018302 	andvc	r8, r1, #134217728	; 0x8000000
    9bc0:	03000003 	movweq	r0, #3
    9bc4:	0d020102 	stfeqs	f0, [r2, #-8]
    9bc8:	0900000c 	stmdbeq	r0, {r2, r3}
    9bcc:	000028e6 	andeq	r2, r0, r6, ror #17
    9bd0:	7201f002 	andvc	pc, r1, #2
    9bd4:	03000003 	movweq	r0, #3
    9bd8:	001b0e1c 	andseq	r0, fp, ip, lsl lr
    9bdc:	02430200 	subeq	r0, r3, #0, 4
    9be0:	00002bf4 	strdeq	r2, [r0], -r4
    9be4:	00000016 	andeq	r0, r0, r6, lsl r0
    9be8:	651d9c01 	ldrvs	r9, [sp, #-3073]	; 0xfffff3ff
    9bec:	f6000003 			; <UNDEFINED> instruction: 0xf6000003
    9bf0:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    9bf4:	01000000 	mrseq	r0, (UNDEF: 0)
    9bf8:	0003b5e2 	andeq	fp, r3, r2, ror #11
    9bfc:	2bfa1500 	blcs	ffe8f004 <_estack+0xdfe8a004>
    9c00:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9c04:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9c08:	00000379 	andeq	r0, r0, r9, ror r3
    9c0c:	00002bfe 	strdeq	r2, [r0], -lr
    9c10:	00000004 	andeq	r0, r0, r4
    9c14:	0215e301 	andseq	lr, r5, #67108864	; 0x4000000
    9c18:	e800002c 	stmda	r0, {r2, r3, r5}
    9c1c:	00000002 	andeq	r0, r0, r2
    9c20:	05a70000 	streq	r0, [r7, #0]!
    9c24:	00040000 	andeq	r0, r4, r0
    9c28:	00002f2e 	andeq	r2, r0, lr, lsr #30
    9c2c:	16a50104 	strtne	r0, [r5], r4, lsl #2
    9c30:	dd010000 	stcle	0, cr0, [r1, #-0]
    9c34:	9a000029 	bls	9ce0 <__exidx_end+0x6dd8>
    9c38:	28000017 	stmdacs	r0, {r0, r1, r2, r4}
    9c3c:	00000010 	andeq	r0, r0, r0, lsl r0
    9c40:	bf000000 	svclt	0x00000000
    9c44:	02000068 	andeq	r0, r0, #104	; 0x68
    9c48:	039c0601 	orrseq	r0, ip, #1048576	; 0x100000
    9c4c:	4f030000 	svcmi	0x00030000
    9c50:	03000022 	movweq	r0, #34	; 0x22
    9c54:	0000371d 	andeq	r3, r0, sp, lsl r7
    9c58:	08010200 	stmdaeq	r1, {r9}
    9c5c:	0000039a 	muleq	r0, sl, r3
    9c60:	f8050202 			; <UNDEFINED> instruction: 0xf8050202
    9c64:	03000003 	movweq	r0, #3
    9c68:	0000213d 	andeq	r2, r0, sp, lsr r1
    9c6c:	00502b03 	subseq	r2, r0, r3, lsl #22
    9c70:	02020000 	andeq	r0, r2, #0
    9c74:	00025807 	andeq	r5, r2, r7, lsl #16
    9c78:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9c7c:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    9c80:	00180603 	andseq	r0, r8, r3, lsl #12
    9c84:	69410300 	stmdbvs	r1, {r8, r9}^
    9c88:	02000000 	andeq	r0, r0, #0
    9c8c:	00850704 	addeq	r0, r5, r4, lsl #14
    9c90:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9c94:	0000ab05 	andeq	sl, r0, r5, lsl #22
    9c98:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9c9c:	00000080 	andeq	r0, r0, r0, lsl #1
    9ca0:	69050404 	stmdbvs	r5, {r2, sl}
    9ca4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    9ca8:	008a0704 	addeq	r0, sl, r4, lsl #14
    9cac:	51030000 	mrspl	r0, (UNDEF: 3)
    9cb0:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    9cb4:	00002c14 	andeq	r2, r0, r4, lsl ip
    9cb8:	213f0300 	teqcs	pc, r0, lsl #6
    9cbc:	1a040000 	bne	109cc4 <__ccfg+0xe9d1c>
    9cc0:	00000045 	andeq	r0, r0, r5, asr #32
    9cc4:	00180803 	andseq	r0, r8, r3, lsl #16
    9cc8:	5e200400 	cdppl	4, 2, cr0, cr0, cr0, {0}
    9ccc:	05000000 	streq	r0, [r0, #-0]
    9cd0:	00002956 	andeq	r2, r0, r6, asr r9
    9cd4:	e6038901 	str	r8, [r3], -r1, lsl #18
    9cd8:	06000000 	streq	r0, [r0], -r0
    9cdc:	00002938 	andeq	r2, r0, r8, lsr r9
    9ce0:	00a28901 	adceq	r8, r2, r1, lsl #18
    9ce4:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
    9ce8:	01000029 	tsteq	r0, r9, lsr #32
    9cec:	0000a289 	andeq	sl, r0, r9, lsl #5
    9cf0:	2a190600 	bcs	64b4f8 <__ccfg+0x62b550>
    9cf4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9cf8:	000000a2 	andeq	r0, r0, r2, lsr #1
    9cfc:	002a0d07 	eoreq	r0, sl, r7, lsl #26
    9d00:	e68c0100 	str	r0, [ip], r0, lsl #2
    9d04:	00000000 	andeq	r0, r0, r0
    9d08:	0d020102 	stfeqs	f0, [r2, #-8]
    9d0c:	0800000c 	stmdaeq	r0, {r2, r3}
    9d10:	000029b7 			; <UNDEFINED> instruction: 0x000029b7
    9d14:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9d18:	2a030000 	bcs	c9d20 <__ccfg+0xa9d78>
    9d1c:	06000001 	streq	r0, [r0], -r1
    9d20:	00002938 	andeq	r2, r0, r8, lsr r9
    9d24:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9d28:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
    9d2c:	0100002a 	tsteq	r0, sl, lsr #32
    9d30:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    9d34:	29510700 	ldmdbcs	r1, {r8, r9, sl}^
    9d38:	ab010000 	blge	49d40 <__ccfg+0x29d98>
    9d3c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d40:	002a0d07 	eoreq	r0, sl, r7, lsl #26
    9d44:	e6ad0100 	strt	r0, [sp], r0, lsl #2
    9d48:	00000000 	andeq	r0, r0, r0
    9d4c:	0000ad09 	andeq	sl, r0, r9, lsl #26
    9d50:	002c0c00 	eoreq	r0, ip, r0, lsl #24
    9d54:	00002800 	andeq	r2, r0, r0, lsl #16
    9d58:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    9d5c:	0a000001 	beq	9d68 <__exidx_end+0x6e60>
    9d60:	000000b9 	strheq	r0, [r0], -r9
    9d64:	00003d94 	muleq	r0, r4, sp
    9d68:	0000c40a 	andeq	ip, r0, sl, lsl #8
    9d6c:	003dd900 	eorseq	sp, sp, r0, lsl #18
    9d70:	00da0b00 	sbcseq	r0, sl, r0, lsl #22
    9d74:	3e1e0000 	cdpcc	0, 1, cr0, cr14, cr0, {0}
    9d78:	cf0c0000 	svcgt	0x000c0000
    9d7c:	04000000 	streq	r0, [r0], #-0
    9d80:	002c160d 	eoreq	r1, ip, sp, lsl #12
    9d84:	00059400 	andeq	r9, r5, r0, lsl #8
    9d88:	2c2e0e00 	stccs	14, cr0, [lr], #-0
    9d8c:	059f0000 	ldreq	r0, [pc]	; 9d94 <__exidx_end+0x6e8c>
    9d90:	0f000000 	svceq	0x00000000
    9d94:	00001d40 	andeq	r1, r0, r0, asr #26
    9d98:	3401ca01 	strcc	ip, [r1], #-2561	; 0xfffff5ff
    9d9c:	0800002c 	stmdaeq	r0, {r2, r3, r5}
    9da0:	01000000 	mrseq	r0, (UNDEF: 0)
    9da4:	0001d19c 	muleq	r1, ip, r1
    9da8:	078b1000 	streq	r1, [fp, r0]
    9dac:	42020000 	andmi	r0, r2, #0
    9db0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9db4:	00003e44 	andeq	r3, r0, r4, asr #28
    9db8:	00291810 	eoreq	r1, r9, r0, lsl r8
    9dbc:	a2420200 	subge	r0, r2, #0, 4
    9dc0:	65000000 	strvs	r0, [r0, #-0]
    9dc4:	1000003e 	andne	r0, r0, lr, lsr r0
    9dc8:	000029af 	andeq	r2, r0, pc, lsr #19
    9dcc:	00a24302 	adceq	r4, r2, r2, lsl #6
    9dd0:	3e860000 	cdpcc	0, 8, cr0, cr6, cr0, {0}
    9dd4:	3c110000 	ldccc	0, cr0, [r1], {-0}
    9dd8:	2a00002c 	bcs	9e90 <__exidx_end+0x6f88>
    9ddc:	12000001 	andne	r0, r0, #1
    9de0:	f3035101 	vrhadd.u8	d5, d3, d1
    9de4:	01125201 	tsteq	r2, r1, lsl #4
    9de8:	01f30750 	mvnseq	r0, r0, asr r7
    9dec:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    9df0:	0f000022 	svceq	0x00000022
    9df4:	000029c9 	andeq	r2, r0, r9, asr #19
    9df8:	0001df01 	andeq	sp, r1, r1, lsl #30
    9dfc:	22000000 	andcs	r0, r0, #0
    9e00:	01000000 	mrseq	r0, (UNDEF: 0)
    9e04:	0002ea9c 	muleq	r2, ip, sl
    9e08:	078b1000 	streq	r1, [fp, r0]
    9e0c:	57020000 	strpl	r0, [r2, -r0]
    9e10:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e14:	00003ea7 	andeq	r3, r0, r7, lsr #29
    9e18:	00291810 	eoreq	r1, r9, r0, lsl r8
    9e1c:	a2570200 	subsge	r0, r7, #0, 4
    9e20:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    9e24:	1000003e 	andne	r0, r0, lr, lsr r0
    9e28:	000029f8 	strdeq	r2, [r0], -r8
    9e2c:	00a25802 	adceq	r5, r2, r2, lsl #16
    9e30:	3ee90000 	cdpcc	0, 14, cr0, cr9, cr0, {0}
    9e34:	72100000 	andsvc	r0, r0, #0
    9e38:	02000029 	andeq	r0, r0, #41	; 0x29
    9e3c:	0000a258 	andeq	sl, r0, r8, asr r2
    9e40:	003f3400 	eorseq	r3, pc, r0, lsl #8
    9e44:	2a011300 	bcs	4ea4c <__ccfg+0x2eaa4>
    9e48:	5a020000 	bpl	89e50 <__ccfg+0x69ea8>
    9e4c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e50:	00003f55 	andeq	r3, r0, r5, asr pc
    9e54:	00297d13 	eoreq	r7, r9, r3, lsl sp
    9e58:	a25b0200 	subsge	r0, fp, #0, 4
    9e5c:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
    9e60:	1100003f 	tstne	r0, pc, lsr r0
    9e64:	00000000 	andeq	r0, r0, r0
    9e68:	0000012a 	andeq	r0, r0, sl, lsr #2
    9e6c:	45510112 	ldrbmi	r0, [r1, #-274]	; 0xfffffeee
    9e70:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9e74:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9e78:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9e7c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9e80:	13160001 	tstne	r6, #1
    9e84:	f3302440 	vshl.u64	q1, q0, q0
    9e88:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e8c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    9e90:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9e94:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9e98:	f3131600 	vmax.u16	d1, d3, d0
    9e9c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9ea0:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    9ea4:	0001282e 	andeq	r2, r1, lr, lsr #16
    9ea8:	01f31316 	mvnseq	r1, r6, lsl r3
    9eac:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    9eb0:	13160001 	tstne	r6, #1
    9eb4:	50011221 	andpl	r1, r1, r1, lsr #4
    9eb8:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
    9ebc:	01f32431 	mvnseq	r2, r1, lsr r4
    9ec0:	80232250 	eorhi	r2, r3, r0, asr r2
    9ec4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9ec8:	01f32431 	mvnseq	r2, r1, lsr r4
    9ecc:	01f32250 	mvnseq	r2, r0, asr r2
    9ed0:	30254052 	eorcc	r4, r5, r2, asr r0
    9ed4:	00012829 	andeq	r2, r1, r9, lsr #16
    9ed8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    9edc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9ee0:	01f32431 	mvnseq	r2, r1, lsr r4
    9ee4:	80232250 	eorhi	r2, r3, r0, asr r2
    9ee8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9eec:	01f32431 	mvnseq	r2, r1, lsr r4
    9ef0:	01f32250 	mvnseq	r2, r0, asr r2
    9ef4:	30254052 	eorcc	r4, r5, r2, asr r0
    9ef8:	00012829 	andeq	r2, r1, r9, lsr #16
    9efc:	01f31316 	mvnseq	r1, r6, lsl r3
    9f00:	30254052 	eorcc	r4, r5, r2, asr r0
    9f04:	0001282e 	andeq	r2, r1, lr, lsr #16
    9f08:	00001316 	andeq	r1, r0, r6, lsl r3
    9f0c:	0029900f 	eoreq	r9, r9, pc
    9f10:	01f60100 	mvnseq	r0, r0, lsl #2
    9f14:	00000000 	andeq	r0, r0, r0
    9f18:	0000002e 	andeq	r0, r0, lr, lsr #32
    9f1c:	041f9c01 	ldreq	r9, [pc], #-3073	; 9f24 <__exidx_end+0x701c>
    9f20:	8b100000 	blhi	409f28 <__ccfg+0x3e9f80>
    9f24:	02000007 	andeq	r0, r0, #7
    9f28:	0000a283 	andeq	sl, r0, r3, lsl #5
    9f2c:	00403500 	subeq	r3, r0, r0, lsl #10
    9f30:	29181000 	ldmdbcs	r8, {ip}
    9f34:	83020000 	movwhi	r0, #8192	; 0x2000
    9f38:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f3c:	00004056 	andeq	r4, r0, r6, asr r0
    9f40:	0029f810 	eoreq	pc, r9, r0, lsl r8	; <UNPREDICTABLE>
    9f44:	a2840200 	addge	r0, r4, #0, 4
    9f48:	77000000 	strvc	r0, [r0, -r0]
    9f4c:	10000040 	andne	r0, r0, r0, asr #32
    9f50:	00002986 	andeq	r2, r0, r6, lsl #19
    9f54:	00a28402 	adceq	r8, r2, r2, lsl #8
    9f58:	40c80000 	sbcmi	r0, r8, r0
    9f5c:	7d100000 	ldcvc	0, cr0, [r0, #-0]
    9f60:	02000029 	andeq	r0, r0, #41	; 0x29
    9f64:	00009785 	andeq	r9, r0, r5, lsl #15
    9f68:	00411900 	subeq	r1, r1, r0, lsl #18
    9f6c:	2a011300 	bcs	4eb74 <__ccfg+0x2ebcc>
    9f70:	87020000 	strhi	r0, [r2, -r0]
    9f74:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f78:	00004139 	andeq	r4, r0, r9, lsr r1
    9f7c:	00297213 	eoreq	r7, r9, r3, lsl r2
    9f80:	a2880200 	addge	r0, r8, #0, 4
    9f84:	df000000 	svcle	0x00000000
    9f88:	11000041 	tstne	r0, r1, asr #32
    9f8c:	00000000 	andeq	r0, r0, r0
    9f90:	0000012a 	andeq	r0, r0, sl, lsr #2
    9f94:	40510112 	subsmi	r0, r1, r2, lsl r1
    9f98:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9f9c:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9fa0:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9fa4:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9fa8:	8000000f 	andhi	r0, r0, pc
    9fac:	0001282b 	andeq	r2, r1, fp, lsr #16
    9fb0:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
    9fb4:	0294007d 	addseq	r0, r4, #125	; 0x7d
    9fb8:	1affff0a 	bne	9be8 <__exidx_end+0x6ce0>
    9fbc:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9fc0:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    9fc4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9fc8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9fcc:	8000000f 	andhi	r0, r0, pc
    9fd0:	0001282b 	andeq	r2, r1, fp, lsr #16
    9fd4:	21241316 			; <UNDEFINED> instruction: 0x21241316
    9fd8:	63500112 	cmpvs	r0, #-2147483644	; 0x80000004
    9fdc:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9fe0:	5001f324 	andpl	pc, r1, r4, lsr #6
    9fe4:	04802322 	streq	r2, [r0], #802	; 0x322
    9fe8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9fec:	5001f324 	andpl	pc, r1, r4, lsr #6
    9ff0:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    9ff4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9ff8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9ffc:	01282c80 	smlawbeq	r8, r0, ip, r2
    a000:	23131600 	tstcs	r3, #0, 12
    a004:	01f30484 	mvnseq	r0, r4, lsl #9
    a008:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    a00c:	23225001 			; <UNDEFINED> instruction: 0x23225001
    a010:	01f30480 	mvnseq	r0, r0, lsl #9
    a014:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    a018:	f3225001 	vhadd.u32	d5, d2, d1
    a01c:	4b405301 	blmi	101ec28 <__ccfg+0xffec80>
    a020:	0f0c2224 	svceq	0x000c2224
    a024:	2c800000 	stccs	0, cr0, [r0], {0}
    a028:	16000128 	strne	r0, [r0], -r8, lsr #2
    a02c:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    a030:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    a034:	00000f0c 	andeq	r0, r0, ip, lsl #30
    a038:	01282b80 	smlawbeq	r8, r0, fp, r2
    a03c:	00131600 	andseq	r1, r3, r0, lsl #12
    a040:	293e1400 	ldmdbcs	lr!, {sl, ip}
    a044:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    a048:	00009702 	andeq	r9, r0, r2, lsl #14
    a04c:	00000000 	andeq	r0, r0, r0
    a050:	00003400 	andeq	r3, r0, r0, lsl #8
    a054:	d29c0100 	addsle	r0, ip, #0, 2
    a058:	10000004 	andne	r0, r0, r4
    a05c:	0000078b 	andeq	r0, r0, fp, lsl #15
    a060:	00a2af02 	adceq	sl, r2, r2, lsl #30
    a064:	423f0000 	eorsmi	r0, pc, #0
    a068:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
    a06c:	02000029 	andeq	r0, r0, #41	; 0x29
    a070:	0000a2af 	andeq	sl, r0, pc, lsr #5
    a074:	00426000 	subeq	r6, r2, r0
    a078:	29f81000 	ldmibcs	r8!, {ip}^
    a07c:	af020000 	svcge	0x00020000
    a080:	000000a2 	andeq	r0, r0, r2, lsr #1
    a084:	00004281 	andeq	r4, r0, r1, lsl #5
    a088:	002a0113 	eoreq	r0, sl, r3, lsl r1
    a08c:	a2b10200 	adcsge	r0, r1, #0, 4
    a090:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    a094:	13000042 	movwne	r0, #66	; 0x42
    a098:	00002969 	andeq	r2, r0, r9, ror #18
    a09c:	0097b202 	addseq	fp, r7, r2, lsl #4
    a0a0:	42f80000 	rscsmi	r0, r8, #0
    a0a4:	ed150000 	ldc	0, cr0, [r5, #-0]
    a0a8:	00000000 	andeq	r0, r0, r0
    a0ac:	1a000000 	bne	a0b4 <__exidx_end+0x71ac>
    a0b0:	02000000 	andeq	r0, r0, #0
    a0b4:	01080cca 	smlabteq	r8, sl, ip, r0
    a0b8:	0a020000 	beq	8a0c0 <__ccfg+0x6a118>
    a0bc:	000000fd 	strdeq	r0, [r0], -sp
    a0c0:	00004310 	andeq	r4, r0, r0, lsl r3
    a0c4:	00000016 	andeq	r0, r0, r6, lsl r0
    a0c8:	00001a00 	andeq	r1, r0, r0, lsl #20
    a0cc:	01130b00 	tsteq	r3, r0, lsl #22
    a0d0:	434a0000 	movtmi	r0, #40960	; 0xa000
    a0d4:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    a0d8:	63000001 	movwvs	r0, #1
    a0dc:	0d000043 	stceq	0, cr0, [r0, #-268]	; 0xfffffef4
    a0e0:	00000000 	andeq	r0, r0, r0
    a0e4:	00000594 	muleq	r0, r4, r5
    a0e8:	0000000d 	andeq	r0, r0, sp
    a0ec:	00059f00 	andeq	r9, r5, r0, lsl #30
    a0f0:	00000000 	andeq	r0, r0, r0
    a0f4:	00292014 	eoreq	r2, r9, r4, lsl r0
    a0f8:	021d0100 	andseq	r0, sp, #0, 2
    a0fc:	00000097 	muleq	r0, r7, r0
    a100:	00000000 	andeq	r0, r0, r0
    a104:	00000040 	andeq	r0, r0, r0, asr #32
    a108:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
    a10c:	8b100000 	blhi	40a114 <__ccfg+0x3ea16c>
    a110:	02000007 	andeq	r0, r0, #7
    a114:	0000a2dd 	ldrdeq	sl, [r0], -sp
    a118:	00437a00 	subeq	r7, r3, r0, lsl #20
    a11c:	29181000 	ldmdbcs	r8, {ip}
    a120:	dd020000 	stcle	0, cr0, [r2, #-0]
    a124:	000000a2 	andeq	r0, r0, r2, lsr #1
    a128:	0000439b 	muleq	r0, fp, r3
    a12c:	0029f810 	eoreq	pc, r9, r0, lsl r8	; <UNPREDICTABLE>
    a130:	a2de0200 	sbcsge	r0, lr, #0, 4
    a134:	bc000000 	stclt	0, cr0, [r0], {-0}
    a138:	10000043 	andne	r0, r0, r3, asr #32
    a13c:	00002986 	andeq	r2, r0, r6, lsl #19
    a140:	00a2de02 	adceq	sp, r2, r2, lsl #28
    a144:	43ff0000 	mvnsmi	r0, #0
    a148:	01130000 	tsteq	r3, r0
    a14c:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a150:	0000a2e0 	andeq	sl, r0, r0, ror #5
    a154:	00444200 	subeq	r4, r4, r0, lsl #4
    a158:	29691300 	stmdbcs	r9!, {r8, r9, ip}^
    a15c:	e1020000 	mrs	r0, (UNDEF: 2)
    a160:	00000097 	muleq	r0, r7, r0
    a164:	0000449d 	muleq	r0, sp, r4
    a168:	0000ed15 	andeq	lr, r0, r5, lsl sp
    a16c:	00000000 	andeq	r0, r0, r0
    a170:	00001a00 	andeq	r1, r0, r0, lsl #20
    a174:	0cfa0200 	lfmeq	f0, 2, [sl]
    a178:	00000108 	andeq	r0, r0, r8, lsl #2
    a17c:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
    a180:	44c00000 	strbmi	r0, [r0], #0
    a184:	00160000 	andseq	r0, r6, r0
    a188:	1a000000 	bne	a190 <__exidx_end+0x7288>
    a18c:	0b000000 	bleq	a194 <__exidx_end+0x728c>
    a190:	00000113 	andeq	r0, r0, r3, lsl r1
    a194:	00004500 	andeq	r4, r0, r0, lsl #10
    a198:	00011e0b 	andeq	r1, r1, fp, lsl #28
    a19c:	00451900 	subeq	r1, r5, r0, lsl #18
    a1a0:	00000d00 	andeq	r0, r0, r0, lsl #26
    a1a4:	05940000 	ldreq	r0, [r4]
    a1a8:	000d0000 	andeq	r0, sp, r0
    a1ac:	9f000000 	svcls	0x00000000
    a1b0:	00000005 	andeq	r0, r0, r5
    a1b4:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    a1b8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    a1bc:	0000a26a 	andeq	sl, r0, sl, ror #4
    a1c0:	19171700 	ldmdbne	r7, {r8, r9, sl, ip}
    a1c4:	84050000 	strhi	r0, [r5], #-0
    a1c8:	000000a2 	andeq	r0, r0, r2, lsr #1
    a1cc:	0008bf00 	andeq	fp, r8, r0, lsl #30
    a1d0:	82000400 	andhi	r0, r0, #0, 8
    a1d4:	04000030 	streq	r0, [r0], #-48	; 0xffffffd0
    a1d8:	0016a501 	andseq	sl, r6, r1, lsl #10
    a1dc:	2aa60100 	bcs	fe98a5e4 <_estack+0xde9855e4>
    a1e0:	179a0000 	ldrne	r0, [sl, r0]
    a1e4:	10780000 	rsbsne	r0, r8, r0
    a1e8:	00000000 	andeq	r0, r0, r0
    a1ec:	6ae10000 	bvs	ff84a1f4 <_estack+0xdf8451f4>
    a1f0:	01020000 	mrseq	r0, (UNDEF: 2)
    a1f4:	00039c06 	andeq	r9, r3, r6, lsl #24
    a1f8:	224f0300 	subcs	r0, pc, #0, 6
    a1fc:	1d030000 	stcne	0, cr0, [r3, #-0]
    a200:	00000037 	andeq	r0, r0, r7, lsr r0
    a204:	9a080102 	bls	20a614 <__ccfg+0x1ea66c>
    a208:	03000003 	movweq	r0, #3
    a20c:	00002cbc 			; <UNDEFINED> instruction: 0x00002cbc
    a210:	00492903 	subeq	r2, r9, r3, lsl #18
    a214:	02020000 	andeq	r0, r2, #0
    a218:	0003f805 	andeq	pc, r3, r5, lsl #16
    a21c:	213d0300 	teqcs	sp, r0, lsl #6
    a220:	2b030000 	blcs	ca228 <__ccfg+0xaa280>
    a224:	0000005b 	andeq	r0, r0, fp, asr r0
    a228:	58070202 	stmdapl	r7, {r1, r9}
    a22c:	03000002 	movweq	r0, #2
    a230:	0000169b 	muleq	r0, fp, r6
    a234:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    a238:	04020000 	streq	r0, [r2], #-0
    a23c:	0000b005 	andeq	fp, r0, r5
    a240:	18060300 	stmdane	r6, {r8, r9}
    a244:	41030000 	mrsmi	r0, (UNDEF: 3)
    a248:	0000007f 	andeq	r0, r0, pc, ror r0
    a24c:	85070402 	strhi	r0, [r7, #-1026]	; 0xfffffbfe
    a250:	02000000 	andeq	r0, r0, #0
    a254:	00ab0508 	adceq	r0, fp, r8, lsl #10
    a258:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a25c:	00008007 	andeq	r8, r0, r7
    a260:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a264:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a268:	8a070402 	bhi	1cb278 <__ccfg+0x1ab2d0>
    a26c:	03000000 	movweq	r0, #0
    a270:	00002251 	andeq	r2, r0, r1, asr r2
    a274:	002c1404 	eoreq	r1, ip, r4, lsl #8
    a278:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    a27c:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    a280:	00003e19 	andeq	r3, r0, r9, lsl lr
    a284:	213f0300 	teqcs	pc, r0, lsl #6
    a288:	1a040000 	bne	10a290 <__ccfg+0xea2e8>
    a28c:	00000050 	andeq	r0, r0, r0, asr r0
    a290:	00169d03 	andseq	r9, r6, r3, lsl #26
    a294:	621f0400 	andsvs	r0, pc, #0, 8
    a298:	03000000 	movweq	r0, #0
    a29c:	00001808 	andeq	r1, r0, r8, lsl #16
    a2a0:	00742004 	rsbseq	r2, r4, r4
    a2a4:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    a2a8:	05000023 	streq	r0, [r0, #-35]	; 0xffffffdd
    a2ac:	0000e433 	andeq	lr, r0, r3, lsr r4
    a2b0:	ea040500 	b	10b6b8 <__ccfg+0xeb710>
    a2b4:	06000000 	streq	r0, [r0], -r0
    a2b8:	00f10405 	rscseq	r0, r1, r5, lsl #8
    a2bc:	fc070000 	stc2	0, cr0, [r7], {-0}
    a2c0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a2c4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a2c8:	239e0300 	orrscs	r0, lr, #0, 6
    a2cc:	42060000 	andmi	r0, r6, #0
    a2d0:	00000107 	andeq	r0, r0, r7, lsl #2
    a2d4:	010d0405 	tsteq	sp, r5, lsl #8
    a2d8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a2dc:	26000000 	strcs	r0, [r0], -r0
    a2e0:	08000001 	stmdaeq	r0, {r0}
    a2e4:	00000126 	andeq	r0, r0, r6, lsr #2
    a2e8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a2ec:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a2f0:	05000000 	streq	r0, [r0, #-0]
    a2f4:	0000a204 	andeq	sl, r0, r4, lsl #4
    a2f8:	24c70300 	strbcs	r0, [r7], #768	; 0x300
    a2fc:	46060000 	strmi	r0, [r6], -r0
    a300:	00000137 	andeq	r0, r0, r7, lsr r1
    a304:	013d0405 	teqeq	sp, r5, lsl #8
    a308:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    a30c:	03000000 	movweq	r0, #0
    a310:	00002533 	andeq	r2, r0, r3, lsr r5
    a314:	01374806 	teqeq	r7, r6, lsl #16
    a318:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
    a31c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a320:	0001584a 	andeq	r5, r1, sl, asr #16
    a324:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    a328:	09000001 	stmdbeq	r0, {r0}
    a32c:	000000ce 	andeq	r0, r0, lr, asr #1
    a330:	0000016d 	andeq	r0, r0, sp, ror #2
    a334:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a338:	df030000 	svcle	0x00030000
    a33c:	06000021 	streq	r0, [r0], -r1, lsr #32
    a340:	0001374c 	andeq	r3, r1, ip, asr #14
    a344:	21480300 	mrscs	r0, (UNDEF: 120)
    a348:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    a34c:	00000107 	andeq	r0, r0, r7, lsl #2
    a350:	0021cf03 	eoreq	ip, r1, r3, lsl #30
    a354:	e4510600 	ldrb	r0, [r1], #-1536	; 0xfffffa00
    a358:	03000000 	movweq	r0, #0
    a35c:	0000204b 	andeq	r2, r0, fp, asr #32
    a360:	01995306 	orrseq	r5, r9, r6, lsl #6
    a364:	04050000 	streq	r0, [r5], #-0
    a368:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    a36c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a370:	0001b800 	andeq	fp, r1, r0, lsl #16
    a374:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    a378:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    a37c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a380:	000000b8 	strheq	r0, [r0], -r8
    a384:	b8040500 	stmdalt	r4, {r8, sl}
    a388:	03000000 	movweq	r0, #0
    a38c:	000023c2 	andeq	r2, r0, r2, asr #7
    a390:	01c95706 	biceq	r5, r9, r6, lsl #14
    a394:	04050000 	streq	r0, [r5], #-0
    a398:	000001cf 	andeq	r0, r0, pc, asr #3
    a39c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a3a0:	0001e300 	andeq	lr, r1, r0, lsl #6
    a3a4:	01e30800 	mvneq	r0, r0, lsl #16
    a3a8:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a3ac:	00000000 	andeq	r0, r0, r0
    a3b0:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    a3b4:	02030000 	andeq	r0, r3, #0
    a3b8:	06000022 	streq	r0, [r0], -r2, lsr #32
    a3bc:	0001c95a 	andeq	ip, r1, sl, asr r9
    a3c0:	22cb0300 	sbccs	r0, fp, #0, 6
    a3c4:	5d060000 	stcpl	0, cr0, [r6, #-0]
    a3c8:	000001c9 	andeq	r0, r0, r9, asr #3
    a3cc:	00205d03 	eoreq	r5, r0, r3, lsl #26
    a3d0:	c9600600 	stmdbgt	r0!, {r9, sl}^
    a3d4:	03000001 	movweq	r0, #1
    a3d8:	000023ed 	andeq	r2, r0, sp, ror #7
    a3dc:	00e46306 	rsceq	r6, r4, r6, lsl #6
    a3e0:	83030000 	movwhi	r0, #12288	; 0x3000
    a3e4:	06000020 	streq	r0, [r0], -r0, lsr #32
    a3e8:	00022065 	andeq	r2, r2, r5, rrx
    a3ec:	26040500 	strcs	r0, [r4], -r0, lsl #10
    a3f0:	07000002 	streq	r0, [r0, -r2]
    a3f4:	00000231 	andeq	r0, r0, r1, lsr r2
    a3f8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a3fc:	44030000 	strmi	r0, [r3], #-0
    a400:	06000025 	streq	r0, [r0], -r5, lsr #32
    a404:	00022067 	andeq	r2, r2, r7, rrx
    a408:	23390300 	teqcs	r9, #0, 6
    a40c:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    a410:	000000eb 	andeq	r0, r0, fp, ror #1
    a414:	00251203 	eoreq	r1, r5, r3, lsl #4
    a418:	eb6b0600 	bl	1acbc20 <__ccfg+0x1aabc78>
    a41c:	03000000 	movweq	r0, #0
    a420:	000022e7 	andeq	r2, r0, r7, ror #5
    a424:	00eb6d06 	rsceq	r6, fp, r6, lsl #26
    a428:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    a42c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a430:	0000eb6f 	andeq	lr, r0, pc, ror #22
    a434:	064c0b00 	strbeq	r0, [ip], -r0, lsl #22
    a438:	0003557a 	andeq	r5, r3, sl, ror r5
    a43c:	229d0c00 	addscs	r0, sp, #0, 24
    a440:	7c060000 	stcvc	0, cr0, [r6], {-0}
    a444:	000000fc 	strdeq	r0, [r0], -ip
    a448:	25050c00 	strcs	r0, [r5, #-3072]	; 0xfffff400
    a44c:	7d060000 	stcvc	0, cr0, [r6, #-0]
    a450:	0000012c 	andeq	r0, r0, ip, lsr #2
    a454:	22c10c04 	sbccs	r0, r1, #4, 24	; 0x400
    a458:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    a45c:	00000142 	andeq	r0, r0, r2, asr #2
    a460:	242c0c08 	strtcs	r0, [ip], #-3080	; 0xfffff3f8
    a464:	7f060000 	svcvc	0x00060000
    a468:	0000014d 	andeq	r0, r0, sp, asr #2
    a46c:	243e0c0c 	ldrtcs	r0, [lr], #-3084	; 0xfffff3f4
    a470:	80060000 	andhi	r0, r6, r0
    a474:	0000016d 	andeq	r0, r0, sp, ror #2
    a478:	24500c10 	ldrbcs	r0, [r0], #-3088	; 0xfffff3f0
    a47c:	81060000 	mrshi	r0, (UNDEF: 6)
    a480:	00000178 	andeq	r0, r0, r8, ror r1
    a484:	219b0c14 	orrscs	r0, fp, r4, lsl ip
    a488:	82060000 	andhi	r0, r6, #0
    a48c:	00000183 	andeq	r0, r0, r3, lsl #3
    a490:	22b60c18 	adcscs	r0, r6, #24, 24	; 0x1800
    a494:	83060000 	movwhi	r0, #24576	; 0x6000
    a498:	0000018e 	andeq	r0, r0, lr, lsl #3
    a49c:	24070c1c 	strcs	r0, [r7], #-3100	; 0xfffff3e4
    a4a0:	84060000 	strhi	r0, [r6], #-0
    a4a4:	000001be 			; <UNDEFINED> instruction: 0x000001be
    a4a8:	223e0c20 	eorscs	r0, lr, #32, 24	; 0x2000
    a4ac:	85060000 	strhi	r0, [r6, #-0]
    a4b0:	000001e9 	andeq	r0, r0, r9, ror #3
    a4b4:	22590c24 	subscs	r0, r9, #36, 24	; 0x2400
    a4b8:	86060000 	strhi	r0, [r6], -r0
    a4bc:	000001f4 	strdeq	r0, [r0], -r4
    a4c0:	24740c28 	ldrbtcs	r0, [r4], #-3112	; 0xfffff3d8
    a4c4:	87060000 	strhi	r0, [r6, -r0]
    a4c8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a4cc:	21f00c2c 	mvnscs	r0, ip, lsr #24
    a4d0:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    a4d4:	00000215 	andeq	r0, r0, r5, lsl r2
    a4d8:	24620c30 	strbtcs	r0, [r2], #-3120	; 0xfffff3d0
    a4dc:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    a4e0:	00000231 	andeq	r0, r0, r1, lsr r2
    a4e4:	22a30c34 	adccs	r0, r3, #52, 24	; 0x3400
    a4e8:	8a060000 	bhi	18a4f0 <__ccfg+0x16a548>
    a4ec:	0000020a 	andeq	r0, r0, sl, lsl #4
    a4f0:	23170c38 	tstcs	r7, #56, 24	; 0x3800
    a4f4:	8b060000 	blhi	18a4fc <__ccfg+0x16a554>
    a4f8:	0000023c 	andeq	r0, r0, ip, lsr r2
    a4fc:	241d0c3c 	ldrcs	r0, [sp], #-3132	; 0xfffff3c4
    a500:	8c060000 	stchi	0, cr0, [r6], {-0}
    a504:	00000247 	andeq	r0, r0, r7, asr #4
    a508:	22180c40 	andscs	r0, r8, #64, 24	; 0x4000
    a50c:	8d060000 	stchi	0, cr0, [r6, #-0]
    a510:	00000252 	andeq	r0, r0, r2, asr r2
    a514:	20740c44 	rsbscs	r0, r4, r4, asr #24
    a518:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    a51c:	0000025d 	andeq	r0, r0, sp, asr r2
    a520:	78030048 	stmdavc	r3, {r3, r6}
    a524:	06000023 	streq	r0, [r0], -r3, lsr #32
    a528:	0002688f 	andeq	r6, r2, pc, lsl #17
    a52c:	01140b00 	tsteq	r4, r0, lsl #22
    a530:	0003a554 	andeq	sl, r3, r4, asr r5
    a534:	2a8e0c00 	bcs	fe38d53c <_estack+0xde38853c>
    a538:	55010000 	strpl	r0, [r1, #-0]
    a53c:	000000ce 	andeq	r0, r0, lr, asr #1
    a540:	2bf30c00 	blcs	ffccd548 <_estack+0xdfcc8548>
    a544:	56010000 	strpl	r0, [r1], -r0
    a548:	000000ce 	andeq	r0, r0, lr, asr #1
    a54c:	2a270c04 	bcs	9cd564 <__ccfg+0x9ad5bc>
    a550:	57010000 	strpl	r0, [r1, -r0]
    a554:	000000ce 	andeq	r0, r0, lr, asr #1
    a558:	2ac10c08 	bcs	ff04d580 <_estack+0xdf048580>
    a55c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a560:	000000ce 	andeq	r0, r0, lr, asr #1
    a564:	2a570c0c 	bcs	15cd59c <__ccfg+0x15ad5f4>
    a568:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    a56c:	000000c3 	andeq	r0, r0, r3, asr #1
    a570:	1e030010 	mcrne	0, 0, r0, cr3, cr0, {0}
    a574:	0100002c 	tsteq	r0, ip, lsr #32
    a578:	0003605a 	andeq	r6, r3, sl, asr r0
    a57c:	1b620d00 	blne	188d984 <__ccfg+0x186d9dc>
    a580:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    a584:	0003d301 	andeq	sp, r3, r1, lsl #6
    a588:	2c410e00 	mcrrcs	14, 0, r0, r1, cr0
    a58c:	65010000 	strvs	r0, [r1, #-0]
    a590:	000000ce 	andeq	r0, r0, lr, asr #1
    a594:	002a1f0e 	eoreq	r1, sl, lr, lsl #30
    a598:	ce650100 	powgts	f0, f5, f0
    a59c:	00000000 	andeq	r0, r0, r0
    a5a0:	001efd0f 	andseq	pc, lr, pc, lsl #26
    a5a4:	01100200 	tsteq	r0, r0, lsl #4
    a5a8:	000000ce 	andeq	r0, r0, lr, asr #1
    a5ac:	0003fb01 	andeq	pc, r3, r1, lsl #22
    a5b0:	2c410e00 	mcrrcs	14, 0, r0, r1, cr0
    a5b4:	a0010000 	andge	r0, r1, r0
    a5b8:	000000ce 	andeq	r0, r0, lr, asr #1
    a5bc:	002cac10 	eoreq	sl, ip, r0, lsl ip
    a5c0:	cea20100 	fdvgts	f0, f2, f0
    a5c4:	00000000 	andeq	r0, r0, r0
    a5c8:	0003b011 	andeq	fp, r3, r1, lsl r0
    a5cc:	002c3c00 	eoreq	r3, ip, r0, lsl #24
    a5d0:	00005c00 	andeq	r5, r0, r0, lsl #24
    a5d4:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    a5d8:	12000004 	andne	r0, r0, #4
    a5dc:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    a5e0:	00004530 	andeq	r4, r0, r0, lsr r5
    a5e4:	0003c712 	andeq	ip, r3, r2, lsl r7
    a5e8:	00455c00 	subeq	r5, r5, r0, lsl #24
    a5ec:	2c761300 	ldclcs	3, cr1, [r6], #-0
    a5f0:	00140000 	andseq	r0, r4, r0
    a5f4:	04610000 	strbteq	r0, [r1], #-0
    a5f8:	bc120000 	ldclt	0, cr0, [r2], {-0}
    a5fc:	88000003 	stmdahi	r0, {r0, r1}
    a600:	12000045 	andne	r0, r0, #69	; 0x45
    a604:	000003c7 	andeq	r0, r0, r7, asr #7
    a608:	0000459b 	muleq	r0, fp, r5
    a60c:	002c8a14 	eoreq	r8, ip, r4, lsl sl
    a610:	00740200 	rsbseq	r0, r4, r0, lsl #4
    a614:	01530115 	cmpeq	r3, r5, lsl r1
    a618:	52011532 	andpl	r1, r1, #209715200	; 0xc800000
    a61c:	01153c01 	tsteq	r5, r1, lsl #24
    a620:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a624:	0c055001 	stceq	0, cr5, [r5], {1}
    a628:	400ca000 	andmi	sl, ip, r0
    a62c:	5a160000 	bpl	58a634 <__ccfg+0x56a68c>
    a630:	0200002c 	andeq	r0, r0, #44	; 0x2c
    a634:	048d0076 	streq	r0, [sp], #118	; 0x76
    a638:	01150000 	tsteq	r5, r0
    a63c:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    a640:	31015201 	tstcc	r1, r1, lsl #4
    a644:	01510115 	cmpeq	r1, r5, lsl r1
    a648:	50011530 	andpl	r1, r1, r0, lsr r5
    a64c:	a0000c05 	andge	r0, r0, r5, lsl #24
    a650:	0215400c 	andseq	r4, r5, #12
    a654:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    a658:	72140000 	andsvc	r0, r4, #0
    a65c:	0200002c 	andeq	r0, r0, #44	; 0x2c
    a660:	01150076 	tsteq	r5, r6, ror r0
    a664:	15310153 	ldrne	r0, [r1, #-339]!	; 0xfffffead
    a668:	32015201 	andcc	r5, r1, #268435456	; 0x10000000
    a66c:	01510115 	cmpeq	r1, r5, lsl r1
    a670:	50011530 	andpl	r1, r1, r0, lsr r5
    a674:	a0000c05 	andge	r0, r0, r5, lsl #24
    a678:	0215400c 	andseq	r4, r5, #12
    a67c:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    a680:	11000000 	mrsne	r0, (UNDEF: 0)
    a684:	000003d3 	ldrdeq	r0, [r0], -r3
    a688:	00002c98 	muleq	r0, r8, ip
    a68c:	0000002c 	andeq	r0, r0, ip, lsr #32
    a690:	050d9c01 	streq	r9, [sp, #-3073]	; 0xfffff3ff
    a694:	e4120000 	ldr	r0, [r2], #-0
    a698:	bc000003 	stclt	0, cr0, [r0], {3}
    a69c:	17000045 	strne	r0, [r0, -r5, asr #32]
    a6a0:	000003ef 	andeq	r0, r0, pc, ror #7
    a6a4:	60185001 	andsvs	r5, r8, r1
    a6a8:	f4000010 	vst4.8	{d0-d3}, [r0 :64], r0
    a6ac:	19000004 	stmdbne	r0, {r2}
    a6b0:	000003e4 	andeq	r0, r0, r4, ror #7
    a6b4:	10601a04 	rsbne	r1, r0, r4, lsl #20
    a6b8:	ef1b0000 	svc	0x001b0000
    a6bc:	00000003 	andeq	r0, r0, r3
    a6c0:	2cb81400 	cfldrscs	mvf1, [r8]
    a6c4:	74020000 	strvc	r0, [r2], #-0
    a6c8:	51011500 	tstpl	r1, r0, lsl #10
    a6cc:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    a6d0:	0c055001 	stceq	0, cr5, [r5], {1}
    a6d4:	400ca000 	andmi	sl, ip, r0
    a6d8:	271c0000 	ldrcs	r0, [ip, -r0]
    a6dc:	0200002d 	andeq	r0, r0, #45	; 0x2d
    a6e0:	00ce0184 	sbceq	r0, lr, r4, lsl #3
    a6e4:	00000000 	andeq	r0, r0, r0
    a6e8:	00900000 	addseq	r0, r0, r0
    a6ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    a6f0:	00000576 	andeq	r0, r0, r6, ror r5
    a6f4:	002c2d1d 	eoreq	r2, ip, sp, lsl sp
    a6f8:	cec20100 	polgts	f0, f2, f0
    a6fc:	dd000000 	stcle	0, cr0, [r0, #-0]
    a700:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    a704:	00002bab 	andeq	r2, r0, fp, lsr #23
    a708:	00cec401 	sbceq	ip, lr, r1, lsl #8
    a70c:	46090000 	strmi	r0, [r9], -r0
    a710:	c41e0000 	ldrgt	r0, [lr], #-0
    a714:	0100002b 	tsteq	r0, fp, lsr #32
    a718:	0000c3c5 	andeq	ip, r0, r5, asr #7
    a71c:	00461c00 	subeq	r1, r6, r0, lsl #24
    a720:	2a631e00 	bcs	18d1f28 <__ccfg+0x18b1f80>
    a724:	c6010000 	strgt	r0, [r1], -r0
    a728:	000000ce 	andeq	r0, r0, lr, asr #1
    a72c:	00004643 	andeq	r4, r0, r3, asr #12
    a730:	0000001f 	andeq	r0, r0, pc, lsl r0
    a734:	00089e00 	andeq	r9, r8, r0, lsl #28
    a738:	00001f00 	andeq	r1, r0, r0, lsl #30
    a73c:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    a740:	20000000 	andcs	r0, r0, r0
    a744:	00002aea 	andeq	r2, r0, sl, ror #21
    a748:	00019102 	andeq	r9, r1, r2, lsl #2
    a74c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a750:	01000000 	mrseq	r0, (UNDEF: 0)
    a754:	0005ae9c 	muleq	r5, ip, lr
    a758:	00002100 	andeq	r2, r0, r0, lsl #2
    a75c:	03b00000 	movseq	r0, #0
    a760:	05a40000 	streq	r0, [r4, #0]!
    a764:	01150000 	tsteq	r5, r0
    a768:	15310151 	ldrne	r0, [r1, #-337]!	; 0xfffffeaf
    a76c:	33015001 	movwcc	r5, #4097	; 0x1001
    a770:	00001f00 	andeq	r1, r0, r0, lsl #30
    a774:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a778:	22000000 	andcs	r0, r0, #0
    a77c:	00002c02 	andeq	r2, r0, r2, lsl #24
    a780:	bb012202 	bllt	52f90 <__ccfg+0x32fe8>
    a784:	03000005 	movweq	r0, #5
    a788:	0d020102 	stfeqs	f0, [r2, #-8]
    a78c:	2300000c 	movwcs	r0, #12
    a790:	0000238c 	andeq	r2, r0, ip, lsl #7
    a794:	03014002 	movweq	r4, #4098	; 0x1002
    a798:	002a351c 	eoreq	r3, sl, ip, lsl r5
    a79c:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
    a7a0:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    a7a4:	00000000 	andeq	r0, r0, r0
    a7a8:	00000060 	andeq	r0, r0, r0, rrx
    a7ac:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    a7b0:	e3240000 			; <UNDEFINED> instruction: 0xe3240000
    a7b4:	0100002b 	tsteq	r0, fp, lsr #32
    a7b8:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    a7bc:	46970000 	ldrmi	r0, [r7], r0
    a7c0:	5f240000 	svcpl	0x00240000
    a7c4:	0100002c 	tsteq	r0, ip, lsr #32
    a7c8:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    a7cc:	46aa0000 	strtmi	r0, [sl], r0
    a7d0:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    a7d4:	00000005 	andeq	r0, r0, r5
    a7d8:	10000000 	andne	r0, r0, r0
    a7dc:	01000000 	mrseq	r0, (UNDEF: 0)
    a7e0:	063c0109 	ldrteq	r0, [ip], -r9, lsl #2
    a7e4:	00140000 	andseq	r0, r4, r0
    a7e8:	02000000 	andeq	r0, r0, #0
    a7ec:	01150074 	tsteq	r5, r4, ror r0
    a7f0:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    a7f4:	31015201 	tstcc	r1, r1, lsl #4
    a7f8:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    a7fc:	01153408 	tsteq	r5, r8, lsl #8
    a800:	000c0550 	andeq	r0, ip, r0, asr r5
    a804:	00400ca0 	subeq	r0, r0, r0, lsr #25
    a808:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    a80c:	00000000 	andeq	r0, r0, r0
    a810:	00080000 	andeq	r0, r8, r0
    a814:	0a010000 	beq	4a81c <__ccfg+0x2a874>
    a818:	00065a01 	andeq	r5, r6, r1, lsl #20
    a81c:	00001f00 	andeq	r1, r0, r0, lsl #30
    a820:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    a824:	21000000 	mrscs	r0, (UNDEF: 0)
    a828:	00000000 	andeq	r0, r0, r0
    a82c:	000003d3 	ldrdeq	r0, [r0], -r3
    a830:	0000066d 	andeq	r0, r0, sp, ror #12
    a834:	01500115 	cmpeq	r0, r5, lsl r1
    a838:	001f0031 	andseq	r0, pc, r1, lsr r0	; <UNPREDICTABLE>
    a83c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a840:	00000008 	andeq	r0, r0, r8
    a844:	002b0a20 	eoreq	r0, fp, r0, lsr #20
    a848:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
    a84c:	00000000 	andeq	r0, r0, r0
    a850:	00000034 	andeq	r0, r0, r4, lsr r0
    a854:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    a858:	c2250000 	eorgt	r0, r5, #0
    a85c:	00000005 	andeq	r0, r0, r5
    a860:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a864:	01000000 	mrseq	r0, (UNDEF: 0)
    a868:	06ab012f 	strteq	r0, [fp], pc, lsr #2
    a86c:	001f0000 	andseq	r0, pc, r0
    a870:	b5000000 	strlt	r0, [r0, #-0]
    a874:	00000008 	andeq	r0, r0, r8
    a878:	00000021 	andeq	r0, r0, r1, lsr #32
    a87c:	0003b000 	andeq	fp, r3, r0
    a880:	0006c300 	andeq	ip, r6, r0, lsl #6
    a884:	51011500 	tstpl	r1, r0, lsl #10
    a888:	01153001 	tsteq	r5, r1
    a88c:	00330150 	eorseq	r0, r3, r0, asr r1
    a890:	00000021 	andeq	r0, r0, r1, lsr #32
    a894:	0003d300 	andeq	sp, r3, r0, lsl #6
    a898:	0006d600 	andeq	sp, r6, r0, lsl #12
    a89c:	50011500 	andpl	r1, r1, r0, lsl #10
    a8a0:	1f003101 	svcne	0x00003101
    a8a4:	00000000 	andeq	r0, r0, r0
    a8a8:	0000089e 	muleq	r0, lr, r8
    a8ac:	0000001f 	andeq	r0, r0, pc, lsl r0
    a8b0:	0008aa00 	andeq	sl, r8, r0, lsl #20
    a8b4:	2f1c0000 	svccs	0x001c0000
    a8b8:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a8bc:	00c301f2 	strdeq	r0, [r3], #18
    a8c0:	00000000 	andeq	r0, r0, r0
    a8c4:	00380000 	eorseq	r0, r8, r0
    a8c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a8cc:	0000079a 	muleq	r0, sl, r7
    a8d0:	002c4c26 	eoreq	r4, ip, r6, lsr #24
    a8d4:	013c0100 	teqeq	ip, r0, lsl #2
    a8d8:	000000c3 	andeq	r0, r0, r3, asr #1
    a8dc:	000046bd 			; <UNDEFINED> instruction: 0x000046bd
    a8e0:	002bd927 	eoreq	sp, fp, r7, lsr #18
    a8e4:	013f0100 	teqeq	pc, r0, lsl #2
    a8e8:	000000ce 	andeq	r0, r0, lr, asr #1
    a8ec:	42275101 	eormi	r5, r7, #1073741824	; 0x40000000
    a8f0:	0100002d 	tsteq	r0, sp, lsr #32
    a8f4:	00c30141 	sbceq	r0, r3, r1, asr #2
    a8f8:	71050000 	mrsvc	r0, (UNDEF: 5)
    a8fc:	9f264000 	svcls	0x00264000
    a900:	002a7627 	eoreq	r7, sl, r7, lsr #12
    a904:	01430100 	mrseq	r0, (UNDEF: 83)
    a908:	000000c3 	andeq	r0, r0, r3, asr #1
    a90c:	40007107 	andmi	r7, r0, r7, lsl #2
    a910:	9f264824 	svcls	0x00264824
    a914:	002a7e27 	eoreq	r7, sl, r7, lsr #28
    a918:	01450100 	mrseq	r0, (UNDEF: 85)
    a91c:	000000c3 	andeq	r0, r0, r3, asr #1
    a920:	48007107 	stmdami	r0, {r0, r1, r2, r8, ip, sp, lr}
    a924:	9f264824 	svcls	0x00264824
    a928:	002a8624 	eoreq	r8, sl, r4, lsr #12
    a92c:	01470100 	mrseq	r0, (UNDEF: 87)
    a930:	000000c3 	andeq	r0, r0, r3, asr #1
    a934:	000046eb 	andeq	r4, r0, fp, ror #13
    a938:	002ad324 	eoreq	sp, sl, r4, lsr #6
    a93c:	01560100 	cmpeq	r6, r0, lsl #2
    a940:	000000c3 	andeq	r0, r0, r3, asr #1
    a944:	00004704 	andeq	r4, r0, r4, lsl #14
    a948:	002b7e24 	eoreq	r7, fp, r4, lsr #28
    a94c:	01570100 	cmpeq	r7, r0, lsl #2
    a950:	000000c3 	andeq	r0, r0, r3, asr #1
    a954:	00004727 	andeq	r4, r0, r7, lsr #14
    a958:	01006428 	tsteq	r0, r8, lsr #8
    a95c:	00c30158 	sbceq	r0, r3, r8, asr r1
    a960:	47500000 	ldrbmi	r0, [r0, -r0]
    a964:	1c000000 	stcne	0, cr0, [r0], {-0}
    a968:	00002c70 	andeq	r2, r0, r0, ror ip
    a96c:	ad020e02 	stcge	14, cr0, [r2, #-8]
    a970:	00000000 	andeq	r0, r0, r0
    a974:	0c000000 	stceq	0, cr0, [r0], {-0}
    a978:	01000000 	mrseq	r0, (UNDEF: 0)
    a97c:	0007d59c 	muleq	r7, ip, r5
    a980:	2b972600 	blcs	fe5d4188 <_estack+0xde5cf188>
    a984:	63010000 	movwvs	r0, #4096	; 0x1000
    a988:	0000c301 	andeq	ip, r0, r1, lsl #6
    a98c:	0047ca00 	subeq	ip, r7, r0, lsl #20
    a990:	2cc62400 	cfstrdcs	mvd2, [r6], {0}
    a994:	85010000 	strhi	r0, [r1, #-0]
    a998:	0000c301 	andeq	ip, r0, r1, lsl #6
    a99c:	0047eb00 	subeq	lr, r7, r0, lsl #22
    a9a0:	591c0000 	ldmdbpl	ip, {}	; <UNPREDICTABLE>
    a9a4:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a9a8:	00ce01c2 	sbceq	r0, lr, r2, asr #3
    a9ac:	00000000 	andeq	r0, r0, r0
    a9b0:	00340000 	eorseq	r0, r4, r0
    a9b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    a9b8:	00000842 	andeq	r0, r0, r2, asr #16
    a9bc:	002d1924 	eoreq	r1, sp, r4, lsr #18
    a9c0:	01920100 	orrseq	r0, r2, r0, lsl #2
    a9c4:	000000ce 	andeq	r0, r0, lr, asr #1
    a9c8:	0000482b 	andeq	r4, r0, fp, lsr #16
    a9cc:	002c5524 	eoreq	r5, ip, r4, lsr #10
    a9d0:	01930100 	orrseq	r0, r3, r0, lsl #2
    a9d4:	000000ce 	andeq	r0, r0, lr, asr #1
    a9d8:	0000484d 	andeq	r4, r0, sp, asr #16
    a9dc:	00222c24 	eoreq	r2, r2, r4, lsr #24
    a9e0:	01940100 	orrseq	r0, r4, r0, lsl #2
    a9e4:	000000ce 	andeq	r0, r0, lr, asr #1
    a9e8:	00004860 	andeq	r4, r0, r0, ror #16
    a9ec:	002b0124 	eoreq	r0, fp, r4, lsr #2
    a9f0:	01950100 	orrseq	r0, r5, r0, lsl #2
    a9f4:	000000ce 	andeq	r0, r0, lr, asr #1
    a9f8:	00004883 	andeq	r4, r0, r3, lsl #17
    a9fc:	0000001f 	andeq	r0, r0, pc, lsl r0
    aa00:	00089e00 	andeq	r9, r8, r0, lsl #28
    aa04:	00001f00 	andeq	r1, r0, r0, lsl #30
    aa08:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    aa0c:	1c000000 	stcne	0, cr0, [r0], {-0}
    aa10:	00002ce5 	andeq	r2, r0, r5, ror #25
    aa14:	ce01d302 	cdpgt	3, 0, cr13, cr1, cr2, {0}
    aa18:	00000000 	andeq	r0, r0, r0
    aa1c:	1c000000 	stcne	0, cr0, [r0], {-0}
    aa20:	01000000 	mrseq	r0, (UNDEF: 0)
    aa24:	00088d9c 	muleq	r8, ip, sp
    aa28:	2c132400 	cfldrscs	mvf2, [r3], {-0}
    aa2c:	b7010000 	strlt	r0, [r1, -r0]
    aa30:	0000ce01 	andeq	ip, r0, r1, lsl #28
    aa34:	00489f00 	subeq	r9, r8, r0, lsl #30
    aa38:	2cd72400 	cfldrdcs	mvd2, [r7], {0}
    aa3c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    aa40:	0000ce01 	andeq	ip, r0, r1, lsl #28
    aa44:	0048b200 	subeq	fp, r8, r0, lsl #4
    aa48:	2add2400 	bcs	ff753a50 <_estack+0xdf74ea50>
    aa4c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    aa50:	0000ce01 	andeq	ip, r0, r1, lsl #28
    aa54:	0048cd00 	subeq	ip, r8, r0, lsl #26
    aa58:	8a290000 	bhi	a4aa60 <__ccfg+0xa2aab8>
    aa5c:	0100002b 	tsteq	r0, fp, lsr #32
    aa60:	0003a55c 	andeq	sl, r3, ip, asr r5
    aa64:	00030500 	andeq	r0, r3, r0, lsl #10
    aa68:	2a000000 	bcs	aa70 <__exidx_end+0x7b68>
    aa6c:	00001820 	andeq	r1, r0, r0, lsr #16
    aa70:	ce034507 	cfsh32gt	mvfx4, mvfx3, #7
    aa74:	2b000000 	blcs	aa7c <__exidx_end+0x7b74>
    aa78:	0000166c 	andeq	r1, r0, ip, ror #12
    aa7c:	00c3aa08 	sbceq	sl, r3, r8, lsl #20
    aa80:	302c0000 	eorcc	r0, ip, r0
    aa84:	06000021 	streq	r0, [r0], -r1, lsr #32
    aa88:	00d90899 	smullseq	r0, r9, r9, r8
    aa8c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
    return (time * SECOND)/1000;
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
}
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
}
      40:	13490035 	movtne	r0, #36917	; 0x9035
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0xdbc>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
			wwait (st, 50);
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
			curr += 0x1000;
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
		if (from >= EE_SIZE || upto < from)
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
			upto = EE_SIZE - 1;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	0a020c3f 	beq	83224 <__ccfg+0x6327c>
     124:	34170000 	ldrcc	r0, [r7], #-0
        if (displayCycle)
     128:	3a080300 	bcc	200d30 <__ccfg+0x1e0d88>
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     130:	3f13490b 	svccc	0x0013490b
     134:	000a020c 	andeq	r0, sl, ip, lsl #4
        if(onTime > 0){
     138:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
            leds(led,1);
     13c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	0b3b0b3a 	bleq	ec2e30 <__ccfg+0xea2e88>
     144:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     148:	01120111 	tsteq	r2, r1, lsl r1
     14c:	13010a40 	movwne	r0, #6720	; 0x1a40
     150:	05190000 	ldreq	r0, [r9, #-0]
            delay(onTime, OFF_PERIOD);
     154:	3a0e0300 	bcc	380d5c <__ccfg+0x360db4>
            delay(offTime, Check_PERIOD);
     158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     15c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
            led = greenLed;
     160:	1a000006 	bne	180 <_Min_Stack_Size+0x80>
            ch = greenCharacter;
     164:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
            onTime = greenOn;
     16c:	01110b39 	tsteq	r1, r9, lsr fp
     170:	0a1b0000 	beq	6c0178 <__ccfg+0x6a01d0>
            offTime = greenOff;
     174:	3a0e0300 	bcc	380d7c <__ccfg+0x360dd4>
            leds(led,1);
     178:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     17c:	0001110b 	andeq	r1, r1, fp, lsl #2
     180:	010b1c00 	tsteq	fp, r0, lsl #24
     184:	00000655 	andeq	r0, r0, r5, asr r6
            proceed OFF_PERIOD;
     188:	0300341d 	movweq	r3, #1053	; 0x41d
     18c:	3b0b3a0e 	blcc	2ce9cc <__ccfg+0x2aea24>
        when(&On, Check_PERIOD);
     190:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     194:	000a0213 	andeq	r0, sl, r3, lsl r2
        when(&stopProcess, Stop);
     198:	010b1e00 	tsteq	fp, r0, lsl #28
     19c:	13010655 	movwne	r0, #5717	; 0x1655
        release;
     1a0:	0b1f0000 	bleq	7c01a8 <__ccfg+0x7a0200>
        leds(led,0);
     1a4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	00130101 	andseq	r0, r3, r1, lsl #2
     1ac:	00342000 	eorseq	r2, r4, r0
     1b0:	0b3a0e03 	bleq	e839c4 <__ccfg+0xe63a1c>
     1b4:	0b390b3b 	bleq	e42ea8 <__ccfg+0xe22f00>
     1b8:	00001349 	andeq	r1, r0, r9, asr #6
        if (displayCycle)
     1bc:	31011d21 	tstcc	r1, r1, lsr #26
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     1c4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     1c8:	010b570b 	tsteq	fp, fp, lsl #14
        if(offTime > 0)
     1cc:	22000013 	andcs	r0, r0, #19
            delay(offTime, Check_PERIOD);
     1d0:	13310005 	teqne	r1, #5
        leds(led,0);
     1d4:	1d230000 	stcne	0, cr0, [r3, #-0]
     1d8:	11133101 	tstne	r3, r1, lsl #2
     1dc:	58011201 	stmdapl	r1, {r0, r9, ip}
     1e0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     1e4:	2400000b 	strcs	r0, [r0], #-11
}
     1e8:	08030034 	stmdaeq	r3, {r2, r4, r5}
        finish;
     1ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     1f0:	13490b39 	movtne	r0, #39737	; 0x9b39
     1f4:	00000a02 	andeq	r0, r0, r2, lsl #20
     1f8:	31011d25 	tstcc	r1, r5, lsr #26
     1fc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     200:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     204:	010b5705 	tsteq	fp, r5, lsl #14
     208:	26000013 			; <UNDEFINED> instruction: 0x26000013
     20c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     210:	01120111 	tsteq	r2, r1, lsl r1
     214:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     218:	00000b57 	andeq	r0, r0, r7, asr fp
     21c:	3f012e27 	svccc	0x00012e27
     220:	3a0e030c 	bcc	380e58 <__ccfg+0x360eb0>
     224:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     228:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     22c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     230:	010a4001 	tsteq	sl, r1
     234:	28000013 	stmdacs	r0, {r0, r1, r4}
     238:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     23c:	0b3b0b3a 	bleq	ec2f2c <__ccfg+0xea2f84>
     240:	13490b39 	movtne	r0, #39737	; 0x9b39
     244:	00000602 	andeq	r0, r0, r2, lsl #12
    word numbers[] = {0, 0, 0, 0};
     248:	03003429 	movweq	r3, #1065	; 0x429
    int numbersIndex = 0;
     24c:	3b0b3a08 	blcc	2cea74 <__ccfg+0x2aeacc>
    word numbers[] = {0, 0, 0, 0};
     250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	2a000013 	bcs	2a8 <processSettingsInput+0x60>
        if(settingsInput[i] == ' ') {
     258:	08030034 	stmdaeq	r3, {r2, r4, r5}
     25c:	0b3b0b3a 	bleq	ec2f4c <__ccfg+0xea2fa4>
            numbers[numbersIndex] = number;
     260:	13490b39 	movtne	r0, #39737	; 0x9b39
     264:	00000a02 	andeq	r0, r0, r2, lsl #20
            number = 0;
     268:	31011d2b 	tstcc	r1, fp, lsr #26
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    return 0;
     270:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    redOn = numbers[0];
     274:	010b570b 	tsteq	fp, fp, lsl #14
     278:	2c000013 	stccs	0, cr0, [r0], {19}
    redOff = numbers[1];
     27c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     280:	01120111 	tsteq	r2, r1, lsl r1
    greenOn = numbers[2];
     284:	0b590b58 	bleq	1642fec <__ccfg+0x1623044>
     288:	13010557 	movwne	r0, #5463	; 0x1557
    greenOff = numbers[3];
     28c:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
     290:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
     294:	3b0b3a0e 	blcc	2cead4 <__ccfg+0x2aeb2c>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     29c:	2013490c 	andscs	r4, r3, ip, lsl #18
            number = number * 10;
     2a0:	0013010b 	andseq	r0, r3, fp, lsl #2
            number += settingsInput[i] - 48;
     2a4:	00052e00 	andeq	r2, r5, r0, lsl #28
     2a8:	0b3a0e03 	bleq	e83abc <__ccfg+0xe63b14>
        } else if(settingsInput[i] == '-') {
     2ac:	0b390b3b 	bleq	e42fa0 <__ccfg+0xe22ff8>
            return 1;
     2b0:	00001349 	andeq	r1, r0, r9, asr #6
     2b4:	03012e2f 	movweq	r2, #7727	; 0x1e2f
     2b8:	3b0b3a0e 	blcc	2ceaf8 <__ccfg+0x2aeb50>
     2bc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     2c0:	010b200c 	tsteq	fp, ip
fsm root {
     2c4:	30000013 	andcc	r0, r0, r3, lsl r0
     2c8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     2cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     2d0:	13490b39 	movtne	r0, #39737	; 0x9b39
     2d4:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
     2d8:	11133101 	tstne	r3, r1, lsl #2
     2dc:	40011201 	andmi	r1, r1, r1, lsl #4
        ser_outf(Initial, "Enter your name: ");
     2e0:	3200000a 	andcc	r0, r0, #10
     2e4:	13310005 	teqne	r1, #5
        ser_in(Get_Name, username, NAME_LENGTH);
     2e8:	00000602 	andeq	r0, r0, r2, lsl #12
     2ec:	01110100 	tsteq	r1, r0, lsl #2
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	0b130e25 	bleq	4c3b8c <__ccfg+0x4a3be4>
     2f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     2f8:	01110655 	tsteq	r1, r5, asr r6
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	00000610 	andeq	r0, r0, r0, lsl r6
     300:	0b002402 	bleq	9310 <__exidx_end+0x6408>
        if (choice == 'A' || choice == 'a'){
     304:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     308:	0300000e 	movweq	r0, #14
     30c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
            proceed Adjust_Intervals;
     310:	0b3b0b3a 	bleq	ec3000 <__ccfg+0xea3058>
            proceed Monitor;
     314:	13490b39 	movtne	r0, #39737	; 0x9b39
        proceed Show_Menu;
     318:	24040000 	strcs	r0, [r4], #-0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     320:	0008030b 	andeq	r0, r8, fp, lsl #6
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	00260500 	eoreq	r0, r6, r0, lsl #10
     328:	00001349 	andeq	r1, r0, r9, asr #6
     32c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
        if(processSettingsInput(settings) != 0)
     330:	07000013 	smladeq	r0, r3, r0, r0
     334:	0b0b000f 	bleq	2c0378 <__ccfg+0x2a03d0>
            proceed Adjust_Intervals;
     338:	00001349 	andeq	r1, r0, r9, asr #6
        if(!blinkerRunning) {
     33c:	0b011308 	bleq	44f64 <__ccfg+0x24fbc>
     340:	3b0b3a0b 	blcc	2ceb74 <__ccfg+0x2aebcc>
     344:	010b390b 	tsteq	fp, fp, lsl #18
            blinkerCode = runfsm blinker;
     348:	09000013 	stmdbeq	r0, {r0, r1, r4}
            blinkerRunning = YES;
     34c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
        On = YES;
     350:	0b3b0b3a 	bleq	ec3040 <__ccfg+0xea3098>
     354:	13490b39 	movtne	r0, #39737	; 0x9b39
        trigger(&On);
     358:	0b0d0b0b 	bleq	342f8c <__ccfg+0x322fe4>
        proceed Show_Menu;
     35c:	0b380b0c 	bleq	e02f94 <__ccfg+0xde2fec>
     360:	0d0a0000 	stceq	0, cr0, [sl, #-0]
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	3a0e0300 	bcc	380f6c <__ccfg+0x360fc4>
     368:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     36c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     370:	0b00000b 	bleq	3a4 <root+0xe0>
     374:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     378:	0b3b0b3a 	bleq	ec3068 <__ccfg+0xea30c0>
     37c:	13490b39 	movtne	r0, #39737	; 0x9b39
        proceed Show_Menu;
     380:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	010c0000 	mrseq	r0, (UNDEF: 12)
     388:	01134901 	tsteq	r3, r1, lsl #18
        displayCycle = YES;
     38c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     390:	00000021 	andeq	r0, r0, r1, lsr #32
        ser_inf(Await_Stop, "%c", &ch);
     394:	0300160e 	movweq	r1, #1550	; 0x60e
     398:	3b0b3a0e 	blcc	2cebd8 <__ccfg+0x2aec30>
        if(ch == 'S' || ch == 's'){
     39c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     3a0:	0f000013 	svceq	0x00000013
     3a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
            displayCycle = NO;
     3a8:	00001301 	andeq	r1, r0, r1, lsl #6
            proceed Show_Menu;
     3ac:	49000510 	stmdbmi	r0, {r4, r8, sl}
     3b0:	11000013 	tstne	r0, r3, lsl r0
        proceed Monitor;
     3b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     3b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        On = NO;
     3bc:	13490b39 	movtne	r0, #39737	; 0x9b39
        if(blinkerCode != 0x0) {
     3c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     3c4:	13120000 	tstne	r2, #0
            killall(blinkerCode);
     3c8:	3a0b0b01 	bcc	2c2fd4 <__ccfg+0x2a302c>
        trigger(&stopProcess);
     3cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3d0:	0013010b 	andseq	r0, r3, fp, lsl #2
        proceed Show_Menu;
     3d4:	000d1300 	andeq	r1, sp, r0, lsl #6
     3d8:	0b3a0e03 	bleq	e83bec <__ccfg+0xe63c44>
        leds_all(0);
     3dc:	0b39053b 	bleq	e418d0 <__ccfg+0xe21928>
     3e0:	0b381349 	bleq	e0510c <__ccfg+0xde5164>
     3e4:	13140000 	tstne	r4, #0
        proceed Show_Menu;
     3e8:	0b0e0301 	bleq	380ff4 <__ccfg+0x36104c>
     3ec:	3b0b3a0b 	blcc	2cec20 <__ccfg+0x2aec78>
        } else if (choice == 'S' || choice == 's') {
     3f0:	010b3905 	tsteq	fp, r5, lsl #18
            proceed Stop;
     3f4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
        } else if (choice == 'V' || choice == 'v') {
     3f8:	13490021 	movtne	r0, #36897	; 0x9021
            proceed View_Settings;
     3fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
        } else if (choice == 'M' || choice == 'm') {
     400:	03003416 	movweq	r3, #1046	; 0x416
            proceed Monitor;
     404:	3b0b3a0e 	blcc	2cec44 <__ccfg+0x2aec9c>
     408:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     40c:	17000013 	smladne	r0, r3, r0, r0
     410:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
            killall(blinkerCode);
     414:	0b3b0b3a 	bleq	ec3104 <__ccfg+0xea315c>
            leds_all(0);
     418:	13490b39 	movtne	r0, #39737	; 0x9b39
     41c:	0a020c3f 	beq	83520 <__ccfg+0x63578>
            killall(blinkerCode);
     420:	34180000 	ldrcc	r0, [r8], #-0
            sint runningNumber = crunning(blinkerCode);
     424:	3a0e0300 	bcc	38102c <__ccfg+0x361084>
     428:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     42c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	1900000a 	stmdbne	r0, {r1, r3}
            trigger(&stopProcess);
     434:	13470034 	movtne	r0, #28724	; 0x7034
     438:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
            blinkerCode = runfsm blinker;
     43c:	0a020b39 	beq	83128 <__ccfg+0x63180>
     440:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
     444:	030c3f01 	movweq	r3, #52993	; 0xcf01
     448:	3b0b3a0e 	blcc	2cec88 <__ccfg+0x2aece0>
     44c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     450:	1113490c 	tstne	r3, ip, lsl #18
     454:	40011201 	andmi	r1, r1, r1, lsl #4
     458:	0013010a 	andseq	r0, r3, sl, lsl #2
     45c:	010b1b00 	tsteq	fp, r0, lsl #22
     460:	13010655 	movwne	r0, #5717	; 0x1655
     464:	341c0000 	ldrcc	r0, [ip], #-0
     468:	3a080300 	bcc	201070 <__ccfg+0x1e10c8>
     46c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     470:	0013490b 	andseq	r4, r3, fp, lsl #18
     474:	001d1d00 	andseq	r1, sp, r0, lsl #26
     478:	01111331 	tsteq	r1, r1, lsr r3
     47c:	0b580112 	bleq	16008cc <__ccfg+0x15e0924>
     480:	0b570559 	bleq	15c19ec <__ccfg+0x15a1a44>
     484:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     488:	030c3f01 	movweq	r3, #52993	; 0xcf01
     48c:	3b0b3a0e 	blcc	2ceccc <__ccfg+0x2aed24>
     490:	110b3905 	tstne	fp, r5, lsl #18
static void devinit_uart (int devnum) {
     494:	40011201 	andmi	r1, r1, r1, lsl #4
	adddevfunc (ioreq_uart_a, devnum);
     498:	0013010a 	andseq	r0, r3, sl, lsl #2
     49c:	000a1f00 	andeq	r1, sl, r0, lsl #30
void udelay (volatile word n) {
     4a0:	0b3a0e03 	bleq	e83cb4 <__ccfg+0xe63d0c>
     4a4:	0b390b3b 	bleq	e43198 <__ccfg+0xe231f0>
	while (n) {
     4a8:	1d200000 	stcne	0, cr0, [r0, #-0]
     4ac:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
}
     4b0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	while (n--);
     4b4:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     4b8:	0013010b 	andseq	r0, r3, fp, lsl #2
     4bc:	00052100 	andeq	r2, r5, r0, lsl #2
		n--;
     4c0:	00001331 	andeq	r1, r0, r1, lsr r3
     4c4:	31011d22 	tstcc	r1, r2, lsr #26
     4c8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
void mdelay (volatile word n) {
     4cc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     4d0:	010b570b 	tsteq	fp, fp, lsl #14
	while (n) {
     4d4:	23000013 	movwcs	r0, #19
     4d8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
}
     4dc:	0a240000 	beq	9004e4 <__ccfg+0x8e053c>
		udelay (999);
     4e0:	11133100 	tstne	r3, r0, lsl #2
     4e4:	25000001 	strcs	r0, [r0, #-1]
		n--;
     4e8:	1331001d 	teqne	r1, #29
     4ec:	06550152 			; <UNDEFINED> instruction: 0x06550152
     4f0:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     4f4:	00000b57 	andeq	r0, r0, r7, asr fp
void __pi_ondomain (lword d) {
     4f8:	31011d26 	tstcc	r1, r6, lsr #26
     4fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		if (__pi_systat.effpdm > 1)
     500:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     504:	010b5705 	tsteq	fp, r5, lsl #14
			__pi_systat.effpdm = 1;
     508:	27000013 	smladcs	r0, r3, r0, r0
	PRCMPowerDomainOn (d);
     50c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     510:	01120111 	tsteq	r2, r1, lsl r1
     514:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	00000b57 	andeq	r0, r0, r7, asr fp
     51c:	31001d28 	tstcc	r0, r8, lsr #26
     520:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
	__pi_systat.ondmns |= d;
     524:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     528:	000b570b 	andeq	r5, fp, fp, lsl #14
}
     52c:	00342900 	eorseq	r2, r4, r0, lsl #18
     530:	0b3a0803 	bleq	e82544 <__ccfg+0xe6259c>
void __pi_syserror (word ec, const char *m) {
     534:	0b39053b 	bleq	e41a28 <__ccfg+0xe21a80>
	diag ("SYSERR: %x, %s", ec, m);
     538:	06021349 	streq	r1, [r2], -r9, asr #6
     53c:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
  __ASM volatile ("cpsid i" : : : "memory");
     540:	3a0e0301 	bcc	38114c <__ccfg+0x3611a4>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     548:	010b200b 	tsteq	fp, fp
     54c:	2b000013 	blcs	5a0 <tci_run_delay_timer+0x18>
		all_leds_blink;
     550:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     554:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     558:	00000b39 	andeq	r0, r0, r9, lsr fp
     55c:	3f012e2c 	svccc	0x00012e2c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	3a0e030c 	bcc	381198 <__ccfg+0x3611f0>
     564:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     568:	110c270b 	tstne	ip, fp, lsl #14
     56c:	40011201 	andmi	r1, r1, r1, lsl #4
     570:	0013010a 	andseq	r0, r3, sl, lsl #2
     574:	00052d00 	andeq	r2, r5, r0, lsl #26
	while (1) {
     578:	0b3a0e03 	bleq	e83d8c <__ccfg+0xe63de4>
     57c:	0b39053b 	bleq	e41a70 <__ccfg+0xe21ac8>
     580:	06021349 	streq	r1, [r2], -r9, asr #6
     584:	0b2e0000 	bleq	b8058c <__ccfg+0xb605e4>
void tci_run_delay_timer () {
     588:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
	setdel = __pi_mintk - __pi_old;
     58c:	00130101 	andseq	r0, r3, r1, lsl #2
     590:	00342f00 	eorseq	r2, r4, r0, lsl #30
     594:	00001331 	andeq	r1, r0, r1, lsr r3
     598:	31010b30 	tstcc	r1, r0, lsr fp
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	00065513 	andeq	r5, r6, r3, lsl r5
     5a0:	00343100 	eorseq	r3, r4, r0, lsl #2
     5a4:	06021331 			; <UNDEFINED> instruction: 0x06021331
     5a8:	1d320000 	ldcne	0, cr0, [r2, #-0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	sti_tim;
     5b0:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
}
     5b4:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     5b8:	3300000b 	movwcc	r0, #11
     5bc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     5c0:	06550152 			; <UNDEFINED> instruction: 0x06550152
     5c4:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
	cli_aux;
     5c8:	00000b57 	andeq	r0, r0, r7, asr fp
     5cc:	03000534 	movweq	r0, #1332	; 0x534
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	3b0b3a08 	blcc	2cedf8 <__ccfg+0x2aee50>
     5d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     5d8:	000a0213 	andeq	r0, sl, r3, lsl r2
     5dc:	00053500 	andeq	r3, r5, r0, lsl #10
	sti_aux;
     5e0:	06021331 			; <UNDEFINED> instruction: 0x06021331
}
     5e4:	34360000 	ldrtcc	r0, [r6], #-0
     5e8:	3a080300 	bcc	2011f0 <__ccfg+0x1e1248>
     5ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void AONRTCIntHandler () {
     5f0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	37000006 	strcc	r0, [r0, -r6]
     5f8:	0111010b 	tsteq	r1, fp, lsl #2
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	00000112 	andeq	r0, r0, r2, lsl r1
		if (__pi_utims [0] == 0)
     600:	03002e38 	movweq	r2, #3640	; 0xe38
     604:	3b0b3a0e 	blcc	2cee44 <__ccfg+0x2aee9c>
		if (*(__pi_utims [0])) {
     608:	200b3905 	andcs	r3, fp, r5, lsl #18
     60c:	3900000b 	stmdbcc	r0, {r0, r1, r3}
			(*(__pi_utims [0]))--;
     610:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (__pi_utims [1] == 0)
     614:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (*(__pi_utims [1])) {
     618:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			aux_timer_inactive = 0;
     61c:	01120111 	tsteq	r2, r1, lsl r1
			(*(__pi_utims [1]))--;
     620:	13010a40 	movwne	r0, #6720	; 0x1a40
		if (__pi_utims [2] == 0)
     624:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
		if (*(__pi_utims [2])) {
     628:	3a0e0301 	bcc	381234 <__ccfg+0x36128c>
			(*(__pi_utims [2]))--;
     62c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (__pi_utims [3] != 0) {
     630:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
			if (*(__pi_utims [3])) {
     634:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				aux_timer_inactive = 0;
     638:	010a4001 	tsteq	sl, r1
				(*(__pi_utims [3]))--;
     63c:	3b000013 	blcc	690 <AONRTCIntHandler+0xa0>
	if (__pi_systat.ledsts) {
     640:	08030005 	stmdaeq	r3, {r0, r2}
     644:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (__pi_systat.ledblc++ == 0) {
     648:	13490b39 	movtne	r0, #39737	; 0x9b39
     64c:	00000602 	andeq	r0, r0, r2, lsl #12
			if (__pi_systat.ledblk) {
     650:	03012e3c 	movweq	r2, #7740	; 0x1e3c
     654:	3b0b3a0e 	blcc	2cee94 <__ccfg+0x2aeeec>
     658:	110b3905 	tstne	fp, r5, lsl #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	40011201 	andmi	r1, r1, r1, lsl #4
     660:	0013010a 	andseq	r0, r3, sl, lsl #2
				if (__pi_systat.ledsts & 0x2)
     664:	012e3d00 			; <UNDEFINED> instruction: 0x012e3d00
     668:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     66c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				if (__pi_systat.ledsts & 0x4)
     670:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				__pi_systat.ledblk = 0;
     674:	0b201349 	bleq	8053a0 <__ccfg+0x7e53f8>
     678:	00001301 	andeq	r1, r0, r1, lsl #6
			if (__pi_systat.fstblk)
     67c:	0300053e 	movweq	r0, #1342	; 0x53e
     680:	3b0b3a08 	blcc	2ceea8 <__ccfg+0x2aef00>
				__pi_systat.ledblc = 200;
     684:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (events & AON_RTC_EVFLAGS_CH0) {
     688:	3f000013 	svccc	0x00000013
		cli_tim;
     68c:	0803000a 	stmdaeq	r3, {r1, r3}
		__pi_new += setdel;
     690:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     694:	00000b39 	andeq	r0, r0, r9, lsr fp
		setdel = 0;
     698:	03003440 	movweq	r3, #1088	; 0x440
		RISE_N_SHINE;
     69c:	3b0b3a0e 	blcc	2ceedc <__ccfg+0x2aef34>
		__pi_new += setdel;
     6a0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		RISE_N_SHINE;
     6a4:	00060213 	andeq	r0, r6, r3, lsl r2
     6a8:	000a4100 	andeq	r4, sl, r0, lsl #2
		aux_timer_inactive = 1;
     6ac:	0b3a0803 	bleq	e826c0 <__ccfg+0xe62718>
     6b0:	0b39053b 	bleq	e41ba4 <__ccfg+0xe21bfc>
				if (__pi_systat.ledsts & 0x1)
     6b4:	00000111 	andeq	r0, r0, r1, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b8:	31011d42 	tstcc	r1, r2, asr #26
     6bc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				if (__pi_systat.ledsts & 0x2)
     6c0:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     6c4:	010b570b 	tsteq	fp, fp, lsl #14
     6c8:	43000013 	movwmi	r0, #19
				if (__pi_systat.ledsts & 0x8)
     6cc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
				__pi_systat.ledblk = 1;
     6d0:	01120111 	tsteq	r2, r1, lsl r1
     6d4:	0b590b58 	bleq	164343c <__ccfg+0x1623494>
		if (aux_timer_inactive) {
     6d8:	00000b57 	andeq	r0, r0, r7, asr fp
			cli_aux;
     6dc:	03012e44 	movweq	r2, #7748	; 0x1e44
     6e0:	3b0b3a0e 	blcc	2cef20 <__ccfg+0x2aef78>
     6e4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     6e8:	2013490c 	andscs	r4, r3, ip, lsl #18
     6ec:	0013010b 	andseq	r0, r3, fp, lsl #2
     6f0:	002e4500 	eoreq	r4, lr, r0, lsl #10
     6f4:	0b3a0e03 	bleq	e83f08 <__ccfg+0xe63f60>
     6f8:	0b39053b 	bleq	e41bec <__ccfg+0xe21c44>
     6fc:	0b201349 	bleq	805428 <__ccfg+0x7e5480>
     700:	2e460000 	cdpcs	0, 4, cr0, cr6, cr0, {0}
word tci_update_delay_ticks (Boolean force) {
     704:	3a0e0301 	bcc	381310 <__ccfg+0x361368>
	cli_tim;
     708:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     70c:	010b200b 	tsteq	fp, fp
	if (setdel) {
     710:	47000013 	smladmi	r0, r3, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	08030034 	stmdaeq	r3, {r2, r4, r5}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	0b3b0b3a 	bleq	ec3408 <__ccfg+0xea3460>
     71c:	13490b39 	movtne	r0, #39737	; 0x9b39
     720:	0b480000 	bleq	1200728 <__ccfg+0x11e0780>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	49000001 	stmdbmi	r0, {r0}
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 678 <AONRTCIntHandler+0x88>
	return NO;
     72c:	0b3a0e03 	bleq	e83f40 <__ccfg+0xe63f98>
			setdel = 0;
     730:	0b390b3b 	bleq	e43424 <__ccfg+0xe2347c>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	01110c27 	tsteq	r1, r7, lsr #24
     738:	0a400112 	beq	1000b88 <__ccfg+0xfe0be0>
}
     73c:	00001301 	andeq	r1, r0, r1, lsl #6
		sti_tim;
     740:	0300054a 	movweq	r0, #1354	; 0x54a
		return YES;
     744:	3b0b3a08 	blcc	2cef6c <__ccfg+0x2aefc4>
     748:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     74c:	00060213 	andeq	r0, r6, r3, lsl r2
     750:	00344b00 	eorseq	r4, r4, r0, lsl #22
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	0b3a0e03 	bleq	e83f68 <__ccfg+0xe63fc0>
	UARTDisable (UART0_BASE);
     758:	0b390b3b 	bleq	e4344c <__ccfg+0xe234a4>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	0a021349 	beq	85488 <__ccfg+0x654e0>
	UARTDisable (UART0_BASE);
     760:	0a4c0000 	beq	1300768 <__ccfg+0x12e07c0>
	UARTConfigSetExpClk (UART0_BASE,
     764:	3a0e0300 	bcc	38136c <__ccfg+0x3613c4>
     768:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     76c:	0001110b 	andeq	r1, r1, fp, lsl #2
     770:	001d4d00 	andseq	r4, sp, r0, lsl #26
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	01521331 	cmpeq	r2, r1, lsr r3
     778:	0b580655 	bleq	16020d4 <__ccfg+0x15e212c>
     77c:	0b570b59 	bleq	15c34e8 <__ccfg+0x15a3540>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	2e4e0000 	cdpcs	0, 4, cr0, cr14, cr0, {0}
     784:	030c3f00 	movweq	r3, #52992	; 0xcf00
     788:	3b0b3a0e 	blcc	2cefc8 <__ccfg+0x2af020>
	urates [0] = rate;
     78c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
     790:	1201110c 	andne	r1, r1, #12, 2
     794:	000a4001 	andeq	r4, sl, r1
     798:	00054f00 	andeq	r4, r5, r0, lsl #30
     79c:	0b3a0803 	bleq	e827b0 <__ccfg+0xe62808>
     7a0:	0b390b3b 	bleq	e43494 <__ccfg+0xe234ec>
     7a4:	0a021349 	beq	854d0 <__ccfg+0x65528>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	2e500000 	cdpcs	0, 5, cr0, cr0, cr0, {0}
     7ac:	3a0e0301 	bcc	3813b8 <__ccfg+0x361410>
     7b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	200c270b 	andcs	r2, ip, fp, lsl #14
     7b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	00055100 	andeq	r5, r5, r0, lsl #2
     7c0:	0b3a0803 	bleq	e827d4 <__ccfg+0xe6282c>
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	0b390b3b 	bleq	e434b8 <__ccfg+0xe23510>
     7c8:	00001349 	andeq	r1, r0, r9, asr #6
     7cc:	03012e52 	movweq	r2, #7762	; 0x1e52
     7d0:	3b0b3a0e 	blcc	2cf010 <__ccfg+0x2af068>
     7d4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     7d8:	010b200c 	tsteq	fp, ip
     7dc:	53000013 	movwpl	r0, #19
	switch (operation) {
     7e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     7e8:	13490b39 	movtne	r0, #39737	; 0x9b39
     7ec:	2e540000 	cdpcs	0, 5, cr0, cr4, cr0, {0}
     7f0:	3a0e0300 	bcc	3813f8 <__ccfg+0x361450>
     7f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				*buf++ = uart_a_read;
     7f8:	200c270b 	andcs	r2, ip, fp, lsl #14
     7fc:	5500000b 	strpl	r0, [r0, #-11]
			while (len && uart_a_char_available) {
     800:	0e03012e 	adfeqsp	f0, f3, #0.5
     804:	0b3b0b3a 	bleq	ec34f4 <__ccfg+0xea354c>
     808:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			if (len != operation) {
     80c:	0b201349 	bleq	805538 <__ccfg+0x7e5590>
}
     810:	00001301 	andeq	r1, r0, r1, lsl #6
     814:	03002e56 	movweq	r2, #3670	; 0xe56
			uart_a_disable_int;
     818:	3b0b3a0e 	blcc	2cf058 <__ccfg+0x2af0b0>
			if (uart_a_char_available) {
     81c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
				*buf++ = uart_a_read;
     820:	000b200c 	andeq	r2, fp, ip
			uart_a_disable_int;
     824:	002e5700 	eoreq	r5, lr, r0, lsl #14
     828:	0b3a0e03 	bleq	e8403c <__ccfg+0xe64094>
			if (uart_a_char_available) {
     82c:	0b390b3b 	bleq	e43520 <__ccfg+0xe23578>
     830:	13490c27 	movtne	r0, #39975	; 0x9c27
				uart_a_enable_int;
     834:	00000b20 	andeq	r0, r0, r0, lsr #22
     838:	03002e58 	movweq	r2, #3672	; 0xe58
				goto Redo_rx;
     83c:	3b0b3a0e 	blcc	2cf07c <__ccfg+0x2af0d4>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     840:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     844:	2013490c 	andscs	r4, r3, ip, lsl #18
			return -2;
     848:	5900000b 	stmdbpl	r0, {r0, r1, r3}
     84c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
				uart_a_write (*buf);
     850:	01120111 	tsteq	r2, r1, lsl r1
     854:	00000a40 	andeq	r0, r0, r0, asr #20
			while (len && uart_a_room_in_tx) {
     858:	01110100 	tsteq	r1, r0, lsl #2
     85c:	0b130e25 	bleq	4c40f8 <__ccfg+0x4a4150>
     860:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
			if (len != operation) {
     864:	01110655 	tsteq	r1, r5, asr r6
			uart_a_disable_int;
     868:	00000610 	andeq	r0, r0, r0, lsl r6
     86c:	0b002402 	bleq	987c <__exidx_end+0x6974>
			if (uart_a_room_in_tx) {
     870:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     874:	0300000e 	movweq	r0, #14
				uart_a_enable_int;
     878:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     87c:	0b3b0b3a 	bleq	ec356c <__ccfg+0xea35c4>
				*buf++ = uart_a_read;
     880:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (uart_a_room_in_tx) {
     884:	24040000 	strcs	r0, [r4], #-0
				uart_a_write (*buf);
     888:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     88c:	0008030b 	andeq	r0, r8, fp, lsl #6
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	01130500 	tsteq	r3, r0, lsl #10
     894:	0b0b0e03 	bleq	2c40a8 <__ccfg+0x2a4100>
			uart_a_enable_int;
     898:	0b3b0b3a 	bleq	ec3588 <__ccfg+0xea35e0>
     89c:	00001301 	andeq	r1, r0, r1, lsl #6
     8a0:	03000d06 	movweq	r0, #3334	; 0xd06
			return 0;
     8a4:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
			if (len == UART_CNTRL_SETRATE) {
     8a8:	000c340b 	andeq	r3, ip, fp, lsl #8
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	000f0700 	andeq	r0, pc, r0, lsl #14
     8b0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     8b4:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
				syserror (EREQPAR, "uar");
     8b8:	09000013 	stmdbeq	r0, {r0, r1, r4}
			syserror (ENOOPER, "uai");
     8bc:	13490035 	movtne	r0, #36917	; 0x9035
			if (len == UART_CNTRL_GETRATE) {
     8c0:	0f0a0000 	svceq	0x000a0000
				return 1;
     8c4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	0b000013 	bleq	91c <UART0IntHandler+0x2c>
			syserror (ENOOPER, "uai");
     8cc:	0b0b0113 	bleq	2c0d20 <__ccfg+0x2a0d78>
     8d0:	0b3b0b3a 	bleq	ec35c0 <__ccfg+0xea3618>
     8d4:	13010b39 	movwne	r0, #6969	; 0x1b39
     8d8:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     8dc:	3a0e0300 	bcc	3814e4 <__ccfg+0x36153c>
     8e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8e4:	0b13490b 	bleq	4d2d18 <__ccfg+0x4b2d70>
     8e8:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
     8ec:	000b380b 	andeq	r3, fp, fp, lsl #16
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	000d0d00 	andeq	r0, sp, r0, lsl #26
void UART0IntHandler () {
     8f4:	0b3a0e03 	bleq	e84108 <__ccfg+0xe64160>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	0b390b3b 	bleq	e435ec <__ccfg+0xe23644>
     8fc:	0b381349 	bleq	e05628 <__ccfg+0xde5680>
     900:	340e0000 	strcc	r0, [lr], #-0
     904:	3a0e0300 	bcc	38150c <__ccfg+0x361564>
     908:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	3f13490b 	svccc	0x0013490b
     910:	000c3c0c 	andeq	r3, ip, ip, lsl #24
		RISE_N_SHINE;
     914:	01010f00 	tsteq	r1, r0, lsl #30
     918:	13011349 	movwne	r1, #4937	; 0x1349
		i_trigger (devevent (UART_A, READ));
     91c:	21100000 	tstcs	r0, r0
     920:	11000000 	mrsne	r0, (UNDEF: 0)
     924:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     928:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     92c:	13490b39 	movtne	r0, #39737	; 0x9b39
     930:	15120000 	ldrne	r0, [r2, #-0]
     934:	010c2701 	tsteq	ip, r1, lsl #14
     938:	13000013 	movwne	r0, #19
     93c:	13490005 	movtne	r0, #36869	; 0x9005
     940:	34140000 	ldrcc	r0, [r4], #-0
     944:	3a0e0300 	bcc	38154c <__ccfg+0x3615a4>
     948:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	3f13490b 	svccc	0x0013490b
     950:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     954:	01131500 	tsteq	r3, r0, lsl #10
		i_trigger (devevent (UART_A, WRITE));
     958:	0b3a0b0b 	bleq	e8358c <__ccfg+0xe635e4>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	0b39053b 	bleq	e41e50 <__ccfg+0xe21ea8>
     960:	00001301 	andeq	r1, r0, r1, lsl #6
		RISE_N_SHINE;
     964:	03000d16 	movweq	r0, #3350	; 0xd16
     968:	3b0b3a0e 	blcc	2cf1a8 <__ccfg+0x2af200>
     96c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		i_trigger (devevent (UART_A, WRITE));
     970:	000b3813 	andeq	r3, fp, r3, lsl r8
     974:	01131700 	tsteq	r3, r0, lsl #14
     978:	0b0b0e03 	bleq	2c418c <__ccfg+0x2a41e4>
     97c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     980:	13010b39 	movwne	r0, #6969	; 0x1b39
     984:	21180000 	tstcs	r8, r0
     988:	2f134900 	svccs	0x00134900
     98c:	1900000b 	stmdbne	r0, {r0, r1, r3}
     990:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     994:	13011349 	movwne	r1, #4937	; 0x1349
     998:	341a0000 	ldrcc	r0, [sl], #-0
}
     99c:	3a134700 	bcc	4d25a4 <__ccfg+0x4b25fc>
     9a0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9a4:	000a020b 	andeq	r0, sl, fp, lsl #4
     9a8:	00341b00 	eorseq	r1, r4, r0, lsl #22
     9ac:	0b3a0e03 	bleq	e841c0 <__ccfg+0xe64218>
void __buttons_setirq (int val) {
     9b0:	0b390b3b 	bleq	e436a4 <__ccfg+0xe236fc>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 898 <ioreq_uart_a+0xb8>
     9b8:	00000a02 	andeq	r0, r0, r2, lsl #20
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	0300341c 	movweq	r3, #1052	; 0x41c
     9c0:	3b0b3a0e 	blcc	2cf200 <__ccfg+0x2af258>
     9c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	000a0213 	andeq	r0, sl, r3, lsl r2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	00341d00 	eorseq	r1, r4, r0, lsl #26
     9d0:	0b3a0e03 	bleq	e841e4 <__ccfg+0xe6423c>
     9d4:	0b39053b 	bleq	e41ec8 <__ccfg+0xe21f20>
     9d8:	0a021349 	beq	85704 <__ccfg+0x6575c>
     9dc:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     9e0:	030c3f00 	movweq	r3, #52992	; 0xcf00
}
     9e4:	3b0b3a0e 	blcc	2cf224 <__ccfg+0x2af27c>
     9e8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     9ec:	1113490c 	tstne	r3, ip, lsl #18
     9f0:	40011201 	andmi	r1, r1, r1, lsl #4
void __pinlist_setirq (int val) {
     9f4:	1f00000a 	svcne	0x0000000a
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 948 <UART0IntHandler+0x58>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	0b3a0e03 	bleq	e84210 <__ccfg+0xe64268>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	0b39053b 	bleq	e41ef4 <__ccfg+0xe21f4c>
	for (i = 0; i < N_PINLIST; i++) {
     a04:	01110c27 	tsteq	r1, r7, lsr #24
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a08:	0a400112 	beq	1000e58 <__ccfg+0xfe0eb0>
     a0c:	00001301 	andeq	r1, r0, r1, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a10:	03000520 	movweq	r0, #1312	; 0x520
     a14:	3b0b3a0e 	blcc	2cf254 <__ccfg+0x2af2ac>
     a18:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	for (i = 0; i < N_PINLIST; i++) {
     a1c:	00060213 	andeq	r0, r6, r3, lsl r2
}
     a20:	00182100 	andseq	r2, r8, r0, lsl #2
     a24:	34220000 	strtcc	r0, [r2], #-0
     a28:	3a080300 	bcc	201630 <__ccfg+0x1e1688>
     a2c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
void GPIOIntHandler () {
     a30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
if (buttons_int) {
     a34:	23000006 	movwcs	r0, #6
     a38:	08030034 	stmdaeq	r3, {r2, r4, r5}
	buttons_disable ();
     a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a40:	13490b39 	movtne	r0, #39737	; 0x9b39
	i_trigger ((aword)&__button_list);
     a44:	00000a02 	andeq	r0, r0, r2, lsl #20
     a48:	03003424 	movweq	r3, #1060	; 0x424
     a4c:	3b0b3a08 	blcc	2cf274 <__ccfg+0x2af2cc>
     a50:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     a54:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
     a58:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
     a5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a60:	01110b39 	tsteq	r1, r9, lsr fp
     a64:	0b260000 	bleq	980a6c <__ccfg+0x960ac4>
     a68:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     a6c:	00130101 	andseq	r0, r3, r1, lsl #2
	RISE_N_SHINE;
     a70:	010b2700 	tsteq	fp, r0, lsl #14
     a74:	13010655 	movwne	r0, #5717	; 0x1655
     a78:	1d280000 	stcne	0, cr0, [r8, #-0]
if (pin_sensor_int) {
     a7c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     a80:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	i_trigger ((aword)(&__input_pins));
     a84:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     a88:	2900000b 	stmdbcs	r0, {r0, r1, r3}
     a8c:	13310005 	teqne	r1, #5
     a90:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
     a94:	3a0e0301 	bcc	3816a0 <__ccfg+0x3616f8>
     a98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a9c:	110c270b 	tstne	ip, fp, lsl #14
     aa0:	40011201 	andmi	r1, r1, r1, lsl #4
     aa4:	0013010a 	andseq	r0, r3, sl, lsl #2
     aa8:	00052b00 	andeq	r2, r5, r0, lsl #22
     aac:	0b3a0803 	bleq	e82ac0 <__ccfg+0xe62b18>
	__pinsen_disable_and_clear;
     ab0:	0b39053b 	bleq	e41fa4 <__ccfg+0xe21ffc>
	RISE_N_SHINE;
     ab4:	06021349 	streq	r1, [r2], -r9, asr #6
     ab8:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     abc:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
     ac0:	3b0b3a0e 	blcc	2cf300 <__ccfg+0x2af358>
     ac4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     ac8:	1113490c 	tstne	r3, ip, lsl #18
     acc:	40011201 	andmi	r1, r1, r1, lsl #4
     ad0:	0013010a 	andseq	r0, r3, sl, lsl #2
void system_init () {
     ad4:	00342d00 	eorseq	r2, r4, r0, lsl #26
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	0b3a0e03 	bleq	e842ec <__ccfg+0xe64344>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	0b39053b 	bleq	e41fd0 <__ccfg+0xe22028>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	06021349 	streq	r1, [r2], -r9, asr #6
     ae4:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     ae8:	030c3f01 	movweq	r3, #52993	; 0xcf01
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aec:	3b0b3a0e 	blcc	2cf32c <__ccfg+0x2af384>
     af0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	010b200c 	tsteq	fp, ip
     af8:	2f000013 	svccs	0x00000013
     afc:	08030005 	stmdaeq	r3, {r0, r2}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b04:	13490b39 	movtne	r0, #39737	; 0x9b39
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	3b0b3a0e 	blcc	2cf350 <__ccfg+0x2af3a8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	110b3905 	tstne	fp, r5, lsl #18
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	40011201 	andmi	r1, r1, r1, lsl #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	0013010a 	andseq	r0, r3, sl, lsl #2
		pin = (port_confs [i] >> 19) & 0x1f;
     b20:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b24:	08030c3f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, sl, fp}
     b28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b2c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     b30:	01111349 	tsteq	r1, r9, asr #6
		if (port_confs [i] & 0x80)
     b34:	0a400112 	beq	1000f84 <__ccfg+0xfe0fdc>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	00001301 	andeq	r1, r0, r1, lsl #6
     b3c:	03000532 	movweq	r0, #1330	; 0x532
		if (port_confs [i] & 0x40)
     b40:	3b0b3a08 	blcc	2cf368 <__ccfg+0x2af3c0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b48:	000a0213 	andeq	r0, sl, r3, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4c:	002e3300 	eoreq	r3, lr, r0, lsl #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	all_leds_blink;
     b58:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     b5c:	01120111 	tsteq	r2, r1, lsl r1
     b60:	00000a40 	andeq	r0, r0, r0, asr #20
     b64:	03000534 	movweq	r0, #1332	; 0x534
     b68:	3b0b3a0e 	blcc	2cf3a8 <__ccfg+0x2af400>
     b6c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b70:	000a0213 	andeq	r0, sl, r3, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	00053500 	andeq	r3, r5, r0, lsl #10
     b78:	0b3a0e03 	bleq	e8438c <__ccfg+0xe643e4>
     b7c:	0b39053b 	bleq	e42070 <__ccfg+0xe220c8>
     b80:	00001349 	andeq	r1, r0, r9, asr #6
     b84:	55010b36 	strpl	r0, [r1, #-2870]	; 0xfffff4ca
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	37000006 	strcc	r0, [r0, -r6]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; adc <system_init+0x8>
     b90:	0b3a0e03 	bleq	e843a4 <__ccfg+0xe643fc>
	IntEnable (INT_AON_RTC_COMB);
     b94:	0b390b3b 	bleq	e43888 <__ccfg+0xe238e0>
     b98:	0b200c27 	bleq	803c3c <__ccfg+0x7e3c94>
     b9c:	00001301 	andeq	r1, r0, r1, lsl #6
	__pi_malloc_init ();
     ba0:	03000538 	movweq	r0, #1336	; 0x538
	IntEnable (INT_AON_GPIO_EDGE);
     ba4:	3b0b3a08 	blcc	2cf3cc <__ccfg+0x2af424>
     ba8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     bac:	39000013 	stmdbcc	r0, {r0, r1, r4}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bb4:	0b3b0b3a 	bleq	ec38a4 <__ccfg+0xea38fc>
     bb8:	13490b39 	movtne	r0, #39737	; 0x9b39
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	343a0000 	ldrtcc	r0, [sl], #-0
     bc0:	3a080300 	bcc	2017c8 <__ccfg+0x1e1820>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bc8:	0013490b 	andseq	r4, r3, fp, lsl #18
     bcc:	000a3b00 	andeq	r3, sl, r0, lsl #22
	urates [0] = UART_RATE / 100;
     bd0:	0b3a0803 	bleq	e82be4 <__ccfg+0xe62c3c>
     bd4:	0b39053b 	bleq	e420c8 <__ccfg+0xe22120>
	reinit_uart ();
     bd8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
	EXTRA_INITIALIZERS;
     bdc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     be0:	3b0b3a0e 	blcc	2cf420 <__ccfg+0x2af478>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     be8:	1201110c 	andne	r1, r1, #12, 2
     bec:	010a4001 	tsteq	sl, r1
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     bf4:	08030005 	stmdaeq	r3, {r0, r2}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	0b3b0b3a 	bleq	ec38e8 <__ccfg+0xea3940>
     bfc:	13490b39 	movtne	r0, #39737	; 0x9b39
			devinit [i] . init (devinit [i] . param);
     c00:	00000602 	andeq	r0, r0, r2, lsl #12
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	0300343e 	movweq	r3, #1086	; 0x43e
     c08:	3b0b3a08 	blcc	2cf430 <__ccfg+0x2af488>
     c0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	IntEnable (INT_UART0_COMB);
     c10:	00060213 	andeq	r0, r6, r3, lsl r2
     c14:	002e3f00 	eoreq	r3, lr, r0, lsl #30
}
     c18:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	tci_run_auxiliary_timer ();
     c1c:	0b3b0b3a 	bleq	ec390c <__ccfg+0xea3964>
		diag ("");
     c20:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     c24:	01120111 	tsteq	r2, r1, lsl r1
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c28:	00000a40 	andeq	r0, r0, r0, asr #20
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	03012e40 	movweq	r2, #7744	; 0x1e40
		diag ("Leftover RAM: %d bytes",
     c30:	3b0b3a0e 	blcc	2cf470 <__ccfg+0x2af4c8>
     c34:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     c38:	2013490c 	andscs	r4, r3, ip, lsl #18
     c3c:	0013010b 	andseq	r0, r3, fp, lsl #2
     c40:	012e4100 			; <UNDEFINED> instruction: 0x012e4100
     c44:	0b3a0e03 	bleq	e84458 <__ccfg+0xe644b0>
     c48:	0b39053b 	bleq	e4213c <__ccfg+0xe22194>
     c4c:	13490c27 	movtne	r0, #39975	; 0x9c27
     c50:	13010b20 	movwne	r0, #6944	; 0x1b20
     c54:	2e420000 	cdpcs	0, 4, cr0, cr2, cr0, {0}
     c58:	11133101 	tstne	r3, r1, lsl #2
     c5c:	40011201 	andmi	r1, r1, r1, lsl #4
     c60:	0013010a 	andseq	r0, r3, sl, lsl #2
     c64:	00054300 	andeq	r4, r5, r0, lsl #6
     c68:	06021331 			; <UNDEFINED> instruction: 0x06021331
     c6c:	34440000 	strbcc	r0, [r4], #-0
     c70:	02133100 	andseq	r3, r3, #0, 2
     c74:	45000006 	strmi	r0, [r0, #-6]
     c78:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c7c:	01120111 	tsteq	r2, r1, lsl r1
     c80:	0b590b58 	bleq	16439e8 <__ccfg+0x1623a40>
     c84:	00000b57 	andeq	r0, r0, r7, asr fp
     c88:	31003446 	tstcc	r0, r6, asr #8
__attribute__ ((noreturn)) void __pi_release () {
     c8c:	47000013 	smladmi	r0, r3, r0, r0
     c90:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c94:	06550152 			; <UNDEFINED> instruction: 0x06550152
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	0b590b58 	bleq	1643a00 <__ccfg+0x1623a58>
	check_stack_overflow;
     c9c:	00000b57 	andeq	r0, r0, r7, asr fp
     ca0:	31000a48 	tstcc	r0, r8, asr #20
     ca4:	00011113 	andeq	r1, r1, r3, lsl r1
	update_n_wake (MAX_WORD, NO);
     ca8:	011d4900 	tsteq	sp, r0, lsl #18
     cac:	01111331 	tsteq	r1, r1, lsr r3
     cb0:	0b580112 	bleq	1601100 <__ccfg+0x15e1158>
	for_all_tasks (__pi_curr) {
     cb4:	0b570559 	bleq	15c2220 <__ccfg+0x15a2278>
     cb8:	2e4a0000 	cdpcs	0, 4, cr0, cr10, cr0, {0}
     cbc:	11133101 	tstne	r3, r1, lsl #2
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	40011201 	andmi	r1, r1, r1, lsl #4
	__SLEEP;
     cc4:	0000000a 	andeq	r0, r0, sl
     cc8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     ccc:	030b130e 	movweq	r1, #45838	; 0xb30e
     cd0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
	system_event_count ++;
     cd4:	10011106 	andne	r1, r1, r6, lsl #2
     cd8:	02000006 	andeq	r0, r0, #6
	switch (__pi_systat.effpdm) {
     cdc:	0b0b0024 	bleq	2c0d74 <__ccfg+0x2a0dcc>
     ce0:	0e030b3e 	vmoveq.16	d3[0], r0
     ce4:	16030000 	strne	r0, [r3], -r0
     ce8:	3a0e0300 	bcc	3818f0 <__ccfg+0x361948>
			__WFI ();
     cec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cf0:	0013490b 	andseq	r4, r3, fp, lsl #18
     cf4:	00240400 	eoreq	r0, r4, r0, lsl #8
	check_stack_overflow;
     cf8:	0b3e0b0b 	bleq	f8392c <__ccfg+0xf63984>
     cfc:	00000803 	andeq	r0, r0, r3, lsl #16
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     d00:	03011305 	movweq	r1, #4869	; 0x1305
     d04:	3a0b0b0e 	bcc	2c3944 <__ccfg+0x2a399c>
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	010b3b0b 	tsteq	fp, fp, lsl #22
			goto Redo;
     d0c:	06000013 			; <UNDEFINED> instruction: 0x06000013
	for_all_tasks (__pi_curr) {
     d10:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	0b381349 	bleq	e05a40 <__ccfg+0xde5a98>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	00000c34 	andeq	r0, r0, r4, lsr ip
     d1c:	0b000f07 	bleq	4940 <__exidx_end+0x1a38>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	0800000b 	stmdaeq	r0, {r0, r1, r3}
     d24:	13490026 	movtne	r0, #36902	; 0x9026
     d28:	35090000 	strcc	r0, [r9, #-0]
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2c:	00134900 	andseq	r4, r3, r0, lsl #18
     d30:	000f0a00 	andeq	r0, pc, r0, lsl #20
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     d38:	130b0000 	movwne	r0, #45056	; 0xb000
			__WFI ();
     d3c:	3a0b0b01 	bcc	2c3948 <__ccfg+0x2a39a0>
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d44:	0013010b 	andseq	r0, r3, fp, lsl #2
}
     d48:	000d0c00 	andeq	r0, sp, r0, lsl #24
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	0b3a0e03 	bleq	e84560 <__ccfg+0xe645b8>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	0b390b3b 	bleq	e43a44 <__ccfg+0xe23a9c>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	0b0b1349 	bleq	2c5a80 <__ccfg+0x2a5ad8>
     d58:	0b0c0b0d 	bleq	303994 <__ccfg+0x2e39ec>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5c:	00000b38 	andeq	r0, r0, r8, lsr fp
     d60:	03000d0d 	movweq	r0, #3341	; 0xd0d
     d64:	3b0b3a0e 	blcc	2cf5a4 <__ccfg+0x2af5fc>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	000b3813 	andeq	r3, fp, r3, lsl r8
     d70:	00340e00 	eorseq	r0, r4, r0, lsl #28
     d74:	0b3a0e03 	bleq	e84588 <__ccfg+0xe645e0>
     d78:	0b390b3b 	bleq	e43a6c <__ccfg+0xe23ac4>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; c60 <system_init+0x18c>
     d80:	00000c3c 	andeq	r0, r0, ip, lsr ip
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	00130113 	andseq	r0, r3, r3, lsl r1
     d8c:	00211000 	eoreq	r1, r1, r0
     d90:	16110000 	ldrne	r0, [r1], -r0
     d94:	3a0e0300 	bcc	38199c <__ccfg+0x3619f4>
     d98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			SysCtrlSetRechargeBeforePowerDown
     d9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da0:	01151200 	tsteq	r5, r0, lsl #4
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da4:	13010c27 	movwne	r0, #7207	; 0x1c27
     da8:	05130000 	ldreq	r0, [r3, #-0]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	00134900 	andseq	r4, r3, r0, lsl #18
     db0:	00341400 	eorseq	r1, r4, r0, lsl #8
     db4:	0b3a0e03 	bleq	e845c8 <__ccfg+0xe64620>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	0b39053b 	bleq	e422ac <__ccfg+0xe22304>
     dbc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ca0 <__pi_release+0x14>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	27011515 	smladcs	r1, r5, r5, r1
     dc8:	0113490c 	tsteq	r3, ip, lsl #18
     dcc:	16000013 			; <UNDEFINED> instruction: 0x16000013
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dd0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
			while (!(AONWUCPowerStatusGet () &
     dd4:	0b3a0b0b 	bleq	e83a08 <__ccfg+0xe63a60>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	0b390b3b 	bleq	e43acc <__ccfg+0xe23b24>
     ddc:	00001301 	andeq	r1, r0, r1, lsl #6
     de0:	0b011717 	bleq	46a44 <__ccfg+0x26a9c>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de4:	3b0b3a0b 	blcc	2cf618 <__ccfg+0x2af670>
     de8:	010b390b 	tsteq	fp, fp, lsl #18
     dec:	18000013 	stmdane	r0, {r0, r1, r4}
     df0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	0b3b0b3a 	bleq	ec3ae4 <__ccfg+0xea3b3c>
     df8:	13490b39 	movtne	r0, #39737	; 0x9b39
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	0d190000 	ldceq	0, cr0, [r9, #-0]
     e00:	3a080300 	bcc	201a08 <__ccfg+0x1e1a60>
			SysCtrlAdjustRechargeAfterPowerDown ();
     e04:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			reinit_uart ();
     e08:	0013490b 	andseq	r4, r3, fp, lsl #18
     e0c:	000d1a00 	andeq	r1, sp, r0, lsl #20
     e10:	0b3a0803 	bleq	e82e24 <__ccfg+0xe62e7c>
}
     e14:	0b390b3b 	bleq	e43b08 <__ccfg+0xe23b60>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	0b381349 	bleq	e05b44 <__ccfg+0xde5b9c>
     e1c:	131b0000 	tstne	fp, #0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	3a0b0b01 	bcc	2c3a2c <__ccfg+0x2a3a84>
     e24:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e28:	0013010b 	andseq	r0, r3, fp, lsl #2
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	000d1c00 	andeq	r1, sp, r0, lsl #24
     e30:	0b3a0e03 	bleq	e84644 <__ccfg+0xe6469c>
     e34:	0b39053b 	bleq	e42328 <__ccfg+0xe22380>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e38:	0b381349 	bleq	e05b64 <__ccfg+0xde5bbc>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e3c:	131d0000 	tstne	sp, #0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	0b0e0301 	bleq	381a4c <__ccfg+0x361aa4>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	3b0b3a0b 	blcc	2cf678 <__ccfg+0x2af6d0>
     e48:	010b3905 	tsteq	fp, r5, lsl #18
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     e50:	13490021 	movtne	r0, #36897	; 0x9021
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	00000b2f 	andeq	r0, r0, pc, lsr #22
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	0300341f 	movweq	r3, #1055	; 0x41f
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	3b0b3a0e 	blcc	2cf69c <__ccfg+0x2af6f4>
     e60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			PRCMPowerDomainOff (
     e64:	000a0213 	andeq	r0, sl, r3, lsl r2
     e68:	002e2000 	eoreq	r2, lr, r0
	__SLEEP;
     e6c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     e70:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	goto Redo;
     e78:	01120111 	tsteq	r2, r1, lsl r1
     e7c:	00000a40 	andeq	r0, r0, r0, asr #20
     e80:	3f012e21 	svccc	0x00012e21
     e84:	3a0e030c 	bcc	381abc <__ccfg+0x361b14>
     e88:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e8c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     e90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     e94:	010a4001 	tsteq	sl, r1
     e98:	22000013 	andcs	r0, r0, #19
     e9c:	08030005 	stmdaeq	r3, {r0, r2}
     ea0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ea4:	13490b39 	movtne	r0, #39737	; 0x9b39
     ea8:	00000602 	andeq	r0, r0, r2, lsl #12
     eac:	31011d23 	tstcc	r1, r3, lsr #26
     eb0:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     eb4:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     eb8:	000b5705 	andeq	r5, fp, r5, lsl #14
     ebc:	00052400 	andeq	r2, r5, r0, lsl #8
     ec0:	06021331 			; <UNDEFINED> instruction: 0x06021331
     ec4:	0b250000 	bleq	940ecc <__ccfg+0x920f24>
     ec8:	00065501 	andeq	r5, r6, r1, lsl #10
     ecc:	00342600 	eorseq	r2, r4, r0, lsl #12
     ed0:	06021331 			; <UNDEFINED> instruction: 0x06021331
     ed4:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     ed8:	030c3f01 	movweq	r3, #52993	; 0xcf01
     edc:	3b0b3a0e 	blcc	2cf71c <__ccfg+0x2af774>
     ee0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
int main (void) {
     ee4:	1201110c 	andne	r1, r1, #12, 2
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	010a4001 	tsteq	sl, r1
     eec:	28000013 	stmdacs	r0, {r0, r1, r4}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	08030034 	stmdaeq	r3, {r2, r4, r5}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	system_init ();
     ef8:	13490b39 	movtne	r0, #39737	; 0x9b39
	tcv_init ();
     efc:	00000602 	andeq	r0, r0, r2, lsl #12
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f00:	03003429 	movweq	r3, #1065	; 0x429
     f04:	3b0b3a08 	blcc	2cf72c <__ccfg+0x2af784>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f0c:	2a000013 	bcs	f60 <killev+0x1c>
     f10:	08030034 	stmdaeq	r3, {r2, r4, r5}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f14:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f18:	13490b39 	movtne	r0, #39737	; 0x9b39
	delay (16, 0);
     f1c:	00000a02 	andeq	r0, r0, r2, lsl #20
     f20:	0300052b 	movweq	r0, #1323	; 0x52b
     f24:	3b0b3a0e 	blcc	2cf764 <__ccfg+0x2af7bc>
	__pi_release ();
     f28:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f2c:	00060213 	andeq	r0, r6, r3, lsl r2
     f30:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     f34:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     f38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f3c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     f40:	0b201349 	bleq	805c6c <__ccfg+0x7e5cc4>
static void killev (__pi_pcb_t *pid) {
     f44:	00001301 	andeq	r1, r0, r1, lsl #6
	wfun = (aword)(pid->code);
     f48:	0300052d 	movweq	r0, #1325	; 0x52d
	for_all_tasks (i) {
     f4c:	3b0b3a0e 	blcc	2cf78c <__ccfg+0x2af7e4>
		for (j = 0; j < nevents (i); j++) {
     f50:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f54:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
     f58:	08030005 	stmdaeq	r3, {r0, r2}
			    || i->Events [j] . Event == wfun
     f5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		for (j = 0; j < nevents (i); j++) {
     f60:	13490b39 	movtne	r0, #39737	; 0x9b39
			if (i->Events [j] . Event == (aword)pid
     f64:	0b2f0000 	bleq	bc0f6c <__ccfg+0xba0fc4>
     f68:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     f6c:	30000001 	andcc	r0, r0, r1
				wakeupev (i, j);
     f70:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f74:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for_all_tasks (i) {
     f78:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     f7c:	00000a02 	andeq	r0, r0, r2, lsl #20
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	03000a31 	movweq	r0, #2609	; 0xa31
static void qfree (aword *ch) {
     f84:	3b0b3a0e 	blcc	2cf7c4 <__ccfg+0x2af81c>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	110b3905 	tstne	fp, r5, lsl #18
	cc = (aword*)(mpools + MA_NP);
     f8c:	32000001 	andcc	r0, r0, #1
	m_setnextp (ch, chunk);
     f90:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	m_setnextp (cc, ch);
     f94:	01120111 	tsteq	r2, r1, lsl r1
}
     f98:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	00000b57 	andeq	r0, r0, r7, asr fp
     fa0:	31000533 	tstcc	r0, r3, lsr r5
     fa4:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
			m_setnextp (cc, m_nextp (chunk));
     fa8:	08030005 	stmdaeq	r3, {r0, r2}
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fb0:	13490b39 	movtne	r0, #39737	; 0x9b39
     fb4:	00000a02 	andeq	r0, r0, r2, lsl #20
     fb8:	00001835 	andeq	r1, r0, r5, lsr r8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	00343600 	eorseq	r3, r4, r0, lsl #12
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	0b3a0e03 	bleq	e847d4 <__ccfg+0xe6482c>
     fc4:	0b39053b 	bleq	e424b8 <__ccfg+0xe22510>
     fc8:	00001349 	andeq	r1, r0, r9, asr #6
			m_setnextp (cc, m_nextp (chunk));
     fcc:	03012e37 	movweq	r2, #7735	; 0x1e37
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	3b0b3a08 	blcc	2cf7f8 <__ccfg+0x2af850>
     fd4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     fd8:	1113490c 	tstne	r3, ip, lsl #18
     fdc:	40011201 	andmi	r1, r1, r1, lsl #4
     fe0:	0013010a 	andseq	r0, r3, sl, lsl #2
     fe4:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
			if (m_size (chunk) >= m_size (ch))
     fe8:	0b3a0803 	bleq	e82ffc <__ccfg+0xe63054>
     fec:	0b39053b 	bleq	e424e0 <__ccfg+0xe22538>
     ff0:	01110c27 	tsteq	r1, r7, lsr #24
		chunk = m_nextp (chunk))
     ff4:	0a400112 	beq	1001444 <__ccfg+0xfe149c>
     ff8:	00001301 	andeq	r1, r0, r1, lsl #6
     ffc:	03012e39 	movweq	r2, #7737	; 0x1e39
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	3b0b3a0e 	blcc	2cf840 <__ccfg+0x2af898>
	diag_wait (a);
    1004:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	diag_wchar (c, a);
    1008:	010b200c 	tsteq	fp, ip
    100c:	3a000013 	bcc	1060 <update_n_wake+0x38>
}
    1010:	08030005 	stmdaeq	r3, {r0, r2}
    1014:	0b3b0b3a 	bleq	ec3d04 <__ccfg+0xea3d5c>
	syserror (ESTATE, "state");
    1018:	13490b39 	movtne	r0, #39737	; 0x9b39
    101c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
    1020:	3a0e0301 	bcc	381c2c <__ccfg+0x361c84>
    1024:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void update_n_wake (word min, Boolean force) {
    1028:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	010b2013 	tsteq	fp, r3, lsl r0
    1030:	3c000013 	stccc	0, cr0, [r0], {19}
    1034:	08030034 	stmdaeq	r3, {r2, r4, r5}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	0b3b0b3a 	bleq	ec3d28 <__ccfg+0xea3d80>
    103c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1040:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
    1044:	3a080301 	bcc	201c50 <__ccfg+0x1e1ca8>
    1048:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    104c:	200c270b 	andcs	r2, ip, fp, lsl #14
    1050:	0013010b 	andseq	r0, r3, fp, lsl #2
    1054:	012e3e00 			; <UNDEFINED> instruction: 0x012e3e00
    1058:	01111331 	tsteq	r1, r1, lsr r3
    105c:	0a400112 	beq	10014ac <__ccfg+0xfe1504>
    1060:	00001301 	andeq	r1, r0, r1, lsl #6
    1064:	3100053f 	tstcc	r0, pc, lsr r5
    1068:	000a0213 	andeq	r0, sl, r3, lsl r2
		for_all_tasks (i) {
    106c:	011d4000 	tsteq	sp, r0
	__pi_mintk = znew + min;
    1070:	01111331 	tsteq	r1, r1, lsr r3
    1074:	0b580112 	bleq	16014c4 <__ccfg+0x15e151c>
			if (!twaiting (i))
    1078:	0b570b59 	bleq	15c3de4 <__ccfg+0x15a3e3c>
    107c:	1d410000 	stclne	0, cr0, [r1, #-0]
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1084:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
    1088:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    108c:	4200000b 	andmi	r0, r0, #11
    1090:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    1094:	01120111 	tsteq	r2, r1, lsl r1
    1098:	00000a40 	andeq	r0, r0, r0, asr #20
    109c:	31003443 	tstcc	r0, r3, asr #8
    10a0:	00000013 	andeq	r0, r0, r3, lsl r0
    10a4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    10a8:	030b130e 	movweq	r1, #45838	; 0xb30e
    10ac:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
				wakeuptm (i);
    10b0:	10011106 	andne	r1, r1, r6, lsl #2
    10b4:	02000006 	andeq	r0, r0, #6
		for_all_tasks (i) {
    10b8:	0b0b0024 	bleq	2c1150 <__ccfg+0x2a11a8>
				d = i->Timer - znew;
    10bc:	0e030b3e 	vmoveq.16	d3[0], r0
    10c0:	16030000 	strne	r0, [r3], -r0
    10c4:	3a0e0300 	bcc	381ccc <__ccfg+0x361d24>
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    10d0:	00240400 	eoreq	r0, r4, r0, lsl #8
	__pi_old = znew;
    10d4:	0b3e0b0b 	bleq	f83d08 <__ccfg+0xf63d60>
}
    10d8:	00000803 	andeq	r0, r0, r3, lsl #16
	TCI_RUN_DELAY_TIMER;
    10dc:	0b000f05 	bleq	4cf8 <__exidx_end+0x1df0>
}
    10e0:	0013490b 	andseq	r4, r3, fp, lsl #18
    10e4:	00260600 	eoreq	r0, r6, r0, lsl #12
    10e8:	00001349 	andeq	r1, r0, r9, asr #6
    10ec:	27001507 	strcs	r1, [r0, -r7, lsl #10]
    10f0:	0800000c 	stmdaeq	r0, {r2, r3}
void proceed (word state) {
    10f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	prcdstate (__pi_curr, state);
    10f8:	0b3b0b3a 	bleq	ec3de8 <__ccfg+0xea3e40>
    10fc:	13490b39 	movtne	r0, #39737	; 0x9b39
	release;
    1100:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1104:	01090000 	mrseq	r0, (UNDEF: 9)
void __pi_wait (aword event, word state) {
    1108:	01134901 	tsteq	r3, r1, lsl #18
	sint j = nevents (__pi_curr);
    110c:	0a000013 	beq	1160 <__pi_trigger+0x24>
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	13490021 	movtne	r0, #36897	; 0x9021
    1114:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1118:	0300340b 	movweq	r3, #1035	; 0x40b
		syserror (ENEVENTS, "sw");
    111c:	3b0b3a0e 	blcc	2cf95c <__ccfg+0x2af9b4>
    1120:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	setestate (__pi_curr->Events [j], state, event);
    1124:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
	incwait (__pi_curr);
    1128:	0c00000a 	stceq	0, cr0, [r0], {10}
	setestate (__pi_curr->Events [j], state, event);
    112c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
}
    1130:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1134:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1138:	01120111 	tsteq	r2, r1, lsl r1
void __pi_trigger (aword event) {
    113c:	00000a40 	andeq	r0, r0, r0, asr #20
	for_all_tasks (i) {
    1140:	3f012e0d 	svccc	0x00012e0d
		for (j = 0; j < nevents (i); j++) {
    1144:	3a0e030c 	bcc	381d7c <__ccfg+0x361dd4>
    1148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    114c:	110c270b 	tstne	ip, fp, lsl #14
    1150:	40011201 	andmi	r1, r1, r1, lsl #4
			if (i->Events [j] . Event == event) {
    1154:	0e00000a 	cdpeq	0, 0, cr0, cr0, cr10, {0}
    1158:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    115c:	0b3b0b3a 	bleq	ec3e4c <__ccfg+0xea3ea4>
				wakeupev (i, j);
    1160:	13490b39 	movtne	r0, #39737	; 0x9b39
    1164:	00000602 	andeq	r0, r0, r2, lsl #12
	for_all_tasks (i) {
    1168:	01110100 	tsteq	r1, r0, lsl #2
}
    116c:	0b130e25 	bleq	4c4a08 <__ccfg+0x4a4a60>
aword __pi_join (aword pid, word st) {
    1170:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
	for_all_tasks (i) {
    1174:	00000610 	andeq	r0, r0, r0, lsl r6
    1178:	0b002402 	bleq	a188 <__exidx_end+0x7280>
	return 0;
    117c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
		if ((aword)i == pid) {
    1180:	0300000e 	movweq	r0, #14
			__pi_wait (pid, st);
    1184:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
}
    1188:	0b3b0b3a 	bleq	ec3e78 <__ccfg+0xea3ed0>
	for_all_tasks (i) {
    118c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1190:	24040000 	strcs	r0, [r4], #-0
void delay (word d, word state) {
    1194:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	settstate (__pi_curr, state);
    1198:	0008030b 	andeq	r0, r8, fp, lsl #6
    119c:	01130500 	tsteq	r3, r0, lsl #10
    11a0:	0b3a0b0b 	bleq	e83dd4 <__ccfg+0xe63e2c>
    11a4:	0b390b3b 	bleq	e43e98 <__ccfg+0xe23ef0>
	update_n_wake (d, YES);
    11a8:	00001301 	andeq	r1, r0, r1, lsl #6
    11ac:	03000d06 	movweq	r0, #3334	; 0xd06
	__pi_curr->Timer = __pi_old + d;
    11b0:	3b0b3a0e 	blcc	2cf9f0 <__ccfg+0x2afa48>
    11b4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	inctimer (__pi_curr);
    11b8:	000b3813 	andeq	r3, fp, r3, lsl r8
    11bc:	00260700 	eoreq	r0, r6, r0, lsl #14
    11c0:	00001349 	andeq	r1, r0, r9, asr #6
}
    11c4:	03003408 	movweq	r3, #1032	; 0x408
    11c8:	3b0b3a0e 	blcc	2cfa08 <__ccfg+0x2afa60>
	if (fun == NULL)
    11cc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		return (int) __pi_curr;
    11d0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    11d4:	0900000c 	stmdbeq	r0, {r2, r3}
	for_all_tasks (i)
    11d8:	13490035 	movtne	r0, #36917	; 0x9035
}
    11dc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
		if (i->code == fun)
    11e0:	3a0e0300 	bcc	381de8 <__ccfg+0x361e40>
	for_all_tasks (i)
    11e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11e8:	0b13490b 	bleq	4d361c <__ccfg+0x4b3674>
    11ec:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
word crunning (fsmcode fun) {
    11f0:	000b380b 	andeq	r3, fp, fp, lsl #16
	for_all_tasks (i)
    11f4:	000f0b00 	andeq	r0, pc, r0, lsl #22
    11f8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
		if (i->code == fun)
    11fc:	010c0000 	mrseq	r0, (UNDEF: 12)
    1200:	01134901 	tsteq	r3, r1, lsl #18
			c++;
    1204:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
	for_all_tasks (i)
    1208:	00000021 	andeq	r0, r0, r1, lsr #32
    120c:	0300160e 	movweq	r1, #1550	; 0x60e
int __pi_strlen (const char *s) {
    1210:	3b0b3a0e 	blcc	2cfa50 <__ccfg+0x2afaa8>
	for (i = 0; *(s+i) != '\0'; i++);
    1214:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    1218:	0f000013 	svceq	0x00000013
	for (i = 0; *(s+i) != '\0'; i++);
    121c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	while (n--)
    1220:	00001301 	andeq	r1, r0, r1, lsl #6
    1224:	49000510 	stmdbmi	r0, {r4, r8, sl}
		*dest++ = *src++;
    1228:	11000013 	tstne	r0, r3, lsl r0
    122c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1230:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	13490b39 	movtne	r0, #39737	; 0x9b39
		syserror (EREQPAR, "addv");
    1238:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
		syserror (ERESOURCE, "addv");
    123c:	13120000 	tstne	r2, #0
	if (ioreq [loc] != NULL)
    1240:	3a0b0b01 	bcc	2c3e4c <__ccfg+0x2a3ea4>
    1244:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		syserror (ERESOURCE, "addv");
    1248:	0013010b 	andseq	r0, r3, fp, lsl #2
	ioreq [loc] = rf;
    124c:	000d1300 	andeq	r1, sp, r0, lsl #6
}
    1250:	0b3a0e03 	bleq	e84a64 <__ccfg+0xe64abc>
    1254:	0b39053b 	bleq	e42748 <__ccfg+0xe227a0>
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	0b381349 	bleq	e05f84 <__ccfg+0xde5fdc>
    125c:	13140000 	tstne	r4, #0
    1260:	0b0e0301 	bleq	381e6c <__ccfg+0x361ec4>
    1264:	3b0b3a0b 	blcc	2cfa98 <__ccfg+0x2afaf0>
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1268:	010b3905 	tsteq	fp, r5, lsl #18
    126c:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1270:	13490021 	movtne	r0, #36897	; 0x9021
		syserror (ENODEVICE, "io");
    1274:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1278:	47003416 	smladmi	r0, r6, r4, r3
	if (len == 0)
    127c:	3b0b3a13 	blcc	2cfad0 <__ccfg+0x2afb28>
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	020b3905 	andeq	r3, fp, #81920	; 0x14000
    1284:	0000000a 	andeq	r0, r0, sl
	if (ret >= 0)
    1288:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
	if (ret == -1) {
    128c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1290:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
		if (retry == WNONE)
    1294:	10011106 	andne	r1, r1, r6, lsl #2
		iowait (dev, operation, retry);
    1298:	02000006 	andeq	r0, r0, #6
    129c:	0b0b0024 	bleq	2c1334 <__ccfg+0x2a138c>
    12a0:	0e030b3e 	vmoveq.16	d3[0], r0
			release;
    12a4:	16030000 	strne	r0, [r3], -r0
	if (ret == -2) {
    12a8:	3a0e0300 	bcc	381eb0 <__ccfg+0x361f08>
		if (retry != WNONE) {
    12ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12b0:	0013490b 	andseq	r4, r3, fp, lsl #18
			iowait (dev, operation, retry);
    12b4:	00240400 	eoreq	r0, r4, r0, lsl #8
    12b8:	0b3e0b0b 	bleq	f83eec <__ccfg+0xf63f44>
			(ioreq [dev]) (NONE, buf, len);
    12bc:	00000803 	andeq	r0, r0, r3, lsl #16
    12c0:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    12c4:	06000013 			; <UNDEFINED> instruction: 0x06000013
		(ioreq [dev]) (NONE, buf, len);
    12c8:	13490035 	movtne	r0, #36917	; 0x9035
    12cc:	0f070000 	svceq	0x00070000
    12d0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
}
    12d4:	08000013 	stmdaeq	r0, {r0, r1, r4}
	if (retry != WNONE) {
    12d8:	0b0b0113 	bleq	2c172c <__ccfg+0x2a1784>
		delay (-ret - 2, retry);
    12dc:	0b3b0b3a 	bleq	ec3fcc <__ccfg+0xea4024>
    12e0:	13010b39 	movwne	r0, #6969	; 0x1b39
    12e4:	0d090000 	stceq	0, cr0, [r9, #-0]
    12e8:	3a0e0300 	bcc	381ef0 <__ccfg+0x361f48>
		release;
    12ec:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12f0:	0b13490b 	bleq	4d3724 <__ccfg+0x4b377c>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    12f8:	000b380b 	andeq	r3, fp, fp, lsl #16
    12fc:	000d0a00 	andeq	r0, sp, r0, lsl #20
    1300:	0b3a0e03 	bleq	e84b14 <__ccfg+0xe64b6c>
    1304:	0b390b3b 	bleq	e43ff8 <__ccfg+0xe24050>
		syserror (ERESOURCE, "mal1");
    1308:	0b381349 	bleq	e06034 <__ccfg+0xde608c>
    130c:	340b0000 	strcc	r0, [fp], #-0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	3a0e0300 	bcc	381f18 <__ccfg+0x361f70>
    1314:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1318:	3f13490b 	svccc	0x0013490b
	m_size (mpools [0]) = mlen - m_hdrlen;
    131c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1320:	01010c00 	tsteq	r1, r0, lsl #24
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1324:	13011349 	movwne	r1, #4937	; 0x1349
    1328:	210d0000 	mrscs	r0, (UNDEF: 13)
}
    132c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1330:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1334:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1338:	13490b39 	movtne	r0, #39737	; 0x9b39
    133c:	150f0000 	strne	r0, [pc, #-0]	; 1344 <__pi_free>
    1340:	010c2701 	tsteq	ip, r1, lsl #14
void __pi_free (aword *ch) {
    1344:	10000013 	andne	r0, r0, r3, lsl r0
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1348:	13490005 	movtne	r0, #36869	; 0x9005
    134c:	34110000 	ldrcc	r0, [r1], #-0
		syserror (EMALLOC, "malg");
    1350:	3a0e0300 	bcc	381f58 <__ccfg+0x361fb0>
    1354:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	mcfree [MA_NP] += m_size (ch);
    1358:	3f13490b 	svccc	0x0013490b
		m_size (ch) ^= MALLOC_UMASK;
    135c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1360:	01131200 	tsteq	r3, r0, lsl #4
	mcfree [MA_NP] += m_size (ch);
    1364:	0b3a0b0b 	bleq	e83f98 <__ccfg+0xe63ff0>
	QFREE;
    1368:	0b39053b 	bleq	e4285c <__ccfg+0xe228b4>
	if (mevent [MA_NP] . nwait) {
    136c:	00001301 	andeq	r1, r0, r1, lsl #6
    1370:	03000d13 	movweq	r0, #3347	; 0xd13
		trigger ((aword)(&(mevent [MA_NP])));
    1374:	3b0b3a0e 	blcc	2cfbb4 <__ccfg+0x2afc0c>
		mevent [MA_NP] . nwait --;
    1378:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
}
    137c:	000b3813 	andeq	r3, fp, r3, lsl r8
    1380:	01131400 	tsteq	r3, r0, lsl #8
    1384:	0b0b0e03 	bleq	2c4b98 <__ccfg+0x2a4bf0>
    1388:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void kill (aword pid) {
    138c:	13010b39 	movwne	r0, #6969	; 0x1b39
		pid = (aword) __pi_curr;
    1390:	21150000 	tstcs	r5, r0
	j = NULL;
    1394:	2f134900 	svccs	0x00134900
	for_all_tasks (i) {
    1398:	1600000b 	strne	r0, [r0], -fp
	syserror (EREQPAR, "kpi");
    139c:	13470034 	movtne	r0, #28724	; 0x7034
    13a0:	0b3b0b3a 	bleq	ec4090 <__ccfg+0xea40e8>
		if ((aword)i == pid) {
    13a4:	0a020b39 	beq	84090 <__ccfg+0x640e8>
    13a8:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
				__PCB = i->Next;
    13ac:	030c3f01 	movweq	r3, #52993	; 0xcf01
			killev (i);
    13b0:	3b0b3a0e 	blcc	2cfbf0 <__ccfg+0x2afc48>
			ufree (i);
    13b4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			if (i == __pi_curr)
    13b8:	1201110c 	andne	r1, r1, #12, 2
    13bc:	010a4001 	tsteq	sl, r1
				release;
    13c0:	18000013 	stmdane	r0, {r0, r1, r4}
				j->Next = i->Next;
    13c4:	08030005 	stmdaeq	r3, {r0, r2}
    13c8:	0b3b0b3a 	bleq	ec40b8 <__ccfg+0xea4110>
    13cc:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    13d0:	00000602 	andeq	r0, r0, r2, lsl #12
    13d4:	03000519 	movweq	r0, #1305	; 0x519
    13d8:	3b0b3a0e 	blcc	2cfc18 <__ccfg+0x2afc70>
void killall (fsmcode fun) {
    13dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	j = NULL;
    13e0:	00060213 	andeq	r0, r6, r3, lsl r2
	for (i = __PCB; i != NULL; ) {
    13e4:	00341a00 	eorseq	r1, r4, r0, lsl #20
			if (i == __pi_curr)
    13e8:	0b3a0803 	bleq	e833fc <__ccfg+0xe63454>
	for (i = __PCB; i != NULL; ) {
    13ec:	0b390b3b 	bleq	e440e0 <__ccfg+0xe24138>
	if (rel)
    13f0:	00001349 	andeq	r1, r0, r9, asr #6
		release;
    13f4:	0300341b 	movweq	r3, #1051	; 0x41b
		if (i->code == fun) {
    13f8:	3b0b3a08 	blcc	2cfc20 <__ccfg+0x2afc78>
    13fc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			if (j == NULL)
    1400:	00060213 	andeq	r0, r6, r3, lsl r2
				__PCB = k;
    1404:	001d1c00 	andseq	r1, sp, r0, lsl #24
			if (i == __pi_curr)
    1408:	01111331 	tsteq	r1, r1, lsr r3
				rel = YES;
    140c:	0b580112 	bleq	160185c <__ccfg+0x15e18b4>
			killev (i);
    1410:	0b570b59 	bleq	15c417c <__ccfg+0x15a41d4>
			ufree (i);
    1414:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
			i = k;
    1418:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    141c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
				j->Next = k;
    1420:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
    1424:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
}
    1428:	13310005 	teqne	r1, #5
    142c:	00000602 	andeq	r0, r0, r2, lsl #12
    1430:	3f002e1f 	svccc	0x00002e1f
	if (size < 8)
    1434:	3a0e030c 	bcc	38206c <__ccfg+0x3620c4>
		_size = 2;
    1438:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		_size = (((aword)size) + 3) >> 2;
    1440:	000a4001 	andeq	r4, sl, r1
		if (m_magic (chunk) != MALLOC_MAGIC)
    1444:	002e2000 	eoreq	r2, lr, r0
		_size = (((aword)size) + 3) >> 2;
    1448:	0b3a0e03 	bleq	e84c5c <__ccfg+0xe64cb4>
		if (mevent [MA_NP] . nfail != 255)
    144c:	0b390b3b 	bleq	e44140 <__ccfg+0xe24198>
    1450:	0b200c27 	bleq	8044f4 <__ccfg+0x7e454c>
			mevent [MA_NP] . nfail ++;
    1454:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
		mnfree [MA_NP] = 0;
    1458:	3a0e0301 	bcc	382064 <__ccfg+0x3620bc>
    145c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (m_magic (chunk) != MALLOC_MAGIC)
    1460:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1464:	000b2013 	andeq	r2, fp, r3, lsl r0
			syserror (EMALLOC, "malc");
    1468:	00052200 	andeq	r2, r5, r0, lsl #4
    146c:	0b3a0e03 	bleq	e84c80 <__ccfg+0xe64cd8>
		if (m_size (chunk) >= _size)
    1470:	0b390b3b 	bleq	e44164 <__ccfg+0xe241bc>
    1474:	00001349 	andeq	r1, r0, r9, asr #6
		chunk = m_nextp (chunk)) {
    1478:	01110100 	tsteq	r1, r0, lsl #2
		m_setnextp (cc, m_nextp (chunk));
    147c:	0b130e25 	bleq	4c4d18 <__ccfg+0x4a4d70>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1480:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1484:	01110655 	tsteq	r1, r5, asr r6
			m_size (chunk) = _size;
    1488:	00000610 	andeq	r0, r0, r0, lsl r6
			cc = chunk + _size + m_hdrlen;
    148c:	0b002402 	bleq	a49c <__exidx_end+0x7594>
    1490:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
			m_size (cc) = waste - m_hdrlen;
    1494:	0300000e 	movweq	r0, #14
			QFREE;
    1498:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		mevent [MA_NP] . nfail = 0;
    149c:	0b3b0b3a 	bleq	ec418c <__ccfg+0xea41e4>
		mcfree [MA_NP] -= m_size (chunk);
    14a0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14a4:	24040000 	strcs	r0, [r4], #-0
    14a8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    14ac:	0008030b 	andeq	r0, r8, fp, lsl #6
		m_size (chunk) |= MALLOC_UMASK;
    14b0:	00260500 	eoreq	r0, r6, r0, lsl #10
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14b4:	00001349 	andeq	r1, r0, r9, asr #6
		m_size (chunk) |= MALLOC_UMASK;
    14b8:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
			mnfree [MA_NP] = mcfree [MA_NP];
    14bc:	07000013 	smladeq	r0, r3, r0, r0
}
    14c0:	0b0b0113 	bleq	2c1914 <__ccfg+0x2a196c>
    14c4:	0b3b0b3a 	bleq	ec41b4 <__ccfg+0xea420c>
    14c8:	13010b39 	movwne	r0, #6969	; 0x1b39
    14cc:	0d080000 	stceq	0, cr0, [r8, #-0]
    14d0:	3a0e0300 	bcc	3820d8 <__ccfg+0x362130>
    14d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14d8:	0b13490b 	bleq	4d390c <__ccfg+0x4b3964>
aword __pi_fork (fsmcode func, aword data) {
    14dc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e0:	000b380b 	andeq	r3, fp, fp, lsl #16
    14e4:	000d0900 	andeq	r0, sp, r0, lsl #18
    14e8:	0b3a0e03 	bleq	e84cfc <__ccfg+0xe64d54>
		if ((j = __PCB) == NULL)
    14ec:	0b390b3b 	bleq	e441e0 <__ccfg+0xe24238>
	i->Next = NULL;
    14f0:	0b381349 	bleq	e0621c <__ccfg+0xde6274>
	i->data = data;
    14f4:	340a0000 	strcc	r0, [sl], #-0
		if ((j = __PCB) == NULL)
    14f8:	3a0e0300 	bcc	382100 <__ccfg+0x362158>
}
    14fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			for (; j->Next != NULL; j = j->Next);
    1500:	3f13490b 	svccc	0x0013490b
    1504:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	return (aword) i;
    1508:	000f0b00 	andeq	r0, pc, r0, lsl #22
    150c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	if (mevent [MA_NP] . nwait != 255)
    1510:	010c0000 	mrseq	r0, (UNDEF: 12)
    1514:	01134901 	tsteq	r3, r1, lsl #18
    1518:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
		mevent [MA_NP] . nwait ++;
    151c:	00000021 	andeq	r0, r0, r1, lsr #32
	wait ((aword)(&(mevent [MA_NP])), state);
    1520:	0300160e 	movweq	r1, #1550	; 0x60e
    1524:	3b0b3a0e 	blcc	2cfd64 <__ccfg+0x2afdbc>
void diag (const char *mess, ...) {
    1528:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    152c:	0f000013 	svceq	0x00000013
    1530:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	diag_disable_int (a, is);
    1534:	00001301 	andeq	r1, r0, r1, lsl #6
    1538:	49000510 	stmdbmi	r0, {r4, r8, sl}
    153c:	11000013 	tstne	r0, r3, lsl r0
				d = (bc == 16) ? 10000 : 1000000000;
    1540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	diag_disable_int (a, is);
    1544:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	while (*mess != '\0') {
    1548:	13490b39 	movtne	r0, #39737	; 0x9b39
	dgout ('\r');
    154c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	dgout ('\n');
    1550:	13120000 	tstne	r2, #0
    1554:	3a0b0b01 	bcc	2c4160 <__ccfg+0x2a41b8>
    1558:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	diag_wait (a);
    155c:	0013010b 	andseq	r0, r3, fp, lsl #2
	diag_enable_int (a, is);
    1560:	000d1300 	andeq	r1, sp, r0, lsl #6
    1564:	0b3a0e03 	bleq	e84d78 <__ccfg+0xe64dd0>
}
    1568:	0b39053b 	bleq	e42a5c <__ccfg+0xe22ab4>
    156c:	0b381349 	bleq	e06298 <__ccfg+0xde62f0>
    1570:	13140000 	tstne	r4, #0
		if (*mess == '%') {
    1574:	0b0e0301 	bleq	382180 <__ccfg+0x3621d8>
    1578:	3b0b3a0b 	blcc	2cfdac <__ccfg+0x2afe04>
			if (*mess == 'l') {
    157c:	010b3905 	tsteq	fp, r5, lsl #18
    1580:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
				mess++;
    1584:	13490021 	movtne	r0, #36897	; 0x9021
				val = va_arg (ap, lword);
    1588:	00000b2f 	andeq	r0, r0, pc, lsr #22
				bc = 32;
    158c:	03003416 	movweq	r3, #1046	; 0x416
				bc = 16;
    1590:	3b0b3a0e 	blcc	2cfdd0 <__ccfg+0x2afe28>
			switch (*mess) {
    1594:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1598:	000a0213 	andeq	r0, sl, r3, lsl r2
    159c:	00341700 	eorseq	r1, r4, r0, lsl #14
				dgout ('%');
    15a0:	0b3a1347 	bleq	e862c4 <__ccfg+0xe6631c>
    15a4:	0b390b3b 	bleq	e44298 <__ccfg+0xe242f0>
				dgout (*mess);
    15a8:	00000a02 	andeq	r0, r0, r2, lsl #20
    15ac:	3f012e18 	svccc	0x00012e18
			switch (*mess) {
    15b0:	3a0e030c 	bcc	3821e8 <__ccfg+0x362240>
					v = __pi_hex_enc_table [
    15b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					i += 4;
    15b8:	110c270b 	tstne	ip, fp, lsl #14
					(val >> (bc - i)) & 0xf];
    15bc:	40011201 	andmi	r1, r1, r1, lsl #4
    15c0:	0013010a 	andseq	r0, r3, sl, lsl #2
					dgout (v);
    15c4:	00051900 	andeq	r1, r5, r0, lsl #18
    15c8:	0b3a0803 	bleq	e835dc <__ccfg+0xe63634>
				while (i < bc) {
    15cc:	0b390b3b 	bleq	e442c0 <__ccfg+0xe24318>
			mess++;
    15d0:	06021349 	streq	r1, [r2], -r9, asr #6
					d /= 10;
    15d4:	051a0000 	ldreq	r0, [sl, #-0]
				if ((val >> (bc - 1)) & 1) {
    15d8:	3a0e0300 	bcc	3821e0 <__ccfg+0x362238>
    15dc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					dgout ('-');
    15e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    15e4:	1b000006 	blne	1604 <diag+0xdc>
						val |= 0xffff0000;
    15e8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    15ec:	0b3b0b3a 	bleq	ec42dc <__ccfg+0xea4334>
    15f0:	01110b39 	tsteq	r1, r9, lsr fp
				d = (bc == 16) ? 10000 : 1000000000;
    15f4:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    15f8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    15fc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
					v = (word) (val / d);
    1600:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
					if (v || d == 1) break;
    1604:	0013010b 	andseq	r0, r3, fp, lsl #2
    1608:	00051d00 	andeq	r1, r5, r0, lsl #26
					d /= 10;
    160c:	00001331 	andeq	r1, r0, r1, lsr r3
				d = (bc == 16) ? 10000 : 1000000000;
    1610:	31011d1e 	tstcc	r1, lr, lsl sp
					dgout (v + '0');
    1614:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1618:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    161c:	000b570b 	andeq	r5, fp, fp, lsl #14
					d /= 10;
    1620:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
					val = val - (v * d);
    1624:	0b3a0e03 	bleq	e84e38 <__ccfg+0xe64e90>
					if (d == 0) break;
    1628:	0b390b3b 	bleq	e4431c <__ccfg+0xe24374>
					v = (word) (val / d);
    162c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1630:	00000b20 	andeq	r0, r0, r0, lsr #22
				if (bc == 16)
    1634:	03000520 	movweq	r0, #1312	; 0x520
				d = (bc == 16) ? 10000 : 1000000000;
    1638:	3b0b3a0e 	blcc	2cfe78 <__ccfg+0x2afed0>
					val &= 0xffff;
    163c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					dgout (*s);
    1640:	00000013 	andeq	r0, r0, r3, lsl r0
					s++;
    1644:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
				while (*s != '\0') {
    1648:	030b130e 	movweq	r1, #45838	; 0xb30e
    164c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
			dgout (*mess++);
    1650:	10011106 	andne	r1, r1, r6, lsl #2
    1654:	02000006 	andeq	r0, r0, #6
    1658:	0b0b0024 	bleq	2c16f0 <__ccfg+0x2a1748>
    165c:	0e030b3e 	vmoveq.16	d3[0], r0
    1660:	16030000 	strne	r0, [r3], -r0
}
    1664:	3a0e0300 	bcc	38226c <__ccfg+0x3622c4>
    while(1)
    1668:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
{
    166c:	0013490b 	andseq	r4, r3, fp, lsl #18
    SetupTrimDevice();
    1670:	00240400 	eoreq	r0, r4, r0, lsl #8
    pui32Src = &_etext;
    1674:	0b3e0b0b 	bleq	f842a8 <__ccfg+0xf64300>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1678:	00000803 	andeq	r0, r0, r3, lsl #16
    __asm("    ldr     r0, =_bss\n"
    167c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    1680:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1684:	13490035 	movtne	r0, #36917	; 0x9035
    1688:	13070000 	movwne	r0, #28672	; 0x7000
    168c:	3a0b0b01 	bcc	2c4298 <__ccfg+0x2a42f0>
   main();
    1690:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    FaultISR();
    1694:	0013010b 	andseq	r0, r3, fp, lsl #2
        *pui32Dest++ = *pui32Src++;
    1698:	000d0800 	andeq	r0, sp, r0, lsl #16
    169c:	0b3a0e03 	bleq	e84eb0 <__ccfg+0xe64f08>
    16a0:	0b390b3b 	bleq	e44394 <__ccfg+0xe243ec>
    16a4:	0b0b1349 	bleq	2c63d0 <__ccfg+0x2a6428>
    16a8:	0b0c0b0d 	bleq	3042e4 <__ccfg+0x2e433c>
    16ac:	00000b38 	andeq	r0, r0, r8, lsr fp
    16b0:	03000d09 	movweq	r0, #3337	; 0xd09
    16b4:	3b0b3a0e 	blcc	2cfef4 <__ccfg+0x2aff4c>
static byte get_byte () {
    16b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16bc:	000b3813 	andeq	r3, fp, r3, lsl r8
    16c0:	00340a00 	eorseq	r0, r4, r0, lsl #20
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c4:	0b3a0e03 	bleq	e84ed8 <__ccfg+0xe64f30>
    16c8:	0b390b3b 	bleq	e443bc <__ccfg+0xe24414>
		if (ee_inp)
    16cc:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 15b0 <diag+0x88>
			b |= 1;
    16d0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    16d4:	0b000f0b 	bleq	5308 <__exidx_end+0x2400>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16d8:	0013490b 	andseq	r4, r3, fp, lsl #18
	for (b = 0, i = 0; i < 8; i++) {
    16dc:	01010c00 	tsteq	r1, r0, lsl #24
}
    16e0:	13011349 	movwne	r1, #4937	; 0x1349
    16e4:	210d0000 	mrscs	r0, (UNDEF: 13)
    16e8:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
static void put_byte (byte b) {
    16ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    16f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    16f4:	13490b39 	movtne	r0, #39737	; 0x9b39
    16f8:	150f0000 	strne	r0, [pc, #-0]	; 1700 <put_byte+0x14>
		if (b & 0x80)
    16fc:	010c2701 	tsteq	ip, r1, lsl #14
    1700:	10000013 	andne	r0, r0, r3, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1704:	13490005 	movtne	r0, #36869	; 0x9005
	for (i = 0; i < 8; i++) {
    1708:	34110000 	ldrcc	r0, [r1], #-0
		b <<= 1;
    170c:	3a0e0300 	bcc	382314 <__ccfg+0x36236c>
	for (i = 0; i < 8; i++) {
    1710:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    1714:	3f13490b 	svccc	0x0013490b
    1718:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    171c:	01131200 	tsteq	r3, r0, lsl #4
    1720:	0b3a0b0b 	bleq	e84354 <__ccfg+0xe643ac>
	put_byte (cmd);
    1724:	0b39053b 	bleq	e42c18 <__ccfg+0xe22c70>
    1728:	00001301 	andeq	r1, r0, r1, lsl #6
}
    172c:	03000d13 	movweq	r0, #3347	; 0xd13
    1730:	3b0b3a0e 	blcc	2cff70 <__ccfg+0x2affc8>
static void wwait (word st, word del) {
    1734:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1738:	000b3813 	andeq	r3, fp, r3, lsl r8
    173c:	01131400 	tsteq	r3, r0, lsl #8
	while (dopen && (rdsr () & 1)) {
    1740:	0b0b0e03 	bleq	2c4f54 <__ccfg+0x2a4fac>
    1744:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1748:	13010b39 	movwne	r0, #6969	; 0x1b39
    174c:	21150000 	tstcs	r5, r0
	put_byte (CMD_RDSR);
    1750:	2f134900 	svccs	0x00134900
	r = get_byte ();
    1754:	1600000b 	strne	r0, [r0], -fp
    1758:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	while (dopen && (rdsr () & 1)) {
    175c:	0b3b0b3a 	bleq	ec444c <__ccfg+0xea44a4>
}
    1760:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (st == WNONE)
    1764:	00000a02 	andeq	r0, r0, r2, lsl #20
    1768:	3f002e17 	svccc	0x00002e17
			mdelay (1);
    176c:	3a0e030c 	bcc	3823a4 <__ccfg+0x3623fc>
    1770:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			delay (del, st);
    1774:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
    1778:	000a4001 	andeq	r4, sl, r1
			release;
    177c:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
    1780:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1784:	0b3b0b3a 	bleq	ec4474 <__ccfg+0xea44cc>
static void ready () {
    1788:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	if (dopen) {
    178c:	01111349 	tsteq	r1, r9, asr #6
		wwait (WNONE, 1);
    1790:	0a400112 	beq	1001be0 <__ccfg+0xfe1c38>
    1794:	00001301 	andeq	r1, r0, r1, lsl #6
    1798:	03000519 	movweq	r0, #1305	; 0x519
	dstat = 0;
    179c:	3b0b3a08 	blcc	2cffc4 <__ccfg+0x2b001c>
}
    17a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    17a4:	00060213 	andeq	r0, r6, r3, lsl r2
    17a8:	00051a00 	andeq	r1, r5, r0, lsl #20
	udelay (1);
    17ac:	0b3a0803 	bleq	e837c0 <__ccfg+0xe63818>
    17b0:	0b390b3b 	bleq	e444a4 <__ccfg+0xe244fc>
	udelay (1);
    17b4:	0a021349 	beq	864e0 <__ccfg+0x66538>
		dopen = DOPEN_TEMP;
    17b8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    17bc:	030c3f01 	movweq	r3, #52993	; 0xcf01
    17c0:	3b0b3a0e 	blcc	2d0000 <__ccfg+0x2b0058>
    17c4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
static void cclose () {
    17c8:	1113490c 	tstne	r3, ip, lsl #18
	if (dopen == DOPEN_TEMP) {
    17cc:	40011201 	andmi	r1, r1, r1, lsl #4
    17d0:	0013010a 	andseq	r0, r3, sl, lsl #2
		wwait (WNONE, 1);
    17d4:	00051c00 	andeq	r1, r5, r0, lsl #24
    17d8:	0b3a0803 	bleq	e837ec <__ccfg+0xe63844>
	cmd_0 (CMD_DP);
    17dc:	0b39053b 	bleq	e42cd0 <__ccfg+0xe22d28>
    17e0:	06021349 	streq	r1, [r2], -r9, asr #6
		dopen = 0;
    17e4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
}
    17e8:	030c3f00 	movweq	r3, #52992	; 0xcf00
word ee_open () {
    17ec:	3b0b3a0e 	blcc	2d002c <__ccfg+0x2b0084>
	ready ();
    17f0:	110b3905 	tstne	fp, r5, lsl #18
	dopen = DOPEN_PERM;
    17f4:	40011201 	andmi	r1, r1, r1, lsl #4
    17f8:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
}
    17fc:	08030034 	stmdaeq	r3, {r2, r4, r5}
	if (dopen) {
    1800:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1804:	13490b39 	movtne	r0, #39737	; 0x9b39
		dopen = DOPEN_TEMP;
    1808:	00000602 	andeq	r0, r0, r2, lsl #12
		cclose ();
    180c:	03000a1f 	movweq	r0, #2591	; 0xa1f
}
    1810:	3b0b3a0e 	blcc	2d0050 <__ccfg+0x2b00a8>
int ser_in (word st, char *buf, int len) {
    1814:	110b3905 	tstne	fp, r5, lsl #18
    1818:	20000001 	andcs	r0, r0, r1
	if (len == 0)
    181c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	if (__inpline == NULL) {
    1820:	06550152 			; <UNDEFINED> instruction: 0x06550152
		if ((prcs = running (__inserial)) == 0) {
    1824:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    1828:	13010b57 	movwne	r0, #6999	; 0x1b57
			prcs = runthread (__inserial);
    182c:	05210000 	streq	r0, [r1, #-0]!
    1830:	00133100 	andseq	r3, r3, r0, lsl #2
			if (prcs == 0) {
    1834:	011d2200 	tsteq	sp, r0, lsl #4
				npwait (st);
    1838:	01111331 	tsteq	r1, r1, lsr r3
		release;
    183c:	0b580112 	bleq	1601c8c <__ccfg+0x15e1ce4>
		join (prcs, st);
    1840:	0b570559 	bleq	15c2dac <__ccfg+0x15a2e04>
    1844:	05230000 	streq	r0, [r3, #-0]!
	if (*__inpline == NULL) // bin cmd
    1848:	3a0e0300 	bcc	382450 <__ccfg+0x3624a8>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    184c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (prcs >= len)
    1850:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		prcs = len-1;
    1854:	24000006 	strcs	r0, [r0], #-6
	memcpy (buf, __inpline, prcs);
    1858:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    185c:	0b3b0b3a 	bleq	ec454c <__ccfg+0xea45a4>
    1860:	01110b39 	tsteq	r1, r9, lsr fp
	ufree (__inpline);
    1864:	1d250000 	stcne	0, cr0, [r5, #-0]
	__inpline = NULL;
    1868:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	if (*buf) // if it's NULL, it's a bin cmd
    186c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		buf [prcs] = '\0';
    1870:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
}
    1874:	2600000b 	strcs	r0, [r0], -fp
		prcs = strlen (__inpline);
    1878:	13310005 	teqne	r1, #5
    187c:	00000602 	andeq	r0, r0, r2, lsl #12
		return 0;
    1880:	31011d27 	tstcc	r1, r7, lsr #26
    1884:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1888:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
int ser_outf (word st, const char *m, ...) {
    188c:	010b570b 	tsteq	fp, fp, lsl #14
    1890:	28000013 	stmdacs	r0, {r0, r1, r4}
	if ((prcs = running (__outserial)) != 0) {
    1894:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1898:	01120111 	tsteq	r2, r1, lsl r1
		join (prcs, st);
    189c:	0b590b58 	bleq	1644604 <__ccfg+0x162465c>
    18a0:	00000b57 	andeq	r0, r0, r7, asr fp
		release;
    18a4:	3f002e29 	svccc	0x00002e29
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18a8:	3a0e030c 	bcc	3824e0 <__ccfg+0x362538>
    18ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18b0:	1113490b 	tstne	r3, fp, lsl #18
		umwait (st);
    18b4:	40011201 	andmi	r1, r1, r1, lsl #4
    18b8:	2a00000a 	bcs	18e8 <ser_inf+0x8>
	if (runstrand (__outserial, buf) == 0) {
    18bc:	0e03012e 	adfeqsp	f0, f3, #0.5
    18c0:	0b3b0b3a 	bleq	ec45b0 <__ccfg+0xea4608>
    18c4:	01110b39 	tsteq	r1, r9, lsr fp
		ufree (buf);
    18c8:	0a400112 	beq	1001d18 <__ccfg+0xfe1d70>
		npwait (st);
    18cc:	00001301 	andeq	r1, r0, r1, lsl #6
}
    18d0:	03002e2b 	movweq	r2, #3627	; 0xe2b
    18d4:	3b0b3a0e 	blcc	2d0114 <__ccfg+0x2b016c>
    18d8:	200b390b 	andcs	r3, fp, fp, lsl #18
    18dc:	2c00000b 	stccs	0, cr0, [r0], {11}
int ser_inf (word st, const char *fmt, ...) {
    18e0:	0e03012e 	adfeqsp	f0, f3, #0.5
    18e4:	0b3b0b3a 	bleq	ec45d4 <__ccfg+0xea462c>
	if (fmt == NULL)
    18e8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	if (__inpline == NULL) {
    18ec:	01120111 	tsteq	r2, r1, lsl r1
		if ((prcs = running (__inserial)) == 0) {
    18f0:	13010a40 	movwne	r0, #6720	; 0x1a40
    18f4:	0b2d0000 	bleq	b418fc <__ccfg+0xb21954>
			prcs = runthread (__inserial);
    18f8:	00065501 	andeq	r5, r6, r1, lsl #10
    18fc:	00342e00 	eorseq	r2, r4, r0, lsl #28
			if (prcs == 0) {
    1900:	06021331 			; <UNDEFINED> instruction: 0x06021331
				npwait (st);
    1904:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
		release;
    1908:	3a0e0301 	bcc	382514 <__ccfg+0x36256c>
		join (prcs, st);
    190c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1910:	2013490b 	andscs	r4, r3, fp, lsl #18
	va_start (ap, fmt);
    1914:	0013010b 	andseq	r0, r3, fp, lsl #2
	prcs = vscan (__inpline, fmt, ap);
    1918:	00343000 	eorseq	r3, r4, r0
    191c:	0b3a0803 	bleq	e83930 <__ccfg+0xe63988>
	ufree (__inpline);
    1920:	0b390b3b 	bleq	e44614 <__ccfg+0xe2466c>
	__inpline = NULL;
    1924:	00001349 	andeq	r1, r0, r9, asr #6
}
    1928:	03012e31 	movweq	r2, #7729	; 0x1e31
    192c:	3b0b3a0e 	blcc	2d016c <__ccfg+0x2b01c4>
    1930:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		return 0;
    1934:	010b200c 	tsteq	fp, ip
    1938:	32000013 	andcc	r0, r0, #19
    193c:	08030005 	stmdaeq	r3, {r0, r2}
strand (__outserial, const char*)
    1940:	0b3b0b3a 	bleq	ec4630 <__ccfg+0xea4688>
    1944:	13490b39 	movtne	r0, #39737	; 0x9b39
    1948:	1d330000 	ldcne	0, cr0, [r3, #-0]
    194c:	11133101 	tstne	r3, r1, lsl #2
endstrand
    1950:	58011201 	stmdapl	r1, {r0, r9, ip}
    1954:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	ptr = data;
    1958:	0013010b 	andseq	r0, r3, fp, lsl #2
    195c:	012e3400 			; <UNDEFINED> instruction: 0x012e3400
	if (*ptr)
    1960:	0b3a0e03 	bleq	e85174 <__ccfg+0xe651cc>
		len = strlen (ptr);
    1964:	0b390b3b 	bleq	e44658 <__ccfg+0xe246b0>
    1968:	01111349 	tsteq	r1, r9, asr #6
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    196c:	0a400112 	beq	1001dbc <__ccfg+0xfe1e14>
    1970:	00001301 	andeq	r1, r0, r1, lsl #6
    1974:	03003435 	movweq	r3, #1077	; 0x435
    1978:	3b0b3a08 	blcc	2d01a0 <__ccfg+0x2b01f8>
    197c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	len -= quant;
    1980:	00060213 	andeq	r0, r6, r3, lsl r2
    1984:	012e3600 			; <UNDEFINED> instruction: 0x012e3600
    1988:	0b3a0e03 	bleq	e8519c <__ccfg+0xe651f4>
	if (len == 0) {
    198c:	0b39053b 	bleq	e42e80 <__ccfg+0xe22ed8>
		ufree (data);
    1990:	0b200c27 	bleq	804a34 <__ccfg+0x7e4a8c>
		finish;
    1994:	00001301 	andeq	r1, r0, r1, lsl #6
    1998:	03000537 	movweq	r0, #1335	; 0x537
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    199c:	3b0b3a0e 	blcc	2d01dc <__ccfg+0x2b0234>
    19a0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    19a4:	38000013 	stmdacc	r0, {r0, r1, r4}
    19a8:	0e03012e 	adfeqsp	f0, f3, #0.5
    19ac:	0b3b0b3a 	bleq	ec469c <__ccfg+0xea46f4>
strand (__inserial, address)
    19b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    19b4:	0b201349 	bleq	8066e0 <__ccfg+0x7e6738>
    19b8:	00001301 	andeq	r1, r0, r1, lsl #6
    19bc:	03000539 	movweq	r0, #1337	; 0x539
    19c0:	3b0b3a0e 	blcc	2d0200 <__ccfg+0x2b0258>
	if (__inpline != NULL)
    19c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19c8:	3a000013 	bcc	1a1c <__inserial+0x6c>
		finish;
    19cc:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    19d0:	01120111 	tsteq	r2, r1, lsl r1
    19d4:	00000a40 	andeq	r0, r0, r0, asr #20
    19d8:	31001d3b 	tstcc	r0, fp, lsr sp
    19dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		umwait (IM_INIT);
    19e0:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		release;
    19e4:	000b570b 	andeq	r5, fp, fp, lsl #14
	savedata (data);
    19e8:	11010000 	mrsne	r0, (UNDEF: 1)
	len = MAX_LINE_LENGTH;
    19ec:	130e2501 	movwne	r2, #58625	; 0xe501
	io (IM_READ, __cport, READ, ptr, 1);
    19f0:	1b0e030b 	blne	382624 <__ccfg+0x36267c>
    19f4:	1106550e 	tstne	r6, lr, lsl #10
    19f8:	00061001 	andeq	r1, r6, r1
    19fc:	00240200 	eoreq	r0, r4, r0, lsl #4
	if (ptr == (char*) data) { // new line
    1a00:	0b3e0b0b 	bleq	f84634 <__ccfg+0xf6468c>
    1a04:	00000e03 	andeq	r0, r0, r3, lsl #28
		if (*ptr == '\0') { // bin cmd
    1a08:	03001603 	movweq	r1, #1539	; 0x603
			proceed (IM_BIN);
    1a0c:	3b0b3a0e 	blcc	2d024c <__ccfg+0x2b02a4>
    1a10:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		if (*ptr < 0x20)
    1a14:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1a18:	0b0b0024 	bleq	2c1ab0 <__ccfg+0x2a1b08>
			proceed (IM_READ);
    1a1c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1a20:	26050000 	strcs	r0, [r5], -r0
	if (*ptr == '\n' || *ptr == '\r') {
    1a24:	00134900 	andseq	r4, r3, r0, lsl #18
    1a28:	00350600 	eorseq	r0, r5, r0, lsl #12
    1a2c:	00001349 	andeq	r1, r0, r9, asr #6
		*ptr = '\0';
    1a30:	0b011307 	bleq	46654 <__ccfg+0x266ac>
		__inpline = (char*)data;
    1a34:	3b0b3a0b 	blcc	2d0268 <__ccfg+0x2b02c0>
		finish;
    1a38:	010b390b 	tsteq	fp, fp, lsl #18
	if (len) {
    1a3c:	08000013 	stmdaeq	r0, {r0, r1, r4}
		ptr++;
    1a40:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1a44:	0b3b0b3a 	bleq	ec4734 <__ccfg+0xea478c>
		len--;
    1a48:	13490b39 	movtne	r0, #39737	; 0x9b39
	proceed (IM_READ);
    1a4c:	0b0d0b0b 	bleq	344680 <__ccfg+0x3246d8>
	io (IM_BIN, __cport, READ, ptr, 1);
    1a50:	0b380b0c 	bleq	e04688 <__ccfg+0xde46e0>
    1a54:	0d090000 	stceq	0, cr0, [r9, #-0]
    1a58:	3a0e0300 	bcc	382660 <__ccfg+0x3626b8>
    1a5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a60:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	len -= 2;
    1a64:	0a00000b 	beq	1a98 <__inserial+0xe8>
	if (len > *ptr + 1) // 1 for 0x04
    1a68:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1a6c:	0b3b0b3a 	bleq	ec475c <__ccfg+0xea47b4>
		len = *ptr + 1;
    1a70:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a74:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	ptr++;
    1a78:	0f0b0000 	svceq	0x000b0000
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a7c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1a80:	0c000013 	stceq	0, cr0, [r0], {19}
    1a84:	13490101 	movtne	r0, #37121	; 0x9101
    1a88:	00001301 	andeq	r1, r0, r1, lsl #6
    1a8c:	0000210d 	andeq	r2, r0, sp, lsl #2
    1a90:	00160e00 	andseq	r0, r6, r0, lsl #28
	len -= quant;
    1a94:	0b3a0e03 	bleq	e852a8 <__ccfg+0xe65300>
		__inpline = (char*)data;
    1a98:	0b39053b 	bleq	e42f8c <__ccfg+0xe22fe4>
		finish;
    1a9c:	00001349 	andeq	r1, r0, r9, asr #6
	ptr += quant;
    1aa0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1aa4:	0013010c 	andseq	r0, r3, ip, lsl #2
endstrand
    1aa8:	00051000 	andeq	r1, r5, r0
    1aac:	00001349 	andeq	r1, r0, r9, asr #6
	proceed (IM_BINL);
    1ab0:	03003411 	movweq	r3, #1041	; 0x411
endstrand
    1ab4:	3b0b3a0e 	blcc	2d02f4 <__ccfg+0x2b034c>
    1ab8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1abc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1ac0:	1200000c 	andne	r0, r0, #12
    1ac4:	0b0b0113 	bleq	2c1f18 <__ccfg+0x2a1f70>
    1ac8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (res && (d < n))
    1acc:	13010b39 	movwne	r0, #6969	; 0x1b39
    1ad0:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1ad4:	3a0e0300 	bcc	3826dc <__ccfg+0x362734>
    1ad8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			res [d] = (char) c;
    1adc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		d++;
    1ae0:	1400000b 	strne	r0, [r0], #-11
    1ae4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1ae8:	0b3a0b0b 	bleq	e8471c <__ccfg+0xe64774>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1aec:	0b39053b 	bleq	e42fe0 <__ccfg+0xe23038>
    1af0:	00001301 	andeq	r1, r0, r1, lsl #6
    1af4:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
				enci (10000);
    1af8:	000b2f13 	andeq	r2, fp, r3, lsl pc
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1afc:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1b00:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
	d = 0;
    1b04:	0b3b0b3a 	bleq	ec47f4 <__ccfg+0xea484c>
		c = *fm++;
    1b08:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
		if (c == '\\') {
    1b0c:	01111349 	tsteq	r1, r9, asr #6
			if ((c = *fm++) == '\0') {
    1b10:	0a400112 	beq	1001f60 <__ccfg+0xfe1fb8>
    1b14:	05170000 	ldreq	r0, [r7, #-0]
				outc ('\\');
    1b18:	3a080300 	bcc	202720 <__ccfg+0x1e2778>
			if ((c = *fm++) == '\0') {
    1b1c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc ('\\');
    1b20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1b24:	18000006 	stmdane	r0, {r1, r2}
			outc (c);
    1b28:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1b2c:	0b3b0b3a 	bleq	ec481c <__ccfg+0xea4874>
			if (c == '\0')
    1b30:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b34:	00000602 	andeq	r0, r0, r2, lsl #12
			outc (c);
    1b38:	01110100 	tsteq	r1, r0, lsl #2
				outc (val);
    1b3c:	0b130e25 	bleq	4c53d8 <__ccfg+0x4a5430>
				val = (word) va_arg (ap, aword);
    1b40:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
		if (c == '%') {
    1b44:	01110655 	tsteq	r1, r5, asr r6
    1b48:	00000610 	andeq	r0, r0, r0, lsl r6
			c = *fm++;
    1b4c:	0b002402 	bleq	ab5c <__exidx_end+0x7c54>
			switch (c) {
    1b50:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1b54:	0300000e 	movweq	r0, #14
    1b58:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1b5c:	0b3b0b3a 	bleq	ec484c <__ccfg+0xea48a4>
    1b60:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b64:	24040000 	strcs	r0, [r4], #-0
    1b68:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1b6c:	0008030b 	andeq	r0, r8, fp, lsl #6
				outc ('%');
    1b70:	01130500 	tsteq	r3, r0, lsl #10
    1b74:	0b0b0e03 	bleq	2c5388 <__ccfg+0x2a53e0>
				outc (c);
    1b78:	0b3b0b3a 	bleq	ec4868 <__ccfg+0xea48c0>
    1b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b80:	03000d06 	movweq	r0, #3334	; 0xd06
				if (c == '\0')
    1b84:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
				return d;
    1b88:	000c340b 	andeq	r3, ip, fp, lsl #8
}
    1b8c:	000f0700 	andeq	r0, pc, r0, lsl #14
    1b90:	00000b0b 	andeq	r0, r0, fp, lsl #22
			switch (c) {
    1b94:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    1b98:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1b9c:	13490035 	movtne	r0, #36917	; 0x9035
				for (i = 12; ; i -= 4) {
    1ba0:	130a0000 	movwne	r0, #40960	; 0xa000
				val = (word) va_arg (ap, aword);
    1ba4:	3a0b0b01 	bcc	2c47b0 <__ccfg+0x2a4808>
						[ (val >> i) & 0xf ]);
    1ba8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bac:	0013010b 	andseq	r0, r3, fp, lsl #2
    1bb0:	000d0b00 	andeq	r0, sp, r0, lsl #22
					outc (__pi_hex_enc_table
    1bb4:	0b3a0e03 	bleq	e853c8 <__ccfg+0xe65420>
    1bb8:	0b390b3b 	bleq	e448ac <__ccfg+0xe24904>
					if (i == 0)
    1bbc:	0b0b1349 	bleq	2c68e8 <__ccfg+0x2a6940>
    1bc0:	0b0c0b0d 	bleq	3047fc <__ccfg+0x2e4854>
				for (i = 12; ; i -= 4) {
    1bc4:	00000b38 	andeq	r0, r0, r8, lsr fp
				val = (word) va_arg (ap, aword);
    1bc8:	03000d0c 	movweq	r0, #3340	; 0xd0c
				if (c == 'd' && (val & 0x8000) != 0) {
    1bcc:	3b0b3a0e 	blcc	2d040c <__ccfg+0x2b0464>
				val = (word) va_arg (ap, aword);
    1bd0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				if (c == 'd' && (val & 0x8000) != 0) {
    1bd4:	000b3813 	andeq	r3, fp, r3, lsl r8
    1bd8:	00340d00 	eorseq	r0, r4, r0, lsl #26
					outc ('-');
    1bdc:	0b3a0e03 	bleq	e853f0 <__ccfg+0xe65448>
    1be0:	0b390b3b 	bleq	e448d4 <__ccfg+0xe2492c>
					val = (~val) + 1;
    1be4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1ac8 <__inserial+0x118>
    1be8:	00000c3c 	andeq	r0, r0, ip, lsr ip
				for (i = 12; ; i -= 4) {
    1bec:	0b000f0e 	bleq	582c <__exidx_end+0x2924>
				enci (10000);
    1bf0:	0013490b 	andseq	r4, r3, fp, lsl #18
    1bf4:	01010f00 	tsteq	r1, r0, lsl #30
    1bf8:	13011349 	movwne	r1, #4937	; 0x1349
    1bfc:	21100000 	tstcs	r0, r0
    1c00:	11000000 	mrsne	r0, (UNDEF: 0)
    1c04:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1c08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1c0c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c10:	15120000 	ldrne	r0, [r2, #-0]
    1c14:	010c2701 	tsteq	ip, r1, lsl #14
    1c18:	13000013 	movwne	r0, #19
    1c1c:	13490005 	movtne	r0, #36869	; 0x9005
    1c20:	34140000 	ldrcc	r0, [r4], #-0
    1c24:	3a0e0300 	bcc	38282c <__ccfg+0x362884>
    1c28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c2c:	3f13490b 	svccc	0x0013490b
    1c30:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1c34:	01131500 	tsteq	r3, r0, lsl #10
				if (c == 'd' || c == 'u') {
    1c38:	0b3a0b0b 	bleq	e8486c <__ccfg+0xe648c4>
    1c3c:	0b39053b 	bleq	e43130 <__ccfg+0xe23188>
					if (c == 'd' &&
    1c40:	00001301 	andeq	r1, r0, r1, lsl #6
					val = va_arg (ap, lword);
    1c44:	03000d16 	movweq	r0, #3350	; 0xd16
					fm++;
    1c48:	3b0b3a0e 	blcc	2d0488 <__ccfg+0x2b04e0>
					if (c == 'd' &&
    1c4c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1c50:	000b3813 	andeq	r3, fp, r3, lsl r8
						outc ('-');
    1c54:	01131700 	tsteq	r3, r0, lsl #14
    1c58:	0b0b0e03 	bleq	2c546c <__ccfg+0x2a54c4>
						val = (~val) + 1;
    1c5c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				enci (10000);
    1c60:	13010b39 	movwne	r0, #6969	; 0x1b39
					enci (1000000000UL);
    1c64:	21180000 	tstcs	r8, r0
    1c68:	2f134900 	svccs	0x00134900
    1c6c:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1c70:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1bc0 <__pi_vfparse+0xd4>
    1c74:	0b3a0e03 	bleq	e85488 <__ccfg+0xe654e0>
    1c78:	0b390b3b 	bleq	e4496c <__ccfg+0xe249c4>
    1c7c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1c80:	01120111 	tsteq	r2, r1, lsl r1
    1c84:	13010a40 	movwne	r0, #6720	; 0x1a40
    1c88:	051a0000 	ldreq	r0, [sl, #-0]
    1c8c:	3a080300 	bcc	202894 <__ccfg+0x1e28ec>
    1c90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c94:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1c98:	1b000006 	blne	1cb8 <__pi_vfparse+0x1cc>
    1c9c:	08030005 	stmdaeq	r3, {r0, r2}
    1ca0:	0b3b0b3a 	bleq	ec4990 <__ccfg+0xea49e8>
    1ca4:	13490b39 	movtne	r0, #39737	; 0x9b39
				} else if (c == 'x') {
    1ca8:	00000a02 	andeq	r0, r0, r2, lsl #20
					for (i = 28; ; i -= 4) {
    1cac:	0000181c 	andeq	r1, r0, ip, lsl r8
					val = va_arg (ap, lword);
    1cb0:	00341d00 	eorseq	r1, r4, r0, lsl #26
							[ (val >> i) & 0xf ]);
    1cb4:	0b3a0e03 	bleq	e854c8 <__ccfg+0xe65520>
    1cb8:	0b390b3b 	bleq	e449ac <__ccfg+0xe24a04>
						outc (__pi_hex_enc_table
    1cbc:	06021349 	streq	r1, [r2], -r9, asr #6
    1cc0:	341e0000 	ldrcc	r0, [lr], #-0
    1cc4:	3a080300 	bcc	2028cc <__ccfg+0x1e2924>
						if (i == 0)
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ccc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
					for (i = 28; ; i -= 4) {
    1cd0:	1f000006 	svcne	0x00000006
					outc ('%');
    1cd4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1cd8:	0b3b0b3a 	bleq	ec49c8 <__ccfg+0xea4a20>
    1cdc:	13490b39 	movtne	r0, #39737	; 0x9b39
					outc ('l');
    1ce0:	00000a02 	andeq	r0, r0, r2, lsl #20
    1ce4:	01110100 	tsteq	r1, r0, lsl #2
				val = (word) va_arg (ap, aword);
    1ce8:	0b130e25 	bleq	4c5584 <__ccfg+0x4a55dc>
				outc (val);
    1cec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1cf0:	01110655 	tsteq	r1, r5, asr r6
				while (*st != '\0') {
    1cf4:	00000610 	andeq	r0, r0, r0, lsl r6
    1cf8:	0b002402 	bleq	ad08 <__exidx_end+0x7e00>
    1cfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1d00:	0300000e 	movweq	r0, #14
					outc (*st);
    1d04:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1d08:	0b3b0b3a 	bleq	ec49f8 <__ccfg+0xea4a50>
					st++;
    1d0c:	13490b39 	movtne	r0, #39737	; 0x9b39
		c = *fm++;
    1d10:	24040000 	strcs	r0, [r4], #-0
    1d14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1d18:	0008030b 	andeq	r0, r8, fp, lsl #6
char *vform (char *res, const char *fm, va_list aq) {
    1d1c:	01130500 	tsteq	r3, r0, lsl #10
    1d20:	0b0b0e03 	bleq	2c5534 <__ccfg+0x2a558c>
	if (res != NULL) {
    1d24:	0b3b0b3a 	bleq	ec4a14 <__ccfg+0xea4a6c>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1d28:	00001301 	andeq	r1, r0, r1, lsl #6
    1d2c:	03000d06 	movweq	r0, #3334	; 0xd06
    1d30:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
}
    1d34:	000c340b 	andeq	r3, ip, fp, lsl #8
    1d38:	000f0700 	andeq	r0, pc, r0, lsl #14
	fml = strlen (fm) + 17;
    1d3c:	00000b0b 	andeq	r0, r0, fp, lsl #22
    1d40:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    1d44:	09000013 	stmdbeq	r0, {r0, r1, r4}
	if ((res = (char*) umalloc (fml)) == NULL)
    1d48:	13490035 	movtne	r0, #36917	; 0x9035
    1d4c:	130a0000 	movwne	r0, #40960	; 0xa000
    1d50:	3a0b0b01 	bcc	2c495c <__ccfg+0x2a49b4>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1d54:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d58:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d5c:	000d0b00 	andeq	r0, sp, r0, lsl #22
    1d60:	0b3a0e03 	bleq	e85574 <__ccfg+0xe655cc>
		ufree (res);
    1d64:	0b390b3b 	bleq	e44a58 <__ccfg+0xe24ab0>
		goto Again;
    1d68:	0b0b1349 	bleq	2c6a94 <__ccfg+0x2a6aec>
	if (buf == NULL || fmt == NULL)
    1d6c:	0b0c0b0d 	bleq	3049a8 <__ccfg+0x2e4a00>
int vscan (const char *buf, const char *fmt, va_list ap) {
    1d70:	00000b38 	andeq	r0, r0, r8, lsr fp
	if (buf == NULL || fmt == NULL)
    1d74:	03000d0c 	movweq	r0, #3340	; 0xd0c
    1d78:	3b0b3a0e 	blcc	2d05b8 <__ccfg+0x2b0610>
    1d7c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		    	    case 'u': scanu (lword); break;
    1d80:	000b3813 	andeq	r3, fp, r3, lsl r8
			while (isspace (*buf)) buf++;
    1d84:	00340d00 	eorseq	r0, r4, r0, lsl #26
    1d88:	0b3a0e03 	bleq	e8559c <__ccfg+0xe655f4>
	while (*fmt != '\0') {
    1d8c:	0b390b3b 	bleq	e44a80 <__ccfg+0xe24ad8>
		if (*fmt++ != '%')
    1d90:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1c74 <__pi_vfparse+0x188>
		switch (*fmt++) {
    1d94:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1d98:	0b000f0e 	bleq	59d8 <__exidx_end+0x2ad0>
    1d9c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1da0:	01010f00 	tsteq	r1, r0, lsl #30
    1da4:	13011349 	movwne	r1, #4937	; 0x1349
    1da8:	21100000 	tstcs	r0, r0
    1dac:	11000000 	mrsne	r0, (UNDEF: 0)
}
    1db0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		switch (*fmt++) {
    1db4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1db8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1dbc:	15120000 	ldrne	r0, [r2, #-0]
    1dc0:	010c2701 	tsteq	ip, r1, lsl #14
			while (isspace (*buf)) buf++;
    1dc4:	13000013 	movwne	r0, #19
    1dc8:	13490005 	movtne	r0, #36869	; 0x9005
    1dcc:	34140000 	ldrcc	r0, [r4], #-0
    1dd0:	3a0e0300 	bcc	3829d8 <__ccfg+0x362a30>
    1dd4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dd8:	3f13490b 	svccc	0x0013490b
			if (*buf == '\0')
    1ddc:	000c3c0c 	andeq	r3, ip, ip, lsl #24
			if (*buf != ',') {
    1de0:	01131500 	tsteq	r3, r0, lsl #10
			sap = va_arg (ap, char*);
    1de4:	0b3a0b0b 	bleq	e84a18 <__ccfg+0xe64a70>
			nc++;
    1de8:	0b39053b 	bleq	e432dc <__ccfg+0xe23334>
			if (*buf != ',') {
    1dec:	00001301 	andeq	r1, r0, r1, lsl #6
				while (!isspace (*buf) && *buf != ',' &&
    1df0:	03000d16 	movweq	r0, #3350	; 0xd16
    1df4:	3b0b3a0e 	blcc	2d0634 <__ccfg+0x2b068c>
    1df8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1dfc:	000b3813 	andeq	r3, fp, r3, lsl r8
    1e00:	01131700 	tsteq	r3, r0, lsl #14
    1e04:	0b0b0e03 	bleq	2c5618 <__ccfg+0x2a5670>
    1e08:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			while (isspace (*buf)) buf++;
    1e0c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1e10:	21180000 	tstcs	r8, r0
    1e14:	2f134900 	svccs	0x00134900
    1e18:	1900000b 	stmdbne	r0, {r0, r1, r3}
    1e1c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1d6c <vscan>
			if (*buf == ',') buf++;
    1e20:	0b3a0e03 	bleq	e85634 <__ccfg+0xe6568c>
    1e24:	0b390b3b 	bleq	e44b18 <__ccfg+0xe24b70>
			*sap = '\0';
    1e28:	13490c27 	movtne	r0, #39975	; 0x9c27
			break;
    1e2c:	01120111 	tsteq	r2, r1, lsl r1
		    case 'd': scani (word); break;
    1e30:	13010a40 	movwne	r0, #6720	; 0x1a40
    1e34:	051a0000 	ldreq	r0, [sl, #-0]
    1e38:	3a080300 	bcc	202a40 <__ccfg+0x1e2a98>
    1e3c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e40:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e44:	1b000006 	blne	1e64 <vscan+0xf8>
    1e48:	08030005 	stmdaeq	r3, {r0, r2}
    1e4c:	0b3b0b3a 	bleq	ec4b3c <__ccfg+0xea4b94>
    1e50:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e54:	00000a02 	andeq	r0, r0, r2, lsl #20
    1e58:	0000181c 	andeq	r1, r0, ip, lsl r8
    1e5c:	00341d00 	eorseq	r1, r4, r0, lsl #26
    1e60:	0b3a0e03 	bleq	e85674 <__ccfg+0xe656cc>
    1e64:	0b390b3b 	bleq	e44b58 <__ccfg+0xe24bb0>
    1e68:	06021349 	streq	r1, [r2], -r9, asr #6
    1e6c:	341e0000 	ldrcc	r0, [lr], #-0
    1e70:	3a080300 	bcc	202a78 <__ccfg+0x1e2ad0>
    1e74:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e78:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1e7c:	0000000a 	andeq	r0, r0, sl
    1e80:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1e84:	030b130e 	movweq	r1, #45838	; 0xb30e
    1e88:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    1e8c:	10011106 	andne	r1, r1, r6, lsl #2
    1e90:	02000006 	andeq	r0, r0, #6
    1e94:	0b0b0024 	bleq	2c1f2c <__ccfg+0x2a1f84>
    1e98:	0e030b3e 	vmoveq.16	d3[0], r0
    1e9c:	16030000 	strne	r0, [r3], -r0
		    case 'u': scanu (word); break;
    1ea0:	3a0e0300 	bcc	382aa8 <__ccfg+0x362b00>
    1ea4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ea8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1eac:	00240400 	eoreq	r0, r4, r0, lsl #8
    1eb0:	0b3e0b0b 	bleq	f84ae4 <__ccfg+0xf64b3c>
    1eb4:	00000803 	andeq	r0, r0, r3, lsl #16
    1eb8:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    1ebc:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1ec0:	13490035 	movtne	r0, #36917	; 0x9035
    1ec4:	13070000 	movwne	r0, #28672	; 0x7000
    1ec8:	3a0b0b01 	bcc	2c4ad4 <__ccfg+0x2a4b2c>
    1ecc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ed0:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ed4:	000d0800 	andeq	r0, sp, r0, lsl #16
    1ed8:	0b3a0e03 	bleq	e856ec <__ccfg+0xe65744>
    1edc:	0b390b3b 	bleq	e44bd0 <__ccfg+0xe24c28>
    1ee0:	0b0b1349 	bleq	2c6c0c <__ccfg+0x2a6c64>
    1ee4:	0b0c0b0d 	bleq	304b20 <__ccfg+0x2e4b78>
		    case 'x': scanx (word); break;
    1ee8:	00000b38 	andeq	r0, r0, r8, lsr fp
    1eec:	03000d09 	movweq	r0, #3337	; 0xd09
    1ef0:	3b0b3a0e 	blcc	2d0730 <__ccfg+0x2b0788>
    1ef4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1ef8:	000b3813 	andeq	r3, fp, r3, lsl r8
    1efc:	00340a00 	eorseq	r0, r4, r0, lsl #20
    1f00:	0b3a0e03 	bleq	e85714 <__ccfg+0xe6576c>
    1f04:	0b390b3b 	bleq	e44bf8 <__ccfg+0xe24c50>
    1f08:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1dec <vscan+0x80>
    1f0c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1f10:	0b000f0b 	bleq	5b44 <__exidx_end+0x2c3c>
    1f14:	0013490b 	andseq	r4, r3, fp, lsl #18
    1f18:	01010c00 	tsteq	r1, r0, lsl #24
    1f1c:	13011349 	movwne	r1, #4937	; 0x1349
    1f20:	210d0000 	mrscs	r0, (UNDEF: 13)
    1f24:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1f28:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f2c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f30:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f34:	150f0000 	strne	r0, [pc, #-0]	; 1f3c <vscan+0x1d0>
    1f38:	010c2701 	tsteq	ip, r1, lsl #14
    1f3c:	10000013 	andne	r0, r0, r3, lsl r0
    1f40:	13490005 	movtne	r0, #36869	; 0x9005
    1f44:	34110000 	ldrcc	r0, [r1], #-0
    1f48:	3a0e0300 	bcc	382b50 <__ccfg+0x362ba8>
    1f4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f50:	3f13490b 	svccc	0x0013490b
    1f54:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1f58:	01131200 	tsteq	r3, r0, lsl #4
    1f5c:	0b3a0b0b 	bleq	e84b90 <__ccfg+0xe64be8>
			switch (*fmt++) {
    1f60:	0b39053b 	bleq	e43454 <__ccfg+0xe234ac>
    1f64:	00001301 	andeq	r1, r0, r1, lsl #6
    1f68:	03000d13 	movweq	r0, #3347	; 0xd13
    1f6c:	3b0b3a0e 	blcc	2d07ac <__ccfg+0x2b0804>
    1f70:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1f74:	000b3813 	andeq	r3, fp, r3, lsl r8
		    	    case 'd': scani (lword); break;
    1f78:	01131400 	tsteq	r3, r0, lsl #8
    1f7c:	0b0b0e03 	bleq	2c5790 <__ccfg+0x2a57e8>
    1f80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1f84:	13010b39 	movwne	r0, #6969	; 0x1b39
    1f88:	21150000 	tstcs	r5, r0
    1f8c:	2f134900 	svccs	0x00134900
    1f90:	1600000b 	strne	r0, [r0], -fp
    1f94:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1ee4 <vscan+0x178>
    1f98:	0b3a0e03 	bleq	e857ac <__ccfg+0xe65804>
    1f9c:	0b390b3b 	bleq	e44c90 <__ccfg+0xe24ce8>
    1fa0:	01110c27 	tsteq	r1, r7, lsr #24
    1fa4:	0a400112 	beq	10023f4 <__ccfg+0xfe244c>
    1fa8:	00001301 	andeq	r1, r0, r1, lsl #6
    1fac:	03000517 	movweq	r0, #1303	; 0x517
    1fb0:	3b0b3a0e 	blcc	2d07f0 <__ccfg+0x2b0848>
    1fb4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fb8:	00060213 	andeq	r0, r6, r3, lsl r2
    1fbc:	00341800 	eorseq	r1, r4, r0, lsl #16
    1fc0:	0b3a0e03 	bleq	e857d4 <__ccfg+0xe6582c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	06021349 	streq	r1, [r2], -r9, asr #6
    1fcc:	0a190000 	beq	641fd4 <__ccfg+0x62202c>
    1fd0:	3a0e0300 	bcc	382bd8 <__ccfg+0x362c30>
		    	    case 'x': scanx (lword); break;
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fd8:	1a00000b 	bne	200c <vscan+0x2a0>
    1fdc:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    1fe0:	341b0000 	ldrcc	r0, [fp], #-0
    1fe4:	3a080300 	bcc	202bec <__ccfg+0x1e2c44>
    1fe8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1fec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1ff0:	0000000a 	andeq	r0, r0, sl
    1ff4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1ff8:	030b130e 	movweq	r1, #45838	; 0xb30e
    1ffc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2000:	10011106 	andne	r1, r1, r6, lsl #2
    2004:	02000006 	andeq	r0, r0, #6
    2008:	0b0b0024 	bleq	2c20a0 <__ccfg+0x2a20f8>
    200c:	0e030b3e 	vmoveq.16	d3[0], r0
    2010:	16030000 	strne	r0, [r3], -r0
    2014:	3a0e0300 	bcc	382c1c <__ccfg+0x362c74>
    2018:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    201c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2020:	00240400 	eoreq	r0, r4, r0, lsl #8
    2024:	0b3e0b0b 	bleq	f84c58 <__ccfg+0xf64cb0>
    2028:	00000803 	andeq	r0, r0, r3, lsl #16
    202c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    2030:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2034:	13490035 	movtne	r0, #36917	; 0x9035
    2038:	0f070000 	svceq	0x00070000
    203c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2040:	08000013 	stmdaeq	r0, {r0, r1, r4}
		    	    case 'd': scani (lword); break;
    2044:	0b0b0113 	bleq	2c2498 <__ccfg+0x2a24f0>
    2048:	0b3b0b3a 	bleq	ec4d38 <__ccfg+0xea4d90>
    204c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2050:	0d090000 	stceq	0, cr0, [r9, #-0]
    2054:	3a0e0300 	bcc	382c5c <__ccfg+0x362cb4>
    2058:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    205c:	0b13490b 	bleq	4d4490 <__ccfg+0x4b44e8>
		    	    case 'u': scanu (lword); break;
    2060:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2064:	000b380b 	andeq	r3, fp, fp, lsl #16
    2068:	000d0a00 	andeq	r0, sp, r0, lsl #20
    206c:	0b3a0e03 	bleq	e85880 <__ccfg+0xe658d8>
    2070:	0b390b3b 	bleq	e44d64 <__ccfg+0xe24dbc>
    2074:	0b381349 	bleq	e06da0 <__ccfg+0xde6df8>
    2078:	340b0000 	strcc	r0, [fp], #-0
    207c:	3a0e0300 	bcc	382c84 <__ccfg+0x362cdc>
    2080:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2084:	3f13490b 	svccc	0x0013490b
    2088:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    208c:	01010c00 	tsteq	r1, r0, lsl #24
    2090:	13011349 	movwne	r1, #4937	; 0x1349
    2094:	210d0000 	mrscs	r0, (UNDEF: 13)
    2098:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    209c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    20a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20a4:	13490b39 	movtne	r0, #39737	; 0x9b39
		    	    case 'x': scanx (lword); break;
    20a8:	150f0000 	strne	r0, [pc, #-0]	; 20b0 <vscan+0x344>
    20ac:	010c2701 	tsteq	ip, r1, lsl #14
			if ((c = *buf++) == '\0')
    20b0:	10000013 	andne	r0, r0, r3, lsl r0
    20b4:	13490005 	movtne	r0, #36869	; 0x9005
			sap = va_arg (ap, char*);
    20b8:	34110000 	ldrcc	r0, [r1], #-0
			nc++;
    20bc:	3a0e0300 	bcc	382cc4 <__ccfg+0x362d1c>
			break;
    20c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (isspace (*buf)) buf++;
    20c4:	3f13490b 	svccc	0x0013490b
    20c8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    20cc:	01131200 	tsteq	r3, r0, lsl #4
						*sap++ = *buf++;
    20d0:	0b3a0b0b 	bleq	e84d04 <__ccfg+0xe64d5c>
    20d4:	0b39053b 	bleq	e435c8 <__ccfg+0xe23620>
			while (isspace (*buf)) buf++;
    20d8:	00001301 	andeq	r1, r0, r1, lsl #6
    20dc:	03000d13 	movweq	r0, #3347	; 0xd13
    20e0:	3b0b3a0e 	blcc	2d0920 <__ccfg+0x2b0978>
		return 0;
    20e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    20e8:	000b3813 	andeq	r3, fp, r3, lsl r8
		    case 'x': scanx (word); break;
    20ec:	01131400 	tsteq	r3, r0, lsl #8
    20f0:	0b0b0e03 	bleq	2c5904 <__ccfg+0x2a595c>
		    	    case 'x': scanx (lword); break;
    20f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    20f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    20fc:	21150000 	tstcs	r5, r0
    2100:	2f134900 	svccs	0x00134900
    2104:	1600000b 	strne	r0, [r0], -fp
    2108:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    210c:	0b3b0b3a 	bleq	ec4dfc <__ccfg+0xea4e54>
    2110:	13490b39 	movtne	r0, #39737	; 0x9b39
    2114:	0a020c3f 	beq	85218 <__ccfg+0x65270>
    2118:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    211c:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2120:	3b0b3a0e 	blcc	2d0960 <__ccfg+0x2b09b8>
    2124:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2128:	1201110c 	andne	r1, r1, #12, 2
    212c:	000a4001 	andeq	r4, sl, r1
    2130:	00051800 	andeq	r1, r5, r0, lsl #16
    2134:	0b3a0e03 	bleq	e85948 <__ccfg+0xe659a0>
    2138:	0b390b3b 	bleq	e44e2c <__ccfg+0xe24e84>
    213c:	06021349 	streq	r1, [r2], -r9, asr #6
    2140:	34190000 	ldrcc	r0, [r9], #-0
    2144:	3a0e0300 	bcc	382d4c <__ccfg+0x362da4>
    2148:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    214c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2150:	1a000006 	bne	2170 <TrimAfterColdResetWakeupFromShutDown+0x1c>
    2154:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2158:	341b0000 	ldrcc	r0, [fp], #-0
    215c:	3a080300 	bcc	202d64 <__ccfg+0x1e2dbc>
    2160:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2168:	0000000a 	andeq	r0, r0, sl
    216c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2170:	030b130e 	movweq	r1, #45838	; 0xb30e
    2174:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2178:	10011106 	andne	r1, r1, r6, lsl #2
    217c:	02000006 	andeq	r0, r0, #6
    2180:	0b0b0024 	bleq	2c2218 <__ccfg+0x2a2270>
    2184:	0e030b3e 	vmoveq.16	d3[0], r0
    2188:	16030000 	strne	r0, [r3], -r0
    218c:	3a0e0300 	bcc	382d94 <__ccfg+0x362dec>
    2190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2194:	0013490b 	andseq	r4, r3, fp, lsl #18
    2198:	00240400 	eoreq	r0, r4, r0, lsl #8
    219c:	0b3e0b0b 	bleq	f84dd0 <__ccfg+0xf64e28>
    21a0:	00000803 	andeq	r0, r0, r3, lsl #16
    21a4:	03011305 	movweq	r1, #4869	; 0x1305
    21a8:	3a0b0b0e 	bcc	2c4de8 <__ccfg+0x2a4e40>
    21ac:	010b3b0b 	tsteq	fp, fp, lsl #22
    21b0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    21b4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    21b8:	0b381349 	bleq	e06ee4 <__ccfg+0xde6f3c>
    21bc:	00000c34 	andeq	r0, r0, r4, lsr ip
    21c0:	0b000f07 	bleq	5de4 <__exidx_end+0x2edc>
    21c4:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    21c8:	13490026 	movtne	r0, #36902	; 0x9026
    21cc:	35090000 	strcc	r0, [r9, #-0]
    21d0:	00134900 	andseq	r4, r3, r0, lsl #18
    21d4:	000f0a00 	andeq	r0, pc, r0, lsl #20
    21d8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    21dc:	130b0000 	movwne	r0, #45056	; 0xb000
    21e0:	3a0b0b01 	bcc	2c4dec <__ccfg+0x2a4e44>
    21e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    21e8:	0013010b 	andseq	r0, r3, fp, lsl #2
    21ec:	000d0c00 	andeq	r0, sp, r0, lsl #24
    21f0:	0b3a0e03 	bleq	e85a04 <__ccfg+0xe65a5c>
    21f4:	0b390b3b 	bleq	e44ee8 <__ccfg+0xe24f40>
    21f8:	0b0b1349 	bleq	2c6f24 <__ccfg+0x2a6f7c>
    21fc:	0b0c0b0d 	bleq	304e38 <__ccfg+0x2e4e90>
    2200:	00000b38 	andeq	r0, r0, r8, lsr fp
    2204:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2208:	3b0b3a0e 	blcc	2d0a48 <__ccfg+0x2b0aa0>
    220c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2210:	000b3813 	andeq	r3, fp, r3, lsl r8
    2214:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2218:	0b3a0e03 	bleq	e85a2c <__ccfg+0xe65a84>
    221c:	0b390b3b 	bleq	e44f10 <__ccfg+0xe24f68>
    2220:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2104 <NOROM_AONBatMonTemperatureGetDegC+0x8>
    2224:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2228:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    222c:	00130113 	andseq	r0, r3, r3, lsl r1
    2230:	00211000 	eoreq	r1, r1, r0
    2234:	16110000 	ldrne	r0, [r1], -r0
    2238:	3a0e0300 	bcc	382e40 <__ccfg+0x362e98>
    223c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2240:	0013490b 	andseq	r4, r3, fp, lsl #18
    2244:	01151200 	tsteq	r5, r0, lsl #4
    2248:	13010c27 	movwne	r0, #7207	; 0x1c27
    224c:	05130000 	ldreq	r0, [r3, #-0]
    2250:	00134900 	andseq	r4, r3, r0, lsl #18
    2254:	00341400 	eorseq	r1, r4, r0, lsl #8
    2258:	0b3a0e03 	bleq	e85a6c <__ccfg+0xe65ac4>
    225c:	0b39053b 	bleq	e43750 <__ccfg+0xe237a8>
    2260:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2144 <NOROM_CPUcpsid>
    2264:	00000c3c 	andeq	r0, r0, ip, lsr ip
    2268:	0b011315 	bleq	46ec4 <__ccfg+0x26f1c>
    226c:	3b0b3a0b 	blcc	2d0aa0 <__ccfg+0x2b0af8>
    2270:	010b3905 	tsteq	fp, r5, lsl #18
    2274:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2278:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    227c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2280:	13490b39 	movtne	r0, #39737	; 0x9b39
    2284:	00000b38 	andeq	r0, r0, r8, lsr fp
    2288:	03011317 	movweq	r1, #4887	; 0x1317
    228c:	3a0b0b0e 	bcc	2c4ecc <__ccfg+0x2a4f24>
    2290:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2294:	0013010b 	andseq	r0, r3, fp, lsl #2
    2298:	00211800 	eoreq	r1, r1, r0, lsl #16
    229c:	0b2f1349 	bleq	bc6fc8 <__ccfg+0xba7020>
    22a0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    22a4:	030c3f01 	movweq	r3, #52993	; 0xcf01
    22a8:	3b0b3a0e 	blcc	2d0ae8 <__ccfg+0x2b0b40>
    22ac:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    22b0:	1113490c 	tstne	r3, ip, lsl #18
    22b4:	40011201 	andmi	r1, r1, r1, lsl #4
    22b8:	0013010a 	andseq	r0, r3, sl, lsl #2
    22bc:	00051a00 	andeq	r1, r5, r0, lsl #20
    22c0:	0b3a0803 	bleq	e842d4 <__ccfg+0xe6432c>
    22c4:	0b390b3b 	bleq	e44fb8 <__ccfg+0xe25010>
    22c8:	06021349 	streq	r1, [r2], -r9, asr #6
    22cc:	341b0000 	ldrcc	r0, [fp], #-0
    22d0:	3a080300 	bcc	202ed8 <__ccfg+0x1e2f30>
    22d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    22dc:	1c000006 	stcne	0, cr0, [r0], {6}
    22e0:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    22e4:	0b3b0b3a 	bleq	ec4fd4 <__ccfg+0xea502c>
    22e8:	01110b39 	tsteq	r1, r9, lsr fp
    22ec:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
    22f0:	030c3f01 	movweq	r3, #52993	; 0xcf01
    22f4:	3b0b3a0e 	blcc	2d0b34 <__ccfg+0x2b0b8c>
    22f8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    22fc:	1113490c 	tstne	r3, ip, lsl #18
    2300:	40011201 	andmi	r1, r1, r1, lsl #4
    2304:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
    2308:	08030034 	stmdaeq	r3, {r2, r4, r5}
    230c:	0b3b0b3a 	bleq	ec4ffc <__ccfg+0xea5054>
    2310:	13490b39 	movtne	r0, #39737	; 0x9b39
    2314:	00000a02 	andeq	r0, r0, r2, lsl #20
    2318:	03012e1f 	movweq	r2, #7711	; 0x1e1f
    231c:	3b0b3a0e 	blcc	2d0b5c <__ccfg+0x2b0bb4>
    2320:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    2324:	1201110c 	andne	r1, r1, #12, 2
    2328:	480a4001 	stmdami	sl, {r0, lr}
    232c:	0013010a 	andseq	r0, r3, sl, lsl #2
    2330:	00052000 	andeq	r2, r5, r0
    2334:	0b3a0803 	bleq	e84348 <__ccfg+0xe643a0>
    2338:	0b390b3b 	bleq	e4502c <__ccfg+0xe25084>
    233c:	0a021349 	beq	87068 <__ccfg+0x670c0>
    2340:	0a210000 	beq	842348 <__ccfg+0x8223a0>
    2344:	3a080300 	bcc	202f4c <__ccfg+0x1e2fa4>
    2348:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    234c:	0001110b 	andeq	r1, r1, fp, lsl #2
    2350:	010b2200 	mrseq	r2, R11_fiq
    2354:	13010655 	movwne	r0, #5717	; 0x1655
    2358:	34230000 	strtcc	r0, [r3], #-0
    235c:	3a080300 	bcc	202f64 <__ccfg+0x1e2fbc>
    2360:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2364:	0013490b 	andseq	r4, r3, fp, lsl #18
    2368:	010b2400 	tsteq	fp, r0, lsl #8
    236c:	01120111 	tsteq	r2, r1, lsl r1
    2370:	00001301 	andeq	r1, r0, r1, lsl #6
    2374:	11010b25 	tstne	r1, r5, lsr #22
    2378:	00011201 	andeq	r1, r1, r1, lsl #4
    237c:	11010000 	mrsne	r0, (UNDEF: 1)
    2380:	130e2501 	movwne	r2, #58625	; 0xe501
    2384:	1b0e030b 	blne	382fb8 <__ccfg+0x363010>
    2388:	1106550e 	tstne	r6, lr, lsl #10
    238c:	00061001 	andeq	r1, r6, r1
    2390:	00240200 	eoreq	r0, r4, r0, lsl #4
    2394:	0b3e0b0b 	bleq	f84fc8 <__ccfg+0xf65020>
    2398:	00000e03 	andeq	r0, r0, r3, lsl #28
    239c:	03001603 	movweq	r1, #1539	; 0x603
    23a0:	3b0b3a0e 	blcc	2d0be0 <__ccfg+0x2b0c38>
    23a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    23a8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    23ac:	0b0b0024 	bleq	2c2444 <__ccfg+0x2a249c>
    23b0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    23b4:	13050000 	movwne	r0, #20480	; 0x5000
    23b8:	0b0e0301 	bleq	382fc4 <__ccfg+0x36301c>
    23bc:	3b0b3a0b 	blcc	2d0bf0 <__ccfg+0x2b0c48>
    23c0:	0013010b 	andseq	r0, r3, fp, lsl #2
    23c4:	000d0600 	andeq	r0, sp, r0, lsl #12
    23c8:	13490e03 	movtne	r0, #40451	; 0x9e03
    23cc:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    23d0:	0f070000 	svceq	0x00070000
    23d4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    23d8:	00260800 	eoreq	r0, r6, r0, lsl #16
    23dc:	00001349 	andeq	r1, r0, r9, asr #6
    23e0:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    23e4:	0a000013 	beq	2438 <NOROM_SetupGetTrimForAnabypassValue1+0x44>
    23e8:	0b0b000f 	bleq	2c242c <__ccfg+0x2a2484>
    23ec:	00001349 	andeq	r1, r0, r9, asr #6
    23f0:	0b01130b 	bleq	47024 <__ccfg+0x2707c>
    23f4:	3b0b3a0b 	blcc	2d0c28 <__ccfg+0x2b0c80>
    23f8:	010b390b 	tsteq	fp, fp, lsl #18
    23fc:	0c000013 	stceq	0, cr0, [r0], {19}
    2400:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2404:	0b3b0b3a 	bleq	ec50f4 <__ccfg+0xea514c>
    2408:	13490b39 	movtne	r0, #39737	; 0x9b39
    240c:	0b0d0b0b 	bleq	345040 <__ccfg+0x325098>
    2410:	0b380b0c 	bleq	e05048 <__ccfg+0xde50a0>
    2414:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2418:	3a0e0300 	bcc	383020 <__ccfg+0x363078>
    241c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2420:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2424:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2428:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    242c:	0b3b0b3a 	bleq	ec511c <__ccfg+0xea5174>
    2430:	13490b39 	movtne	r0, #39737	; 0x9b39
    2434:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2438:	010f0000 	mrseq	r0, CPSR
    243c:	01134901 	tsteq	r3, r1, lsl #18
    2440:	10000013 	andne	r0, r0, r3, lsl r0
    2444:	00000021 	andeq	r0, r0, r1, lsr #32
    2448:	03001611 	movweq	r1, #1553	; 0x611
    244c:	3b0b3a0e 	blcc	2d0c8c <__ccfg+0x2b0ce4>
    2450:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2454:	12000013 	andne	r0, r0, #19
    2458:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    245c:	00001301 	andeq	r1, r0, r1, lsl #6
    2460:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    2464:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2468:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    246c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2470:	13490b39 	movtne	r0, #39737	; 0x9b39
    2474:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2478:	13150000 	tstne	r5, #0
    247c:	3a0b0b01 	bcc	2c5088 <__ccfg+0x2a50e0>
    2480:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2484:	0013010b 	andseq	r0, r3, fp, lsl #2
    2488:	000d1600 	andeq	r1, sp, r0, lsl #12
    248c:	0b3a0e03 	bleq	e85ca0 <__ccfg+0xe65cf8>
    2490:	0b39053b 	bleq	e43984 <__ccfg+0xe239dc>
    2494:	0b381349 	bleq	e071c0 <__ccfg+0xde7218>
    2498:	13170000 	tstne	r7, #0
    249c:	0b0e0301 	bleq	3830a8 <__ccfg+0x363100>
    24a0:	3b0b3a0b 	blcc	2d0cd4 <__ccfg+0x2b0d2c>
    24a4:	010b3905 	tsteq	fp, r5, lsl #18
    24a8:	18000013 	stmdane	r0, {r0, r1, r4}
    24ac:	13490021 	movtne	r0, #36897	; 0x9021
    24b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
    24b4:	3f012e19 	svccc	0x00012e19
    24b8:	3a0e030c 	bcc	3830f0 <__ccfg+0x363148>
    24bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24c0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    24c4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    24c8:	010a4001 	tsteq	sl, r1
    24cc:	1a000013 	bne	2520 <NOROM_SetupGetTrimForAdcShVbufEn+0x8>
    24d0:	08030005 	stmdaeq	r3, {r0, r2}
    24d4:	0b3b0b3a 	bleq	ec51c4 <__ccfg+0xea521c>
    24d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    24dc:	00000602 	andeq	r0, r0, r2, lsl #12
    24e0:	0300341b 	movweq	r3, #1051	; 0x41b
    24e4:	3b0b3a08 	blcc	2d0d0c <__ccfg+0x2b0d64>
    24e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    24ec:	00060213 	andeq	r0, r6, r3, lsl r2
    24f0:	000a1c00 	andeq	r1, sl, r0, lsl #24
    24f4:	0b3a0e03 	bleq	e85d08 <__ccfg+0xe65d60>
    24f8:	0b390b3b 	bleq	e451ec <__ccfg+0xe25244>
    24fc:	0b1d0000 	bleq	742504 <__ccfg+0x72255c>
    2500:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2504:	00130101 	andseq	r0, r3, r1, lsl #2
    2508:	00341e00 	eorseq	r1, r4, r0, lsl #28
    250c:	0b3a0803 	bleq	e84520 <__ccfg+0xe64578>
    2510:	0b390b3b 	bleq	e45204 <__ccfg+0xe2525c>
    2514:	0a021349 	beq	87240 <__ccfg+0x67298>
    2518:	0b1f0000 	bleq	7c2520 <__ccfg+0x7a2578>
    251c:	01065501 	tsteq	r6, r1, lsl #10
    2520:	20000013 	andcs	r0, r0, r3, lsl r0
    2524:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2528:	0b3b0b3a 	bleq	ec5218 <__ccfg+0xea5270>
    252c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2530:	0b210000 	bleq	842538 <__ccfg+0x822590>
    2534:	00065501 	andeq	r5, r6, r1, lsl #10
    2538:	11010000 	mrsne	r0, (UNDEF: 1)
    253c:	130e2501 	movwne	r2, #58625	; 0xe501
    2540:	1b0e030b 	blne	383174 <__ccfg+0x3631cc>
    2544:	1117550e 	tstne	r7, lr, lsl #10
    2548:	00171001 	andseq	r1, r7, r1
    254c:	00160200 	andseq	r0, r6, r0, lsl #4
    2550:	0b3a0e03 	bleq	e85d64 <__ccfg+0xe65dbc>
    2554:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2558:	24030000 	strcs	r0, [r3], #-0
    255c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2560:	000e030b 	andeq	r0, lr, fp, lsl #6
    2564:	00240400 	eoreq	r0, r4, r0, lsl #8
    2568:	0b3e0b0b 	bleq	f8519c <__ccfg+0xf651f4>
    256c:	00000803 	andeq	r0, r0, r3, lsl #16
    2570:	3f012e05 	svccc	0x00012e05
    2574:	3a0e0319 	bcc	3831e0 <__ccfg+0x363238>
    2578:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    257c:	11134919 	tstne	r3, r9, lsl r9
    2580:	40061201 	andmi	r1, r6, r1, lsl #4
    2584:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2588:	34060000 	strcc	r0, [r6], #-0
    258c:	3a0e0300 	bcc	383194 <__ccfg+0x3631ec>
    2590:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2594:	00170213 	andseq	r0, r7, r3, lsl r2
    2598:	00340700 	eorseq	r0, r4, r0, lsl #14
    259c:	0b3a0e03 	bleq	e85db0 <__ccfg+0xe65e08>
    25a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25a4:	00001802 	andeq	r1, r0, r2, lsl #16
    25a8:	01110100 	tsteq	r1, r0, lsl #2
    25ac:	0b130e25 	bleq	4c5e48 <__ccfg+0x4a5ea0>
    25b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    25b4:	01111755 	tsteq	r1, r5, asr r7
    25b8:	00001710 	andeq	r1, r0, r0, lsl r7
    25bc:	0b002402 	bleq	b5cc <__exidx_end+0x86c4>
    25c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    25c4:	0300000e 	movweq	r0, #14
    25c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    25cc:	0b3b0b3a 	bleq	ec52bc <__ccfg+0xea5314>
    25d0:	00001349 	andeq	r1, r0, r9, asr #6
    25d4:	0b002404 	bleq	b5ec <__exidx_end+0x86e4>
    25d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    25dc:	05000008 	streq	r0, [r0, #-8]
    25e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    25e4:	0b3a0e03 	bleq	e85df8 <__ccfg+0xe65e50>
    25e8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    25ec:	01111349 	tsteq	r1, r9, asr #6
    25f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    25f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    25f8:	06000013 			; <UNDEFINED> instruction: 0x06000013
    25fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2600:	0b3b0b3a 	bleq	ec52f0 <__ccfg+0xea5348>
    2604:	17021349 	strne	r1, [r2, -r9, asr #6]
    2608:	34070000 	strcc	r0, [r7], #-0
    260c:	3a0e0300 	bcc	383214 <__ccfg+0x36326c>
    2610:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2614:	00180213 	andseq	r0, r8, r3, lsl r2
    2618:	01170800 	tsteq	r7, r0, lsl #16
    261c:	0b3a0b0b 	bleq	e85250 <__ccfg+0xe652a8>
    2620:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2624:	0d090000 	stceq	0, cr0, [r9, #-0]
    2628:	3a0e0300 	bcc	383230 <__ccfg+0x363288>
    262c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2630:	0a000013 	beq	2684 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xcc>
    2634:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2638:	0b3b0b3a 	bleq	ec5328 <__ccfg+0xea5380>
    263c:	00001349 	andeq	r1, r0, r9, asr #6
    2640:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
    2644:	00130113 	andseq	r0, r3, r3, lsl r1
    2648:	00210c00 	eoreq	r0, r1, r0, lsl #24
    264c:	0b2f1349 	bleq	bc7378 <__ccfg+0xba73d0>
    2650:	01000000 	mrseq	r0, (UNDEF: 0)
    2654:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2658:	0e030b13 	vmoveq.32	d3[0], r0
    265c:	17550e1b 	smmlane	r5, fp, lr, r0
    2660:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2664:	24020000 	strcs	r0, [r2], #-0
    2668:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    266c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2670:	00160300 	andseq	r0, r6, r0, lsl #6
    2674:	0b3a0e03 	bleq	e85e88 <__ccfg+0xe65ee0>
    2678:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    267c:	24040000 	strcs	r0, [r4], #-0
    2680:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2684:	0008030b 	andeq	r0, r8, fp, lsl #6
    2688:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    268c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2690:	0b3b0b3a 	bleq	ec5380 <__ccfg+0xea53d8>
    2694:	13491927 	movtne	r1, #39207	; 0x9927
    2698:	06120111 			; <UNDEFINED> instruction: 0x06120111
    269c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    26a0:	00130119 	andseq	r0, r3, r9, lsl r1
    26a4:	00340600 	eorseq	r0, r4, r0, lsl #12
    26a8:	0b3a0e03 	bleq	e85ebc <__ccfg+0xe65f14>
    26ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    26b0:	34070000 	strcc	r0, [r7], #-0
    26b4:	3a0e0300 	bcc	3832bc <__ccfg+0x363314>
    26b8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    26bc:	08000013 	stmdaeq	r0, {r0, r1, r4}
    26c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    26c4:	0b3a0e03 	bleq	e85ed8 <__ccfg+0xe65f30>
    26c8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    26cc:	01111349 	tsteq	r1, r9, asr #6
    26d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    26d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    26d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    26dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    26e0:	0b3a0e03 	bleq	e85ef4 <__ccfg+0xe65f4c>
    26e4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    26e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    26f0:	0a000019 	beq	275c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x8>
    26f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    26f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2700:	01000000 	mrseq	r0, (UNDEF: 0)
    2704:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2708:	0e030b13 	vmoveq.32	d3[0], r0
    270c:	17550e1b 	smmlane	r5, fp, lr, r0
    2710:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2714:	24020000 	strcs	r0, [r2], #-0
    2718:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    271c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2720:	00160300 	andseq	r0, r6, r0, lsl #6
    2724:	0b3a0e03 	bleq	e85f38 <__ccfg+0xe65f90>
    2728:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    272c:	24040000 	strcs	r0, [r4], #-0
    2730:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2734:	0008030b 	andeq	r0, r8, fp, lsl #6
    2738:	002e0500 	eoreq	r0, lr, r0, lsl #10
    273c:	0b3a0e03 	bleq	e85f50 <__ccfg+0xe65fa8>
    2740:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2744:	00000b20 	andeq	r0, r0, r0, lsr #22
    2748:	03002e06 	movweq	r2, #3590	; 0xe06
    274c:	3b0b3a0e 	blcc	2d0f8c <__ccfg+0x2b0fe4>
    2750:	2019270b 	andscs	r2, r9, fp, lsl #14
    2754:	0700000b 	streq	r0, [r0, -fp]
    2758:	0e03012e 	adfeqsp	f0, f3, #0.5
    275c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2760:	01111927 	tsteq	r1, r7, lsr #18
    2764:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2768:	01194297 			; <UNDEFINED> instruction: 0x01194297
    276c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2770:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2774:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2778:	17021349 	strne	r1, [r2, -r9, asr #6]
    277c:	34090000 	strcc	r0, [r9], #-0
    2780:	3a0e0300 	bcc	383388 <__ccfg+0x3633e0>
    2784:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2788:	00170213 	andseq	r0, r7, r3, lsl r2
    278c:	001d0a00 	andseq	r0, sp, r0, lsl #20
    2790:	01111331 	tsteq	r1, r1, lsr r3
    2794:	0b580612 	bleq	1603fe4 <__ccfg+0x15e403c>
    2798:	00000559 	andeq	r0, r0, r9, asr r5
    279c:	11010b0b 	tstne	r1, fp, lsl #22
    27a0:	01061201 	tsteq	r6, r1, lsl #4
    27a4:	0c000013 	stceq	0, cr0, [r0], {19}
    27a8:	01018289 	smlabbeq	r1, r9, r2, r8
    27ac:	13310111 	teqne	r1, #1073741828	; 0x40000004
    27b0:	00001301 	andeq	r1, r0, r1, lsl #6
    27b4:	01828a0d 	orreq	r8, r2, sp, lsl #20
    27b8:	91180200 	tstls	r8, r0, lsl #4
    27bc:	00001842 	andeq	r1, r0, r2, asr #16
    27c0:	0182890e 	orreq	r8, r2, lr, lsl #18
    27c4:	00011101 	andeq	r1, r1, r1, lsl #2
    27c8:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    27cc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    27d0:	0b3b0b3a 	bleq	ec54c0 <__ccfg+0xea5518>
    27d4:	01111927 	tsteq	r1, r7, lsr #18
    27d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    27dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    27e0:	10000013 	andne	r0, r0, r3, lsl r0
    27e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    27e8:	0b3b0b3a 	bleq	ec54d8 <__ccfg+0xea5530>
    27ec:	17021349 	strne	r1, [r2, -r9, asr #6]
    27f0:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    27f4:	11000182 	smlabbne	r0, r2, r1, r0
    27f8:	00133101 	andseq	r3, r3, r1, lsl #2
    27fc:	82891200 	addhi	r1, r9, #0, 4
    2800:	01110101 	tsteq	r1, r1, lsl #2
    2804:	00001331 	andeq	r1, r0, r1, lsr r3
    2808:	3f012e13 	svccc	0x00012e13
    280c:	3a0e0319 	bcc	383478 <__ccfg+0x3634d0>
    2810:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2814:	01193c19 	tsteq	r9, r9, lsl ip
    2818:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    281c:	13490005 	movtne	r0, #36869	; 0x9005
    2820:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    2824:	03193f00 	tsteq	r9, #0, 30
    2828:	3b0b3a0e 	blcc	2d1068 <__ccfg+0x2b10c0>
    282c:	3c192705 	ldccc	7, cr2, [r9], {5}
    2830:	16000019 			; <UNDEFINED> instruction: 0x16000019
    2834:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2838:	0b3a0e03 	bleq	e8604c <__ccfg+0xe660a4>
    283c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2840:	0000193c 	andeq	r1, r0, ip, lsr r9
    2844:	01110100 	tsteq	r1, r0, lsl #2
    2848:	0b130e25 	bleq	4c60e4 <__ccfg+0x4a613c>
    284c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2850:	01111755 	tsteq	r1, r5, asr r7
    2854:	00001710 	andeq	r1, r0, r0, lsl r7
    2858:	0b002402 	bleq	b868 <__exidx_end+0x8960>
    285c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2860:	0300000e 	movweq	r0, #14
    2864:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2868:	0b3b0b3a 	bleq	ec5558 <__ccfg+0xea55b0>
    286c:	00001349 	andeq	r1, r0, r9, asr #6
    2870:	0b002404 	bleq	b888 <__exidx_end+0x8980>
    2874:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2878:	05000008 	streq	r0, [r0, #-8]
    287c:	0e03012e 	adfeqsp	f0, f3, #0.5
    2880:	0b3b0b3a 	bleq	ec5570 <__ccfg+0xea55c8>
    2884:	13491927 	movtne	r1, #39207	; 0x9927
    2888:	13010b20 	movwne	r0, #6944	; 0x1b20
    288c:	05060000 	streq	r0, [r6, #-0]
    2890:	3a0e0300 	bcc	383498 <__ccfg+0x3634f0>
    2894:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2898:	07000013 	smladeq	r0, r3, r0, r0
    289c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    28a0:	0b3b0b3a 	bleq	ec5590 <__ccfg+0xea55e8>
    28a4:	00001349 	andeq	r1, r0, r9, asr #6
    28a8:	3f012e08 	svccc	0x00012e08
    28ac:	3a0e0319 	bcc	383518 <__ccfg+0x363570>
    28b0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    28b4:	20134919 	andscs	r4, r3, r9, lsl r9
    28b8:	0013010b 	andseq	r0, r3, fp, lsl #2
    28bc:	00050900 	andeq	r0, r5, r0, lsl #18
    28c0:	0b3a0e03 	bleq	e860d4 <__ccfg+0xe6612c>
    28c4:	1349053b 	movtne	r0, #38203	; 0x953b
    28c8:	340a0000 	strcc	r0, [sl], #-0
    28cc:	3a0e0300 	bcc	3834d4 <__ccfg+0x36352c>
    28d0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    28d4:	0b000013 	bleq	2928 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x84>
    28d8:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    28dc:	0b3b0b3a 	bleq	ec55cc <__ccfg+0xea5624>
    28e0:	0b201927 	bleq	808d84 <__ccfg+0x7e8ddc>
    28e4:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    28e8:	03193f01 	tsteq	r9, #1, 30
    28ec:	3b0b3a0e 	blcc	2d112c <__ccfg+0x2b1184>
    28f0:	11192705 	tstne	r9, r5, lsl #14
    28f4:	40061201 	andmi	r1, r6, r1, lsl #4
    28f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    28fc:	00001301 	andeq	r1, r0, r1, lsl #6
    2900:	0300050d 	movweq	r0, #1293	; 0x50d
    2904:	3b0b3a0e 	blcc	2d1144 <__ccfg+0x2b119c>
    2908:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    290c:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    2910:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2914:	0b3b0b3a 	bleq	ec5604 <__ccfg+0xea565c>
    2918:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    291c:	340f0000 	strcc	r0, [pc], #-0	; 2924 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x80>
    2920:	3a0e0300 	bcc	383528 <__ccfg+0x363580>
    2924:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2928:	00170213 	andseq	r0, r7, r3, lsl r2
    292c:	011d1000 	tsteq	sp, r0
    2930:	01521331 	cmpeq	r2, r1, lsr r3
    2934:	0b581755 	bleq	1608690 <__ccfg+0x15e86e8>
    2938:	13010b59 	movwne	r0, #7001	; 0x1b59
    293c:	05110000 	ldreq	r0, [r1, #-0]
    2940:	00133100 	andseq	r3, r3, r0, lsl #2
    2944:	010b1200 	mrseq	r1, R11_fiq
    2948:	00001755 	andeq	r1, r0, r5, asr r7
    294c:	31003413 	tstcc	r0, r3, lsl r4
    2950:	00180213 	andseq	r0, r8, r3, lsl r2
    2954:	011d1400 	tsteq	sp, r0, lsl #8
    2958:	01111331 	tsteq	r1, r1, lsr r3
    295c:	0b580612 	bleq	16041ac <__ccfg+0x15e4204>
    2960:	00000b59 	andeq	r0, r0, r9, asr fp
    2964:	11010b15 	tstne	r1, r5, lsl fp
    2968:	00061201 	andeq	r1, r6, r1, lsl #4
    296c:	00341600 	eorseq	r1, r4, r0, lsl #12
    2970:	17021331 	smladxne	r2, r1, r3, r1
    2974:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    2978:	03193f01 	tsteq	r9, #1, 30
    297c:	3b0b3a0e 	blcc	2d11bc <__ccfg+0x2b1214>
    2980:	1119270b 	tstne	r9, fp, lsl #14
    2984:	40061201 	andmi	r1, r6, r1, lsl #4
    2988:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    298c:	00001301 	andeq	r1, r0, r1, lsl #6
    2990:	31011d18 	tstcc	r1, r8, lsl sp
    2994:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2998:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    299c:	0013010b 	andseq	r0, r3, fp, lsl #2
    29a0:	82891900 	addhi	r1, r9, #0, 18
    29a4:	01110101 	tsteq	r1, r1, lsl #2
    29a8:	00001331 	andeq	r1, r0, r1, lsr r3
    29ac:	01828a1a 	orreq	r8, r2, sl, lsl sl
    29b0:	91180200 	tstls	r8, r0, lsl #4
    29b4:	00001842 	andeq	r1, r0, r2, asr #16
    29b8:	3f012e1b 	svccc	0x00012e1b
    29bc:	3a0e0319 	bcc	383628 <__ccfg+0x363680>
    29c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    29c4:	11134919 	tstne	r3, r9, lsl r9
    29c8:	40061201 	andmi	r1, r6, r1, lsl #4
    29cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    29d0:	00001301 	andeq	r1, r0, r1, lsl #6
    29d4:	0300051c 	movweq	r0, #1308	; 0x51c
    29d8:	3b0b3a0e 	blcc	2d1218 <__ccfg+0x2b1270>
    29dc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    29e0:	1d000017 	stcne	0, cr0, [r0, #-92]	; 0xffffffa4
    29e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    29e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    29ec:	17021349 	strne	r1, [r2, -r9, asr #6]
    29f0:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
    29f4:	11133101 	tstne	r3, r1, lsl #2
    29f8:	40061201 	andmi	r1, r6, r1, lsl #4
    29fc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2a00:	00001301 	andeq	r1, r0, r1, lsl #6
    2a04:	3100051f 	tstcc	r0, pc, lsl r5
    2a08:	00170213 	andseq	r0, r7, r3, lsl r2
    2a0c:	00342000 	eorseq	r2, r4, r0
    2a10:	00001331 	andeq	r1, r0, r1, lsr r3
    2a14:	31011d21 	tstcc	r1, r1, lsr #26
    2a18:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2a1c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2a20:	00130105 	andseq	r0, r3, r5, lsl #2
    2a24:	82892200 	addhi	r2, r9, #0, 4
    2a28:	01110101 	tsteq	r1, r1, lsl #2
    2a2c:	13011331 	movwne	r1, #4913	; 0x1331
    2a30:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
    2a34:	11000182 	smlabbne	r0, r2, r1, r0
    2a38:	00133101 	andseq	r3, r3, r1, lsl #2
    2a3c:	82892400 	addhi	r2, r9, #0, 8
    2a40:	01110101 	tsteq	r1, r1, lsl #2
    2a44:	01184293 			; <UNDEFINED> instruction: 0x01184293
    2a48:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    2a4c:	1331001d 	teqne	r1, #29
    2a50:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2a54:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2a58:	89260000 	stmdbhi	r6!, {}	; <UNPREDICTABLE>
    2a5c:	11010182 	smlabbne	r1, r2, r1, r0
    2a60:	00130101 	andseq	r0, r3, r1, lsl #2
    2a64:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
    2a68:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a6c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2a70:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2a74:	00001301 	andeq	r1, r0, r1, lsl #6
    2a78:	49000528 	stmdbmi	r0, {r3, r5, r8, sl}
    2a7c:	29000013 	stmdbcs	r0, {r0, r1, r4}
    2a80:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2a84:	0b3a0e03 	bleq	e86298 <__ccfg+0xe662f0>
    2a88:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2a8c:	1301193c 	movwne	r1, #6460	; 0x193c
    2a90:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
    2a94:	03193f01 	tsteq	r9, #1, 30
    2a98:	3b0b3a0e 	blcc	2d12d8 <__ccfg+0x2b1330>
    2a9c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2aa0:	00193c13 	andseq	r3, r9, r3, lsl ip
    2aa4:	11010000 	mrsne	r0, (UNDEF: 1)
    2aa8:	130e2501 	movwne	r2, #58625	; 0xe501
    2aac:	1b0e030b 	blne	3836e0 <__ccfg+0x363738>
    2ab0:	1117550e 	tstne	r7, lr, lsl #10
    2ab4:	00171001 	andseq	r1, r7, r1
    2ab8:	00160200 	andseq	r0, r6, r0, lsl #4
    2abc:	0b3a0e03 	bleq	e862d0 <__ccfg+0xe66328>
    2ac0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ac4:	24030000 	strcs	r0, [r3], #-0
    2ac8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2acc:	000e030b 	andeq	r0, lr, fp, lsl #6
    2ad0:	00240400 	eoreq	r0, r4, r0, lsl #8
    2ad4:	0b3e0b0b 	bleq	f85708 <__ccfg+0xf65760>
    2ad8:	00000803 	andeq	r0, r0, r3, lsl #16
    2adc:	0b000f05 	bleq	66f8 <__exidx_end+0x37f0>
    2ae0:	0013490b 	andseq	r4, r3, fp, lsl #18
    2ae4:	00150600 	andseq	r0, r5, r0, lsl #12
    2ae8:	00001927 	andeq	r1, r0, r7, lsr #18
    2aec:	27011507 	strcs	r1, [r1, -r7, lsl #10]
    2af0:	00130119 	andseq	r0, r3, r9, lsl r1
    2af4:	00050800 	andeq	r0, r5, r0, lsl #16
    2af8:	00001349 	andeq	r1, r0, r9, asr #6
    2afc:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    2b00:	01134919 	tsteq	r3, r9, lsl r9
    2b04:	0a000013 	beq	2b58 <NOROM_ChipInfo_GetChipFamily+0x1c>
    2b08:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2b0c:	00001349 	andeq	r1, r0, r9, asr #6
    2b10:	0b01130b 	bleq	47744 <__ccfg+0x2779c>
    2b14:	3b0b3a0b 	blcc	2d1348 <__ccfg+0x2b13a0>
    2b18:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b1c:	000d0c00 	andeq	r0, sp, r0, lsl #24
    2b20:	0b3a0e03 	bleq	e86334 <__ccfg+0xe6638c>
    2b24:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b28:	00000b38 	andeq	r0, r0, r8, lsr fp
    2b2c:	03012e0d 	movweq	r2, #7693	; 0x1e0d
    2b30:	3b0b3a0e 	blcc	2d1370 <__ccfg+0x2b13c8>
    2b34:	20192705 	andscs	r2, r9, r5, lsl #14
    2b38:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b3c:	00050e00 	andeq	r0, r5, r0, lsl #28
    2b40:	0b3a0e03 	bleq	e86354 <__ccfg+0xe663ac>
    2b44:	1349053b 	movtne	r0, #38203	; 0x953b
    2b48:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2b4c:	3a0e0300 	bcc	383754 <__ccfg+0x3637ac>
    2b50:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2b54:	20134919 	andscs	r4, r3, r9, lsl r9
    2b58:	1000000b 	andne	r0, r0, fp
    2b5c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    2b60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2b64:	0b201927 	bleq	809008 <__ccfg+0x7e9060>
    2b68:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    2b6c:	3a0e0301 	bcc	383778 <__ccfg+0x3637d0>
    2b70:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2b74:	20134919 	andscs	r4, r3, r9, lsl r9
    2b78:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b7c:	00051200 	andeq	r1, r5, r0, lsl #4
    2b80:	0b3a0e03 	bleq	e86394 <__ccfg+0xe663ec>
    2b84:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b88:	34130000 	ldrcc	r0, [r3], #-0
    2b8c:	3a0e0300 	bcc	383794 <__ccfg+0x3637ec>
    2b90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b94:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    2b98:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2b9c:	0b3a0e03 	bleq	e863b0 <__ccfg+0xe66408>
    2ba0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2ba4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2ba8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2bac:	00130119 	andseq	r0, r3, r9, lsl r1
    2bb0:	00341500 	eorseq	r1, r4, r0, lsl #10
    2bb4:	0b3a0e03 	bleq	e863c8 <__ccfg+0xe66420>
    2bb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bbc:	00001702 	andeq	r1, r0, r2, lsl #14
    2bc0:	03003416 	movweq	r3, #1046	; 0x416
    2bc4:	3b0b3a0e 	blcc	2d1404 <__ccfg+0x2b145c>
    2bc8:	1c13490b 			; <UNDEFINED> instruction: 0x1c13490b
    2bcc:	17000005 	strne	r0, [r0, -r5]
    2bd0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2bd4:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2bd8:	0b590b58 	bleq	1645940 <__ccfg+0x1625998>
    2bdc:	00001301 	andeq	r1, r0, r1, lsl #6
    2be0:	31000518 	tstcc	r0, r8, lsl r5
    2be4:	000b1c13 	andeq	r1, fp, r3, lsl ip
    2be8:	001d1900 	andseq	r1, sp, r0, lsl #18
    2bec:	01111331 	tsteq	r1, r1, lsr r3
    2bf0:	0b580612 	bleq	1604440 <__ccfg+0x15e4498>
    2bf4:	00000b59 	andeq	r0, r0, r9, asr fp
    2bf8:	31011d1a 	tstcc	r1, sl, lsl sp
    2bfc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c00:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2c04:	0013010b 	andseq	r0, r3, fp, lsl #2
    2c08:	82891b00 	addhi	r1, r9, #0, 22
    2c0c:	01110001 	tsteq	r1, r1
    2c10:	00001331 	andeq	r1, r0, r1, lsr r3
    2c14:	0182891c 	orreq	r8, r2, ip, lsl r9
    2c18:	01011101 	tsteq	r1, r1, lsl #2
    2c1c:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    2c20:	0001828a 	andeq	r8, r1, sl, lsl #5
    2c24:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    2c28:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
    2c2c:	01018289 	smlabbeq	r1, r9, r2, r8
    2c30:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2c34:	00001301 	andeq	r1, r0, r1, lsl #6
    2c38:	0182891f 	orreq	r8, r2, pc, lsl r9
    2c3c:	00011101 	andeq	r1, r1, r1, lsl #2
    2c40:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    2c44:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2c48:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c4c:	01111927 	tsteq	r1, r7, lsr #18
    2c50:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2c54:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2c58:	21000013 	tstcs	r0, r3, lsl r0
    2c5c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2c60:	0b3b0b3a 	bleq	ec5950 <__ccfg+0xea59a8>
    2c64:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c68:	34220000 	strtcc	r0, [r2], #-0
    2c6c:	3a0e0300 	bcc	383874 <__ccfg+0x3638cc>
    2c70:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c74:	00180213 	andseq	r0, r8, r3, lsl r2
    2c78:	00342300 	eorseq	r2, r4, r0, lsl #6
    2c7c:	0b3a0803 	bleq	e84c90 <__ccfg+0xe64ce8>
    2c80:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2c84:	00001702 	andeq	r1, r0, r2, lsl #14
    2c88:	03003424 	movweq	r3, #1060	; 0x424
    2c8c:	3b0b3a08 	blcc	2d14b4 <__ccfg+0x2b150c>
    2c90:	0013490b 	andseq	r4, r3, fp, lsl #18
    2c94:	010b2500 	tsteq	fp, r0, lsl #10
    2c98:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c9c:	00001301 	andeq	r1, r0, r1, lsl #6
    2ca0:	03003426 	movweq	r3, #1062	; 0x426
    2ca4:	3b0b3a0e 	blcc	2d14e4 <__ccfg+0x2b153c>
    2ca8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2cac:	27000017 	smladcs	r0, r7, r0, r0
    2cb0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2cb4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2cb8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2cbc:	00001301 	andeq	r1, r0, r1, lsl #6
    2cc0:	31000528 	tstcc	r0, r8, lsr #10
    2cc4:	29000013 	stmdbcs	r0, {r0, r1, r4}
    2cc8:	0111010b 	tsteq	r1, fp, lsl #2
    2ccc:	00000612 	andeq	r0, r0, r2, lsl r6
    2cd0:	3100342a 	tstcc	r0, sl, lsr #8
    2cd4:	00170213 	andseq	r0, r7, r3, lsl r2
    2cd8:	011d2b00 	tsteq	sp, r0, lsl #22
    2cdc:	01521331 	cmpeq	r2, r1, lsr r3
    2ce0:	0b581755 	bleq	1608a3c <__ccfg+0x15e8a94>
    2ce4:	13010559 	movwne	r0, #5465	; 0x1559
    2ce8:	0b2c0000 	bleq	b02cf0 <__ccfg+0xae2d48>
    2cec:	00175501 	andseq	r5, r7, r1, lsl #10
    2cf0:	00262d00 	eoreq	r2, r6, r0, lsl #26
    2cf4:	00001349 	andeq	r1, r0, r9, asr #6
    2cf8:	3f002e2e 	svccc	0x00002e2e
    2cfc:	3a0e0319 	bcc	383968 <__ccfg+0x3639c0>
    2d00:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2d04:	11134919 	tstne	r3, r9, lsl r9
    2d08:	40061201 	andmi	r1, r6, r1, lsl #4
    2d0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2d10:	012f0000 			; <UNDEFINED> instruction: 0x012f0000
    2d14:	01134901 	tsteq	r3, r1, lsl #18
    2d18:	30000013 	andcc	r0, r0, r3, lsl r0
    2d1c:	13490021 	movtne	r0, #36897	; 0x9021
    2d20:	00000b2f 	andeq	r0, r0, pc, lsr #22
    2d24:	3f012e31 	svccc	0x00012e31
    2d28:	3a0e0319 	bcc	383994 <__ccfg+0x3639ec>
    2d2c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d30:	01193c19 	tsteq	r9, r9, lsl ip
    2d34:	32000013 	andcc	r0, r0, #19
    2d38:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2d3c:	0b3a0e03 	bleq	e86550 <__ccfg+0xe665a8>
    2d40:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2d44:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2d48:	00001301 	andeq	r1, r0, r1, lsl #6
    2d4c:	3f002e33 	svccc	0x00002e33
    2d50:	3a0e0319 	bcc	3839bc <__ccfg+0x363a14>
    2d54:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d58:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2d5c:	00000019 	andeq	r0, r0, r9, lsl r0
    2d60:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2d64:	030b130e 	movweq	r1, #45838	; 0xb30e
    2d68:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2d6c:	10011117 	andne	r1, r1, r7, lsl r1
    2d70:	02000017 	andeq	r0, r0, #23
    2d74:	0b0b0024 	bleq	2c2e0c <__ccfg+0x2a2e64>
    2d78:	0e030b3e 	vmoveq.16	d3[0], r0
    2d7c:	16030000 	strne	r0, [r3], -r0
    2d80:	3a0e0300 	bcc	383988 <__ccfg+0x3639e0>
    2d84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d88:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2d8c:	0b0b0024 	bleq	2c2e24 <__ccfg+0x2a2e7c>
    2d90:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2d94:	04050000 	streq	r0, [r5], #-0
    2d98:	3a0b0b01 	bcc	2c59a4 <__ccfg+0x2a59fc>
    2d9c:	010b3b0b 	tsteq	fp, fp, lsl #22
    2da0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2da4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
    2da8:	00000d1c 	andeq	r0, r0, ip, lsl sp
    2dac:	0b010407 	bleq	43dd0 <__ccfg+0x23e28>
    2db0:	3b0b3a0b 	blcc	2d15e4 <__ccfg+0x2b163c>
    2db4:	00130105 	andseq	r0, r3, r5, lsl #2
    2db8:	00160800 	andseq	r0, r6, r0, lsl #16
    2dbc:	0b3a0e03 	bleq	e865d0 <__ccfg+0xe66628>
    2dc0:	1349053b 	movtne	r0, #38203	; 0x953b
    2dc4:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    2dc8:	3a0e0300 	bcc	3839d0 <__ccfg+0x363a28>
    2dcc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2dd0:	20134919 	andscs	r4, r3, r9, lsl r9
    2dd4:	0a00000b 	beq	2e08 <NOROM_OSCClockSourceGet+0x170>
    2dd8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2ddc:	0b3a0e03 	bleq	e865f0 <__ccfg+0xe66648>
    2de0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2de4:	0b201349 	bleq	807b10 <__ccfg+0x7e7b68>
    2de8:	00001301 	andeq	r1, r0, r1, lsl #6
    2dec:	0300340b 	movweq	r3, #1035	; 0x40b
    2df0:	3b0b3a0e 	blcc	2d1630 <__ccfg+0x2b1688>
    2df4:	0013490b 	andseq	r4, r3, fp, lsl #18
    2df8:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    2dfc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2e00:	0b3b0b3a 	bleq	ec5af0 <__ccfg+0xea5b48>
    2e04:	13491927 	movtne	r1, #39207	; 0x9927
    2e08:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e0c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2e10:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
    2e14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2e18:	0b3a0e03 	bleq	e8662c <__ccfg+0xe66684>
    2e1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2e20:	01111349 	tsteq	r1, r9, asr #6
    2e24:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2e28:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2e2c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2e30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2e34:	0b3b0b3a 	bleq	ec5b24 <__ccfg+0xea5b7c>
    2e38:	17021349 	strne	r1, [r2, -r9, asr #6]
    2e3c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2e40:	11133101 	tstne	r3, r1, lsl #2
    2e44:	40061201 	andmi	r1, r6, r1, lsl #4
    2e48:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2e4c:	00001301 	andeq	r1, r0, r1, lsl #6
    2e50:	31003410 	tstcc	r0, r0, lsl r4
    2e54:	00170213 	andseq	r0, r7, r3, lsl r2
    2e58:	010b1100 	mrseq	r1, (UNDEF: 27)
    2e5c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e60:	34120000 	ldrcc	r0, [r2], #-0
    2e64:	00133100 	andseq	r3, r3, r0, lsl #2
    2e68:	001d1300 	andseq	r1, sp, r0, lsl #6
    2e6c:	01111331 	tsteq	r1, r1, lsr r3
    2e70:	0b580612 	bleq	16046c0 <__ccfg+0x15e4718>
    2e74:	00000b59 	andeq	r0, r0, r9, asr fp
    2e78:	3f012e14 	svccc	0x00012e14
    2e7c:	3a0e0319 	bcc	383ae8 <__ccfg+0x363b40>
    2e80:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2e84:	11134919 	tstne	r3, r9, lsl r9
    2e88:	40061201 	andmi	r1, r6, r1, lsl #4
    2e8c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2e90:	00001301 	andeq	r1, r0, r1, lsl #6
    2e94:	01828915 	orreq	r8, r2, r5, lsl r9
    2e98:	31011100 	mrscc	r1, (UNDEF: 17)
    2e9c:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2ea0:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ea8:	13491927 	movtne	r1, #39207	; 0x9927
    2eac:	13010b20 	movwne	r0, #6944	; 0x1b20
    2eb0:	34170000 	ldrcc	r0, [r7], #-0
    2eb4:	3a0e0300 	bcc	383abc <__ccfg+0x363b14>
    2eb8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ebc:	18000013 	stmdane	r0, {r0, r1, r4}
    2ec0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2ec4:	0b3b0b3a 	bleq	ec5bb4 <__ccfg+0xea5c0c>
    2ec8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2ecc:	1d190000 	ldcne	0, cr0, [r9, #-0]
    2ed0:	52133100 	andspl	r3, r3, #0, 2
    2ed4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2ed8:	000b590b 	andeq	r5, fp, fp, lsl #18
    2edc:	011d1a00 	tsteq	sp, r0, lsl #20
    2ee0:	01521331 	cmpeq	r2, r1, lsr r3
    2ee4:	0b581755 	bleq	1608c40 <__ccfg+0x15e8c98>
    2ee8:	13010b59 	movwne	r0, #7001	; 0x1b59
    2eec:	0b1b0000 	bleq	6c2ef4 <__ccfg+0x6a2f4c>
    2ef0:	00175501 	andseq	r5, r7, r1, lsl #10
    2ef4:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    2ef8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2efc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2f00:	01111927 	tsteq	r1, r7, lsr #18
    2f04:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f08:	00194297 	mulseq	r9, r7, r2
    2f0c:	011d1d00 	tsteq	sp, r0, lsl #26
    2f10:	01111331 	tsteq	r1, r1, lsr r3
    2f14:	0b580612 	bleq	1604764 <__ccfg+0x15e47bc>
    2f18:	13010b59 	movwne	r0, #7001	; 0x1b59
    2f1c:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
    2f20:	11133101 	tstne	r3, r1, lsl #2
    2f24:	58061201 	stmdapl	r6, {r0, r9, ip}
    2f28:	000b590b 	andeq	r5, fp, fp, lsl #18
    2f2c:	11010000 	mrsne	r0, (UNDEF: 1)
    2f30:	130e2501 	movwne	r2, #58625	; 0xe501
    2f34:	1b0e030b 	blne	383b68 <__ccfg+0x363bc0>
    2f38:	1117550e 	tstne	r7, lr, lsl #10
    2f3c:	00171001 	andseq	r1, r7, r1
    2f40:	00240200 	eoreq	r0, r4, r0, lsl #4
    2f44:	0b3e0b0b 	bleq	f85b78 <__ccfg+0xf65bd0>
    2f48:	00000e03 	andeq	r0, r0, r3, lsl #28
    2f4c:	03001603 	movweq	r1, #1539	; 0x603
    2f50:	3b0b3a0e 	blcc	2d1790 <__ccfg+0x2b17e8>
    2f54:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f58:	00240400 	eoreq	r0, r4, r0, lsl #8
    2f5c:	0b3e0b0b 	bleq	f85b90 <__ccfg+0xf65be8>
    2f60:	00000803 	andeq	r0, r0, r3, lsl #16
    2f64:	03012e05 	movweq	r2, #7685	; 0x1e05
    2f68:	3b0b3a0e 	blcc	2d17a8 <__ccfg+0x2b1800>
    2f6c:	2019270b 	andscs	r2, r9, fp, lsl #14
    2f70:	0013010b 	andseq	r0, r3, fp, lsl #2
    2f74:	00050600 	andeq	r0, r5, r0, lsl #12
    2f78:	0b3a0e03 	bleq	e8678c <__ccfg+0xe667e4>
    2f7c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2f80:	34070000 	strcc	r0, [r7], #-0
    2f84:	3a0e0300 	bcc	383b8c <__ccfg+0x363be4>
    2f88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2f8c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2f90:	0e03012e 	adfeqsp	f0, f3, #0.5
    2f94:	0b3b0b3a 	bleq	ec5c84 <__ccfg+0xea5cdc>
    2f98:	13491927 	movtne	r1, #39207	; 0x9927
    2f9c:	13010b20 	movwne	r0, #6944	; 0x1b20
    2fa0:	2e090000 	cdpcs	0, 0, cr0, cr9, cr0, {0}
    2fa4:	11133101 	tstne	r3, r1, lsl #2
    2fa8:	40061201 	andmi	r1, r6, r1, lsl #4
    2fac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2fb0:	00001301 	andeq	r1, r0, r1, lsl #6
    2fb4:	3100050a 	tstcc	r0, sl, lsl #10
    2fb8:	00170213 	andseq	r0, r7, r3, lsl r2
    2fbc:	00340b00 	eorseq	r0, r4, r0, lsl #22
    2fc0:	17021331 	smladxne	r2, r1, r3, r1
    2fc4:	050c0000 	streq	r0, [ip, #-0]
    2fc8:	1c133100 	ldfnes	f3, [r3], {-0}
    2fcc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    2fd0:	00018289 	andeq	r8, r1, r9, lsl #5
    2fd4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2fd8:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    2fdc:	11000182 	smlabbne	r0, r2, r1, r0
    2fe0:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2fe4:	00001331 	andeq	r1, r0, r1, lsr r3
    2fe8:	3f012e0f 	svccc	0x00012e0f
    2fec:	3a0e0319 	bcc	383c58 <__ccfg+0x363cb0>
    2ff0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ff4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2ff8:	97184006 	ldrls	r4, [r8, -r6]
    2ffc:	13011942 	movwne	r1, #6466	; 0x1942
    3000:	05100000 	ldreq	r0, [r0, #-0]
    3004:	3a0e0300 	bcc	383c0c <__ccfg+0x363c64>
    3008:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    300c:	00170213 	andseq	r0, r7, r3, lsl r2
    3010:	82891100 	addhi	r1, r9, #0, 2
    3014:	01110101 	tsteq	r1, r1, lsl #2
    3018:	31194295 			; <UNDEFINED> instruction: 0x31194295
    301c:	12000013 	andne	r0, r0, #19
    3020:	0001828a 	andeq	r8, r1, sl, lsl #5
    3024:	42911802 	addsmi	r1, r1, #131072	; 0x20000
    3028:	13000018 	movwne	r0, #24
    302c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3030:	0b3b0b3a 	bleq	ec5d20 <__ccfg+0xea5d78>
    3034:	17021349 	strne	r1, [r2, -r9, asr #6]
    3038:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    303c:	03193f01 	tsteq	r9, #1, 30
    3040:	3b0b3a0e 	blcc	2d1880 <__ccfg+0x2b18d8>
    3044:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    3048:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    304c:	97184006 	ldrls	r4, [r8, -r6]
    3050:	13011942 	movwne	r1, #6466	; 0x1942
    3054:	1d150000 	ldcne	0, cr0, [r5, #-0]
    3058:	11133101 	tstne	r3, r1, lsl #2
    305c:	58061201 	stmdapl	r6, {r0, r9, ip}
    3060:	000b590b 	andeq	r5, fp, fp, lsl #18
    3064:	010b1600 	tsteq	fp, r0, lsl #12
    3068:	06120111 			; <UNDEFINED> instruction: 0x06120111
    306c:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
    3070:	03193f00 	tsteq	r9, #0, 30
    3074:	3b0b3a0e 	blcc	2d18b4 <__ccfg+0x2b190c>
    3078:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    307c:	00193c13 	andseq	r3, r9, r3, lsl ip
    3080:	11010000 	mrsne	r0, (UNDEF: 1)
    3084:	130e2501 	movwne	r2, #58625	; 0xe501
    3088:	1b0e030b 	blne	383cbc <__ccfg+0x363d14>
    308c:	1117550e 	tstne	r7, lr, lsl #10
    3090:	00171001 	andseq	r1, r7, r1
    3094:	00240200 	eoreq	r0, r4, r0, lsl #4
    3098:	0b3e0b0b 	bleq	f85ccc <__ccfg+0xf65d24>
    309c:	00000e03 	andeq	r0, r0, r3, lsl #28
    30a0:	03001603 	movweq	r1, #1539	; 0x603
    30a4:	3b0b3a0e 	blcc	2d18e4 <__ccfg+0x2b193c>
    30a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    30ac:	00240400 	eoreq	r0, r4, r0, lsl #8
    30b0:	0b3e0b0b 	bleq	f85ce4 <__ccfg+0xf65d3c>
    30b4:	00000803 	andeq	r0, r0, r3, lsl #16
    30b8:	0b000f05 	bleq	6cd4 <__exidx_end+0x3dcc>
    30bc:	0013490b 	andseq	r4, r3, fp, lsl #18
    30c0:	00150600 	andseq	r0, r5, r0, lsl #12
    30c4:	00001927 	andeq	r1, r0, r7, lsr #18
    30c8:	27011507 	strcs	r1, [r1, -r7, lsl #10]
    30cc:	00130119 	andseq	r0, r3, r9, lsl r1
    30d0:	00050800 	andeq	r0, r5, r0, lsl #16
    30d4:	00001349 	andeq	r1, r0, r9, asr #6
    30d8:	27011509 	strcs	r1, [r1, -r9, lsl #10]
    30dc:	01134919 	tsteq	r3, r9, lsl r9
    30e0:	0a000013 	beq	3134 <__exidx_end+0x22c>
    30e4:	19270015 	stmdbne	r7!, {r0, r2, r4}
    30e8:	00001349 	andeq	r1, r0, r9, asr #6
    30ec:	0b01130b 	bleq	47d20 <__ccfg+0x27d78>
    30f0:	3b0b3a0b 	blcc	2d1924 <__ccfg+0x2b197c>
    30f4:	0013010b 	andseq	r0, r3, fp, lsl #2
    30f8:	000d0c00 	andeq	r0, sp, r0, lsl #24
    30fc:	0b3a0e03 	bleq	e86910 <__ccfg+0xe66968>
    3100:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3104:	00000b38 	andeq	r0, r0, r8, lsr fp
    3108:	3f012e0d 	svccc	0x00012e0d
    310c:	3a0e0319 	bcc	383d78 <__ccfg+0x363dd0>
    3110:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3114:	010b2019 	tsteq	fp, r9, lsl r0
    3118:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    311c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3120:	0b3b0b3a 	bleq	ec5e10 <__ccfg+0xea5e68>
    3124:	00001349 	andeq	r1, r0, r9, asr #6
    3128:	3f012e0f 	svccc	0x00012e0f
    312c:	3a0e0319 	bcc	383d98 <__ccfg+0x363df0>
    3130:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3134:	20134919 	andscs	r4, r3, r9, lsl r9
    3138:	0013010b 	andseq	r0, r3, fp, lsl #2
    313c:	00341000 	eorseq	r1, r4, r0
    3140:	0b3a0e03 	bleq	e86954 <__ccfg+0xe669ac>
    3144:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3148:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    314c:	11133101 	tstne	r3, r1, lsl #2
    3150:	40061201 	andmi	r1, r6, r1, lsl #4
    3154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3158:	00001301 	andeq	r1, r0, r1, lsl #6
    315c:	31000512 	tstcc	r0, r2, lsl r5
    3160:	00170213 	andseq	r0, r7, r3, lsl r2
    3164:	010b1300 	mrseq	r1, (UNDEF: 59)
    3168:	06120111 			; <UNDEFINED> instruction: 0x06120111
    316c:	00001301 	andeq	r1, r0, r1, lsl #6
    3170:	01828914 	orreq	r8, r2, r4, lsl r9
    3174:	93011101 	movwls	r1, #4353	; 0x1101
    3178:	00001842 	andeq	r1, r0, r2, asr #16
    317c:	01828a15 	orreq	r8, r2, r5, lsl sl
    3180:	91180200 	tstls	r8, r0, lsl #4
    3184:	00001842 	andeq	r1, r0, r2, asr #16
    3188:	01828916 	orreq	r8, r2, r6, lsl r9
    318c:	93011101 	movwls	r1, #4353	; 0x1101
    3190:	13011842 	movwne	r1, #6210	; 0x1842
    3194:	34170000 	ldrcc	r0, [r7], #-0
    3198:	02133100 	andseq	r3, r3, #0, 2
    319c:	18000018 	stmdane	r0, {r3, r4}
    31a0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    31a4:	00001301 	andeq	r1, r0, r1, lsl #6
    31a8:	31000519 	tstcc	r0, r9, lsl r5
    31ac:	000b1c13 	andeq	r1, fp, r3, lsl ip
    31b0:	010b1a00 	tsteq	fp, r0, lsl #20
    31b4:	00001755 	andeq	r1, r0, r5, asr r7
    31b8:	3100341b 	tstcc	r0, fp, lsl r4
    31bc:	1c000013 	stcne	0, cr0, [r0], {19}
    31c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    31c4:	0b3a0e03 	bleq	e869d8 <__ccfg+0xe66a30>
    31c8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31cc:	01111349 	tsteq	r1, r9, asr #6
    31d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    31d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    31d8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    31dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    31e0:	0b3b0b3a 	bleq	ec5ed0 <__ccfg+0xea5f28>
    31e4:	17021349 	strne	r1, [r2, -r9, asr #6]
    31e8:	341e0000 	ldrcc	r0, [lr], #-0
    31ec:	3a0e0300 	bcc	383df4 <__ccfg+0x363e4c>
    31f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    31f4:	00170213 	andseq	r0, r7, r3, lsl r2
    31f8:	82891f00 	addhi	r1, r9, #0, 30
    31fc:	01110001 	tsteq	r1, r1
    3200:	00001331 	andeq	r1, r0, r1, lsr r3
    3204:	3f012e20 	svccc	0x00012e20
    3208:	3a0e0319 	bcc	383e74 <__ccfg+0x363ecc>
    320c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3210:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    3214:	97184006 	ldrls	r4, [r8, -r6]
    3218:	13011942 	movwne	r1, #6466	; 0x1942
    321c:	89210000 	stmdbhi	r1!, {}	; <UNPREDICTABLE>
    3220:	11010182 	smlabbne	r1, r2, r1, r0
    3224:	01133101 	tsteq	r3, r1, lsl #2
    3228:	22000013 	andcs	r0, r0, #19
    322c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    3230:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3234:	13491927 	movtne	r1, #39207	; 0x9927
    3238:	00000b20 	andeq	r0, r0, r0, lsr #22
    323c:	03002e23 	movweq	r2, #3619	; 0xe23
    3240:	3b0b3a0e 	blcc	2d1a80 <__ccfg+0x2b1ad8>
    3244:	20192705 	andscs	r2, r9, r5, lsl #14
    3248:	2400000b 	strcs	r0, [r0], #-11
    324c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3250:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3254:	17021349 	strne	r1, [r2, -r9, asr #6]
    3258:	1d250000 	stcne	0, cr0, [r5, #-0]
    325c:	11133101 	tstne	r3, r1, lsl #2
    3260:	58061201 	stmdapl	r6, {r0, r9, ip}
    3264:	0105590b 	tsteq	r5, fp, lsl #18
    3268:	26000013 			; <UNDEFINED> instruction: 0x26000013
    326c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    3270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3274:	17021349 	strne	r1, [r2, -r9, asr #6]
    3278:	34270000 	strtcc	r0, [r7], #-0
    327c:	3a0e0300 	bcc	383e84 <__ccfg+0x363edc>
    3280:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    3284:	00180213 	andseq	r0, r8, r3, lsl r2
    3288:	00342800 	eorseq	r2, r4, r0, lsl #16
    328c:	0b3a0803 	bleq	e852a0 <__ccfg+0xe652f8>
    3290:	1349053b 	movtne	r0, #38203	; 0x953b
    3294:	00001702 	andeq	r1, r0, r2, lsl #14
    3298:	03003429 	movweq	r3, #1065	; 0x429
    329c:	3b0b3a0e 	blcc	2d1adc <__ccfg+0x2b1b34>
    32a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    32a4:	2a000018 	bcs	330c <__exidx_end+0x404>
    32a8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    32ac:	0b3a0e03 	bleq	e86ac0 <__ccfg+0xe66b18>
    32b0:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    32b4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    32b8:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    32bc:	03193f00 	tsteq	r9, #0, 30
    32c0:	3b0b3a0e 	blcc	2d1b00 <__ccfg+0x2b1b58>
    32c4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    32c8:	00193c13 	andseq	r3, r9, r3, lsl ip
    32cc:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    32d0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    32d4:	0b3b0b3a 	bleq	ec5fc4 <__ccfg+0xea601c>
    32d8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    32dc:	Address 0x00000000000032dc is out of bounds.


Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	000002c4 	andeq	r0, r0, r4, asr #5
       4:	000002e0 	andeq	r0, r0, r0, ror #5
    return (time * SECOND)/1000;
       8:	3e500001 	cdpcc	0, 5, cr0, cr0, cr1, {0}
}
       c:	41000004 	tstmi	r0, r4
      10:	01000004 	tsteq	r0, r4
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	02480000 	subeq	r0, r8, #0
      20:	02560000 	subseq	r0, r6, #0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	00025600 	andeq	r5, r2, r0, lsl #12
      34:	0002c400 	andeq	ip, r2, r0, lsl #8
      38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
      44:	00000256 	andeq	r0, r0, r6, asr r2
      48:	00000268 	andeq	r0, r0, r8, ror #4
      4c:	6c530001 	mrrcvs	0, 0, r0, r3, cr1
      50:	74000002 	strvc	r0, [r0], #-2
      54:	01000002 	tsteq	r0, r2
		release;
      58:	02965300 	addseq	r5, r6, #0, 6
      5c:	02a40000 	adceq	r0, r4, #0
      60:	00010000 	andeq	r0, r1, r0
      64:	0002aa53 	andeq	sl, r2, r3, asr sl
      68:	0002c400 	andeq	ip, r2, r0, lsl #8
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      78:	000000c8 	andeq	r0, r0, r8, asr #1
      7c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      80:	5e500001 	cdppl	0, 5, cr0, cr0, cr1, {0}
      84:	60000001 	andvs	r0, r0, r1
      88:	01000001 	tsteq	r0, r1
      8c:	01a25000 			; <UNDEFINED> instruction: 0x01a25000
	descriptors [fd] = s;
      90:	01c40000 	biceq	r0, r4, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	0001d450 	andeq	sp, r1, r0, asr r4
	if (s == NULL)
      9c:	0001e800 	andeq	lr, r1, r0, lsl #16
		syserror (EMALLOC, "tcv05");
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
      a4:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      a8:	000001f7 	strdeq	r0, [r0], -r7
      ac:	00500001 	subseq	r0, r0, r1
	...
      bc:	01000000 	mrseq	r0, (UNDEF: 0)
      c0:	00005000 	andeq	r5, r0, r0
	...
      d0:	00010000 	andeq	r0, r1, r0
      d4:	00000050 	andeq	r0, r0, r0, asr r0
	...
      e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      f0:	00000b18 	andeq	r0, r0, r8, lsl fp
			wwait (st, 50);
      f4:	00000b1e 	andeq	r0, r0, lr, lsl fp
			curr += 0x1000;
      f8:	4e560001 	cdpmi	0, 5, cr0, cr6, cr1, {0}
      fc:	5200000b 	andpl	r0, r0, #11
		if (from >= EE_SIZE || upto < from)
     100:	0100000b 	tsteq	r0, fp
     104:	00005600 	andeq	r5, r0, r0, lsl #12
			upto = EE_SIZE - 1;
     108:	00000000 	andeq	r0, r0, r0
     10c:	0a020000 	beq	80114 <__ccfg+0x6016c>
     110:	0a060000 	beq	180118 <__ccfg+0x160170>
     114:	00010000 	andeq	r0, r1, r0
     118:	000a1c52 	andeq	r1, sl, r2, asr ip
     11c:	000a3000 	andeq	r3, sl, r0
     120:	52000100 	andpl	r0, r0, #0, 2
	...
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	00000a0a 	andeq	r0, r0, sl, lsl #20
     130:	00000a10 	andeq	r0, r0, r0, lsl sl
     134:	00530001 	subseq	r0, r3, r1
        if(onTime > 0){
     138:	00000000 	andeq	r0, r0, r0
            leds(led,1);
     13c:	c0000000 	andgt	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	ca000009 	bgt	16c <_Min_Stack_Size+0x6c>
     144:	01000009 	tsteq	r0, r9
     148:	00005300 	andeq	r5, r0, r0, lsl #6
     14c:	00000000 	andeq	r0, r0, r0
     150:	09c00000 	stmibeq	r0, {}^	; <UNPREDICTABLE>
            delay(onTime, OFF_PERIOD);
     154:	09c60000 	stmibeq	r6, {}^	; <UNPREDICTABLE>
            delay(offTime, Check_PERIOD);
     158:	00010000 	andeq	r0, r1, r0
     15c:	00000053 	andeq	r0, r0, r3, asr r0
            led = greenLed;
     160:	00000000 	andeq	r0, r0, r0
            ch = greenCharacter;
     164:	000a5600 	andeq	r5, sl, r0, lsl #12
     168:	000a6000 	andeq	r6, sl, r0
            onTime = greenOn;
     16c:	53000100 	movwpl	r0, #256	; 0x100
	...
            leds(led,1);
     178:	00000a48 	andeq	r0, r0, r8, asr #20
     17c:	00000a72 	andeq	r0, r0, r2, ror sl
     180:	00520001 	subseq	r0, r2, r1
     184:	00000000 	andeq	r0, r0, r0
            proceed OFF_PERIOD;
     188:	96000000 	strls	r0, [r0], -r0
     18c:	a000000a 	andge	r0, r0, sl
        when(&On, Check_PERIOD);
     190:	0100000a 	tsteq	r0, sl
     194:	00005300 	andeq	r5, r0, r0, lsl #6
        when(&stopProcess, Stop);
     198:	00000000 	andeq	r0, r0, r0
     19c:	0a880000 	beq	fe2001a4 <_estack+0xde1fb1a4>
        release;
     1a0:	0abe0000 	beq	fef801a8 <_estack+0xdef7b1a8>
        leds(led,0);
     1a4:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	00000050 	andeq	r0, r0, r0, asr r0
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	00092e00 	andeq	r2, r9, r0, lsl #28
     1b4:	00093800 	andeq	r3, r9, r0, lsl #16
     1b8:	53000100 	movwpl	r0, #256	; 0x100
	...
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c4:	00000920 	andeq	r0, r0, r0, lsr #18
     1c8:	0000094a 	andeq	r0, r0, sl, asr #18
        if(offTime > 0)
     1cc:	00520001 	subseq	r0, r2, r1
            delay(offTime, Check_PERIOD);
     1d0:	00000000 	andeq	r0, r0, r0
        leds(led,0);
     1d4:	80000000 	andhi	r0, r0, r0
     1d8:	8a000009 	bhi	204 <_Min_Stack_Size+0x104>
     1dc:	01000009 	tsteq	r0, r9
     1e0:	00005300 	andeq	r5, r0, r0, lsl #6
     1e4:	00000000 	andeq	r0, r0, r0
}
     1e8:	09720000 	ldmdbeq	r2!, {}^	; <UNPREDICTABLE>
        finish;
     1ec:	099a0000 	ldmibeq	sl, {}	; <UNPREDICTABLE>
}
     1f0:	00010000 	andeq	r0, r1, r0
     1f4:	00000052 	andeq	r0, r0, r2, asr r0
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00049400 	andeq	r9, r4, r0, lsl #8
     200:	00049800 	andeq	r9, r4, r0, lsl #16
     204:	50000100 	andpl	r0, r0, r0, lsl #2
     208:	00000498 	muleq	r0, r8, r4
     20c:	0000049b 	muleq	r0, fp, r4
     210:	00510001 	subseq	r0, r1, r1
     214:	00000000 	andeq	r0, r0, r0
     218:	e0000000 	and	r0, r0, r0
     21c:	e2000007 	and	r0, r0, #7
     220:	01000007 	tsteq	r0, r7
     224:	00005000 	andeq	r5, r0, r0
     228:	00000000 	andeq	r0, r0, r0
     22c:	07e00000 	strbeq	r0, [r0, r0]!
     230:	07f60000 	ldrbeq	r0, [r6, r0]!
     234:	00010000 	andeq	r0, r1, r0
     238:	0007f651 	andeq	pc, r7, r1, asr r6	; <UNPREDICTABLE>
     23c:	0007fa00 	andeq	pc, r7, r0, lsl #20
     240:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     244:	00000800 	andeq	r0, r0, r0, lsl #16
    word numbers[] = {0, 0, 0, 0};
     248:	00000816 	andeq	r0, r0, r6, lsl r8
    int numbersIndex = 0;
     24c:	16550001 	ldrbne	r0, [r5], -r1
    word numbers[] = {0, 0, 0, 0};
     250:	24000008 	strcs	r0, [r0], #-8
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	01000008 	tsteq	r0, r8
        if(settingsInput[i] == ' ') {
     258:	08245100 	stmdaeq	r4!, {r8, ip, lr}
     25c:	08520000 	ldmdaeq	r2, {}^	; <UNPREDICTABLE>
            numbers[numbersIndex] = number;
     260:	00010000 	andeq	r0, r1, r0
     264:	00085855 	andeq	r5, r8, r5, asr r8
            number = 0;
     268:	00088000 	andeq	r8, r8, r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    return 0;
     270:	00000880 	andeq	r0, r0, r0, lsl #17
    redOn = numbers[0];
     274:	0000088e 	andeq	r0, r0, lr, lsl #17
     278:	8e510001 	cdphi	0, 5, cr0, cr1, cr1, {0}
    redOff = numbers[1];
     27c:	98000008 	stmdals	r0, {r3}
     280:	01000008 	tsteq	r0, r8
    greenOn = numbers[2];
     284:	08985500 	ldmeq	r8, {r8, sl, ip, lr}
     288:	08a30000 	stmiaeq	r3!, {}	; <UNPREDICTABLE>
    greenOff = numbers[3];
     28c:	00010000 	andeq	r0, r1, r0
     290:	0008a351 	andeq	sl, r8, r1, asr r3
}
     294:	0008a600 	andeq	sl, r8, r0, lsl #12
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     29c:	000008a6 	andeq	r0, r0, r6, lsr #17
            number = number * 10;
     2a0:	000008ac 	andeq	r0, r0, ip, lsr #17
            number += settingsInput[i] - 48;
     2a4:	ac510001 	mrrcge	0, 0, r0, r1, cr1
     2a8:	be000008 	cdplt	0, 0, cr0, cr0, cr8, {0}
        } else if(settingsInput[i] == '-') {
     2ac:	01000008 	tsteq	r0, r8
            return 1;
     2b0:	08be5500 	ldmeq	lr!, {r8, sl, ip, lr}
     2b4:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
     2b8:	00010000 	andeq	r0, r1, r0
     2bc:	0008d051 	andeq	sp, r8, r1, asr r0
     2c0:	0008f000 	andeq	pc, r8, r0
fsm root {
     2c4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     2d0:	000007e0 	andeq	r0, r0, r0, ror #15
     2d4:	000007f6 	strdeq	r0, [r0], -r6
     2d8:	f6520001 			; <UNDEFINED> instruction: 0xf6520001
     2dc:	fc000007 	stc2	0, cr0, [r0], {7}
        ser_outf(Initial, "Enter your name: ");
     2e0:	01000007 	tsteq	r0, r7
     2e4:	08005600 	stmdaeq	r0, {r9, sl, ip, lr}
        ser_in(Get_Name, username, NAME_LENGTH);
     2e8:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
     2ec:	00010000 	andeq	r0, r1, r0
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	00081656 	andeq	r1, r8, r6, asr r6
     2f4:	00082400 	andeq	r2, r8, r0, lsl #8
     2f8:	52000100 	andpl	r0, r0, #0, 2
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	00000824 	andeq	r0, r0, r4, lsr #16
     300:	00000854 	andeq	r0, r0, r4, asr r8
        if (choice == 'A' || choice == 'a'){
     304:	58560001 	ldmdapl	r6, {r0}^
     308:	80000008 	andhi	r0, r0, r8
     30c:	01000008 	tsteq	r0, r8
            proceed Adjust_Intervals;
     310:	08805600 	stmeq	r0, {r9, sl, ip, lr}
            proceed Monitor;
     314:	088e0000 	stmeq	lr, {}	; <UNPREDICTABLE>
        proceed Show_Menu;
     318:	00010000 	andeq	r0, r1, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	00088e52 	andeq	r8, r8, r2, asr lr
     320:	00089800 	andeq	r9, r8, r0, lsl #16
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	56000100 	strpl	r0, [r0], -r0, lsl #2
     328:	00000898 	muleq	r0, r8, r8
     32c:	000008a3 	andeq	r0, r0, r3, lsr #17
        if(processSettingsInput(settings) != 0)
     330:	a6520001 	ldrbge	r0, [r2], -r1
     334:	b1000008 	tstlt	r0, r8
            proceed Adjust_Intervals;
     338:	01000008 	tsteq	r0, r8
        if(!blinkerRunning) {
     33c:	08b15200 	ldmeq	r1!, {r9, ip, lr}
     340:	08be0000 	ldmeq	lr!, {}	; <UNPREDICTABLE>
     344:	00010000 	andeq	r0, r1, r0
            blinkerCode = runfsm blinker;
     348:	0008be54 	andeq	fp, r8, r4, asr lr
            blinkerRunning = YES;
     34c:	0008f000 	andeq	pc, r8, r0
        On = YES;
     350:	52000100 	andpl	r0, r0, #0, 2
	...
        proceed Show_Menu;
     35c:	00000754 	andeq	r0, r0, r4, asr r7
     360:	00000762 	andeq	r0, r0, r2, ror #14
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	00500001 	subseq	r0, r0, r1
     368:	00000000 	andeq	r0, r0, r0
     36c:	54000000 	strpl	r0, [r0], #-0
     370:	63000007 	movwvs	r0, #7
     374:	01000007 	tsteq	r0, r7
     378:	00005100 	andeq	r5, r0, r0, lsl #2
     37c:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
     380:	07040000 	streq	r0, [r4, -r0]
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	071b0000 	ldreq	r0, [fp, -r0]
     388:	00010000 	andeq	r0, r1, r0
        displayCycle = YES;
     38c:	00073e50 	andeq	r3, r7, r0, asr lr
     390:	00075400 	andeq	r5, r7, r0, lsl #8
        ser_inf(Await_Stop, "%c", &ch);
     394:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        if(ch == 'S' || ch == 's'){
     3a0:	000005fa 	strdeq	r0, [r0], -sl
     3a4:	0000060a 	andeq	r0, r0, sl, lsl #12
            displayCycle = NO;
     3a8:	0a520001 	beq	14803b4 <__ccfg+0x146040c>
            proceed Show_Menu;
     3ac:	12000006 	andne	r0, r0, #6
     3b0:	05000006 	streq	r0, [r0, #-6]
        proceed Monitor;
     3b4:	20040c00 	andcs	r0, r4, r0, lsl #24
     3b8:	06ac4009 	strteq	r4, [ip], r9
        On = NO;
     3bc:	06b00000 	ldrteq	r0, [r0], r0
        if(blinkerCode != 0x0) {
     3c0:	00050000 	andeq	r0, r5, r0
     3c4:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
            killall(blinkerCode);
     3c8:	0006b040 	andeq	fp, r6, r0, asr #32
        trigger(&stopProcess);
     3cc:	0006b200 	andeq	fp, r6, r0, lsl #4
     3d0:	52000100 	andpl	r0, r0, #0, 2
        proceed Show_Menu;
     3d4:	000006b2 			; <UNDEFINED> instruction: 0x000006b2
     3d8:	000006b4 			; <UNDEFINED> instruction: 0x000006b4
        leds_all(0);
     3dc:	040c0005 	streq	r0, [ip], #-5
     3e0:	00400920 	subeq	r0, r0, r0, lsr #18
     3e4:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
     3e8:	14000000 	strne	r0, [r0], #-0
     3ec:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
        } else if (choice == 'S' || choice == 's') {
     3f0:	01000006 	tsteq	r0, r6
            proceed Stop;
     3f4:	06225200 	strteq	r5, [r2], -r0, lsl #4
        } else if (choice == 'V' || choice == 'v') {
     3f8:	062c0000 	strteq	r0, [ip], -r0
            proceed View_Settings;
     3fc:	00010000 	andeq	r0, r1, r0
        } else if (choice == 'M' || choice == 'm') {
     400:	00063052 	andeq	r3, r6, r2, asr r0
            proceed Monitor;
     404:	00063a00 	andeq	r3, r6, r0, lsl #20
     408:	52000100 	andpl	r0, r0, #0, 2
     40c:	0000063e 	andeq	r0, r0, lr, lsr r6
     410:	0000064a 	andeq	r0, r0, sl, asr #12
            killall(blinkerCode);
     414:	d6520001 	ldrble	r0, [r2], -r1
            leds_all(0);
     418:	da000006 	ble	438 <root+0x174>
     41c:	01000006 	tsteq	r0, r6
            killall(blinkerCode);
     420:	00005200 	andeq	r5, r0, r0, lsl #4
            sint runningNumber = crunning(blinkerCode);
     424:	00000000 	andeq	r0, r0, r0
     428:	059a0000 	ldreq	r0, [sl]
     42c:	05ac0000 	streq	r0, [ip, #0]!
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	00010000 	andeq	r0, r1, r0
            trigger(&stopProcess);
     434:	00000054 	andeq	r0, r0, r4, asr r0
     438:	00000000 	andeq	r0, r0, r0
            blinkerCode = runfsm blinker;
     43c:	00053400 	andeq	r3, r5, r0, lsl #8
     440:	00053c00 	andeq	r3, r5, r0, lsl #24
     444:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     450:	00000534 	andeq	r0, r0, r4, lsr r5
     454:	0000053a 	andeq	r0, r0, sl, lsr r5
     458:	3a510001 	bcc	1440464 <__ccfg+0x14204bc>
     45c:	3f000005 	svccc	0x00000005
     460:	01000005 	tsteq	r0, r5
     464:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     474:	00010000 	andeq	r0, r1, r0
     478:	00000050 	andeq	r0, r0, r0, asr r0
	...
     488:	51000100 	mrspl	r0, (UNDEF: 16)
	...
static void devinit_uart (int devnum) {
     494:	00510001 	subseq	r0, r1, r1
	...
void udelay (volatile word n) {
     4a4:	01000000 	mrseq	r0, (UNDEF: 0)
	while (n) {
     4a8:	00005200 	andeq	r5, r0, r0, lsl #4
     4ac:	00000000 	andeq	r0, r0, r0
}
     4b0:	00010000 	andeq	r0, r1, r0
	while (n--);
     4b4:	00000054 	andeq	r0, r0, r4, asr r0
	...
		n--;
     4c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void mdelay (volatile word n) {
     4d0:	00540001 	subseq	r0, r4, r1
	while (n) {
     4d4:	00000000 	andeq	r0, r0, r0
     4d8:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
}
     4dc:	10000004 	andne	r0, r0, r4
		udelay (999);
     4e0:	01000005 	tsteq	r0, r5
     4e4:	05105000 	ldreq	r5, [r0, #-0]
		n--;
     4e8:	05280000 	streq	r0, [r8, #-0]!
     4ec:	00010000 	andeq	r0, r1, r0
     4f0:	00000054 	andeq	r0, r0, r4, asr r0
     4f4:	00000000 	andeq	r0, r0, r0
void __pi_ondomain (lword d) {
     4f8:	0004cc00 	andeq	ip, r4, r0, lsl #24
     4fc:	0004d200 	andeq	sp, r4, r0, lsl #4
		if (__pi_systat.effpdm > 1)
     500:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPowerDomainOn (d);
     514:	00500001 	subseq	r0, r0, r1
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	00000000 	andeq	r0, r0, r0
     51c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
     520:	46000015 			; <UNDEFINED> instruction: 0x46000015
	__pi_systat.ondmns |= d;
     524:	02000015 	andeq	r0, r0, #21
     528:	46709100 	ldrbtmi	r9, [r0], -r0, lsl #2
}
     52c:	6e000015 	mcrvs	0, 0, r0, cr0, cr5, {0}
     530:	01000015 	tsteq	r0, r5, lsl r0
void __pi_syserror (word ec, const char *m) {
     534:	15725400 	ldrbne	r5, [r2, #-1024]!	; 0xfffffc00
	diag ("SYSERR: %x, %s", ec, m);
     538:	157a0000 	ldrbne	r0, [sl, #-0]!
     53c:	00010000 	andeq	r0, r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
     540:	00158854 	andseq	r8, r5, r4, asr r8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	0015d200 	andseq	sp, r5, r0, lsl #4
     548:	56000100 	strpl	r0, [r0], -r0, lsl #2
     54c:	000015d6 	ldrdeq	r1, [r0], -r6
		all_leds_blink;
     550:	0000164e 	andeq	r1, r0, lr, asr #12
     554:	00560001 	subseq	r0, r6, r1
     558:	00000000 	andeq	r0, r0, r0
     55c:	92000000 	andls	r0, r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	d0000015 	andle	r0, r0, r5, lsl r0
     564:	01000015 	tsteq	r0, r5, lsl r0
     568:	15d65100 	ldrbne	r5, [r6, #256]	; 0x100
     56c:	15e80000 	strbne	r0, [r8, #0]!
     570:	00010000 	andeq	r0, r1, r0
     574:	0015f451 	andseq	pc, r5, r1, asr r4	; <UNPREDICTABLE>
	while (1) {
     578:	0015fe00 	andseq	pc, r5, r0, lsl #28
     57c:	51000100 	mrspl	r0, (UNDEF: 16)
     580:	00001610 	andeq	r1, r0, r0, lsl r6
     584:	00001614 	andeq	r1, r0, r4, lsl r6
void tci_run_delay_timer () {
     588:	34510001 	ldrbcc	r0, [r1], #-1
	setdel = __pi_mintk - __pi_old;
     58c:	38000016 	stmdacc	r0, {r1, r2, r4}
     590:	01000016 	tsteq	r0, r6, lsl r0
     594:	00005100 	andeq	r5, r0, r0, lsl #2
     598:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	15920000 	ldrne	r0, [r2]
     5a0:	15d00000 	ldrbne	r0, [r0]
     5a4:	00010000 	andeq	r0, r1, r0
     5a8:	0015d655 	andseq	sp, r5, r5, asr r6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	0015fe00 	andseq	pc, r5, r0, lsl #28
	sti_tim;
     5b0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
}
     5b4:	00001610 	andeq	r1, r0, r0, lsl r6
     5b8:	00001614 	andeq	r1, r0, r4, lsl r6
     5bc:	34550001 	ldrbcc	r0, [r5], #-1
     5c0:	4e000016 	mcrmi	0, 0, r0, cr0, cr6, {0}
     5c4:	01000016 	tsteq	r0, r6, lsl r0
	cli_aux;
     5c8:	00005500 	andeq	r5, r0, r0, lsl #10
     5cc:	00000000 	andeq	r0, r0, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	16040000 	strne	r0, [r4], -r0
     5d4:	16100000 	ldrne	r0, [r0], -r0
     5d8:	00010000 	andeq	r0, r1, r0
     5dc:	00161455 	andseq	r1, r6, r5, asr r4
	sti_aux;
     5e0:	00162e00 	andseq	r2, r6, r0, lsl #28
}
     5e4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     5e8:	00001632 	andeq	r1, r0, r2, lsr r6
     5ec:	00001634 	andeq	r1, r0, r4, lsr r6
void AONRTCIntHandler () {
     5f0:	00550001 	subseq	r0, r5, r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	00000000 	andeq	r0, r0, r0
     5f8:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	d0000015 	andle	r0, r0, r5, lsl r0
		if (__pi_utims [0] == 0)
     600:	01000015 	tsteq	r0, r5, lsl r0
     604:	00005400 	andeq	r5, r0, r0, lsl #8
		if (*(__pi_utims [0])) {
     608:	00000000 	andeq	r0, r0, r0
     60c:	15fe0000 	ldrbne	r0, [lr, #0]!
			(*(__pi_utims [0]))--;
     610:	16100000 	ldrne	r0, [r0], -r0
		if (__pi_utims [1] == 0)
     614:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [1])) {
     618:	00161454 	andseq	r1, r6, r4, asr r4
			aux_timer_inactive = 0;
     61c:	00162800 	andseq	r2, r6, r0, lsl #16
			(*(__pi_utims [1]))--;
     620:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		if (__pi_utims [2] == 0)
     624:	00001628 	andeq	r1, r0, r8, lsr #12
		if (*(__pi_utims [2])) {
     628:	00001634 	andeq	r1, r0, r4, lsr r6
			(*(__pi_utims [2]))--;
     62c:	00530001 	subseq	r0, r3, r1
		if (__pi_utims [3] != 0) {
     630:	00000000 	andeq	r0, r0, r0
			if (*(__pi_utims [3])) {
     634:	40000000 	andmi	r0, r0, r0
				aux_timer_inactive = 0;
     638:	4e000016 	mcrmi	0, 0, r0, cr0, cr6, {0}
				(*(__pi_utims [3]))--;
     63c:	01000016 	tsteq	r0, r6, lsl r0
	if (__pi_systat.ledsts) {
     640:	00005100 	andeq	r5, r0, r0, lsl #2
     644:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.ledblc++ == 0) {
     648:	10000000 	andne	r0, r0, r0
     64c:	100c0000 	andne	r0, ip, r0
			if (__pi_systat.ledblk) {
     650:	00010000 	andeq	r0, r1, r0
     654:	00000050 	andeq	r0, r0, r0, asr r0
	...
				if (__pi_systat.ledsts & 0x2)
     664:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (__pi_systat.ledsts & 0x4)
     670:	00500001 	subseq	r0, r0, r1
	...
			if (__pi_systat.fstblk)
     680:	01000000 	mrseq	r0, (UNDEF: 0)
				__pi_systat.ledblc = 200;
     684:	00005100 	andeq	r5, r0, r0, lsl #2
	if (events & AON_RTC_EVFLAGS_CH0) {
     688:	00000000 	andeq	r0, r0, r0
		cli_tim;
     68c:	00010000 	andeq	r0, r1, r0
		__pi_new += setdel;
     690:	00000051 	andeq	r0, r0, r1, asr r0
	...
     6a0:	52000100 	andpl	r0, r0, #0, 2
	...
		aux_timer_inactive = 1;
     6ac:	00520001 	subseq	r0, r2, r1
	...
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
				if (__pi_systat.ledsts & 0x2)
     6c0:	00005300 	andeq	r5, r0, r0, lsl #6
     6c4:	00000000 	andeq	r0, r0, r0
     6c8:	00010000 	andeq	r0, r1, r0
				if (__pi_systat.ledsts & 0x8)
     6cc:	00000053 	andeq	r0, r0, r3, asr r0
				__pi_systat.ledblk = 1;
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	53000100 	movwpl	r0, #256	; 0x100
	...
			cli_aux;
     6e8:	00500001 	subseq	r0, r0, r1
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	10000000 	andne	r0, r0, r0
     6f4:	18000015 	stmdane	r0, {r0, r2, r4}
     6f8:	01000015 	tsteq	r0, r5, lsl r0
     6fc:	00005000 	andeq	r5, r0, r0
     700:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
     704:	14340000 	ldrtne	r0, [r4], #-0
	cli_tim;
     708:	143a0000 	ldrtne	r0, [sl], #-0
     70c:	00010000 	andeq	r0, r1, r0
	if (setdel) {
     710:	00000050 	andeq	r0, r0, r0, asr r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	00144a00 	andseq	r4, r4, r0, lsl #20
     71c:	00147600 	andseq	r7, r4, r0, lsl #12
     720:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	00001476 	andeq	r1, r0, r6, ror r4
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	0000147c 	andeq	r1, r0, ip, ror r4
	return NO;
     72c:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
			setdel = 0;
     730:	c4000014 	strgt	r0, [r0], #-20	; 0xffffffec
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	01000014 	tsteq	r0, r4, lsl r0
     738:	14c45400 	strbne	r5, [r4], #1024	; 0x400
}
     73c:	14dc0000 	ldrbne	r0, [ip], #0
		sti_tim;
     740:	00010000 	andeq	r0, r1, r0
		return YES;
     744:	00000050 	andeq	r0, r0, r0, asr r0
     748:	00000000 	andeq	r0, r0, r0
     74c:	00147600 	andseq	r7, r4, r0, lsl #12
     750:	00147a00 	andseq	r7, r4, r0, lsl #20
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	UARTDisable (UART0_BASE);
     758:	0000147a 	andeq	r1, r0, sl, ror r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	0000147c 	andeq	r1, r0, ip, ror r4
	UARTDisable (UART0_BASE);
     760:	92530001 	subsls	r0, r3, #1
	UARTConfigSetExpClk (UART0_BASE,
     764:	9b000014 	blls	7bc <reinit_uart+0x14>
     768:	01000014 	tsteq	r0, r4, lsl r0
     76c:	00005000 	andeq	r5, r0, r0
     770:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	14840000 	strne	r0, [r4], #0
     778:	14940000 	ldrne	r0, [r4], #0
     77c:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	00000053 	andeq	r0, r0, r3, asr r0
     784:	00000000 	andeq	r0, r0, r0
     788:	00144a00 	andseq	r4, r4, r0, lsl #20
	urates [0] = rate;
     78c:	00146800 	andseq	r6, r4, r0, lsl #16
}
     790:	50000100 	andpl	r0, r0, r0, lsl #2
     794:	0000146e 	andeq	r1, r0, lr, ror #8
     798:	0000148e 	andeq	r1, r0, lr, lsl #9
     79c:	8e500001 	cdphi	0, 5, cr0, cr0, cr1, {0}
     7a0:	98000014 	stmdals	r0, {r2, r4}
     7a4:	02000014 	andeq	r0, r0, #20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	007c7400 	rsbseq	r7, ip, r0, lsl #8
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	80000000 	andhi	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	ae00000f 	cdpge	0, 0, cr0, cr0, cr15, {0}
     7b8:	0100000f 	tsteq	r0, pc
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	0fbc5000 	svceq	0x00bc5000
     7c0:	10000000 	andne	r0, r0, r0
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	00010000 	andeq	r0, r1, r0
     7c8:	00000050 	andeq	r0, r0, r0, asr r0
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	000f8800 	andeq	r8, pc, r0, lsl #16
     7d4:	000f9400 	andeq	r9, pc, r0, lsl #8
     7d8:	53000100 	movwpl	r0, #256	; 0x100
     7dc:	00000f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
	switch (operation) {
     7e0:	00000f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	00700002 	rsbseq	r0, r0, r2
     7e8:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
     7ec:	00000ff2 	strdeq	r0, [r0], -r2
     7f0:	f2530001 	vhadd.s16	d16, d3, d1
     7f4:	f600000f 			; <UNDEFINED> instruction: 0xf600000f
				*buf++ = uart_a_read;
     7f8:	0200000f 	andeq	r0, r0, #15
     7fc:	f6007300 			; <UNDEFINED> instruction: 0xf6007300
			while (len && uart_a_char_available) {
     800:	0000000f 	andeq	r0, r0, pc
     804:	01000010 	tsteq	r0, r0, lsl r0
     808:	00005300 	andeq	r5, r0, r0, lsl #6
			if (len != operation) {
     80c:	00000000 	andeq	r0, r0, r0
}
     810:	0f880000 	svceq	0x00880000
     814:	0f8a0000 	svceq	0x008a0000
			uart_a_disable_int;
     818:	00010000 	andeq	r0, r1, r0
			if (uart_a_char_available) {
     81c:	000f9a52 	andeq	r9, pc, r2, asr sl	; <UNPREDICTABLE>
				*buf++ = uart_a_read;
     820:	000fda00 	andeq	sp, pc, r0, lsl #20
			uart_a_disable_int;
     824:	52000100 	andpl	r0, r0, #0, 2
     828:	00000ff2 	strdeq	r0, [r0], -r2
			if (uart_a_char_available) {
     82c:	00000ff6 	strdeq	r0, [r0], -r6
     830:	f6530001 			; <UNDEFINED> instruction: 0xf6530001
				uart_a_enable_int;
     834:	0000000f 	andeq	r0, r0, pc
     838:	01000010 	tsteq	r0, r0, lsl r0
				goto Redo_rx;
     83c:	00005200 	andeq	r5, r0, r0, lsl #4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     840:	00000000 	andeq	r0, r0, r0
     844:	13040000 	movwne	r0, #16384	; 0x4000
			return -2;
     848:	130c0000 	movwne	r0, #49152	; 0xc000
     84c:	00010000 	andeq	r0, r1, r0
				uart_a_write (*buf);
     850:	00131051 	andseq	r1, r3, r1, asr r0
     854:	00131200 	andseq	r1, r3, r0, lsl #4
			while (len && uart_a_room_in_tx) {
     858:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (len != operation) {
     864:	00001258 	andeq	r1, r0, r8, asr r2
			uart_a_disable_int;
     868:	00001274 	andeq	r1, r0, r4, ror r2
     86c:	7a500001 	bvc	1400878 <__ccfg+0x13e08d0>
			if (uart_a_room_in_tx) {
     870:	86000012 			; <UNDEFINED> instruction: 0x86000012
     874:	01000012 	tsteq	r0, r2, lsl r0
				uart_a_enable_int;
     878:	00005000 	andeq	r5, r0, r0
     87c:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     880:	12580000 	subsne	r0, r8, #0
			if (uart_a_room_in_tx) {
     884:	12760000 	rsbsne	r0, r6, #0
				uart_a_write (*buf);
     888:	00010000 	andeq	r0, r1, r0
     88c:	00127a51 	andseq	r7, r2, r1, asr sl
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	00128400 	andseq	r8, r2, r0, lsl #8
     894:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			uart_a_enable_int;
     8a0:	00001258 	andeq	r1, r0, r8, asr r2
			return 0;
     8a4:	00001279 	andeq	r1, r0, r9, ror r2
			if (len == UART_CNTRL_SETRATE) {
     8a8:	7a520001 	bvc	14808b4 <__ccfg+0x146090c>
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	82000012 	andhi	r0, r0, #18
     8b0:	01000012 	tsteq	r0, r2, lsl r0
     8b4:	00005200 	andeq	r5, r0, r0, lsl #4
				syserror (EREQPAR, "uar");
     8b8:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     8bc:	12580000 	subsne	r0, r8, #0
			if (len == UART_CNTRL_GETRATE) {
     8c0:	12700000 	rsbsne	r0, r0, #0
				return 1;
     8c4:	00010000 	andeq	r0, r1, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	00127053 	andseq	r7, r2, r3, asr r0
			syserror (ENOOPER, "uai");
     8cc:	0012f400 	andseq	pc, r2, r0, lsl #8
     8d0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     8dc:	00001258 	andeq	r1, r0, r8, asr r2
     8e0:	000012d8 	ldrdeq	r1, [r0], -r8
     8e4:	00910002 	addseq	r0, r1, r2
     8e8:	000012d8 	ldrdeq	r1, [r0], -r8
     8ec:	000012f4 	strdeq	r1, [r0], -r4
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	00910002 	addseq	r0, r1, r2
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8fc:	00001288 	andeq	r1, r0, r8, lsl #5
     900:	0000129e 	muleq	r0, lr, r2
     904:	a6500001 	ldrbge	r0, [r0], -r1
     908:	b8000012 	stmdalt	r0, {r1, r4}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	01000012 	tsteq	r0, r2, lsl r0
     910:	12c85000 	sbcne	r5, r8, #0
		RISE_N_SHINE;
     914:	12d00000 	sbcsne	r0, r0, #0
     918:	00010000 	andeq	r0, r1, r0
		i_trigger (devevent (UART_A, READ));
     91c:	0012d850 	andseq	sp, r2, r0, asr r8
     920:	0012e000 	andseq	lr, r2, r0
     924:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     930:	00001234 	andeq	r1, r0, r4, lsr r2
     934:	0000123a 	andeq	r1, r0, sl, lsr r2
     938:	40500001 	subsmi	r0, r0, r1
     93c:	48000012 	stmdami	r0, {r1, r4}
     940:	01000012 	tsteq	r0, r2, lsl r0
     944:	124c5000 	subne	r5, ip, #0
     948:	12580000 	subsne	r0, r8, #0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	00010000 	andeq	r0, r1, r0
     950:	00000050 	andeq	r0, r0, r0, asr r0
     954:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
     958:	00123400 	andseq	r3, r2, r0, lsl #8
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	00123c00 	andseq	r3, r2, r0, lsl #24
     960:	51000100 	mrspl	r0, (UNDEF: 16)
		RISE_N_SHINE;
     964:	00001240 	andeq	r1, r0, r0, asr #4
     968:	0000124a 	andeq	r1, r0, sl, asr #4
     96c:	4c510001 	mrrcmi	0, 0, r0, r1, cr1
		i_trigger (devevent (UART_A, WRITE));
     970:	58000012 	stmdapl	r0, {r1, r4}
     974:	01000012 	tsteq	r0, r2, lsl r0
     978:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     988:	00010000 	andeq	r0, r1, r0
     98c:	00000050 	andeq	r0, r0, r0, asr r0
     990:	00000000 	andeq	r0, r0, r0
     994:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
     9a8:	00520001 	subseq	r0, r2, r1
     9ac:	00000000 	andeq	r0, r0, r0
void __buttons_setirq (int val) {
     9b0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	20000012 	andcs	r0, r0, r2, lsl r0
     9b8:	01000012 	tsteq	r0, r2, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	00005000 	andeq	r5, r0, r0
     9c0:	00000000 	andeq	r0, r0, r0
     9c4:	121e0000 	andsne	r0, lr, #0
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	12280000 	eorne	r0, r8, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	00010000 	andeq	r0, r1, r0
     9d0:	00122c51 	andseq	r2, r2, r1, asr ip
     9d4:	00123200 	andseq	r3, r2, r0, lsl #4
     9d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
     9e4:	0000121e 	andeq	r1, r0, lr, lsl r2
     9e8:	00001222 	andeq	r1, r0, r2, lsr #4
     9ec:	00520001 	subseq	r0, r2, r1
	...
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	01000000 	mrseq	r0, (UNDEF: 0)
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	00005000 	andeq	r5, r0, r0
	...
     a10:	00010000 	andeq	r0, r1, r0
     a14:	00000051 	andeq	r0, r0, r1, asr r0
	...
}
     a24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void GPIOIntHandler () {
     a30:	00500001 	subseq	r0, r0, r1
	...
	buttons_disable ();
     a40:	01000000 	mrseq	r0, (UNDEF: 0)
	i_trigger ((aword)&__button_list);
     a44:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     a54:	00010000 	andeq	r0, r1, r0
     a58:	00000050 	andeq	r0, r0, r0, asr r0
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RISE_N_SHINE;
     a74:	00510001 	subseq	r0, r1, r1
	...
	i_trigger ((aword)(&__input_pins));
     a84:	01000000 	mrseq	r0, (UNDEF: 0)
     a88:	00005200 	andeq	r5, r0, r0, lsl #4
	...
     a98:	00010000 	andeq	r0, r1, r0
     a9c:	00000050 	andeq	r0, r0, r0, asr r0
	...
     aac:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	RISE_N_SHINE;
     ab8:	00510001 	subseq	r0, r1, r1
     abc:	00000000 	andeq	r0, r0, r0
}
     ac0:	10000000 	andne	r0, r0, r0
     ac4:	14000012 	strne	r0, [r0], #-18	; 0xffffffee
     ac8:	01000012 	tsteq	r0, r2, lsl r0
     acc:	12145000 	andsne	r5, r4, #0
     ad0:	121e0000 	andsne	r0, lr, #0
void system_init () {
     ad4:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	00000053 	andeq	r0, r0, r3, asr r0
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	00121400 	andseq	r1, r2, r0, lsl #8
     ae4:	00121e00 	andseq	r1, r2, r0, lsl #28
     ae8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	000011f0 	strdeq	r1, [r0], -r0
     af8:	000011f4 	strdeq	r1, [r0], -r4
     afc:	f4500001 			; <UNDEFINED> instruction: 0xf4500001
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	10000011 	andne	r0, r0, r1, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b04:	01000012 	tsteq	r0, r2, lsl r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	00005100 	andeq	r5, r0, r0, lsl #2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	11f80000 	mvnsne	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	12000000 	andne	r0, r0, #0
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	00010000 	andeq	r0, r1, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	00120852 	andseq	r0, r2, r2, asr r8
		pin = (port_confs [i] >> 19) & 0x1f;
     b20:	00121000 	andseq	r1, r2, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b24:	52000100 	andpl	r0, r0, #0, 2
	...
     b30:	000011f8 	strdeq	r1, [r0], -r8
		if (port_confs [i] & 0x80)
     b34:	00001210 	andeq	r1, r0, r0, lsl r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	00500001 	subseq	r0, r0, r1
     b3c:	00000000 	andeq	r0, r0, r0
		if (port_confs [i] & 0x40)
     b40:	cc000000 	stcgt	0, cr0, [r0], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	d4000011 	strle	r0, [r0], #-17	; 0xffffffef
     b48:	01000011 	tsteq	r0, r1, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4c:	11d65000 	bicsne	r5, r6, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	11da0000 	bicsne	r0, sl, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b54:	00010000 	andeq	r0, r1, r0
	all_leds_blink;
     b58:	0011da50 	andseq	sp, r1, r0, asr sl
     b5c:	0011f000 	andseq	pc, r1, r0
     b60:	53000100 	movwpl	r0, #256	; 0x100
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	00500001 	subseq	r0, r0, r1
     b78:	00000000 	andeq	r0, r0, r0
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00005000 	andeq	r5, r0, r0
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b90:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_AON_RTC_COMB);
     b94:	00000050 	andeq	r0, r0, r0, asr r0
     b98:	00000000 	andeq	r0, r0, r0
     b9c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	IntEnable (INT_AON_GPIO_EDGE);
     ba8:	000013dc 	ldrdeq	r1, [r0], -ip
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     bac:	000013ee 	andeq	r1, r0, lr, ror #7
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	ee500001 	cdp	0, 5, cr0, cr0, cr1, {0}
     bb4:	2a000013 	bcs	c08 <system_init+0x134>
     bb8:	01000014 	tsteq	r0, r4, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	00005700 	andeq	r5, r0, r0, lsl #14
     bc0:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	13ee0000 	mvnne	r0, #0
     bc8:	142a0000 	strtne	r0, [sl], #-0
     bcc:	00010000 	andeq	r0, r1, r0
	urates [0] = UART_RATE / 100;
     bd0:	00000056 	andeq	r0, r0, r6, asr r0
     bd4:	00000000 	andeq	r0, r0, r0
	reinit_uart ();
     bd8:	0013ee00 	andseq	lr, r3, r0, lsl #28
	EXTRA_INITIALIZERS;
     bdc:	0013f500 	andseq	pc, r3, r0, lsl #10
     be0:	50000100 	andpl	r0, r0, r0, lsl #2
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	000013f6 	strdeq	r1, [r0], -r6
     be8:	00001417 	andeq	r1, r0, r7, lsl r4
     bec:	18500001 	ldmdane	r0, {r0}^
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	1a000014 	bne	c48 <system_init+0x174>
     bf4:	01000014 	tsteq	r0, r4, lsl r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	14205800 	strtne	r5, [r0], #-2048	; 0xfffff800
     bfc:	14340000 	ldrtne	r0, [r4], #-0
			devinit [i] . init (devinit [i] . param);
     c00:	00010000 	andeq	r0, r1, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	00000050 	andeq	r0, r0, r0, asr r0
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	0013ee00 	andseq	lr, r3, r0, lsl #28
	IntEnable (INT_UART0_COMB);
     c10:	00141a00 	andseq	r1, r4, r0, lsl #20
     c14:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
}
     c18:	00001420 	andeq	r1, r0, r0, lsr #8
	tci_run_auxiliary_timer ();
     c1c:	0000142a 	andeq	r1, r0, sl, lsr #8
		diag ("");
     c20:	00540001 	subseq	r0, r4, r1
	...
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	1a000014 	bne	c84 <system_init+0x1b0>
		diag ("Leftover RAM: %d bytes",
     c30:	01000014 	tsteq	r0, r4, lsl r0
     c34:	14205800 	strtne	r5, [r0], #-2048	; 0xfffff800
     c38:	14260000 	strtne	r0, [r6], #-0
     c3c:	00010000 	andeq	r0, r1, r0
     c40:	00000058 	andeq	r0, r0, r8, asr r0
     c44:	00000000 	andeq	r0, r0, r0
     c48:	00138c00 	andseq	r8, r3, r0, lsl #24
     c4c:	00139400 	andseq	r9, r3, r0, lsl #8
     c50:	50000100 	andpl	r0, r0, r0, lsl #2
     c54:	00001394 	muleq	r0, r4, r3
     c58:	0000139e 	muleq	r0, lr, r3
     c5c:	a4500001 	ldrbge	r0, [r0], #-1
     c60:	b0000013 	andlt	r0, r0, r3, lsl r0
     c64:	01000013 	tsteq	r0, r3, lsl r0
     c68:	13c45000 	bicne	r5, r4, #0
     c6c:	13ce0000 	bicne	r0, lr, #0
     c70:	00010000 	andeq	r0, r1, r0
     c74:	00000050 	andeq	r0, r0, r0, asr r0
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	00139a00 	andseq	r9, r3, r0, lsl #20
     c80:	0013cc00 	andseq	ip, r3, r0, lsl #24
     c84:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     c88:	000013cc 	andeq	r1, r0, ip, asr #7
__attribute__ ((noreturn)) void __pi_release () {
     c8c:	000013ce 	andeq	r1, r0, lr, asr #7
     c90:	ce520001 	cdpgt	0, 5, cr0, cr2, cr1, {0}
     c94:	d0000013 	andle	r0, r0, r3, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	01000013 	tsteq	r0, r3, lsl r0
	check_stack_overflow;
     c9c:	00005400 	andeq	r5, r0, r0, lsl #8
     ca0:	00000000 	andeq	r0, r0, r0
     ca4:	0f4a0000 	svceq	0x004a0000
	update_n_wake (MAX_WORD, NO);
     ca8:	0f7c0000 	svceq	0x007c0000
     cac:	00010000 	andeq	r0, r1, r0
     cb0:	00000056 	andeq	r0, r0, r6, asr r0
	for_all_tasks (__pi_curr) {
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	000f6000 	andeq	r6, pc, r0
     cbc:	000f6a00 	andeq	r6, pc, r0, lsl #20
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	53000100 	movwpl	r0, #256	; 0x100
	...
	system_event_count ++;
     cd4:	00500001 	subseq	r0, r0, r1
     cd8:	00000000 	andeq	r0, r0, r0
	switch (__pi_systat.effpdm) {
     cdc:	01000000 	mrseq	r0, (UNDEF: 0)
     ce0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	__SLEEP;
     cf0:	00010000 	andeq	r0, r1, r0
     cf4:	00000050 	andeq	r0, r0, r0, asr r0
	check_stack_overflow;
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	00001194 	muleq	r0, r4, r1
			goto Redo;
     d0c:	000011ad 	andeq	r1, r0, sp, lsr #3
	for_all_tasks (__pi_curr) {
     d10:	00500001 	subseq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	00000000 	andeq	r0, r0, r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	94000000 	strls	r0, [r0], #-0
     d1c:	aa000011 	bge	d68 <__pi_release+0xdc>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	01000011 	tsteq	r0, r1, lsl r0
     d24:	00005100 	andeq	r5, r0, r0, lsl #2
     d28:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2c:	11700000 	cmnne	r0, r0
     d30:	11840000 	orrne	r0, r4, r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	00010000 	andeq	r0, r1, r0
     d38:	00118450 	andseq	r8, r1, r0, asr r4
			__WFI ();
     d3c:	00118800 	andseq	r8, r1, r0, lsl #16
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d40:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
     d44:	0000118c 	andeq	r1, r0, ip, lsl #3
}
     d48:	00001194 	muleq	r0, r4, r1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	00500001 	subseq	r0, r0, r1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	00000000 	andeq	r0, r0, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	70000000 	andvc	r0, r0, r0
     d58:	87000011 	smladhi	r0, r1, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5c:	01000011 	tsteq	r0, r1, lsl r0
     d60:	118c5100 	orrne	r5, ip, r0, lsl #2
     d64:	11940000 	orrsne	r0, r4, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	00010000 	andeq	r0, r1, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	00000051 	andeq	r0, r0, r1, asr r0
     d70:	00000000 	andeq	r0, r0, r0
     d74:	00117800 	andseq	r7, r1, r0, lsl #16
     d78:	00118700 	andseq	r8, r1, r0, lsl #14
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	53000100 	movwpl	r0, #256	; 0x100
     d80:	0000118c 	andeq	r1, r0, ip, lsl #3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	00001194 	muleq	r0, r4, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	00530001 	subseq	r0, r3, r1
	...
     d98:	01000000 	mrseq	r0, (UNDEF: 0)
			SysCtrlSetRechargeBeforePowerDown
     d9c:	00005000 	andeq	r5, r0, r0
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	00010000 	andeq	r0, r1, r0
     db0:	00000051 	andeq	r0, r0, r1, asr r0
     db4:	00000000 	andeq	r0, r0, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dcc:	00520001 	subseq	r0, r2, r1
     dd0:	00000000 	andeq	r0, r0, r0
			while (!(AONWUCPowerStatusGet () &
     dd4:	01000000 	mrseq	r0, (UNDEF: 0)
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	00005200 	andeq	r5, r0, r0, lsl #4
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	11500000 	cmpne	r0, r0
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de4:	115a0000 	cmpne	sl, r0
     de8:	00010000 	andeq	r0, r1, r0
     dec:	00000053 	andeq	r0, r0, r3, asr r0
     df0:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	0010f400 	andseq	pc, r0, r0, lsl #8
     df8:	0010fa00 	andseq	pc, r0, r0, lsl #20
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			reinit_uart ();
     e08:	000014dc 	ldrdeq	r1, [r0], -ip
     e0c:	000014e2 	andeq	r1, r0, r2, ror #9
     e10:	e2500001 	subs	r0, r0, #1
}
     e14:	10000014 	andne	r0, r0, r4, lsl r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	01000015 	tsteq	r0, r5, lsl r0
     e1c:	00005500 	andeq	r5, r0, r0, lsl #10
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	00000000 	andeq	r0, r0, r0
     e24:	14dc0000 	ldrbne	r0, [ip], #0
     e28:	14e70000 	strbtne	r0, [r7], #0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	00010000 	andeq	r0, r1, r0
     e30:	0014e751 	andseq	lr, r4, r1, asr r7
     e34:	00151000 	andseq	r1, r5, r0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	000014f8 	strdeq	r1, [r0], -r8
     e48:	000014fc 	strdeq	r1, [r0], -ip
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     e50:	02000014 	andeq	r0, r0, #20
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	01000015 	tsteq	r0, r5, lsl r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	15025300 	strne	r5, [r2, #-768]	; 0xfffffd00
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	15100000 	ldrne	r0, [r0, #-0]
     e60:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (
     e64:	00000052 	andeq	r0, r0, r2, asr r0
	...
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	goto Redo;
     e88:	00510001 	subseq	r0, r1, r1
	...
     e98:	01000000 	mrseq	r0, (UNDEF: 0)
     e9c:	00005000 	andeq	r5, r0, r0
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	00010000 	andeq	r0, r1, r0
     ea8:	00000050 	andeq	r0, r0, r0, asr r0
	...
     eb8:	53000100 	movwpl	r0, #256	; 0x100
	...
     ec4:	00530001 	subseq	r0, r3, r1
	...
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005000 	andeq	r5, r0, r0
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	00010000 	andeq	r0, r1, r0
int main (void) {
     ee4:	00000053 	andeq	r0, r0, r3, asr r0
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	00000000 	andeq	r0, r0, r0
     eec:	53000100 	movwpl	r0, #256	; 0x100
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f00:	00500001 	subseq	r0, r0, r1
     f04:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
     f0c:	00005000 	andeq	r5, r0, r0
	...
	delay (16, 0);
     f1c:	00010000 	andeq	r0, r1, r0
     f20:	00000050 	andeq	r0, r0, r0, asr r0
     f24:	00000000 	andeq	r0, r0, r0
	__pi_release ();
     f28:	53000100 	movwpl	r0, #256	; 0x100
	...
     f34:	00530001 	subseq	r0, r3, r1
	...
static void killev (__pi_pcb_t *pid) {
     f44:	01000000 	mrseq	r0, (UNDEF: 0)
	wfun = (aword)(pid->code);
     f48:	00005000 	andeq	r5, r0, r0
	for_all_tasks (i) {
     f4c:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
     f50:	00010000 	andeq	r0, r1, r0
     f54:	00000050 	andeq	r0, r0, r0, asr r0
	...
			if (i->Events [j] . Event == (aword)pid
     f64:	53000100 	movwpl	r0, #256	; 0x100
	...
				wakeupev (i, j);
     f70:	00001028 	andeq	r1, r0, r8, lsr #32
     f74:	0000102e 	andeq	r1, r0, lr, lsr #32
	for_all_tasks (i) {
     f78:	00500001 	subseq	r0, r0, r1
}
     f7c:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
static void qfree (aword *ch) {
     f84:	31000010 	tstcc	r0, r0, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	01000010 	tsteq	r0, r0, lsl r0
	cc = (aword*)(mpools + MA_NP);
     f8c:	00005100 	andeq	r5, r0, r0, lsl #2
	m_setnextp (ch, chunk);
     f90:	00000000 	andeq	r0, r0, r0
	m_setnextp (cc, ch);
     f94:	10360000 	eorsne	r0, r6, r0
}
     f98:	10740000 	rsbsne	r0, r4, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00107854 	andseq	r7, r0, r4, asr r8
     fa4:	0010c600 	andseq	ip, r0, r0, lsl #12
			m_setnextp (cc, m_nextp (chunk));
     fa8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	000010c8 	andeq	r1, r0, r8, asr #1
     fb0:	000010d2 	ldrdeq	r1, [r0], -r2
     fb4:	00540001 	subseq	r0, r4, r1
     fb8:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	70000010 	andvc	r0, r0, r0, lsl r0
     fc4:	01000010 	tsteq	r0, r0, lsl r0
     fc8:	10785000 	rsbsne	r5, r8, r0
			m_setnextp (cc, m_nextp (chunk));
     fcc:	10c80000 	sbcne	r0, r8, r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	00010000 	andeq	r0, r1, r0
     fd4:	00000050 	andeq	r0, r0, r0, asr r0
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	00110800 	andseq	r0, r1, r0, lsl #16
     fe0:	00111c00 	andseq	r1, r1, r0, lsl #24
     fe4:	50000100 	andpl	r0, r0, r0, lsl #2
			if (m_size (chunk) >= m_size (ch))
     fe8:	00001122 	andeq	r1, r0, r2, lsr #2
     fec:	0000113c 	andeq	r1, r0, ip, lsr r1
     ff0:	00500001 	subseq	r0, r0, r1
		chunk = m_nextp (chunk))
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     ffc:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	01000011 	tsteq	r0, r1, lsl r0
	diag_wait (a);
    1004:	11225100 			; <UNDEFINED> instruction: 0x11225100
	diag_wchar (c, a);
    1008:	11280000 			; <UNDEFINED> instruction: 0x11280000
    100c:	00010000 	andeq	r0, r1, r0
}
    1010:	00000051 	andeq	r0, r0, r1, asr r0
    1014:	00000000 	andeq	r0, r0, r0
	syserror (ESTATE, "state");
    1018:	00111a00 	andseq	r1, r1, r0, lsl #20
    101c:	00111c00 	andseq	r1, r1, r0, lsl #24
    1020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	0000111a 	andeq	r1, r0, sl, lsl r1
    1030:	0000111e 	andeq	r1, r0, lr, lsl r1
    1034:	00510001 	subseq	r0, r1, r1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	00000000 	andeq	r0, r0, r0
    103c:	44000000 	strmi	r0, [r0], #-0
    1040:	52000013 	andpl	r0, r0, #19
    1044:	01000013 	tsteq	r0, r3, lsl r0
    1048:	13585000 	cmpne	r8, #0
    104c:	136b0000 	cmnne	fp, #0
    1050:	00010000 	andeq	r0, r1, r0
    1054:	00000050 	andeq	r0, r0, r0, asr r0
    1058:	00000000 	andeq	r0, r0, r0
    105c:	00135000 	andseq	r5, r3, r0
    1060:	00135200 	andseq	r5, r3, r0, lsl #4
    1064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (!twaiting (i))
    1078:	00500001 	subseq	r0, r0, r1
    107c:	00000000 	andeq	r0, r0, r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
    1084:	00005000 	andeq	r5, r0, r0
	...
    1094:	00010000 	andeq	r0, r1, r0
    1098:	00000055 	andeq	r0, r0, r5, asr r0
	...
    10a8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				wakeuptm (i);
    10b4:	00500001 	subseq	r0, r0, r1
	...
				d = i->Timer - znew;
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	00005000 	andeq	r5, r0, r0
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00010000 	andeq	r0, r1, r0
	__pi_old = znew;
    10d4:	00000050 	andeq	r0, r0, r0, asr r0
}
    10d8:	00000000 	andeq	r0, r0, r0
	TCI_RUN_DELAY_TIMER;
    10dc:	75000200 	strvc	r0, [r0, #-512]	; 0xfffffe00
	...
}
    10f0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	prcdstate (__pi_curr, state);
    10fc:	00500001 	subseq	r0, r0, r1
	...
	sint j = nevents (__pi_curr);
    110c:	01000000 	mrseq	r0, (UNDEF: 0)
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	00005400 	andeq	r5, r0, r0, lsl #8
    1114:	00000000 	andeq	r0, r0, r0
    1118:	00010000 	andeq	r0, r1, r0
		syserror (ENEVENTS, "sw");
    111c:	00000050 	andeq	r0, r0, r0, asr r0
	...
	setestate (__pi_curr->Events [j], state, event);
    112c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1138:	00500001 	subseq	r0, r0, r1
	...
		for (j = 0; j < nevents (i); j++) {
    1148:	01000000 	mrseq	r0, (UNDEF: 0)
    114c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			if (i->Events [j] . Event == event) {
    115c:	00010000 	andeq	r0, r1, r0
				wakeupev (i, j);
    1160:	00000050 	andeq	r0, r0, r0, asr r0
    1164:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1168:	73000200 	movwvc	r0, #512	; 0x200
	...
	return 0;
    117c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1188:	00500001 	subseq	r0, r0, r1
	...
	settstate (__pi_curr, state);
    1198:	01000000 	mrseq	r0, (UNDEF: 0)
    119c:	00005100 	andeq	r5, r0, r0, lsl #2
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	00010000 	andeq	r0, r1, r0
	update_n_wake (d, YES);
    11a8:	00000051 	andeq	r0, r0, r1, asr r0
	...
	inctimer (__pi_curr);
    11b8:	53000100 	movwpl	r0, #256	; 0x100
	...
}
    11c4:	00530001 	subseq	r0, r3, r1
	...
		return (int) __pi_curr;
    11d4:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (i)
    11d8:	00005000 	andeq	r5, r0, r0
}
    11dc:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
    11e0:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i)
    11e4:	00000050 	andeq	r0, r0, r0, asr r0
    11e8:	00000000 	andeq	r0, r0, r0
    11ec:	73000200 	movwvc	r0, #512	; 0x200
	...
		if (i->code == fun)
    1200:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i)
    120c:	00550001 	subseq	r0, r5, r1
int __pi_strlen (const char *s) {
    1210:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1214:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1218:	00005000 	andeq	r5, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    121c:	00000000 	andeq	r0, r0, r0
	while (n--)
    1220:	00010000 	andeq	r0, r1, r0
    1224:	00000055 	andeq	r0, r0, r5, asr r0
	...
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (ioreq [loc] != NULL)
    1240:	00570001 	subseq	r0, r7, r1
    1244:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "addv");
    1248:	01000000 	mrseq	r0, (UNDEF: 0)
	ioreq [loc] = rf;
    124c:	00005100 	andeq	r5, r0, r0, lsl #2
}
    1250:	00000000 	andeq	r0, r0, r0
    1254:	00010000 	andeq	r0, r1, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	00000057 	andeq	r0, r0, r7, asr r0
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1268:	52000100 	andpl	r0, r0, #0, 2
	...
		syserror (ENODEVICE, "io");
    1274:	00540001 	subseq	r0, r4, r1
    1278:	00000000 	andeq	r0, r0, r0
	if (len == 0)
    127c:	01000000 	mrseq	r0, (UNDEF: 0)
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	00005200 	andeq	r5, r0, r0, lsl #4
    1284:	00000000 	andeq	r0, r0, r0
	if (ret >= 0)
    1288:	00010000 	andeq	r0, r1, r0
	if (ret == -1) {
    128c:	00000054 	andeq	r0, r0, r4, asr r0
	...
		iowait (dev, operation, retry);
    129c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (ret == -2) {
    12a8:	00510001 	subseq	r0, r1, r1
	...
			iowait (dev, operation, retry);
    12b8:	01000000 	mrseq	r0, (UNDEF: 0)
			(ioreq [dev]) (NONE, buf, len);
    12bc:	00005000 	andeq	r5, r0, r0
	...
		(ioreq [dev]) (NONE, buf, len);
    12cc:	00010000 	andeq	r0, r1, r0
    12d0:	00000050 	andeq	r0, r0, r0, asr r0
}
    12d4:	00000000 	andeq	r0, r0, r0
	if (retry != WNONE) {
    12d8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		release;
    12ec:	00510001 	subseq	r0, r1, r1
    12f0:	00000000 	andeq	r0, r0, r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
    12f8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
		syserror (ERESOURCE, "mal1");
    1308:	00010000 	andeq	r0, r1, r0
    130c:	00000052 	andeq	r0, r0, r2, asr r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	00000000 	andeq	r0, r0, r0
    1314:	52000100 	andpl	r0, r0, #0, 2
	...
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1328:	00500001 	subseq	r0, r0, r1
}
    132c:	00000000 	andeq	r0, r0, r0
    1330:	07000000 	streq	r0, [r0, -r0]
    1334:	32007400 	andcc	r7, r0, #0, 8
    1338:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	...
void __pi_free (aword *ch) {
    1344:	00500001 	subseq	r0, r0, r1
	...
		syserror (EMALLOC, "malg");
    1354:	01000000 	mrseq	r0, (UNDEF: 0)
	mcfree [MA_NP] += m_size (ch);
    1358:	00005000 	andeq	r5, r0, r0
	...
	QFREE;
    1368:	00010000 	andeq	r0, r1, r0
	if (mevent [MA_NP] . nwait) {
    136c:	00000051 	andeq	r0, r0, r1, asr r0
	...
}
    137c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1388:	00550001 	subseq	r0, r5, r1
	...
	for_all_tasks (i) {
    1398:	01000000 	mrseq	r0, (UNDEF: 0)
	syserror (EREQPAR, "kpi");
    139c:	00005100 	andeq	r5, r0, r0, lsl #2
    13a0:	00000000 	andeq	r0, r0, r0
		if ((aword)i == pid) {
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	00000056 	andeq	r0, r0, r6, asr r0
	...
			if (i == __pi_curr)
    13b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				j->Next = i->Next;
    13c4:	00540001 	subseq	r0, r4, r1
	...
}
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	00005000 	andeq	r5, r0, r0
void killall (fsmcode fun) {
    13dc:	00000000 	andeq	r0, r0, r0
	j = NULL;
    13e0:	00010000 	andeq	r0, r1, r0
	for (i = __PCB; i != NULL; ) {
    13e4:	00000050 	andeq	r0, r0, r0, asr r0
	...
		release;
    13f4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (j == NULL)
    1400:	00510001 	subseq	r0, r1, r1
	...
			killev (i);
    1410:	01000000 	mrseq	r0, (UNDEF: 0)
			ufree (i);
    1414:	00005000 	andeq	r5, r0, r0
			i = k;
    1418:	00000000 	andeq	r0, r0, r0
    141c:	00010000 	andeq	r0, r1, r0
				j->Next = k;
    1420:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    1430:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	00510001 	subseq	r0, r1, r1
	...
		if (mevent [MA_NP] . nfail != 255)
    144c:	01000000 	mrseq	r0, (UNDEF: 0)
    1450:	00005000 	andeq	r5, r0, r0
			mevent [MA_NP] . nfail ++;
    1454:	00000000 	andeq	r0, r0, r0
		mnfree [MA_NP] = 0;
    1458:	00010000 	andeq	r0, r1, r0
    145c:	00000050 	andeq	r0, r0, r0, asr r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    1460:	00000000 	andeq	r0, r0, r0
    1464:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (m_size (chunk) >= _size)
    1470:	00500001 	subseq	r0, r0, r1
    1474:	00000000 	andeq	r0, r0, r0
		chunk = m_nextp (chunk)) {
    1478:	01000000 	mrseq	r0, (UNDEF: 0)
		m_setnextp (cc, m_nextp (chunk));
    147c:	00005000 	andeq	r5, r0, r0
	...
			cc = chunk + _size + m_hdrlen;
    148c:	00010000 	andeq	r0, r1, r0
    1490:	00000051 	andeq	r0, r0, r1, asr r0
			m_size (cc) = waste - m_hdrlen;
    1494:	00000000 	andeq	r0, r0, r0
			QFREE;
    1498:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		mcfree [MA_NP] -= m_size (chunk);
    14a4:	00510001 	subseq	r0, r1, r1
	...
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14b4:	01000000 	mrseq	r0, (UNDEF: 0)
		m_size (chunk) |= MALLOC_UMASK;
    14b8:	00005200 	andeq	r5, r0, r0, lsl #4
			mnfree [MA_NP] = mcfree [MA_NP];
    14bc:	00000000 	andeq	r0, r0, r0
}
    14c0:	00010000 	andeq	r0, r1, r0
    14c4:	00000052 	andeq	r0, r0, r2, asr r0
    14c8:	00000000 	andeq	r0, r0, r0
    14cc:	52000100 	andpl	r0, r0, #0, 2
	...
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e0:	00500001 	subseq	r0, r0, r1
	...
	i->Next = NULL;
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
	i->data = data;
    14f4:	00005000 	andeq	r5, r0, r0
		if ((j = __PCB) == NULL)
    14f8:	00000000 	andeq	r0, r0, r0
}
    14fc:	00010000 	andeq	r0, r1, r0
			for (; j->Next != NULL; j = j->Next);
    1500:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (mevent [MA_NP] . nwait != 255)
    1510:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		mevent [MA_NP] . nwait ++;
    151c:	00540001 	subseq	r0, r4, r1
	...
void diag (const char *mess, ...) {
    152c:	01000000 	mrseq	r0, (UNDEF: 0)
    1530:	00005100 	andeq	r5, r0, r0, lsl #2
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1540:	00010000 	andeq	r0, r1, r0
	diag_disable_int (a, is);
    1544:	00000052 	andeq	r0, r0, r2, asr r0
	while (*mess != '\0') {
    1548:	00000000 	andeq	r0, r0, r0
	dgout ('\r');
    154c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	diag_enable_int (a, is);
    1560:	00500001 	subseq	r0, r0, r1
    1564:	00000000 	andeq	r0, r0, r0
}
    1568:	01000000 	mrseq	r0, (UNDEF: 0)
    156c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
			if (*mess == 'l') {
    157c:	00010000 	andeq	r0, r1, r0
    1580:	00000051 	andeq	r0, r0, r1, asr r0
				mess++;
    1584:	00000000 	andeq	r0, r0, r0
				val = va_arg (ap, lword);
    1588:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			switch (*mess) {
    159c:	00520001 	subseq	r0, r2, r1
				dgout ('%');
    15a0:	00000000 	andeq	r0, r0, r0
    15a4:	01000000 	mrseq	r0, (UNDEF: 0)
				dgout (*mess);
    15a8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
					i += 4;
    15b8:	00010000 	andeq	r0, r1, r0
					(val >> (bc - i)) & 0xf];
    15bc:	00000050 	andeq	r0, r0, r0, asr r0
    15c0:	00000000 	andeq	r0, r0, r0
					dgout (v);
    15c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if ((val >> (bc - 1)) & 1) {
    15d8:	00510001 	subseq	r0, r1, r1
    15dc:	00000000 	andeq	r0, r0, r0
					dgout ('-');
    15e0:	01000000 	mrseq	r0, (UNDEF: 0)
    15e4:	00005100 	andeq	r5, r0, r0, lsl #2
						val |= 0xffff0000;
    15e8:	00000000 	andeq	r0, r0, r0
    15ec:	00010000 	andeq	r0, r1, r0
    15f0:	00000051 	andeq	r0, r0, r1, asr r0
	...
					v = (word) (val / d);
    1600:	52000100 	andpl	r0, r0, #0, 2
	...
					d /= 10;
    160c:	00540001 	subseq	r0, r4, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1610:	00000000 	andeq	r0, r0, r0
					dgout (v + '0');
    1614:	01000000 	mrseq	r0, (UNDEF: 0)
    1618:	00005200 	andeq	r5, r0, r0, lsl #4
    161c:	00000000 	andeq	r0, r0, r0
					d /= 10;
    1620:	00010000 	andeq	r0, r1, r0
					val = val - (v * d);
    1624:	00000054 	andeq	r0, r0, r4, asr r0
					if (d == 0) break;
    1628:	00000000 	andeq	r0, r0, r0
					v = (word) (val / d);
    162c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				d = (bc == 16) ? 10000 : 1000000000;
    1638:	00540001 	subseq	r0, r4, r1
	...
				while (*s != '\0') {
    1648:	01000000 	mrseq	r0, (UNDEF: 0)
    164c:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			dgout (*mess++);
    165c:	00010000 	andeq	r0, r1, r0
    1660:	00000050 	andeq	r0, r0, r0, asr r0
}
    1664:	00000000 	andeq	r0, r0, r0
    while(1)
    1668:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    167c:	00500001 	subseq	r0, r0, r1
    1680:	00000000 	andeq	r0, r0, r0
    1684:	01000000 	mrseq	r0, (UNDEF: 0)
    1688:	00005000 	andeq	r5, r0, r0
    168c:	00000000 	andeq	r0, r0, r0
   main();
    1690:	00010000 	andeq	r0, r1, r0
    FaultISR();
    1694:	00000050 	andeq	r0, r0, r0, asr r0
	...
        *pui32Dest++ = *pui32Src++;
    16a4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    16b0:	00500001 	subseq	r0, r0, r1
    16b4:	00000000 	andeq	r0, r0, r0
static byte get_byte () {
    16b8:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16bc:	00005000 	andeq	r5, r0, r0
    16c0:	00000000 	andeq	r0, r0, r0
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c4:	00010000 	andeq	r0, r1, r0
    16c8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
}
    16e4:	00510001 	subseq	r0, r1, r1
    16e8:	00000000 	andeq	r0, r0, r0
static void put_byte (byte b) {
    16ec:	01000000 	mrseq	r0, (UNDEF: 0)
    16f0:	00005100 	andeq	r5, r0, r0, lsl #2
    16f4:	00000000 	andeq	r0, r0, r0
    16f8:	00010000 	andeq	r0, r1, r0
		if (b & 0x80)
    16fc:	00000051 	andeq	r0, r0, r1, asr r0
	...
		b <<= 1;
    170c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    1718:	0070000a 	rsbseq	r0, r0, sl
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    171c:	00032432 	andeq	r2, r3, r2, lsr r4
    1720:	22000000 	andcs	r0, r0, #0
	...
}
    172c:	00540001 	subseq	r0, r4, r1
    1730:	00000000 	andeq	r0, r0, r0
static void wwait (word st, word del) {
    1734:	0a000000 	beq	173c <wwait+0x8>
    1738:	32007000 	andcc	r7, r0, #0
    173c:	00000324 	andeq	r0, r0, r4, lsr #6
	while (dopen && (rdsr () & 1)) {
    1740:	00220000 	eoreq	r0, r2, r0
    1744:	00000000 	andeq	r0, r0, r0
    1748:	01000000 	mrseq	r0, (UNDEF: 0)
    174c:	00005400 	andeq	r5, r0, r0, lsl #8
	put_byte (CMD_RDSR);
    1750:	00000000 	andeq	r0, r0, r0
	r = get_byte ();
    1754:	000a0000 	andeq	r0, sl, r0
    1758:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	while (dopen && (rdsr () & 1)) {
    175c:	00000003 	andeq	r0, r0, r3
}
    1760:	00002200 	andeq	r2, r0, r0, lsl #4
	...
			mdelay (1);
    1770:	00010000 	andeq	r0, r1, r0
			delay (del, st);
    1774:	00000055 	andeq	r0, r0, r5, asr r0
    1778:	00000000 	andeq	r0, r0, r0
			release;
    177c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		wwait (WNONE, 1);
    1790:	00540001 	subseq	r0, r4, r1
    1794:	00000000 	andeq	r0, r0, r0
    1798:	01000000 	mrseq	r0, (UNDEF: 0)
	dstat = 0;
    179c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	udelay (1);
    17ac:	00010000 	andeq	r0, r1, r0
    17b0:	00000050 	andeq	r0, r0, r0, asr r0
	udelay (1);
    17b4:	00000000 	andeq	r0, r0, r0
		dopen = DOPEN_TEMP;
    17b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    17c4:	00500001 	subseq	r0, r0, r1
	...
		wwait (WNONE, 1);
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	00005500 	andeq	r5, r0, r0, lsl #10
	...
}
    17e8:	00010000 	andeq	r0, r1, r0
word ee_open () {
    17ec:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    17fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		dopen = DOPEN_TEMP;
    1808:	00500001 	subseq	r0, r0, r1
		cclose ();
    180c:	00000000 	andeq	r0, r0, r0
}
    1810:	01000000 	mrseq	r0, (UNDEF: 0)
int ser_in (word st, char *buf, int len) {
    1814:	00005000 	andeq	r5, r0, r0
    1818:	00000000 	andeq	r0, r0, r0
	if (len == 0)
    181c:	00010000 	andeq	r0, r1, r0
	if (__inpline == NULL) {
    1820:	00000050 	andeq	r0, r0, r0, asr r0
	...
			prcs = runthread (__inserial);
    1830:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		release;
    183c:	00510001 	subseq	r0, r1, r1
		join (prcs, st);
    1840:	00000000 	andeq	r0, r0, r0
    1844:	01000000 	mrseq	r0, (UNDEF: 0)
	if (*__inpline == NULL) // bin cmd
    1848:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	memcpy (buf, __inpline, prcs);
    1858:	00010000 	andeq	r0, r1, r0
    185c:	00000053 	andeq	r0, r0, r3, asr r0
    1860:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    1864:	70000a00 	andvc	r0, r0, r0, lsl #20
	__inpline = NULL;
    1868:	03243200 			; <UNDEFINED> instruction: 0x03243200
	if (*buf) // if it's NULL, it's a bin cmd
    186c:	00000000 	andeq	r0, r0, r0
		buf [prcs] = '\0';
    1870:	00000022 	andeq	r0, r0, r2, lsr #32
}
    1874:	00000000 	andeq	r0, r0, r0
		prcs = strlen (__inpline);
    1878:	53000100 	movwpl	r0, #256	; 0x100
	...
		return 0;
    1884:	0070000a 	rsbseq	r0, r0, sl
    1888:	00032432 	andeq	r2, r3, r2, lsr r4
int ser_outf (word st, const char *m, ...) {
    188c:	22000000 	andcs	r0, r0, #0
	...
	if ((prcs = running (__outserial)) != 0) {
    1898:	00530001 	subseq	r0, r3, r1
		join (prcs, st);
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	0a000000 	beq	18a8 <ser_outf+0x1c>
		release;
    18a4:	32007000 	andcc	r7, r0, #0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18a8:	00000324 	andeq	r0, r0, r4, lsr #6
    18ac:	00220000 	eoreq	r0, r2, r0
	...
	if (runstrand (__outserial, buf) == 0) {
    18bc:	01000000 	mrseq	r0, (UNDEF: 0)
    18c0:	00005000 	andeq	r5, r0, r0
    18c4:	00000000 	andeq	r0, r0, r0
		ufree (buf);
    18c8:	00010000 	andeq	r0, r1, r0
		npwait (st);
    18cc:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    18dc:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (fmt == NULL)
    18e8:	00530001 	subseq	r0, r3, r1
	if (__inpline == NULL) {
    18ec:	00000000 	andeq	r0, r0, r0
		if ((prcs = running (__inserial)) == 0) {
    18f0:	01000000 	mrseq	r0, (UNDEF: 0)
    18f4:	00005300 	andeq	r5, r0, r0, lsl #6
	...
				npwait (st);
    1904:	00010000 	andeq	r0, r1, r0
		release;
    1908:	00000052 	andeq	r0, r0, r2, asr r0
		join (prcs, st);
    190c:	00000000 	andeq	r0, r0, r0
    1910:	52000100 	andpl	r0, r0, #0, 2
	...
	prcs = vscan (__inpline, fmt, ap);
    191c:	00520001 	subseq	r0, r2, r1
	ufree (__inpline);
    1920:	00000000 	andeq	r0, r0, r0
	__inpline = NULL;
    1924:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1928:	00005200 	andeq	r5, r0, r0, lsl #4
	...
		return 0;
    1938:	00010000 	andeq	r0, r1, r0
    193c:	00000050 	andeq	r0, r0, r0, asr r0
	...
strand (__outserial, const char*)
    194c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	ptr = data;
    1958:	00510001 	subseq	r0, r1, r1
    195c:	00000000 	andeq	r0, r0, r0
	if (*ptr)
    1960:	01000000 	mrseq	r0, (UNDEF: 0)
		len = strlen (ptr);
    1964:	00005100 	andeq	r5, r0, r0, lsl #2
    1968:	00000000 	andeq	r0, r0, r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    196c:	00010000 	andeq	r0, r1, r0
    1970:	00000051 	andeq	r0, r0, r1, asr r0
    1974:	00000000 	andeq	r0, r0, r0
    1978:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (len == 0) {
    198c:	00550001 	subseq	r0, r5, r1
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
    19a0:	00005400 	andeq	r5, r0, r0, lsl #8
    19a4:	00000000 	andeq	r0, r0, r0
    19a8:	00010000 	andeq	r0, r1, r0
    19ac:	00000050 	andeq	r0, r0, r0, asr r0
strand (__inserial, address)
    19b0:	00000000 	andeq	r0, r0, r0
    19b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (__inpline != NULL)
    19c8:	00500001 	subseq	r0, r0, r1
		finish;
    19cc:	00000000 	andeq	r0, r0, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    19d0:	01000000 	mrseq	r0, (UNDEF: 0)
    19d4:	00005000 	andeq	r5, r0, r0
    19d8:	00000000 	andeq	r0, r0, r0
    19dc:	00070000 	andeq	r0, r7, r0
		umwait (IM_INIT);
    19e0:	24320071 	ldrtcs	r0, [r2], #-113	; 0xffffff8f
		release;
    19e4:	00220072 	eoreq	r0, r2, r2, ror r0
	savedata (data);
    19e8:	00000000 	andeq	r0, r0, r0
	len = MAX_LINE_LENGTH;
    19ec:	01000000 	mrseq	r0, (UNDEF: 0)
	io (IM_READ, __cport, READ, ptr, 1);
    19f0:	00005000 	andeq	r5, r0, r0
	...
	if (ptr == (char*) data) { // new line
    1a00:	00010000 	andeq	r0, r1, r0
    1a04:	00000050 	andeq	r0, r0, r0, asr r0
		if (*ptr == '\0') { // bin cmd
    1a08:	00000000 	andeq	r0, r0, r0
			proceed (IM_BIN);
    1a0c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			proceed (IM_READ);
    1a20:	00500001 	subseq	r0, r0, r1
	if (*ptr == '\n' || *ptr == '\r') {
    1a24:	00000000 	andeq	r0, r0, r0
    1a28:	01000000 	mrseq	r0, (UNDEF: 0)
    1a2c:	00005000 	andeq	r5, r0, r0
	...
	if (len) {
    1a3c:	00010000 	andeq	r0, r1, r0
		ptr++;
    1a40:	00000051 	andeq	r0, r0, r1, asr r0
    1a44:	00000000 	andeq	r0, r0, r0
		len--;
    1a48:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	io (IM_BIN, __cport, READ, ptr, 1);
    1a54:	00510001 	subseq	r0, r1, r1
    1a58:	00000000 	andeq	r0, r0, r0
    1a5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a60:	00005500 	andeq	r5, r0, r0, lsl #10
	len -= 2;
    1a64:	00000000 	andeq	r0, r0, r0
	if (len > *ptr + 1) // 1 for 0x04
    1a68:	00010000 	andeq	r0, r1, r0
    1a6c:	00000051 	andeq	r0, r0, r1, asr r0
		len = *ptr + 1;
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a88:	00560001 	subseq	r0, r6, r1
	...
		__inpline = (char*)data;
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
		finish;
    1a9c:	00005000 	andeq	r5, r0, r0
	...
endstrand
    1aac:	00010000 	andeq	r0, r1, r0
	proceed (IM_BINL);
    1ab0:	00000050 	andeq	r0, r0, r0, asr r0
endstrand
    1ab4:	00000000 	andeq	r0, r0, r0
    1ab8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1ac4:	00500001 	subseq	r0, r0, r1
	...
		if (res && (d < n))
    1ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ad8:	00005100 	andeq	r5, r0, r0, lsl #2
			res [d] = (char) c;
    1adc:	00000000 	andeq	r0, r0, r0
		d++;
    1ae0:	00010000 	andeq	r0, r1, r0
    1ae4:	00000057 	andeq	r0, r0, r7, asr r0
    1ae8:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1aec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				enci (10000);
    1af8:	00570001 	subseq	r0, r7, r1
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1afc:	00000000 	andeq	r0, r0, r0
    1b00:	01000000 	mrseq	r0, (UNDEF: 0)
	d = 0;
    1b04:	00005700 	andeq	r5, r0, r0, lsl #14
		c = *fm++;
    1b08:	00000000 	andeq	r0, r0, r0
		if (c == '\\') {
    1b0c:	00010000 	andeq	r0, r1, r0
			if ((c = *fm++) == '\0') {
    1b10:	00000051 	andeq	r0, r0, r1, asr r0
    1b14:	00000000 	andeq	r0, r0, r0
				outc ('\\');
    1b18:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
			outc (c);
    1b2c:	78910002 	ldmvc	r1, {r1}
	...
			outc (c);
    1b38:	78910002 	ldmvc	r1, {r1}
	...
		if (c == '%') {
    1b44:	78910002 	ldmvc	r1, {r1}
	...
			switch (c) {
    1b50:	78910002 	ldmvc	r1, {r1}
	...
    1b64:	00560001 	subseq	r0, r6, r1
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	01000000 	mrseq	r0, (UNDEF: 0)
				outc ('%');
    1b70:	00005600 	andeq	r5, r0, r0, lsl #12
	...
				outc (c);
    1b80:	00010000 	andeq	r0, r1, r0
				if (c == '\0')
    1b84:	00000050 	andeq	r0, r0, r0, asr r0
				return d;
    1b88:	00000000 	andeq	r0, r0, r0
}
    1b8c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			switch (c) {
    1b98:	00500001 	subseq	r0, r0, r1
    1b9c:	00000000 	andeq	r0, r0, r0
				for (i = 12; ; i -= 4) {
    1ba0:	01000000 	mrseq	r0, (UNDEF: 0)
				val = (word) va_arg (ap, aword);
    1ba4:	00005400 	andeq	r5, r0, r0, lsl #8
						[ (val >> i) & 0xf ]);
    1ba8:	00000000 	andeq	r0, r0, r0
    1bac:	00010000 	andeq	r0, r1, r0
    1bb0:	00000050 	andeq	r0, r0, r0, asr r0
					outc (__pi_hex_enc_table
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				if (c == 'd' && (val & 0x8000) != 0) {
    1bcc:	00500001 	subseq	r0, r0, r1
				val = (word) va_arg (ap, aword);
    1bd0:	00000000 	andeq	r0, r0, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    1bd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1bd8:	00005000 	andeq	r5, r0, r0
					outc ('-');
    1bdc:	00000000 	andeq	r0, r0, r0
    1be0:	00010000 	andeq	r0, r1, r0
					val = (~val) + 1;
    1be4:	00000050 	andeq	r0, r0, r0, asr r0
	...
				enci (10000);
    1bf4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1c00:	00500001 	subseq	r0, r0, r1
    1c04:	00000000 	andeq	r0, r0, r0
    1c08:	01000000 	mrseq	r0, (UNDEF: 0)
    1c0c:	00005400 	andeq	r5, r0, r0, lsl #8
    1c10:	00000000 	andeq	r0, r0, r0
    1c14:	00010000 	andeq	r0, r1, r0
    1c18:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1c28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				if (c == 'd' || c == 'u') {
    1c3c:	00500001 	subseq	r0, r0, r1
	...
					if (c == 'd' &&
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00005000 	andeq	r5, r0, r0
	...
				enci (10000);
    1c60:	00010000 	andeq	r0, r1, r0
					enci (1000000000UL);
    1c64:	00000050 	andeq	r0, r0, r0, asr r0
    1c68:	00000000 	andeq	r0, r0, r0
    1c6c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1c78:	00500001 	subseq	r0, r0, r1
    1c7c:	00000000 	andeq	r0, r0, r0
    1c80:	01000000 	mrseq	r0, (UNDEF: 0)
    1c84:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    1c94:	00010000 	andeq	r0, r1, r0
    1c98:	00000051 	andeq	r0, r0, r1, asr r0
    1c9c:	00000000 	andeq	r0, r0, r0
    1ca0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					for (i = 28; ; i -= 4) {
    1cac:	00510001 	subseq	r0, r1, r1
					val = va_arg (ap, lword);
    1cb0:	00000000 	andeq	r0, r0, r0
							[ (val >> i) & 0xf ]);
    1cb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1cb8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
						if (i == 0)
    1cc8:	00010000 	andeq	r0, r1, r0
    1ccc:	00000050 	andeq	r0, r0, r0, asr r0
					for (i = 28; ; i -= 4) {
    1cd0:	00000000 	andeq	r0, r0, r0
					outc ('%');
    1cd4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				val = (word) va_arg (ap, aword);
    1ce8:	00510001 	subseq	r0, r1, r1
				outc (val);
    1cec:	00000000 	andeq	r0, r0, r0
    1cf0:	01000000 	mrseq	r0, (UNDEF: 0)
				while (*st != '\0') {
    1cf4:	00005400 	andeq	r5, r0, r0, lsl #8
	...
					outc (*st);
    1d04:	00010000 	andeq	r0, r1, r0
    1d08:	00000050 	andeq	r0, r0, r0, asr r0
					st++;
    1d0c:	00000000 	andeq	r0, r0, r0
		c = *fm++;
    1d10:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
char *vform (char *res, const char *fm, va_list aq) {
    1d1c:	00510001 	subseq	r0, r1, r1
    1d20:	00000000 	andeq	r0, r0, r0
	if (res != NULL) {
    1d24:	01000000 	mrseq	r0, (UNDEF: 0)
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1d28:	00005000 	andeq	r5, r0, r0
    1d2c:	00000000 	andeq	r0, r0, r0
    1d30:	00010000 	andeq	r0, r1, r0
}
    1d34:	00000054 	andeq	r0, r0, r4, asr r0
    1d38:	00000000 	andeq	r0, r0, r0
	fml = strlen (fm) + 17;
    1d3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((res = (char*) umalloc (fml)) == NULL)
    1d48:	00500001 	subseq	r0, r0, r1
	...
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1d58:	01000000 	mrseq	r0, (UNDEF: 0)
    1d5c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	if (buf == NULL || fmt == NULL)
    1d6c:	00010000 	andeq	r0, r1, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1d70:	00000050 	andeq	r0, r0, r0, asr r0
	if (buf == NULL || fmt == NULL)
    1d74:	00000000 	andeq	r0, r0, r0
    1d78:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	while (*fmt != '\0') {
    1d8c:	00500001 	subseq	r0, r0, r1
		if (*fmt++ != '%')
    1d90:	00000000 	andeq	r0, r0, r0
		switch (*fmt++) {
    1d94:	01000000 	mrseq	r0, (UNDEF: 0)
    1d98:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    1da8:	00010000 	andeq	r0, r1, r0
    1dac:	00000051 	andeq	r0, r0, r1, asr r0
}
    1db0:	00000000 	andeq	r0, r0, r0
		switch (*fmt++) {
    1db4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dc0:	00500001 	subseq	r0, r0, r1
	...
			while (isspace (*buf)) buf++;
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	00005200 	andeq	r5, r0, r0, lsl #4
    1dd8:	00000000 	andeq	r0, r0, r0
			if (*buf == '\0')
    1ddc:	00010000 	andeq	r0, r1, r0
			if (*buf != ',') {
    1de0:	00000051 	andeq	r0, r0, r1, asr r0
			sap = va_arg (ap, char*);
    1de4:	00000000 	andeq	r0, r0, r0
			nc++;
    1de8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				while (!isspace (*buf) && *buf != ',' &&
    1dfc:	00500001 	subseq	r0, r0, r1
	...
			while (isspace (*buf)) buf++;
    1e0c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e10:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			if (*buf == ',') buf++;
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    case 'd': scani (word); break;
    1e34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e40:	00560001 	subseq	r0, r6, r1
    1e44:	00000000 	andeq	r0, r0, r0
    1e48:	01000000 	mrseq	r0, (UNDEF: 0)
    1e4c:	00005100 	andeq	r5, r0, r0, lsl #2
    1e50:	00000000 	andeq	r0, r0, r0
    1e54:	00010000 	andeq	r0, r1, r0
    1e58:	00000056 	andeq	r0, r0, r6, asr r0
    1e5c:	00000000 	andeq	r0, r0, r0
    1e60:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1e6c:	00560001 	subseq	r0, r6, r1
    1e70:	00000000 	andeq	r0, r0, r0
    1e74:	01000000 	mrseq	r0, (UNDEF: 0)
    1e78:	00005100 	andeq	r5, r0, r0, lsl #2
    1e7c:	00000000 	andeq	r0, r0, r0
    1e80:	00010000 	andeq	r0, r1, r0
    1e84:	00000056 	andeq	r0, r0, r6, asr r0
	...
    1e94:	52000100 	andpl	r0, r0, #0, 2
	...
		    case 'u': scanu (word); break;
    1ea0:	00550001 	subseq	r0, r5, r1
    1ea4:	00000000 	andeq	r0, r0, r0
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	00005200 	andeq	r5, r0, r0, lsl #4
    1eb0:	00000000 	andeq	r0, r0, r0
    1eb4:	00010000 	andeq	r0, r1, r0
    1eb8:	00000055 	andeq	r0, r0, r5, asr r0
    1ebc:	00000000 	andeq	r0, r0, r0
    1ec0:	52000100 	andpl	r0, r0, #0, 2
	...
    1ecc:	00550001 	subseq	r0, r5, r1
	...
    1edc:	01000000 	mrseq	r0, (UNDEF: 0)
    1ee0:	00005000 	andeq	r5, r0, r0
    1ee4:	00000000 	andeq	r0, r0, r0
		    case 'x': scanx (word); break;
    1ee8:	00010000 	andeq	r0, r1, r0
    1eec:	00000050 	andeq	r0, r0, r0, asr r0
    1ef0:	00000000 	andeq	r0, r0, r0
    1ef4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1f00:	00500001 	subseq	r0, r0, r1
	...
    1f10:	01000000 	mrseq	r0, (UNDEF: 0)
    1f14:	00005100 	andeq	r5, r0, r0, lsl #2
    1f18:	00000000 	andeq	r0, r0, r0
    1f1c:	16780000 	ldrbtne	r0, [r8], -r0
    1f20:	16910000 	ldrne	r0, [r1], r0
    1f24:	00010000 	andeq	r0, r1, r0
    1f28:	00169c52 	andseq	r9, r6, r2, asr ip
    1f2c:	0016b000 	andseq	fp, r6, r0
    1f30:	52000100 	andpl	r0, r0, #0, 2
	...
    1f3c:	00001678 	andeq	r1, r0, r8, ror r6
    1f40:	00001691 	muleq	r0, r1, r6
    1f44:	a0530001 	subsge	r0, r3, r1
    1f48:	b0000016 	andlt	r0, r0, r6, lsl r0
    1f4c:	01000016 	tsteq	r0, r6, lsl r0
    1f50:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			switch (*fmt++) {
    1f60:	00010000 	andeq	r0, r1, r0
    1f64:	00000050 	andeq	r0, r0, r0, asr r0
    1f68:	00000000 	andeq	r0, r0, r0
    1f6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'd': scani (lword); break;
    1f80:	00510001 	subseq	r0, r1, r1
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	01000000 	mrseq	r0, (UNDEF: 0)
    1f8c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1f9c:	00010000 	andeq	r0, r1, r0
    1fa0:	00000052 	andeq	r0, r0, r2, asr r0
    1fa4:	00000000 	andeq	r0, r0, r0
    1fa8:	52000100 	andpl	r0, r0, #0, 2
	...
    1fbc:	00510001 	subseq	r0, r1, r1
	...
    1fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd0:	00005000 	andeq	r5, r0, r0
	...
		    	    case 'x': scanx (lword); break;
    1fe0:	00010000 	andeq	r0, r1, r0
    1fe4:	00000050 	andeq	r0, r0, r0, asr r0
    1fe8:	00000000 	andeq	r0, r0, r0
    1fec:	03000500 	movweq	r0, #1280	; 0x500
	...
    1ffc:	00500001 	subseq	r0, r0, r1
    2000:	00000000 	andeq	r0, r0, r0
    2004:	05000000 	streq	r0, [r0, #-0]
    2008:	00000300 	andeq	r0, r0, r0, lsl #6
	...
    201c:	00010000 	andeq	r0, r1, r0
    2020:	00000050 	andeq	r0, r0, r0, asr r0
    2024:	00000000 	andeq	r0, r0, r0
    2028:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2034:	00500001 	subseq	r0, r0, r1
    2038:	00000000 	andeq	r0, r0, r0
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
    2040:	00005000 	andeq	r5, r0, r0
	...
		    	    case 'd': scani (lword); break;
    2050:	00010000 	andeq	r0, r1, r0
    2054:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    	    case 'u': scanu (lword); break;
    2064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2078:	00500001 	subseq	r0, r0, r1
	...
    2088:	01000000 	mrseq	r0, (UNDEF: 0)
    208c:	00005100 	andeq	r5, r0, r0, lsl #2
    2090:	00000000 	andeq	r0, r0, r0
    2094:	00010000 	andeq	r0, r1, r0
    2098:	00000056 	andeq	r0, r0, r6, asr r0
	...
		    	    case 'x': scanx (lword); break;
    20a8:	52000100 	andpl	r0, r0, #0, 2
	...
			nc++;
    20bc:	00530001 	subseq	r0, r3, r1
	...
			while (isspace (*buf)) buf++;
    20cc:	01000000 	mrseq	r0, (UNDEF: 0)
						*sap++ = *buf++;
    20d0:	00005400 	andeq	r5, r0, r0, lsl #8
    20d4:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    20d8:	00010000 	andeq	r0, r1, r0
    20dc:	00000054 	andeq	r0, r0, r4, asr r0
    20e0:	00000000 	andeq	r0, r0, r0
		return 0;
    20e4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		    	    case 'x': scanx (lword); break;
    20f8:	00500001 	subseq	r0, r0, r1
    20fc:	00000000 	andeq	r0, r0, r0
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	00005000 	andeq	r5, r0, r0
	...
    2114:	00010000 	andeq	r0, r1, r0
    2118:	00000051 	andeq	r0, r0, r1, asr r0
    211c:	00000000 	andeq	r0, r0, r0
    2120:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    212c:	00510001 	subseq	r0, r1, r1
	...
    213c:	01000000 	mrseq	r0, (UNDEF: 0)
    2140:	00005200 	andeq	r5, r0, r0, lsl #4
    2144:	00000000 	andeq	r0, r0, r0
    2148:	00010000 	andeq	r0, r1, r0
    214c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    215c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2170:	00500001 	subseq	r0, r0, r1
	...
    2180:	01000000 	mrseq	r0, (UNDEF: 0)
    2184:	00005000 	andeq	r5, r0, r0
    2188:	00000000 	andeq	r0, r0, r0
    218c:	00010000 	andeq	r0, r1, r0
    2190:	00000055 	andeq	r0, r0, r5, asr r0
    2194:	00000000 	andeq	r0, r0, r0
    2198:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21ac:	00510001 	subseq	r0, r1, r1
    21b0:	00000000 	andeq	r0, r0, r0
    21b4:	01000000 	mrseq	r0, (UNDEF: 0)
    21b8:	00005600 	andeq	r5, r0, r0, lsl #12
    21bc:	00000000 	andeq	r0, r0, r0
    21c0:	00010000 	andeq	r0, r1, r0
    21c4:	00000056 	andeq	r0, r0, r6, asr r0
    21c8:	00000000 	andeq	r0, r0, r0
    21cc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    21e0:	00520001 	subseq	r0, r2, r1
    21e4:	00000000 	andeq	r0, r0, r0
    21e8:	01000000 	mrseq	r0, (UNDEF: 0)
    21ec:	00005200 	andeq	r5, r0, r0, lsl #4
    21f0:	00000000 	andeq	r0, r0, r0
    21f4:	17340000 	ldrne	r0, [r4, -r0]!
    21f8:	17440000 	strbne	r0, [r4, -r0]
    21fc:	00010000 	andeq	r0, r1, r0
    2200:	00000050 	andeq	r0, r0, r0, asr r0
    2204:	00000000 	andeq	r0, r0, r0
    2208:	00173400 	andseq	r3, r7, r0, lsl #8
    220c:	00174400 	andseq	r4, r7, r0, lsl #8
    2210:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    221c:	00001756 	andeq	r1, r0, r6, asr r7
    2220:	0000175a 	andeq	r1, r0, sl, asr r7
    2224:	00500001 	subseq	r0, r0, r1
    2228:	00000000 	andeq	r0, r0, r0
    222c:	1c000000 	stcne	0, cr0, [r0], {-0}
    2230:	27000017 	smladcs	r0, r7, r0, r0
    2234:	01000017 	tsteq	r0, r7, lsl r0
    2238:	00005000 	andeq	r5, r0, r0
    223c:	00000000 	andeq	r0, r0, r0
    2240:	16ec0000 	strbtne	r0, [ip], r0
    2244:	17080000 	strne	r0, [r8, -r0]
    2248:	00010000 	andeq	r0, r1, r0
    224c:	00171050 	andseq	r1, r7, r0, asr r0
    2250:	00171c00 	andseq	r1, r7, r0, lsl #24
    2254:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2260:	000016c8 	andeq	r1, r0, r8, asr #13
    2264:	000016cc 	andeq	r1, r0, ip, asr #13
    2268:	d0500001 	subsle	r0, r0, r1
    226c:	ec000016 	stc	0, cr0, [r0], {22}
    2270:	01000016 	tsteq	r0, r6, lsl r0
    2274:	00005000 	andeq	r5, r0, r0
    2278:	00000000 	andeq	r0, r0, r0
    227c:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
    2280:	18220000 	stmdane	r2!, {}	; <UNPREDICTABLE>
    2284:	00010000 	andeq	r0, r1, r0
    2288:	00187e50 	andseq	r7, r8, r0, asr lr
    228c:	00188c00 	andseq	r8, r8, r0, lsl #24
    2290:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    229c:	00001814 	andeq	r1, r0, r4, lsl r8
    22a0:	00001829 	andeq	r1, r0, r9, lsr #16
    22a4:	29510001 	ldmdbcs	r1, {r0}^
    22a8:	48000018 	stmdami	r0, {r3, r4}
    22ac:	01000018 	tsteq	r0, r8, lsl r0
    22b0:	18485700 	stmdane	r8, {r8, r9, sl, ip, lr}^
    22b4:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
    22b8:	00010000 	andeq	r0, r1, r0
    22bc:	00185051 	andseq	r5, r8, r1, asr r0
    22c0:	00187600 	andseq	r7, r8, r0, lsl #12
    22c4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    22c8:	00001876 	andeq	r1, r0, r6, ror r8
    22cc:	00001879 	andeq	r1, r0, r9, ror r8
    22d0:	79510001 	ldmdbvc	r1, {r0}^
    22d4:	7e000018 	mcrvc	0, 0, r0, cr0, cr8, {0}
    22d8:	01000018 	tsteq	r0, r8, lsl r0
    22dc:	187e5700 	ldmdane	lr!, {r8, r9, sl, ip, lr}^
    22e0:	188c0000 	stmne	ip, {}	; <UNPREDICTABLE>
    22e4:	00010000 	andeq	r0, r1, r0
    22e8:	00000051 	andeq	r0, r0, r1, asr r0
    22ec:	00000000 	andeq	r0, r0, r0
    22f0:	00181400 	andseq	r1, r8, r0, lsl #8
    22f4:	00182900 	andseq	r2, r8, r0, lsl #18
    22f8:	52000100 	andpl	r0, r0, #0, 2
    22fc:	00001829 	andeq	r1, r0, r9, lsr #16
    2300:	00001848 	andeq	r1, r0, r8, asr #16
    2304:	48550001 	ldmdami	r5, {r0}^
    2308:	50000018 	andpl	r0, r0, r8, lsl r0
    230c:	01000018 	tsteq	r0, r8, lsl r0
    2310:	18505200 	ldmdane	r0, {r9, ip, lr}^
    2314:	18760000 	ldmdane	r6!, {}^	; <UNPREDICTABLE>
    2318:	00010000 	andeq	r0, r1, r0
    231c:	00187655 	andseq	r7, r8, r5, asr r6
    2320:	00187900 	andseq	r7, r8, r0, lsl #18
    2324:	52000100 	andpl	r0, r0, #0, 2
    2328:	00001879 	andeq	r1, r0, r9, ror r8
    232c:	0000187e 	andeq	r1, r0, lr, ror r8
    2330:	7e550001 	cdpvc	0, 5, cr0, cr5, cr1, {0}
    2334:	8c000018 	stchi	0, cr0, [r0], {24}
    2338:	01000018 	tsteq	r0, r8, lsl r0
    233c:	00005200 	andeq	r5, r0, r0, lsl #4
    2340:	00000000 	andeq	r0, r0, r0
    2344:	182a0000 	stmdane	sl!, {}	; <UNPREDICTABLE>
    2348:	18300000 	ldmdane	r0!, {}	; <UNPREDICTABLE>
    234c:	00010000 	andeq	r0, r1, r0
    2350:	00183050 	andseq	r3, r8, r0, asr r0
    2354:	00183300 	andseq	r3, r8, r0, lsl #6
    2358:	51000100 	mrspl	r0, (UNDEF: 16)
    235c:	00001834 	andeq	r1, r0, r4, lsr r8
    2360:	00001838 	andeq	r1, r0, r8, lsr r8
    2364:	40500001 	subsmi	r0, r0, r1
    2368:	45000018 	strmi	r0, [r0, #-24]	; 0xffffffe8
    236c:	01000018 	tsteq	r0, r8, lsl r0
    2370:	18505000 	ldmdane	r0, {ip, lr}^
    2374:	18720000 	ldmdane	r2!, {}^	; <UNPREDICTABLE>
    2378:	00010000 	andeq	r0, r1, r0
    237c:	00187c54 	andseq	r7, r8, r4, asr ip
    2380:	00187e00 	andseq	r7, r8, r0, lsl #28
    2384:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2390:	0000188c 	andeq	r1, r0, ip, lsl #17
    2394:	00001894 	muleq	r0, r4, r8
    2398:	00500001 	subseq	r0, r0, r1
    239c:	00000000 	andeq	r0, r0, r0
    23a0:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    23a4:	a1000018 	tstge	r0, r8, lsl r0
    23a8:	01000018 	tsteq	r0, r8, lsl r0
    23ac:	18a15000 	stmiane	r1!, {ip, lr}
    23b0:	18a60000 	stmiane	r6!, {}	; <UNPREDICTABLE>
    23b4:	00010000 	andeq	r0, r1, r0
    23b8:	0018a656 	andseq	sl, r8, r6, asr r6
    23bc:	0018af00 	andseq	sl, r8, r0, lsl #30
    23c0:	50000100 	andpl	r0, r0, r0, lsl #2
    23c4:	000018af 	andeq	r1, r0, pc, lsr #17
    23c8:	000018d6 	ldrdeq	r1, [r0], -r6
    23cc:	d6560001 	ldrble	r0, [r6], -r1
    23d0:	e0000018 	and	r0, r0, r8, lsl r0
    23d4:	01000018 	tsteq	r0, r8, lsl r0
    23d8:	00005000 	andeq	r5, r0, r0
    23dc:	00000000 	andeq	r0, r0, r0
    23e0:	18b00000 	ldmne	r0!, {}	; <UNPREDICTABLE>
    23e4:	18b40000 	ldmne	r4!, {}	; <UNPREDICTABLE>
    23e8:	00010000 	andeq	r0, r1, r0
    23ec:	0018b450 	andseq	fp, r8, r0, asr r4
    23f0:	0018bc00 	andseq	fp, r8, r0, lsl #24
    23f4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    23f8:	000018bc 			; <UNDEFINED> instruction: 0x000018bc
    23fc:	000018c0 	andeq	r1, r0, r0, asr #17
    2400:	c0500001 	subsgt	r0, r0, r1
    2404:	d6000018 			; <UNDEFINED> instruction: 0xd6000018
    2408:	01000018 	tsteq	r0, r8, lsl r0
    240c:	00005500 	andeq	r5, r0, r0, lsl #10
    2410:	00000000 	andeq	r0, r0, r0
    2414:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    2418:	18ee0000 	stmiane	lr!, {}^	; <UNPREDICTABLE>
    241c:	00010000 	andeq	r0, r1, r0
    2420:	00193450 	andseq	r3, r9, r0, asr r4
    2424:	00194000 	andseq	r4, r9, r0
    2428:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2434:	000018f6 	strdeq	r1, [r0], -r6
    2438:	000018fc 	strdeq	r1, [r0], -ip
    243c:	fc500001 	mrrc2	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2440:	ff000018 			; <UNDEFINED> instruction: 0xff000018
    2444:	01000018 	tsteq	r0, r8, lsl r0
    2448:	19005100 	stmdbne	r0, {r8, ip, lr}
    244c:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
    2450:	00010000 	andeq	r0, r1, r0
    2454:	00190c50 	andseq	r0, r9, r0, asr ip
    2458:	00191100 	andseq	r1, r9, r0, lsl #2
    245c:	50000100 	andpl	r0, r0, r0, lsl #2
    2460:	0000191e 	andeq	r1, r0, lr, lsl r9
    2464:	00001920 	andeq	r1, r0, r0, lsr #18
    2468:	20500001 	subscs	r0, r0, r1
    246c:	28000019 	stmdacs	r0, {r0, r3, r4}
    2470:	01000019 	tsteq	r0, r9, lsl r0
    2474:	00005400 	andeq	r5, r0, r0, lsl #8
    2478:	00000000 	andeq	r0, r0, r0
    247c:	19400000 	stmdbne	r0, {}^	; <UNPREDICTABLE>
    2480:	19570000 	ldmdbne	r7, {}^	; <UNPREDICTABLE>
    2484:	00010000 	andeq	r0, r1, r0
    2488:	00195850 	andseq	r5, r9, r0, asr r8
    248c:	00196400 	andseq	r6, r9, r0, lsl #8
    2490:	50000100 	andpl	r0, r0, r0, lsl #2
    2494:	0000199c 	muleq	r0, ip, r9
    2498:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    249c:	00500001 	subseq	r0, r0, r1
    24a0:	00000000 	andeq	r0, r0, r0
    24a4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    24a8:	54000019 	strpl	r0, [r0], #-25	; 0xffffffe7
    24ac:	01000019 	tsteq	r0, r9, lsl r0
    24b0:	19545500 	ldmdbne	r4, {r8, sl, ip, lr}^
    24b4:	19570000 	ldmdbne	r7, {}^	; <UNPREDICTABLE>
    24b8:	00020000 	andeq	r0, r2, r0
    24bc:	19580873 	ldmdbne	r8, {r0, r1, r4, r5, r6, fp}^
    24c0:	19b00000 	ldmibne	r0!, {}	; <UNPREDICTABLE>
    24c4:	00010000 	andeq	r0, r1, r0
    24c8:	00000055 	andeq	r0, r0, r5, asr r0
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	00197e00 	andseq	r7, r9, r0, lsl #28
    24d4:	00199000 	andseq	r9, r9, r0
    24d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    24e4:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    24e8:	000019cc 	andeq	r1, r0, ip, asr #19
    24ec:	b2500001 	subslt	r0, r0, #1
    24f0:	bb00001a 	bllt	2560 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>
    24f4:	0100001a 	tsteq	r0, sl, lsl r0
    24f8:	00005000 	andeq	r5, r0, r0
    24fc:	00000000 	andeq	r0, r0, r0
    2500:	19b80000 	ldmibne	r8!, {}	; <UNPREDICTABLE>
    2504:	19da0000 	ldmibne	sl, {}^	; <UNPREDICTABLE>
    2508:	00010000 	andeq	r0, r1, r0
    250c:	0019da54 	andseq	sp, r9, r4, asr sl
    2510:	0019e100 	andseq	lr, r9, r0, lsl #2
    2514:	50000100 	andpl	r0, r0, r0, lsl #2
    2518:	000019e1 	andeq	r1, r0, r1, ror #19
    251c:	000019e6 	andeq	r1, r0, r6, ror #19
    2520:	e6540001 	ldrb	r0, [r4], -r1
    2524:	f0000019 			; <UNDEFINED> instruction: 0xf0000019
    2528:	01000019 	tsteq	r0, r9, lsl r0
    252c:	19f05000 	ldmibne	r0!, {ip, lr}^
    2530:	1aae0000 	bne	feb82538 <_estack+0xdeb7d538>
    2534:	00010000 	andeq	r0, r1, r0
    2538:	001ab254 	andseq	fp, sl, r4, asr r2
    253c:	001ab800 	andseq	fp, sl, r0, lsl #16
    2540:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2544:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    2548:	00001abb 			; <UNDEFINED> instruction: 0x00001abb
    254c:	08720002 	ldmdaeq	r2!, {r1}^
	...
    2558:	00001a92 	muleq	r0, r2, sl
    255c:	00001a94 	muleq	r0, r4, sl
    2560:	94500001 	ldrbls	r0, [r0], #-1
    2564:	ae00001a 	mcrge	0, 0, r0, cr0, cr10, {0}
    2568:	0100001a 	tsteq	r0, sl, lsl r0
    256c:	00005600 	andeq	r5, r0, r0, lsl #12
    2570:	00000000 	andeq	r0, r0, r0
    2574:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    2578:	1d330000 	ldcne	0, cr0, [r3, #-0]
    257c:	00010000 	andeq	r0, r1, r0
    2580:	001d3350 	andseq	r3, sp, r0, asr r3
    2584:	001d3a00 	andseq	r3, sp, r0, lsl #20
    2588:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    258c:	00001d3a 	andeq	r1, r0, sl, lsr sp
    2590:	00001d3c 	andeq	r1, r0, ip, lsr sp
    2594:	3c500001 	mrrccc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2598:	4c00001d 	stcmi	0, cr0, [r0], {29}
    259c:	0100001d 	tsteq	r0, sp, lsl r0
    25a0:	1d4c5400 	cfstrdne	mvd5, [ip, #-0]
    25a4:	1d5b0000 	ldclne	0, cr0, [fp, #-0]
    25a8:	00010000 	andeq	r0, r1, r0
    25ac:	001d5b50 	andseq	r5, sp, r0, asr fp
    25b0:	001d6c00 	andseq	r6, sp, r0, lsl #24
    25b4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    25c0:	00001d1c 	andeq	r1, r0, ip, lsl sp
    25c4:	00001d30 	andeq	r1, r0, r0, lsr sp
    25c8:	30510001 	subscc	r0, r1, r1
    25cc:	3300001d 	movwcc	r0, #29
    25d0:	0100001d 	tsteq	r0, sp, lsl r0
    25d4:	1d335200 	lfmne	f5, 4, [r3, #-0]
    25d8:	1d3a0000 	ldcne	0, cr0, [sl, #-0]
    25dc:	00010000 	andeq	r0, r1, r0
    25e0:	001d3a56 	andseq	r3, sp, r6, asr sl
    25e4:	001d3f00 	andseq	r3, sp, r0, lsl #30
    25e8:	51000100 	mrspl	r0, (UNDEF: 16)
    25ec:	00001d3f 	andeq	r1, r0, pc, lsr sp
    25f0:	00001d6c 	andeq	r1, r0, ip, ror #26
    25f4:	00560001 	subseq	r0, r6, r1
    25f8:	00000000 	andeq	r0, r0, r0
    25fc:	1c000000 	stcne	0, cr0, [r0], {-0}
    2600:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    2604:	0100001d 	tsteq	r0, sp, lsl r0
    2608:	1d285200 	sfmne	f5, 4, [r8, #-0]
    260c:	1d2c0000 	stcne	0, cr0, [ip, #-0]
    2610:	00010000 	andeq	r0, r1, r0
    2614:	001d3452 	andseq	r3, sp, r2, asr r4
    2618:	001d3a00 	andseq	r3, sp, r0, lsl #20
    261c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2620:	00001d46 	andeq	r1, r0, r6, asr #26
    2624:	00001d6c 	andeq	r1, r0, ip, ror #26
    2628:	00570001 	subseq	r0, r7, r1
    262c:	00000000 	andeq	r0, r0, r0
    2630:	46000000 	strmi	r0, [r0], -r0
    2634:	6800001d 	stmdavs	r0, {r0, r2, r3, r4}
    2638:	0100001d 	tsteq	r0, sp, lsl r0
    263c:	1d685500 	cfstr64ne	mvdx5, [r8, #-0]
    2640:	1d6c0000 	stclne	0, cr0, [ip, #-0]
    2644:	00010000 	andeq	r0, r1, r0
    2648:	00000058 	andeq	r0, r0, r8, asr r0
    264c:	00000000 	andeq	r0, r0, r0
    2650:	001d6000 	andseq	r6, sp, r0
    2654:	001d6400 	andseq	r6, sp, r0, lsl #8
    2658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2664:	00001aec 	andeq	r1, r0, ip, ror #21
    2668:	00001b06 	andeq	r1, r0, r6, lsl #22
    266c:	00500001 	subseq	r0, r0, r1
    2670:	00000000 	andeq	r0, r0, r0
    2674:	ec000000 	stc	0, cr0, [r0], {-0}
    2678:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    267c:	0100001b 	tsteq	r0, fp, lsl r0
    2680:	00005100 	andeq	r5, r0, r0, lsl #2
    2684:	00000000 	andeq	r0, r0, r0
    2688:	1aec0000 	bne	ffb02690 <_estack+0xdfafd690>
    268c:	1b060000 	blne	182694 <__ccfg+0x1626ec>
    2690:	00010000 	andeq	r0, r1, r0
    2694:	001b1652 	andseq	r1, fp, r2, asr r6
    2698:	001b4200 	andseq	r4, fp, r0, lsl #4
    269c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    26a0:	00001b50 	andeq	r1, r0, r0, asr fp
    26a4:	00001d0e 	andeq	r1, r0, lr, lsl #26
    26a8:	00550001 	subseq	r0, r5, r1
    26ac:	00000000 	andeq	r0, r0, r0
    26b0:	ec000000 	stc	0, cr0, [r0], {-0}
    26b4:	f000001a 			; <UNDEFINED> instruction: 0xf000001a
    26b8:	0100001a 	tsteq	r0, sl, lsl r0
    26bc:	1af25300 	bne	ffc972c4 <_estack+0xdfc922c4>
    26c0:	1af40000 	bne	ffd026c8 <_estack+0xdfcfd6c8>
    26c4:	00030000 	andeq	r0, r3, r0
    26c8:	f4049353 	vst2.16	{d9-d12}, [r4 :64], r3
    26cc:	3e00001a 	mcrcc	0, 0, r0, cr0, cr10, {0}
    26d0:	0300001b 	movweq	r0, #27
    26d4:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26d8:	00001b3e 	andeq	r1, r0, lr, lsr fp
    26dc:	00001b92 	muleq	r0, r2, fp
    26e0:	93540003 	cmpls	r4, #3
    26e4:	001b9204 	andseq	r9, fp, r4, lsl #4
    26e8:	001b9e00 	andseq	r9, fp, r0, lsl #28
    26ec:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    26f0:	1ba60493 	blne	fe983944 <_estack+0xde97e944>
    26f4:	1bc80000 	blne	ff2026fc <_estack+0xdf1fd6fc>
    26f8:	00030000 	andeq	r0, r3, r0
    26fc:	cc049354 	stcgt	3, cr9, [r4], {84}	; 0x54
    2700:	4600001b 			; <UNDEFINED> instruction: 0x4600001b
    2704:	0300001c 	movweq	r0, #28
    2708:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    270c:	00001c4c 	andeq	r1, r0, ip, asr #24
    2710:	00001c60 	andeq	r1, r0, r0, ror #24
    2714:	93540003 	cmpls	r4, #3
    2718:	001ca604 	andseq	sl, ip, r4, lsl #12
    271c:	001cb200 	andseq	fp, ip, r0, lsl #4
    2720:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2724:	1cd40493 	cfldrdne	mvd0, [r4], {147}	; 0x93
    2728:	1ce60000 	stclne	0, cr0, [r6]
    272c:	00030000 	andeq	r0, r3, r0
    2730:	ea049354 	b	127488 <__ccfg+0x1074e0>
    2734:	f200001c 	vqadd.s8	d0, d0, d12
    2738:	0300001c 	movweq	r0, #28
    273c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2740:	00001cf6 	strdeq	r1, [r0], -r6
    2744:	00001d1c 	andeq	r1, r0, ip, lsl sp
    2748:	93540003 	cmpls	r4, #3
    274c:	00000004 	andeq	r0, r0, r4
    2750:	00000000 	andeq	r0, r0, r0
    2754:	001b0a00 	andseq	r0, fp, r0, lsl #20
    2758:	001b1400 	andseq	r1, fp, r0, lsl #8
    275c:	59000100 	stmdbpl	r0, {r8}
    2760:	00001b14 	andeq	r1, r0, r4, lsl fp
    2764:	00001b16 	andeq	r1, r0, r6, lsl fp
    2768:	00720002 	rsbseq	r0, r2, r2
    276c:	00001b16 	andeq	r1, r0, r6, lsl fp
    2770:	00001b3a 	andeq	r1, r0, sl, lsr fp
    2774:	42590001 	subsmi	r0, r9, #1
    2778:	5000001b 	andpl	r0, r0, fp, lsl r0
    277c:	0100001b 	tsteq	r0, fp, lsl r0
    2780:	1b505900 	blne	1418b88 <__ccfg+0x13f8be0>
    2784:	1b880000 	blne	fe20278c <_estack+0xde1fd78c>
    2788:	00010000 	andeq	r0, r1, r0
    278c:	001b9258 	andseq	r9, fp, r8, asr r2
    2790:	001ba200 	andseq	sl, fp, r0, lsl #4
    2794:	58000100 	stmdapl	r0, {r8}
    2798:	00001ba2 	andeq	r1, r0, r2, lsr #23
    279c:	00001baa 	andeq	r1, r0, sl, lsr #23
    27a0:	01720002 	cmneq	r2, r2
    27a4:	00001bc8 	andeq	r1, r0, r8, asr #23
    27a8:	00001bf2 	strdeq	r1, [r0], -r2
    27ac:	f6580001 			; <UNDEFINED> instruction: 0xf6580001
    27b0:	fa00001b 	blx	2824 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xd0>
    27b4:	0100001b 	tsteq	r0, fp, lsl r0
    27b8:	1c045000 	stcne	0, cr5, [r4], {-0}
    27bc:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    27c0:	00010000 	andeq	r0, r1, r0
    27c4:	001c2e50 	andseq	r2, ip, r0, asr lr
    27c8:	001c3000 	andseq	r3, ip, r0
    27cc:	50000100 	andpl	r0, r0, r0, lsl #2
    27d0:	00001c36 	andeq	r1, r0, r6, lsr ip
    27d4:	00001c38 	andeq	r1, r0, r8, lsr ip
    27d8:	38580001 	ldmdacc	r8, {r0}^
    27dc:	5b00001c 	blpl	2854 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x100>
    27e0:	0100001c 	tsteq	r0, ip, lsl r0
    27e4:	1c6a5300 	stclne	3, cr5, [sl], #-0
    27e8:	1c6e0000 	stclne	0, cr0, [lr], #-0
    27ec:	00010000 	andeq	r0, r1, r0
    27f0:	001c7859 	andseq	r7, ip, r9, asr r8
    27f4:	001c9800 	andseq	r9, ip, r0, lsl #16
    27f8:	59000100 	stmdbpl	r0, {r8}
    27fc:	00001c9e 	muleq	r0, lr, ip
    2800:	00001ca0 	andeq	r1, r0, r0, lsr #25
    2804:	a6590001 	ldrbge	r0, [r9], -r1
    2808:	b400001c 	strlt	r0, [r0], #-28	; 0xffffffe4
    280c:	0100001c 	tsteq	r0, ip, lsl r0
    2810:	1cd45300 	ldclne	3, cr5, [r4], {0}
    2814:	1cdd0000 	ldclne	0, cr0, [sp], {0}
    2818:	00010000 	andeq	r0, r1, r0
    281c:	001ce653 	andseq	lr, ip, r3, asr r6
    2820:	001cfa00 	andseq	pc, ip, r0, lsl #20
    2824:	58000100 	stmdapl	r0, {r8}
    2828:	00001d0e 	andeq	r1, r0, lr, lsl #26
    282c:	00001d1c 	andeq	r1, r0, ip, lsl sp
    2830:	00590001 	subseq	r0, r9, r1
    2834:	00000000 	andeq	r0, r0, r0
    2838:	aa000000 	bge	2840 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xec>
    283c:	c800001b 	stmdagt	r0, {r0, r1, r3, r4}
    2840:	0100001b 	tsteq	r0, fp, lsl r0
    2844:	00005800 	andeq	r5, r0, r0, lsl #16
    2848:	00000000 	andeq	r0, r0, r0
    284c:	1bd40000 	blne	ff502854 <_estack+0xdf4fd854>
    2850:	1be80000 	blne	ffa02858 <_estack+0xdf9fd858>
    2854:	00010000 	andeq	r0, r1, r0
    2858:	001bec59 	andseq	lr, fp, r9, asr ip
    285c:	001c1a00 	andseq	r1, ip, r0, lsl #20
    2860:	59000100 	stmdbpl	r0, {r8}
    2864:	00001c22 	andeq	r1, r0, r2, lsr #24
    2868:	00001c36 	andeq	r1, r0, r6, lsr ip
    286c:	00590001 	subseq	r0, r9, r1
    2870:	00000000 	andeq	r0, r0, r0
    2874:	f2000000 	vhadd.s8	d0, d0, d0
    2878:	2400001b 	strcs	r0, [r0], #-27	; 0xffffffe5
    287c:	0100001c 	tsteq	r0, ip, lsl r0
    2880:	1c245800 	stcne	8, cr5, [r4], #-0
    2884:	1c300000 	ldcne	0, cr0, [r0], #-0
    2888:	00010000 	andeq	r0, r1, r0
    288c:	001c3053 	andseq	r3, ip, r3, asr r0
    2890:	001c3600 	andseq	r3, ip, r0, lsl #12
    2894:	58000100 	stmdapl	r0, {r8}
	...
    28a0:	00001c60 	andeq	r1, r0, r0, ror #24
    28a4:	00001ca6 	andeq	r1, r0, r6, lsr #25
    28a8:	005a0001 	subseq	r0, sl, r1
    28ac:	00000000 	andeq	r0, r0, r0
    28b0:	66000000 	strvs	r0, [r0], -r0
    28b4:	9000001c 	andls	r0, r0, ip, lsl r0
    28b8:	0100001c 	tsteq	r0, ip, lsl r0
    28bc:	1c905800 	ldcne	8, cr5, [r0], {0}
    28c0:	1ca00000 	stcne	0, cr0, [r0]
    28c4:	00010000 	andeq	r0, r1, r0
    28c8:	001ca053 	andseq	sl, ip, r3, asr r0
    28cc:	001ca600 	andseq	sl, ip, r0, lsl #12
    28d0:	58000100 	stmdapl	r0, {r8}
	...
    28dc:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    28e0:	00001cd4 	ldrdeq	r1, [r0], -r4
    28e4:	00580001 	subseq	r0, r8, r1
    28e8:	00000000 	andeq	r0, r0, r0
    28ec:	e6000000 	str	r0, [r0], -r0
    28f0:	ea00001c 	b	2968 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc4>
    28f4:	0200001c 	andeq	r0, r0, #28
    28f8:	ea007400 	b	1f900 <__exidx_end+0x1c9f8>
    28fc:	f200001c 	vqadd.s8	d0, d0, d12
    2900:	0200001c 	andeq	r0, r0, #28
    2904:	007c7400 	rsbseq	r7, ip, r0, lsl #8
    2908:	00000000 	andeq	r0, r0, r0
    290c:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    2910:	0c00001c 	stceq	0, cr0, [r0], {28}
    2914:	0100001d 	tsteq	r0, sp, lsl r0
    2918:	00005800 	andeq	r5, r0, r0, lsl #16
    291c:	00000000 	andeq	r0, r0, r0
    2920:	1d6c0000 	stclne	0, cr0, [ip, #-0]
    2924:	1d880000 	stcne	0, cr0, [r8]
    2928:	00010000 	andeq	r0, r1, r0
    292c:	001dc650 	andseq	ip, sp, r0, asr r6
    2930:	001dd800 	andseq	sp, sp, r0, lsl #16
    2934:	53000100 	movwpl	r0, #256	; 0x100
    2938:	00001dd8 	ldrdeq	r1, [r0], -r8
    293c:	00001dec 	andeq	r1, r0, ip, ror #27
    2940:	ee560001 	cdp	0, 5, cr0, cr6, cr1, {0}
    2944:	0a00001d 	beq	29c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x11c>
    2948:	0100001e 	tsteq	r0, lr, lsl r0
    294c:	1e1c5600 	cfmsub32ne	mvax0, mvfx5, mvfx12, mvfx0
    2950:	1e280000 	cdpne	0, 2, cr0, cr8, cr0, {0}
    2954:	00010000 	andeq	r0, r1, r0
    2958:	001e2856 	andseq	r2, lr, r6, asr r8
    295c:	001e2e00 	andseq	r2, lr, r0, lsl #28
    2960:	53000100 	movwpl	r0, #256	; 0x100
    2964:	00001e34 	andeq	r1, r0, r4, lsr lr
    2968:	00001e38 	andeq	r1, r0, r8, lsr lr
    296c:	38530001 	ldmdacc	r3, {r0}^
    2970:	4800001e 	stmdami	r0, {r1, r2, r3, r4}
    2974:	0100001e 	tsteq	r0, lr, lsl r0
    2978:	1e485e00 	cdpne	14, 4, cr5, cr8, cr0, {0}
    297c:	1e5e0000 	cdpne	0, 5, cr0, cr14, cr0, {0}
    2980:	00010000 	andeq	r0, r1, r0
    2984:	001e5e53 	andseq	r5, lr, r3, asr lr
    2988:	001e6600 	andseq	r6, lr, r0, lsl #12
    298c:	5e000100 	adfpls	f0, f0, f0
    2990:	00001e6c 	andeq	r1, r0, ip, ror #28
    2994:	00001e88 	andeq	r1, r0, r8, lsl #29
    2998:	88530001 	ldmdahi	r3, {r0}^
    299c:	8e00001e 	mcrhi	0, 0, r0, cr0, cr14, {0}
    29a0:	0100001e 	tsteq	r0, lr, lsl r0
    29a4:	1e8e5e00 	cdpne	14, 8, cr5, cr14, cr0, {0}
    29a8:	1e900000 	cdpne	0, 9, cr0, cr0, cr0, {0}
    29ac:	00010000 	andeq	r0, r1, r0
    29b0:	001e9c53 	andseq	r9, lr, r3, asr ip
    29b4:	001e9e00 	andseq	r9, lr, r0, lsl #28
    29b8:	5e000100 	adfpls	f0, f0, f0
    29bc:	00001e9e 	muleq	r0, lr, lr
    29c0:	00001eb2 			; <UNDEFINED> instruction: 0x00001eb2
    29c4:	b2530001 	subslt	r0, r3, #1
    29c8:	c200001e 	andgt	r0, r0, #30
    29cc:	0100001e 	tsteq	r0, lr, lsl r0
    29d0:	1ec25600 	cdpne	6, 12, cr5, cr2, cr0, {0}
    29d4:	1ed60000 	cdpne	0, 13, cr0, cr6, cr0, {0}
    29d8:	00010000 	andeq	r0, r1, r0
    29dc:	001ee453 	andseq	lr, lr, r3, asr r4
    29e0:	001ee600 	andseq	lr, lr, r0, lsl #12
    29e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    29e8:	00001ee6 	andeq	r1, r0, r6, ror #29
    29ec:	00001efe 	strdeq	r1, [r0], -lr
    29f0:	fe530001 	cdp2	0, 5, cr0, cr3, cr1, {0}
    29f4:	1800001e 	stmdane	r0, {r1, r2, r3, r4}
    29f8:	0100001f 	tsteq	r0, pc, lsl r0
    29fc:	1f1e5600 	svcne	0x001e5600
    2a00:	1f400000 	svcne	0x00400000
    2a04:	00010000 	andeq	r0, r1, r0
    2a08:	001f4053 	andseq	r4, pc, r3, asr r0	; <UNPREDICTABLE>
    2a0c:	001f5200 	andseq	r5, pc, r0, lsl #4
    2a10:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a14:	00001f78 	andeq	r1, r0, r8, ror pc
    2a18:	00001f7c 	andeq	r1, r0, ip, ror pc
    2a1c:	7c530001 	mrrcvc	0, 0, r0, r3, cr1
    2a20:	8c00001f 	stchi	0, cr0, [r0], {31}
    2a24:	0100001f 	tsteq	r0, pc, lsl r0
    2a28:	1f8c5800 	svcne	0x008c5800
    2a2c:	1f9c0000 	svcne	0x009c0000
    2a30:	00010000 	andeq	r0, r1, r0
    2a34:	001f9c53 	andseq	r9, pc, r3, asr ip	; <UNPREDICTABLE>
    2a38:	001fa600 	andseq	sl, pc, r0, lsl #12
    2a3c:	58000100 	stmdapl	r0, {r8}
    2a40:	00001fac 	andeq	r1, r0, ip, lsr #31
    2a44:	00001fce 	andeq	r1, r0, lr, asr #31
    2a48:	d4530001 	ldrble	r0, [r3], #-1
    2a4c:	e400001f 	str	r0, [r0], #-31	; 0xffffffe1
    2a50:	0100001f 	tsteq	r0, pc, lsl r0
    2a54:	1fe45300 	svcne	0x00e45300
    2a58:	1ffe0000 	svcne	0x00fe0000
    2a5c:	00010000 	andeq	r0, r1, r0
    2a60:	00200456 	eoreq	r0, r0, r6, asr r4
    2a64:	00202400 	eoreq	r2, r0, r0, lsl #8
    2a68:	53000100 	movwpl	r0, #256	; 0x100
    2a6c:	00002024 	andeq	r2, r0, r4, lsr #32
    2a70:	00002036 	andeq	r2, r0, r6, lsr r0
    2a74:	4a560001 	bmi	1582a80 <__ccfg+0x1562ad8>
    2a78:	4e000020 	cdpmi	0, 0, cr0, cr0, cr0, {1}
    2a7c:	01000020 	tsteq	r0, r0, lsr #32
    2a80:	204e5800 	subcs	r5, lr, r0, lsl #16
    2a84:	20520000 	subscs	r0, r2, r0
    2a88:	00010000 	andeq	r0, r1, r0
    2a8c:	00205c53 	eoreq	r5, r0, r3, asr ip
    2a90:	00205e00 	eoreq	r5, r0, r0, lsl #28
    2a94:	58000100 	stmdapl	r0, {r8}
    2a98:	0000205e 	andeq	r2, r0, lr, asr r0
    2a9c:	00002074 	andeq	r2, r0, r4, ror r0
    2aa0:	74530001 	ldrbvc	r0, [r3], #-1
    2aa4:	84000020 	strhi	r0, [r0], #-32	; 0xffffffe0
    2aa8:	01000020 	tsteq	r0, r0, lsr #32
    2aac:	20845600 	addcs	r5, r4, r0, lsl #12
    2ab0:	209a0000 	addscs	r0, sl, r0
    2ab4:	00010000 	andeq	r0, r1, r0
    2ab8:	0020a453 	eoreq	sl, r0, r3, asr r4
    2abc:	0020a600 	eoreq	sl, r0, r0, lsl #12
    2ac0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2ac4:	000020a6 	andeq	r2, r0, r6, lsr #1
    2ac8:	000020ae 	andeq	r2, r0, lr, lsr #1
    2acc:	b2530001 	subslt	r0, r3, #1
    2ad0:	c2000020 	andgt	r0, r0, #32
    2ad4:	01000020 	tsteq	r0, r0, lsr #32
    2ad8:	20c25300 	sbccs	r5, r2, r0, lsl #6
    2adc:	20d00000 	sbcscs	r0, r0, r0
    2ae0:	00010000 	andeq	r0, r1, r0
    2ae4:	0020d056 	eoreq	sp, r0, r6, asr r0
    2ae8:	0020d600 	eoreq	sp, r0, r0, lsl #12
    2aec:	58000100 	stmdapl	r0, {r8}
    2af0:	000020d6 	ldrdeq	r2, [r0], -r6
    2af4:	000020e2 	andeq	r2, r0, r2, ror #1
    2af8:	e2560001 	subs	r0, r6, #1
    2afc:	ea000020 	b	2b84 <NOROM_ChipInfo_GetChipFamily+0x48>
    2b00:	01000020 	tsteq	r0, r0, lsr #32
    2b04:	20ea5000 	rsccs	r5, sl, r0
    2b08:	20fc0000 	rscscs	r0, ip, r0
    2b0c:	00010000 	andeq	r0, r1, r0
    2b10:	00000053 	andeq	r0, r0, r3, asr r0
    2b14:	00000000 	andeq	r0, r0, r0
    2b18:	001d6c00 	andseq	r6, sp, r0, lsl #24
    2b1c:	001d8a00 	andseq	r8, sp, r0, lsl #20
    2b20:	51000100 	mrspl	r0, (UNDEF: 16)
    2b24:	00001d8a 	andeq	r1, r0, sl, lsl #27
    2b28:	00001d90 	muleq	r0, r0, sp
    2b2c:	90560001 	subsls	r0, r6, r1
    2b30:	ae00001d 	mcrge	0, 0, r0, cr0, cr13, {0}
    2b34:	0100001d 	tsteq	r0, sp, lsl r0
    2b38:	1db45100 	ldfnes	f5, [r4]
    2b3c:	20fc0000 	rscscs	r0, ip, r0
    2b40:	00010000 	andeq	r0, r1, r0
    2b44:	00000051 	andeq	r0, r0, r1, asr r0
    2b48:	00000000 	andeq	r0, r0, r0
    2b4c:	001d6c00 	andseq	r6, sp, r0, lsl #24
    2b50:	001d6c00 	andseq	r6, sp, r0, lsl #24
    2b54:	52000100 	andpl	r0, r0, #0, 2
    2b58:	00001d6c 	andeq	r1, r0, ip, ror #26
    2b5c:	00001d88 	andeq	r1, r0, r8, lsl #27
    2b60:	93520003 	cmpls	r2, #3
    2b64:	001e2e04 	andseq	r2, lr, r4, lsl #28
    2b68:	001e6200 	andseq	r6, lr, r0, lsl #4
    2b6c:	52000100 	andpl	r0, r0, #0, 2
    2b70:	00001e88 	andeq	r1, r0, r8, lsl #29
    2b74:	00001e8e 	andeq	r1, r0, lr, lsl #29
    2b78:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
    2b7c:	b800001e 	stmdalt	r0, {r1, r2, r3, r4}
    2b80:	0100001e 	tsteq	r0, lr, lsl r0
    2b84:	1ee65200 	cdpne	2, 14, cr5, cr6, cr0, {0}
    2b88:	1f0e0000 	svcne	0x000e0000
    2b8c:	00010000 	andeq	r0, r1, r0
    2b90:	001f6052 	andseq	r6, pc, r2, asr r0	; <UNPREDICTABLE>
    2b94:	001fa000 	andseq	sl, pc, r0
    2b98:	52000100 	andpl	r0, r0, #0, 2
    2b9c:	00001fce 	andeq	r1, r0, lr, asr #31
    2ba0:	00001ff4 	strdeq	r1, [r0], -r4
    2ba4:	44520001 	ldrbmi	r0, [r2], #-1
    2ba8:	4e000020 	cdpmi	0, 0, cr0, cr0, cr0, {1}
    2bac:	01000020 	tsteq	r0, r0, lsr #32
    2bb0:	205e5200 	subscs	r5, lr, r0, lsl #4
    2bb4:	207a0000 	rsbscs	r0, sl, r0
    2bb8:	00010000 	andeq	r0, r1, r0
    2bbc:	0020a652 	eoreq	sl, r0, r2, asr r6
    2bc0:	0020bc00 	eoreq	fp, r0, r0, lsl #24
    2bc4:	52000100 	andpl	r0, r0, #0, 2
    2bc8:	000020c2 	andeq	r2, r0, r2, asr #1
    2bcc:	000020d0 	ldrdeq	r2, [r0], -r0
    2bd0:	e2520001 	subs	r0, r2, #1
    2bd4:	ea000020 	b	2c5c <NOROM_OSCClockSourceSet+0x20>
    2bd8:	01000020 	tsteq	r0, r0, lsr #32
    2bdc:	00005200 	andeq	r5, r0, r0, lsl #4
    2be0:	00000000 	andeq	r0, r0, r0
    2be4:	1dea0000 	stclne	0, cr0, [sl]
    2be8:	1dec0000 	stclne	0, cr0, [ip]
    2bec:	00010000 	andeq	r0, r1, r0
    2bf0:	001e6454 	andseq	r6, lr, r4, asr r4
    2bf4:	001e8800 	andseq	r8, lr, r0, lsl #16
    2bf8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bfc:	00001e8e 	andeq	r1, r0, lr, lsl #29
    2c00:	00001e9e 	muleq	r0, lr, lr
    2c04:	ba540001 	blt	1502c10 <__ccfg+0x14e2c68>
    2c08:	e600001e 			; <UNDEFINED> instruction: 0xe600001e
    2c0c:	0100001e 	tsteq	r0, lr, lsl r0
    2c10:	1f105400 	svcne	0x00105400
    2c14:	1f600000 	svcne	0x00600000
    2c18:	00010000 	andeq	r0, r1, r0
    2c1c:	001fa254 	andseq	sl, pc, r4, asr r2	; <UNPREDICTABLE>
    2c20:	001fce00 	andseq	ip, pc, r0, lsl #28
    2c24:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c28:	00001ff6 	strdeq	r1, [r0], -r6
    2c2c:	00002044 	andeq	r2, r0, r4, asr #32
    2c30:	4e540001 	cdpmi	0, 5, cr0, cr4, cr1, {0}
    2c34:	5e000020 	cdppl	0, 0, cr0, cr0, cr0, {1}
    2c38:	01000020 	tsteq	r0, r0, lsr #32
    2c3c:	207c5400 	rsbscs	r5, ip, r0, lsl #8
    2c40:	20a60000 	adccs	r0, r6, r0
    2c44:	00010000 	andeq	r0, r1, r0
    2c48:	0020be54 	eoreq	fp, r0, r4, asr lr
    2c4c:	0020c200 	eoreq	ip, r0, r0, lsl #4
    2c50:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c54:	000020ea 	andeq	r2, r0, sl, ror #1
    2c58:	000020fc 	strdeq	r2, [r0], -ip
    2c5c:	00540001 	subseq	r0, r4, r1
    2c60:	00000000 	andeq	r0, r0, r0
    2c64:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    2c68:	8800001e 	stmdahi	r0, {r1, r2, r3, r4}
    2c6c:	0100001e 	tsteq	r0, lr, lsl r0
    2c70:	1e8e5800 	cdpne	8, 8, cr5, cr14, cr0, {0}
    2c74:	1e9e0000 	cdpne	0, 9, cr0, cr14, cr0, {0}
    2c78:	00010000 	andeq	r0, r1, r0
    2c7c:	00000058 	andeq	r0, r0, r8, asr r0
    2c80:	00000000 	andeq	r0, r0, r0
    2c84:	001f4000 	andseq	r4, pc, r0
    2c88:	001f5200 	andseq	r5, pc, r0, lsl #4
    2c8c:	59000100 	stmdbpl	r0, {r8}
    2c90:	00001f52 	andeq	r1, r0, r2, asr pc
    2c94:	00001f5a 	andeq	r1, r0, sl, asr pc
    2c98:	00500001 	subseq	r0, r0, r1
    2c9c:	00000000 	andeq	r0, r0, r0
    2ca0:	9c000000 	stcls	0, cr0, [r0], {-0}
    2ca4:	c600001f 			; <UNDEFINED> instruction: 0xc600001f
    2ca8:	0100001f 	tsteq	r0, pc, lsl r0
    2cac:	204e5000 	subcs	r5, lr, r0
    2cb0:	205e0000 	subscs	r0, lr, r0
    2cb4:	00010000 	andeq	r0, r1, r0
    2cb8:	00000050 	andeq	r0, r0, r0, asr r0
    2cbc:	00000000 	andeq	r0, r0, r0
    2cc0:	00202400 	eoreq	r2, r0, r0, lsl #8
    2cc4:	00203600 	eoreq	r3, r0, r0, lsl #12
    2cc8:	59000100 	stmdbpl	r0, {r8}
    2ccc:	00002036 	andeq	r2, r0, r6, lsr r0
    2cd0:	0000203e 	andeq	r2, r0, lr, lsr r0
    2cd4:	00500001 	subseq	r0, r0, r1
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	b2000000 	andlt	r0, r0, #0
    2ce0:	c2000020 	andgt	r0, r0, #32
    2ce4:	01000020 	tsteq	r0, r0, lsr #32
    2ce8:	00005000 	andeq	r5, r0, r0
    2cec:	00000000 	andeq	r0, r0, r0
    2cf0:	1dee0000 	stclne	0, cr0, [lr]
    2cf4:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2cf8:	00010000 	andeq	r0, r1, r0
    2cfc:	0020d45e 	eoreq	sp, r0, lr, asr r4
    2d00:	0020d600 	eoreq	sp, r0, r0, lsl #12
    2d04:	5e000100 	adfpls	f0, f0, f0
	...
    2d10:	00002100 	andeq	r2, r0, r0, lsl #2
    2d14:	00002112 	andeq	r2, r0, r2, lsl r1
    2d18:	00700007 	rsbseq	r0, r0, r7
    2d1c:	263f243f 			; <UNDEFINED> instruction: 0x263f243f
    2d20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d24:	00000000 	andeq	r0, r0, r0
    2d28:	00210800 	eoreq	r0, r1, r0, lsl #16
    2d2c:	00211000 	eoreq	r1, r1, r0
    2d30:	72000d00 	andvc	r0, r0, #0, 26
    2d34:	00717a80 	rsbseq	r7, r1, r0, lsl #21
    2d38:	26482448 	strbcs	r2, [r8], -r8, asr #8
    2d3c:	9f26341e 	svcls	0x0026341e
    2d40:	00002110 	andeq	r2, r0, r0, lsl r1
    2d44:	0000212c 	andeq	r2, r0, ip, lsr #2
    2d48:	0071000c 	rsbseq	r0, r1, ip
    2d4c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    2d50:	341e0072 	ldrcc	r0, [lr], #-114	; 0xffffff8e
    2d54:	00009f26 	andeq	r9, r0, r6, lsr #30
	...
    2d64:	00010000 	andeq	r0, r1, r0
    2d68:	00000053 	andeq	r0, r0, r3, asr r0
	...
    2d78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2d84:	00002154 	andeq	r2, r0, r4, asr r1
    2d88:	00002192 	muleq	r0, r2, r1
    2d8c:	92500001 	subsls	r0, r0, #1
    2d90:	f4000021 	vst4.8	{d0-d3}, [r0 :128], r1
    2d94:	01000021 	tsteq	r0, r1, lsr #32
    2d98:	21f45500 	mvnscs	r5, r0, lsl #10
    2d9c:	22280000 	eorcs	r0, r8, #0
    2da0:	00040000 	andeq	r0, r4, r0
    2da4:	9f5001f3 	svcls	0x005001f3
	...
    2db0:	00002190 	muleq	r0, r0, r1
    2db4:	000021f4 	strdeq	r2, [r0], -r4
    2db8:	00540001 	subseq	r0, r4, r1
    2dbc:	00000000 	andeq	r0, r0, r0
    2dc0:	a6000000 	strge	r0, [r0], -r0
    2dc4:	a8000021 	stmdage	r0, {r0, r5}
    2dc8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    2dcc:	0a007300 	beq	1f9d4 <__exidx_end+0x1cacc>
    2dd0:	9f1affff 	svcls	0x001affff
	...
    2ddc:	000021b6 			; <UNDEFINED> instruction: 0x000021b6
    2de0:	000021d0 	ldrdeq	r2, [r0], -r0
    2de4:	00530001 	subseq	r0, r3, r1
    2de8:	00000000 	andeq	r0, r0, r0
    2dec:	ba000000 	blt	2df4 <NOROM_OSCClockSourceGet+0x15c>
    2df0:	c6000021 	strgt	r0, [r0], -r1, lsr #32
    2df4:	01000021 	tsteq	r0, r1, lsr #32
    2df8:	21c65200 	biccs	r5, r6, r0, lsl #4
    2dfc:	21ca0000 	biccs	r0, sl, r0
    2e00:	00030000 	andeq	r0, r3, r0
    2e04:	ca9f0671 	bgt	fe7c47d0 <_estack+0xde7bf7d0>
    2e08:	d2000021 	andle	r0, r0, #33	; 0x21
    2e0c:	01000021 	tsteq	r0, r1, lsr #32
    2e10:	00005200 	andeq	r5, r0, r0, lsl #4
    2e14:	00000000 	andeq	r0, r0, r0
    2e18:	222e0000 	eorcs	r0, lr, #0
    2e1c:	22a80000 	adccs	r0, r8, #0
    2e20:	00010000 	andeq	r0, r1, r0
    2e24:	00000054 	andeq	r0, r0, r4, asr r0
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	00229400 	eoreq	r9, r2, r0, lsl #8
    2e30:	00229e00 	eoreq	r9, r2, r0, lsl #28
    2e34:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e40:	000022cc 	andeq	r2, r0, ip, asr #5
    2e44:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2e48:	f2500001 	vhadd.s16	d16, d0, d1
    2e4c:	48000022 	stmdami	r0, {r1, r5}
    2e50:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    2e54:	5001f300 	andpl	pc, r1, r0, lsl #6
    2e58:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2e5c:	00000000 	andeq	r0, r0, r0
    2e60:	0022f400 	eoreq	pc, r2, r0, lsl #8
    2e64:	00232800 	eoreq	r2, r3, r0, lsl #16
    2e68:	53000100 	movwpl	r0, #256	; 0x100
	...
    2e74:	000022f8 	strdeq	r2, [r0], -r8
    2e78:	00002306 	andeq	r2, r0, r6, lsl #6
    2e7c:	06510001 	ldrbeq	r0, [r1], -r1
    2e80:	08000023 	stmdaeq	r0, {r0, r1, r5}
    2e84:	06000023 	streq	r0, [r0], -r3, lsr #32
    2e88:	73007200 	movwvc	r7, #512	; 0x200
    2e8c:	089f1c00 	ldmeq	pc, {sl, fp, ip}	; <UNPREDICTABLE>
    2e90:	0e000023 	cdpeq	0, 0, cr0, cr0, cr3, {1}
    2e94:	01000023 	tsteq	r0, r3, lsr #32
    2e98:	00005100 	andeq	r5, r0, r0, lsl #2
    2e9c:	00000000 	andeq	r0, r0, r0
    2ea0:	22e40000 	rsccs	r0, r4, #0
    2ea4:	22f60000 	rscscs	r0, r6, #0
    2ea8:	00010000 	andeq	r0, r1, r0
    2eac:	00000053 	andeq	r0, r0, r3, asr r0
    2eb0:	00000000 	andeq	r0, r0, r0
    2eb4:	00234800 	eoreq	r4, r3, r0, lsl #16
    2eb8:	00236b00 	eoreq	r6, r3, r0, lsl #22
    2ebc:	50000100 	andpl	r0, r0, r0, lsl #2
    2ec0:	0000236b 	andeq	r2, r0, fp, ror #6
    2ec4:	00002376 	andeq	r2, r0, r6, ror r3
    2ec8:	76540001 	ldrbvc	r0, [r4], -r1
    2ecc:	7e000023 	cdpvc	0, 0, cr0, cr0, cr3, {1}
    2ed0:	01000023 	tsteq	r0, r3, lsr #32
    2ed4:	237e5000 	cmncs	lr, #0
    2ed8:	23ca0000 	biccs	r0, sl, #0
    2edc:	00010000 	andeq	r0, r1, r0
    2ee0:	00000054 	andeq	r0, r0, r4, asr r0
    2ee4:	00000000 	andeq	r0, r0, r0
    2ee8:	00238400 	eoreq	r8, r3, r0, lsl #8
    2eec:	00238800 	eoreq	r8, r3, r0, lsl #16
    2ef0:	53000100 	movwpl	r0, #256	; 0x100
    2ef4:	0000238a 	andeq	r2, r0, sl, lsl #7
    2ef8:	00002398 	muleq	r0, r8, r3
    2efc:	9a530001 	bls	14c2f08 <__ccfg+0x14a2f60>
    2f00:	a2000023 	andge	r0, r0, #35	; 0x23
    2f04:	01000023 	tsteq	r0, r3, lsr #32
    2f08:	00005300 	andeq	r5, r0, r0, lsl #6
    2f0c:	00000000 	andeq	r0, r0, r0
    2f10:	23840000 	orrcs	r0, r4, #0
    2f14:	23b80000 			; <UNDEFINED> instruction: 0x23b80000
    2f18:	00050000 	andeq	r0, r5, r0
    2f1c:	264c0074 			; <UNDEFINED> instruction: 0x264c0074
    2f20:	0023b89f 	mlaeq	r3, pc, r8, fp	; <UNPREDICTABLE>
    2f24:	0023f400 	eoreq	pc, r3, r0, lsl #8
    2f28:	f3000600 	vmax.u8	d0, d0, d0
    2f2c:	264c5001 	strbcs	r5, [ip], -r1
    2f30:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	00237e00 	eoreq	r7, r3, r0, lsl #28
    2f3c:	00238800 	eoreq	r8, r3, r0, lsl #16
    2f40:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f4c:	000023f4 	strdeq	r2, [r0], -r4
    2f50:	00002408 	andeq	r2, r0, r8, lsl #8
    2f54:	08500001 	ldmdaeq	r0, {r0}^
    2f58:	50000024 	andpl	r0, r0, r4, lsr #32
    2f5c:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    2f60:	5001f300 	andpl	pc, r1, r0, lsl #6
    2f64:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2f68:	00000000 	andeq	r0, r0, r0
    2f6c:	0023fa00 	eoreq	pc, r3, r0, lsl #20
    2f70:	00240200 	eoreq	r0, r4, r0, lsl #4
    2f74:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f80:	000023fe 	strdeq	r2, [r0], -lr
    2f84:	00002410 	andeq	r2, r0, r0, lsl r4
    2f88:	10520001 	subsne	r0, r2, r1
    2f8c:	12000024 	andne	r0, r0, #36	; 0x24
    2f90:	05000024 	streq	r0, [r0, #-36]	; 0xffffffdc
    2f94:	31007200 	mrscc	r7, R8_usr
    2f98:	24129f25 	ldrcs	r9, [r2], #-3877	; 0xfffff0db
    2f9c:	24180000 	ldrcs	r0, [r8], #-0
    2fa0:	00010000 	andeq	r0, r1, r0
    2fa4:	00241c52 	eoreq	r1, r4, r2, asr ip
    2fa8:	00242e00 	eoreq	r2, r4, r0, lsl #28
    2fac:	52000100 	andpl	r0, r0, #0, 2
    2fb0:	00002432 	andeq	r2, r0, r2, lsr r4
    2fb4:	0000243c 	andeq	r2, r0, ip, lsr r4
    2fb8:	3e520001 	cdpcc	0, 5, cr0, cr2, cr1, {0}
    2fbc:	50000024 	andpl	r0, r0, r4, lsr #32
    2fc0:	01000024 	tsteq	r0, r4, lsr #32
    2fc4:	00005200 	andeq	r5, r0, r0, lsl #4
    2fc8:	00000000 	andeq	r0, r0, r0
    2fcc:	24020000 	strcs	r0, [r2], #-0
    2fd0:	240c0000 	strcs	r0, [ip], #-0
    2fd4:	00010000 	andeq	r0, r1, r0
    2fd8:	00240c53 	eoreq	r0, r4, r3, asr ip
    2fdc:	00240e00 	eoreq	r0, r4, r0, lsl #28
    2fe0:	73000500 	movwvc	r0, #1280	; 0x500
    2fe4:	9f253100 	svcls	0x00253100
    2fe8:	0000240e 	andeq	r2, r0, lr, lsl #8
    2fec:	00002410 	andeq	r2, r0, r0, lsl r4
    2ff0:	10530001 	subsne	r0, r3, r1
    2ff4:	1c000024 	stcne	0, cr0, [r0], {36}	; 0x24
    2ff8:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    2ffc:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    3000:	00241c9f 	mlaeq	r4, pc, ip, r1	; <UNPREDICTABLE>
    3004:	00242200 	eoreq	r2, r4, r0, lsl #4
    3008:	53000100 	movwpl	r0, #256	; 0x100
    300c:	00002426 	andeq	r2, r0, r6, lsr #8
    3010:	0000242c 	andeq	r2, r0, ip, lsr #8
    3014:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    3018:	3e000024 	cdpcc	0, 0, cr0, cr0, cr4, {1}
    301c:	02000024 	andeq	r0, r0, #36	; 0x24
    3020:	3e9f3100 	fmlcce	f3, f7, f0
    3024:	50000024 	andpl	r0, r0, r4, lsr #32
    3028:	01000024 	tsteq	r0, r4, lsr #32
    302c:	00005300 	andeq	r5, r0, r0, lsl #6
    3030:	00000000 	andeq	r0, r0, r0
    3034:	24020000 	strcs	r0, [r2], #-0
    3038:	24080000 	strcs	r0, [r8], #-0
    303c:	00020000 	andeq	r0, r2, r0
    3040:	24089f30 	strcs	r9, [r8], #-3888	; 0xfffff0d0
    3044:	24440000 	strbcs	r0, [r4], #-0
    3048:	00010000 	andeq	r0, r1, r0
    304c:	00000050 	andeq	r0, r0, r0, asr r0
    3050:	00000000 	andeq	r0, r0, r0
    3054:	00244400 	eoreq	r4, r4, r0, lsl #8
    3058:	00244800 	eoreq	r4, r4, r0, lsl #16
    305c:	72000800 	andvc	r0, r0, #0, 16
    3060:	73244000 			; <UNDEFINED> instruction: 0x73244000
    3064:	489f2100 	ldmmi	pc, {r8, sp}	; <UNPREDICTABLE>
    3068:	50000024 	andpl	r0, r0, r4, lsr #32
    306c:	01000024 	tsteq	r0, r4, lsr #32
    3070:	00005000 	andeq	r5, r0, r0
    3074:	00000000 	andeq	r0, r0, r0
    3078:	245a0000 	ldrbcs	r0, [sl], #-0
    307c:	245e0000 	ldrbcs	r0, [lr], #-0
    3080:	000a0000 	andeq	r0, sl, r0
    3084:	1a330070 	bne	cc324c <__ccfg+0xca32a4>
    3088:	00732438 	rsbseq	r2, r3, r8, lsr r4
    308c:	24629f21 	strbtcs	r9, [r2], #-3873	; 0xfffff0df
    3090:	24680000 	strbtcs	r0, [r8], #-0
    3094:	00010000 	andeq	r0, r1, r0
    3098:	00000050 	andeq	r0, r0, r0, asr r0
	...
    30a8:	70000700 	andvc	r0, r0, r0, lsl #14
    30ac:	3fff0a00 	svccc	0x00ff0a00
    30b0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    30b4:	00000000 	andeq	r0, r0, r0
    30b8:	246c0000 	strbtcs	r0, [ip], #-0
    30bc:	24700000 	ldrbtcs	r0, [r0], #-0
    30c0:	000f0000 	andeq	r0, pc, r0
    30c4:	fc080070 	stc2	0, cr0, [r8], {112}	; 0x70
    30c8:	1100701a 	tstne	r0, sl, lsl r0
    30cc:	67f3f880 	ldrbvs	pc, [r3, r0, lsl #17]!	; <UNPREDICTABLE>
    30d0:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    30d4:	00000000 	andeq	r0, r0, r0
    30d8:	6c000000 	stcvs	0, cr0, [r0], {-0}
    30dc:	70000024 	andvc	r0, r0, r4, lsr #32
    30e0:	01000024 	tsteq	r0, r4, lsr #32
    30e4:	00005000 	andeq	r5, r0, r0
    30e8:	00000000 	andeq	r0, r0, r0
    30ec:	247c0000 	ldrbtcs	r0, [ip], #-0
    30f0:	24800000 	strcs	r0, [r0], #0
    30f4:	000f0000 	andeq	r0, pc, r0
    30f8:	3f080070 	svccc	0x00080070
    30fc:	0c00701a 	stceq	0, cr7, [r0], {26}
    3100:	00fcffc0 	rscseq	pc, ip, r0, asr #31
    3104:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    3108:	00000000 	andeq	r0, r0, r0
    310c:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3110:	80000024 	andhi	r0, r0, r4, lsr #32
    3114:	01000024 	tsteq	r0, r4, lsr #32
    3118:	00005000 	andeq	r5, r0, r0
    311c:	00000000 	andeq	r0, r0, r0
    3120:	248c0000 	strcs	r0, [ip], #0
    3124:	24e20000 	strbtcs	r0, [r2], #0
    3128:	00010000 	andeq	r0, r1, r0
    312c:	0024e250 	eoreq	lr, r4, r0, asr r2
    3130:	0024f000 	eoreq	pc, r4, r0
    3134:	f3000400 	vshl.u8	d0, d0, d0
    3138:	009f5001 	addseq	r5, pc, r1
    313c:	00000000 	andeq	r0, r0, r0
    3140:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3144:	d4000024 	strle	r0, [r0], #-36	; 0xffffffdc
    3148:	17000024 	strne	r0, [r0, -r4, lsr #32]
    314c:	0a007400 	beq	20154 <__ccfg+0x1ac>
    3150:	741aff00 	ldrvc	pc, [sl], #-3840	; 0xfffff100
    3154:	1af00800 	bne	ffc0515c <_estack+0xdfc0015c>
    3158:	44007221 	strmi	r7, [r0], #-545	; 0xfffffddf
    315c:	00732124 	rsbseq	r2, r3, r4, lsr #2
    3160:	9f212440 	svcls	0x00212440
    3164:	000024d8 	ldrdeq	r2, [r0], -r8
    3168:	000024f0 	strdeq	r2, [r0], -r0
    316c:	00530001 	subseq	r0, r3, r1
    3170:	00000000 	andeq	r0, r0, r0
    3174:	94000000 	strls	r0, [r0], #-0
    3178:	de000024 	cdple	0, 0, cr0, cr0, cr4, {1}
    317c:	01000024 	tsteq	r0, r4, lsr #32
    3180:	00005400 	andeq	r5, r0, r0, lsl #8
    3184:	00000000 	andeq	r0, r0, r0
    3188:	249a0000 	ldrcs	r0, [sl], #0
    318c:	24ae0000 	strtcs	r0, [lr], #0
    3190:	00010000 	andeq	r0, r1, r0
    3194:	0024ae52 	eoreq	sl, r4, r2, asr lr
    3198:	0024ba00 	eoreq	fp, r4, r0, lsl #20
    319c:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    31a0:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    31a4:	0024cc9f 	mlaeq	r4, pc, ip, ip	; <UNPREDICTABLE>
    31a8:	0024d400 	eoreq	sp, r4, r0, lsl #8
    31ac:	52000100 	andpl	r0, r0, #0, 2
	...
    31b8:	000024a2 	andeq	r2, r0, r2, lsr #9
    31bc:	000024c0 	andeq	r2, r0, r0, asr #9
    31c0:	c0530001 	subsgt	r0, r3, r1
    31c4:	cc000024 	stcgt	0, cr0, [r0], {36}	; 0x24
    31c8:	06000024 	streq	r0, [r0], -r4, lsr #32
    31cc:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    31d0:	cc9f24f0 	cfldrsgt	mvf2, [pc], {240}	; 0xf0
    31d4:	d8000024 	stmdale	r0, {r2, r5}
    31d8:	01000024 	tsteq	r0, r4, lsr #32
    31dc:	00005300 	andeq	r5, r0, r0, lsl #6
    31e0:	00000000 	andeq	r0, r0, r0
    31e4:	24ac0000 	strtcs	r0, [ip], #0
    31e8:	24ae0000 	strtcs	r0, [lr], #0
    31ec:	00060000 	andeq	r0, r6, r0
    31f0:	00720076 	rsbseq	r0, r2, r6, ror r0
    31f4:	24ae9f22 	strtcs	r9, [lr], #3874	; 0xf22
    31f8:	24b60000 	ldrtcs	r0, [r6], #0
    31fc:	00010000 	andeq	r0, r1, r0
    3200:	0024b652 	eoreq	fp, r4, r2, asr r6
    3204:	0024b800 	eoreq	fp, r4, r0, lsl #16
    3208:	74000900 	strvc	r0, [r0], #-2304	; 0xfffff700
    320c:	24ec0900 	strbtcs	r0, [ip], #2304	; 0x900
    3210:	9f220076 	svcls	0x00220076
    3214:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    3218:	000024ba 			; <UNDEFINED> instruction: 0x000024ba
    321c:	be550001 	cdplt	0, 5, cr0, cr5, cr1, {0}
    3220:	c0000024 	andgt	r0, r0, r4, lsr #32
    3224:	06000024 	streq	r0, [r0], -r4, lsr #32
    3228:	73007100 	movwvc	r7, #256	; 0x100
    322c:	c09f2200 	addsgt	r2, pc, r0, lsl #4
    3230:	c8000024 	stmdagt	r0, {r2, r5}
    3234:	01000024 	tsteq	r0, r4, lsr #32
    3238:	24c85300 	strbcs	r5, [r8], #768	; 0x300
    323c:	24ca0000 	strbcs	r0, [sl], #0
    3240:	00090000 	andeq	r0, r9, r0
    3244:	f0090074 			; <UNDEFINED> instruction: 0xf0090074
    3248:	22007124 	andcs	r7, r0, #36, 2
    324c:	0024ca9f 	mlaeq	r4, pc, sl, ip	; <UNPREDICTABLE>
    3250:	0024cc00 	eoreq	ip, r4, r0, lsl #24
    3254:	30000200 	andcc	r0, r0, r0, lsl #4
    3258:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    325c:	00000000 	andeq	r0, r0, r0
    3260:	0024f000 	eoreq	pc, r4, r0
    3264:	0024f800 	eoreq	pc, r4, r0, lsl #16
    3268:	50000100 	andpl	r0, r0, r0, lsl #2
    326c:	000024f8 	strdeq	r2, [r0], -r8
    3270:	00002504 	andeq	r2, r0, r4, lsl #10
    3274:	01f30004 	mvnseq	r0, r4
    3278:	00009f50 	andeq	r9, r0, r0, asr pc
    327c:	00000000 	andeq	r0, r0, r0
    3280:	24f00000 	ldrbtcs	r0, [r0], #0
    3284:	24fe0000 	ldrbtcs	r0, [lr], #0
    3288:	00020000 	andeq	r0, r2, r0
    328c:	24fe9f30 	ldrbtcs	r9, [lr], #3888	; 0xf30
    3290:	25040000 	strcs	r0, [r4, #-0]
    3294:	00010000 	andeq	r0, r1, r0
    3298:	00000050 	andeq	r0, r0, r0, asr r0
    329c:	00000000 	andeq	r0, r0, r0
    32a0:	0024f200 	eoreq	pc, r4, r0, lsl #4
    32a4:	0024f800 	eoreq	pc, r4, r0, lsl #16
    32a8:	50000100 	andpl	r0, r0, r0, lsl #2
    32ac:	000024f8 	strdeq	r2, [r0], -r8
    32b0:	00002504 	andeq	r2, r0, r4, lsl #10
    32b4:	01f30004 	mvnseq	r0, r4
    32b8:	00009f50 	andeq	r9, r0, r0, asr pc
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	24fc0000 	ldrbtcs	r0, [ip], #0
    32c4:	24fe0000 	ldrbtcs	r0, [lr], #0
    32c8:	00010000 	andeq	r0, r1, r0
    32cc:	00000050 	andeq	r0, r0, r0, asr r0
    32d0:	00000000 	andeq	r0, r0, r0
    32d4:	00250400 	eoreq	r0, r5, r0, lsl #8
    32d8:	00250c00 	eoreq	r0, r5, r0, lsl #24
    32dc:	50000100 	andpl	r0, r0, r0, lsl #2
    32e0:	0000250c 	andeq	r2, r0, ip, lsl #10
    32e4:	00002518 	andeq	r2, r0, r8, lsl r5
    32e8:	01f30004 	mvnseq	r0, r4
    32ec:	00009f50 	andeq	r9, r0, r0, asr pc
    32f0:	00000000 	andeq	r0, r0, r0
    32f4:	25040000 	strcs	r0, [r4, #-0]
    32f8:	25120000 	ldrcs	r0, [r2, #-0]
    32fc:	00020000 	andeq	r0, r2, r0
    3300:	25129f31 	ldrcs	r9, [r2, #-3889]	; 0xfffff0cf
    3304:	25180000 	ldrcs	r0, [r8, #-0]
    3308:	00010000 	andeq	r0, r1, r0
    330c:	00000050 	andeq	r0, r0, r0, asr r0
    3310:	00000000 	andeq	r0, r0, r0
    3314:	00250600 	eoreq	r0, r5, r0, lsl #12
    3318:	00250c00 	eoreq	r0, r5, r0, lsl #24
    331c:	50000100 	andpl	r0, r0, r0, lsl #2
    3320:	0000250c 	andeq	r2, r0, ip, lsl #10
    3324:	00002518 	andeq	r2, r0, r8, lsl r5
    3328:	01f30004 	mvnseq	r0, r4
    332c:	00009f50 	andeq	r9, r0, r0, asr pc
    3330:	00000000 	andeq	r0, r0, r0
    3334:	25100000 	ldrcs	r0, [r0, #-0]
    3338:	25120000 	ldrcs	r0, [r2, #-0]
    333c:	00010000 	andeq	r0, r1, r0
    3340:	00000050 	andeq	r0, r0, r0, asr r0
    3344:	00000000 	andeq	r0, r0, r0
    3348:	00251800 	eoreq	r1, r5, r0, lsl #16
    334c:	00252000 	eoreq	r2, r5, r0
    3350:	50000100 	andpl	r0, r0, r0, lsl #2
    3354:	00002520 	andeq	r2, r0, r0, lsr #10
    3358:	0000252c 	andeq	r2, r0, ip, lsr #10
    335c:	01f30004 	mvnseq	r0, r4
    3360:	00009f50 	andeq	r9, r0, r0, asr pc
    3364:	00000000 	andeq	r0, r0, r0
    3368:	25180000 	ldrcs	r0, [r8, #-0]
    336c:	25260000 	strcs	r0, [r6, #-0]!
    3370:	00020000 	andeq	r0, r2, r0
    3374:	25269f31 	strcs	r9, [r6, #-3889]!	; 0xfffff0cf
    3378:	252c0000 	strcs	r0, [ip, #-0]!
    337c:	00010000 	andeq	r0, r1, r0
    3380:	00000050 	andeq	r0, r0, r0, asr r0
    3384:	00000000 	andeq	r0, r0, r0
    3388:	00251a00 	eoreq	r1, r5, r0, lsl #20
    338c:	00252000 	eoreq	r2, r5, r0
    3390:	50000100 	andpl	r0, r0, r0, lsl #2
    3394:	00002520 	andeq	r2, r0, r0, lsr #10
    3398:	0000252c 	andeq	r2, r0, ip, lsr #10
    339c:	01f30004 	mvnseq	r0, r4
    33a0:	00009f50 	andeq	r9, r0, r0, asr pc
    33a4:	00000000 	andeq	r0, r0, r0
    33a8:	25240000 	strcs	r0, [r4, #-0]!
    33ac:	25260000 	strcs	r0, [r6, #-0]!
    33b0:	00010000 	andeq	r0, r1, r0
    33b4:	00000050 	andeq	r0, r0, r0, asr r0
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	00252c00 	eoreq	r2, r5, r0, lsl #24
    33c0:	00253800 	eoreq	r3, r5, r0, lsl #16
    33c4:	50000100 	andpl	r0, r0, r0, lsl #2
    33c8:	00002538 	andeq	r2, r0, r8, lsr r5
    33cc:	00002554 	andeq	r2, r0, r4, asr r5
    33d0:	01f30004 	mvnseq	r0, r4
    33d4:	00009f50 	andeq	r9, r0, r0, asr pc
    33d8:	00000000 	andeq	r0, r0, r0
    33dc:	252c0000 	strcs	r0, [ip, #-0]!
    33e0:	254e0000 	strbcs	r0, [lr, #-0]
    33e4:	00020000 	andeq	r0, r2, r0
    33e8:	254e9f30 	strbcs	r9, [lr, #-3888]	; 0xfffff0d0
    33ec:	25540000 	ldrbcs	r0, [r4, #-0]
    33f0:	00010000 	andeq	r0, r1, r0
    33f4:	00000050 	andeq	r0, r0, r0, asr r0
    33f8:	00000000 	andeq	r0, r0, r0
    33fc:	00252e00 	eoreq	r2, r5, r0, lsl #28
    3400:	00253800 	eoreq	r3, r5, r0, lsl #16
    3404:	50000100 	andpl	r0, r0, r0, lsl #2
    3408:	00002538 	andeq	r2, r0, r8, lsr r5
    340c:	00002554 	andeq	r2, r0, r4, asr r5
    3410:	01f30004 	mvnseq	r0, r4
    3414:	00009f50 	andeq	r9, r0, r0, asr pc
    3418:	00000000 	andeq	r0, r0, r0
    341c:	25400000 	strbcs	r0, [r0, #-0]
    3420:	25480000 	strbcs	r0, [r8, #-0]
    3424:	00100000 	andseq	r0, r0, r0
    3428:	464c0073 			; <UNDEFINED> instruction: 0x464c0073
    342c:	25481a24 	strbcs	r1, [r8, #-2596]	; 0xfffff5dc
    3430:	00722432 	rsbseq	r2, r2, r2, lsr r4
    3434:	9f212438 	svcls	0x00212438
    3438:	0000254a 	andeq	r2, r0, sl, asr #10
    343c:	0000254e 	andeq	r2, r0, lr, asr #10
    3440:	00500001 	subseq	r0, r0, r1
    3444:	00000000 	andeq	r0, r0, r0
    3448:	34000000 	strcc	r0, [r0], #-0
    344c:	48000025 	stmdami	r0, {r0, r2, r5}
    3450:	01000025 	tsteq	r0, r5, lsr #32
    3454:	00005300 	andeq	r5, r0, r0, lsl #6
    3458:	00000000 	andeq	r0, r0, r0
    345c:	25580000 	ldrbcs	r0, [r8, #-0]
    3460:	255c0000 	ldrbcs	r0, [ip, #-0]
    3464:	00090000 	andeq	r0, r9, r0
    3468:	40480070 	submi	r0, r8, r0, ror r0
    346c:	25431a24 	strbcs	r1, [r3, #-2596]	; 0xfffff5dc
    3470:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3474:	00000000 	andeq	r0, r0, r0
    3478:	00256400 	eoreq	r6, r5, r0, lsl #8
    347c:	00257000 	eoreq	r7, r5, r0
    3480:	50000100 	andpl	r0, r0, r0, lsl #2
    3484:	00002570 	andeq	r2, r0, r0, ror r5
    3488:	00002590 	muleq	r0, r0, r5
    348c:	01f30004 	mvnseq	r0, r4
    3490:	00009f50 	andeq	r9, r0, r0, asr pc
    3494:	00000000 	andeq	r0, r0, r0
    3498:	25640000 	strbcs	r0, [r4, #-0]!
    349c:	25860000 	strcs	r0, [r6]
    34a0:	00060000 	andeq	r0, r6, r0
    34a4:	3f80000c 	svccc	0x0080000c
    34a8:	25869f40 	strcs	r9, [r6, #3904]	; 0xf40
    34ac:	25900000 	ldrcs	r0, [r0]
    34b0:	00010000 	andeq	r0, r1, r0
    34b4:	00000050 	andeq	r0, r0, r0, asr r0
    34b8:	00000000 	andeq	r0, r0, r0
    34bc:	00256600 	eoreq	r6, r5, r0, lsl #12
    34c0:	00257000 	eoreq	r7, r5, r0
    34c4:	50000100 	andpl	r0, r0, r0, lsl #2
    34c8:	00002570 	andeq	r2, r0, r0, ror r5
    34cc:	00002590 	muleq	r0, r0, r5
    34d0:	01f30004 	mvnseq	r0, r4
    34d4:	00009f50 	andeq	r9, r0, r0, asr pc
    34d8:	00000000 	andeq	r0, r0, r0
    34dc:	25740000 	ldrbcs	r0, [r4, #-0]!
    34e0:	257a0000 	ldrbcs	r0, [sl, #-0]!
    34e4:	00100000 	andseq	r0, r0, r0
    34e8:	f00a0073 			; <UNDEFINED> instruction: 0xf00a0073
    34ec:	25341a03 	ldrcs	r1, [r4, #-2563]!	; 0xfffff5fd
    34f0:	00722440 	rsbseq	r2, r2, r0, asr #8
    34f4:	9f212446 	svcls	0x00212446
    34f8:	00002584 	andeq	r2, r0, r4, lsl #11
    34fc:	00002586 	andeq	r2, r0, r6, lsl #11
    3500:	00500001 	subseq	r0, r0, r1
    3504:	00000000 	andeq	r0, r0, r0
    3508:	6c000000 	stcvs	0, cr0, [r0], {-0}
    350c:	7a000025 	bvc	35a8 <__exidx_end+0x6a0>
    3510:	01000025 	tsteq	r0, r5, lsr #32
    3514:	00005300 	andeq	r5, r0, r0, lsl #6
    3518:	00000000 	andeq	r0, r0, r0
    351c:	25900000 	ldrcs	r0, [r0]
    3520:	25980000 	ldrcs	r0, [r8]
    3524:	00010000 	andeq	r0, r1, r0
    3528:	00259850 	eoreq	r9, r5, r0, asr r8
    352c:	0025a400 	eoreq	sl, r5, r0, lsl #8
    3530:	f3000400 	vshl.u8	d0, d0, d0
    3534:	009f5001 	addseq	r5, pc, r1
    3538:	00000000 	andeq	r0, r0, r0
    353c:	90000000 	andls	r0, r0, r0
    3540:	9e000025 	cdpls	0, 0, cr0, cr0, cr5, {1}
    3544:	02000025 	andeq	r0, r0, #37	; 0x25
    3548:	9e9f3000 	cdpls	0, 9, cr3, cr15, cr0, {0}
    354c:	a4000025 	strge	r0, [r0], #-37	; 0xffffffdb
    3550:	01000025 	tsteq	r0, r5, lsr #32
    3554:	00005000 	andeq	r5, r0, r0
    3558:	00000000 	andeq	r0, r0, r0
    355c:	25920000 	ldrcs	r0, [r2]
    3560:	25980000 	ldrcs	r0, [r8]
    3564:	00010000 	andeq	r0, r1, r0
    3568:	00259850 	eoreq	r9, r5, r0, asr r8
    356c:	0025a400 	eoreq	sl, r5, r0, lsl #8
    3570:	f3000400 	vshl.u8	d0, d0, d0
    3574:	009f5001 	addseq	r5, pc, r1
    3578:	00000000 	andeq	r0, r0, r0
    357c:	9c000000 	stcls	0, cr0, [r0], {-0}
    3580:	9e000025 	cdpls	0, 0, cr0, cr0, cr5, {1}
    3584:	01000025 	tsteq	r0, r5, lsr #32
    3588:	00005000 	andeq	r5, r0, r0
    358c:	00000000 	andeq	r0, r0, r0
    3590:	25a40000 	strcs	r0, [r4, #0]!
    3594:	25ac0000 	strcs	r0, [ip, #0]!
    3598:	00010000 	andeq	r0, r1, r0
    359c:	0025ac50 	eoreq	sl, r5, r0, asr ip
    35a0:	0025b800 	eoreq	fp, r5, r0, lsl #16
    35a4:	f3000400 	vshl.u8	d0, d0, d0
    35a8:	009f5001 	addseq	r5, pc, r1
    35ac:	00000000 	andeq	r0, r0, r0
    35b0:	a4000000 	strge	r0, [r0], #-0
    35b4:	b2000025 	andlt	r0, r0, #37	; 0x25
    35b8:	02000025 	andeq	r0, r0, #37	; 0x25
    35bc:	b29f3000 	addslt	r3, pc, #0
    35c0:	b8000025 	stmdalt	r0, {r0, r2, r5}
    35c4:	01000025 	tsteq	r0, r5, lsr #32
    35c8:	00005000 	andeq	r5, r0, r0
    35cc:	00000000 	andeq	r0, r0, r0
    35d0:	25a60000 	strcs	r0, [r6, #0]!
    35d4:	25ac0000 	strcs	r0, [ip, #0]!
    35d8:	00010000 	andeq	r0, r1, r0
    35dc:	0025ac50 	eoreq	sl, r5, r0, asr ip
    35e0:	0025b800 	eoreq	fp, r5, r0, lsl #16
    35e4:	f3000400 	vshl.u8	d0, d0, d0
    35e8:	009f5001 	addseq	r5, pc, r1
    35ec:	00000000 	andeq	r0, r0, r0
    35f0:	b0000000 	andlt	r0, r0, r0
    35f4:	b2000025 	andlt	r0, r0, #37	; 0x25
    35f8:	01000025 	tsteq	r0, r5, lsr #32
    35fc:	00005000 	andeq	r5, r0, r0
    3600:	00000000 	andeq	r0, r0, r0
    3604:	25b80000 	ldrcs	r0, [r8, #0]!
    3608:	25be0000 	ldrcs	r0, [lr, #0]!
    360c:	00010000 	andeq	r0, r1, r0
    3610:	0025be50 	eoreq	fp, r5, r0, asr lr
    3614:	0026a800 	eoreq	sl, r6, r0, lsl #16
    3618:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    361c:	000026a8 	andeq	r2, r0, r8, lsr #13
    3620:	000026c8 	andeq	r2, r0, r8, asr #13
    3624:	01f30004 	mvnseq	r0, r4
    3628:	00009f50 	andeq	r9, r0, r0, asr pc
    362c:	00000000 	andeq	r0, r0, r0
    3630:	25b80000 	ldrcs	r0, [r8, #0]!
    3634:	25c10000 	strbcs	r0, [r1]
    3638:	00010000 	andeq	r0, r1, r0
    363c:	0025c151 	eoreq	ip, r5, r1, asr r1
    3640:	0026c800 	eoreq	ip, r6, r0, lsl #16
    3644:	f3000400 	vshl.u8	d0, d0, d0
    3648:	009f5101 	addseq	r5, pc, r1, lsl #2
    364c:	00000000 	andeq	r0, r0, r0
    3650:	c6000000 	strgt	r0, [r0], -r0
    3654:	ca000025 	bgt	36f0 <__exidx_end+0x7e8>
    3658:	01000025 	tsteq	r0, r5, lsr #32
    365c:	25ca5000 	strbcs	r5, [sl]
    3660:	25cd0000 	strbcs	r0, [sp]
    3664:	00010000 	andeq	r0, r1, r0
    3668:	0025d252 	eoreq	sp, r5, r2, asr r2
    366c:	0025d600 	eoreq	sp, r5, r0, lsl #12
    3670:	50000100 	andpl	r0, r0, r0, lsl #2
    3674:	00002600 	andeq	r2, r0, r0, lsl #12
    3678:	00002602 	andeq	r2, r0, r2, lsl #12
    367c:	02500001 	subseq	r0, r0, #1
    3680:	05000026 	streq	r0, [r0, #-38]	; 0xffffffda
    3684:	01000026 	tsteq	r0, r6, lsr #32
    3688:	260e5200 	strcs	r5, [lr], -r0, lsl #4
    368c:	26100000 	ldrcs	r0, [r0], -r0
    3690:	00010000 	andeq	r0, r1, r0
    3694:	00261050 	eoreq	r1, r6, r0, asr r0
    3698:	00261300 	eoreq	r1, r6, r0, lsl #6
    369c:	52000100 	andpl	r0, r0, #0, 2
    36a0:	0000261e 	andeq	r2, r0, lr, lsl r6
    36a4:	00002620 	andeq	r2, r0, r0, lsr #12
    36a8:	20500001 	subscs	r0, r0, r1
    36ac:	23000026 	movwcs	r0, #38	; 0x26
    36b0:	01000026 	tsteq	r0, r6, lsr #32
    36b4:	262a5200 	strtcs	r5, [sl], -r0, lsl #4
    36b8:	262c0000 	strtcs	r0, [ip], -r0
    36bc:	00010000 	andeq	r0, r1, r0
    36c0:	00263c50 	eoreq	r3, r6, r0, asr ip
    36c4:	00264000 	eoreq	r4, r6, r0
    36c8:	50000100 	andpl	r0, r0, r0, lsl #2
    36cc:	0000264e 	andeq	r2, r0, lr, asr #12
    36d0:	00002650 	andeq	r2, r0, r0, asr r6
    36d4:	50500001 	subspl	r0, r0, r1
    36d8:	53000026 	movwpl	r0, #38	; 0x26
    36dc:	01000026 	tsteq	r0, r6, lsr #32
    36e0:	265a5200 	ldrbcs	r5, [sl], -r0, lsl #4
    36e4:	265c0000 	ldrbcs	r0, [ip], -r0
    36e8:	00010000 	andeq	r0, r1, r0
    36ec:	00266c50 	eoreq	r6, r6, r0, asr ip
    36f0:	00266e00 	eoreq	r6, r6, r0, lsl #28
    36f4:	50000100 	andpl	r0, r0, r0, lsl #2
    36f8:	0000267e 	andeq	r2, r0, lr, ror r6
    36fc:	00002682 	andeq	r2, r0, r2, lsl #13
    3700:	96500001 	ldrbls	r0, [r0], -r1
    3704:	98000026 	stmdals	r0, {r1, r2, r5}
    3708:	01000026 	tsteq	r0, r6, lsr #32
    370c:	26985000 	ldrcs	r5, [r8], r0
    3710:	269b0000 	ldrcs	r0, [fp], r0
    3714:	00010000 	andeq	r0, r1, r0
    3718:	00000052 	andeq	r0, r0, r2, asr r0
    371c:	00000000 	andeq	r0, r0, r0
    3720:	0025ee00 	eoreq	lr, r5, r0, lsl #28
    3724:	0025f400 	eoreq	pc, r5, r0, lsl #8
    3728:	72000700 	andvc	r0, r0, #0, 14
    372c:	3fff0a00 	svccc	0x00ff0a00
    3730:	00009f1a 	andeq	r9, r0, sl, lsl pc
    3734:	00000000 	andeq	r0, r0, r0
    3738:	26e20000 	strbtcs	r0, [r2], r0
    373c:	26ec0000 	strbtcs	r0, [ip], r0
    3740:	00090000 	andeq	r0, r9, r0
    3744:	040c0073 	streq	r0, [ip], #-115	; 0xffffff8d
    3748:	21200000 			; <UNDEFINED> instruction: 0x21200000
    374c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3750:	00000000 	andeq	r0, r0, r0
    3754:	00272c00 	eoreq	r2, r7, r0, lsl #24
    3758:	00273400 	eoreq	r3, r7, r0, lsl #8
    375c:	50000100 	andpl	r0, r0, r0, lsl #2
    3760:	00002734 	andeq	r2, r0, r4, lsr r7
    3764:	00002754 	andeq	r2, r0, r4, asr r7
    3768:	01f30004 	mvnseq	r0, r4
    376c:	00009f50 	andeq	r9, r0, r0, asr pc
    3770:	00000000 	andeq	r0, r0, r0
    3774:	27540000 	ldrbcs	r0, [r4, -r0]
    3778:	277c0000 	ldrbcs	r0, [ip, -r0]!
    377c:	00010000 	andeq	r0, r1, r0
    3780:	00277c50 	eoreq	r7, r7, r0, asr ip
    3784:	0027bc00 	eoreq	fp, r7, r0, lsl #24
    3788:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    378c:	000027bc 			; <UNDEFINED> instruction: 0x000027bc
    3790:	000027c4 	andeq	r2, r0, r4, asr #15
    3794:	c4500001 	ldrbgt	r0, [r0], #-1
    3798:	0e000027 	cdpeq	0, 0, cr0, cr0, cr7, {1}
    379c:	01000028 	tsteq	r0, r8, lsr #32
    37a0:	280e5400 	stmdacs	lr, {sl, ip, lr}
    37a4:	284a0000 	stmdacs	sl, {}^	; <UNPREDICTABLE>
    37a8:	00040000 	andeq	r0, r4, r0
    37ac:	9f5001f3 	svcls	0x005001f3
    37b0:	0000284a 	andeq	r2, r0, sl, asr #16
    37b4:	0000284e 	andeq	r2, r0, lr, asr #16
    37b8:	4e540001 	cdpmi	0, 5, cr0, cr4, cr1, {0}
    37bc:	a4000028 	strge	r0, [r0], #-40	; 0xffffffd8
    37c0:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    37c4:	5001f300 	andpl	pc, r1, r0, lsl #6
    37c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    37cc:	00000000 	andeq	r0, r0, r0
    37d0:	00276a00 	eoreq	r6, r7, r0, lsl #20
    37d4:	0027ac00 	eoreq	sl, r7, r0, lsl #24
    37d8:	53000100 	movwpl	r0, #256	; 0x100
	...
    37e4:	000027de 	ldrdeq	r2, [r0], -lr
    37e8:	000027e4 	andeq	r2, r0, r4, ror #15
    37ec:	00500001 	subseq	r0, r0, r1
    37f0:	00000000 	andeq	r0, r0, r0
    37f4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    37f8:	10000028 	andne	r0, r0, r8, lsr #32
    37fc:	01000028 	tsteq	r0, r8, lsr #32
    3800:	28105000 	ldmdacs	r0, {ip, lr}
    3804:	28240000 	stmdacs	r4!, {}	; <UNPREDICTABLE>
    3808:	00010000 	andeq	r0, r1, r0
    380c:	00000054 	andeq	r0, r0, r4, asr r0
    3810:	00000000 	andeq	r0, r0, r0
    3814:	00282400 	eoreq	r2, r8, r0, lsl #8
    3818:	00284400 	eoreq	r4, r8, r0, lsl #8
    381c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3830:	00550001 	subseq	r0, r5, r1
    3834:	00000000 	andeq	r0, r0, r0
    3838:	03000000 	movweq	r0, #0
    383c:	9f7f7500 	svcls	0x007f7500
	...
    3848:	00550001 	subseq	r0, r5, r1
    384c:	00000000 	andeq	r0, r0, r0
    3850:	a4000000 	strge	r0, [r0], #-0
    3854:	c3000028 	movwgt	r0, #40	; 0x28
    3858:	01000028 	tsteq	r0, r8, lsr #32
    385c:	28c35000 	stmiacs	r3, {ip, lr}^
    3860:	29840000 	stmibcs	r4, {}	; <UNPREDICTABLE>
    3864:	00010000 	andeq	r0, r1, r0
    3868:	00298457 	eoreq	r8, r9, r7, asr r4
    386c:	002ac400 	eoreq	ip, sl, r0, lsl #8
    3870:	f3000400 	vshl.u8	d0, d0, d0
    3874:	009f5001 	addseq	r5, pc, r1
    3878:	00000000 	andeq	r0, r0, r0
    387c:	c4000000 	strgt	r0, [r0], #-0
    3880:	44000028 	strmi	r0, [r0], #-40	; 0xffffffd8
    3884:	0100002a 	tsteq	r0, sl, lsr #32
    3888:	2a465000 	bcs	1197890 <__ccfg+0x11778e8>
    388c:	2a800000 	bcs	fe003894 <_estack+0xddffe894>
    3890:	00010000 	andeq	r0, r1, r0
    3894:	00000050 	andeq	r0, r0, r0, asr r0
    3898:	00000000 	andeq	r0, r0, r0
    389c:	00296c00 	eoreq	r6, r9, r0, lsl #24
    38a0:	00297000 	eoreq	r7, r9, r0
    38a4:	70000300 	andvc	r0, r0, r0, lsl #6
    38a8:	29709f71 	ldmdbcs	r0!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, pc}^
    38ac:	29760000 	ldmdbcs	r6!, {}^	; <UNPREDICTABLE>
    38b0:	00010000 	andeq	r0, r1, r0
    38b4:	00297651 	eoreq	r7, r9, r1, asr r6
    38b8:	00299600 	eoreq	r9, r9, r0, lsl #12
    38bc:	91000200 	mrsls	r0, R8_usr
    38c0:	00299654 	eoreq	r9, r9, r4, asr r6
    38c4:	0029a200 	eoreq	sl, r9, r0, lsl #4
    38c8:	51000100 	mrspl	r0, (UNDEF: 16)
    38cc:	000029a2 	andeq	r2, r0, r2, lsr #19
    38d0:	000029a4 	andeq	r2, r0, r4, lsr #19
    38d4:	54910002 	ldrpl	r0, [r1], #2
    38d8:	000029a4 	andeq	r2, r0, r4, lsr #19
    38dc:	000029a6 	andeq	r2, r0, r6, lsr #19
    38e0:	a6510001 	ldrbge	r0, [r1], -r1
    38e4:	4c000029 	stcmi	0, cr0, [r0], {41}	; 0x29
    38e8:	0200002a 	andeq	r0, r0, #42	; 0x2a
    38ec:	00549100 	subseq	r9, r4, r0, lsl #2
    38f0:	00000000 	andeq	r0, r0, r0
    38f4:	d0000000 	andle	r0, r0, r0
    38f8:	2a000028 	bcs	39a0 <__exidx_end+0xa98>
    38fc:	01000029 	tsteq	r0, r9, lsr #32
    3900:	29325100 	ldmdbcs	r2!, {r8, ip, lr}
    3904:	29340000 	ldmdbcs	r4!, {}	; <UNPREDICTABLE>
    3908:	00010000 	andeq	r0, r1, r0
    390c:	00000051 	andeq	r0, r0, r1, asr r0
    3910:	00000000 	andeq	r0, r0, r0
    3914:	00292200 	eoreq	r2, r9, r0, lsl #4
    3918:	00293000 	eoreq	r3, r9, r0
    391c:	52000100 	andpl	r0, r0, #0, 2
    3920:	00002932 	andeq	r2, r0, r2, lsr r9
    3924:	00002a14 	andeq	r2, r0, r4, lsl sl
    3928:	00520001 	subseq	r0, r2, r1
    392c:	00000000 	andeq	r0, r0, r0
    3930:	22000000 	andcs	r0, r0, #0
    3934:	0a000029 	beq	39e0 <__exidx_end+0xad8>
    3938:	0100002a 	tsteq	r0, sl, lsr #32
    393c:	00005300 	andeq	r5, r0, r0, lsl #6
    3940:	00000000 	andeq	r0, r0, r0
    3944:	28c80000 	stmiacs	r8, {}^	; <UNPREDICTABLE>
    3948:	2a1e0000 	bcs	783950 <__ccfg+0x7639a8>
    394c:	00010000 	andeq	r0, r1, r0
    3950:	00000055 	andeq	r0, r0, r5, asr r0
    3954:	00000000 	andeq	r0, r0, r0
    3958:	0028c400 	eoreq	ip, r8, r0, lsl #8
    395c:	00294c00 	eoreq	r4, r9, r0, lsl #24
    3960:	30000200 	andcc	r0, r0, r0, lsl #4
    3964:	00294c9f 	mlaeq	r9, pc, ip, r4	; <UNPREDICTABLE>
    3968:	002a8000 	eoreq	r8, sl, r0
    396c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3978:	00002944 	andeq	r2, r0, r4, asr #18
    397c:	0000294e 	andeq	r2, r0, lr, asr #18
    3980:	00510001 	subseq	r0, r1, r1
    3984:	00000000 	andeq	r0, r0, r0
    3988:	6c000000 	stcvs	0, cr0, [r0], {-0}
    398c:	bc000029 	stclt	0, cr0, [r0], {41}	; 0x29
    3990:	02000029 	andeq	r0, r0, #41	; 0x29
    3994:	bc9f3000 	ldclt	0, cr3, [pc], {0}
    3998:	dc000029 	stcle	0, cr0, [r0], {41}	; 0x29
    399c:	01000029 	tsteq	r0, r9, lsr #32
    39a0:	29dc5100 	ldmibcs	ip, {r8, ip, lr}^
    39a4:	29e20000 	stmibcs	r2!, {}^	; <UNPREDICTABLE>
    39a8:	00020000 	andeq	r0, r2, r0
    39ac:	29e29f30 	stmibcs	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}^
    39b0:	2a1c0000 	bcs	7039b8 <__ccfg+0x6e3a10>
    39b4:	00010000 	andeq	r0, r1, r0
    39b8:	00000051 	andeq	r0, r0, r1, asr r0
    39bc:	00000000 	andeq	r0, r0, r0
    39c0:	00299800 	eoreq	r9, r9, r0, lsl #16
    39c4:	00299c00 	eoreq	r9, r9, r0, lsl #24
    39c8:	5e000100 	adfpls	f0, f0, f0
    39cc:	000029a4 	andeq	r2, r0, r4, lsr #19
    39d0:	000029a6 	andeq	r2, r0, r6, lsr #19
    39d4:	a65e0001 	ldrbge	r0, [lr], -r1
    39d8:	ac000029 	stcge	0, cr0, [r0], {41}	; 0x29
    39dc:	01000029 	tsteq	r0, r9, lsr #32
    39e0:	29ac5100 	stmibcs	ip!, {r8, ip, lr}
    39e4:	29b40000 	ldmibcs	r4!, {}	; <UNPREDICTABLE>
    39e8:	00030000 	andeq	r0, r3, r0
    39ec:	009f7f71 	addseq	r7, pc, r1, ror pc	; <UNPREDICTABLE>
    39f0:	00000000 	andeq	r0, r0, r0
    39f4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    39f8:	96000029 	strls	r0, [r0], -r9, lsr #32
    39fc:	02000029 	andeq	r0, r0, #41	; 0x29
    3a00:	969f3000 	ldrls	r3, [pc], r0
    3a04:	a0000029 	andge	r0, r0, r9, lsr #32
    3a08:	01000029 	tsteq	r0, r9, lsr #32
    3a0c:	29a05e00 	stmibcs	r0!, {r9, sl, fp, ip, lr}
    3a10:	29a20000 	stmibcs	r2!, {}	; <UNPREDICTABLE>
    3a14:	00050000 	andeq	r0, r5, r0
    3a18:	26380071 			; <UNDEFINED> instruction: 0x26380071
    3a1c:	0029a29f 	mlaeq	r9, pc, r2, sl	; <UNPREDICTABLE>
    3a20:	0029a400 	eoreq	sl, r9, r0, lsl #8
    3a24:	91000600 	tstls	r0, r0, lsl #12
    3a28:	26380654 			; <UNDEFINED> instruction: 0x26380654
    3a2c:	0029a49f 	mlaeq	r9, pc, r4, sl	; <UNPREDICTABLE>
    3a30:	0029a600 	eoreq	sl, r9, r0, lsl #12
    3a34:	5e000100 	adfpls	f0, f0, f0
    3a38:	000029a6 	andeq	r2, r0, r6, lsr #19
    3a3c:	000029dc 	ldrdeq	r2, [r0], -ip
    3a40:	54910006 	ldrpl	r0, [r1], #6
    3a44:	9f263806 	svcls	0x00263806
    3a48:	000029dc 	ldrdeq	r2, [r0], -ip
    3a4c:	000029e2 	andeq	r2, r0, r2, ror #19
    3a50:	9f300002 	svcls	0x00300002
    3a54:	000029e2 	andeq	r2, r0, r2, ror #19
    3a58:	00002a4c 	andeq	r2, r0, ip, asr #20
    3a5c:	005e0001 	subseq	r0, lr, r1
    3a60:	00000000 	andeq	r0, r0, r0
    3a64:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3a68:	dc000029 	stcle	0, cr0, [r0], {41}	; 0x29
    3a6c:	01000029 	tsteq	r0, r9, lsr #32
    3a70:	00005c00 	andeq	r5, r0, r0, lsl #24
    3a74:	00000000 	andeq	r0, r0, r0
    3a78:	29e60000 	stmibcs	r6!, {}^	; <UNPREDICTABLE>
    3a7c:	2a4c0000 	bcs	1303a84 <__ccfg+0x12e3adc>
    3a80:	00010000 	andeq	r0, r1, r0
    3a84:	0000005a 	andeq	r0, r0, sl, asr r0
    3a88:	00000000 	andeq	r0, r0, r0
    3a8c:	0029ea00 	eoreq	lr, r9, r0, lsl #20
    3a90:	002a2600 	eoreq	r2, sl, r0, lsl #12
    3a94:	5c000100 	stfpls	f0, [r0], {-0}
    3a98:	00002a26 	andeq	r2, r0, r6, lsr #20
    3a9c:	00002a2a 	andeq	r2, r0, sl, lsr #20
    3aa0:	00510001 	subseq	r0, r1, r1
    3aa4:	00000000 	andeq	r0, r0, r0
    3aa8:	2a000000 	bcs	3ab0 <__exidx_end+0xba8>
    3aac:	3400002a 	strcc	r0, [r0], #-42	; 0xffffffd6
    3ab0:	1700002a 	strne	r0, [r0, -sl, lsr #32]
    3ab4:	12007100 	andne	r7, r0, #0, 2
    3ab8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3abc:	16ffff0a 	ldrbtne	pc, [pc], sl, lsl #30	; <UNPREDICTABLE>
    3ac0:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3ac4:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3ac8:	9f131600 	svcls	0x00131600
	...
    3ad4:	00002a54 	andeq	r2, r0, r4, asr sl
    3ad8:	00002a60 	andeq	r2, r0, r0, ror #20
    3adc:	9f300002 	svcls	0x00300002
    3ae0:	00002a60 	andeq	r2, r0, r0, ror #20
    3ae4:	00002a80 	andeq	r2, r0, r0, lsl #21
    3ae8:	00510001 	subseq	r0, r1, r1
    3aec:	00000000 	andeq	r0, r0, r0
    3af0:	56000000 	strpl	r0, [r0], -r0
    3af4:	5800002a 	stmdapl	r0, {r1, r3, r5}
    3af8:	0100002a 	tsteq	r0, sl, lsr #32
    3afc:	2a585300 	bcs	1618704 <__ccfg+0x15f875c>
    3b00:	2a600000 	bcs	1803b08 <__ccfg+0x17e3b60>
    3b04:	00020000 	andeq	r0, r2, r0
    3b08:	2a609f4f 	bcs	182b84c <__ccfg+0x180b8a4>
    3b0c:	2a700000 	bcs	1c03b14 <__ccfg+0x1be3b6c>
    3b10:	00010000 	andeq	r0, r1, r0
    3b14:	002a7053 	eoreq	r7, sl, r3, asr r0
    3b18:	002a7400 	eoreq	r7, sl, r0, lsl #8
    3b1c:	73000500 	movwvc	r0, #1280	; 0x500
    3b20:	9f253400 	svcls	0x00253400
    3b24:	00002a74 	andeq	r2, r0, r4, ror sl
    3b28:	00002a78 	andeq	r2, r0, r8, ror sl
    3b2c:	00530001 	subseq	r0, r3, r1
    3b30:	00000000 	andeq	r0, r0, r0
    3b34:	6c000000 	stcvs	0, cr0, [r0], {-0}
    3b38:	4c000029 	stcmi	0, cr0, [r0], {41}	; 0x29
    3b3c:	0600002a 	streq	r0, [r0], -sl, lsr #32
    3b40:	139c0c00 	orrsne	r0, ip, #0, 24
    3b44:	009f5000 	addseq	r5, pc, r0
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    3b50:	e4000028 	str	r0, [r0], #-40	; 0xffffffd8
    3b54:	01000028 	tsteq	r0, r8, lsr #32
    3b58:	00005300 	andeq	r5, r0, r0, lsl #6
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	28f80000 	ldmcs	r8!, {}^	; <UNPREDICTABLE>
    3b64:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    3b68:	00010000 	andeq	r0, r1, r0
    3b6c:	00000052 	andeq	r0, r0, r2, asr r0
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	00290e00 	eoreq	r0, r9, r0, lsl #28
    3b78:	00291a00 	eoreq	r1, r9, r0, lsl #20
    3b7c:	52000100 	andpl	r0, r0, #0, 2
	...
    3b88:	0000291a 	andeq	r2, r0, sl, lsl r9
    3b8c:	00002a0a 	andeq	r2, r0, sl, lsl #20
    3b90:	00530001 	subseq	r0, r3, r1
    3b94:	00000000 	andeq	r0, r0, r0
    3b98:	d2000000 	andle	r0, r0, #0
    3b9c:	dc00002a 	stcle	0, cr0, [r0], {42}	; 0x2a
    3ba0:	0100002a 	tsteq	r0, sl, lsr #32
    3ba4:	2adc5000 	bcs	ff717bac <_estack+0xdf712bac>
    3ba8:	2ae60000 	bcs	ff983bb0 <_estack+0xdf97ebb0>
    3bac:	000e0000 	andeq	r0, lr, r0
    3bb0:	09120070 	ldmdbeq	r2, {r4, r5, r6}
    3bb4:	2b141680 	blcs	5095bc <__ccfg+0x4e9614>
    3bb8:	16000128 	strne	r0, [r0], -r8, lsr #2
    3bbc:	00009f13 	andeq	r9, r0, r3, lsl pc
    3bc0:	00000000 	andeq	r0, r0, r0
    3bc4:	2acc0000 	bcs	ff303bcc <_estack+0xdf2febcc>
    3bc8:	2af80000 	bcs	ffe03bd0 <_estack+0xdfdfebd0>
    3bcc:	00010000 	andeq	r0, r1, r0
    3bd0:	00000054 	andeq	r0, r0, r4, asr r0
    3bd4:	00000000 	andeq	r0, r0, r0
    3bd8:	002afc00 	eoreq	pc, sl, r0, lsl #24
    3bdc:	002b0200 	eoreq	r0, fp, r0, lsl #4
    3be0:	73001500 	movwvc	r1, #1280	; 0x500
    3be4:	4b401200 	blmi	10083ec <__ccfg+0xfe8444>
    3be8:	164f2224 	strbne	r2, [pc], -r4, lsr #4
    3bec:	244b4014 	strbcs	r4, [fp], #-20	; 0xffffffec
    3bf0:	01282d22 			; <UNDEFINED> instruction: 0x01282d22
    3bf4:	9f131600 	svcls	0x00131600
	...
    3c00:	00002b08 	andeq	r2, r0, r8, lsl #22
    3c04:	00002b12 	andeq	r2, r0, r2, lsl fp
    3c08:	00740017 	rsbseq	r0, r4, r7, lsl r0
    3c0c:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3c10:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    3c14:	4b401416 	blmi	1008c74 <__ccfg+0xfe8ccc>
    3c18:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3c1c:	13160001 	tstne	r6, #1
    3c20:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3c30:	52000100 	andpl	r0, r0, #0, 2
	...
    3c44:	00500001 	subseq	r0, r0, r1
	...
    3c54:	01000000 	mrseq	r0, (UNDEF: 0)
    3c58:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    3c68:	00010000 	andeq	r0, r1, r0
    3c6c:	00000053 	andeq	r0, r0, r3, asr r0
	...
    3c7c:	70001600 	andvc	r1, r0, r0, lsl #12
    3c80:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
    3c84:	244b4000 	strbcs	r4, [fp], #-0
    3c88:	00050c22 	andeq	r0, r5, r2, lsr #24
    3c8c:	282d8000 	stmdacs	sp!, {pc}
    3c90:	13160001 	tstne	r6, #1
    3c94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3c98:	00000000 	andeq	r0, r0, r0
    3c9c:	002b3c00 	eoreq	r3, fp, r0, lsl #24
    3ca0:	002b7e00 	eoreq	r7, fp, r0, lsl #28
    3ca4:	09000300 	stmdbeq	r0, {r8, r9}
    3ca8:	2b7e9fff 	blcs	1fabcac <__ccfg+0x1f8bd04>
    3cac:	2b880000 	blcs	fe203cb4 <_estack+0xde1fecb4>
    3cb0:	00010000 	andeq	r0, r1, r0
    3cb4:	00000050 	andeq	r0, r0, r0, asr r0
    3cb8:	00000000 	andeq	r0, r0, r0
    3cbc:	002b4800 	eoreq	r4, fp, r0, lsl #16
    3cc0:	002b5600 	eoreq	r5, fp, r0, lsl #12
    3cc4:	50000100 	andpl	r0, r0, r0, lsl #2
    3cc8:	00002b5a 	andeq	r2, r0, sl, asr fp
    3ccc:	00002b76 	andeq	r2, r0, r6, ror fp
    3cd0:	78500001 	ldmdavc	r0, {r0}^
    3cd4:	7a00002b 	bvc	3d88 <__exidx_end+0xe80>
    3cd8:	0100002b 	tsteq	r0, fp, lsr #32
    3cdc:	2b7c5000 	blcs	1f17ce4 <__ccfg+0x1ef7d3c>
    3ce0:	2b7e0000 	blcs	1f83ce8 <__ccfg+0x1f63d40>
    3ce4:	00010000 	andeq	r0, r1, r0
    3ce8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3cf8:	09000300 	stmdbeq	r0, {r8, r9}
    3cfc:	00009fff 	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
    3d00:	00000000 	andeq	r0, r0, r0
    3d04:	00010000 	andeq	r0, r1, r0
    3d08:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3d18:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3d24:	00002b88 	andeq	r2, r0, r8, lsl #23
    3d28:	00002bc2 	andeq	r2, r0, r2, asr #23
    3d2c:	ff090003 			; <UNDEFINED> instruction: 0xff090003
    3d30:	002bc29f 	mlaeq	fp, pc, r2, ip	; <UNPREDICTABLE>
    3d34:	002bc600 	eoreq	ip, fp, r0, lsl #12
    3d38:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
    3d3c:	002bc69f 	mlaeq	fp, pc, r6, ip	; <UNPREDICTABLE>
    3d40:	002bca00 	eoreq	ip, fp, r0, lsl #20
    3d44:	45000200 	strmi	r0, [r0, #-512]	; 0xfffffe00
    3d48:	002bca9f 	mlaeq	fp, pc, sl, ip	; <UNPREDICTABLE>
    3d4c:	002be800 	eoreq	lr, fp, r0, lsl #16
    3d50:	09000300 	stmdbeq	r0, {r8, r9}
    3d54:	2be89fff 	blcs	ffa2bd58 <_estack+0xdfa26d58>
    3d58:	2bea0000 	blcs	ffa83d60 <_estack+0xdfa7ed60>
    3d5c:	00010000 	andeq	r0, r1, r0
    3d60:	002bea50 	eoreq	lr, fp, r0, asr sl
    3d64:	002bec00 	eoreq	lr, fp, r0, lsl #24
    3d68:	09000300 	stmdbeq	r0, {r8, r9}
    3d6c:	2bec9fff 	blcs	ffb2bd70 <_estack+0xdfb26d70>
    3d70:	2bf40000 	blcs	ffd03d78 <_estack+0xdfcfed78>
    3d74:	00010000 	andeq	r0, r1, r0
    3d78:	00000050 	andeq	r0, r0, r0, asr r0
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	002b9800 	eoreq	r9, fp, r0, lsl #16
    3d84:	002bf000 	eoreq	pc, fp, r0
    3d88:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    3d94:	00002c0c 	andeq	r2, r0, ip, lsl #24
    3d98:	00002c15 	andeq	r2, r0, r5, lsl ip
    3d9c:	15500001 	ldrbne	r0, [r0, #-1]
    3da0:	2a00002c 	bcs	3e58 <__exidx_end+0xf50>
    3da4:	0100002c 	tsteq	r0, ip, lsr #32
    3da8:	2c2a5400 	cfstrscs	mvf5, [sl], #-0
    3dac:	2c2e0000 	stccs	0, cr0, [lr], #-0
    3db0:	00040000 	andeq	r0, r4, r0
    3db4:	9f5001f3 	svcls	0x005001f3
    3db8:	00002c2e 	andeq	r2, r0, lr, lsr #24
    3dbc:	00002c30 	andeq	r2, r0, r0, lsr ip
    3dc0:	30540001 	subscc	r0, r4, r1
    3dc4:	3400002c 	strcc	r0, [r0], #-44	; 0xffffffd4
    3dc8:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    3dcc:	5001f300 	andpl	pc, r1, r0, lsl #6
    3dd0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3dd4:	00000000 	andeq	r0, r0, r0
    3dd8:	002c0c00 	eoreq	r0, ip, r0, lsl #24
    3ddc:	002c1500 	eoreq	r1, ip, r0, lsl #10
    3de0:	51000100 	mrspl	r0, (UNDEF: 16)
    3de4:	00002c15 	andeq	r2, r0, r5, lsl ip
    3de8:	00002c2a 	andeq	r2, r0, sl, lsr #24
    3dec:	2a550001 	bcs	1543df8 <__ccfg+0x1523e50>
    3df0:	2e00002c 	cdpcs	0, 0, cr0, cr0, cr12, {1}
    3df4:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    3df8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3dfc:	002c2e9f 	mlaeq	ip, pc, lr, r2	; <UNPREDICTABLE>
    3e00:	002c3000 	eoreq	r3, ip, r0
    3e04:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3e08:	00002c30 	andeq	r2, r0, r0, lsr ip
    3e0c:	00002c34 	andeq	r2, r0, r4, lsr ip
    3e10:	01f30004 	mvnseq	r0, r4
    3e14:	00009f51 	andeq	r9, r0, r1, asr pc
    3e18:	00000000 	andeq	r0, r0, r0
    3e1c:	2c160000 	ldccs	0, cr0, [r6], {-0}
    3e20:	2c2d0000 	stccs	0, cr0, [sp], #-0
    3e24:	00050000 	andeq	r0, r5, r0
    3e28:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    3e2c:	002c2e9f 	mlaeq	ip, pc, lr, r2	; <UNPREDICTABLE>
    3e30:	002c3400 	eoreq	r3, ip, r0, lsl #8
    3e34:	70000500 	andvc	r0, r0, r0, lsl #10
    3e38:	9f293000 	svcls	0x00293000
	...
    3e44:	00002c34 	andeq	r2, r0, r4, lsr ip
    3e48:	00002c36 	andeq	r2, r0, r6, lsr ip
    3e4c:	36500001 	ldrbcc	r0, [r0], -r1
    3e50:	3c00002c 	stccc	0, cr0, [r0], {44}	; 0x2c
    3e54:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    3e58:	5001f300 	andpl	pc, r1, r0, lsl #6
    3e5c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e60:	00000000 	andeq	r0, r0, r0
    3e64:	002c3400 	eoreq	r3, ip, r0, lsl #8
    3e68:	002c3800 	eoreq	r3, ip, r0, lsl #16
    3e6c:	51000100 	mrspl	r0, (UNDEF: 16)
    3e70:	00002c38 	andeq	r2, r0, r8, lsr ip
    3e74:	00002c3c 	andeq	r2, r0, ip, lsr ip
    3e78:	01f30004 	mvnseq	r0, r4
    3e7c:	00009f51 	andeq	r9, r0, r1, asr pc
    3e80:	00000000 	andeq	r0, r0, r0
    3e84:	2c340000 	ldccs	0, cr0, [r4], #-0
    3e88:	2c3b0000 	ldccs	0, cr0, [fp], #-0
    3e8c:	00010000 	andeq	r0, r1, r0
    3e90:	002c3b52 	eoreq	r3, ip, r2, asr fp
    3e94:	002c3c00 	eoreq	r3, ip, r0, lsl #24
    3e98:	f3000400 	vshl.u8	d0, d0, d0
    3e9c:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
    3eac:	01000000 	mrseq	r0, (UNDEF: 0)
    3eb0:	00005000 	andeq	r5, r0, r0
    3eb4:	00000000 	andeq	r0, r0, r0
    3eb8:	00040000 	andeq	r0, r4, r0
    3ebc:	9f5001f3 	svcls	0x005001f3
	...
    3ed0:	00510001 	subseq	r0, r1, r1
    3ed4:	00000000 	andeq	r0, r0, r0
    3ed8:	04000000 	streq	r0, [r0], #-0
    3edc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3ee0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ef0:	52000100 	andpl	r0, r0, #0, 2
	...
    3efc:	01f30004 	mvnseq	r0, r4
    3f00:	00009f52 	andeq	r9, r0, r2, asr pc
    3f04:	00000000 	andeq	r0, r0, r0
    3f08:	00010000 	andeq	r0, r1, r0
    3f0c:	00000052 	andeq	r0, r0, r2, asr r0
    3f10:	00000000 	andeq	r0, r0, r0
    3f14:	f3001500 	vrshl.u8	d1, d0, d0
    3f18:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f1c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    3f20:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    3f24:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    3f28:	9f131600 	svcls	0x00131600
	...
    3f3c:	00530001 	subseq	r0, r3, r1
    3f40:	00000000 	andeq	r0, r0, r0
    3f44:	04000000 	streq	r0, [r0], #-0
    3f48:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    3f4c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f5c:	70000400 	andvc	r0, r0, r0, lsl #8
    3f60:	009f0480 	addseq	r0, pc, r0, lsl #9
    3f64:	00000000 	andeq	r0, r0, r0
    3f68:	0d000000 	stceq	0, cr0, [r0, #-0]
    3f6c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3f70:	01f32431 	mvnseq	r2, r1, lsr r4
    3f74:	80232250 	eorhi	r2, r3, r0, asr r2
    3f78:	00009f04 	andeq	r9, r0, r4, lsl #30
    3f7c:	00000000 	andeq	r0, r0, r0
    3f80:	00010000 	andeq	r0, r1, r0
    3f84:	00000050 	andeq	r0, r0, r0, asr r0
    3f88:	00000000 	andeq	r0, r0, r0
    3f8c:	f3005200 	vhsub.u8	d5, d0, d0
    3f90:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3f94:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3f98:	f3048023 	vhadd.u8	d8, d4, d19
    3f9c:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fa0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fa4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fa8:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    3fac:	13160001 	tstne	r6, #1
    3fb0:	f3048423 	vshl.u8	d8, d19, d4
    3fb4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fb8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fbc:	f3048023 	vhadd.u8	d8, d4, d19
    3fc0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3fc4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3fc8:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fcc:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    3fd0:	13160001 	tstne	r6, #1
    3fd4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3fd8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    3fdc:	13160001 	tstne	r6, #1
    3fe0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ff0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ffc:	f330002f 	vhadd.u<illegal width 64>	d0, d0, d31
    4000:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4004:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    4008:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    400c:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4010:	f3131600 	vmax.u16	d1, d3, d0
    4014:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4018:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    401c:	0001282e 	andeq	r2, r1, lr, lsr #16
    4020:	01f31316 	mvnseq	r1, r6, lsl r3
    4024:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    4028:	13160001 	tstne	r6, #1
    402c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    403c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4048:	01f30004 	mvnseq	r0, r4
    404c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    405c:	00010000 	andeq	r0, r1, r0
    4060:	00000051 	andeq	r0, r0, r1, asr r0
    4064:	00000000 	andeq	r0, r0, r0
    4068:	f3000400 	vshl.u8	d0, d0, d0
    406c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    407c:	01000000 	mrseq	r0, (UNDEF: 0)
    4080:	00005200 	andeq	r5, r0, r0, lsl #4
    4084:	00000000 	andeq	r0, r0, r0
    4088:	00040000 	andeq	r0, r4, r0
    408c:	9f5201f3 	svcls	0x005201f3
	...
    4098:	00520001 	subseq	r0, r2, r1
    409c:	00000000 	andeq	r0, r0, r0
    40a0:	1b000000 	blne	40a8 <__exidx_end+0x11a0>
    40a4:	5201f300 	andpl	pc, r1, #0, 6
    40a8:	01f32540 	mvnseq	r2, r0, asr #10
    40ac:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    40b0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    40b4:	00000f0c 	andeq	r0, r0, ip, lsl #30
    40b8:	01282b80 	smlawbeq	r8, r0, fp, r2
    40bc:	9f131600 	svcls	0x00131600
	...
    40d0:	00530001 	subseq	r0, r3, r1
    40d4:	00000000 	andeq	r0, r0, r0
    40d8:	04000000 	streq	r0, [r0], #-0
    40dc:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    40e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    40e4:	00000000 	andeq	r0, r0, r0
    40e8:	53000100 	movwpl	r0, #256	; 0x100
	...
    40f4:	01f3001b 	mvnseq	r0, fp, lsl r0
    40f8:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    40fc:	01f35301 	mvnseq	r5, r1, lsl #6
    4100:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4104:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4108:	282b8000 	stmdacs	fp!, {pc}
    410c:	13160001 	tstne	r6, #1
    4110:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4120:	91000200 	mrsls	r0, R8_usr
	...
    412c:	7d000200 	sfmvc	f0, 4, [r0, #-0]
	...
    4140:	70000400 	andvc	r0, r0, r0, lsl #8
    4144:	009f0480 	addseq	r0, pc, r0, lsl #9
    4148:	00000000 	andeq	r0, r0, r0
    414c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4150:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4154:	01f32431 	mvnseq	r2, r1, lsr r4
    4158:	80232250 	eorhi	r2, r3, r0, asr r2
    415c:	00009f04 	andeq	r9, r0, r4, lsl #30
    4160:	00000000 	andeq	r0, r0, r0
    4164:	00010000 	andeq	r0, r1, r0
    4168:	00000050 	andeq	r0, r0, r0, asr r0
    416c:	00000000 	andeq	r0, r0, r0
    4170:	f3006400 	vshl.u8	d6, d0, d0
    4174:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4178:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    417c:	f3048023 	vhadd.u8	d8, d4, d19
    4180:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    4184:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4188:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    418c:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4190:	8000000f 	andhi	r0, r0, pc
    4194:	0001282c 	andeq	r2, r1, ip, lsr #16
    4198:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    419c:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41a0:	01f32431 	mvnseq	r2, r1, lsr r4
    41a4:	80232250 	eorhi	r2, r3, r0, asr r2
    41a8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41ac:	01f32431 	mvnseq	r2, r1, lsr r4
    41b0:	01f32250 	mvnseq	r2, r0, asr r2
    41b4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    41b8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    41bc:	282c8000 	stmdacs	ip!, {pc}
    41c0:	13160001 	tstne	r6, #1
    41c4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    41c8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    41cc:	8000000f 	andhi	r0, r0, pc
    41d0:	0001282b 	andeq	r2, r1, fp, lsr #16
    41d4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    41e4:	0a000000 	beq	41ec <__exidx_end+0x12e4>
    41e8:	0a007400 	beq	211f0 <__ccfg+0x1248>
    41ec:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    41f0:	009f2400 	addseq	r2, pc, r0, lsl #8
    41f4:	00000000 	andeq	r0, r0, r0
    41f8:	0c000000 	stceq	0, cr0, [r0], {-0}
    41fc:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    4200:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4204:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4208:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    420c:	00000000 	andeq	r0, r0, r0
    4210:	7d002400 	cfstrsvc	mvf2, [r0, #-0]
    4214:	0a029400 	beq	a921c <__ccfg+0x89274>
    4218:	f31affff 	vmaxnm.f16	<illegal reg q7.5>, q13, <illegal reg q15.5>
    421c:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4220:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4224:	4b405301 	blmi	1018e30 <__ccfg+0xff8e88>
    4228:	0f0c2224 	svceq	0x000c2224
    422c:	2b800000 	blcs	fe004234 <_estack+0xddfff234>
    4230:	16000128 	strne	r0, [r0], -r8, lsr #2
    4234:	009f2413 	addseq	r2, pc, r3, lsl r4	; <UNPREDICTABLE>
	...
    4244:	01000000 	mrseq	r0, (UNDEF: 0)
    4248:	00005000 	andeq	r5, r0, r0
    424c:	00000000 	andeq	r0, r0, r0
    4250:	00040000 	andeq	r0, r4, r0
    4254:	9f5001f3 	svcls	0x005001f3
	...
    4268:	00510001 	subseq	r0, r1, r1
    426c:	00000000 	andeq	r0, r0, r0
    4270:	04000000 	streq	r0, [r0], #-0
    4274:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4278:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4288:	52000100 	andpl	r0, r0, #0, 2
	...
    4294:	00540001 	subseq	r0, r4, r1
    4298:	00000000 	andeq	r0, r0, r0
    429c:	15000000 	strne	r0, [r0, #-0]
    42a0:	5201f300 	andpl	pc, r1, #0, 6
    42a4:	01f32540 	mvnseq	r2, r0, asr #10
    42a8:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    42ac:	2e302540 	cfneg32cs	mvfx2, mvfx0
    42b0:	16000128 	strne	r0, [r0], -r8, lsr #2
    42b4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    42c4:	00010000 	andeq	r0, r1, r0
    42c8:	00000055 	andeq	r0, r0, r5, asr r0
    42cc:	00000000 	andeq	r0, r0, r0
    42d0:	f3001d00 	vpadd.f32	d1, d0, d0
    42d4:	01f35001 	mvnseq	r5, r1
    42d8:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    42dc:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    42e0:	f3225101 	vrhadd.u32	d5, d2, d1
    42e4:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    42e8:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    42ec:	9f131600 	svcls	0x00131600
	...
    4300:	00750006 	rsbseq	r0, r5, r6
    4304:	9f1a0074 	svcls	0x001a0074
	...
    4318:	00550001 	subseq	r0, r5, r1
    431c:	00000000 	andeq	r0, r0, r0
    4320:	1d000000 	stcne	0, cr0, [r0, #-0]
    4324:	5001f300 	andpl	pc, r1, r0, lsl #6
    4328:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    432c:	01f30223 	mvnseq	r0, r3, lsr #4
    4330:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4334:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    4338:	2e302540 	cfneg32cs	mvfx2, mvfx0
    433c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4340:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4350:	00070000 	andeq	r0, r7, r0
    4354:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    4358:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    4368:	05000000 	streq	r0, [r0, #-0]
    436c:	30007000 	andcc	r7, r0, r0
    4370:	00009f29 	andeq	r9, r0, r9, lsr #30
	...
    4380:	00010000 	andeq	r0, r1, r0
    4384:	00000050 	andeq	r0, r0, r0, asr r0
    4388:	00000000 	andeq	r0, r0, r0
    438c:	f3000400 	vshl.u8	d0, d0, d0
    4390:	009f5001 	addseq	r5, pc, r1
	...
    43a0:	01000000 	mrseq	r0, (UNDEF: 0)
    43a4:	00005100 	andeq	r5, r0, r0, lsl #2
    43a8:	00000000 	andeq	r0, r0, r0
    43ac:	00040000 	andeq	r0, r4, r0
    43b0:	9f5101f3 	svcls	0x005101f3
	...
    43c4:	00520001 	subseq	r0, r2, r1
    43c8:	00000000 	andeq	r0, r0, r0
    43cc:	01000000 	mrseq	r0, (UNDEF: 0)
    43d0:	00005400 	andeq	r5, r0, r0, lsl #8
    43d4:	00000000 	andeq	r0, r0, r0
    43d8:	001b0000 	andseq	r0, fp, r0
    43dc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    43e0:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    43e4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    43e8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    43ec:	8000000f 	andhi	r0, r0, pc
    43f0:	0001282b 	andeq	r2, r1, fp, lsr #16
    43f4:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4404:	01000000 	mrseq	r0, (UNDEF: 0)
    4408:	00005300 	andeq	r5, r0, r0, lsl #6
    440c:	00000000 	andeq	r0, r0, r0
    4410:	00010000 	andeq	r0, r1, r0
    4414:	00000055 	andeq	r0, r0, r5, asr r0
    4418:	00000000 	andeq	r0, r0, r0
    441c:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    4420:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    4424:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    4428:	4b405301 	blmi	1019034 <__ccfg+0xff908c>
    442c:	0f0c2224 	svceq	0x000c2224
    4430:	2b800000 	blcs	fe004438 <_estack+0xddfff438>
    4434:	16000128 	strne	r0, [r0], -r8, lsr #2
    4438:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4448:	00010000 	andeq	r0, r1, r0
    444c:	00000056 	andeq	r0, r0, r6, asr r0
    4450:	00000000 	andeq	r0, r0, r0
    4454:	70000600 	andvc	r0, r0, r0, lsl #12
    4458:	22007100 	andcs	r7, r0, #0, 2
    445c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4460:	00000000 	andeq	r0, r0, r0
    4464:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4470:	01f30023 	mvnseq	r0, r3, lsr #32
    4474:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4478:	f3022322 	vcgt.u8	d2, d2, d18
    447c:	01f35001 	mvnseq	r5, r1
    4480:	01f32251 	mvnseq	r2, r1, asr r2
    4484:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4488:	000f0c22 	andeq	r0, pc, r2, lsr #24
    448c:	282b8000 	stmdacs	fp!, {pc}
    4490:	13160001 	tstne	r6, #1
    4494:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    44a4:	76000600 	strvc	r0, [r0], -r0, lsl #12
    44a8:	1a007400 	bne	214b0 <__ccfg+0x1508>
    44ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    44b0:	00000000 	andeq	r0, r0, r0
    44b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    44c8:	00560001 	subseq	r0, r6, r1
    44cc:	00000000 	andeq	r0, r0, r0
    44d0:	23000000 	movwcs	r0, #0
    44d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    44d8:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    44dc:	01f30223 	mvnseq	r0, r3, lsr #4
    44e0:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    44e4:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    44e8:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    44ec:	00000f0c 	andeq	r0, r0, ip, lsl #30
    44f0:	01282b80 	smlawbeq	r8, r0, fp, r2
    44f4:	9f131600 	svcls	0x00131600
	...
    4508:	00760007 	rsbseq	r0, r6, r7
    450c:	1affff0a 	bne	413c <__exidx_end+0x1234>
    4510:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4520:	70000500 	andvc	r0, r0, r0, lsl #10
    4524:	9f293000 	svcls	0x00293000
	...
    4530:	00002c3c 	andeq	r2, r0, ip, lsr ip
    4534:	00002c54 	andeq	r2, r0, r4, asr ip
    4538:	54500001 	ldrbpl	r0, [r0], #-1
    453c:	8e00002c 	cdphi	0, 0, cr0, cr0, cr12, {1}
    4540:	0100002c 	tsteq	r0, ip, lsr #32
    4544:	2c8e5500 	cfstr32cs	mvfx5, [lr], {0}
    4548:	2c980000 	ldccs	0, cr0, [r8], {0}
    454c:	00040000 	andeq	r0, r4, r0
    4550:	9f5001f3 	svcls	0x005001f3
	...
    455c:	00002c3c 	andeq	r2, r0, ip, lsr ip
    4560:	00002c42 	andeq	r2, r0, r2, asr #24
    4564:	42510001 	subsmi	r0, r1, #1
    4568:	7a00002c 	bvc	4620 <__exidx_end+0x1718>
    456c:	0100002c 	tsteq	r0, ip, lsr #32
    4570:	2c7a5400 	cfldrdcs	mvd5, [sl], #-0
    4574:	2c980000 	ldccs	0, cr0, [r8], {0}
    4578:	00040000 	andeq	r0, r4, r0
    457c:	9f5101f3 	svcls	0x005101f3
	...
    4588:	00002c76 	andeq	r2, r0, r6, ror ip
    458c:	00002c8a 	andeq	r2, r0, sl, lsl #25
    4590:	00550001 	subseq	r0, r5, r1
    4594:	00000000 	andeq	r0, r0, r0
    4598:	76000000 	strvc	r0, [r0], -r0
    459c:	7a00002c 	bvc	4654 <__exidx_end+0x174c>
    45a0:	0100002c 	tsteq	r0, ip, lsr #32
    45a4:	2c7a5400 	cfldrdcs	mvd5, [sl], #-0
    45a8:	2c8a0000 	stccs	0, cr0, [sl], {0}
    45ac:	00040000 	andeq	r0, r4, r0
    45b0:	9f5101f3 	svcls	0x005101f3
	...
    45bc:	00002c98 	muleq	r0, r8, ip
    45c0:	00002cb6 			; <UNDEFINED> instruction: 0x00002cb6
    45c4:	b6500001 	ldrblt	r0, [r0], -r1
    45c8:	c400002c 	strgt	r0, [r0], #-44	; 0xffffffd4
    45cc:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    45d0:	5001f300 	andpl	pc, r1, r0, lsl #6
    45d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    45e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    45f0:	00560001 	subseq	r0, r6, r1
    45f4:	00000000 	andeq	r0, r0, r0
    45f8:	04000000 	streq	r0, [r0], #-0
    45fc:	5001f300 	andpl	pc, r1, r0, lsl #6
    4600:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4610:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4624:	00700007 	rsbseq	r0, r0, r7
    4628:	191c0073 	ldmdbne	ip, {r0, r1, r4, r5, r6}
    462c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4630:	00000000 	andeq	r0, r0, r0
    4634:	70000400 	andvc	r0, r0, r0, lsl #8
    4638:	009f1900 	addseq	r1, pc, r0, lsl #18
	...
    4648:	04000000 	streq	r0, [r0], #-0
    464c:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    4650:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4654:	00000000 	andeq	r0, r0, r0
    4658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4664:	00720005 	rsbseq	r0, r2, r5
    4668:	009f2540 	addseq	r2, pc, r0, asr #10
    466c:	00000000 	andeq	r0, r0, r0
    4670:	01000000 	mrseq	r0, (UNDEF: 0)
    4674:	00005000 	andeq	r5, r0, r0
    4678:	00000000 	andeq	r0, r0, r0
    467c:	00040000 	andeq	r0, r4, r0
    4680:	9f07d00a 	svcls	0x0007d00a
	...
    468c:	00500001 	subseq	r0, r0, r1
	...
    469c:	01000000 	mrseq	r0, (UNDEF: 0)
    46a0:	00005000 	andeq	r5, r0, r0
	...
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	00000053 	andeq	r0, r0, r3, asr r0
	...
    46c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46d0:	1b700003 	blne	1c046e4 <__ccfg+0x1be473c>
    46d4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    46d8:	00000000 	andeq	r0, r0, r0
    46dc:	f3000400 	vshl.u8	d0, d0, d0
    46e0:	009f5001 	addseq	r5, pc, r1
	...
    46f0:	07000000 	streq	r0, [r0, -r0]
    46f4:	48007400 	stmdami	r0, {sl, ip, sp, lr}
    46f8:	9f264824 	svcls	0x00264824
	...
    470c:	00500001 	subseq	r0, r0, r1
    4710:	00000000 	andeq	r0, r0, r0
    4714:	06000000 	streq	r0, [r0], -r0
    4718:	5001f300 	andpl	pc, r1, r0, lsl #6
    471c:	009f1c4b 	addseq	r1, pc, fp, asr #24
	...
    472c:	01000000 	mrseq	r0, (UNDEF: 0)
    4730:	00005500 	andeq	r5, r0, r0, lsl #10
    4734:	00000000 	andeq	r0, r0, r0
    4738:	000c0000 	andeq	r0, ip, r0
    473c:	4b5001f3 	blmi	1404f10 <__ccfg+0x13e4f68>
    4740:	5001f31c 	andpl	pc, r1, ip, lsl r3	; <UNPREDICTABLE>
    4744:	9f1e1c4b 	svcls	0x001e1c4b
	...
    4758:	0071002c 	rsbseq	r0, r1, ip, lsr #32
    475c:	00712640 	rsbseq	r2, r1, r0, asr #12
    4760:	26482440 	strbcs	r2, [r8], -r0, asr #8
    4764:	331e0070 	tstcc	lr, #112	; 0x70
    4768:	00712226 	rsbseq	r2, r1, r6, lsr #4
    476c:	26482448 	strbcs	r2, [r8], -r8, asr #8
    4770:	3a1e0075 	bcc	78494c <__ccfg+0x7649a4>
    4774:	00742226 	rsbseq	r2, r4, r6, lsr #4
    4778:	26482448 	strbcs	r2, [r8], -r8, asr #8
    477c:	701e0075 	andsvc	r0, lr, r5, ror r0
    4780:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    4784:	00009f22 	andeq	r9, r0, r2, lsr #30
    4788:	00000000 	andeq	r0, r0, r0
    478c:	00320000 	eorseq	r0, r2, r0
    4790:	26400071 			; <UNDEFINED> instruction: 0x26400071
    4794:	4b5001f3 	blmi	1404f68 <__ccfg+0x13e4fc0>
    4798:	4000711c 	andmi	r7, r0, ip, lsl r1
    479c:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    47a0:	71222633 			; <UNDEFINED> instruction: 0x71222633
    47a4:	48244800 	stmdami	r4!, {fp, lr}
    47a8:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    47ac:	f322263a 	vmin.u32	d2, d2, d26
    47b0:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    47b4:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    47b8:	751e2648 	ldrvc	r2, [lr, #-1608]	; 0xfffff9b8
    47bc:	26421e00 	strbcs	r1, [r2], -r0, lsl #28
    47c0:	00009f22 	andeq	r9, r0, r2, lsr #30
	...
    47d0:	00010000 	andeq	r0, r1, r0
    47d4:	00000050 	andeq	r0, r0, r0, asr r0
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	f3000400 	vshl.u8	d0, d0, d0
    47e0:	009f5001 	addseq	r5, pc, r1
	...
    47f0:	0b000000 	bleq	47f8 <__exidx_end+0x18f0>
    47f4:	70007000 	andvc	r7, r0, r0
    47f8:	26461e00 	strbcs	r1, [r6], -r0, lsl #28
    47fc:	9f1c0070 	svcls	0x001c0070
	...
    4808:	00500001 	subseq	r0, r0, r1
    480c:	00000000 	andeq	r0, r0, r0
    4810:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    4814:	5001f300 	andpl	pc, r1, r0, lsl #6
    4818:	1e5001f3 	mrcne	1, 2, r0, cr0, cr3, {7}
    481c:	01f32646 	mvnseq	r2, r6, asr #12
    4820:	009f1c50 	addseq	r1, pc, r0, asr ip	; <UNPREDICTABLE>
	...
    4830:	01000000 	mrseq	r0, (UNDEF: 0)
    4834:	00005500 	andeq	r5, r0, r0, lsl #10
    4838:	00000000 	andeq	r0, r0, r0
    483c:	00050000 	andeq	r0, r5, r0
    4840:	0910380c 	ldmdbeq	r0, {r2, r3, fp, ip, sp}
    4844:	00000040 	andeq	r0, r0, r0, asr #32
	...
    4854:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    4868:	00700006 	rsbseq	r0, r0, r6
    486c:	9f1c0076 	svcls	0x001c0076
	...
    4878:	00500001 	subseq	r0, r0, r1
	...
    4888:	0a000000 	beq	4890 <__exidx_end+0x1988>
    488c:	08007000 	stmdaeq	r0, {ip, sp, lr}
    4890:	1a2444fc 	bne	915c88 <__ccfg+0x8f5ce0>
    4894:	009f2546 	addseq	r2, pc, r6, asr #10
	...
    48a4:	01000000 	mrseq	r0, (UNDEF: 0)
    48a8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    48b8:	00090000 	andeq	r0, r9, r0
    48bc:	000a0073 	andeq	r0, sl, r3, ror r0
    48c0:	253a1afc 	ldrcs	r1, [sl, #-2812]!	; 0xfffff504
    48c4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    48d4:	73000a00 	movwvc	r0, #2560	; 0xa00
    48d8:	40fc0800 	rscsmi	r0, ip, r0, lsl #16
    48dc:	25421a24 	strbcs	r1, [r2, #-2596]	; 0xfffff5dc
    48e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    48e4:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
    return (time * SECOND)/1000;
   8:	00040000 	andeq	r0, r4, r0
}
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	00000180 	andeq	r0, r0, r0, lsl #3
  18:	00000000 	andeq	r0, r0, r0
  1c:	0000000e 	andeq	r0, r0, lr
  20:	00000248 	andeq	r0, r0, r8, asr #4
  24:	0000007c 	andeq	r0, r0, ip, ror r0
  28:	000002c4 	andeq	r0, r0, r4, asr #5
  2c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	08b30002 	ldmeq	r3!, {r1}
}
  40:	00040000 	andeq	r0, r4, r0
  44:	00000000 	andeq	r0, r0, r0
  48:	00000494 	muleq	r0, r4, r4
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000004a0 	andeq	r0, r0, r0, lsr #9
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	000004cc 	andeq	r0, r0, ip, asr #9
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
  60:	000004f8 	strdeq	r0, [r0], -r8
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	00000534 	andeq	r0, r0, r4, lsr r5
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	00000588 	andeq	r0, r0, r8, lsl #11
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	000005c8 	andeq	r0, r0, r8, asr #11
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	descriptors [fd] = s;
  90:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	00000704 	andeq	r0, r0, r4, lsl #14
	if (s == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	00000754 	andeq	r0, r0, r4, asr r7
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	000007a8 	andeq	r0, r0, r8, lsr #15
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	000007e0 	andeq	r0, r0, r0, ror #15
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	000009f4 	strdeq	r0, [r0], -r4
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	00000a30 	andeq	r0, r0, r0, lsr sl
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	00000ad4 	ldrdeq	r0, [r0], -r4
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
			curr += 0x1000;
  f8:	00000c8c 	andeq	r0, r0, ip, lsl #25
  fc:	00000258 	andeq	r0, r0, r8, asr r2
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
			upto = EE_SIZE - 1;
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	00000ee4 	andeq	r0, r0, r4, ror #29
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1d430002 	stclne	0, cr0, [r3, #-8]
        if (displayCycle)
 128:	00040000 	andeq	r0, r4, r0
            ser_outf(Check_PERIOD, "%c ", ch);
 12c:	00000000 	andeq	r0, r0, r0
 130:	00000f44 	andeq	r0, r0, r4, asr #30
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
        if(onTime > 0){
 138:	00000f80 	andeq	r0, r0, r0, lsl #31
            leds(led,1);
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 140:	00001000 	andeq	r1, r0, r0
 144:	00000018 	andeq	r0, r0, r8, lsl r0
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
 150:	00001018 	andeq	r1, r0, r8, lsl r0
            delay(onTime, OFF_PERIOD);
 154:	00000010 	andeq	r0, r0, r0, lsl r0
            delay(offTime, Check_PERIOD);
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
            led = greenLed;
 160:	00000000 	andeq	r0, r0, r0
            ch = greenCharacter;
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000000 	andeq	r0, r0, r0
            onTime = greenOn;
 16c:	00000006 	andeq	r0, r0, r6
 170:	00001028 	andeq	r1, r0, r8, lsr #32
            offTime = greenOff;
 174:	000000cc 	andeq	r0, r0, ip, asr #1
            leds(led,1);
 178:	000010f4 	strdeq	r1, [r0], -r4
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	00001108 	andeq	r1, r0, r8, lsl #2
 184:	00000034 	andeq	r0, r0, r4, lsr r0
            proceed OFF_PERIOD;
 188:	0000113c 	andeq	r1, r0, ip, lsr r1
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
        when(&On, Check_PERIOD);
 190:	00000000 	andeq	r0, r0, r0
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
        when(&stopProcess, Stop);
 198:	00001170 	andeq	r1, r0, r0, ror r1
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
        release;
 1a0:	00001194 	muleq	r0, r4, r1
        leds(led,0);
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
 1b8:	00000000 	andeq	r0, r0, r0
        if (displayCycle)
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
            ser_outf(Check_PERIOD, "%c ", 'F');
 1c0:	000011cc 	andeq	r1, r0, ip, asr #3
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
 1c8:	000011f0 	strdeq	r1, [r0], -r0
        if(offTime > 0)
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
            delay(offTime, Check_PERIOD);
 1d0:	00001210 	andeq	r1, r0, r0, lsl r2
        leds(led,0);
 1d4:	0000000e 	andeq	r0, r0, lr
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 1e8:	00000000 	andeq	r0, r0, r0
        finish;
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
}
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
 1f8:	0000121e 	andeq	r1, r0, lr, lsl r2
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	0000000e 	andeq	r0, r0, lr
 208:	00001234 	andeq	r1, r0, r4, lsr r2
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	00001258 	andeq	r1, r0, r8, asr r2
 214:	0000009c 	muleq	r0, ip, r0
 218:	000012f4 	strdeq	r1, [r0], -r4
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	00001344 	andeq	r1, r0, r4, asr #6
 224:	00000048 	andeq	r0, r0, r8, asr #32
 228:	0000138c 	andeq	r1, r0, ip, lsl #7
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	000013dc 	ldrdeq	r1, [r0], -ip
 234:	00000058 	andeq	r0, r0, r8, asr r0
 238:	00001434 	andeq	r1, r0, r4, lsr r4
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
 240:	000014dc 	ldrdeq	r1, [r0], -ip
 244:	00000034 	andeq	r0, r0, r4, lsr r0
    word numbers[] = {0, 0, 0, 0};
 248:	00001510 	andeq	r1, r0, r0, lsl r5
    int numbersIndex = 0;
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
    word numbers[] = {0, 0, 0, 0};
 250:	00000000 	andeq	r0, r0, r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 254:	00000030 	andeq	r0, r0, r0, lsr r0
        if(settingsInput[i] == ' ') {
 258:	00000000 	andeq	r0, r0, r0
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
            numbers[numbersIndex] = number;
 260:	00001528 	andeq	r1, r0, r8, lsr #10
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
            number = 0;
 268:	00000000 	andeq	r0, r0, r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
    redOn = numbers[0];
 278:	00000104 	andeq	r0, r0, r4, lsl #2
    redOff = numbers[1];
 27c:	2f660002 	svccs	0x00660002
 280:	00040000 	andeq	r0, r4, r0
	...
    greenOff = numbers[3];
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
 290:	00000000 	andeq	r0, r0, r0
}
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 298:	00000000 	andeq	r0, r0, r0
 29c:	0000000e 	andeq	r0, r0, lr
            number = number * 10;
 2a0:	00000000 	andeq	r0, r0, r0
            number += settingsInput[i] - 48;
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
 2a8:	00000000 	andeq	r0, r0, r0
        } else if(settingsInput[i] == '-') {
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
            return 1;
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
fsm root {
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
        ser_outf(Initial, "Enter your name: ");
 2e0:	00000000 	andeq	r0, r0, r0
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
        ser_in(Get_Name, username, NAME_LENGTH);
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	000000bc 	strheq	r0, [r0], -ip
        ser_outf(Show_Menu, "Welcome %s\n\r"
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
        ser_inf(Get_Choice, "%c", &choice);
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
 300:	00000000 	andeq	r0, r0, r0
        if (choice == 'A' || choice == 'a'){
 304:	0000000a 	andeq	r0, r0, sl
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
            proceed Adjust_Intervals;
 310:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
 314:	00000060 	andeq	r0, r0, r0, rrx
        proceed Show_Menu;
 318:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 31c:	00000040 	andeq	r0, r0, r0, asr #32
 320:	00000000 	andeq	r0, r0, r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
        if(processSettingsInput(settings) != 0)
 330:	00000000 	andeq	r0, r0, r0
 334:	00000006 	andeq	r0, r0, r6
            proceed Adjust_Intervals;
 338:	00000000 	andeq	r0, r0, r0
        if(!blinkerRunning) {
 33c:	00000068 	andeq	r0, r0, r8, rrx
 340:	00000000 	andeq	r0, r0, r0
 344:	00000050 	andeq	r0, r0, r0, asr r0
            blinkerCode = runfsm blinker;
 348:	00000000 	andeq	r0, r0, r0
            blinkerRunning = YES;
 34c:	0000009c 	muleq	r0, ip, r0
        On = YES;
 350:	00000000 	andeq	r0, r0, r0
 354:	00000040 	andeq	r0, r0, r0, asr #32
        trigger(&On);
 358:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00000000 	andeq	r0, r0, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	00001664 	andeq	r1, r0, r4, ror #12
 374:	00000002 	andeq	r0, r0, r2
	...
        proceed Show_Menu;
 380:	00000034 	andeq	r0, r0, r4, lsr r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 384:	429d0002 	addsmi	r0, sp, #2
 388:	00040000 	andeq	r0, r4, r0
        displayCycle = YES;
 38c:	00000000 	andeq	r0, r0, r0
 390:	00001666 	andeq	r1, r0, r6, ror #12
        ser_inf(Await_Stop, "%c", &ch);
 394:	00000002 	andeq	r0, r0, r2
 398:	00001668 	andeq	r1, r0, r8, ror #12
        if(ch == 'S' || ch == 's'){
 39c:	00000002 	andeq	r0, r0, r2
 3a0:	0000166a 	andeq	r1, r0, sl, ror #12
 3a4:	00000002 	andeq	r0, r0, r2
            displayCycle = NO;
 3a8:	0000166c 	andeq	r1, r0, ip, ror #12
            proceed Show_Menu;
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
        proceed Monitor;
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
        On = NO;
 3bc:	44150002 	ldrmi	r0, [r5], #-2
        if(blinkerCode != 0x0) {
 3c0:	00040000 	andeq	r0, r4, r0
	...
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
        proceed Show_Menu;
 3d4:	49500002 	ldmdbmi	r0, {r1}^
 3d8:	00040000 	andeq	r0, r4, r0
	...
        leds_all(0);
 3e4:	00000002 	andeq	r0, r0, r2
        proceed Show_Menu;
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
        } else if (choice == 'V' || choice == 'v') {
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
            proceed View_Settings;
 3fc:	4e540002 	cdpmi	0, 5, cr0, cr4, cr2, {0}
        } else if (choice == 'M' || choice == 'm') {
 400:	00040000 	andeq	r0, r4, r0
	...
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
 410:	00000000 	andeq	r0, r0, r0
            killall(blinkerCode);
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
            sint runningNumber = crunning(blinkerCode);
 424:	534e0002 	movtpl	r0, #57346	; 0xe002
 428:	00040000 	andeq	r0, r4, r0
 42c:	00000000 	andeq	r0, r0, r0
            diag("Number of %d: %d", blinkerCode, runningNumber);
 430:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
            trigger(&stopProcess);
 434:	00000034 	andeq	r0, r0, r4, lsr r0
 438:	000016ec 	andeq	r1, r0, ip, ror #13
            blinkerCode = runfsm blinker;
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
 440:	0000171c 	andeq	r1, r0, ip, lsl r7
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	00001734 	andeq	r1, r0, r4, lsr r7
 44c:	00000054 	andeq	r0, r0, r4, asr r0
 450:	00001788 	andeq	r1, r0, r8, lsl #15
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	000017c8 	andeq	r1, r0, r8, asr #15
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
 460:	000017ec 	andeq	r1, r0, ip, ror #15
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	00001800 	andeq	r1, r0, r0, lsl #16
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	00000064 	andeq	r0, r0, r4, rrx
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
 480:	00000000 	andeq	r0, r0, r0
 484:	000000ec 	andeq	r0, r0, ip, ror #1
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000002 	andeq	r0, r0, r2
 490:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
 494:	00000004 	andeq	r0, r0, r4
	adddevfunc (ioreq_uart_a, devnum);
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
void udelay (volatile word n) {
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
}
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (n--);
 4b4:	5df90002 	ldclpl	0, cr0, [r9, #8]!
 4b8:	00040000 	andeq	r0, r4, r0
 4bc:	00000000 	andeq	r0, r0, r0
		n--;
 4c0:	00001814 	andeq	r1, r0, r4, lsl r8
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
void mdelay (volatile word n) {
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
	while (n) {
 4d4:	620f0002 	andvs	r0, pc, #2
 4d8:	00040000 	andeq	r0, r4, r0
}
 4dc:	00000000 	andeq	r0, r0, r0
		udelay (999);
 4e0:	0000188c 	andeq	r1, r0, ip, lsl #17
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
		n--;
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	665f0002 	ldrbvs	r0, [pc], -r2
void __pi_ondomain (lword d) {
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
 500:	000018e0 	andeq	r1, r0, r0, ror #17
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
	PRCMPowerDomainOn (d);
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
 514:	6aaf0002 	bvs	febc0524 <_estack+0xdebbb524>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	00001940 	andeq	r1, r0, r0, asr #18
	__pi_systat.ondmns |= d;
 524:	00000070 	andeq	r0, r0, r0, ror r0
	...
}
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
void __pi_syserror (word ec, const char *m) {
 534:	6ee00002 	cdpvs	0, 14, cr0, cr0, cr2, {0}
	diag ("SYSERR: %x, %s", ec, m);
 538:	00040000 	andeq	r0, r4, r0
 53c:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
 540:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 544:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
		all_leds_blink;
 550:	0000002c 	andeq	r0, r0, ip, lsr #32
 554:	73240002 			; <UNDEFINED> instruction: 0x73240002
 558:	00040000 	andeq	r0, r4, r0
 55c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 560:	00001acc 	andeq	r1, r0, ip, asr #21
 564:	00000020 	andeq	r0, r0, r0, lsr #32
 568:	00001aec 	andeq	r1, r0, ip, ror #21
 56c:	00000230 	andeq	r0, r0, r0, lsr r2
 570:	00001d1c 	andeq	r1, r0, ip, lsl sp
 574:	00000050 	andeq	r0, r0, r0, asr r0
	...
	while (1) {
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	79180002 	ldmdbvc	r8, {r1}
void tci_run_delay_timer () {
 588:	00040000 	andeq	r0, r4, r0
	setdel = __pi_mintk - __pi_old;
 58c:	00000000 	andeq	r0, r0, r0
 590:	00001d6c 	andeq	r1, r0, ip, ror #26
 594:	00000390 	muleq	r0, r0, r3
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	7eab0002 	cdpvc	0, 10, cr0, cr11, cr2, {0}
 5a8:	00040000 	andeq	r0, r4, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
 5ac:	00000000 	andeq	r0, r0, r0
	sti_tim;
 5b0:	000020fc 	strdeq	r2, [r0], -ip
}
 5b4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	7f840002 	svcvc	0x00840002
	cli_aux;
 5c8:	00040000 	andeq	r0, r4, r0
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
 5d8:	0000212c 	andeq	r2, r0, ip, lsr #2
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
}
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ec:	80cb0002 	sbchi	r0, fp, r2
void AONRTCIntHandler () {
 5f0:	00040000 	andeq	r0, r4, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	00002144 	andeq	r2, r0, r4, asr #2
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 5fc:	00000008 	andeq	r0, r0, r8
		if (__pi_utims [0] == 0)
 600:	00000000 	andeq	r0, r0, r0
 604:	00000006 	andeq	r0, r0, r6
		if (*(__pi_utims [0])) {
 608:	0000214c 	andeq	r2, r0, ip, asr #2
 60c:	00000008 	andeq	r0, r0, r8
			(*(__pi_utims [0]))--;
 610:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
 614:	00000006 	andeq	r0, r0, r6
		if (*(__pi_utims [1])) {
 618:	00000000 	andeq	r0, r0, r0
			aux_timer_inactive = 0;
 61c:	00000008 	andeq	r0, r0, r8
	...
		if (*(__pi_utims [2])) {
 628:	00000024 	andeq	r0, r0, r4, lsr #32
			(*(__pi_utims [2]))--;
 62c:	82050002 	andhi	r0, r5, #2
		if (__pi_utims [3] != 0) {
 630:	00040000 	andeq	r0, r4, r0
			if (*(__pi_utims [3])) {
 634:	00000000 	andeq	r0, r0, r0
				aux_timer_inactive = 0;
 638:	00002154 	andeq	r2, r0, r4, asr r1
				(*(__pi_utims [3]))--;
 63c:	000000d4 	ldrdeq	r0, [r0], -r4
	if (__pi_systat.ledsts) {
 640:	00002228 	andeq	r2, r0, r8, lsr #4
 644:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			if (__pi_systat.ledblk) {
 650:	000000b4 	strheq	r0, [r0], -r4
 654:	84100002 	ldrhi	r0, [r0], #-2
 658:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 65c:	00000000 	andeq	r0, r0, r0
 660:	000022cc 	andeq	r2, r0, ip, asr #5
				if (__pi_systat.ledsts & 0x2)
 664:	0000007c 	andeq	r0, r0, ip, ror r0
 668:	00002348 	andeq	r2, r0, r8, asr #6
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
				if (__pi_systat.ledsts & 0x4)
 670:	000023f4 	strdeq	r2, [r0], -r4
				__pi_systat.ledblk = 0;
 674:	0000005c 	andeq	r0, r0, ip, asr r0
 678:	00002450 	andeq	r2, r0, r0, asr r4
			if (__pi_systat.fstblk)
 67c:	00000018 	andeq	r0, r0, r8, lsl r0
 680:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
 684:	00000010 	andeq	r0, r0, r0, lsl r0
	if (events & AON_RTC_EVFLAGS_CH0) {
 688:	00002468 	andeq	r2, r0, r8, ror #8
		cli_tim;
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
		__pi_new += setdel;
 690:	00002478 	andeq	r2, r0, r8, ror r4
 694:	00000014 	andeq	r0, r0, r4, lsl r0
		setdel = 0;
 698:	0000248c 	andeq	r2, r0, ip, lsl #9
		RISE_N_SHINE;
 69c:	00000064 	andeq	r0, r0, r4, rrx
		__pi_new += setdel;
 6a0:	000024f0 	strdeq	r2, [r0], -r0
		RISE_N_SHINE;
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
 6a8:	00002504 	andeq	r2, r0, r4, lsl #10
		aux_timer_inactive = 1;
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
 6b0:	00002518 	andeq	r2, r0, r8, lsl r5
				if (__pi_systat.ledsts & 0x1)
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 6b8:	0000252c 	andeq	r2, r0, ip, lsr #10
 6bc:	00000028 	andeq	r0, r0, r8, lsr #32
				if (__pi_systat.ledsts & 0x2)
 6c0:	00002554 	andeq	r2, r0, r4, asr r5
 6c4:	00000010 	andeq	r0, r0, r0, lsl r0
 6c8:	00002564 	andeq	r2, r0, r4, ror #10
				if (__pi_systat.ledsts & 0x8)
 6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
				__pi_systat.ledblk = 1;
 6d0:	00002590 	muleq	r0, r0, r5
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
		if (aux_timer_inactive) {
 6d8:	000025a4 	andeq	r2, r0, r4, lsr #11
			cli_aux;
 6dc:	00000014 	andeq	r0, r0, r4, lsl r0
 6e0:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
 6e4:	00000110 	andeq	r0, r0, r0, lsl r1
 6e8:	000026c8 	andeq	r2, r0, r8, asr #13
 6ec:	00000064 	andeq	r0, r0, r4, rrx
 6f0:	0000272c 	andeq	r2, r0, ip, lsr #14
 6f4:	00000028 	andeq	r0, r0, r8, lsr #32
 6f8:	00002754 	andeq	r2, r0, r4, asr r7
 6fc:	00000150 	andeq	r0, r0, r0, asr r1
	...
	cli_tim;
 708:	0000003c 	andeq	r0, r0, ip, lsr r0
 70c:	8f2b0002 	svchi	0x002b0002
	if (setdel) {
 710:	00040000 	andeq	r0, r4, r0
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 71c:	000000f4 	strdeq	r0, [r0], -r4
 720:	000028a4 	andeq	r2, r0, r4, lsr #17
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 724:	00000220 	andeq	r0, r0, r0, lsr #4
				AON_RTC_O_CH0CMP)) - gettav ());
 728:	00002ac4 	andeq	r2, r0, r4, asr #21
	return NO;
 72c:	00000060 	andeq	r0, r0, r0, rrx
			setdel = 0;
 730:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 734:	00000078 	andeq	r0, r0, r8, ror r0
 738:	00002b24 	andeq	r2, r0, r4, lsr #22
}
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
		return YES;
 748:	00000044 	andeq	r0, r0, r4, asr #32
 74c:	98520002 	ldmdals	r2, {r1}^
 750:	00040000 	andeq	r0, r4, r0
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 75c:	00000010 	andeq	r0, r0, r0, lsl r0
	UARTDisable (UART0_BASE);
 760:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
 764:	00000018 	andeq	r0, r0, r8, lsl r0
 768:	00002b3c 	andeq	r2, r0, ip, lsr fp
 76c:	0000004c 	andeq	r0, r0, ip, asr #32
 770:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 774:	00000030 	andeq	r0, r0, r0, lsr r0
 778:	00002b88 	andeq	r2, r0, r8, lsl #23
 77c:	0000006c 	andeq	r0, r0, ip, rrx
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 780:	00002bf4 	strdeq	r2, [r0], -r4
 784:	00000016 	andeq	r0, r0, r6, lsl r0
	...
}
 790:	00000044 	andeq	r0, r0, r4, asr #32
 794:	9c220002 	stcls	0, cr0, [r2], #-8
 798:	00040000 	andeq	r0, r4, r0
 79c:	00000000 	andeq	r0, r0, r0
 7a0:	00002c0c 	andeq	r2, r0, ip, lsl #24
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 7a8:	00002c34 	andeq	r2, r0, r4, lsr ip
 7ac:	00000008 	andeq	r0, r0, r8
 7b0:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 7b4:	00000022 	andeq	r0, r0, r2, lsr #32
 7b8:	00000000 	andeq	r0, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 7bc:	0000002e 	andeq	r0, r0, lr, lsr #32
 7c0:	00000000 	andeq	r0, r0, r0
	__pi_uart_setrate (urates [0], __pi_uart);
 7c4:	00000034 	andeq	r0, r0, r4, lsr r0
 7c8:	00000000 	andeq	r0, r0, r0
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
 7d8:	00000064 	andeq	r0, r0, r4, rrx
 7dc:	a1cd0002 	bicge	r0, sp, r2
	switch (operation) {
 7e0:	00040000 	andeq	r0, r4, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
 7e4:	00000000 	andeq	r0, r0, r0
 7e8:	00002c3c 	andeq	r2, r0, ip, lsr ip
 7ec:	0000005c 	andeq	r0, r0, ip, asr r0
 7f0:	00002c98 	muleq	r0, r8, ip
 7f4:	0000002c 	andeq	r0, r0, ip, lsr #32
				*buf++ = uart_a_read;
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000090 	muleq	r0, r0, r0
			while (len && uart_a_char_available) {
 800:	00000000 	andeq	r0, r0, r0
 804:	00000018 	andeq	r0, r0, r8, lsl r0
 808:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
 80c:	00000060 	andeq	r0, r0, r0, rrx
}
 810:	00000000 	andeq	r0, r0, r0
 814:	00000034 	andeq	r0, r0, r4, lsr r0
			uart_a_disable_int;
 818:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
 81c:	00000038 	andeq	r0, r0, r8, lsr r0
				*buf++ = uart_a_read;
 820:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 824:	0000000c 	andeq	r0, r0, ip
 828:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
 82c:	00000034 	andeq	r0, r0, r4, lsr r0
 830:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000e0 	andeq	r0, r0, r0, ror #1
       4:	000001e8 	andeq	r0, r0, r8, ror #3
    return (time * SECOND)/1000;
       8:	000001ec 	andeq	r0, r0, ip, ror #3
}
       c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      10:	000001f4 	strdeq	r0, [r0], -r4
      14:	00000248 	andeq	r0, r0, r8, asr #4
	...
      20:	0000010c 	andeq	r0, r0, ip, lsl #2
      24:	00000110 	andeq	r0, r0, r0, lsl r1
      28:	00000112 	andeq	r0, r0, r2, lsl r1
      2c:	00000112 	andeq	r0, r0, r2, lsl r1
      30:	00000114 	andeq	r0, r0, r4, lsl r1
      34:	00000116 	andeq	r0, r0, r6, lsl r1
      38:	0000011c 	andeq	r0, r0, ip, lsl r1
      3c:	00000122 	andeq	r0, r0, r2, lsr #2
      40:	00000126 	andeq	r0, r0, r6, lsr #2
      44:	00000128 	andeq	r0, r0, r8, lsr #2
	...
      50:	00000112 	andeq	r0, r0, r2, lsl r1
      54:	00000114 	andeq	r0, r0, r4, lsl r1
		release;
      58:	00000116 	andeq	r0, r0, r6, lsl r1
      5c:	0000011c 	andeq	r0, r0, ip, lsl r1
      60:	00000122 	andeq	r0, r0, r2, lsr #2
      64:	00000124 	andeq	r0, r0, r4, lsr #2
      68:	00000128 	andeq	r0, r0, r8, lsr #2
      6c:	00000128 	andeq	r0, r0, r8, lsr #2
	...
      78:	00000252 	andeq	r0, r0, r2, asr r2
      7c:	00000270 	andeq	r0, r0, r0, ror r2
      80:	00000296 	muleq	r0, r6, r2
      84:	000002c4 	andeq	r0, r0, r4, asr #5
	...
	descriptors [fd] = s;
      90:	000002de 	ldrdeq	r0, [r0], -lr
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	000003ec 	andeq	r0, r0, ip, ror #7
      98:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	if (s == NULL)
      9c:	00000442 	andeq	r0, r0, r2, asr #8
	...
		syserror (EMALLOC, "tcv05");
      a8:	000002fa 	strdeq	r0, [r0], -sl
      ac:	0000031c 	andeq	r0, r0, ip, lsl r3
      b0:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      b4:	00000408 	andeq	r0, r0, r8, lsl #8
	...
      c0:	00000346 	andeq	r0, r0, r6, asr #6
      c4:	00000350 	andeq	r0, r0, r0, asr r3
      c8:	00000352 	andeq	r0, r0, r2, asr r3
      cc:	00000354 	andeq	r0, r0, r4, asr r3
      d0:	00000408 	andeq	r0, r0, r8, lsl #8
      d4:	0000043e 	andeq	r0, r0, lr, lsr r4
	...
      e0:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      e4:	000003d4 	ldrdeq	r0, [r0], -r4
      e8:	000003d6 	ldrdeq	r0, [r0], -r6
      ec:	000003d8 	ldrdeq	r0, [r0], -r8
	...
			curr += 0x1000;
      f8:	000000c8 	andeq	r0, r0, r8, asr #1
      fc:	00000248 	andeq	r0, r0, r8, asr #4
		if (from >= EE_SIZE || upto < from)
     100:	00000001 	andeq	r0, r0, r1
     104:	00000001 	andeq	r0, r0, r1
			upto = EE_SIZE - 1;
     108:	00000248 	andeq	r0, r0, r8, asr #4
     10c:	000002c4 	andeq	r0, r0, r4, asr #5
     110:	000002c4 	andeq	r0, r0, r4, asr #5
     114:	00000494 	muleq	r0, r4, r4
	...
     120:	00000542 	andeq	r0, r0, r2, asr #10
     124:	00000548 	andeq	r0, r0, r8, asr #10
        if (displayCycle)
     128:	00000548 	andeq	r0, r0, r8, asr #10
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	00000548 	andeq	r0, r0, r8, asr #10
     130:	0000054c 	andeq	r0, r0, ip, asr #10
     134:	0000054e 	andeq	r0, r0, lr, asr #10
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	00000548 	andeq	r0, r0, r8, asr #10
            leds(led,1);
     144:	0000054a 	andeq	r0, r0, sl, asr #10
     148:	0000054e 	andeq	r0, r0, lr, asr #10
     14c:	00000550 	andeq	r0, r0, r0, asr r5
	...
            delay(offTime, Check_PERIOD);
     158:	00000560 	andeq	r0, r0, r0, ror #10
     15c:	00000562 	andeq	r0, r0, r2, ror #10
            led = greenLed;
     160:	00000564 	andeq	r0, r0, r4, ror #10
            ch = greenCharacter;
     164:	00000566 	andeq	r0, r0, r6, ror #10
	...
            onTime = greenOn;
     170:	0000059a 	muleq	r0, sl, r5
            offTime = greenOff;
     174:	0000059e 	muleq	r0, lr, r5
            leds(led,1);
     178:	000005a0 	andeq	r0, r0, r0, lsr #11
     17c:	000005a2 	andeq	r0, r0, r2, lsr #11
     180:	000005a4 	andeq	r0, r0, r4, lsr #11
     184:	000005ac 	andeq	r0, r0, ip, lsr #11
	...
        when(&On, Check_PERIOD);
     190:	000005d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     194:	000005d6 	ldrdeq	r0, [r0], -r6
        when(&stopProcess, Stop);
     198:	000005d8 	ldrdeq	r0, [r0], -r8
     19c:	000005de 	ldrdeq	r0, [r0], -lr
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	00000600 	andeq	r0, r0, r0, lsl #12
        leds(led,0);
     1ac:	00000686 	andeq	r0, r0, r6, lsl #13
     1b0:	000006ac 	andeq	r0, r0, ip, lsr #13
     1b4:	00000704 	andeq	r0, r0, r4, lsl #14
	...
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	00000774 	andeq	r0, r0, r4, ror r7
     1c4:	00000776 	andeq	r0, r0, r6, ror r7
     1c8:	00000778 	andeq	r0, r0, r8, ror r7
        if(offTime > 0)
     1cc:	0000078c 	andeq	r0, r0, ip, lsl #15
	...
     1d8:	000007a8 	andeq	r0, r0, r8, lsr #15
        leds(led,0);
     1dc:	000007aa 	andeq	r0, r0, sl, lsr #15
     1e0:	000007ac 	andeq	r0, r0, ip, lsr #15
     1e4:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
	...
}
     1f0:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1f4:	000008f4 	strdeq	r0, [r0], -r4
     1f8:	000008f6 	strdeq	r0, [r0], -r6
     1fc:	000008f8 	strdeq	r0, [r0], -r8
     200:	000008fa 	strdeq	r0, [r0], -sl
     204:	000008fc 	strdeq	r0, [r0], -ip
	...
     210:	00000958 	andeq	r0, r0, r8, asr r9
     214:	0000095c 	andeq	r0, r0, ip, asr r9
     218:	0000096e 	andeq	r0, r0, lr, ror #18
     21c:	0000099a 	muleq	r0, sl, r9
	...
     228:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     22c:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     230:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
     234:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
	...
     240:	000009b4 			; <UNDEFINED> instruction: 0x000009b4
     244:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    word numbers[] = {0, 0, 0, 0};
     248:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    int numbersIndex = 0;
     24c:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    word numbers[] = {0, 0, 0, 0};
     250:	000009c0 	andeq	r0, r0, r0, asr #19
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	000009c6 	andeq	r0, r0, r6, asr #19
        if(settingsInput[i] == ' ') {
     258:	000009d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     25c:	000009d2 	ldrdeq	r0, [r0], -r2
            numbers[numbersIndex] = number;
     260:	000009de 	ldrdeq	r0, [r0], -lr
     264:	000009e0 	andeq	r0, r0, r0, ror #19
	...
    return 0;
     270:	000009f4 	strdeq	r0, [r0], -r4
    redOn = numbers[0];
     274:	000009f4 	strdeq	r0, [r0], -r4
     278:	000009f6 	strdeq	r0, [r0], -r6
    redOff = numbers[1];
     27c:	000009f8 	strdeq	r0, [r0], -r8
	...
    greenOn = numbers[2];
     288:	000009fa 	strdeq	r0, [r0], -sl
    greenOff = numbers[3];
     28c:	000009fc 	strdeq	r0, [r0], -ip
     290:	000009fe 	strdeq	r0, [r0], -lr
}
     294:	00000a00 	andeq	r0, r0, r0, lsl #20
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	00000a0a 	andeq	r0, r0, sl, lsl #20
     29c:	00000a0e 	andeq	r0, r0, lr, lsl #20
            number = number * 10;
     2a0:	00000a18 	andeq	r0, r0, r8, lsl sl
            number += settingsInput[i] - 48;
     2a4:	00000a1a 	andeq	r0, r0, sl, lsl sl
	...
            return 1;
     2b0:	00000afe 	strdeq	r0, [r0], -lr
     2b4:	00000b00 	andeq	r0, r0, r0, lsl #22
     2b8:	00000b02 	andeq	r0, r0, r2, lsl #22
     2bc:	00000b06 	andeq	r0, r0, r6, lsl #22
     2c0:	00000b16 	andeq	r0, r0, r6, lsl fp
fsm root {
     2c4:	00000b18 	andeq	r0, r0, r8, lsl fp
	...
     2d0:	00000b00 	andeq	r0, r0, r0, lsl #22
     2d4:	00000b02 	andeq	r0, r0, r2, lsl #22
     2d8:	00000b06 	andeq	r0, r0, r6, lsl #22
     2dc:	00000b16 	andeq	r0, r0, r6, lsl fp
        ser_outf(Initial, "Enter your name: ");
     2e0:	00000b18 	andeq	r0, r0, r8, lsl fp
     2e4:	00000b52 	andeq	r0, r0, r2, asr fp
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	00000b0a 	andeq	r0, r0, sl, lsl #22
     2f4:	00000b0e 	andeq	r0, r0, lr, lsl #22
     2f8:	00000b36 	andeq	r0, r0, r6, lsr fp
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	00000b3e 	andeq	r0, r0, lr, lsr fp
	...
        if (choice == 'A' || choice == 'a'){
     308:	00000b0e 	andeq	r0, r0, lr, lsl #22
     30c:	00000b12 	andeq	r0, r0, r2, lsl fp
            proceed Adjust_Intervals;
     310:	00000b4a 	andeq	r0, r0, sl, asr #22
            proceed Monitor;
     314:	00000b4e 	andeq	r0, r0, lr, asr #22
	...
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     320:	00000b12 	andeq	r0, r0, r2, lsl fp
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	00000b16 	andeq	r0, r0, r6, lsl fp
     328:	00000b44 	andeq	r0, r0, r4, asr #22
     32c:	00000b4a 	andeq	r0, r0, sl, asr #22
	...
            proceed Adjust_Intervals;
     338:	00000b52 	andeq	r0, r0, r2, asr fp
        if(!blinkerRunning) {
     33c:	00000b54 	andeq	r0, r0, r4, asr fp
     340:	00000b56 	andeq	r0, r0, r6, asr fp
     344:	00000b58 	andeq	r0, r0, r8, asr fp
            blinkerCode = runfsm blinker;
     348:	00000b5a 	andeq	r0, r0, sl, asr fp
            blinkerRunning = YES;
     34c:	00000b5c 	andeq	r0, r0, ip, asr fp
	...
        trigger(&On);
     358:	00000b54 	andeq	r0, r0, r4, asr fp
        proceed Show_Menu;
     35c:	00000b56 	andeq	r0, r0, r6, asr fp
     360:	00000b5c 	andeq	r0, r0, ip, asr fp
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	00000b5e 	andeq	r0, r0, lr, asr fp
	...
     370:	00000b6e 	andeq	r0, r0, lr, ror #22
     374:	00000b70 	andeq	r0, r0, r0, ror fp
     378:	00000b72 	andeq	r0, r0, r2, ror fp
     37c:	00000b74 	andeq	r0, r0, r4, ror fp
	...
        ser_outf(Monitor, "Monitor (press S to stop): ");
     388:	00000b86 	andeq	r0, r0, r6, lsl #23
        displayCycle = YES;
     38c:	00000b88 	andeq	r0, r0, r8, lsl #23
     390:	00000b8a 	andeq	r0, r0, sl, lsl #23
        ser_inf(Await_Stop, "%c", &ch);
     394:	00000b8c 	andeq	r0, r0, ip, lsl #23
	...
        if(ch == 'S' || ch == 's'){
     3a0:	00000bce 	andeq	r0, r0, lr, asr #23
     3a4:	00000bce 	andeq	r0, r0, lr, asr #23
            displayCycle = NO;
     3a8:	00000bd2 	ldrdeq	r0, [r0], -r2
            proceed Show_Menu;
     3ac:	00000bd4 	ldrdeq	r0, [r0], -r4
	...
        proceed Monitor;
     3b8:	00000c04 	andeq	r0, r0, r4, lsl #24
        On = NO;
     3bc:	00000c06 	andeq	r0, r0, r6, lsl #24
        if(blinkerCode != 0x0) {
     3c0:	00000c08 	andeq	r0, r0, r8, lsl #24
     3c4:	00000c10 	andeq	r0, r0, r0, lsl ip
	...
     3d0:	00000c8c 	andeq	r0, r0, ip, lsl #25
        proceed Show_Menu;
     3d4:	00000c8c 	andeq	r0, r0, ip, lsl #25
     3d8:	00000c92 	muleq	r0, r2, ip
        leds_all(0);
     3dc:	00000c94 	muleq	r0, r4, ip
     3e0:	00000c96 	muleq	r0, r6, ip
     3e4:	00000c9a 	muleq	r0, sl, ip
	...
        } else if (choice == 'S' || choice == 's') {
     3f0:	00000ca6 	andeq	r0, r0, r6, lsr #25
            proceed Stop;
     3f4:	00000ca8 	andeq	r0, r0, r8, lsr #25
        } else if (choice == 'V' || choice == 'v') {
     3f8:	00000cbe 			; <UNDEFINED> instruction: 0x00000cbe
            proceed View_Settings;
     3fc:	00000cc0 	andeq	r0, r0, r0, asr #25
        } else if (choice == 'M' || choice == 'm') {
     400:	00000cd2 	ldrdeq	r0, [r0], -r2
            proceed Monitor;
     404:	00000cee 	andeq	r0, r0, lr, ror #25
     408:	00000d12 	andeq	r0, r0, r2, lsl sp
     40c:	00000e6c 	andeq	r0, r0, ip, ror #28
	...
            leds_all(0);
     418:	00000ca6 	andeq	r0, r0, r6, lsr #25
     41c:	00000ca8 	andeq	r0, r0, r8, lsr #25
            killall(blinkerCode);
     420:	00000d46 	andeq	r0, r0, r6, asr #26
            sint runningNumber = crunning(blinkerCode);
     424:	00000d4a 	andeq	r0, r0, sl, asr #26
	...
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	00000d4a 	andeq	r0, r0, sl, asr #26
            trigger(&stopProcess);
     434:	00000d4a 	andeq	r0, r0, sl, asr #26
     438:	00000d4e 	andeq	r0, r0, lr, asr #26
            blinkerCode = runfsm blinker;
     43c:	00000d52 	andeq	r0, r0, r2, asr sp
     440:	00000d56 	andeq	r0, r0, r6, asr sp
     444:	00000d58 	andeq	r0, r0, r8, asr sp
	...
     450:	00000d4a 	andeq	r0, r0, sl, asr #26
     454:	00000d4e 	andeq	r0, r0, lr, asr #26
     458:	00000d64 	andeq	r0, r0, r4, ror #26
     45c:	00000d66 	andeq	r0, r0, r6, ror #26
     460:	00000d6a 	andeq	r0, r0, sl, ror #26
     464:	00000d6e 	andeq	r0, r0, lr, ror #26
	...
     470:	00000d52 	andeq	r0, r0, r2, asr sp
     474:	00000d56 	andeq	r0, r0, r6, asr sp
     478:	00000d58 	andeq	r0, r0, r8, asr sp
     47c:	00000d5a 	andeq	r0, r0, sl, asr sp
     480:	00000d5e 	andeq	r0, r0, lr, asr sp
     484:	00000d62 	andeq	r0, r0, r2, ror #26
	...
     490:	00000d66 	andeq	r0, r0, r6, ror #26
static void devinit_uart (int devnum) {
     494:	00000d6a 	andeq	r0, r0, sl, ror #26
	adddevfunc (ioreq_uart_a, devnum);
     498:	00000d84 	andeq	r0, r0, r4, lsl #27
     49c:	00000d88 	andeq	r0, r0, r8, lsl #27
void udelay (volatile word n) {
     4a0:	00000d8a 	andeq	r0, r0, sl, lsl #27
     4a4:	00000d92 	muleq	r0, r2, sp
	...
}
     4b0:	00000d7c 	andeq	r0, r0, ip, ror sp
	while (n--);
     4b4:	00000d7e 	andeq	r0, r0, lr, ror sp
     4b8:	00000d80 	andeq	r0, r0, r0, lsl #27
     4bc:	00000d84 	andeq	r0, r0, r4, lsl #27
	...
		n--;
     4c8:	00000dc0 	andeq	r0, r0, r0, asr #27
void mdelay (volatile word n) {
     4cc:	00000dc4 	andeq	r0, r0, r4, asr #27
     4d0:	00000dc6 	andeq	r0, r0, r6, asr #27
	while (n) {
     4d4:	00000dce 	andeq	r0, r0, lr, asr #27
	...
		udelay (999);
     4e0:	00000dc4 	andeq	r0, r0, r4, asr #27
     4e4:	00000dc6 	andeq	r0, r0, r6, asr #27
		n--;
     4e8:	00000dd2 	ldrdeq	r0, [r0], -r2
     4ec:	00000dd4 	ldrdeq	r0, [r0], -r4
	...
void __pi_ondomain (lword d) {
     4f8:	00000df2 	strdeq	r0, [r0], -r2
     4fc:	00000df4 	strdeq	r0, [r0], -r4
		if (__pi_systat.effpdm > 1)
     500:	00000df6 	strdeq	r0, [r0], -r6
     504:	00000df8 	strdeq	r0, [r0], -r8
	...
	PRCMPowerDomainOn (d);
     510:	00000df4 	strdeq	r0, [r0], -r4
     514:	00000df6 	strdeq	r0, [r0], -r6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	00000df8 	strdeq	r0, [r0], -r8
     51c:	00000dfc 	strdeq	r0, [r0], -ip
	...
	__pi_systat.ondmns |= d;
     528:	00000e52 	andeq	r0, r0, r2, asr lr
}
     52c:	00000e54 	andeq	r0, r0, r4, asr lr
     530:	00000e54 	andeq	r0, r0, r4, asr lr
void __pi_syserror (word ec, const char *m) {
     534:	00000e56 	andeq	r0, r0, r6, asr lr
	...
     540:	00000e5a 	andeq	r0, r0, sl, asr lr
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	00000e5e 	andeq	r0, r0, lr, asr lr
     548:	00000e60 	andeq	r0, r0, r0, ror #28
     54c:	00000e62 	andeq	r0, r0, r2, ror #28
	...
		all_leds_blink;
     558:	00000001 	andeq	r0, r0, r1
     55c:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	00000001 	andeq	r0, r0, r1
     564:	00000001 	andeq	r0, r0, r1
	...
     570:	00000ee4 	andeq	r0, r0, r4, ror #29
     574:	00000ee4 	andeq	r0, r0, r4, ror #29
	while (1) {
     578:	00000ee8 	andeq	r0, r0, r8, ror #29
     57c:	00000ef4 	strdeq	r0, [r0], -r4
	...
void tci_run_delay_timer () {
     588:	00000494 	muleq	r0, r4, r4
	setdel = __pi_mintk - __pi_old;
     58c:	000004a0 	andeq	r0, r0, r0, lsr #9
     590:	000004a0 	andeq	r0, r0, r0, lsr #9
     594:	000004cc 	andeq	r0, r0, ip, asr #9
     598:	000004cc 	andeq	r0, r0, ip, asr #9
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	000004f6 	strdeq	r0, [r0], -r6
     5a0:	000004f8 	strdeq	r0, [r0], -r8
     5a4:	00000534 	andeq	r0, r0, r4, lsr r5
     5a8:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	00000001 	andeq	r0, r0, r1
	sti_tim;
     5b0:	00000001 	andeq	r0, r0, r1
}
     5b4:	00000001 	andeq	r0, r0, r1
     5b8:	00000534 	andeq	r0, r0, r4, lsr r5
     5bc:	00000588 	andeq	r0, r0, r8, lsl #11
     5c0:	00000588 	andeq	r0, r0, r8, lsl #11
     5c4:	000005c8 	andeq	r0, r0, r8, asr #11
	cli_aux;
     5c8:	000005c8 	andeq	r0, r0, r8, asr #11
     5cc:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5d4:	00000704 	andeq	r0, r0, r4, lsl #14
     5d8:	00000704 	andeq	r0, r0, r4, lsl #14
     5dc:	00000754 	andeq	r0, r0, r4, asr r7
	sti_aux;
     5e0:	00000754 	andeq	r0, r0, r4, asr r7
}
     5e4:	000007a8 	andeq	r0, r0, r8, lsr #15
     5e8:	000007a8 	andeq	r0, r0, r8, lsr #15
     5ec:	000007e0 	andeq	r0, r0, r0, ror #15
void AONRTCIntHandler () {
     5f0:	000007e0 	andeq	r0, r0, r0, ror #15
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5f8:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [0] == 0)
     600:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     604:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
		if (*(__pi_utims [0])) {
     608:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
     60c:	000009f4 	strdeq	r0, [r0], -r4
			(*(__pi_utims [0]))--;
     610:	000009f4 	strdeq	r0, [r0], -r4
		if (__pi_utims [1] == 0)
     614:	00000a30 	andeq	r0, r0, r0, lsr sl
		if (*(__pi_utims [1])) {
     618:	00000a30 	andeq	r0, r0, r0, lsr sl
			aux_timer_inactive = 0;
     61c:	00000ad4 	ldrdeq	r0, [r0], -r4
			(*(__pi_utims [1]))--;
     620:	00000ad4 	ldrdeq	r0, [r0], -r4
		if (__pi_utims [2] == 0)
     624:	00000c8c 	andeq	r0, r0, ip, lsl #25
		if (*(__pi_utims [2])) {
     628:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [2]))--;
     62c:	00000001 	andeq	r0, r0, r1
		if (__pi_utims [3] != 0) {
     630:	00000001 	andeq	r0, r0, r1
			if (*(__pi_utims [3])) {
     634:	00000001 	andeq	r0, r0, r1
				aux_timer_inactive = 0;
     638:	00000c8c 	andeq	r0, r0, ip, lsl #25
				(*(__pi_utims [3]))--;
     63c:	00000ee4 	andeq	r0, r0, r4, ror #29
	if (__pi_systat.ledsts) {
     640:	00000001 	andeq	r0, r0, r1
     644:	00000001 	andeq	r0, r0, r1
		if (__pi_systat.ledblc++ == 0) {
     648:	00000001 	andeq	r0, r0, r1
     64c:	00000001 	andeq	r0, r0, r1
			if (__pi_systat.ledblk) {
     650:	00000ee4 	andeq	r0, r0, r4, ror #29
     654:	00000f44 	andeq	r0, r0, r4, asr #30
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     660:	00001000 	andeq	r1, r0, r0
				if (__pi_systat.ledsts & 0x2)
     664:	00001002 	andeq	r1, r0, r2
     668:	00001002 	andeq	r1, r0, r2
     66c:	00001004 	andeq	r1, r0, r4
	...
				__pi_systat.ledblk = 0;
     678:	00001036 	andeq	r1, r0, r6, lsr r0
			if (__pi_systat.fstblk)
     67c:	000010d8 	ldrdeq	r1, [r0], -r8
     680:	000010dc 	ldrdeq	r1, [r0], -ip
				__pi_systat.ledblc = 200;
     684:	000010e0 	andeq	r1, r0, r0, ror #1
	...
		__pi_new += setdel;
     690:	000014ec 	andeq	r1, r0, ip, ror #9
     694:	000014ee 	andeq	r1, r0, lr, ror #9
		setdel = 0;
     698:	000014f2 	strdeq	r1, [r0], -r2
		RISE_N_SHINE;
     69c:	000014f4 	strdeq	r1, [r0], -r4
		__pi_new += setdel;
     6a0:	000014f8 	strdeq	r1, [r0], -r8
		RISE_N_SHINE;
     6a4:	000014fc 	strdeq	r1, [r0], -ip
     6a8:	000014fe 	strdeq	r1, [r0], -lr
		aux_timer_inactive = 1;
     6ac:	00001508 	andeq	r1, r0, r8, lsl #10
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b8:	0000153a 	andeq	r1, r0, sl, lsr r5
     6bc:	0000153c 	andeq	r1, r0, ip, lsr r5
				if (__pi_systat.ledsts & 0x2)
     6c0:	0000153e 	andeq	r1, r0, lr, lsr r5
     6c4:	00001542 	andeq	r1, r0, r2, asr #10
     6c8:	000015d2 	ldrdeq	r1, [r0], -r2
				if (__pi_systat.ledsts & 0x8)
     6cc:	00001634 	andeq	r1, r0, r4, lsr r6
				__pi_systat.ledblk = 1;
     6d0:	00001638 	andeq	r1, r0, r8, lsr r6
     6d4:	0000163c 	andeq	r1, r0, ip, lsr r6
		if (aux_timer_inactive) {
     6d8:	0000163e 	andeq	r1, r0, lr, lsr r6
			cli_aux;
     6dc:	00001640 	andeq	r1, r0, r0, asr #12
	...
     6e8:	00001556 	andeq	r1, r0, r6, asr r5
     6ec:	00001558 	andeq	r1, r0, r8, asr r5
     6f0:	00001558 	andeq	r1, r0, r8, asr r5
     6f4:	0000155a 	andeq	r1, r0, sl, asr r5
	...
     700:	00000f44 	andeq	r0, r0, r4, asr #30
word tci_update_delay_ticks (Boolean force) {
     704:	00000f80 	andeq	r0, r0, r0, lsl #31
	cli_tim;
     708:	00000f80 	andeq	r0, r0, r0, lsl #31
     70c:	00001000 	andeq	r1, r0, r0
	if (setdel) {
     710:	00001000 	andeq	r1, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	00001018 	andeq	r1, r0, r8, lsl r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
     720:	00001018 	andeq	r1, r0, r8, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	00001028 	andeq	r1, r0, r8, lsr #32
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	00000001 	andeq	r0, r0, r1
	return NO;
     72c:	00000001 	andeq	r0, r0, r1
			setdel = 0;
     730:	00000001 	andeq	r0, r0, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	00000001 	andeq	r0, r0, r1
     738:	00000001 	andeq	r0, r0, r1
}
     73c:	00000001 	andeq	r0, r0, r1
		sti_tim;
     740:	00001028 	andeq	r1, r0, r8, lsr #32
		return YES;
     744:	000010f4 	strdeq	r1, [r0], -r4
     748:	000010f4 	strdeq	r1, [r0], -r4
     74c:	00001108 	andeq	r1, r0, r8, lsl #2
     750:	00001108 	andeq	r1, r0, r8, lsl #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	0000113c 	andeq	r1, r0, ip, lsr r1
	UARTDisable (UART0_BASE);
     758:	0000113c 	andeq	r1, r0, ip, lsr r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	00001170 	andeq	r1, r0, r0, ror r1
	UARTDisable (UART0_BASE);
     760:	00000001 	andeq	r0, r0, r1
	UARTConfigSetExpClk (UART0_BASE,
     764:	00000001 	andeq	r0, r0, r1
     768:	00001170 	andeq	r1, r0, r0, ror r1
     76c:	00001194 	muleq	r0, r4, r1
     770:	00001194 	muleq	r0, r4, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	000011cc 	andeq	r1, r0, ip, asr #3
     778:	00000001 	andeq	r0, r0, r1
     77c:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	00000001 	andeq	r0, r0, r1
     784:	00000001 	andeq	r0, r0, r1
     788:	00000001 	andeq	r0, r0, r1
	urates [0] = rate;
     78c:	00000001 	andeq	r0, r0, r1
}
     790:	000011cc 	andeq	r1, r0, ip, asr #3
     794:	000011f0 	strdeq	r1, [r0], -r0
     798:	000011f0 	strdeq	r1, [r0], -r0
     79c:	00001210 	andeq	r1, r0, r0, lsl r2
     7a0:	00001210 	andeq	r1, r0, r0, lsl r2
     7a4:	0000121e 	andeq	r1, r0, lr, lsl r2
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	00000001 	andeq	r0, r0, r1
     7ac:	00000001 	andeq	r0, r0, r1
     7b0:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	00000001 	andeq	r0, r0, r1
     7b8:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	00000001 	andeq	r0, r0, r1
     7c0:	00000001 	andeq	r0, r0, r1
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	00000001 	andeq	r0, r0, r1
     7c8:	0000121e 	andeq	r1, r0, lr, lsl r2
     7cc:	00001232 	andeq	r1, r0, r2, lsr r2
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	00000001 	andeq	r0, r0, r1
     7d8:	00001234 	andeq	r1, r0, r4, lsr r2
     7dc:	00001258 	andeq	r1, r0, r8, asr r2
	switch (operation) {
     7e0:	00001258 	andeq	r1, r0, r8, asr r2
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	000012f4 	strdeq	r1, [r0], -r4
     7e8:	000012f4 	strdeq	r1, [r0], -r4
     7ec:	00001344 	andeq	r1, r0, r4, asr #6
     7f0:	00001344 	andeq	r1, r0, r4, asr #6
     7f4:	0000138c 	andeq	r1, r0, ip, lsl #7
				*buf++ = uart_a_read;
     7f8:	0000138c 	andeq	r1, r0, ip, lsl #7
     7fc:	000013dc 	ldrdeq	r1, [r0], -ip
			while (len && uart_a_char_available) {
     800:	000013dc 	ldrdeq	r1, [r0], -ip
     804:	00001434 	andeq	r1, r0, r4, lsr r4
     808:	00001434 	andeq	r1, r0, r4, lsr r4
			if (len != operation) {
     80c:	000014dc 	ldrdeq	r1, [r0], -ip
}
     810:	000014dc 	ldrdeq	r1, [r0], -ip
     814:	00001510 	andeq	r1, r0, r0, lsl r5
			uart_a_disable_int;
     818:	00001510 	andeq	r1, r0, r0, lsl r5
			if (uart_a_char_available) {
     81c:	00001528 	andeq	r1, r0, r8, lsr #10
				*buf++ = uart_a_read;
     820:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
			if (uart_a_char_available) {
     82c:	00000001 	andeq	r0, r0, r1
     830:	00001528 	andeq	r1, r0, r8, lsr #10
				uart_a_enable_int;
     834:	00001664 	andeq	r1, r0, r4, ror #12
     838:	00000001 	andeq	r0, r0, r1
				goto Redo_rx;
     83c:	00000001 	andeq	r0, r0, r1
	...
			return -2;
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
			while (len && uart_a_room_in_tx) {
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
	...
			uart_a_disable_int;
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
	...
				*buf++ = uart_a_read;
     880:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     884:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
			uart_a_enable_int;
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
			return 0;
     8a4:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     8a8:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
				syserror (EREQPAR, "uar");
     8b8:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     8bc:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     8c0:	00000001 	andeq	r0, r0, r1
				return 1;
     8c4:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00000001 	andeq	r0, r0, r1
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
     8f4:	00000001 	andeq	r0, r0, r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00000001 	andeq	r0, r0, r1
     904:	00000001 	andeq	r0, r0, r1
     908:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	00000001 	andeq	r0, r0, r1
     910:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     914:	00000001 	andeq	r0, r0, r1
     918:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     91c:	00000001 	andeq	r0, r0, r1
     920:	00000001 	andeq	r0, r0, r1
     924:	00000001 	andeq	r0, r0, r1
     928:	00000001 	andeq	r0, r0, r1
     92c:	00000001 	andeq	r0, r0, r1
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	00000001 	andeq	r0, r0, r1
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     958:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	00000001 	andeq	r0, r0, r1
     960:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     964:	00000001 	andeq	r0, r0, r1
     968:	00001664 	andeq	r1, r0, r4, ror #12
     96c:	00001666 	andeq	r1, r0, r6, ror #12
	...
		i_trigger (devevent (UART_A, WRITE));
     978:	00001666 	andeq	r1, r0, r6, ror #12
     97c:	00001668 	andeq	r1, r0, r8, ror #12
     980:	00001668 	andeq	r1, r0, r8, ror #12
     984:	0000166a 	andeq	r1, r0, sl, ror #12
     988:	0000166a 	andeq	r1, r0, sl, ror #12
     98c:	0000166c 	andeq	r1, r0, ip, ror #12
     990:	0000166c 	andeq	r1, r0, ip, ror #12
     994:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
	...
}
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
     9a8:	00000001 	andeq	r0, r0, r1
     9ac:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
     9b0:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	00000001 	andeq	r0, r0, r1
	...
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	00000001 	andeq	r0, r0, r1
     9d0:	00000001 	andeq	r0, r0, r1
     9d4:	00000001 	andeq	r0, r0, r1
	...
     9e0:	00000001 	andeq	r0, r0, r1
}
     9e4:	00000001 	andeq	r0, r0, r1
     9e8:	00000001 	andeq	r0, r0, r1
     9ec:	00000001 	andeq	r0, r0, r1
     9f0:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     9f4:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	00000001 	andeq	r0, r0, r1
	...
     a08:	00000001 	andeq	r0, r0, r1
     a0c:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a10:	00000001 	andeq	r0, r0, r1
     a14:	00000001 	andeq	r0, r0, r1
	...
}
     a20:	00000001 	andeq	r0, r0, r1
     a24:	00000001 	andeq	r0, r0, r1
     a28:	00000001 	andeq	r0, r0, r1
     a2c:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     a30:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     a34:	00000001 	andeq	r0, r0, r1
	...
	buttons_disable ();
     a40:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     a44:	00000001 	andeq	r0, r0, r1
     a48:	00000001 	andeq	r0, r0, r1
     a4c:	00000001 	andeq	r0, r0, r1
	...
     a58:	000016bc 			; <UNDEFINED> instruction: 0x000016bc
     a5c:	000016c0 	andeq	r1, r0, r0, asr #13
     a60:	000016c6 	andeq	r1, r0, r6, asr #13
     a64:	000016c8 	andeq	r1, r0, r8, asr #13
     a68:	000016d6 	ldrdeq	r1, [r0], -r6
     a6c:	000016d6 	ldrdeq	r1, [r0], -r6
	RISE_N_SHINE;
     a70:	000016d8 	ldrdeq	r1, [r0], -r8
     a74:	000016da 	ldrdeq	r1, [r0], -sl
	...
if (pin_sensor_int) {
     a80:	000016c2 	andeq	r1, r0, r2, asr #13
	i_trigger ((aword)(&__input_pins));
     a84:	000016c4 	andeq	r1, r0, r4, asr #13
     a88:	000016da 	ldrdeq	r1, [r0], -sl
     a8c:	000016dc 	ldrdeq	r1, [r0], -ip
	...
     a98:	000016c4 	andeq	r1, r0, r4, asr #13
     a9c:	000016c6 	andeq	r1, r0, r6, asr #13
     aa0:	000016c8 	andeq	r1, r0, r8, asr #13
     aa4:	000016ca 	andeq	r1, r0, sl, asr #13
     aa8:	000016d0 	ldrdeq	r1, [r0], -r0
     aac:	000016d0 	ldrdeq	r1, [r0], -r0
	...
	RISE_N_SHINE;
     ab8:	000016f4 	strdeq	r1, [r0], -r4
     abc:	000016fc 	strdeq	r1, [r0], -ip
}
     ac0:	00001706 	andeq	r1, r0, r6, lsl #14
     ac4:	00001706 	andeq	r1, r0, r6, lsl #14
     ac8:	0000170a 	andeq	r1, r0, sl, lsl #14
     acc:	0000170c 	andeq	r1, r0, ip, lsl #14
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	0000170c 	andeq	r1, r0, ip, lsl #14
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	0000170c 	andeq	r1, r0, ip, lsl #14
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	0000170e 	andeq	r1, r0, lr, lsl #14
     ae4:	00001710 	andeq	r1, r0, r0, lsl r7
	...
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     af0:	0000171c 	andeq	r1, r0, ip, lsl r7
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	0000171e 	andeq	r1, r0, lr, lsl r7
     af8:	00001720 	andeq	r1, r0, r0, lsr #14
     afc:	00001724 	andeq	r1, r0, r4, lsr #14
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	0000173c 	andeq	r1, r0, ip, lsr r7
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	0000173e 	andeq	r1, r0, lr, lsr r7
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	00001742 	andeq	r1, r0, r2, asr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	00001744 	andeq	r1, r0, r4, asr #14
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	0000174a 	andeq	r1, r0, sl, asr #14
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	0000175a 	andeq	r1, r0, sl, asr r7
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b28:	0000173c 	andeq	r1, r0, ip, lsr r7
     b2c:	0000173e 	andeq	r1, r0, lr, lsr r7
     b30:	00001742 	andeq	r1, r0, r2, asr #14
		if (port_confs [i] & 0x80)
     b34:	00001744 	andeq	r1, r0, r4, asr #14
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	0000174a 	andeq	r1, r0, sl, asr #14
     b3c:	0000174a 	andeq	r1, r0, sl, asr #14
		if (port_confs [i] & 0x40)
     b40:	0000174c 	andeq	r1, r0, ip, asr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	0000174e 	andeq	r1, r0, lr, asr #14
	...
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	000017a2 	andeq	r1, r0, r2, lsr #15
     b54:	000017a6 	andeq	r1, r0, r6, lsr #15
	all_leds_blink;
     b58:	000017a8 	andeq	r1, r0, r8, lsr #15
     b5c:	000017aa 	andeq	r1, r0, sl, lsr #15
	...
     b68:	000017ae 	andeq	r1, r0, lr, lsr #15
     b6c:	000017ae 	andeq	r1, r0, lr, lsr #15
     b70:	000017b0 			; <UNDEFINED> instruction: 0x000017b0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	000017b2 			; <UNDEFINED> instruction: 0x000017b2
	...
     b80:	00000001 	andeq	r0, r0, r1
     b84:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	00000001 	andeq	r0, r0, r1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_RTC_COMB);
     b98:	00000001 	andeq	r0, r0, r1
     b9c:	00000001 	andeq	r0, r0, r1
	__pi_malloc_init ();
     ba0:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_GPIO_EDGE);
     ba4:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	00000001 	andeq	r0, r0, r1
     bb4:	00000001 	andeq	r0, r0, r1
     bb8:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc8:	00000001 	andeq	r0, r0, r1
     bcc:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     bd0:	00000001 	andeq	r0, r0, r1
     bd4:	00000001 	andeq	r0, r0, r1
	...
	EXTRA_INITIALIZERS;
     be0:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	000016ec 	andeq	r1, r0, ip, ror #13
     be8:	000016ec 	andeq	r1, r0, ip, ror #13
     bec:	0000171c 	andeq	r1, r0, ip, lsl r7
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	0000171c 	andeq	r1, r0, ip, lsl r7
     bf4:	00001734 	andeq	r1, r0, r4, lsr r7
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	00001734 	andeq	r1, r0, r4, lsr r7
     bfc:	00001788 	andeq	r1, r0, r8, lsl #15
			devinit [i] . init (devinit [i] . param);
     c00:	00001788 	andeq	r1, r0, r8, lsl #15
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	000017c8 	andeq	r1, r0, r8, asr #15
     c08:	000017c8 	andeq	r1, r0, r8, asr #15
     c0c:	000017ec 	andeq	r1, r0, ip, ror #15
	IntEnable (INT_UART0_COMB);
     c10:	000017ec 	andeq	r1, r0, ip, ror #15
     c14:	00001800 	andeq	r1, r0, r0, lsl #16
}
     c18:	00001800 	andeq	r1, r0, r0, lsl #16
	tci_run_auxiliary_timer ();
     c1c:	00001814 	andeq	r1, r0, r4, lsl r8
		diag ("");
     c20:	00000001 	andeq	r0, r0, r1
     c24:	00000001 	andeq	r0, r0, r1
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c28:	00000001 	andeq	r0, r0, r1
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	00000001 	andeq	r0, r0, r1
		diag ("Leftover RAM: %d bytes",
     c30:	00000001 	andeq	r0, r0, r1
     c34:	00000001 	andeq	r0, r0, r1
     c38:	00000001 	andeq	r0, r0, r1
     c3c:	00000001 	andeq	r0, r0, r1
     c40:	00000001 	andeq	r0, r0, r1
     c44:	00000001 	andeq	r0, r0, r1
     c48:	00000001 	andeq	r0, r0, r1
     c4c:	00000001 	andeq	r0, r0, r1
     c50:	00000001 	andeq	r0, r0, r1
     c54:	00000001 	andeq	r0, r0, r1
	...
     c60:	00001814 	andeq	r1, r0, r4, lsl r8
     c64:	0000188c 	andeq	r1, r0, ip, lsl #17
	...
     c70:	0000188c 	andeq	r1, r0, ip, lsl #17
     c74:	000018e0 	andeq	r1, r0, r0, ror #17
	...
     c80:	000018e0 	andeq	r1, r0, r0, ror #17
     c84:	00001940 	andeq	r1, r0, r0, asr #18
	...
__attribute__ ((noreturn)) void __pi_release () {
     c90:	0000194e 	andeq	r1, r0, lr, asr #18
     c94:	0000194e 	andeq	r1, r0, lr, asr #18
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	00001954 	andeq	r1, r0, r4, asr r9
	check_stack_overflow;
     c9c:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
	...
	update_n_wake (MAX_WORD, NO);
     ca8:	00001940 	andeq	r1, r0, r0, asr #18
     cac:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
	...
	for_all_tasks (__pi_curr) {
     cb8:	000019c4 	andeq	r1, r0, r4, asr #19
     cbc:	00001aa8 	andeq	r1, r0, r8, lsr #21
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	00001aae 	andeq	r1, r0, lr, lsr #21
	__SLEEP;
     cc4:	00001ab2 			; <UNDEFINED> instruction: 0x00001ab2
     cc8:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
     ccc:	00001acc 	andeq	r1, r0, ip, asr #21
	...
	system_event_count ++;
     cd8:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
	switch (__pi_systat.effpdm) {
     cdc:	00001acc 	andeq	r1, r0, ip, asr #21
	...
     ce8:	00001af8 	strdeq	r1, [r0], -r8
			__WFI ();
     cec:	00001afa 	strdeq	r1, [r0], -sl
     cf0:	00001bc8 	andeq	r1, r0, r8, asr #23
     cf4:	00001bec 	andeq	r1, r0, ip, ror #23
	check_stack_overflow;
     cf8:	00001bee 	andeq	r1, r0, lr, ror #23
     cfc:	00001c36 	andeq	r1, r0, r6, lsr ip
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     d00:	00001c60 	andeq	r1, r0, r0, ror #24
     d04:	00001c62 	andeq	r1, r0, r2, ror #24
	...
	for_all_tasks (__pi_curr) {
     d10:	00001afa 	strdeq	r1, [r0], -sl
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	00001afc 	strdeq	r1, [r0], -ip
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	00001b9e 	muleq	r0, lr, fp
     d1c:	00001bc8 	andeq	r1, r0, r8, asr #23
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	00001bec 	andeq	r1, r0, ip, ror #23
     d24:	00001bee 	andeq	r1, r0, lr, ror #23
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d30:	00001b3a 	andeq	r1, r0, sl, lsr fp
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	00001b42 	andeq	r1, r0, r2, asr #22
     d38:	00001ce6 	andeq	r1, r0, r6, ror #25
			__WFI ();
     d3c:	00001cf2 	strdeq	r1, [r0], -r2
	...
}
     d48:	00001c40 	andeq	r1, r0, r0, asr #24
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	00001c60 	andeq	r1, r0, r0, ror #24
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	00001c62 	andeq	r1, r0, r2, ror #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	00001ca6 	andeq	r1, r0, r6, lsr #25
	...
     d60:	00001acc 	andeq	r1, r0, ip, asr #21
     d64:	00001aec 	andeq	r1, r0, ip, ror #21
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	00001aec 	andeq	r1, r0, ip, ror #21
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	00001d1c 	andeq	r1, r0, ip, lsl sp
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d70:	00001d1c 	andeq	r1, r0, ip, lsl sp
     d74:	00001d6c 	andeq	r1, r0, ip, ror #26
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d80:	00001d80 	andeq	r1, r0, r0, lsl #27
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	00001d84 	andeq	r1, r0, r4, lsl #27
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	0000205e 	andeq	r2, r0, lr, asr r0
     d8c:	000020a6 	andeq	r2, r0, r6, lsr #1
	...
     d98:	00001d84 	andeq	r1, r0, r4, lsl #27
			SysCtrlSetRechargeBeforePowerDown
     d9c:	00001d8a 	andeq	r1, r0, sl, lsl #27
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da0:	00001dc2 	andeq	r1, r0, r2, asr #27
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da4:	00001e2e 	andeq	r1, r0, lr, lsr #28
     da8:	000020c2 	andeq	r2, r0, r2, asr #1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	000020e2 	andeq	r2, r0, r2, ror #1
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	00001ee6 	andeq	r1, r0, r6, ror #29
     dbc:	00001f60 	andeq	r1, r0, r0, ror #30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	000020ea 	andeq	r2, r0, sl, ror #1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	000020f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dd0:	00001f78 	andeq	r1, r0, r8, ror pc
			while (!(AONWUCPowerStatusGet () &
     dd4:	00001fce 	andeq	r1, r0, lr, asr #31
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	00002044 	andeq	r2, r0, r4, asr #32
     ddc:	0000205e 	andeq	r2, r0, lr, asr r0
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de8:	00001fd4 	ldrdeq	r1, [r0], -r4
     dec:	00002044 	andeq	r2, r0, r4, asr #32
     df0:	000020a6 	andeq	r2, r0, r6, lsr #1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	000020ae 	andeq	r2, r0, lr, lsr #1
     df8:	000020f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	000020fc 	strdeq	r2, [r0], -ip
	...
			reinit_uart ();
     e08:	00001d6c 	andeq	r1, r0, ip, ror #26
     e0c:	000020fc 	strdeq	r2, [r0], -ip
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	000020fc 	strdeq	r2, [r0], -ip
     e1c:	0000212c 	andeq	r2, r0, ip, lsr #2
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e28:	00000001 	andeq	r0, r0, r1
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	00000001 	andeq	r0, r0, r1
     e30:	0000212c 	andeq	r2, r0, ip, lsr #2
     e34:	00002144 	andeq	r2, r0, r4, asr #2
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	00002144 	andeq	r2, r0, r4, asr #2
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	0000214c 	andeq	r2, r0, ip, asr #2
     e48:	00000001 	andeq	r0, r0, r1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	00000001 	andeq	r0, r0, r1
     e50:	0000214c 	andeq	r2, r0, ip, asr #2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	00002154 	andeq	r2, r0, r4, asr r1
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	00000001 	andeq	r0, r0, r1
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	00000001 	andeq	r0, r0, r1
     e60:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (
     e64:	00000001 	andeq	r0, r0, r1
	...
	__SLEEP;
     e70:	00002154 	andeq	r2, r0, r4, asr r1
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	00002228 	andeq	r2, r0, r8, lsr #4
	goto Redo;
     e78:	00002228 	andeq	r2, r0, r8, lsr #4
     e7c:	000022cc 	andeq	r2, r0, ip, asr #5
	...
     e88:	000022da 	ldrdeq	r2, [r0], -sl
     e8c:	000022dc 	ldrdeq	r2, [r0], -ip
     e90:	000022e0 	andeq	r2, r0, r0, ror #5
     e94:	000022e4 	andeq	r2, r0, r4, ror #5
	...
     ea0:	000025e8 	andeq	r2, r0, r8, ror #11
     ea4:	000025ea 	andeq	r2, r0, sl, ror #11
     ea8:	000025ec 	andeq	r2, r0, ip, ror #11
     eac:	000025ee 	andeq	r2, r0, lr, ror #11
	...
     eb8:	000022cc 	andeq	r2, r0, ip, asr #5
     ebc:	00002348 	andeq	r2, r0, r8, asr #6
     ec0:	00002348 	andeq	r2, r0, r8, asr #6
     ec4:	000023f4 	strdeq	r2, [r0], -r4
     ec8:	000023f4 	strdeq	r2, [r0], -r4
     ecc:	00002450 	andeq	r2, r0, r0, asr r4
     ed0:	00002450 	andeq	r2, r0, r0, asr r4
     ed4:	00002468 	andeq	r2, r0, r8, ror #8
     ed8:	00000001 	andeq	r0, r0, r1
     edc:	00000001 	andeq	r0, r0, r1
     ee0:	00002468 	andeq	r2, r0, r8, ror #8
int main (void) {
     ee4:	00002478 	andeq	r2, r0, r8, ror r4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	00002478 	andeq	r2, r0, r8, ror r4
     eec:	0000248c 	andeq	r2, r0, ip, lsl #9
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	0000248c 	andeq	r2, r0, ip, lsl #9
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	000024f0 	strdeq	r2, [r0], -r0
	system_init ();
     ef8:	000024f0 	strdeq	r2, [r0], -r0
	tcv_init ();
     efc:	00002504 	andeq	r2, r0, r4, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f00:	00002504 	andeq	r2, r0, r4, lsl #10
     f04:	00002518 	andeq	r2, r0, r8, lsl r5
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	00002518 	andeq	r2, r0, r8, lsl r5
     f0c:	0000252c 	andeq	r2, r0, ip, lsr #10
     f10:	0000252c 	andeq	r2, r0, ip, lsr #10
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f14:	00002554 	andeq	r2, r0, r4, asr r5
     f18:	00002554 	andeq	r2, r0, r4, asr r5
	delay (16, 0);
     f1c:	00002564 	andeq	r2, r0, r4, ror #10
     f20:	00002564 	andeq	r2, r0, r4, ror #10
     f24:	00002590 	muleq	r0, r0, r5
	__pi_release ();
     f28:	00002590 	muleq	r0, r0, r5
     f2c:	000025a4 	andeq	r2, r0, r4, lsr #11
     f30:	000025a4 	andeq	r2, r0, r4, lsr #11
     f34:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
     f38:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
     f3c:	000026c8 	andeq	r2, r0, r8, asr #13
     f40:	000026c8 	andeq	r2, r0, r8, asr #13
static void killev (__pi_pcb_t *pid) {
     f44:	0000272c 	andeq	r2, r0, ip, lsr #14
	wfun = (aword)(pid->code);
     f48:	0000272c 	andeq	r2, r0, ip, lsr #14
	for_all_tasks (i) {
     f4c:	00002754 	andeq	r2, r0, r4, asr r7
		for (j = 0; j < nevents (i); j++) {
     f50:	00002754 	andeq	r2, r0, r4, asr r7
     f54:	000028a4 	andeq	r2, r0, r4, lsr #17
	...
     f60:	00000001 	andeq	r0, r0, r1
			if (i->Events [j] . Event == (aword)pid
     f64:	00000001 	andeq	r0, r0, r1
     f68:	00000001 	andeq	r0, r0, r1
     f6c:	00000001 	andeq	r0, r0, r1
	...
	for_all_tasks (i) {
     f78:	0000291a 	andeq	r2, r0, sl, lsl r9
}
     f7c:	0000291c 	andeq	r2, r0, ip, lsl r9
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	0000291e 	andeq	r2, r0, lr, lsl r9
static void qfree (aword *ch) {
     f84:	00002922 	andeq	r2, r0, r2, lsr #18
	...
	m_setnextp (ch, chunk);
     f90:	00000001 	andeq	r0, r0, r1
	m_setnextp (cc, ch);
     f94:	00000001 	andeq	r0, r0, r1
}
     f98:	000028a4 	andeq	r2, r0, r4, lsr #17
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	00002ac4 	andeq	r2, r0, r4, asr #21
     fa0:	00002ac4 	andeq	r2, r0, r4, asr #21
     fa4:	00002b24 	andeq	r2, r0, r4, lsr #22
			m_setnextp (cc, m_nextp (chunk));
     fa8:	00000001 	andeq	r0, r0, r1
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	00000001 	andeq	r0, r0, r1
     fb0:	00002b24 	andeq	r2, r0, r4, lsr #22
     fb4:	00002b3c 	andeq	r2, r0, ip, lsr fp
	...
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	00002b8a 	andeq	r2, r0, sl, lsl #23
     fc4:	00002b8e 	andeq	r2, r0, lr, lsl #23
     fc8:	00002b94 	muleq	r0, r4, fp
			m_setnextp (cc, m_nextp (chunk));
     fcc:	00002b96 	muleq	r0, r6, fp
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd8:	00002b8e 	andeq	r2, r0, lr, lsl #23
     fdc:	00002b94 	muleq	r0, r4, fp
     fe0:	00002b96 	muleq	r0, r6, fp
     fe4:	00002b9e 	muleq	r0, lr, fp
	...
			if (m_size (chunk) >= m_size (ch))
     ff0:	00000001 	andeq	r0, r0, r1
		chunk = m_nextp (chunk))
     ff4:	00000001 	andeq	r0, r0, r1
     ff8:	00000001 	andeq	r0, r0, r1
     ffc:	00000001 	andeq	r0, r0, r1
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	00002b3c 	andeq	r2, r0, ip, lsr fp
	diag_wait (a);
    1004:	00002b88 	andeq	r2, r0, r8, lsl #23
	diag_wchar (c, a);
    1008:	00000001 	andeq	r0, r0, r1
    100c:	00000001 	andeq	r0, r0, r1
}
    1010:	00002b88 	andeq	r2, r0, r8, lsl #23
    1014:	00002bf4 	strdeq	r2, [r0], -r4
	syserror (ESTATE, "state");
    1018:	00002bf4 	strdeq	r2, [r0], -r4
    101c:	00002c0a 	andeq	r2, r0, sl, lsl #24
	...
void update_n_wake (word min, Boolean force) {
    1028:	00002c0c 	andeq	r2, r0, ip, lsl #24
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	00002c34 	andeq	r2, r0, r4, lsr ip
    1030:	00002c34 	andeq	r2, r0, r4, lsr ip
    1034:	00002c3c 	andeq	r2, r0, ip, lsr ip
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000001 	andeq	r0, r0, r1
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
    104c:	00000001 	andeq	r0, r0, r1
    1050:	00000001 	andeq	r0, r0, r1
    1054:	00000001 	andeq	r0, r0, r1
	...
    1060:	00002c9e 	muleq	r0, lr, ip
    1064:	00002cae 	andeq	r2, r0, lr, lsr #25
    1068:	00002cb4 			; <UNDEFINED> instruction: 0x00002cb4
		for_all_tasks (i) {
    106c:	00002cb6 			; <UNDEFINED> instruction: 0x00002cb6
	...
			if (!twaiting (i))
    1078:	00002c3c 	andeq	r2, r0, ip, lsr ip
    107c:	00002c98 	muleq	r0, r8, ip
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	00002c98 	muleq	r0, r8, ip
    1084:	00002cc4 	andeq	r2, r0, r4, asr #25
    1088:	00000001 	andeq	r0, r0, r1
    108c:	00000001 	andeq	r0, r0, r1
    1090:	00000001 	andeq	r0, r0, r1
    1094:	00000001 	andeq	r0, r0, r1
    1098:	00000001 	andeq	r0, r0, r1
    109c:	00000001 	andeq	r0, r0, r1
    10a0:	00000001 	andeq	r0, r0, r1
    10a4:	00000001 	andeq	r0, r0, r1
    10a8:	00000001 	andeq	r0, r0, r1
    10ac:	00000001 	andeq	r0, r0, r1
				wakeuptm (i);
    10b0:	00000001 	andeq	r0, r0, r1
    10b4:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
    10b8:	00000001 	andeq	r0, r0, r1
				d = i->Timer - znew;
    10bc:	00000001 	andeq	r0, r0, r1
    10c0:	00000001 	andeq	r0, r0, r1
    10c4:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000005c9 	andeq	r0, r0, r9, asr #11
       4:	01380003 	teqeq	r8, r3
    return (time * SECOND)/1000;
       8:	01020000 	mrseq	r0, (UNDEF: 2)
}
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
      40:	2f534f63 	svccs	0x00534f63
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
        if (displayCycle)
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     130:	0300682e 	movweq	r6, #2094	; 0x82e
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
        if(onTime > 0){
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
            leds(led,1);
     13c:	00040068 	andeq	r0, r4, r8, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
     144:	c8020500 	stmdagt	r2, {r8, sl}
     148:	03000000 	movweq	r0, #0
     14c:	1f050131 	svcne	0x00050131
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
            delay(onTime, OFF_PERIOD);
     154:	201f0520 	andscs	r0, pc, r0, lsr #10
            delay(offTime, Check_PERIOD);
     158:	9f060505 	svcls	0x00060505
     15c:	15131413 	ldrne	r1, [r3, #-1043]	; 0xfffffbed
            led = greenLed;
     160:	05160905 	ldreq	r0, [r6, #-2309]	; 0xfffff6fb
            ch = greenCharacter;
     164:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     168:	0d05580b 	stceq	8, cr5, [r5, #-44]	; 0xffffffd4
            onTime = greenOn;
     16c:	11052f06 	tstne	r5, r6, lsl #30
     170:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
            offTime = greenOff;
     174:	10053d06 	andne	r3, r5, r6, lsl #26
            leds(led,1);
     178:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     17c:	14054b06 	strne	r4, [r5], #-2822	; 0xfffff4fa
     180:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     184:	15053d06 	strne	r3, [r5, #-3334]	; 0xfffff2fa
            proceed OFF_PERIOD;
     188:	24250106 	strtcs	r0, [r5], #-262	; 0xfffffefa
     18c:	0609052a 	streq	r0, [r9], -sl, lsr #10
        when(&On, Check_PERIOD);
     190:	06190524 	ldreq	r0, [r9], -r4, lsr #10
     194:	05016303 	streq	r6, [r1, #-771]	; 0xfffffcfd
        when(&stopProcess, Stop);
     198:	2e1d0311 	mrccs	3, 0, r0, cr13, cr1, {0}
     19c:	23060905 	movwcs	r0, #26885	; 0x6905
        release;
     1a0:	60030505 	andvs	r0, r3, r5, lsl #10
        leds(led,0);
     1a4:	06120501 	ldreq	r0, [r2], -r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	3c190501 	cfldr32cc	mvfx0, [r9], {1}
     1ac:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
     1b0:	0c052019 	stceq	0, cr2, [r5], {25}
     1b4:	053c2403 	ldreq	r2, [ip, #-1027]!	; 0xfffffbfd
     1b8:	205c0319 	subscs	r0, ip, r9, lsl r3
        if (displayCycle)
     1bc:	03060905 	movweq	r0, #26885	; 0x6905
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	05052021 	streq	r2, [r5, #-33]	; 0xffffffdf
     1c4:	05015f03 	streq	r5, [r1, #-3843]	; 0xfffff0fd
     1c8:	01240309 			; <UNDEFINED> instruction: 0x01240309
        if(offTime > 0)
     1cc:	01060c05 	tsteq	r6, r5, lsl #24
            delay(offTime, Check_PERIOD);
     1d0:	21060d05 	tstcs	r6, r5, lsl #26
        leds(led,0);
     1d4:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
     1d8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     1dc:	0530060d 	ldreq	r0, [r0, #-1549]!	; 0xfffff9f3
     1e0:	b2050112 	andlt	r0, r5, #-2147483644	; 0x80000004
     1e4:	c2050102 	andgt	r0, r5, #-2147483648	; 0x80000000
}
     1e8:	cc050102 	stfgts	f0, [r5], {2}
        finish;
     1ec:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
}
     1f0:	052e02c5 	streq	r0, [lr, #-709]!	; 0xfffffd3b
     1f4:	200602d4 	ldrdcs	r0, [r6], -r4
     1f8:	0102d905 	tsteq	r2, r5, lsl #18
     1fc:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     200:	0101cc03 	tsteq	r1, r3, lsl #24
     204:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     208:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     20c:	030602eb 	movweq	r0, #25323	; 0x62eb
     210:	052e7eaf 	streq	r7, [lr, #-3759]!	; 0xfffff151
     214:	010602fe 	strdeq	r0, [r6, -lr]
     218:	4a03d905 	bmi	f6634 <__ccfg+0xd668c>
     21c:	0603ec05 	streq	lr, [r3], -r5, lsl #24
     220:	04b5054a 	ldrteq	r0, [r5], #1354	; 0x54a
     224:	04ba0501 	ldrteq	r0, [sl], #1281	; 0x501
     228:	04c20501 	strbeq	r0, [r2], #1281	; 0x501
     22c:	06fd0501 	ldrbteq	r0, [sp], r1, lsl #10
     230:	150d0501 	strne	r0, [sp, #-1281]	; 0xfffffaff
     234:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
     238:	3c580306 	mrrccc	3, 0, r0, r8, cr6
     23c:	01061105 	tsteq	r6, r5, lsl #2
     240:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     244:	01061005 	tsteq	r6, r5
    word numbers[] = {0, 0, 0, 0};
     248:	4b060d05 	blmi	183664 <__ccfg+0x1636bc>
    int numbersIndex = 0;
     24c:	01061405 	tsteq	r6, r5, lsl #8
    word numbers[] = {0, 0, 0, 0};
     250:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	01061505 	tsteq	r6, r5, lsl #10
        if(settingsInput[i] == ' ') {
     258:	06039d05 	streq	r9, [r3], -r5, lsl #26
     25c:	052e1003 	streq	r1, [lr, #-3]!
            numbers[numbersIndex] = number;
     260:	010603a0 	smlatbeq	r6, r0, r3, r0
     264:	0603af05 	streq	sl, [r3], -r5, lsl #30
            number = 0;
     268:	03b4052e 			; <UNDEFINED> instruction: 0x03b4052e
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    return 0;
     270:	01cc0305 	biceq	r0, ip, r5, lsl #6
    redOn = numbers[0];
     274:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
     278:	01040106 	tsteq	r4, r6, lsl #2
    redOff = numbers[1];
     27c:	0603c605 	streq	ip, [r3], -r5, lsl #12
     280:	2e7eaf03 	cdpcs	15, 7, cr10, cr14, cr3, {0}
    greenOn = numbers[2];
     284:	0603d905 	streq	sp, [r3], -r5, lsl #18
     288:	060d0501 	streq	r0, [sp], -r1, lsl #10
    greenOff = numbers[3];
     28c:	3f09055d 	svccc	0x0009055d
     290:	05314b4b 	ldreq	r4, [r1, #-2891]!	; 0xfffff4b5
}
     294:	1e05010e 	adfnes	f0, f5, #0.5
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	06280501 	strteq	r0, [r8], -r1, lsl #10
     29c:	2e210501 	cfsh64cs	mvdx0, mvdx1, #1
            number = number * 10;
     2a0:	20063005 	andcs	r3, r6, r5
            number += settingsInput[i] - 48;
     2a4:	04013505 	streq	r3, [r1], #-1285	; 0xfffffafb
     2a8:	03050502 	movweq	r0, #21762	; 0x5502
        } else if(settingsInput[i] == '-') {
     2ac:	170101f5 			; <UNDEFINED> instruction: 0x170101f5
            return 1;
     2b0:	01063e05 	tsteq	r6, r5, lsl #28
     2b4:	48050104 	stmdami	r5, {r2, r8}
     2b8:	7e860306 	cdpvc	3, 8, cr0, cr6, cr6, {0}
     2bc:	065b052e 	ldrbeq	r0, [fp], -lr, lsr #10
     2c0:	01b70501 			; <UNDEFINED> instruction: 0x01b70501
fsm root {
     2c4:	01ca054a 	biceq	r0, sl, sl, asr #10
     2c8:	93054a06 	movwls	r4, #23046	; 0x5a06
     2cc:	98050102 	stmdals	r5, {r1, r8}
     2d0:	a0050102 	andge	r0, r5, r2, lsl #2
     2d4:	f9050102 			; <UNDEFINED> instruction: 0xf9050102
     2d8:	09050106 	stmdbeq	r5, {r1, r2, r8}
     2dc:	060c0515 			; <UNDEFINED> instruction: 0x060c0515
        ser_outf(Initial, "Enter your name: ");
     2e0:	060d0501 	streq	r0, [sp], -r1, lsl #10
     2e4:	5b09052f 	blpl	2417a8 <__ccfg+0x221800>
        ser_in(Get_Name, username, NAME_LENGTH);
     2e8:	01061405 	tsteq	r6, r5, lsl #8
     2ec:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	052f060d 	streq	r0, [pc, #-1549]!	; fffffceb <_estack+0xdfffaceb>
     2f4:	2e78037a 	mrccs	3, 3, r0, cr8, cr10, {3}
     2f8:	01067d05 	tsteq	r6, r5, lsl #26
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	06018c05 	streq	r8, [r1], -r5, lsl #24
     300:	0191052e 	orrseq	r0, r1, lr, lsr #10
        if (choice == 'A' || choice == 'a'){
     304:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     308:	01f50305 	mvnseq	r0, r5, lsl #6
     30c:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
            proceed Adjust_Intervals;
     310:	01040106 	tsteq	r4, r6, lsl #2
            proceed Monitor;
     314:	0601a405 	streq	sl, [r1], -r5, lsl #8
        proceed Show_Menu;
     318:	2e7e8603 	cdpcs	6, 7, cr8, cr14, cr3, {0}
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	0601b705 	streq	fp, [r1], -r5, lsl #14
     320:	06090501 	streq	r0, [r9], -r1, lsl #10
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	05581003 	ldrbeq	r1, [r8, #-3]
     328:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
     32c:	13052c09 	movwne	r2, #23561	; 0x5c09
        if(processSettingsInput(settings) != 0)
     330:	01053006 	tsteq	r5, r6
     334:	13050106 	movwne	r0, #20742	; 0x5106
            proceed Adjust_Intervals;
     338:	002a022e 	eoreq	r0, sl, lr, lsr #4
        if(!blinkerRunning) {
     33c:	1c050101 	stfnes	f0, [r5], {1}
     340:	00020500 	andeq	r0, r2, r0, lsl #10
     344:	03000000 	movweq	r0, #0
            blinkerCode = runfsm blinker;
     348:	0505012c 	streq	r0, [r5, #-300]	; 0xfffffed4
            blinkerRunning = YES;
     34c:	06190513 			; <UNDEFINED> instruction: 0x06190513
        On = YES;
     350:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
     354:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
        trigger(&On);
     358:	02022f01 	andeq	r2, r2, #1, 30
        proceed Show_Menu;
     35c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     360:	0205002f 	andeq	r0, r5, #47	; 0x2f
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	00000248 	andeq	r0, r0, r8, asr #4
     368:	01018103 	tsteq	r1, r3, lsl #2
     36c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     370:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
     374:	09051f2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip}
     378:	1f0a0522 	svcne	0x000a0522
     37c:	2f060505 	svccs	0x00060505
        proceed Show_Menu;
     380:	0a051514 	beq	1457d8 <__ccfg+0x125830>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	01150501 	tsteq	r5, r1, lsl #10
     388:	052f0905 	streq	r0, [pc, #-2309]!	; fffffa8b <_estack+0xdfffaa8b>
        displayCycle = YES;
     38c:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
     390:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
        ser_inf(Await_Stop, "%c", &ch);
     394:	23053006 	movwcs	r3, #20486	; 0x5006
     398:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
        if(ch == 'S' || ch == 's'){
     39c:	05135906 	ldreq	r5, [r3, #-2310]	; 0xfffff6fa
     3a0:	05110614 	ldreq	r0, [r1, #-1556]	; 0xfffff9ec
     3a4:	09052119 	stmdbeq	r5, {r0, r3, r4, r8, sp}
            displayCycle = NO;
     3a8:	200a0306 	andcs	r0, sl, r6, lsl #6
            proceed Show_Menu;
     3ac:	71031d05 	tstvc	r3, r5, lsl #26
     3b0:	01150501 	tsteq	r5, r1, lsl #10
        proceed Monitor;
     3b4:	01060505 	tsteq	r6, r5, lsl #10
     3b8:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
        On = NO;
     3bc:	18060c05 	stmdane	r6, {r0, r2, sl, fp}
        if(blinkerCode != 0x0) {
     3c0:	7a030b05 	bvc	c2fdc <__ccfg+0xa3034>
     3c4:	06050520 	streq	r0, [r5], -r0, lsr #10
            killall(blinkerCode);
     3c8:	060c054b 	streq	r0, [ip], -fp, asr #10
        trigger(&stopProcess);
     3cc:	06050501 	streq	r0, [r5], -r1, lsl #10
     3d0:	060d054c 	streq	r0, [sp], -ip, asr #10
        proceed Show_Menu;
     3d4:	06050501 	streq	r0, [r5], -r1, lsl #10
     3d8:	060e054b 	streq	r0, [lr], -fp, asr #10
        leds_all(0);
     3dc:	06050501 	streq	r0, [r5], -r1, lsl #10
     3e0:	0601054c 	streq	r0, [r1], -ip, asr #10
     3e4:	06100513 			; <UNDEFINED> instruction: 0x06100513
        proceed Show_Menu;
     3e8:	052e6a03 	streq	r6, [lr, #-2563]!	; 0xfffff5fd
     3ec:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
        } else if (choice == 'S' || choice == 's') {
     3f0:	0d052e13 	stceq	14, cr2, [r5, #-76]	; 0xffffffb4
            proceed Stop;
     3f4:	14053e06 	strne	r3, [r5], #-3590	; 0xfffff1fa
        } else if (choice == 'V' || choice == 'v') {
     3f8:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
            proceed View_Settings;
     3fc:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
        } else if (choice == 'M' || choice == 'm') {
     400:	10050106 	andne	r0, r5, r6, lsl #2
            proceed Monitor;
     404:	12054b06 	andne	r4, r5, #6144	; 0x1800
     408:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
     40c:	000a0230 	andeq	r0, sl, r0, lsr r2
     410:	1a050101 	bne	14081c <__ccfg+0x120874>
            killall(blinkerCode);
     414:	c4020500 	strgt	r0, [r2], #-1280	; 0xfffffb00
            leds_all(0);
     418:	03000002 	movweq	r0, #2
     41c:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
            killall(blinkerCode);
     420:	1a05011c 	bne	140898 <__ccfg+0x1208f0>
            sint runningNumber = crunning(blinkerCode);
     424:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     428:	1414ca06 	ldrne	ip, [r4], #-2566	; 0xfffff5fa
     42c:	4d150905 	vldrmi.16	s0, [r5, #-10]	; <UNPREDICTABLE>
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	5809035b 	stmdapl	r9, {r0, r1, r3, r4, r6, r8, r9}
            trigger(&stopProcess);
     434:	0c055a14 			; <UNDEFINED> instruction: 0x0c055a14
     438:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
            blinkerCode = runfsm blinker;
     43c:	26066706 	strcs	r6, [r6], -r6, lsl #14
     440:	31060905 	tstcc	r6, r5, lsl #18
     444:	5a144d3f 	bpl	513948 <__ccfg+0x4f39a0>
     448:	01060c05 	tsteq	r6, r5, lsl #24
     44c:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
     450:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     454:	0c054009 	stceq	0, cr4, [r5], {9}
     458:	0b050106 	bleq	140878 <__ccfg+0x1208d0>
     45c:	031b052e 	tsteq	fp, #192937984	; 0xb800000
     460:	1c053c0f 	stcne	12, cr3, [r5], {15}
     464:	310c053d 	tstcc	ip, sp, lsr r5
     468:	051c1905 	ldreq	r1, [ip, #-2309]	; 0xfffff6fb
     46c:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     470:	0c051509 	cfstr32eq	mvfx1, [r5], {9}
     474:	09050106 	stmdbeq	r5, {r1, r2, r8}
     478:	3f303006 	svccc	0x00303006
     47c:	054b3fdd 	strbeq	r3, [fp, #-4061]	; 0xfffff023
     480:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     484:	133f0609 	teqne	pc, #9437184	; 0x900000
     488:	060b055b 			; <UNDEFINED> instruction: 0x060b055b
     48c:	060d0501 	streq	r0, [sp], -r1, lsl #10
     490:	061a0567 	ldreq	r0, [sl], -r7, ror #10
static void devinit_uart (int devnum) {
     494:	2f0d0501 	svccs	0x000d0501
	adddevfunc (ioreq_uart_a, devnum);
     498:	051f1a05 	ldreq	r1, [pc, #-2565]	; fffffa9b <_estack+0xdfffaa9b>
     49c:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
void udelay (volatile word n) {
     4a0:	053f3109 	ldreq	r3, [pc, #-265]!	; 39f <root+0xdb>
     4a4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
	while (n) {
     4a8:	053f0609 	ldreq	r0, [pc, #-1545]!	; fffffea7 <_estack+0xdfffaea7>
     4ac:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
}
     4b0:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
	while (n--);
     4b4:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
     4b8:	0e053f31 	mcreq	15, 0, r3, cr5, cr1, {1}
     4bc:	011e0501 	tsteq	lr, r1, lsl #10
		n--;
     4c0:	04012305 	streq	r2, [r1], #-773	; 0xfffffcfb
     4c4:	03050502 	movweq	r0, #21762	; 0x5502
     4c8:	0517013e 	ldreq	r0, [r7, #-318]	; 0xfffffec2
void mdelay (volatile word n) {
     4cc:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     4d0:	03090501 	movweq	r0, #38145	; 0x9501
	while (n) {
     4d4:	042e7fbf 	strteq	r7, [lr], #-4031	; 0xfffff041
     4d8:	033e0502 	teqeq	lr, #8388608	; 0x800000
}
     4dc:	042000c1 	strteq	r0, [r0], #-193	; 0xffffff3f
		udelay (999);
     4e0:	06360501 	ldrteq	r0, [r6], -r1, lsl #10
     4e4:	207fbd03 	rsbscs	fp, pc, r3, lsl #26
		n--;
     4e8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     4ec:	17013e03 	strne	r3, [r1, -r3, lsl #28]
     4f0:	01063e05 	tsteq	r6, r5, lsl #28
     4f4:	49050104 	stmdbmi	r5, {r2, r8}
void __pi_ondomain (lword d) {
     4f8:	7fbd0306 	svcvc	0x00bd0306
     4fc:	014e052e 	cmpeq	lr, lr, lsr #10
		if (__pi_systat.effpdm > 1)
     500:	05015605 	streq	r5, [r1, #-1541]	; 0xfffff9fb
     504:	6005015b 	andvs	r0, r5, fp, asr r1
			__pi_systat.effpdm = 1;
     508:	01680501 	cmneq	r8, r1, lsl #10
	PRCMPowerDomainOn (d);
     50c:	05016d05 	streq	r6, [r1, #-3333]	; 0xfffff2fb
     510:	01060180 	smlabbeq	r6, r0, r1, r0
     514:	06019305 	streq	r9, [r1], -r5, lsl #6
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	03d30566 	bicseq	r0, r3, #427819008	; 0x19800000
     51c:	14090501 	strne	r0, [r9], #-1281	; 0xfffffaff
     520:	052f0105 	streq	r0, [pc, #-261]!	; 423 <root+0x15f>
	__pi_systat.ondmns |= d;
     524:	7fa80310 	svcvc	0x00a80310
     528:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
}
     52c:	060d0501 	streq	r0, [sp], -r1, lsl #10
     530:	2f10052f 	svccs	0x0010052f
void __pi_syserror (word ec, const char *m) {
     534:	01061305 	tsteq	r6, r5, lsl #6
	diag ("SYSERR: %x, %s", ec, m);
     538:	2f060d05 	svccs	0x00060d05
     53c:	052f1005 	streq	r1, [pc, #-5]!	; 53f <__pi_syserror+0xb>
  __ASM volatile ("cpsid i" : : : "memory");
     540:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	032f060d 			; <UNDEFINED> instruction: 0x032f060d
     548:	12052e17 	andne	r2, r5, #368	; 0x170
     54c:	01220501 			; <UNDEFINED> instruction: 0x01220501
		all_leds_blink;
     550:	04012705 	streq	r2, [r1], #-1797	; 0xfffff8fb
     554:	03050502 	movweq	r0, #21762	; 0x5502
     558:	170100f7 			; <UNDEFINED> instruction: 0x170100f7
     55c:	01063e05 	tsteq	r6, r5, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	3a050104 	bcc	140978 <__ccfg+0x1209d0>
     564:	7f840306 	svcvc	0x00840306
     568:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
     56c:	00f70305 	rscseq	r0, r7, r5, lsl #6
     570:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
     574:	01040106 	tsteq	r4, r6, lsl #2
	while (1) {
     578:	03064d05 	movweq	r4, #27909	; 0x6d05
     57c:	052e7f84 	streq	r7, [lr, #-3972]!	; 0xfffff07c
     580:	5a050152 	bpl	140ad0 <__ccfg+0x120b28>
     584:	015f0501 	cmpeq	pc, r1, lsl #10
void tci_run_delay_timer () {
     588:	05016405 	streq	r6, [r1, #-1029]	; 0xfffffbfb
	setdel = __pi_mintk - __pi_old;
     58c:	7105016c 	tstvc	r5, ip, ror #2
     590:	01840501 	orreq	r0, r4, r1, lsl #10
     594:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     598:	01840522 	orreq	r0, r4, r2, lsr #10
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	0197051e 	orrseq	r0, r7, lr, lsl r5
     5a0:	d7055806 	strle	r5, [r5, -r6, lsl #16]
     5a4:	0d050103 	stfeqs	f0, [r5, #-12]
     5a8:	22053014 	andcs	r3, r5, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
	sti_tim;
     5b0:	1e22053e 	mcrne	5, 1, r0, cr2, cr14, {1}
}
     5b4:	22060d05 	andcs	r0, r6, #320	; 0x140
     5b8:	1b053e3e 	blne	14feb8 <__ccfg+0x12ff10>
     5bc:	13050106 	movwne	r0, #20742	; 0x5106
     5c0:	2e320306 	cdpcs	3, 3, cr0, cr2, cr6, {0}
     5c4:	2e060105 	adfcss	f0, f6, f5
	cli_aux;
     5c8:	01002902 	tsteq	r0, r2, lsl #18
     5cc:	00155c01 	andseq	r5, r5, r1, lsl #24
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	9b000300 	blls	11d8 <running+0xc>
     5d4:	02000002 	andeq	r0, r0, #2
     5d8:	0d0efb01 	vstreq	d15, [lr, #-4]
     5dc:	01010100 	mrseq	r0, (UNDEF: 17)
	sti_aux;
     5e0:	00000001 	andeq	r0, r0, r1
}
     5e4:	01000001 	tsteq	r0, r1
     5e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 534 <__pi_syserror>
     5ec:	616d2f65 	cmnvs	sp, r5, ror #30
void AONRTCIntHandler () {
     5f0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     5f8:	706f746b 	rsbvc	r7, pc, fp, ror #8
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if (__pi_utims [0] == 0)
     600:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     604:	4349502f 	movtmi	r5, #36911	; 0x902f
		if (*(__pi_utims [0])) {
     608:	502f534f 	eorpl	r5, pc, pc, asr #6
     60c:	534f6369 	movtpl	r6, #62313	; 0xf369
			(*(__pi_utims [0]))--;
     610:	3143432f 	cmpcc	r3, pc, lsr #6
		if (__pi_utims [1] == 0)
     614:	00585833 	subseq	r5, r8, r3, lsr r8
		if (*(__pi_utims [1])) {
     618:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 564 <__pi_syserror+0x30>
			aux_timer_inactive = 0;
     61c:	616d2f65 	cmnvs	sp, r5, ror #30
			(*(__pi_utims [1]))--;
     620:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		if (__pi_utims [2] == 0)
     624:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		if (*(__pi_utims [2])) {
     628:	706f746b 	rsbvc	r7, pc, fp, ror #8
			(*(__pi_utims [2]))--;
     62c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		if (__pi_utims [3] != 0) {
     630:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			if (*(__pi_utims [3])) {
     634:	4349502f 	movtmi	r5, #36911	; 0x902f
				aux_timer_inactive = 0;
     638:	502f534f 	eorpl	r5, pc, pc, asr #6
				(*(__pi_utims [3]))--;
     63c:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (__pi_systat.ledsts) {
     640:	3143432f 	cmpcc	r3, pc, lsr #6
     644:	2f585833 	svccs	0x00585833
		if (__pi_systat.ledblc++ == 0) {
     648:	33314343 	teqcc	r1, #201326593	; 0xc000001
     64c:	41575858 	cmpmi	r7, r8, asr r8
			if (__pi_systat.ledblk) {
     650:	642f4552 	strtvs	r4, [pc], #-1362	; 658 <AONRTCIntHandler+0x68>
     654:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
     658:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	6f682f00 	svcvs	0x00682f00
     660:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b4 <udelay+0x14>
				if (__pi_systat.ledsts & 0x2)
     664:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     668:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     66c:	6f746b73 	svcvs	0x00746b73
				if (__pi_systat.ledsts & 0x4)
     670:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				__pi_systat.ledblk = 0;
     674:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     678:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			if (__pi_systat.fstblk)
     67c:	2f534f43 	svccs	0x00534f43
     680:	4f636950 	svcmi	0x00636950
				__pi_systat.ledblc = 200;
     684:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
	if (events & AON_RTC_EVFLAGS_CH0) {
     688:	2f736269 	svccs	0x00736269
		cli_tim;
     68c:	2f004f49 	svccs	0x00004f49
		__pi_new += setdel;
     690:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     694:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		setdel = 0;
     698:	2f6e6974 	svccs	0x006e6974
		RISE_N_SHINE;
     69c:	6b736544 	blvs	1cd9bb4 <__ccfg+0x1cb9c0c>
		__pi_new += setdel;
     6a0:	2f706f74 	svccs	0x00706f74
		RISE_N_SHINE;
     6a4:	4f534c4f 	svcmi	0x00534c4f
     6a8:	2f54454e 	svccs	0x0054454e
		aux_timer_inactive = 1;
     6ac:	4f434950 	svcmi	0x00434950
     6b0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
				if (__pi_systat.ledsts & 0x1)
     6b4:	2f534f63 	svccs	0x00534f63
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     6bc:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
				if (__pi_systat.ledsts & 0x2)
     6c0:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
     6c4:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
     6c8:	2f656d6f 	svccs	0x00656d6f
				if (__pi_systat.ledsts & 0x8)
     6cc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
				__pi_systat.ledblk = 1;
     6d0:	442f6e69 	strtmi	r6, [pc], #-3689	; 6d8 <AONRTCIntHandler+0xe8>
     6d4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (aux_timer_inactive) {
     6d8:	4f2f706f 	svcmi	0x002f706f
			cli_aux;
     6dc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     6e0:	502f5445 	eorpl	r5, pc, r5, asr #8
     6e4:	534f4349 	movtpl	r4, #62281	; 0xf349
     6e8:	6369502f 	cmnvs	r9, #47	; 0x2f
     6ec:	6b2f534f 	blvs	bd5430 <__ccfg+0xbb5488>
     6f0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     6f4:	752f006c 	strvc	r0, [pc, #-108]!	; 690 <AONRTCIntHandler+0xa0>
     6f8:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 534 <__pi_syserror>
     6fc:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     700:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
word tci_update_delay_ticks (Boolean force) {
     704:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
	cli_tim;
     708:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     70c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
	if (setdel) {
     710:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     71c:	2f006564 	svccs	0x00006564
     720:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	2f6e6974 	svccs	0x006e6974
	return NO;
     72c:	6b736544 	blvs	1cd9c44 <__ccfg+0x1cb9c9c>
			setdel = 0;
     730:	2f706f74 	svccs	0x00706f74
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	4f534c4f 	svcmi	0x00534c4f
     738:	2f54454e 	svccs	0x0054454e
}
     73c:	4f434950 	svcmi	0x00434950
		sti_tim;
     740:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		return YES;
     744:	00534f63 	subseq	r4, r3, r3, ror #30
     748:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
     74c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
     750:	73000001 	movwvc	r0, #1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
	UARTDisable (UART0_BASE);
     758:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	00020068 	andeq	r0, r2, r8, rrx
	UARTDisable (UART0_BASE);
     760:	736d6300 	cmnvc	sp, #0, 6
	UARTConfigSetExpClk (UART0_BASE,
     764:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
     768:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
     76c:	00000100 	andeq	r0, r0, r0, lsl #2
     770:	6f697067 	svcvs	0x00697067
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     778:	72690000 	rsbvc	r0, r9, #0
     77c:	69745f71 	ldmdbvs	r4!, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	5f72656d 	svcpl	0x0072656d
     784:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     788:	0300682e 	movweq	r6, #2094	; 0x82e
	urates [0] = rate;
     78c:	61750000 	cmnvs	r5, r0
}
     790:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
     794:	00000200 	andeq	r0, r0, r0, lsl #4
     798:	5f717269 	svcpl	0x00717269
     79c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     7a0:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
     7a4:	00030068 	andeq	r0, r3, r8, rrx
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	71726900 	cmnvc	r2, r0, lsl #18
     7ac:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     7b0:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
     7b8:	00040068 	andeq	r0, r4, r8, rrx
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	63727000 	cmnvs	r2, #0
     7c0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	61000002 	tstvs	r0, r2
     7c8:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
     7cc:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
     7d0:	00000200 	andeq	r0, r0, r0, lsl #4
     7d4:	5f727770 	svcpl	0x00727770
     7d8:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
     7dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
	switch (operation) {
     7e0:	6f610000 	svcvs	0x00610000
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	6f695f6e 	svcvs	0x00695f6e
     7e8:	00682e63 	rsbeq	r2, r8, r3, ror #28
     7ec:	73000002 	movwvc	r0, #2
     7f0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     7f4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
				*buf++ = uart_a_read;
     7f8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
     7fc:	6f610000 	svcvs	0x00610000
			while (len && uart_a_char_available) {
     800:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
     804:	00682e63 	rsbeq	r2, r8, r3, ror #28
     808:	61000002 	tstvs	r0, r2
			if (len != operation) {
     80c:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
}
     810:	6f6d7461 	svcvs	0x006d7461
     814:	00682e6e 	rsbeq	r2, r8, lr, ror #28
			uart_a_disable_int;
     818:	73000002 	movwvc	r0, #2
			if (uart_a_char_available) {
     81c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
				*buf++ = uart_a_read;
     820:	00682e74 	rsbeq	r2, r8, r4, ror lr
			uart_a_disable_int;
     824:	61000006 	tstvs	r0, r6
     828:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			if (uart_a_char_available) {
     82c:	00010068 	andeq	r0, r1, r8, rrx
     830:	63616d00 	cmnvs	r1, #0, 26
				uart_a_enable_int;
     834:	00682e68 	rsbeq	r2, r8, r8, ror #28
     838:	70000001 	andvc	r0, r0, r1
				goto Redo_rx;
     83c:	5f736e69 	svcpl	0x00736e69
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     840:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     844:	00010068 	andeq	r0, r1, r8, rrx
			return -2;
     848:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
     84c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
				uart_a_write (*buf);
     850:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     854:	0100682e 	tsteq	r0, lr, lsr #16
			while (len && uart_a_room_in_tx) {
     858:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     85c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
     860:	00070068 	andeq	r0, r7, r8, rrx
			if (len != operation) {
     864:	72656b00 	rsbvc	r6, r5, #0, 22
			uart_a_disable_int;
     868:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
     86c:	00050068 	andeq	r0, r5, r8, rrx
			if (uart_a_room_in_tx) {
     870:	27050000 	strcs	r0, [r5, -r0]
     874:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
				uart_a_enable_int;
     878:	03000004 	movweq	r0, #4
     87c:	050106fc 	streq	r0, [r1, #-1788]	; 0xfffff904
				*buf++ = uart_a_read;
     880:	27051402 	strcs	r1, [r5, -r2, lsl #8]
			if (uart_a_room_in_tx) {
     884:	02051006 	andeq	r1, r5, #6
				uart_a_write (*buf);
     888:	00050222 	andeq	r0, r5, r2, lsr #4
     88c:	1f050101 	svcne	0x00050101
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	a0020500 	andge	r0, r2, r0, lsl #10
     894:	03000004 	movweq	r0, #4
			uart_a_enable_int;
     898:	02050118 	andeq	r0, r5, #24, 2
     89c:	0108053d 	tsteq	r8, sp, lsr r5
     8a0:	01060905 	tsteq	r6, r5, lsl #18
			return 0;
     8a4:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
			if (len == UART_CNTRL_SETRATE) {
     8a8:	03052401 	movweq	r2, #21505	; 0x5401
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	02052b06 	andeq	r2, r5, #6144	; 0x1800
     8b0:	010d051b 	tsteq	sp, fp, lsl r5
     8b4:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
				syserror (EREQPAR, "uar");
     8b8:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
			syserror (ENOOPER, "uai");
     8bc:	03053c08 	movweq	r3, #23560	; 0x5c08
			if (len == UART_CNTRL_GETRATE) {
     8c0:	04053406 	streq	r3, [r5], #-1030	; 0xfffffbfa
				return 1;
     8c4:	07020106 	streq	r0, [r2, -r6, lsl #2]
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
			syserror (ENOOPER, "uai");
     8cc:	0205001f 	andeq	r0, r5, #31
     8d0:	000004cc 	andeq	r0, r0, ip, asr #9
     8d4:	05011f03 	streq	r1, [r1, #-3843]	; 0xfffff0fd
     8d8:	08053d02 	stmdaeq	r5, {r1, r8, sl, fp, ip, sp}
     8dc:	06090501 	streq	r0, [r9], -r1, lsl #10
     8e0:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     8e4:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
     8e8:	4b390603 	blmi	e420fc <__ccfg+0xe22154>
     8ec:	01060405 	tsteq	r6, r5, lsl #8
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	01000702 	tsteq	r0, r2, lsl #14
void UART0IntHandler () {
     8f4:	001e0501 	andseq	r0, lr, r1, lsl #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	04f80205 	ldrbteq	r0, [r8], #517	; 0x205
     8fc:	2a030000 	bcs	c0904 <__ccfg+0xa095c>
     900:	16020501 	strne	r0, [r2], -r1, lsl #10
     904:	0e061e05 	cdpeq	14, 0, cr1, cr6, cr5, {0}
     908:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	05051c1e 	streq	r1, [r5, #-3102]	; 0xfffff3e2
     910:	06030524 	streq	r0, [r3], -r4, lsr #10
		RISE_N_SHINE;
     914:	06120522 	ldreq	r0, [r2], -r2, lsr #10
     918:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
		i_trigger (devevent (UART_A, READ));
     91c:	21060405 	tstcs	r6, r5, lsl #8
     920:	01061705 	tsteq	r6, r5, lsl #14
     924:	3f060205 	svccc	0x00060205
     928:	013b0559 	teqeq	fp, r9, asr r5
     92c:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
     930:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     934:	02054a08 	andeq	r4, r5, #8, 20	; 0x8000
     938:	15053006 	strne	r3, [r5, #-6]
     93c:	01050106 	tsteq	r5, r6, lsl #2
     940:	0005024b 	andeq	r0, r5, fp, asr #4
     944:	1f050101 	svcne	0x00050101
     948:	00020500 	andeq	r0, r2, r0, lsl #10
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	03000000 	movweq	r0, #0
     950:	0205013a 	andeq	r0, r5, #-2147483634	; 0x8000000e
     954:	061f0517 			; <UNDEFINED> instruction: 0x061f0517
		i_trigger (devevent (UART_A, WRITE));
     958:	2502050d 	strcs	r0, [r2, #-1293]	; 0xfffffaf3
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	051b1f05 	ldreq	r1, [fp, #-3845]	; 0xfffff0fb
     960:	3d062502 	cfstr32cc	mvfx2, [r6, #-8]
		RISE_N_SHINE;
     964:	05013c05 	streq	r3, [r1, #-3077]	; 0xfffff3fb
     968:	09050108 	stmdbeq	r5, {r3, r8}
     96c:	08050106 	stmdaeq	r5, {r1, r2, r8}
		i_trigger (devevent (UART_A, WRITE));
     970:	0602054a 	streq	r0, [r2], -sl, asr #10
     974:	06050530 			; <UNDEFINED> instruction: 0x06050530
     978:	06030501 	streq	r0, [r3], -r1, lsl #10
     97c:	0612054b 	ldreq	r0, [r2], -fp, asr #10
     980:	20270501 	eorcs	r0, r7, r1, lsl #10
     984:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     988:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     98c:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
     990:	02053c17 	andeq	r3, r5, #5888	; 0x1700
     994:	15052306 	strne	r2, [r5, #-774]	; 0xfffffcfa
     998:	01050106 	tsteq	r5, r6, lsl #2
}
     99c:	0005024b 	andeq	r0, r5, fp, asr #4
     9a0:	13050101 	movwne	r0, #20737	; 0x5101
     9a4:	00020500 	andeq	r0, r2, r0, lsl #10
     9a8:	03000000 	movweq	r0, #0
     9ac:	050100ce 	streq	r0, [r1, #-206]	; 0xffffff32
void __buttons_setirq (int val) {
     9b0:	13051402 	movwne	r1, #21506	; 0x5402
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	02051e06 	andeq	r1, r5, #6, 28	; 0x60
     9b8:	36330622 	ldrtcc	r0, [r3], -r2, lsr #12
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
     9c0:	03040502 	movweq	r0, #17666	; 0x4502
     9c4:	300101f0 	strdcc	r0, [r1], -r0	; <UNPREDICTABLE>
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	01065c05 	tsteq	r6, r5, lsl #24
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
     9d0:	100a0514 	andne	r0, sl, r4, lsl r5
     9d4:	01000502 	tsteq	r0, r2, lsl #10
     9d8:	002d0501 	eoreq	r0, sp, r1, lsl #10
     9dc:	05340205 	ldreq	r0, [r4, #-517]!	; 0xfffffdfb
     9e0:	97030000 	strls	r0, [r3, -r0]
}
     9e4:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
     9e8:	17010114 	smladne	r1, r4, r1, r0
     9ec:	03062d05 	movweq	r2, #27909	; 0x6d05
     9f0:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
void __pinlist_setirq (int val) {
     9f4:	09030635 	stmdbeq	r3, {r0, r2, r4, r5, r9, sl}
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	0503044a 	streq	r0, [r3, #-1098]	; 0xfffffbb6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	7fb50303 	svcvc	0x00b50303
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
	for (i = 0; i < N_PINLIST; i++) {
     a04:	cb03062d 	blgt	c22c0 <__ccfg+0xa2318>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a08:	01042001 	tsteq	r4, r1
     a0c:	03060205 	movweq	r0, #25093	; 0x6205
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a10:	053c7f8f 	ldreq	r7, [ip, #-3983]!	; 0xfffff071
     a14:	01011303 	tsteq	r1, r3, lsl #6
     a18:	29050404 	stmdbcs	r5, {r2, sl}
	for (i = 0; i < N_PINLIST; i++) {
     a1c:	0100eb03 	tsteq	r0, r3, lsl #22
}
     a20:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     a24:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     a28:	03030501 	movweq	r0, #13569	; 0x3501
     a2c:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
void GPIOIntHandler () {
     a30:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
if (buttons_int) {
     a34:	042000f0 	strteq	r0, [r0], #-240	; 0xffffff10
     a38:	06030501 	streq	r0, [r3], -r1, lsl #10
	buttons_disable ();
     a3c:	207f9003 	rsbscs	r9, pc, r3
     a40:	29050404 	stmdbcs	r5, {r2, sl}
	i_trigger ((aword)&__button_list);
     a44:	0100eb03 	tsteq	r0, r3, lsl #22
     a48:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     a4c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     a50:	06030501 	streq	r0, [r3], -r1, lsl #10
     a54:	207f9003 	rsbscs	r9, pc, r3
     a58:	01010101 	tsteq	r1, r1, lsl #2
     a5c:	01660101 	cmneq	r6, r1, lsl #2
     a60:	0404012e 	streq	r0, [r4], #-302	; 0xfffffed2
     a64:	a1032905 	tstge	r3, r5, lsl #18
     a68:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     a6c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	RISE_N_SHINE;
     a70:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     a74:	7eda0303 	cdpvc	3, 13, cr0, cr10, cr3, {0}
     a78:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
if (pin_sensor_int) {
     a7c:	01a6032d 			; <UNDEFINED> instruction: 0x01a6032d
     a80:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	i_trigger ((aword)(&__input_pins));
     a84:	da030603 	ble	c2298 <__ccfg+0xa22f0>
     a88:	0404207e 	streq	r2, [r4], #-126	; 0xffffff82
     a8c:	a1032905 	tstge	r3, r5, lsl #18
     a90:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
     a94:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     a98:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     a9c:	da030603 	ble	c22b0 <__ccfg+0xa2308>
     aa0:	0101207e 	tsteq	r1, lr, ror r0
     aa4:	01010101 	tsteq	r1, r1, lsl #2
     aa8:	052e0158 	streq	r0, [lr, #-344]!	; 0xfffffea8
     aac:	09021108 	stmdbeq	r2, {r3, r8, ip}
	__pinsen_disable_and_clear;
     ab0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	RISE_N_SHINE;
     ab4:	0205001d 	andeq	r0, r5, #29
     ab8:	00000588 	andeq	r0, r0, r8, lsl #11
     abc:	01029d03 	tsteq	r2, r3, lsl #26
}
     ac0:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
     ac4:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
     ac8:	09052416 	stmdbeq	r5, {r1, r2, r4, sl, sp}
     acc:	2016054a 	andscs	r0, r6, sl, asr #10
     ad0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
void system_init () {
     ad4:	03230602 			; <UNDEFINED> instruction: 0x03230602
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	11050176 	tstne	r5, r6, ror r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
     ae4:	2073032f 	rsbscs	r0, r3, pc, lsr #6
     ae8:	0a032a05 	beq	cb304 <__ccfg+0xab35c>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aec:	032f0520 			; <UNDEFINED> instruction: 0x032f0520
     af0:	36052076 			; <UNDEFINED> instruction: 0x36052076
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
     af8:	02052e0a 	andeq	r2, r5, #10, 28	; 0xa0
     afc:	01052306 	tsteq	r5, r6, lsl #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	0b022f06 	bleq	8c720 <__ccfg+0x6c778>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b04:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	02050021 	andeq	r0, r5, #33	; 0x21
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	000005c8 	andeq	r0, r0, r8, asr #11
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	0102aa03 	tsteq	r2, r3, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	051b0621 	ldreq	r0, [fp, #-1569]	; 0xfffff9df
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	09052502 	stmdbeq	r5, {r1, r8, sl, sp}
		pin = (port_confs [i] >> 19) & 0x1f;
     b20:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b24:	01690314 	cmneq	r9, r4, lsl r3
     b28:	01061105 	tsteq	r6, r5, lsl #2
     b2c:	052e2f05 	streq	r2, [lr, #-3845]!	; 0xfffff0fb
     b30:	2017032a 	andscs	r0, r7, sl, lsr #6
		if (port_confs [i] & 0x80)
     b34:	69032f05 	stmdbvs	r3, {r0, r2, r8, r9, sl, fp, sp}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	2e360520 	cfabs64cs	mvdx0, mvdx6
     b3c:	17032a05 	strne	r2, [r3, -r5, lsl #20]
		if (port_confs [i] & 0x40)
     b40:	06020520 	streq	r0, [r2], -r0, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	2e090523 	cfsh32cs	mvfx0, mvfx9, #19
     b48:	13060105 	movwne	r0, #24837	; 0x6105
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4c:	01000602 	tsteq	r0, r2, lsl #12
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	001a0501 	andseq	r0, sl, r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b54:	05f00205 	ldrbeq	r0, [r0, #517]!	; 0x205
	all_leds_blink;
     b58:	b7030000 	strlt	r0, [r3, -r0]
     b5c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     b60:	1a051414 	bne	145bb8 <__ccfg+0x125c10>
     b64:	0b050e06 	bleq	144384 <__ccfg+0x1243dc>
     b68:	2e090524 	cfsh32cs	mvfx0, mvfx9, #20
     b6c:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
     b70:	14060505 	strne	r0, [r6], #-1285	; 0xfffffafb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	051e2b05 	ldreq	r2, [lr, #-2821]	; 0xfffff4fb
     b78:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
     b7c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     b80:	18250603 	stmdane	r5!, {r0, r1, r9, sl}
     b84:	06120515 			; <UNDEFINED> instruction: 0x06120515
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	30060305 	andcc	r0, r6, r5, lsl #6
     b90:	01060705 	tsteq	r6, r5, lsl #14
	IntEnable (INT_AON_RTC_COMB);
     b94:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b98:	052f0604 	streq	r0, [pc, #-1540]!	; 59c <tci_run_delay_timer+0x14>
     b9c:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
	__pi_malloc_init ();
     ba0:	052f0604 	streq	r0, [pc, #-1540]!	; 5a4 <tci_run_delay_timer+0x1c>
	IntEnable (INT_AON_GPIO_EDGE);
     ba4:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
     ba8:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     bac:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	03052006 	movweq	r2, #20486	; 0x5006
     bb4:	07052206 	streq	r2, [r5, -r6, lsl #4]
     bb8:	06050106 	streq	r0, [r5], -r6, lsl #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	06040520 	streq	r0, [r4], -r0, lsr #10
     bc0:	06170521 	ldreq	r0, [r7], -r1, lsr #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
     bc8:	03052f06 	movweq	r2, #24326	; 0x5f06
     bcc:	06120514 			; <UNDEFINED> instruction: 0x06120514
	urates [0] = UART_RATE / 100;
     bd0:	20060501 	andcs	r0, r6, r1, lsl #10
     bd4:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
	reinit_uart ();
     bd8:	01060705 	tsteq	r6, r5, lsl #14
	EXTRA_INITIALIZERS;
     bdc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     be0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	1f130617 	svcne	0x00130617
     be8:	2f060405 	svccs	0x00060405
     bec:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     bf4:	04052006 	streq	r2, [r5], #-6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
     bfc:	07050106 	streq	r0, [r5, -r6, lsl #2]
			devinit [i] . init (devinit [i] . param);
     c00:	06050520 	streq	r0, [r5], -r0, lsr #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	06180521 	ldreq	r0, [r8], -r1, lsr #10
     c08:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
     c0c:	05042f06 	streq	r2, [r4, #-3846]	; 0xfffff0fa
	IntEnable (INT_UART0_COMB);
     c10:	a3030205 	movwge	r0, #12805	; 0x3205
     c14:	1105017d 	tstne	r5, sp, ror r1
}
     c18:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	tci_run_auxiliary_timer ();
     c1c:	0603052e 	streq	r0, [r3], -lr, lsr #10
		diag ("");
     c20:	06120530 			; <UNDEFINED> instruction: 0x06120530
     c24:	20190501 	andscs	r0, r9, r1, lsl #10
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c28:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
		diag ("Leftover RAM: %d bytes",
     c30:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     c34:	14052007 	strne	r2, [r5], #-7
     c38:	1f07052f 	svcne	0x0007052f
     c3c:	21060505 	tstcs	r6, r5, lsl #10
     c40:	01060805 	tsteq	r6, r5, lsl #16
     c44:	21060605 	tstcs	r6, r5, lsl #12
     c48:	29050404 	stmdbcs	r5, {r2, sl}
     c4c:	01029603 	tsteq	r2, r3, lsl #12
     c50:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     c54:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
     c58:	06050505 	streq	r0, [r5], -r5, lsl #10
     c5c:	4a7de603 	bmi	1f7a470 <__ccfg+0x1f5a4c8>
     c60:	01061405 	tsteq	r6, r5, lsl #8
     c64:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     c68:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     c6c:	03290504 			; <UNDEFINED> instruction: 0x03290504
     c70:	05010294 	streq	r0, [r1, #-660]	; 0xfffffd6c
     c74:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     c78:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
     c7c:	03060505 	movweq	r0, #25861	; 0x6505
     c80:	054a7de8 	strbeq	r7, [sl, #-3560]	; 0xfffff218
     c84:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     c88:	01210606 			; <UNDEFINED> instruction: 0x01210606
__attribute__ ((noreturn)) void __pi_release () {
     c8c:	13050501 	movwne	r0, #21761	; 0x5501
     c90:	01061405 	tsteq	r6, r5, lsl #8
     c94:	21060605 	tstcs	r6, r5, lsl #12
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
	check_stack_overflow;
     c9c:	06180513 			; <UNDEFINED> instruction: 0x06180513
     ca0:	3c0a0301 	stccc	3, cr0, [sl], {1}
     ca4:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
	update_n_wake (MAX_WORD, NO);
     ca8:	01061305 	tsteq	r6, r5, lsl #6
     cac:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
     cb0:	052f0605 	streq	r0, [pc, #-1541]!	; 6b3 <AONRTCIntHandler+0xc3>
	for_all_tasks (__pi_curr) {
     cb4:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
     cb8:	060b0501 	streq	r0, [fp], -r1, lsl #10
     cbc:	2e02cd03 	cdpcs	13, 0, cr12, cr2, cr3, {0}
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	051a0205 	ldreq	r0, [sl, #-517]	; 0xfffffdfb
	__SLEEP;
     cc4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
     cc8:	05340603 	ldreq	r0, [r4, #-1539]!	; 0xfffff9fd
     ccc:	0530060c 	ldreq	r0, [r0, #-1548]!	; 0xfffff9f4
     cd0:	22062c03 	andcs	r2, r6, #768	; 0x300
	system_event_count ++;
     cd4:	01060c05 	tsteq	r6, r5, lsl #24
     cd8:	052f0a05 	streq	r0, [pc, #-2565]!	; 2db <root+0x17>
	switch (__pi_systat.effpdm) {
     cdc:	03051f0c 	movweq	r1, #24332	; 0x5f0c
     ce0:	1e0c0522 	cfsh32ne	mvfx0, mvfx12, #18
     ce4:	2f060305 	svccs	0x00060305
     ce8:	054a0113 	strbeq	r0, [sl, #-275]	; 0xfffffeed
			__WFI ();
     cec:	01051902 	tsteq	r5, r2, lsl #18
     cf0:	16051306 	strne	r1, [r5], -r6, lsl #6
     cf4:	04204503 	strteq	r4, [r0], #-1283	; 0xfffffafd
	check_stack_overflow;
     cf8:	06050505 	streq	r0, [r5], -r5, lsl #10
     cfc:	4a7dc903 	bmi	1f73110 <__ccfg+0x1f53168>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     d00:	01060805 	tsteq	r6, r5, lsl #16
     d04:	21060605 	tstcs	r6, r5, lsl #12
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	29050404 	stmdbcs	r5, {r2, sl}
			goto Redo;
     d0c:	0102c203 	tsteq	r2, r3, lsl #4
	for_all_tasks (__pi_curr) {
     d10:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	06050505 	streq	r0, [r5], -r5, lsl #10
     d1c:	4a7dba03 	bmi	1f6f530 <__ccfg+0x1f4f588>
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	01061405 	tsteq	r6, r5, lsl #8
     d24:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
     d28:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2c:	03290504 			; <UNDEFINED> instruction: 0x03290504
     d30:	050102c0 	streq	r0, [r1, #-704]	; 0xfffffd40
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     d38:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
			__WFI ();
     d3c:	03060505 	movweq	r0, #25861	; 0x6505
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d40:	054a7dbc 	strbeq	r7, [sl, #-3516]	; 0xfffff244
     d44:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
}
     d48:	01210606 			; <UNDEFINED> instruction: 0x01210606
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	13050501 	movwne	r0, #21761	; 0x5501
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	01061405 	tsteq	r6, r5, lsl #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	21060605 	tstcs	r6, r5, lsl #12
     d58:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5c:	06180513 			; <UNDEFINED> instruction: 0x06180513
     d60:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     d64:	ce030603 	cfmadd32gt	mvax0, mvfx0, mvfx3, mvfx3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	06054a02 	streq	r4, [r5], -r2, lsl #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     d70:	15023006 	strne	r3, [r2, #-6]
     d74:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     d78:	0205002d 	andeq	r0, r5, #45	; 0x2d
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	00000704 	andeq	r0, r0, r4, lsl #14
     d80:	01038903 	tsteq	r3, r3, lsl #18
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	050e062d 	streq	r0, [lr, #-1581]	; 0xfffff9d3
     d8c:	06052402 	streq	r2, [r5], -r2, lsl #8
     d90:	1f02052f 	svcne	0x0002052f
     d94:	06052106 	streq	r2, [r5], -r6, lsl #2
     d98:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
			SysCtrlSetRechargeBeforePowerDown
     d9c:	06030520 	streq	r0, [r3], -r0, lsr #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da0:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
     da8:	05230604 	streq	r0, [r3, #-1540]!	; 0xfffff9fc
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
     db0:	f9030602 			; <UNDEFINED> instruction: 0xf9030602
     db4:	10052e7e 	andne	r2, r5, lr, ror lr
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	2e050106 	adfcss	f0, f5, f6
     dbc:	031a052e 	tsteq	sl, #192937984	; 0xb800000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	2f3c0187 	svccs	0x003c0187
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
     dc8:	09051f17 	stmdbeq	r5, {r0, r1, r2, r4, r8, r9, sl, fp, ip}
     dcc:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dd0:	2076030d 	rsbscs	r0, r6, sp, lsl #6
			while (!(AONWUCPowerStatusGet () &
     dd4:	05230b05 	streq	r0, [r3, #-2821]!	; 0xfffff4fb
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	04051d0d 	streq	r1, [r5], #-3341	; 0xfffff2f3
     ddc:	05134d06 	ldreq	r4, [r3, #-3334]	; 0xfffff2fa
     de0:	05190601 	ldreq	r0, [r9, #-1537]	; 0xfffff9ff
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de4:	2f290603 	svccs	0x00290603
     de8:	01060a05 	tsteq	r6, r5, lsl #20
     dec:	01000902 	tsteq	r0, r2, lsl #18
     df0:	00330501 	eorseq	r0, r3, r1, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	07540205 	ldrbeq	r0, [r4, -r5, lsl #4]
     df8:	d3030000 	movwle	r0, #12288	; 0x3000
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
     e00:	33051714 	movwcc	r1, #22292	; 0x5714
			SysCtrlAdjustRechargeAfterPowerDown ();
     e04:	01790306 	cmneq	r9, r6, lsl #6
			reinit_uart ();
     e08:	05270205 	streq	r0, [r7, #-517]!	; 0xfffffdfb
     e0c:	3c790333 	ldclcc	3, cr0, [r9], #-204	; 0xffffff34
     e10:	06270205 	strteq	r0, [r7], -r5, lsl #4
}
     e14:	0502043e 	streq	r0, [r2, #-1086]	; 0xfffffbc2
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	7bd50305 	blvc	ff541a34 <_estack+0xdf53ca34>
     e1c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	ab030602 	blge	c2630 <__ccfg+0xa2688>
     e24:	03060104 	movweq	r0, #24836	; 0x6104
     e28:	06048209 	streq	r8, [r4], -r9, lsl #4
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	d9032405 	stmdble	r3, {r0, r2, sl, sp}
     e30:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
     e34:	06230517 			; <UNDEFINED> instruction: 0x06230517
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e38:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e3c:	02a50301 	adceq	r0, r5, #67108864	; 0x4000000
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	7ddb0323 	ldclvc	3, cr0, [fp, #140]	; 0x8c
     e48:	06050520 	streq	r0, [r5], -r0, lsr #10
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	0622054f 	strteq	r0, [r2], -pc, asr #10
     e50:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	9e030602 	cfmadd32ls	mvax0, mvfx0, mvfx3, mvfx2
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	0d056602 	stceq	6, cr6, [r5, #-8]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     e60:	01052f06 	tsteq	r5, r6, lsl #30
			PRCMPowerDomainOff (
     e64:	0c021306 	stceq	3, cr1, [r2], {6}
     e68:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	__SLEEP;
     e6c:	0205001c 	andeq	r0, r5, #28
     e70:	000007a8 	andeq	r0, r0, r8, lsr #15
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	0105ef03 	tsteq	r5, r3, lsl #30
	goto Redo;
     e78:	04170205 	ldreq	r0, [r7], #-517	; 0xfffffdfb
     e7c:	03240506 			; <UNDEFINED> instruction: 0x03240506
     e80:	05017df7 	streq	r7, [r1, #-3575]	; 0xfffff209
     e84:	23051705 	movwcs	r1, #22277	; 0x5705
     e88:	01040106 	tsteq	r4, r6, lsl #2
     e8c:	88030205 	stmdahi	r3, {r0, r2, r9}
     e90:	06042002 	streq	r2, [r4], -r2
     e94:	f8032305 			; <UNDEFINED> instruction: 0xf8032305
     e98:	0104207d 	tsteq	r4, sp, ror r0
     e9c:	03060205 	movweq	r0, #25093	; 0x6205
     ea0:	044a0285 	strbeq	r0, [sl], #-645	; 0xfffffd7b
     ea4:	03240506 			; <UNDEFINED> instruction: 0x03240506
     ea8:	05017cc9 	streq	r7, [r1, #-3273]	; 0xfffff337
     eac:	0517172d 	ldreq	r1, [r7, #-1837]	; 0xfffff8d3
     eb0:	23051705 	movwcs	r1, #22277	; 0x5705
     eb4:	01040106 	tsteq	r4, r6, lsl #2
     eb8:	03060205 	movweq	r0, #25093	; 0x6205
     ebc:	043c03a9 	ldrteq	r0, [ip], #-937	; 0xfffffc57
     ec0:	03270506 			; <UNDEFINED> instruction: 0x03270506
     ec4:	050102ce 	streq	r0, [r1, #-718]	; 0xfffffd32
     ec8:	24051405 	strcs	r1, [r5], #-1029	; 0xfffffbfb
     ecc:	01040106 	tsteq	r4, r6, lsl #2
     ed0:	03060205 	movweq	r0, #25093	; 0x6205
     ed4:	02587db2 	subseq	r7, r8, #11392	; 0x2c80
     ed8:	0101000e 	tsteq	r1, lr
     edc:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
     ee0:	0007e002 	andeq	lr, r7, r2
int main (void) {
     ee4:	068f0300 	streq	r0, [pc], r0, lsl #6
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     eec:	1e063d05 	cdpne	13, 0, cr3, cr6, cr5, {0}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	0605052e 	streq	r0, [r5], -lr, lsr #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	05820b03 	streq	r0, [r2, #2819]	; 0xb03
	system_init ();
     ef8:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
	tcv_init ();
     efc:	0e052f08 	cdpeq	15, 0, cr2, cr5, cr8, {0}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f00:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     f04:	0f0a052f 	svceq	0x000a052f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	20061205 	andcs	r1, r6, r5, lsl #4
     f0c:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
     f10:	05340604 	ldreq	r0, [r4, #-1540]!	; 0xfffff9fc
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f14:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     f18:	28030605 	stmdacs	r3, {r0, r2, r9, sl}
	delay (16, 0);
     f1c:	0616052e 	ldreq	r0, [r6], -lr, lsr #10
     f20:	03010501 	movweq	r0, #5377	; 0x1501
     f24:	09052034 	stmdbeq	r5, {r2, r4, r5, sp}
	__pi_release ();
     f28:	3c7fa003 	ldclcc	0, cr10, [pc], #-12	; f24 <main+0x40>
     f2c:	0b030405 	bleq	c1f48 <__ccfg+0xa1fa0>
     f30:	21080520 	tstcs	r8, r0, lsr #10
     f34:	74030e05 	strvc	r0, [r3], #-3589	; 0xfffff1fb
     f38:	0604052e 	streq	r0, [r4], -lr, lsr #10
     f3c:	4b3c0b03 	blmi	f03b50 <__ccfg+0xee3ba8>
     f40:	01060805 	tsteq	r6, r5, lsl #16
static void killev (__pi_pcb_t *pid) {
     f44:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
	wfun = (aword)(pid->code);
     f48:	4b300605 	blmi	c02764 <__ccfg+0xbe27bc>
	for_all_tasks (i) {
     f4c:	05240405 	streq	r0, [r4, #-1029]!	; 0xfffffbfb
		for (j = 0; j < nevents (i); j++) {
     f50:	2403060b 	strcs	r0, [r3], #-1547	; 0xfffff9f5
     f54:	2d04054a 	cfstr32cs	mvfx0, [r4, #-296]	; 0xfffffed8
     f58:	0b052106 	bleq	149378 <__ccfg+0x1293d0>
			    || i->Events [j] . Event == wfun
     f5c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
		for (j = 0; j < nevents (i); j++) {
     f60:	206e0306 	rsbcs	r0, lr, r6, lsl #6
			if (i->Events [j] . Event == (aword)pid
     f64:	30060805 	andcc	r0, r6, r5, lsl #16
     f68:	061e0505 	ldreq	r0, [lr], -r5, lsl #10
     f6c:	0a05132f 	beq	145c30 <__ccfg+0x125c88>
				wakeupev (i, j);
     f70:	0612050e 	ldreq	r0, [r2], -lr, lsl #10
     f74:	2e0f0520 	cfsh32cs	mvfx0, mvfx15, #16
	for_all_tasks (i) {
     f78:	35060405 	strcc	r0, [r6, #-1029]	; 0xfffffbfb
}
     f7c:	01060705 	tsteq	r6, r5, lsl #14
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	34060405 	strcc	r0, [r6], #-1029	; 0xfffffbfb
static void qfree (aword *ch) {
     f84:	0608054b 	streq	r0, [r8], -fp, asr #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
	cc = (aword*)(mpools + MA_NP);
     f8c:	2f060505 	svccs	0x00060505
	m_setnextp (ch, chunk);
     f90:	0609054b 	streq	r0, [r9], -fp, asr #10
	m_setnextp (cc, ch);
     f94:	05204d03 	streq	r4, [r0, #-3331]!	; 0xfffff2fd
}
     f98:	20300304 	eorscs	r0, r0, r4, lsl #6
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
     fa0:	2e740305 	cdpcs	3, 7, cr0, cr4, cr5, {0}
     fa4:	03060405 	movweq	r0, #25605	; 0x6405
			m_setnextp (cc, m_nextp (chunk));
     fa8:	055e3c11 	ldrbeq	r3, [lr, #-3089]	; 0xfffff3ef
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	053d060b 	ldreq	r0, [sp, #-1547]!	; 0xfffff9f5
     fb0:	2f061f04 	svccs	0x00061f04
     fb4:	01060b05 	tsteq	r6, r5, lsl #22
     fb8:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	01060705 	tsteq	r6, r5, lsl #14
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	2f060505 	svccs	0x00060505
     fc4:	01060905 	tsteq	r6, r5, lsl #18
     fc8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
			m_setnextp (cc, m_nextp (chunk));
     fcc:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	16030604 	strne	r0, [r3], -r4, lsl #12
     fd4:	6d03062e 	stcvs	6, cr0, [r3, #-184]	; 0xffffff48
     fd8:	0607052e 	streq	r0, [r7], -lr, lsr #10
     fdc:	06050501 	streq	r0, [r5], -r1, lsl #10
     fe0:	0302052f 	movweq	r0, #9519	; 0x252f
     fe4:	05017f88 	streq	r7, [r1, #-3976]	; 0xfffff078
			if (m_size (chunk) >= m_size (ch))
     fe8:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     fec:	00f9030c 	rscseq	r0, r9, ip, lsl #6
     ff0:	1f130520 	svcne	0x00130520
		chunk = m_nextp (chunk))
     ff4:	2f060505 	svccs	0x00060505
     ff8:	01060c05 	tsteq	r6, r5, lsl #24
     ffc:	03060405 	movweq	r0, #25605	; 0x6405
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	12022011 	andne	r2, r2, #17
	diag_wait (a);
    1004:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	diag_wchar (c, a);
    1008:	0205002b 	andeq	r0, r5, #43	; 0x2b
    100c:	00000000 	andeq	r0, r0, r0
}
    1010:	0105ea03 	tsteq	r5, r3, lsl #20
    1014:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
	syserror (ESTATE, "state");
    1018:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    101c:	01010006 	tsteq	r1, r6
    1020:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    1024:	0008f002 	andeq	pc, r8, r2
void update_n_wake (word min, Boolean force) {
    1028:	07810300 	streq	r0, [r1, r0, lsl #6]
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1030:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1034:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	22051705 	andcs	r1, r5, #1310720	; 0x140000
    103c:	01040106 	tsteq	r4, r6, lsl #2
    1040:	67031905 	strvs	r1, [r3, -r5, lsl #18]
    1044:	0506042e 	streq	r0, [r6, #-1070]	; 0xfffffbd2
    1048:	20190322 	andscs	r0, r9, r2, lsr #6
    104c:	06050104 	streq	r0, [r5], -r4, lsl #2
    1050:	04206b03 	strteq	r6, [r0], #-2819	; 0xfffff4fd
    1054:	03220506 			; <UNDEFINED> instruction: 0x03220506
    1058:	01042015 	tsteq	r4, r5, lsl r0
    105c:	03060205 	movweq	r0, #25093	; 0x6205
    1060:	0605206b 	streq	r2, [r5], -fp, rrx
    1064:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1068:	2e290520 	cfsh64cs	mvdx0, mvdx9, #16
		for_all_tasks (i) {
    106c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
	__pi_mintk = znew + min;
    1070:	4b2f0603 	blmi	bc2884 <__ccfg+0xba28dc>
    1074:	01135801 	tsteq	r3, r1, lsl #16
			if (!twaiting (i))
    1078:	062e0101 	strteq	r0, [lr], -r1, lsl #2
    107c:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	2e014a66 	vmlscs.f32	s8, s2, s13
    1084:	05150205 	ldreq	r0, [r5, #-517]	; 0xfffffdfb
    1088:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    108c:	25052005 	strcs	r2, [r5, #-5]
    1090:	2e18052e 	cfmul64cs	mvdx0, mvdx8, mvdx14
    1094:	2f060305 	svccs	0x00060305
    1098:	062c1406 	strteq	r1, [ip], -r6, lsl #8
    109c:	1358014b 	cmpne	r8, #-1073741806	; 0xc0000012
    10a0:	2e010101 	adfcss	f0, f1, f1
    10a4:	66062006 	strvs	r2, [r6], -r6
    10a8:	014a582e 	cmpeq	sl, lr, lsr #16
    10ac:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
				wakeuptm (i);
    10b0:	01000b02 	tsteq	r0, r2, lsl #22
    10b4:	00210501 	eoreq	r0, r1, r1, lsl #10
		for_all_tasks (i) {
    10b8:	09b00205 	ldmibeq	r0!, {r0, r2, r9}
				d = i->Timer - znew;
    10bc:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    10c0:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    10c4:	04141314 	ldreq	r1, [r4], #-788	; 0xfffffcec
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	03030503 	movweq	r0, #13571	; 0x3503
    10cc:	040178fe 	streq	r7, [r1], #-2302	; 0xfffff702
    10d0:	06210501 	strteq	r0, [r1], -r1, lsl #10
	__pi_old = znew;
    10d4:	0106fd03 	tsteq	r6, r3, lsl #26	; <UNPREDICTABLE>
}
    10d8:	03050304 	movweq	r0, #21252	; 0x5304
	TCI_RUN_DELAY_TIMER;
    10dc:	20798303 	rsbscs	r8, r9, r3, lsl #6
}
    10e0:	02050104 	andeq	r0, r5, #4, 2
    10e4:	07830306 	streq	r0, [r3, r6, lsl #6]
    10e8:	010e0520 	tsteq	lr, r0, lsr #10
    10ec:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    10f0:	06330504 	ldrteq	r0, [r3], -r4, lsl #10
void proceed (word state) {
    10f4:	017dad03 	cmneq	sp, r3, lsl #26
	prcdstate (__pi_curr, state);
    10f8:	08050104 	stmdaeq	r5, {r2, r8}
    10fc:	2002d303 	andcs	sp, r2, r3, lsl #6
	release;
    1100:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    1104:	207dad03 	rsbscs	sl, sp, r3, lsl #26
void __pi_wait (aword event, word state) {
    1108:	08050104 	stmdaeq	r5, {r2, r8}
	sint j = nevents (__pi_curr);
    110c:	2002d303 	andcs	sp, r2, r3, lsl #6
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
    1114:	03051e08 	movweq	r1, #24072	; 0x5e08
    1118:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
		syserror (ENEVENTS, "sw");
    111c:	a7032905 	strge	r2, [r3, -r5, lsl #18]
    1120:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
	setestate (__pi_curr->Events [j], state, event);
    1124:	06330517 			; <UNDEFINED> instruction: 0x06330517
	incwait (__pi_curr);
    1128:	2e2d0501 	cfsh64cs	mvdx0, mvdx13, #1
	setestate (__pi_curr->Events [j], state, event);
    112c:	03050104 	movweq	r0, #20740	; 0x5104
}
    1130:	02d50306 	sbcseq	r0, r5, #402653184	; 0x18000000
    1134:	06080520 	streq	r0, [r8], -r0, lsr #10
    1138:	2203051e 	andcs	r0, r3, #125829120	; 0x7800000
void __pi_trigger (aword event) {
    113c:	042c0805 	strteq	r0, [ip], #-2053	; 0xfffff7fb
	for_all_tasks (i) {
    1140:	03330504 	teqeq	r3, #4, 10	; 0x1000000
		for (j = 0; j < nevents (i); j++) {
    1144:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
    1148:	03030501 	movweq	r0, #13569	; 0x3501
    114c:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    1150:	1d055841 	stcne	8, cr5, [r5, #-260]	; 0xfffffefc
			if (i->Events [j] . Event == event) {
    1154:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
    1158:	13030501 	movwne	r0, #13569	; 0x3501
    115c:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
				wakeupev (i, j);
    1160:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
    1164:	17050501 	strne	r0, [r5, -r1, lsl #10]
	for_all_tasks (i) {
    1168:	01062d05 	tsteq	r6, r5, lsl #26
}
    116c:	03050104 	movweq	r0, #20740	; 0x5104
aword __pi_join (aword pid, word st) {
    1170:	02d50306 	sbcseq	r0, r5, #402653184	; 0x18000000
	for_all_tasks (i) {
    1174:	06410520 	strbeq	r0, [r1], -r0, lsr #10
    1178:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
	return 0;
    117c:	010e051d 	tsteq	lr, sp, lsl r5
		if ((aword)i == pid) {
    1180:	04180205 	ldreq	r0, [r8], #-517	; 0xfffffdfb
			__pi_wait (pid, st);
    1184:	03030503 	movweq	r0, #13571	; 0x3503
}
    1188:	040178ec 	streq	r7, [r1], #-2284	; 0xfffff714
	for_all_tasks (i) {
    118c:	06010501 	streq	r0, [r1], -r1, lsl #10
    1190:	20079503 	andcs	r9, r7, r3, lsl #10
void delay (word d, word state) {
    1194:	01000802 	tsteq	r0, r2, lsl #16
	settstate (__pi_curr, state);
    1198:	00210501 	eoreq	r0, r1, r1, lsl #10
    119c:	09f40205 	ldmibeq	r4!, {r0, r2, r9}^
    11a0:	ec030000 	stc	0, cr0, [r3], {-0}
    11a4:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
	update_n_wake (d, YES);
    11a8:	04141314 	ldreq	r1, [r4], #-788	; 0xfffffcec
    11ac:	03030503 	movweq	r0, #13571	; 0x3503
	__pi_curr->Timer = __pi_old + d;
    11b0:	040178eb 	streq	r7, [r1], #-2283	; 0xfffff715
    11b4:	06210501 	strteq	r0, [r1], -r1, lsl #10
	inctimer (__pi_curr);
    11b8:	01079003 	tsteq	r7, r3
    11bc:	03050304 	movweq	r0, #21252	; 0x5304
    11c0:	2078f003 	rsbscs	pc, r8, r3
}
    11c4:	02050104 	andeq	r0, r5, #4, 2
    11c8:	07960306 	ldreq	r0, [r6, r6, lsl #6]
	if (fun == NULL)
    11cc:	010e0520 	tsteq	lr, r0, lsr #10
		return (int) __pi_curr;
    11d0:	01060905 	tsteq	r6, r5, lsl #18
    11d4:	33050404 	movwcc	r0, #21508	; 0x5404
	for_all_tasks (i)
    11d8:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
}
    11dc:	08050104 	stmdaeq	r5, {r2, r8}
		if (i->code == fun)
    11e0:	2002e603 	andcs	lr, r2, r3, lsl #12
	for_all_tasks (i)
    11e4:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    11e8:	207d9a03 	rsbscs	r9, sp, r3, lsl #20
    11ec:	03050104 	movweq	r0, #20740	; 0x5104
word crunning (fsmcode fun) {
    11f0:	2002e803 	andcs	lr, r2, r3, lsl #16
	for_all_tasks (i)
    11f4:	08051e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip}
    11f8:	1e050106 	adfnes	f0, f5, f6
		if (i->code == fun)
    11fc:	2106051f 	tstcs	r6, pc, lsl r5
    1200:	2f060305 	svccs	0x00060305
			c++;
    1204:	29050404 	stmdbcs	r5, {r2, sl}
	for_all_tasks (i)
    1208:	017d9403 	cmneq	sp, r3, lsl #8
    120c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
int __pi_strlen (const char *s) {
    1210:	04010633 	streq	r0, [r1], #-1587	; 0xfffff9cd
	for (i = 0; *(s+i) != '\0'; i++);
    1214:	03030501 	movweq	r0, #13569	; 0x3501
}
    1218:	052e02e8 	streq	r0, [lr, #-744]!	; 0xfffffd18
	for (i = 0; *(s+i) != '\0'; i++);
    121c:	04044702 	streq	r4, [r4], #-1794	; 0xfffff8fe
	while (n--)
    1220:	9b032d05 	blls	cc63c <__ccfg+0xac694>
    1224:	0104207d 	tsteq	r4, sp, ror r0
		*dest++ = *src++;
    1228:	03060305 	movweq	r0, #25349	; 0x6305
    122c:	052002e8 	streq	r0, [r0, #-744]!	; 0xfffffd18
    1230:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
		syserror (EREQPAR, "addv");
    1238:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
		syserror (ERESOURCE, "addv");
    123c:	26060106 	strcs	r0, [r6], -r6, lsl #2
	if (ioreq [loc] != NULL)
    1240:	03050304 	movweq	r0, #21252	; 0x5304
    1244:	0178d903 	cmneq	r8, r3, lsl #18
		syserror (ERESOURCE, "addv");
    1248:	01050104 	tsteq	r5, r4, lsl #2
	ioreq [loc] = rf;
    124c:	07a80306 	streq	r0, [r8, r6, lsl #6]!
}
    1250:	00080220 	andeq	r0, r8, r0, lsr #4
    1254:	18050101 	stmdane	r5, {r0, r8}
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	30020500 	andcc	r0, r2, r0, lsl #10
    125c:	0300000a 	movweq	r0, #10
    1260:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
    1264:	03010507 	movweq	r0, #5383	; 0x1507
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1268:	040178bb 	streq	r7, [r1], #-2235	; 0xfffff745
    126c:	06180501 	ldreq	r0, [r8], -r1, lsl #10
    1270:	0107c503 	tsteq	r7, r3, lsl #10
		syserror (ENODEVICE, "io");
    1274:	05050704 	streq	r0, [r5, #-1796]	; 0xfffff8fc
    1278:	2078bb03 	rsbscs	fp, r8, r3, lsl #22
	if (len == 0)
    127c:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	3d3d0602 	ldccc	6, cr0, [sp, #-8]!
    1284:	3c010101 	stfccs	f0, [r1], {1}
	if (ret >= 0)
    1288:	66062006 	strvs	r2, [r6], -r6
	if (ret == -1) {
    128c:	014a582e 	cmpeq	sl, lr, lsr #16
    1290:	5801132e 	stmdapl	r1, {r1, r2, r3, r5, r8, r9, ip}
		if (retry == WNONE)
    1294:	01050804 	tsteq	r5, r4, lsl #16
		iowait (dev, operation, retry);
    1298:	0605050f 	streq	r0, [r5], -pc, lsl #10
    129c:	20040501 	andcs	r0, r4, r1, lsl #10
    12a0:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
			release;
    12a4:	3c010101 	stfccs	f0, [r1], {1}
	if (ret == -2) {
    12a8:	66062006 	strvs	r2, [r6], -r6
		if (retry != WNONE) {
    12ac:	014a582e 	cmpeq	sl, lr, lsr #16
    12b0:	012f132e 			; <UNDEFINED> instruction: 0x012f132e
			iowait (dev, operation, retry);
    12b4:	05010458 	streq	r0, [r1, #-1112]	; 0xfffffba8
    12b8:	d0030601 	andle	r0, r3, r1, lsl #12
			(ioreq [dev]) (NONE, buf, len);
    12bc:	0b020107 	bleq	816e0 <__ccfg+0x61738>
    12c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    12c4:	02050015 	andeq	r0, r5, #21
		(ioreq [dev]) (NONE, buf, len);
    12c8:	00000ad4 	ldrdeq	r0, [r0], -r4
    12cc:	01088003 	tsteq	r8, r3
    12d0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
}
    12d4:	05100615 	ldreq	r0, [r0, #-1557]	; 0xfffff9eb
	if (retry != WNONE) {
    12d8:	061e3202 	ldreq	r3, [lr], -r2, lsl #4
		delay (-ret - 2, retry);
    12dc:	5959593e 	ldmdbpl	r9, {r1, r2, r3, r4, r5, r8, fp, ip, lr}^
    12e0:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    12e4:	017ca703 	cmneq	ip, r3, lsl #14
    12e8:	01063105 	tsteq	r6, r5, lsl #2
		release;
    12ec:	0b050104 	bleq	141704 <__ccfg+0x12175c>
    12f0:	207dc503 	rsbscs	ip, sp, r3, lsl #10
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	31050904 	tstcc	r5, r4, lsl #18
    12f8:	2002bb03 	andcs	fp, r2, r3, lsl #22
    12fc:	32050104 	andcc	r0, r5, #4, 2
    1300:	2e7dc803 	cdpcs	8, 7, cr12, cr13, cr3, {0}
    1304:	05050404 	streq	r0, [r5, #-1028]	; 0xfffffbfc
		syserror (ERESOURCE, "mal1");
    1308:	2e029b03 	vmlacs.f64	d9, d2, d3
    130c:	cc032d05 	stcgt	13, cr2, [r3], {5}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	4a032e7e 	bmi	ccd10 <__ccfg+0xacd68>
    1314:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1318:	02870331 	addeq	r0, r7, #-1006632960	; 0xc4000000
	m_size (mpools [0]) = mlen - m_hdrlen;
    131c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1320:	dc030602 	stcle	6, cr0, [r3], {2}
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1324:	e7032003 	str	r2, [r3, -r3]
    1328:	05140179 	ldreq	r0, [r4, #-377]	; 0xfffffe87
}
    132c:	12050107 	andne	r0, r5, #-1073741823	; 0xc0000001
    1330:	14030501 	strne	r0, [r3], #-1281	; 0xfffffaff
    1334:	01061505 	tsteq	r6, r5, lsl #10
    1338:	052c3d05 	streq	r3, [ip, #-3333]!	; 0xfffff2fb
    133c:	03052207 	movweq	r2, #20999	; 0x5207
    1340:	32052f06 	andcc	r2, r5, #6, 30
void __pi_free (aword *ch) {
    1344:	21055806 	tstcs	r5, r6, lsl #16
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1348:	0603052e 	streq	r0, [r3], -lr, lsr #10
    134c:	0606052f 	streq	r0, [r6], -pc, lsr #10
		syserror (EMALLOC, "malg");
    1350:	06040501 	streq	r0, [r4], -r1, lsl #10
    1354:	05040422 	streq	r0, [r4, #-1058]	; 0xfffffbde
	mcfree [MA_NP] += m_size (ch);
    1358:	02910329 	addseq	r0, r1, #-1543503872	; 0xa4000000
		m_size (ch) ^= MALLOC_UMASK;
    135c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    1360:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	mcfree [MA_NP] += m_size (ch);
    1364:	043c0638 	ldrteq	r0, [ip], #-1592	; 0xfffff9c8
	QFREE;
    1368:	06030501 	streq	r0, [r3], -r1, lsl #10
	if (mevent [MA_NP] . nwait) {
    136c:	207de903 	rsbscs	lr, sp, r3, lsl #18
    1370:	2e060605 	cfmadd32cs	mvax0, mvfx0, mvfx6, mvfx5
		trigger ((aword)(&(mevent [MA_NP])));
    1374:	21060405 	tstcs	r6, r5, lsl #8
		mevent [MA_NP] . nwait --;
    1378:	29050404 	stmdbcs	r5, {r2, sl}
}
    137c:	05012703 	streq	r2, [r1, #-1795]	; 0xfffff8fd
    1380:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    1384:	01040106 	tsteq	r4, r6, lsl #2
    1388:	03060405 	movweq	r0, #25605	; 0x6405
void kill (aword pid) {
    138c:	04043c56 	streq	r3, [r4], #-3158	; 0xfffff3aa
		pid = (aword) __pi_curr;
    1390:	db032905 	blle	cb7ac <__ccfg+0xab804>
	j = NULL;
    1394:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
	for_all_tasks (i) {
    1398:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	syserror (EREQPAR, "kpi");
    139c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    13a0:	9603063c 			; <UNDEFINED> instruction: 0x9603063c
		if ((aword)i == pid) {
    13a4:	12052e7f 	andne	r2, r5, #2032	; 0x7f0
    13a8:	06020501 	streq	r0, [r2], -r1, lsl #10
				__PCB = i->Next;
    13ac:	9a030601 	bls	c2bb8 <__ccfg+0xa2c10>
			killev (i);
    13b0:	01012e06 	tsteq	r1, r6, lsl #28
			ufree (i);
    13b4:	29050404 	stmdbcs	r5, {r2, sl}
			if (i == __pi_curr)
    13b8:	017a9503 	cmneq	sl, r3, lsl #10
    13bc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
				release;
    13c0:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
				j->Next = i->Next;
    13c4:	03020501 	movweq	r0, #9473	; 0x2501
    13c8:	043c05e6 	ldrteq	r0, [ip], #-1510	; 0xfffffa1a
    13cc:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
}
    13d0:	04207a9a 	strteq	r7, [r0], #-2714	; 0xfffff566
    13d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    13d8:	2005e603 	andcs	lr, r5, r3, lsl #12
void killall (fsmcode fun) {
    13dc:	29050404 	stmdbcs	r5, {r2, sl}
	j = NULL;
    13e0:	017a9503 	cmneq	sl, r3, lsl #10
	for (i = __PCB; i != NULL; ) {
    13e4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			if (i == __pi_curr)
    13e8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	for (i = __PCB; i != NULL; ) {
    13ec:	06020501 	streq	r0, [r2], -r1, lsl #10
	if (rel)
    13f0:	2005e603 	andcs	lr, r5, r3, lsl #12
		release;
    13f4:	01010101 	tsteq	r1, r1, lsl #2
		if (i->code == fun) {
    13f8:	01660101 	cmneq	r6, r1, lsl #2
    13fc:	0404012e 	streq	r0, [r4], #-302	; 0xfffffed2
			if (j == NULL)
    1400:	cb032905 	blgt	cb81c <__ccfg+0xab874>
				__PCB = k;
    1404:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
			if (i == __pi_curr)
    1408:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
				rel = YES;
    140c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			killev (i);
    1410:	05b00302 	ldreq	r0, [r0, #770]!	; 0x302
			ufree (i);
    1414:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
			i = k;
    1418:	7ad0032d 	bvc	ff4020d4 <_estack+0xdf3fd0d4>
    141c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
				j->Next = k;
    1420:	b0030602 	andlt	r0, r3, r2, lsl #12
    1424:	04042005 	streq	r2, [r4], #-5
}
    1428:	cb032905 	blgt	cb844 <__ccfg+0xab89c>
    142c:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1430:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
	if (size < 8)
    1434:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		_size = 2;
    1438:	b0030602 	andlt	r0, r3, r2, lsl #12
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	01012005 	tsteq	r1, r5
		_size = (((aword)size) + 3) >> 2;
    1440:	01010101 	tsteq	r1, r1, lsl #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1444:	03062305 	movweq	r2, #25349	; 0x6305
		_size = (((aword)size) + 3) >> 2;
    1448:	02050110 	andeq	r0, r5, #16, 2
		if (mevent [MA_NP] . nfail != 255)
    144c:	06207003 	strteq	r7, [r0], -r3
    1450:	032e0158 			; <UNDEFINED> instruction: 0x032e0158
			mevent [MA_NP] . nfail ++;
    1454:	0a04010d 	beq	101890 <__ccfg+0xe18e8>
		mnfree [MA_NP] = 0;
    1458:	cd030505 	cfstr32gt	mvfx0, [r3, #-20]	; 0xffffffec
    145c:	2f05017e 	svccs	0x0005017e
		if (m_magic (chunk) != MALLOC_MAGIC)
    1460:	01040106 	tsteq	r4, r6, lsl #2
    1464:	ba032705 	blt	cb080 <__ccfg+0xab0d8>
			syserror (EMALLOC, "malc");
    1468:	0a042001 	beq	109474 <__ccfg+0xe94cc>
    146c:	c6032f05 	strgt	r2, [r3], -r5, lsl #30
		if (m_size (chunk) >= _size)
    1470:	0104207e 	tsteq	r4, lr, ror r0
    1474:	03060205 	movweq	r0, #25093	; 0x6205
		chunk = m_nextp (chunk)) {
    1478:	052001b5 	streq	r0, [r0, #-437]!	; 0xfffffe4b
		m_setnextp (cc, m_nextp (chunk));
    147c:	05130623 	ldreq	r0, [r3, #-1571]	; 0xfffff9dd
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1480:	200c0302 	andcs	r0, ip, r2, lsl #6
    1484:	74032305 	strvc	r2, [r3], #-773	; 0xfffffcfb
			m_size (chunk) = _size;
    1488:	06020520 	streq	r0, [r2], -r0, lsr #10
			cc = chunk + _size + m_hdrlen;
    148c:	06270524 	strteq	r0, [r7], -r4, lsr #10
    1490:	28020501 	stmdacs	r2, {r0, r8, sl}
			m_size (cc) = waste - m_hdrlen;
    1494:	78032705 	stmdavc	r3, {r0, r2, r8, r9, sl, sp}
			QFREE;
    1498:	06020520 	streq	r0, [r2], -r0, lsr #10
		mevent [MA_NP] . nfail = 0;
    149c:	03313f28 	teqeq	r1, #40, 30	; 0xa0
		mcfree [MA_NP] -= m_size (chunk);
    14a0:	03404a0a 	movteq	r4, #2570	; 0xa0a
    14a4:	59017dc0 	stmdbpl	r1, {r6, r7, r8, sl, fp, ip, sp, lr}
    14a8:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
    14ac:	ae030505 	cfsh32ge	mvfx0, mvfx3, #5
		m_size (chunk) |= MALLOC_UMASK;
    14b0:	0104017e 	tsteq	r4, lr, ror r1
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14b4:	03060d05 	movweq	r0, #27909	; 0x6d05
		m_size (chunk) |= MALLOC_UMASK;
    14b8:	040101d4 	streq	r0, [r1], #-468	; 0xfffffe2c
			mnfree [MA_NP] = mcfree [MA_NP];
    14bc:	03310509 	teqeq	r1, #37748736	; 0x2400000
}
    14c0:	042e7eac 	strteq	r7, [lr], #-3756	; 0xfffff154
    14c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    14c8:	2001d403 	andcs	sp, r1, r3, lsl #8
    14cc:	01060d05 	tsteq	r6, r5, lsl #26
    14d0:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    14d4:	2e02c703 	cdpcs	7, 0, cr12, cr2, cr3, {0}
    14d8:	152e2e01 	strne	r2, [lr, #-3585]!	; 0xfffff1ff
aword __pi_fork (fsmcode func, aword data) {
    14dc:	01060605 	tsteq	r6, r5, lsl #12
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e0:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    14e4:	04300603 	ldrteq	r0, [r0], #-1539	; 0xfffff9fd
    14e8:	0305050b 	movweq	r0, #21771	; 0x550b
		if ((j = __PCB) == NULL)
    14ec:	040179c3 	streq	r7, [r1], #-2499	; 0xfffff63d
	i->Next = NULL;
    14f0:	015e030c 	cmpeq	lr, ip, lsl #6
	i->data = data;
    14f4:	01062e05 	tsteq	r6, r5, lsl #28
		if ((j = __PCB) == NULL)
    14f8:	05050b04 	streq	r0, [r5, #-2820]	; 0xfffff4fc
}
    14fc:	2e230306 	cdpcs	3, 2, cr0, cr3, cr6, {0}
			for (; j->Next != NULL; j = j->Next);
    1500:	01063405 	tsteq	r6, r5, lsl #8
    1504:	4b060505 	blmi	182920 <__ccfg+0x162978>
	return (aword) i;
    1508:	15050104 	strne	r0, [r5, #-260]	; 0xfffffefc
    150c:	4a06d503 	bmi	1b6920 <__ccfg+0x196978>
	if (mevent [MA_NP] . nwait != 255)
    1510:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1514:	15051304 	strne	r1, [r5, #-772]	; 0xfffffcfc
    1518:	1902053a 	stmdbne	r2, {r1, r3, r4, r5, r8, sl}
		mevent [MA_NP] . nwait ++;
    151c:	017ecb03 	cmneq	lr, r3, lsl #22
	wait ((aword)(&(mevent [MA_NP])), state);
    1520:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1524:	017ed403 	cmneq	lr, r3, lsl #8
void diag (const char *mess, ...) {
    1528:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    152c:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
    1530:	03020501 	movweq	r0, #9473	; 0x2501
	diag_disable_int (a, is);
    1534:	042002dd 	strteq	r0, [r0], #-733	; 0xfffffd23
    1538:	03230506 			; <UNDEFINED> instruction: 0x03230506
    153c:	04207da3 	strteq	r7, [r0], #-3491	; 0xfffff25d
				d = (bc == 16) ? 10000 : 1000000000;
    1540:	06020501 	streq	r0, [r2], -r1, lsl #10
	diag_disable_int (a, is);
    1544:	4a02dd03 	bmi	b8958 <__ccfg+0x989b0>
	while (*mess != '\0') {
    1548:	0601054e 	streq	r0, [r1], -lr, asr #10
	dgout ('\r');
    154c:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
	dgout ('\n');
    1550:	03060305 	movweq	r0, #25349	; 0x6305
    1554:	41412e5f 	cmpmi	r1, pc, asr lr
    1558:	13060405 	movwne	r0, #25605	; 0x6405
	diag_wait (a);
    155c:	021f0305 	andseq	r0, pc, #335544320	; 0x14000000
	diag_enable_int (a, is);
    1560:	0101002f 	tsteq	r1, pc, lsr #32
    1564:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
}
    1568:	00000002 	andeq	r0, r0, r2
    156c:	08fd0300 	ldmeq	sp!, {r8, r9}^
    1570:	17020501 	strne	r0, [r2, -r1, lsl #10]
		if (*mess == '%') {
    1574:	062c0516 			; <UNDEFINED> instruction: 0x062c0516
    1578:	66150501 	ldrvs	r0, [r5], -r1, lsl #10
			if (*mess == 'l') {
    157c:	05202c05 	streq	r2, [r0, #-3077]!	; 0xfffff3fb
    1580:	12052015 	andne	r2, r5, #21
				mess++;
    1584:	1f150521 	svcne	0x00150521
				val = va_arg (ap, lword);
    1588:	2301054a 	movwcs	r0, #5450	; 0x154a
				bc = 32;
    158c:	01000302 	tsteq	r0, r2, lsl #6
				bc = 16;
    1590:	001c0501 	andseq	r0, ip, r1, lsl #10
			switch (*mess) {
    1594:	00000205 	andeq	r0, r0, r5, lsl #4
    1598:	db030000 	blle	c15a0 <__ccfg+0xa15f8>
    159c:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
				dgout ('%');
    15a0:	0f051414 	svceq	0x00051414
    15a4:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
				dgout (*mess);
    15a8:	2506050e 	strcs	r0, [r6, #-1294]	; 0xfffffaf2
    15ac:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
			switch (*mess) {
    15b0:	03055806 	movweq	r5, #22534	; 0x5806
					v = __pi_hex_enc_table [
    15b4:	06052e06 	streq	r2, [r5], -r6, lsl #28
					i += 4;
    15b8:	31050106 	tstcc	r5, r6, lsl #2
					(val >> (bc - i)) & 0xf];
    15bc:	0f052d06 	svceq	0x00052d06
    15c0:	06020501 	streq	r0, [r2], -r1, lsl #10
					dgout (v);
    15c4:	054d0620 	strbeq	r0, [sp, #-1568]	; 0xfffff9e0
    15c8:	02130601 	andseq	r0, r3, #1048576	; 0x100000
				while (i < bc) {
    15cc:	01010004 	tsteq	r1, r4
			mess++;
    15d0:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
					d /= 10;
    15d4:	000c8c02 	andeq	r8, ip, r2, lsl #24
				if ((val >> (bc - 1)) & 1) {
    15d8:	0ae70300 	beq	ff9c21e0 <_estack+0xdf9bd1e0>
    15dc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
					dgout ('-');
    15e0:	03050304 	movweq	r0, #21252	; 0x5304
    15e4:	0177b203 	cmneq	r7, r3, lsl #4
						val |= 0xffff0000;
    15e8:	31050104 	tstcc	r5, r4, lsl #2
    15ec:	08cc0306 	stmiaeq	ip, {r1, r2, r8, r9}^
    15f0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
				d = (bc == 16) ? 10000 : 1000000000;
    15f4:	77b40303 	ldrvc	r0, [r4, r3, lsl #6]!
    15f8:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    15fc:	08cc0331 	stmiaeq	ip, {r0, r4, r5, r8, r9}^
					v = (word) (val / d);
    1600:	05030420 	streq	r0, [r3, #-1056]	; 0xfffffbe0
					if (v || d == 1) break;
    1604:	77b40303 	ldrvc	r0, [r4, r3, lsl #6]!
    1608:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
					d /= 10;
    160c:	d0030602 	andle	r0, r3, r2, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    1610:	04012e08 	streq	r2, [r1], #-3592	; 0xfffff1f8
					dgout (v + '0');
    1614:	06050502 	streq	r0, [r5], -r2, lsl #10
    1618:	6676dd03 	ldrbtvs	sp, [r6], -r3, lsl #26
    161c:	02050104 	andeq	r0, r5, #4, 2
					d /= 10;
    1620:	09a30306 	stmibeq	r3!, {r1, r2, r8, r9}
					val = val - (v * d);
    1624:	030d0420 	movweq	r0, #54304	; 0xd420
					if (d == 0) break;
    1628:	0101759b 			; <UNDEFINED> instruction: 0x0101759b
					v = (word) (val / d);
    162c:	4a5b1901 	bmi	16c7a38 <__ccfg+0x16a7a90>
    1630:	1a050104 	bne	141a48 <__ccfg+0x121aa0>
				if (bc == 16)
    1634:	099d0306 	ldmibeq	sp, {r1, r2, r8, r9}
				d = (bc == 16) ? 10000 : 1000000000;
    1638:	050d042e 	streq	r0, [sp, #-1070]	; 0xfffffbd2
					val &= 0xffff;
    163c:	f9030602 			; <UNDEFINED> instruction: 0xf9030602
					dgout (*s);
    1640:	01012076 	tsteq	r1, r6, ror r0
					s++;
    1644:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
				while (*s != '\0') {
    1648:	03030503 	movweq	r0, #13571	; 0x3503
    164c:	0d040136 	stfeqs	f0, [r4, #-216]	; 0xffffff28
			dgout (*mess++);
    1650:	4a030205 	bmi	c1e6c <__ccfg+0xa1ec4>
    1654:	01048220 	tsteq	r4, r0, lsr #4
    1658:	0108eb03 	tsteq	r8, r3, lsl #22
    165c:	01061505 	tsteq	r6, r5, lsl #10
    1660:	4c060205 	sfmmi	f0, 4, [r6], {5}
}
    1664:	01061505 	tsteq	r6, r5, lsl #10
    while(1)
    1668:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
{
    166c:	02052015 	andeq	r2, r5, #21
    SetupTrimDevice();
    1670:	06040520 	streq	r0, [r4], -r0, lsr #10
    pui32Src = &_etext;
    1674:	0d04216a 	stfeqs	f2, [r4, #-424]	; 0xfffffe58
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1678:	8e030205 	cdphi	2, 0, cr0, cr3, cr5, {0}
    __asm("    ldr     r0, =_bss\n"
    167c:	03040177 	movweq	r0, #16759	; 0x4177
    1680:	2b030305 	blcs	c229c <__ccfg+0xa22f4>
    1684:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
    1688:	20550302 	subscs	r0, r5, r2, lsl #6
    168c:	01042020 	tsteq	r4, r0, lsr #32
   main();
    1690:	200ac503 	andcs	ip, sl, r3, lsl #10
    FaultISR();
    1694:	03050d04 	movweq	r0, #23812	; 0x5d04
        *pui32Dest++ = *pui32Src++;
    1698:	4a75a603 	bmi	1d6aeac <__ccfg+0x1d4af04>
    169c:	01061005 	tsteq	r6, r5
    16a0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    16a4:	1f052023 	svcne	0x00052023
    16a8:	06040520 	streq	r0, [r4], -r0, lsr #10
    16ac:	060e0530 			; <UNDEFINED> instruction: 0x060e0530
    16b0:	06040501 	streq	r0, [r4], -r1, lsl #10
    16b4:	1c02052f 	cfstr32ne	mvfx0, [r2], {47}	; 0x2f
static byte get_byte () {
    16b8:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16bc:	2e098f03 	cdpcs	15, 0, cr8, cr9, cr3, {0}
    16c0:	01062a05 	tsteq	r6, r5, lsl #20
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c4:	05270405 	streq	r0, [r7, #-1029]!	; 0xfffffbfb
    16c8:	2079032a 	rsbscs	r0, r9, sl, lsr #6
		if (ee_inp)
    16cc:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
			b |= 1;
    16d0:	b2030904 	andlt	r0, r3, #4, 18	; 0x10000
    16d4:	2905017f 	stmdbcs	r5, {r0, r1, r2, r3, r4, r5, r6, r8}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16d8:	01040106 	tsteq	r4, r6, lsl #2
	for (b = 0, i = 0; i < 8; i++) {
    16dc:	03060405 	movweq	r0, #25605	; 0x6405
}
    16e0:	4d6600d1 	stclmi	0, cr0, [r6, #-836]!	; 0xfffffcbc
    16e4:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    16e8:	01789f03 	cmneq	r8, r3, lsl #30
static void put_byte (byte b) {
    16ec:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    16f0:	2007e503 	andcs	lr, r7, r3, lsl #10
    16f4:	01061a05 	tsteq	r6, r5, lsl #20
    16f8:	4b060405 	blmi	182714 <__ccfg+0x16276c>
		if (b & 0x80)
    16fc:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    1700:	06040501 	streq	r0, [r4], -r1, lsl #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1704:	0502044d 	streq	r0, [r2, #-1101]	; 0xfffffbb3
	for (i = 0; i < 8; i++) {
    1708:	78960305 	ldmvc	r6, {r0, r2, r8, r9}
		b <<= 1;
    170c:	06010501 	streq	r0, [r1], -r1, lsl #10
	for (i = 0; i < 8; i++) {
    1710:	05010421 	streq	r0, [r1, #-1057]	; 0xfffffbdf
}
    1714:	f1030604 			; <UNDEFINED> instruction: 0xf1030604
    1718:	0c042007 	stceq	0, cr2, [r4], {7}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    171c:	a0030505 	andge	r0, r3, r5, lsl #10
    1720:	09040178 	stmdbeq	r4, {r3, r4, r5, r6, r8}
	put_byte (cmd);
    1724:	03063105 	movweq	r3, #24837	; 0x6105
    1728:	040102d4 	streq	r0, [r1], #-724	; 0xfffffd2c
}
    172c:	032e050c 			; <UNDEFINED> instruction: 0x032e050c
    1730:	042e7dac 	strteq	r7, [lr], #-3500	; 0xfffff254
static void wwait (word st, word del) {
    1734:	0352050e 	cmpeq	r2, #58720256	; 0x3800000
    1738:	042e0288 	strteq	r0, [lr], #-648	; 0xfffffd78
    173c:	032e050c 			; <UNDEFINED> instruction: 0x032e050c
	while (dopen && (rdsr () & 1)) {
    1740:	042e7df8 	strteq	r7, [lr], #-3576	; 0xfffff208
    1744:	06040501 	streq	r0, [r4], -r1, lsl #10
    1748:	2007e503 	andcs	lr, r7, r3, lsl #10
    174c:	31050e04 	tstcc	r5, r4, lsl #28
	put_byte (CMD_RDSR);
    1750:	017aa003 	cmneq	sl, r3
	r = get_byte ();
    1754:	05150505 	ldreq	r0, [r5, #-1285]	; 0xfffffafb
    1758:	04010652 	streq	r0, [r1], #-1618	; 0xfffff9ae
	while (dopen && (rdsr () & 1)) {
    175c:	03040501 	movweq	r0, #17665	; 0x4501
}
    1760:	042005e5 	strteq	r0, [r0], #-1509	; 0xfffffa1b
		if (st == WNONE)
    1764:	0352050e 	cmpeq	r2, #58720256	; 0x3800000
    1768:	042e7a9b 	strteq	r7, [lr], #-2715	; 0xfffff565
			mdelay (1);
    176c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1770:	2e05e003 	cdpcs	0, 0, cr14, cr5, cr3, {0}
			delay (del, st);
    1774:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    1778:	01788603 	cmneq	r8, r3, lsl #12
			release;
    177c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1780:	2007fc03 	andcs	pc, r7, r3, lsl #24
    1784:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
static void ready () {
    1788:	017aea03 	cmneq	sl, r3, lsl #20
	if (dopen) {
    178c:	01063105 	tsteq	r6, r5, lsl #2
		wwait (WNONE, 1);
    1790:	b6032905 	strlt	r2, [r3], -r5, lsl #18
    1794:	31052004 	tstcc	r5, r4
    1798:	2e7bca03 	vaddcs.f32	s25, s22, s6
	dstat = 0;
    179c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
}
    17a0:	05990306 	ldreq	r0, [r9, #774]	; 0x306
    17a4:	0623052e 	strteq	r0, [r3], -lr, lsr #10
    17a8:	20040501 	andcs	r0, r4, r1, lsl #10
	udelay (1);
    17ac:	09046a06 	stmdbeq	r4, {r1, r2, r9, fp, sp, lr}
    17b0:	9f030505 	svcls	0x00030505
	udelay (1);
    17b4:	3f050179 	svccc	0x00050179
		dopen = DOPEN_TEMP;
    17b8:	01040106 	tsteq	r4, r6, lsl #2
    17bc:	ed030405 	cfstrs	mvf0, [r3, #-20]	; 0xffffffec
    17c0:	09042006 	stmdbeq	r4, {r1, r2, sp}
    17c4:	93033f05 	movwls	r3, #16133	; 0x3f05
static void cclose () {
    17c8:	01042079 	tsteq	r4, r9, ror r0
	if (dopen == DOPEN_TEMP) {
    17cc:	03060405 	movweq	r0, #25605	; 0x6405
    17d0:	042e06ea 	strteq	r0, [lr], #-1770	; 0xfffff916
		wwait (WNONE, 1);
    17d4:	7f900309 	svcvc	0x00900309
    17d8:	06290501 	strteq	r0, [r9], -r1, lsl #10
	cmd_0 (CMD_DP);
    17dc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    17e0:	00f30304 	rscseq	r0, r3, r4, lsl #6
		dopen = 0;
    17e4:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
}
    17e8:	7f8d0329 	svcvc	0x008d0329
word ee_open () {
    17ec:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	ready ();
    17f0:	f3030604 	vmax.u8	d0, d3, d4
	dopen = DOPEN_PERM;
    17f4:	404d4a00 	submi	r4, sp, r0, lsl #20
    17f8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
}
    17fc:	0177ea03 	cmneq	r7, r3, lsl #20
	if (dopen) {
    1800:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1804:	20089903 	andcs	r9, r8, r3, lsl #18
		dopen = DOPEN_TEMP;
    1808:	01061a05 	tsteq	r6, r5, lsl #20
		cclose ();
    180c:	4b060405 	blmi	182828 <__ccfg+0x162880>
}
    1810:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
int ser_in (word st, char *buf, int len) {
    1814:	23040501 	movwcs	r0, #17665	; 0x4501
    1818:	051d1a05 	ldreq	r1, [sp, #-2565]	; 0xfffff5fb
	if (len == 0)
    181c:	593f0604 	ldmdbpl	pc!, {r2, r9, sl}	; <UNPREDICTABLE>
	if (__inpline == NULL) {
    1820:	ee030904 	vmla.f16	s0, s6, s8
		if ((prcs = running (__inserial)) == 0) {
    1824:	2905017e 	stmdbcs	r5, {r1, r2, r3, r4, r5, r6, r8}
    1828:	0e040106 	adfeqs	f0, f4, f6
			prcs = runthread (__inserial);
    182c:	db030d05 	blle	c4c48 <__ccfg+0xa4ca0>
    1830:	09042e7b 	stmdbeq	r4, {r0, r1, r3, r4, r5, r6, r9, sl, fp, sp}
			if (prcs == 0) {
    1834:	a5032905 	strge	r2, [r3, #-2309]	; 0xfffff6fb
				npwait (st);
    1838:	01042004 	tsteq	r4, r4
		release;
    183c:	03060405 	movweq	r0, #25605	; 0x6405
		join (prcs, st);
    1840:	044a0197 	strbeq	r0, [sl], #-407	; 0xfffffe69
    1844:	0331050e 	teqeq	r1, #58720256	; 0x3800000
	if (*__inpline == NULL) // bin cmd
    1848:	050179f3 	streq	r7, [r1, #-2547]	; 0xfffff60d
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    184c:	52051505 	andpl	r1, r5, #20971520	; 0x1400000
	if (prcs >= len)
    1850:	01040106 	tsteq	r4, r6, lsl #2
		prcs = len-1;
    1854:	03061a05 	movweq	r1, #27141	; 0x6a05
	memcpy (buf, __inpline, prcs);
    1858:	052e068c 	streq	r0, [lr, #-1676]!	; 0xfffff974
    185c:	0e04110a 	adfeqs	f1, f4, #2.0
    1860:	c3030505 	movwgt	r0, #13573	; 0x3505
	ufree (__inpline);
    1864:	0d05017a 	stfeqs	f0, [r5, #-488]	; 0xfffffe18
	__inpline = NULL;
    1868:	01040106 	tsteq	r4, r6, lsl #2
	if (*buf) // if it's NULL, it's a bin cmd
    186c:	bd030a05 	vstrlt	s0, [r3, #-20]	; 0xffffffec
		buf [prcs] = '\0';
    1870:	04052005 	streq	r2, [r5], #-5
}
    1874:	05593206 	ldrbeq	r3, [r9, #-518]	; 0xfffffdfa
		prcs = strlen (__inpline);
    1878:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    187c:	0521061a 	streq	r0, [r1, #-1562]!	; 0xfffff9e6
		return 0;
    1880:	0b05110a 	bleq	145cb0 <__ccfg+0x125d08>
    1884:	0a050106 	beq	141ca4 <__ccfg+0x121cfc>
    1888:	06040558 			; <UNDEFINED> instruction: 0x06040558
int ser_outf (word st, const char *m, ...) {
    188c:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
    1890:	7ab80305 	bvc	fee024ac <_estack+0xdedfd4ac>
	if ((prcs = running (__outserial)) != 0) {
    1894:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    1898:	033f0501 	teqeq	pc, #4194304	; 0x400000
		join (prcs, st);
    189c:	05207ebc 	streq	r7, [r0, #-3772]!	; 0xfffff144
    18a0:	01c40331 	biceq	r0, r4, r1, lsr r3
		release;
    18a4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18a8:	cb030604 	blgt	c30c0 <__ccfg+0xa3118>
    18ac:	09042005 	stmdbeq	r4, {r0, r2, sp}
    18b0:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
		umwait (st);
    18b4:	3f050178 	svccc	0x00050178
    18b8:	01040106 	tsteq	r4, r6, lsl #2
	if (runstrand (__outserial, buf) == 0) {
    18bc:	03060405 	movweq	r0, #25605	; 0x6405
    18c0:	042e0792 	strteq	r0, [lr], #-1938	; 0xfffff86e
    18c4:	0305050c 	movweq	r0, #21772	; 0x550c
		ufree (buf);
    18c8:	050177f5 	streq	r7, [r1, #-2037]	; 0xfffff80b
		npwait (st);
    18cc:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
}
    18d0:	06040501 	streq	r0, [r4], -r1, lsl #10
    18d4:	2e088e03 	cdpcs	14, 0, cr8, cr8, cr3, {0}
    18d8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    18dc:	0177c903 	cmneq	r7, r3, lsl #18
int ser_inf (word st, const char *fmt, ...) {
    18e0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    18e4:	2008ba03 	andcs	fp, r8, r3, lsl #20
	if (fmt == NULL)
    18e8:	2f2e0903 	svccs	0x002e0903
	if (__inpline == NULL) {
    18ec:	b0030205 	andlt	r0, r3, r5, lsl #4
		if ((prcs = running (__inserial)) == 0) {
    18f0:	0604017d 			; <UNDEFINED> instruction: 0x0604017d
    18f4:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
			prcs = runthread (__inserial);
    18f8:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
    18fc:	06230517 			; <UNDEFINED> instruction: 0x06230517
			if (prcs == 0) {
    1900:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				npwait (st);
    1904:	01a80301 			; <UNDEFINED> instruction: 0x01a80301
		release;
    1908:	06040558 			; <UNDEFINED> instruction: 0x06040558
		join (prcs, st);
    190c:	2002f003 	andcs	pc, r2, r3
    1910:	062c055b 			; <UNDEFINED> instruction: 0x062c055b
	va_start (ap, fmt);
    1914:	27320501 	ldrcs	r0, [r2, -r1, lsl #10]!
	prcs = vscan (__inpline, fmt, ap);
    1918:	79032c05 	stmdbvc	r3, {r0, r2, sl, fp, sp}
    191c:	06040520 	streq	r0, [r4], -r0, lsr #10
	ufree (__inpline);
    1920:	062d054c 	strteq	r0, [sp], -ip, asr #10
	__inpline = NULL;
    1924:	06040501 	streq	r0, [r4], -r1, lsl #10
}
    1928:	0632055d 			; <UNDEFINED> instruction: 0x0632055d
    192c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1930:	0632053e 			; <UNDEFINED> instruction: 0x0632053e
		return 0;
    1934:	06040501 	streq	r0, [r4], -r1, lsl #10
    1938:	05020424 	streq	r0, [r2, #-1060]	; 0xfffffbdc
    193c:	778b0305 	strvc	r0, [fp, r5, lsl #6]
strand (__outserial, const char*)
    1940:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1944:	08f80304 	ldmeq	r8!, {r2, r8, r9}^
    1948:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    194c:	7a880305 	bvc	fe202568 <_estack+0xde1fd568>
endstrand
    1950:	062d0501 	strteq	r0, [sp], -r1, lsl #10
    1954:	06050501 	streq	r0, [r5], -r1, lsl #10
	ptr = data;
    1958:	064d0531 			; <UNDEFINED> instruction: 0x064d0531
    195c:	06050501 	streq	r0, [r5], -r1, lsl #10
	if (*ptr)
    1960:	062e053d 			; <UNDEFINED> instruction: 0x062e053d
		len = strlen (ptr);
    1964:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1968:	f7030604 			; <UNDEFINED> instruction: 0xf7030604
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    196c:	02043c05 	andeq	r3, r4, #1280	; 0x500
    1970:	85030505 	strhi	r0, [r3, #-1285]	; 0xfffffafb
    1974:	0e040177 	mcreq	1, 0, r0, cr4, cr7, {3}
    1978:	03060d05 	movweq	r0, #27909	; 0x6d05
    197c:	042002e8 	strteq	r0, [r0], #-744	; 0xfffffd18
	len -= quant;
    1980:	06390501 	ldrteq	r0, [r9], -r1, lsl #10
    1984:	20069603 	andcs	r9, r6, r3, lsl #12
    1988:	04010a05 	streq	r0, [r1], #-2565	; 0xfffff5fb
	if (len == 0) {
    198c:	0305050e 	movweq	r0, #21774	; 0x550e
		ufree (data);
    1990:	050179ea 	streq	r7, [r1, #-2538]	; 0xfffff616
		finish;
    1994:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    1998:	030a0501 	movweq	r0, #42241	; 0xa501
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    199c:	05200696 	streq	r0, [r0, #-1686]!	; 0xfffff96a
    19a0:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
    19a4:	03050509 	movweq	r0, #21769	; 0x5509
    19a8:	050177ec 	streq	r7, [r1, #-2028]	; 0xfffff814
    19ac:	04010641 	streq	r0, [r1], #-1601	; 0xfffff9bf
strand (__inserial, address)
    19b0:	03040501 	movweq	r0, #17665	; 0x4501
    19b4:	042e0897 	strteq	r0, [lr], #-2199	; 0xfffff769
    19b8:	03410509 	movteq	r0, #5385	; 0x1509
    19bc:	042077e9 	strteq	r7, [r0], #-2025	; 0xfffff817
    19c0:	06040501 	streq	r0, [r4], -r1, lsl #10
	if (__inpline != NULL)
    19c4:	20089703 	andcs	r9, r8, r3, lsl #14
    19c8:	050d0452 	streq	r0, [sp, #-1106]	; 0xfffffbae
		finish;
    19cc:	75d10302 	ldrbvc	r0, [r1, #770]	; 0x302
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    19d0:	01014a20 	tsteq	r1, r0, lsr #20
    19d4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    19d8:	012b0303 			; <UNDEFINED> instruction: 0x012b0303
    19dc:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
		umwait (IM_INIT);
    19e0:	16205503 	strtne	r5, [r0], -r3, lsl #10
		release;
    19e4:	01003702 	tsteq	r0, r2, lsl #14
	savedata (data);
    19e8:	00120501 	andseq	r0, r2, r1, lsl #10
	len = MAX_LINE_LENGTH;
    19ec:	00000205 	andeq	r0, r0, r5, lsl #4
	io (IM_READ, __cport, READ, ptr, 1);
    19f0:	e1030000 	mrs	r0, (UNDEF: 3)
    19f4:	02050100 	andeq	r0, r5, #0, 2
    19f8:	06120514 			; <UNDEFINED> instruction: 0x06120514
    19fc:	2202051e 	andcs	r0, r2, #125829120	; 0x7800000
	if (ptr == (char*) data) { // new line
    1a00:	21061f21 	tstcs	r6, r1, lsr #30
    1a04:	053f4b2f 	ldreq	r4, [pc, #-2863]!	; edd <__pi_release+0x251>
		if (*ptr == '\0') { // bin cmd
    1a08:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
			proceed (IM_BIN);
    1a0c:	022f0602 	eoreq	r0, pc, #2097152	; 0x200000
    1a10:	01010008 	tsteq	r1, r8
		if (*ptr < 0x20)
    1a14:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    1a18:	00000002 	andeq	r0, r0, r2
			proceed (IM_READ);
    1a1c:	00f10300 	rscseq	r0, r1, r0, lsl #6
    1a20:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
	if (*ptr == '\n' || *ptr == '\r') {
    1a24:	063a0514 			; <UNDEFINED> instruction: 0x063a0514
    1a28:	0605200e 	streq	r2, [r5], -lr
    1a2c:	1c3a0524 	cfldr32ne	mvfx0, [sl], #-144	; 0xffffff70
		*ptr = '\0';
    1a30:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
		__inpline = (char*)data;
    1a34:	053f0603 	ldreq	r0, [pc, #-1539]!	; 1439 <__pi_malloc+0x5>
		finish;
    1a38:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
	if (len) {
    1a3c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
		ptr++;
    1a40:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1a44:	03052e0b 	movweq	r2, #24075	; 0x5e0b
		len--;
    1a48:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
	proceed (IM_READ);
    1a4c:	0f040106 	svceq	0x00040106
	io (IM_BIN, __cport, READ, ptr, 1);
    1a50:	15032f05 	strne	r2, [r3, #-3845]	; 0xfffff0fb
    1a54:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    1a58:	206b0309 	rsbcs	r0, fp, r9, lsl #6
    1a5c:	21060305 	tstcs	r6, r5, lsl #6
    1a60:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
	len -= 2;
    1a64:	05011403 	streq	r1, [r1, #-1027]	; 0xfffffbfd
	if (len > *ptr + 1) // 1 for 0x04
    1a68:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
    1a6c:	03010501 	movweq	r0, #5377	; 0x1501
		len = *ptr + 1;
    1a70:	0405207a 	streq	r2, [r5], #-122	; 0xffffff86
    1a74:	206f0306 	rsbcs	r0, pc, r6, lsl #6
	ptr++;
    1a78:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a7c:	0100c303 	tsteq	r0, r3, lsl #6
    1a80:	06180514 			; <UNDEFINED> instruction: 0x06180514
    1a84:	06050501 	streq	r0, [r5], -r1, lsl #10
    1a88:	05010433 	streq	r0, [r1, #-1075]	; 0xfffffbcd
    1a8c:	b603060b 	strlt	r0, [r3], -fp, lsl #12
    1a90:	0305017f 	movweq	r0, #20863	; 0x517f
	len -= quant;
    1a94:	0f043406 	svceq	0x00043406
		__inpline = (char*)data;
    1a98:	050e0505 	streq	r0, [lr, #-1285]	; 0xfffffafb
		finish;
    1a9c:	0401062f 	streq	r0, [r1], #-1583	; 0xfffff9d1
	ptr += quant;
    1aa0:	06030501 	streq	r0, [r3], -r1, lsl #10
    1aa4:	06060541 	streq	r0, [r6], -r1, asr #10
endstrand
    1aa8:	3f040501 	svccc	0x00040501
    1aac:	052b0605 	streq	r0, [fp, #-1541]!	; 0xfffff9fb
	proceed (IM_BINL);
    1ab0:	2f230604 	svccs	0x00230604
endstrand
    1ab4:	06220305 	strteq	r0, [r2], -r5, lsl #6
    1ab8:	1f090513 	svcne	0x00090513
    1abc:	21060305 	tstcs	r6, r5, lsl #6
    1ac0:	0009022f 	andeq	r0, r9, pc, lsr #4
    1ac4:	11050101 	tstne	r5, r1, lsl #2
    1ac8:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
		if (res && (d < n))
    1acc:	0300000e 	movweq	r0, #14
    1ad0:	05010af1 	streq	r0, [r1, #-2801]	; 0xfffff50f
    1ad4:	05131603 	ldreq	r1, [r3, #-1539]	; 0xfffff9fd
    1ad8:	1105010f 	tstne	r5, pc, lsl #2
			res [d] = (char) c;
    1adc:	05200d06 	streq	r0, [r0, #-3334]!	; 0xfffff2fa
		d++;
    1ae0:	03052625 	movweq	r2, #22053	; 0x5625
    1ae4:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
    1ae8:	06250521 	strteq	r0, [r5], -r1, lsr #10
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1aec:	06370501 	ldrteq	r0, [r7], -r1, lsl #10
    1af0:	010f052d 	tsteq	pc, sp, lsr #10
    1af4:	01060305 	tsteq	r6, r5, lsl #6
				enci (10000);
    1af8:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1afc:	79031906 	stmdbvc	r3, {r1, r2, r8, fp, ip}
    1b00:	32310620 	eorscc	r0, r1, #32, 12	; 0x2000000
	d = 0;
    1b04:	1c055b5b 			; <UNDEFINED> instruction: 0x1c055b5b
		c = *fm++;
    1b08:	0c050106 	stfeqs	f0, [r5], {6}
		if (c == '\\') {
    1b0c:	2302054a 	movwcs	r0, #9546	; 0x254a
			if ((c = *fm++) == '\0') {
    1b10:	051d0c05 	ldreq	r0, [sp, #-3077]	; 0xfffff3fb
    1b14:	3e230602 	cfmadda32cc	mvax0, mvax0, mvfx3, mvfx2
				outc ('\\');
    1b18:	03050304 	movweq	r0, #21252	; 0x5304
			if ((c = *fm++) == '\0') {
    1b1c:	0175c503 	cmneq	r5, r3, lsl #10
				outc ('\\');
    1b20:	02050104 	andeq	r0, r5, #4, 2
    1b24:	200abd03 	andcs	fp, sl, r3, lsl #26
			outc (c);
    1b28:	01000e02 	tsteq	r0, r2, lsl #28
    1b2c:	000ee001 	andeq	lr, lr, r1
			if (c == '\0')
    1b30:	90000300 	andls	r0, r0, r0, lsl #6
    1b34:	02000001 	andeq	r0, r0, #1
			outc (c);
    1b38:	0d0efb01 	vstreq	d15, [lr, #-4]
				outc (val);
    1b3c:	01010100 	mrseq	r0, (UNDEF: 17)
				val = (word) va_arg (ap, aword);
    1b40:	00000001 	andeq	r0, r0, r1
		if (c == '%') {
    1b44:	01000001 	tsteq	r0, r1
    1b48:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a94 <__inserial+0xe4>
			c = *fm++;
    1b4c:	616d2f65 	cmnvs	sp, r5, ror #30
			switch (c) {
    1b50:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b54:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1b58:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b5c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1b60:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1b64:	4349502f 	movtmi	r5, #36911	; 0x902f
    1b68:	502f534f 	eorpl	r5, pc, pc, asr #6
    1b6c:	534f6369 	movtpl	r6, #62313	; 0xf369
				outc ('%');
    1b70:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    1b74:	006c656e 	rsbeq	r6, ip, lr, ror #10
				outc (c);
    1b78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1ac4 <__inserial+0x114>
    1b7c:	616d2f65 	cmnvs	sp, r5, ror #30
    1b80:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				if (c == '\0')
    1b84:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				return d;
    1b88:	706f746b 	rsbvc	r7, pc, fp, ror #8
}
    1b8c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1b90:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			switch (c) {
    1b94:	4349502f 	movtmi	r5, #36911	; 0x902f
    1b98:	502f534f 	eorpl	r5, pc, pc, asr #6
    1b9c:	534f6369 	movtpl	r6, #62313	; 0xf369
				for (i = 12; ; i -= 4) {
    1ba0:	3143432f 	cmpcc	r3, pc, lsr #6
				val = (word) va_arg (ap, aword);
    1ba4:	2f585833 	svccs	0x00585833
						[ (val >> i) & 0xf ]);
    1ba8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1bac:	41575858 	cmpmi	r7, r8, asr r8
    1bb0:	642f4552 	strtvs	r4, [pc], #-1362	; 1bb8 <__pi_vfparse+0xcc>
					outc (__pi_hex_enc_table
    1bb4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1bb8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
					if (i == 0)
    1bbc:	73752f00 	cmnvc	r5, #0, 30
    1bc0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
				for (i = 12; ; i -= 4) {
    1bc4:	63672f62 	cmnvs	r7, #392	; 0x188
				val = (word) va_arg (ap, aword);
    1bc8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
				if (c == 'd' && (val & 0x8000) != 0) {
    1bcc:	6f6e2d6d 	svcvs	0x006e2d6d
				val = (word) va_arg (ap, aword);
    1bd0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
				if (c == 'd' && (val & 0x8000) != 0) {
    1bd4:	2f696261 	svccs	0x00696261
    1bd8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
					outc ('-');
    1bdc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1be0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
					val = (~val) + 1;
    1be4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1be8:	2f656d6f 	svccs	0x00656d6f
				for (i = 12; ; i -= 4) {
    1bec:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
				enci (10000);
    1bf0:	442f6e69 	strtmi	r6, [pc], #-3689	; 1bf8 <__pi_vfparse+0x10c>
    1bf4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1bf8:	4f2f706f 	svcmi	0x002f706f
    1bfc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1c00:	502f5445 	eorpl	r5, pc, r5, asr #8
    1c04:	534f4349 	movtpl	r4, #62281	; 0xf349
    1c08:	6369502f 	cmnvs	r9, #47	; 0x2f
    1c0c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    1c10:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    1c14:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    1c18:	2f656d6f 	svccs	0x00656d6f
    1c1c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1c20:	442f6e69 	strtmi	r6, [pc], #-3689	; 1c28 <__pi_vfparse+0x13c>
    1c24:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1c28:	4f2f706f 	svcmi	0x002f706f
    1c2c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1c30:	502f5445 	eorpl	r5, pc, r5, asr #8
    1c34:	534f4349 	movtpl	r4, #62281	; 0xf349
				if (c == 'd' || c == 'u') {
    1c38:	6369502f 	cmnvs	r9, #47	; 0x2f
    1c3c:	0000534f 	andeq	r5, r0, pc, asr #6
					if (c == 'd' &&
    1c40:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
					val = va_arg (ap, lword);
    1c44:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
					fm++;
    1c48:	00000100 	andeq	r0, r0, r0, lsl #2
					if (c == 'd' &&
    1c4c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    1c50:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
						outc ('-');
    1c54:	74730000 	ldrbtvc	r0, [r3], #-0
    1c58:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
						val = (~val) + 1;
    1c5c:	0300682e 	movweq	r6, #2094	; 0x82e
				enci (10000);
    1c60:	74730000 	ldrbtvc	r0, [r3], #-0
					enci (1000000000UL);
    1c64:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    1c68:	0300682e 	movweq	r6, #2094	; 0x82e
    1c6c:	72610000 	rsbvc	r0, r1, #0
    1c70:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    1c74:	00000400 	andeq	r0, r0, r0, lsl #8
    1c78:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    1c7c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1c80:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    1c84:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    1c88:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    1c8c:	00000400 	andeq	r0, r0, r0, lsl #8
    1c90:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    1c94:	5f736e6f 	svcpl	0x00736e6f
    1c98:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    1c9c:	00040068 	andeq	r0, r4, r8, rrx
    1ca0:	73797300 	cmnvc	r9, #0, 6
    1ca4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
				} else if (c == 'x') {
    1ca8:	00000500 	andeq	r0, r0, r0, lsl #10
					for (i = 28; ; i -= 4) {
    1cac:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
					val = va_arg (ap, lword);
    1cb0:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
							[ (val >> i) & 0xf ]);
    1cb4:	00000100 	andeq	r0, r0, r0, lsl #2
    1cb8:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
						outc (__pi_hex_enc_table
    1cbc:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    1cc0:	00003e6e 	andeq	r3, r0, lr, ror #28
    1cc4:	05000000 	streq	r0, [r0, #-0]
						if (i == 0)
    1cc8:	02050026 	andeq	r0, r5, #38	; 0x26
    1ccc:	00000f44 	andeq	r0, r0, r4, asr #30
					for (i = 28; ; i -= 4) {
    1cd0:	0103c303 	tsteq	r3, r3, lsl #6
					outc ('%');
    1cd4:	13160205 	tstne	r6, #1342177280	; 0x50000000
    1cd8:	26051413 			; <UNDEFINED> instruction: 0x26051413
    1cdc:	01780306 	cmneq	r8, r6, lsl #6
					outc ('l');
    1ce0:	09030205 	stmdbeq	r3, {r0, r2, r9}
    1ce4:	1f070520 	svcne	0x00070520
				val = (word) va_arg (ap, aword);
    1ce8:	21060205 	tstcs	r6, r5, lsl #4
				outc (val);
    1cec:	06130520 	ldreq	r0, [r3], -r0, lsr #10
    1cf0:	3c0a0521 	cfstr32cc	mvfx0, [sl], {33}	; 0x21
				while (*st != '\0') {
    1cf4:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    1cf8:	0f053e08 	svceq	0x00053e08
    1cfc:	03052c06 	movweq	r2, #23558	; 0x5c06
    1d00:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
					outc (*st);
    1d04:	16052f06 	strne	r2, [r5], -r6, lsl #30
    1d08:	07050106 	streq	r0, [r5, -r6, lsl #2]
					st++;
    1d0c:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
		c = *fm++;
    1d10:	02054b31 	andeq	r4, r5, #50176	; 0xc400
    1d14:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    1d18:	0a030601 	beq	c3524 <__ccfg+0xa357c>
char *vform (char *res, const char *fm, va_list aq) {
    1d1c:	0003022e 	andeq	r0, r3, lr, lsr #4
    1d20:	1f050101 	svcne	0x00050101
	if (res != NULL) {
    1d24:	80020500 	andhi	r0, r2, r0, lsl #10
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1d28:	0300000f 	movweq	r0, #15
    1d2c:	050106c9 	streq	r0, [r1, #-1737]	; 0xfffff937
    1d30:	010d0302 	tsteq	sp, r2, lsl #6
}
    1d34:	0d051314 	stceq	3, cr1, [r5, #-80]	; 0xffffffb0
    1d38:	1f050106 	svcne	0x00050106
	fml = strlen (fm) + 17;
    1d3c:	05207003 	streq	r7, [r0, #-3]!
    1d40:	2e10030d 	cdpcs	3, 1, cr0, cr0, cr13, {0}
    1d44:	20061f05 	andcs	r1, r6, r5, lsl #30
	if ((res = (char*) umalloc (fml)) == NULL)
    1d48:	01060205 	tsteq	r6, r5, lsl #4
    1d4c:	20110306 	andscs	r0, r1, r6, lsl #6
    1d50:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1d54:	1f050501 	svcne	0x00050501
    1d58:	21061f05 	tstcs	r6, r5, lsl #30
    1d5c:	01060205 	tsteq	r6, r5, lsl #4
    1d60:	05212506 	streq	r2, [r1, #-1286]!	; 0xfffffafa
		ufree (res);
    1d64:	0515060f 	ldreq	r0, [r5, #-1551]	; 0xfffff9f1
		goto Again;
    1d68:	23061d02 	movwcs	r1, #27906	; 0x6d02
	if (buf == NULL || fmt == NULL)
    1d6c:	01060f05 	tsteq	r6, r5, lsl #30
int vscan (const char *buf, const char *fmt, va_list ap) {
    1d70:	05240105 	streq	r0, [r4, #-261]!	; 0xfffffefb
	if (buf == NULL || fmt == NULL)
    1d74:	62030603 	andvs	r0, r3, #3145728	; 0x300000
    1d78:	061e0520 	ldreq	r0, [lr], -r0, lsr #10
    1d7c:	58060501 	stmdapl	r6, {r0, r8, sl}
		    	    case 'u': scanu (lword); break;
    1d80:	30060405 	andcc	r0, r6, r5, lsl #8
			while (isspace (*buf)) buf++;
    1d84:	06130521 	ldreq	r0, [r3], -r1, lsr #10
    1d88:	06040501 	streq	r0, [r4], -r1, lsl #10
	while (*fmt != '\0') {
    1d8c:	0d2e0591 	cfstr32eq	mvfx0, [lr, #-580]!	; 0xfffffdbc
		if (*fmt++ != '%')
    1d90:	01063605 	tsteq	r6, r5, lsl #12
		switch (*fmt++) {
    1d94:	34060a05 	strcc	r0, [r6], #-2565	; 0xfffff5fb
    1d98:	01061f05 	tsteq	r6, r5, lsl #30
    1d9c:	05580d05 	ldrbeq	r0, [r8, #-3333]	; 0xfffff2fb
    1da0:	2f220604 	svccs	0x00220604
    1da4:	01061005 	tsteq	r6, r5
    1da8:	03060405 	movweq	r0, #25605	; 0x6405
    1dac:	0705ac0b 	streq	sl, [r5, -fp, lsl #24]
}
    1db0:	2e050106 	adfcss	f0, f5, f6
		switch (*fmt++) {
    1db4:	09056406 	stmdbeq	r5, {r1, r2, sl, sp, lr}
    1db8:	07021306 	streq	r1, [r2, -r6, lsl #6]
    1dbc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1dc0:	0205001c 	andeq	r0, r5, #28
			while (isspace (*buf)) buf++;
    1dc4:	00001000 	andeq	r1, r0, r0
    1dc8:	0108c603 	tsteq	r8, r3, lsl #12
    1dcc:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    1dd0:	060d0502 	streq	r0, [sp], -r2, lsl #10
    1dd4:	017cdf03 	cmneq	ip, r3, lsl #30
    1dd8:	0f050104 	svceq	0x00050104
			if (*buf == '\0')
    1ddc:	03a10306 			; <UNDEFINED> instruction: 0x03a10306
			if (*buf != ',') {
    1de0:	01020520 	tsteq	r2, r0, lsr #10
			sap = va_arg (ap, char*);
    1de4:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
			nc++;
    1de8:	017cda03 	cmneq	ip, r3, lsl #20
			if (*buf != ',') {
    1dec:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
				while (!isspace (*buf) && *buf != ',' &&
    1df0:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    1df4:	03020501 	movweq	r0, #9473	; 0x2501
    1df8:	062003a1 	strteq	r0, [r0], -r1, lsr #7
    1dfc:	0601052f 	streq	r0, [r1], -pc, lsr #10
    1e00:	0005023d 	andeq	r0, r5, sp, lsr r2
    1e04:	27050101 	strcs	r0, [r5, -r1, lsl #2]
    1e08:	00020500 	andeq	r0, r2, r0, lsl #10
			while (isspace (*buf)) buf++;
    1e0c:	03000000 	movweq	r0, #0
    1e10:	050100de 	streq	r0, [r1, #-222]	; 0xffffff22
    1e14:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1e18:	050e0627 	streq	r0, [lr, #-1575]	; 0xfffff9d9
    1e1c:	27052402 	strcs	r2, [r5, -r2, lsl #8]
			if (*buf == ',') buf++;
    1e20:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    1e24:	05232006 	streq	r2, [r3, #-6]!
			*sap = '\0';
    1e28:	06054803 	streq	r4, [r5], -r3, lsl #16
			break;
    1e2c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		    case 'd': scani (word); break;
    1e30:	01052d06 	tsteq	r5, r6, lsl #26
    1e34:	05023206 	streq	r3, [r2, #-518]	; 0xfffffdfa
    1e38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e3c:	0205001b 	andeq	r0, r5, #27
    1e40:	00001018 	andeq	r1, r0, r8, lsl r0
    1e44:	0100fa03 	tsteq	r0, r3, lsl #20	; <UNPREDICTABLE>
    1e48:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    1e4c:	051f061b 	ldreq	r0, [pc, #-1563]	; 1839 <ser_in+0x25>
    1e50:	06022102 	streq	r2, [r2], -r2, lsl #2
    1e54:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e58:	0205001e 	andeq	r0, r5, #30
    1e5c:	00000000 	andeq	r0, r0, r0
    1e60:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    1e64:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    1e68:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1e6c:	7a03061e 	bvc	c36ec <__ccfg+0xa3744>
    1e70:	34090520 	strcc	r0, [r9], #-1312	; 0xfffffae0
    1e74:	7a031e05 	bvc	c9690 <__ccfg+0xa96e8>
    1e78:	06030520 	streq	r0, [r3], -r0, lsr #10
    1e7c:	06120527 	ldreq	r0, [r2], -r7, lsr #10
    1e80:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1e84:	1f061f05 	svcne	0x00061f05
    1e88:	01062005 	tsteq	r6, r5
    1e8c:	20060e05 	andcs	r0, r6, r5, lsl #28
    1e90:	01060205 	tsteq	r6, r5, lsl #4
    1e94:	03053206 	movweq	r3, #20998	; 0x5206
    1e98:	3b020513 	blcc	832ec <__ccfg+0x63344>
    1e9c:	06110515 			; <UNDEFINED> instruction: 0x06110515
		    case 'u': scanu (word); break;
    1ea0:	2f010501 	svccs	0x00010501
    1ea4:	01000602 	tsteq	r0, r2, lsl #12
    1ea8:	00210501 	eoreq	r0, r1, r1, lsl #10
    1eac:	00000205 	andeq	r0, r0, r5, lsl #4
    1eb0:	8e030000 	cdphi	0, 0, cr0, cr3, cr0, {0}
    1eb4:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    1eb8:	0e051416 	cfmvdlreq	mvd5, r1
    1ebc:	06090501 	streq	r0, [r9], -r1, lsl #10
    1ec0:	03210520 			; <UNDEFINED> instruction: 0x03210520
    1ec4:	03052e7a 	movweq	r2, #24186	; 0x5e7a
    1ec8:	12052706 	andne	r2, r5, #1572864	; 0x180000
    1ecc:	06050106 	streq	r0, [r5], -r6, lsl #2
    1ed0:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1ed4:	4b030521 	blmi	c3360 <__ccfg+0xa33b8>
    1ed8:	01060605 	tsteq	r6, r5, lsl #12
    1edc:	2b061f05 	blcs	189af8 <__ccfg+0x169b50>
    1ee0:	01062005 	tsteq	r6, r5
    1ee4:	20060e05 	andcs	r0, r6, r5, lsl #28
		    case 'x': scanx (word); break;
    1ee8:	01060205 	tsteq	r6, r5, lsl #4
    1eec:	0b053406 	bleq	14ef0c <__ccfg+0x12ef64>
    1ef0:	13020558 	movwne	r0, #9560	; 0x2558
    1ef4:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    1ef8:	1f052f03 	svcne	0x00052f03
    1efc:	21050106 	tstcs	r5, r6, lsl #2
    1f00:	20120520 	andscs	r0, r2, r0, lsr #10
    1f04:	2f060305 	svccs	0x00060305
    1f08:	01060605 	tsteq	r6, r5, lsl #12
    1f0c:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    1f10:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    1f14:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    1f18:	01010007 	tsteq	r1, r7
    1f1c:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    1f20:	00000002 	andeq	r0, r0, r2
    1f24:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    1f28:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1f2c:	01060505 	tsteq	r6, r5, lsl #10
    1f30:	21060205 	tstcs	r6, r5, lsl #4
    1f34:	01000202 	tsteq	r0, r2, lsl #4
    1f38:	002e0501 	eoreq	r0, lr, r1, lsl #10
    1f3c:	10280205 	eorne	r0, r8, r5, lsl #4
    1f40:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    1f44:	20060101 	andcs	r0, r6, r1, lsl #2
    1f48:	03060205 	movweq	r0, #25093	; 0x6205
    1f4c:	0313200e 	tsteq	r3, #14
    1f50:	06050110 			; <UNDEFINED> instruction: 0x06050110
    1f54:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1f58:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    1f5c:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
			switch (*fmt++) {
    1f60:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1f64:	06055805 	streq	r5, [r5], -r5, lsl #16
    1f68:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    1f6c:	052e2708 	streq	r2, [lr, #-1800]!	; 0xfffff8f8
    1f70:	20290302 	eorcs	r0, r9, r2, lsl #6
    1f74:	01061405 	tsteq	r6, r5, lsl #8
		    	    case 'd': scani (lword); break;
    1f78:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    1f7c:	59030604 	stmdbpl	r3, {r2, r9, sl}
    1f80:	0609052e 	streq	r0, [r9], -lr, lsr #10
    1f84:	20070501 	andcs	r0, r7, r1, lsl #10
    1f88:	31060405 	tstcc	r6, r5, lsl #8
    1f8c:	01060805 	tsteq	r6, r5, lsl #16
    1f90:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    1f94:	05052e08 	streq	r2, [r5, #-3592]	; 0xfffff1f8
    1f98:	053e0806 	ldreq	r0, [lr, #-2054]!	; 0xfffff7fa
    1f9c:	3c790303 	ldclcc	3, cr0, [r9], #-12
    1fa0:	0b030505 	bleq	c33bc <__ccfg+0xa3414>
    1fa4:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    1fa8:	06050501 	streq	r0, [r5], -r1, lsl #10
    1fac:	06070521 	streq	r0, [r7], -r1, lsr #10
    1fb0:	06030511 			; <UNDEFINED> instruction: 0x06030511
    1fb4:	05661703 	strbeq	r1, [r6, #-1795]!	; 0xfffff8fd
    1fb8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    1fbc:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
    1fc0:	3c160306 	ldccc	3, cr0, [r6], {6}
    1fc4:	01060b05 	tsteq	r6, r5, lsl #22
    1fc8:	40060205 	andmi	r0, r6, r5, lsl #4
    1fcc:	03060105 	movweq	r0, #24837	; 0x6105
    1fd0:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
		    	    case 'x': scanx (lword); break;
    1fd4:	052e7303 	streq	r7, [lr, #-771]!	; 0xfffffcfd
    1fd8:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    1fdc:	01000a02 	tsteq	r0, r2, lsl #20
    1fe0:	001b0501 	andseq	r0, fp, r1, lsl #10
    1fe4:	10f40205 	rscsne	r0, r4, r5, lsl #4
    1fe8:	d2030000 	andle	r0, r3, #0
    1fec:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1ff0:	061b0514 			; <UNDEFINED> instruction: 0x061b0514
    1ff4:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
    1ff8:	05024b06 	streq	r4, [r2, #-2822]	; 0xfffff4fa
    1ffc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2000:	0205002a 	andeq	r0, r5, #42	; 0x2a
    2004:	00001108 	andeq	r1, r0, r8, lsl #2
    2008:	0102d803 	tsteq	r2, r3, lsl #16
    200c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2010:	050e062a 	streq	r0, [lr, #-1578]	; 0xfffff9d6
    2014:	0505240b 	streq	r2, [r5, #-1035]	; 0xfffffbf5
    2018:	0602053e 			; <UNDEFINED> instruction: 0x0602053e
    201c:	0605054a 	streq	r0, [r5], -sl, asr #10
    2020:	06030501 	streq	r0, [r3], -r1, lsl #10
    2024:	4c020521 	cfstr32mi	mvfx0, [r2], {33}	; 0x21
    2028:	1f3d0601 	svcne	0x003d0601
    202c:	13202006 			; <UNDEFINED> instruction: 0x13202006
    2030:	21060105 	tstcs	r6, r5, lsl #2
    2034:	01000602 	tsteq	r0, r2, lsl #12
    2038:	00210501 	eoreq	r0, r1, r1, lsl #10
    203c:	113c0205 	teqne	ip, r5, lsl #4
    2040:	e5030000 	str	r0, [r3, #-0]
		    	    case 'd': scani (lword); break;
    2044:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2048:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    204c:	79030621 	stmdbvc	r3, {r0, r5, r9, sl}
    2050:	27020501 	strcs	r0, [r2, -r1, lsl #10]
    2054:	13052e06 	movwne	r2, #24070	; 0x5e06
    2058:	0a052106 	beq	14a478 <__ccfg+0x12a4d0>
    205c:	20130520 	andscs	r0, r3, r0, lsr #10
		    	    case 'u': scanu (lword); break;
    2060:	4a060f05 	bmi	185c7c <__ccfg+0x165cd4>
    2064:	01060305 	tsteq	r6, r5, lsl #6
    2068:	2f060405 	svccs	0x00060405
    206c:	01060705 	tsteq	r6, r5, lsl #14
    2070:	5a060505 	bpl	18348c <__ccfg+0x1634e4>
    2074:	0d02054b 	cfstr32eq	mvfx0, [r2, #-300]	; 0xfffffed4
    2078:	03060105 	movweq	r0, #24837	; 0x6105
    207c:	03022e09 	movweq	r2, #11785	; 0x2e09
    2080:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2084:	0205002d 	andeq	r0, r5, #45	; 0x2d
    2088:	00000000 	andeq	r0, r0, r0
    208c:	0102f703 	tsteq	r2, r3, lsl #14	; <UNPREDICTABLE>
    2090:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2094:	062d0514 			; <UNDEFINED> instruction: 0x062d0514
    2098:	20017903 	andcs	r7, r1, r3, lsl #18
    209c:	06270205 	strteq	r0, [r7], -r5, lsl #4
    20a0:	06090530 			; <UNDEFINED> instruction: 0x06090530
    20a4:	060e0501 	streq	r0, [lr], -r1, lsl #10
		    	    case 'x': scanx (lword); break;
    20a8:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    20ac:	3c020501 	cfstr32cc	mvfx0, [r2], {1}
			if ((c = *buf++) == '\0')
    20b0:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    20b4:	051c0603 	ldreq	r0, [ip, #-1539]	; 0xfffff9fd
			sap = va_arg (ap, char*);
    20b8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			nc++;
    20bc:	06051f20 	streq	r1, [r5], -r0, lsr #30
			break;
    20c0:	06040521 	streq	r0, [r4], -r1, lsr #10
			while (isspace (*buf)) buf++;
    20c4:	641f0521 	ldrvs	r0, [pc], #-1313	; 20cc <vscan+0x360>
    20c8:	01000102 	tsteq	r0, r2, lsl #2
    20cc:	00260501 	eoreq	r0, r6, r1, lsl #10
						*sap++ = *buf++;
    20d0:	11700205 	cmnne	r0, r5, lsl #4
    20d4:	87030000 	strhi	r0, [r3, -r0]
			while (isspace (*buf)) buf++;
    20d8:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    20dc:	26051414 			; <UNDEFINED> instruction: 0x26051414
    20e0:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
		return 0;
    20e4:	2e062402 	cdpcs	4, 0, cr2, cr6, cr2, {0}
    20e8:	28060905 	stmdacs	r6, {r0, r2, r8, fp}
		    case 'x': scanx (word); break;
    20ec:	03060305 	movweq	r0, #25349	; 0x6305
    20f0:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
		    	    case 'x': scanx (lword); break;
    20f4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    20f8:	053d3006 	ldreq	r3, [sp, #-6]!
    20fc:	05170601 	ldreq	r0, [r7, #-1537]	; 0xfffff9ff
    2100:	77030602 	strvc	r0, [r3, -r2, lsl #12]
    2104:	0004022e 	andeq	r0, r4, lr, lsr #4
    2108:	21050101 	tstcs	r5, r1, lsl #2
    210c:	94020500 	strls	r0, [r2], #-1280	; 0xfffffb00
    2110:	03000011 	movweq	r0, #17
    2114:	05010399 	streq	r0, [r1, #-921]	; 0xfffffc67
    2118:	21051602 	tstcs	r5, r2, lsl #12
    211c:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    2120:	85062402 	strhi	r2, [r6, #-1026]	; 0xfffffbfe
    2124:	061e053e 			; <UNDEFINED> instruction: 0x061e053e
    2128:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    212c:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
    2130:	02052013 	andeq	r2, r5, #19
    2134:	01052206 	tsteq	r5, r6, lsl #4
    2138:	05025906 	streq	r5, [r2, #-2310]	; 0xfffff6fa
    213c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2140:	02050014 	andeq	r0, r5, #20
    2144:	00000000 	andeq	r0, r0, r0
    2148:	0103a703 	tsteq	r3, r3, lsl #14
    214c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2150:	02670601 	rsbeq	r0, r7, #1048576	; 0x100000
    2154:	01010004 	tsteq	r1, r4
    2158:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    215c:	00000002 	andeq	r0, r0, r2
    2160:	03b20300 			; <UNDEFINED> instruction: 0x03b20300
    2164:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2168:	06180514 			; <UNDEFINED> instruction: 0x06180514
    216c:	0205200e 	andeq	r2, r5, #14
    2170:	055a0624 	ldrbeq	r0, [sl, #-1572]	; 0xfffff9dc
    2174:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2178:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    217c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2180:	05350602 	ldreq	r0, [r5, #-1538]!	; 0xfffff9fe
    2184:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2188:	03055901 	movweq	r5, #22785	; 0x5901
    218c:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    2190:	0606053d 			; <UNDEFINED> instruction: 0x0606053d
    2194:	2e170501 	cfmul32cs	mvfx0, mvfx7, mvfx1
    2198:	023d0b05 	eorseq	r0, sp, #5120	; 0x1400
    219c:	01010008 	tsteq	r1, r8
    21a0:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    21a4:	00000002 	andeq	r0, r0, r2
    21a8:	04920300 	ldreq	r0, [r2], #768	; 0x300
    21ac:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    21b0:	061d0514 			; <UNDEFINED> instruction: 0x061d0514
    21b4:	2405050e 	strcs	r0, [r5], #-1294	; 0xfffffaf2
    21b8:	21060305 	tstcs	r6, r5, lsl #6
    21bc:	01060505 	tsteq	r6, r5, lsl #10
    21c0:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    21c4:	13060105 	movwne	r0, #24837	; 0x6105
    21c8:	2b060305 	blcs	182de4 <__ccfg+0x162e3c>
    21cc:	01000602 	tsteq	r0, r2, lsl #12
    21d0:	001d0501 	andseq	r0, sp, r1, lsl #10
    21d4:	11cc0205 	bicne	r0, ip, r5, lsl #4
    21d8:	9e030000 	cdpls	0, 0, cr0, cr3, cr0, {0}
    21dc:	02050104 	andeq	r0, r5, #4, 2
    21e0:	05051414 	streq	r1, [r5, #-1044]	; 0xfffffbec
    21e4:	03050106 	movweq	r0, #20742	; 0x5106
    21e8:	0a052f06 	beq	14de08 <__ccfg+0x12de60>
    21ec:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    21f0:	052e3e06 	streq	r3, [lr, #-3590]!	; 0xfffff1fa
    21f4:	05250601 	streq	r0, [r5, #-1537]!	; 0xfffff9ff
    21f8:	051c0603 	ldreq	r0, [ip, #-1539]	; 0xfffff9fd
    21fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2200:	023b0602 	eorseq	r0, fp, #2097152	; 0x200000
    2204:	01010006 	tsteq	r1, r6
    2208:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    220c:	0011f002 	andseq	pc, r1, r2
    2210:	04ac0300 	strteq	r0, [ip], #768	; 0x300
    2214:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2218:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    221c:	7a03061d 	bvc	c3a98 <__ccfg+0xa3af0>
    2220:	25040501 	strcs	r0, [r4, #-1281]	; 0xfffffaff
    2224:	06210205 	strteq	r0, [r1], -r5, lsl #4
    2228:	0601052e 	streq	r0, [r1], -lr, lsr #10
    222c:	06030524 	streq	r0, [r3], -r4, lsr #10
    2230:	0606051d 			; <UNDEFINED> instruction: 0x0606051d
    2234:	1f020501 	svcne	0x00020501
    2238:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    223c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2240:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2244:	023a0602 	eorseq	r0, sl, #2097152	; 0x200000
    2248:	01010004 	tsteq	r1, r4
    224c:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    2250:	00121002 	andseq	r1, r2, r2
    2254:	04b80300 	ldrteq	r0, [r8], #768	; 0x300
    2258:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    225c:	06210514 			; <UNDEFINED> instruction: 0x06210514
    2260:	2409050e 	strcs	r0, [r9], #-1294	; 0xfffffaf2
    2264:	20060e05 	andcs	r0, r6, r5, lsl #28
    2268:	01060205 	tsteq	r6, r5, lsl #4
    226c:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    2270:	051d0622 	ldreq	r0, [sp, #-1570]	; 0xfffff9de
    2274:	1f05011e 	svcne	0x0005011e
    2278:	02020106 	andeq	r0, r2, #-2147483647	; 0x80000001
    227c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2280:	0205002b 	andeq	r0, r5, #43	; 0x2b
    2284:	00000000 	andeq	r0, r0, r0
    2288:	0104c103 	tsteq	r4, r3, lsl #2
    228c:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2290:	08052020 	stmdaeq	r5, {r5, sp}
    2294:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    2298:	2e180501 	cfmul32cs	mvfx0, mvfx8, mvfx1
    229c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    22a0:	01022f01 	tsteq	r2, r1, lsl #30
    22a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    22a8:	02050033 	andeq	r0, r5, #51	; 0x33
    22ac:	00000000 	andeq	r0, r0, r0
    22b0:	0104c603 	tsteq	r4, r3, lsl #12
    22b4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    22b8:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    22bc:	06050530 			; <UNDEFINED> instruction: 0x06050530
    22c0:	2f010501 	svccs	0x00010501
    22c4:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
    22c8:	03052e0d 	movweq	r2, #24077	; 0x5e0d
    22cc:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    22d0:	03020106 	movweq	r0, #8454	; 0x2106
    22d4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    22d8:	0205002b 	andeq	r0, r5, #43	; 0x2b
    22dc:	00000000 	andeq	r0, r0, r0
    22e0:	0104cd03 	tsteq	r4, r3, lsl #26
    22e4:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    22e8:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    22ec:	0002024b 	andeq	r0, r2, fp, asr #4
    22f0:	33050101 	movwcc	r0, #20737	; 0x5101
    22f4:	00020500 	andeq	r0, r2, r0, lsl #10
    22f8:	03000000 	movweq	r0, #0
    22fc:	050104d3 	streq	r0, [r1, #-1235]	; 0xfffffb2d
    2300:	03021402 	movweq	r1, #9218	; 0x2402
    2304:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2308:	02050037 	andeq	r0, r5, #55	; 0x37
    230c:	0000121e 	andeq	r1, r0, lr, lsl r2
    2310:	0104d803 	tsteq	r4, r3, lsl #16
    2314:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    2318:	01052e08 	tsteq	r5, r8, lsl #28
    231c:	03053006 	movweq	r3, #20486	; 0x5006
    2320:	0d051f06 	stceq	15, cr1, [r5, #-24]	; 0xffffffe8
    2324:	0b050106 	bleq	142744 <__ccfg+0x12279c>
    2328:	0003022e 	andeq	r0, r3, lr, lsr #4
    232c:	2e050101 	adfcss	f0, f5, f1
    2330:	00020500 	andeq	r0, r2, r0, lsl #10
    2334:	03000000 	movweq	r0, #0
    2338:	050104de 	streq	r0, [r1, #-1246]	; 0xfffffb22
    233c:	08051402 	stmdaeq	r5, {r1, sl, ip}
    2340:	06010520 	streq	r0, [r1], -r0, lsr #10
    2344:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2348:	060b051f 			; <UNDEFINED> instruction: 0x060b051f
    234c:	00030201 	andeq	r0, r3, r1, lsl #4
    2350:	2b050101 	blcs	14275c <__ccfg+0x1227b4>
    2354:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    2358:	03000012 	movweq	r0, #18
    235c:	050104e8 	streq	r0, [r1, #-1256]	; 0xfffffb18
    2360:	2b051402 	blcs	147370 <__ccfg+0x1273c8>
    2364:	05051006 	streq	r1, [r5, #-6]
    2368:	06030522 	streq	r0, [r3], -r2, lsr #10
    236c:	05310621 	ldreq	r0, [r1, #-1569]!	; 0xfffff9df
    2370:	052d0602 	streq	r0, [sp, #-1538]!	; 0xfffff9fe
    2374:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    2378:	03052005 	movweq	r2, #20485	; 0x5005
    237c:	02052f06 	andeq	r2, r5, #6, 30
    2380:	060e053e 			; <UNDEFINED> instruction: 0x060e053e
    2384:	21010501 	tstcs	r1, r1, lsl #10
    2388:	01000502 	tsteq	r0, r2, lsl #10
    238c:	00450501 	subeq	r0, r5, r1, lsl #10
    2390:	12580205 	subsne	r0, r8, #1342177280	; 0x50000000
    2394:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    2398:	02050104 	andeq	r0, r5, #4, 2
    239c:	45051414 	strmi	r1, [r5, #-1044]	; 0xfffffbec
    23a0:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
    23a4:	22055c05 	andcs	r5, r5, #1280	; 0x500
    23a8:	4a190520 	bmi	643830 <__ccfg+0x623888>
    23ac:	21060305 	tstcs	r6, r5, lsl #6
    23b0:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
    23b4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    23b8:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    23bc:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    23c0:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    23c4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    23c8:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    23cc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    23d0:	054f0603 	strbeq	r0, [pc, #-1539]	; 1dd5 <vscan+0x69>
    23d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    23d8:	59300603 	ldmdbpl	r0!, {r0, r1, r9, sl}
    23dc:	0d030405 	cfstrseq	mvf0, [r3, #-20]	; 0xffffffec
    23e0:	03020501 	movweq	r0, #9473	; 0x2501
    23e4:	05052e76 	streq	r2, [r5, #-3702]	; 0xfffff18a
    23e8:	03050106 	movweq	r0, #20742	; 0x5106
    23ec:	06053506 	streq	r3, [r5], -r6, lsl #10
    23f0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    23f4:	05594b06 	ldrbeq	r4, [r9, #-2822]	; 0xfffff4fa
    23f8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    23fc:	05690603 	strbeq	r0, [r9, #-1539]!	; 0xfffff9fd
    2400:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2404:	05590603 	ldrbeq	r0, [r9, #-1539]	; 0xfffff9fd
    2408:	6103060a 	tstvs	r3, sl, lsl #12
    240c:	03010501 	movweq	r0, #5377	; 0x1501
    2410:	02052029 	andeq	r2, r5, #41	; 0x29
    2414:	2e7a0306 	cdpcs	3, 7, cr0, cr10, cr6, {0}
    2418:	01060505 	tsteq	r6, r5, lsl #10
    241c:	2f060305 	svccs	0x00060305
    2420:	00050275 	andeq	r0, r5, r5, ror r2
    2424:	1a050101 	bne	142830 <__ccfg+0x122888>
    2428:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    242c:	03000012 	movweq	r0, #18
    2430:	050105ef 	streq	r0, [r1, #-1519]	; 0xfffffa11
    2434:	13031702 	movwne	r1, #14082	; 0x3702
    2438:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    243c:	031a0501 	tsteq	sl, #4194304	; 0x400000
    2440:	15052068 	strne	r2, [r5, #-104]	; 0xffffff98
    2444:	05201803 	streq	r1, [r0, #-2051]!	; 0xfffff7fd
    2448:	0505580c 	streq	r5, [r5, #-2060]	; 0xfffff7f4
    244c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2450:	52020531 	andpl	r0, r2, #205520896	; 0xc400000
    2454:	01060d05 	tsteq	r6, r5, lsl #26
    2458:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    245c:	15061705 	strne	r1, [r6, #-1797]	; 0xfffff8fb
    2460:	052b1d05 	streq	r1, [fp, #-3333]!	; 0xfffff2fb
    2464:	02052016 	andeq	r2, r5, #22
    2468:	17052106 	strne	r2, [r5, -r6, lsl #2]
    246c:	02051406 	andeq	r1, r5, #100663296	; 0x6000000
    2470:	1a053106 	bne	14e890 <__ccfg+0x12e8e8>
    2474:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    2478:	0301052e 	movweq	r0, #5422	; 0x152e
    247c:	0d022e2c 	stceq	14, cr2, [r2, #-176]	; 0xffffff50
    2480:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2484:	0205001c 	andeq	r0, r5, #28
    2488:	00001344 	andeq	r1, r0, r4, asr #6
    248c:	0106fb03 	tsteq	r6, r3, lsl #22	; <UNPREDICTABLE>
    2490:	0c030205 	sfmeq	f0, 4, [r3], {5}
    2494:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    2498:	05017403 	streq	r7, [r1, #-1027]	; 0xfffffbfd
    249c:	200c0305 	andcs	r0, ip, r5, lsl #6
    24a0:	25060205 	strcs	r0, [r6, #-517]	; 0xfffffdfb
    24a4:	01060705 	tsteq	r6, r5, lsl #14
    24a8:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    24ac:	4c2f0603 	stcmi	6, cr0, [pc], #-12	; 24a8 <NOROM_SetupGetTrimForAmpcompCtrl+0x1c>
    24b0:	16061105 	strne	r1, [r6], -r5, lsl #2
    24b4:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    24b8:	0f053211 	svceq	0x00053211
    24bc:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    24c0:	06110532 			; <UNDEFINED> instruction: 0x06110532
    24c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    24c8:	15053030 	strne	r3, [r5, #-48]	; 0xffffffd0
    24cc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    24d0:	06030520 	streq	r0, [r3], -r0, lsr #10
    24d4:	1a052f2f 	bne	14e198 <__ccfg+0x12e1f0>
    24d8:	01050106 	tsteq	r5, r6, lsl #2
    24dc:	00080242 	andeq	r0, r8, r2, asr #4
    24e0:	17050101 	strne	r0, [r5, -r1, lsl #2]
    24e4:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    24e8:	03000013 	movweq	r0, #19
    24ec:	050103d8 	streq	r0, [r1, #-984]	; 0xfffffc28
    24f0:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    24f4:	7a030617 	bvc	c3d58 <__ccfg+0xa3db0>
    24f8:	26050501 	strcs	r0, [r5], -r1, lsl #10
    24fc:	21060305 	tstcs	r6, r5, lsl #6
    2500:	01060905 	tsteq	r6, r5, lsl #18
    2504:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2508:	13220602 			; <UNDEFINED> instruction: 0x13220602
    250c:	11060405 	tstne	r6, r5, lsl #8
    2510:	06210205 	strteq	r0, [r1], -r5, lsl #4
    2514:	200f032e 	andcs	r0, pc, lr, lsr #6
    2518:	72030305 	andvc	r0, r3, #335544320	; 0x14000000
    251c:	0606054a 	streq	r0, [r6], -sl, asr #10
    2520:	06040501 	streq	r0, [r4], -r1, lsl #10
    2524:	0607053e 			; <UNDEFINED> instruction: 0x0607053e
    2528:	06050501 	streq	r0, [r5], -r1, lsl #10
    252c:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2530:	06040501 	streq	r0, [r4], -r1, lsl #10
    2534:	052f3d23 	streq	r3, [pc, #-3363]!	; 1819 <ser_in+0x5>
    2538:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    253c:	05052007 	streq	r2, [r5, #-7]
    2540:	052a3d06 	streq	r3, [sl, #-3334]!	; 0xfffff2fa
    2544:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2548:	580a0301 	stmdapl	sl, {r0, r8, r9}
    254c:	01000702 	tsteq	r0, r2, lsl #14
    2550:	001c0501 	andseq	r0, ip, r1, lsl #10
    2554:	13dc0205 	bicsne	r0, ip, #1342177280	; 0x50000000
    2558:	f4030000 	vst4.8	{d0-d3}, [r3], r0
    255c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2560:	13141316 	tstne	r4, #1476395008	; 0x58000000
    2564:	061c0513 			; <UNDEFINED> instruction: 0x061c0513
    2568:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    256c:	06053604 	streq	r3, [r5], -r4, lsl #12
    2570:	2209051f 	andcs	r0, r9, #130023424	; 0x7c00000
    2574:	77031c05 	strvc	r1, [r3, -r5, lsl #24]
    2578:	030a0520 	movweq	r0, #42272	; 0xa520
    257c:	09052010 	stmdbeq	r5, {r4, sp}
    2580:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    2584:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
    2588:	06010602 	streq	r0, [r1], -r2, lsl #12
    258c:	05201103 	streq	r1, [r0, #-259]!	; 0xfffffefd
    2590:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2594:	03210603 			; <UNDEFINED> instruction: 0x03210603
    2598:	06052e6f 	streq	r2, [r5], -pc, ror #28
    259c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    25a0:	05135906 	ldreq	r5, [r3, #-2310]	; 0xfffff6fa
    25a4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    25a8:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    25ac:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    25b0:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    25b4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    25b8:	04052f09 	streq	r2, [r5], #-3849	; 0xfffff0f7
    25bc:	2f2f3d06 	svccs	0x002f3d06
    25c0:	05450505 	strbeq	r0, [r5, #-1285]	; 0xfffffafb
    25c4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    25c8:	3c0d0301 	stccc	3, cr0, [sp], {1}
    25cc:	01000702 	tsteq	r0, r2, lsl #14
    25d0:	00200501 	eoreq	r0, r0, r1, lsl #10
    25d4:	14340205 	ldrtne	r0, [r4], #-517	; 0xfffffdfb
    25d8:	a2030000 	andge	r0, r3, #0
    25dc:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    25e0:	0514161a 	ldreq	r1, [r4, #-1562]	; 0xfffff9e6
    25e4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    25e8:	05250603 	streq	r0, [r5, #-1539]!	; 0xfffff9fd
    25ec:	050f0609 	streq	r0, [pc, #-1545]	; 1feb <vscan+0x27f>
    25f0:	2e700320 	cdpcs	3, 7, cr0, cr0, cr0, {1}
    25f4:	23030d05 	movwcs	r0, #15621	; 0x3d05
    25f8:	031a0520 	tsteq	sl, #32, 10	; 0x8000000
    25fc:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
    2600:	052e1003 	streq	r1, [lr, #-3]!
    2604:	09052306 	stmdbeq	r5, {r1, r2, r8, r9, sp}
    2608:	05206d03 	streq	r6, [r0, #-3331]!	; 0xfffff2fd
    260c:	0f030602 	svceq	0x00030602
    2610:	1f05132e 	svcne	0x0005132e
    2614:	06020501 	streq	r0, [r2], -r1, lsl #10
    2618:	09030601 	stmdbeq	r3, {r0, r9, sl}
    261c:	03030520 	movweq	r0, #13600	; 0x3520
    2620:	16050119 			; <UNDEFINED> instruction: 0x16050119
    2624:	06050106 	streq	r0, [r5], -r6, lsl #2
    2628:	0604052e 	streq	r0, [r4], -lr, lsr #10
    262c:	061b052f 	ldreq	r0, [fp], -pc, lsr #10
    2630:	06030501 	streq	r0, [r3], -r1, lsl #10
    2634:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    2638:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    263c:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    2640:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2644:	4f030603 	svcmi	0x00030603
    2648:	06060520 	streq	r0, [r6], -r0, lsr #10
    264c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2650:	4c03053d 	cfstr32mi	mvfx0, [r3], {61}	; 0x3d
    2654:	01060605 	tsteq	r6, r5, lsl #12
    2658:	03062e05 	movweq	r2, #28165	; 0x6e05
    265c:	09054a7a 	stmdbeq	r5, {r1, r3, r4, r5, r6, r9, fp, lr}
    2660:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    2664:	03054406 	movweq	r4, #21510	; 0x5406
    2668:	0e052214 	mcreq	2, 0, r2, cr5, cr4, {0}
    266c:	06050106 	streq	r0, [r5], -r6, lsl #2
    2670:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    2674:	06130530 			; <UNDEFINED> instruction: 0x06130530
    2678:	06040501 	streq	r0, [r4], -r1, lsl #10
    267c:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
    2680:	20070501 	andcs	r0, r7, r1, lsl #10
    2684:	2f060405 	svccs	0x00060405
    2688:	01061805 	tsteq	r6, r5, lsl #16
    268c:	05201005 	streq	r1, [r0, #-5]!
    2690:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    2694:	03052e09 	movweq	r2, #24073	; 0x5e09
    2698:	061a0515 			; <UNDEFINED> instruction: 0x061a0515
    269c:	30120501 	andscc	r0, r2, r1, lsl #10
    26a0:	051e1a05 	ldreq	r1, [lr, #-2565]	; 0xfffff5fb
    26a4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    26a8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    26ac:	03052e12 	movweq	r2, #24082	; 0x5e12
    26b0:	0e053d06 	cdpeq	13, 0, cr3, cr5, cr6, {0}
    26b4:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    26b8:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    26bc:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    26c0:	04052906 	streq	r2, [r5], #-2310	; 0xfffff6fa
    26c4:	13052206 	movwne	r2, #20998	; 0x5206
    26c8:	03050106 	movweq	r0, #20742	; 0x5106
    26cc:	01053106 	tsteq	r5, r6, lsl #2
    26d0:	011b0306 	tsteq	fp, r6, lsl #6
    26d4:	01000e02 	tsteq	r0, r2, lsl #28
    26d8:	002c0501 	eoreq	r0, ip, r1, lsl #10
    26dc:	14dc0205 	ldrbne	r0, [ip], #517	; 0x205
    26e0:	ab030000 	blge	c26e8 <__ccfg+0xa2740>
    26e4:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    26e8:	2c051414 	cfstrscs	mvf1, [r5], {20}
    26ec:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    26f0:	2c052419 	cfstrscs	mvf2, [r5], {25}
    26f4:	2419051c 	ldrcs	r0, [r9], #-1308	; 0xfffffae4
    26f8:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    26fc:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    2700:	0b03060a 	bleq	c3f30 <__ccfg+0xa3f88>
    2704:	030c0501 	movweq	r0, #50433	; 0xc501
    2708:	0a052077 	beq	14a8ec <__ccfg+0x12a944>
    270c:	76032326 	strvc	r2, [r3], -r6, lsr #6
    2710:	06020520 	streq	r0, [r2], -r0, lsr #10
    2714:	0305182f 	movweq	r1, #22575	; 0x582f
    2718:	06051314 			; <UNDEFINED> instruction: 0x06051314
    271c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2720:	0a052106 	beq	14ab40 <__ccfg+0x12ab98>
    2724:	01050106 	tsteq	r5, r6, lsl #2
    2728:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    272c:	7303060b 	movwvc	r0, #13835	; 0x360b
    2730:	060c0520 	streq	r0, [ip], -r0, lsr #10
    2734:	20040520 	andcs	r0, r4, r0, lsr #10
    2738:	0c052f06 	stceq	15, cr2, [r5], {6}
    273c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2740:	200b0306 	andcs	r0, fp, r6, lsl #6
    2744:	01060905 	tsteq	r6, r5, lsl #18
    2748:	01000402 	tsteq	r0, r2, lsl #8
    274c:	00200501 	eoreq	r0, r0, r1, lsl #10
    2750:	15100205 	ldrne	r0, [r0, #-517]	; 0xfffffdfb
    2754:	81030000 	mrshi	r0, (UNDEF: 3)
    2758:	02050108 	andeq	r0, r5, #8, 2
    275c:	05010903 	streq	r0, [r1, #-2307]	; 0xfffff6fd
    2760:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    2764:	20770320 	rsbscs	r0, r7, r0, lsr #6
    2768:	09031505 	stmdbeq	r3, {r0, r2, r8, sl, ip}
    276c:	23020520 	movwcs	r0, #9504	; 0x2520
    2770:	051d0505 	ldreq	r0, [sp, #-1285]	; 0xfffffafb
    2774:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2778:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    277c:	023e0602 	eorseq	r0, lr, #2097152	; 0x200000
    2780:	01010004 	tsteq	r1, r4
    2784:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    2788:	00000002 	andeq	r0, r0, r2
    278c:	08940300 	ldmeq	r4, {r8, r9}
    2790:	03020501 	movweq	r0, #9473	; 0x2501
    2794:	21050109 	tstcs	r5, r9, lsl #2
    2798:	01770306 	cmneq	r7, r6, lsl #6
    279c:	09030505 	stmdbeq	r3, {r0, r2, r8, sl}
    27a0:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    27a4:	06080521 	streq	r0, [r8], -r1, lsr #10
    27a8:	2e0a0501 	cfsh32cs	mvfx0, mvfx10, #1
    27ac:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    27b0:	08052212 	stmdaeq	r5, {r1, r4, r9, sp}
    27b4:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    27b8:	1402054c 	strne	r0, [r2], #-1356	; 0xfffffab4
    27bc:	01060905 	tsteq	r6, r5, lsl #18
    27c0:	025a0105 	subseq	r0, sl, #1073741825	; 0x40000001
    27c4:	01010006 	tsteq	r1, r6
    27c8:	05002005 	streq	r2, [r0, #-5]
    27cc:	00000002 	andeq	r0, r0, r2
    27d0:	08a70300 	stmiaeq	r7!, {r8, r9}
    27d4:	03020501 	movweq	r0, #9473	; 0x2501
    27d8:	14130109 	ldrne	r0, [r3], #-265	; 0xfffffef7
    27dc:	03062005 	movweq	r2, #24581	; 0x6005
    27e0:	1d050174 	stfnes	f0, [r5, #-464]	; 0xfffffe30
    27e4:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    27e8:	0b052e12 	bleq	14e038 <__ccfg+0x12e090>
    27ec:	062f0520 	strteq	r0, [pc], -r0, lsr #10
    27f0:	06020520 	streq	r0, [r2], -r0, lsr #10
    27f4:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    27f8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    27fc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2800:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2804:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    2808:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    280c:	03053e01 	movweq	r3, #24065	; 0x5e01
    2810:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    2814:	2d062305 	stccs	3, cr2, [r6, #-20]	; 0xffffffec
    2818:	4a060605 	bmi	184034 <__ccfg+0x16408c>
    281c:	01060e05 	tsteq	r6, r5, lsl #28
    2820:	01000402 	tsteq	r0, r2, lsl #8
    2824:	00230501 	eoreq	r0, r3, r1, lsl #10
    2828:	15280205 	strne	r0, [r8, #-517]!	; 0xfffffdfb
    282c:	81030000 	mrshi	r0, (UNDEF: 3)
    2830:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    2834:	13131341 	tstne	r3, #67108865	; 0x4000001
    2838:	23051413 	movwcs	r1, #21523	; 0x5413
    283c:	01750306 	cmneq	r5, r6, lsl #6
    2840:	0c030205 	sfmeq	f0, 4, [r3], {5}
    2844:	21061f3c 	tstcs	r6, ip, lsr pc
    2848:	08050101 	stmdaeq	r5, {r0, r8}
    284c:	20280306 	eorcs	r0, r8, r6, lsl #6
    2850:	58030205 	stmdapl	r3, {r0, r2, r9}
    2854:	031c0520 	tsteq	ip, #32, 10	; 0x8000000
    2858:	02052023 	andeq	r2, r5, #35	; 0x23
    285c:	062e5d03 	strteq	r5, [lr], -r3, lsl #26
    2860:	0805142e 	stmdaeq	r5, {r1, r2, r3, r5, sl, ip}
    2864:	06090501 	streq	r0, [r9], -r1, lsl #10
    2868:	20080501 	andcs	r0, r8, r1, lsl #10
    286c:	03060205 	movweq	r0, #25093	; 0x6205
    2870:	3d2000c7 	stccc	0, cr0, [r0, #-796]!	; 0xfffffce4
    2874:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    2878:	cf03060d 	svcgt	0x0003060d
    287c:	0104017b 	tsteq	r4, fp, ror r1
    2880:	03060f05 	movweq	r0, #28421	; 0x6f05
    2884:	052004b1 	streq	r0, [r0, #-1201]!	; 0xfffffb4f
    2888:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    288c:	ca032405 	bgt	cb8a8 <__ccfg+0xab900>
    2890:	0505017b 	streq	r0, [r5, #-379]	; 0xfffffe85
    2894:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    2898:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    289c:	04b10302 	ldrteq	r0, [r1], #770	; 0x302
    28a0:	012f0620 			; <UNDEFINED> instruction: 0x012f0620
    28a4:	01055801 	tsteq	r5, r1, lsl #16
    28a8:	03051306 	movweq	r1, #21254	; 0x5306
    28ac:	7fb60306 	svcvc	0x00b60306
    28b0:	06060558 			; <UNDEFINED> instruction: 0x06060558
    28b4:	06040501 	streq	r0, [r4], -r1, lsl #10
    28b8:	0705134b 	streq	r1, [r5, -fp, asr #6]
    28bc:	05052006 	streq	r2, [r5, #-6]
    28c0:	13134b06 	tstne	r3, #6144	; 0x1800
    28c4:	01060905 	tsteq	r6, r5, lsl #18
    28c8:	280c052d 	stmdacs	ip, {r0, r2, r3, r5, r8, sl}
    28cc:	77030805 	strvc	r0, [r3, -r5, lsl #16]
    28d0:	06050520 	streq	r0, [r5], -r0, lsr #10
    28d4:	08051532 	stmdaeq	r5, {r1, r4, r5, r8, sl, ip}
    28d8:	04050f06 	streq	r0, [r5], #-3846	; 0xfffff0fa
    28dc:	05052506 	streq	r2, [r5, #-1286]	; 0xfffffafa
    28e0:	3d743103 	ldfcce	f3, [r4, #-12]!
    28e4:	03060405 	movweq	r0, #25605	; 0x6405
    28e8:	1d054a4e 	vstrne	s8, [r5, #-312]	; 0xfffffec8
    28ec:	06060541 	streq	r0, [r6], -r1, asr #10
    28f0:	0608052d 	streq	r0, [r8], -sp, lsr #10
    28f4:	06060501 	streq	r0, [r6], -r1, lsl #10
    28f8:	0b051421 	bleq	147984 <__ccfg+0x1279dc>
    28fc:	18051106 	stmdane	r5, {r1, r2, r8, ip}
    2900:	2f06053c 	svccs	0x0006053c
    2904:	46060b05 	strmi	r0, [r6], -r5, lsl #22
    2908:	31030405 	tstcc	r3, r5, lsl #8
    290c:	0608052e 	streq	r0, [r8], -lr, lsr #10
    2910:	206a0301 	rsbcs	r0, sl, r1, lsl #6
    2914:	03060505 	movweq	r0, #25861	; 0x6505
    2918:	05132e6e 	ldreq	r2, [r3, #-3694]	; 0xfffff192
    291c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    2920:	0805200e 	stmdaeq	r5, {r1, r2, r3, sp}
    2924:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2928:	09053d2f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
    292c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2930:	0b052106 	bleq	14ad50 <__ccfg+0x12ada8>
    2934:	06050106 	streq	r0, [r5], -r6, lsl #2
    2938:	0a055906 	beq	158d58 <__ccfg+0x138db0>
    293c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2940:	1c052306 	stcne	3, cr2, [r5], {6}
    2944:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2948:	06055906 	streq	r5, [r5], -r6, lsl #18
    294c:	06160514 			; <UNDEFINED> instruction: 0x06160514
    2950:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    2954:	21060605 	tstcs	r6, r5, lsl #12
    2958:	01060905 	tsteq	r6, r5, lsl #18
    295c:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2960:	052f0606 	streq	r0, [pc, #-1542]!	; 2362 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x1a>
    2964:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2968:	052a060b 	streq	r0, [sl, #-1547]!	; 0xfffff9f5
    296c:	05140608 	ldreq	r0, [r4, #-1544]	; 0xfffff9f8
    2970:	05051d1c 	streq	r1, [r5, #-3356]	; 0xfffff2e4
    2974:	06053506 	streq	r3, [r5], -r6, lsl #10
    2978:	09055913 	stmdbeq	r5, {r0, r1, r4, r8, fp, ip, lr}
    297c:	08051406 	stmdaeq	r5, {r1, r2, sl, ip}
    2980:	2d0a051f 	cfstr32cs	mvfx0, [sl, #-124]	; 0xffffff84
    2984:	2f060605 	svccs	0x00060605
    2988:	06090513 			; <UNDEFINED> instruction: 0x06090513
    298c:	06060501 	streq	r0, [r6], -r1, lsl #10
    2990:	06160521 	ldreq	r0, [r6], -r1, lsr #10
    2994:	2c080501 	cfstr32cs	mvfx0, [r8], {1}
    2998:	060b0522 	streq	r0, [fp], -r2, lsr #10
    299c:	0606051b 			; <UNDEFINED> instruction: 0x0606051b
    29a0:	06050513 			; <UNDEFINED> instruction: 0x06050513
    29a4:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    29a8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    29ac:	052f0606 	streq	r0, [pc, #-1542]!	; 23ae <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x66>
    29b0:	6e03061c 	mcrvs	6, 0, r0, cr3, cr12, {0}
    29b4:	030a0501 	movweq	r0, #42241	; 0xa501
    29b8:	05052e12 	streq	r2, [r5, #-3602]	; 0xfffff1ee
    29bc:	206e0306 	rsbcs	r0, lr, r6, lsl #6
    29c0:	17030605 	strne	r0, [r3, -r5, lsl #12]
    29c4:	07052f20 	streq	r2, [r5, -r0, lsr #30]
    29c8:	0b050106 	bleq	142de8 <__ccfg+0x122e40>
    29cc:	0c051e06 	stceq	14, cr1, [r5], {6}
    29d0:	0b050106 	bleq	142df0 <__ccfg+0x122e48>
    29d4:	06040520 	streq	r0, [r4], -r0, lsr #10
    29d8:	023c0c03 	eorseq	r0, ip, #768	; 0x300
    29dc:	0101000b 	tsteq	r1, fp
    29e0:	05000f05 	streq	r0, [r0, #-3845]	; 0xfffff0fb
    29e4:	00000002 	andeq	r0, r0, r2
    29e8:	0aae0300 	beq	feb835f0 <_estack+0xdeb7e5f0>
    29ec:	13020501 	movwne	r0, #9473	; 0x2501
    29f0:	01062505 	tsteq	r6, r5, lsl #10
    29f4:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    29f8:	18052025 	stmdane	r5, {r0, r2, r5, sp}
    29fc:	20250520 	eorcs	r0, r5, r0, lsr #10
    2a00:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    2a04:	06210602 	strteq	r0, [r1], -r2, lsl #12
    2a08:	31010514 	tstcc	r1, r4, lsl r5
    2a0c:	01000802 	tsteq	r0, r2, lsl #16
    2a10:	000cb701 	andeq	fp, ip, r1, lsl #14
    2a14:	a1000300 	mrsge	r0, LR_irq
    2a18:	02000001 	andeq	r0, r0, #1
    2a1c:	0d0efb01 	vstreq	d15, [lr, #-4]
    2a20:	01010100 	mrseq	r0, (UNDEF: 17)
    2a24:	00000001 	andeq	r0, r0, r1
    2a28:	01000001 	tsteq	r0, r1
    2a2c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2978 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xd4>
    2a30:	616d2f65 	cmnvs	sp, r5, ror #30
    2a34:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a38:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a3c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a40:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a44:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a48:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a4c:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a50:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a54:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    2a58:	562f7362 	strtpl	r7, [pc], -r2, ror #6
    2a5c:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
    2a60:	73752f00 	cmnvc	r5, #0, 30
    2a64:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    2a68:	63672f62 	cmnvs	r7, #392	; 0x188
    2a6c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    2a70:	6f6e2d6d 	svcvs	0x006e2d6d
    2a74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    2a78:	2f696261 	svccs	0x00696261
    2a7c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    2a80:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    2a84:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    2a88:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    2a8c:	2f656d6f 	svccs	0x00656d6f
    2a90:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2a94:	442f6e69 	strtmi	r6, [pc], #-3689	; 2a9c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>
    2a98:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2a9c:	4f2f706f 	svcmi	0x002f706f
    2aa0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2aa4:	502f5445 	eorpl	r5, pc, r5, asr #8
    2aa8:	534f4349 	movtpl	r4, #62281	; 0xf349
    2aac:	6369502f 	cmnvs	r9, #47	; 0x2f
    2ab0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    2ab4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    2ab8:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    2abc:	2f656d6f 	svccs	0x00656d6f
    2ac0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2ac4:	442f6e69 	strtmi	r6, [pc], #-3689	; 2acc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x8>
    2ac8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2acc:	4f2f706f 	svcmi	0x002f706f
    2ad0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2ad4:	502f5445 	eorpl	r5, pc, r5, asr #8
    2ad8:	534f4349 	movtpl	r4, #62281	; 0xf349
    2adc:	6369502f 	cmnvs	r9, #47	; 0x2f
    2ae0:	2f00534f 	svccs	0x0000534f
    2ae4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2ae8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    2aec:	2f6e6974 	svccs	0x006e6974
    2af0:	6b736544 	blvs	1cdc008 <__ccfg+0x1cbc060>
    2af4:	2f706f74 	svccs	0x00706f74
    2af8:	4f534c4f 	svcmi	0x00534c4f
    2afc:	2f54454e 	svccs	0x0054454e
    2b00:	4f434950 	svcmi	0x00434950
    2b04:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2b08:	2f534f63 	svccs	0x00534f63
    2b0c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    2b10:	00006c65 	andeq	r6, r0, r5, ror #24
    2b14:	2e766374 	mrccs	3, 3, r6, cr6, cr4, {3}
    2b18:	00010063 	andeq	r0, r1, r3, rrx
    2b1c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2b20:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    2b24:	00020068 	andeq	r0, r2, r8, rrx
    2b28:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    2b2c:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    2b30:	00020068 	andeq	r0, r2, r8, rrx
    2b34:	63726100 	cmnvs	r2, #0, 2
    2b38:	00682e68 	rsbeq	r2, r8, r8, ror #28
    2b3c:	6d000003 	stcvs	0, cr0, [r0, #-12]
    2b40:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    2b44:	00030068 	andeq	r0, r3, r8, rrx
    2b48:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    2b4c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2b50:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2b54:	62000003 	andvs	r0, r0, #3
    2b58:	6f747475 	svcvs	0x00747475
    2b5c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    2b60:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2b64:	00000300 	andeq	r0, r0, r0, lsl #6
    2b68:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    2b6c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    2b70:	74000004 	strvc	r0, [r0], #-4
    2b74:	645f7663 	ldrbvs	r7, [pc], #-1635	; 2b7c <NOROM_ChipInfo_GetChipFamily+0x40>
    2b78:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
    2b7c:	00010068 	andeq	r0, r1, r8, rrx
    2b80:	72656b00 	rsbvc	r6, r5, #0, 22
    2b84:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    2b88:	00050068 	andeq	r0, r5, r8, rrx
    2b8c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2b90:	73796870 	cmnvc	r9, #112, 16	; 0x700000
    2b94:	0100682e 	tsteq	r0, lr, lsr #16
    2b98:	63740000 	cmnvs	r4, #0
    2b9c:	6f6e5f76 	svcvs	0x006e5f76
    2ba0:	645f6564 	ldrbvs	r6, [pc], #-1380	; 2ba8 <NOROM_ChipInfo_GetHwRevision+0x20>
    2ba4:	2e617461 	cdpcs	4, 6, cr7, cr1, cr1, {3}
    2ba8:	00010068 	andeq	r0, r1, r8, rrx
    2bac:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    2bb0:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    2bb4:	003e6e69 	eorseq	r6, lr, r9, ror #28
    2bb8:	00000000 	andeq	r0, r0, r0
    2bbc:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    2bc0:	00000002 	andeq	r0, r0, r2
    2bc4:	02930300 	addseq	r0, r3, #0, 6
    2bc8:	17020501 	strne	r0, [r2, -r1, lsl #10]
    2bcc:	31051413 	tstcc	r5, r3, lsl r4
    2bd0:	01780306 	cmneq	r8, r6, lsl #6
    2bd4:	26070520 	strcs	r0, [r7], -r0, lsr #10
    2bd8:	05221605 	streq	r1, [r2, #-1541]!	; 0xfffff9fb
    2bdc:	02053c05 	andeq	r3, r5, #1280	; 0x500
    2be0:	1a052606 	bne	14c400 <__ccfg+0x12c458>
    2be4:	0e051306 	cdpeq	3, 0, cr1, cr5, cr6, {0}
    2be8:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    2bec:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    2bf0:	06020501 	streq	r0, [r2], -r1, lsl #10
    2bf4:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    2bf8:	02160601 	andseq	r0, r6, #1048576	; 0x100000
    2bfc:	01010001 	tsteq	r1, r1
    2c00:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2c04:	00000002 	andeq	r0, r0, r2
    2c08:	00fe0300 	rscseq	r0, lr, r0, lsl #6
    2c0c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2c10:	01060605 	tsteq	r6, r5, lsl #12
    2c14:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2c18:	052f0603 	streq	r0, [pc, #-1539]!	; 261d <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x65>
    2c1c:	05010629 	streq	r0, [r1, #-1577]	; 0xfffff9d7
    2c20:	03052e1c 	movweq	r2, #24092	; 0x5e1c
    2c24:	29052106 	stmdbcs	r5, {r1, r2, r8, sp}
    2c28:	1c050106 	stfnes	f0, [r5], {6}
    2c2c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2c30:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    2c34:	4c010501 	cfstr32mi	mvfx0, [r1], {1}
    2c38:	01000102 	tsteq	r0, r2, lsl #2
    2c3c:	002e0501 	eoreq	r0, lr, r1, lsl #10
    2c40:	00000205 	andeq	r0, r0, r5, lsl #4
    2c44:	83030000 	movwhi	r0, #12288	; 0x3000
    2c48:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2c4c:	062e0516 			; <UNDEFINED> instruction: 0x062e0516
    2c50:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    2c54:	01012f06 	tsteq	r1, r6, lsl #30
    2c58:	14010113 	strne	r0, [r1], #-275	; 0xfffffeed
    2c5c:	13060105 	movwne	r0, #24837	; 0x6105
    2c60:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    2c64:	01010002 	tsteq	r1, r2
    2c68:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2c6c:	00000002 	andeq	r0, r0, r2
    2c70:	01a70300 			; <UNDEFINED> instruction: 0x01a70300
    2c74:	06020501 	streq	r0, [r2], -r1, lsl #10
    2c78:	1c3a0524 	cfldr32ne	mvfx0, [sl], #-144	; 0xffffff70
    2c7c:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    2c80:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    2c84:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    2c88:	134a2006 	movtne	r2, #40966	; 0xa006
    2c8c:	01060505 	tsteq	r6, r5, lsl #10
    2c90:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    2c94:	052f0205 	streq	r0, [pc, #-517]!	; 2a97 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f3>
    2c98:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2c9c:	03052005 	movweq	r2, #20485	; 0x5005
    2ca0:	17053006 	strne	r3, [r5, -r6]
    2ca4:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    2ca8:	06030521 	streq	r0, [r3], -r1, lsr #10
    2cac:	0604052f 	streq	r0, [r4], -pc, lsr #10
    2cb0:	20110501 	andscs	r0, r1, r1, lsl #10
    2cb4:	21060305 	tstcs	r6, r5, lsl #6
    2cb8:	01060b05 	tsteq	r6, r5, lsl #22
    2cbc:	28060205 	stmdacs	r6, {r0, r2, r9}
    2cc0:	01061905 	tsteq	r6, r5, lsl #18
    2cc4:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
    2cc8:	7a030603 	bvc	c44dc <__ccfg+0xa4534>
    2ccc:	06140520 	ldreq	r0, [r4], -r0, lsr #10
    2cd0:	06030501 	streq	r0, [r3], -r1, lsl #10
    2cd4:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    2cd8:	20140501 	andscs	r0, r4, r1, lsl #10
    2cdc:	21060305 	tstcs	r6, r5, lsl #6
    2ce0:	01061105 	tsteq	r6, r5, lsl #2
    2ce4:	21060305 	tstcs	r6, r5, lsl #6
    2ce8:	01060b05 	tsteq	r6, r5, lsl #22
    2cec:	01000502 	tsteq	r0, r2, lsl #10
    2cf0:	003a0501 	eorseq	r0, sl, r1, lsl #10
    2cf4:	00000205 	andeq	r0, r0, r5, lsl #4
    2cf8:	df030000 	svcle	0x00030000
    2cfc:	20060101 	andcs	r0, r6, r1, lsl #2
    2d00:	03060205 	movweq	r0, #25093	; 0x6205
    2d04:	05302009 	ldreq	r2, [r0, #-9]!
    2d08:	1b058404 	blne	163d20 <__ccfg+0x143d78>
    2d0c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2d10:	06014c06 	streq	r4, [r1], -r6, lsl #24
    2d14:	064a0658 			; <UNDEFINED> instruction: 0x064a0658
    2d18:	79030627 	stmdbvc	r3, {r0, r1, r2, r5, r9, sl}
    2d1c:	0105133c 	tsteq	r5, ip, lsr r3
    2d20:	20120306 	andscs	r0, r2, r6, lsl #6
    2d24:	75030405 	strvc	r0, [r3, #-1029]	; 0xfffffbfb
    2d28:	052b062e 	streq	r0, [fp, #-1582]!	; 0xfffff9d2
    2d2c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    2d30:	014c0604 	cmpeq	ip, r4, lsl #12
    2d34:	5b132e90 	blpl	4ce77c <__ccfg+0x4ae7d4>
    2d38:	1a060105 	bne	183154 <__ccfg+0x1631ac>
    2d3c:	78030405 	stmdavc	r3, {r0, r2, sl}
    2d40:	3601052e 	strcc	r0, [r1], -lr, lsr #10
    2d44:	01000c02 	tsteq	r0, r2, lsl #24
    2d48:	00310501 	eorseq	r0, r1, r1, lsl #10
    2d4c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d50:	ba030000 	blt	c2d58 <__ccfg+0xa2db0>
    2d54:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    2d58:	31051418 	tstcc	r5, r8, lsl r4
    2d5c:	01780306 	cmneq	r8, r6, lsl #6
    2d60:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    2d64:	2d040520 	cfstr32cs	mvfx0, [r4, #-128]	; 0xffffff80
    2d68:	2f060205 	svccs	0x00060205
    2d6c:	01060505 	tsteq	r6, r5, lsl #10
    2d70:	2f060305 	svccs	0x00060305
    2d74:	06660601 	strbteq	r0, [r6], -r1, lsl #12
    2d78:	0621064a 	strteq	r0, [r1], -sl, asr #12
    2d7c:	0601133b 			; <UNDEFINED> instruction: 0x0601133b
    2d80:	2e064a66 	vmlscs.f32	s8, s12, s13
    2d84:	0105132e 	tsteq	r5, lr, lsr #6
    2d88:	3c090306 	stccc	3, cr0, [r9], {6}
    2d8c:	77030305 	strvc	r0, [r3, -r5, lsl #6]
    2d90:	0536062e 	ldreq	r0, [r6, #-1582]!	; 0xfffff9d2
    2d94:	05210601 	streq	r0, [r1, #-1537]!	; 0xfffff9ff
    2d98:	0b022d03 	bleq	8e1ac <__ccfg+0x6e204>
    2d9c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2da0:	0205004a 	andeq	r0, r5, #74	; 0x4a
    2da4:	00000000 	andeq	r0, r0, r0
    2da8:	0103f503 	tsteq	r3, r3, lsl #10	; <UNPREDICTABLE>
    2dac:	13140205 	tstne	r4, #1342177280	; 0x50000000
    2db0:	05131413 	ldreq	r1, [r3, #-1043]	; 0xfffffbed
    2db4:	7903064a 	stmdbvc	r3, {r1, r3, r6, r9, sl}
    2db8:	05053c01 	streq	r3, [r5, #-3073]	; 0xfffff3ff
    2dbc:	053c0b03 	ldreq	r0, [ip, #-2819]!	; 0xfffff4fd
    2dc0:	2075034a 	rsbscs	r0, r5, sl, asr #6
    2dc4:	06270205 	strteq	r0, [r7], -r5, lsl #4
    2dc8:	06050524 	streq	r0, [r5], -r4, lsr #10
    2dcc:	20300501 	eorscs	r0, r0, r1, lsl #10
    2dd0:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2dd4:	30053d0c 	andcc	r3, r5, ip, lsl #26
    2dd8:	2025053c 	eorcs	r0, r5, ip, lsr r5
    2ddc:	4b060405 	blmi	183df8 <__ccfg+0x163e50>
    2de0:	03060305 	movweq	r0, #25349	; 0x6305
    2de4:	02052e15 	andeq	r2, r5, #336	; 0x150
    2de8:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2dec:	05171313 	ldreq	r1, [r7, #-787]	; 0xfffffced
    2df0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2df4:	05760602 	ldrbeq	r0, [r6, #-1538]!	; 0xfffff9fe
    2df8:	0a05010f 	beq	14323c <__ccfg+0x123294>
    2dfc:	03052006 	movweq	r2, #20486	; 0x5006
    2e00:	13052f06 	movwne	r2, #24326	; 0x5f06
    2e04:	06050106 	streq	r0, [r5], -r6, lsl #2
    2e08:	0622052e 	strteq	r0, [r2], -lr, lsr #10
    2e0c:	0624051f 			; <UNDEFINED> instruction: 0x0624051f
    2e10:	060f0501 	streq	r0, [pc], -r1, lsl #10
    2e14:	06020520 	streq	r0, [r2], -r0, lsr #10
    2e18:	330a0501 	movwcc	r0, #42241	; 0xa501
    2e1c:	13030105 	movwne	r0, #12549	; 0x3105
    2e20:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2e24:	05667303 	strbeq	r7, [r6, #-771]!	; 0xfffffcfd
    2e28:	0515061a 	ldreq	r0, [r5, #-1562]	; 0xfffff9e6
    2e2c:	02053913 	andeq	r3, r5, #311296	; 0x4c000
    2e30:	1a052f06 	bne	14ea50 <__ccfg+0x12eaa8>
    2e34:	02051406 	andeq	r1, r5, #100663296	; 0x6000000
    2e38:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
    2e3c:	3c4a0114 	stfcce	f0, [sl], {20}
    2e40:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2e44:	4a050501 	bmi	144250 <__ccfg+0x1242a8>
    2e48:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    2e4c:	01061305 	tsteq	r6, r5, lsl #6
    2e50:	2f060205 	svccs	0x00060205
    2e54:	01060905 	tsteq	r6, r5, lsl #18
    2e58:	03060205 	movweq	r0, #25093	; 0x6205
    2e5c:	0515206d 	ldreq	r2, [r5, #-109]	; 0xffffff93
    2e60:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2e64:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2e68:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2e6c:	023d0603 	eorseq	r0, sp, #3145728	; 0x300000
    2e70:	01010010 	tsteq	r1, r0, lsl r0
    2e74:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2e78:	00000002 	andeq	r0, r0, r2
    2e7c:	04a80300 	strteq	r0, [r8], #768	; 0x300
    2e80:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2e84:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2e88:	201b063a 	andscs	r0, fp, sl, lsr r6
    2e8c:	20250205 	eorcs	r0, r5, r5, lsl #4
    2e90:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
    2e94:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
    2e98:	01151414 	tsteq	r5, r4, lsl r4
    2e9c:	064a5806 	strbeq	r5, [sl], -r6, lsl #16
    2ea0:	05142e2e 	ldreq	r2, [r4, #-3630]	; 0xfffff1d2
    2ea4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2ea8:	0a052e05 	beq	14e6c4 <__ccfg+0x12e71c>
    2eac:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2eb0:	08051341 	stmdaeq	r5, {r0, r6, r8, r9, ip}
    2eb4:	060a052b 	streq	r0, [sl], -fp, lsr #10
    2eb8:	20080501 	andcs	r0, r8, r1, lsl #10
    2ebc:	33060205 	movwcc	r0, #25093	; 0x6205
    2ec0:	0613053d 			; <UNDEFINED> instruction: 0x0613053d
    2ec4:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ec8:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    2ecc:	000b0213 	andeq	r0, fp, r3, lsl r2
    2ed0:	43050101 	movwmi	r0, #20737	; 0x5101
    2ed4:	00020500 	andeq	r0, r2, r0, lsl #10
    2ed8:	03000000 	movweq	r0, #0
    2edc:	050104c9 	streq	r0, [r1, #-1225]	; 0xfffffb37
    2ee0:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    2ee4:	0f050106 	svceq	0x00050106
    2ee8:	3b26052f 	blcc	9843ac <__ccfg+0x964404>
    2eec:	05211d05 	streq	r1, [r1, #-3333]!	; 0xfffff2fb
    2ef0:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    2ef4:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    2ef8:	052f0602 	streq	r0, [pc, #-1538]!	; 28fe <NOROM_SysCtrlSetRechargeBeforePowerDown+0x5a>
    2efc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2f00:	01052b0a 	tsteq	r5, sl, lsl #22
    2f04:	00040232 	andeq	r0, r4, r2, lsr r2
    2f08:	3c050101 	stfccs	f0, [r5], {1}
    2f0c:	00020500 	andeq	r0, r2, r0, lsl #10
    2f10:	03000000 	movweq	r0, #0
    2f14:	050104d5 	streq	r0, [r1, #-1237]	; 0xfffffb2b
    2f18:	13131902 	tstne	r3, #32768	; 0x8000
    2f1c:	3c050114 	stfccs	f0, [r5], {20}
    2f20:	20750306 	rsbscs	r0, r5, r6, lsl #6
    2f24:	03020520 	movweq	r0, #9504	; 0x2520
    2f28:	0620200b 	strteq	r2, [r0], -fp
    2f2c:	1303064a 	movwne	r0, #13898	; 0x364a
    2f30:	6d030620 	stcvs	6, cr0, [r3, #-128]	; 0xffffff80
    2f34:	0513143c 	ldreq	r1, [r3, #-1084]	; 0xfffffbc4
    2f38:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2f3c:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2f40:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2f44:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    2f48:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2f4c:	3d4b0604 	stclcc	6, cr0, [fp, #-16]
    2f50:	3d330205 	lfmcc	f0, 4, [r3, #-20]!	; 0xffffffec
    2f54:	06150101 	ldreq	r0, [r5], -r1, lsl #2
    2f58:	1e040514 	mcrne	5, 0, r0, cr4, cr4, {0}
    2f5c:	30060205 	andcc	r0, r6, r5, lsl #4
    2f60:	4a4a0601 	bmi	128476c <__ccfg+0x12647c4>
    2f64:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2f68:	0622053e 			; <UNDEFINED> instruction: 0x0622053e
    2f6c:	57150513 			; <UNDEFINED> instruction: 0x57150513
    2f70:	23060205 	movwcs	r0, #25093	; 0x6205
    2f74:	13060105 	movwne	r0, #24837	; 0x6105
    2f78:	70030a05 	andvc	r0, r3, r5, lsl #20
    2f7c:	000b022e 	andeq	r0, fp, lr, lsr #4
    2f80:	38050101 	stmdacc	r5, {r0, r8}
    2f84:	00020500 	andeq	r0, r2, r0, lsl #10
    2f88:	03000000 	movweq	r0, #0
    2f8c:	050104fc 	streq	r0, [r1, #-1276]	; 0xfffffb04
    2f90:	13131602 	tstne	r3, #2097152	; 0x200000
    2f94:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    2f98:	77030638 	smladxvc	r3, r8, r6, r0
    2f9c:	03020520 	movweq	r0, #9504	; 0x2520
    2fa0:	06202009 	strteq	r2, [r0], -r9
    2fa4:	0603054a 	streq	r0, [r3], -sl, asr #10
    2fa8:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    2fac:	77030602 	strvc	r0, [r3, -r2, lsl #12]
    2fb0:	0514142e 	ldreq	r1, [r4, #-1070]	; 0xfffffbd2
    2fb4:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2fb8:	03052005 	movweq	r2, #20485	; 0x5005
    2fbc:	02052f06 	andeq	r2, r5, #6, 30
    2fc0:	1b051319 	blne	147c2c <__ccfg+0x127c84>
    2fc4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2fc8:	06030520 	streq	r0, [r3], -r0, lsr #10
    2fcc:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
    2fd0:	75030605 	strvc	r0, [r3, #-1541]	; 0xfffff9fb
    2fd4:	030a0501 	movweq	r0, #42241	; 0xa501
    2fd8:	1a05200b 	bne	14b00c <__ccfg+0x12b064>
    2fdc:	03052006 	movweq	r2, #20486	; 0x5006
    2fe0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2fe4:	2c052f06 	stccs	15, cr2, [r5], {6}
    2fe8:	06051106 	streq	r1, [r5], -r6, lsl #2
    2fec:	062a0521 	strteq	r0, [sl], -r1, lsr #10
    2ff0:	0309051f 	movweq	r0, #38175	; 0x951f
    2ff4:	2105206f 	tstcs	r5, pc, rrx
    2ff8:	0c050106 	stfeqs	f0, [r5], {6}
    2ffc:	06030520 	streq	r0, [r3], -r0, lsr #10
    3000:	0620052f 	strteq	r0, [r0], -pc, lsr #10
    3004:	20060501 	andcs	r0, r6, r1, lsl #10
    3008:	05202005 	streq	r2, [r0, #-5]!
    300c:	02052006 	andeq	r2, r5, #6
    3010:	05133306 	ldreq	r3, [r3, #-774]	; 0xfffffcfa
    3014:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3018:	422a0603 	eormi	r0, sl, #3145728	; 0x300000
    301c:	0f060505 	svceq	0x00060505
    3020:	05230a05 	streq	r0, [r3, #-2565]!	; 0xfffff5fb
    3024:	0520061a 	streq	r0, [r0, #-1562]!	; 0xfffff9e6
    3028:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    302c:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    3030:	03060405 	movweq	r0, #25605	; 0x6405
    3034:	08052074 	stmdaeq	r5, {r2, r4, r5, r6, sp}
    3038:	07050106 	streq	r0, [r5, -r6, lsl #2]
    303c:	06050520 	streq	r0, [r5], -r0, lsr #10
    3040:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    3044:	22070510 	andcs	r0, r7, #16, 10	; 0x4000000
    3048:	1e062a05 	vmlane.f32	s4, s12, s10
    304c:	01000a02 	tsteq	r0, r2, lsl #20
    3050:	00380501 	eorseq	r0, r8, r1, lsl #10
    3054:	00000205 	andeq	r0, r0, r5, lsl #4
    3058:	a3030000 	movwge	r0, #12288	; 0x3000
    305c:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    3060:	13131316 	tstne	r3, #1476395008	; 0x58000000
    3064:	38050114 	stmdacc	r5, {r2, r4, r8}
    3068:	20770306 	rsbscs	r0, r7, r6, lsl #6
    306c:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3070:	4a062020 	bmi	18b0f8 <__ccfg+0x16b150>
    3074:	03060305 	movweq	r0, #25349	; 0x6305
    3078:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    307c:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    3080:	1a051414 	bne	1480d8 <__ccfg+0x128130>
    3084:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3088:	06030520 	streq	r0, [r3], -r0, lsr #10
    308c:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    3090:	01060505 	tsteq	r6, r5, lsl #10
    3094:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
    3098:	206b0338 	rsbcs	r0, fp, r8, lsr r3
    309c:	03060305 	movweq	r0, #25349	; 0x6305
    30a0:	05207cb3 	streq	r7, [r0, #-3251]!	; 0xfffff34d
    30a4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    30a8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    30ac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    30b0:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    30b4:	13052911 	movwne	r2, #22801	; 0x5911
    30b8:	0f050106 	svceq	0x00050106
    30bc:	05052006 	streq	r2, [r5, #-6]
    30c0:	09051306 	stmdbeq	r5, {r1, r2, r8, r9, ip}
    30c4:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
    30c8:	06210520 	strteq	r0, [r1], -r0, lsr #10
    30cc:	200c0501 	andcs	r0, ip, r1, lsl #10
    30d0:	2f060305 	svccs	0x00060305
    30d4:	01062005 	tsteq	r6, r5
    30d8:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    30dc:	06052020 	streq	r2, [r5], -r0, lsr #32
    30e0:	06020520 	streq	r0, [r2], -r0, lsr #10
    30e4:	061b0533 			; <UNDEFINED> instruction: 0x061b0533
    30e8:	06030501 	streq	r0, [r3], -r1, lsl #10
    30ec:	0601052b 	streq	r0, [r1], -fp, lsr #10
    30f0:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
    30f4:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    30f8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    30fc:	05200619 	streq	r0, [r0, #-1561]!	; 0xfffff9e7
    3100:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    3104:	2e0a0301 	cdpcs	3, 0, cr0, cr10, cr1, {0}
    3108:	03060305 	movweq	r0, #25349	; 0x6305
    310c:	1e052e77 	mcrne	14, 0, r2, cr5, cr7, {3}
    3110:	06050106 	streq	r0, [r5], -r6, lsl #2
    3114:	06040520 	streq	r0, [r4], -r0, lsr #10
    3118:	06052f30 			; <UNDEFINED> instruction: 0x06052f30
    311c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3120:	29052106 	stmdbcs	r5, {r1, r2, r8, sp}
    3124:	062b051b 			; <UNDEFINED> instruction: 0x062b051b
    3128:	000a0201 	andeq	r0, sl, r1, lsl #4
    312c:	16050101 	strne	r0, [r5], -r1, lsl #2
    3130:	00020500 	andeq	r0, r2, r0, lsl #10
    3134:	03000000 	movweq	r0, #0
    3138:	050105cd 	streq	r0, [r1, #-1485]	; 0xfffffa33
    313c:	13131302 	tstne	r3, #134217728	; 0x8000000
    3140:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3144:	7a030616 	bvc	c49a4 <__ccfg+0xa49fc>
    3148:	02052020 	andeq	r2, r5, #32
    314c:	4a062042 	bmi	18b25c <__ccfg+0x16b2b4>
    3150:	38062406 	stmdacc	r6, {r1, r2, sl, sp}
    3154:	06011414 			; <UNDEFINED> instruction: 0x06011414
    3158:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
    315c:	0e05162e 	cfmadd32eq	mvax1, mvfx1, mvfx5, mvfx14
    3160:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3164:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    3168:	0e051406 	cdpeq	4, 0, cr1, cr5, cr6, {0}
    316c:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3170:	060d0530 			; <UNDEFINED> instruction: 0x060d0530
    3174:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3178:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    317c:	01060605 	tsteq	r6, r5, lsl #12
    3180:	054e0a05 	strbeq	r0, [lr, #-2565]	; 0xfffff5fb
    3184:	20210301 	eorcs	r0, r1, r1, lsl #6
    3188:	03060405 	movweq	r0, #25605	; 0x6405
    318c:	033d2e5c 	teqeq	sp, #92, 28	; 0x5c0
    3190:	02050117 	andeq	r0, r5, #-1073741819	; 0xc0000005
    3194:	012e6e03 			; <UNDEFINED> instruction: 0x012e6e03
    3198:	0b032e3c 	bleq	cea90 <__ccfg+0xaeae8>
    319c:	060b0501 	streq	r0, [fp], -r1, lsl #10
    31a0:	4a170501 	bmi	5c45ac <__ccfg+0x5a4604>
    31a4:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    31a8:	03055805 	movweq	r5, #22533	; 0x5805
    31ac:	06052206 	streq	r2, [r5], -r6, lsl #4
    31b0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    31b4:	02054e06 	andeq	r4, r5, #6, 28	; 0x60
    31b8:	06100550 			; <UNDEFINED> instruction: 0x06100550
    31bc:	06020501 	streq	r0, [r2], -r1, lsl #10
    31c0:	0605052f 	streq	r0, [r5], -pc, lsr #10
    31c4:	06030501 	streq	r0, [r3], -r1, lsl #10
    31c8:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    31cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    31d0:	061b054b 	ldreq	r0, [fp], -fp, asr #10
    31d4:	2f150501 	svccs	0x00150501
    31d8:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    31dc:	09051421 	stmdbeq	r5, {r0, r5, sl, ip}
    31e0:	0c020106 	stfeqs	f0, [r2], {6}
    31e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    31e8:	02050044 	andeq	r0, r5, #68	; 0x44
    31ec:	00000000 	andeq	r0, r0, r0
    31f0:	01068703 	tsteq	r6, r3, lsl #14
    31f4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    31f8:	200e0644 	andcs	r0, lr, r4, asr #12
    31fc:	26060205 	strcs	r0, [r6], -r5, lsl #4
    3200:	01061a05 	tsteq	r6, r5, lsl #20
    3204:	7a034405 	bvc	d4220 <__ccfg+0xb4278>
    3208:	0602052e 	streq	r0, [r2], -lr, lsr #10
    320c:	054a0903 	strbeq	r0, [sl, #-2307]	; 0xfffff6fd
    3210:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3214:	672f0603 	strvs	r0, [pc, -r3, lsl #12]!
    3218:	01061605 	tsteq	r6, r5, lsl #12
    321c:	67060305 	strvs	r0, [r6, -r5, lsl #6]
    3220:	01061605 	tsteq	r6, r5, lsl #12
    3224:	5b060205 	blpl	183a40 <__ccfg+0x163a98>
    3228:	13060105 	movwne	r0, #24837	; 0x6105
    322c:	01000202 	tsteq	r0, r2, lsl #4
    3230:	004b0501 	subeq	r0, fp, r1, lsl #10
    3234:	00000205 	andeq	r0, r0, r5, lsl #4
    3238:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    323c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3240:	4b051416 	blmi	1482a0 <__ccfg+0x1282f8>
    3244:	017a0306 	cmneq	sl, r6, lsl #6
    3248:	05261a05 	streq	r1, [r6, #-2565]!	; 0xfffff5fb
    324c:	2e7a034b 	cdpcs	3, 7, cr0, cr10, cr11, {2}
    3250:	03060205 	movweq	r0, #25093	; 0x6205
    3254:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    3258:	03050106 	movweq	r0, #20742	; 0x5106
    325c:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    3260:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3264:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
    3268:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    326c:	055a0602 	ldrbeq	r0, [sl, #-1538]	; 0xfffff9fe
    3270:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    3274:	01010002 	tsteq	r1, r2
    3278:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    327c:	00000002 	andeq	r0, r0, r2
    3280:	06aa0300 	strteq	r0, [sl], r0, lsl #6
    3284:	16020501 	strne	r0, [r2], -r1, lsl #10
    3288:	01060505 	tsteq	r6, r5, lsl #10
    328c:	21060305 	tstcs	r6, r5, lsl #6
    3290:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
    3294:	01000102 	tsteq	r0, r2, lsl #2
    3298:	00480501 	subeq	r0, r8, r1, lsl #10
    329c:	00000205 	andeq	r0, r0, r5, lsl #4
    32a0:	d1030000 	mrsle	r0, (UNDEF: 3)
    32a4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32a8:	48052406 	stmdami	r5, {r1, r2, sl, sp}
    32ac:	0602051c 			; <UNDEFINED> instruction: 0x0602051c
    32b0:	48050124 	stmdami	r5, {r2, r5, r8}
    32b4:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    32b8:	06202402 	strteq	r2, [r0], -r2, lsl #8
    32bc:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    32c0:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    32c4:	06022d13 			; <UNDEFINED> instruction: 0x06022d13
    32c8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    32cc:	02050046 	andeq	r0, r5, #70	; 0x46
    32d0:	00000000 	andeq	r0, r0, r0
    32d4:	0106b203 	tsteq	r6, r3, lsl #4
    32d8:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
    32dc:	050d0646 	streq	r0, [sp, #-1606]	; 0xfffff9ba
    32e0:	03052505 	movweq	r2, #21765	; 0x5505
    32e4:	06052f06 	streq	r2, [r5], -r6, lsl #30
    32e8:	03050106 	movweq	r0, #20742	; 0x5106
    32ec:	06053006 	streq	r3, [r5], -r6
    32f0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    32f4:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    32f8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    32fc:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3300:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3304:	04053c07 	streq	r3, [r5], #-3079	; 0xfffff3f9
    3308:	0c052206 	sfmeq	f2, 4, [r5], {6}
    330c:	01050106 	tsteq	r5, r6, lsl #2
    3310:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    3314:	7a030603 	bvc	c4b28 <__ccfg+0xa4b80>
    3318:	06060520 	streq	r0, [r6], -r0, lsr #10
    331c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3320:	06130530 			; <UNDEFINED> instruction: 0x06130530
    3324:	06020501 	streq	r0, [r2], -r1, lsl #10
    3328:	2e06014c 	adfcssm	f0, f6, #4.0
    332c:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3330:	01063705 	tsteq	r6, r5, lsl #14
    3334:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    3338:	0b052d09 	bleq	14e764 <__ccfg+0x12e7bc>
    333c:	023c7103 	eorseq	r7, ip, #-1073741824	; 0xc0000000
    3340:	0101000b 	tsteq	r1, fp
    3344:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    3348:	00000002 	andeq	r0, r0, r2
    334c:	06d90300 	ldrbeq	r0, [r9], r0, lsl #6
    3350:	16020501 	strne	r0, [r2], -r1, lsl #10
    3354:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    3358:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    335c:	4a4a0620 	bmi	1284be4 <__ccfg+0x1264c3c>
    3360:	06250513 			; <UNDEFINED> instruction: 0x06250513
    3364:	06020501 	streq	r0, [r2], -r1, lsl #10
    3368:	06430567 	strbeq	r0, [r3], -r7, ror #10
    336c:	2e220501 	cfsh64cs	mvdx0, mvdx2, #1
    3370:	052e4305 	streq	r4, [lr, #-773]!	; 0xfffffcfb
    3374:	01052e22 	tsteq	r5, r2, lsr #28
    3378:	0005024b 	andeq	r0, r5, fp, asr #4
    337c:	3d050101 	stfccs	f0, [r5, #-4]
    3380:	00020500 	andeq	r0, r2, r0, lsl #10
    3384:	03000000 	movweq	r0, #0
    3388:	050106e2 	streq	r0, [r1, #-1762]	; 0xfffff91e
    338c:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    3390:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    3394:	06202402 	strteq	r2, [r0], -r2, lsl #8
    3398:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    339c:	05010622 	streq	r0, [r1, #-1570]	; 0xfffff9de
    33a0:	05026701 	streq	r6, [r2, #-1793]	; 0xfffff8ff
    33a4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    33a8:	02050040 	andeq	r0, r5, #64	; 0x40
    33ac:	00000000 	andeq	r0, r0, r0
    33b0:	0106ea03 	tsteq	r6, r3, lsl #20
    33b4:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    33b8:	03064005 	movweq	r4, #24581	; 0x6005
    33bc:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    33c0:	4005260c 	andmi	r2, r5, ip, lsl #12
    33c4:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    33c8:	0505260c 	streq	r2, [r5, #-1548]	; 0xfffff9f4
    33cc:	0602052e 	streq	r0, [r2], -lr, lsr #10
    33d0:	11058433 	tstne	r5, r3, lsr r4
    33d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    33d8:	1d110531 	cfldr32ne	mvfx0, [r1, #-196]	; 0xffffff3c
    33dc:	21060205 	tstcs	r6, r5, lsl #4
    33e0:	061a0513 			; <UNDEFINED> instruction: 0x061a0513
    33e4:	06020511 			; <UNDEFINED> instruction: 0x06020511
    33e8:	09053d3e 	stmdbeq	r5, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}
    33ec:	01050106 	tsteq	r5, r6, lsl #2
    33f0:	00020221 	andeq	r0, r2, r1, lsr #4
    33f4:	3e050101 	adfccs	f0, f5, f1
    33f8:	00020500 	andeq	r0, r2, r0, lsl #10
    33fc:	03000000 	movweq	r0, #0
    3400:	050106fe 	streq	r0, [r1, #-1790]	; 0xfffff902
    3404:	03021602 	movweq	r1, #9730	; 0x2602
    3408:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    340c:	02050045 	andeq	r0, r5, #69	; 0x45
    3410:	00000000 	andeq	r0, r0, r0
    3414:	01078503 	tsteq	r7, r3, lsl #10
    3418:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    341c:	03064505 	movweq	r4, #25861	; 0x6505
    3420:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    3424:	03052605 	movweq	r2, #22021	; 0x5605
    3428:	06053106 	streq	r3, [r5], -r6, lsl #2
    342c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3430:	03052f06 	movweq	r2, #24326	; 0x5f06
    3434:	2e062f06 	cdpcs	15, 0, cr2, cr6, cr6, {0}
    3438:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    343c:	1d033c4a 	stcne	12, cr3, [r3, #-296]	; 0xfffffed8
    3440:	060c0501 	streq	r0, [ip], -r1, lsl #10
    3444:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    3448:	05350a05 	ldreq	r0, [r5, #-2565]!	; 0xfffff5fb
    344c:	04052701 	streq	r2, [r5], #-1793	; 0xfffff8ff
    3450:	20730306 	rsbscs	r0, r3, r6, lsl #6
    3454:	01062005 	tsteq	r6, r5
    3458:	05310405 	ldreq	r0, [r1, #-1029]!	; 0xfffffbfb
    345c:	04051d12 	streq	r1, [r5], #-3346	; 0xfffff2ee
    3460:	1d053006 	stcne	0, cr3, [r5, #-24]	; 0xffffffe8
    3464:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3468:	052f3d06 	streq	r3, [pc, #-3334]!	; 276a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x16>
    346c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3470:	05410602 	strbeq	r0, [r1, #-1538]	; 0xfffff9fe
    3474:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3478:	03052e05 	movweq	r2, #24069	; 0x5e05
    347c:	0a052f06 	beq	14f09c <__ccfg+0x12f0f4>
    3480:	09020106 	stmdbeq	r2, {r1, r2, r8}
    3484:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3488:	02050048 	andeq	r0, r5, #72	; 0x48
    348c:	00000000 	andeq	r0, r0, r0
    3490:	01098603 	tsteq	r9, r3, lsl #12
    3494:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    3498:	01060505 	tsteq	r6, r5, lsl #10
    349c:	78034805 	stmdavc	r3, {r0, r2, fp, lr}
    34a0:	05052020 	streq	r2, [r5, #-32]	; 0xffffffe0
    34a4:	20310528 	eorscs	r0, r1, r8, lsr #10
    34a8:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    34ac:	063d0603 	ldrteq	r0, [sp], -r3, lsl #12
    34b0:	06020535 			; <UNDEFINED> instruction: 0x06020535
    34b4:	06110529 	ldreq	r0, [r1], -r9, lsr #10
    34b8:	06020501 	streq	r0, [r2], -r1, lsl #10
    34bc:	0611052f 	ldreq	r0, [r1], -pc, lsr #10
    34c0:	22210501 	eorcs	r0, r1, #4194304	; 0x400000
    34c4:	051e1105 	ldreq	r1, [lr, #-261]	; 0xfffffefb
    34c8:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    34cc:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    34d0:	02052e10 	andeq	r2, r5, #16, 28	; 0x100
    34d4:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    34d8:	03050106 	movweq	r0, #20742	; 0x5106
    34dc:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    34e0:	0105343d 	tsteq	r5, sp, lsr r4
    34e4:	0b021306 	bleq	88104 <__ccfg+0x6815c>
    34e8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34ec:	02050044 	andeq	r0, r5, #68	; 0x44
    34f0:	00000000 	andeq	r0, r0, r0
    34f4:	0109a003 	tsteq	r9, r3
    34f8:	13170205 	tstne	r7, #1342177280	; 0x50000000
    34fc:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    3500:	77030644 	strvc	r0, [r3, -r4, asr #12]
    3504:	03020501 	movweq	r0, #9473	; 0x2501
    3508:	44052e09 	strmi	r2, [r5], #-3593	; 0xfffff1f7
    350c:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    3510:	4a090302 	bmi	244120 <__ccfg+0x224178>
    3514:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    3518:	0d030603 	stceq	6, cr0, [r3, #-12]
    351c:	4b0e0520 	blmi	3849a4 <__ccfg+0x3649fc>
    3520:	47060305 	strmi	r0, [r6, -r5, lsl #6]
    3524:	01060f05 	tsteq	r6, r5, lsl #30
    3528:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    352c:	78030628 	stmdavc	r3, {r3, r5, r9, sl}
    3530:	011e0520 	tsteq	lr, r0, lsr #10
    3534:	01060205 	tsteq	r6, r5, lsl #4
    3538:	16030a05 	strne	r0, [r3], -r5, lsl #20
    353c:	0301052e 	movweq	r0, #5422	; 0x152e
    3540:	0305200d 	movweq	r2, #20493	; 0x500d
    3544:	3c670306 	stclcc	3, cr0, [r7], #-24	; 0xffffffe8
    3548:	132e5801 			; <UNDEFINED> instruction: 0x132e5801
    354c:	01060e05 	tsteq	r6, r5, lsl #28
    3550:	05740605 	ldrbeq	r0, [r4, #-1541]!	; 0xfffff9fb
    3554:	05420602 	strbeq	r0, [r2, #-1538]	; 0xfffff9fe
    3558:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    355c:	05360602 	ldreq	r0, [r6, #-1538]!	; 0xfffff9fe
    3560:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    3564:	12052e16 	andne	r2, r5, #352	; 0x160
    3568:	2006052e 	andcs	r0, r6, lr, lsr #10
    356c:	23060205 	movwcs	r0, #25093	; 0x6205
    3570:	01060b05 	tsteq	r6, r5, lsl #22
    3574:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    3578:	68320602 	ldmdavs	r2!, {r1, r9, sl}
    357c:	01060905 	tsteq	r6, r5, lsl #18
    3580:	01000a02 	tsteq	r0, r2, lsl #20
    3584:	003e0501 	eorseq	r0, lr, r1, lsl #10
    3588:	00000205 	andeq	r0, r0, r5, lsl #4
    358c:	d1030000 	mrsle	r0, (UNDEF: 3)
    3590:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3594:	01141317 	tsteq	r4, r7, lsl r3
    3598:	03063e05 	movweq	r3, #28165	; 0x6e05
    359c:	02052078 	andeq	r2, r5, #120	; 0x78
    35a0:	4a062028 	bmi	18b648 <__ccfg+0x16b6a0>
    35a4:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    35a8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    35ac:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    35b0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    35b4:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    35b8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    35bc:	0a053306 	beq	1501dc <__ccfg+0x130234>
    35c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    35c4:	012f2f06 			; <UNDEFINED> instruction: 0x012f2f06
    35c8:	09051301 	stmdbeq	r5, {r0, r8, r9, ip}
    35cc:	01050106 	tsteq	r5, r6, lsl #2
    35d0:	030a0521 	movweq	r0, #42273	; 0xa521
    35d4:	09022079 	stmdbeq	r2, {r0, r3, r4, r5, r6, sp}
    35d8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35dc:	02050034 	andeq	r0, r5, #52	; 0x34
    35e0:	00000000 	andeq	r0, r0, r0
    35e4:	0109e803 	tsteq	r9, r3, lsl #16
    35e8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    35ec:	34050114 	strcc	r0, [r5], #-276	; 0xfffffeec
    35f0:	20790306 	rsbscs	r0, r9, r6, lsl #6
    35f4:	20270205 	eorcs	r0, r7, r5, lsl #4
    35f8:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    35fc:	01060505 	tsteq	r6, r5, lsl #10
    3600:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3604:	01060405 	tsteq	r6, r5, lsl #8
    3608:	21060205 	tstcs	r6, r5, lsl #4
    360c:	01060505 	tsteq	r6, r5, lsl #10
    3610:	23060205 	movwcs	r0, #25093	; 0x6205
    3614:	10060a05 	andne	r0, r6, r5, lsl #20
    3618:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    361c:	07022101 	streq	r2, [r2, -r1, lsl #2]
    3620:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3624:	02050035 	andeq	r0, r5, #53	; 0x35
    3628:	00000000 	andeq	r0, r0, r0
    362c:	0109f903 	tsteq	r9, r3, lsl #18	; <UNPREDICTABLE>
    3630:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3634:	050e0635 	streq	r0, [lr, #-1589]	; 0xfffff9cb
    3638:	0c052602 	stceq	6, cr2, [r5], {2}
    363c:	0602052c 	streq	r0, [r2], -ip, lsr #10
    3640:	4a060130 	bmi	183b08 <__ccfg+0x163b60>
    3644:	4a2e064a 	bmi	b84f74 <__ccfg+0xb64fcc>
    3648:	06010513 			; <UNDEFINED> instruction: 0x06010513
    364c:	2c02053e 	cfstr32cs	mvfx0, [r2], {62}	; 0x3e
    3650:	01000602 	tsteq	r0, r2, lsl #12
    3654:	00320501 	eorseq	r0, r2, r1, lsl #10
    3658:	00000205 	andeq	r0, r0, r5, lsl #4
    365c:	84030000 	strhi	r0, [r3], #-0
    3660:	0205010a 	andeq	r0, r5, #-2147483646	; 0x80000002
    3664:	32050116 	andcc	r0, r5, #-2147483643	; 0x80000005
    3668:	02051c06 	andeq	r1, r5, #1536	; 0x600
    366c:	4a062024 	bmi	18b704 <__ccfg+0x16b75c>
    3670:	0a05134a 	beq	1483a0 <__ccfg+0x1283f8>
    3674:	77cc0306 	strbvc	r0, [ip, r6, lsl #6]
    3678:	03090501 	movweq	r0, #38145	; 0x9501
    367c:	052008b4 	streq	r0, [r0, #-2228]!	; 0xfffff74c
    3680:	c9030602 	stmdbgt	r3, {r1, r9, sl}
    3684:	14133c77 	ldrne	r3, [r3], #-3191	; 0xfffff389
    3688:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    368c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3690:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3694:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3698:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    369c:	13052911 	movwne	r2, #22801	; 0x5911
    36a0:	0f050106 	svceq	0x00050106
    36a4:	05052006 	streq	r2, [r5, #-6]
    36a8:	01051306 	tsteq	r5, r6, lsl #6
    36ac:	2008b403 	andcs	fp, r8, r3, lsl #8
    36b0:	01000802 	tsteq	r0, r2, lsl #16
    36b4:	00280501 	eoreq	r0, r8, r1, lsl #10
    36b8:	16640205 	strbtne	r0, [r4], -r5, lsl #4
    36bc:	8c030000 	stchi	0, cr0, [r3], {-0}
    36c0:	0105010a 	tsteq	r5, sl, lsl #2
    36c4:	02011a03 	andeq	r1, r1, #12288	; 0x3000
    36c8:	01010001 	tsteq	r1, r1
    36cc:	00000123 	andeq	r0, r0, r3, lsr #2
    36d0:	00890003 	addeq	r0, r9, r3
    36d4:	01020000 	mrseq	r0, (UNDEF: 2)
    36d8:	000d0efb 	strdeq	r0, [sp], -fp
    36dc:	01010101 	tsteq	r1, r1, lsl #2
    36e0:	01000000 	mrseq	r0, (UNDEF: 0)
    36e4:	2f010000 	svccs	0x00010000
    36e8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    36ec:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    36f0:	2f6e6974 	svccs	0x006e6974
    36f4:	6b736544 	blvs	1cdcc0c <__ccfg+0x1cbcc64>
    36f8:	2f706f74 	svccs	0x00706f74
    36fc:	4f534c4f 	svcmi	0x00534c4f
    3700:	2f54454e 	svccs	0x0054454e
    3704:	4f434950 	svcmi	0x00434950
    3708:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    370c:	2f534f63 	svccs	0x00534f63
    3710:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3714:	2f005858 	svccs	0x00005858
    3718:	2f727375 	svccs	0x00727375
    371c:	2f62696c 	svccs	0x0062696c
    3720:	2f636367 	svccs	0x00636367
    3724:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3728:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    372c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3730:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3734:	2f312e32 	svccs	0x00312e32
    3738:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    373c:	00656475 	rsbeq	r6, r5, r5, ror r4
    3740:	61747300 	cmnvs	r4, r0, lsl #6
    3744:	70757472 	rsbsvc	r7, r5, r2, ror r4
    3748:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
    374c:	0100632e 	tsteq	r0, lr, lsr #6
    3750:	74730000 	ldrbtvc	r0, [r3], #-0
    3754:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3758:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    375c:	05000000 	streq	r0, [r0, #-0]
    3760:	02050001 	andeq	r0, r5, #1
    3764:	00001666 	andeq	r1, r0, r6, ror #12
    3768:	01028403 	tsteq	r2, r3, lsl #8
    376c:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    3770:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3774:	01010001 	tsteq	r1, r1
    3778:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    377c:	00166802 	andseq	r6, r6, r2, lsl #16
    3780:	02960300 	addseq	r0, r6, #0, 6
    3784:	16050501 	strne	r0, [r5], -r1, lsl #10
    3788:	100a0514 	andne	r0, sl, r4, lsl r5
    378c:	01000102 	tsteq	r0, r2, lsl #2
    3790:	00010501 	andeq	r0, r1, r1, lsl #10
    3794:	166a0205 	strbtne	r0, [sl], -r5, lsl #4
    3798:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    379c:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    37a0:	0a051416 	beq	148800 <__ccfg+0x128858>
    37a4:	00010210 	andeq	r0, r1, r0, lsl r2
    37a8:	01050101 	tsteq	r5, r1, lsl #2
    37ac:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
    37b0:	03000016 	movweq	r0, #22
    37b4:	050101d2 	streq	r0, [r1, #-466]	; 0xfffffe2e
    37b8:	05171305 	ldreq	r1, [r7, #-773]	; 0xfffffcfb
    37bc:	7a030601 	bvc	c4fc8 <__ccfg+0xa5020>
    37c0:	26050501 	strcs	r0, [r5], -r1, lsl #10
    37c4:	05133306 	ldreq	r3, [r3, #-774]	; 0xfffffcfa
    37c8:	051f060e 	ldreq	r0, [pc, #-1550]	; 31c2 <__exidx_end+0x2ba>
    37cc:	1d052105 	stfnes	f2, [r5, #-20]	; 0xffffffec
    37d0:	05052006 	streq	r2, [r5, #-6]
    37d4:	36060106 	strcc	r0, [r6], -r6, lsl #2
    37d8:	0d030405 	cfstrseq	mvf0, [r3, #-20]	; 0xffffffec
    37dc:	33050590 	movwcc	r0, #21904	; 0x5590
    37e0:	2f060105 	svccs	0x00060105
    37e4:	03060905 	movweq	r0, #26885	; 0x6905
    37e8:	16052067 	strne	r2, [r5], -r7, rrx
    37ec:	10020106 	andne	r0, r2, r6, lsl #2
    37f0:	85010100 	strhi	r0, [r1, #-256]	; 0xffffff00
    37f4:	03000001 	movweq	r0, #1
    37f8:	00017f00 	andeq	r7, r1, r0, lsl #30
    37fc:	fb010200 	blx	44006 <__ccfg+0x2405e>
    3800:	01000d0e 	tsteq	r0, lr, lsl #26
    3804:	00010101 	andeq	r0, r1, r1, lsl #2
    3808:	00010000 	andeq	r0, r1, r0
    380c:	752f0100 	strvc	r0, [pc, #-256]!	; 3714 <__exidx_end+0x80c>
    3810:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 364c <__exidx_end+0x744>
    3814:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3818:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    381c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3820:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3824:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3828:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    382c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3830:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3834:	2f006564 	svccs	0x00006564
    3838:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    383c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3840:	2f6e6974 	svccs	0x006e6974
    3844:	6b736544 	blvs	1cdcd5c <__ccfg+0x1cbcdb4>
    3848:	2f706f74 	svccs	0x00706f74
    384c:	4f534c4f 	svcmi	0x00534c4f
    3850:	2f54454e 	svccs	0x0054454e
    3854:	4f434950 	svcmi	0x00434950
    3858:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    385c:	2f534f63 	svccs	0x00534f63
    3860:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3864:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3868:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    386c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3870:	6e692f45 	cdpvs	15, 6, cr2, cr9, cr5, {2}
    3874:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    3878:	2f656d6f 	svccs	0x00656d6f
    387c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3880:	442f6e69 	strtmi	r6, [pc], #-3689	; 3888 <__exidx_end+0x980>
    3884:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3888:	4f2f706f 	svcmi	0x002f706f
    388c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3890:	502f5445 	eorpl	r5, pc, r5, asr #8
    3894:	534f4349 	movtpl	r4, #62281	; 0xf349
    3898:	6369502f 	cmnvs	r9, #47	; 0x2f
    389c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    38a0:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    38a4:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    38a8:	2f656d6f 	svccs	0x00656d6f
    38ac:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    38b0:	442f6e69 	strtmi	r6, [pc], #-3689	; 38b8 <__exidx_end+0x9b0>
    38b4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    38b8:	4f2f706f 	svcmi	0x002f706f
    38bc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    38c0:	502f5445 	eorpl	r5, pc, r5, asr #8
    38c4:	534f4349 	movtpl	r4, #62281	; 0xf349
    38c8:	6369502f 	cmnvs	r9, #47	; 0x2f
    38cc:	2f00534f 	svccs	0x0000534f
    38d0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    38d4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    38d8:	2f6e6974 	svccs	0x006e6974
    38dc:	6b736544 	blvs	1cdcdf4 <__ccfg+0x1cbce4c>
    38e0:	2f706f74 	svccs	0x00706f74
    38e4:	4f534c4f 	svcmi	0x00534c4f
    38e8:	2f54454e 	svccs	0x0054454e
    38ec:	4f434950 	svcmi	0x00434950
    38f0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    38f4:	2f534f63 	svccs	0x00534f63
    38f8:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    38fc:	00006c65 	andeq	r6, r0, r5, ror #24
    3900:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3904:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3908:	00000100 	andeq	r0, r0, r0, lsl #2
    390c:	635f7768 	cmpvs	pc, #104, 14	; 0x1a00000
    3910:	5f676663 	svcpl	0x00676663
    3914:	706d6973 	rsbvc	r6, sp, r3, ror r9
    3918:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
    391c:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
    3920:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3924:	61000002 	tstvs	r0, r2
    3928:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    392c:	00030068 	andeq	r0, r3, r8, rrx
    3930:	63616d00 	cmnvs	r1, #0, 26
    3934:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3938:	70000003 	andvc	r0, r0, r3
    393c:	5f736e69 	svcpl	0x00736e69
    3940:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3944:	00030068 	andeq	r0, r3, r8, rrx
    3948:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    394c:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3950:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3954:	0300682e 	movweq	r6, #2094	; 0x82e
    3958:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    395c:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3960:	00040068 	andeq	r0, r4, r8, rrx
    3964:	72656b00 	rsbvc	r6, r5, #0, 22
    3968:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    396c:	00050068 	andeq	r0, r5, r8, rrx
    3970:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    3974:	00632e67 	rsbeq	r2, r3, r7, ror #28
    3978:	00000003 	andeq	r0, r0, r3
    397c:	00000299 	muleq	r0, r9, r2
    3980:	01c00003 	biceq	r0, r0, r3
    3984:	01020000 	mrseq	r0, (UNDEF: 2)
    3988:	000d0efb 	strdeq	r0, [sp], -fp
    398c:	01010101 	tsteq	r1, r1, lsl #2
    3990:	01000000 	mrseq	r0, (UNDEF: 0)
    3994:	2f010000 	svccs	0x00010000
    3998:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    399c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    39a0:	2f6e6974 	svccs	0x006e6974
    39a4:	6b736544 	blvs	1cdcebc <__ccfg+0x1cbcf14>
    39a8:	2f706f74 	svccs	0x00706f74
    39ac:	4f534c4f 	svcmi	0x00534c4f
    39b0:	2f54454e 	svccs	0x0054454e
    39b4:	4f434950 	svcmi	0x00434950
    39b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39bc:	2f534f63 	svccs	0x00534f63
    39c0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    39c4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    39c8:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    39cc:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
    39d0:	2f656d6f 	svccs	0x00656d6f
    39d4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    39d8:	442f6e69 	strtmi	r6, [pc], #-3689	; 39e0 <__exidx_end+0xad8>
    39dc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    39e0:	4f2f706f 	svcmi	0x002f706f
    39e4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    39e8:	502f5445 	eorpl	r5, pc, r5, asr #8
    39ec:	534f4349 	movtpl	r4, #62281	; 0xf349
    39f0:	6369502f 	cmnvs	r9, #47	; 0x2f
    39f4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    39f8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    39fc:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3a00:	2f656d6f 	svccs	0x00656d6f
    3a04:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3a08:	442f6e69 	strtmi	r6, [pc], #-3689	; 3a10 <__exidx_end+0xb08>
    3a0c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3a10:	4f2f706f 	svcmi	0x002f706f
    3a14:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3a18:	502f5445 	eorpl	r5, pc, r5, asr #8
    3a1c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3a20:	6369502f 	cmnvs	r9, #47	; 0x2f
    3a24:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3a28:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3a2c:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3a30:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3a34:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3a38:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3a3c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3a40:	2f006269 	svccs	0x00006269
    3a44:	2f727375 	svccs	0x00727375
    3a48:	2f62696c 	svccs	0x0062696c
    3a4c:	2f636367 	svccs	0x00636367
    3a50:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3a54:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3a58:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3a5c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3a60:	2f312e32 	svccs	0x00312e32
    3a64:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3a68:	00656475 	rsbeq	r6, r5, r5, ror r4
    3a6c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 39b8 <__exidx_end+0xab0>
    3a70:	616d2f65 	cmnvs	sp, r5, ror #30
    3a74:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3a78:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3a7c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3a80:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3a84:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3a88:	4349502f 	movtmi	r5, #36911	; 0x902f
    3a8c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3a90:	534f6369 	movtpl	r6, #62313	; 0xf369
    3a94:	6f682f00 	svcvs	0x00682f00
    3a98:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 38ec <__exidx_end+0x9e4>
    3a9c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3aa0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3aa4:	6f746b73 	svcvs	0x00746b73
    3aa8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3aac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ab0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3ab4:	2f534f43 	svccs	0x00534f43
    3ab8:	4f636950 	svcmi	0x00636950
    3abc:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3ac0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3ac4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3ac8:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
    3acc:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
    3ad0:	0100632e 	tsteq	r0, lr, lsr #6
    3ad4:	6d630000 	stclvs	0, cr0, [r3, #-0]
    3ad8:	5f736973 	svcpl	0x00736973
    3adc:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    3ae0:	00020068 	andeq	r0, r2, r8, rrx
    3ae4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3ae8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3aec:	73000003 	movwvc	r0, #3
    3af0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3af4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3af8:	61000004 	tstvs	r0, r4
    3afc:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3b00:	00020068 	andeq	r0, r2, r8, rrx
    3b04:	63616d00 	cmnvs	r1, #0, 26
    3b08:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3b0c:	70000002 	andvc	r0, r0, r2
    3b10:	5f736e69 	svcpl	0x00736e69
    3b14:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3b18:	00020068 	andeq	r0, r2, r8, rrx
    3b1c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3b20:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3b24:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3b28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3b2c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3b30:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3b34:	00050068 	andeq	r0, r5, r8, rrx
    3b38:	72656b00 	rsbvc	r6, r5, #0, 22
    3b3c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3b40:	00060068 	andeq	r0, r6, r8, rrx
    3b44:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    3b48:	00020500 	andeq	r0, r2, r0, lsl #10
    3b4c:	03000000 	movweq	r0, #0
    3b50:	1b05010e 	blne	143f90 <__ccfg+0x123fe8>
    3b54:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    3b58:	02010601 	andeq	r0, r1, #1048576	; 0x100000
    3b5c:	01010001 	tsteq	r1, r1
    3b60:	05003f05 	streq	r3, [r0, #-3845]	; 0xfffff0fb
    3b64:	00000002 	andeq	r0, r0, r2
    3b68:	01100300 	tsteq	r0, r0, lsl #6
    3b6c:	13140205 	tstne	r4, #1342177280	; 0x50000000
    3b70:	3f051413 	svccc	0x00051413
    3b74:	017a0306 	cmneq	sl, r6, lsl #6
    3b78:	26050520 	strcs	r0, [r5], -r0, lsr #10
    3b7c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    3b80:	01060605 	tsteq	r6, r5, lsl #12
    3b84:	4d060305 	stcmi	3, cr0, [r6, #-20]	; 0xffffffec
    3b88:	c1030204 	tstgt	r3, r4, lsl #4
    3b8c:	01040100 	mrseq	r0, (UNDEF: 20)
    3b90:	3d204003 	stccc	0, cr4, [r0, #-12]!
    3b94:	0302044b 	movweq	r0, #9291	; 0x244b
    3b98:	01040133 	tsteq	r4, r3, lsr r1
    3b9c:	05204e03 	streq	r4, [r0, #-3587]!	; 0xfffff1fd
    3ba0:	07053102 	streq	r3, [r5, -r2, lsl #2]
    3ba4:	03040106 	movweq	r0, #16646	; 0x4106
    3ba8:	8b030f05 	blhi	c77c4 <__ccfg+0xa781c>
    3bac:	01042e01 	tsteq	r4, r1, lsl #28
    3bb0:	f5030705 			; <UNDEFINED> instruction: 0xf5030705
    3bb4:	0205207e 	andeq	r2, r5, #126	; 0x7e
    3bb8:	0b052106 	bleq	14bfd8 <__ccfg+0x12c030>
    3bbc:	13030513 	movwne	r0, #13587	; 0x3513
    3bc0:	29050304 	stmdbcs	r5, {r2, r8, r9}
    3bc4:	01018303 	tsteq	r1, r3, lsl #6
    3bc8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    3bcc:	060b0501 	streq	r0, [fp], -r1, lsl #10
    3bd0:	017ef803 	cmneq	lr, r3, lsl #16	; <UNPREDICTABLE>
    3bd4:	0f050304 	svceq	0x00050304
    3bd8:	20018803 	andcs	r8, r1, r3, lsl #16
    3bdc:	0b050104 	bleq	143ff4 <__ccfg+0x12404c>
    3be0:	207ef803 	rsbscs	pc, lr, r3, lsl #16
    3be4:	33050304 	movwcc	r0, #21252	; 0x5304
    3be8:	2e018803 	cdpcs	8, 0, cr8, cr1, cr3, {0}
    3bec:	04204205 	strteq	r4, [r0], #-517	; 0xfffffdfb
    3bf0:	030b0501 	movweq	r0, #46337	; 0xb501
    3bf4:	052e7ef8 	streq	r7, [lr, #-3832]!	; 0xfffff108
    3bf8:	1f052e08 	svcne	0x00052e08
    3bfc:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    3c00:	051e0205 	ldreq	r0, [lr, #-517]	; 0xfffffdfb
    3c04:	3a052208 	bcc	14c42c <__ccfg+0x12c484>
    3c08:	0b051f06 	bleq	14b828 <__ccfg+0x12b880>
    3c0c:	06020501 	streq	r0, [r2], -r1, lsl #10
    3c10:	23010511 	movwcs	r0, #5393	; 0x1511
    3c14:	01000602 	tsteq	r0, r2, lsl #12
    3c18:	00033c01 	andeq	r3, r3, r1, lsl #24
    3c1c:	a9000300 	stmdbge	r0, {r8, r9}
    3c20:	02000001 	andeq	r0, r0, #1
    3c24:	0d0efb01 	vstreq	d15, [lr, #-4]
    3c28:	01010100 	mrseq	r0, (UNDEF: 17)
    3c2c:	00000001 	andeq	r0, r0, r1
    3c30:	01000001 	tsteq	r0, r1
    3c34:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b80 <__exidx_end+0xc78>
    3c38:	616d2f65 	cmnvs	sp, r5, ror #30
    3c3c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3c40:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3c44:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3c48:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3c4c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3c50:	4349502f 	movtmi	r5, #36911	; 0x902f
    3c54:	502f534f 	eorpl	r5, pc, pc, asr #6
    3c58:	534f6369 	movtpl	r6, #62313	; 0xf369
    3c5c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    3c60:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    3c64:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
    3c68:	2f656d6f 	svccs	0x00656d6f
    3c6c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c70:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c78 <__exidx_end+0xd70>
    3c74:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c78:	4f2f706f 	svcmi	0x002f706f
    3c7c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c80:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c84:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c88:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c8c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3c90:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3c94:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3c98:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3c9c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3ca0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3ca4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3ca8:	2f006269 	svccs	0x00006269
    3cac:	2f727375 	svccs	0x00727375
    3cb0:	2f62696c 	svccs	0x0062696c
    3cb4:	2f636367 	svccs	0x00636367
    3cb8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3cbc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3cc0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3cc4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3cc8:	2f312e32 	svccs	0x00312e32
    3ccc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3cd0:	00656475 	rsbeq	r6, r5, r5, ror r4
    3cd4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c20 <__exidx_end+0xd18>
    3cd8:	616d2f65 	cmnvs	sp, r5, ror #30
    3cdc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3ce0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3ce4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ce8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3cec:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3cf0:	4349502f 	movtmi	r5, #36911	; 0x902f
    3cf4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3cf8:	534f6369 	movtpl	r6, #62313	; 0xf369
    3cfc:	3143432f 	cmpcc	r3, pc, lsr #6
    3d00:	00585833 	subseq	r5, r8, r3, lsr r8
    3d04:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3c50 <__exidx_end+0xd48>
    3d08:	616d2f65 	cmnvs	sp, r5, ror #30
    3d0c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3d10:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3d14:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3d18:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3d1c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3d20:	4349502f 	movtmi	r5, #36911	; 0x902f
    3d24:	502f534f 	eorpl	r5, pc, pc, asr #6
    3d28:	534f6369 	movtpl	r6, #62313	; 0xf369
    3d2c:	6f682f00 	svcvs	0x00682f00
    3d30:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3b84 <__exidx_end+0xc7c>
    3d34:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3d38:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3d3c:	6f746b73 	svcvs	0x00746b73
    3d40:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3d44:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3d48:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3d4c:	2f534f43 	svccs	0x00534f43
    3d50:	4f636950 	svcmi	0x00636950
    3d54:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3d58:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3d5c:	75620000 	strbvc	r0, [r2, #-0]!
    3d60:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3d64:	00632e73 	rsbeq	r2, r3, r3, ror lr
    3d68:	67000001 	strvs	r0, [r0, -r1]
    3d6c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3d70:	00020068 	andeq	r0, r2, r8, rrx
    3d74:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3d78:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3d7c:	00030068 	andeq	r0, r3, r8, rrx
    3d80:	63726100 	cmnvs	r2, #0, 2
    3d84:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3d88:	6d000004 	stcvs	0, cr0, [r0, #-16]
    3d8c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3d90:	00040068 	andeq	r0, r4, r8, rrx
    3d94:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3d98:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3d9c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3da0:	62000004 	andvs	r0, r0, #4
    3da4:	6f747475 	svcvs	0x00747475
    3da8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3dac:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3db0:	00000400 	andeq	r0, r0, r0, lsl #8
    3db4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3db8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3dbc:	6b000005 	blvs	3dd8 <__exidx_end+0xed0>
    3dc0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3dc4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3dc8:	00000006 	andeq	r0, r0, r6
    3dcc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3dd0:	00000002 	andeq	r0, r0, r2
    3dd4:	011b0300 	tsteq	fp, r0, lsl #6
    3dd8:	052e0601 	streq	r0, [lr, #-1537]!	; 0xfffff9ff
    3ddc:	056a0602 	strbeq	r0, [sl, #-1538]!	; 0xfffff9fe
    3de0:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3de4:	03052005 	movweq	r2, #20485	; 0x5005
    3de8:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    3dec:	060f0540 	streq	r0, [pc], -r0, asr #10
    3df0:	03020401 	movweq	r0, #9217	; 0x2401
    3df4:	042e0187 	strteq	r0, [lr], #-391	; 0xfffffe79
    3df8:	03070501 	movweq	r0, #29953	; 0x7501
    3dfc:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    3e00:	14051c0f 	strne	r1, [r5], #-3087	; 0xfffff3f1
    3e04:	1c052006 	stcne	0, cr2, [r5], {6}
    3e08:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e0c:	11030620 	tstne	r3, r0, lsr #12
    3e10:	053d4b2e 	ldreq	r4, [sp, #-2862]!	; 0xfffff4d2
    3e14:	2e710303 	cdpcs	3, 7, cr0, cr1, cr3, {0}
    3e18:	29050204 	stmdbcs	r5, {r2, r9}
    3e1c:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    3e20:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    3e24:	06070501 	streq	r0, [r7], -r1, lsl #10
    3e28:	017efd03 	cmneq	lr, r3, lsl #26	; <UNPREDICTABLE>
    3e2c:	0f050204 	svceq	0x00050204
    3e30:	2e018303 	cdpcs	3, 0, cr8, cr1, cr3, {0}
    3e34:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3e38:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    3e3c:	33050204 	movwcc	r0, #20996	; 0x5204
    3e40:	20018303 	andcs	r8, r1, r3, lsl #6
    3e44:	06050104 	streq	r0, [r5], -r4, lsl #2
    3e48:	207efd03 	rsbscs	pc, lr, r3, lsl #26
    3e4c:	30060405 	andcc	r0, r6, r5, lsl #8
    3e50:	01060505 	tsteq	r6, r5, lsl #10
    3e54:	40060405 	andmi	r0, r6, r5, lsl #8
    3e58:	03060305 	movweq	r0, #25349	; 0x6305
    3e5c:	2f062e12 	svccs	0x00062e12
    3e60:	64030605 	strvs	r0, [r3], #-1541	; 0xfffff9fb
    3e64:	060d0520 	streq	r0, [sp], -r0, lsr #10
    3e68:	06020501 	streq	r0, [r2], -r1, lsl #10
    3e6c:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    3e70:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3e74:	06290502 	strteq	r0, [r9], -r2, lsl #10
    3e78:	5800eb03 	stmdapl	r0, {r0, r1, r8, r9, fp, sp, lr, pc}
    3e7c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3e80:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3e84:	03070501 	movweq	r0, #29953	; 0x7501
    3e88:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
    3e8c:	030f0502 	movweq	r0, #62722	; 0xf502
    3e90:	052000f0 	streq	r0, [r0, #-240]!	; 0xffffff10
    3e94:	01042033 	tsteq	r4, r3, lsr r0
    3e98:	90030505 	andls	r0, r3, r5, lsl #10
    3e9c:	0205207f 	andeq	r2, r5, #127	; 0x7f
    3ea0:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    3ea4:	03050106 	movweq	r0, #20742	; 0x5106
    3ea8:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    3eac:	06070551 			; <UNDEFINED> instruction: 0x06070551
    3eb0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3eb4:	df030629 	svcle	0x00030629
    3eb8:	05053c00 	streq	r3, [r5, #-3072]	; 0xfffff400
    3ebc:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    3ec0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3ec4:	7f9c0307 	svcvc	0x009c0307
    3ec8:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3ecc:	00e4030f 	rsceq	r0, r4, pc, lsl #6
    3ed0:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3ed4:	7f9c0307 	svcvc	0x009c0307
    3ed8:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3edc:	00e40333 	rsceq	r0, r4, r3, lsr r3
    3ee0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3ee4:	7f9c0305 	svcvc	0x009c0305
    3ee8:	06020520 	streq	r0, [r2], -r0, lsr #10
    3eec:	060e0531 			; <UNDEFINED> instruction: 0x060e0531
    3ef0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    3ef4:	31060205 	tstcc	r6, r5, lsl #4
    3ef8:	01060305 	tsteq	r6, r5, lsl #6
    3efc:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    3f00:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    3f04:	052c0205 	streq	r0, [ip, #-517]!	; 0xfffffdfb
    3f08:	024c0601 	subeq	r0, ip, #1048576	; 0x100000
    3f0c:	0101000c 	tsteq	r1, ip
    3f10:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    3f14:	00000002 	andeq	r0, r0, r2
    3f18:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    3f1c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3f20:	01060f05 	tsteq	r6, r5, lsl #30
    3f24:	051c2905 	ldreq	r2, [ip, #-2309]	; 0xfffff6fb
    3f28:	0505240f 	streq	r2, [r5, #-1039]	; 0xfffffbf1
    3f2c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3f30:	06010521 	streq	r0, [r1], -r1, lsr #10
    3f34:	0303051a 	movweq	r0, #13594	; 0x351a
    3f38:	02052e78 	andeq	r2, r5, #120, 28	; 0x780
    3f3c:	07054006 	streq	r4, [r5, -r6]
    3f40:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3f44:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    3f48:	01052f2f 	tsteq	r5, pc, lsr #30
    3f4c:	03052206 	movweq	r2, #20998	; 0x5206
    3f50:	3e01052c 	cfsh32cc	mvfx0, mvfx1, #28
    3f54:	01000602 	tsteq	r0, r2, lsl #12
    3f58:	00093101 	andeq	r3, r9, r1, lsl #2
    3f5c:	cc000300 	stcgt	3, cr0, [r0], {-0}
    3f60:	02000001 	andeq	r0, r0, #1
    3f64:	0d0efb01 	vstreq	d15, [lr, #-4]
    3f68:	01010100 	mrseq	r0, (UNDEF: 17)
    3f6c:	00000001 	andeq	r0, r0, r1
    3f70:	01000001 	tsteq	r0, r1
    3f74:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3ec0 <__exidx_end+0xfb8>
    3f78:	616d2f65 	cmnvs	sp, r5, ror #30
    3f7c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f80:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f84:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f88:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f8c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f90:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f94:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f98:	534f6369 	movtpl	r6, #62313	; 0xf369
    3f9c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    3fa0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    3fa4:	61726f74 	cmnvs	r2, r4, ror pc
    3fa8:	2f006567 	svccs	0x00006567
    3fac:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fb0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fb4:	2f6e6974 	svccs	0x006e6974
    3fb8:	6b736544 	blvs	1cdd4d0 <__ccfg+0x1cbd528>
    3fbc:	2f706f74 	svccs	0x00706f74
    3fc0:	4f534c4f 	svcmi	0x00534c4f
    3fc4:	2f54454e 	svccs	0x0054454e
    3fc8:	4f434950 	svcmi	0x00434950
    3fcc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fd0:	2f534f63 	svccs	0x00534f63
    3fd4:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fd8:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
    3fdc:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3fe0:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
    3fe4:	72642f45 	rsbvc	r2, r4, #276	; 0x114
    3fe8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    3fec:	0062696c 	rsbeq	r6, r2, ip, ror #18
    3ff0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    3ff4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3ff8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3ffc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4000:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4004:	61652d65 	cmnvs	r5, r5, ror #26
    4008:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    400c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4010:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4014:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4018:	6f682f00 	svcvs	0x00682f00
    401c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3e70 <__exidx_end+0xf68>
    4020:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4024:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4028:	6f746b73 	svcvs	0x00746b73
    402c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4030:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4034:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4038:	2f534f43 	svccs	0x00534f43
    403c:	4f636950 	svcmi	0x00636950
    4040:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4044:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4048:	6f682f00 	svcvs	0x00682f00
    404c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3ea0 <__exidx_end+0xf98>
    4050:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4054:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4058:	6f746b73 	svcvs	0x00746b73
    405c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4060:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4064:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4068:	2f534f43 	svccs	0x00534f43
    406c:	4f636950 	svcmi	0x00636950
    4070:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    4074:	2f656d6f 	svccs	0x00656d6f
    4078:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    407c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4084 <__exidx_end+0x117c>
    4080:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4084:	4f2f706f 	svcmi	0x002f706f
    4088:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    408c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4090:	534f4349 	movtpl	r4, #62281	; 0xf349
    4094:	6369502f 	cmnvs	r9, #47	; 0x2f
    4098:	6b2f534f 	blvs	bd8ddc <__ccfg+0xbb8e34>
    409c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    40a0:	7300006c 	movwvc	r0, #108	; 0x6c
    40a4:	61726f74 	cmnvs	r2, r4, ror pc
    40a8:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 3f14 <__exidx_end+0x100c>
    40ac:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
    40b0:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
    40b4:	0100632e 	tsteq	r0, lr, lsr #6
    40b8:	70670000 	rsbvc	r0, r7, r0
    40bc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    40c0:	00000200 	andeq	r0, r0, r0, lsl #4
    40c4:	726f7473 	rsbvc	r7, pc, #1929379840	; 0x73000000
    40c8:	5f656761 	svcpl	0x00656761
    40cc:	72706565 	rsbsvc	r6, r0, #423624704	; 0x19400000
    40d0:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    40d4:	00000100 	andeq	r0, r0, r0, lsl #2
    40d8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    40dc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    40e0:	00000300 	andeq	r0, r0, r0, lsl #6
    40e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    40e8:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    40ec:	616d0000 	cmnvs	sp, r0
    40f0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    40f4:	00000400 	andeq	r0, r0, r0, lsl #8
    40f8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    40fc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4100:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4104:	75620000 	strbvc	r0, [r2, #-0]!
    4108:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    410c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4110:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4114:	73000004 	movwvc	r0, #4
    4118:	6f697379 	svcvs	0x00697379
    411c:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    4120:	656b0000 	strbvs	r0, [fp, #-0]!
    4124:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    4128:	0600682e 	streq	r6, [r0], -lr, lsr #16
    412c:	05000000 	streq	r0, [r0, #-0]
    4130:	02050019 	andeq	r0, r5, #25
    4134:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
    4138:	05011803 	streq	r1, [r1, #-2051]	; 0xfffff7fd
    413c:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    4140:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    4144:	050d0619 	streq	r0, [sp, #-1561]	; 0xfffff9e7
    4148:	02042509 	andeq	r2, r4, #37748736	; 0x2400000
    414c:	8a032d05 	bhi	cf568 <__ccfg+0xaf5c0>
    4150:	01042002 	tsteq	r4, r2
    4154:	f1031905 			; <UNDEFINED> instruction: 0xf1031905
    4158:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    415c:	c5032d05 	strgt	r2, [r3, #-3333]	; 0xfffff2fb
    4160:	0f052002 	svceq	0x00052002
    4164:	207ed003 	rsbscs	sp, lr, r3
    4168:	fa032d05 	blx	cf584 <__ccfg+0xaf5dc>
    416c:	01042000 	mrseq	r2, (UNDEF: 4)
    4170:	03060305 	movweq	r0, #25349	; 0x6305
    4174:	04207df7 	strteq	r7, [r0], #-3575	; 0xfffff209
    4178:	060f0502 	streq	r0, [pc], -r2, lsl #10
    417c:	01018f03 	tsteq	r1, r3, lsl #30
    4180:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    4184:	207ef103 	rsbscs	pc, lr, r3, lsl #2
    4188:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    418c:	03051f05 	movweq	r1, #24325	; 0x5f05
    4190:	02042106 	andeq	r2, r4, #-2147483647	; 0x80000001
    4194:	89032905 	stmdbhi	r3, {r0, r2, r8, fp, sp}
    4198:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    419c:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    41a0:	7ef30304 	cdpvc	3, 15, cr0, cr3, cr4, {0}
    41a4:	06060501 	streq	r0, [r6], -r1, lsl #10
    41a8:	06030501 	streq	r0, [r3], -r1, lsl #10
    41ac:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    41b0:	02810329 	addeq	r0, r1, #-1543503872	; 0xa4000000
    41b4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    41b8:	02050104 	andeq	r0, r5, #4, 2
    41bc:	7df60306 	ldclvc	3, cr0, [r6, #24]!
    41c0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    41c4:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    41c8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41cc:	fb030603 	blx	c59e2 <__ccfg+0xa5a3a>
    41d0:	0204207d 	andeq	r2, r4, #125	; 0x7d
    41d4:	b6032905 	strlt	r2, [r3], -r5, lsl #18
    41d8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41dc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41e0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41e4:	c003061c 	andgt	r0, r3, ip, lsl r6
    41e8:	1505207d 	strne	r2, [r5, #-125]	; 0xffffff83
    41ec:	06020501 	streq	r0, [r2], -r1, lsl #10
    41f0:	03010501 	movweq	r0, #5377	; 0x1501
    41f4:	07022009 	streq	r2, [r2, -r9]
    41f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    41fc:	0205001f 	andeq	r0, r5, #31
    4200:	000016ec 	andeq	r1, r0, ip, ror #13
    4204:	05012803 	streq	r2, [r1, #-2051]	; 0xfffff7fd
    4208:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    420c:	1f05010e 	svcne	0x0005010e
    4210:	04200e06 	strteq	r0, [r0], #-3590	; 0xfffff1fa
    4214:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4218:	043c01ff 	ldrteq	r0, [ip], #-511	; 0xfffffe01
    421c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4220:	4a7e8603 	bmi	1fa5a34 <__ccfg+0x1f85a8c>
    4224:	01060605 	tsteq	r6, r5, lsl #12
    4228:	2f060405 	svccs	0x00060405
    422c:	29050204 	stmdbcs	r5, {r2, r9}
    4230:	0101f403 	tsteq	r1, r3, lsl #8	; <UNPREDICTABLE>
    4234:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4238:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    423c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4240:	2e7e8903 	vaddcs.f16	s17, s28, s6	; <UNPREDICTABLE>
    4244:	29050204 	stmdbcs	r5, {r2, r9}
    4248:	0102a803 	tsteq	r2, r3, lsl #16
    424c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4250:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    4254:	06030501 	streq	r0, [r3], -r1, lsl #10
    4258:	207dd403 	rsbscs	sp, sp, r3, lsl #8
    425c:	29050204 	stmdbcs	r5, {r2, r9}
    4260:	0101f103 	tsteq	r1, r3, lsl #2	; <UNPREDICTABLE>
    4264:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4268:	8c030601 	stchi	6, cr0, [r3], {1}
    426c:	0205017e 	andeq	r0, r5, #-2147483617	; 0x8000001f
    4270:	04207903 	strteq	r7, [r0], #-2307	; 0xfffff6fd
    4274:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4278:	042001fb 	strteq	r0, [r0], #-507	; 0xfffffe05
    427c:	06030501 	streq	r0, [r3], -r1, lsl #10
    4280:	207e8b03 	rsbscs	r8, lr, r3, lsl #22
    4284:	29050204 	stmdbcs	r5, {r2, r9}
    4288:	0102a603 	tsteq	r2, r3, lsl #12
    428c:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4290:	d6030601 	strle	r0, [r3], -r1, lsl #12
    4294:	0204017d 	andeq	r0, r4, #1073741855	; 0x4000001f
    4298:	aa032d05 	bge	cf6b4 <__ccfg+0xaf70c>
    429c:	01042002 	tsteq	r4, r2
    42a0:	03060305 	movweq	r0, #25349	; 0x6305
    42a4:	05207dd6 	streq	r7, [r0, #-3542]!	; 0xfffff22a
    42a8:	01790315 	cmneq	r9, r5, lsl r3
    42ac:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    42b0:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    42b4:	20090301 	andcs	r0, r9, r1, lsl #6
    42b8:	01000502 	tsteq	r0, r2, lsl #10
    42bc:	001e0501 	andseq	r0, lr, r1, lsl #10
    42c0:	171c0205 	ldrne	r0, [ip, -r5, lsl #4]
    42c4:	39030000 	stmdbcc	r3, {}	; <UNPREDICTABLE>
    42c8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    42cc:	29050204 	stmdbcs	r5, {r2, r9}
    42d0:	0103cf03 	tsteq	r3, r3, lsl #30
    42d4:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    42d8:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    42dc:	01040106 	tsteq	r4, r6, lsl #2
    42e0:	a8031e05 	stmdage	r3, {r0, r2, r9, sl, fp, ip}
    42e4:	0204207c 	andeq	r2, r4, #124	; 0x7c
    42e8:	d8033805 	stmdale	r3, {r0, r2, fp, ip, sp}
    42ec:	01042003 	tsteq	r4, r3
    42f0:	03060205 	movweq	r0, #25093	; 0x6205
    42f4:	2f2e7cab 	svccs	0x002e7cab
    42f8:	29050204 	stmdbcs	r5, {r2, r9}
    42fc:	0103cd03 	tsteq	r3, r3, lsl #26
    4300:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4304:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4308:	01040106 	tsteq	r4, r6, lsl #2
    430c:	ad030105 	stfges	f0, [r3, #-20]	; 0xffffffec
    4310:	04022e7c 	streq	r2, [r2], #-3708	; 0xfffff184
    4314:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4318:	02050027 	andeq	r0, r5, #39	; 0x27
    431c:	00001734 	andeq	r1, r0, r4, lsr r7
    4320:	0100d703 	tsteq	r0, r3, lsl #14
    4324:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4328:	2e0e0627 	cfmadd32cs	mvax1, mvfx0, mvfx14, mvfx7
    432c:	38050204 	stmdacc	r5, {r2, r9}
    4330:	2e03ba03 	vmlacs.f32	s22, s6, s6
    4334:	09050104 	stmdbeq	r5, {r2, r8}
    4338:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    433c:	38050204 	stmdacc	r5, {r2, r9}
    4340:	2e03b603 	cfmadd32cs	mvax0, mvfx11, mvfx3, mvfx3
    4344:	08050104 	stmdaeq	r5, {r2, r8}
    4348:	7cca0306 	stclvc	3, cr0, [sl], {6}
    434c:	03020520 	movweq	r0, #9504	; 0x2520
    4350:	04143c73 	ldreq	r3, [r4], #-3187	; 0xfffff38d
    4354:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4358:	050103ba 	streq	r0, [r1, #-954]	; 0xfffffc46
    435c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4360:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    4364:	c0030602 	andgt	r0, r3, r2, lsl #12
    4368:	0204017c 	andeq	r0, r4, #124, 2
    436c:	c0033805 	andgt	r3, r3, r5, lsl #16
    4370:	01042003 	tsteq	r4, r3
    4374:	03060205 	movweq	r0, #25093	; 0x6205
    4378:	2f207cc0 	svccs	0x00207cc0
    437c:	01060605 	tsteq	r6, r5, lsl #12
    4380:	2f060205 	svccs	0x00060205
    4384:	29050204 	stmdbcs	r5, {r2, r9}
    4388:	0103b703 	tsteq	r3, r3, lsl #14
    438c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4390:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4394:	01040106 	tsteq	r4, r6, lsl #2
    4398:	03060205 	movweq	r0, #25093	; 0x6205
    439c:	052e7cc3 	streq	r7, [lr, #-3267]!	; 0xfffff33d
    43a0:	0519060f 	ldreq	r0, [r9, #-1551]	; 0xfffff9f1
    43a4:	03053601 	movweq	r3, #22017	; 0x5601
    43a8:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    43ac:	01060605 	tsteq	r6, r5, lsl #12
    43b0:	4b060405 	blmi	1853cc <__ccfg+0x165424>
    43b4:	07024b4c 	streq	r4, [r2, -ip, asr #22]
    43b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43bc:	02050016 	andeq	r0, r5, #22
    43c0:	00001788 	andeq	r1, r0, r8, lsl #15
    43c4:	01018103 	tsteq	r1, r3, lsl #2
    43c8:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    43cc:	050e0616 	streq	r0, [lr, #-1558]	; 0xfffff9ea
    43d0:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    43d4:	06030520 	streq	r0, [r3], -r0, lsr #10
    43d8:	5e020530 	cfmv64hrpl	mvdx2, r0
    43dc:	01060805 	tsteq	r6, r5, lsl #16
    43e0:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
    43e4:	051b0603 	ldreq	r0, [fp, #-1539]	; 0xfffff9fd
    43e8:	01660302 	cmneq	r6, r2, lsl #6
    43ec:	04140101 	ldreq	r0, [r4], #-257	; 0xfffffeff
    43f0:	03290502 			; <UNDEFINED> instruction: 0x03290502
    43f4:	05010399 	streq	r0, [r1, #-921]	; 0xfffffc67
    43f8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    43fc:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4400:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4404:	7ce10302 	stclvc	3, cr0, [r1], #8
    4408:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    440c:	039f0338 	orrseq	r0, pc, #56, 6	; 0xe0000000
    4410:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4414:	e1030602 	tst	r3, r2, lsl #12
    4418:	042f207c 	strteq	r2, [pc], #-124	; 4420 <__exidx_end+0x1518>
    441c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4420:	05010397 	streq	r0, [r1, #-919]	; 0xfffffc69
    4424:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4428:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    442c:	e3030602 	movw	r0, #13826	; 0x3602
    4430:	0204017c 	andeq	r0, r4, #124, 2
    4434:	9d033805 	stcls	8, cr3, [r3, #-20]	; 0xffffffec
    4438:	01042003 	tsteq	r4, r3
    443c:	03060205 	movweq	r0, #25093	; 0x6205
    4440:	05207ce3 	streq	r7, [r0, #-3299]!	; 0xfffff31d
    4444:	2e160303 	cdpcs	3, 1, cr0, cr6, cr3, {0}
    4448:	01060905 	tsteq	r6, r5, lsl #18
    444c:	01000902 	tsteq	r0, r2, lsl #18
    4450:	00170501 	andseq	r0, r7, r1, lsl #10
    4454:	17c80205 	strbne	r0, [r8, r5, lsl #4]
    4458:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    445c:	02050100 	andeq	r0, r5, #0, 2
    4460:	06170514 			; <UNDEFINED> instruction: 0x06170514
    4464:	220c0510 	andcs	r0, ip, #16, 10	; 0x4000000
    4468:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    446c:	593d0603 	ldmdbpl	sp!, {r0, r1, r9, sl}
    4470:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    4474:	03030501 	movweq	r0, #13569	; 0x3501
    4478:	09053c13 	stmdbeq	r5, {r0, r1, r4, sl, fp, ip, sp}
    447c:	03050106 	movweq	r0, #20742	; 0x5106
    4480:	01012f06 	tsteq	r1, r6, lsl #30
    4484:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    4488:	01000302 	tsteq	r0, r2, lsl #6
    448c:	00110501 	andseq	r0, r1, r1, lsl #10
    4490:	17ec0205 	strbne	r0, [ip, r5, lsl #4]!
    4494:	92030000 	andls	r0, r3, #0
    4498:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    449c:	06110516 			; <UNDEFINED> instruction: 0x06110516
    44a0:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    44a4:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    44a8:	01050106 	tsteq	r5, r6, lsl #2
    44ac:	052e0e03 	streq	r0, [lr, #-3587]!	; 0xfffff1fd
    44b0:	20720308 	rsbscs	r0, r2, r8, lsl #6
    44b4:	03060205 	movweq	r0, #25093	; 0x6205
    44b8:	0105200d 	tsteq	r5, sp
    44bc:	03021306 	movweq	r1, #8966	; 0x2306
    44c0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    44c4:	02050012 	andeq	r0, r5, #18
    44c8:	00001800 	andeq	r1, r0, r0, lsl #16
    44cc:	0101a703 	tsteq	r1, r3, lsl #14
    44d0:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    44d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    44d8:	03052005 	movweq	r2, #20485	; 0x5005
    44dc:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    44e0:	03050106 	movweq	r0, #20742	; 0x5106
    44e4:	01052f06 	tsteq	r5, r6, lsl #30
    44e8:	03023006 	movweq	r3, #8198	; 0x2006
    44ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    44f0:	0205002b 	andeq	r0, r5, #43	; 0x2b
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	0101af03 	tsteq	r1, r3, lsl #30
    44fc:	02052006 	andeq	r2, r5, #6
    4500:	05053006 	streq	r3, [r5, #-6]
    4504:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4508:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    450c:	18050106 	stmdane	r5, {r1, r2, r8}
    4510:	2012053c 	andscs	r0, r2, ip, lsr r5
    4514:	3f060205 	svccc	0x00060205
    4518:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    451c:	02d10329 	sbcseq	r0, r1, #-1543503872	; 0xa4000000
    4520:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4524:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4528:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    452c:	03020501 	movweq	r0, #9473	; 0x2501
    4530:	042e7daa 	strteq	r7, [lr], #-3498	; 0xfffff256
    4534:	03380502 	teqeq	r8, #8388608	; 0x800000
    4538:	042002d6 	strteq	r0, [r0], #-726	; 0xfffffd2a
    453c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4540:	207daa03 	rsbscs	sl, sp, r3, lsl #20
    4544:	3e4b4b2f 	vmlacc.f64	d20, d11, d31
    4548:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    454c:	02043102 	andeq	r3, r4, #-2147483648	; 0x80000000
    4550:	c7032905 	strgt	r2, [r3, -r5, lsl #18]
    4554:	3d050102 	stfccs	f0, [r5, #-8]
    4558:	17050514 	smladne	r5, r4, r5, r0
    455c:	01063805 	tsteq	r6, r5, lsl #16
    4560:	02050104 	andeq	r0, r5, #4, 2
    4564:	7db40306 	ldcvc	3, cr0, [r4, #24]!
    4568:	0105302e 	tsteq	r5, lr, lsr #32
    456c:	03051306 	movweq	r1, #21254	; 0x5306
    4570:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    4574:	01060a05 	tsteq	r6, r5, lsl #20
    4578:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    457c:	3c74030a 	ldclcc	3, cr0, [r4], #-40	; 0xffffffd8
    4580:	01000502 	tsteq	r0, r2, lsl #10
    4584:	00310501 	eorseq	r0, r1, r1, lsl #10
    4588:	00000205 	andeq	r0, r0, r5, lsl #4
    458c:	ca030000 	bgt	c4594 <__ccfg+0xa45ec>
    4590:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4594:	06310514 			; <UNDEFINED> instruction: 0x06310514
    4598:	220c0510 	andcs	r0, ip, #16, 10	; 0x4000000
    459c:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    45a0:	31052205 	tstcc	r5, r5, lsl #4
    45a4:	3005051e 	andcc	r0, r5, lr, lsl r5
    45a8:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    45ac:	01060605 	tsteq	r6, r5, lsl #12
    45b0:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
    45b4:	03052006 	movweq	r2, #20486	; 0x5006
    45b8:	06053006 	streq	r3, [r5], -r6
    45bc:	17050106 	strne	r0, [r5, -r6, lsl #2]
    45c0:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    45c4:	04053032 	streq	r3, [r5], #-50	; 0xffffffce
    45c8:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    45cc:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    45d0:	10052009 	andne	r2, r5, r9
    45d4:	20090520 	andcs	r0, r9, r0, lsr #10
    45d8:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    45dc:	01061105 	tsteq	r6, r5, lsl #2
    45e0:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    45e4:	0905201f 	stmdbeq	r5, {r0, r1, r2, r3, r4, sp}
    45e8:	0604052e 	streq	r0, [r4], -lr, lsr #10
    45ec:	060d0524 	streq	r0, [sp], -r4, lsr #10
    45f0:	4a070501 	bmi	1c59fc <__ccfg+0x1a5a54>
    45f4:	31060505 	tstcc	r6, r5, lsl #10
    45f8:	01060b05 	tsteq	r6, r5, lsl #22
    45fc:	2f060505 	svccs	0x00060505
    4600:	060c052f 	streq	r0, [ip], -pc, lsr #10
    4604:	03010501 	movweq	r0, #5377	; 0x1501
    4608:	04052031 	streq	r2, [r5], #-49	; 0xffffffcf
    460c:	20520306 	subscs	r0, r2, r6, lsl #6
    4610:	01060e05 	tsteq	r6, r5, lsl #28
    4614:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    4618:	1d052025 	stcne	0, cr2, [r5, #-148]	; 0xffffff6c
    461c:	06050520 	streq	r0, [r5], -r0, lsr #10
    4620:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    4624:	28040501 	stmdacs	r4, {r0, r8, sl}
    4628:	051e0b05 	ldreq	r0, [lr, #-2821]	; 0xfffff4fb
    462c:	2f220604 	svccs	0x00220604
    4630:	38050204 	stmdacc	r5, {r2, r9}
    4634:	02960306 	addseq	r0, r6, #402653184	; 0x18000000
    4638:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    463c:	7dea0304 	stclvc	3, cr0, [sl, #16]!
    4640:	0602052e 	streq	r0, [r2], -lr, lsr #10
    4644:	207ec703 	rsbscs	ip, lr, r3, lsl #14
    4648:	29050204 	stmdbcs	r5, {r2, r9}
    464c:	0103c803 	tsteq	r3, r3, lsl #16
    4650:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4654:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4658:	01040106 	tsteq	r4, r6, lsl #2
    465c:	03060205 	movweq	r0, #25093	; 0x6205
    4660:	2f207cb2 	svccs	0x00207cb2
    4664:	043d4b4b 	ldrteq	r4, [sp], #-2891	; 0xfffff4b5
    4668:	03290502 			; <UNDEFINED> instruction: 0x03290502
    466c:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
    4670:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4674:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4678:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    467c:	ee030602 	cfmadd32	mvax0, mvfx0, mvfx3, mvfx2
    4680:	0b052e7d 	bleq	15007c <__ccfg+0x1300d4>
    4684:	82550306 	subshi	r0, r5, #402653184	; 0x18000000
    4688:	03060905 	movweq	r0, #26885	; 0x6905
    468c:	13052e1f 	movwne	r2, #24095	; 0x5e1f
    4690:	0c050106 	stfeqs	f0, [r5], {6}
    4694:	202a052e 	eorcs	r0, sl, lr, lsr #10
    4698:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    469c:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    46a0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    46a4:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    46a8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    46ac:	04053502 	streq	r3, [r5], #-1282	; 0xfffffafe
    46b0:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    46b4:	06090559 			; <UNDEFINED> instruction: 0x06090559
    46b8:	4a0e0301 	bmi	3852c4 <__ccfg+0x36531c>
    46bc:	21060405 	tstcs	r6, r5, lsl #8
    46c0:	59206b03 	stmdbpl	r0!, {r0, r1, r8, r9, fp, sp, lr}
    46c4:	4b200b03 	blmi	8072d8 <__ccfg+0x7e7330>
    46c8:	01060905 	tsteq	r6, r5, lsl #18
    46cc:	5e060405 	cdppl	4, 0, cr0, cr6, cr5, {0}
    46d0:	0609054b 	streq	r0, [r9], -fp, asr #10
    46d4:	06030501 	streq	r0, [r3], -r1, lsl #10
    46d8:	587fba03 	ldmdapl	pc!, {r0, r1, r9, fp, ip, sp, pc}^	; <UNPREDICTABLE>
    46dc:	01060605 	tsteq	r6, r5, lsl #12
    46e0:	083b0905 	ldmdaeq	fp!, {r0, r2, r8, fp}
    46e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    46e8:	0205003b 	andeq	r0, r5, #59	; 0x3b
    46ec:	00000000 	andeq	r0, r0, r0
    46f0:	0102a003 	tsteq	r2, r3
    46f4:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    46f8:	0e063b05 	vmlaeq.f64	d3, d6, d5
    46fc:	05320c05 	ldreq	r0, [r2, #-3077]!	; 0xfffff3fb
    4700:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4704:	1c3b0524 	cfldr32ne	mvfx0, [fp], #-144	; 0xffffff70
    4708:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
    470c:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    4710:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4714:	14053c1a 	strne	r3, [r5], #-3098	; 0xfffff3e6
    4718:	0603052e 	streq	r0, [r3], -lr, lsr #10
    471c:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    4720:	06030501 	streq	r0, [r3], -r1, lsl #10
    4724:	0608052f 	streq	r0, [r8], -pc, lsr #10
    4728:	06030501 	streq	r0, [r3], -r1, lsl #10
    472c:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    4730:	06030501 	streq	r0, [r3], -r1, lsl #10
    4734:	09052f30 	stmdbeq	r5, {r4, r5, r8, r9, sl, fp, sp}
    4738:	03050106 	movweq	r0, #20742	; 0x5106
    473c:	0c053006 	stceq	0, cr3, [r5], {6}
    4740:	06050106 	streq	r0, [r5], -r6, lsl #2
    4744:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    4748:	060a0522 	streq	r0, [sl], -r2, lsr #10
    474c:	06040501 	streq	r0, [r4], -r1, lsl #10
    4750:	01052f21 	tsteq	r5, r1, lsr #30
    4754:	01220306 			; <UNDEFINED> instruction: 0x01220306
    4758:	03060305 	movweq	r0, #25349	; 0x6305
    475c:	11053c62 	tstne	r5, r2, ror #24
    4760:	06050106 	streq	r0, [r5], -r6, lsl #2
    4764:	06030520 	streq	r0, [r3], -r0, lsr #10
    4768:	0624063e 			; <UNDEFINED> instruction: 0x0624063e
    476c:	0204304a 	andeq	r3, r4, #74	; 0x4a
    4770:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    4774:	3d050101 	stfccs	f0, [r5, #-4]
    4778:	17050514 	smladne	r5, r4, r5, r0
    477c:	01063805 	tsteq	r6, r5, lsl #16
    4780:	03050104 	movweq	r0, #20740	; 0x5104
    4784:	3c7eb303 	ldclcc	3, cr11, [lr], #-12
    4788:	38050204 	stmdacc	r5, {r2, r9}
    478c:	2001cd03 	andcs	ip, r1, r3, lsl #26
    4790:	03050104 	movweq	r0, #20740	; 0x5104
    4794:	7eb30306 	cdpvc	3, 11, cr0, cr3, cr6, {0}
    4798:	19052f2e 	stmdbne	r5, {r1, r2, r3, r5, r8, r9, sl, fp, sp}
    479c:	03050106 	movweq	r0, #20742	; 0x5106
    47a0:	4b4b062e 	blmi	12c6060 <__ccfg+0x12a60b8>
    47a4:	0608053e 			; <UNDEFINED> instruction: 0x0608053e
    47a8:	2b0c0531 	blcs	305c74 <__ccfg+0x2e5ccc>
    47ac:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    47b0:	09052308 	stmdbeq	r5, {r3, r8, r9, sp}
    47b4:	03051d06 	movweq	r1, #23814	; 0x5d06
    47b8:	05020426 	streq	r0, [r2, #-1062]	; 0xfffffbda
    47bc:	01bb0329 			; <UNDEFINED> instruction: 0x01bb0329
    47c0:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    47c4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    47c8:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    47cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    47d0:	3c7ec103 	ldfccp	f4, [lr], #-12
    47d4:	01060505 	tsteq	r6, r5, lsl #10
    47d8:	40060205 	andmi	r0, r6, r5, lsl #4
    47dc:	0304054b 	movweq	r0, #17739	; 0x454b
    47e0:	13052073 	movwne	r2, #20595	; 0x5073
    47e4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    47e8:	053d063c 	ldreq	r0, [sp, #-1596]!	; 0xfffff9c4
    47ec:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    47f0:	05590604 	ldrbeq	r0, [r9, #-1540]	; 0xfffff9fc
    47f4:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    47f8:	4a5d030b 	bmi	174542c <__ccfg+0x1725484>
    47fc:	01000d02 	tsteq	r0, r2, lsl #26
    4800:	00120501 	andseq	r0, r2, r1, lsl #10
    4804:	00000205 	andeq	r0, r0, r5, lsl #4
    4808:	da030000 	ble	c4810 <__ccfg+0xa4868>
    480c:	01050102 	tsteq	r5, r2, lsl #2
    4810:	00010215 	andeq	r0, r1, r5, lsl r2
    4814:	18050101 	stmdane	r5, {r0, r8}
    4818:	00020500 	andeq	r0, r2, r0, lsl #10
    481c:	03000000 	movweq	r0, #0
    4820:	050102df 	streq	r0, [r1, #-735]	; 0xfffffd21
    4824:	01051502 	tsteq	r5, r2, lsl #10
    4828:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    482c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4830:	00290503 	eoreq	r0, r9, r3, lsl #10
    4834:	00000205 	andeq	r0, r0, r5, lsl #4
    4838:	05190000 	ldreq	r0, [r9, #-0]
    483c:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    4840:	03050106 	movweq	r0, #20742	; 0x5106
    4844:	07052106 	streq	r2, [r5, -r6, lsl #2]
    4848:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    484c:	05053006 	streq	r3, [r5, #-6]
    4850:	03050106 	movweq	r0, #20742	; 0x5106
    4854:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    4858:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    485c:	01053e06 	tsteq	r5, r6, lsl #28
    4860:	03021306 	movweq	r1, #8966	; 0x2306
    4864:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4868:	00170503 	andseq	r0, r7, r3, lsl #10
    486c:	00000205 	andeq	r0, r0, r5, lsl #4
    4870:	12030000 	andne	r0, r3, #0
    4874:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4878:	10061705 	andne	r1, r6, r5, lsl #14
    487c:	06220205 	strteq	r0, [r2], -r5, lsl #4
    4880:	0105672f 	tsteq	r5, pc, lsr #14
    4884:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    4888:	0002022d 	andeq	r0, r2, sp, lsr #4
    488c:	01c10101 	biceq	r0, r1, r1, lsl #2
    4890:	00030000 	andeq	r0, r3, r0
    4894:	00000121 	andeq	r0, r0, r1, lsr #2
    4898:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    489c:	0101000d 	tsteq	r1, sp
    48a0:	00000101 	andeq	r0, r0, r1, lsl #2
    48a4:	00000100 	andeq	r0, r0, r0, lsl #2
    48a8:	6f682f01 	svcvs	0x00682f01
    48ac:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4700 <__exidx_end+0x17f8>
    48b0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    48b4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    48b8:	6f746b73 	svcvs	0x00746b73
    48bc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    48c0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    48c4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    48c8:	2f534f43 	svccs	0x00534f43
    48cc:	4f636950 	svcmi	0x00636950
    48d0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    48d4:	2f736269 	svccs	0x00736269
    48d8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    48dc:	2f006c61 	svccs	0x00006c61
    48e0:	2f727375 	svccs	0x00727375
    48e4:	2f62696c 	svccs	0x0062696c
    48e8:	2f636367 	svccs	0x00636367
    48ec:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    48f0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    48f4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    48f8:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    48fc:	2f312e32 	svccs	0x00312e32
    4900:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4904:	00656475 	rsbeq	r6, r5, r5, ror r4
    4908:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4854 <__exidx_end+0x194c>
    490c:	616d2f65 	cmnvs	sp, r5, ror #30
    4910:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4914:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4918:	706f746b 	rsbvc	r7, pc, fp, ror #8
    491c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4920:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4924:	4349502f 	movtmi	r5, #36911	; 0x902f
    4928:	502f534f 	eorpl	r5, pc, pc, asr #6
    492c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4930:	3143432f 	cmpcc	r3, pc, lsr #6
    4934:	00585833 	subseq	r5, r8, r3, lsr r8
    4938:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4884 <__exidx_end+0x197c>
    493c:	616d2f65 	cmnvs	sp, r5, ror #30
    4940:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4944:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4948:	706f746b 	rsbvc	r7, pc, fp, ror #8
    494c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4950:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4954:	4349502f 	movtmi	r5, #36911	; 0x902f
    4958:	502f534f 	eorpl	r5, pc, pc, asr #6
    495c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4960:	65730000 	ldrbvs	r0, [r3, #-0]!
    4964:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    4968:	0100632e 	tsteq	r0, lr, lsr #6
    496c:	74730000 	ldrbtvc	r0, [r3], #-0
    4970:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4974:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4978:	72610000 	rsbvc	r0, r1, #0
    497c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4980:	00000300 	andeq	r0, r0, r0, lsl #6
    4984:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4988:	0300682e 	movweq	r6, #2094	; 0x82e
    498c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4990:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4994:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4998:	00000300 	andeq	r0, r0, r0, lsl #6
    499c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    49a0:	5f736e6f 	svcpl	0x00736e6f
    49a4:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    49a8:	00030068 	andeq	r0, r3, r8, rrx
    49ac:	73797300 	cmnvc	r9, #0, 6
    49b0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    49b4:	00000400 	andeq	r0, r0, r0, lsl #8
    49b8:	002a0500 	eoreq	r0, sl, r0, lsl #10
    49bc:	18140205 	ldmdane	r4, {r0, r2, r9}
    49c0:	0c030000 	stceq	0, cr0, [r3], {-0}
    49c4:	16020501 	strne	r0, [r2], -r1, lsl #10
    49c8:	062a0514 			; <UNDEFINED> instruction: 0x062a0514
    49cc:	20017a03 	andcs	r7, r1, r3, lsl #20
    49d0:	05340505 	ldreq	r0, [r4, #-1285]!	; 0xfffffafb
    49d4:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    49d8:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    49dc:	03052e05 	movweq	r2, #24069	; 0x5e05
    49e0:	0f052106 	svceq	0x00052106
    49e4:	06050106 	streq	r0, [r5], -r6, lsl #2
    49e8:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    49ec:	060b0521 	streq	r0, [fp], -r1, lsr #10
    49f0:	06040501 	streq	r0, [r4], -r1, lsl #10
    49f4:	0607054b 	streq	r0, [r7], -fp, asr #10
    49f8:	06050501 	streq	r0, [r5], -r1, lsl #10
    49fc:	03053d21 	movweq	r3, #23841	; 0x5d21
    4a00:	02052d16 	andeq	r2, r5, #1408	; 0x580
    4a04:	0605054f 	streq	r0, [r5], -pc, asr #10
    4a08:	06030501 	streq	r0, [r3], -r1, lsl #10
    4a0c:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    4a10:	20080501 	andcs	r0, r8, r1, lsl #10
    4a14:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    4a18:	01060505 	tsteq	r6, r5, lsl #10
    4a1c:	21060305 	tstcs	r6, r5, lsl #6
    4a20:	01060805 	tsteq	r6, r5, lsl #16
    4a24:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4a28:	0c053d59 	stceq	13, cr3, [r5], {89}	; 0x59
    4a2c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4a30:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    4a34:	03050106 	movweq	r0, #20742	; 0x5106
    4a38:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    4a3c:	01050106 	tsteq	r5, r6, lsl #2
    4a40:	06030522 	streq	r0, [r3], -r2, lsr #10
    4a44:	052e7503 	streq	r7, [lr, #-1283]!	; 0xfffffafd
    4a48:	0301060a 	movweq	r0, #5642	; 0x160a
    4a4c:	07024a6e 	streq	r4, [r2, -lr, ror #20]
    4a50:	9e010100 	adflss	f0, f1, f0
    4a54:	03000001 	movweq	r0, #1
    4a58:	00013d00 	andeq	r3, r1, r0, lsl #26
    4a5c:	fb010200 	blx	45266 <__ccfg+0x252be>
    4a60:	01000d0e 	tsteq	r0, lr, lsl #26
    4a64:	00010101 	andeq	r0, r1, r1, lsl #2
    4a68:	00010000 	andeq	r0, r1, r0
    4a6c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4a70:	2f656d6f 	svccs	0x00656d6f
    4a74:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4a78:	442f6e69 	strtmi	r6, [pc], #-3689	; 4a80 <__exidx_end+0x1b78>
    4a7c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4a80:	4f2f706f 	svcmi	0x002f706f
    4a84:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4a88:	502f5445 	eorpl	r5, pc, r5, asr #8
    4a8c:	534f4349 	movtpl	r4, #62281	; 0xf349
    4a90:	6369502f 	cmnvs	r9, #47	; 0x2f
    4a94:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a98:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4a9c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4aa0:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4aa4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4aa8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4aac:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4ab0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4ab4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4ab8:	61652d65 	cmnvs	r5, r5, ror #26
    4abc:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4ac0:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4ac4:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4ac8:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4acc:	6f682f00 	svcvs	0x00682f00
    4ad0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4924 <__exidx_end+0x1a1c>
    4ad4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4ad8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4adc:	6f746b73 	svcvs	0x00746b73
    4ae0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4ae4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4ae8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4aec:	2f534f43 	svccs	0x00534f43
    4af0:	4f636950 	svcmi	0x00636950
    4af4:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4af8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4afc:	6f682f00 	svcvs	0x00682f00
    4b00:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4954 <__exidx_end+0x1a4c>
    4b04:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4b08:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4b0c:	6f746b73 	svcvs	0x00746b73
    4b10:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4b14:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4b18:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4b1c:	2f534f43 	svccs	0x00534f43
    4b20:	4f636950 	svcmi	0x00636950
    4b24:	73000053 	movwvc	r0, #83	; 0x53
    4b28:	6f5f7265 	svcvs	0x005f7265
    4b2c:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
    4b30:	00010063 	andeq	r0, r1, r3, rrx
    4b34:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4b38:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4b3c:	00020068 	andeq	r0, r2, r8, rrx
    4b40:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4b44:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    4b48:	00020068 	andeq	r0, r2, r8, rrx
    4b4c:	63726100 	cmnvs	r2, #0, 2
    4b50:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4b54:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4b58:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4b5c:	00030068 	andeq	r0, r3, r8, rrx
    4b60:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4b64:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4b68:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4b6c:	62000003 	andvs	r0, r0, #3
    4b70:	6f747475 	svcvs	0x00747475
    4b74:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4b78:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4b7c:	00000300 	andeq	r0, r0, r0, lsl #6
    4b80:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4b84:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4b88:	3c000004 	stccc	0, cr0, [r0], {4}
    4b8c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4b90:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    4b94:	0000003e 	andeq	r0, r0, lr, lsr r0
    4b98:	2c050000 	stccs	0, cr0, [r5], {-0}
    4b9c:	8c020500 	cfstr32hi	mvfx0, [r2], {-0}
    4ba0:	03000018 	movweq	r0, #24
    4ba4:	0205010b 	andeq	r0, r5, #-1073741822	; 0xc0000002
    4ba8:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    4bac:	03062c05 	movweq	r2, #27653	; 0x6c05
    4bb0:	052e017a 	streq	r0, [lr, #-378]!	; 0xfffffe86
    4bb4:	0505260e 	streq	r2, [r5, #-1550]	; 0xfffff9f2
    4bb8:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
    4bbc:	0a033d30 	beq	d4084 <__ccfg+0xb40dc>
    4bc0:	03020501 	movweq	r0, #9473	; 0x2501
    4bc4:	0d052e79 	stceq	14, cr2, [r5, #-484]	; 0xfffffe1c
    4bc8:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    4bcc:	0522061e 	streq	r0, [r2, #-1566]!	; 0xfffff9e2
    4bd0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    4bd4:	03052e05 	movweq	r2, #24069	; 0x5e05
    4bd8:	02053206 	andeq	r3, r5, #1610612736	; 0x60000000
    4bdc:	0606054e 	streq	r0, [r6], -lr, asr #10
    4be0:	4a050501 	bmi	145fec <__ccfg+0x126044>
    4be4:	21060305 	tstcs	r6, r5, lsl #6
    4be8:	2402053d 	strcs	r0, [r2], #-1341	; 0xfffffac3
    4bec:	13060105 	movwne	r0, #24837	; 0x6105
    4bf0:	01000902 	tsteq	r0, r2, lsl #18
    4bf4:	0001af01 	andeq	sl, r1, r1, lsl #30
    4bf8:	3c000300 	stccc	3, cr0, [r0], {-0}
    4bfc:	02000001 	andeq	r0, r0, #1
    4c00:	0d0efb01 	vstreq	d15, [lr, #-4]
    4c04:	01010100 	mrseq	r0, (UNDEF: 17)
    4c08:	00000001 	andeq	r0, r0, r1
    4c0c:	01000001 	tsteq	r0, r1
    4c10:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4b5c <__exidx_end+0x1c54>
    4c14:	616d2f65 	cmnvs	sp, r5, ror #30
    4c18:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4c1c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4c20:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4c24:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4c28:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4c2c:	4349502f 	movtmi	r5, #36911	; 0x902f
    4c30:	502f534f 	eorpl	r5, pc, pc, asr #6
    4c34:	534f6369 	movtpl	r6, #62313	; 0xf369
    4c38:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4c3c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4c40:	61697265 	cmnvs	r9, r5, ror #4
    4c44:	752f006c 	strvc	r0, [pc, #-108]!	; 4be0 <__exidx_end+0x1cd8>
    4c48:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4a84 <__exidx_end+0x1b7c>
    4c4c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4c50:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4c54:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4c58:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4c5c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4c60:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4c64:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4c68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4c6c:	2f006564 	svccs	0x00006564
    4c70:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4c74:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4c78:	2f6e6974 	svccs	0x006e6974
    4c7c:	6b736544 	blvs	1cde194 <__ccfg+0x1cbe1ec>
    4c80:	2f706f74 	svccs	0x00706f74
    4c84:	4f534c4f 	svcmi	0x00534c4f
    4c88:	2f54454e 	svccs	0x0054454e
    4c8c:	4f434950 	svcmi	0x00434950
    4c90:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4c94:	2f534f63 	svccs	0x00534f63
    4c98:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4c9c:	2f005858 	svccs	0x00005858
    4ca0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4ca4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4ca8:	2f6e6974 	svccs	0x006e6974
    4cac:	6b736544 	blvs	1cde1c4 <__ccfg+0x1cbe21c>
    4cb0:	2f706f74 	svccs	0x00706f74
    4cb4:	4f534c4f 	svcmi	0x00534c4f
    4cb8:	2f54454e 	svccs	0x0054454e
    4cbc:	4f434950 	svcmi	0x00434950
    4cc0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4cc4:	00534f63 	subseq	r4, r3, r3, ror #30
    4cc8:	72657300 	rsbvc	r7, r5, #0, 6
    4ccc:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
    4cd0:	0100632e 	tsteq	r0, lr, lsr #6
    4cd4:	74730000 	ldrbtvc	r0, [r3], #-0
    4cd8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4cdc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4ce0:	74730000 	ldrbtvc	r0, [r3], #-0
    4ce4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    4ce8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4cec:	72610000 	rsbvc	r0, r1, #0
    4cf0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4cf4:	00000300 	andeq	r0, r0, r0, lsl #6
    4cf8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4cfc:	0300682e 	movweq	r6, #2094	; 0x82e
    4d00:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4d04:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4d08:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4d0c:	00000300 	andeq	r0, r0, r0, lsl #6
    4d10:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4d14:	5f736e6f 	svcpl	0x00736e6f
    4d18:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4d1c:	00030068 	andeq	r0, r3, r8, rrx
    4d20:	73797300 	cmnvc	r9, #0, 6
    4d24:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4d28:	00000400 	andeq	r0, r0, r0, lsl #8
    4d2c:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    4d30:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    4d34:	00003e6e 	andeq	r3, r0, lr, ror #28
    4d38:	05000000 	streq	r0, [r0, #-0]
    4d3c:	0205002d 	andeq	r0, r5, #45	; 0x2d
    4d40:	000018e0 	andeq	r1, r0, r0, ror #17
    4d44:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    4d48:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    4d4c:	03062d05 	movweq	r2, #27909	; 0x6d05
    4d50:	052e0178 	streq	r0, [lr, #-376]!	; 0xfffffe88
    4d54:	02053605 	andeq	r3, r5, #5242880	; 0x500000
    4d58:	10052306 	andne	r2, r5, r6, lsl #6
    4d5c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4d60:	06030520 	streq	r0, [r3], -r0, lsr #10
    4d64:	060f052f 	streq	r0, [pc], -pc, lsr #10
    4d68:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    4d6c:	21060405 	tstcs	r6, r5, lsl #8
    4d70:	01060b05 	tsteq	r6, r5, lsl #22
    4d74:	4b060405 	blmi	185d90 <__ccfg+0x165de8>
    4d78:	01060705 	tsteq	r6, r5, lsl #14
    4d7c:	21060505 	tstcs	r6, r5, lsl #10
    4d80:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    4d84:	4f02052d 	svcmi	0x0002052d
    4d88:	06090530 			; <UNDEFINED> instruction: 0x06090530
    4d8c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4d90:	0c053d3e 	stceq	13, cr3, [r5], {62}	; 0x3e
    4d94:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4d98:	01053006 	tsteq	r5, r6
    4d9c:	0a051306 	beq	1499bc <__ccfg+0x129a14>
    4da0:	02666903 	rsbeq	r6, r6, #49152	; 0xc000
    4da4:	01010006 	tsteq	r1, r6
    4da8:	000001a1 	andeq	r0, r0, r1, lsr #3
    4dac:	01260003 			; <UNDEFINED> instruction: 0x01260003
    4db0:	01020000 	mrseq	r0, (UNDEF: 2)
    4db4:	000d0efb 	strdeq	r0, [sp], -fp
    4db8:	01010101 	tsteq	r1, r1, lsl #2
    4dbc:	01000000 	mrseq	r0, (UNDEF: 0)
    4dc0:	2f010000 	svccs	0x00010000
    4dc4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4dc8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4dcc:	2f6e6974 	svccs	0x006e6974
    4dd0:	6b736544 	blvs	1cde2e8 <__ccfg+0x1cbe340>
    4dd4:	2f706f74 	svccs	0x00706f74
    4dd8:	4f534c4f 	svcmi	0x00534c4f
    4ddc:	2f54454e 	svccs	0x0054454e
    4de0:	4f434950 	svcmi	0x00434950
    4de4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4de8:	2f534f63 	svccs	0x00534f63
    4dec:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4df0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4df4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4df8:	73752f00 	cmnvc	r5, #0, 30
    4dfc:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4e00:	63672f62 	cmnvs	r7, #392	; 0x188
    4e04:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4e08:	6f6e2d6d 	svcvs	0x006e2d6d
    4e0c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4e10:	2f696261 	svccs	0x00696261
    4e14:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4e18:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4e1c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4e20:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4e24:	2f656d6f 	svccs	0x00656d6f
    4e28:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4e2c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4e34 <__exidx_end+0x1f2c>
    4e30:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4e34:	4f2f706f 	svcmi	0x002f706f
    4e38:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4e3c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4e40:	534f4349 	movtpl	r4, #62281	; 0xf349
    4e44:	6369502f 	cmnvs	r9, #47	; 0x2f
    4e48:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4e4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4e50:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4e54:	2f656d6f 	svccs	0x00656d6f
    4e58:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4e5c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4e64 <__exidx_end+0x1f5c>
    4e60:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4e64:	4f2f706f 	svcmi	0x002f706f
    4e68:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4e6c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4e70:	534f4349 	movtpl	r4, #62281	; 0xf349
    4e74:	6369502f 	cmnvs	r9, #47	; 0x2f
    4e78:	0000534f 	andeq	r5, r0, pc, asr #6
    4e7c:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 3f25 <__exidx_end+0x101d>
    4e80:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    4e84:	2e6c6169 	powcsez	f6, f4, #1.0
    4e88:	00010063 	andeq	r0, r1, r3, rrx
    4e8c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4e90:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4e94:	00020068 	andeq	r0, r2, r8, rrx
    4e98:	63726100 	cmnvs	r2, #0, 2
    4e9c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4ea0:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4ea4:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4ea8:	00030068 	andeq	r0, r3, r8, rrx
    4eac:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4eb0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4eb4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4eb8:	62000003 	andvs	r0, r0, #3
    4ebc:	6f747475 	svcvs	0x00747475
    4ec0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4ec4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4ec8:	00000300 	andeq	r0, r0, r0, lsl #6
    4ecc:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4ed0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4ed4:	00000004 	andeq	r0, r0, r4
    4ed8:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    4edc:	00194002 	andseq	r4, r9, r2
    4ee0:	011c0300 	tsteq	ip, r0, lsl #6
    4ee4:	06200601 	strteq	r0, [r0], -r1, lsl #12
    4ee8:	3c26033c 	stccc	3, cr0, [r6], #-240	; 0xffffff10
    4eec:	03020501 	movweq	r0, #9473	; 0x2501
    4ef0:	1313585f 	tstne	r3, #6225920	; 0x5f0000
    4ef4:	13010115 	movwne	r0, #4373	; 0x1115
    4ef8:	01060605 	tsteq	r6, r5, lsl #12
    4efc:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    4f00:	01060505 	tsteq	r6, r5, lsl #10
    4f04:	2f060305 	svccs	0x00060305
    4f08:	01060905 	tsteq	r6, r5, lsl #18
    4f0c:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    4f10:	0205280a 	andeq	r2, r5, #655360	; 0xa0000
    4f14:	0a052e06 	beq	150734 <__ccfg+0x13078c>
    4f18:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4f1c:	06058306 	streq	r8, [r5], -r6, lsl #6
    4f20:	1f210106 	svcne	0x00210106
    4f24:	02051f21 	andeq	r1, r5, #33, 30	; 0x84
    4f28:	06052106 	streq	r2, [r5], -r6, lsl #2
    4f2c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4f30:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    4f34:	03050106 	movweq	r0, #20742	; 0x5106
    4f38:	033d3006 	teqeq	sp, #6
    4f3c:	0d054a74 	vstreq	s8, [r5, #-464]	; 0xfffffe30
    4f40:	11050106 	tstne	r5, r6, lsl #2
    4f44:	20070520 	andcs	r0, r7, r0, lsr #10
    4f48:	01000802 	tsteq	r0, r2, lsl #16
    4f4c:	00024b01 	andeq	r4, r2, r1, lsl #22
    4f50:	25000300 	strcs	r0, [r0, #-768]	; 0xfffffd00
    4f54:	02000001 	andeq	r0, r0, #1
    4f58:	0d0efb01 	vstreq	d15, [lr, #-4]
    4f5c:	01010100 	mrseq	r0, (UNDEF: 17)
    4f60:	00000001 	andeq	r0, r0, r1
    4f64:	01000001 	tsteq	r0, r1
    4f68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4eb4 <__exidx_end+0x1fac>
    4f6c:	616d2f65 	cmnvs	sp, r5, ror #30
    4f70:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4f74:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4f78:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4f7c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4f80:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4f84:	4349502f 	movtmi	r5, #36911	; 0x902f
    4f88:	502f534f 	eorpl	r5, pc, pc, asr #6
    4f8c:	534f6369 	movtpl	r6, #62313	; 0xf369
    4f90:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4f94:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4f98:	61697265 	cmnvs	r9, r5, ror #4
    4f9c:	752f006c 	strvc	r0, [pc, #-108]!	; 4f38 <__exidx_end+0x2030>
    4fa0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4ddc <__exidx_end+0x1ed4>
    4fa4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4fa8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4fac:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4fb0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4fb4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4fb8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4fbc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4fc0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4fc4:	2f006564 	svccs	0x00006564
    4fc8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4fcc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4fd0:	2f6e6974 	svccs	0x006e6974
    4fd4:	6b736544 	blvs	1cde4ec <__ccfg+0x1cbe544>
    4fd8:	2f706f74 	svccs	0x00706f74
    4fdc:	4f534c4f 	svcmi	0x00534c4f
    4fe0:	2f54454e 	svccs	0x0054454e
    4fe4:	4f434950 	svcmi	0x00434950
    4fe8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4fec:	2f534f63 	svccs	0x00534f63
    4ff0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4ff4:	2f005858 	svccs	0x00005858
    4ff8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4ffc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5000:	2f6e6974 	svccs	0x006e6974
    5004:	6b736544 	blvs	1cde51c <__ccfg+0x1cbe574>
    5008:	2f706f74 	svccs	0x00706f74
    500c:	4f534c4f 	svcmi	0x00534c4f
    5010:	2f54454e 	svccs	0x0054454e
    5014:	4f434950 	svcmi	0x00434950
    5018:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    501c:	00534f63 	subseq	r4, r3, r3, ror #30
    5020:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    5024:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    5028:	2e6c6169 	powcsez	f6, f4, #1.0
    502c:	00010063 	andeq	r0, r1, r3, rrx
    5030:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    5034:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5038:	00020068 	andeq	r0, r2, r8, rrx
    503c:	63726100 	cmnvs	r2, #0, 2
    5040:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5044:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5048:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    504c:	00030068 	andeq	r0, r3, r8, rrx
    5050:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5054:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5058:	00682e73 	rsbeq	r2, r8, r3, ror lr
    505c:	62000003 	andvs	r0, r0, #3
    5060:	6f747475 	svcvs	0x00747475
    5064:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5068:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    506c:	00000300 	andeq	r0, r0, r0, lsl #6
    5070:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5074:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5078:	00000004 	andeq	r0, r0, r4
    507c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    5080:	0019b002 	andseq	fp, r9, r2
    5084:	01220300 			; <UNDEFINED> instruction: 0x01220300
    5088:	06200601 	strteq	r0, [r0], -r1, lsl #12
    508c:	6b02053c 	blvs	86584 <__ccfg+0x665dc>
    5090:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    5094:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    5098:	03052005 	movweq	r2, #20485	; 0x5005
    509c:	02053006 	andeq	r3, r5, #6
    50a0:	061d053f 			; <UNDEFINED> instruction: 0x061d053f
    50a4:	3c0b0501 	cfstr32cc	mvfx0, [fp], {1}
    50a8:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    50ac:	0505200b 	streq	r2, [r5, #-11]
    50b0:	06030520 	streq	r0, [r3], -r0, lsr #10
    50b4:	02052f24 	andeq	r2, r5, #36, 30	; 0x90
    50b8:	06060530 			; <UNDEFINED> instruction: 0x06060530
    50bc:	1f020513 	svcne	0x00020513
    50c0:	06052f06 	streq	r2, [r5], -r6, lsl #30
    50c4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    50c8:	01013006 	tsteq	r1, r6
    50cc:	05058316 	streq	r8, [r5, #-790]	; 0xfffffcea
    50d0:	03050106 	movweq	r0, #20742	; 0x5106
    50d4:	06053d06 	streq	r3, [r5], -r6, lsl #26
    50d8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    50dc:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    50e0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    50e4:	1f070521 	svcne	0x00070521
    50e8:	21060405 	tstcs	r6, r5, lsl #8
    50ec:	05310305 	ldreq	r0, [r1, #-773]!	; 0xfffffcfb
    50f0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    50f4:	04052006 	streq	r2, [r5], #-6
    50f8:	02053e06 	andeq	r3, r5, #6, 28	; 0x60
    50fc:	0606053e 			; <UNDEFINED> instruction: 0x0606053e
    5100:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    5104:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    5108:	052f0603 	streq	r0, [pc, #-1539]!	; 4b0d <__exidx_end+0x1c05>
    510c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5110:	052f0603 	streq	r0, [pc, #-1539]!	; 4b15 <__exidx_end+0x1c0d>
    5114:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5118:	052f0603 	streq	r0, [pc, #-1539]!	; 4b1d <__exidx_end+0x1c15>
    511c:	06053102 	streq	r3, [r5], -r2, lsl #2
    5120:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5124:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5128:	06060521 	streq	r0, [r6], -r1, lsr #10
    512c:	051f2101 	ldreq	r2, [pc, #-257]	; 5033 <__exidx_end+0x212b>
    5130:	052f0603 	streq	r0, [pc, #-1539]!	; 4b35 <__exidx_end+0x1c2d>
    5134:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5138:	40230602 	eormi	r0, r3, r2, lsl #12
    513c:	06060591 			; <UNDEFINED> instruction: 0x06060591
    5140:	06020501 	streq	r0, [r2], -r1, lsl #10
    5144:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    5148:	3c110501 	cfldr32cc	mvfx0, [r1], {1}
    514c:	05210705 	streq	r0, [r1, #-1797]!	; 0xfffff8fb
    5150:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    5154:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5158:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    515c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5160:	0a059f06 	beq	16cd80 <__ccfg+0x14cdd8>
    5164:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    5168:	06060521 	streq	r0, [r6], -r1, lsr #10
    516c:	06020501 	streq	r0, [r2], -r1, lsl #10
    5170:	0605052f 	streq	r0, [r5], -pc, lsr #10
    5174:	06030501 	streq	r0, [r3], -r1, lsl #10
    5178:	060d0521 	streq	r0, [sp], -r1, lsr #10
    517c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5180:	3002052f 	andcc	r0, r2, pc, lsr #10
    5184:	01060605 	tsteq	r6, r5, lsl #12
    5188:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    518c:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    5190:	053a0205 	ldreq	r0, [sl, #-517]!	; 0xfffffdfb
    5194:	02300601 	eorseq	r0, r0, #1048576	; 0x100000
    5198:	0101000d 	tsteq	r1, sp
    519c:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    51a0:	013a0003 	teqeq	sl, r3
    51a4:	01020000 	mrseq	r0, (UNDEF: 2)
    51a8:	000d0efb 	strdeq	r0, [sp], -fp
    51ac:	01010101 	tsteq	r1, r1, lsl #2
    51b0:	01000000 	mrseq	r0, (UNDEF: 0)
    51b4:	2f010000 	svccs	0x00010000
    51b8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    51bc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    51c0:	2f6e6974 	svccs	0x006e6974
    51c4:	6b736544 	blvs	1cde6dc <__ccfg+0x1cbe734>
    51c8:	2f706f74 	svccs	0x00706f74
    51cc:	4f534c4f 	svcmi	0x00534c4f
    51d0:	2f54454e 	svccs	0x0054454e
    51d4:	4f434950 	svcmi	0x00434950
    51d8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    51dc:	2f534f63 	svccs	0x00534f63
    51e0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    51e4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    51e8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    51ec:	73752f00 	cmnvc	r5, #0, 30
    51f0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    51f4:	63672f62 	cmnvs	r7, #392	; 0x188
    51f8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    51fc:	6f6e2d6d 	svcvs	0x006e2d6d
    5200:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5204:	2f696261 	svccs	0x00696261
    5208:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    520c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    5210:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5214:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    5218:	2f656d6f 	svccs	0x00656d6f
    521c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5220:	442f6e69 	strtmi	r6, [pc], #-3689	; 5228 <__exidx_end+0x2320>
    5224:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5228:	4f2f706f 	svcmi	0x002f706f
    522c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5230:	502f5445 	eorpl	r5, pc, r5, asr #8
    5234:	534f4349 	movtpl	r4, #62281	; 0xf349
    5238:	6369502f 	cmnvs	r9, #47	; 0x2f
    523c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5240:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5244:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5248:	2f656d6f 	svccs	0x00656d6f
    524c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5250:	442f6e69 	strtmi	r6, [pc], #-3689	; 5258 <__exidx_end+0x2350>
    5254:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5258:	4f2f706f 	svcmi	0x002f706f
    525c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5260:	502f5445 	eorpl	r5, pc, r5, asr #8
    5264:	534f4349 	movtpl	r4, #62281	; 0xf349
    5268:	6369502f 	cmnvs	r9, #47	; 0x2f
    526c:	0000534f 	andeq	r5, r0, pc, asr #6
    5270:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    5274:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    5278:	73000001 	movwvc	r0, #1
    527c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5280:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5284:	73000002 	movwvc	r0, #2
    5288:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    528c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    5290:	61000002 	tstvs	r0, r2
    5294:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5298:	00030068 	andeq	r0, r3, r8, rrx
    529c:	63616d00 	cmnvs	r1, #0, 26
    52a0:	00682e68 	rsbeq	r2, r8, r8, ror #28
    52a4:	70000003 	andvc	r0, r0, r3
    52a8:	5f736e69 	svcpl	0x00736e69
    52ac:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    52b0:	00030068 	andeq	r0, r3, r8, rrx
    52b4:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    52b8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    52bc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    52c0:	0300682e 	movweq	r6, #2094	; 0x82e
    52c4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    52c8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    52cc:	00040068 	andeq	r0, r4, r8, rrx
    52d0:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    52d4:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    52d8:	003e6e69 	eorseq	r6, lr, r9, ror #28
    52dc:	00000000 	andeq	r0, r0, r0
    52e0:	05001505 	streq	r1, [r0, #-1285]	; 0xfffffafb
    52e4:	001acc02 	andseq	ip, sl, r2, lsl #24
    52e8:	010c0300 	mrseq	r0, LR_mon
    52ec:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    52f0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    52f4:	0405580b 	streq	r5, [r5], #-2059	; 0xfffff7f5
    52f8:	0e053e06 	cdpeq	14, 0, cr3, cr5, cr6, {0}
    52fc:	03050106 	movweq	r0, #20742	; 0x5106
    5300:	04053006 	streq	r3, [r5], #-6
    5304:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5308:	00010259 	andeq	r0, r1, r9, asr r2
    530c:	43050101 	movwmi	r0, #20737	; 0x5101
    5310:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    5314:	1900001a 	stmdbne	r0, {r1, r3, r4}
    5318:	06052e06 	streq	r2, [r5], -r6, lsl #28
    531c:	03040520 	movweq	r0, #17696	; 0x4520
    5320:	05052e1d 	streq	r2, [r5, #-3613]	; 0xfffff1e3
    5324:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    5328:	20710307 	rsbscs	r0, r1, r7, lsl #6
    532c:	4a030605 	bmi	c6b48 <__ccfg+0xa6ba0>
    5330:	06020520 	streq	r0, [r2], -r0, lsr #10
    5334:	0514133e 	ldreq	r1, [r4, #-830]	; 0xfffffcc2
    5338:	02051803 	andeq	r1, r5, #196608	; 0x30000
    533c:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    5340:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    5344:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    5348:	05051403 	streq	r1, [r5, #-1027]	; 0xfffffbfd
    534c:	03050106 	movweq	r0, #20742	; 0x5106
    5350:	06053006 	streq	r3, [r5], -r6
    5354:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5358:	0b053e06 	bleq	154b78 <__ccfg+0x134bd0>
    535c:	10050106 	andne	r0, r5, r6, lsl #2
    5360:	2105052e 	tstcs	r5, lr, lsr #10
    5364:	052d0705 	streq	r0, [sp, #-1797]!	; 0xfffff8fb
    5368:	3d3d0605 	ldccc	6, cr0, [sp, #-20]!	; 0xffffffec
    536c:	da030405 	ble	c6388 <__ccfg+0xa63e0>
    5370:	05590100 	ldrbeq	r0, [r9, #-256]	; 0xffffff00
    5374:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5378:	a7030604 	strge	r0, [r3, -r4, lsl #12]
    537c:	05054a7f 	streq	r4, [r5, #-2687]	; 0xfffff581
    5380:	00c20306 	sbceq	r0, r2, r6, lsl #6
    5384:	052f0620 	streq	r0, [pc, #-1568]!	; 4d6c <__exidx_end+0x1e64>
    5388:	05100612 	ldreq	r0, [r0, #-1554]	; 0xfffff9ee
    538c:	43030603 	movwmi	r0, #13827	; 0x3603
    5390:	0606052e 	streq	r0, [r6], -lr, lsr #10
    5394:	06040501 	streq	r0, [r4], -r1, lsl #10
    5398:	0606054c 	streq	r0, [r6], -ip, asr #10
    539c:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    53a0:	21060405 	tstcs	r6, r5, lsl #8
    53a4:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    53a8:	5959e400 	ldmdbpl	r9, {sl, sp, lr, pc}^
    53ac:	01060805 	tsteq	r6, r5, lsl #16
    53b0:	03060505 	movweq	r0, #25861	; 0x6505
    53b4:	0c053c09 	stceq	12, cr3, [r5], {9}
    53b8:	01050106 	tsteq	r5, r6, lsl #2
    53bc:	03040531 	movweq	r0, #17713	; 0x4531
    53c0:	053c7fa9 	ldreq	r7, [ip, #-4009]!	; 0xfffff057
    53c4:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
    53c8:	0505010f 	streq	r0, [r5, #-271]	; 0xfffffef1
    53cc:	060c0513 			; <UNDEFINED> instruction: 0x060c0513
    53d0:	2d120513 	cfldr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    53d4:	2f060505 	svccs	0x00060505
    53d8:	14060e05 	strne	r0, [r6], #-3589	; 0xfffff1fb
    53dc:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    53e0:	13060e05 	movwne	r0, #28165	; 0x6e05
    53e4:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    53e8:	5a062d06 	bpl	190808 <__ccfg+0x170860>
    53ec:	01060905 	tsteq	r6, r5, lsl #18
    53f0:	39061405 	stmdbcc	r6, {r0, r2, sl, ip}
    53f4:	01061605 	tsteq	r6, r5, lsl #12
    53f8:	2e061205 	cdpcs	2, 0, cr1, cr6, cr5, {0}
    53fc:	13060605 	movwne	r0, #26117	; 0x6605
    5400:	03060505 	movweq	r0, #25861	; 0x6505
    5404:	05132009 	ldreq	r2, [r3, #-9]
    5408:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    540c:	09052f08 	stmdbeq	r5, {r3, r8, r9, sl, fp, sp}
    5410:	0605052d 	streq	r0, [r5], -sp, lsr #10
    5414:	0608052f 	streq	r0, [r8], -pc, lsr #10
    5418:	20120501 	andscs	r0, r2, r1, lsl #10
    541c:	30060605 	andcc	r0, r6, r5, lsl #12
    5420:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    5424:	06050501 	streq	r0, [r5], -r1, lsl #10
    5428:	060c054c 	streq	r0, [ip], -ip, asr #10
    542c:	05016f03 	streq	r6, [r1, #-3843]	; 0xfffff0fd
    5430:	20110305 	andscs	r0, r1, r5, lsl #6
    5434:	2e012e06 	cdpcs	14, 0, cr2, cr1, cr6, {0}
    5438:	4a063c06 	bmi	194458 <__ccfg+0x1744b0>
    543c:	20827401 	addcs	r7, r2, r1, lsl #8
    5440:	2e204a20 	vmulcs.f32	s8, s0, s1
    5444:	06070525 	streq	r0, [r7], -r5, lsr #10
    5448:	06050501 	streq	r0, [r5], -r1, lsl #10
    544c:	06080521 	streq	r0, [r8], -r1, lsr #10
    5450:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    5454:	30060605 	andcc	r0, r6, r5, lsl #12
    5458:	06090513 			; <UNDEFINED> instruction: 0x06090513
    545c:	1f0a0514 	svcne	0x000a0514
    5460:	052d0805 	streq	r0, [sp, #-2053]!	; 0xfffff7fb
    5464:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    5468:	01060905 	tsteq	r6, r5, lsl #18
    546c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    5470:	593f0607 	ldmdbpl	pc!, {r0, r1, r2, r9, sl}	; <UNPREDICTABLE>
    5474:	01060b05 	tsteq	r6, r5, lsl #22
    5478:	30060605 	andcc	r0, r6, r5, lsl #12
    547c:	03060505 	movweq	r0, #25861	; 0x6505
    5480:	0605016f 	streq	r0, [r5], -pc, ror #2
    5484:	06201103 	strteq	r1, [r0], -r3, lsl #2
    5488:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    548c:	014a063c 	cmpeq	sl, ip, lsr r6
    5490:	2e016666 	cfmadd32cs	mvax3, mvfx6, mvfx1, mvfx6
    5494:	052e2058 	streq	r2, [lr, #-88]!	; 0xffffffa8
    5498:	0f05210c 	svceq	0x0005210c
    549c:	06050106 	streq	r0, [r5], -r6, lsl #2
    54a0:	13132f06 	tstne	r3, #6, 30
    54a4:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    54a8:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    54ac:	06052d08 	streq	r2, [r5], -r8, lsl #26
    54b0:	07052106 	streq	r2, [r5, -r6, lsl #2]
    54b4:	060f0514 			; <UNDEFINED> instruction: 0x060f0514
    54b8:	2e150513 	mrccs	5, 0, r0, cr5, cr3, {0}
    54bc:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    54c0:	060a055a 			; <UNDEFINED> instruction: 0x060a055a
    54c4:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    54c8:	06170547 	ldreq	r0, [r7], -r7, asr #10
    54cc:	06130501 	ldreq	r0, [r3], -r1, lsl #10
    54d0:	0607052e 	streq	r0, [r7], -lr, lsr #10
    54d4:	06060513 			; <UNDEFINED> instruction: 0x06060513
    54d8:	05055926 	streq	r5, [r5, #-2342]	; 0xfffff6da
    54dc:	0513134f 	ldreq	r1, [r3, #-847]	; 0xfffffcb1
    54e0:	05110609 	ldreq	r0, [r1, #-1545]	; 0xfffff9f7
    54e4:	4f062f05 	svcmi	0x00062f05
    54e8:	0b051313 	bleq	14a13c <__ccfg+0x12a194>
    54ec:	060c054a 	streq	r0, [ip], -sl, asr #10
    54f0:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    54f4:	3d060605 	stccc	6, cr0, [r6, #-20]	; 0xffffffec
    54f8:	060a054b 	streq	r0, [sl], -fp, asr #10
    54fc:	207fad03 	rsbscs	sl, pc, r3, lsl #26
    5500:	01000702 	tsteq	r0, r2, lsl #14
    5504:	00350501 	eorseq	r0, r5, r1, lsl #10
    5508:	1d1c0205 	lfmne	f0, 4, [ip, #-20]	; 0xffffffec
    550c:	90030000 	andls	r0, r3, r0
    5510:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    5514:	35051414 	strcc	r1, [r5, #-1044]	; 0xfffffbec
    5518:	052e0e06 	streq	r0, [lr, #-3590]!	; 0xfffff1fa
    551c:	03053205 	movweq	r3, #20997	; 0x5205
    5520:	05673006 	strbeq	r3, [r7, #-6]!
    5524:	12030601 	andne	r0, r3, #1048576	; 0x100000
    5528:	06020501 	streq	r0, [r2], -r1, lsl #10
    552c:	053c7203 	ldreq	r7, [ip, #-515]!	; 0xfffffdfd
    5530:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5534:	02053c06 	andeq	r3, r5, #1536	; 0x600
    5538:	15053f06 	strne	r3, [r5, #-3846]	; 0xfffff0fa
    553c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    5540:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    5544:	060b0540 	streq	r0, [fp], -r0, asr #10
    5548:	58050501 	stmdapl	r5, {r0, r8, sl}
    554c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    5550:	03052005 	movweq	r2, #20485	; 0x5005
    5554:	133d2206 	teqne	sp, #1610612736	; 0x60000000
    5558:	01000202 	tsteq	r0, r2, lsl #4
    555c:	0002c601 	andeq	ip, r2, r1, lsl #12
    5560:	3a000300 	bcc	6168 <__exidx_end+0x3260>
    5564:	02000001 	andeq	r0, r0, #1
    5568:	0d0efb01 	vstreq	d15, [lr, #-4]
    556c:	01010100 	mrseq	r0, (UNDEF: 17)
    5570:	00000001 	andeq	r0, r0, r1
    5574:	01000001 	tsteq	r0, r1
    5578:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 54c4 <__exidx_end+0x25bc>
    557c:	616d2f65 	cmnvs	sp, r5, ror #30
    5580:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    5584:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5588:	706f746b 	rsbvc	r7, pc, fp, ror #8
    558c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5590:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    5594:	4349502f 	movtmi	r5, #36911	; 0x902f
    5598:	502f534f 	eorpl	r5, pc, pc, asr #6
    559c:	534f6369 	movtpl	r6, #62313	; 0xf369
    55a0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    55a4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    55a8:	61697265 	cmnvs	r9, r5, ror #4
    55ac:	752f006c 	strvc	r0, [pc, #-108]!	; 5548 <__exidx_end+0x2640>
    55b0:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 53ec <__exidx_end+0x24e4>
    55b4:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    55b8:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    55bc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    55c0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    55c4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    55c8:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    55cc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    55d0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    55d4:	2f006564 	svccs	0x00006564
    55d8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    55dc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    55e0:	2f6e6974 	svccs	0x006e6974
    55e4:	6b736544 	blvs	1cdeafc <__ccfg+0x1cbeb54>
    55e8:	2f706f74 	svccs	0x00706f74
    55ec:	4f534c4f 	svcmi	0x00534c4f
    55f0:	2f54454e 	svccs	0x0054454e
    55f4:	4f434950 	svcmi	0x00434950
    55f8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    55fc:	2f534f63 	svccs	0x00534f63
    5600:	33314343 	teqcc	r1, #201326593	; 0xc000001
    5604:	2f005858 	svccs	0x00005858
    5608:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    560c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    5610:	2f6e6974 	svccs	0x006e6974
    5614:	6b736544 	blvs	1cdeb2c <__ccfg+0x1cbeb84>
    5618:	2f706f74 	svccs	0x00706f74
    561c:	4f534c4f 	svcmi	0x00534c4f
    5620:	2f54454e 	svccs	0x0054454e
    5624:	4f434950 	svcmi	0x00434950
    5628:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    562c:	00534f63 	subseq	r4, r3, r3, ror #30
    5630:	63737600 	cmnvs	r3, #0, 12
    5634:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
    5638:	00000100 	andeq	r0, r0, r0, lsl #2
    563c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5640:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5644:	00000200 	andeq	r0, r0, r0, lsl #4
    5648:	61647473 	smcvs	18243	; 0x4743
    564c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    5650:	00000200 	andeq	r0, r0, r0, lsl #4
    5654:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    5658:	0300682e 	movweq	r6, #2094	; 0x82e
    565c:	616d0000 	cmnvs	sp, r0
    5660:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    5664:	00000300 	andeq	r0, r0, r0, lsl #6
    5668:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    566c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    5670:	0300682e 	movweq	r6, #2094	; 0x82e
    5674:	75620000 	strbvc	r0, [r2, #-0]!
    5678:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    567c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5680:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5684:	73000003 	movwvc	r0, #3
    5688:	6f697379 	svcvs	0x00697379
    568c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    5690:	623c0000 	eorsvs	r0, ip, #0
    5694:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    5698:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    569c:	00000000 	andeq	r0, r0, r0
    56a0:	003a0500 	eorseq	r0, sl, r0, lsl #10
    56a4:	1d6c0205 	sfmne	f0, 2, [ip, #-20]!	; 0xffffffec
    56a8:	05190000 	ldreq	r0, [r9, #-0]
    56ac:	3a031402 	bcc	ca6bc <__ccfg+0xaa714>
    56b0:	06050501 	streq	r0, [r5], -r1, lsl #10
    56b4:	033a0501 	teqeq	sl, #4194304	; 0x400000
    56b8:	05052044 	streq	r2, [r5, #-68]	; 0xffffffbc
    56bc:	052e3c03 	streq	r3, [lr, #-3075]!	; 0xfffff3fd
    56c0:	05053c12 	streq	r3, [r5, #-3090]	; 0xfffff3ee
    56c4:	03160540 	tsteq	r6, #64, 10	; 0x10000000
    56c8:	0b05200e 	bleq	14d708 <__ccfg+0x12d760>
    56cc:	052e1103 	streq	r1, [lr, #-259]!	; 0xfffffefd
    56d0:	62030608 	andvs	r0, r3, #8, 12	; 0x800000
    56d4:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    56d8:	2e080501 	cfsh32cs	mvfx0, mvfx8, #1
    56dc:	21060305 	tstcs	r6, r5, lsl #6
    56e0:	01060605 	tsteq	r6, r5, lsl #12
    56e4:	30060305 	andcc	r0, r6, r5, lsl #6
    56e8:	01060b05 	tsteq	r6, r5, lsl #22
    56ec:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
    56f0:	01052003 	tsteq	r5, r3
    56f4:	05ac2e03 	streq	r2, [ip, #3587]!	; 0xe03
    56f8:	3c520303 	mrrccc	3, 0, r0, r2, cr3
    56fc:	1b030b05 	blne	c8318 <__ccfg+0xa8370>
    5700:	060a0574 			; <UNDEFINED> instruction: 0x060a0574
    5704:	060b052e 	streq	r0, [fp], -lr, lsr #10
    5708:	06040501 	streq	r0, [r4], -r1, lsl #10
    570c:	060705ad 	streq	r0, [r7], -sp, lsr #11
    5710:	06040501 	streq	r0, [r4], -r1, lsl #10
    5714:	06070530 			; <UNDEFINED> instruction: 0x06070530
    5718:	1e080515 	mcrne	5, 0, r0, cr8, cr5, {0}
    571c:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    5720:	142f0604 	strtne	r0, [pc], #-1540	; 5728 <__exidx_end+0x2820>
    5724:	01060705 	tsteq	r6, r5, lsl #14
    5728:	2f060b05 	svccs	0x00060b05
    572c:	01060d05 	tsteq	r6, r5, lsl #26
    5730:	05660c05 	strbeq	r0, [r6, #-3077]!	; 0xfffff3fb
    5734:	2b052e1c 	blcs	150fac <__ccfg+0x131004>
    5738:	4e0b052e 	cfsh32mi	mvfx0, mvfx11, #30
    573c:	3c060a05 			; <UNDEFINED> instruction: 0x3c060a05
    5740:	01060b05 	tsteq	r6, r5, lsl #22
    5744:	83060405 	movwhi	r0, #25605	; 0x6405
    5748:	01061805 	tsteq	r6, r5, lsl #16
    574c:	4b060405 	blmi	186768 <__ccfg+0x1667c0>
    5750:	01060905 	tsteq	r6, r5, lsl #18
    5754:	2f060405 	svccs	0x00060405
    5758:	59031105 	stmdbpl	r3, {r0, r2, r8, ip}
    575c:	66063c20 	strvs	r3, [r6], -r0, lsr #24
    5760:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    5764:	66063c06 	strvs	r3, [r6], -r6, lsl #24
    5768:	0620013c 			; <UNDEFINED> instruction: 0x0620013c
    576c:	743c0601 	ldrtvc	r0, [ip], #-1537	; 0xfffff9ff
    5770:	064a063c 			; <UNDEFINED> instruction: 0x064a063c
    5774:	2e21743c 	mcrcs	4, 1, r7, cr1, cr12, {1}
    5778:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    577c:	2e060106 	adfcss	f0, f6, f6
    5780:	4a219082 	bmi	869990 <__ccfg+0x8499e8>
    5784:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    5788:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    578c:	3c062e06 	stccc	14, cr2, [r6], {6}
    5790:	06668206 	strbteq	r8, [r6], -r6, lsl #4
    5794:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    5798:	05770405 	ldrbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    579c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    57a0:	16052010 			; <UNDEFINED> instruction: 0x16052010
    57a4:	6606ae06 	strvs	sl, [r6], -r6, lsl #28
    57a8:	2e2e062e 	cfmadda32cs	mvax1, mvax0, mvfx14, mvfx14
    57ac:	3c063c06 	stccc	12, cr3, [r6], {6}
    57b0:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    57b4:	823c0601 	eorshi	r0, ip, #1048576	; 0x100000
    57b8:	9006923c 	andls	r9, r6, ip, lsr r2
    57bc:	013c5806 	teqeq	ip, r6, lsl #16
    57c0:	2e06012e 	adfcssp	f0, f6, #0.5
    57c4:	74063c06 	strvc	r3, [r6], #-3078	; 0xfffff3fa
    57c8:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    57cc:	06723c3c 			; <UNDEFINED> instruction: 0x06723c3c
    57d0:	742e063c 	strtvc	r0, [lr], #-1596	; 0xfffff9c4
    57d4:	3c903c21 	ldccc	12, cr3, [r0], {33}	; 0x21
    57d8:	01062e01 	tsteq	r6, r1, lsl #28
    57dc:	74902e06 	ldrvc	r2, [r0], #3590	; 0xe06
    57e0:	4f040521 	svcmi	0x00040521
    57e4:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    57e8:	2e070501 	cfsh32cs	mvfx0, mvfx7, #1
    57ec:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    57f0:	13060805 	movwne	r0, #26629	; 0x6805
    57f4:	052d0605 	streq	r0, [sp, #-1541]!	; 0xfffff9fb
    57f8:	13210604 			; <UNDEFINED> instruction: 0x13210604
    57fc:	01060905 	tsteq	r6, r5, lsl #18
    5800:	21060405 	tstcs	r6, r5, lsl #8
    5804:	24060b05 	strcs	r0, [r6], #-2821	; 0xfffff4fb
    5808:	03060705 	movweq	r0, #26373	; 0x6705
    580c:	0e057409 	cdpeq	4, 0, cr7, cr5, cr9, {0}
    5810:	0b050106 	bleq	145c30 <__ccfg+0x125c88>
    5814:	030a053e 	movweq	r0, #42302	; 0xa53e
    5818:	11056654 	tstne	r5, r4, asr r6
    581c:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
    5820:	05025116 	streq	r5, [r2, #-278]	; 0xfffffeea
    5824:	67010100 	strvs	r0, [r1, -r0, lsl #2]
    5828:	02000001 	andeq	r0, r0, #1
    582c:	00014700 	andeq	r4, r1, r0, lsl #14
    5830:	fb010200 	blx	4603a <__ccfg+0x26092>
    5834:	01000d0e 	tsteq	r0, lr, lsl #26
    5838:	00010101 	andeq	r0, r1, r1, lsl #2
    583c:	00010000 	andeq	r0, r1, r0
    5840:	2f2e0100 	svccs	0x002e0100
    5844:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5848:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    584c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    5850:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    5854:	63006269 	movwvs	r6, #617	; 0x269
    5858:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    585c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5860:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5864:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5868:	5f393130 	svcpl	0x00393130
    586c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5870:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5874:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5878:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    587c:	6f745c36 	svcvs	0x00745c36
    5880:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5884:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5888:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    588c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5890:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5894:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5898:	61652d65 	cmnvs	r5, r5, ror #26
    589c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    58a0:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    58a4:	71353130 	teqvc	r5, r0, lsr r1
    58a8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    58ac:	6f6e2d6d 	svcvs	0x006e2d6d
    58b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    58b4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    58b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    58bc:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    58c0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    58c4:	00656e69 	rsbeq	r6, r5, r9, ror #28
    58c8:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    58cc:	63635c69 	cmnvs	r3, #26880	; 0x6900
    58d0:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    58d4:	302e302e 	eorcc	r3, lr, lr, lsr #32
    58d8:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    58dc:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    58e0:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    58e4:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    58e8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    58ec:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    58f0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    58f4:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 578c <__exidx_end+0x2884>
    58f8:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    58fc:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5900:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5904:	6f6e2d6d 	svcvs	0x006e2d6d
    5908:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    590c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5910:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5914:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5918:	615c3371 	cmpvs	ip, r1, ror r3
    591c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5920:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5924:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5928:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    592c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5930:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    5934:	6f610000 	svcvs	0x00610000
    5938:	61625f6e 	cmnvs	r2, lr, ror #30
    593c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    5940:	0100632e 	tsteq	r0, lr, lsr #6
    5944:	645f0000 	ldrbvs	r0, [pc], #-0	; 594c <__exidx_end+0x2a44>
    5948:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    594c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5954 <__exidx_end+0x2a4c>
    5950:	73657079 	cmnvc	r5, #121	; 0x79
    5954:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5958:	735f0000 	cmpvc	pc, #0
    595c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5960:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5964:	61000003 	tstvs	r0, r3
    5968:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    596c:	6f6d7461 	svcvs	0x006d7461
    5970:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    5974:	00000001 	andeq	r0, r0, r1
    5978:	fc020500 	stc2	5, cr0, [r2], {-0}
    597c:	03000020 	movweq	r0, #32
    5980:	361a013c 			; <UNDEFINED> instruction: 0x361a013c
    5984:	2e77032f 	cdpcs	3, 7, cr0, cr7, cr15, {1}
    5988:	4c2e0903 			; <UNDEFINED> instruction: 0x4c2e0903
    598c:	0009023d 	andeq	r0, r9, sp, lsr r2
    5990:	01a90101 			; <UNDEFINED> instruction: 0x01a90101
    5994:	00020000 	andeq	r0, r2, r0
    5998:	00000141 	andeq	r0, r0, r1, asr #2
    599c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    59a0:	0101000d 	tsteq	r1, sp
    59a4:	00000101 	andeq	r0, r0, r1, lsl #2
    59a8:	00000100 	andeq	r0, r0, r0, lsl #2
    59ac:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    59b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    59b4:	2f2e2e2f 	svccs	0x002e2e2f
    59b8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    59bc:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    59c0:	3a630062 	bcc	18c5b50 <__ccfg+0x18a5ba8>
    59c4:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    59c8:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    59cc:	302e322e 	eorcc	r3, lr, lr, lsr #4
    59d0:	3030302e 	eorscc	r3, r0, lr, lsr #32
    59d4:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    59d8:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    59dc:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    59e0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    59e4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    59e8:	6f6f745c 	svcvs	0x006f745c
    59ec:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    59f0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    59f4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    59f8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    59fc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5a00:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5a04:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5a08:	5f342d69 	svcpl	0x00342d69
    5a0c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5a10:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5a14:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5a18:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5a1c:	61652d65 	cmnvs	r5, r5, ror #26
    5a20:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5a24:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5a28:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5a2c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5a30:	6300656e 	movwvs	r6, #1390	; 0x56e
    5a34:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5a38:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5a3c:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5a40:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5a44:	5f393130 	svcpl	0x00393130
    5a48:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5a4c:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5a50:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5a54:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5a58:	6f745c36 	svcvs	0x00745c36
    5a5c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5a60:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5a64:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5a68:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5a6c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5a70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5a74:	61652d65 	cmnvs	r5, r5, ror #26
    5a78:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5a7c:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5a80:	71353130 	teqvc	r5, r0, lsr r1
    5a84:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5a88:	6f6e2d6d 	svcvs	0x006e2d6d
    5a8c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5a90:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5a94:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5a98:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5a9c:	00737973 	rsbseq	r7, r3, r3, ror r9
    5aa0:	6e6f6100 	powvse	f6, f7, f0
    5aa4:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    5aa8:	0100632e 	tsteq	r0, lr, lsr #6
    5aac:	645f0000 	ldrbvs	r0, [pc], #-0	; 5ab4 <__exidx_end+0x2bac>
    5ab0:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5ab4:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5abc <__exidx_end+0x2bb4>
    5ab8:	73657079 	cmnvc	r5, #121	; 0x79
    5abc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5ac0:	735f0000 	cmpvc	pc, #0
    5ac4:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5ac8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5acc:	61000003 	tstvs	r0, r3
    5ad0:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    5ad4:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    5ad8:	00000100 	andeq	r0, r0, r0, lsl #2
    5adc:	02050000 	andeq	r0, r5, #0
    5ae0:	00000000 	andeq	r0, r0, r0
    5ae4:	00013e03 	andeq	r3, r1, r3, lsl #28
    5ae8:	03010402 	movweq	r0, #5122	; 0x1402
    5aec:	0200010a 	andeq	r0, r0, #-2147483646	; 0x80000002
    5af0:	00210104 	eoreq	r0, r1, r4, lsl #2
    5af4:	1f010402 	svcne	0x00010402
    5af8:	01040200 	mrseq	r0, R12_usr
    5afc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5b00:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5b04:	30210104 	eorcc	r0, r1, r4, lsl #2
    5b08:	00080221 	andeq	r0, r8, r1, lsr #4
    5b0c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5b10:	00212c02 	eoreq	r2, r1, r2, lsl #24
    5b14:	00d70300 	sbcseq	r0, r7, r0, lsl #6
    5b18:	04020001 	streq	r0, [r2], #-1
    5b1c:	010c0301 	tsteq	ip, r1, lsl #6
    5b20:	01040200 	mrseq	r0, R12_usr
    5b24:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5b28:	02001f01 	andeq	r1, r0, #1, 30
    5b2c:	00210104 	eoreq	r0, r1, r4, lsl #2
    5b30:	21010402 	tstcs	r1, r2, lsl #8
    5b34:	01040200 	mrseq	r0, R12_usr
    5b38:	05023121 	streq	r3, [r2, #-289]	; 0xfffffedf
    5b3c:	9c010100 	stflss	f0, [r1], {-0}
    5b40:	02000001 	andeq	r0, r0, #1
    5b44:	00013900 	andeq	r3, r1, r0, lsl #18
    5b48:	fb010200 	blx	46352 <__ccfg+0x263aa>
    5b4c:	01000d0e 	tsteq	r0, lr, lsl #26
    5b50:	00010101 	andeq	r0, r1, r1, lsl #2
    5b54:	00010000 	andeq	r0, r1, r0
    5b58:	2f2e0100 	svccs	0x002e0100
    5b5c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5b60:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5b64:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    5b68:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    5b6c:	63006269 	movwvs	r6, #617	; 0x269
    5b70:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5b74:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5b78:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5b7c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5b80:	5f393130 	svcpl	0x00393130
    5b84:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5b88:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5b8c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5b90:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5b94:	6f745c36 	svcvs	0x00745c36
    5b98:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5b9c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5ba0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5ba4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5ba8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5bac:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5bb0:	61652d65 	cmnvs	r5, r5, ror #26
    5bb4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5bb8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5bbc:	71353130 	teqvc	r5, r0, lsr r1
    5bc0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5bc4:	6f6e2d6d 	svcvs	0x006e2d6d
    5bc8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5bcc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5bd0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5bd4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5bd8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5bdc:	00656e69 	rsbeq	r6, r5, r9, ror #28
    5be0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5be4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5be8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5bec:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5bf0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5bf4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5bf8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5bfc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5c00:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5c04:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5c08:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5c0c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5aa4 <__exidx_end+0x2b9c>
    5c10:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5c14:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5c18:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5c1c:	6f6e2d6d 	svcvs	0x006e2d6d
    5c20:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5c24:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5c28:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5c2c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5c30:	615c3371 	cmpvs	ip, r1, ror r3
    5c34:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5c38:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5c3c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5c40:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5c44:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5c48:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    5c4c:	70630000 	rsbvc	r0, r3, r0
    5c50:	00632e75 	rsbeq	r2, r3, r5, ror lr
    5c54:	5f000001 	svcpl	0x00000001
    5c58:	61666564 	cmnvs	r6, r4, ror #10
    5c5c:	5f746c75 	svcpl	0x00746c75
    5c60:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    5c64:	00682e73 	rsbeq	r2, r8, r3, ror lr
    5c68:	5f000002 	svcpl	0x00000002
    5c6c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    5c70:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    5c74:	00000300 	andeq	r0, r0, r0, lsl #6
    5c78:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    5c7c:	00010068 	andeq	r0, r1, r8, rrx
    5c80:	05000000 	streq	r0, [r0, #-0]
    5c84:	00214402 	eoreq	r4, r1, r2, lsl #8
    5c88:	00f50300 	rscseq	r0, r5, r0, lsl #6
    5c8c:	01120301 	tsteq	r2, r1, lsl #6
    5c90:	01000402 	tsteq	r0, r2, lsl #8
    5c94:	02050001 	andeq	r0, r5, #1
    5c98:	00000000 	andeq	r0, r0, r0
    5c9c:	0101c003 	tsteq	r1, r3
    5ca0:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    5ca4:	01010003 	tsteq	r1, r3
    5ca8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    5cac:	03000021 	movweq	r0, #33	; 0x21
    5cb0:	0301028d 	movweq	r0, #4749	; 0x128d
    5cb4:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    5cb8:	00010100 	andeq	r0, r1, r0, lsl #2
    5cbc:	00000205 	andeq	r0, r0, r5, lsl #4
    5cc0:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    5cc4:	11030102 	tstne	r3, r2, lsl #2
    5cc8:	00030201 	andeq	r0, r3, r1, lsl #4
    5ccc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5cd0:	00000002 	andeq	r0, r0, r2
    5cd4:	039e0300 	orrseq	r0, lr, #0, 6
    5cd8:	04021601 	streq	r1, [r2], #-1537	; 0xfffff9ff
    5cdc:	e9010100 	stmdb	r1, {r8}
    5ce0:	02000001 	andeq	r0, r0, #1
    5ce4:	00016700 	andeq	r6, r1, r0, lsl #14
    5ce8:	fb010200 	blx	464f2 <__ccfg+0x2654a>
    5cec:	01000d0e 	tsteq	r0, lr, lsl #26
    5cf0:	00010101 	andeq	r0, r1, r1, lsl #2
    5cf4:	00010000 	andeq	r0, r1, r0
    5cf8:	2f2e0100 	svccs	0x002e0100
    5cfc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5d00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5d04:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    5d08:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    5d0c:	63006269 	movwvs	r6, #617	; 0x269
    5d10:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5d14:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5d18:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5d1c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5d20:	5f393130 	svcpl	0x00393130
    5d24:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5d28:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5d2c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5d30:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5d34:	6f745c36 	svcvs	0x00745c36
    5d38:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5d3c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5d40:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5d44:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5d48:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5d4c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5d50:	61652d65 	cmnvs	r5, r5, ror #26
    5d54:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5d58:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5d5c:	71353130 	teqvc	r5, r0, lsr r1
    5d60:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5d64:	6f6e2d6d 	svcvs	0x006e2d6d
    5d68:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5d6c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5d70:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5d74:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5d78:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5d7c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    5d80:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5d84:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5d88:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5d8c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5d90:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5d94:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5d98:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5d9c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5da0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5da4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5da8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5dac:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5c44 <__exidx_end+0x2d3c>
    5db0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5db4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5db8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5dbc:	6f6e2d6d 	svcvs	0x006e2d6d
    5dc0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5dc4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5dc8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5dcc:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5dd0:	615c3371 	cmpvs	ip, r1, ror r3
    5dd4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5dd8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5ddc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5de0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5de4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5de8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    5dec:	65730000 	ldrbvs	r0, [r3, #-0]!
    5df0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    5df4:	00010063 	andeq	r0, r1, r3, rrx
    5df8:	6e6f6100 	powvse	f6, f7, f0
    5dfc:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    5e00:	0100682e 	tsteq	r0, lr, lsr #16
    5e04:	645f0000 	ldrbvs	r0, [pc], #-0	; 5e0c <__exidx_end+0x2f04>
    5e08:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5e0c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5e14 <__exidx_end+0x2f0c>
    5e10:	73657079 	cmnvc	r5, #121	; 0x79
    5e14:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5e18:	735f0000 	cmpvc	pc, #0
    5e1c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5e20:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5e24:	73000003 	movwvc	r0, #3
    5e28:	70757465 	rsbsvc	r7, r5, r5, ror #8
    5e2c:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 5cb8 <__exidx_end+0x2db0>
    5e30:	0100682e 	tsteq	r0, lr, lsr #16
    5e34:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    5e38:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    5e3c:	682e6f66 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
    5e40:	00000100 	andeq	r0, r0, r0, lsl #2
    5e44:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5e48:	00682e70 	rsbeq	r2, r8, r0, ror lr
    5e4c:	00000001 	andeq	r0, r0, r1
    5e50:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    5e54:	03000021 	movweq	r0, #33	; 0x21
    5e58:	2001028d 	andcs	r0, r1, sp, lsl #5
    5e5c:	00200a03 	eoreq	r0, r0, r3, lsl #20
    5e60:	41010402 	tstmi	r1, r2, lsl #8
    5e64:	2d43424f 	sfmcs	f4, 2, [r3, #-316]	; 0xfffffec4
    5e68:	02041f21 	andeq	r1, r4, #33, 30	; 0x84
    5e6c:	66048703 	strvs	r8, [r4], -r3, lsl #14
    5e70:	86030104 	strhi	r0, [r3], -r4, lsl #2
    5e74:	42363c7c 	eorsmi	r3, r6, #124, 24	; 0x7c00
    5e78:	2d4a0903 	vstrcs.16	s1, [sl, #-6]	; <UNPREDICTABLE>
    5e7c:	1f2f2f3d 	svcne	0x002f2f3d
    5e80:	23212f2f 			; <UNDEFINED> instruction: 0x23212f2f
    5e84:	03254831 			; <UNDEFINED> instruction: 0x03254831
    5e88:	5d41580a 	stclpl	8, cr5, [r1, #-40]	; 0xffffffd8
    5e8c:	001e023f 	andseq	r0, lr, pc, lsr r2
    5e90:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5e94:	00222802 	eoreq	r2, r2, r2, lsl #16
    5e98:	00f00300 	rscseq	r0, r0, r0, lsl #6
    5e9c:	43302801 	teqmi	r0, #65536	; 0x10000
    5ea0:	09034133 	stmdbeq	r3, {r0, r1, r4, r5, r8, lr}
    5ea4:	0b03333c 	bleq	d2b9c <__ccfg+0xb2bf4>
    5ea8:	3c0e032e 	stccc	3, cr0, [lr], {46}	; 0x2e
    5eac:	20790327 	rsbscs	r0, r9, r7, lsr #6
    5eb0:	03201503 			; <UNDEFINED> instruction: 0x03201503
    5eb4:	67422e09 	strbvs	r2, [r2, -r9, lsl #28]
    5eb8:	20090349 	andcs	r0, r9, r9, asr #6
    5ebc:	69242d59 	stmdbvs	r4!, {r0, r3, r4, r6, r8, sl, fp, sp}
    5ec0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
    5ec4:	024d2701 	subeq	r2, sp, #262144	; 0x40000
    5ec8:	01010013 	tsteq	r1, r3, lsl r0
    5ecc:	00000457 	andeq	r0, r0, r7, asr r4
    5ed0:	01650002 	cmneq	r5, r2
    5ed4:	01020000 	mrseq	r0, (UNDEF: 2)
    5ed8:	000d0efb 	strdeq	r0, [sp], -fp
    5edc:	01010101 	tsteq	r1, r1, lsl #2
    5ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    5ee4:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5ee8:	2f2e2e2f 	svccs	0x002e2e2f
    5eec:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5ef0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    5ef4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5ef8:	0062696c 	rsbeq	r6, r2, ip, ror #18
    5efc:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5f00:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5f04:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5f08:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5f0c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5f10:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5f14:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5f18:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5f1c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5f20:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5f24:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5f28:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5dc0 <__exidx_end+0x2eb8>
    5f2c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5f30:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5f34:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5f38:	6f6e2d6d 	svcvs	0x006e2d6d
    5f3c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5f40:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5f44:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5f48:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5f4c:	615c3371 	cmpvs	ip, r1, ror r3
    5f50:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5f54:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5f58:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5f5c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5f60:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5f64:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    5f68:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    5f6c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5f70:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5f74:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5f78:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5f7c:	31303030 	teqcc	r0, r0, lsr r0
    5f80:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5f84:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5f88:	61746562 	cmnvs	r4, r2, ror #10
    5f8c:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5f90:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5f94:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5dcc <__exidx_end+0x2ec4>
    5f98:	6f635c73 	svcvs	0x00635c73
    5f9c:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5fa0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5fa4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5fa8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5fac:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5fb0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5fb4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5fb8:	3130322d 	teqcc	r0, sp, lsr #4
    5fbc:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5fc0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5fc4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5fc8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5fcc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5fd0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5fd4:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    5fd8:	73000073 	movwvc	r0, #115	; 0x73
    5fdc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    5fe0:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 5e6c <__exidx_end+0x2f64>
    5fe4:	0100632e 	tsteq	r0, lr, lsr #6
    5fe8:	65730000 	ldrbvs	r0, [r3, #-0]!
    5fec:	5f707574 	svcpl	0x00707574
    5ff0:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    5ff4:	00010068 	andeq	r0, r1, r8, rrx
    5ff8:	73797300 	cmnvc	r9, #0, 6
    5ffc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    6000:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    6004:	5f000001 	svcpl	0x00000001
    6008:	61666564 	cmnvs	r6, r4, ror #10
    600c:	5f746c75 	svcpl	0x00746c75
    6010:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6014:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6018:	5f000002 	svcpl	0x00000002
    601c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6020:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6024:	00000300 	andeq	r0, r0, r0, lsl #6
    6028:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    602c:	00010068 	andeq	r0, r1, r8, rrx
    6030:	63736f00 	cmnvs	r3, #0, 30
    6034:	0100682e 	tsteq	r0, lr, lsr #16
    6038:	00000000 	andeq	r0, r0, r0
    603c:	22cc0205 	sbccs	r0, ip, #1342177280	; 0x50000000
    6040:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    6044:	0b030100 	bleq	c644c <__ccfg+0xa64a4>
    6048:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    604c:	03207203 			; <UNDEFINED> instruction: 0x03207203
    6050:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    6054:	2000d703 	andcs	sp, r0, r3, lsl #14
    6058:	a8030104 	stmdage	r3, {r2, r8}
    605c:	0204207f 	andeq	r2, r4, #127	; 0x7f
    6060:	2e00d903 	vmlacs.f16	s26, s0, s6	; <UNPREDICTABLE>
    6064:	0104212d 	tsteq	r4, sp, lsr #2
    6068:	2e7fac03 	cdpcs	12, 7, cr10, cr15, cr3, {0}
    606c:	2f214d30 	svccs	0x00214d30
    6070:	22222265 	eorcs	r2, r2, #1342177286	; 0x50000006
    6074:	7803221e 	stmdavc	r3, {r1, r2, r3, r4, r9, sp}
    6078:	200d0358 	andcs	r0, sp, r8, asr r3
    607c:	033c7303 	teqeq	ip, #201326592	; 0xc000000
    6080:	21212010 			; <UNDEFINED> instruction: 0x21212010
    6084:	0d022121 	stfeqs	f2, [r2, #-132]	; 0xffffff7c
    6088:	00010100 	andeq	r0, r1, r0, lsl #2
    608c:	23480205 	movtcs	r0, #33285	; 0x8205
    6090:	bf030000 	svclt	0x00030000
    6094:	031a0101 	tsteq	sl, #1073741824	; 0x40000000
    6098:	28204a78 	stmdacs	r0!, {r3, r4, r5, r6, r9, fp, lr}
    609c:	03200e03 			; <UNDEFINED> instruction: 0x03200e03
    60a0:	03422e7a 	movteq	r2, #11898	; 0x2e7a
    60a4:	31302e0e 	teqcc	r0, lr, lsl #28
    60a8:	042d432d 	strteq	r4, [sp], #-813	; 0xfffffcd3
    60ac:	04213002 	strteq	r3, [r1], #-2
    60b0:	2e0b0301 	cdpcs	3, 0, cr0, cr11, cr1, {0}
    60b4:	23652f3d 	cmncs	r5, #61, 30	; 0xf4
    60b8:	4d660c03 	stclmi	12, cr0, [r6, #-12]!
    60bc:	2d28302c 	stccs	0, cr3, [r8, #-176]!	; 0xffffff50
    60c0:	15022d52 	strne	r2, [r2, #-3410]	; 0xfffff2ae
    60c4:	00010100 	andeq	r0, r1, r0, lsl #2
    60c8:	23f40205 	mvnscs	r0, #1342177280	; 0x50000000
    60cc:	9f030000 	svcls	0x00030000
    60d0:	0c030104 	stfeqs	f0, [r3], {4}
    60d4:	20090301 	andcs	r0, r9, r1, lsl #6
    60d8:	21207703 			; <UNDEFINED> instruction: 0x21207703
    60dc:	30273331 	eorcc	r3, r7, r1, lsr r3
    60e0:	2d223130 	stfcss	f3, [r2, #-192]!	; 0xffffff40
    60e4:	3d31351d 	cfldr32cc	mvfx3, [r1, #-116]!	; 0xffffff8c
    60e8:	3b223d3e 	blcc	8955e8 <__ccfg+0x875640>
    60ec:	7603271d 			; <UNDEFINED> instruction: 0x7603271d
    60f0:	2e120320 	cdpcs	3, 1, cr0, cr2, cr0, {1}
    60f4:	01000602 	tsteq	r0, r2, lsl #12
    60f8:	02050001 	andeq	r0, r5, #1
    60fc:	00002450 	andeq	r2, r0, r0, asr r4
    6100:	0104e503 	tsteq	r4, r3, lsl #10
    6104:	79033418 	stmdbvc	r3, {r3, r4, sl, ip, sp}
    6108:	02333620 	eorseq	r3, r3, #32, 12	; 0x2000000
    610c:	01010005 	tsteq	r1, r5
    6110:	00020500 	andeq	r0, r2, r0, lsl #10
    6114:	03000000 	movweq	r0, #0
    6118:	18010581 	stmdane	r1, {r0, r7, r8, sl}
    611c:	00060233 	andeq	r0, r6, r3, lsr r2
    6120:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6124:	00246802 	eoreq	r6, r4, r2, lsl #16
    6128:	05950300 	ldreq	r0, [r5, #768]	; 0x300
    612c:	13031901 	movwne	r1, #14593	; 0x3901
    6130:	0006022e 	andeq	r0, r6, lr, lsr #4
    6134:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6138:	00247802 	eoreq	r7, r4, r2, lsl #16
    613c:	05b80300 	ldreq	r0, [r8, #768]!	; 0x300
    6140:	13031901 	movwne	r1, #14593	; 0x3901
    6144:	0008022e 	andeq	r0, r8, lr, lsr #4
    6148:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    614c:	00248c02 	eoreq	r8, r4, r2, lsl #24
    6150:	05db0300 	ldrbeq	r0, [fp, #768]	; 0x300
    6154:	200b0301 	andcs	r0, fp, r1, lsl #6
    6158:	03200903 			; <UNDEFINED> instruction: 0x03200903
    615c:	09032077 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, sp}
    6160:	20790320 	rsbscs	r0, r9, r0, lsr #6
    6164:	22322a35 	eorscs	r2, r2, #217088	; 0x35000
    6168:	47323031 			; <UNDEFINED> instruction: 0x47323031
    616c:	47323027 	ldrmi	r3, [r2, -r7, lsr #32]!
    6170:	372e1703 	strcc	r1, [lr, -r3, lsl #14]!
    6174:	02273a36 	eoreq	r3, r7, #221184	; 0x36000
    6178:	01010008 	tsteq	r1, r8
    617c:	f0020500 			; <UNDEFINED> instruction: 0xf0020500
    6180:	03000024 	movweq	r0, #36	; 0x24
    6184:	150106a9 	strne	r0, [r1, #-1705]	; 0xfffff957
    6188:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    618c:	00030220 	andeq	r0, r3, r0, lsr #4
    6190:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6194:	00250402 	eoreq	r0, r5, r2, lsl #8
    6198:	06bc0300 	ldrteq	r0, [ip], r0, lsl #6
    619c:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    61a0:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    61a4:	01010003 	tsteq	r1, r3
    61a8:	18020500 	stmdane	r2, {r8, sl}
    61ac:	03000025 	movweq	r0, #37	; 0x25
    61b0:	150106cf 	strne	r0, [r1, #-1743]	; 0xfffff931
    61b4:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    61b8:	00030220 	andeq	r0, r3, r0, lsr #4
    61bc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    61c0:	00252c02 	eoreq	r2, r5, r2, lsl #24
    61c4:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    61c8:	43211601 			; <UNDEFINED> instruction: 0x43211601
    61cc:	207a032f 	rsbscs	r0, sl, pc, lsr #6
    61d0:	032c3540 			; <UNDEFINED> instruction: 0x032c3540
    61d4:	16032071 			; <UNDEFINED> instruction: 0x16032071
    61d8:	0003022e 	andeq	r0, r3, lr, lsr #4
    61dc:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    61e0:	00255402 	eoreq	r5, r5, r2, lsl #8
    61e4:	07820300 	streq	r0, [r2, r0, lsl #6]
    61e8:	02331601 	eorseq	r1, r3, #1048576	; 0x100000
    61ec:	01010006 	tsteq	r1, r6
    61f0:	64020500 	strvs	r0, [r2], #-1280	; 0xfffffb00
    61f4:	03000025 	movweq	r0, #37	; 0x25
    61f8:	16010794 			; <UNDEFINED> instruction: 0x16010794
    61fc:	34294321 	strtcc	r4, [r9], #-801	; 0xfffffcdf
    6200:	20790333 	rsbscs	r0, r9, r3, lsr r3
    6204:	71031e35 	tstvc	r3, r5, lsr lr
    6208:	2016032e 	andscs	r0, r6, lr, lsr #6
    620c:	01000502 	tsteq	r0, r2, lsl #10
    6210:	02050001 	andeq	r0, r5, #1
    6214:	00002590 	muleq	r0, r0, r5
    6218:	0107b403 	tsteq	r7, r3, lsl #8
    621c:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    6220:	03022009 	movweq	r2, #8201	; 0x2009
    6224:	00010100 	andeq	r0, r1, r0, lsl #2
    6228:	25a40205 	strcs	r0, [r4, #517]!	; 0x205
    622c:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    6230:	21150107 	tstcs	r5, r7, lsl #2
    6234:	200a0355 	andcs	r0, sl, r5, asr r3
    6238:	01000302 	tsteq	r0, r2, lsl #6
    623c:	02050001 	andeq	r0, r5, #1
    6240:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
    6244:	0102a703 	tsteq	r2, r3, lsl #14
    6248:	20090320 	andcs	r0, r9, r0, lsr #6
    624c:	4e211f3d 	mcrmi	15, 1, r1, cr1, cr13, {1}
    6250:	02d1032f 	sbcseq	r0, r1, #-1140850688	; 0xbc000000
    6254:	7db903ac 	ldcvc	3, cr0, [r9, #688]!	; 0x2b0
    6258:	02c70320 	sbceq	r0, r7, #32, 6	; 0x80000000
    625c:	7db90320 	ldcvc	3, cr0, [r9, #128]!	; 0x80
    6260:	1f2f5c20 	svcne	0x002f5c20
    6264:	1f2f3d21 	svcne	0x002f3d21
    6268:	1f3d3d21 	svcne	0x003d3d21
    626c:	6e3d4321 	cdpvs	3, 3, cr4, cr13, cr1, {1}
    6270:	1f3d523d 	svcne	0x003d523d
    6274:	3c090321 	stccc	3, cr0, [r9], {33}	; 0x21
    6278:	660a033d 			; <UNDEFINED> instruction: 0x660a033d
    627c:	660b033d 			; <UNDEFINED> instruction: 0x660b033d
    6280:	1f3d7c3d 	svcne	0x003d7c3d
    6284:	024b4021 	subeq	r4, fp, #33	; 0x21
    6288:	01010012 	tsteq	r1, r2, lsl r0
    628c:	c8020500 	stmdagt	r2, {r8, sl}
    6290:	03000026 	movweq	r0, #38	; 0x26
    6294:	000107de 	ldrdeq	r0, [r1], -lr
    6298:	03010402 	movweq	r0, #5122	; 0x1402
    629c:	2352200e 	cmpcs	r2, #14
    62a0:	4d1d231d 	ldcmi	3, cr2, [sp, #-116]	; 0xffffff8c
    62a4:	7a034b68 	bvc	d904c <__ccfg+0xb90a4>
    62a8:	00413420 	subeq	r3, r1, r0, lsr #8
    62ac:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    62b0:	0b02315b 	bleq	92824 <__ccfg+0x7287c>
    62b4:	00010100 	andeq	r0, r1, r0, lsl #2
    62b8:	272c0205 	strcs	r0, [ip, -r5, lsl #4]!
    62bc:	93030000 	movwls	r0, #12288	; 0x3000
    62c0:	09030108 	stmdbeq	r3, {r3, r8}
    62c4:	212d2f01 			; <UNDEFINED> instruction: 0x212d2f01
    62c8:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
    62cc:	024b3d01 	subeq	r3, fp, #1, 26	; 0x40
    62d0:	01010007 	tsteq	r1, r7
    62d4:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
    62d8:	03000027 	movweq	r0, #39	; 0x27
    62dc:	0301039b 	movweq	r0, #5019	; 0x139b
    62e0:	77030109 	strvc	r0, [r3, -r9, lsl #2]
    62e4:	0903203c 	stmdbeq	r3, {r2, r3, r4, r5, sp}
    62e8:	31305220 	teqcc	r0, r0, lsr #4
    62ec:	234a0a03 	movtcs	r0, #43523	; 0xaa03
    62f0:	24484c2b 	strbcs	r4, [r8], #-3115	; 0xfffff3d5
    62f4:	33762d2f 	cmncc	r6, #3008	; 0xbc0
    62f8:	501c3229 	andspl	r3, ip, r9, lsr #4
    62fc:	4f3d5226 	svcmi	0x003d5226
    6300:	845d2f4d 	ldrbhi	r2, [sp], #-3917	; 0xfffff0b3
    6304:	3d243d4b 	stccc	13, cr3, [r4, #-300]!	; 0xfffffed4
    6308:	01040200 	mrseq	r0, R12_usr
    630c:	4b2f5b4b 	blmi	bdd040 <__ccfg+0xbbd098>
    6310:	033f4d86 	teqeq	pc, #8576	; 0x2180
    6314:	221e4a09 	andscs	r4, lr, #36864	; 0x9000
    6318:	3c0b031e 	stccc	3, cr0, [fp], {30}
    631c:	b9030304 	stmdblt	r3, {r2, r8, r9}
    6320:	1f024a7d 	svcne	0x00024a7d
    6324:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
    6328:	02000003 	andeq	r0, r0, #3
    632c:	0001a800 	andeq	sl, r1, r0, lsl #16
    6330:	fb010200 	blx	46b3a <__ccfg+0x26b92>
    6334:	01000d0e 	tsteq	r0, lr, lsl #26
    6338:	00010101 	andeq	r0, r1, r1, lsl #2
    633c:	00010000 	andeq	r0, r1, r0
    6340:	2f2e0100 	svccs	0x002e0100
    6344:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6348:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    634c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6350:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6354:	63006269 	movwvs	r6, #617	; 0x269
    6358:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    635c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6360:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6364:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6368:	5f393130 	svcpl	0x00393130
    636c:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6370:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6374:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6378:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    637c:	6f745c36 	svcvs	0x00745c36
    6380:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6384:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6388:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    638c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6390:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6394:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6398:	61652d65 	cmnvs	r5, r5, ror #26
    639c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    63a0:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    63a4:	71353130 	teqvc	r5, r0, lsr r1
    63a8:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    63ac:	6f6e2d6d 	svcvs	0x006e2d6d
    63b0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    63b4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    63b8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    63bc:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    63c0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    63c4:	00656e69 	rsbeq	r6, r5, r9, ror #28
    63c8:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    63cc:	63635c69 	cmnvs	r3, #26880	; 0x6900
    63d0:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    63d4:	302e302e 	eorcc	r3, lr, lr, lsr #32
    63d8:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    63dc:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    63e0:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    63e4:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    63e8:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    63ec:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    63f0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    63f4:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 628c <__exidx_end+0x3384>
    63f8:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    63fc:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6400:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6404:	6f6e2d6d 	svcvs	0x006e2d6d
    6408:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    640c:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6410:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6414:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6418:	615c3371 	cmpvs	ip, r1, ror r3
    641c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6420:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6424:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6428:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    642c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6430:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6434:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6438:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    643c:	2f2e2e2f 	svccs	0x002e2e2f
    6440:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6444:	73797300 	cmnvc	r9, #0, 6
    6448:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    644c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    6450:	61000001 	tstvs	r0, r1
    6454:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    6458:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    645c:	00000100 	andeq	r0, r0, r0, lsl #2
    6460:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    6464:	00010068 	andeq	r0, r1, r8, rrx
    6468:	63727000 	cmnvs	r2, #0
    646c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6470:	73000001 	movwvc	r0, #1
    6474:	70757465 	rsbsvc	r7, r5, r5, ror #8
    6478:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 6304 <__exidx_end+0x33fc>
    647c:	0100682e 	tsteq	r0, lr, lsr #16
    6480:	645f0000 	ldrbvs	r0, [pc], #-0	; 6488 <__exidx_end+0x3580>
    6484:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6488:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6490 <__exidx_end+0x3588>
    648c:	73657079 	cmnvc	r5, #121	; 0x79
    6490:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    6494:	735f0000 	cmpvc	pc, #0
    6498:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    649c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    64a0:	68000003 	stmdavs	r0, {r0, r1}
    64a4:	79745f77 	ldmdbvc	r4!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    64a8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    64ac:	00040068 	andeq	r0, r4, r8, rrx
    64b0:	6d6f7200 	sfmvs	f7, 2, [pc, #-0]	; 64b8 <__exidx_end+0x35b0>
    64b4:	0100682e 	tsteq	r0, lr, lsr #16
    64b8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    64bc:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    64c0:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
    64c4:	00000100 	andeq	r0, r0, r0, lsl #2
    64c8:	5f6e6f61 	svcpl	0x006e6f61
    64cc:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    64d0:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    64d4:	00000100 	andeq	r0, r0, r0, lsl #2
    64d8:	02050000 	andeq	r0, r5, #0
    64dc:	00000000 	andeq	r0, r0, r0
    64e0:	0100f903 	tsteq	r0, r3, lsl #18	; <UNPREDICTABLE>
    64e4:	e9030204 	stmdb	r3, {r2, r9}
    64e8:	01040102 	tsteq	r4, r2, lsl #2
    64ec:	2e7d9703 	cdpcs	7, 7, cr9, cr13, cr3, {0}
    64f0:	e9030204 	stmdb	r3, {r2, r9}
    64f4:	02002e02 	andeq	r2, r0, #2, 28
    64f8:	ce030104 	adfgts	f0, f3, f4
    64fc:	01042000 	mrseq	r2, (UNDEF: 4)
    6500:	01040200 	mrseq	r0, R12_usr
    6504:	2e7cd103 	expcse	f5, f3
    6508:	002e0c03 	eoreq	r0, lr, r3, lsl #24
    650c:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    6510:	09034b89 	stmdbeq	r3, {r0, r3, r7, r8, r9, fp, lr}
    6514:	0303044a 	movweq	r0, #13386	; 0x344a
    6518:	045801a5 	ldrbeq	r0, [r8], #-421	; 0xfffffe5b
    651c:	7ee40301 	cdpvc	3, 14, cr0, cr4, cr1, {0}
    6520:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    6524:	04045d01 	streq	r5, [r4], #-3329	; 0xfffff2ff
    6528:	74038103 	strvc	r8, [r3], #-259	; 0xfffffefd
    652c:	01040200 	mrseq	r0, R12_usr
    6530:	043c1403 	ldrteq	r1, [ip], #-1027	; 0xfffffbfd
    6534:	04020001 	streq	r0, [r2], #-1
    6538:	7cef0301 	stclvc	3, cr0, [pc], #4	; 6544 <__exidx_end+0x363c>
    653c:	0304042e 	movweq	r0, #17454	; 0x442e
    6540:	322e03b7 	eorcc	r0, lr, #-603979774	; 0xdc000002
    6544:	4203241c 	andmi	r2, r3, #28, 8	; 0x1c000000
    6548:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    654c:	2e140301 	cdpcs	3, 1, cr0, cr4, cr1, {0}
    6550:	02000104 	andeq	r0, r0, #4, 2
    6554:	f7030104 			; <UNDEFINED> instruction: 0xf7030104
    6558:	0903207c 	stmdbeq	r3, {r2, r3, r4, r5, r6, sp}
    655c:	281b412e 	ldmdacs	fp, {r1, r2, r3, r5, r8, lr}
    6560:	24384b83 	ldrtcs	r4, [r8], #-2947	; 0xfffff47d
    6564:	0304041b 	movweq	r0, #17435	; 0x441b
    6568:	002e02e7 	eoreq	r0, lr, r7, ror #5
    656c:	03010402 	movweq	r0, #5122	; 0x1402
    6570:	01043c14 	tsteq	r4, r4, lsl ip
    6574:	01040200 	mrseq	r0, R12_usr
    6578:	207d8d03 	rsbscs	r8, sp, r3, lsl #26
    657c:	00170230 	andseq	r0, r7, r0, lsr r2
    6580:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6584:	0028a402 	eoreq	sl, r8, r2, lsl #8
    6588:	01da0300 	bicseq	r0, sl, r0, lsl #6
    658c:	2e1d0301 	cdpcs	3, 1, cr0, cr13, cr1, {0}
    6590:	03206303 			; <UNDEFINED> instruction: 0x03206303
    6594:	2f59201d 	svccs	0x0059201d
    6598:	22323241 	eorscs	r3, r2, #268435460	; 0x10000004
    659c:	9421321c 	strtls	r3, [r1], #-540	; 0xfffffde4
    65a0:	041b325c 	ldreq	r3, [fp], #-604	; 0xfffffda4
    65a4:	2e5f0305 	cdpcs	3, 5, cr0, cr15, cr5, {0}
    65a8:	03010421 	movweq	r0, #5153	; 0x1421
    65ac:	32432e24 	subcc	r2, r3, #36, 28	; 0x240
    65b0:	0504331b 	streq	r3, [r4, #-795]	; 0xfffffce5
    65b4:	21205003 			; <UNDEFINED> instruction: 0x21205003
    65b8:	2e030104 	adfcss	f0, f3, f4
    65bc:	0305042e 	movweq	r0, #21550	; 0x542e
    65c0:	01042e51 	tsteq	r4, r1, asr lr
    65c4:	04203403 	strteq	r3, [r0], #-1027	; 0xfffffbfd
    65c8:	204d0305 	subcs	r0, sp, r5, lsl #6
    65cc:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    65d0:	23652f2e 	cmncs	r5, #46, 30	; 0xb8
    65d4:	214d2f69 	cmpcs	sp, r9, ror #30
    65d8:	0032213e 	eorseq	r2, r2, lr, lsr r1
    65dc:	06010402 	streq	r0, [r1], -r2, lsl #8
    65e0:	0f030658 	svceq	0x00030658
    65e4:	2f3fca4a 	svccs	0x003fca4a
    65e8:	2b24242a 	blcs	90f698 <__ccfg+0x8ef6f0>
    65ec:	31934032 	orrscc	r4, r3, r2, lsr r0
    65f0:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    65f4:	3c630321 	stclcc	3, cr0, [r3], #-132	; 0xffffff7c
    65f8:	2026032d 	eorcs	r0, r6, sp, lsr #6
    65fc:	3e3d3131 	mrccc	1, 1, r3, cr13, cr1, {1}
    6600:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    6604:	03212e0b 			; <UNDEFINED> instruction: 0x03212e0b
    6608:	09033c78 	stmdbeq	r3, {r3, r4, r5, r6, sl, fp, ip, sp}
    660c:	2e770320 	cdpcs	3, 7, cr0, cr7, cr0, {1}
    6610:	213c0e03 	teqcs	ip, r3, lsl #28
    6614:	03207103 			; <UNDEFINED> instruction: 0x03207103
    6618:	1d7b3c0f 	ldclne	12, cr3, [fp, #-60]!	; 0xffffffc4
    661c:	22652123 	rsbcs	r2, r5, #-1073741816	; 0xc0000008
    6620:	03282321 			; <UNDEFINED> instruction: 0x03282321
    6624:	21342078 	teqcs	r4, r8, ror r0
    6628:	213d4c22 	teqcs	sp, r2, lsr #24
    662c:	322c403e 	eorcc	r4, ip, #62	; 0x3e
    6630:	0021023d 	eoreq	r0, r1, sp, lsr r2
    6634:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6638:	002ac402 	eoreq	ip, sl, r2, lsl #8
    663c:	03b60300 			; <UNDEFINED> instruction: 0x03b60300
    6640:	22402701 	subcs	r2, r0, #262144	; 0x40000
    6644:	4e24a22f 	cdpmi	2, 2, cr10, cr4, cr15, {1}
    6648:	864e2a40 	strbhi	r2, [lr], -r0, asr #20
    664c:	01000902 	tsteq	r0, r2, lsl #18
    6650:	02050001 	andeq	r0, r5, #1
    6654:	00000000 	andeq	r0, r0, r0
    6658:	0103e503 	tsteq	r3, r3, lsl #10
    665c:	2f200c03 	svccs	0x00200c03
    6660:	2d5a3028 	ldclcs	0, cr3, [sl, #-160]	; 0xffffff60
    6664:	1f322d30 	svcne	0x00322d30
    6668:	2f2b2421 	svccs	0x002b2421
    666c:	2f24322c 	svccs	0x0024322c
    6670:	4b2f3430 	blmi	bd3738 <__ccfg+0xbb3790>
    6674:	023e1e22 	eorseq	r1, lr, #544	; 0x220
    6678:	0101000c 	tsteq	r1, ip
    667c:	24020500 	strcs	r0, [r2], #-1280	; 0xfffffb00
    6680:	0300002b 	movweq	r0, #43	; 0x2b
    6684:	130104a6 	movwne	r0, #5286	; 0x14a6
    6688:	0226483f 	eoreq	r4, r6, #4128768	; 0x3f0000
    668c:	01010004 	tsteq	r1, r4
    6690:	0000022b 	andeq	r0, r0, fp, lsr #4
    6694:	01430002 	cmpeq	r3, r2
    6698:	01020000 	mrseq	r0, (UNDEF: 2)
    669c:	000d0efb 	strdeq	r0, [sp], -fp
    66a0:	01010101 	tsteq	r1, r1, lsl #2
    66a4:	01000000 	mrseq	r0, (UNDEF: 0)
    66a8:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    66ac:	2f2e2e2f 	svccs	0x002e2e2f
    66b0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    66b4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    66b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    66bc:	0062696c 	rsbeq	r6, r2, ip, ror #18
    66c0:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    66c4:	63635c69 	cmnvs	r3, #26880	; 0x6900
    66c8:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    66cc:	302e302e 	eorcc	r3, lr, lr, lsr #32
    66d0:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    66d4:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    66d8:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    66dc:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    66e0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    66e4:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    66e8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    66ec:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6584 <__exidx_end+0x367c>
    66f0:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    66f4:	63675c72 	cmnvs	r7, #29184	; 0x7200
    66f8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    66fc:	6f6e2d6d 	svcvs	0x006e2d6d
    6700:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6704:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6708:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    670c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6710:	615c3371 	cmpvs	ip, r1, ror r3
    6714:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6718:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    671c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6720:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6724:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6728:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    672c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6730:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6734:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6738:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    673c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6740:	31303030 	teqcc	r0, r0, lsr r0
    6744:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6748:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    674c:	61746562 	cmnvs	r4, r2, ror #10
    6750:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6754:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6758:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6590 <__exidx_end+0x3688>
    675c:	6f635c73 	svcvs	0x00635c73
    6760:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6764:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6768:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    676c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6770:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6774:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6778:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    677c:	3130322d 	teqcc	r0, sp, lsr #4
    6780:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6784:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6788:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    678c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6790:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6794:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6798:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    679c:	63000073 	movwvs	r0, #115	; 0x73
    67a0:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    67a4:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    67a8:	00010063 	andeq	r0, r1, r3, rrx
    67ac:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    67b0:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    67b4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    67b8:	5f000001 	svcpl	0x00000001
    67bc:	61666564 	cmnvs	r6, r4, ror #10
    67c0:	5f746c75 	svcpl	0x00746c75
    67c4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    67c8:	00682e73 	rsbeq	r2, r8, r3, ror lr
    67cc:	5f000002 	svcpl	0x00000002
    67d0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    67d4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    67d8:	00000300 	andeq	r0, r0, r0, lsl #6
    67dc:	02050000 	andeq	r0, r5, #0
    67e0:	00000000 	andeq	r0, r0, r0
    67e4:	0100c403 	tsteq	r0, r3, lsl #8
    67e8:	06022f13 			; <UNDEFINED> instruction: 0x06022f13
    67ec:	00010100 	andeq	r0, r1, r0, lsl #2
    67f0:	00000205 	andeq	r0, r0, r5, lsl #4
    67f4:	d0030000 	andle	r0, r3, r0
    67f8:	2f140100 	svccs	0x00140100
    67fc:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    6800:	01010008 	tsteq	r1, r8
    6804:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    6808:	0300002b 	movweq	r0, #43	; 0x2b
    680c:	1a0100e6 	bne	46bac <__ccfg+0x26c04>
    6810:	02044e2a 	andeq	r4, r4, #672	; 0x2a0
    6814:	2e019b03 	vmlacs.f64	d9, d1, d3
    6818:	e6030104 	str	r0, [r3], -r4, lsl #2
    681c:	4c232e7e 	stcmi	14, cr2, [r3], #-504	; 0xfffffe08
    6820:	2f724b4b 	svccs	0x00724b4b
    6824:	00050224 	andeq	r0, r5, r4, lsr #4
    6828:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    682c:	00000002 	andeq	r0, r0, r2
    6830:	01830300 	orreq	r0, r3, r0, lsl #6
    6834:	03020401 	movweq	r0, #9217	; 0x2401
    6838:	042001b0 	strteq	r0, [r0], #-432	; 0xfffffe50
    683c:	7ed60301 	cdpvc	3, 13, cr0, cr6, cr1, {0}
    6840:	2331392e 	teqcs	r1, #753664	; 0xb8000
    6844:	033c7803 	teqeq	ip, #196608	; 0x30000
    6848:	09034a0a 	stmdbeq	r3, {r1, r3, r9, fp, lr}
    684c:	0502252e 	streq	r2, [r2, #-1326]	; 0xfffffad2
    6850:	00010100 	andeq	r0, r1, r0, lsl #2
    6854:	2b880205 	blcs	fe207070 <_estack+0xde202070>
    6858:	a6030000 	strge	r0, [r3], -r0
    685c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6860:	2000e303 	andcs	lr, r0, r3, lsl #6
    6864:	032e1103 			; <UNDEFINED> instruction: 0x032e1103
    6868:	11033c6f 	tstne	r3, pc, ror #24
    686c:	01042520 	tsteq	r4, r0, lsr #10
    6870:	3c7f8c03 	ldclcc	12, cr8, [pc], #-12	; 686c <__exidx_end+0x3964>
    6874:	22219592 	eorcs	r9, r1, #612368384	; 0x24800000
    6878:	41412221 	cmpmi	r1, r1, lsr #4
    687c:	2e090339 	mcrcs	3, 0, r0, cr9, cr9, {1}
    6880:	2e730327 	cdpcs	3, 7, cr0, cr3, cr7, {1}
    6884:	20640321 	rsbcs	r0, r4, r1, lsr #6
    6888:	02203003 	eoreq	r3, r0, #3
    688c:	01010004 	tsteq	r1, r4
    6890:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    6894:	0300002b 	movweq	r0, #43	; 0x2b
    6898:	040101e0 	streq	r0, [r1], #-480	; 0xfffffe20
    689c:	01a40302 			; <UNDEFINED> instruction: 0x01a40302
    68a0:	03010420 	movweq	r0, #5152	; 0x1420
    68a4:	042e7edd 	strteq	r7, [lr], #-3805	; 0xfffff123
    68a8:	02900302 	addseq	r0, r0, #134217728	; 0x8000000
    68ac:	0301042e 	movweq	r0, #5166	; 0x142e
    68b0:	002e7df0 	strdeq	r7, [lr], -r0	; <UNPREDICTABLE>
    68b4:	03010402 	movweq	r0, #5122	; 0x1402
    68b8:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
    68bc:	1e010100 	adfnes	f0, f1, f0
    68c0:	02000002 	andeq	r0, r0, #2
    68c4:	00014200 	andeq	r4, r1, r0, lsl #4
    68c8:	fb010200 	blx	470d2 <__ccfg+0x2712a>
    68cc:	01000d0e 	tsteq	r0, lr, lsl #26
    68d0:	00010101 	andeq	r0, r1, r1, lsl #2
    68d4:	00010000 	andeq	r0, r1, r0
    68d8:	2f2e0100 	svccs	0x002e0100
    68dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    68e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    68e4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    68e8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    68ec:	63006269 	movwvs	r6, #617	; 0x269
    68f0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    68f4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    68f8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    68fc:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6900:	5f393130 	svcpl	0x00393130
    6904:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6908:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    690c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6910:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6914:	6f745c36 	svcvs	0x00745c36
    6918:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    691c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6920:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6924:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6928:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    692c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6930:	61652d65 	cmnvs	r5, r5, ror #26
    6934:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6938:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    693c:	71353130 	teqvc	r5, r0, lsr r1
    6940:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6944:	6f6e2d6d 	svcvs	0x006e2d6d
    6948:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    694c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6950:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6954:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6958:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    695c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6960:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6964:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6968:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    696c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6970:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6974:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6978:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    697c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6980:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6984:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6988:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    698c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6824 <__exidx_end+0x391c>
    6990:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6994:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6998:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    699c:	6f6e2d6d 	svcvs	0x006e2d6d
    69a0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    69a4:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    69a8:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    69ac:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    69b0:	615c3371 	cmpvs	ip, r1, ror r3
    69b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    69b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    69bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    69c0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    69c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    69c8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    69cc:	64640000 	strbtvs	r0, [r4], #-0
    69d0:	00682e69 	rsbeq	r2, r8, r9, ror #28
    69d4:	64000001 	strvs	r0, [r0], #-1
    69d8:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    69dc:	00000100 	andeq	r0, r0, r0, lsl #2
    69e0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    69e4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    69e8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    69ec:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    69f0:	00000200 	andeq	r0, r0, r0, lsl #4
    69f4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    69f8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    69fc:	00030068 	andeq	r0, r3, r8, rrx
    6a00:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    6a04:	0100682e 	tsteq	r0, lr, lsr #16
    6a08:	00000000 	andeq	r0, r0, r0
    6a0c:	2c0c0205 	sfmcs	f0, 4, [ip], {5}
    6a10:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    6a14:	31200101 			; <UNDEFINED> instruction: 0x31200101
    6a18:	221e5030 	andscs	r5, lr, #48	; 0x30
    6a1c:	022c2322 	eoreq	r2, ip, #-2013265920	; 0x88000000
    6a20:	01010005 	tsteq	r1, r5
    6a24:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    6a28:	002c3402 	eoreq	r3, ip, r2, lsl #8
    6a2c:	00c30300 	sbceq	r0, r3, r0, lsl #6
    6a30:	010a0301 	tsteq	sl, r1, lsl #6
    6a34:	01000402 	tsteq	r0, r2, lsl #8
    6a38:	00020401 	andeq	r0, r2, r1, lsl #8
    6a3c:	00000205 	andeq	r0, r0, r5, lsl #4
    6a40:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    6a44:	0e030100 	adfeqs	f0, f3, f0
    6a48:	03233301 			; <UNDEFINED> instruction: 0x03233301
    6a4c:	35352e78 	ldrcc	r2, [r5, #-3704]!	; 0xfffff188
    6a50:	0004024f 	andeq	r0, r4, pc, asr #4
    6a54:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6a58:	00020500 	andeq	r0, r2, r0, lsl #10
    6a5c:	03000000 	movweq	r0, #0
    6a60:	03010185 	movweq	r0, #4485	; 0x1185
    6a64:	6f032011 	svcvs	0x00032011
    6a68:	2e130320 	cdpcs	3, 1, cr0, cr3, cr0, {1}
    6a6c:	032e7903 			; <UNDEFINED> instruction: 0x032e7903
    6a70:	03342e09 	teqeq	r4, #9, 28	; 0x90
    6a74:	03442e71 	movteq	r2, #20081	; 0x4e71
    6a78:	2d2f2e0c 	stccs	14, cr2, [pc, #-48]!	; 6a50 <__exidx_end+0x3b48>
    6a7c:	01000202 	tsteq	r0, r2, lsl #4
    6a80:	00020401 	andeq	r0, r2, r1, lsl #8
    6a84:	00000205 	andeq	r0, r0, r5, lsl #4
    6a88:	af030000 	svcge	0x00030000
    6a8c:	11030101 	tstne	r3, r1, lsl #2
    6a90:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    6a94:	2013032e 	andscs	r0, r3, lr, lsr #6
    6a98:	0301042f 	movweq	r0, #5167	; 0x142f
    6a9c:	4d302069 	ldcmi	0, cr2, [r0, #-420]!	; 0xfffffe5c
    6aa0:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    6aa4:	03020421 	movweq	r0, #9249	; 0x2421
    6aa8:	05022e1d 	streq	r2, [r2, #-3613]	; 0xfffff1e3
    6aac:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6ab0:	02050002 	andeq	r0, r5, #2
    6ab4:	00000000 	andeq	r0, r0, r0
    6ab8:	0101de03 	tsteq	r1, r3, lsl #28
    6abc:	1b201103 	blne	80aed0 <__ccfg+0x7eaf28>
    6ac0:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    6ac4:	302d2e14 	eorcc	r2, sp, r4, lsl lr
    6ac8:	b9030104 	stmdblt	r3, {r2, r8}
    6acc:	4d30207f 	ldcmi	0, cr2, [r0, #-508]!	; 0xfffffe04
    6ad0:	22231d23 	eorcs	r1, r3, #2240	; 0x8c0
    6ad4:	03020421 	movweq	r0, #9249	; 0x2421
    6ad8:	422e00c8 	eormi	r0, lr, #200	; 0xc8
    6adc:	01000502 	tsteq	r0, r2, lsl #10
    6ae0:	0002d601 	andeq	sp, r2, r1, lsl #12
    6ae4:	7c000200 	sfmvc	f0, 4, [r0], {-0}
    6ae8:	02000001 	andeq	r0, r0, #1
    6aec:	0d0efb01 	vstreq	d15, [lr, #-4]
    6af0:	01010100 	mrseq	r0, (UNDEF: 17)
    6af4:	00000001 	andeq	r0, r0, r1
    6af8:	01000001 	tsteq	r0, r1
    6afc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b00:	2f2e2e2f 	svccs	0x002e2e2f
    6b04:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6b0c <__exidx_end+0x3c04>
    6b08:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6b0c:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6b10:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6b14:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6b18:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6b1c:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6b20:	31303030 	teqcc	r0, r0, lsr r0
    6b24:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6b28:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6b2c:	61746562 	cmnvs	r4, r2, ror #10
    6b30:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6b34:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6b38:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6970 <__exidx_end+0x3a68>
    6b3c:	6f635c73 	svcvs	0x00635c73
    6b40:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6b44:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6b48:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6b4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b58:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6b5c:	3130322d 	teqcc	r0, sp, lsr #4
    6b60:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6b64:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6b68:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6b6c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6b70:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6b74:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6b78:	616d5c65 	cmnvs	sp, r5, ror #24
    6b7c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6b80:	3a630065 	bcc	18c6d1c <__ccfg+0x18a6d74>
    6b84:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6b88:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6b8c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6b90:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6b94:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6b98:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6b9c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6ba0:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6ba4:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6ba8:	6f6f745c 	svcvs	0x006f745c
    6bac:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6bb0:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6bb4:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6bb8:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6bbc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6bc0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6bc4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6bc8:	5f342d69 	svcpl	0x00342d69
    6bcc:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6bd0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6bd4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6bd8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6bdc:	61652d65 	cmnvs	r5, r5, ror #26
    6be0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6be4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6be8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6bec:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    6bf0:	2f2e2e2f 	svccs	0x002e2e2f
    6bf4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6bf8:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    6bfc:	6f000063 	svcvs	0x00000063
    6c00:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    6c04:	00000100 	andeq	r0, r0, r0, lsl #2
    6c08:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    6c0c:	00010068 	andeq	r0, r1, r8, rrx
    6c10:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6c14:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    6c18:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6c1c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6c20:	00020068 	andeq	r0, r2, r8, rrx
    6c24:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    6c28:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6c2c:	0300682e 	movweq	r6, #2094	; 0x82e
    6c30:	77680000 	strbvc	r0, [r8, -r0]!
    6c34:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6c38:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6c3c:	00000400 	andeq	r0, r0, r0, lsl #8
    6c40:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    6c44:	00010068 	andeq	r0, r1, r8, rrx
    6c48:	6e6f6100 	powvse	f6, f7, f0
    6c4c:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    6c50:	0100682e 	tsteq	r0, lr, lsr #16
    6c54:	6f610000 	svcvs	0x00610000
    6c58:	61625f6e 	cmnvs	r2, lr, ror #30
    6c5c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    6c60:	0100682e 	tsteq	r0, lr, lsr #16
    6c64:	00000000 	andeq	r0, r0, r0
    6c68:	2c3c0205 	lfmcs	f0, 4, [ip], #-20	; 0xffffffec
    6c6c:	e5030000 	str	r0, [r3, #-0]
    6c70:	03200100 	nopeq	{0}	; <UNPREDICTABLE>
    6c74:	7103200f 	tstvc	r3, pc
    6c78:	200f0320 	andcs	r0, pc, r0, lsr #6
    6c7c:	9e090325 	cdpls	3, 0, cr0, cr9, cr5, {1}
    6c80:	9e090330 	mcrls	3, 0, r0, cr9, cr0, {1}
    6c84:	0702a333 	smladxeq	r2, r3, r3, sl
    6c88:	00010100 	andeq	r0, r1, r0, lsl #2
    6c8c:	2c980205 	lfmcs	f0, 4, [r8], {5}
    6c90:	a0030000 	andge	r0, r3, r0
    6c94:	0c030101 	stfeqs	f0, [r3], {1}
    6c98:	0388222e 	orreq	r2, r8, #-536870910	; 0xe0000002
    6c9c:	25263c7a 	strcs	r3, [r6, #-3194]!	; 0xfffff386
    6ca0:	01000602 	tsteq	r0, r2, lsl #12
    6ca4:	02050001 	andeq	r0, r5, #1
    6ca8:	00000000 	andeq	r0, r0, r0
    6cac:	0101c203 	tsteq	r1, r3, lsl #4
    6cb0:	34912520 	ldrcc	r2, [r1], #1312	; 0x520
    6cb4:	272e7903 	strcs	r7, [lr, -r3, lsl #18]!
    6cb8:	262e7a03 	strtcs	r7, [lr], -r3, lsl #20
    6cbc:	01040200 	mrseq	r0, R12_usr
    6cc0:	00207a03 	eoreq	r7, r0, r3, lsl #20
    6cc4:	50010402 	andpl	r0, r1, r2, lsl #8
    6cc8:	1f302d30 	svcne	0x00302d30
    6ccc:	1f3d4b24 	svcne	0x003d4b24
    6cd0:	326c3d34 	rsbcc	r3, ip, #52, 26	; 0xd00
    6cd4:	03666d03 	cmneq	r6, #3, 26	; 0xc0
    6cd8:	02263c10 	eoreq	r3, r6, #16, 24	; 0x1000
    6cdc:	01010009 	tsteq	r1, r9
    6ce0:	00020500 	andeq	r0, r2, r0, lsl #10
    6ce4:	03000000 	movweq	r0, #0
    6ce8:	210101f3 	strdcs	r0, [r1, -r3]
    6cec:	0007024b 	andeq	r0, r7, fp, asr #4
    6cf0:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6cf4:	00000002 	andeq	r0, r0, r2
    6cf8:	02800300 	addeq	r0, r0, #0, 6
    6cfc:	02042401 	andeq	r2, r4, #16777216	; 0x1000000
    6d00:	04582203 	ldrbeq	r2, [r8], #-515	; 0xfffffdfd
    6d04:	82620301 	rsbhi	r0, r2, #67108864	; 0x4000000
    6d08:	3c030204 	sfmcc	f0, 4, [r3], {4}
    6d0c:	03010420 	movweq	r0, #5152	; 0x1420
    6d10:	1f3d4a4a 	svcne	0x003d4a4a
    6d14:	221f3d21 	andscs	r3, pc, #2112	; 0x840
    6d18:	22301f30 	eorscs	r1, r0, #48, 30	; 0xc0
    6d1c:	000c0223 	andeq	r0, ip, r3, lsr #4
    6d20:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6d24:	00000002 	andeq	r0, r0, r2
    6d28:	02a30300 	adceq	r0, r3, #0, 6
    6d2c:	044f2501 	strbeq	r2, [pc], #-1281	; 6d34 <__exidx_end+0x3e2c>
    6d30:	4a170302 	bmi	5c7940 <__ccfg+0x5a7998>
    6d34:	6d030104 	stfvss	f0, [r3, #-16]
    6d38:	09024b4a 	stmdbeq	r2, {r1, r3, r6, r8, r9, fp, lr}
    6d3c:	00010100 	andeq	r0, r1, r0, lsl #2
    6d40:	00000205 	andeq	r0, r0, r5, lsl #4
    6d44:	bc030000 	stclt	0, cr0, [r3], {-0}
    6d48:	03220102 			; <UNDEFINED> instruction: 0x03220102
    6d4c:	69032017 	stmdbvs	r3, {r0, r1, r2, r4, sp}
    6d50:	10032820 	andne	r2, r3, r0, lsr #16
    6d54:	2e6c033c 	mcrcs	3, 3, r0, cr12, cr12, {1}
    6d58:	032e1503 			; <UNDEFINED> instruction: 0x032e1503
    6d5c:	1303586d 	movwne	r5, #14445	; 0x386d
    6d60:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    6d64:	3f201103 	svccc	0x00201103
    6d68:	01000602 	tsteq	r0, r2, lsl #12
    6d6c:	02050001 	andeq	r0, r5, #1
    6d70:	00000000 	andeq	r0, r0, r0
    6d74:	0102e303 	tsteq	r2, r3, lsl #6
    6d78:	4d012103 	stfmis	f2, [r1, #-12]
    6d7c:	01000202 	tsteq	r0, r2, lsl #4
    6d80:	02050001 	andeq	r0, r5, #1
    6d84:	00000000 	andeq	r0, r0, r0
    6d88:	01039003 	tsteq	r3, r3
    6d8c:	21201003 			; <UNDEFINED> instruction: 0x21201003
    6d90:	0021211f 	eoreq	r2, r1, pc, lsl r1
    6d94:	3e010402 	cdpcc	4, 0, cr0, cr1, cr2, {0}
    6d98:	01040200 	mrseq	r0, R12_usr
    6d9c:	1d313d3d 	ldcne	13, cr3, [r1, #-244]!	; 0xffffff0c
    6da0:	00070234 	andeq	r0, r7, r4, lsr r2
    6da4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6da8:	00000002 	andeq	r0, r0, r2
    6dac:	03b50300 			; <UNDEFINED> instruction: 0x03b50300
    6db0:	2c311701 	ldccs	7, cr1, [r1], #-4
    6db4:	05023d33 	streq	r3, [r2, #-3379]	; 0xfffff2cd
    6db8:	Address 0x0000000000006db8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
    return (time * SECOND)/1000;
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
}
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
      34:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
      38:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
      3c:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
}
      40:	5f5f0065 	svcpl	0x005f0065
      44:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6dc <_estack+0xdfffa6dc>
      48:	00747261 	rsbseq	r7, r4, r1, ror #4
      4c:	70716572 	rsbsvc	r6, r1, r2, ror r5
      50:	72006d64 	andvc	r6, r0, #100, 26	; 0x1900
      54:	654c6465 	strbvs	r6, [ip, #-1125]	; 0xfffffb9b
		release;
      58:	5f5f0064 	svcpl	0x005f0064
      5c:	616c7473 	smcvs	51011	; 0xc743
      60:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
      64:	614e5f74 	hvcvs	58868	; 0xe5f4
      68:	7300656d 	movwvc	r6, #1389	; 0x56d
      6c:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
      70:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
      74:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
      78:	66666500 	strbtvs	r6, [r6], -r0, lsl #10
      7c:	006d6470 	rsbeq	r6, sp, r0, ror r4
      80:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      84:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      88:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
      8c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
	descriptors [fd] = s;
      90:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
      98:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
	if (s == NULL)
      9c:	6e497372 	mcrvs	3, 2, r7, cr9, cr2, {3}
		syserror (EMALLOC, "tcv05");
      a0:	00786564 	rsbseq	r6, r8, r4, ror #10
      a4:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
      a8:	6c006e70 	stcvs	14, cr6, [r0], {112}	; 0x70
      ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      b0:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      b4:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      b8:	6f747300 	svcvs	0x00747300
      bc:	6f725070 	svcvs	0x00725070
      c0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
      c4:	735f5f00 	cmpvc	pc, #0, 30
      c8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      cc:	6f68535f 	svcvs	0x0068535f
      d0:	654d5f77 	strbvs	r5, [sp, #-3959]	; 0xfffff089
      d4:	7200756e 	andvc	r7, r0, #461373440	; 0x1b800000
      d8:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
      dc:	754e676e 	strbvc	r6, [lr, #-1902]	; 0xfffff892
      e0:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
      e4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
      e8:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
      ec:	735f5f00 	cmpvc	pc, #0, 30
      f0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
			wwait (st, 50);
      f4:	6174535f 	cmnvs	r4, pc, asr r3
			curr += 0x1000;
      f8:	425f7472 	subsmi	r7, pc, #1912602624	; 0x72000000
      fc:	6b6e696c 	blvs	1b9a6b4 <__ccfg+0x1b7a70c>
		if (from >= EE_SIZE || upto < from)
     100:	5f007265 	svcpl	0x00007265
     104:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
			upto = EE_SIZE - 1;
     108:	4f5f6261 	svcmi	0x005f6261
     10c:	505f4646 	subspl	r4, pc, r6, asr #12
     110:	4f495245 	svcmi	0x00495245
     114:	5f5f0044 	svcpl	0x005f0044
     118:	616c7473 	smcvs	51011	; 0xc743
     11c:	6e495f62 	cdpvs	15, 4, cr5, cr9, cr2, {3}
     120:	61697469 	cmnvs	r9, r9, ror #8
     124:	7973006c 	ldmdbvc	r3!, {r2, r3, r5, r6}^
        if (displayCycle)
     128:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
     130:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
     134:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
        if(onTime > 0){
     138:	735f5f00 	cmpvc	pc, #0, 30
            leds(led,1);
     13c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	6f74535f 	svcvs	0x0074535f
     144:	6e6f0070 	mcrvs	0, 3, r0, cr15, cr0, {3}
     148:	736e6d64 	cmnvc	lr, #100, 26	; 0x1900
     14c:	6f696400 	svcvs	0x00696400
     150:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
            delay(onTime, OFF_PERIOD);
     154:	47007265 	strmi	r7, [r0, -r5, ror #4]
            delay(offTime, Check_PERIOD);
     158:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     15c:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
            led = greenLed;
     160:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
            ch = greenCharacter;
     164:	31303220 	teqcc	r0, r0, lsr #4
     168:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
            onTime = greenOn;
     16c:	72282035 	eorvc	r2, r8, #53	; 0x35
     170:	61656c65 	cmnvs	r5, r5, ror #24
            offTime = greenOff;
     174:	20296573 	eorcs	r6, r9, r3, ror r5
            leds(led,1);
     178:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     17c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     180:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
     184:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
            proceed OFF_PERIOD;
     188:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     18c:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
        when(&On, Check_PERIOD);
     190:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     194:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
        when(&stopProcess, Stop);
     198:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
     19c:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
        release;
     1a0:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
        leds(led,0);
     1a4:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
     1ac:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
     1b0:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     1b4:	6f6c666d 	svcvs	0x006c666d
     1b8:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
        if (displayCycle)
     1bc:	733d6962 	teqvc	sp, #1605632	; 0x188000
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	2074666f 	rsbscs	r6, r4, pc, ror #12
     1c4:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     1c8:	613d6863 	teqvs	sp, r3, ror #16
        if(offTime > 0)
     1cc:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
            delay(offTime, Check_PERIOD);
     1d0:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
        leds(led,0);
     1d4:	672d2067 	strvs	r2, [sp, -r7, rrx]!
     1d8:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     1dc:	20332d66 	eorscs	r2, r3, r6, ror #26
     1e0:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
     1e4:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
}
     1e8:	6177642d 	cmnvs	r7, sp, lsr #8
        finish;
     1ec:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
}
     1f0:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
     1f4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
     1f8:	20393963 	eorscs	r3, r9, r3, ror #18
     1fc:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     200:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     204:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     208:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     20c:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     210:	6164662d 	cmnvs	r4, sp, lsr #12
     214:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     218:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     21c:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     220:	6f6e662d 	svcvs	0x006e662d
     224:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     228:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     22c:	61696c61 	cmnvs	r9, r1, ror #24
     230:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     234:	61662d20 	cmnvs	r6, r0, lsr #26
     238:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
     23c:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     240:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
     244:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
    word numbers[] = {0, 0, 0, 0};
     248:	5f003031 	svcpl	0x00003031
    int numbersIndex = 0;
     24c:	5f69705f 	svcpl	0x0069705f
    word numbers[] = {0, 0, 0, 0};
     250:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	00745f74 	rsbseq	r5, r4, r4, ror pc
        if(settingsInput[i] == ' ') {
     258:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     25c:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
            numbers[numbersIndex] = number;
     260:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     264:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
            number = 0;
     268:	7000746e 	andvc	r7, r0, lr, ror #8
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	6f696e69 	svcvs	0x00696e69
    return 0;
     270:	00745f64 	rsbseq	r5, r4, r4, ror #30
    redOn = numbers[0];
     274:	62747366 	rsbsvs	r7, r4, #-1744830463	; 0x98000001
     278:	6e006b6c 	vmlsvs.f64	d6, d0, d28
    redOff = numbers[1];
     27c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     280:	72670072 	rsbvc	r0, r7, #114	; 0x72
    greenOn = numbers[2];
     284:	4c6e6565 	cfstr64mi	mvdx6, [lr], #-404	; 0xfffffe6c
     288:	61006465 	tstvs	r0, r5, ror #8
    greenOff = numbers[3];
     28c:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
     290:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
}
     294:	6d616e72 	stclvs	14, cr6, [r1, #-456]!	; 0xfffffe38
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	5f5f0065 	svcpl	0x005f0065
     29c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
            number = number * 10;
     2a0:	61747379 	cmnvs	r4, r9, ror r3
            number += settingsInput[i] - 48;
     2a4:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
     2a8:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
        } else if(settingsInput[i] == '-') {
     2ac:	73616200 	cmnvc	r1, #0, 4
            return 1;
     2b0:	654e0065 	strbvs	r0, [lr, #-101]	; 0xffffff9b
     2b4:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
     2b8:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     2bc:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
     2c0:	6e4f6e65 	cdpvs	14, 4, cr6, cr15, cr5, {3}
fsm root {
     2c4:	4d544b00 	vldrmi	d20, [r4, #-0]
     2c8:	70612f50 	rsbvc	r2, r1, r0, asr pc
     2cc:	00632e70 	rsbeq	r2, r3, r0, ror lr
     2d0:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
     2d4:	5f747570 	svcpl	0x00747570
     2d8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
     2dc:	735f5f00 	cmpvc	pc, #0, 30
        ser_outf(Initial, "Enter your name: ");
     2e0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     2e4:	6177415f 	cmnvs	r7, pc, asr r1
        ser_in(Get_Name, username, NAME_LENGTH);
     2e8:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
     2ec:	00706f74 	rsbseq	r6, r0, r4, ror pc
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	43646572 	cmnmi	r4, #478150656	; 0x1c800000
     2f4:	61726168 	cmnvs	r2, r8, ror #2
     2f8:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
     300:	664f6e65 	strbvs	r6, [pc], -r5, ror #28
        if (choice == 'A' || choice == 'a'){
     304:	5f5f0066 	svcpl	0x005f0066
     308:	5f737362 	svcpl	0x00737362
     30c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
            proceed Adjust_Intervals;
     310:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
            proceed Monitor;
     314:	73625f5f 	cmnvc	r2, #380	; 0x17c
        proceed Show_Menu;
     318:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	005f5f64 	subseq	r5, pc, r4, ror #30
     320:	636f7270 	cmnvs	pc, #112, 4
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
     328:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     32c:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
        if(processSettingsInput(settings) != 0)
     330:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     334:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
            proceed Adjust_Intervals;
     338:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
        if(!blinkerRunning) {
     33c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
     340:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     344:	666f0073 			; <UNDEFINED> instruction: 0x666f0073
            blinkerCode = runfsm blinker;
     348:	6d695466 	cfstrdvs	mvd5, [r9, #-408]!	; 0xfffffe68
            blinkerRunning = YES;
     34c:	5f5f0065 	svcpl	0x005f0065
        On = YES;
     350:	616c7473 	smcvs	51011	; 0xc743
     354:	65535f62 	ldrbvs	r5, [r3, #-3938]	; 0xfffff09e
        trigger(&On);
     358:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
        proceed Show_Menu;
     35c:	76726574 			; <UNDEFINED> instruction: 0x76726574
     360:	00736c61 	rsbseq	r6, r3, r1, ror #24
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     368:	5f62616c 	svcpl	0x0062616c
     36c:	77656956 			; <UNDEFINED> instruction: 0x77656956
     370:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     374:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     378:	5f5f0073 	svcpl	0x005f0073
     37c:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
        proceed Show_Menu;
     380:	00727275 	rsbseq	r7, r2, r5, ror r2
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
     388:	0064695f 	rsbeq	r6, r4, pc, asr r9
        displayCycle = YES;
     38c:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
     390:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
        ser_inf(Await_Stop, "%c", &ch);
     394:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     398:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
        if(ch == 'S' || ch == 's'){
     39c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     3a0:	63206465 			; <UNDEFINED> instruction: 0x63206465
     3a4:	00726168 	rsbseq	r6, r2, r8, ror #2
            displayCycle = NO;
     3a8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2f4 <root+0x30>
            proceed Show_Menu;
     3ac:	616d2f65 	cmnvs	sp, r5, ror #30
     3b0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
        proceed Monitor;
     3b4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     3b8:	706f746b 	rsbvc	r7, pc, fp, ror #8
        On = NO;
     3bc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
        if(blinkerCode != 0x0) {
     3c0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     3c4:	4349502f 	movtmi	r5, #36911	; 0x902f
            killall(blinkerCode);
     3c8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
        trigger(&stopProcess);
     3cc:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
     3d0:	4c5f3436 	cfldrdmi	mvd3, [pc], {54}	; 0x36
        proceed Show_Menu;
     3d4:	00366261 	eorseq	r6, r6, r1, ror #4
     3d8:	69546e6f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
        leds_all(0);
     3dc:	5f00656d 	svcpl	0x0000656d
     3e0:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     3e4:	415f6261 	cmpmi	pc, r1, ror #4
        proceed Show_Menu;
     3e8:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     3ec:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
        } else if (choice == 'S' || choice == 's') {
     3f0:	76726574 			; <UNDEFINED> instruction: 0x76726574
            proceed Stop;
     3f4:	00736c61 	rsbseq	r6, r3, r1, ror #24
        } else if (choice == 'V' || choice == 'v') {
     3f8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
            proceed View_Settings;
     3fc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
        } else if (choice == 'M' || choice == 'm') {
     400:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
            proceed Monitor;
     404:	66664f64 	strbtvs	r4, [r6], -r4, ror #30
     408:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     40c:	73726562 	cmnvc	r2, #411041792	; 0x18800000
     410:	6a646100 	bvs	1918818 <__ccfg+0x18f8870>
            killall(blinkerCode);
     414:	54747375 	ldrbtpl	r7, [r4], #-885	; 0xfffffc8b
            leds_all(0);
     418:	00656d69 	rsbeq	r6, r5, r9, ror #26
     41c:	6264656c 	rsbvs	r6, r4, #108, 10	; 0x1b000000
            killall(blinkerCode);
     420:	4200636c 	andmi	r6, r0, #108, 6	; 0xb0000001
            sint runningNumber = crunning(blinkerCode);
     424:	656c6f6f 	strbvs	r6, [ip, #-3951]!	; 0xfffff091
     428:	6c006e61 	stcvs	14, cr6, [r0], {97}	; 0x61
     42c:	74736465 	ldrbtvc	r6, [r3], #-1125	; 0xfffffb9b
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	656c0073 	strbvs	r0, [ip, #-115]!	; 0xffffff8d
            trigger(&stopProcess);
     434:	6b6c6264 	blvs	1b18dcc <__ccfg+0x1af8e24>
     438:	72617500 	rsbvc	r7, r1, #0, 10
            blinkerCode = runfsm blinker;
     43c:	00745f74 	rsbseq	r5, r4, r4, ror pc
     440:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     444:	5f62616c 	svcpl	0x0062616c
     448:	5f746547 	svcpl	0x00746547
     44c:	696f6843 	stmdbvs	pc!, {r0, r1, r6, fp, sp, lr}^	; <UNPREDICTABLE>
     450:	6c006563 	cfstr32vs	mvfx6, [r0], {99}	; 0x63
     454:	6c466465 	cfstrdvs	mvd6, [r6], {101}	; 0x65
     458:	73006761 	movwvc	r6, #1889	; 0x761
     45c:	61747379 	cmnvs	r4, r9, ror r3
     460:	00745f74 	rsbseq	r5, r4, r4, ror pc
     464:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     468:	5f007374 	svcpl	0x00007374
     46c:	5f69705f 	svcpl	0x0069705f
     470:	5f786568 	svcpl	0x00786568
     474:	5f636e65 	svcpl	0x00636e65
     478:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     47c:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
     480:	006e4f64 	rsbeq	r4, lr, r4, ror #30
     484:	70736964 	rsbsvc	r6, r3, r4, ror #18
     488:	4379616c 	cmnmi	r9, #108, 2
     48c:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
     490:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
static void devinit_uart (int devnum) {
     494:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
	adddevfunc (ioreq_uart_a, devnum);
     498:	7000656d 	andvc	r6, r0, sp, ror #10
     49c:	006d756e 	rsbeq	r7, sp, lr, ror #10
void udelay (volatile word n) {
     4a0:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     4a4:	0079706f 	rsbseq	r7, r9, pc, rrx
	while (n) {
     4a8:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     4ac:	68630073 	stmdavs	r3!, {r0, r1, r4, r5, r6}^
}
     4b0:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
	while (n--);
     4b4:	6d736600 	ldclvs	6, cr6, [r3, #-0]
     4b8:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     4bc:	61745300 	cmnvs	r4, r0, lsl #6
		n--;
     4c0:	00737574 	rsbseq	r7, r3, r4, ror r5
     4c4:	4f495047 	svcmi	0x00495047
     4c8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
void mdelay (volatile word n) {
     4cc:	69447261 	stmdbvs	r4, {r0, r5, r6, r9, ip, sp, lr}^
     4d0:	5f5f006f 	svcpl	0x005f006f
	while (n) {
     4d4:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     4d8:	735f6263 	cmpvc	pc, #805306374	; 0x30000006
}
     4dc:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		udelay (999);
     4e0:	63705f69 	cmnvs	r0, #420	; 0x1a4
     4e4:	00745f62 	rsbseq	r5, r4, r2, ror #30
		n--;
     4e8:	65657267 	strbvs	r7, [r5, #-615]!	; 0xfffffd99
     4ec:	6168436e 	cmnvs	r8, lr, ror #6
     4f0:	74636172 	strbtvc	r6, [r3], #-370	; 0xfffffe8e
     4f4:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
void __pi_ondomain (lword d) {
     4f8:	6b6e696c 	blvs	1b9aab0 <__ccfg+0x1b7ab08>
     4fc:	75527265 	ldrbvc	r7, [r2, #-613]	; 0xfffffd9b
		if (__pi_systat.effpdm > 1)
     500:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
     504:	6f720067 	svcvs	0x00720067
			__pi_systat.effpdm = 1;
     508:	5f00746f 	svcpl	0x0000746f
	PRCMPowerDomainOn (d);
     50c:	5f69705f 	svcpl	0x0069705f
     510:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
     514:	6572006b 	ldrbvs	r0, [r2, #-107]!	; 0xffffff95
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	00746573 	rsbseq	r6, r4, r3, ror r5
     51c:	4f495047 	svcmi	0x00495047
     520:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
	__pi_systat.ondmns |= d;
     524:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     528:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
}
     52c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     530:	006f6944 	rsbeq	r6, pc, r4, asr #18
void __pi_syserror (word ec, const char *m) {
     534:	424e4f41 	submi	r4, lr, #260	; 0x104
	diag ("SYSERR: %x, %s", ec, m);
     538:	6f4d7461 	svcvs	0x004d7461
     53c:	616e456e 	cmnvs	lr, lr, ror #10
  __ASM volatile ("cpsid i" : : : "memory");
     540:	00656c62 	rsbeq	r6, r5, r2, ror #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     548:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
     54c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		all_leds_blink;
     550:	666f5f69 	strbtvs	r5, [pc], -r9, ror #30
     554:	6d6f6466 	cfstrdvs	mvd6, [pc, #-408]!	; 3c4 <root+0x100>
     558:	006e6961 	rsbeq	r6, lr, r1, ror #18
     55c:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	75007661 	strvc	r7, [r0, #-1633]	; 0xfffff99f
     564:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     568:	5f5f0073 	svcpl	0x005f0073
     56c:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     570:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
     574:	77007172 	smlsdxvc	r0, r2, r1, r7
	while (1) {
     578:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
     57c:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     580:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     584:	5f6e7566 	svcpl	0x006e7566
void tci_run_delay_timer () {
     588:	4f410074 	svcmi	0x00410074
	setdel = __pi_mintk - __pi_old;
     58c:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     590:	57787541 	ldrbpl	r7, [r8, -r1, asr #10]!
     594:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
     598:	65764570 	ldrbvs	r4, [r6, #-1392]!	; 0xfffffa90
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	4100746e 	tstmi	r0, lr, ror #8
     5a0:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     5a4:	776f5043 	strbvc	r5, [pc, -r3, asr #32]!
     5a8:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
	sti_tim;
     5b0:	00746547 	rsbseq	r6, r4, r7, asr #10
}
     5b4:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     5b8:	43746e49 	cmnmi	r4, #1168	; 0x490
     5bc:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     5c0:	73797300 	cmnvc	r9, #0, 6
     5c4:	5f6d6574 	svcpl	0x006d6574
	cli_aux;
     5c8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     5cc:	4e4f4100 	dvfmie	f4, f7, f0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	53435557 	movtpl	r5, #13655	; 0x3557
     5d4:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
     5d8:	456e776f 	strbmi	r7, [lr, #-1903]!	; 0xfffff891
     5dc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
	sti_aux;
     5e0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
}
     5e4:	6c656474 	cfstrdvs	mvd6, [r5], #-464	; 0xfffffe30
     5e8:	43525000 	cmpmi	r2, #0
     5ec:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
void AONRTCIntHandler () {
     5f0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	66664f72 	uqsub16vs	r4, r6, r2
     5f8:	735f5f00 	cmpvc	pc, #0, 30
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; 470 <root+0x1ac>
		if (__pi_utims [0] == 0)
     600:	64005053 	strvs	r5, [r0], #-83	; 0xffffffad
     604:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
		if (*(__pi_utims [0])) {
     608:	745f7469 	ldrbvc	r7, [pc], #-1129	; 610 <AONRTCIntHandler+0x20>
     60c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			(*(__pi_utims [0]))--;
     610:	6e6f5f69 	cdpvs	15, 6, cr5, cr15, cr9, {3}
		if (__pi_utims [1] == 0)
     614:	616d6f64 	cmnvs	sp, r4, ror #30
		if (*(__pi_utims [1])) {
     618:	55006e69 	strpl	r6, [r0, #-3689]	; 0xfffff197
			aux_timer_inactive = 0;
     61c:	48545241 	ldmdami	r4, {r0, r6, r9, ip, lr}^
			(*(__pi_utims [1]))--;
     620:	6f6c4677 	svcvs	0x006c4677
		if (__pi_utims [2] == 0)
     624:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
		if (*(__pi_utims [2])) {
     628:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 460 <root+0x19c>
			(*(__pi_utims [2]))--;
     62c:	61736944 	cmnvs	r3, r4, asr #18
		if (__pi_utims [3] != 0) {
     630:	00656c62 	rsbeq	r6, r5, r2, ror #24
			if (*(__pi_utims [3])) {
     634:	43505f5f 	cmpmi	r0, #380	; 0x17c
				aux_timer_inactive = 0;
     638:	5f5f0042 	svcpl	0x005f0042
				(*(__pi_utims [3]))--;
     63c:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffffcd4 <_estack+0xdfffacd4>
	if (__pi_systat.ledsts) {
     640:	5f747261 	svcpl	0x00747261
     644:	72746567 	rsbsvc	r6, r4, #432013312	; 0x19c00000
		if (__pi_systat.ledblc++ == 0) {
     648:	00657461 	rsbeq	r7, r5, r1, ror #8
     64c:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
			if (__pi_systat.ledblk) {
     650:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
     654:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     658:	61736944 	cmnvs	r3, r4, asr #18
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	00656c62 	rsbeq	r6, r5, r2, ror #24
     660:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				if (__pi_systat.ledsts & 0x2)
     664:	654c7852 	strbvs	r7, [ip, #-2130]	; 0xfffff7ae
     668:	006c6576 	rsbeq	r6, ip, r6, ror r5
     66c:	6f646552 	svcvs	0x00646552
				if (__pi_systat.ledsts & 0x4)
     670:	0078725f 	rsbseq	r7, r8, pc, asr r2
				__pi_systat.ledblk = 0;
     674:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     678:	654c7854 	strbvs	r7, [ip, #-2132]	; 0xfffff7ac
			if (__pi_systat.fstblk)
     67c:	006c6576 	rsbeq	r6, ip, r6, ror r5
     680:	43737953 	cmnmi	r3, #1359872	; 0x14c000
				__pi_systat.ledblc = 200;
     684:	436c7274 	cmnmi	ip, #116, 4	; 0x40000007
	if (events & AON_RTC_EVFLAGS_CH0) {
     688:	6b636f6c 	blvs	18dc440 <__ccfg+0x18bc498>
		cli_tim;
     68c:	00746547 	rsbseq	r6, r4, r7, asr #10
		__pi_new += setdel;
     690:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
     694:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
		setdel = 0;
     698:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
		RISE_N_SHINE;
     69c:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
		__pi_new += setdel;
     6a0:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
		RISE_N_SHINE;
     6a4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     6a8:	43525000 	cmpmi	r2, #0
		aux_timer_inactive = 1;
     6ac:	616f4c4d 	cmnvs	pc, sp, asr #24
     6b0:	74655364 	strbtvc	r5, [r5], #-868	; 0xfffffc9c
				if (__pi_systat.ledsts & 0x1)
     6b4:	33697500 	cmncc	r9, #0, 10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b8:	616e4532 	cmnvs	lr, r2, lsr r5
     6bc:	00656c62 	rsbeq	r6, r5, r2, ror #24
				if (__pi_systat.ledsts & 0x2)
     6c0:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     6c4:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 160 <_Min_Stack_Size+0x60>
     6c8:	5f747261 	svcpl	0x00747261
				if (__pi_systat.ledsts & 0x8)
     6cc:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
				__pi_systat.ledblk = 1;
     6d0:	70757272 	rsbsvc	r7, r5, r2, ror r2
     6d4:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
		if (aux_timer_inactive) {
     6d8:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
			cli_aux;
     6dc:	454f4649 	strbmi	r4, [pc, #-1609]	; 9b <g_pfnVectors+0x9b>
     6e0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     6e4:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
     6e8:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
     6ec:	616c4674 	smcvs	50276	; 0xc464
     6f0:	5f007367 	svcpl	0x00007367
     6f4:	5f69705f 	svcpl	0x0069705f
     6f8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     6fc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     700:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
word tci_update_delay_ticks (Boolean force) {
     704:	776f5000 	strbvc	r5, [pc, -r0]!
	cli_tim;
     708:	74437265 	strbvc	r7, [r3], #-613	; 0xfffffd9b
     70c:	4f496c72 	svcmi	0x00496c72
	if (setdel) {
     710:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     71c:	52500065 	subspl	r0, r0, #101	; 0x65
     720:	61434d43 	cmpvs	r3, r3, asr #26
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
	return NO;
     72c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			setdel = 0;
     730:	61736944 	cmnvs	r3, r4, asr #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	00656c62 	rsbeq	r6, r5, r2, ror #24
     738:	70746573 	rsbsvc	r6, r4, r3, ror r5
}
     73c:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
		sti_tim;
     740:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
		return YES;
     744:	65706f00 	ldrbvs	r6, [r0, #-3840]!	; 0xfffff100
     748:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     74c:	61006e6f 	tstvs	r0, pc, ror #28
     750:	745f7875 	ldrbvc	r7, [pc], #-2165	; 758 <__pi_uart_setrate+0x4>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
	UARTDisable (UART0_BASE);
     758:	616e695f 	cmnvs	lr, pc, asr r9
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
	UARTDisable (UART0_BASE);
     760:	6f700065 	svcvs	0x00700065
	UARTConfigSetExpClk (UART0_BASE,
     764:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
     768:	73666e6f 	cmnvc	r6, #1776	; 0x6f0
     76c:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
     770:	78745f6f 	ldmdavc	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     778:	6c6f5f69 	stclvs	15, cr5, [pc], #-420	; 5dc <tci_run_auxiliary_timer+0x14>
     77c:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
     784:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
     788:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
	urates [0] = rate;
     78c:	42323369 	eorsmi	r3, r2, #-1543503871	; 0xa4000001
}
     790:	00657361 	rsbeq	r7, r5, r1, ror #6
     794:	6f645f5f 	svcvs	0x00645f5f
     798:	6966775f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     79c:	5f73615f 	svcpl	0x0073615f
     7a0:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
     7a4:	41006465 	tstmi	r0, r5, ror #8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     7ac:	636e4943 	cmnvs	lr, #1097728	; 0x10c000
     7b0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	32684365 	rsbcc	r4, r8, #-1811939327	; 0x94000001
     7b8:	00746553 	rsbseq	r6, r4, r3, asr r5
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     7c0:	00737365 	rsbseq	r7, r3, r5, ror #6
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     7c8:	5f74696e 	svcpl	0x0074696e
     7cc:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     7d0:	4e4f4100 	dvfmie	f4, f7, f0
     7d4:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
     7d8:	6148746e 	cmpvs	r8, lr, ror #8
     7dc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	switch (operation) {
     7e0:	61700072 	cmnvs	r0, r2, ror r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	006d6172 	rsbeq	r6, sp, r2, ror r1
     7e8:	5f696374 	svcpl	0x00696374
     7ec:	5f6e7572 	svcpl	0x006e7572
     7f0:	616c6564 	cmnvs	ip, r4, ror #10
     7f4:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
				*buf++ = uart_a_read;
     7f8:	0072656d 	rsbseq	r6, r2, sp, ror #10
     7fc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			while (len && uart_a_char_available) {
     800:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; 0xfffffe84
     804:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     808:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
			if (len != operation) {
     80c:	7270006f 	rsbsvc	r0, r0, #111	; 0x6f
}
     810:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
     814:	61755f74 	cmnvs	r5, r4, ror pc
			uart_a_disable_int;
     818:	66007472 			; <UNDEFINED> instruction: 0x66007472
			if (uart_a_char_available) {
     81c:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
				*buf++ = uart_a_read;
     820:	52415500 	subpl	r5, r1, #0, 10
			uart_a_disable_int;
     824:	616e4554 	cmnvs	lr, r4, asr r5
     828:	00656c62 	rsbeq	r6, r5, r2, ror #24
			if (uart_a_char_available) {
     82c:	4f495047 	svcmi	0x00495047
     830:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
				uart_a_enable_int;
     834:	76457261 	strbvc	r7, [r5], -r1, ror #4
     838:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
				goto Redo_rx;
     83c:	5f006f69 	svcpl	0x00006f69
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     840:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
     844:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
			return -2;
     848:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     84c:	00717269 	rsbseq	r7, r1, r9, ror #4
				uart_a_write (*buf);
     850:	6c65646d 	cfstrdvs	mvd6, [r5], #-436	; 0xfffffe4c
     854:	5f007961 	svcpl	0x00007961
			while (len && uart_a_room_in_tx) {
     858:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     85c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     860:	7172695f 	cmnvc	r2, pc, asr r9
			if (len != operation) {
     864:	73795300 	cmnvc	r9, #0, 6
			uart_a_disable_int;
     868:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     86c:	536e6f41 	cmnpl	lr, #260	; 0x104
			if (uart_a_room_in_tx) {
     870:	00636e79 	rsbeq	r6, r3, r9, ror lr
     874:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
				uart_a_enable_int;
     878:	6174735f 	cmnvs	r4, pc, asr r3
     87c:	72666b63 	rsbvc	r6, r6, #101376	; 0x18c00
				*buf++ = uart_a_read;
     880:	74006565 	strvc	r6, [r0], #-1381	; 0xfffffa9b
			if (uart_a_room_in_tx) {
     884:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
				uart_a_write (*buf);
     888:	615f6e75 	cmpvs	pc, r5, ror lr	; <UNPREDICTABLE>
     88c:	6c697875 	stclvs	8, cr7, [r9], #-468	; 0xfffffe2c
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	79726169 	ldmdbvc	r2!, {r0, r3, r5, r6, r8, sp, lr}^
     894:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
			uart_a_enable_int;
     898:	5f007265 	svcpl	0x00007265
     89c:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     8a0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
			return 0;
     8a4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
			if (len == UART_CNTRL_SETRATE) {
     8a8:	00717269 	rsbseq	r7, r1, r9, ror #4
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	4f495047 	svcmi	0x00495047
     8b0:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     8b4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
				syserror (EREQPAR, "uar");
     8b8:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
			syserror (ENOOPER, "uai");
     8bc:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
			if (len == UART_CNTRL_GETRATE) {
     8c0:	4c4f4649 	mcrrmi	6, 4, r4, pc, cr9
				return 1;
     8c4:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	00746553 	rsbseq	r6, r4, r3, asr r5
			syserror (ENOOPER, "uai");
     8cc:	43737953 	cmnmi	r3, #1359872	; 0x14c000
     8d0:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
     8d4:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
     8d8:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
     8dc:	73007465 	movwvc	r7, #1125	; 0x465
     8e0:	61747465 	cmnvs	r4, r5, ror #8
     8e4:	76650076 			; <UNDEFINED> instruction: 0x76650076
     8e8:	73746e65 	cmnvc	r4, #1616	; 0x650
     8ec:	65647500 	strbvs	r7, [r4, #-1280]!	; 0xfffffb00
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	0079616c 	rsbseq	r6, r9, ip, ror #2
void UART0IntHandler () {
     8f4:	424e4f41 	submi	r4, lr, #260	; 0x104
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	6f4d7461 	svcvs	0x004d7461
     8fc:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
     900:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     904:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     908:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	5f5f0077 	svcpl	0x005f0077
     910:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
		RISE_N_SHINE;
     914:	6f6d7461 	svcvs	0x006d7461
     918:	4f41006e 	svcmi	0x0041006e
		i_trigger (devevent (UART_A, READ));
     91c:	434f494e 	movtmi	r4, #63822	; 0xf94e
     920:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     924:	6e45657a 	mcrvs	5, 2, r6, cr5, cr10, {3}
     928:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     92c:	4e4f4100 	dvfmie	f4, f7, f0
     930:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
     934:	61426e6f 	cmpvs	r2, pc, ror #28
     938:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     93c:	6c6f5679 	stclvs	6, cr5, [pc], #-484	; 760 <__pi_uart_setrate+0xc>
     940:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
     944:	00746547 	rsbseq	r6, r4, r7, asr #10
     948:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	61755f71 	cmnvs	r5, r1, ror pc
     950:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
     954:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		i_trigger (devevent (UART_A, WRITE));
     958:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	00736d69 	rsbseq	r6, r3, r9, ror #26
     960:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
		RISE_N_SHINE;
     964:	0074696e 	rsbseq	r6, r4, lr, ror #18
     968:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     96c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
		i_trigger (devevent (UART_A, WRITE));
     970:	6f727265 	svcvs	0x00727265
     974:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
     978:	6d756e76 	ldclvs	14, cr6, [r5, #-472]!	; 0xfffffe28
     97c:	6f682f00 	svcvs	0x00682f00
     980:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 7d4 <reinit_uart+0x2c>
     984:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     988:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     98c:	6f746b73 	svcvs	0x00746b73
     990:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     994:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     998:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
}
     99c:	2f534f43 	svccs	0x00534f43
     9a0:	4f636950 	svcmi	0x00636950
     9a4:	43432f53 	movtmi	r2, #16211	; 0x3f53
     9a8:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     9ac:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
void __buttons_setirq (int val) {
     9b0:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     9b8:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	42746e65 	rsbsmi	r6, r4, #1616	; 0x650
     9c0:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
     9c4:	55007972 	strpl	r7, [r0, #-2418]	; 0xfffff68e
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	49545241 	ldmdbmi	r4, {r0, r6, r9, ip, lr}^
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	6e45746e 	cdpvs	4, 4, cr7, cr5, cr14, {3}
     9d0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     9d4:	43525000 	cmpmi	r2, #0
     9d8:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
     9dc:	6f646c55 	svcvs	0x00646c55
     9e0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
}
     9e4:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
     9e8:	756f0065 	strbvc	r0, [pc, #-101]!	; 98b <UART0IntHandler+0x9b>
     9ec:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
     9f0:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
void __pinlist_setirq (int val) {
     9f4:	6156656c 	cmpvs	r6, ip, ror #10
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	0065756c 	rsbeq	r7, r5, ip, ror #10
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	746c6168 	strbtvc	r6, [ip], #-360	; 0xfffffe98
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	706f7400 	rsbvc	r7, pc, r0, lsl #8
	for (i = 0; i < N_PINLIST; i++) {
     a04:	614d664f 	cmpvs	sp, pc, asr #12
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a08:	74536e69 	ldrbvc	r6, [r3], #-3689	; 0xfffff197
     a0c:	006b6361 	rsbeq	r6, fp, r1, ror #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a10:	6564675f 	strbvs	r6, [r4, #-1887]!	; 0xfffff8a1
     a14:	0079616c 	rsbseq	r6, r9, ip, ror #2
     a18:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	for (i = 0; i < N_PINLIST; i++) {
     a1c:	746e4930 	strbtvc	r4, [lr], #-2352	; 0xfffff6d0
}
     a20:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     a24:	0072656c 	rsbseq	r6, r2, ip, ror #10
     a28:	70656544 	rsbvc	r6, r5, r4, asr #10
     a2c:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
void GPIOIntHandler () {
     a30:	6f700070 	svcvs	0x00700070
if (buttons_int) {
     a34:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
     a38:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	buttons_disable ();
     a3c:	63740067 	cmnvs	r4, #103	; 0x67
     a40:	70755f69 	rsbsvc	r5, r5, r9, ror #30
	i_trigger ((aword)&__button_list);
     a44:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     a48:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     a4c:	745f7961 	ldrbvc	r7, [pc], #-2401	; a54 <GPIOIntHandler+0x24>
     a50:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     a54:	61654d00 	cmnvs	r5, r0, lsl #26
     a58:	65727573 	ldrbvs	r7, [r2, #-1395]!	; 0xfffffa8d
     a5c:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     a60:	66716572 			; <UNDEFINED> instruction: 0x66716572
     a64:	745f6e75 	ldrbvc	r6, [pc], #-3701	; a6c <GPIOIntHandler+0x3c>
     a68:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
     a6c:	0076656c 	rsbseq	r6, r6, ip, ror #10
	RISE_N_SHINE;
     a70:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     a74:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     a78:	00797063 	rsbseq	r7, r9, r3, rrx
if (pin_sensor_int) {
     a7c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     a80:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
	i_trigger ((aword)(&__input_pins));
     a84:	00636f6c 	rsbeq	r6, r3, ip, ror #30
     a88:	61776e75 	cmnvs	r7, r5, ror lr
     a8c:	71007469 	tstvc	r0, r9, ror #8
     a90:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     a94:	726f6900 	rsbvc	r6, pc, #0, 18
     a98:	5f007165 	svcpl	0x00007165
     a9c:	5f69705f 	svcpl	0x0069705f
     aa0:	6b726f66 	blvs	1c9c840 <__ccfg+0x1c7c898>
     aa4:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
     aa8:	706d006c 	rsbvc	r0, sp, ip, rrx
     aac:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
	__pinsen_disable_and_clear;
     ab0:	765f5f00 	ldrbvc	r5, [pc], -r0, lsl #30
	RISE_N_SHINE;
     ab4:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     ab8:	75007473 	strvc	r7, [r0, #-1139]	; 0xfffffb8d
     abc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
}
     ac0:	64615f72 	strbtvs	r5, [r1], #-3954	; 0xfffff08e
     ac4:	41550064 	cmpmi	r5, r4, rrx
     ac8:	75425452 	strbvc	r5, [r2, #-1106]	; 0xfffffbae
     acc:	5f007973 	svcpl	0x00007973
     ad0:	5f69705f 	svcpl	0x0069705f
void system_init () {
     ad4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	695f636f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	0074696e 	rsbseq	r6, r4, lr, ror #18
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; a2c <__pinlist_setirq+0x38>
     ae4:	616d2f65 	cmnvs	sp, r5, ror #30
     ae8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     af0:	706f746b 	rsbvc	r7, pc, fp, ror #8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     af8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     afc:	4349502f 	movtmi	r5, #36911	; 0x902f
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	502f534f 	eorpl	r5, pc, pc, asr #6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b04:	534f6369 	movtpl	r6, #62313	; 0xf369
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	2f6c656e 	svccs	0x006c656e
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	632e6c65 			; <UNDEFINED> instruction: 0x632e6c65
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	72745f69 	rsbsvc	r5, r4, #420	; 0x1a4
		pin = (port_confs [i] >> 19) & 0x1f;
     b20:	65676769 	strbvs	r6, [r7, #-1897]!	; 0xfffff897
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b24:	5f5f0072 	svcpl	0x005f0072
     b28:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     b2c:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
     b30:	5f5f006e 	svcpl	0x005f006e
		if (port_confs [i] & 0x80)
     b34:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; a5c <GPIOIntHandler+0x2c>	; <UNPREDICTABLE>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	72667861 	rsbvc	r7, r6, #6356992	; 0x610000
     b3c:	63006565 	movwvs	r6, #1381	; 0x565
		if (port_confs [i] & 0x40)
     b40:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	00676e69 	rsbeq	r6, r7, r9, ror #28
     b48:	6b68636e 	blvs	1a19908 <__ccfg+0x19f9960>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4c:	666e6d00 	strbtvs	r6, [lr], -r0, lsl #26
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	00656572 	rsbeq	r6, r5, r2, ror r5
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b54:	636f7270 	cmnvs	pc, #112, 4
	all_leds_blink;
     b58:	00646565 	rsbeq	r6, r4, r5, ror #10
     b5c:	6e656c6d 	cdpvs	12, 6, cr6, cr5, cr13, {3}
     b60:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     b64:	74705f69 	ldrbtvc	r5, [r0], #-3945	; 0xfffff097
     b68:	67676972 			; <UNDEFINED> instruction: 0x67676972
     b6c:	61007265 	tstvs	r0, r5, ror #4
     b70:	65646464 	strbvs	r6, [r4, #-1124]!	; 0xfffffb9c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	6e756676 	mrcvs	6, 3, r6, cr5, cr6, {3}
     b78:	69700063 	ldmdbvs	r0!, {r0, r1, r5, r6}^
     b7c:	72657664 	rsbvc	r7, r5, #100, 12	; 0x6400000
     b80:	61696400 	cmnvs	r9, r0, lsl #8
     b84:	5f5f0067 	svcpl	0x005f0067
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	61637274 	smcvs	14116	; 0x3724
     b90:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
	IntEnable (INT_AON_RTC_COMB);
     b94:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     b98:	5f00745f 	svcpl	0x0000745f
     b9c:	756e675f 	strbvc	r6, [lr, #-1887]!	; 0xfffff8a1
	__pi_malloc_init ();
     ba0:	61765f63 	cmnvs	r6, r3, ror #30
	IntEnable (INT_AON_GPIO_EDGE);
     ba4:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
     ba8:	636d0074 	cmnvs	sp, #116	; 0x74
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     bac:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	73617700 	cmnvc	r1, #0, 14
     bb4:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     bb8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	73656400 	cmnvc	r5, #0, 8
     bc0:	656d0074 	strbvs	r0, [sp, #-116]!	; 0xffffff8c
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	6d007373 	stcvs	3, cr7, [r0, #-460]	; 0xfffffe34
     bc8:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     bcc:	5f5f0074 	svcpl	0x005f0074
	urates [0] = UART_RATE / 100;
     bd0:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
     bd4:	74736461 	ldrbtvc	r6, [r3], #-1121	; 0xfffffb9f
	reinit_uart ();
     bd8:	00657461 	rsbeq	r7, r5, r1, ror #8
	EXTRA_INITIALIZERS;
     bdc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     be0:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	5f5f0074 	svcpl	0x005f0074
     be8:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
     bec:	6d746961 			; <UNDEFINED> instruction: 0x6d746961
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	6c006d65 	stcvs	13, cr6, [r0], {101}	; 0x65
     bf4:	00646e72 	rsbeq	r6, r4, r2, ror lr
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	6c6c696b 			; <UNDEFINED> instruction: 0x6c6c696b
     bfc:	006c6c61 	rsbeq	r6, ip, r1, ror #24
			devinit [i] . init (devinit [i] . param);
     c00:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
     c08:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     c0c:	6f425f00 	svcvs	0x00425f00
	IntEnable (INT_UART0_COMB);
     c10:	63006c6f 	movwvs	r6, #3183	; 0xc6f
     c14:	6b6e7568 	blvs	1b9e1bc <__ccfg+0x1b7e214>
}
     c18:	64707500 	ldrbtvs	r7, [r0], #-1280	; 0xfffffb00
	tci_run_auxiliary_timer ();
     c1c:	5f657461 	svcpl	0x00657461
		diag ("");
     c20:	61775f6e 	cmnvs	r7, lr, ror #30
     c24:	5f00656b 	svcpl	0x0000656b
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c28:	5f69705f 	svcpl	0x0069705f
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
		diag ("Leftover RAM: %d bytes",
     c30:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
     c34:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
     c38:	656c6400 	strbvs	r6, [ip, #-1024]!	; 0xfffffc00
     c3c:	5f007466 	svcpl	0x00007466
     c40:	5f69705f 	svcpl	0x0069705f
     c44:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
     c48:	64007970 	strvs	r7, [r0], #-2416	; 0xfffff690
     c4c:	74756f67 	ldrbtvc	r6, [r5], #-3943	; 0xfffff099
     c50:	615f5f00 	cmpvs	pc, r0, lsl #30
     c54:	5f5f0070 	svcpl	0x005f0070
     c58:	755f6970 	ldrbvc	r6, [pc, #-2416]	; 2f0 <root+0x2c>
     c5c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     c60:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
     c64:	66770074 			; <UNDEFINED> instruction: 0x66770074
     c68:	6e006e75 	mcrvs	14, 0, r6, cr0, cr5, {3}
     c6c:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
     c70:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c74:	72665f69 	rsbvc	r5, r6, #420	; 0x1a4
     c78:	44006565 	strmi	r6, [r0], #-1381	; 0xfffffa9b
     c7c:	49535f49 	ldmdbmi	r3, {r0, r3, r6, r8, r9, sl, fp, ip, lr}^
     c80:	5f5f0047 	svcpl	0x005f0047
     c84:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; bac <system_init+0xd8>	; <UNPREDICTABLE>
     c88:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
__attribute__ ((noreturn)) void __pi_release () {
     c8c:	5f5f0074 	svcpl	0x005f0074
     c90:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     c94:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	5f007970 	svcpl	0x00007970
	check_stack_overflow;
     c9c:	5f69705f 	svcpl	0x0069705f
     ca0:	6e696f6a 	cdpvs	15, 6, cr6, cr9, cr10, {3}
     ca4:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
	update_n_wake (MAX_WORD, NO);
     ca8:	5f72656d 	svcpl	0x0072656d
     cac:	656c6564 	strbvs	r6, [ip, #-1380]!	; 0xfffffa9c
     cb0:	5f006574 	svcpl	0x00006574
	for_all_tasks (__pi_curr) {
     cb4:	5f69705f 	svcpl	0x0069705f
     cb8:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
     cbc:	00746163 	rsbseq	r6, r4, r3, ror #2
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	5f766374 	svcpl	0x00766374
	__SLEEP;
     cc4:	7a697371 	bvc	1a5da90 <__ccfg+0x1a3dae8>
     cc8:	72700065 	rsbsvc	r0, r0, #101	; 0x65
     ccc:	5f007665 	svcpl	0x00007665
     cd0:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	system_event_count ++;
     cd4:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     cd8:	745f7274 	ldrbvc	r7, [pc], #-628	; ce0 <__pi_release+0x54>
	switch (__pi_systat.effpdm) {
     cdc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     ce0:	5f796870 	svcpl	0x00796870
     ce4:	00706f74 	rsbseq	r6, r0, r4, ror pc
     ce8:	5f766374 	svcpl	0x00766374
			__WFI ();
     cec:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
     cf0:	006c6f72 	rsbeq	r6, ip, r2, ror pc
     cf4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c40 <system_init+0x16c>
	check_stack_overflow;
     cf8:	616d2f65 	cmnvs	sp, r5, ror #30
     cfc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     d00:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     d04:	706f746b 	rsbvc	r7, pc, fp, ror #8
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			goto Redo;
     d0c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
	for_all_tasks (__pi_curr) {
     d10:	4349502f 	movtmi	r5, #36911	; 0x902f
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	502f534f 	eorpl	r5, pc, pc, asr #6
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	534f6369 	movtpl	r6, #62313	; 0xf369
     d1c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	562f7362 	strtpl	r7, [pc], -r2, ror #6
     d24:	4974654e 	ldmdbmi	r4!, {r1, r2, r3, r6, r8, sl, sp, lr}^
     d28:	7663742f 	strbtvc	r7, [r3], -pc, lsr #8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2c:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
     d30:	5f707663 	svcpl	0x00707663
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	70736964 	rsbsvc	r6, r3, r4, ror #18
     d38:	0065736f 	rsbeq	r7, r5, pc, ror #6
			__WFI ();
     d3c:	70766374 	rsbsvc	r6, r6, r4, ror r3
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d40:	725f7968 	subsvc	r7, pc, #104, 18	; 0x1a0000
     d44:	6e006765 	cdpvs	7, 0, cr6, cr0, cr5, {3}
}
     d48:	00747865 	rsbseq	r7, r4, r5, ror #16
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	5f6e7566 	svcpl	0x006e7566
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	63740074 	cmnvs	r4, #116	; 0x74
     d58:	756c7076 	strbvc	r7, [ip, #-118]!	; 0xffffff8a
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5c:	00745f67 	rsbseq	r5, r4, r7, ror #30
     d60:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d64:	675f7968 	ldrbvs	r7, [pc, -r8, ror #18]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     d70:	006f666e 	rsbeq	r6, pc, lr, ror #12
     d74:	5f766374 	svcpl	0x00766374
     d78:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d80:	6f72645f 	svcvs	0x0072645f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	68700070 	ldmdavs	r0!, {r4, r5, r6}^
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	6e697379 	mcrvs	3, 3, r7, cr9, cr9, {3}
     d8c:	65006f66 	strvs	r6, [r0, #-3942]	; 0xfffff09a
     d90:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     d94:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d98:	5f796870 	svcpl	0x00796870
			SysCtrlSetRechargeBeforePowerDown
     d9c:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da0:	63740065 	cmnvs	r4, #101	; 0x65
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da4:	615f7076 	cmpvs	pc, r6, ror r0	; <UNPREDICTABLE>
     da8:	63617474 	cmnvs	r1, #116, 8	; 0x74000000
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	716f0068 	cmnvc	pc, r8, rrx
     db0:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     db4:	5f5f0073 	svcpl	0x005f0073
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	5f766374 	svcpl	0x00766374
     dbc:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	00735f6d 	rsbseq	r5, r3, sp, ror #30
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	63745f5f 	cmnvs	r4, #380	; 0x17c
     dc8:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     dcc:	5f6d6574 	svcpl	0x006d6574
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dd0:	5f5f0074 	svcpl	0x005f0074
			while (!(AONWUCPowerStatusGet () &
     dd4:	5f766374 	svcpl	0x00766374
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	6f6c6268 	svcvs	0x006c6268
     ddc:	745f6b63 	ldrbvc	r6, [pc], #-2915	; de4 <__pi_release+0x158>
     de0:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de4:	72750070 	rsbsvc	r0, r5, #112	; 0x70
     de8:	746e6567 	strbtvc	r6, [lr], #-1383	; 0xfffffa99
     dec:	6c617600 	stclvs	6, cr7, [r1], #-0
     df0:	45006575 	strmi	r6, [r0, #-1397]	; 0xfffffa8b
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	74725f72 	ldrbtvc	r5, [r2], #-3954	; 0xfffff08e
     df8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	6f6c635f 	svcvs	0x006c635f
     e00:	73656400 	cmnvc	r5, #0, 8
			SysCtrlAdjustRechargeAfterPowerDown ();
     e04:	70697263 	rsbvc	r7, r9, r3, ror #4
			reinit_uart ();
     e08:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
     e0c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e10:	6172655f 	cmnvs	r2, pc, asr r5
}
     e14:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	655f7663 	ldrbvs	r7, [pc, #-1635]	; 7bd <reinit_uart+0x15>
     e1c:	0070646e 	rsbseq	r6, r0, lr, ror #8
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	5f766374 	svcpl	0x00766374
     e24:	0074756f 	rsbseq	r7, r4, pc, ror #10
     e28:	70766374 	rsbsvc	r6, r6, r4, ror r3
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
     e30:	75717200 	ldrbvc	r7, [r1, #-512]!	; 0xfffffe00
     e34:	00657565 	rsbeq	r7, r5, r5, ror #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e38:	5f766374 	svcpl	0x00766374
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e3c:	00746d74 	rsbseq	r6, r4, r4, ror sp
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	73727470 	cmnvc	r2, #112, 8	; 0x70000000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
     e48:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	63740073 	cmnvs	r4, #115	; 0x73
     e50:	6e775f76 	mrcvs	15, 3, r5, cr7, cr6, {3}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	74007370 	strvc	r7, [r0], #-880	; 0xfffffc90
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     e60:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			PRCMPowerDomainOff (
     e64:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
     e68:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__SLEEP;
     e6c:	6f6c635f 	svcvs	0x006c635f
     e70:	5f006573 	svcpl	0x00006573
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	goto Redo;
     e78:	7365735f 	cmnvc	r5, #2080374785	; 0x7c000001
     e7c:	63736564 	cmnvs	r3, #100, 10	; 0x19000000
     e80:	7000745f 	andvc	r7, r0, pc, asr r4
     e84:	00737968 	rsbseq	r7, r3, r8, ror #18
     e88:	73796870 	cmnvc	r9, #112, 16	; 0x700000
     e8c:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     e90:	69617400 	stmdbvs	r1!, {sl, ip, sp, lr}^
     e94:	7571006c 	ldrbvc	r0, [r1, #-108]!	; 0xffffff94
     e98:	64657565 	strbtvs	r7, [r5], #-1381	; 0xfffffa9b
     e9c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     ea0:	6165725f 	cmnvs	r5, pc, asr r2
     ea4:	63740064 	cmnvs	r4, #100	; 0x64
     ea8:	6e695f76 	mcrvs	15, 3, r5, cr9, cr6, {3}
     eac:	74007469 	strvc	r7, [r0], #-1129	; 0xfffffb97
     eb0:	665f7663 	ldrbvs	r7, [pc], -r3, ror #12
     eb4:	73006d72 	movwvc	r6, #3442	; 0xd72
     eb8:	69737365 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     ebc:	74006e6f 	strvc	r6, [r0], #-3695	; 0xfffff191
     ec0:	5f707663 	svcpl	0x00707663
     ec4:	6e6f6c63 	cdpvs	12, 6, cr6, cr15, cr3, {3}
     ec8:	63740065 	cmnvs	r4, #101	; 0x65
     ecc:	615f7076 	cmpvs	pc, r6, ror r0	; <UNPREDICTABLE>
     ed0:	67697373 			; <UNDEFINED> instruction: 0x67697373
     ed4:	6c70006e 	ldclvs	0, cr0, [r0], #-440	; 0xfffffe48
     ed8:	74006469 	strvc	r6, [r0], #-1129	; 0xfffffb97
     edc:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     ee0:	6e655f79 	mcrvs	15, 3, r5, cr5, cr9, {3}
int main (void) {
     ee4:	74610064 	strbtvc	r0, [r1], #-100	; 0xffffff9c
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	74617074 	strbtvc	r7, [r1], #-116	; 0xffffff8c
     eec:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
	system_init ();
     ef8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	tcv_init ();
     efc:	746d785f 	strbtvc	r7, [sp], #-2143	; 0xfffff7a1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f00:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     f04:	5f706461 	svcpl	0x00706461
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	63740074 	cmnvs	r4, #116	; 0x74
     f0c:	6c705f76 	ldclvs	15, cr5, [r0], #-472	; 0xfffffe28
     f10:	68006775 	stmdavs	r0, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f14:	00646165 	rsbeq	r6, r4, r5, ror #2
     f18:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
	delay (16, 0);
     f1c:	74756269 	ldrbtvc	r6, [r5], #-617	; 0xfffffd97
     f20:	5f007365 	svcpl	0x00007365
     f24:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
	__pi_release ();
     f28:	6568715f 	strbvs	r7, [r8, #-351]!	; 0xfffffea1
     f2c:	745f6461 	ldrbvc	r6, [pc], #-1121	; f34 <main+0x50>
     f30:	756c7000 	strbvc	r7, [ip, #-0]!
     f34:	006e6967 	rsbeq	r6, lr, r7, ror #18
     f38:	676e656c 	strbvs	r6, [lr, -ip, ror #10]!
     f3c:	64006874 	strvs	r6, [r0], #-2164	; 0xfffff78c
     f40:	00707369 	rsbseq	r7, r0, r9, ror #6
static void killev (__pi_pcb_t *pid) {
     f44:	5f766374 	svcpl	0x00766374
	wfun = (aword)(pid->code);
     f48:	00706e72 	rsbseq	r6, r0, r2, ror lr
	for_all_tasks (i) {
     f4c:	70766374 	rsbsvc	r6, r6, r4, ror r3
		for (j = 0; j < nevents (i); j++) {
     f50:	725f7968 	subsvc	r7, pc, #104, 18	; 0x1a0000
     f54:	62007663 	andvs	r7, r0, #103809024	; 0x6300000
     f58:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
			    || i->Events [j] . Event == wfun
     f5c:	6c700065 	ldclvs	0, cr0, [r0], #-404	; 0xfffffe6c
		for (j = 0; j < nevents (i); j++) {
     f60:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
			if (i->Events [j] . Event == (aword)pid
     f64:	5f5f0073 	svcpl	0x005f0073
     f68:	5f766374 	svcpl	0x00766374
     f6c:	6f6c6268 	svcvs	0x006c6268
				wakeupev (i, j);
     f70:	735f6b63 	cmpvc	pc, #101376	; 0x18c00
     f74:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
	for_all_tasks (i) {
     f78:	6e696f67 	cdpvs	15, 6, cr6, cr9, cr7, {3}
}
     f7c:	63740067 	cmnvs	r4, #103	; 0x67
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	635f7076 	cmpvs	pc, #118	; 0x76
static void qfree (aword *ch) {
     f84:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	5f006c6f 	svcpl	0x00006c6f
	cc = (aword*)(mpools + MA_NP);
     f8c:	61747365 	cmnvs	r4, r5, ror #6
	m_setnextp (ch, chunk);
     f90:	5f006b63 	svcpl	0x00006b63
	m_setnextp (cc, ch);
     f94:	61746164 	cmnvs	r4, r4, ror #2
}
     f98:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
     fa0:	61460063 	cmpvs	r6, r3, rrx
     fa4:	49746c75 	ldmdbmi	r4!, {r0, r2, r4, r5, r6, sl, fp, sp, lr}^
			m_setnextp (cc, m_nextp (chunk));
     fa8:	61485253 	cmpvs	r8, r3, asr r2
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     fb0:	6d4e0072 	stclvs	0, cr0, [lr, #-456]	; 0xfffffe38
     fb4:	48525369 	ldmdami	r2, {r0, r3, r5, r6, r8, r9, ip, lr}^
     fb8:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	5f007265 	svcpl	0x00007265
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	78657465 	stmdavc	r5!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fc4:	655f0074 	ldrbvs	r0, [pc, #-116]	; f58 <killev+0x14>
     fc8:	00737362 	rsbseq	r7, r3, r2, ror #6
			m_setnextp (cc, m_nextp (chunk));
     fcc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; f18 <main+0x34>
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	616d2f65 	cmnvs	sp, r5, ror #30
     fd4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     fd8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     fdc:	706f746b 	rsbvc	r7, pc, fp, ror #8
     fe0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     fe4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			if (m_size (chunk) >= m_size (ch))
     fe8:	4349502f 	movtmi	r5, #36911	; 0x902f
     fec:	502f534f 	eorpl	r5, pc, pc, asr #6
     ff0:	534f6369 	movtpl	r6, #62313	; 0xf369
		chunk = m_nextp (chunk))
     ff4:	3143432f 	cmpcc	r3, pc, lsr #6
     ff8:	2f585833 	svccs	0x00585833
     ffc:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	5f707574 	svcpl	0x00707574
	diag_wait (a);
    1004:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
	diag_wchar (c, a);
    1008:	625f0063 	subsvs	r0, pc, #99	; 0x63
    100c:	5f007373 	svcpl	0x00007373
}
    1010:	74616465 	strbtvc	r6, [r1], #-1125	; 0xfffffb9b
    1014:	6e490061 	cdpvs	0, 4, cr0, cr9, cr1, {3}
	syserror (ESTATE, "state");
    1018:	66654474 			; <UNDEFINED> instruction: 0x66654474
    101c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    1020:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
    1024:	0072656c 	rsbseq	r6, r2, ip, ror #10
void update_n_wake (word min, Boolean force) {
    1028:	66705f67 	ldrbtvs	r5, [r0], -r7, ror #30
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	6365566e 	cmnvs	r5, #115343360	; 0x6e00000
    1030:	73726f74 	cmnvc	r2, #116, 30	; 0x1d0
    1034:	69757000 	ldmdbvs	r5!, {ip, sp, lr}^
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	65443233 	strbvs	r3, [r4, #-563]	; 0xfffffdcd
    103c:	52007473 	andpl	r7, r0, #1929379840	; 0x73000000
    1040:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1044:	00525349 	subseq	r5, r2, r9, asr #6
    1048:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    104c:	4c4f565f 	mcrrmi	6, 5, r5, pc, cr15
    1050:	4f4c5f54 	svcmi	0x004c5f54
    1054:	305f4441 	subscc	r4, pc, r1, asr #8
    1058:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    105c:	4f565f47 	svcmi	0x00565f47
    1060:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
    1064:	5f44414f 	svcpl	0x0044414f
    1068:	43430031 	movtmi	r0, #12337	; 0x3031
		for_all_tasks (i) {
    106c:	425f4746 	subsmi	r4, pc, #18350080	; 0x1180000
	__pi_mintk = znew + min;
    1070:	4f435f4c 	svcmi	0x00435f4c
    1074:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
			if (!twaiting (i))
    1078:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    107c:	54525f47 	ldrbpl	r5, [r2], #-3911	; 0xfffff0b9
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	464f5f43 	strbmi	r5, [pc], -r3, asr #30
    1084:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
    1088:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    108c:	4f4d5f47 	svcmi	0x004d5f47
    1090:	435f4544 	cmpmi	pc, #68, 10	; 0x11000000
    1094:	00464e4f 	subeq	r4, r6, pc, asr #28
    1098:	63635f5f 	cmnvs	r3, #380	; 0x17c
    109c:	2f006766 	svccs	0x00006766
    10a0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    10a4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    10a8:	2f6e6974 	svccs	0x006e6974
    10ac:	6b736544 	blvs	1cda5c4 <__ccfg+0x1cba61c>
				wakeuptm (i);
    10b0:	2f706f74 	svccs	0x00706f74
    10b4:	4f534c4f 	svcmi	0x00534c4f
		for_all_tasks (i) {
    10b8:	2f54454e 	svccs	0x0054454e
				d = i->Timer - znew;
    10bc:	4f434950 	svcmi	0x00434950
    10c0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    10c4:	2f534f63 	svccs	0x00534f63
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	33314343 	teqcc	r1, #201326593	; 0xc000001
    10cc:	632f5858 			; <UNDEFINED> instruction: 0x632f5858
    10d0:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
	__pi_old = znew;
    10d4:	43430063 	movtmi	r0, #12387	; 0x3063
}
    10d8:	535f4746 	cmppl	pc, #18350080	; 0x1180000
	TCI_RUN_DELAY_TIMER;
    10dc:	5f455a49 	svcpl	0x00455a49
}
    10e0:	5f444e41 	svcpl	0x00444e41
    10e4:	5f534944 	svcpl	0x00534944
    10e8:	47414c46 	strbmi	r4, [r1, -r6, asr #24]
    10ec:	43430053 	movtmi	r0, #12371	; 0x3053
    10f0:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
void proceed (word state) {
    10f4:	5f454545 	svcpl	0x00454545
	prcdstate (__pi_curr, state);
    10f8:	5f43414d 	svcpl	0x0043414d
    10fc:	43430030 	movtmi	r0, #12336	; 0x3030
	release;
    1100:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1104:	5f454545 	svcpl	0x00454545
void __pi_wait (aword event, word state) {
    1108:	5f43414d 	svcpl	0x0043414d
	sint j = nevents (__pi_curr);
    110c:	43430031 	movtmi	r0, #12337	; 0x3031
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; 1000 <dgout>
    1114:	5f45444f 	svcpl	0x0045444f
    1118:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
		syserror (ENEVENTS, "sw");
    111c:	4300315f 	movwmi	r3, #351	; 0x15f
    1120:	5f474643 	svcpl	0x00474643
	setestate (__pi_curr->Events [j], state, event);
    1124:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	incwait (__pi_curr);
    1128:	5041545f 	subpl	r5, r1, pc, asr r4
	setestate (__pi_curr->Events [j], state, event);
    112c:	5041445f 	subpl	r4, r1, pc, asr r4
}
    1130:	4300305f 	movwmi	r3, #95	; 0x5f
    1134:	5f474643 	svcpl	0x00474643
    1138:	47464343 	strbmi	r4, [r6, -r3, asr #6]
void __pi_trigger (aword event) {
    113c:	5041545f 	subpl	r5, r1, pc, asr r4
	for_all_tasks (i) {
    1140:	5041445f 	subpl	r4, r1, pc, asr r4
		for (j = 0; j < nevents (i); j++) {
    1144:	6300315f 	movwvs	r3, #351	; 0x15f
    1148:	5f676663 	svcpl	0x00676663
    114c:	43430074 	movtmi	r0, #12404	; 0x3074
    1150:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
			if (i->Events [j] . Event == event) {
    1154:	5f474643 	svcpl	0x00474643
    1158:	544f5250 	strbpl	r5, [pc], #-592	; 1160 <__pi_trigger+0x24>
    115c:	3732315f 			; <UNDEFINED> instruction: 0x3732315f
				wakeupev (i, j);
    1160:	0036395f 	eorseq	r3, r6, pc, asr r9
    1164:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for_all_tasks (i) {
    1168:	4152455f 	cmpmi	r2, pc, asr r5
}
    116c:	435f4553 	cmpmi	pc, #348127232	; 0x14c00000
aword __pi_join (aword pid, word st) {
    1170:	00464e4f 	subeq	r4, r6, pc, asr #28
	for_all_tasks (i) {
    1174:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1178:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	return 0;
    117c:	52505f47 	subspl	r5, r0, #284	; 0x11c
		if ((aword)i == pid) {
    1180:	335f544f 	cmpcc	pc, #1325400064	; 0x4f000000
			__pi_wait (pid, st);
    1184:	00305f31 	eorseq	r5, r0, r1, lsr pc
}
    1188:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for_all_tasks (i) {
    118c:	414d495f 	cmpmi	sp, pc, asr r9
    1190:	565f4547 	ldrbpl	r4, [pc], -r7, asr #10
void delay (word d, word state) {
    1194:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
	settstate (__pi_curr, state);
    1198:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    119c:	43430046 	movtmi	r0, #12358	; 0x3046
    11a0:	465f4746 	ldrbmi	r4, [pc], -r6, asr #14
    11a4:	5f514552 	svcpl	0x00514552
	update_n_wake (d, YES);
    11a8:	5346464f 	movtpl	r4, #26191	; 0x664f
    11ac:	43005445 	movwmi	r5, #1093	; 0x445
	__pi_curr->Timer = __pi_old + d;
    11b0:	5f474643 	svcpl	0x00474643
    11b4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	inctimer (__pi_curr);
    11b8:	4f52505f 	svcmi	0x0052505f
    11bc:	33365f54 	teqcc	r6, #84, 30	; 0x150
    11c0:	0032335f 	eorseq	r3, r2, pc, asr r3
}
    11c4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11c8:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
	if (fun == NULL)
    11cc:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
		return (int) __pi_curr;
    11d0:	00305f45 	eorseq	r5, r0, r5, asr #30
    11d4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for_all_tasks (i)
    11d8:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
}
    11dc:	4c425f45 	mcrrmi	15, 4, r5, r2, cr5
		if (i->code == fun)
    11e0:	00315f45 	eorseq	r5, r1, r5, asr #30
	for_all_tasks (i)
    11e4:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11e8:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    11ec:	52505f47 	subspl	r5, r0, #284	; 0x11c
word crunning (fsmcode fun) {
    11f0:	395f544f 	ldmdbcc	pc, {r0, r1, r2, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
	for_all_tasks (i)
    11f4:	34365f35 	ldrtcc	r5, [r6], #-3893	; 0xfffff0cb
    11f8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		if (i->code == fun)
    11fc:	58455f47 	stmdapl	r5, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    1200:	464c5f54 			; <UNDEFINED> instruction: 0x464c5f54
			c++;
    1204:	4b4c435f 	blmi	1311f88 <__ccfg+0x12f1fe0>
	for_all_tasks (i)
    1208:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    120c:	43435f47 	movtmi	r5, #16199	; 0x3f47
int __pi_strlen (const char *s) {
    1210:	545f4746 	ldrbpl	r4, [pc], #-1862	; 1218 <__pi_strlen+0x8>
	for (i = 0; *(s+i) != '\0'; i++);
    1214:	504f5f49 	subpl	r5, pc, r9, asr #30
}
    1218:	4e4f4954 			; <UNDEFINED> instruction: 0x4e4f4954
	for (i = 0; *(s+i) != '\0'; i++);
    121c:	50470053 	subpl	r0, r7, r3, asr r0
	while (n--)
    1220:	725f4f49 	subsvc	r4, pc, #292	; 0x124
    1224:	44646165 	strbtmi	r6, [r4], #-357	; 0xfffffe9b
		*dest++ = *src++;
    1228:	6a006f69 	bvs	1cfd4 <__exidx_end+0x1a0cc>
    122c:	006b6e75 	rsbeq	r6, fp, r5, ror lr
    1230:	5f6e6970 	svcpl	0x006e6970
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
		syserror (EREQPAR, "addv");
    1238:	725f726f 	subsvc	r7, pc, #-268435450	; 0xf0000006
		syserror (ERESOURCE, "addv");
    123c:	00646165 	rsbeq	r6, r4, r5, ror #2
	if (ioreq [loc] != NULL)
    1240:	5f6e6970 	svcpl	0x006e6970
    1244:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
		syserror (ERESOURCE, "addv");
    1248:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
	ioreq [loc] = rf;
    124c:	0074696e 	rsbseq	r6, r4, lr, ror #18
}
    1250:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 119c <delay+0x8>
    1254:	616d2f65 	cmnvs	sp, r5, ror #30
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    125c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1260:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1264:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1268:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    126c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1270:	502f534f 	eorpl	r5, pc, pc, asr #6
		syserror (ENODEVICE, "io");
    1274:	534f6369 	movtpl	r6, #62313	; 0xf369
    1278:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
	if (len == 0)
    127c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	6f736e65 	svcvs	0x00736e65
    1284:	702f7372 	eorvc	r7, pc, r2, ror r3	; <UNPREDICTABLE>
	if (ret >= 0)
    1288:	735f6e69 	cmpvc	pc, #1680	; 0x690
	if (ret == -1) {
    128c:	6f736e65 	svcvs	0x00736e65
    1290:	00632e72 	rsbeq	r2, r3, r2, ror lr
		if (retry == WNONE)
    1294:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
		iowait (dev, operation, retry);
    1298:	63616200 	cmnvs	r1, #0, 4
    129c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    12a0:	62654400 	rsbvs	r4, r5, #0, 8
			release;
    12a4:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
	if (ret == -2) {
    12a8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
		if (retry != WNONE) {
    12ac:	2f656d6f 	svccs	0x00656d6f
    12b0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
			iowait (dev, operation, retry);
    12b4:	442f6e69 	strtmi	r6, [pc], #-3689	; 12bc <io+0x64>
    12b8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
			(ioreq [dev]) (NONE, buf, len);
    12bc:	4f2f706f 	svcmi	0x002f706f
    12c0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    12c4:	502f5445 	eorpl	r5, pc, r5, asr #8
		(ioreq [dev]) (NONE, buf, len);
    12c8:	534f4349 	movtpl	r4, #62281	; 0xf349
    12cc:	6369502f 	cmnvs	r9, #47	; 0x2f
    12d0:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    12d4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	if (retry != WNONE) {
    12d8:	2f4f492f 	svccs	0x004f492f
		delay (-ret - 2, retry);
    12dc:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    12e0:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    12e4:	62700063 	rsbsvs	r0, r0, #99	; 0x63
    12e8:	6f747475 	svcvs	0x00747475
		release;
    12ec:	5f5f006e 	svcpl	0x005f006e
    12f0:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	6f747475 	svcvs	0x00747475
    12f8:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
    12fc:	6f747475 	svcvs	0x00747475
    1300:	615f736e 	cmpvs	pc, lr, ror #6
    1304:	6f697463 	svcvs	0x00697463
		syserror (ERESOURCE, "mal1");
    1308:	4345006e 	movtmi	r0, #20590	; 0x506e
    130c:	00746e6f 	rsbseq	r6, r4, pc, ror #28
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	695f6565 	ldmdbvs	pc, {r0, r2, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1314:	5f74696e 	svcpl	0x0074696e
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1318:	73617265 	cmnvc	r1, #1342177286	; 0x50000006
	m_size (mpools [0]) = mlen - m_hdrlen;
    131c:	70750065 	rsbsvc	r0, r5, r5, rrx
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1320:	63006f74 	movwvs	r6, #3956	; 0xf74
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1324:	305f646d 	subscc	r6, pc, sp, ror #8
    1328:	5f656500 	svcpl	0x00656500
}
    132c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1330:	65650065 	strbvs	r0, [r5, #-101]!	; 0xffffff9b
    1334:	6172655f 	cmnvs	r2, pc, asr r5
    1338:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
    133c:	72775f65 	rsbsvc	r5, r7, #404	; 0x194
    1340:	00657469 	rsbeq	r7, r5, r9, ror #8
void __pi_free (aword *ch) {
    1344:	65706f64 	ldrbvs	r6, [r0, #-3940]!	; 0xfffff09c
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1348:	6565006e 	strbvs	r0, [r5, #-110]!	; 0xffffff92
    134c:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
		syserror (EMALLOC, "malg");
    1350:	4357006e 	cmpmi	r7, #110	; 0x6e
    1354:	00746e6f 	rsbseq	r6, r4, pc, ror #28
	mcfree [MA_NP] += m_size (ch);
    1358:	5f646d63 	svcpl	0x00646d63
		m_size (ch) ^= MALLOC_UMASK;
    135c:	616c0033 	cmnvs	ip, r3, lsr r0
    1360:	65007473 	strvs	r7, [r0, #-1139]	; 0xfffffb8d
	mcfree [MA_NP] += m_size (ch);
    1364:	61705f65 	cmnvs	r0, r5, ror #30
	QFREE;
    1368:	0063696e 	rsbeq	r6, r3, lr, ror #18
	if (mevent [MA_NP] . nwait) {
    136c:	735f6565 	cmpvc	pc, #423624704	; 0x19400000
    1370:	00636e79 	rsbeq	r6, r3, r9, ror lr
		trigger ((aword)(&(mevent [MA_NP])));
    1374:	6d6f7266 	sfmvs	f7, 2, [pc, #-408]!	; 11e4 <running+0x18>
		mevent [MA_NP] . nwait --;
    1378:	5f656500 	svcpl	0x00656500
}
    137c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1380:	73647200 	cmnvc	r4, #0, 4
    1384:	682f0072 	stmdavs	pc!, {r1, r4, r5, r6}	; <UNPREDICTABLE>
    1388:	2f656d6f 	svccs	0x00656d6f
void kill (aword pid) {
    138c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
		pid = (aword) __pi_curr;
    1390:	442f6e69 	strtmi	r6, [pc], #-3689	; 1398 <kill+0xc>
	j = NULL;
    1394:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	for_all_tasks (i) {
    1398:	4f2f706f 	svcmi	0x002f706f
	syserror (EREQPAR, "kpi");
    139c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    13a0:	502f5445 	eorpl	r5, pc, r5, asr #8
		if ((aword)i == pid) {
    13a4:	534f4349 	movtpl	r4, #62281	; 0xf349
    13a8:	6369502f 	cmnvs	r9, #47	; 0x2f
				__PCB = i->Next;
    13ac:	502f534f 	eorpl	r5, pc, pc, asr #6
			killev (i);
    13b0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
			ufree (i);
    13b4:	6f74532f 	svcvs	0x0074532f
			if (i == __pi_curr)
    13b8:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    13bc:	6f74732f 	svcvs	0x0074732f
				release;
    13c0:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
				j->Next = i->Next;
    13c4:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    13c8:	30387235 	eorscc	r7, r8, r5, lsr r2
    13cc:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
}
    13d0:	6c636300 	stclvs	3, cr6, [r3], #-0
    13d4:	0065736f 	rsbeq	r7, r5, pc, ror #6
    13d8:	61747364 	cmnvs	r4, r4, ror #6
void killall (fsmcode fun) {
    13dc:	6f630074 	svcvs	0x00630074
	j = NULL;
    13e0:	006e6570 	rsbeq	r6, lr, r0, ror r5
	for (i = __PCB; i != NULL; ) {
    13e4:	72747063 	rsbsvc	r7, r4, #99	; 0x63
			if (i == __pi_curr)
    13e8:	5f656500 	svcpl	0x00656500
	for (i = __PCB; i != NULL; ) {
    13ec:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
	if (rel)
    13f0:	61657200 	cmnvs	r5, r0, lsl #4
		release;
    13f4:	45007964 	strmi	r7, [r0, #-2404]	; 0xfffff69c
		if (i->code == fun) {
    13f8:	656e6f44 	strbvs	r6, [lr, #-3908]!	; 0xfffff0bc
    13fc:	6f647000 	svcvs	0x00647000
			if (j == NULL)
    1400:	77006e77 	smlsdxvc	r0, r7, lr, r6
				__PCB = k;
    1404:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
			if (i == __pi_curr)
    1408:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
				rel = YES;
    140c:	7479625f 	ldrbtvc	r6, [r9], #-607	; 0xfffffda1
			killev (i);
    1410:	75700065 	ldrbvc	r0, [r0, #-101]!	; 0xffffff9b
			ufree (i);
    1414:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
			i = k;
    1418:	5f006574 	svcpl	0x00006574
    141c:	706e695f 	rsbvc	r6, lr, pc, asr r9
				j->Next = k;
    1420:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
    1424:	6f682f00 	svcvs	0x00682f00
}
    1428:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 127c <io+0x24>
    142c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1430:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
	if (size < 8)
    1434:	6f746b73 	svcvs	0x00746b73
		_size = 2;
    1438:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
		_size = (((aword)size) + 3) >> 2;
    1440:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (m_magic (chunk) != MALLOC_MAGIC)
    1444:	2f534f43 	svccs	0x00534f43
		_size = (((aword)size) + 3) >> 2;
    1448:	4f636950 	svcmi	0x00636950
		if (mevent [MA_NP] . nfail != 255)
    144c:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    1450:	2f736269 	svccs	0x00736269
			mevent [MA_NP] . nfail ++;
    1454:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
		mnfree [MA_NP] = 0;
    1458:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
    145c:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1460:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1464:	5f726573 	svcpl	0x00726573
			syserror (EMALLOC, "malc");
    1468:	70006e69 	andvc	r6, r0, r9, ror #28
    146c:	00736372 	rsbseq	r6, r3, r2, ror r3
		if (m_size (chunk) >= _size)
    1470:	5f726573 	svcpl	0x00726573
    1474:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
		chunk = m_nextp (chunk)) {
    1478:	6f682f00 	svcvs	0x00682f00
		m_setnextp (cc, m_nextp (chunk));
    147c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 12d0 <io+0x78>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1480:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1484:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			m_size (chunk) = _size;
    1488:	6f746b73 	svcvs	0x00746b73
			cc = chunk + _size + m_hdrlen;
    148c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1490:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
			m_size (cc) = waste - m_hdrlen;
    1494:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			QFREE;
    1498:	2f534f43 	svccs	0x00534f43
		mevent [MA_NP] . nfail = 0;
    149c:	4f636950 	svcmi	0x00636950
		mcfree [MA_NP] -= m_size (chunk);
    14a0:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    14a4:	2f736269 	svccs	0x00736269
    14a8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    14ac:	732f6c61 			; <UNDEFINED> instruction: 0x732f6c61
		m_size (chunk) |= MALLOC_UMASK;
    14b0:	6f5f7265 	svcvs	0x005f7265
		if (mnfree [MA_NP] > mcfree [MA_NP])
    14b4:	2e667475 	mcrcs	4, 3, r7, cr6, cr5, {3}
		m_size (chunk) |= MALLOC_UMASK;
    14b8:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
			mnfree [MA_NP] = mcfree [MA_NP];
    14bc:	2f656d6f 	svccs	0x00656d6f
}
    14c0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    14c4:	442f6e69 	strtmi	r6, [pc], #-3689	; 14cc <__pi_malloc+0x98>
    14c8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    14cc:	4f2f706f 	svcmi	0x002f706f
    14d0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    14d4:	502f5445 	eorpl	r5, pc, r5, asr #8
    14d8:	534f4349 	movtpl	r4, #62281	; 0xf349
aword __pi_fork (fsmcode func, aword data) {
    14dc:	6369502f 	cmnvs	r9, #47	; 0x2f
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    14e0:	502f534f 	eorpl	r5, pc, pc, asr #6
    14e4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    14e8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
		if ((j = __PCB) == NULL)
    14ec:	2f6c6169 	svccs	0x006c6169
	i->Next = NULL;
    14f0:	5f726573 	svcpl	0x00726573
	i->data = data;
    14f4:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
		if ((j = __PCB) == NULL)
    14f8:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
}
    14fc:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
			for (; j->Next != NULL; j = j->Next);
    1500:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
    1504:	2f656d6f 	svccs	0x00656d6f
	return (aword) i;
    1508:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    150c:	442f6e69 	strtmi	r6, [pc], #-3689	; 1514 <__pi_waitmem+0x4>
	if (mevent [MA_NP] . nwait != 255)
    1510:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1514:	4f2f706f 	svcmi	0x002f706f
    1518:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		mevent [MA_NP] . nwait ++;
    151c:	502f5445 	eorpl	r5, pc, r5, asr #8
	wait ((aword)(&(mevent [MA_NP])), state);
    1520:	534f4349 	movtpl	r4, #62281	; 0xf349
    1524:	6369502f 	cmnvs	r9, #47	; 0x2f
void diag (const char *mess, ...) {
    1528:	502f534f 	eorpl	r5, pc, pc, asr #6
    152c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    1530:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
	diag_disable_int (a, is);
    1534:	2f6c6169 	svccs	0x006c6169
    1538:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 5e1 <tci_run_auxiliary_timer+0x19>
    153c:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
				d = (bc == 16) ? 10000 : 1000000000;
    1540:	2e6c6169 	powcsez	f6, f4, #1.0
	diag_disable_int (a, is);
    1544:	75710063 	ldrbvc	r0, [r1, #-99]!	; 0xffffff9d
	while (*mess != '\0') {
    1548:	00746e61 	rsbseq	r6, r4, r1, ror #28
	dgout ('\r');
    154c:	756f5f5f 	strbvc	r5, [pc, #-3935]!	; 5f5 <AONRTCIntHandler+0x5>
	dgout ('\n');
    1550:	72657374 	rsbvc	r7, r5, #116, 6	; 0xd0000001
    1554:	006c6169 	rsbeq	r6, ip, r9, ror #2
    1558:	4d4f5f5f 	stclmi	15, cr5, [pc, #-380]	; 13e4 <killall+0x8>
	diag_wait (a);
    155c:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
	diag_enable_int (a, is);
    1560:	5f004554 	svcpl	0x00004554
    1564:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
}
    1568:	61697265 	cmnvs	r9, r5, ror #4
    156c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    1570:	2f656d6f 	svccs	0x00656d6f
		if (*mess == '%') {
    1574:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1578:	442f6e69 	strtmi	r6, [pc], #-3689	; 1580 <diag+0x58>
			if (*mess == 'l') {
    157c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1580:	4f2f706f 	svcmi	0x002f706f
				mess++;
    1584:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				val = va_arg (ap, lword);
    1588:	502f5445 	eorpl	r5, pc, r5, asr #8
				bc = 32;
    158c:	534f4349 	movtpl	r4, #62281	; 0xf349
				bc = 16;
    1590:	6369502f 	cmnvs	r9, #47	; 0x2f
			switch (*mess) {
    1594:	502f534f 	eorpl	r5, pc, pc, asr #6
    1598:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    159c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
				dgout ('%');
    15a0:	2f6c6169 	svccs	0x006c6169
    15a4:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
				dgout (*mess);
    15a8:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    15ac:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
			switch (*mess) {
    15b0:	6f682f00 	svcvs	0x00682f00
					v = __pi_hex_enc_table [
    15b4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1408 <killall+0x2c>
					i += 4;
    15b8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
					(val >> (bc - i)) & 0xf];
    15bc:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    15c0:	6f746b73 	svcvs	0x00746b73
					dgout (v);
    15c4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    15c8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
				while (i < bc) {
    15cc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			mess++;
    15d0:	2f534f43 	svccs	0x00534f43
					d /= 10;
    15d4:	4f636950 	svcmi	0x00636950
				if ((val >> (bc - 1)) & 1) {
    15d8:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    15dc:	2f736269 	svccs	0x00736269
					dgout ('-');
    15e0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    15e4:	762f6c61 	strtvc	r6, [pc], -r1, ror #24
						val |= 0xffff0000;
    15e8:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    15ec:	4100632e 	tstmi	r0, lr, lsr #6
    15f0:	6e696167 	powvsez	f6, f1, f7
				d = (bc == 16) ? 10000 : 1000000000;
    15f4:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
    15f8:	5f5f0063 	svcpl	0x005f0063
    15fc:	765f6970 			; <UNDEFINED> instruction: 0x765f6970
					v = (word) (val / d);
    1600:	72617066 	rsbvc	r7, r1, #102	; 0x66
					if (v || d == 1) break;
    1604:	76006573 			; <UNDEFINED> instruction: 0x76006573
    1608:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
					d /= 10;
    160c:	74655200 	strbtvc	r5, [r5], #-512	; 0xfffffe00
				d = (bc == 16) ? 10000 : 1000000000;
    1610:	645f7972 	ldrbvs	r7, [pc], #-2418	; 1618 <diag+0xf0>
					dgout (v + '0');
    1614:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    1618:	682f0064 	stmdavs	pc!, {r2, r5, r6}	; <UNPREDICTABLE>
    161c:	2f656d6f 	svccs	0x00656d6f
					d /= 10;
    1620:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
					val = val - (v * d);
    1624:	442f6e69 	strtmi	r6, [pc], #-3689	; 162c <diag+0x104>
					if (d == 0) break;
    1628:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
					v = (word) (val / d);
    162c:	4f2f706f 	svcmi	0x002f706f
    1630:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
				if (bc == 16)
    1634:	502f5445 	eorpl	r5, pc, r5, asr #8
				d = (bc == 16) ? 10000 : 1000000000;
    1638:	534f4349 	movtpl	r4, #62281	; 0xf349
					val &= 0xffff;
    163c:	6369502f 	cmnvs	r9, #47	; 0x2f
					dgout (*s);
    1640:	502f534f 	eorpl	r5, pc, pc, asr #6
					s++;
    1644:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
				while (*s != '\0') {
    1648:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    164c:	2f6c6169 	svccs	0x006c6169
			dgout (*mess++);
    1650:	61637376 	smcvs	14134	; 0x3736
    1654:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1658:	61637376 	smcvs	14134	; 0x3736
    165c:	6552006e 	ldrbvs	r0, [r2, #-110]	; 0xffffff92
    1660:	5f797274 	svcpl	0x00797274
}
    1664:	776c5f64 	strbvc	r5, [ip, -r4, ror #30]!
    while(1)
    1668:	0064726f 	rsbeq	r7, r4, pc, ror #4
{
    166c:	4f524f4e 	svcmi	0x00524f4e
    SetupTrimDevice();
    1670:	4f415f4d 	svcmi	0x00415f4d
    pui32Src = &_etext;
    1674:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1678:	546e6f4d 	strbtpl	r6, [lr], #-3917	; 0xfffff0b3
    __asm("    ldr     r0, =_bss\n"
    167c:	65706d65 	ldrbvs	r6, [r0, #-3429]!	; 0xfffff29b
    1680:	75746172 	ldrbvc	r6, [r4, #-370]!	; 0xfffffe8e
    1684:	65476572 	strbvs	r6, [r7, #-1394]	; 0xfffffa8e
    1688:	67654474 			; <UNDEFINED> instruction: 0x67654474
    168c:	6f760043 	svcvs	0x00760043
   main();
    1690:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    FaultISR();
    1694:	6f6c5365 	svcvs	0x006c5365
        *pui32Dest++ = *pui32Src++;
    1698:	5f006570 	svcpl	0x00006570
    169c:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    16a0:	745f3233 	ldrbvc	r3, [pc], #-563	; 16a8 <zero_loop+0x24>
    16a4:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    16a8:	34204320 	strtcc	r4, [r0], #-800	; 0xfffffce0
    16ac:	332e392e 			; <UNDEFINED> instruction: 0x332e392e
    16b0:	31303220 	teqcc	r0, r0, lsr #4
    16b4:	32353035 	eorscc	r3, r5, #53	; 0x35
static byte get_byte () {
    16b8:	72282039 	eorvc	r2, r8, #57	; 0x39
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16bc:	61656c65 	cmnvs	r5, r5, ror #24
    16c0:	20296573 	eorcs	r6, r9, r3, ror r5
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    16c4:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
    16c8:	626d652f 	rsbvs	r6, sp, #197132288	; 0xbc00000
		if (ee_inp)
    16cc:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
			b |= 1;
    16d0:	5f342d64 	svcpl	0x00342d64
    16d4:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    16d8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
	for (b = 0, i = 0; i < 8; i++) {
    16dc:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
}
    16e0:	6f697369 	svcvs	0x00697369
    16e4:	3232206e 	eorscc	r2, r2, #110	; 0x6e
    16e8:	37373937 			; <UNDEFINED> instruction: 0x37373937
static void put_byte (byte b) {
    16ec:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
    16f0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
    16f4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
    16f8:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	; 0xfffffe74
		if (b & 0x80)
    16fc:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xfffff09d
    1700:	6d2d7865 	stcvs	8, cr7, [sp, #-404]!	; 0xfffffe6c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1704:	672d2033 			; <UNDEFINED> instruction: 0x672d2033
	for (i = 0; i < 8; i++) {
    1708:	734f2d20 	movtvc	r2, #64800	; 0xfd20
		b <<= 1;
    170c:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
	for (i = 0; i < 8; i++) {
    1710:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
}
    1714:	662d2039 			; <UNDEFINED> instruction: 0x662d2039
    1718:	732d6f6e 			; <UNDEFINED> instruction: 0x732d6f6e
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    171c:	63697274 	cmnvs	r9, #116, 4	; 0x40000007
    1720:	6c612d74 	stclvs	13, cr2, [r1], #-464	; 0xfffffe30
	put_byte (cmd);
    1724:	69736169 	ldmdbvs	r3!, {r0, r3, r5, r6, r8, sp, lr}^
    1728:	2d20676e 	stccs	7, cr6, [r0, #-440]!	; 0xfffffe48
}
    172c:	6e756666 	cdpvs	6, 7, cr6, cr5, cr6, {3}
    1730:	6f697463 	svcvs	0x00697463
static void wwait (word st, word del) {
    1734:	65732d6e 	ldrbvs	r2, [r3, #-3438]!	; 0xfffff292
    1738:	6f697463 	svcvs	0x00697463
    173c:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
	while (dopen && (rdsr () & 1)) {
    1740:	74616466 	strbtvc	r6, [r1], #-1126	; 0xfffffb9a
    1744:	65732d61 	ldrbvs	r2, [r3, #-3425]!	; 0xfffff29f
    1748:	6f697463 	svcvs	0x00697463
    174c:	2d20736e 	stccs	3, cr7, [r0, #-440]!	; 0xfffffe48
	put_byte (CMD_RDSR);
    1750:	6d736166 	ldfvse	f6, [r3, #-408]!	; 0xfffffe68
	r = get_byte ();
    1754:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    1758:	5f38746e 	svcpl	0x0038746e
	while (dopen && (rdsr () & 1)) {
    175c:	2f2e0074 	svccs	0x002e0074
}
    1760:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		if (st == WNONE)
    1764:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1768:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
			mdelay (1);
    176c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1770:	612f6269 			; <UNDEFINED> instruction: 0x612f6269
			delay (del, st);
    1774:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    1778:	6f6d7461 	svcvs	0x006d7461
			release;
    177c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1780:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1784:	72726f43 	rsbsvc	r6, r2, #268	; 0x10c
static void ready () {
    1788:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
	if (dopen) {
    178c:	73006e6f 	movwvc	r6, #3695	; 0xe6f
		wwait (WNONE, 1);
    1790:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
    1794:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    1798:	3a430070 	bcc	10c1960 <__ccfg+0x10a19b8>
	dstat = 0;
    179c:	6e654a5c 			; <UNDEFINED> instruction: 0x6e654a5c
}
    17a0:	736e696b 	cmnvc	lr, #1753088	; 0x1ac000
    17a4:	626f6a5c 	rsbvs	r6, pc, #92, 20	; 0x5c000
    17a8:	57465c73 	smlsldxpl	r5, r6, r3, ip
	udelay (1);
    17ac:	756f7247 	strbvc	r7, [pc, #-583]!	; 156d <diag+0x45>
    17b0:	72442d70 	subvc	r2, r4, #112, 26	; 0x1c00
	udelay (1);
    17b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		dopen = DOPEN_TEMP;
    17b8:	5c62694c 			; <UNDEFINED> instruction: 0x5c62694c
    17bc:	6b726f77 	blvs	1c9d5a0 <__ccfg+0x1c7d5f8>
    17c0:	63617073 	cmnvs	r1, #115	; 0x73
    17c4:	6f6d5c65 	svcvs	0x006d5c65
static void cclose () {
    17c8:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
	if (dopen == DOPEN_TEMP) {
    17cc:	756f5c73 	strbvc	r5, [pc, #-3187]!	; b61 <system_init+0x8d>
    17d0:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
		wwait (WNONE, 1);
    17d4:	3163635c 	cmncc	r3, ip, asr r3
    17d8:	5f787833 	svcpl	0x00787833
	cmd_0 (CMD_DP);
    17dc:	5f616863 	svcpl	0x00616863
    17e0:	5f305f32 	svcpl	0x00305f32
		dopen = 0;
    17e4:	5c747865 	ldclpl	8, cr7, [r4], #-404	; 0xfffffe6c
}
    17e8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
word ee_open () {
    17ec:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
	ready ();
    17f0:	69625c62 	stmdbvs	r2!, {r1, r5, r6, sl, fp, ip, lr}^
	dopen = DOPEN_PERM;
    17f4:	63675c6e 	cmnvs	r7, #28160	; 0x6e00
    17f8:	65720063 	ldrbvs	r0, [r2, #-99]!	; 0xffffff9d
}
    17fc:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
	if (dopen) {
    1800:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1804:	5f5f0065 	svcpl	0x005f0065
		dopen = DOPEN_TEMP;
    1808:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
		cclose ();
    180c:	745f3233 	ldrbvc	r3, [pc], #-563	; 1814 <ser_in>
}
    1810:	33697500 	cmncc	r9, #0, 10
int ser_in (word st, char *buf, int len) {
    1814:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
    1818:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	if (len == 0)
    181c:	00636553 	rsbeq	r6, r3, r3, asr r5
	if (__inpline == NULL) {
    1820:	4f524f4e 	svcmi	0x00524f4e
		if ((prcs = running (__inserial)) == 0) {
    1824:	4f415f4d 	svcmi	0x00415f4d
    1828:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
			prcs = runthread (__inserial);
    182c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1830:	43746e65 	cmnmi	r4, #1616	; 0x650
			if (prcs == 0) {
    1834:	61706d6f 	cmnvs	r0, pc, ror #26
				npwait (st);
    1838:	61566572 	cmpvs	r6, r2, ror r5
		release;
    183c:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
		join (prcs, st);
    1840:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    1844:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
	if (*__inpline == NULL) // bin cmd
    1848:	6e6f6365 	cdpvs	3, 6, cr6, cr15, cr5, {3}
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    184c:	63655364 	cmnvs	r5, #100, 6	; 0x90000001
	if (prcs >= len)
    1850:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
		prcs = len-1;
    1854:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 95c <UART0IntHandler+0x6c>
	memcpy (buf, __inpline, prcs);
    1858:	36746e69 	ldrbtcc	r6, [r4], -r9, ror #28
    185c:	00745f34 	rsbseq	r5, r4, r4, lsr pc
    1860:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
	ufree (__inpline);
    1864:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
	__inpline = NULL;
    1868:	53746e65 	cmnpl	r4, #1616	; 0x650
	if (*buf) // if it's NULL, it's a bin cmd
    186c:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
		buf [prcs] = '\0';
    1870:	4f4e0063 	svcmi	0x004e0063
}
    1874:	5f4d4f52 	svcpl	0x004d4f52
		prcs = strlen (__inpline);
    1878:	524e4f41 	subpl	r4, lr, #260	; 0x104
    187c:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
		return 0;
    1880:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1884:	42343674 	eorsmi	r3, r4, #116, 12	; 0x7400000
    1888:	61567469 	cmpvs	r6, r9, ror #8
int ser_outf (word st, const char *m, ...) {
    188c:	4765756c 	strbmi	r7, [r5, -ip, ror #10]!
    1890:	63007465 	movwvs	r7, #1125	; 0x465
	if ((prcs = running (__outserial)) != 0) {
    1894:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    1898:	7452746e 	ldrbvc	r7, [r2], #-1134	; 0xfffffb92
		join (prcs, st);
    189c:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    18a0:	646e4163 	strbtvs	r4, [lr], #-355	; 0xfffffe9d
		release;
    18a4:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
	if ((buf = vform (NULL, m, ap)) == NULL) {
    18a8:	2e006365 	cdpcs	3, 0, cr6, cr0, cr5, {3}
    18ac:	2f2e2e2f 	svccs	0x002e2e2f
    18b0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		umwait (st);
    18b4:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    18b8:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
	if (runstrand (__outserial, buf) == 0) {
    18bc:	2f62696c 	svccs	0x0062696c
    18c0:	5f6e6f61 	svcpl	0x006e6f61
    18c4:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
		ufree (buf);
    18c8:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
		npwait (st);
    18cc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
}
    18d0:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    18d4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 17a0 <ready+0x18>
    18d8:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    18dc:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
int ser_inf (word st, const char *fmt, ...) {
    18e0:	47697270 			; <UNDEFINED> instruction: 0x47697270
    18e4:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
	if (fmt == NULL)
    18e8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 17b4 <ready+0x2c>
	if (__inpline == NULL) {
    18ec:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
		if ((prcs = running (__inserial)) == 0) {
    18f0:	616c6564 	cmnvs	ip, r4, ror #10
    18f4:	69750079 	ldmdbvs	r5!, {r0, r3, r4, r5, r6}^
			prcs = runthread (__inserial);
    18f8:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    18fc:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
			if (prcs == 0) {
    1900:	6f433233 	svcvs	0x00433233
				npwait (st);
    1904:	00746e75 	rsbseq	r6, r4, r5, ror lr
		release;
    1908:	4f524f4e 	svcmi	0x00524f4e
		join (prcs, st);
    190c:	50435f4d 	subpl	r5, r3, sp, asr #30
    1910:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
	va_start (ap, fmt);
    1914:	4e006469 	cdpmi	4, 0, cr6, cr0, cr9, {3}
	prcs = vscan (__inpline, fmt, ap);
    1918:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 17e4 <cclose+0x1c>
    191c:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
	ufree (__inpline);
    1920:	69737063 	ldmdbvs	r3!, {r0, r1, r5, r6, ip, sp, lr}^
	__inpline = NULL;
    1924:	2f2e0065 	svccs	0x002e0065
}
    1928:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    192c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1930:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		return 0;
    1934:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1938:	632f6269 			; <UNDEFINED> instruction: 0x632f6269
    193c:	632e7570 			; <UNDEFINED> instruction: 0x632e7570
strand (__outserial, const char*)
    1940:	524f4e00 	subpl	r4, pc, #0, 28
    1944:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    1948:	72705550 	rsbsvc	r5, r0, #80, 10	; 0x14000000
    194c:	73616d69 	cmnvc	r1, #6720	; 0x1a40
endstrand
    1950:	706d006b 	rsbvc	r0, sp, fp, rrx
    1954:	76657231 			; <UNDEFINED> instruction: 0x76657231
	ptr = data;
    1958:	69725400 	ldmdbvs	r2!, {sl, ip, lr}^
    195c:	7466416d 	strbtvc	r4, [r6], #-365	; 0xfffffe93
	if (*ptr)
    1960:	6f437265 	svcvs	0x00437265
		len = strlen (ptr);
    1964:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    1968:	57746573 			; <UNDEFINED> instruction: 0x57746573
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    196c:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1970:	6f724670 	svcvs	0x00724670
    1974:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    1978:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    197c:	4f4e006e 	svcmi	0x004e006e
	len -= quant;
    1980:	5f4d4f52 	svcpl	0x004d4f52
    1984:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1988:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
	if (len == 0) {
    198c:	6f437265 	svcvs	0x00437265
		ufree (data);
    1990:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
		finish;
    1994:	57746573 			; <UNDEFINED> instruction: 0x57746573
    1998:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    199c:	6f724670 	svcvs	0x00724670
    19a0:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    19a4:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    19a8:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    19ac:	4f4e0031 	svcmi	0x004e0031
strand (__inserial, address)
    19b0:	5f4d4f52 	svcpl	0x004d4f52
    19b4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    19b8:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
    19bc:	6f437265 	svcvs	0x00437265
    19c0:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
	if (__inpline != NULL)
    19c4:	57746573 			; <UNDEFINED> instruction: 0x57746573
    19c8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
		finish;
    19cc:	6f724670 	svcvs	0x00724670
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    19d0:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    19d4:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
    19d8:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
    19dc:	4f4e0032 	svcmi	0x004e0032
		umwait (IM_INIT);
    19e0:	5f4d4f52 	svcpl	0x004d4f52
		release;
    19e4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
	savedata (data);
    19e8:	74664170 	strbtvc	r4, [r6], #-368	; 0xfffffe90
	len = MAX_LINE_LENGTH;
    19ec:	6f437265 	svcvs	0x00437265
	io (IM_READ, __cport, READ, ptr, 1);
    19f0:	6552646c 	ldrbvs	r6, [r2, #-1132]	; 0xfffffb94
    19f4:	57746573 			; <UNDEFINED> instruction: 0x57746573
    19f8:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    19fc:	6f724670 	svcvs	0x00724670
	if (ptr == (char*) data) { // new line
    1a00:	7568536d 	strbvc	r5, [r8, #-877]!	; 0xfffffc93
    1a04:	776f4474 			; <UNDEFINED> instruction: 0x776f4474
		if (*ptr == '\0') { // bin cmd
    1a08:	6766436e 	strbvs	r4, [r6, -lr, ror #6]!
			proceed (IM_BIN);
    1a0c:	2f2e0033 	svccs	0x002e0033
    1a10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
		if (*ptr < 0x20)
    1a14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1a18:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
			proceed (IM_READ);
    1a1c:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1a20:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
	if (*ptr == '\n' || *ptr == '\r') {
    1a24:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1a28:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
    1a2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 18f8 <ser_inf+0x18>
		*ptr = '\0';
    1a30:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		__inpline = (char*)data;
    1a34:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
		finish;
    1a38:	63614374 	cmnvs	r1, #116, 6	; 0xd0000001
	if (len) {
    1a3c:	6f4d6568 	svcvs	0x004d6568
		ptr++;
    1a40:	63416564 	movtvs	r6, #5476	; 0x1564
    1a44:	64726f63 	ldrbtvs	r6, [r2], #-3939	; 0xfffff09d
		len--;
    1a48:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
	proceed (IM_READ);
    1a4c:	6663436f 	strbtvs	r4, [r3], -pc, ror #6
	io (IM_BIN, __cport, READ, ptr, 1);
    1a50:	74655367 	strbtvc	r5, [r5], #-871	; 0xfffffc99
    1a54:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    1a58:	33697500 	cmncc	r9, #0, 10
    1a5c:	66634632 			; <UNDEFINED> instruction: 0x66634632
    1a60:	65523167 	ldrbvs	r3, [r2, #-359]	; 0xfffffe99
	len -= 2;
    1a64:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
	if (len > *ptr + 1) // 1 for 0x04
    1a68:	41006e6f 	tstmi	r0, pc, ror #28
    1a6c:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
		len = *ptr + 1;
    1a70:	61744a43 	cmnvs	r4, r3, asr #20
    1a74:	776f5067 	strbvc	r5, [pc, -r7, rrx]!
	ptr++;
    1a78:	664f7265 	strbvs	r7, [pc], -r5, ror #4
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1a7c:	72540066 	subsvc	r0, r4, #102	; 0x66
    1a80:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    1a84:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
    1a88:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    1a8c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1a90:	524f4e00 	subpl	r4, pc, #0, 28
	len -= quant;
    1a94:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
		__inpline = (char*)data;
    1a98:	70757465 	rsbsvc	r7, r5, r5, ror #8
		finish;
    1a9c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
	ptr += quant;
    1aa0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    1aa4:	76006563 	strvc	r6, [r0], -r3, ror #10
endstrand
    1aa8:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    1aac:	6964755f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
	proceed (IM_BINL);
    1ab0:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
endstrand
    1ab4:	6f413233 	svcvs	0x00413233
    1ab8:	7379536e 	cmnvc	r9, #-1207959551	; 0xb8000001
    1abc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1ac0:	6c746374 	ldclvs	3, cr6, [r4], #-464	; 0xfffffe30
    1ac4:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    1ac8:	6f4d5f67 	svcvs	0x004d5f67
		if (res && (d < n))
    1acc:	6f436564 	svcvs	0x00436564
    1ad0:	6552666e 	ldrbvs	r6, [r2, #-1646]	; 0xfffff992
    1ad4:	72540067 	subsvc	r0, r4, #103	; 0x67
    1ad8:	66416d69 	strbvs	r6, [r1], -r9, ror #26
			res [d] = (char) c;
    1adc:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
		d++;
    1ae0:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    1ae4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1ae8:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1aec:	72467075 	subvc	r7, r6, #117	; 0x75
    1af0:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    1af4:	6f447475 	svcvs	0x00447475
				enci (10000);
    1af8:	61576e77 	cmpvs	r7, r7, ror lr
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1afc:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1b00:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 19f0 <__inserial+0x40>
	d = 0;
    1b04:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
		c = *fm++;
    1b08:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
		if (c == '\\') {
    1b0c:	4f4e006e 	svcmi	0x004e006e
			if ((c = *fm++) == '\0') {
    1b10:	5f4d4f52 	svcpl	0x004d4f52
    1b14:	73696854 	cmnvc	r9, #84, 16	; 0x540000
				outc ('\\');
    1b18:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
			if ((c = *fm++) == '\0') {
    1b1c:	75427349 	strbvc	r7, [r2, #-841]	; 0xfffffcb7
				outc ('\\');
    1b20:	46746c69 	ldrbtmi	r6, [r4], -r9, ror #24
    1b24:	4343726f 	movtmi	r7, #12911	; 0x326f
			outc (c);
    1b28:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    1b2c:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
			if (c == '\0')
    1b30:	41303276 	teqmi	r0, r6, ror r2
    1b34:	614c646e 	cmpvs	ip, lr, ror #8
			outc (c);
    1b38:	5f726574 	svcpl	0x00726574
				outc (val);
    1b3c:	746c6148 	strbtvc	r6, [ip], #-328	; 0xfffffeb8
				val = (word) va_arg (ap, aword);
    1b40:	69566649 	ldmdbvs	r6, {r0, r3, r6, r9, sl, sp, lr}^
		if (c == '%') {
    1b44:	74616c6f 	strbtvc	r6, [r1], #-3183	; 0xfffff391
    1b48:	76006465 	strvc	r6, [r0], -r5, ror #8
			c = *fm++;
    1b4c:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
			switch (c) {
    1b50:	646f625f 	strbtvs	r6, [pc], #-607	; 1b58 <__pi_vfparse+0x6c>
    1b54:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    1b58:	74784567 	ldrbtvc	r4, [r8], #-1383	; 0xfffffa99
    1b5c:	6c43664c 	mcrrvs	6, 4, r6, r3, cr12
    1b60:	4f4e006b 	svcmi	0x004e006b
    1b64:	5f4d4f52 	svcpl	0x004d4f52
    1b68:	4343534f 	movtmi	r5, #13135	; 0x334f
    1b6c:	6b636f6c 	blvs	18dd924 <__ccfg+0x18bd97c>
				outc ('%');
    1b70:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1b74:	65536563 	ldrbvs	r6, [r3, #-1379]	; 0xfffffa9d
				outc (c);
    1b78:	75630074 	strbvc	r0, [r3, #-116]!	; 0xffffff8c
    1b7c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1b80:	43664874 	cmnmi	r6, #116, 16	; 0x740000
				if (c == '\0')
    1b84:	6b636f6c 	blvs	18dd93c <__ccfg+0x18bd994>
				return d;
    1b88:	33697500 	cmncc	r9, #0, 10
}
    1b8c:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
    1b90:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
			switch (c) {
    1b94:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1b98:	524f4e00 	subpl	r4, pc, #0, 28
    1b9c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
				for (i = 12; ; i -= 4) {
    1ba0:	70757465 	rsbsvc	r7, r5, r5, ror #8
				val = (word) va_arg (ap, aword);
    1ba4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
						[ (val >> i) & 0xf ]);
    1ba8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1bac:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    1bb0:	70796261 	rsbsvc	r6, r9, r1, ror #4
					outc (__pi_hex_enc_table
    1bb4:	56737361 	ldrbtpl	r7, [r3], -r1, ror #6
    1bb8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
					if (i == 0)
    1bbc:	4f4e0031 	svcmi	0x004e0031
    1bc0:	5f4d4f52 	svcpl	0x004d4f52
				for (i = 12; ; i -= 4) {
    1bc4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
				val = (word) va_arg (ap, aword);
    1bc8:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
				if (c == 'd' && (val & 0x8000) != 0) {
    1bcc:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				val = (word) va_arg (ap, aword);
    1bd0:	44726f46 	ldrbtmi	r6, [r2], #-3910	; 0xfffff0ba
				if (c == 'd' && (val & 0x8000) != 0) {
    1bd4:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    1bd8:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
					outc ('-');
    1bdc:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1be0:	73655272 	cmnvc	r5, #536870919	; 0x20000007
					val = (~val) + 1;
    1be4:	6f567465 	svcvs	0x00567465
    1be8:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
				for (i = 12; ; i -= 4) {
    1bec:	75630065 	strbvc	r0, [r3, #-101]!	; 0xffffff9b
				enci (10000);
    1bf0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    1bf4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1bf8:	6976006d 	ldmdbvs	r6!, {r0, r2, r3, r5, r6}^
    1bfc:	7443736d 	strbvc	r7, [r3], #-877	; 0xfffffc93
    1c00:	646f4d6c 	strbtvs	r4, [pc], #-3436	; 1c08 <__pi_vfparse+0x11c>
    1c04:	69003065 	stmdbvs	r0, {r0, r2, r5, r6, ip, sp}
    1c08:	73616962 	cmnvc	r1, #1605632	; 0x188000
    1c0c:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    1c10:	67007465 	strvs	r7, [r0, -r5, ror #8]
    1c14:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1c18:	6f466d69 	svcvs	0x00466d69
    1c1c:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1c20:	43666863 	cmnmi	r6, #6488064	; 0x630000
    1c24:	61566c74 	cmpvs	r6, r4, ror ip
    1c28:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1c2c:	4f524f4e 	svcmi	0x00524f4e
    1c30:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1c34:	47707574 			; <UNDEFINED> instruction: 0x47707574
				if (c == 'd' || c == 'u') {
    1c38:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1c3c:	6f466d69 	svcvs	0x00466d69
					if (c == 'd' &&
    1c40:	736f5872 	cmnvc	pc, #7471104	; 0x720000
					val = va_arg (ap, lword);
    1c44:	46664863 	strbtmi	r4, [r6], -r3, ror #16
					fm++;
    1c48:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
					if (c == 'd' &&
    1c4c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    1c50:	524f4e00 	subpl	r4, pc, #0, 28
						outc ('-');
    1c54:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1c58:	70757465 	rsbsvc	r7, r5, r5, ror #8
						val = (~val) + 1;
    1c5c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
				enci (10000);
    1c60:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
					enci (1000000000UL);
    1c64:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
    1c68:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    1c6c:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
    1c70:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
    1c74:	64006d69 	strvs	r6, [r0], #-3433	; 0xfffff297
    1c78:	61746c65 	cmnvs	r4, r5, ror #24
    1c7c:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    1c80:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
    1c84:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1b50 <__pi_vfparse+0x64>
    1c88:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1c8c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1c90:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1c94:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1c98:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1c9c:	74436648 	strbvc	r6, [r3], #-1608	; 0xfffff9b8
    1ca0:	6567006c 	strbvs	r0, [r7, #-108]!	; 0xffffff94
    1ca4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
				} else if (c == 'x') {
    1ca8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
					for (i = 28; ; i -= 4) {
    1cac:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
					val = va_arg (ap, lword);
    1cb0:	43747845 	cmnmi	r4, #4521984	; 0x450000
							[ (val >> i) & 0xf ]);
    1cb4:	61566766 	cmpvs	r6, r6, ror #14
    1cb8:	0065756c 	rsbeq	r7, r5, ip, ror #10
						outc (__pi_hex_enc_table
    1cbc:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    1cc0:	69725461 	ldmdbvs	r2!, {r0, r5, r6, sl, ip, lr}^
    1cc4:	6975006d 	ldmdbvs	r5!, {r0, r2, r3, r5, r6}^
						if (i == 0)
    1cc8:	6f583233 	svcvs	0x00583233
    1ccc:	66486373 			; <UNDEFINED> instruction: 0x66486373
					for (i = 28; ; i -= 4) {
    1cd0:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
					outc ('%');
    1cd4:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1cd8:	6c615674 	stclvs	6, cr5, [r1], #-464	; 0xfffffe30
    1cdc:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
					outc ('l');
    1ce0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bac <__pi_vfparse+0xc0>
    1ce4:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
				val = (word) va_arg (ap, aword);
    1ce8:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
				outc (val);
    1cec:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1cf0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
				while (*st != '\0') {
    1cf4:	63706d41 	cmnvs	r0, #4160	; 0x1040
    1cf8:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    1cfc:	4e003168 	adfmisz	f3, f0, #0.0
    1d00:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bcc <__pi_vfparse+0xe0>
					outc (*st);
    1d04:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1d08:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
					st++;
    1d0c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
		c = *fm++;
    1d10:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d14:	63706d41 	cmnvs	r0, #4160	; 0x1040
    1d18:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
char *vform (char *res, const char *fm, va_list aq) {
    1d1c:	4e003268 	cdpmi	2, 0, cr3, cr0, cr8, {3}
    1d20:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1bec <__pi_vfparse+0x100>
	if (res != NULL) {
    1d24:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1d28:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1d2c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1d30:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
}
    1d34:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    1d38:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
	fml = strlen (fm) + 17;
    1d3c:	006e4566 	rsbeq	r4, lr, r6, ror #10
    1d40:	4f524f4e 	svcmi	0x00524f4e
    1d44:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
	if ((res = (char*) umalloc (fml)) == NULL)
    1d48:	52323349 	eorspl	r3, r2, #603979777	; 0x24000001
    1d4c:	72576765 	subsvc	r6, r7, #26476544	; 0x1940000
    1d50:	00657469 	rsbeq	r7, r5, r9, ror #8
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1d54:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    1d58:	74614431 	strbtvc	r4, [r1], #-1073	; 0xfffffbcf
    1d5c:	72740061 	rsbsvc	r0, r4, #97	; 0x61
    1d60:	6f466d69 	svcvs	0x00466d69
		ufree (res);
    1d64:	4f635272 	svcmi	0x00635272
		goto Again;
    1d68:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
	if (buf == NULL || fmt == NULL)
    1d6c:	61694249 	cmnvs	r9, r9, asr #4
int vscan (const char *buf, const char *fmt, va_list ap) {
    1d70:	69725473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, lr}^
	if (buf == NULL || fmt == NULL)
    1d74:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1d78:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    1d7c:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
		    	    case 'u': scanu (lword); break;
    1d80:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
			while (isspace (*buf)) buf++;
    1d84:	4f4e006d 	svcmi	0x004e006d
    1d88:	5f4d4f52 	svcpl	0x004d4f52
	while (*fmt != '\0') {
    1d8c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
		if (*fmt++ != '%')
    1d90:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
		switch (*fmt++) {
    1d94:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d98:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    1d9c:	45636461 	strbmi	r6, [r3, #-1121]!	; 0xfffffb9f
    1da0:	66437478 			; <UNDEFINED> instruction: 0x66437478
    1da4:	2f2e0067 	svccs	0x002e0067
    1da8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1dac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
}
    1db0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		switch (*fmt++) {
    1db4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1db8:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    1dbc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1dc0:	6d6f725f 	sfmvs	f7, 2, [pc, #-380]!	; 1c4c <__pi_vfparse+0x160>
			while (isspace (*buf)) buf++;
    1dc4:	7300632e 	movwvc	r6, #814	; 0x32e
    1dc8:	65536275 	ldrbvs	r6, [r3, #-629]	; 0xfffffd8b
    1dcc:	636e4963 	cmnvs	lr, #1622016	; 0x18c000
    1dd0:	524f4e00 	subpl	r4, pc, #0, 28
    1dd4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1dd8:	70757465 	rsbsvc	r7, r5, r5, ror #8
			if (*buf == '\0')
    1ddc:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
			if (*buf != ',') {
    1de0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
			sap = va_arg (ap, char*);
    1de4:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
			nc++;
    1de8:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
			if (*buf != ',') {
    1dec:	75745266 	ldrbvc	r5, [r4, #-614]!	; 0xfffffd9a
				while (!isspace (*buf) && *buf != ',' &&
    1df0:	7443656e 	strbvc	r6, [r3], #-1390	; 0xfffffa92
    1df4:	54656e75 	strbtpl	r6, [r5], #-3701	; 0xfffff18b
    1df8:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1dfc:	4f524f4e 	svcmi	0x00524f4e
    1e00:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1e04:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1e08:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
			while (isspace (*buf)) buf++;
    1e0c:	6f466d69 	svcvs	0x00466d69
    1e10:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1e14:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1e18:	6c756765 	ldclvs	7, cr6, [r5], #-404	; 0xfffffe6c
    1e1c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
			if (*buf == ',') buf++;
    1e20:	43646e41 	cmnmi	r4, #1040	; 0x410
    1e24:	7272696d 	rsbsvc	r6, r2, #1785856	; 0x1b4000
			*sap = '\0';
    1e28:	61527277 	cmpvs	r2, r7, ror r2
			break;
    1e2c:	006f6974 	rsbeq	r6, pc, r4, ror r9	; <UNPREDICTABLE>
		    case 'd': scani (word); break;
    1e30:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1e34:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e38:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    1e3c:	69537075 	ldmdbvs	r3, {r0, r2, r4, r5, r6, ip, sp, lr}^
    1e40:	78456e67 	stmdavc	r5, {r0, r1, r2, r5, r6, r9, sl, fp, sp, lr}^
    1e44:	646e6574 	strbtvs	r6, [lr], #-1396	; 0xfffffa8c
    1e48:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1e4c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e50:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1e54:	65670065 	strbvs	r0, [r7, #-101]!	; 0xffffff9b
    1e58:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e5c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1e60:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    1e64:	75625668 	strbvc	r5, [r2, #-1640]!	; 0xfffff998
    1e68:	566e4566 	strbtpl	r4, [lr], -r6, ror #10
    1e6c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e70:	524f4e00 	subpl	r4, pc, #0, 28
    1e74:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1e78:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1e7c:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1e80:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1e84:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    1e88:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    1e8c:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
    1e90:	3369006e 	cmncc	r9, #110	; 0x6e
    1e94:	67695332 			; <UNDEFINED> instruction: 0x67695332
    1e98:	5664656e 	strbtpl	r6, [r4], -lr, ror #10
    1e9c:	56726464 	ldrbtpl	r6, [r2], -r4, ror #8
		    case 'u': scanu (word); break;
    1ea0:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
    1ea4:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
    1ea8:	31666e6f 	cmncc	r6, pc, ror #28
    1eac:	33697500 	cmncc	r9, #0, 10
    1eb0:	66634632 			; <UNDEFINED> instruction: 0x66634632
    1eb4:	61563167 	cmpvs	r6, r7, ror #2
    1eb8:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1ebc:	4f524f4e 	svcmi	0x00524f4e
    1ec0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1ec4:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1ec8:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1ecc:	6f466d69 	svcvs	0x00466d69
    1ed0:	736f5872 	cmnvc	pc, #7471104	; 0x720000
    1ed4:	49664863 	stmdbmi	r6!, {r0, r1, r5, r6, fp, lr}^
    1ed8:	73616962 	cmnvc	r1, #1605632	; 0x188000
    1edc:	72656874 	rsbvc	r6, r5, #116, 16	; 0x740000
    1ee0:	6567006d 	strbvs	r0, [r7, #-109]!	; 0xffffff93
    1ee4:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
		    case 'x': scanx (word); break;
    1ee8:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1eec:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    1ef0:	646f4d68 	strbtvs	r4, [pc], #-3432	; 1ef8 <vscan+0x18c>
    1ef4:	566e4565 	strbtpl	r4, [lr], -r5, ror #10
    1ef8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1efc:	524f4e00 	subpl	r4, pc, #0, 28
    1f00:	4f5f4d4f 	svcmi	0x005f4d4f
    1f04:	6c434353 	mcrrvs	3, 5, r4, r3, cr3
    1f08:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    1f0c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1f10:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    1f14:	32336900 	eorscc	r6, r3, #0, 18
    1f18:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1f1c:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    1f20:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    1f24:	6366006d 	cmnvs	r6, #109	; 0x6d
    1f28:	4f316766 	svcmi	0x00316766
    1f2c:	6f436373 	svcvs	0x00436373
    1f30:	6400666e 	strvs	r6, [r0], #-1646	; 0xfffff992
    1f34:	4c726c62 	ldclmi	12, cr6, [r2], #-392	; 0xfffffe78
    1f38:	46706f6f 	ldrbtmi	r6, [r0], -pc, ror #30
    1f3c:	65746c69 	ldrbvs	r6, [r4, #-3177]!	; 0xfffff397
    1f40:	73655272 	cmnvc	r5, #536870919	; 0x20000007
    1f44:	6f567465 	svcvs	0x00567465
    1f48:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
    1f4c:	6c615665 	stclvs	6, cr5, [r1], #-404	; 0xfffffe6c
    1f50:	74006575 	strvc	r6, [r0], #-1397	; 0xfffffa8b
    1f54:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1f58:	6f58726f 	svcvs	0x0058726f
    1f5c:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
			switch (*fmt++) {
    1f60:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    1f64:	6f74616c 	svcvs	0x0074616c
    1f68:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    1f6c:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    1f70:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    1f74:	6f697461 	svcvs	0x00697461
		    	    case 'd': scani (lword); break;
    1f78:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1f7c:	62690065 	rsbvs	r0, r9, #101	; 0x65
    1f80:	49736169 	ldmdbmi	r3!, {r0, r3, r5, r6, r8, sp, lr}^
    1f84:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1f88:	4f524f4e 	svcmi	0x00524f4e
    1f8c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1f90:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    1f94:	6f417465 	svcvs	0x00417465
    1f98:	6374526e 	cmnvs	r4, #-536870906	; 0xe0000006
    1f9c:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
    1fa0:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    1fa4:	4f4e0063 	svcmi	0x004e0063
    1fa8:	5f4d4f52 	svcpl	0x004d4f52
    1fac:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1fb0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1fb4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1fb8:	41726f46 	cmnmi	r2, r6, asr #30
    1fbc:	6f63706d 	svcvs	0x0063706d
    1fc0:	7443706d 	strbvc	r7, [r3], #-109	; 0xffffff93
    1fc4:	75006c72 	strvc	r6, [r0, #-3186]	; 0xfffff38e
    1fc8:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    1fcc:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1fd0:	776f5266 	strbvc	r5, [pc, -r6, ror #4]!
		    	    case 'x': scanx (lword); break;
    1fd4:	33697500 	cmncc	r9, #0, 10
    1fd8:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    1fdc:	43664863 	cmnmi	r6, #6488064	; 0x630000
    1fe0:	4e006c6f 	cdpmi	12, 0, cr6, cr0, cr15, {3}
    1fe4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1eb0 <vscan+0x144>
    1fe8:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1fec:	65537075 	ldrbvs	r7, [r3, #-117]	; 0xffffff8b
    1ff0:	64645674 	strbtvs	r5, [r4], #-1652	; 0xfffff98c
    1ff4:	76654c72 			; <UNDEFINED> instruction: 0x76654c72
    1ff8:	6e006c65 	cdpvs	12, 0, cr6, cr0, cr5, {3}
    1ffc:	72547765 	subsvc	r7, r4, #26476544	; 0x1940000
    2000:	61526d69 	cmpvs	r2, r9, ror #26
    2004:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    2008:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
    200c:	61566d69 	cmpvs	r6, r9, ror #26
    2010:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2014:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    2018:	6f747375 	svcvs	0x00747375
    201c:	4472656d 	ldrbtmi	r6, [r2], #-1389	; 0xfffffa93
    2020:	61746c65 	cmnvs	r4, r5, ror #24
    2024:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    2028:	69007473 	stmdbvs	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    202c:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    2030:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    2034:	44706565 	ldrbtmi	r6, [r0], #-1381	; 0xfffffa9b
    2038:	61746c65 	cmnvs	r4, r5, ror #24
    203c:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    2040:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
		    	    case 'd': scani (lword); break;
    2044:	7463416d 	strbtvc	r4, [r3], #-365	; 0xfffffe93
    2048:	46006576 			; <UNDEFINED> instruction: 0x46006576
    204c:	5f525450 	svcpl	0x00525450
    2050:	54454c46 	strbpl	r4, [r5], #-3142	; 0xfffff3ba
    2054:	52454843 	subpl	r4, r5, #4390912	; 0x430000
    2058:	545f3233 	ldrbpl	r3, [pc], #-563	; 2060 <vscan+0x2f4>
    205c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
		    	    case 'u': scanu (lword); break;
    2060:	54535f52 	ldrbpl	r5, [r3], #-3922	; 0xfffff0ae
    2064:	41564444 	cmpmi	r6, r4, asr #8
    2068:	00545f4c 	subseq	r5, r4, ip, asr #30
    206c:	54727563 	ldrbtpl	r7, [r2], #-1379	; 0xfffffa9d
    2070:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2074:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    2078:	6f437463 	svcvs	0x00437463
    207c:	5242706d 	subpl	r7, r2, #109	; 0x6d
    2080:	46006665 	strmi	r6, [r0], -r5, ror #12
    2084:	5f525450 	svcpl	0x00525450
    2088:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    208c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2090:	00545f34 	subseq	r5, r4, r4, lsr pc
    2094:	66666964 	strbtvs	r6, [r6], -r4, ror #18
    2098:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    209c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
    20a0:	6c536576 	cfldr64vs	mvdx6, [r3], {118}	; 0x76
    20a4:	00706565 	rsbseq	r6, r0, r5, ror #10
		    	    case 'x': scanx (lword); break;
    20a8:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    20ac:	526d6152 	rsbpl	r6, sp, #-2147483628	; 0x80000014
			if ((c = *buf++) == '\0')
    20b0:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
    20b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
			sap = va_arg (ap, char*);
    20b8:	616f6c00 	cmnvs	pc, r0, lsl #24
			nc++;
    20bc:	4f4e0064 	svcmi	0x004e0064
			break;
    20c0:	5f4d4f52 	svcpl	0x004d4f52
			while (isspace (*buf)) buf++;
    20c4:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    20c8:	416c7274 	smcmi	50980	; 0xc724
    20cc:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
						*sap++ = *buf++;
    20d0:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    20d4:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
			while (isspace (*buf)) buf++;
    20d8:	74664165 	strbtvc	r4, [r6], #-357	; 0xfffffe9b
    20dc:	6f507265 	svcvs	0x00507265
    20e0:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
		return 0;
    20e4:	006e776f 	rsbeq	r7, lr, pc, ror #14
    20e8:	4f524f4e 	svcmi	0x00524f4e
		    case 'x': scanx (word); break;
    20ec:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    20f0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
		    	    case 'x': scanx (lword); break;
    20f4:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
    20f8:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    20fc:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    2100:	6f666542 	svcvs	0x00666542
    2104:	6f506572 	svcvs	0x00506572
    2108:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    210c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2110:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2114:	2f2e2e2f 	svccs	0x002e2e2f
    2118:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2120 <NOROM_AONBatMonTemperatureGetDegC+0x24>
    211c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2120:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2124:	7379732f 	cmnvc	r9, #-1140850688	; 0xbc000000
    2128:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    212c:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    2130:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    2134:	69706148 	ldmdbvs	r0!, {r3, r6, r8, sp, lr}^
    2138:	64696f56 	strbtvs	r6, [r9], #-3926	; 0xfffff0aa
    213c:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 1244 <adddevfunc+0x10>
    2140:	31746e69 	cmncc	r4, r9, ror #28
    2144:	00745f36 	rsbseq	r5, r4, r6, lsr pc
    2148:	52545046 	subspl	r5, r4, #70	; 0x46
    214c:	5345525f 	movtpl	r5, #21087	; 0x525f
    2150:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2154:	545f3344 	ldrbpl	r3, [pc], #-836	; 215c <TrimAfterColdResetWakeupFromShutDown+0x8>
    2158:	524f4e00 	subpl	r4, pc, #0, 28
    215c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2160:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    2164:	65526c72 	ldrbvs	r6, [r2, #-3186]	; 0xfffff38e
    2168:	53746573 	cmnpl	r4, #482344960	; 0x1cc00000
    216c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2170:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
    2174:	33697500 	cmncc	r9, #0, 10
    2178:	6d6f4432 	cfstrdvs	mvd4, [pc, #-200]!	; 20b8 <vscan+0x34c>
    217c:	736e6961 	cmnvc	lr, #1589248	; 0x184000
    2180:	72657000 	rsbvc	r7, r5, #0
    2184:	64700045 	ldrbtvs	r0, [r0], #-69	; 0xffffffbb
    2188:	706d6554 	rsbvc	r6, sp, r4, asr r5
    218c:	33697500 	cmncc	r9, #0, 10
    2190:	78754132 	ldmdavc	r5!, {r1, r4, r5, r8, lr}^
    2194:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2198:	5200736b 	andpl	r7, r0, #-1409286143	; 0xac000001
    219c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    21a0:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    21a4:	50006563 	andpl	r6, r0, r3, ror #10
    21a8:	444d4352 	strbmi	r4, [sp], #-850	; 0xfffffcae
    21ac:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    21b0:	616e456e 	cmnvs	lr, lr, ror #10
    21b4:	00656c62 	rsbeq	r6, r5, r2, ror #24
    21b8:	4d726570 	cfldr64mi	mvdx6, [r2, #-448]!	; 0xfffffe40
    21bc:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    21c0:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    21c4:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    21c8:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    21cc:	4600646f 	strmi	r6, [r0], -pc, ror #8
    21d0:	5f525450 	svcpl	0x00525450
    21d4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    21d8:	56454454 			; <UNDEFINED> instruction: 0x56454454
    21dc:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    21e0:	5f525450 	svcpl	0x00525450
    21e4:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    21e8:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    21ec:	00545f32 	subseq	r5, r4, r2, lsr pc
    21f0:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    21f4:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    21f8:	61636f4c 	cmnvs	r3, ip, asr #30
    21fc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2200:	50460034 	subpl	r0, r6, r4, lsr r0
    2204:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 20bc <vscan+0x350>
    2208:	41565841 	cmpmi	r6, r1, asr #16
    220c:	00545f4c 	subseq	r5, r4, ip, asr #30
    2210:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    2214:	00706143 	rsbseq	r6, r0, r3, asr #2
    2218:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    221c:	44417463 	strbmi	r7, [r1], #-1123	; 0xfffffb9d
    2220:	6d6f4343 	stclvs	3, cr4, [pc, #-268]!	; 211c <NOROM_AONBatMonTemperatureGetDegC+0x20>
    2224:	6e494270 	mcrvs	2, 2, r4, cr9, cr0, {3}
    2228:	00747570 	rsbseq	r7, r4, r0, ror r5
    222c:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2230:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
    2234:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    2238:	64493233 	strbvs	r3, [r9], #-563	; 0xfffffdcd
    223c:	614d0078 	hvcvs	53256	; 0xd008
    2240:	6c615678 	stclvs	6, cr5, [r1], #-480	; 0xfffffe20
    2244:	70006575 	andvc	r6, r0, r5, ror r5
    2248:	61745364 	cmnvs	r4, r4, ror #6
    224c:	5f006574 	svcpl	0x00006574
    2250:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    2254:	745f3874 	ldrbvc	r3, [pc], #-2164	; 225c <NOROM_SetupTrimDevice+0x34>
    2258:	61654d00 	cmnvs	r5, r0, lsl #26
    225c:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    2260:	6c006575 	cfstr32vs	mvfx6, [r0], {117}	; 0x75
    2264:	65676e6f 	strbvs	r6, [r7, #-3695]!	; 0xfffff191
    2268:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    226c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2270:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    2274:	646f6972 	strbtvs	r6, [pc], #-2418	; 227c <NOROM_SetupTrimDevice+0x54>
    2278:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    227c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2280:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2284:	5f314445 	svcpl	0x00314445
    2288:	65640054 	strbvs	r0, [r4, #-84]!	; 0xffffffac
    228c:	5661746c 	strbtpl	r7, [r1], -ip, ror #8
    2290:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
    2294:	7065656c 	rsbvc	r6, r5, ip, ror #10
    2298:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    229c:	63724300 	cmnvs	r2, #0, 6
    22a0:	48003233 	stmdami	r0, {r0, r1, r4, r5, r9, ip, sp}
    22a4:	756f5346 	strbvc	r5, [pc, #-838]!	; 1f66 <vscan+0x1fa>
    22a8:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    22ac:	53656661 	cmnpl	r5, #101711872	; 0x6100000
    22b0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    22b4:	6c460068 	mcrrvs	0, 6, r0, r6, cr8
    22b8:	68637465 	stmdavs	r3!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    22bc:	32337265 	eorscc	r7, r3, #1342177286	; 0x50000006
    22c0:	74654700 	strbtvc	r4, [r5], #-1792	; 0xfffff900
    22c4:	70696843 	rsbvc	r6, r9, r3, asr #16
    22c8:	46006449 	strmi	r6, [r0], -r9, asr #8
    22cc:	5f525450 	svcpl	0x00525450
    22d0:	4e41454d 	cdpmi	5, 4, cr4, cr1, cr13, {2}
    22d4:	5f4c4156 	svcpl	0x004c4156
    22d8:	61620054 	qdsubvs	r0, r4, r2
    22dc:	72685474 	rsbvc	r5, r8, #116, 8	; 0x74000000
    22e0:	6f687365 	svcvs	0x00687365
    22e4:	4600646c 	strmi	r6, [r0], -ip, ror #8
    22e8:	5f525450 	svcpl	0x00525450
    22ec:	43434441 	movtmi	r4, #13377	; 0x3441
    22f0:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
    22f4:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 22fc <NOROM_SetupSetVddrLevel+0x30>
    22f8:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    22fc:	4f435f52 	svcmi	0x00435f52
    2300:	5242504d 	subpl	r5, r2, #77	; 0x4d
    2304:	545f4645 	ldrbpl	r4, [pc], #-1605	; 230c <NOROM_SetupSetVddrLevel+0x40>
    2308:	736f7800 	cmnvc	pc, #0, 16
    230c:	776f5063 	strbvc	r5, [pc, -r3, rrx]!
    2310:	6f4d7265 	svcvs	0x004d7265
    2314:	53006564 	movwpl	r6, #1380	; 0x564
    2318:	63656c65 	cmnvs	r5, #25856	; 0x6500
    231c:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 2154 <TrimAfterColdResetWakeupFromShutDown>
    2320:	6e494170 	mcrvs	1, 2, r4, cr9, cr0, {3}
    2324:	00747570 	rsbseq	r7, r4, r0, ror r5
    2328:	52545046 	subspl	r5, r4, #70	; 0x46
    232c:	494f565f 	stmdbmi	pc, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    2330:	4f565f44 	svcmi	0x00565f44
    2334:	545f4449 	ldrbpl	r4, [pc], #-1097	; 233c <NOROM_SetupSetVddrLevel+0x70>
    2338:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    233c:	4f435f52 	svcmi	0x00435f52
    2340:	4941504d 	stmdbmi	r1, {r0, r2, r3, r6, ip, lr}^
    2344:	00545f4e 	subseq	r5, r4, lr, asr #30
    2348:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    234c:	64616f4c 	strbtvs	r6, [r1], #-3916	; 0xfffff0b4
    2350:	00746547 	rsbseq	r6, r4, r7, asr #10
    2354:	66696873 			; <UNDEFINED> instruction: 0x66696873
    2358:	54646574 	strbtpl	r6, [r4], #-1396	; 0xfffffa8c
    235c:	00706d65 	rsbseq	r6, r0, r5, ror #26
    2360:	65446374 	strbvs	r6, [r4, #-884]	; 0xfffffc8c
    2364:	0061746c 	rsbeq	r7, r1, ip, ror #8
    2368:	75705f67 	ldrbvc	r5, [r0, #-3943]!	; 0xfffff099
    236c:	4d323369 	ldcmi	3, cr3, [r2, #-420]!	; 0xfffffe5c
    2370:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    2374:	00474365 	subeq	r4, r7, r5, ror #6
    2378:	44524148 	ldrbmi	r4, [r2], #-328	; 0xfffffeb8
    237c:	4950415f 	ldmdbmi	r0, {r0, r1, r2, r3, r4, r6, r8, lr}^
    2380:	6300545f 	movwvs	r5, #1119	; 0x45f
    2384:	74537275 	ldrbvc	r7, [r3], #-629	; 0xfffffd8b
    2388:	00657461 	rsbeq	r7, r5, r1, ror #8
    238c:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2390:	756f5366 	strbvc	r5, [pc, #-870]!	; 2032 <vscan+0x2c6>
    2394:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    2398:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    239c:	50460068 	subpl	r0, r6, r8, rrx
    23a0:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    23a4:	32334352 	eorscc	r4, r3, #1207959553	; 0x48000001
    23a8:	6100545f 	tstvs	r0, pc, asr r4
    23ac:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    23b0:	6c746373 	ldclvs	3, cr6, [r4], #-460	; 0xfffffe34
    23b4:	63727750 	cmnvs	r2, #80, 14	; 0x1400000
    23b8:	70006c74 	andvc	r6, r0, r4, ror ip
    23bc:	6d695464 	cfstrdvs	mvd5, [r9, #-400]!	; 0xfffffe70
    23c0:	50460065 	subpl	r0, r6, r5, rrx
    23c4:	4d5f5254 	lfmmi	f5, 2, [pc, #-336]	; 227c <NOROM_SetupTrimDevice+0x54>
    23c8:	41564e49 	cmpmi	r6, r9, asr #28
    23cc:	00545f4c 	subseq	r5, r4, ip, asr #30
    23d0:	4f524f4e 	svcmi	0x00524f4e
    23d4:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    23d8:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    23dc:	776f506c 	strbvc	r5, [pc, -ip, rrx]!
    23e0:	76457265 	strbvc	r7, [r5], -r5, ror #4
    23e4:	74797265 	ldrbtvc	r7, [r9], #-613	; 0xfffffd9b
    23e8:	676e6968 	strbvs	r6, [lr, -r8, ror #18]!
    23ec:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    23f0:	46485f52 			; <UNDEFINED> instruction: 0x46485f52
    23f4:	52554f53 	subspl	r4, r5, #332	; 0x14c
    23f8:	41534543 	cmpmi	r3, r3, asr #10
    23fc:	57534546 	ldrbpl	r4, [r3, -r6, asr #10]
    2400:	48435449 	stmdami	r3, {r0, r3, r6, sl, ip, lr}^
    2404:	4d00545f 	cfstrsmi	mvf5, [r0, #-380]	; 0xfffffe84
    2408:	61566e69 	cmpvs	r6, r9, ror #28
    240c:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2410:	6f6f4c70 	svcvs	0x006f4c70
    2414:	5470756b 	ldrbtpl	r7, [r0], #-1387	; 0xfffffa95
    2418:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    241c:	6c655300 	stclvs	3, cr5, [r5], #-0
    2420:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    2424:	41706d6f 	cmnmi	r0, pc, ror #26
    2428:	00666552 	rsbeq	r6, r6, r2, asr r5
    242c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2430:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2434:	61636f4c 	cmnvs	r3, ip, asr #30
    2438:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    243c:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
    2440:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2444:	6f4c6465 	svcvs	0x004c6465
    2448:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    244c:	00326e6f 	eorseq	r6, r2, pc, ror #28
    2450:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2454:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2458:	61636f4c 	cmnvs	r3, ip, asr #30
    245c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2460:	65520033 	ldrbvs	r0, [r2, #-51]	; 0xffffffcd
    2464:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2468:	6f4c6465 	svcvs	0x004c6465
    246c:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2470:	00356e6f 	eorseq	r6, r5, pc, ror #28
    2474:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    2478:	76654464 	strbtvc	r4, [r5], -r4, ror #8
    247c:	69746169 	ldmdbvs	r4!, {r0, r3, r5, r6, r8, sp, lr}^
    2480:	61566e6f 	cmpvs	r6, pc, ror #28
    2484:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2488:	65526470 	ldrbvs	r6, [r2, #-1136]	; 0xfffffb90
    248c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2490:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    2494:	646f6972 	strbtvs	r6, [pc], #-2418	; 249c <NOROM_SetupGetTrimForAmpcompCtrl+0x10>
    2498:	6e6f6100 	powvse	f6, f7, f0
    249c:	6d746142 	ldfvse	f6, [r4, #-264]!	; 0xfffffef8
    24a0:	61426e6f 	cmpvs	r2, pc, ror #28
    24a4:	64760074 	ldrbtvs	r0, [r6], #-116	; 0xffffff8c
    24a8:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    24ac:	6c536d69 	mrrcvs	13, 6, r6, r3, cr9
    24b0:	00706565 	rsbseq	r6, r0, r5, ror #10
    24b4:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    24b8:	61755172 	cmnvs	r5, r2, ror r1
    24bc:	6f6c476c 	svcvs	0x006c476c
    24c0:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    24c4:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    24c8:	5f525450 	svcpl	0x00525450
    24cc:	46544547 	ldrbmi	r4, [r4], -r7, asr #10
    24d0:	5a49534c 	bpl	1257208 <__ccfg+0x1237260>
    24d4:	00545f45 	subseq	r5, r4, r5, asr #30
    24d8:	4f524f4e 	svcmi	0x00524f4e
    24dc:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    24e0:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    24e4:	43445f6c 	movtmi	r5, #20332	; 0x4f6c
    24e8:	565f4344 	ldrbpl	r4, [pc], -r4, asr #6
    24ec:	61746c6f 	cmnvs	r4, pc, ror #24
    24f0:	6f436567 	svcvs	0x00436567
    24f4:	7469646e 	strbtvc	r6, [r9], #-1134	; 0xfffffb92
    24f8:	616e6f69 	cmnvs	lr, r9, ror #30
    24fc:	6e6f436c 	cdpvs	3, 6, cr4, cr15, cr12, {3}
    2500:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2338 <NOROM_SetupSetVddrLevel+0x6c>
    2504:	616c4600 	cmnvs	ip, r0, lsl #12
    2508:	65476873 	strbvs	r6, [r7, #-2163]	; 0xfffff78d
    250c:	7a695374 	bvc	1a572e4 <__ccfg+0x1a3733c>
    2510:	50460065 	subpl	r0, r6, r5, rrx
    2514:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    2518:	41504d4f 	cmpmi	r0, pc, asr #26
    251c:	5f464552 	svcpl	0x00464552
    2520:	6f700054 	svcvs	0x00700054
    2524:	51726577 	cmnpl	r2, r7, ror r5
    2528:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    252c:	61626f6c 	cmnvs	r2, ip, ror #30
    2530:	4600736c 	strmi	r7, [r0], -ip, ror #6
    2534:	5f525450 	svcpl	0x00525450
    2538:	43544547 	cmpmi	r4, #297795584	; 0x11c00000
    253c:	49504948 	ldmdbmi	r0, {r3, r6, r8, fp, lr}^
    2540:	00545f44 	subseq	r5, r4, r4, asr #30
    2544:	52545046 	subspl	r5, r4, #70	; 0x46
    2548:	5345525f 	movtpl	r5, #21087	; 0x525f
    254c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2550:	545f3544 	ldrbpl	r3, [pc], #-1348	; 2558 <NOROM_SetupGetTrimForXoscHfFastStart+0x4>
    2554:	4f525000 	svcmi	0x00525000
    2558:	4f434f54 	svcmi	0x00434f54
    255c:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    2560:	6f72505f 	svcvs	0x0072505f
    2564:	65697270 	strbvs	r7, [r9, #-624]!	; 0xfffffd90
    2568:	79726174 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sp, lr}^
    256c:	43415000 	movtmi	r5, #4096	; 0x1000
    2570:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2574:	3478345f 	ldrbtcc	r3, [r8], #-1119	; 0xfffffba1
    2578:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    257c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    2580:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    2584:	34363243 	ldrtcc	r3, [r6], #-579	; 0xfffffdbd
    2588:	61770030 	cmnvs	r7, r0, lsr r0
    258c:	49726566 	ldmdbmi	r2!, {r1, r2, r5, r6, r8, sl, sp, lr}^
    2590:	41460064 	cmpmi	r6, r4, rrx
    2594:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    2598:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    259c:	5f787836 	svcpl	0x00787836
    25a0:	007a694c 	rsbseq	r6, sl, ip, asr #18
    25a4:	4f524f4e 	svcmi	0x00524f4e
    25a8:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    25ac:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    25b0:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    25b4:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    25b8:	61467069 	cmpvs	r6, r9, rrx
    25bc:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    25c0:	524f4e00 	subpl	r4, pc, #0, 28
    25c4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    25c8:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    25cc:	5f6f666e 	svcpl	0x006f666e
    25d0:	50746547 	rsbspl	r6, r4, r7, asr #10
    25d4:	616b6361 	cmnvs	fp, r1, ror #6
    25d8:	79546567 	ldmdbvc	r4, {r0, r1, r2, r5, r6, r8, sl, sp, lr}^
    25dc:	4e006570 	cfrshl64mi	mvdx0, mvdx0, r6
    25e0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 24ac <NOROM_SetupGetTrimForAmpcompCtrl+0x20>
    25e4:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    25e8:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    25ec:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    25f0:	52774874 	rsbspl	r4, r7, #116, 16	; 0x740000
    25f4:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    25f8:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    25fc:	6b636170 	blvs	18dabc4 <__ccfg+0x18bac1c>
    2600:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2604:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2608:	70795470 	rsbsvc	r5, r9, r0, ror r4
    260c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2610:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2614:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    2618:	745f6e6f 	ldrbvc	r6, [pc], #-3695	; 2620 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x68>
    261c:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    2620:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    2624:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    2628:	31333143 	teqcc	r3, r3, asr #2
    262c:	68430030 	stmdavs	r3, {r4, r5}^
    2630:	61467069 	cmpvs	r6, r9, rrx
    2634:	796c696d 	stmdbvc	ip!, {r0, r2, r3, r5, r6, r8, fp, sp, lr}^
    2638:	6800745f 	stmdavs	r0, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}
    263c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2640:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    2644:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    2648:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    264c:	35363243 	ldrcc	r3, [r6, #-579]!	; 0xfffffdbd
    2650:	41500030 	cmpmi	r0, r0, lsr r0
    2654:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    2658:	43575f45 	cmpmi	r7, #276	; 0x114
    265c:	6d005053 	stcvs	0, cr5, [r0, #-332]	; 0xfffffeb4
    2660:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    2664:	00766552 	rsbseq	r6, r6, r2, asr r5
    2668:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    266c:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    2670:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    2674:	32525f78 	subscc	r5, r2, #120, 30	; 0x1e0
    2678:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    267c:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    2680:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    2684:	35333143 	ldrcc	r3, [r3, #-323]!	; 0xfffffebd
    2688:	68430030 	stmdavs	r3, {r4, r5}^
    268c:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2690:	435f6f66 	cmpmi	pc, #408	; 0x198
    2694:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    2698:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    269c:	43734979 	cmnmi	r3, #1982464	; 0x1e4000
    26a0:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    26a4:	41460078 	hvcmi	24584	; 0x6008
    26a8:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    26ac:	6b6e555f 	blvs	1b97c30 <__ccfg+0x1b77c88>
    26b0:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    26b4:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    26b8:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    26bc:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    26c0:	32363243 	eorscc	r3, r6, #805306372	; 0x30000004
    26c4:	63660030 	cmnvs	r6, #48	; 0x30
    26c8:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
    26cc:	46007665 	strmi	r7, [r0], -r5, ror #12
    26d0:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    26d4:	43435f59 	movtmi	r5, #16217	; 0x3f59
    26d8:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    26dc:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    26e0:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    26e4:	52574800 	subspl	r4, r7, #0, 16
    26e8:	555f5645 	ldrbpl	r5, [pc, #-1605]	; 20ab <vscan+0x33f>
    26ec:	6f6e6b6e 	svcvs	0x006e6b6e
    26f0:	66006e77 			; <UNDEFINED> instruction: 0x66006e77
    26f4:	31676663 	cmncc	r7, r3, ror #12
    26f8:	746f7250 	strbtvc	r7, [pc], #-592	; 2700 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x38>
    26fc:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 2548 <NOROM_SetupGetTrimForXoscHfCtl+0x1c>
    2700:	6f725000 	svcvs	0x00725000
    2704:	6f636f74 	svcvs	0x00636f74
    2708:	7469426c 	strbtvc	r4, [r9], #-620	; 0xfffffd94
    270c:	74636556 	strbtvc	r6, [r3], #-1366	; 0xfffffaaa
    2710:	745f726f 	ldrbvc	r7, [pc], #-623	; 2718 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x50>
    2714:	4f525000 	svcmi	0x00525000
    2718:	4f434f54 	svcmi	0x00434f54
    271c:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    2720:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
    2724:	30385f45 	eorscc	r5, r8, r5, asr #30
    2728:	35315f32 	ldrcc	r5, [r1, #-3890]!	; 0xfffff0ce
    272c:	4300345f 	movwmi	r3, #1119	; 0x45f
    2730:	5f504948 	svcpl	0x00504948
    2734:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    2738:	6b6e555f 	blvs	1b97cbc <__ccfg+0x1b77d14>
    273c:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    2740:	52574800 	subspl	r4, r7, #0, 16
    2744:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2748:	4600325f 			; <UNDEFINED> instruction: 0x4600325f
    274c:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2750:	43435f59 	movtmi	r5, #16217	; 0x3f59
    2754:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
    2758:	43415000 	movtmi	r5, #4096	; 0x1000
    275c:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    2760:	3778375f 			; <UNDEFINED> instruction: 0x3778375f
    2764:	4f525000 	svcmi	0x00525000
    2768:	4f434f54 	svcmi	0x00434f54
    276c:	6e555f4c 	cdpvs	15, 5, cr5, cr5, cr12, {2}
    2770:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    2774:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    2778:	5f564552 	svcpl	0x00564552
    277c:	00305f32 	eorseq	r5, r0, r2, lsr pc
    2780:	4f524f4e 	svcmi	0x00524f4e
    2784:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2788:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    278c:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    2790:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2794:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    2798:	48006570 	stmdami	r0, {r4, r5, r6, r8, sl, sp, lr}
    279c:	56455257 			; <UNDEFINED> instruction: 0x56455257
    27a0:	315f325f 	cmpcc	pc, pc, asr r2	; <UNPREDICTABLE>
    27a4:	4f525000 	svcmi	0x00525000
    27a8:	4f434f54 	svcmi	0x00434f54
    27ac:	5449424c 	strbpl	r4, [r9], #-588	; 0xfffffdb4
    27b0:	454c425f 	strbmi	r4, [ip, #-607]	; 0xfffffda1
    27b4:	4d414600 	stclmi	6, cr4, [r1, #-0]
    27b8:	5f594c49 	svcpl	0x00594c49
    27bc:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    27c0:	415f7878 	cmpmi	pc, r8, ror r8	; <UNPREDICTABLE>
    27c4:	48006167 	stmdami	r0, {r0, r1, r2, r5, r6, r8, sp, lr}
    27c8:	56455257 			; <UNDEFINED> instruction: 0x56455257
    27cc:	335f325f 	cmpcc	pc, #-268435451	; 0xf0000005
    27d0:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    27d4:	70795470 	rsbsvc	r5, r9, r0, ror r4
    27d8:	48430065 	stmdami	r3, {r0, r2, r5, r6}^
    27dc:	545f5049 	ldrbpl	r5, [pc], #-73	; 27e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x90>
    27e0:	5f455059 	svcpl	0x00455059
    27e4:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    27e8:	305f4d4f 	subscc	r4, pc, pc, asr #26
    27ec:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    27f0:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    27f4:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    27f8:	4f545355 	svcmi	0x00545355
    27fc:	00315f4d 	eorseq	r5, r1, sp, asr #30
    2800:	50494843 	subpl	r4, r9, r3, asr #16
    2804:	5059545f 	subspl	r5, r9, pc, asr r4
    2808:	43435f45 	movtmi	r5, #16197	; 0x3f45
    280c:	30333632 	eorscc	r3, r3, r2, lsr r6
    2810:	52574800 	subspl	r4, r7, #0, 16
    2814:	315f5645 	cmpcc	pc, r5, asr #12
    2818:	5000305f 	andpl	r3, r0, pc, asr r0
    281c:	414b4341 	cmpmi	fp, r1, asr #6
    2820:	555f4547 	ldrbpl	r4, [pc, #-1351]	; 22e1 <NOROM_SetupSetVddrLevel+0x15>
    2824:	6f6e6b6e 	svcvs	0x006e6b6e
    2828:	2e006e77 	mcrcs	14, 0, r6, cr0, cr7, {3}
    282c:	2f2e2e2f 	svccs	0x002e2e2f
    2830:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2834:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2838:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    283c:	2f62696c 	svccs	0x0062696c
    2840:	70696863 	rsbvc	r6, r9, r3, ror #16
    2844:	6f666e69 	svcvs	0x00666e69
    2848:	6600632e 	strvs	r6, [r0], -lr, lsr #6
    284c:	31676663 	cmncc	r7, r3, ror #12
    2850:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    2854:	43006449 	movwmi	r6, #1097	; 0x449
    2858:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    285c:	5f6f666e 	svcpl	0x006f666e
    2860:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    2864:	63697665 	cmnvs	r9, #105906176	; 0x6500000
    2868:	48644965 	stmdami	r4!, {r0, r2, r5, r6, r8, fp, lr}^
    286c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2870:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
    2874:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2878:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    287c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    2880:	6e694d74 	mcrvs	13, 3, r4, cr9, cr4, {3}
    2884:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    2888:	00766552 	rsbseq	r6, r6, r2, asr r5
    288c:	6f6e696d 	svcvs	0x006e696d
    2890:	52774872 	rsbspl	r4, r7, #7471104	; 0x720000
    2894:	4e007665 	cfmadd32mi	mvax3, mvfx7, mvfx0, mvfx5
    2898:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2764 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x10>
    289c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    28a0:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    28a4:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    28a8:	70755374 	rsbsvc	r5, r5, r4, ror r3
    28ac:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    28b0:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
    28b4:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    28b8:	425f6c6f 	subsmi	r6, pc, #28416	; 0x6f00
    28bc:	41500056 	cmpmi	r0, r6, asr r0
    28c0:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    28c4:	41575f45 	cmpmi	r7, r5, asr #30
    28c8:	00524546 	subseq	r4, r2, r6, asr #10
    28cc:	4b434150 	blmi	10d2e14 <__ccfg+0x10b2e6c>
    28d0:	5f454741 	svcpl	0x00454741
    28d4:	00357835 	eorseq	r7, r5, r5, lsr r8
    28d8:	6b636150 	blvs	18dae20 <__ccfg+0x18bae78>
    28dc:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    28e0:	5f657079 	svcpl	0x00657079
    28e4:	68430074 	stmdavs	r3, {r2, r4, r5, r6}^
    28e8:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    28ec:	485f6f66 	ldmdami	pc, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
    28f0:	76655277 			; <UNDEFINED> instruction: 0x76655277
    28f4:	6f697369 	svcvs	0x00697369
    28f8:	5f73496e 	svcpl	0x0073496e
    28fc:	51455447 	cmppl	r5, r7, asr #8
    2900:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    2904:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    2908:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    290c:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    2910:	65735574 	ldrbvs	r5, [r3, #-1396]!	; 0xfffffa8c
    2914:	00644972 	rsbeq	r4, r4, r2, ror r9
    2918:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    291c:	00676552 	rsbeq	r6, r7, r2, asr r5
    2920:	4f524f4e 	svcmi	0x00524f4e
    2924:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    2928:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    292c:	69667469 	stmdbvs	r6!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2930:	52646c65 	rsbpl	r6, r4, #25856	; 0x6500
    2934:	00646165 	rsbeq	r6, r4, r5, ror #2
    2938:	6464416e 	strbtvs	r4, [r4], #-366	; 0xfffffe92
    293c:	4f4e0072 	svcmi	0x004e0072
    2940:	5f4d4f52 	svcpl	0x004d4f52
    2944:	31494444 	cmpcc	r9, r4, asr #8
    2948:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    294c:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    2950:	65526e00 	ldrbvs	r6, [r2, #-3584]	; 0xfffff200
    2954:	75410074 	strbvc	r0, [r1, #-116]	; 0xffffff8c
    2958:	69644178 	stmdbvs	r4!, {r3, r4, r5, r6, r8, lr}^
    295c:	53696444 	cmnpl	r9, #68, 8	; 0x44000000
    2960:	57656661 	strbpl	r6, [r5, -r1, ror #12]!
    2964:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    2968:	31697500 	cmncc	r9, r0, lsl #10
    296c:	74614436 	strbtvc	r4, [r1], #-1078	; 0xfffffbca
    2970:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    2974:	72573233 	subsvc	r3, r7, #805306371	; 0x30000003
    2978:	61746144 	cmnvs	r4, r4, asr #2
    297c:	33697500 	cmncc	r9, #0, 10
    2980:	74614432 	strbtvc	r4, [r1], #-1074	; 0xfffffbce
    2984:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    2988:	68533233 	ldmdavs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    298c:	00746669 	rsbseq	r6, r4, r9, ror #12
    2990:	4f524f4e 	svcmi	0x00524f4e
    2994:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    2998:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    299c:	69667469 	stmdbvs	r6!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    29a0:	57646c65 	strbpl	r6, [r4, -r5, ror #24]!
    29a4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    29a8:	61446e00 	cmpvs	r4, r0, lsl #28
    29ac:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    29b0:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    29b4:	41006c61 	tstmi	r0, r1, ror #24
    29b8:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    29bc:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    29c0:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    29c4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    29c8:	524f4e00 	subpl	r4, pc, #0, 28
    29cc:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 29d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    29d0:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    29d4:	57746942 	ldrbpl	r6, [r4, -r2, asr #18]!
    29d8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    29dc:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    29e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29e4:	2f2e2e2f 	svccs	0x002e2e2f
    29e8:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    29ec:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    29f0:	64642f62 	strbtvs	r2, [r4], #-3938	; 0xfffff09e
    29f4:	00632e69 	rsbeq	r2, r3, r9, ror #28
    29f8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29fc:	6b73614d 	blvs	1cdaf38 <__ccfg+0x1cbaf90>
    2a00:	33697500 	cmncc	r9, #0, 10
    2a04:	67655232 			; <UNDEFINED> instruction: 0x67655232
    2a08:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    2a0c:	72496200 	subvc	r6, r9, #0, 4
    2a10:	616e4571 	smcvs	58449	; 0xe451
    2a14:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    2a18:	69536e00 	ldmdbvs	r3, {r9, sl, fp, sp, lr}^
    2a1c:	7500657a 	strvc	r6, [r0, #-1402]	; 0xfffffa86
    2a20:	4f323369 	svcmi	0x00323369
    2a24:	74006373 	strvc	r6, [r0], #-883	; 0xfffffc8d
    2a28:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a2c:	4f63736f 	svcmi	0x0063736f
    2a30:	56435f6e 	strbpl	r5, [r3], -lr, ror #30
    2a34:	524f4e00 	subpl	r4, pc, #0, 28
    2a38:	4f5f4d4f 	svcmi	0x005f4d4f
    2a3c:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2a40:	7474415f 	ldrbtvc	r4, [r4], #-351	; 0xfffffea1
    2a44:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
    2a48:	77536f54 			; <UNDEFINED> instruction: 0x77536f54
    2a4c:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2a50:	6f586f54 	svcvs	0x00586f54
    2a54:	74006373 	strvc	r6, [r0], #-883	; 0xfffffc8d
    2a58:	58706d65 	ldmdapl	r0!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    2a5c:	4f63736f 	svcmi	0x0063736f
    2a60:	6e006666 	cfmadd32vs	mvax3, mvfx6, mvfx0, mvfx6
    2a64:	74537765 	ldrbvc	r7, [r3], #-1893	; 0xfffff89b
    2a68:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2a6c:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2a70:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2a74:	61700073 	cmnvs	r0, r3, ror r0
    2a78:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2a7c:	61700031 	cmnvs	r0, r1, lsr r0
    2a80:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2a84:	61700032 	cmnvs	r0, r2, lsr r0
    2a88:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2a8c:	72700033 	rsbsvc	r0, r0, #51	; 0x33
    2a90:	6f697665 	svcvs	0x00697665
    2a94:	74537375 	ldrbvc	r7, [r3], #-885	; 0xfffffc8b
    2a98:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2a9c:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2aa0:	556e4965 	strbpl	r4, [lr, #-2405]!	; 0xfffff69b
    2aa4:	2f2e0073 	svccs	0x002e0073
    2aa8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2aac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2ab0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    2ab4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    2ab8:	6f2f6269 	svcvs	0x002f6269
    2abc:	632e6373 			; <UNDEFINED> instruction: 0x632e6373
    2ac0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2ac4:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2ac8:	61745363 	cmnvs	r4, r3, ror #6
    2acc:	5f656c62 	svcpl	0x00656c62
    2ad0:	74005643 	strvc	r5, [r0], #-1603	; 0xfffff9bd
    2ad4:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2ad8:	61746c65 	cmnvs	r4, r5, ror #24
    2adc:	776f6c00 	strbvc	r6, [pc, -r0, lsl #24]!
    2ae0:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    2ae4:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2920 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x7c>
    2ae8:	4f4e0064 	svcmi	0x004e0064
    2aec:	5f4d4f52 	svcpl	0x004d4f52
    2af0:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2af4:	75545f46 	ldrbvc	r5, [r4, #-3910]	; 0xfffff0ba
    2af8:	6e4f6e72 	mcrvs	14, 2, r6, cr15, cr2, {3}
    2afc:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2b00:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    2b04:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2b08:	4f4e0065 	svcmi	0x004e0065
    2b0c:	5f4d4f52 	svcpl	0x004d4f52
    2b10:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2b14:	77535f46 	ldrbvc	r5, [r3, -r6, asr #30]
    2b18:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
    2b1c:	63526f54 	cmpvs	r2, #84, 30	; 0x150
    2b20:	5463734f 	strbtpl	r7, [r3], #-847	; 0xfffffcb1
    2b24:	4f6e7275 	svcmi	0x006e7275
    2b28:	6f586666 	svcvs	0x00586666
    2b2c:	4e006373 	mcrmi	3, 0, r6, cr0, cr3, {3}
    2b30:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 29fc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x158>
    2b34:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2b38:	4f50485f 	svcmi	0x0050485f
    2b3c:	65524353 	ldrbvs	r4, [r2, #-851]	; 0xfffffcad
    2b40:	6974616c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, sp, lr}^
    2b44:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
    2b48:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
    2b4c:	4f79636e 	svcmi	0x0079636e
    2b50:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
    2b54:	74654774 	strbtvc	r4, [r5], #-1908	; 0xfffff88c
    2b58:	524f4e00 	subpl	r4, pc, #0, 28
    2b5c:	4f5f4d4f 	svcmi	0x005f4d4f
    2b60:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2b64:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
    2b68:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
    2b6c:	79724374 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, lr}^
    2b70:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
    2b74:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
    2b78:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
    2b7c:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
    2b80:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2b84:	5861746c 	stmdapl	r1!, {r2, r3, r5, r6, sl, ip, sp, lr}^
    2b88:	736f0032 	cmnvc	pc, #50	; 0x32
    2b8c:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
    2b90:	61626f6c 	cmnvs	r2, ip, ror #30
    2b94:	4800736c 	stmdami	r0, {r2, r3, r5, r6, r8, r9, ip, sp, lr}
    2b98:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2b9c:	6c65525f 	sfmvs	f5, 2, [r5], #-380	; 0xfffffe84
    2ba0:	71657246 	cmnvc	r5, r6, asr #4
    2ba4:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2ba8:	64007465 	strvs	r7, [r0], #-1125	; 0xfffffb9b
    2bac:	61746c65 	cmnvs	r4, r5, ror #24
    2bb0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2bb4:	636e6953 	cmnvs	lr, #1359872	; 0x14c000
    2bb8:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2bbc:	496e4f63 	stmdbmi	lr!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
    2bc0:	00734d6e 	rsbseq	r4, r3, lr, ror #26
    2bc4:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2bc8:	6d655461 	cfstrdvs	mvd5, [r5, #-388]!	; 0xfffffe7c
    2bcc:	6e695370 	mcrvs	3, 3, r5, cr9, cr0, {3}
    2bd0:	6f586563 	svcvs	0x00586563
    2bd4:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2bd8:	74696600 	strbtvc	r6, [r9], #-1536	; 0xfffffa00
    2bdc:	61726150 	cmnvs	r2, r0, asr r1
    2be0:	7300736d 	movwvc	r7, #877	; 0x36d
    2be4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2be8:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2bec:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    2bf0:	74007355 	strvc	r7, [r0], #-853	; 0xfffffcab
    2bf4:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2bf8:	4f63736f 	svcmi	0x0063736f
    2bfc:	435f6666 	cmpmi	pc, #106954752	; 0x6600000
    2c00:	534f0056 	movtpl	r0, #61526	; 0xf056
    2c04:	53664843 	cmnpl	r6, #4390912	; 0x430000
    2c08:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2c0c:	61655265 	cmnvs	r5, r5, ror #4
    2c10:	61007964 	tstvs	r0, r4, ror #18
    2c14:	6f43706d 	svcvs	0x0043706d
    2c18:	6854706d 	ldmdavs	r4, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2c1c:	734f0031 	movtvc	r0, #61489	; 0xf031
    2c20:	47664863 	strbmi	r4, [r6, -r3, ror #16]!
    2c24:	61626f6c 	cmnvs	r2, ip, ror #30
    2c28:	745f736c 	ldrbvc	r7, [pc], #-876	; 2c30 <AuxAdiDdiSafeWrite.constprop.1+0x24>
    2c2c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2c30:	746e5565 	strbtvc	r5, [lr], #-1381	; 0xfffffa9b
    2c34:	61576c69 	cmpvs	r7, r9, ror #24
    2c38:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    2c3c:	734d6e49 	movtvc	r6, #56905	; 0xde49
    2c40:	33697500 	cmncc	r9, #0, 10
    2c44:	63725332 	cmnvs	r2, #-939524096	; 0xc8000000
    2c48:	006b6c43 	rsbeq	r6, fp, r3, asr #24
    2c4c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2c50:	43676544 	cmnmi	r7, #68, 10	; 0x11000000
    2c54:	61747300 	cmnvs	r4, r0, lsl #6
    2c58:	69547472 	ldmdbvs	r4, {r1, r4, r5, r6, sl, ip, sp, lr}^
    2c5c:	7000656d 	andvc	r6, r0, sp, ror #10
    2c60:	4c766572 	cfldr64mi	mvdx6, [r6], #-456	; 0xfffffe38
    2c64:	696d6d69 	stmdbvs	sp!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2c68:	49353274 	ldmdbmi	r5!, {r2, r4, r5, r6, r9, ip, sp}
    2c6c:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2c70:	4f524f4e 	svcmi	0x00524f4e
    2c74:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2c78:	50485f43 	subpl	r5, r8, r3, asr #30
    2c7c:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
    2c80:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
    2c84:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    2c88:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2c8c:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2c90:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2c94:	6f547465 	svcvs	0x00547465
    2c98:	6f434652 	svcvs	0x00434652
    2c9c:	6f466572 	svcvs	0x00466572
    2ca0:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
    2ca4:	766e6f43 	strbtvc	r6, [lr], -r3, asr #30
    2ca8:	00747265 	rsbseq	r7, r4, r5, ror #4
    2cac:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2cb0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    2cb4:	756f536b 	strbvc	r5, [pc, #-875]!	; 2951 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xad>
    2cb8:	00656372 	rsbeq	r6, r5, r2, ror r3
    2cbc:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    2cc0:	5f363174 	svcpl	0x00363174
    2cc4:	66720074 			; <UNDEFINED> instruction: 0x66720074
    2cc8:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2ccc:	71657246 	cmnvc	r5, r6, asr #4
    2cd0:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2cd4:	68007465 	stmdavs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    2cd8:	54686769 	strbtpl	r6, [r8], #-1897	; 0xfffff897
    2cdc:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    2ce0:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2ce4:	524f4e00 	subpl	r4, pc, #0, 28
    2ce8:	4f5f4d4f 	svcmi	0x005f4d4f
    2cec:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2cf0:	6265445f 	rsbvs	r4, r5, #1593835520	; 0x5f000000
    2cf4:	65476775 	strbvs	r6, [r7, #-1909]	; 0xfffff88b
    2cf8:	70784574 	rsbsvc	r4, r8, r4, ror r5
    2cfc:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
    2d00:	65764164 	ldrbvs	r4, [r6, #-356]!	; 0xfffffe9c
    2d04:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    2d08:	73797243 	cmnvc	r9, #805306372	; 0x30000004
    2d0c:	416c6174 	smcmi	50708	; 0xc614
    2d10:	696c706d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2d14:	65647574 	strbvs	r7, [r4, #-1396]!	; 0xfffffa8c
    2d18:	63736f00 	cmnvs	r3, #0, 30
    2d1c:	52676643 	rsbpl	r6, r7, #70254592	; 0x4300000
    2d20:	6f436765 	svcvs	0x00436765
    2d24:	4e007970 			; <UNDEFINED> instruction: 0x4e007970
    2d28:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2bf4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    2d2c:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2d30:	475f4648 	ldrbmi	r4, [pc, -r8, asr #12]
    2d34:	74537465 	ldrbvc	r7, [r3], #-1125	; 0xfffffb9b
    2d38:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
    2d3c:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
    2d40:	61700065 	cmnvs	r0, r5, rrx
    2d44:	506d6172 	rsbpl	r6, sp, r2, ror r1
    2d48:	Address 0x0000000000002d48 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
    return (time * SECOND)/1000;
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
}
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
}
  40:	6172622d 	cmnvs	r2, sp, lsr #4
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
    return (time * SECOND)/1000;
   8:	01006962 	tsteq	r0, r2, ror #18
}
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    return (time * SECOND)/1000;
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000034 	andeq	r0, r0, r4, lsr r0
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	00000180 	andeq	r0, r0, r0, lsl #3
      20:	83180e42 	tsthi	r8, #1056	; 0x420
      24:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
      28:	87038604 	strhi	r8, [r3, -r4, lsl #12]
      2c:	02018e02 	andeq	r8, r1, #2, 28
      30:	c7ce0a90 	bfigt	r0, r0, (invalid: 21:14)
      34:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
      38:	0b42000e 	bleq	1080078 <__ccfg+0x10600d0>
      3c:	c6c7ce42 	strbgt	ip, [r7], r2, asr #28
      40:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
      44:	00000000 	andeq	r0, r0, r0
      48:	0000000c 	andeq	r0, r0, ip
	...
      54:	0000000e 	andeq	r0, r0, lr
      58:	00000020 	andeq	r0, r0, r0, lsr #32
      5c:	00000000 	andeq	r0, r0, r0
      60:	00000248 	andeq	r0, r0, r8, asr #4
      64:	0000007c 	andeq	r0, r0, ip, ror r0
      68:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
      6c:	86038504 	strhi	r8, [r3], -r4, lsl #10
      70:	64018e02 	strvs	r8, [r1], #-3586	; 0xfffff1fe
      74:	41100e0a 	tstmi	r0, sl, lsl #28
      78:	0000000b 	andeq	r0, r0, fp
      7c:	00000020 	andeq	r0, r0, r0, lsr #32
      80:	00000000 	andeq	r0, r0, r0
      84:	000002c4 	andeq	r0, r0, r4, asr #5
      88:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      8c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	descriptors [fd] = s;
      90:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	500e4101 	andpl	r4, lr, r1, lsl #2
      98:	0e0a9302 	cdpeq	3, 0, cr9, cr10, cr2, {0}
	if (s == NULL)
      9c:	000b410c 	andeq	r4, fp, ip, lsl #2
		syserror (EMALLOC, "tcv05");
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      a8:	7c020001 	stcvc	0, cr0, [r2], {1}
      ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      b0:	0000000c 	andeq	r0, r0, ip
      b4:	000000a0 	andeq	r0, r0, r0, lsr #1
      b8:	00000494 	muleq	r0, r4, r4
      bc:	0000000c 	andeq	r0, r0, ip
      c0:	00000018 	andeq	r0, r0, r8, lsl r0
      c4:	000000a0 	andeq	r0, r0, r0, lsr #1
      c8:	000004a0 	andeq	r0, r0, r0, lsr #9
      cc:	0000002c 	andeq	r0, r0, ip, lsr #32
      d0:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      d4:	41000e0a 	tstmi	r0, sl, lsl #28
      d8:	0000000b 	andeq	r0, r0, fp
      dc:	00000018 	andeq	r0, r0, r8, lsl r0
      e0:	000000a0 	andeq	r0, r0, r0, lsr #1
      e4:	000004cc 	andeq	r0, r0, ip, asr #9
      e8:	0000002a 	andeq	r0, r0, sl, lsr #32
      ec:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      f0:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
			wwait (st, 50);
      f4:	000b4204 	andeq	r4, fp, r4, lsl #4
			curr += 0x1000;
      f8:	00000018 	andeq	r0, r0, r8, lsl r0
      fc:	000000a0 	andeq	r0, r0, r0, lsr #1
		if (from >= EE_SIZE || upto < from)
     100:	000004f8 	strdeq	r0, [r0], -r8
     104:	0000003c 	andeq	r0, r0, ip, lsr r0
			upto = EE_SIZE - 1;
     108:	83100e41 	tsthi	r0, #1040	; 0x410
     10c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     110:	00018e02 	andeq	r8, r1, r2, lsl #28
     114:	00000018 	andeq	r0, r0, r8, lsl r0
     118:	000000a0 	andeq	r0, r0, r0, lsr #1
     11c:	00000000 	andeq	r0, r0, r0
     120:	00000040 	andeq	r0, r0, r0, asr #32
     124:	83100e41 	tsthi	r0, #1040	; 0x410
        if (displayCycle)
     128:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
            ser_outf(Check_PERIOD, "%c ", ch);
     12c:	00018e02 	andeq	r8, r1, r2, lsl #28
     130:	00000014 	andeq	r0, r0, r4, lsl r0
     134:	000000a0 	andeq	r0, r0, r0, lsr #1
        if(onTime > 0){
     138:	00000000 	andeq	r0, r0, r0
            leds(led,1);
     13c:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     140:	83080e42 	movwhi	r0, #36418	; 0x8e42
     144:	00018e02 	andeq	r8, r1, r2, lsl #28
     148:	00000014 	andeq	r0, r0, r4, lsl r0
     14c:	000000a0 	andeq	r0, r0, r0, lsr #1
     150:	00000534 	andeq	r0, r0, r4, lsr r5
            delay(onTime, OFF_PERIOD);
     154:	00000054 	andeq	r0, r0, r4, asr r0
            delay(offTime, Check_PERIOD);
     158:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     15c:	00018e02 	andeq	r8, r1, r2, lsl #28
            led = greenLed;
     160:	00000014 	andeq	r0, r0, r4, lsl r0
            ch = greenCharacter;
     164:	000000a0 	andeq	r0, r0, r0, lsr #1
     168:	00000588 	andeq	r0, r0, r8, lsl #11
            onTime = greenOn;
     16c:	00000040 	andeq	r0, r0, r0, asr #32
     170:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
            offTime = greenOff;
     174:	00018e02 	andeq	r8, r1, r2, lsl #28
            leds(led,1);
     178:	00000014 	andeq	r0, r0, r4, lsl r0
     17c:	000000a0 	andeq	r0, r0, r0, lsr #1
     180:	000005c8 	andeq	r0, r0, r8, asr #11
     184:	00000028 	andeq	r0, r0, r8, lsr #32
            proceed OFF_PERIOD;
     188:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     18c:	00018e02 	andeq	r8, r1, r2, lsl #28
        when(&On, Check_PERIOD);
     190:	00000014 	andeq	r0, r0, r4, lsl r0
     194:	000000a0 	andeq	r0, r0, r0, lsr #1
        when(&stopProcess, Stop);
     198:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     19c:	00000114 	andeq	r0, r0, r4, lsl r1
        release;
     1a0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        leds(led,0);
     1a4:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1a8:	0000001c 	andeq	r0, r0, ip, lsl r0
     1ac:	000000a0 	andeq	r0, r0, r0, lsr #1
     1b0:	00000704 	andeq	r0, r0, r4, lsl #14
     1b4:	00000050 	andeq	r0, r0, r0, asr r0
     1b8:	83180e41 	tsthi	r8, #1040	; 0x410
        if (displayCycle)
     1bc:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
            ser_outf(Check_PERIOD, "%c ", 'F');
     1c0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     1c4:	00018e02 	andeq	r8, r1, r2, lsl #28
     1c8:	00000018 	andeq	r0, r0, r8, lsl r0
        if(offTime > 0)
     1cc:	000000a0 	andeq	r0, r0, r0, lsr #1
            delay(offTime, Check_PERIOD);
     1d0:	00000754 	andeq	r0, r0, r4, asr r7
        leds(led,0);
     1d4:	00000054 	andeq	r0, r0, r4, asr r0
     1d8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     1dc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     1e4:	0000000c 	andeq	r0, r0, ip
}
     1e8:	000000a0 	andeq	r0, r0, r0, lsr #1
        finish;
     1ec:	000007a8 	andeq	r0, r0, r8, lsr #15
}
     1f0:	00000038 	andeq	r0, r0, r8, lsr r0
     1f4:	00000020 	andeq	r0, r0, r0, lsr #32
     1f8:	000000a0 	andeq	r0, r0, r0, lsr #1
     1fc:	000007e0 	andeq	r0, r0, r0, ror #15
     200:	00000110 	andeq	r0, r0, r0, lsl r1
     204:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     208:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     20c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     210:	89038804 	stmdbhi	r3, {r2, fp, pc}
     214:	00018e02 	andeq	r8, r1, r2, lsl #28
     218:	0000000c 	andeq	r0, r0, ip
     21c:	000000a0 	andeq	r0, r0, r0, lsr #1
     220:	00000000 	andeq	r0, r0, r0
     224:	0000000c 	andeq	r0, r0, ip
     228:	00000018 	andeq	r0, r0, r8, lsl r0
     22c:	000000a0 	andeq	r0, r0, r0, lsr #1
     230:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     234:	000000c0 	andeq	r0, r0, r0, asr #1
     238:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     23c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     240:	00000001 	andeq	r0, r0, r1
     244:	00000018 	andeq	r0, r0, r8, lsl r0
    word numbers[] = {0, 0, 0, 0};
     248:	000000a0 	andeq	r0, r0, r0, lsr #1
    int numbersIndex = 0;
     24c:	000009b0 			; <UNDEFINED> instruction: 0x000009b0
    word numbers[] = {0, 0, 0, 0};
     250:	00000044 	andeq	r0, r0, r4, asr #32
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     254:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        if(settingsInput[i] == ' ') {
     258:	86038504 	strhi	r8, [r3], -r4, lsl #10
     25c:	00018e02 	andeq	r8, r1, r2, lsl #28
            numbers[numbersIndex] = number;
     260:	0000001c 	andeq	r0, r0, ip, lsl r0
     264:	000000a0 	andeq	r0, r0, r0, lsr #1
            number = 0;
     268:	000009f4 	strdeq	r0, [r0], -r4
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     26c:	0000003c 	andeq	r0, r0, ip, lsr r0
    return 0;
     270:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    redOn = numbers[0];
     274:	86048505 	strhi	r8, [r4], -r5, lsl #10
     278:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    redOff = numbers[1];
     27c:	00000001 	andeq	r0, r0, r1
     280:	00000018 	andeq	r0, r0, r8, lsl r0
    greenOn = numbers[2];
     284:	000000a0 	andeq	r0, r0, r0, lsr #1
     288:	00000a30 	andeq	r0, r0, r0, lsr sl
    greenOff = numbers[3];
     28c:	000000a4 	andeq	r0, r0, r4, lsr #1
     290:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
     294:	86038504 	strhi	r8, [r3], -r4, lsl #10
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     298:	00018e02 	andeq	r8, r1, r2, lsl #28
     29c:	00000030 	andeq	r0, r0, r0, lsr r0
            number = number * 10;
     2a0:	000000a0 	andeq	r0, r0, r0, lsr #1
            number += settingsInput[i] - 48;
     2a4:	00000ad4 	ldrdeq	r0, [r0], -r4
     2a8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
        } else if(settingsInput[i] == '-') {
     2ac:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
            return 1;
     2b0:	86078508 	strhi	r8, [r7], -r8, lsl #10
     2b4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2b8:	8a038904 	bhi	e26d0 <__ccfg+0xc2728>
     2bc:	02018e02 	andeq	r8, r1, #2, 28
     2c0:	cace0aa2 	bgt	ff382d50 <_estack+0xdf37dd50>
fsm root {
     2c4:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     2c8:	000ec4c5 	andeq	ip, lr, r5, asr #9
     2cc:	00000b42 	andeq	r0, r0, r2, asr #22
     2d0:	0000000c 	andeq	r0, r0, ip
     2d4:	000000a0 	andeq	r0, r0, r0, lsr #1
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_outf(Initial, "Enter your name: ");
     2e0:	0000000c 	andeq	r0, r0, ip
     2e4:	000000a0 	andeq	r0, r0, r0, lsr #1
        ser_in(Get_Name, username, NAME_LENGTH);
     2e8:	00000000 	andeq	r0, r0, r0
     2ec:	00000028 	andeq	r0, r0, r8, lsr #32
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2f0:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f4:	000000a0 	andeq	r0, r0, r0, lsr #1
     2f8:	00000c8c 	andeq	r0, r0, ip, lsl #25
        ser_inf(Get_Choice, "%c", &choice);
     2fc:	00000258 	andeq	r0, r0, r8, asr r2
     300:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        if (choice == 'A' || choice == 'a'){
     304:	8e028b03 	vmlahi.f64	d8, d2, d3
     308:	180e4101 	stmdane	lr, {r0, r8, lr}
     30c:	00070d42 	andeq	r0, r7, r2, asr #26
            proceed Adjust_Intervals;
     310:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed Monitor;
     314:	000000a0 	andeq	r0, r0, r0, lsr #1
        proceed Show_Menu;
     318:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     31c:	00000030 	andeq	r0, r0, r0, lsr r0
     320:	83080e42 	movwhi	r0, #36418	; 0x8e42
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     324:	00018e02 	andeq	r8, r1, r2, lsl #28
     328:	00000018 	andeq	r0, r0, r8, lsl r0
     32c:	000000a0 	andeq	r0, r0, r0, lsr #1
        if(processSettingsInput(settings) != 0)
     330:	00000000 	andeq	r0, r0, r0
     334:	0000005c 	andeq	r0, r0, ip, asr r0
            proceed Adjust_Intervals;
     338:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        if(!blinkerRunning) {
     33c:	86038504 	strhi	r8, [r3], -r4, lsl #10
     340:	00018e02 	andeq	r8, r1, r2, lsl #28
     344:	00000014 	andeq	r0, r0, r4, lsl r0
            blinkerCode = runfsm blinker;
     348:	000000a0 	andeq	r0, r0, r0, lsr #1
            blinkerRunning = YES;
     34c:	00000ee4 	andeq	r0, r0, r4, ror #29
        On = YES;
     350:	00000060 	andeq	r0, r0, r0, rrx
     354:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
        trigger(&On);
     358:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Show_Menu;
     35c:	0000000c 	andeq	r0, r0, ip
     360:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     364:	7c020001 	stcvc	0, cr0, [r2], {1}
     368:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     36c:	00000018 	andeq	r0, r0, r8, lsl r0
     370:	0000035c 	andeq	r0, r0, ip, asr r3
     374:	00000f44 	andeq	r0, r0, r4, asr #30
     378:	0000003c 	andeq	r0, r0, ip, lsr r0
     37c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        proceed Show_Menu;
     380:	86038504 	strhi	r8, [r3], -r4, lsl #10
        ser_outf(Monitor, "Monitor (press S to stop): ");
     384:	00018e02 	andeq	r8, r1, r2, lsl #28
     388:	00000018 	andeq	r0, r0, r8, lsl r0
        displayCycle = YES;
     38c:	0000035c 	andeq	r0, r0, ip, asr r3
     390:	00000f80 	andeq	r0, r0, r0, lsl #31
        ser_inf(Await_Stop, "%c", &ch);
     394:	00000080 	andeq	r0, r0, r0, lsl #1
     398:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
        if(ch == 'S' || ch == 's'){
     39c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     3a0:	00000001 	andeq	r0, r0, r1
     3a4:	0000000c 	andeq	r0, r0, ip
            displayCycle = NO;
     3a8:	0000035c 	andeq	r0, r0, ip, asr r3
            proceed Show_Menu;
     3ac:	00001000 	andeq	r1, r0, r0
     3b0:	00000018 	andeq	r0, r0, r8, lsl r0
        proceed Monitor;
     3b4:	00000014 	andeq	r0, r0, r4, lsl r0
     3b8:	0000035c 	andeq	r0, r0, ip, asr r3
        On = NO;
     3bc:	00000000 	andeq	r0, r0, r0
        if(blinkerCode != 0x0) {
     3c0:	00000024 	andeq	r0, r0, r4, lsr #32
     3c4:	83080e41 	movwhi	r0, #36417	; 0x8e41
            killall(blinkerCode);
     3c8:	00018e02 	andeq	r8, r1, r2, lsl #28
        trigger(&stopProcess);
     3cc:	00000014 	andeq	r0, r0, r4, lsl r0
     3d0:	0000035c 	andeq	r0, r0, ip, asr r3
        proceed Show_Menu;
     3d4:	00001018 	andeq	r1, r0, r8, lsl r0
     3d8:	00000010 	andeq	r0, r0, r0, lsl r0
        leds_all(0);
     3dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e4:	00000014 	andeq	r0, r0, r4, lsl r0
        proceed Show_Menu;
     3e8:	0000035c 	andeq	r0, r0, ip, asr r3
     3ec:	00000000 	andeq	r0, r0, r0
        } else if (choice == 'S' || choice == 's') {
     3f0:	0000002c 	andeq	r0, r0, ip, lsr #32
            proceed Stop;
     3f4:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
        } else if (choice == 'V' || choice == 'v') {
     3f8:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed View_Settings;
     3fc:	00000014 	andeq	r0, r0, r4, lsl r0
        } else if (choice == 'M' || choice == 'm') {
     400:	0000035c 	andeq	r0, r0, ip, asr r3
            proceed Monitor;
     404:	00000000 	andeq	r0, r0, r0
     408:	0000004c 	andeq	r0, r0, ip, asr #32
     40c:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     410:	00018e02 	andeq	r8, r1, r2, lsl #28
            killall(blinkerCode);
     414:	0000000c 	andeq	r0, r0, ip
            leds_all(0);
     418:	0000035c 	andeq	r0, r0, ip, asr r3
     41c:	00000000 	andeq	r0, r0, r0
            killall(blinkerCode);
     420:	00000006 	andeq	r0, r0, r6
            sint runningNumber = crunning(blinkerCode);
     424:	00000028 	andeq	r0, r0, r8, lsr #32
     428:	0000035c 	andeq	r0, r0, ip, asr r3
     42c:	00001028 	andeq	r1, r0, r8, lsr #32
            diag("Number of %d: %d", blinkerCode, runningNumber);
     430:	000000cc 	andeq	r0, r0, ip, asr #1
            trigger(&stopProcess);
     434:	83180e41 	tsthi	r8, #1040	; 0x410
     438:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
            blinkerCode = runfsm blinker;
     43c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     440:	02018e02 	andeq	r8, r1, #2, 28
     444:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     448:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
     44c:	0b42000e 	bleq	108048c <__ccfg+0x10604e4>
     450:	00000014 	andeq	r0, r0, r4, lsl r0
     454:	0000035c 	andeq	r0, r0, ip, asr r3
     458:	000010f4 	strdeq	r1, [r0], -r4
     45c:	00000014 	andeq	r0, r0, r4, lsl r0
     460:	83080e41 	movwhi	r0, #36417	; 0x8e41
     464:	00018e02 	andeq	r8, r1, r2, lsl #28
     468:	00000014 	andeq	r0, r0, r4, lsl r0
     46c:	0000035c 	andeq	r0, r0, ip, asr r3
     470:	00001108 	andeq	r1, r0, r8, lsl #2
     474:	00000034 	andeq	r0, r0, r4, lsr r0
     478:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     47c:	00018e02 	andeq	r8, r1, r2, lsl #28
     480:	00000018 	andeq	r0, r0, r8, lsl r0
     484:	0000035c 	andeq	r0, r0, ip, asr r3
     488:	0000113c 	andeq	r1, r0, ip, lsr r1
     48c:	00000034 	andeq	r0, r0, r4, lsr r0
     490:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
static void devinit_uart (int devnum) {
     494:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	adddevfunc (ioreq_uart_a, devnum);
     498:	00000001 	andeq	r0, r0, r1
     49c:	00000018 	andeq	r0, r0, r8, lsl r0
void udelay (volatile word n) {
     4a0:	0000035c 	andeq	r0, r0, ip, asr r3
     4a4:	00000000 	andeq	r0, r0, r0
	while (n) {
     4a8:	0000002c 	andeq	r0, r0, ip, lsr #32
     4ac:	83100e41 	tsthi	r0, #1040	; 0x410
}
     4b0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	while (n--);
     4b4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4b8:	00000014 	andeq	r0, r0, r4, lsl r0
     4bc:	0000035c 	andeq	r0, r0, ip, asr r3
		n--;
     4c0:	00001170 	andeq	r1, r0, r0, ror r1
     4c4:	00000024 	andeq	r0, r0, r4, lsr #32
     4c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
void mdelay (volatile word n) {
     4cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4d0:	00000018 	andeq	r0, r0, r8, lsl r0
	while (n) {
     4d4:	0000035c 	andeq	r0, r0, ip, asr r3
     4d8:	00001194 	muleq	r0, r4, r1
}
     4dc:	00000038 	andeq	r0, r0, r8, lsr r0
		udelay (999);
     4e0:	83100e41 	tsthi	r0, #1040	; 0x410
     4e4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		n--;
     4e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	0000035c 	andeq	r0, r0, ip, asr r3
     4f4:	00000000 	andeq	r0, r0, r0
void __pi_ondomain (lword d) {
     4f8:	00000014 	andeq	r0, r0, r4, lsl r0
     4fc:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.effpdm > 1)
     500:	0000035c 	andeq	r0, r0, ip, asr r3
     504:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
     508:	00000040 	andeq	r0, r0, r0, asr #32
	PRCMPowerDomainOn (d);
     50c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     510:	00018e02 	andeq	r8, r1, r2, lsl #28
     514:	00000014 	andeq	r0, r0, r4, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     518:	0000035c 	andeq	r0, r0, ip, asr r3
     51c:	00000000 	andeq	r0, r0, r0
     520:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_systat.ondmns |= d;
     524:	83080e41 	movwhi	r0, #36417	; 0x8e41
     528:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     52c:	0000000c 	andeq	r0, r0, ip
     530:	0000035c 	andeq	r0, r0, ip, asr r3
void __pi_syserror (word ec, const char *m) {
     534:	000011cc 	andeq	r1, r0, ip, asr #3
	diag ("SYSERR: %x, %s", ec, m);
     538:	00000024 	andeq	r0, r0, r4, lsr #32
     53c:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("cpsid i" : : : "memory");
     540:	0000035c 	andeq	r0, r0, ip, asr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     544:	000011f0 	strdeq	r1, [r0], -r0
     548:	00000020 	andeq	r0, r0, r0, lsr #32
     54c:	0000000c 	andeq	r0, r0, ip
		all_leds_blink;
     550:	0000035c 	andeq	r0, r0, ip, asr r3
     554:	00001210 	andeq	r1, r0, r0, lsl r2
     558:	0000000e 	andeq	r0, r0, lr
     55c:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     560:	0000035c 	andeq	r0, r0, ip, asr r3
     564:	00000000 	andeq	r0, r0, r0
     568:	00000010 	andeq	r0, r0, r0, lsl r0
     56c:	0000000c 	andeq	r0, r0, ip
     570:	0000035c 	andeq	r0, r0, ip, asr r3
     574:	00000000 	andeq	r0, r0, r0
	while (1) {
     578:	0000001c 	andeq	r0, r0, ip, lsl r0
     57c:	0000000c 	andeq	r0, r0, ip
     580:	0000035c 	andeq	r0, r0, ip, asr r3
     584:	00000000 	andeq	r0, r0, r0
void tci_run_delay_timer () {
     588:	00000010 	andeq	r0, r0, r0, lsl r0
	setdel = __pi_mintk - __pi_old;
     58c:	0000000c 	andeq	r0, r0, ip
     590:	0000035c 	andeq	r0, r0, ip, asr r3
     594:	00000000 	andeq	r0, r0, r0
     598:	00000006 	andeq	r0, r0, r6
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     59c:	0000000c 	andeq	r0, r0, ip
     5a0:	0000035c 	andeq	r0, r0, ip, asr r3
     5a4:	0000121e 	andeq	r1, r0, lr, lsl r2
     5a8:	00000014 	andeq	r0, r0, r4, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     5ac:	0000000c 	andeq	r0, r0, ip
	sti_tim;
     5b0:	0000035c 	andeq	r0, r0, ip, asr r3
}
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	0000000e 	andeq	r0, r0, lr
     5bc:	00000014 	andeq	r0, r0, r4, lsl r0
     5c0:	0000035c 	andeq	r0, r0, ip, asr r3
     5c4:	00001234 	andeq	r1, r0, r4, lsr r2
	cli_aux;
     5c8:	00000024 	andeq	r0, r0, r4, lsr #32
     5cc:	83080e41 	movwhi	r0, #36417	; 0x8e41
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     5d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5d4:	00000020 	andeq	r0, r0, r0, lsr #32
     5d8:	0000035c 	andeq	r0, r0, ip, asr r3
     5dc:	00001258 	andeq	r1, r0, r8, asr r2
	sti_aux;
     5e0:	0000009c 	muleq	r0, ip, r0
}
     5e4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     5e8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     5ec:	87058606 	strhi	r8, [r5, -r6, lsl #12]
void AONRTCIntHandler () {
     5f0:	89038804 	stmdbhi	r3, {r2, fp, pc}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     5f4:	00018e02 	andeq	r8, r1, r2, lsl #28
     5f8:	00000014 	andeq	r0, r0, r4, lsl r0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     5fc:	0000035c 	andeq	r0, r0, ip, asr r3
		if (__pi_utims [0] == 0)
     600:	000012f4 	strdeq	r1, [r0], -r4
     604:	00000050 	andeq	r0, r0, r0, asr r0
		if (*(__pi_utims [0])) {
     608:	83080e42 	movwhi	r0, #36418	; 0x8e42
     60c:	00018e02 	andeq	r8, r1, r2, lsl #28
			(*(__pi_utims [0]))--;
     610:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_utims [1] == 0)
     614:	0000035c 	andeq	r0, r0, ip, asr r3
		if (*(__pi_utims [1])) {
     618:	00001344 	andeq	r1, r0, r4, asr #6
			aux_timer_inactive = 0;
     61c:	00000048 	andeq	r0, r0, r8, asr #32
			(*(__pi_utims [1]))--;
     620:	83080e41 	movwhi	r0, #36417	; 0x8e41
		if (__pi_utims [2] == 0)
     624:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (*(__pi_utims [2])) {
     628:	00000014 	andeq	r0, r0, r4, lsl r0
			(*(__pi_utims [2]))--;
     62c:	0000035c 	andeq	r0, r0, ip, asr r3
		if (__pi_utims [3] != 0) {
     630:	0000138c 	andeq	r1, r0, ip, lsl #7
			if (*(__pi_utims [3])) {
     634:	00000050 	andeq	r0, r0, r0, asr r0
				aux_timer_inactive = 0;
     638:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				(*(__pi_utims [3]))--;
     63c:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (__pi_systat.ledsts) {
     640:	00000020 	andeq	r0, r0, r0, lsr #32
     644:	0000035c 	andeq	r0, r0, ip, asr r3
		if (__pi_systat.ledblc++ == 0) {
     648:	000013dc 	ldrdeq	r1, [r0], -ip
     64c:	00000058 	andeq	r0, r0, r8, asr r0
			if (__pi_systat.ledblk) {
     650:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     654:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     658:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     65c:	89038804 	stmdbhi	r3, {r2, fp, pc}
     660:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x2)
     664:	00000018 	andeq	r0, r0, r8, lsl r0
     668:	0000035c 	andeq	r0, r0, ip, asr r3
     66c:	00001434 	andeq	r1, r0, r4, lsr r4
				if (__pi_systat.ledsts & 0x4)
     670:	000000a8 	andeq	r0, r0, r8, lsr #1
				__pi_systat.ledblk = 0;
     674:	83100e44 	tsthi	r0, #68, 28	; 0x440
     678:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (__pi_systat.fstblk)
     67c:	00018e02 	andeq	r8, r1, r2, lsl #28
     680:	00000018 	andeq	r0, r0, r8, lsl r0
				__pi_systat.ledblc = 200;
     684:	0000035c 	andeq	r0, r0, ip, asr r3
	if (events & AON_RTC_EVFLAGS_CH0) {
     688:	000014dc 	ldrdeq	r1, [r0], -ip
		cli_tim;
     68c:	00000034 	andeq	r0, r0, r4, lsr r0
		__pi_new += setdel;
     690:	83100e41 	tsthi	r0, #1040	; 0x410
     694:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		setdel = 0;
     698:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     69c:	0000000c 	andeq	r0, r0, ip
		__pi_new += setdel;
     6a0:	0000035c 	andeq	r0, r0, ip, asr r3
		RISE_N_SHINE;
     6a4:	00001510 	andeq	r1, r0, r0, lsl r5
     6a8:	00000018 	andeq	r0, r0, r8, lsl r0
		aux_timer_inactive = 1;
     6ac:	00000014 	andeq	r0, r0, r4, lsl r0
     6b0:	0000035c 	andeq	r0, r0, ip, asr r3
				if (__pi_systat.ledsts & 0x1)
     6b4:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     6b8:	00000030 	andeq	r0, r0, r0, lsr r0
     6bc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (__pi_systat.ledsts & 0x2)
     6c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6c4:	00000014 	andeq	r0, r0, r4, lsl r0
     6c8:	0000035c 	andeq	r0, r0, ip, asr r3
				if (__pi_systat.ledsts & 0x8)
     6cc:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblk = 1;
     6d0:	00000038 	andeq	r0, r0, r8, lsr r0
     6d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (aux_timer_inactive) {
     6d8:	00018e02 	andeq	r8, r1, r2, lsl #28
			cli_aux;
     6dc:	00000040 	andeq	r0, r0, r0, asr #32
     6e0:	0000035c 	andeq	r0, r0, ip, asr r3
     6e4:	00001528 	andeq	r1, r0, r8, lsr #10
     6e8:	0000013c 	andeq	r0, r0, ip, lsr r1
     6ec:	80100e41 	andshi	r0, r0, r1, asr #28
     6f0:	82038104 	andhi	r8, r3, #4, 2
     6f4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     6f8:	0b84380e 	bleq	fe10e738 <_estack+0xde109738>
     6fc:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     700:	07880887 	streq	r0, [r8, r7, lsl #17]
word tci_update_delay_ticks (Boolean force) {
     704:	058e0689 	streq	r0, [lr, #1673]	; 0x689
	cli_tim;
     708:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     70c:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
	if (setdel) {
     710:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     714:	c341100e 	movtgt	r1, #4110	; 0x100e
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     718:	0ec0c1c2 	acseqdm	f4, f2
     71c:	000b4100 	andeq	r4, fp, r0, lsl #2
     720:	0000000c 	andeq	r0, r0, ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     724:	0000035c 	andeq	r0, r0, ip, asr r3
				AON_RTC_O_CH0CMP)) - gettav ());
     728:	00000000 	andeq	r0, r0, r0
	return NO;
     72c:	00000024 	andeq	r0, r0, r4, lsr #32
			setdel = 0;
     730:	0000000c 	andeq	r0, r0, ip
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     734:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     738:	7c020001 	stcvc	0, cr0, [r2], {1}
}
     73c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		sti_tim;
     740:	00000014 	andeq	r0, r0, r4, lsl r0
		return YES;
     744:	00000730 	andeq	r0, r0, r0, lsr r7
     748:	00000000 	andeq	r0, r0, r0
     74c:	00000016 	andeq	r0, r0, r6, lsl r0
     750:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     754:	00018e02 	andeq	r8, r1, r2, lsl #28
	UARTDisable (UART0_BASE);
     758:	0000000c 	andeq	r0, r0, ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     75c:	00000730 	andeq	r0, r0, r0, lsr r7
	UARTDisable (UART0_BASE);
     760:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
     764:	0000001a 	andeq	r0, r0, sl, lsl r0
     768:	00000018 	andeq	r0, r0, r8, lsl r0
     76c:	00000730 	andeq	r0, r0, r0, lsr r7
     770:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     774:	0000000e 	andeq	r0, r0, lr
     778:	83080e41 	movwhi	r0, #36417	; 0x8e41
     77c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     780:	000ec3ce 	andeq	ip, lr, lr, asr #7
     784:	00000018 	andeq	r0, r0, r8, lsl r0
     788:	00000730 	andeq	r0, r0, r0, lsr r7
	urates [0] = rate;
     78c:	00000000 	andeq	r0, r0, r0
}
     790:	0000004c 	andeq	r0, r0, ip, asr #32
     794:	83100e41 	tsthi	r0, #1040	; 0x410
     798:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     79c:	00018e02 	andeq	r8, r1, r2, lsl #28
     7a0:	00000020 	andeq	r0, r0, r0, lsr #32
     7a4:	00000730 	andeq	r0, r0, r0, lsr r7
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	0000008c 	andeq	r0, r0, ip, lsl #1
     7b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     7b4:	5f018e02 	svcpl	0x00018e02
     7b8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     7bc:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     7c0:	000ec4ce 	andeq	ip, lr, lr, asr #9
	__pi_uart_setrate (urates [0], __pi_uart);
     7c4:	00000020 	andeq	r0, r0, r0, lsr #32
     7c8:	00000730 	andeq	r0, r0, r0, lsr r7
     7cc:	00000000 	andeq	r0, r0, r0
     7d0:	00000070 	andeq	r0, r0, r0, ror r0
     7d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7d8:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7dc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	switch (operation) {
     7e0:	430b4200 	movwmi	r4, #45568	; 0xb200
static int ioreq_uart_a (int operation, char *buf, int len) {
     7e4:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7e8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7ec:	00000730 	andeq	r0, r0, r0, lsr r7
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	000000c0 	andeq	r0, r0, r0, asr #1
				*buf++ = uart_a_read;
     7f8:	82080e41 	andhi	r0, r8, #1040	; 0x410
     7fc:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
			while (len && uart_a_char_available) {
     800:	0a84300e 	beq	fe10c840 <_estack+0xde107840>
     804:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
     808:	06880787 	streq	r0, [r8], r7, lsl #15
			if (len != operation) {
     80c:	048a0589 	streq	r0, [sl], #1417	; 0x589
}
     810:	0a6b038e 	beq	1ac1650 <__ccfg+0x1aa16a8>
     814:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
			uart_a_disable_int;
     818:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
			if (uart_a_char_available) {
     81c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
				*buf++ = uart_a_read;
     820:	c2c34108 	sbcgt	r4, r3, #8, 2
			uart_a_disable_int;
     824:	0b41000e 	bleq	1040864 <__ccfg+0x10208bc>
     828:	0000001c 	andeq	r0, r0, ip, lsl r0
			if (uart_a_char_available) {
     82c:	00000730 	andeq	r0, r0, r0, lsr r7
     830:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
     834:	0000006c 	andeq	r0, r0, ip, rrx
     838:	83180e42 	tsthi	r8, #1056	; 0x420
				goto Redo_rx;
     83c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     840:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     844:	00018e02 	andeq	r8, r1, r2, lsl #28
			return -2;
     848:	0000000c 	andeq	r0, r0, ip
     84c:	00000730 	andeq	r0, r0, r0, lsr r7
				uart_a_write (*buf);
     850:	00000000 	andeq	r0, r0, r0
     854:	00000024 	andeq	r0, r0, r4, lsr #32
			while (len && uart_a_room_in_tx) {
     858:	00000018 	andeq	r0, r0, r8, lsl r0
     85c:	00000730 	andeq	r0, r0, r0, lsr r7
     860:	00000000 	andeq	r0, r0, r0
			if (len != operation) {
     864:	00000080 	andeq	r0, r0, r0, lsl #1
			uart_a_disable_int;
     868:	83100e42 	tsthi	r0, #1056	; 0x420
     86c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (uart_a_room_in_tx) {
     870:	00018e02 	andeq	r8, r1, r2, lsl #28
     874:	00000014 	andeq	r0, r0, r4, lsl r0
				uart_a_enable_int;
     878:	00000730 	andeq	r0, r0, r0, lsr r7
     87c:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
     880:	00000070 	andeq	r0, r0, r0, ror r0
			if (uart_a_room_in_tx) {
     884:	83080e42 	movwhi	r0, #36418	; 0x8e42
				uart_a_write (*buf);
     888:	00018e02 	andeq	r8, r1, r2, lsl #28
     88c:	00000018 	andeq	r0, r0, r8, lsl r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     890:	00000730 	andeq	r0, r0, r0, lsr r7
     894:	00000000 	andeq	r0, r0, r0
			uart_a_enable_int;
     898:	00000078 	andeq	r0, r0, r8, ror r0
     89c:	83100e42 	tsthi	r0, #1056	; 0x420
     8a0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			return 0;
     8a4:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (len == UART_CNTRL_SETRATE) {
     8a8:	00000020 	andeq	r0, r0, r0, lsr #32
				if (__pi_uart_setrate (*((word*)buf),
     8ac:	00000730 	andeq	r0, r0, r0, lsr r7
     8b0:	00000000 	andeq	r0, r0, r0
     8b4:	000000bc 	strheq	r0, [r0], -ip
				syserror (EREQPAR, "uar");
     8b8:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
			syserror (ENOOPER, "uai");
     8bc:	86048505 	strhi	r8, [r4], -r5, lsl #10
			if (len == UART_CNTRL_GETRATE) {
     8c0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
				return 1;
     8c4:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     8c8:	000b4114 	andeq	r4, fp, r4, lsl r1
			syserror (ENOOPER, "uai");
     8cc:	00000018 	andeq	r0, r0, r8, lsl r0
     8d0:	00000730 	andeq	r0, r0, r0, lsr r7
     8d4:	00000000 	andeq	r0, r0, r0
     8d8:	0000003a 	andeq	r0, r0, sl, lsr r0
     8dc:	83100e41 	tsthi	r0, #1040	; 0x410
     8e0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8e8:	00000018 	andeq	r0, r0, r8, lsl r0
     8ec:	00000730 	andeq	r0, r0, r0, lsr r7
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     8f0:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     8f4:	00000038 	andeq	r0, r0, r8, lsr r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     8f8:	83100e41 	tsthi	r0, #1040	; 0x410
     8fc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     900:	00018e02 	andeq	r8, r1, r2, lsl #28
     904:	0000000c 	andeq	r0, r0, ip
     908:	00000730 	andeq	r0, r0, r0, lsr r7
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     90c:	00000000 	andeq	r0, r0, r0
     910:	0000000a 	andeq	r0, r0, sl
		RISE_N_SHINE;
     914:	00000018 	andeq	r0, r0, r8, lsl r0
     918:	00000730 	andeq	r0, r0, r0, lsr r7
		i_trigger (devevent (UART_A, READ));
     91c:	00000000 	andeq	r0, r0, r0
     920:	0000002c 	andeq	r0, r0, ip, lsr #32
     924:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     928:	4c018e02 	stcmi	14, cr8, [r1], {2}
     92c:	000ec4ce 	andeq	ip, lr, lr, asr #9
     930:	0000001c 	andeq	r0, r0, ip, lsl r0
     934:	00000730 	andeq	r0, r0, r0, lsr r7
     938:	00000000 	andeq	r0, r0, r0
     93c:	00000060 	andeq	r0, r0, r0, rrx
     940:	83080e41 	movwhi	r0, #36417	; 0x8e41
     944:	61018e02 	tstvs	r1, r2, lsl #28
     948:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     94c:	000b4300 	andeq	r4, fp, r0, lsl #6
     950:	00000014 	andeq	r0, r0, r4, lsl r0
     954:	00000730 	andeq	r0, r0, r0, lsr r7
		i_trigger (devevent (UART_A, WRITE));
     958:	00000000 	andeq	r0, r0, r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     95c:	00000040 	andeq	r0, r0, r0, asr #32
     960:	83080e42 	movwhi	r0, #36418	; 0x8e42
		RISE_N_SHINE;
     964:	00018e02 	andeq	r8, r1, r2, lsl #28
     968:	00000014 	andeq	r0, r0, r4, lsl r0
     96c:	00000730 	andeq	r0, r0, r0, lsr r7
		i_trigger (devevent (UART_A, WRITE));
     970:	00000000 	andeq	r0, r0, r0
     974:	0000002c 	andeq	r0, r0, ip, lsr #32
     978:	83080e42 	movwhi	r0, #36418	; 0x8e42
     97c:	00018e02 	andeq	r8, r1, r2, lsl #28
     980:	0000001c 	andeq	r0, r0, ip, lsl r0
     984:	00000730 	andeq	r0, r0, r0, lsr r7
     988:	00000000 	andeq	r0, r0, r0
     98c:	0000003c 	andeq	r0, r0, ip, lsr r0
     990:	83180e41 	tsthi	r8, #1040	; 0x410
     994:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     998:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
     99c:	00018e02 	andeq	r8, r1, r2, lsl #28
     9a0:	0000000c 	andeq	r0, r0, ip
     9a4:	00000730 	andeq	r0, r0, r0, lsr r7
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	00000006 	andeq	r0, r0, r6
void __buttons_setirq (int val) {
     9b0:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     9b4:	00000730 	andeq	r0, r0, r0, lsr r7
     9b8:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9bc:	00000068 	andeq	r0, r0, r8, rrx
     9c0:	83180e41 	tsthi	r8, #1040	; 0x410
     9c4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		bn = BUTTON_GPIO (__button_list [i]);
     9c8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     9cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d0:	00000014 	andeq	r0, r0, r4, lsl r0
     9d4:	00000730 	andeq	r0, r0, r0, lsr r7
     9d8:	00000000 	andeq	r0, r0, r0
     9dc:	00000050 	andeq	r0, r0, r0, asr r0
     9e0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
}
     9e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9e8:	0000002c 	andeq	r0, r0, ip, lsr #32
     9ec:	00000730 	andeq	r0, r0, r0, lsr r7
     9f0:	00000000 	andeq	r0, r0, r0
void __pinlist_setirq (int val) {
     9f4:	0000009c 	muleq	r0, ip, r0
	for (i = 0; i < N_PINLIST; i++) {
     9f8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     9fc:	86088509 	strhi	r8, [r8], -r9, lsl #10
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a00:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	for (i = 0; i < N_PINLIST; i++) {
     a04:	8a048905 	bhi	122e20 <__ccfg+0x102e78>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     a08:	8e028b03 	vmlahi.f64	d8, d2, d3
     a0c:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     a10:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
     a14:	00000b42 	andeq	r0, r0, r2, asr #22
     a18:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
     a1c:	00000730 	andeq	r0, r0, r0, lsr r7
}
     a20:	00000000 	andeq	r0, r0, r0
     a24:	00000040 	andeq	r0, r0, r0, asr #32
     a28:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a2c:	00018e02 	andeq	r8, r1, r2, lsl #28
void GPIOIntHandler () {
     a30:	00000014 	andeq	r0, r0, r4, lsl r0
if (buttons_int) {
     a34:	00000730 	andeq	r0, r0, r0, lsr r7
     a38:	00000000 	andeq	r0, r0, r0
	buttons_disable ();
     a3c:	00000034 	andeq	r0, r0, r4, lsr r0
     a40:	83080e42 	movwhi	r0, #36418	; 0x8e42
	i_trigger ((aword)&__button_list);
     a44:	00018e02 	andeq	r8, r1, r2, lsl #28
     a48:	00000018 	andeq	r0, r0, r8, lsl r0
     a4c:	00000730 	andeq	r0, r0, r0, lsr r7
     a50:	00000000 	andeq	r0, r0, r0
     a54:	0000003c 	andeq	r0, r0, ip, lsr r0
     a58:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a5c:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a60:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a64:	00000018 	andeq	r0, r0, r8, lsl r0
     a68:	00000730 	andeq	r0, r0, r0, lsr r7
     a6c:	00000000 	andeq	r0, r0, r0
	RISE_N_SHINE;
     a70:	0000003c 	andeq	r0, r0, ip, lsr r0
     a74:	83100e42 	tsthi	r0, #1056	; 0x420
     a78:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
if (pin_sensor_int) {
     a7c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a80:	0000000c 	andeq	r0, r0, ip
	i_trigger ((aword)(&__input_pins));
     a84:	00000730 	andeq	r0, r0, r0, lsr r7
     a88:	00001664 	andeq	r1, r0, r4, ror #12
     a8c:	00000002 	andeq	r0, r0, r2
     a90:	0000000c 	andeq	r0, r0, ip
     a94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a98:	7c020001 	stcvc	0, cr0, [r2], {1}
     a9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     aa0:	0000000c 	andeq	r0, r0, ip
     aa4:	00000a90 	muleq	r0, r0, sl
     aa8:	00001666 	andeq	r1, r0, r6, ror #12
     aac:	00000002 	andeq	r0, r0, r2
	__pinsen_disable_and_clear;
     ab0:	0000000c 	andeq	r0, r0, ip
	RISE_N_SHINE;
     ab4:	00000a90 	muleq	r0, r0, sl
     ab8:	00001668 	andeq	r1, r0, r8, ror #12
     abc:	00000002 	andeq	r0, r0, r2
}
     ac0:	0000000c 	andeq	r0, r0, ip
     ac4:	00000a90 	muleq	r0, r0, sl
     ac8:	0000166a 	andeq	r1, r0, sl, ror #12
     acc:	00000002 	andeq	r0, r0, r2
     ad0:	00000014 	andeq	r0, r0, r4, lsl r0
void system_init () {
     ad4:	00000a90 	muleq	r0, r0, sl
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ad8:	0000166c 	andeq	r1, r0, ip, ror #12
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     adc:	00000044 	andeq	r0, r0, r4, asr #32
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     ae0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ae4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ae8:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     aec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     af0:	7c020001 	stcvc	0, cr0, [r2], {1}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     af4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     af8:	0000000c 	andeq	r0, r0, ip
     afc:	00000ae8 	andeq	r0, r0, r8, ror #21
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b00:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b04:	00000002 	andeq	r0, r0, r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b08:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b0c:	00000ae8 	andeq	r0, r0, r8, ror #21
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b10:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b14:	00000058 	andeq	r0, r0, r8, asr r0
		pin = (port_confs [i] >> 19) & 0x1f;
     b18:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b1c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		pin = (port_confs [i] >> 19) & 0x1f;
     b20:	00018e02 	andeq	r8, r1, r2, lsl #28
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     b24:	0000000c 	andeq	r0, r0, ip
     b28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b2c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		if (port_confs [i] & 0x80)
     b34:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     b38:	00000b24 	andeq	r0, r0, r4, lsr #22
     b3c:	00000000 	andeq	r0, r0, r0
		if (port_confs [i] & 0x40)
     b40:	000000cc 	andeq	r0, r0, ip, asr #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b44:	83100e42 	tsthi	r0, #1056	; 0x420
     b48:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b4c:	02018e02 	andeq	r8, r1, #2, 28
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     b50:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     b54:	000ec3c4 	andeq	ip, lr, r4, asr #7
	all_leds_blink;
     b58:	ce420b44 	vmlsgt.f64	d16, d2, d4
     b5c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
     b60:	00000000 	andeq	r0, r0, r0
     b64:	00000024 	andeq	r0, r0, r4, lsr #32
     b68:	00000b24 	andeq	r0, r0, r4, lsr #22
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	00000038 	andeq	r0, r0, r8, lsr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     b74:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     b78:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     b7c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b80:	4a0b4300 	bmi	2d1788 <__ccfg+0x2b17e0>
     b84:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b88:	000b4300 	andeq	r4, fp, r0, lsl #6
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b8c:	0000000c 	andeq	r0, r0, ip
     b90:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	IntEnable (INT_AON_RTC_COMB);
     b94:	7c020001 	stcvc	0, cr0, [r2], {1}
     b98:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b9c:	00000018 	andeq	r0, r0, r8, lsl r0
	__pi_malloc_init ();
     ba0:	00000b8c 	andeq	r0, r0, ip, lsl #23
	IntEnable (INT_AON_GPIO_EDGE);
     ba4:	000016b8 			; <UNDEFINED> instruction: 0x000016b8
     ba8:	00000034 	andeq	r0, r0, r4, lsr r0
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     bac:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     bb0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     bb4:	00018e02 	andeq	r8, r1, r2, lsl #28
     bb8:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     bbc:	00000b8c 	andeq	r0, r0, ip, lsl #23
     bc0:	000016ec 	andeq	r1, r0, ip, ror #13
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     bc4:	00000030 	andeq	r0, r0, r0, lsr r0
     bc8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     bcc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	urates [0] = UART_RATE / 100;
     bd0:	00000001 	andeq	r0, r0, r1
     bd4:	00000014 	andeq	r0, r0, r4, lsl r0
	reinit_uart ();
     bd8:	00000b8c 	andeq	r0, r0, ip, lsl #23
	EXTRA_INITIALIZERS;
     bdc:	0000171c 	andeq	r1, r0, ip, lsl r7
     be0:	00000018 	andeq	r0, r0, r8, lsl r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     be4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     be8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bec:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     bf0:	00000b8c 	andeq	r0, r0, ip, lsl #23
     bf4:	00001734 	andeq	r1, r0, r4, lsr r7
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     bf8:	00000054 	andeq	r0, r0, r4, asr r0
     bfc:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
			devinit [i] . init (devinit [i] . param);
     c00:	86058506 	strhi	r8, [r5], -r6, lsl #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     c04:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     c08:	00018e02 	andeq	r8, r1, r2, lsl #28
     c0c:	0000001c 	andeq	r0, r0, ip, lsl r0
	IntEnable (INT_UART0_COMB);
     c10:	00000b8c 	andeq	r0, r0, ip, lsl #23
     c14:	00001788 	andeq	r1, r0, r8, lsl #15
}
     c18:	00000040 	andeq	r0, r0, r0, asr #32
	tci_run_auxiliary_timer ();
     c1c:	83180e41 	tsthi	r8, #1040	; 0x410
		diag ("");
     c20:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c24:	87038604 	strhi	r8, [r3, -r4, lsl #12]
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     c28:	00018e02 	andeq	r8, r1, r2, lsl #28
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     c2c:	00000014 	andeq	r0, r0, r4, lsl r0
		diag ("Leftover RAM: %d bytes",
     c30:	00000b8c 	andeq	r0, r0, ip, lsl #23
     c34:	000017c8 	andeq	r1, r0, r8, asr #15
     c38:	00000024 	andeq	r0, r0, r4, lsr #32
     c3c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     c40:	00018e02 	andeq	r8, r1, r2, lsl #28
     c44:	00000014 	andeq	r0, r0, r4, lsl r0
     c48:	00000b8c 	andeq	r0, r0, ip, lsl #23
     c4c:	000017ec 	andeq	r1, r0, ip, ror #15
     c50:	00000014 	andeq	r0, r0, r4, lsl r0
     c54:	83080e41 	movwhi	r0, #36417	; 0x8e41
     c58:	00018e02 	andeq	r8, r1, r2, lsl #28
     c5c:	0000000c 	andeq	r0, r0, ip
     c60:	00000b8c 	andeq	r0, r0, ip, lsl #23
     c64:	00001800 	andeq	r1, r0, r0, lsl #16
     c68:	00000014 	andeq	r0, r0, r4, lsl r0
     c6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c70:	00000b8c 	andeq	r0, r0, ip, lsl #23
     c74:	00000000 	andeq	r0, r0, r0
     c78:	00000064 	andeq	r0, r0, r4, rrx
     c7c:	83180e41 	tsthi	r8, #1040	; 0x410
     c80:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c84:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c88:	00018e02 	andeq	r8, r1, r2, lsl #28
__attribute__ ((noreturn)) void __pi_release () {
     c8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c90:	00000b8c 	andeq	r0, r0, ip, lsl #23
     c94:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c98:	00000128 	andeq	r0, r0, r8, lsr #2
	check_stack_overflow;
     c9c:	83180e41 	tsthi	r8, #1040	; 0x410
     ca0:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     ca4:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	update_n_wake (MAX_WORD, NO);
     ca8:	00018e02 	andeq	r8, r1, r2, lsl #28
     cac:	00000024 	andeq	r0, r0, r4, lsr #32
     cb0:	00000b8c 	andeq	r0, r0, ip, lsl #23
	for_all_tasks (__pi_curr) {
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	000000ec 	andeq	r0, r0, ip, ror #1
     cbc:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
  __ASM volatile ("cpsid i" : : : "memory");
     cc0:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
	__SLEEP;
     cc4:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     cc8:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     ccc:	8b038a04 	blhi	e34e4 <__ccfg+0xc353c>
     cd0:	00018e02 	andeq	r8, r1, r2, lsl #28
	system_event_count ++;
     cd4:	0000000c 	andeq	r0, r0, ip
     cd8:	00000b8c 	andeq	r0, r0, ip, lsl #23
	switch (__pi_systat.effpdm) {
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	00000002 	andeq	r0, r0, r2
     ce4:	0000000c 	andeq	r0, r0, ip
     ce8:	00000b8c 	andeq	r0, r0, ip, lsl #23
			__WFI ();
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	00000004 	andeq	r0, r0, r4
     cf4:	0000000c 	andeq	r0, r0, ip
	check_stack_overflow;
     cf8:	00000b8c 	andeq	r0, r0, ip, lsl #23
     cfc:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     d00:	00000014 	andeq	r0, r0, r4, lsl r0
     d04:	00000018 	andeq	r0, r0, r8, lsl r0
			(__pi_curr->code) (tstate (__pi_curr));
     d08:	00000b8c 	andeq	r0, r0, ip, lsl #23
			goto Redo;
     d0c:	00000000 	andeq	r0, r0, r0
	for_all_tasks (__pi_curr) {
     d10:	0000001a 	andeq	r0, r0, sl, lsl r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d14:	83080e41 	movwhi	r0, #36417	; 0x8e41
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     d18:	4a018e02 	bmi	64528 <__ccfg+0x44580>
     d1c:	000ec3ce 	andeq	ip, lr, lr, asr #7
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d20:	0000000c 	andeq	r0, r0, ip
     d24:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d28:	7c020001 	stcvc	0, cr0, [r2], {1}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     d2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d30:	0000001c 	andeq	r0, r0, ip, lsl r0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d34:	00000d20 	andeq	r0, r0, r0, lsr #26
     d38:	00001814 	andeq	r1, r0, r4, lsl r8
			__WFI ();
     d3c:	00000078 	andeq	r0, r0, r8, ror r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d40:	83180e41 	tsthi	r8, #1040	; 0x410
     d44:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
}
     d48:	87038604 	strhi	r8, [r3, -r4, lsl #12]
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d4c:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     d50:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d58:	7c020001 	stcvc	0, cr0, [r2], {1}
			PRCMPowerDomainOff (__pi_systat.ondmns |
     d5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d60:	00000030 	andeq	r0, r0, r0, lsr r0
     d64:	00000d50 	andeq	r0, r0, r0, asr sp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d68:	0000188c 	andeq	r1, r0, ip, lsl #17
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6c:	00000054 	andeq	r0, r0, r4, asr r0
     d70:	810c0e41 	tsthi	ip, r1, asr #28
     d74:	83028203 	movwhi	r8, #8707	; 0x2203
     d78:	280e4101 	stmdacs	lr, {r0, r8, lr}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d7c:	06850784 	streq	r0, [r5], r4, lsl #15
     d80:	048e0586 	streq	r0, [lr], #1414	; 0x586
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     d84:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d88:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     d8c:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     d90:	000ec1c2 	andeq	ip, lr, r2, asr #3
     d94:	0000000c 	andeq	r0, r0, ip
     d98:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			SysCtrlSetRechargeBeforePowerDown
     d9c:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     da0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     da4:	00000030 	andeq	r0, r0, r0, lsr r0
     da8:	00000d94 	muleq	r0, r4, sp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     dac:	000018e0 	andeq	r1, r0, r0, ror #17
     db0:	00000060 	andeq	r0, r0, r0, rrx
     db4:	810c0e41 	tsthi	ip, r1, asr #28
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     db8:	83028203 	movwhi	r8, #8707	; 0x2203
     dbc:	200e4101 	andcs	r4, lr, r1, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     dc0:	05850684 	streq	r0, [r5, #1668]	; 0x684
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dc4:	0a64048e 	beq	1902004 <__ccfg+0x18e205c>
     dc8:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     dcc:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     dd0:	c1c2c341 	bicgt	ip, r2, r1, asr #6
			while (!(AONWUCPowerStatusGet () &
     dd4:	0b41000e 	bleq	1040e14 <__ccfg+0x1020e6c>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     dd8:	0000000c 	andeq	r0, r0, ip
     ddc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     de0:	7c020001 	stcvc	0, cr0, [r2], {1}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     de4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     de8:	00000028 	andeq	r0, r0, r8, lsr #32
     dec:	00000dd8 	ldrdeq	r0, [r0], -r8
     df0:	00001940 	andeq	r1, r0, r0, asr #18
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     df4:	00000070 	andeq	r0, r0, r0, ror r0
     df8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     dfc:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e00:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
			SysCtrlAdjustRechargeAfterPowerDown ();
     e04:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
			reinit_uart ();
     e08:	c7ce4214 	bfigt	r4, r4, #4, #11
     e0c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e10:	000b4200 	andeq	r4, fp, r0, lsl #4
}
     e14:	0000000c 	andeq	r0, r0, ip
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     e18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e1c:	7c020001 	stcvc	0, cr0, [r2], {1}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     e20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e24:	00000028 	andeq	r0, r0, r8, lsr #32
     e28:	00000e14 	andeq	r0, r0, r4, lsl lr
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     e2c:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
     e30:	0000011c 	andeq	r0, r0, ip, lsl r1
     e34:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     e38:	86048505 	strhi	r8, [r4], -r5, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     e3c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     e40:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     e44:	c7ce4214 	bfigt	r4, r4, #4, #11
     e48:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     e4c:	00000000 	andeq	r0, r0, r0
     e50:	0000000c 	andeq	r0, r0, ip
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     e54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     e58:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     e5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e60:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (
     e64:	00000e50 	andeq	r0, r0, r0, asr lr
     e68:	00001acc 	andeq	r1, r0, ip, asr #21
	__SLEEP;
     e6c:	00000020 	andeq	r0, r0, r0, lsr #32
     e70:	00000028 	andeq	r0, r0, r8, lsr #32
  __ASM volatile ("cpsie i" : : : "memory");
     e74:	00000e50 	andeq	r0, r0, r0, asr lr
	goto Redo;
     e78:	00001aec 	andeq	r1, r0, ip, ror #21
     e7c:	00000230 	andeq	r0, r0, r0, lsr r2
     e80:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
     e84:	86078508 	strhi	r8, [r7], -r8, lsl #10
     e88:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     e8c:	8a038904 	bhi	e32a4 <__ccfg+0xc32fc>
     e90:	02018e02 	andeq	r8, r1, #2, 28
     e94:	200e0a4f 	andcs	r0, lr, pc, asr #20
     e98:	00000b42 	andeq	r0, r0, r2, asr #22
     e9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     ea0:	00000e50 	andeq	r0, r0, r0, asr lr
     ea4:	00001d1c 	andeq	r1, r0, ip, lsl sp
     ea8:	00000050 	andeq	r0, r0, r0, asr r0
     eac:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     eb0:	86058506 	strhi	r8, [r5], -r6, lsl #10
     eb4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     eb8:	00018e02 	andeq	r8, r1, r2, lsl #28
     ebc:	0000000c 	andeq	r0, r0, ip
     ec0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ec4:	7c020001 	stcvc	0, cr0, [r2], {1}
     ec8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ecc:	00000020 	andeq	r0, r0, r0, lsr #32
     ed0:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     ed4:	00001d6c 	andeq	r1, r0, ip, ror #26
     ed8:	00000390 	muleq	r0, r0, r3
     edc:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     ee0:	86068507 	strhi	r8, [r6], -r7, lsl #10
int main (void) {
     ee4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     ee8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
     eec:	00000001 	andeq	r0, r0, r1
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     ef0:	0000000c 	andeq	r0, r0, ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     ef4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	system_init ();
     ef8:	7c020001 	stcvc	0, cr0, [r2], {1}
	tcv_init ();
     efc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f00:	0000000c 	andeq	r0, r0, ip
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     f04:	00000ef0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     f08:	000020fc 	strdeq	r2, [r0], -ip
     f0c:	00000030 	andeq	r0, r0, r0, lsr r0
     f10:	0000000c 	andeq	r0, r0, ip
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     f14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f18:	7c020001 	stcvc	0, cr0, [r2], {1}
	delay (16, 0);
     f1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f20:	0000000c 	andeq	r0, r0, ip
     f24:	00000f10 	andeq	r0, r0, r0, lsl pc
	__pi_release ();
     f28:	00000000 	andeq	r0, r0, r0
     f2c:	00000020 	andeq	r0, r0, r0, lsr #32
     f30:	0000000c 	andeq	r0, r0, ip
     f34:	00000f10 	andeq	r0, r0, r0, lsl pc
     f38:	0000212c 	andeq	r2, r0, ip, lsr #2
     f3c:	00000018 	andeq	r0, r0, r8, lsl r0
     f40:	0000000c 	andeq	r0, r0, ip
static void killev (__pi_pcb_t *pid) {
     f44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	wfun = (aword)(pid->code);
     f48:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (i) {
     f4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f50:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
     f54:	00000f40 	andeq	r0, r0, r0, asr #30
     f58:	00002144 	andeq	r2, r0, r4, asr #2
			    || i->Events [j] . Event == wfun
     f5c:	00000008 	andeq	r0, r0, r8
		for (j = 0; j < nevents (i); j++) {
     f60:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == (aword)pid
     f64:	00000f40 	andeq	r0, r0, r0, asr #30
     f68:	00000000 	andeq	r0, r0, r0
     f6c:	00000006 	andeq	r0, r0, r6
				wakeupev (i, j);
     f70:	0000000c 	andeq	r0, r0, ip
     f74:	00000f40 	andeq	r0, r0, r0, asr #30
	for_all_tasks (i) {
     f78:	0000214c 	andeq	r2, r0, ip, asr #2
}
     f7c:	00000008 	andeq	r0, r0, r8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f80:	0000000c 	andeq	r0, r0, ip
static void qfree (aword *ch) {
     f84:	00000f40 	andeq	r0, r0, r0, asr #30
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f88:	00000000 	andeq	r0, r0, r0
	cc = (aword*)(mpools + MA_NP);
     f8c:	00000006 	andeq	r0, r0, r6
	m_setnextp (ch, chunk);
     f90:	0000000c 	andeq	r0, r0, ip
	m_setnextp (cc, ch);
     f94:	00000f40 	andeq	r0, r0, r0, asr #30
}
     f98:	00000000 	andeq	r0, r0, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f9c:	00000008 	andeq	r0, r0, r8
     fa0:	0000000c 	andeq	r0, r0, ip
     fa4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			m_setnextp (cc, m_nextp (chunk));
     fa8:	7c020001 	stcvc	0, cr0, [r2], {1}
			m_size (chunk) += m_hdrlen + m_size (ch);
     fac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fb0:	00000018 	andeq	r0, r0, r8, lsl r0
     fb4:	00000fa0 	andeq	r0, r0, r0, lsr #31
     fb8:	00002154 	andeq	r2, r0, r4, asr r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     fbc:	000000d4 	ldrdeq	r0, [r0], -r4
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     fc0:	83100e41 	tsthi	r0, #1040	; 0x410
     fc4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     fc8:	00018e02 	andeq	r8, r1, r2, lsl #28
			m_setnextp (cc, m_nextp (chunk));
     fcc:	00000014 	andeq	r0, r0, r4, lsl r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     fd0:	00000fa0 	andeq	r0, r0, r0, lsr #31
     fd4:	00002228 	andeq	r2, r0, r8, lsr #4
     fd8:	000000a4 	andeq	r0, r0, r4, lsr #1
     fdc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     fe0:	00018e02 	andeq	r8, r1, r2, lsl #28
     fe4:	0000000c 	andeq	r0, r0, ip
			if (m_size (chunk) >= m_size (ch))
     fe8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fec:	7c020001 	stcvc	0, cr0, [r2], {1}
     ff0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ff4:	00000018 	andeq	r0, r0, r8, lsl r0
		chunk = m_nextp (chunk))
     ff8:	00000fe4 	andeq	r0, r0, r4, ror #31
     ffc:	000022cc 	andeq	r2, r0, ip, asr #5
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
    1000:	0000007c 	andeq	r0, r0, ip, ror r0
	diag_wait (a);
    1004:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	diag_wchar (c, a);
    1008:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    100c:	00000001 	andeq	r0, r0, r1
}
    1010:	00000014 	andeq	r0, r0, r4, lsl r0
    1014:	00000fe4 	andeq	r0, r0, r4, ror #31
	syserror (ESTATE, "state");
    1018:	00002348 	andeq	r2, r0, r8, asr #6
    101c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1020:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    1024:	00018e02 	andeq	r8, r1, r2, lsl #28
void update_n_wake (word min, Boolean force) {
    1028:	0000000c 	andeq	r0, r0, ip
	if (TCI_UPDATE_DELAY_TICKS (force))
    102c:	00000fe4 	andeq	r0, r0, r4, ror #31
    1030:	000023f4 	strdeq	r2, [r0], -r4
    1034:	0000005c 	andeq	r0, r0, ip, asr r0
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
    1038:	0000000c 	andeq	r0, r0, ip
    103c:	00000fe4 	andeq	r0, r0, r4, ror #31
    1040:	00002450 	andeq	r2, r0, r0, asr r4
    1044:	00000018 	andeq	r0, r0, r8, lsl r0
    1048:	0000000c 	andeq	r0, r0, ip
    104c:	00000fe4 	andeq	r0, r0, r4, ror #31
    1050:	00000000 	andeq	r0, r0, r0
    1054:	00000010 	andeq	r0, r0, r0, lsl r0
    1058:	0000000c 	andeq	r0, r0, ip
    105c:	00000fe4 	andeq	r0, r0, r4, ror #31
    1060:	00002468 	andeq	r2, r0, r8, ror #8
    1064:	00000010 	andeq	r0, r0, r0, lsl r0
    1068:	0000000c 	andeq	r0, r0, ip
		for_all_tasks (i) {
    106c:	00000fe4 	andeq	r0, r0, r4, ror #31
	__pi_mintk = znew + min;
    1070:	00002478 	andeq	r2, r0, r8, ror r4
    1074:	00000014 	andeq	r0, r0, r4, lsl r0
			if (!twaiting (i))
    1078:	00000018 	andeq	r0, r0, r8, lsl r0
    107c:	00000fe4 	andeq	r0, r0, r4, ror #31
			if (twakecnd (__pi_old, znew, i->Timer)) {
    1080:	0000248c 	andeq	r2, r0, ip, lsl #9
    1084:	00000064 	andeq	r0, r0, r4, rrx
    1088:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    108c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1090:	00018e02 	andeq	r8, r1, r2, lsl #28
    1094:	0000000c 	andeq	r0, r0, ip
    1098:	00000fe4 	andeq	r0, r0, r4, ror #31
    109c:	000024f0 	strdeq	r2, [r0], -r0
    10a0:	00000014 	andeq	r0, r0, r4, lsl r0
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	00000fe4 	andeq	r0, r0, r4, ror #31
    10ac:	00002504 	andeq	r2, r0, r4, lsl #10
				wakeuptm (i);
    10b0:	00000014 	andeq	r0, r0, r4, lsl r0
    10b4:	0000000c 	andeq	r0, r0, ip
		for_all_tasks (i) {
    10b8:	00000fe4 	andeq	r0, r0, r4, ror #31
				d = i->Timer - znew;
    10bc:	00002518 	andeq	r2, r0, r8, lsl r5
    10c0:	00000014 	andeq	r0, r0, r4, lsl r0
    10c4:	0000000c 	andeq	r0, r0, ip
		if ((word)(__pi_mintk - znew) < min) 
    10c8:	00000fe4 	andeq	r0, r0, r4, ror #31
    10cc:	0000252c 	andeq	r2, r0, ip, lsr #10
    10d0:	00000028 	andeq	r0, r0, r8, lsr #32
	__pi_old = znew;
    10d4:	0000000c 	andeq	r0, r0, ip
}
    10d8:	00000fe4 	andeq	r0, r0, r4, ror #31
	TCI_RUN_DELAY_TIMER;
    10dc:	00002554 	andeq	r2, r0, r4, asr r5
}
    10e0:	00000010 	andeq	r0, r0, r0, lsl r0
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00000fe4 	andeq	r0, r0, r4, ror #31
    10ec:	00002564 	andeq	r2, r0, r4, ror #10
    10f0:	0000002c 	andeq	r0, r0, ip, lsr #32
void proceed (word state) {
    10f4:	0000000c 	andeq	r0, r0, ip
	prcdstate (__pi_curr, state);
    10f8:	00000fe4 	andeq	r0, r0, r4, ror #31
    10fc:	00002590 	muleq	r0, r0, r5
	release;
    1100:	00000014 	andeq	r0, r0, r4, lsl r0
    1104:	0000000c 	andeq	r0, r0, ip
void __pi_wait (aword event, word state) {
    1108:	00000fe4 	andeq	r0, r0, r4, ror #31
	sint j = nevents (__pi_curr);
    110c:	000025a4 	andeq	r2, r0, r4, lsr #11
	if (j >= MAX_EVENTS_PER_TASK)
    1110:	00000014 	andeq	r0, r0, r4, lsl r0
    1114:	0000001c 	andeq	r0, r0, ip, lsl r0
    1118:	00000fe4 	andeq	r0, r0, r4, ror #31
		syserror (ENEVENTS, "sw");
    111c:	000025b8 			; <UNDEFINED> instruction: 0x000025b8
    1120:	00000110 	andeq	r0, r0, r0, lsl r1
	setestate (__pi_curr->Events [j], state, event);
    1124:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
	incwait (__pi_curr);
    1128:	86038504 	strhi	r8, [r3], -r4, lsl #10
	setestate (__pi_curr->Events [j], state, event);
    112c:	02018e02 	andeq	r8, r1, #2, 28
}
    1130:	00100e76 	andseq	r0, r0, r6, ror lr
    1134:	00000018 	andeq	r0, r0, r8, lsl r0
    1138:	00000fe4 	andeq	r0, r0, r4, ror #31
void __pi_trigger (aword event) {
    113c:	000026c8 	andeq	r2, r0, r8, asr #13
	for_all_tasks (i) {
    1140:	00000064 	andeq	r0, r0, r4, rrx
		for (j = 0; j < nevents (i); j++) {
    1144:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1148:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    114c:	00000001 	andeq	r0, r0, r1
    1150:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == event) {
    1154:	00000fe4 	andeq	r0, r0, r4, ror #31
    1158:	0000272c 	andeq	r2, r0, ip, lsr #14
    115c:	00000028 	andeq	r0, r0, r8, lsr #32
				wakeupev (i, j);
    1160:	00000014 	andeq	r0, r0, r4, lsl r0
    1164:	00000fe4 	andeq	r0, r0, r4, ror #31
	for_all_tasks (i) {
    1168:	00002754 	andeq	r2, r0, r4, asr r7
}
    116c:	00000150 	andeq	r0, r0, r0, asr r1
aword __pi_join (aword pid, word st) {
    1170:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	for_all_tasks (i) {
    1174:	00018e02 	andeq	r8, r1, r2, lsl #28
    1178:	0000000c 	andeq	r0, r0, ip
	return 0;
    117c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if ((aword)i == pid) {
    1180:	7c020001 	stcvc	0, cr0, [r2], {1}
			__pi_wait (pid, st);
    1184:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1188:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i) {
    118c:	00001178 	andeq	r1, r0, r8, ror r1
    1190:	00000000 	andeq	r0, r0, r0
void delay (word d, word state) {
    1194:	000000f4 	strdeq	r0, [r0], -r4
	settstate (__pi_curr, state);
    1198:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    119c:	86058506 	strhi	r8, [r5], -r6, lsl #10
    11a0:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    11a4:	00018e02 	andeq	r8, r1, r2, lsl #28
	update_n_wake (d, YES);
    11a8:	00000028 	andeq	r0, r0, r8, lsr #32
    11ac:	00001178 	andeq	r1, r0, r8, ror r1
	__pi_curr->Timer = __pi_old + d;
    11b0:	000028a4 	andeq	r2, r0, r4, lsr #17
    11b4:	00000220 	andeq	r0, r0, r0, lsr #4
	inctimer (__pi_curr);
    11b8:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    11bc:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11c0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
}
    11c4:	8a048905 	bhi	1235e0 <__ccfg+0x103638>
    11c8:	8e028b03 	vmlahi.f64	d8, d2, d3
	if (fun == NULL)
    11cc:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
		return (int) __pi_curr;
    11d0:	00000024 	andeq	r0, r0, r4, lsr #32
    11d4:	00000014 	andeq	r0, r0, r4, lsl r0
	for_all_tasks (i)
    11d8:	00001178 	andeq	r1, r0, r8, ror r1
}
    11dc:	00002ac4 	andeq	r2, r0, r4, asr #21
		if (i->code == fun)
    11e0:	00000060 	andeq	r0, r0, r0, rrx
	for_all_tasks (i)
    11e4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11e8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11ec:	00000014 	andeq	r0, r0, r4, lsl r0
word crunning (fsmcode fun) {
    11f0:	00001178 	andeq	r1, r0, r8, ror r1
	for_all_tasks (i)
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	00000078 	andeq	r0, r0, r8, ror r0
		if (i->code == fun)
    11fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1200:	00018e02 	andeq	r8, r1, r2, lsl #28
			c++;
    1204:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i)
    1208:	00001178 	andeq	r1, r0, r8, ror r1
    120c:	00002b24 	andeq	r2, r0, r4, lsr #22
int __pi_strlen (const char *s) {
    1210:	00000018 	andeq	r0, r0, r8, lsl r0
	for (i = 0; *(s+i) != '\0'; i++);
    1214:	0000000c 	andeq	r0, r0, ip
}
    1218:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (i = 0; *(s+i) != '\0'; i++);
    121c:	7c020001 	stcvc	0, cr0, [r2], {1}
	while (n--)
    1220:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1224:	0000000c 	andeq	r0, r0, ip
		*dest++ = *src++;
    1228:	00001214 	andeq	r1, r0, r4, lsl r2
    122c:	00000000 	andeq	r0, r0, r0
    1230:	00000010 	andeq	r0, r0, r0, lsl r0
void adddevfunc (devreqfun_t rf, int loc) {
    1234:	0000000c 	andeq	r0, r0, ip
		syserror (EREQPAR, "addv");
    1238:	00001214 	andeq	r1, r0, r4, lsl r2
		syserror (ERESOURCE, "addv");
    123c:	00000000 	andeq	r0, r0, r0
	if (ioreq [loc] != NULL)
    1240:	00000018 	andeq	r0, r0, r8, lsl r0
    1244:	0000000c 	andeq	r0, r0, ip
		syserror (ERESOURCE, "addv");
    1248:	00001214 	andeq	r1, r0, r4, lsl r2
	ioreq [loc] = rf;
    124c:	00002b3c 	andeq	r2, r0, ip, lsr fp
}
    1250:	0000004c 	andeq	r0, r0, ip, asr #32
    1254:	00000014 	andeq	r0, r0, r4, lsl r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    1258:	00001214 	andeq	r1, r0, r4, lsl r2
    125c:	00000000 	andeq	r0, r0, r0
    1260:	00000030 	andeq	r0, r0, r0, lsr r0
    1264:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    1268:	00018e02 	andeq	r8, r1, r2, lsl #28
    126c:	00000018 	andeq	r0, r0, r8, lsl r0
    1270:	00001214 	andeq	r1, r0, r4, lsl r2
		syserror (ENODEVICE, "io");
    1274:	00002b88 	andeq	r2, r0, r8, lsl #23
    1278:	0000006c 	andeq	r0, r0, ip, rrx
	if (len == 0)
    127c:	83100e41 	tsthi	r0, #1040	; 0x410
	ret = (ioreq [dev]) (operation, buf, len);
    1280:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1284:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (ret >= 0)
    1288:	00000014 	andeq	r0, r0, r4, lsl r0
	if (ret == -1) {
    128c:	00001214 	andeq	r1, r0, r4, lsl r2
    1290:	00002bf4 	strdeq	r2, [r0], -r4
		if (retry == WNONE)
    1294:	00000016 	andeq	r0, r0, r6, lsl r0
		iowait (dev, operation, retry);
    1298:	83080e41 	movwhi	r0, #36417	; 0x8e41
    129c:	00018e02 	andeq	r8, r1, r2, lsl #28
    12a0:	0000000c 	andeq	r0, r0, ip
			release;
    12a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	if (ret == -2) {
    12a8:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (retry != WNONE) {
    12ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12b0:	00000024 	andeq	r0, r0, r4, lsr #32
			iowait (dev, operation, retry);
    12b4:	000012a0 	andeq	r1, r0, r0, lsr #5
    12b8:	00002c0c 	andeq	r2, r0, ip, lsl #24
			(ioreq [dev]) (NONE, buf, len);
    12bc:	00000028 	andeq	r0, r0, r8, lsr #32
    12c0:	83100e41 	tsthi	r0, #1040	; 0x410
    12c4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		(ioreq [dev]) (NONE, buf, len);
    12c8:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    12cc:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    12d0:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
}
    12d4:	0000000b 	andeq	r0, r0, fp
	if (retry != WNONE) {
    12d8:	0000000c 	andeq	r0, r0, ip
		delay (-ret - 2, retry);
    12dc:	000012a0 	andeq	r1, r0, r0, lsr #5
    12e0:	00002c34 	andeq	r2, r0, r4, lsr ip
    12e4:	00000008 	andeq	r0, r0, r8
    12e8:	0000000c 	andeq	r0, r0, ip
		release;
    12ec:	000012a0 	andeq	r1, r0, r0, lsr #5
    12f0:	00000000 	andeq	r0, r0, r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    12f4:	00000022 	andeq	r0, r0, r2, lsr #32
    12f8:	00000018 	andeq	r0, r0, r8, lsl r0
    12fc:	000012a0 	andeq	r1, r0, r0, lsr #5
    1300:	00000000 	andeq	r0, r0, r0
    1304:	0000002e 	andeq	r0, r0, lr, lsr #32
		syserror (ERESOURCE, "mal1");
    1308:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    130c:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1310:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1314:	00000018 	andeq	r0, r0, r8, lsl r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1318:	000012a0 	andeq	r1, r0, r0, lsr #5
	m_size (mpools [0]) = mlen - m_hdrlen;
    131c:	00000000 	andeq	r0, r0, r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1320:	00000034 	andeq	r0, r0, r4, lsr r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1324:	83100e41 	tsthi	r0, #1040	; 0x410
    1328:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
}
    132c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1330:	00000018 	andeq	r0, r0, r8, lsl r0
    1334:	000012a0 	andeq	r1, r0, r0, lsr #5
    1338:	00000000 	andeq	r0, r0, r0
    133c:	00000040 	andeq	r0, r0, r0, asr #32
    1340:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
void __pi_free (aword *ch) {
    1344:	86038504 	strhi	r8, [r3], -r4, lsl #10
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    1348:	00018e02 	andeq	r8, r1, r2, lsl #28
    134c:	0000000c 	andeq	r0, r0, ip
		syserror (EMALLOC, "malg");
    1350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1354:	7c020001 	stcvc	0, cr0, [r2], {1}
	mcfree [MA_NP] += m_size (ch);
    1358:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    135c:	0000001c 	andeq	r0, r0, ip, lsl r0
		m_size (ch) ^= MALLOC_UMASK;
    1360:	0000134c 	andeq	r1, r0, ip, asr #6
	mcfree [MA_NP] += m_size (ch);
    1364:	00002c3c 	andeq	r2, r0, ip, lsr ip
	QFREE;
    1368:	0000005c 	andeq	r0, r0, ip, asr r0
	if (mevent [MA_NP] . nwait) {
    136c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1370:	86038504 	strhi	r8, [r3], -r4, lsl #10
		trigger ((aword)(&(mevent [MA_NP])));
    1374:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		mevent [MA_NP] . nwait --;
    1378:	0000100e 	andeq	r1, r0, lr
}
    137c:	00000014 	andeq	r0, r0, r4, lsl r0
    1380:	0000134c 	andeq	r1, r0, ip, asr #6
    1384:	00002c98 	muleq	r0, r8, ip
    1388:	0000002c 	andeq	r0, r0, ip, lsr #32
void kill (aword pid) {
    138c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		pid = (aword) __pi_curr;
    1390:	00018e02 	andeq	r8, r1, r2, lsl #28
	j = NULL;
    1394:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (i) {
    1398:	0000134c 	andeq	r1, r0, ip, asr #6
	syserror (EREQPAR, "kpi");
    139c:	00000000 	andeq	r0, r0, r0
    13a0:	00000090 	muleq	r0, r0, r0
		if ((aword)i == pid) {
    13a4:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    13a8:	86038504 	strhi	r8, [r3], -r4, lsl #10
				__PCB = i->Next;
    13ac:	00018e02 	andeq	r8, r1, r2, lsl #28
			killev (i);
    13b0:	00000014 	andeq	r0, r0, r4, lsl r0
			ufree (i);
    13b4:	0000134c 	andeq	r1, r0, ip, asr #6
			if (i == __pi_curr)
    13b8:	00000000 	andeq	r0, r0, r0
    13bc:	00000018 	andeq	r0, r0, r8, lsl r0
				release;
    13c0:	83080e41 	movwhi	r0, #36417	; 0x8e41
				j->Next = i->Next;
    13c4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13c8:	00000014 	andeq	r0, r0, r4, lsl r0
    13cc:	0000134c 	andeq	r1, r0, ip, asr #6
}
    13d0:	00000000 	andeq	r0, r0, r0
    13d4:	00000060 	andeq	r0, r0, r0, rrx
    13d8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
void killall (fsmcode fun) {
    13dc:	00018e02 	andeq	r8, r1, r2, lsl #28
	j = NULL;
    13e0:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = __PCB; i != NULL; ) {
    13e4:	0000134c 	andeq	r1, r0, ip, asr #6
			if (i == __pi_curr)
    13e8:	00000000 	andeq	r0, r0, r0
	for (i = __PCB; i != NULL; ) {
    13ec:	00000034 	andeq	r0, r0, r4, lsr r0
	if (rel)
    13f0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		release;
    13f4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (i->code == fun) {
    13f8:	00000018 	andeq	r0, r0, r8, lsl r0
    13fc:	0000134c 	andeq	r1, r0, ip, asr #6
			if (j == NULL)
    1400:	00000000 	andeq	r0, r0, r0
				__PCB = k;
    1404:	00000038 	andeq	r0, r0, r8, lsr r0
			if (i == __pi_curr)
    1408:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
				rel = YES;
    140c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			killev (i);
    1410:	00000001 	andeq	r0, r0, r1
			ufree (i);
    1414:	0000000c 	andeq	r0, r0, ip
			i = k;
    1418:	0000134c 	andeq	r1, r0, ip, asr #6
    141c:	00000000 	andeq	r0, r0, r0
				j->Next = k;
    1420:	0000000c 	andeq	r0, r0, ip
    1424:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1428:	0000134c 	andeq	r1, r0, ip, asr #6
    142c:	00000000 	andeq	r0, r0, r0
    1430:	00000034 	andeq	r0, r0, r4, lsr r0
	if (size < 8)
    1434:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		_size = 2;
    1438:	86038504 	strhi	r8, [r3], -r4, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    143c:	00018e02 	andeq	r8, r1, r2, lsl #28
		_size = (((aword)size) + 3) >> 2;
    1440:	0000000c 	andeq	r0, r0, ip
		if (m_magic (chunk) != MALLOC_MAGIC)
    1444:	0000134c 	andeq	r1, r0, ip, asr #6
		_size = (((aword)size) + 3) >> 2;
    1448:	00000000 	andeq	r0, r0, r0
		if (mevent [MA_NP] . nfail != 255)
    144c:	0000001c 	andeq	r0, r0, ip, lsl r0
