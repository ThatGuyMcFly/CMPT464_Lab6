
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	0000156d 	andeq	r1, r0, sp, ror #10
		// Called to issue a wait request
		if (st == WNONE)
       8:	00001567 	andeq	r1, r0, r7, ror #10
       c:	00001569 	andeq	r1, r0, r9, ror #10
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	0000156b 	andeq	r1, r0, fp, ror #10
      14:	0000156b 	andeq	r1, r0, fp, ror #10
		when (&__input_pins, st);
      18:	0000156b 	andeq	r1, r0, fp, ror #10
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	0000156b 	andeq	r1, r0, fp, ror #10
      30:	0000156b 	andeq	r1, r0, fp, ror #10
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	0000156b 	andeq	r1, r0, fp, ror #10
      3c:	0000156b 	andeq	r1, r0, fp, ror #10
      40:	000009a9 	andeq	r0, r0, r9, lsr #19
      44:	0000156b 	andeq	r1, r0, fp, ror #10
      48:	0000156b 	andeq	r1, r0, fp, ror #10
}
      4c:	0000156b 	andeq	r1, r0, fp, ror #10
      50:	00000569 	andeq	r0, r0, r9, ror #10
      54:	00000869 	andeq	r0, r0, r9, ror #16
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	0000156b 	andeq	r1, r0, fp, ror #10
	    pbutton++) {
      5c:	0000156b 	andeq	r1, r0, fp, ror #10
      60:	0000156b 	andeq	r1, r0, fp, ror #10
	if (!button_still_pressed (__button_list [pbutton]))
      64:	0000156b 	andeq	r1, r0, fp, ror #10
      68:	0000156b 	andeq	r1, r0, fp, ror #10
      6c:	0000156b 	andeq	r1, r0, fp, ror #10
      70:	0000156b 	andeq	r1, r0, fp, ror #10
      74:	0000156b 	andeq	r1, r0, fp, ror #10
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	0000156b 	andeq	r1, r0, fp, ror #10
      7c:	0000156b 	andeq	r1, r0, fp, ror #10
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	0000156b 	andeq	r1, r0, fp, ror #10
      84:	0000156b 	andeq	r1, r0, fp, ror #10
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	0000156b 	andeq	r1, r0, fp, ror #10
      8c:	0000156b 	andeq	r1, r0, fp, ror #10
      90:	0000156b 	andeq	r1, r0, fp, ror #10
      94:	0000156b 	andeq	r1, r0, fp, ror #10
      98:	0000156b 	andeq	r1, r0, fp, ror #10
		goto Done;

	if (baction == NULL)
      9c:	0000156b 	andeq	r1, r0, fp, ror #10
      a0:	0000156b 	andeq	r1, r0, fp, ror #10
		goto Term;

	(*baction) (pbutton);
      a4:	0000156b 	andeq	r1, r0, fp, ror #10

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	0000156b 	andeq	r1, r0, fp, ror #10
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	0000156b 	andeq	r1, r0, fp, ror #10
      b0:	0000156b 	andeq	r1, r0, fp, ror #10
endthread
      b4:	0000156b 	andeq	r1, r0, fp, ror #10
      b8:	0000156b 	andeq	r1, r0, fp, ror #10
      bc:	0000156b 	andeq	r1, r0, fp, ror #10
      c0:	0000156b 	andeq	r1, r0, fp, ror #10
      c4:	0000156b 	andeq	r1, r0, fp, ror #10

000000c8 <blinker>:
      c8:	b570      	push	{r4, r5, r6, lr}
      ca:	b300      	cbz	r0, 10e <_Min_Stack_Size+0xe>
// Boolean flags for flashing the LEDs and showing the cycle characters
Boolean On = NO;
Boolean displayCycle = NO;

// Finite state machine for flashing the LEDs and displaying cycle characters
fsm blinker {
      cc:	2801      	cmp	r0, #1
      ce:	d17f      	bne.n	1d0 <_Min_Stack_Size+0xd0>
        
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        // turn off the LED that was turned on in the Check_PERIOD state
        leds(led,0);
      d0:	4b41      	ldr	r3, [pc, #260]	; (1d8 <_Min_Stack_Size+0xd8>)
      d2:	4a42      	ldr	r2, [pc, #264]	; (1dc <_Min_Stack_Size+0xdc>)
      d4:	6819      	ldr	r1, [r3, #0]
      d6:	4b42      	ldr	r3, [pc, #264]	; (1e0 <_Min_Stack_Size+0xe0>)
      d8:	2900      	cmp	r1, #0
      da:	d16d      	bne.n	1b8 <_Min_Stack_Size+0xb8>
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      dc:	2140      	movs	r1, #64	; 0x40
      de:	6011      	str	r1, [r2, #0]
      e0:	781a      	ldrb	r2, [r3, #0]
      e2:	0912      	lsrs	r2, r2, #4
      e4:	f002 020e 	and.w	r2, r2, #14
      e8:	7819      	ldrb	r1, [r3, #0]
      ea:	f362 1107 	bfi	r1, r2, #4, #4
      ee:	7019      	strb	r1, [r3, #0]
        
        // Display the off character if required
        if (displayCycle)
      f0:	4b3c      	ldr	r3, [pc, #240]	; (1e4 <_Min_Stack_Size+0xe4>)
      f2:	4c3d      	ldr	r4, [pc, #244]	; (1e8 <_Min_Stack_Size+0xe8>)
      f4:	781b      	ldrb	r3, [r3, #0]
      f6:	b12b      	cbz	r3, 104 <_Min_Stack_Size+0x4>
            ser_outf(Check_PERIOD, "%c %d ", 'F', offTime);
      f8:	2246      	movs	r2, #70	; 0x46
      fa:	2000      	movs	r0, #0
      fc:	8823      	ldrh	r3, [r4, #0]
      fe:	493b      	ldr	r1, [pc, #236]	; (1ec <_Min_Stack_Size+0xec>)
     100:	f001 fb44 	bl	178c <ser_outf>

        // Set the delay if it is set
        if(offTime > 0)
     104:	8820      	ldrh	r0, [r4, #0]
     106:	2800      	cmp	r0, #0
     108:	d05f      	beq.n	1ca <_Min_Stack_Size+0xca>
            delay(offTime, Check_PERIOD);
     10a:	2100      	movs	r1, #0
     10c:	e034      	b.n	178 <_Min_Stack_Size+0x78>
        if(ledFlag == 0) {
     10e:	4a38      	ldr	r2, [pc, #224]	; (1f0 <_Min_Stack_Size+0xf0>)
     110:	4b31      	ldr	r3, [pc, #196]	; (1d8 <_Min_Stack_Size+0xd8>)
     112:	6816      	ldr	r6, [r2, #0]
     114:	4937      	ldr	r1, [pc, #220]	; (1f4 <_Min_Stack_Size+0xf4>)
     116:	4c38      	ldr	r4, [pc, #224]	; (1f8 <_Min_Stack_Size+0xf8>)
     118:	4d33      	ldr	r5, [pc, #204]	; (1e8 <_Min_Stack_Size+0xe8>)
     11a:	2e00      	cmp	r6, #0
     11c:	d134      	bne.n	188 <_Min_Stack_Size+0x88>
            led = redLed;
     11e:	4837      	ldr	r0, [pc, #220]	; (1fc <_Min_Stack_Size+0xfc>)
     120:	6800      	ldr	r0, [r0, #0]
     122:	6018      	str	r0, [r3, #0]
            ch = redCharacter;
     124:	4836      	ldr	r0, [pc, #216]	; (200 <_Min_Stack_Size+0x100>)
     126:	7800      	ldrb	r0, [r0, #0]
     128:	7008      	strb	r0, [r1, #0]
            onTime = redOn;
     12a:	4836      	ldr	r0, [pc, #216]	; (204 <_Min_Stack_Size+0x104>)
     12c:	8800      	ldrh	r0, [r0, #0]
     12e:	8020      	strh	r0, [r4, #0]
            offTime = redOff;
     130:	4835      	ldr	r0, [pc, #212]	; (208 <_Min_Stack_Size+0x108>)
     132:	8800      	ldrh	r0, [r0, #0]
     134:	8028      	strh	r0, [r5, #0]
            ledFlag = 1;
     136:	2001      	movs	r0, #1
            ledFlag = 0;
     138:	6010      	str	r0, [r2, #0]
        if(On)
     13a:	681a      	ldr	r2, [r3, #0]
     13c:	4b33      	ldr	r3, [pc, #204]	; (20c <_Min_Stack_Size+0x10c>)
     13e:	2540      	movs	r5, #64	; 0x40
     140:	7818      	ldrb	r0, [r3, #0]
     142:	4b27      	ldr	r3, [pc, #156]	; (1e0 <_Min_Stack_Size+0xe0>)
     144:	2800      	cmp	r0, #0
     146:	d02c      	beq.n	1a2 <_Min_Stack_Size+0xa2>
            leds(led,1);
     148:	4831      	ldr	r0, [pc, #196]	; (210 <_Min_Stack_Size+0x110>)
            leds(led,0);
     14a:	2a00      	cmp	r2, #0
     14c:	d12b      	bne.n	1a6 <_Min_Stack_Size+0xa6>
     14e:	6005      	str	r5, [r0, #0]
     150:	781a      	ldrb	r2, [r3, #0]
     152:	0912      	lsrs	r2, r2, #4
     154:	f002 020e 	and.w	r2, r2, #14
     158:	7818      	ldrb	r0, [r3, #0]
     15a:	f362 1007 	bfi	r0, r2, #4, #4
     15e:	7018      	strb	r0, [r3, #0]
        if (displayCycle)
     160:	4b20      	ldr	r3, [pc, #128]	; (1e4 <_Min_Stack_Size+0xe4>)
     162:	781b      	ldrb	r3, [r3, #0]
     164:	b12b      	cbz	r3, 172 <_Min_Stack_Size+0x72>
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     166:	780a      	ldrb	r2, [r1, #0]
     168:	2000      	movs	r0, #0
     16a:	8823      	ldrh	r3, [r4, #0]
     16c:	491f      	ldr	r1, [pc, #124]	; (1ec <_Min_Stack_Size+0xec>)
     16e:	f001 fb0d 	bl	178c <ser_outf>
        if(onTime > 0)
     172:	8820      	ldrh	r0, [r4, #0]
     174:	b110      	cbz	r0, 17c <_Min_Stack_Size+0x7c>
            delay(onTime, OFF_PERIOD);
     176:	2101      	movs	r1, #1
     178:	f000 ffc8 	bl	110c <delay>
        when(&On, Check_PERIOD);
     17c:	2100      	movs	r1, #0
     17e:	4823      	ldr	r0, [pc, #140]	; (20c <_Min_Stack_Size+0x10c>)
     180:	f000 ff7e 	bl	1080 <__pi_wait>
        release;
     184:	f000 fd3e 	bl	c04 <__pi_release>
            led = greenLed;
     188:	4e22      	ldr	r6, [pc, #136]	; (214 <_Min_Stack_Size+0x114>)
     18a:	6836      	ldr	r6, [r6, #0]
     18c:	601e      	str	r6, [r3, #0]
            ch = greenCharacter;
     18e:	4e22      	ldr	r6, [pc, #136]	; (218 <_Min_Stack_Size+0x118>)
     190:	7836      	ldrb	r6, [r6, #0]
     192:	700e      	strb	r6, [r1, #0]
            onTime = greenOn;
     194:	4e21      	ldr	r6, [pc, #132]	; (21c <_Min_Stack_Size+0x11c>)
     196:	8836      	ldrh	r6, [r6, #0]
     198:	8026      	strh	r6, [r4, #0]
            offTime = greenOff;
     19a:	4e21      	ldr	r6, [pc, #132]	; (220 <_Min_Stack_Size+0x120>)
     19c:	8836      	ldrh	r6, [r6, #0]
     19e:	802e      	strh	r6, [r5, #0]
     1a0:	e7ca      	b.n	138 <_Min_Stack_Size+0x38>
            leds(led,0);
     1a2:	480e      	ldr	r0, [pc, #56]	; (1dc <_Min_Stack_Size+0xdc>)
     1a4:	e7d1      	b.n	14a <_Min_Stack_Size+0x4a>
     1a6:	2a01      	cmp	r2, #1
     1a8:	d1da      	bne.n	160 <_Min_Stack_Size+0x60>
     1aa:	2280      	movs	r2, #128	; 0x80
     1ac:	6002      	str	r2, [r0, #0]
     1ae:	781a      	ldrb	r2, [r3, #0]
     1b0:	0912      	lsrs	r2, r2, #4
     1b2:	f002 020d 	and.w	r2, r2, #13
     1b6:	e7cf      	b.n	158 <_Min_Stack_Size+0x58>
        leds(led,0);
     1b8:	2901      	cmp	r1, #1
     1ba:	d199      	bne.n	f0 <blinker+0x28>
     1bc:	2180      	movs	r1, #128	; 0x80
     1be:	6011      	str	r1, [r2, #0]
     1c0:	781a      	ldrb	r2, [r3, #0]
     1c2:	0912      	lsrs	r2, r2, #4
     1c4:	f002 020d 	and.w	r2, r2, #13
     1c8:	e78e      	b.n	e8 <blinker+0x20>
        else
            proceed Check_PERIOD;
     1ca:	f000 ff4f 	bl	106c <proceed>
     1ce:	e7d5      	b.n	17c <_Min_Stack_Size+0x7c>

        when(&On, Check_PERIOD);
        release;
}
     1d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     1d4:	f000 bedc 	b.w	f90 <__pi_badstate>
     1d8:	20000014 	andcs	r0, r0, r4, lsl r0
     1dc:	400220a0 	andmi	r2, r2, r0, lsr #1
     1e0:	2000008c 	andcs	r0, r0, ip, lsl #1
     1e4:	2000000e 	andcs	r0, r0, lr
     1e8:	2000001c 	andcs	r0, r0, ip, lsl r0
     1ec:	00002bc4 	andeq	r2, r0, r4, asr #23
     1f0:	20000018 	andcs	r0, r0, r8, lsl r0
     1f4:	2000000d 	andcs	r0, r0, sp
     1f8:	2000001e 	andcs	r0, r0, lr, lsl r0
     1fc:	20000020 	andcs	r0, r0, r0, lsr #32
     200:	20000008 	andcs	r0, r0, r8
     204:	20000026 	andcs	r0, r0, r6, lsr #32
     208:	20000024 	andcs	r0, r0, r4, lsr #32
     20c:	2000000c 	andcs	r0, r0, ip
     210:	40022090 	mulmi	r2, r0, r0
     214:	20000004 	andcs	r0, r0, r4
     218:	20000000 	andcs	r0, r0, r0
     21c:	20000012 	andcs	r0, r0, r2, lsl r0
     220:	20000010 	andcs	r0, r0, r0, lsl r0

00000224 <processSettingsInput>:

void processSettingsInput(char * settingsInput){
    word numbers[4];
    int numbersIndex = 0;

    word number = 0;
     224:	2300      	movs	r3, #0
void processSettingsInput(char * settingsInput){
     226:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int numbersIndex = 0;
     228:	461c      	mov	r4, r3
     22a:	1e41      	subs	r1, r0, #1
     22c:	3031      	adds	r0, #49	; 0x31

    for (int i = 0; i < SETTINGS_LENGTH; i++) {
        if(settingsInput[i] == ' ') {
     22e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     232:	2a20      	cmp	r2, #32
     234:	d11a      	bne.n	26c <processSettingsInput+0x48>
            numbers[numbersIndex] = number;
     236:	aa02      	add	r2, sp, #8
     238:	eb02 0244 	add.w	r2, r2, r4, lsl #1
     23c:	f822 3c08 	strh.w	r3, [r2, #-8]
            number = 0;
     240:	2300      	movs	r3, #0
            numbersIndex++;
     242:	3401      	adds	r4, #1
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	4281      	cmp	r1, r0
     246:	d1f2      	bne.n	22e <processSettingsInput+0xa>
            number = number * 10;
            number += settingsInput[i] - 48;
        }
    }

    redOn = numbers[0];
     248:	f8bd 2000 	ldrh.w	r2, [sp]
     24c:	4b0c      	ldr	r3, [pc, #48]	; (280 <processSettingsInput+0x5c>)
     24e:	801a      	strh	r2, [r3, #0]
    redOff = numbers[1];
     250:	f8bd 2002 	ldrh.w	r2, [sp, #2]
     254:	4b0b      	ldr	r3, [pc, #44]	; (284 <processSettingsInput+0x60>)
     256:	801a      	strh	r2, [r3, #0]

    greenOn = numbers[2];
     258:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     25c:	4b0a      	ldr	r3, [pc, #40]	; (288 <processSettingsInput+0x64>)
     25e:	801a      	strh	r2, [r3, #0]
    greenOff = numbers[3];
     260:	4b0a      	ldr	r3, [pc, #40]	; (28c <processSettingsInput+0x68>)
     262:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     266:	801a      	strh	r2, [r3, #0]
}
     268:	b003      	add	sp, #12
     26a:	bd30      	pop	{r4, r5, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	3a30      	subs	r2, #48	; 0x30
     26e:	b2d5      	uxtb	r5, r2
     270:	2d09      	cmp	r5, #9
            number = number * 10;
     272:	bf9e      	ittt	ls
     274:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
            number += settingsInput[i] - 48;
     278:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
     27c:	b29b      	uxthls	r3, r3
     27e:	e7e1      	b.n	244 <processSettingsInput+0x20>
     280:	20000026 	andcs	r0, r0, r6, lsr #32
     284:	20000024 	andcs	r0, r0, r4, lsr #32
     288:	20000012 	andcs	r0, r0, r2, lsl r0
     28c:	20000010 	andcs	r0, r0, r0, lsl r0

00000290 <root>:

fsm root {
     290:	b500      	push	{lr}
     292:	b091      	sub	sp, #68	; 0x44
     294:	280a      	cmp	r0, #10
     296:	f200 8096 	bhi.w	3c6 <root+0x136>
     29a:	e8df f000 	tbb	[pc, r0]
     29e:	130f0a06 	movwne	r0, #64006	; 0xfa06
     2a2:	3d2d2918 			; <UNDEFINED> instruction: 0x3d2d2918
     2a6:	0069554e 	rsbeq	r5, r9, lr, asr #10

    char username[NAME_LENGTH];
        
    state Initial:
        ser_outf(Initial, "Enter your name: ");
     2aa:	2000      	movs	r0, #0
     2ac:	4947      	ldr	r1, [pc, #284]	; (3cc <root+0x13c>)
     2ae:	f001 fa6d 	bl	178c <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     2b2:	2214      	movs	r2, #20
     2b4:	2001      	movs	r0, #1
     2b6:	4946      	ldr	r1, [pc, #280]	; (3d0 <root+0x140>)
     2b8:	f001 fa2c 	bl	1714 <ser_in>
    
    state Run_Blinker:
        runfsm blinker;
     2bc:	2100      	movs	r1, #0
     2be:	4845      	ldr	r0, [pc, #276]	; (3d4 <root+0x144>)
     2c0:	f001 f88c 	bl	13dc <__pi_fork>

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	2003      	movs	r0, #3
     2c6:	4a42      	ldr	r2, [pc, #264]	; (3d0 <root+0x140>)
     2c8:	4943      	ldr	r1, [pc, #268]	; (3d8 <root+0x148>)
     2ca:	f001 fa5f 	bl	178c <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     2ce:	2004      	movs	r0, #4
     2d0:	4942      	ldr	r1, [pc, #264]	; (3dc <root+0x14c>)
     2d2:	aa03      	add	r2, sp, #12
     2d4:	f001 fa84 	bl	17e0 <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     2d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
     2dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     2e0:	2b41      	cmp	r3, #65	; 0x41
     2e2:	d164      	bne.n	3ae <root+0x11e>
            proceed Adjust_Intervals;
     2e4:	2005      	movs	r0, #5
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     2e6:	f000 fec1 	bl	106c <proceed>
        }

        proceed Show_Menu;
     2ea:	2003      	movs	r0, #3
     2ec:	f000 febe 	bl	106c <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	2000      	movs	r0, #0
     2f2:	493b      	ldr	r1, [pc, #236]	; (3e0 <root+0x150>)
     2f4:	f001 fa4a 	bl	178c <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	2232      	movs	r2, #50	; 0x32
     2fa:	a903      	add	r1, sp, #12
     2fc:	2006      	movs	r0, #6
     2fe:	f001 fa09 	bl	1714 <ser_in>

        processSettingsInput(settings);
     302:	a803      	add	r0, sp, #12
     304:	f7ff ff8e 	bl	224 <processSettingsInput>

        On = YES;
     308:	2301      	movs	r3, #1
     30a:	4836      	ldr	r0, [pc, #216]	; (3e4 <root+0x154>)
     30c:	7003      	strb	r3, [r0, #0]

        trigger(&On);
     30e:	f000 fed1 	bl	10b4 <__pi_trigger>

        proceed Show_Menu;
     312:	2003      	movs	r0, #3
     314:	f000 feaa 	bl	106c <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	4b33      	ldr	r3, [pc, #204]	; (3e8 <root+0x158>)
     31a:	4a34      	ldr	r2, [pc, #208]	; (3ec <root+0x15c>)
     31c:	881b      	ldrh	r3, [r3, #0]
     31e:	2007      	movs	r0, #7
     320:	9301      	str	r3, [sp, #4]
     322:	4b33      	ldr	r3, [pc, #204]	; (3f0 <root+0x160>)
     324:	4933      	ldr	r1, [pc, #204]	; (3f4 <root+0x164>)
     326:	881b      	ldrh	r3, [r3, #0]
     328:	9300      	str	r3, [sp, #0]
     32a:	4b33      	ldr	r3, [pc, #204]	; (3f8 <root+0x168>)
     32c:	8812      	ldrh	r2, [r2, #0]
     32e:	881b      	ldrh	r3, [r3, #0]
     330:	f001 fa2c 	bl	178c <ser_outf>
            redOff,
            greenOn,
            greenOff
        );

        proceed Show_Menu;
     334:	2003      	movs	r0, #3
     336:	f000 fe99 	bl	106c <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33a:	2008      	movs	r0, #8
     33c:	492f      	ldr	r1, [pc, #188]	; (3fc <root+0x16c>)
     33e:	f001 fa25 	bl	178c <ser_outf>
        displayCycle = YES;
     342:	2201      	movs	r2, #1
     344:	4b2e      	ldr	r3, [pc, #184]	; (400 <root+0x170>)
     346:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", &ch);
     348:	2009      	movs	r0, #9
     34a:	4924      	ldr	r1, [pc, #144]	; (3dc <root+0x14c>)
     34c:	aa03      	add	r2, sp, #12
     34e:	f001 fa47 	bl	17e0 <ser_inf>
        
        if(ch == 'S' || ch == 's'){
     352:	f89d 300c 	ldrb.w	r3, [sp, #12]
     356:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     35a:	2b53      	cmp	r3, #83	; 0x53
     35c:	d105      	bne.n	36a <root+0xda>
            displayCycle = NO;
     35e:	2200      	movs	r2, #0
     360:	4b27      	ldr	r3, [pc, #156]	; (400 <root+0x170>)
            proceed Show_Menu;
     362:	2003      	movs	r0, #3
            displayCycle = NO;
     364:	701a      	strb	r2, [r3, #0]
            proceed Show_Menu;
     366:	f000 fe81 	bl	106c <proceed>
        }
        
        proceed Monitor;
     36a:	2008      	movs	r0, #8
     36c:	f000 fe7e 	bl	106c <proceed>

    state Stop:
        On = NO;
     370:	2200      	movs	r2, #0
     372:	4b1c      	ldr	r3, [pc, #112]	; (3e4 <root+0x154>)
     374:	4823      	ldr	r0, [pc, #140]	; (404 <root+0x174>)
     376:	701a      	strb	r2, [r3, #0]
     378:	2380      	movs	r3, #128	; 0x80
     37a:	6003      	str	r3, [r0, #0]

        leds(1, 0);
     37c:	4b22      	ldr	r3, [pc, #136]	; (408 <root+0x178>)
     37e:	781a      	ldrb	r2, [r3, #0]
     380:	7819      	ldrb	r1, [r3, #0]
     382:	0912      	lsrs	r2, r2, #4
     384:	f002 020d 	and.w	r2, r2, #13
     388:	f362 1107 	bfi	r1, r2, #4, #4
     38c:	2240      	movs	r2, #64	; 0x40
     38e:	7019      	strb	r1, [r3, #0]
     390:	6002      	str	r2, [r0, #0]
        leds(0, 0);
     392:	781a      	ldrb	r2, [r3, #0]
     394:	7819      	ldrb	r1, [r3, #0]
     396:	0912      	lsrs	r2, r2, #4
     398:	f002 020e 	and.w	r2, r2, #14
     39c:	f362 1107 	bfi	r1, r2, #4, #4

        proceed Show_Menu;
     3a0:	2003      	movs	r0, #3
        leds(0, 0);
     3a2:	7019      	strb	r1, [r3, #0]
        proceed Show_Menu;
     3a4:	f000 fe62 	bl	106c <proceed>
     3a8:	b011      	add	sp, #68	; 0x44
     3aa:	f85d fb04 	ldr.w	pc, [sp], #4
        } else if (choice == 'S' || choice == 's') {
     3ae:	2b53      	cmp	r3, #83	; 0x53
     3b0:	d101      	bne.n	3b6 <root+0x126>
            proceed Stop;
     3b2:	200a      	movs	r0, #10
     3b4:	e797      	b.n	2e6 <root+0x56>
        } else if (choice == 'V' || choice == 'v') {
     3b6:	2b56      	cmp	r3, #86	; 0x56
     3b8:	d101      	bne.n	3be <root+0x12e>
            proceed View_Settings;
     3ba:	2007      	movs	r0, #7
     3bc:	e793      	b.n	2e6 <root+0x56>
        } else if (choice == 'M' || choice == 'm') {
     3be:	2b4d      	cmp	r3, #77	; 0x4d
     3c0:	d193      	bne.n	2ea <root+0x5a>
            proceed Monitor;
     3c2:	2008      	movs	r0, #8
     3c4:	e78f      	b.n	2e6 <root+0x56>
     3c6:	f000 fde3 	bl	f90 <__pi_badstate>
     3ca:	e7ed      	b.n	3a8 <root+0x118>
     3cc:	00002bcb 	andeq	r2, r0, fp, asr #23
     3d0:	20000028 	andcs	r0, r0, r8, lsr #32
     3d4:	000000c9 	andeq	r0, r0, r9, asr #1
     3d8:	00002bdd 	ldrdeq	r2, [r0], -sp
     3dc:	00002c6e 	andeq	r2, r0, lr, ror #24
     3e0:	00002c71 	andeq	r2, r0, r1, ror ip
     3e4:	2000000c 	andcs	r0, r0, ip
     3e8:	20000010 	andcs	r0, r0, r0, lsl r0
     3ec:	20000026 	andcs	r0, r0, r6, lsr #32
     3f0:	20000012 	andcs	r0, r0, r2, lsl r0
     3f4:	00002ca4 	andeq	r2, r0, r4, lsr #25
     3f8:	20000024 	andcs	r0, r0, r4, lsr #32
     3fc:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
     400:	2000000e 	andcs	r0, r0, lr
     404:	400220a0 	andmi	r2, r2, r0, lsr #1
     408:	2000008c 	andcs	r0, r0, ip, lsl #1

0000040c <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     40c:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     40e:	4801      	ldr	r0, [pc, #4]	; (414 <devinit_uart+0x8>)
     410:	f000 bebc 	b.w	118c <adddevfunc>
     414:	00000759 	andeq	r0, r0, r9, asr r7

00000418 <udelay>:
void udelay (volatile word n) {
     418:	b082      	sub	sp, #8
     41a:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     41e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     422:	b29b      	uxth	r3, r3
     424:	b90b      	cbnz	r3, 42a <udelay+0x12>
}
     426:	b002      	add	sp, #8
     428:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     42a:	2304      	movs	r3, #4
	while (n--);
     42c:	461a      	mov	r2, r3
     42e:	3b01      	subs	r3, #1
     430:	b29b      	uxth	r3, r3
     432:	2a00      	cmp	r2, #0
     434:	d1fa      	bne.n	42c <udelay+0x14>
		n--;
     436:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     43a:	3b01      	subs	r3, #1
     43c:	b29b      	uxth	r3, r3
     43e:	f8ad 3006 	strh.w	r3, [sp, #6]
     442:	e7ec      	b.n	41e <udelay+0x6>

00000444 <mdelay>:
void mdelay (volatile word n) {
     444:	b507      	push	{r0, r1, r2, lr}
     446:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     44a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     44e:	b29b      	uxth	r3, r3
     450:	b913      	cbnz	r3, 458 <mdelay+0x14>
}
     452:	b003      	add	sp, #12
     454:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     458:	f240 30e7 	movw	r0, #999	; 0x3e7
     45c:	f7ff ffdc 	bl	418 <udelay>
		n--;
     460:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     464:	3b01      	subs	r3, #1
     466:	b29b      	uxth	r3, r3
     468:	f8ad 3006 	strh.w	r3, [sp, #6]
     46c:	e7ed      	b.n	44a <mdelay+0x6>
	...

00000470 <__pi_ondomain>:
void __pi_ondomain (lword d) {
     470:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     472:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     474:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     476:	d505      	bpl.n	484 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     478:	4b0a      	ldr	r3, [pc, #40]	; (4a4 <__pi_ondomain+0x34>)
     47a:	78da      	ldrb	r2, [r3, #3]
     47c:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     47e:	bf84      	itt	hi
     480:	2201      	movhi	r2, #1
     482:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     484:	4d08      	ldr	r5, [pc, #32]	; (4a8 <__pi_ondomain+0x38>)
     486:	4620      	mov	r0, r4
     488:	682b      	ldr	r3, [r5, #0]
     48a:	695b      	ldr	r3, [r3, #20]
     48c:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     48e:	682b      	ldr	r3, [r5, #0]
     490:	4620      	mov	r0, r4
     492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     494:	4798      	blx	r3
     496:	2801      	cmp	r0, #1
     498:	d1f9      	bne.n	48e <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     49a:	4b02      	ldr	r3, [pc, #8]	; (4a4 <__pi_ondomain+0x34>)
     49c:	6858      	ldr	r0, [r3, #4]
     49e:	4304      	orrs	r4, r0
     4a0:	605c      	str	r4, [r3, #4]
}
     4a2:	bd38      	pop	{r3, r4, r5, pc}
     4a4:	2000008c 	andcs	r0, r0, ip, lsl #1
     4a8:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

000004ac <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     4ac:	460a      	mov	r2, r1
     4ae:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	4601      	mov	r1, r0
     4b2:	480f      	ldr	r0, [pc, #60]	; (4f0 <__pi_syserror+0x44>)
     4b4:	f000 ffb8 	bl	1428 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4ba:	2540      	movs	r5, #64	; 0x40
     4bc:	462f      	mov	r7, r5
     4be:	4e0d      	ldr	r6, [pc, #52]	; (4f4 <__pi_syserror+0x48>)
     4c0:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     4c2:	490d      	ldr	r1, [pc, #52]	; (4f8 <__pi_syserror+0x4c>)
     4c4:	6037      	str	r7, [r6, #0]
     4c6:	6034      	str	r4, [r6, #0]
     4c8:	780b      	ldrb	r3, [r1, #0]
     4ca:	780b      	ldrb	r3, [r1, #0]
     4cc:	20c8      	movs	r0, #200	; 0xc8
     4ce:	f36f 1307 	bfc	r3, #4, #4
     4d2:	700b      	strb	r3, [r1, #0]
     4d4:	f7ff ffb6 	bl	444 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <__pi_syserror+0x50>)
     4da:	20c8      	movs	r0, #200	; 0xc8
     4dc:	601d      	str	r5, [r3, #0]
     4de:	601c      	str	r4, [r3, #0]
     4e0:	780b      	ldrb	r3, [r1, #0]
     4e2:	780b      	ldrb	r3, [r1, #0]
     4e4:	f36f 1307 	bfc	r3, #4, #4
     4e8:	700b      	strb	r3, [r1, #0]
     4ea:	f7ff ffab 	bl	444 <mdelay>
	while (1) {
     4ee:	e7e7      	b.n	4c0 <__pi_syserror+0x14>
     4f0:	00002cfb 	strdeq	r2, [r0], -fp
     4f4:	40022090 	mulmi	r2, r0, r0
     4f8:	2000008c 	andcs	r0, r0, ip, lsl #1
     4fc:	400220a0 	andmi	r2, r2, r0, lsr #1

00000500 <tci_run_delay_timer>:
void tci_run_delay_timer () {
     500:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     502:	4b0a      	ldr	r3, [pc, #40]	; (52c <tci_run_delay_timer+0x2c>)
     504:	881c      	ldrh	r4, [r3, #0]
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <tci_run_delay_timer+0x30>)
     508:	8818      	ldrh	r0, [r3, #0]
     50a:	4b0a      	ldr	r3, [pc, #40]	; (534 <tci_run_delay_timer+0x34>)
     50c:	1b00      	subs	r0, r0, r4
     50e:	b284      	uxth	r4, r0
     510:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     512:	f001 fd8b 	bl	202c <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     516:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     518:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     51a:	4b07      	ldr	r3, [pc, #28]	; (538 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     51c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     520:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	6018      	str	r0, [r3, #0]
	sti_tim;
     526:	4b05      	ldr	r3, [pc, #20]	; (53c <tci_run_delay_timer+0x3c>)
     528:	601a      	str	r2, [r3, #0]
}
     52a:	bd10      	pop	{r4, pc}
     52c:	2000008a 	andcs	r0, r0, sl, lsl #1
     530:	20000088 	andcs	r0, r0, r8, lsl #1
     534:	2000003c 	andcs	r0, r0, ip, lsr r0
     538:	40092018 	andmi	r2, r9, r8, lsl r0
     53c:	43240280 			; <UNDEFINED> instruction: 0x43240280

00000540 <tci_run_auxiliary_timer>:
	cli_aux;
     540:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     542:	b510      	push	{r4, lr}
	cli_aux;
     544:	4c06      	ldr	r4, [pc, #24]	; (560 <tci_run_auxiliary_timer+0x20>)
     546:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	f001 fd70 	bl	202c <NOROM_AONRTCCurrent64BitValueGet>
     54c:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     54e:	4b05      	ldr	r3, [pc, #20]	; (564 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     550:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     554:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     556:	6018      	str	r0, [r3, #0]
	sti_aux;
     558:	2301      	movs	r3, #1
     55a:	6023      	str	r3, [r4, #0]
}
     55c:	bd10      	pop	{r4, pc}
     55e:	bf00      	nop
     560:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     564:	40092020 	andmi	r2, r9, r0, lsr #32

00000568 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     568:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56a:	4b3b      	ldr	r3, [pc, #236]	; (658 <AONRTCIntHandler+0xf0>)
     56c:	6818      	ldr	r0, [r3, #0]
     56e:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     572:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     576:	d542      	bpl.n	5fe <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     578:	4b38      	ldr	r3, [pc, #224]	; (65c <AONRTCIntHandler+0xf4>)
     57a:	6819      	ldr	r1, [r3, #0]
     57c:	2900      	cmp	r1, #0
     57e:	d053      	beq.n	628 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     580:	880a      	ldrh	r2, [r1, #0]
     582:	2a00      	cmp	r2, #0
     584:	d04e      	beq.n	624 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     586:	3a01      	subs	r2, #1
     588:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     58a:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     58c:	685c      	ldr	r4, [r3, #4]
     58e:	b194      	cbz	r4, 5b6 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     590:	8821      	ldrh	r1, [r4, #0]
     592:	b111      	cbz	r1, 59a <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     594:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     596:	3901      	subs	r1, #1
     598:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     59a:	689c      	ldr	r4, [r3, #8]
     59c:	b15c      	cbz	r4, 5b6 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     59e:	8821      	ldrh	r1, [r4, #0]
     5a0:	b111      	cbz	r1, 5a8 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     5a2:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     5a4:	3901      	subs	r1, #1
     5a6:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     5a8:	68d9      	ldr	r1, [r3, #12]
     5aa:	b121      	cbz	r1, 5b6 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     5ac:	880b      	ldrh	r3, [r1, #0]
     5ae:	b113      	cbz	r3, 5b6 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     5b0:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     5b2:	3b01      	subs	r3, #1
     5b4:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     5b6:	4b2a      	ldr	r3, [pc, #168]	; (660 <AONRTCIntHandler+0xf8>)
     5b8:	7819      	ldrb	r1, [r3, #0]
     5ba:	0909      	lsrs	r1, r1, #4
     5bc:	d047      	beq.n	64e <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     5be:	7859      	ldrb	r1, [r3, #1]
     5c0:	1c4a      	adds	r2, r1, #1
     5c2:	b2d2      	uxtb	r2, r2
     5c4:	705a      	strb	r2, [r3, #1]
     5c6:	b9d1      	cbnz	r1, 5fe <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     5c8:	781a      	ldrb	r2, [r3, #0]
     5ca:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     5ce:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     5d0:	d02c      	beq.n	62c <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     5d2:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	bf42      	ittt	mi
     5d6:	2140      	movmi	r1, #64	; 0x40
     5d8:	4a22      	ldrmi	r2, [pc, #136]	; (664 <AONRTCIntHandler+0xfc>)
     5da:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     5dc:	781a      	ldrb	r2, [r3, #0]
     5de:	0692      	lsls	r2, r2, #26
     5e0:	bf42      	ittt	mi
     5e2:	2180      	movmi	r1, #128	; 0x80
     5e4:	4a1f      	ldrmi	r2, [pc, #124]	; (664 <AONRTCIntHandler+0xfc>)
     5e6:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     5e8:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     5ea:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     5ec:	781a      	ldrb	r2, [r3, #0]
     5ee:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     5f2:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     5f4:	781a      	ldrb	r2, [r3, #0]
     5f6:	0752      	lsls	r2, r2, #29
     5f8:	d501      	bpl.n	5fe <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     5fa:	22c8      	movs	r2, #200	; 0xc8
     5fc:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     5fe:	07c3      	lsls	r3, r0, #31
     600:	d50f      	bpl.n	622 <AONRTCIntHandler+0xba>
		cli_tim;
     602:	2100      	movs	r1, #0
     604:	4b18      	ldr	r3, [pc, #96]	; (668 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     606:	4a19      	ldr	r2, [pc, #100]	; (66c <AONRTCIntHandler+0x104>)
     608:	4819      	ldr	r0, [pc, #100]	; (670 <AONRTCIntHandler+0x108>)
		cli_tim;
     60a:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     60c:	8803      	ldrh	r3, [r0, #0]
     60e:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     610:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     612:	4423      	add	r3, r4
		RISE_N_SHINE;
     614:	4a12      	ldr	r2, [pc, #72]	; (660 <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     616:	b29b      	uxth	r3, r3
     618:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	f043 0302 	orr.w	r3, r3, #2
     620:	7013      	strb	r3, [r2, #0]
}
     622:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     624:	2201      	movs	r2, #1
     626:	e7b1      	b.n	58c <AONRTCIntHandler+0x24>
     628:	2201      	movs	r2, #1
     62a:	e7c4      	b.n	5b6 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     62c:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     62e:	bf42      	ittt	mi
     630:	2140      	movmi	r1, #64	; 0x40
     632:	4a10      	ldrmi	r2, [pc, #64]	; (674 <AONRTCIntHandler+0x10c>)
     634:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     636:	781a      	ldrb	r2, [r3, #0]
     638:	0691      	lsls	r1, r2, #26
     63a:	bf42      	ittt	mi
     63c:	2180      	movmi	r1, #128	; 0x80
     63e:	4a0d      	ldrmi	r2, [pc, #52]	; (674 <AONRTCIntHandler+0x10c>)
     640:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     642:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     644:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     646:	781a      	ldrb	r2, [r3, #0]
     648:	f042 0208 	orr.w	r2, r2, #8
     64c:	e7d1      	b.n	5f2 <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     64e:	2a00      	cmp	r2, #0
     650:	d0d5      	beq.n	5fe <AONRTCIntHandler+0x96>
			cli_aux;
     652:	4b09      	ldr	r3, [pc, #36]	; (678 <AONRTCIntHandler+0x110>)
     654:	6019      	str	r1, [r3, #0]
     656:	e7d2      	b.n	5fe <AONRTCIntHandler+0x96>
     658:	40092004 	andmi	r2, r9, r4
     65c:	20000098 	mulcs	r0, r8, r0
     660:	2000008c 	andcs	r0, r0, ip, lsl #1
     664:	40022090 	mulmi	r2, r0, r0
     668:	43240280 			; <UNDEFINED> instruction: 0x43240280
     66c:	2000003c 	andcs	r0, r0, ip, lsr r0
     670:	20000094 	mulcs	r0, r4, r0
     674:	400220a0 	andmi	r2, r2, r0, lsr #1
     678:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

0000067c <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     67e:	2600      	movs	r6, #0
     680:	4b0e      	ldr	r3, [pc, #56]	; (6bc <tci_update_delay_ticks+0x40>)
	if (setdel) {
     682:	4f0f      	ldr	r7, [pc, #60]	; (6c0 <tci_update_delay_ticks+0x44>)
	cli_tim;
     684:	601e      	str	r6, [r3, #0]
	if (setdel) {
     686:	883d      	ldrh	r5, [r7, #0]
     688:	b19d      	cbz	r5, 6b2 <tci_update_delay_ticks+0x36>
		if (force) {
     68a:	b1a0      	cbz	r0, 6b6 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	4b0d      	ldr	r3, [pc, #52]	; (6c4 <tci_update_delay_ticks+0x48>)
     68e:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	f001 fccc 	bl	202c <NOROM_AONRTCCurrent64BitValueGet>
     694:	0d80      	lsrs	r0, r0, #22
     696:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69a:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     69e:	b280      	uxth	r0, r0
     6a0:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6a2:	1b2c      	subs	r4, r5, r4
	return NO;
     6a4:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6a6:	4b08      	ldr	r3, [pc, #32]	; (6c8 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     6a8:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6aa:	881a      	ldrh	r2, [r3, #0]
     6ac:	4414      	add	r4, r2
     6ae:	b2a4      	uxth	r4, r4
     6b0:	801c      	strh	r4, [r3, #0]
}
     6b2:	4628      	mov	r0, r5
     6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     6b6:	2501      	movs	r5, #1
     6b8:	601d      	str	r5, [r3, #0]
		return YES;
     6ba:	e7fa      	b.n	6b2 <tci_update_delay_ticks+0x36>
     6bc:	43240280 			; <UNDEFINED> instruction: 0x43240280
     6c0:	2000003c 	andcs	r0, r0, ip, lsr r0
     6c4:	40092018 	andmi	r2, r9, r8, lsl r0
     6c8:	20000094 	mulcs	r0, r4, r0

000006cc <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     6ce:	4e0f      	ldr	r6, [pc, #60]	; (70c <__pi_uart_setrate+0x40>)
     6d0:	4d0f      	ldr	r5, [pc, #60]	; (710 <__pi_uart_setrate+0x44>)
     6d2:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     6d6:	68db      	ldr	r3, [r3, #12]
     6d8:	4628      	mov	r0, r5
     6da:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	2264      	movs	r2, #100	; 0x64
     6de:	6833      	ldr	r3, [r6, #0]
     6e0:	4628      	mov	r0, r5
     6e2:	4362      	muls	r2, r4
     6e4:	685e      	ldr	r6, [r3, #4]
     6e6:	490b      	ldr	r1, [pc, #44]	; (714 <__pi_uart_setrate+0x48>)
     6e8:	2360      	movs	r3, #96	; 0x60
     6ea:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	4a0a      	ldr	r2, [pc, #40]	; (718 <__pi_uart_setrate+0x4c>)
}
     6ee:	2001      	movs	r0, #1
     6f0:	6813      	ldr	r3, [r2, #0]
     6f2:	f043 0310 	orr.w	r3, r3, #16
     6f6:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	6853      	ldr	r3, [r2, #4]
     6fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     6fe:	f043 0301 	orr.w	r3, r3, #1
     702:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     704:	4b05      	ldr	r3, [pc, #20]	; (71c <__pi_uart_setrate+0x50>)
     706:	801c      	strh	r4, [r3, #0]
}
     708:	bd70      	pop	{r4, r5, r6, pc}
     70a:	bf00      	nop
     70c:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     710:	40001000 	andmi	r1, r0, r0
     714:	02dc6c00 	sbcseq	r6, ip, #0, 24
     718:	4000102c 	andmi	r1, r0, ip, lsr #32
     71c:	2000003e 	andcs	r0, r0, lr, lsr r0

00000720 <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	4a08      	ldr	r2, [pc, #32]	; (744 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     722:	4909      	ldr	r1, [pc, #36]	; (748 <reinit_uart+0x28>)
     724:	6813      	ldr	r3, [r2, #0]
     726:	f043 0310 	orr.w	r3, r3, #16
     72a:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	2212      	movs	r2, #18
     72e:	4b07      	ldr	r3, [pc, #28]	; (74c <reinit_uart+0x2c>)
     730:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     732:	4a07      	ldr	r2, [pc, #28]	; (750 <reinit_uart+0x30>)
     734:	6813      	ldr	r3, [r2, #0]
     736:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     73a:	6013      	str	r3, [r2, #0]
     73c:	4b05      	ldr	r3, [pc, #20]	; (754 <reinit_uart+0x34>)
     73e:	8818      	ldrh	r0, [r3, #0]
     740:	f7ff bfc4 	b.w	6cc <__pi_uart_setrate>
     744:	4000102c 	andmi	r1, r0, ip, lsr #32
     748:	20000078 	andcs	r0, r0, r8, ror r0
     74c:	40001034 	andmi	r1, r0, r4, lsr r0
     750:	40001030 	andmi	r1, r0, r0, lsr r0
     754:	2000003e 	andcs	r0, r0, lr, lsr r0

00000758 <ioreq_uart_a>:
	switch (operation) {
     758:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     75a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     75e:	460d      	mov	r5, r1
     760:	4614      	mov	r4, r2
     762:	2803      	cmp	r0, #3
     764:	d86e      	bhi.n	844 <ioreq_uart_a+0xec>
     766:	e8df f000 	tbb	[pc, r0]
     76a:	5a471253 	bpl	11c50be <__ccfg+0x11a5116>
				*buf++ = uart_a_read;
     76e:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     772:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     774:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     778:	b11e      	cbz	r6, 782 <ioreq_uart_a+0x2a>
     77a:	f8d8 3000 	ldr.w	r3, [r8]
     77e:	06d8      	lsls	r0, r3, #27
     780:	d5f5      	bpl.n	76e <ioreq_uart_a+0x16>
			if (len != operation) {
     782:	42a6      	cmp	r6, r4
     784:	d00a      	beq.n	79c <ioreq_uart_a+0x44>
				return operation - len;
     786:	1ba4      	subs	r4, r4, r6
}
     788:	4620      	mov	r0, r4
     78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     78e:	4616      	mov	r6, r2
			uart_a_disable_int;
     790:	4f2e      	ldr	r7, [pc, #184]	; (84c <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     792:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 860 <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     796:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 864 <ioreq_uart_a+0x10c>
     79a:	e7ed      	b.n	778 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     79c:	683b      	ldr	r3, [r7, #0]
     79e:	2015      	movs	r0, #21
     7a0:	695b      	ldr	r3, [r3, #20]
     7a2:	4798      	blx	r3
			if (uart_a_char_available) {
     7a4:	f8d8 3000 	ldr.w	r3, [r8]
     7a8:	06d9      	lsls	r1, r3, #27
     7aa:	d404      	bmi.n	7b6 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	2015      	movs	r0, #21
     7b0:	691b      	ldr	r3, [r3, #16]
     7b2:	4798      	blx	r3
				goto Redo_rx;
     7b4:	e7e0      	b.n	778 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b6:	4a26      	ldr	r2, [pc, #152]	; (850 <ioreq_uart_a+0xf8>)
     7b8:	7993      	ldrb	r3, [r2, #6]
     7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     7be:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     7c2:	7193      	strb	r3, [r2, #6]
			return -2;
     7c4:	e7e0      	b.n	788 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     7c6:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     7ca:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     7cc:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     7d0:	b11e      	cbz	r6, 7da <ioreq_uart_a+0x82>
     7d2:	f8d8 3000 	ldr.w	r3, [r8]
     7d6:	069a      	lsls	r2, r3, #26
     7d8:	d5f5      	bpl.n	7c6 <ioreq_uart_a+0x6e>
			if (len != operation) {
     7da:	42a6      	cmp	r6, r4
     7dc:	d1d3      	bne.n	786 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     7de:	683b      	ldr	r3, [r7, #0]
     7e0:	2015      	movs	r0, #21
     7e2:	695b      	ldr	r3, [r3, #20]
     7e4:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     7e6:	f8d8 3000 	ldr.w	r3, [r8]
     7ea:	069b      	lsls	r3, r3, #26
     7ec:	d40b      	bmi.n	806 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     7ee:	683b      	ldr	r3, [r7, #0]
     7f0:	2015      	movs	r0, #21
     7f2:	691b      	ldr	r3, [r3, #16]
     7f4:	4798      	blx	r3
				goto Redo_tx;
     7f6:	e7eb      	b.n	7d0 <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     7f8:	4616      	mov	r6, r2
			uart_a_disable_int;
     7fa:	4f14      	ldr	r7, [pc, #80]	; (84c <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     7fc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 860 <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     800:	f8df 9060 	ldr.w	r9, [pc, #96]	; 864 <ioreq_uart_a+0x10c>
     804:	e7e4      	b.n	7d0 <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     806:	4a12      	ldr	r2, [pc, #72]	; (850 <ioreq_uart_a+0xf8>)
     808:	7993      	ldrb	r3, [r2, #6]
     80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     80e:	e7d6      	b.n	7be <ioreq_uart_a+0x66>
			uart_a_enable_int;
     810:	4b0e      	ldr	r3, [pc, #56]	; (84c <ioreq_uart_a+0xf4>)
     812:	2015      	movs	r0, #21
     814:	681b      	ldr	r3, [r3, #0]
			return 0;
     816:	2400      	movs	r4, #0
			uart_a_enable_int;
     818:	691b      	ldr	r3, [r3, #16]
     81a:	4798      	blx	r3
			return 0;
     81c:	e7b4      	b.n	788 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     81e:	2a01      	cmp	r2, #1
     820:	d109      	bne.n	836 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     822:	490b      	ldr	r1, [pc, #44]	; (850 <ioreq_uart_a+0xf8>)
     824:	8828      	ldrh	r0, [r5, #0]
     826:	f7ff ff51 	bl	6cc <__pi_uart_setrate>
     82a:	2800      	cmp	r0, #0
     82c:	d1ac      	bne.n	788 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     82e:	2003      	movs	r0, #3
     830:	4908      	ldr	r1, [pc, #32]	; (854 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     832:	f7ff fe3b 	bl	4ac <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     836:	2a02      	cmp	r2, #2
     838:	d104      	bne.n	844 <ioreq_uart_a+0xec>
	return urates [0];
     83a:	4b07      	ldr	r3, [pc, #28]	; (858 <ioreq_uart_a+0x100>)
				return 1;
     83c:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     83e:	881b      	ldrh	r3, [r3, #0]
     840:	800b      	strh	r3, [r1, #0]
				return 1;
     842:	e7a1      	b.n	788 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     844:	2002      	movs	r0, #2
     846:	4905      	ldr	r1, [pc, #20]	; (85c <ioreq_uart_a+0x104>)
     848:	e7f3      	b.n	832 <ioreq_uart_a+0xda>
     84a:	bf00      	nop
     84c:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     850:	20000078 	andcs	r0, r0, r8, ror r0
     854:	00002d0a 	andeq	r2, r0, sl, lsl #26
     858:	2000003e 	andcs	r0, r0, lr, lsr r0
     85c:	00002d0e 	andeq	r2, r0, lr, lsl #26
     860:	40001018 	andmi	r1, r0, r8, lsl r0
     864:	40001000 	andmi	r1, r0, r0

00000868 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     86c:	b530      	push	{r4, r5, lr}
     86e:	4b29      	ldr	r3, [pc, #164]	; (914 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	4c29      	ldr	r4, [pc, #164]	; (918 <UART0IntHandler+0xb0>)
     872:	601a      	str	r2, [r3, #0]
     874:	6822      	ldr	r2, [r4, #0]
     876:	06d5      	lsls	r5, r2, #27
     878:	d423      	bmi.n	8c2 <UART0IntHandler+0x5a>
     87a:	4b28      	ldr	r3, [pc, #160]	; (91c <UART0IntHandler+0xb4>)
     87c:	799a      	ldrb	r2, [r3, #6]
     87e:	0610      	lsls	r0, r2, #24
     880:	d51f      	bpl.n	8c2 <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     882:	799a      	ldrb	r2, [r3, #6]
     884:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     888:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     88a:	4a25      	ldr	r2, [pc, #148]	; (920 <UART0IntHandler+0xb8>)
     88c:	7813      	ldrb	r3, [r2, #0]
     88e:	f043 0302 	orr.w	r3, r3, #2
     892:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     894:	4b23      	ldr	r3, [pc, #140]	; (924 <UART0IntHandler+0xbc>)
     896:	681a      	ldr	r2, [r3, #0]
     898:	b19a      	cbz	r2, 8c2 <UART0IntHandler+0x5a>
     89a:	4610      	mov	r0, r2
     89c:	2300      	movs	r3, #0
     89e:	f830 1b10 	ldrh.w	r1, [r0], #16
     8a2:	f001 0107 	and.w	r1, r1, #7
     8a6:	4299      	cmp	r1, r3
     8a8:	dd09      	ble.n	8be <UART0IntHandler+0x56>
     8aa:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     8ae:	3301      	adds	r3, #1
     8b0:	f515 7f81 	cmn.w	r5, #258	; 0x102
     8b4:	d1f7      	bne.n	8a6 <UART0IntHandler+0x3e>
     8b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     8ba:	889b      	ldrh	r3, [r3, #4]
     8bc:	8013      	strh	r3, [r2, #0]
     8be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     8c0:	e7ea      	b.n	898 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c2:	6823      	ldr	r3, [r4, #0]
     8c4:	0699      	lsls	r1, r3, #26
     8c6:	d424      	bmi.n	912 <UART0IntHandler+0xaa>
     8c8:	4b14      	ldr	r3, [pc, #80]	; (91c <UART0IntHandler+0xb4>)
     8ca:	799a      	ldrb	r2, [r3, #6]
     8cc:	0652      	lsls	r2, r2, #25
     8ce:	d520      	bpl.n	912 <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     8d0:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	799a      	ldrb	r2, [r3, #6]
     8d6:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     8da:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     8dc:	4a10      	ldr	r2, [pc, #64]	; (920 <UART0IntHandler+0xb8>)
     8de:	7813      	ldrb	r3, [r2, #0]
     8e0:	f043 0302 	orr.w	r3, r3, #2
     8e4:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     8e6:	4b0f      	ldr	r3, [pc, #60]	; (924 <UART0IntHandler+0xbc>)
     8e8:	681a      	ldr	r2, [r3, #0]
     8ea:	b192      	cbz	r2, 912 <UART0IntHandler+0xaa>
     8ec:	4610      	mov	r0, r2
     8ee:	2300      	movs	r3, #0
     8f0:	f830 1b10 	ldrh.w	r1, [r0], #16
     8f4:	f001 0107 	and.w	r1, r1, #7
     8f8:	4299      	cmp	r1, r3
     8fa:	dd08      	ble.n	90e <UART0IntHandler+0xa6>
     8fc:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     900:	3301      	adds	r3, #1
     902:	42a5      	cmp	r5, r4
     904:	d1f8      	bne.n	8f8 <UART0IntHandler+0x90>
     906:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     90a:	889b      	ldrh	r3, [r3, #4]
     90c:	8013      	strh	r3, [r2, #0]
     90e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     910:	e7eb      	b.n	8ea <UART0IntHandler+0x82>
	}

	RTNI;
}
     912:	bd30      	pop	{r4, r5, pc}
     914:	40001044 	andmi	r1, r0, r4, asr #32
     918:	40001018 	andmi	r1, r0, r8, lsl r0
     91c:	20000078 	andcs	r0, r0, r8, ror r0
     920:	2000008c 	andcs	r0, r0, ip, lsl #1
     924:	20000040 	andcs	r0, r0, r0, asr #32

00000928 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     928:	b570      	push	{r4, r5, r6, lr}
     92a:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     92e:	4e0c      	ldr	r6, [pc, #48]	; (960 <__buttons_setirq+0x38>)
     930:	4d0c      	ldr	r5, [pc, #48]	; (964 <__buttons_setirq+0x3c>)
     932:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	4c0c      	ldr	r4, [pc, #48]	; (968 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     936:	0a1b      	lsrs	r3, r3, #8
     938:	fa01 f203 	lsl.w	r2, r1, r3
     93c:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     93e:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     940:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     942:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     946:	0a1b      	lsrs	r3, r3, #8
     948:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     94a:	01db      	lsls	r3, r3, #7
     94c:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     950:	4322      	orrs	r2, r4
     952:	4323      	orrs	r3, r4
     954:	6010      	str	r0, [r2, #0]
     956:	6029      	str	r1, [r5, #0]
     958:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     95a:	b662      	cpsie	i
			val;
	}
	sti;
}
     95c:	bd70      	pop	{r4, r5, r6, pc}
     95e:	bf00      	nop
     960:	00002df4 	strdeq	r2, [r0], -r4
     964:	400220e0 	andmi	r2, r2, r0, ror #1
     968:	42000048 	andmi	r0, r0, #72	; 0x48

0000096c <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     96c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     96e:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     970:	2200      	movs	r2, #0
     972:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	4f09      	ldr	r7, [pc, #36]	; (99c <__pinlist_setirq+0x30>)
     976:	4c0a      	ldr	r4, [pc, #40]	; (9a0 <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	490a      	ldr	r1, [pc, #40]	; (9a4 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     97a:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     97c:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     982:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     986:	01db      	lsls	r3, r3, #7
     988:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     98c:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     98e:	2a04      	cmp	r2, #4
     990:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     992:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     994:	d1f1      	bne.n	97a <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     996:	b662      	cpsie	i
			val;
	}
	sti;
}
     998:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99a:	bf00      	nop
     99c:	00002df0 	strdeq	r2, [r0], -r0
     9a0:	400220e0 	andmi	r2, r2, r0, ror #1
     9a4:	42000048 	andmi	r0, r0, #72	; 0x48

000009a8 <GPIOIntHandler>:
void GPIOIntHandler () {
     9a8:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     9aa:	4c23      	ldr	r4, [pc, #140]	; (a38 <GPIOIntHandler+0x90>)
     9ac:	6822      	ldr	r2, [r4, #0]
     9ae:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     9b2:	d01e      	beq.n	9f2 <GPIOIntHandler+0x4a>
	buttons_disable ();
     9b4:	2000      	movs	r0, #0
     9b6:	f7ff ffb7 	bl	928 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     9ba:	4b20      	ldr	r3, [pc, #128]	; (a3c <GPIOIntHandler+0x94>)
     9bc:	4d20      	ldr	r5, [pc, #128]	; (a40 <GPIOIntHandler+0x98>)
     9be:	681a      	ldr	r2, [r3, #0]
     9c0:	b192      	cbz	r2, 9e8 <GPIOIntHandler+0x40>
     9c2:	4610      	mov	r0, r2
     9c4:	2300      	movs	r3, #0
     9c6:	f830 1b10 	ldrh.w	r1, [r0], #16
     9ca:	f001 0107 	and.w	r1, r1, #7
     9ce:	4299      	cmp	r1, r3
     9d0:	dd08      	ble.n	9e4 <GPIOIntHandler+0x3c>
     9d2:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     9d6:	3301      	adds	r3, #1
     9d8:	42ae      	cmp	r6, r5
     9da:	d1f8      	bne.n	9ce <GPIOIntHandler+0x26>
     9dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     9e0:	889b      	ldrh	r3, [r3, #4]
     9e2:	8013      	strh	r3, [r2, #0]
     9e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     9e6:	e7eb      	b.n	9c0 <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     9e8:	4a16      	ldr	r2, [pc, #88]	; (a44 <GPIOIntHandler+0x9c>)
     9ea:	7813      	ldrb	r3, [r2, #0]
     9ec:	f043 0302 	orr.w	r3, r3, #2
     9f0:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     9f2:	6823      	ldr	r3, [r4, #0]
     9f4:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     9f8:	d01d      	beq.n	a36 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     9fa:	4b10      	ldr	r3, [pc, #64]	; (a3c <GPIOIntHandler+0x94>)
     9fc:	4c12      	ldr	r4, [pc, #72]	; (a48 <GPIOIntHandler+0xa0>)
     9fe:	6818      	ldr	r0, [r3, #0]
     a00:	b190      	cbz	r0, a28 <GPIOIntHandler+0x80>
     a02:	4601      	mov	r1, r0
     a04:	2300      	movs	r3, #0
     a06:	f831 2b10 	ldrh.w	r2, [r1], #16
     a0a:	f002 0207 	and.w	r2, r2, #7
     a0e:	429a      	cmp	r2, r3
     a10:	dd08      	ble.n	a24 <GPIOIntHandler+0x7c>
     a12:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     a16:	3301      	adds	r3, #1
     a18:	42a5      	cmp	r5, r4
     a1a:	d1f8      	bne.n	a0e <GPIOIntHandler+0x66>
     a1c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     a20:	889b      	ldrh	r3, [r3, #4]
     a22:	8003      	strh	r3, [r0, #0]
     a24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     a26:	e7eb      	b.n	a00 <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     a28:	f7ff ffa0 	bl	96c <__pinlist_setirq>
	RISE_N_SHINE;
     a2c:	4a05      	ldr	r2, [pc, #20]	; (a44 <GPIOIntHandler+0x9c>)
     a2e:	7813      	ldrb	r3, [r2, #0]
     a30:	f043 0302 	orr.w	r3, r3, #2
     a34:	7013      	strb	r3, [r2, #0]
}
     a36:	bd70      	pop	{r4, r5, r6, pc}
     a38:	400220e0 	andmi	r2, r2, r0, ror #1
     a3c:	20000040 	andcs	r0, r0, r0, asr #32
     a40:	00002df4 	strdeq	r2, [r0], -r4
     a44:	2000008c 	andcs	r0, r0, ip, lsl #1
     a48:	00002df0 	strdeq	r2, [r0], -r0

00000a4c <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	4c58      	ldr	r4, [pc, #352]	; (bb4 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a52:	2004      	movs	r0, #4
     a54:	f7ff fd0c 	bl	470 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	6823      	ldr	r3, [r4, #0]
     a5a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a5e:	69db      	ldr	r3, [r3, #28]
     a60:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a62:	6823      	ldr	r3, [r4, #0]
     a64:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a6a:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a6c:	6823      	ldr	r3, [r4, #0]
     a6e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     a74:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a76:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	2600      	movs	r6, #0
     a7a:	4c4f      	ldr	r4, [pc, #316]	; (bb8 <system_init+0x16c>)
     a7c:	4f4f      	ldr	r7, [pc, #316]	; (bbc <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a7e:	f8df c17c 	ldr.w	ip, [pc, #380]	; bfc <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a82:	f8df e17c 	ldr.w	lr, [pc, #380]	; c00 <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a86:	f8df 8140 	ldr.w	r8, [pc, #320]	; bc8 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8a:	f8df 9134 	ldr.w	r9, [pc, #308]	; bc0 <system_init+0x174>
     a8e:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     a96:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9a:	0091      	lsls	r1, r2, #2
     a9c:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     aa0:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     aa4:	ea05 0a0c 	and.w	sl, r5, ip
     aa8:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     aac:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     aae:	bf44      	itt	mi
     ab0:	ea41 010e 	orrmi.w	r1, r1, lr
     ab4:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     ab6:	fa03 f202 	lsl.w	r2, r3, r2
     aba:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	bf4c      	ite	mi
     abe:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac2:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac6:	2e11      	cmp	r6, #17
     ac8:	d1e2      	bne.n	a90 <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     aca:	2540      	movs	r5, #64	; 0x40
     acc:	2680      	movs	r6, #128	; 0x80
     ace:	4b3c      	ldr	r3, [pc, #240]	; (bc0 <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     ad0:	493c      	ldr	r1, [pc, #240]	; (bc4 <system_init+0x178>)
     ad2:	601d      	str	r5, [r3, #0]
     ad4:	601e      	str	r6, [r3, #0]
     ad6:	780b      	ldrb	r3, [r1, #0]
     ad8:	780b      	ldrb	r3, [r1, #0]
     ada:	20c8      	movs	r0, #200	; 0xc8
     adc:	f36f 1307 	bfc	r3, #4, #4
     ae0:	700b      	strb	r3, [r1, #0]
     ae2:	f7ff fcaf 	bl	444 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ae6:	4b38      	ldr	r3, [pc, #224]	; (bc8 <system_init+0x17c>)
     ae8:	20c8      	movs	r0, #200	; 0xc8
     aea:	601d      	str	r5, [r3, #0]
     aec:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     aee:	2601      	movs	r6, #1
	all_leds_blink;
     af0:	780b      	ldrb	r3, [r1, #0]
     af2:	780b      	ldrb	r3, [r1, #0]
     af4:	f36f 1307 	bfc	r3, #4, #4
     af8:	700b      	strb	r3, [r1, #0]
     afa:	f7ff fca3 	bl	444 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     afe:	4b33      	ldr	r3, [pc, #204]	; (bcc <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	4a33      	ldr	r2, [pc, #204]	; (bd0 <system_init+0x184>)
     b02:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	4b33      	ldr	r3, [pc, #204]	; (bd4 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     b06:	4d34      	ldr	r5, [pc, #208]	; (bd8 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b08:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b0a:	4b34      	ldr	r3, [pc, #208]	; (bdc <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     b0c:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b0e:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     b10:	682b      	ldr	r3, [r5, #0]
     b12:	691b      	ldr	r3, [r3, #16]
     b14:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     b16:	f000 fb99 	bl	124c <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     b1a:	682b      	ldr	r3, [r5, #0]
     b1c:	2010      	movs	r0, #16
     b1e:	691b      	ldr	r3, [r3, #16]
     b20:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b22:	2002      	movs	r0, #2
     b24:	f7ff fca4 	bl	470 <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b28:	68ab      	ldr	r3, [r5, #8]
     b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
     b2e:	69db      	ldr	r3, [r3, #28]
     b30:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b32:	68ab      	ldr	r3, [r5, #8]
     b34:	f44f 7000 	mov.w	r0, #512	; 0x200
     b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b3a:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	68ab      	ldr	r3, [r5, #8]
     b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
     b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b44:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     b46:	2260      	movs	r2, #96	; 0x60
     b48:	4b25      	ldr	r3, [pc, #148]	; (be0 <system_init+0x194>)
     b4a:	6026      	str	r6, [r4, #0]
     b4c:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     b4e:	f7ff fde7 	bl	720 <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     b52:	f000 fdcb 	bl	16ec <ee_open>
     b56:	f000 fdd3 	bl	1700 <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b5a:	f001 ff63 	bl	2a24 <NOROM_SysCtrlResetSourceGet>
     b5e:	2808      	cmp	r0, #8
     b60:	d11a      	bne.n	b98 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     b62:	4b20      	ldr	r3, [pc, #128]	; (be4 <system_init+0x198>)
     b64:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     b6a:	3b04      	subs	r3, #4
     b6c:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     b72:	3324      	adds	r3, #36	; 0x24
     b74:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     b76:	2000      	movs	r0, #0
     b78:	f7ff fc48 	bl	40c <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	4a1a      	ldr	r2, [pc, #104]	; (be8 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     b7e:	2015      	movs	r0, #21
     b80:	6813      	ldr	r3, [r2, #0]
     b82:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     b86:	6013      	str	r3, [r2, #0]
     b88:	4b13      	ldr	r3, [pc, #76]	; (bd8 <system_init+0x18c>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	691b      	ldr	r3, [r3, #16]
     b8e:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     b90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     b94:	f7ff bcd4 	b.w	540 <tci_run_auxiliary_timer>
		diag ("");
     b98:	4814      	ldr	r0, [pc, #80]	; (bec <system_init+0x1a0>)
     b9a:	f000 fc45 	bl	1428 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     b9e:	4814      	ldr	r0, [pc, #80]	; (bf0 <system_init+0x1a4>)
     ba0:	f000 fc42 	bl	1428 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	4913      	ldr	r1, [pc, #76]	; (bf4 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     ba6:	4814      	ldr	r0, [pc, #80]	; (bf8 <system_init+0x1ac>)
     ba8:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     bac:	b289      	uxth	r1, r1
     bae:	f000 fc3b 	bl	1428 <diag>
     bb2:	e7e0      	b.n	b76 <system_init+0x12a>
     bb4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     bb8:	60082028 	andvs	r2, r8, r8, lsr #32
     bbc:	00002d78 	andeq	r2, r0, r8, ror sp
     bc0:	40022090 	mulmi	r2, r0, r0
     bc4:	2000008c 	andcs	r0, r0, ip, lsl #1
     bc8:	400220a0 	andmi	r2, r2, r0, lsr #1
     bcc:	40092024 	andmi	r2, r9, r4, lsr #32
     bd0:	00050003 	andeq	r0, r5, r3
     bd4:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     bd8:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     bdc:	40092000 	andmi	r2, r9, r0
     be0:	2000003e 	andcs	r0, r0, lr, lsr r0
     be4:	4009400c 	andmi	r4, r9, ip
     be8:	40001038 	andmi	r1, r0, r8, lsr r0
     bec:	00002cde 	ldrdeq	r2, [r0], -lr
     bf0:	00002d12 	andeq	r2, r0, r2, lsl sp
     bf4:	200000ac 	andcs	r0, r0, ip, lsr #1
     bf8:	00002d5e 	andeq	r2, r0, lr, asr sp
     bfc:	7f077f3f 	svcvc	0x00077f3f
     c00:	42441a00 	submi	r1, r4, #0, 20

00000c04 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     c04:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     c08:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c0a:	4b79      	ldr	r3, [pc, #484]	; (df0 <__pi_release+0x1ec>)
     c0c:	af00      	add	r7, sp, #0
     c0e:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     c12:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     c16:	681a      	ldr	r2, [r3, #0]
     c18:	4b76      	ldr	r3, [pc, #472]	; (df4 <__pi_release+0x1f0>)
     c1a:	429a      	cmp	r2, r3
     c1c:	d127      	bne.n	c6e <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     c1e:	4e76      	ldr	r6, [pc, #472]	; (df8 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     c20:	2100      	movs	r1, #0
     c22:	f64f 70ff 	movw	r0, #65535	; 0xffff
     c26:	f000 f9bb 	bl	fa0 <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     c2a:	4a74      	ldr	r2, [pc, #464]	; (dfc <__pi_release+0x1f8>)
     c2c:	4b74      	ldr	r3, [pc, #464]	; (e00 <__pi_release+0x1fc>)
     c2e:	6812      	ldr	r2, [r2, #0]
     c30:	601a      	str	r2, [r3, #0]
     c32:	681a      	ldr	r2, [r3, #0]
     c34:	b9fa      	cbnz	r2, c76 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     c36:	4c73      	ldr	r4, [pc, #460]	; (e04 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     c3a:	4d73      	ldr	r5, [pc, #460]	; (e08 <__pi_release+0x204>)
     c3c:	782b      	ldrb	r3, [r5, #0]
     c3e:	f3c3 0240 	ubfx	r2, r3, #1, #1
     c42:	0798      	lsls	r0, r3, #30
     c44:	607a      	str	r2, [r7, #4]
     c46:	f100 80cd 	bmi.w	de4 <__pi_release+0x1e0>
	system_event_count ++;
     c4a:	4a70      	ldr	r2, [pc, #448]	; (e0c <__pi_release+0x208>)
     c4c:	6813      	ldr	r3, [r2, #0]
     c4e:	3301      	adds	r3, #1
     c50:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     c52:	78ea      	ldrb	r2, [r5, #3]
     c54:	2a01      	cmp	r2, #1
     c56:	b2d3      	uxtb	r3, r2
     c58:	d017      	beq.n	c8a <__pi_release+0x86>
     c5a:	2b02      	cmp	r3, #2
     c5c:	d031      	beq.n	cc2 <__pi_release+0xbe>
     c5e:	2b00      	cmp	r3, #0
     c60:	f040 8095 	bne.w	d8e <__pi_release+0x18a>
			__WFI ();
     c64:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     c66:	b662      	cpsie	i
     c68:	bf00      	nop
     c6a:	bf00      	nop
     c6c:	e7e4      	b.n	c38 <__pi_release+0x34>
	check_stack_overflow;
     c6e:	200b      	movs	r0, #11
     c70:	4967      	ldr	r1, [pc, #412]	; (e10 <__pi_release+0x20c>)
     c72:	f7ff fc1b 	bl	4ac <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c76:	6851      	ldr	r1, [r2, #4]
     c78:	b129      	cbz	r1, c86 <__pi_release+0x82>
     c7a:	8810      	ldrh	r0, [r2, #0]
     c7c:	0704      	lsls	r4, r0, #28
     c7e:	d102      	bne.n	c86 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	0900      	lsrs	r0, r0, #4
     c82:	4788      	blx	r1
			goto Redo;
     c84:	e7cc      	b.n	c20 <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     c86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     c88:	e7d2      	b.n	c30 <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c8a:	4a62      	ldr	r2, [pc, #392]	; (e14 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c8e:	6813      	ldr	r3, [r2, #0]
     c90:	f043 0301 	orr.w	r3, r3, #1
     c94:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c96:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     c9a:	f043 0303 	orr.w	r3, r3, #3
     c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca2:	4b5d      	ldr	r3, [pc, #372]	; (e18 <__pi_release+0x214>)
     ca4:	681b      	ldr	r3, [r3, #0]
     ca6:	699b      	ldr	r3, [r3, #24]
     ca8:	4798      	blx	r3
     caa:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	6823      	ldr	r3, [r4, #0]
     cae:	f043 0304 	orr.w	r3, r3, #4
     cb2:	6023      	str	r3, [r4, #0]
			__WFI ();
     cb4:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb6:	6823      	ldr	r3, [r4, #0]
     cb8:	f023 0304 	bic.w	r3, r3, #4
     cbc:	6023      	str	r3, [r4, #0]
     cbe:	6833      	ldr	r3, [r6, #0]
}
     cc0:	e7d1      	b.n	c66 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cc2:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc6:	687a      	ldr	r2, [r7, #4]
     cc8:	4b54      	ldr	r3, [pc, #336]	; (e1c <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     cca:	f8df b188 	ldr.w	fp, [pc, #392]	; e54 <__pi_release+0x250>
     cce:	601a      	str	r2, [r3, #0]
     cd0:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd2:	f8df a144 	ldr.w	sl, [pc, #324]	; e18 <__pi_release+0x214>
     cd6:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     cda:	6833      	ldr	r3, [r6, #0]
     cdc:	4b50      	ldr	r3, [pc, #320]	; (e20 <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cde:	f8df 9178 	ldr.w	r9, [pc, #376]	; e58 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce2:	f8c3 8000 	str.w	r8, [r3]
     ce6:	6868      	ldr	r0, [r5, #4]
     ce8:	f8da 3000 	ldr.w	r3, [sl]
     cec:	f040 0020 	orr.w	r0, r0, #32
     cf0:	699b      	ldr	r3, [r3, #24]
     cf2:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	4b4b      	ldr	r3, [pc, #300]	; (e24 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     cf6:	2103      	movs	r1, #3
     cf8:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	f8d9 3000 	ldr.w	r3, [r9]
     d00:	4849      	ldr	r0, [pc, #292]	; (e28 <__pi_release+0x224>)
     d02:	f023 0303 	bic.w	r3, r3, #3
     d06:	f8c9 3000 	str.w	r3, [r9]
     d0a:	4b48      	ldr	r3, [pc, #288]	; (e2c <__pi_release+0x228>)
     d0c:	681a      	ldr	r2, [r3, #0]
     d0e:	6852      	ldr	r2, [r2, #4]
     d10:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     d12:	6878      	ldr	r0, [r7, #4]
     d14:	f001 fd46 	bl	27a4 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     d18:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1a:	6822      	ldr	r2, [r4, #0]
     d1c:	f042 0204 	orr.w	r2, r2, #4
     d20:	6022      	str	r2, [r4, #0]
			__WFI ();
     d22:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d26:	4b41      	ldr	r3, [pc, #260]	; (e2c <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d28:	f022 0204 	bic.w	r2, r2, #4
     d2c:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	4641      	mov	r1, r8
     d32:	685b      	ldr	r3, [r3, #4]
     d34:	483c      	ldr	r0, [pc, #240]	; (e28 <__pi_release+0x224>)
     d36:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	4a3c      	ldr	r2, [pc, #240]	; (e30 <__pi_release+0x22c>)
     d3e:	f043 0303 	orr.w	r3, r3, #3
     d42:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d46:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d4a:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     d4c:	0699      	lsls	r1, r3, #26
     d4e:	d5fc      	bpl.n	d4a <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	f8da 3000 	ldr.w	r3, [sl]
     d54:	6868      	ldr	r0, [r5, #4]
     d56:	695b      	ldr	r3, [r3, #20]
     d58:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5a:	4d2f      	ldr	r5, [pc, #188]	; (e18 <__pi_release+0x214>)
     d5c:	4b2a      	ldr	r3, [pc, #168]	; (e08 <__pi_release+0x204>)
     d5e:	6858      	ldr	r0, [r3, #4]
     d60:	682b      	ldr	r3, [r5, #0]
     d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     d64:	4798      	blx	r3
     d66:	2801      	cmp	r0, #1
     d68:	d1f8      	bne.n	d5c <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6a:	4b2d      	ldr	r3, [pc, #180]	; (e20 <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	4a2d      	ldr	r2, [pc, #180]	; (e24 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     d6e:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d70:	2300      	movs	r3, #0
     d72:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	4b29      	ldr	r3, [pc, #164]	; (e1c <__pi_release+0x218>)
     d76:	6018      	str	r0, [r3, #0]
     d78:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     d7a:	f001 fe23 	bl	29c4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     d7e:	f7ff fccf 	bl	720 <reinit_uart>
     d82:	4a2c      	ldr	r2, [pc, #176]	; (e34 <__pi_release+0x230>)
     d84:	6813      	ldr	r3, [r2, #0]
     d86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     d8a:	6013      	str	r3, [r2, #0]
}
     d8c:	e76b      	b.n	c66 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d8e:	4b2a      	ldr	r3, [pc, #168]	; (e38 <__pi_release+0x234>)
     d90:	2001      	movs	r0, #1
     d92:	681b      	ldr	r3, [r3, #0]
     d94:	68db      	ldr	r3, [r3, #12]
     d96:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	4a28      	ldr	r2, [pc, #160]	; (e3c <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     d9a:	4929      	ldr	r1, [pc, #164]	; (e40 <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d9c:	6813      	ldr	r3, [r2, #0]
     d9e:	f023 0301 	bic.w	r3, r3, #1
     da2:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	4b27      	ldr	r3, [pc, #156]	; (e44 <__pi_release+0x240>)
     da6:	681a      	ldr	r2, [r3, #0]
     da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     dac:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     dae:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     db2:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	604a      	str	r2, [r1, #4]
     db6:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	687a      	ldr	r2, [r7, #4]
     dba:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dbc:	687a      	ldr	r2, [r7, #4]
     dbe:	4b22      	ldr	r3, [pc, #136]	; (e48 <__pi_release+0x244>)
     dc0:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc2:	2201      	movs	r2, #1
     dc4:	4b21      	ldr	r3, [pc, #132]	; (e4c <__pi_release+0x248>)
     dc6:	601a      	str	r2, [r3, #0]
     dc8:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dca:	4a19      	ldr	r2, [pc, #100]	; (e30 <__pi_release+0x22c>)
     dcc:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dce:	069b      	lsls	r3, r3, #26
     dd0:	d4fc      	bmi.n	dcc <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd2:	2201      	movs	r2, #1
     dd4:	4b1e      	ldr	r3, [pc, #120]	; (e50 <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     dd6:	2037      	movs	r0, #55	; 0x37
     dd8:	601a      	str	r2, [r3, #0]
     dda:	4b0f      	ldr	r3, [pc, #60]	; (e18 <__pi_release+0x214>)
     ddc:	681b      	ldr	r3, [r3, #0]
     dde:	699b      	ldr	r3, [r3, #24]
     de0:	4798      	blx	r3
			goto DeepSleep;
     de2:	e763      	b.n	cac <__pi_release+0xa8>
	__SLEEP;
     de4:	782b      	ldrb	r3, [r5, #0]
     de6:	f36f 0341 	bfc	r3, #1, #1
     dea:	702b      	strb	r3, [r5, #0]
     dec:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     dee:	e717      	b.n	c20 <__pi_release+0x1c>
     df0:	20005000 	andcs	r5, r0, r0
     df4:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     df8:	4009202c 	andmi	r2, r9, ip, lsr #32
     dfc:	20000040 	andcs	r0, r0, r0, asr #32
     e00:	200000a8 	andcs	r0, r0, r8, lsr #1
     e04:	e000ed10 	and	lr, r0, r0, lsl sp
     e08:	2000008c 	andcs	r0, r0, ip, lsl #1
     e0c:	20000080 	andcs	r0, r0, r0, lsl #1
     e10:	00002d75 	andeq	r2, r0, r5, ror sp
     e14:	4008218c 	andmi	r2, r8, ip, lsl #3
     e18:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     e1c:	4009400c 	andmi	r4, r9, ip
     e20:	60082028 	andvs	r2, r8, r8, lsr #32
     e24:	43040180 	movwmi	r0, #16768	; 0x4180
     e28:	40034000 	andmi	r4, r3, r0
     e2c:	100001d8 	ldrdne	r0, [r0], -r8
     e30:	40091014 	andmi	r1, r9, r4, lsl r0
     e34:	40001038 	andmi	r1, r0, r8, lsr r0
     e38:	100001a0 	andne	r0, r0, r0, lsr #3
     e3c:	40091010 	andmi	r1, r9, r0, lsl r0
     e40:	40093000 	andmi	r3, r9, r0
     e44:	40091040 	andmi	r1, r9, r0, asr #32
     e48:	43220420 			; <UNDEFINED> instruction: 0x43220420
     e4c:	40091018 	andmi	r1, r9, r8, lsl r0
     e50:	43040188 	movwmi	r0, #16776	; 0x4188
     e54:	43220200 			; <UNDEFINED> instruction: 0x43220200
     e58:	40082224 	andmi	r2, r8, r4, lsr #4

00000e5c <main>:

#include "scheduler.h"

}

int main (void) {
     e5c:	b510      	push	{r4, lr}
     e5e:	4b11      	ldr	r3, [pc, #68]	; (ea4 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	4911      	ldr	r1, [pc, #68]	; (ea8 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e62:	4a12      	ldr	r2, [pc, #72]	; (eac <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e64:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	4293      	cmp	r3, r2
     e6a:	d1fb      	bne.n	e64 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	4c10      	ldr	r4, [pc, #64]	; (eb0 <main+0x54>)
	system_init ();
     e6e:	f7ff fded 	bl	a4c <system_init>
	tcv_init ();
     e72:	f000 fb77 	bl	1564 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e76:	6823      	ldr	r3, [r4, #0]
     e78:	2129      	movs	r1, #41	; 0x29
     e7a:	2000      	movs	r0, #0
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	6823      	ldr	r3, [r4, #0]
     e82:	2120      	movs	r1, #32
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	2001      	movs	r0, #1
     e88:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8a:	2100      	movs	r1, #0
     e8c:	4809      	ldr	r0, [pc, #36]	; (eb4 <main+0x58>)
     e8e:	f000 faa5 	bl	13dc <__pi_fork>
     e92:	4b09      	ldr	r3, [pc, #36]	; (eb8 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     e94:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e96:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     e98:	2010      	movs	r0, #16
     e9a:	f000 f937 	bl	110c <delay>
     e9e:	b662      	cpsie	i

	sti;

	__pi_release ();
     ea0:	f7ff feb0 	bl	c04 <__pi_release>
     ea4:	20004bfc 	strdcs	r4, [r0], -ip
     ea8:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     eac:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     eb0:	10000184 	andne	r0, r0, r4, lsl #3
     eb4:	00000291 	muleq	r0, r1, r2
     eb8:	200000a8 	andcs	r0, r0, r8, lsr #1

00000ebc <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     ebc:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     ebe:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <killev+0x38>)
	wfun = (aword)(pid->code);
     ec0:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     ec2:	681a      	ldr	r2, [r3, #0]
     ec4:	b1aa      	cbz	r2, ef2 <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     ec6:	4614      	mov	r4, r2
     ec8:	f834 1b10 	ldrh.w	r1, [r4], #16
     ecc:	2300      	movs	r3, #0
     ece:	f001 0107 	and.w	r1, r1, #7
     ed2:	e001      	b.n	ed8 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     ed4:	42b5      	cmp	r5, r6
     ed6:	d006      	beq.n	ee6 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     ed8:	4299      	cmp	r1, r3
     eda:	dd08      	ble.n	eee <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     edc:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     ee0:	3301      	adds	r3, #1
     ee2:	42a8      	cmp	r0, r5
     ee4:	d1f6      	bne.n	ed4 <killev+0x18>
			    ) {
				wakeupev (i, j);
     ee6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     eea:	889b      	ldrh	r3, [r3, #4]
     eec:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     eee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     ef0:	e7e8      	b.n	ec4 <killev+0x8>
				break;
			}
		}
	}
}
     ef2:	bd70      	pop	{r4, r5, r6, pc}
     ef4:	20000040 	andcs	r0, r0, r0, asr #32

00000ef8 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	4a1d      	ldr	r2, [pc, #116]	; (f70 <qfree+0x78>)
static void qfree (aword *ch) {
     efa:	b530      	push	{r4, r5, lr}
     efc:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     efe:	6813      	ldr	r3, [r2, #0]
     f00:	b93b      	cbnz	r3, f12 <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f02:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     f04:	4a1a      	ldr	r2, [pc, #104]	; (f70 <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     f06:	bb53      	cbnz	r3, f5e <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     f08:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     f0a:	4b1a      	ldr	r3, [pc, #104]	; (f74 <qfree+0x7c>)
	m_setnextp (cc, ch);
     f0c:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     f0e:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     f10:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f12:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     f16:	3101      	adds	r1, #1
     f18:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     f1c:	4288      	cmp	r0, r1
     f1e:	d10b      	bne.n	f38 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     f20:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     f22:	f850 0c04 	ldr.w	r0, [r0, #-4]
     f26:	f853 1c04 	ldr.w	r1, [r3, #-4]
     f2a:	4401      	add	r1, r0
     f2c:	4618      	mov	r0, r3
     f2e:	3101      	adds	r1, #1
     f30:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	681b      	ldr	r3, [r3, #0]
     f36:	e7e3      	b.n	f00 <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f3c:	3101      	adds	r1, #1
     f3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     f42:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     f44:	bf03      	ittte	eq
     f46:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     f4c:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     f50:	461a      	movne	r2, r3
     f52:	bf02      	ittt	eq
     f54:	1949      	addeq	r1, r1, r5
     f56:	3101      	addeq	r1, #1
     f58:	f840 1c04 	streq.w	r1, [r0, #-4]
     f5c:	e7ea      	b.n	f34 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     f5e:	f853 4c04 	ldr.w	r4, [r3, #-4]
     f62:	f850 1c04 	ldr.w	r1, [r0, #-4]
     f66:	428c      	cmp	r4, r1
     f68:	d2ce      	bcs.n	f08 <qfree+0x10>
		chunk = m_nextp (chunk))
     f6a:	461a      	mov	r2, r3
     f6c:	681b      	ldr	r3, [r3, #0]
     f6e:	e7ca      	b.n	f06 <qfree+0xe>
     f70:	20000054 	andcs	r0, r0, r4, asr r0
     f74:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000f78 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	4a03      	ldr	r2, [pc, #12]	; (f88 <dgout+0x10>)
     f7a:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     f7c:	071b      	lsls	r3, r3, #28
     f7e:	d4fc      	bmi.n	f7a <dgout+0x2>
	diag_wchar (c, a);
     f80:	4b02      	ldr	r3, [pc, #8]	; (f8c <dgout+0x14>)
     f82:	b2c0      	uxtb	r0, r0
     f84:	6018      	str	r0, [r3, #0]
}
     f86:	4770      	bx	lr
     f88:	40001018 	andmi	r1, r0, r8, lsl r0
     f8c:	40001000 	andmi	r1, r0, r0

00000f90 <__pi_badstate>:
	syserror (ESTATE, "state");
     f90:	2007      	movs	r0, #7
void __pi_badstate (void) {
     f92:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     f94:	4901      	ldr	r1, [pc, #4]	; (f9c <__pi_badstate+0xc>)
     f96:	f7ff fa89 	bl	4ac <__pi_syserror>
     f9a:	bf00      	nop
     f9c:	00002dbc 			; <UNDEFINED> instruction: 0x00002dbc

00000fa0 <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fa2:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	4608      	mov	r0, r1
     fa6:	f7ff fb69 	bl	67c <tci_update_delay_ticks>
     faa:	2800      	cmp	r0, #0
     fac:	d154      	bne.n	1058 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fae:	4b2b      	ldr	r3, [pc, #172]	; (105c <update_n_wake+0xbc>)
     fb0:	4d2b      	ldr	r5, [pc, #172]	; (1060 <update_n_wake+0xc0>)
     fb2:	8819      	ldrh	r1, [r3, #0]
     fb4:	882a      	ldrh	r2, [r5, #0]
     fb6:	b289      	uxth	r1, r1
     fb8:	428a      	cmp	r2, r1
     fba:	492a      	ldr	r1, [pc, #168]	; (1064 <update_n_wake+0xc4>)
     fbc:	d803      	bhi.n	fc6 <update_n_wake+0x26>
     fbe:	8808      	ldrh	r0, [r1, #0]
     fc0:	b280      	uxth	r0, r0
     fc2:	4282      	cmp	r2, r0
     fc4:	d20d      	bcs.n	fe2 <update_n_wake+0x42>
     fc6:	881e      	ldrh	r6, [r3, #0]
     fc8:	8808      	ldrh	r0, [r1, #0]
     fca:	b2b6      	uxth	r6, r6
     fcc:	b280      	uxth	r0, r0
     fce:	4286      	cmp	r6, r0
     fd0:	d236      	bcs.n	1040 <update_n_wake+0xa0>
     fd2:	8818      	ldrh	r0, [r3, #0]
     fd4:	b280      	uxth	r0, r0
     fd6:	4282      	cmp	r2, r0
     fd8:	d903      	bls.n	fe2 <update_n_wake+0x42>
     fda:	8808      	ldrh	r0, [r1, #0]
     fdc:	b280      	uxth	r0, r0
     fde:	4282      	cmp	r2, r0
     fe0:	d32e      	bcc.n	1040 <update_n_wake+0xa0>
		for_all_tasks (i) {
     fe2:	4a21      	ldr	r2, [pc, #132]	; (1068 <update_n_wake+0xc8>)
     fe4:	6810      	ldr	r0, [r2, #0]
     fe6:	b918      	cbnz	r0, ff0 <update_n_wake+0x50>
	__pi_mintk = znew + min;
     fe8:	8818      	ldrh	r0, [r3, #0]
     fea:	4404      	add	r4, r0
     fec:	802c      	strh	r4, [r5, #0]
     fee:	e02c      	b.n	104a <update_n_wake+0xaa>
			if (!twaiting (i))
     ff0:	8806      	ldrh	r6, [r0, #0]
     ff2:	0732      	lsls	r2, r6, #28
     ff4:	d51b      	bpl.n	102e <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff6:	881f      	ldrh	r7, [r3, #0]
     ff8:	8842      	ldrh	r2, [r0, #2]
     ffa:	b2bf      	uxth	r7, r7
     ffc:	42ba      	cmp	r2, r7
     ffe:	d803      	bhi.n	1008 <update_n_wake+0x68>
    1000:	880f      	ldrh	r7, [r1, #0]
    1002:	b2bf      	uxth	r7, r7
    1004:	42ba      	cmp	r2, r7
    1006:	d20f      	bcs.n	1028 <update_n_wake+0x88>
    1008:	f8b3 c000 	ldrh.w	ip, [r3]
    100c:	880f      	ldrh	r7, [r1, #0]
    100e:	fa1f fc8c 	uxth.w	ip, ip
    1012:	b2bf      	uxth	r7, r7
    1014:	45bc      	cmp	ip, r7
    1016:	d20c      	bcs.n	1032 <update_n_wake+0x92>
    1018:	881f      	ldrh	r7, [r3, #0]
    101a:	b2bf      	uxth	r7, r7
    101c:	42ba      	cmp	r2, r7
    101e:	d903      	bls.n	1028 <update_n_wake+0x88>
    1020:	880f      	ldrh	r7, [r1, #0]
    1022:	b2bf      	uxth	r7, r7
    1024:	42ba      	cmp	r2, r7
    1026:	d304      	bcc.n	1032 <update_n_wake+0x92>
				wakeuptm (i);
    1028:	f026 060f 	bic.w	r6, r6, #15
    102c:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
    102e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    1030:	e7d9      	b.n	fe6 <update_n_wake+0x46>
				d = i->Timer - znew;
    1032:	881e      	ldrh	r6, [r3, #0]
    1034:	1b92      	subs	r2, r2, r6
    1036:	b292      	uxth	r2, r2
    1038:	4294      	cmp	r4, r2
    103a:	bf28      	it	cs
    103c:	4614      	movcs	r4, r2
    103e:	e7f6      	b.n	102e <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
    1040:	8818      	ldrh	r0, [r3, #0]
    1042:	1a12      	subs	r2, r2, r0
    1044:	b292      	uxth	r2, r2
    1046:	4294      	cmp	r4, r2
    1048:	d9ce      	bls.n	fe8 <update_n_wake+0x48>
	__pi_old = znew;
    104a:	881b      	ldrh	r3, [r3, #0]
    104c:	b29b      	uxth	r3, r3
    104e:	800b      	strh	r3, [r1, #0]
}
    1050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
    1054:	f7ff ba54 	b.w	500 <tci_run_delay_timer>
}
    1058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    105a:	bf00      	nop
    105c:	20000094 	mulcs	r0, r4, r0
    1060:	20000088 	andcs	r0, r0, r8, lsl #1
    1064:	2000008a 	andcs	r0, r0, sl, lsl #1
    1068:	20000040 	andcs	r0, r0, r0, asr #32

0000106c <proceed>:
void proceed (word state) {
    106c:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
    106e:	4b03      	ldr	r3, [pc, #12]	; (107c <proceed+0x10>)
    1070:	0100      	lsls	r0, r0, #4
    1072:	681b      	ldr	r3, [r3, #0]
    1074:	8018      	strh	r0, [r3, #0]
	release;
    1076:	f7ff fdc5 	bl	c04 <__pi_release>
    107a:	bf00      	nop
    107c:	200000a8 	andcs	r0, r0, r8, lsr #1

00001080 <__pi_wait>:
void __pi_wait (aword event, word state) {
    1080:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
    1082:	4b0a      	ldr	r3, [pc, #40]	; (10ac <__pi_wait+0x2c>)
    1084:	681c      	ldr	r4, [r3, #0]
    1086:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
    1088:	f013 0f04 	tst.w	r3, #4
    108c:	f003 0207 	and.w	r2, r3, #7
    1090:	d003      	beq.n	109a <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
    1092:	2005      	movs	r0, #5
    1094:	4906      	ldr	r1, [pc, #24]	; (10b0 <__pi_wait+0x30>)
    1096:	f7ff fa09 	bl	4ac <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
    109a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    109e:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
    10a0:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
    10a2:	8191      	strh	r1, [r2, #12]
    10a4:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
    10a6:	8023      	strh	r3, [r4, #0]
}
    10a8:	bd10      	pop	{r4, pc}
    10aa:	bf00      	nop
    10ac:	200000a8 	andcs	r0, r0, r8, lsr #1
    10b0:	00002dc2 	andeq	r2, r0, r2, asr #27

000010b4 <__pi_trigger>:
void __pi_trigger (aword event) {
    10b4:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
    10b6:	4b0b      	ldr	r3, [pc, #44]	; (10e4 <__pi_trigger+0x30>)
    10b8:	681a      	ldr	r2, [r3, #0]
    10ba:	b192      	cbz	r2, 10e2 <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
    10bc:	4614      	mov	r4, r2
    10be:	2300      	movs	r3, #0
    10c0:	f834 1b10 	ldrh.w	r1, [r4], #16
    10c4:	f001 0107 	and.w	r1, r1, #7
    10c8:	4299      	cmp	r1, r3
    10ca:	dd08      	ble.n	10de <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
    10cc:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
    10d0:	3301      	adds	r3, #1
    10d2:	4285      	cmp	r5, r0
    10d4:	d1f8      	bne.n	10c8 <__pi_trigger+0x14>
				wakeupev (i, j);
    10d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    10da:	889b      	ldrh	r3, [r3, #4]
    10dc:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
    10de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10e0:	e7eb      	b.n	10ba <__pi_trigger+0x6>
}
    10e2:	bd30      	pop	{r4, r5, pc}
    10e4:	20000040 	andcs	r0, r0, r0, asr #32

000010e8 <__pi_join>:
aword __pi_join (aword pid, word st) {
    10e8:	b510      	push	{r4, lr}
    10ea:	4604      	mov	r4, r0
	for_all_tasks (i) {
    10ec:	4b06      	ldr	r3, [pc, #24]	; (1108 <__pi_join+0x20>)
    10ee:	681b      	ldr	r3, [r3, #0]
    10f0:	b90b      	cbnz	r3, 10f6 <__pi_join+0xe>
	return 0;
    10f2:	461c      	mov	r4, r3
    10f4:	e004      	b.n	1100 <__pi_join+0x18>
		if ((aword)i == pid) {
    10f6:	42a3      	cmp	r3, r4
    10f8:	d104      	bne.n	1104 <__pi_join+0x1c>
			__pi_wait (pid, st);
    10fa:	4620      	mov	r0, r4
    10fc:	f7ff ffc0 	bl	1080 <__pi_wait>
}
    1100:	4620      	mov	r0, r4
    1102:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
    1104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1106:	e7f3      	b.n	10f0 <__pi_join+0x8>
    1108:	20000040 	andcs	r0, r0, r0, asr #32

0000110c <delay>:
void delay (word d, word state) {
    110c:	b538      	push	{r3, r4, r5, lr}
    110e:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
    1110:	4d0a      	ldr	r5, [pc, #40]	; (113c <delay+0x30>)
    1112:	682a      	ldr	r2, [r5, #0]
    1114:	8813      	ldrh	r3, [r2, #0]
    1116:	f003 0307 	and.w	r3, r3, #7
    111a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    111e:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
    1120:	2101      	movs	r1, #1
    1122:	f7ff ff3d 	bl	fa0 <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
    1126:	4b06      	ldr	r3, [pc, #24]	; (1140 <delay+0x34>)
    1128:	8818      	ldrh	r0, [r3, #0]
    112a:	682b      	ldr	r3, [r5, #0]
    112c:	4404      	add	r4, r0
    112e:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
    1130:	682a      	ldr	r2, [r5, #0]
    1132:	8813      	ldrh	r3, [r2, #0]
    1134:	f043 0308 	orr.w	r3, r3, #8
    1138:	8013      	strh	r3, [r2, #0]
}
    113a:	bd38      	pop	{r3, r4, r5, pc}
    113c:	200000a8 	andcs	r0, r0, r8, lsr #1
    1140:	2000008a 	andcs	r0, r0, sl, lsl #1

00001144 <running>:
	if (fun == NULL)
    1144:	4603      	mov	r3, r0
    1146:	b910      	cbnz	r0, 114e <running+0xa>
		return (int) __pi_curr;
    1148:	4b05      	ldr	r3, [pc, #20]	; (1160 <running+0x1c>)
    114a:	6818      	ldr	r0, [r3, #0]
    114c:	4770      	bx	lr
	for_all_tasks (i)
    114e:	4a05      	ldr	r2, [pc, #20]	; (1164 <running+0x20>)
    1150:	6810      	ldr	r0, [r2, #0]
    1152:	b900      	cbnz	r0, 1156 <running+0x12>
}
    1154:	4770      	bx	lr
		if (i->code == fun)
    1156:	6842      	ldr	r2, [r0, #4]
    1158:	429a      	cmp	r2, r3
    115a:	d0fb      	beq.n	1154 <running+0x10>
	for_all_tasks (i)
    115c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    115e:	e7f8      	b.n	1152 <running+0xe>
    1160:	200000a8 	andcs	r0, r0, r8, lsr #1
    1164:	20000040 	andcs	r0, r0, r0, asr #32

00001168 <__pi_strlen>:
int __pi_strlen (const char *s) {
    1168:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
    116a:	2000      	movs	r0, #0
    116c:	5c1a      	ldrb	r2, [r3, r0]
    116e:	b902      	cbnz	r2, 1172 <__pi_strlen+0xa>
}
    1170:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
    1172:	3001      	adds	r0, #1
    1174:	e7fa      	b.n	116c <__pi_strlen+0x4>

00001176 <__pi_memcpy>:
	while (n--)
    1176:	3801      	subs	r0, #1
    1178:	440a      	add	r2, r1
    117a:	4291      	cmp	r1, r2
    117c:	d100      	bne.n	1180 <__pi_memcpy+0xa>
}
    117e:	4770      	bx	lr
		*dest++ = *src++;
    1180:	f811 3b01 	ldrb.w	r3, [r1], #1
    1184:	f800 3f01 	strb.w	r3, [r0, #1]!
    1188:	e7f7      	b.n	117a <__pi_memcpy+0x4>
	...

0000118c <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    118e:	b119      	cbz	r1, 1198 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    1190:	2003      	movs	r0, #3
    1192:	4905      	ldr	r1, [pc, #20]	; (11a8 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1194:	f7ff f98a 	bl	4ac <__pi_syserror>
	if (ioreq [loc] != NULL)
    1198:	4b04      	ldr	r3, [pc, #16]	; (11ac <adddevfunc+0x20>)
    119a:	681a      	ldr	r2, [r3, #0]
    119c:	b112      	cbz	r2, 11a4 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    119e:	2004      	movs	r0, #4
    11a0:	4901      	ldr	r1, [pc, #4]	; (11a8 <adddevfunc+0x1c>)
    11a2:	e7f7      	b.n	1194 <adddevfunc+0x8>
	ioreq [loc] = rf;
    11a4:	6018      	str	r0, [r3, #0]
}
    11a6:	bd08      	pop	{r3, pc}
    11a8:	00002dc5 	andeq	r2, r0, r5, asr #27
    11ac:	20000044 	andcs	r0, r0, r4, asr #32

000011b0 <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    11b4:	4604      	mov	r4, r0
    11b6:	4616      	mov	r6, r2
    11b8:	461d      	mov	r5, r3
    11ba:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11be:	b921      	cbnz	r1, 11ca <io+0x1a>
    11c0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1248 <io+0x98>
    11c4:	f8d9 3000 	ldr.w	r3, [r9]
    11c8:	b91b      	cbnz	r3, 11d2 <io+0x22>
		syserror (ENODEVICE, "io");
    11ca:	2001      	movs	r0, #1
    11cc:	491d      	ldr	r1, [pc, #116]	; (1244 <io+0x94>)
    11ce:	f7ff f96d 	bl	4ac <__pi_syserror>
	if (len == 0)
    11d2:	f1b8 0f00 	cmp.w	r8, #0
    11d6:	d028      	beq.n	122a <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	4642      	mov	r2, r8
    11da:	4629      	mov	r1, r5
    11dc:	4630      	mov	r0, r6
    11de:	4798      	blx	r3
	if (ret >= 0)
    11e0:	2800      	cmp	r0, #0
    11e2:	da23      	bge.n	122c <io+0x7c>
	if (ret == -1) {
    11e4:	1c41      	adds	r1, r0, #1
    11e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    11ea:	d108      	bne.n	11fe <io+0x4e>
		if (retry == WNONE)
    11ec:	429c      	cmp	r4, r3
    11ee:	d01c      	beq.n	122a <io+0x7a>
		iowait (dev, operation, retry);
    11f0:	4621      	mov	r1, r4
    11f2:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    11f6:	f7ff ff43 	bl	1080 <__pi_wait>
			release;
    11fa:	f7ff fd03 	bl	c04 <__pi_release>
	if (ret == -2) {
    11fe:	1c82      	adds	r2, r0, #2
    1200:	d116      	bne.n	1230 <io+0x80>
		if (retry != WNONE) {
    1202:	429c      	cmp	r4, r3
    1204:	f8d9 9000 	ldr.w	r9, [r9]
    1208:	d00a      	beq.n	1220 <io+0x70>
			iowait (dev, operation, retry);
    120a:	4621      	mov	r1, r4
    120c:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1210:	f7ff ff36 	bl	1080 <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    1214:	4642      	mov	r2, r8
    1216:	4629      	mov	r1, r5
    1218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    121c:	47c8      	blx	r9
    121e:	e7ec      	b.n	11fa <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    1220:	4642      	mov	r2, r8
    1222:	4629      	mov	r1, r5
    1224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1228:	47c8      	blx	r9
		return 0;
    122a:	2000      	movs	r0, #0
}
    122c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    1230:	429c      	cmp	r4, r3
    1232:	d0fa      	beq.n	122a <io+0x7a>
		delay (-ret - 2, retry);
    1234:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    1238:	30fe      	adds	r0, #254	; 0xfe
    123a:	4621      	mov	r1, r4
    123c:	b280      	uxth	r0, r0
    123e:	f7ff ff65 	bl	110c <delay>
		release;
    1242:	e7da      	b.n	11fa <io+0x4a>
    1244:	00002dca 	andeq	r2, r0, sl, asr #27
    1248:	20000044 	andcs	r0, r0, r4, asr #32

0000124c <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    124c:	4a0d      	ldr	r2, [pc, #52]	; (1284 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    124e:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1250:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    1254:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    1258:	089b      	lsrs	r3, r3, #2
    125a:	1e59      	subs	r1, r3, #1
    125c:	29ff      	cmp	r1, #255	; 0xff
    125e:	d803      	bhi.n	1268 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    1260:	2004      	movs	r0, #4
    1262:	4909      	ldr	r1, [pc, #36]	; (1288 <__pi_malloc_init+0x3c>)
    1264:	f7ff f922 	bl	4ac <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1268:	4908      	ldr	r1, [pc, #32]	; (128c <__pi_malloc_init+0x40>)
    126a:	1d10      	adds	r0, r2, #4
    126c:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    126e:	2000      	movs	r0, #0
    1270:	4907      	ldr	r1, [pc, #28]	; (1290 <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    1272:	3b02      	subs	r3, #2
    1274:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1276:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    127a:	4a06      	ldr	r2, [pc, #24]	; (1294 <__pi_malloc_init+0x48>)
    127c:	6013      	str	r3, [r2, #0]
    127e:	4a06      	ldr	r2, [pc, #24]	; (1298 <__pi_malloc_init+0x4c>)
    1280:	6013      	str	r3, [r2, #0]
}
    1282:	bd08      	pop	{r3, pc}
    1284:	200000ac 	andcs	r0, r0, ip, lsr #1
    1288:	00002dcd 	andeq	r2, r0, sp, asr #27
    128c:	20000054 	andcs	r0, r0, r4, asr r0
    1290:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1294:	20000048 	andcs	r0, r0, r8, asr #32
    1298:	20000050 	andcs	r0, r0, r0, asr r0

0000129c <__pi_free>:
void __pi_free (aword *ch) {
    129c:	b508      	push	{r3, lr}
	if (ch == NULL)
    129e:	b1c8      	cbz	r0, 12d4 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    12a4:	2b00      	cmp	r3, #0
    12a6:	db03      	blt.n	12b0 <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    12a8:	2006      	movs	r0, #6
    12aa:	490b      	ldr	r1, [pc, #44]	; (12d8 <__pi_free+0x3c>)
    12ac:	f7ff f8fe 	bl	4ac <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    12b0:	490a      	ldr	r1, [pc, #40]	; (12dc <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    12b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    12b6:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    12b8:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    12bc:	4413      	add	r3, r2
    12be:	600b      	str	r3, [r1, #0]
	QFREE;
    12c0:	f7ff fe1a 	bl	ef8 <qfree>
	if (mevent [MA_NP] . nwait) {
    12c4:	4806      	ldr	r0, [pc, #24]	; (12e0 <__pi_free+0x44>)
    12c6:	7803      	ldrb	r3, [r0, #0]
    12c8:	b123      	cbz	r3, 12d4 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    12ca:	f7ff fef3 	bl	10b4 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    12ce:	7803      	ldrb	r3, [r0, #0]
    12d0:	3b01      	subs	r3, #1
    12d2:	7003      	strb	r3, [r0, #0]
}
    12d4:	bd08      	pop	{r3, pc}
    12d6:	bf00      	nop
    12d8:	00002dd2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    12dc:	20000048 	andcs	r0, r0, r8, asr #32
    12e0:	2000004c 	andcs	r0, r0, ip, asr #32

000012e4 <kill>:
void kill (aword pid) {
    12e4:	b510      	push	{r4, lr}
	if (pid == 0)
    12e6:	b908      	cbnz	r0, 12ec <kill+0x8>
		pid = (aword) __pi_curr;
    12e8:	4b0f      	ldr	r3, [pc, #60]	; (1328 <kill+0x44>)
    12ea:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    12ec:	2200      	movs	r2, #0
	for_all_tasks (i) {
    12ee:	4b0f      	ldr	r3, [pc, #60]	; (132c <kill+0x48>)
    12f0:	681c      	ldr	r4, [r3, #0]
    12f2:	b91c      	cbnz	r4, 12fc <kill+0x18>
	syserror (EREQPAR, "kpi");
    12f4:	2003      	movs	r0, #3
    12f6:	490e      	ldr	r1, [pc, #56]	; (1330 <kill+0x4c>)
    12f8:	f7ff f8d8 	bl	4ac <__pi_syserror>
		if ((aword)i == pid) {
    12fc:	4284      	cmp	r4, r0
    12fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1300:	d10e      	bne.n	1320 <kill+0x3c>
			if (j == NULL)
    1302:	b95a      	cbnz	r2, 131c <kill+0x38>
				__PCB = i->Next;
    1304:	6019      	str	r1, [r3, #0]
			killev (i);
    1306:	4620      	mov	r0, r4
    1308:	f7ff fdd8 	bl	ebc <killev>
			ufree (i);
    130c:	f7ff ffc6 	bl	129c <__pi_free>
			if (i == __pi_curr)
    1310:	4b05      	ldr	r3, [pc, #20]	; (1328 <kill+0x44>)
    1312:	681b      	ldr	r3, [r3, #0]
    1314:	42a3      	cmp	r3, r4
    1316:	d106      	bne.n	1326 <kill+0x42>
				release;
    1318:	f7ff fc74 	bl	c04 <__pi_release>
				j->Next = i->Next;
    131c:	62d1      	str	r1, [r2, #44]	; 0x2c
    131e:	e7f2      	b.n	1306 <kill+0x22>
    1320:	4622      	mov	r2, r4
    1322:	460c      	mov	r4, r1
    1324:	e7e5      	b.n	12f2 <kill+0xe>
}
    1326:	bd10      	pop	{r4, pc}
    1328:	200000a8 	andcs	r0, r0, r8, lsr #1
    132c:	20000040 	andcs	r0, r0, r0, asr #32
    1330:	00002dd7 	ldrdeq	r2, [r0], -r7

00001334 <__pi_malloc>:
	if (size < 8)
    1334:	2807      	cmp	r0, #7
		_size = 2;
    1336:	bf98      	it	ls
    1338:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    133a:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    133c:	4b21      	ldr	r3, [pc, #132]	; (13c4 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    133e:	bf88      	it	hi
    1340:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    1342:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	4920      	ldr	r1, [pc, #128]	; (13c8 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    1346:	bf88      	it	hi
    1348:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    134a:	b94c      	cbnz	r4, 1360 <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    134c:	4a1f      	ldr	r2, [pc, #124]	; (13cc <__pi_malloc+0x98>)
    134e:	7853      	ldrb	r3, [r2, #1]
    1350:	2bff      	cmp	r3, #255	; 0xff
    1352:	d001      	beq.n	1358 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    1354:	3301      	adds	r3, #1
    1356:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    1358:	2200      	movs	r2, #0
    135a:	4b1d      	ldr	r3, [pc, #116]	; (13d0 <__pi_malloc+0x9c>)
    135c:	601a      	str	r2, [r3, #0]
	return chunk;
    135e:	e02f      	b.n	13c0 <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1360:	6862      	ldr	r2, [r4, #4]
    1362:	428a      	cmp	r2, r1
    1364:	d003      	beq.n	136e <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    1366:	2006      	movs	r0, #6
    1368:	491a      	ldr	r1, [pc, #104]	; (13d4 <__pi_malloc+0xa0>)
    136a:	f7ff f89f 	bl	4ac <__pi_syserror>
		if (m_size (chunk) >= _size)
    136e:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    1372:	4285      	cmp	r5, r0
    1374:	d202      	bcs.n	137c <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1376:	4623      	mov	r3, r4
    1378:	4614      	mov	r4, r2
    137a:	e7e6      	b.n	134a <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    137c:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    137e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    1382:	1a1b      	subs	r3, r3, r0
    1384:	2b08      	cmp	r3, #8
    1386:	d909      	bls.n	139c <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1388:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    138c:	3001      	adds	r0, #1
    138e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    1392:	3b01      	subs	r3, #1
    1394:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1398:	f7ff fdae 	bl	ef8 <qfree>
		mevent [MA_NP] . nfail = 0;
    139c:	2200      	movs	r2, #0
    139e:	4b0b      	ldr	r3, [pc, #44]	; (13cc <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    13a0:	490d      	ldr	r1, [pc, #52]	; (13d8 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    13a2:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    13a4:	f854 2c04 	ldr.w	r2, [r4, #-4]
    13a8:	680b      	ldr	r3, [r1, #0]
    13aa:	1a9b      	subs	r3, r3, r2
    13ac:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13ae:	4908      	ldr	r1, [pc, #32]	; (13d0 <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13b4:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    13b6:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13ba:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    13bc:	bf38      	it	cc
    13be:	600b      	strcc	r3, [r1, #0]
}
    13c0:	4620      	mov	r0, r4
    13c2:	bd38      	pop	{r3, r4, r5, pc}
    13c4:	20000054 	andcs	r0, r0, r4, asr r0
    13c8:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    13cc:	2000004c 	andcs	r0, r0, ip, asr #32
    13d0:	20000050 	andcs	r0, r0, r0, asr r0
    13d4:	00002ddb 	ldrdeq	r2, [r0], -fp
    13d8:	20000048 	andcs	r0, r0, r8, asr #32

000013dc <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    13dc:	b538      	push	{r3, r4, r5, lr}
    13de:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    13e2:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e4:	f7ff ffa6 	bl	1334 <__pi_malloc>
    13e8:	2300      	movs	r3, #0
    13ea:	b138      	cbz	r0, 13fc <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    13ec:	4a07      	ldr	r2, [pc, #28]	; (140c <__pi_fork+0x30>)
	i->Status = 0;
    13ee:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    13f0:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    13f2:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    13f4:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    13f8:	b90b      	cbnz	r3, 13fe <__pi_fork+0x22>
			__PCB = i;
    13fa:	6010      	str	r0, [r2, #0]
}
    13fc:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    13fe:	461a      	mov	r2, r3
    1400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1402:	2b00      	cmp	r3, #0
    1404:	d1fb      	bne.n	13fe <__pi_fork+0x22>
			j->Next = i;
    1406:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1408:	e7f8      	b.n	13fc <__pi_fork+0x20>
    140a:	bf00      	nop
    140c:	20000040 	andcs	r0, r0, r0, asr #32

00001410 <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    1410:	4a04      	ldr	r2, [pc, #16]	; (1424 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    1412:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    1414:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1416:	4803      	ldr	r0, [pc, #12]	; (1424 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    1418:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    141a:	bf1c      	itt	ne
    141c:	3301      	addne	r3, #1
    141e:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	f7ff be2e 	b.w	1080 <__pi_wait>
    1424:	2000004c 	andcs	r0, r0, ip, asr #32

00001428 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    1428:	b40f      	push	{r0, r1, r2, r3}
    142a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    142e:	ab0a      	add	r3, sp, #40	; 0x28
    1430:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    1434:	2015      	movs	r0, #21
	va_start (ap, mess);
    1436:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    1438:	4b46      	ldr	r3, [pc, #280]	; (1554 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    143a:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    143c:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    143e:	f8df 811c 	ldr.w	r8, [pc, #284]	; 155c <diag+0x134>
	diag_disable_int (a, is);
    1442:	695b      	ldr	r3, [r3, #20]
    1444:	4798      	blx	r3
	while (*mess != '\0') {
    1446:	7820      	ldrb	r0, [r4, #0]
    1448:	b998      	cbnz	r0, 1472 <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    144a:	200d      	movs	r0, #13
    144c:	f7ff fd94 	bl	f78 <dgout>
	dgout ('\n');
    1450:	200a      	movs	r0, #10
    1452:	f7ff fd91 	bl	f78 <dgout>
    1456:	4a40      	ldr	r2, [pc, #256]	; (1558 <diag+0x130>)
    1458:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    145a:	071b      	lsls	r3, r3, #28
    145c:	d4fc      	bmi.n	1458 <diag+0x30>
	diag_enable_int (a, is);
    145e:	4b3d      	ldr	r3, [pc, #244]	; (1554 <diag+0x12c>)
    1460:	2015      	movs	r0, #21
    1462:	681b      	ldr	r3, [r3, #0]
    1464:	691b      	ldr	r3, [r3, #16]
    1466:	4798      	blx	r3
}
    1468:	b003      	add	sp, #12
    146a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    146e:	b004      	add	sp, #16
    1470:	4770      	bx	lr
		if (*mess == '%') {
    1472:	2825      	cmp	r0, #37	; 0x25
    1474:	f104 0601 	add.w	r6, r4, #1
    1478:	d169      	bne.n	154e <diag+0x126>
			if (*mess == 'l') {
    147a:	9b01      	ldr	r3, [sp, #4]
    147c:	7862      	ldrb	r2, [r4, #1]
    147e:	f853 1b04 	ldr.w	r1, [r3], #4
    1482:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1484:	bf08      	it	eq
    1486:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1488:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    148a:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    148c:	bf0c      	ite	eq
    148e:	2520      	moveq	r5, #32
				bc = 16;
    1490:	2510      	movne	r5, #16
			switch (*mess) {
    1492:	2b75      	cmp	r3, #117	; 0x75
    1494:	d04e      	beq.n	1534 <diag+0x10c>
    1496:	d80a      	bhi.n	14ae <diag+0x86>
    1498:	2b64      	cmp	r3, #100	; 0x64
    149a:	d01c      	beq.n	14d6 <diag+0xae>
    149c:	2b73      	cmp	r3, #115	; 0x73
    149e:	d052      	beq.n	1546 <diag+0x11e>
				dgout ('%');
    14a0:	2025      	movs	r0, #37	; 0x25
    14a2:	f7ff fd69 	bl	f78 <dgout>
				dgout (*mess);
    14a6:	7830      	ldrb	r0, [r6, #0]
    14a8:	f7ff fd66 	bl	f78 <dgout>
    14ac:	e010      	b.n	14d0 <diag+0xa8>
			switch (*mess) {
    14ae:	2b78      	cmp	r3, #120	; 0x78
    14b0:	d1f6      	bne.n	14a0 <diag+0x78>
    14b2:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    14b4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1560 <diag+0x138>
					i += 4;
    14b8:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    14ba:	1b2b      	subs	r3, r5, r4
    14bc:	fa21 f303 	lsr.w	r3, r1, r3
    14c0:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    14c4:	f819 0003 	ldrb.w	r0, [r9, r3]
    14c8:	f7ff fd56 	bl	f78 <dgout>
				while (i < bc) {
    14cc:	42a5      	cmp	r5, r4
    14ce:	dcf3      	bgt.n	14b8 <diag+0x90>
			mess++;
    14d0:	3601      	adds	r6, #1
					d /= 10;
    14d2:	4634      	mov	r4, r6
    14d4:	e7b7      	b.n	1446 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    14d6:	1e6b      	subs	r3, r5, #1
    14d8:	fa21 f303 	lsr.w	r3, r1, r3
    14dc:	07da      	lsls	r2, r3, #31
    14de:	d509      	bpl.n	14f4 <diag+0xcc>
					dgout ('-');
    14e0:	202d      	movs	r0, #45	; 0x2d
    14e2:	f7ff fd49 	bl	f78 <dgout>
					if (bc == 16)
    14e6:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    14e8:	bf04      	itt	eq
    14ea:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    14ee:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    14f2:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    14f4:	f242 7410 	movw	r4, #10000	; 0x2710
    14f8:	2d10      	cmp	r5, #16
    14fa:	bf18      	it	ne
    14fc:	4644      	movne	r4, r8
					v = (word) (val / d);
    14fe:	fbb1 f5f4 	udiv	r5, r1, r4
    1502:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1504:	b935      	cbnz	r5, 1514 <diag+0xec>
    1506:	2c01      	cmp	r4, #1
    1508:	d004      	beq.n	1514 <diag+0xec>
					d /= 10;
    150a:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    150e:	e7f6      	b.n	14fe <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	4c12      	ldr	r4, [pc, #72]	; (155c <diag+0x134>)
    1512:	e7f4      	b.n	14fe <diag+0xd6>
					dgout (v + '0');
    1514:	f105 0030 	add.w	r0, r5, #48	; 0x30
    1518:	b280      	uxth	r0, r0
    151a:	f7ff fd2d 	bl	f78 <dgout>
					if (d == 0) break;
    151e:	2c09      	cmp	r4, #9
					d /= 10;
    1520:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    1524:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    1528:	d9d2      	bls.n	14d0 <diag+0xa8>
					v = (word) (val / d);
    152a:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    152e:	461c      	mov	r4, r3
					v = (word) (val / d);
    1530:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    1532:	e7ef      	b.n	1514 <diag+0xec>
				if (bc == 16)
    1534:	2d10      	cmp	r5, #16
    1536:	d1eb      	bne.n	1510 <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    1538:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    153c:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    153e:	e7de      	b.n	14fe <diag+0xd6>
					dgout (*s);
    1540:	f7ff fd1a 	bl	f78 <dgout>
					s++;
    1544:	3101      	adds	r1, #1
				while (*s != '\0') {
    1546:	7808      	ldrb	r0, [r1, #0]
    1548:	2800      	cmp	r0, #0
    154a:	d1f9      	bne.n	1540 <diag+0x118>
    154c:	e7c0      	b.n	14d0 <diag+0xa8>
			dgout (*mess++);
    154e:	f7ff fd13 	bl	f78 <dgout>
    1552:	e7be      	b.n	14d2 <diag+0xaa>
    1554:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    1558:	40001018 	andmi	r1, r0, r8, lsl r0
    155c:	3b9aca00 	blcc	fe6b3d64 <_estack+0xde6aed64>
    1560:	00002de0 	andeq	r2, r0, r0, ror #27

00001564 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    1564:	4770      	bx	lr

00001566 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1566:	e7fe      	b.n	1566 <NmiSR>

00001568 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    1568:	e7fe      	b.n	1568 <FaultISR>

0000156a <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    156a:	e7fe      	b.n	156a <AONIntHandler>

0000156c <ResetISR>:
{
    156c:	b508      	push	{r3, lr}
    SetupTrimDevice();
    156e:	f000 fddb 	bl	2128 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1572:	4b0c      	ldr	r3, [pc, #48]	; (15a4 <zero_loop+0x20>)
    pui32Src = &_etext;
    1574:	4a0c      	ldr	r2, [pc, #48]	; (15a8 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1576:	490d      	ldr	r1, [pc, #52]	; (15ac <zero_loop+0x28>)
    1578:	428b      	cmp	r3, r1
    157a:	d30d      	bcc.n	1598 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    157c:	480c      	ldr	r0, [pc, #48]	; (15b0 <zero_loop+0x2c>)
    157e:	490d      	ldr	r1, [pc, #52]	; (15b4 <zero_loop+0x30>)
    1580:	f04f 0200 	mov.w	r2, #0

00001584 <zero_loop>:
    1584:	4288      	cmp	r0, r1
    1586:	bfb8      	it	lt
    1588:	f840 2b04 	strlt.w	r2, [r0], #4
    158c:	dbfa      	blt.n	1584 <zero_loop>
   main();
    158e:	f7ff fc65 	bl	e5c <main>
    FaultISR();
    1592:	f7ff ffe9 	bl	1568 <FaultISR>
}
    1596:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1598:	f852 0b04 	ldr.w	r0, [r2], #4
    159c:	f843 0b04 	str.w	r0, [r3], #4
    15a0:	e7ea      	b.n	1578 <ResetISR+0xc>
    15a2:	bf00      	nop
    15a4:	20000000 	andcs	r0, r0, r0
    15a8:	00002df8 	strdeq	r2, [r0], -r8
    15ac:	20000009 	andcs	r0, r0, r9
    15b0:	2000000c 	andcs	r0, r0, ip
    15b4:	200000ac 	andcs	r0, r0, ip, lsr #1

000015b8 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    15b8:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    15ba:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    15c0:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    15c2:	4907      	ldr	r1, [pc, #28]	; (15e0 <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c4:	4d07      	ldr	r5, [pc, #28]	; (15e4 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15c6:	4c08      	ldr	r4, [pc, #32]	; (15e8 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c8:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    15ca:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    15cc:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    15ce:	b2c0      	uxtb	r0, r0
			b |= 1;
    15d0:	bf48      	it	mi
    15d2:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    15d6:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15d8:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    15da:	600a      	str	r2, [r1, #0]
    15dc:	d1f4      	bne.n	15c8 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    15de:	bd70      	pop	{r4, r5, r6, pc}
    15e0:	400220a0 	andmi	r2, r2, r0, lsr #1
    15e4:	400220c0 	andmi	r2, r2, r0, asr #1
    15e8:	40022090 	mulmi	r2, r0, r0

000015ec <put_byte>:

static void put_byte (byte b) {
    15ec:	b530      	push	{r4, r5, lr}
    15ee:	2308      	movs	r3, #8
    15f0:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    15f8:	4c06      	ldr	r4, [pc, #24]	; (1614 <put_byte+0x28>)
    15fa:	4a07      	ldr	r2, [pc, #28]	; (1618 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    15fc:	f010 0f80 	tst.w	r0, #128	; 0x80
    1600:	bf14      	ite	ne
    1602:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1604:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1606:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1608:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    160a:	6021      	str	r1, [r4, #0]
		b <<= 1;
    160c:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    160e:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    1610:	d1f4      	bne.n	15fc <put_byte+0x10>
	}
}
    1612:	bd30      	pop	{r4, r5, pc}
    1614:	40022090 	mulmi	r2, r0, r0
    1618:	400220a0 	andmi	r2, r2, r0, lsr #1

0000161c <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    161c:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    161e:	b510      	push	{r4, lr}
    1620:	4c03      	ldr	r4, [pc, #12]	; (1630 <cmd_0+0x14>)
    1622:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    1624:	f7ff ffe2 	bl	15ec <put_byte>
    1628:	2300      	movs	r3, #0
    162a:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    162c:	bd10      	pop	{r4, pc}
    162e:	bf00      	nop
    1630:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001634 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    1634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1638:	4604      	mov	r4, r0
    163a:	460d      	mov	r5, r1
    163c:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    163e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1684 <wwait+0x50>
    1642:	4e0f      	ldr	r6, [pc, #60]	; (1680 <wwait+0x4c>)
    1644:	f898 3000 	ldrb.w	r3, [r8]
    1648:	b14b      	cbz	r3, 165e <wwait+0x2a>
	put_byte (CMD_RDSR);
    164a:	2005      	movs	r0, #5
    164c:	6037      	str	r7, [r6, #0]
    164e:	f7ff ffcd 	bl	15ec <put_byte>
	r = get_byte ();
    1652:	f7ff ffb1 	bl	15b8 <get_byte>
    1656:	2300      	movs	r3, #0
    1658:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    165a:	07c3      	lsls	r3, r0, #31
    165c:	d401      	bmi.n	1662 <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    165e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    1662:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1666:	429c      	cmp	r4, r3
    1668:	d103      	bne.n	1672 <wwait+0x3e>
			mdelay (1);
    166a:	2001      	movs	r0, #1
    166c:	f7fe feea 	bl	444 <mdelay>
    1670:	e7e8      	b.n	1644 <wwait+0x10>
			delay (del, st);
    1672:	4621      	mov	r1, r4
    1674:	4628      	mov	r0, r5
    1676:	f7ff fd49 	bl	110c <delay>
			release;
    167a:	f7ff fac3 	bl	c04 <__pi_release>
    167e:	bf00      	nop
    1680:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1684:	20000058 	andcs	r0, r0, r8, asr r0

00001688 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    168a:	4d0c      	ldr	r5, [pc, #48]	; (16bc <ready+0x34>)
    168c:	782f      	ldrb	r7, [r5, #0]
    168e:	b147      	cbz	r7, 16a2 <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    1690:	2101      	movs	r1, #1
    1692:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1696:	f7ff ffcd 	bl	1634 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    169a:	2200      	movs	r2, #0
    169c:	4b08      	ldr	r3, [pc, #32]	; (16c0 <ready+0x38>)
    169e:	701a      	strb	r2, [r3, #0]
}
    16a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16a2:	2401      	movs	r4, #1
    16a4:	4e07      	ldr	r6, [pc, #28]	; (16c4 <ready+0x3c>)
	udelay (1);
    16a6:	4620      	mov	r0, r4
    16a8:	6034      	str	r4, [r6, #0]
    16aa:	f7fe feb5 	bl	418 <udelay>
	udelay (1);
    16ae:	4620      	mov	r0, r4
    16b0:	6037      	str	r7, [r6, #0]
    16b2:	f7fe feb1 	bl	418 <udelay>
		dopen = DOPEN_TEMP;
    16b6:	2302      	movs	r3, #2
    16b8:	702b      	strb	r3, [r5, #0]
    16ba:	e7ee      	b.n	169a <ready+0x12>
    16bc:	20000058 	andcs	r0, r0, r8, asr r0
    16c0:	20000059 	andcs	r0, r0, r9, asr r0
    16c4:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000016c8 <cclose>:
static void cclose () {
    16c8:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    16ca:	4c07      	ldr	r4, [pc, #28]	; (16e8 <cclose+0x20>)
    16cc:	7823      	ldrb	r3, [r4, #0]
    16ce:	2b02      	cmp	r3, #2
    16d0:	d109      	bne.n	16e6 <cclose+0x1e>
		wwait (WNONE, 1);
    16d2:	2101      	movs	r1, #1
    16d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    16d8:	f7ff ffac 	bl	1634 <wwait>
	cmd_0 (CMD_DP);
    16dc:	20b9      	movs	r0, #185	; 0xb9
    16de:	f7ff ff9d 	bl	161c <cmd_0>
		dopen = 0;
    16e2:	2300      	movs	r3, #0
    16e4:	7023      	strb	r3, [r4, #0]
}
    16e6:	bd10      	pop	{r4, pc}
    16e8:	20000058 	andcs	r0, r0, r8, asr r0

000016ec <ee_open>:

// ============================================================================

word ee_open () {
    16ec:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    16ee:	f7ff ffcb 	bl	1688 <ready>
	dopen = DOPEN_PERM;
    16f2:	2201      	movs	r2, #1
    16f4:	4b01      	ldr	r3, [pc, #4]	; (16fc <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    16f6:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    16f8:	701a      	strb	r2, [r3, #0]
}
    16fa:	bd08      	pop	{r3, pc}
    16fc:	20000058 	andcs	r0, r0, r8, asr r0

00001700 <ee_close>:

void ee_close () {

	if (dopen) {
    1700:	4b03      	ldr	r3, [pc, #12]	; (1710 <ee_close+0x10>)
    1702:	781a      	ldrb	r2, [r3, #0]
    1704:	b11a      	cbz	r2, 170e <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1706:	2202      	movs	r2, #2
    1708:	701a      	strb	r2, [r3, #0]
		cclose ();
    170a:	f7ff bfdd 	b.w	16c8 <cclose>
	}
}
    170e:	4770      	bx	lr
    1710:	20000058 	andcs	r0, r0, r8, asr r0

00001714 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    1714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1716:	4604      	mov	r4, r0
    1718:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    171a:	4615      	mov	r5, r2
    171c:	b37a      	cbz	r2, 177e <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    171e:	4e19      	ldr	r6, [pc, #100]	; (1784 <ser_in+0x70>)
    1720:	6830      	ldr	r0, [r6, #0]
    1722:	b988      	cbnz	r0, 1748 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    1724:	4818      	ldr	r0, [pc, #96]	; (1788 <ser_in+0x74>)
    1726:	f7ff fd0d 	bl	1144 <running>
    172a:	b948      	cbnz	r0, 1740 <ser_in+0x2c>
			prcs = runthread (__inserial);
    172c:	4601      	mov	r1, r0
    172e:	4816      	ldr	r0, [pc, #88]	; (1788 <ser_in+0x74>)
    1730:	f7ff fe54 	bl	13dc <__pi_fork>
			if (prcs == 0) {
    1734:	b920      	cbnz	r0, 1740 <ser_in+0x2c>
				npwait (st);
    1736:	4620      	mov	r0, r4
    1738:	f7ff fe6a 	bl	1410 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    173c:	f7ff fa62 	bl	c04 <__pi_release>
		join (prcs, st);
    1740:	4621      	mov	r1, r4
    1742:	f7ff fcd1 	bl	10e8 <__pi_join>
    1746:	e7f9      	b.n	173c <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    1748:	7803      	ldrb	r3, [r0, #0]
    174a:	b9a3      	cbnz	r3, 1776 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    174c:	7844      	ldrb	r4, [r0, #1]
    174e:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    1750:	42ac      	cmp	r4, r5
		prcs = len-1;
    1752:	bfa8      	it	ge
    1754:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    1758:	4622      	mov	r2, r4
    175a:	4638      	mov	r0, r7
    175c:	6831      	ldr	r1, [r6, #0]
    175e:	f7ff fd0a 	bl	1176 <__pi_memcpy>
	ufree (__inpline);
    1762:	6830      	ldr	r0, [r6, #0]
    1764:	f7ff fd9a 	bl	129c <__pi_free>
	__inpline = NULL;
    1768:	2300      	movs	r3, #0
    176a:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    176c:	783a      	ldrb	r2, [r7, #0]
    176e:	b102      	cbz	r2, 1772 <ser_in+0x5e>
		buf [prcs] = '\0';
    1770:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    1772:	4620      	mov	r0, r4
    1774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1776:	f7ff fcf7 	bl	1168 <__pi_strlen>
    177a:	4604      	mov	r4, r0
    177c:	e7e8      	b.n	1750 <ser_in+0x3c>
		return 0;
    177e:	4614      	mov	r4, r2
    1780:	e7f7      	b.n	1772 <ser_in+0x5e>
    1782:	bf00      	nop
    1784:	20000064 	andcs	r0, r0, r4, rrx
    1788:	000018b1 			; <UNDEFINED> instruction: 0x000018b1

0000178c <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    178c:	b40e      	push	{r1, r2, r3}
    178e:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    1790:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    1792:	4812      	ldr	r0, [pc, #72]	; (17dc <ser_outf+0x50>)
    1794:	f7ff fcd6 	bl	1144 <running>
    1798:	4606      	mov	r6, r0
    179a:	b120      	cbz	r0, 17a6 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    179c:	4621      	mov	r1, r4
    179e:	f7ff fca3 	bl	10e8 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    17a2:	f7ff fa2f 	bl	c04 <__pi_release>
	va_start (ap, m);
    17a6:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17a8:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    17aa:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17ac:	f000 fa36 	bl	1c1c <vform>
    17b0:	4605      	mov	r5, r0
    17b2:	b918      	cbnz	r0, 17bc <ser_outf+0x30>
		umwait (st);
    17b4:	4620      	mov	r0, r4
    17b6:	f7ff fe2b 	bl	1410 <__pi_waitmem>
    17ba:	e7f2      	b.n	17a2 <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    17bc:	4601      	mov	r1, r0
    17be:	4807      	ldr	r0, [pc, #28]	; (17dc <ser_outf+0x50>)
    17c0:	f7ff fe0c 	bl	13dc <__pi_fork>
    17c4:	b918      	cbnz	r0, 17ce <ser_outf+0x42>
		ufree (buf);
    17c6:	4628      	mov	r0, r5
    17c8:	f7ff fd68 	bl	129c <__pi_free>
		npwait (st);
    17cc:	e7f2      	b.n	17b4 <ser_outf+0x28>
		release;
	}

	return 0;
}
    17ce:	4630      	mov	r0, r6
    17d0:	b003      	add	sp, #12
    17d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    17d6:	b003      	add	sp, #12
    17d8:	4770      	bx	lr
    17da:	bf00      	nop
    17dc:	00001841 	andeq	r1, r0, r1, asr #16

000017e0 <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    17e0:	b40e      	push	{r1, r2, r3}
    17e2:	b533      	push	{r0, r1, r4, r5, lr}
    17e4:	9905      	ldr	r1, [sp, #20]
    17e6:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    17e8:	b321      	cbz	r1, 1834 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    17ea:	4d13      	ldr	r5, [pc, #76]	; (1838 <ser_inf+0x58>)
    17ec:	6828      	ldr	r0, [r5, #0]
    17ee:	b988      	cbnz	r0, 1814 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    17f0:	4812      	ldr	r0, [pc, #72]	; (183c <ser_inf+0x5c>)
    17f2:	f7ff fca7 	bl	1144 <running>
    17f6:	b948      	cbnz	r0, 180c <ser_inf+0x2c>
			prcs = runthread (__inserial);
    17f8:	4601      	mov	r1, r0
    17fa:	4810      	ldr	r0, [pc, #64]	; (183c <ser_inf+0x5c>)
    17fc:	f7ff fdee 	bl	13dc <__pi_fork>
			if (prcs == 0) {
    1800:	b920      	cbnz	r0, 180c <ser_inf+0x2c>
				npwait (st);
    1802:	4620      	mov	r0, r4
    1804:	f7ff fe04 	bl	1410 <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1808:	f7ff f9fc 	bl	c04 <__pi_release>
		join (prcs, st);
    180c:	4621      	mov	r1, r4
    180e:	f7ff fc6b 	bl	10e8 <__pi_join>
    1812:	e7f9      	b.n	1808 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    1814:	aa06      	add	r2, sp, #24
    1816:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    1818:	f000 fa28 	bl	1c6c <vscan>
    181c:	4604      	mov	r4, r0

	ufree (__inpline);
    181e:	6828      	ldr	r0, [r5, #0]
    1820:	f7ff fd3c 	bl	129c <__pi_free>
	__inpline = NULL;
    1824:	2300      	movs	r3, #0
    1826:	602b      	str	r3, [r5, #0]

	return prcs;
}
    1828:	4620      	mov	r0, r4
    182a:	b002      	add	sp, #8
    182c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1830:	b003      	add	sp, #12
    1832:	4770      	bx	lr
		return 0;
    1834:	460c      	mov	r4, r1
    1836:	e7f7      	b.n	1828 <ser_inf+0x48>
    1838:	20000064 	andcs	r0, r0, r4, rrx
    183c:	000018b1 			; <UNDEFINED> instruction: 0x000018b1

00001840 <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    1840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1842:	4b18      	ldr	r3, [pc, #96]	; (18a4 <__outserial+0x64>)
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	689d      	ldr	r5, [r3, #8]
    1848:	b130      	cbz	r0, 1858 <__outserial+0x18>
    184a:	280a      	cmp	r0, #10
    184c:	d00d      	beq.n	186a <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    184e:	b003      	add	sp, #12
    1850:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1854:	f7ff bb9c 	b.w	f90 <__pi_badstate>
	ptr = data;
    1858:	4b13      	ldr	r3, [pc, #76]	; (18a8 <__outserial+0x68>)
    185a:	4c14      	ldr	r4, [pc, #80]	; (18ac <__outserial+0x6c>)
    185c:	601d      	str	r5, [r3, #0]
	if (*ptr)
    185e:	782b      	ldrb	r3, [r5, #0]
    1860:	b1e3      	cbz	r3, 189c <__outserial+0x5c>
		len = strlen (ptr);
    1862:	4628      	mov	r0, r5
    1864:	f7ff fc80 	bl	1168 <__pi_strlen>
    1868:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    186a:	4e0f      	ldr	r6, [pc, #60]	; (18a8 <__outserial+0x68>)
    186c:	4f0f      	ldr	r7, [pc, #60]	; (18ac <__outserial+0x6c>)
    186e:	883b      	ldrh	r3, [r7, #0]
    1870:	2201      	movs	r2, #1
    1872:	9300      	str	r3, [sp, #0]
    1874:	2100      	movs	r1, #0
    1876:	6833      	ldr	r3, [r6, #0]
    1878:	200a      	movs	r0, #10
    187a:	f7ff fc99 	bl	11b0 <io>
	ptr += quant;
    187e:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    1880:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    1882:	4403      	add	r3, r0
	len -= quant;
    1884:	1a24      	subs	r4, r4, r0
	ptr += quant;
    1886:	6033      	str	r3, [r6, #0]
	len -= quant;
    1888:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    188a:	2c00      	cmp	r4, #0
    188c:	d1ef      	bne.n	186e <__outserial+0x2e>
		ufree (data);
    188e:	4628      	mov	r0, r5
    1890:	f7ff fd04 	bl	129c <__pi_free>
		finish;
    1894:	4620      	mov	r0, r4
    1896:	f7ff fd25 	bl	12e4 <kill>
    189a:	e7e8      	b.n	186e <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    189c:	786b      	ldrb	r3, [r5, #1]
    189e:	3303      	adds	r3, #3
    18a0:	6023      	str	r3, [r4, #0]
    18a2:	e7e2      	b.n	186a <__outserial+0x2a>
    18a4:	200000a8 	andcs	r0, r0, r8, lsr #1
    18a8:	20000060 	andcs	r0, r0, r0, rrx
    18ac:	2000005c 	andcs	r0, r0, ip, asr r0

000018b0 <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    18b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    18b2:	4d42      	ldr	r5, [pc, #264]	; (19bc <__inserial+0x10c>)
    18b4:	682a      	ldr	r2, [r5, #0]
    18b6:	6894      	ldr	r4, [r2, #8]
    18b8:	2803      	cmp	r0, #3
    18ba:	d87a      	bhi.n	19b2 <__inserial+0x102>
    18bc:	e8df f000 	tbb	[pc, r0]
    18c0:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    18c4:	4b3e      	ldr	r3, [pc, #248]	; (19c0 <__inserial+0x110>)
    18c6:	681b      	ldr	r3, [r3, #0]
    18c8:	b113      	cbz	r3, 18d0 <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    18ca:	2000      	movs	r0, #0
    18cc:	f7ff fd0a 	bl	12e4 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    18d0:	2040      	movs	r0, #64	; 0x40
    18d2:	f7ff fd2f 	bl	1334 <__pi_malloc>
    18d6:	4b3b      	ldr	r3, [pc, #236]	; (19c4 <__inserial+0x114>)
    18d8:	4604      	mov	r4, r0
    18da:	6018      	str	r0, [r3, #0]
    18dc:	b918      	cbnz	r0, 18e6 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    18de:	f7ff fd97 	bl	1410 <__pi_waitmem>
		release;
    18e2:	f7ff f98f 	bl	c04 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    18e6:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    18e8:	682b      	ldr	r3, [r5, #0]
    18ea:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    18ec:	4b36      	ldr	r3, [pc, #216]	; (19c8 <__inserial+0x118>)
    18ee:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    18f0:	2001      	movs	r0, #1
    18f2:	2200      	movs	r2, #0
    18f4:	4d33      	ldr	r5, [pc, #204]	; (19c4 <__inserial+0x114>)
    18f6:	9000      	str	r0, [sp, #0]
    18f8:	682b      	ldr	r3, [r5, #0]
    18fa:	4611      	mov	r1, r2
    18fc:	f7ff fc58 	bl	11b0 <io>
	if (ptr == (char*) data) { // new line
    1900:	682b      	ldr	r3, [r5, #0]
    1902:	42a3      	cmp	r3, r4
    1904:	d10d      	bne.n	1922 <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    1906:	7823      	ldrb	r3, [r4, #0]
    1908:	b923      	cbnz	r3, 1914 <__inserial+0x64>
			ptr++;
    190a:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    190c:	2002      	movs	r0, #2
			ptr++;
    190e:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    1910:	f7ff fbac 	bl	106c <proceed>
		}

		if (*ptr < 0x20)
    1914:	682b      	ldr	r3, [r5, #0]
    1916:	781b      	ldrb	r3, [r3, #0]
    1918:	2b1f      	cmp	r3, #31
    191a:	d802      	bhi.n	1922 <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    191c:	2001      	movs	r0, #1
    191e:	f7ff fba5 	bl	106c <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    1922:	682b      	ldr	r3, [r5, #0]
    1924:	781a      	ldrb	r2, [r3, #0]
    1926:	2a0a      	cmp	r2, #10
    1928:	d001      	beq.n	192e <__inserial+0x7e>
    192a:	2a0d      	cmp	r2, #13
    192c:	d105      	bne.n	193a <__inserial+0x8a>
		*ptr = '\0';
    192e:	2000      	movs	r0, #0
    1930:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    1932:	4b23      	ldr	r3, [pc, #140]	; (19c0 <__inserial+0x110>)
    1934:	601c      	str	r4, [r3, #0]
		finish;
    1936:	f7ff fcd5 	bl	12e4 <kill>
	}

	if (len) {
    193a:	4923      	ldr	r1, [pc, #140]	; (19c8 <__inserial+0x118>)
    193c:	680b      	ldr	r3, [r1, #0]
    193e:	b123      	cbz	r3, 194a <__inserial+0x9a>
		ptr++;
    1940:	682a      	ldr	r2, [r5, #0]
		len--;
    1942:	3b01      	subs	r3, #1
		ptr++;
    1944:	3201      	adds	r2, #1
    1946:	602a      	str	r2, [r5, #0]
		len--;
    1948:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    194a:	2001      	movs	r0, #1
    194c:	f7ff fb8e 	bl	106c <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    1950:	2301      	movs	r3, #1
    1952:	2200      	movs	r2, #0
    1954:	4d1b      	ldr	r5, [pc, #108]	; (19c4 <__inserial+0x114>)
    1956:	9300      	str	r3, [sp, #0]
    1958:	4611      	mov	r1, r2
    195a:	682b      	ldr	r3, [r5, #0]
    195c:	2002      	movs	r0, #2
    195e:	f7ff fc27 	bl	11b0 <io>
	len -= 2;
    1962:	4819      	ldr	r0, [pc, #100]	; (19c8 <__inserial+0x118>)
    1964:	6803      	ldr	r3, [r0, #0]
    1966:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    1968:	682b      	ldr	r3, [r5, #0]
    196a:	f813 1b01 	ldrb.w	r1, [r3], #1
    196e:	3101      	adds	r1, #1
		len = *ptr + 1;
    1970:	4291      	cmp	r1, r2
    1972:	bfd4      	ite	le
    1974:	6001      	strle	r1, [r0, #0]
    1976:	6002      	strgt	r2, [r0, #0]
	ptr++;
    1978:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    197a:	2200      	movs	r2, #0
    197c:	4f12      	ldr	r7, [pc, #72]	; (19c8 <__inserial+0x118>)
    197e:	4d11      	ldr	r5, [pc, #68]	; (19c4 <__inserial+0x114>)
    1980:	883b      	ldrh	r3, [r7, #0]
    1982:	4611      	mov	r1, r2
    1984:	9300      	str	r3, [sp, #0]
    1986:	682b      	ldr	r3, [r5, #0]
    1988:	2003      	movs	r0, #3
    198a:	f7ff fc11 	bl	11b0 <io>
	len -= quant;
    198e:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1990:	4606      	mov	r6, r0
	len -= quant;
    1992:	1a18      	subs	r0, r3, r0
    1994:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1996:	b918      	cbnz	r0, 19a0 <__inserial+0xf0>
		__inpline = (char*)data;
    1998:	4b09      	ldr	r3, [pc, #36]	; (19c0 <__inserial+0x110>)
    199a:	601c      	str	r4, [r3, #0]
		finish;
    199c:	f7ff fca2 	bl	12e4 <kill>
	}
	ptr += quant;
    19a0:	6828      	ldr	r0, [r5, #0]
    19a2:	4430      	add	r0, r6
    19a4:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    19a6:	2003      	movs	r0, #3

endstrand
    19a8:	b003      	add	sp, #12
    19aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    19ae:	f7ff bb5d 	b.w	106c <proceed>
endstrand
    19b2:	b003      	add	sp, #12
    19b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    19b8:	f7ff baea 	b.w	f90 <__pi_badstate>
    19bc:	200000a8 	andcs	r0, r0, r8, lsr #1
    19c0:	20000064 	andcs	r0, r0, r4, rrx
    19c4:	2000006c 	andcs	r0, r0, ip, rrx
    19c8:	20000068 	andcs	r0, r0, r8, rrx

000019cc <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    19cc:	f8dc 2000 	ldr.w	r2, [ip]
    19d0:	b132      	cbz	r2, 19e0 <outc.5724+0x14>
    19d2:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    19d6:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    19da:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    19dc:	bf88      	it	hi
    19de:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    19e0:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    19e4:	3301      	adds	r3, #1
    19e6:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    19ea:	4770      	bx	lr

000019ec <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    19f0:	461c      	mov	r4, r3
    19f2:	ab0c      	add	r3, sp, #48	; 0x30
    19f4:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    19f6:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    19f8:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    19fa:	4f86      	ldr	r7, [pc, #536]	; (1c14 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19fc:	9001      	str	r0, [sp, #4]
    19fe:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    1a02:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1a06:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    1a0a:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    1a0e:	d118      	bne.n	1a42 <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    1a10:	f892 9001 	ldrb.w	r9, [r2, #1]
    1a14:	1c95      	adds	r5, r2, #2
				outc ('\\');
    1a16:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    1a1a:	f1b9 0f00 	cmp.w	r9, #0
    1a1e:	d10b      	bne.n	1a38 <__pi_vfparse+0x4c>
				outc ('\\');
    1a20:	205c      	movs	r0, #92	; 0x5c
    1a22:	f7ff ffd3 	bl	19cc <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    1a26:	4648      	mov	r0, r9
    1a28:	f10d 0c04 	add.w	ip, sp, #4
    1a2c:	f7ff ffce 	bl	19cc <outc.5724>
			if (c == '\0')
    1a30:	f1b9 0f00 	cmp.w	r9, #0
    1a34:	d103      	bne.n	1a3e <__pi_vfparse+0x52>
    1a36:	e027      	b.n	1a88 <__pi_vfparse+0x9c>
			outc (c);
    1a38:	4648      	mov	r0, r9
				outc (val);
    1a3a:	f7ff ffc7 	bl	19cc <outc.5724>
				val = (word) va_arg (ap, aword);
    1a3e:	462a      	mov	r2, r5
    1a40:	e7e1      	b.n	1a06 <__pi_vfparse+0x1a>
		if (c == '%') {
    1a42:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    1a46:	f040 80e2 	bne.w	1c0e <__pi_vfparse+0x222>
			c = *fm++;
    1a4a:	f892 8001 	ldrb.w	r8, [r2, #1]
    1a4e:	1c95      	adds	r5, r2, #2
			switch (c) {
    1a50:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    1a54:	f000 80cd 	beq.w	1bf2 <__pi_vfparse+0x206>
    1a58:	d81b      	bhi.n	1a92 <__pi_vfparse+0xa6>
    1a5a:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    1a5e:	d033      	beq.n	1ac8 <__pi_vfparse+0xdc>
    1a60:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    1a64:	d067      	beq.n	1b36 <__pi_vfparse+0x14a>
    1a66:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    1a6a:	f000 80bc 	beq.w	1be6 <__pi_vfparse+0x1fa>
				outc ('%');
    1a6e:	2025      	movs	r0, #37	; 0x25
    1a70:	f10d 0c04 	add.w	ip, sp, #4
    1a74:	f7ff ffaa 	bl	19cc <outc.5724>
				outc (c);
    1a78:	4640      	mov	r0, r8
    1a7a:	f10d 0c04 	add.w	ip, sp, #4
    1a7e:	f7ff ffa5 	bl	19cc <outc.5724>
				if (c == '\0')
    1a82:	f1b8 0f00 	cmp.w	r8, #0
    1a86:	d1da      	bne.n	1a3e <__pi_vfparse+0x52>
Ret:
				return d;
    1a88:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1a8c:	b004      	add	sp, #16
    1a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    1a92:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1a96:	d017      	beq.n	1ac8 <__pi_vfparse+0xdc>
    1a98:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1a9c:	d1e7      	bne.n	1a6e <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    1a9e:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    1aa2:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1aa6:	fa1f f983 	uxth.w	r9, r3
    1aaa:	fa49 f308 	asr.w	r3, r9, r8
    1aae:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    1ab2:	5cf8      	ldrb	r0, [r7, r3]
    1ab4:	f10d 0c04 	add.w	ip, sp, #4
    1ab8:	f7ff ff88 	bl	19cc <outc.5724>
					if (i == 0)
    1abc:	f1b8 0f00 	cmp.w	r8, #0
    1ac0:	d0bd      	beq.n	1a3e <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    1ac2:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1ac6:	e7f0      	b.n	1aaa <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1ac8:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1acc:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    1ad0:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1ad4:	d10a      	bne.n	1aec <__pi_vfparse+0x100>
    1ad6:	041b      	lsls	r3, r3, #16
    1ad8:	d508      	bpl.n	1aec <__pi_vfparse+0x100>
					outc ('-');
    1ada:	202d      	movs	r0, #45	; 0x2d
    1adc:	f10d 0c04 	add.w	ip, sp, #4
    1ae0:	f7ff ff74 	bl	19cc <outc.5724>
					val = (~val) + 1;
    1ae4:	f1c9 0900 	rsb	r9, r9, #0
    1ae8:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    1aec:	2305      	movs	r3, #5
				enci (10000);
    1aee:	f242 7810 	movw	r8, #10000	; 0x2710
    1af2:	fbb9 f0f8 	udiv	r0, r9, r8
    1af6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1afa:	d103      	bne.n	1b04 <__pi_vfparse+0x118>
    1afc:	3b01      	subs	r3, #1
    1afe:	d117      	bne.n	1b30 <__pi_vfparse+0x144>
    1b00:	f04f 0801 	mov.w	r8, #1
    1b04:	fa1f fa80 	uxth.w	sl, r0
    1b08:	f10d 0c04 	add.w	ip, sp, #4
    1b0c:	3030      	adds	r0, #48	; 0x30
    1b0e:	f7ff ff5d 	bl	19cc <outc.5724>
    1b12:	fbb8 f3f6 	udiv	r3, r8, r6
    1b16:	fb08 991a 	mls	r9, r8, sl, r9
    1b1a:	f1b8 0f09 	cmp.w	r8, #9
    1b1e:	fa1f f989 	uxth.w	r9, r9
    1b22:	b29b      	uxth	r3, r3
    1b24:	d98b      	bls.n	1a3e <__pi_vfparse+0x52>
    1b26:	fbb9 f0f3 	udiv	r0, r9, r3
    1b2a:	4698      	mov	r8, r3
    1b2c:	b2c0      	uxtb	r0, r0
    1b2e:	e7e9      	b.n	1b04 <__pi_vfparse+0x118>
    1b30:	fbb8 f8f6 	udiv	r8, r8, r6
    1b34:	e7dd      	b.n	1af2 <__pi_vfparse+0x106>
				c = *fm;
    1b36:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    1b38:	2b64      	cmp	r3, #100	; 0x64
    1b3a:	d001      	beq.n	1b40 <__pi_vfparse+0x154>
    1b3c:	2b75      	cmp	r3, #117	; 0x75
    1b3e:	d132      	bne.n	1ba6 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    1b40:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    1b42:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    1b46:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    1b4a:	d109      	bne.n	1b60 <__pi_vfparse+0x174>
    1b4c:	f1ba 0f00 	cmp.w	sl, #0
    1b50:	da06      	bge.n	1b60 <__pi_vfparse+0x174>
						outc ('-');
    1b52:	202d      	movs	r0, #45	; 0x2d
    1b54:	f10d 0c04 	add.w	ip, sp, #4
    1b58:	f7ff ff38 	bl	19cc <outc.5724>
						val = (~val) + 1;
    1b5c:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    1b60:	230a      	movs	r3, #10
					enci (1000000000UL);
    1b62:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1c18 <__pi_vfparse+0x22c>
    1b66:	fbba f9f8 	udiv	r9, sl, r8
    1b6a:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    1b6e:	d103      	bne.n	1b78 <__pi_vfparse+0x18c>
    1b70:	3b01      	subs	r3, #1
    1b72:	d115      	bne.n	1ba0 <__pi_vfparse+0x1b4>
    1b74:	f04f 0801 	mov.w	r8, #1
    1b78:	f10d 0c04 	add.w	ip, sp, #4
    1b7c:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1b80:	f7ff ff24 	bl	19cc <outc.5724>
    1b84:	f1b8 0f09 	cmp.w	r8, #9
    1b88:	fbb8 f3f6 	udiv	r3, r8, r6
    1b8c:	fb08 aa19 	mls	sl, r8, r9, sl
    1b90:	f67f af55 	bls.w	1a3e <__pi_vfparse+0x52>
    1b94:	fbba f9f3 	udiv	r9, sl, r3
    1b98:	4698      	mov	r8, r3
    1b9a:	fa5f f989 	uxtb.w	r9, r9
    1b9e:	e7eb      	b.n	1b78 <__pi_vfparse+0x18c>
    1ba0:	fbb8 f8f6 	udiv	r8, r8, r6
    1ba4:	e7df      	b.n	1b66 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1ba6:	2b78      	cmp	r3, #120	; 0x78
    1ba8:	d114      	bne.n	1bd4 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1baa:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1bae:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1bb2:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1bb4:	fa29 f308 	lsr.w	r3, r9, r8
    1bb8:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1bbc:	5cf8      	ldrb	r0, [r7, r3]
    1bbe:	f10d 0c04 	add.w	ip, sp, #4
    1bc2:	f7ff ff03 	bl	19cc <outc.5724>
						if (i == 0)
    1bc6:	f1b8 0f00 	cmp.w	r8, #0
    1bca:	f43f af38 	beq.w	1a3e <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1bce:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1bd2:	e7ef      	b.n	1bb4 <__pi_vfparse+0x1c8>
					outc ('%');
    1bd4:	4648      	mov	r0, r9
    1bd6:	f10d 0c04 	add.w	ip, sp, #4
    1bda:	f7ff fef7 	bl	19cc <outc.5724>
					outc ('l');
    1bde:	4640      	mov	r0, r8
    1be0:	f10d 0c04 	add.w	ip, sp, #4
    1be4:	e729      	b.n	1a3a <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1be6:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1bea:	f10d 0c04 	add.w	ip, sp, #4
    1bee:	b280      	uxth	r0, r0
    1bf0:	e723      	b.n	1a3a <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1bf2:	f854 3b04 	ldr.w	r3, [r4], #4
    1bf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1bfa:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1bfe:	2800      	cmp	r0, #0
    1c00:	f43f af1d 	beq.w	1a3e <__pi_vfparse+0x52>
					outc (*st);
    1c04:	f10d 0c04 	add.w	ip, sp, #4
    1c08:	f7ff fee0 	bl	19cc <outc.5724>
					st++;
    1c0c:	e7f5      	b.n	1bfa <__pi_vfparse+0x20e>
		c = *fm++;
    1c0e:	1c55      	adds	r5, r2, #1
    1c10:	e709      	b.n	1a26 <__pi_vfparse+0x3a>
    1c12:	bf00      	nop
    1c14:	00002de0 	andeq	r2, r0, r0, ror #27
    1c18:	3b9aca00 	blcc	fe6b4420 <_estack+0xde6af420>

00001c1c <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c20:	460e      	mov	r6, r1
    1c22:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1c24:	4604      	mov	r4, r0
    1c26:	b140      	cbz	r0, 1c3a <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1c28:	4613      	mov	r3, r2
    1c2a:	460a      	mov	r2, r1
    1c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1c30:	f7ff fedc 	bl	19ec <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1c34:	4620      	mov	r0, r4
    1c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1c3a:	4608      	mov	r0, r1
    1c3c:	f7ff fa94 	bl	1168 <__pi_strlen>
    1c40:	f100 0511 	add.w	r5, r0, #17
    1c44:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1c46:	4628      	mov	r0, r5
    1c48:	f7ff fb74 	bl	1334 <__pi_malloc>
    1c4c:	4604      	mov	r4, r0
    1c4e:	2800      	cmp	r0, #0
    1c50:	d0f0      	beq.n	1c34 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1c52:	463b      	mov	r3, r7
    1c54:	4632      	mov	r2, r6
    1c56:	4629      	mov	r1, r5
    1c58:	f7ff fec8 	bl	19ec <__pi_vfparse>
    1c5c:	4285      	cmp	r5, r0
    1c5e:	4680      	mov	r8, r0
    1c60:	d2e8      	bcs.n	1c34 <vform+0x18>
		ufree (res);
    1c62:	4620      	mov	r0, r4
    1c64:	f7ff fb1a 	bl	129c <__pi_free>
		goto Again;
    1c68:	4645      	mov	r5, r8
    1c6a:	e7ec      	b.n	1c46 <vform+0x2a>

00001c6c <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1c6c:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1c72:	2800      	cmp	r0, #0
    1c74:	f000 81b5 	beq.w	1fe2 <vscan+0x376>
    1c78:	2900      	cmp	r1, #0
    1c7a:	f000 81b4 	beq.w	1fe6 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1c7e:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1c80:	270a      	movs	r7, #10
    1c82:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1c84:	f8df c370 	ldr.w	ip, [pc, #880]	; 1ff8 <vscan+0x38c>
    1c88:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1c8a:	f811 0b01 	ldrb.w	r0, [r1], #1
    1c8e:	b170      	cbz	r0, 1cae <vscan+0x42>
		if (*fmt++ != '%')
    1c90:	2825      	cmp	r0, #37	; 0x25
    1c92:	d1f9      	bne.n	1c88 <vscan+0x1c>
		switch (*fmt++) {
    1c94:	7870      	ldrb	r0, [r6, #1]
    1c96:	1cb1      	adds	r1, r6, #2
    1c98:	286c      	cmp	r0, #108	; 0x6c
    1c9a:	f000 80e1 	beq.w	1e60 <vscan+0x1f4>
    1c9e:	d809      	bhi.n	1cb4 <vscan+0x48>
    1ca0:	2863      	cmp	r0, #99	; 0x63
    1ca2:	f000 8184 	beq.w	1fae <vscan+0x342>
    1ca6:	2864      	cmp	r0, #100	; 0x64
    1ca8:	d043      	beq.n	1d32 <vscan+0xc6>
    1caa:	2800      	cmp	r0, #0
    1cac:	d1ec      	bne.n	1c88 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1cae:	4620      	mov	r0, r4
    1cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1cb4:	2875      	cmp	r0, #117	; 0x75
    1cb6:	d074      	beq.n	1da2 <vscan+0x136>
    1cb8:	2878      	cmp	r0, #120	; 0x78
    1cba:	f000 8098 	beq.w	1dee <vscan+0x182>
    1cbe:	2873      	cmp	r0, #115	; 0x73
    1cc0:	d1e2      	bne.n	1c88 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1cc2:	7818      	ldrb	r0, [r3, #0]
    1cc4:	461e      	mov	r6, r3
    1cc6:	f1a0 0e09 	sub.w	lr, r0, #9
    1cca:	fa5f fe8e 	uxtb.w	lr, lr
    1cce:	f1be 0f17 	cmp.w	lr, #23
    1cd2:	4698      	mov	r8, r3
    1cd4:	f103 0301 	add.w	r3, r3, #1
    1cd8:	f240 8173 	bls.w	1fc2 <vscan+0x356>
			if (*buf == '\0')
    1cdc:	2800      	cmp	r0, #0
    1cde:	d0e6      	beq.n	1cae <vscan+0x42>
			if (*buf != ',') {
    1ce0:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1ce2:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1ce6:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1cea:	d00e      	beq.n	1d0a <vscan+0x9e>
    1cec:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1cee:	f818 3b01 	ldrb.w	r3, [r8], #1
    1cf2:	f1a3 0009 	sub.w	r0, r3, #9
    1cf6:	2801      	cmp	r0, #1
    1cf8:	d907      	bls.n	1d0a <vscan+0x9e>
    1cfa:	2b0d      	cmp	r3, #13
    1cfc:	d005      	beq.n	1d0a <vscan+0x9e>
    1cfe:	2b2c      	cmp	r3, #44	; 0x2c
    1d00:	d003      	beq.n	1d0a <vscan+0x9e>
    1d02:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1d06:	f040 8163 	bne.w	1fd0 <vscan+0x364>
			while (isspace (*buf)) buf++;
    1d0a:	f896 8000 	ldrb.w	r8, [r6]
    1d0e:	4633      	mov	r3, r6
    1d10:	f1a8 0009 	sub.w	r0, r8, #9
    1d14:	b2c0      	uxtb	r0, r0
    1d16:	2817      	cmp	r0, #23
    1d18:	f106 0601 	add.w	r6, r6, #1
    1d1c:	f240 815b 	bls.w	1fd6 <vscan+0x36a>
			if (*buf == ',') buf++;
    1d20:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1d24:	bf08      	it	eq
    1d26:	4633      	moveq	r3, r6
			*sap = '\0';
    1d28:	f88e 5000 	strb.w	r5, [lr]
			break;
    1d2c:	e7ac      	b.n	1c88 <vscan+0x1c>
		    case 'd': scani (word); break;
    1d2e:	2e00      	cmp	r6, #0
    1d30:	d0bd      	beq.n	1cae <vscan+0x42>
    1d32:	469e      	mov	lr, r3
    1d34:	f813 6b01 	ldrb.w	r6, [r3], #1
    1d38:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1d3c:	2809      	cmp	r0, #9
    1d3e:	d923      	bls.n	1d88 <vscan+0x11c>
    1d40:	2e2d      	cmp	r6, #45	; 0x2d
    1d42:	d001      	beq.n	1d48 <vscan+0xdc>
    1d44:	2e2b      	cmp	r6, #43	; 0x2b
    1d46:	d1f2      	bne.n	1d2e <vscan+0xc2>
    1d48:	7818      	ldrb	r0, [r3, #0]
    1d4a:	469e      	mov	lr, r3
    1d4c:	3830      	subs	r0, #48	; 0x30
    1d4e:	2809      	cmp	r0, #9
    1d50:	d8ef      	bhi.n	1d32 <vscan+0xc6>
    1d52:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1d56:	f1d9 0800 	rsbs	r8, r9, #0
    1d5a:	eb48 0809 	adc.w	r8, r8, r9
    1d5e:	f852 6b04 	ldr.w	r6, [r2], #4
    1d62:	3401      	adds	r4, #1
    1d64:	8035      	strh	r5, [r6, #0]
    1d66:	f89e 0000 	ldrb.w	r0, [lr]
    1d6a:	4673      	mov	r3, lr
    1d6c:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1d70:	f1b9 0f09 	cmp.w	r9, #9
    1d74:	f10e 0e01 	add.w	lr, lr, #1
    1d78:	d909      	bls.n	1d8e <vscan+0x122>
    1d7a:	f1b8 0f00 	cmp.w	r8, #0
    1d7e:	d183      	bne.n	1c88 <vscan+0x1c>
    1d80:	8830      	ldrh	r0, [r6, #0]
    1d82:	4240      	negs	r0, r0
    1d84:	8030      	strh	r0, [r6, #0]
    1d86:	e77f      	b.n	1c88 <vscan+0x1c>
    1d88:	f04f 0800 	mov.w	r8, #0
    1d8c:	e7e7      	b.n	1d5e <vscan+0xf2>
    1d8e:	8833      	ldrh	r3, [r6, #0]
    1d90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d94:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1d98:	3030      	adds	r0, #48	; 0x30
    1d9a:	8030      	strh	r0, [r6, #0]
    1d9c:	e7e3      	b.n	1d66 <vscan+0xfa>
		    case 'u': scanu (word); break;
    1d9e:	2800      	cmp	r0, #0
    1da0:	d085      	beq.n	1cae <vscan+0x42>
    1da2:	7818      	ldrb	r0, [r3, #0]
    1da4:	461e      	mov	r6, r3
    1da6:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1daa:	f1be 0f09 	cmp.w	lr, #9
    1dae:	f103 0301 	add.w	r3, r3, #1
    1db2:	d8f4      	bhi.n	1d9e <vscan+0x132>
    1db4:	f852 eb04 	ldr.w	lr, [r2], #4
    1db8:	3401      	adds	r4, #1
    1dba:	f8ae 5000 	strh.w	r5, [lr]
    1dbe:	7830      	ldrb	r0, [r6, #0]
    1dc0:	4633      	mov	r3, r6
    1dc2:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1dc6:	f1b8 0f09 	cmp.w	r8, #9
    1dca:	f106 0601 	add.w	r6, r6, #1
    1dce:	f63f af5b 	bhi.w	1c88 <vscan+0x1c>
    1dd2:	f8be 3000 	ldrh.w	r3, [lr]
    1dd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1dda:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1dde:	3830      	subs	r0, #48	; 0x30
    1de0:	f8ae 0000 	strh.w	r0, [lr]
    1de4:	e7eb      	b.n	1dbe <vscan+0x152>
		    case 'x': scanx (word); break;
    1de6:	f1be 0f00 	cmp.w	lr, #0
    1dea:	f43f af60 	beq.w	1cae <vscan+0x42>
    1dee:	f893 e000 	ldrb.w	lr, [r3]
    1df2:	461e      	mov	r6, r3
    1df4:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1df8:	2809      	cmp	r0, #9
    1dfa:	f103 0301 	add.w	r3, r3, #1
    1dfe:	d904      	bls.n	1e0a <vscan+0x19e>
    1e00:	f02e 0020 	bic.w	r0, lr, #32
    1e04:	3841      	subs	r0, #65	; 0x41
    1e06:	2805      	cmp	r0, #5
    1e08:	d8ed      	bhi.n	1de6 <vscan+0x17a>
    1e0a:	f852 eb04 	ldr.w	lr, [r2], #4
    1e0e:	3401      	adds	r4, #1
    1e10:	f8ae 5000 	strh.w	r5, [lr]
    1e14:	f106 0805 	add.w	r8, r6, #5
    1e18:	f896 9000 	ldrb.w	r9, [r6]
    1e1c:	4633      	mov	r3, r6
    1e1e:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1e22:	b2c0      	uxtb	r0, r0
    1e24:	2809      	cmp	r0, #9
    1e26:	f106 0601 	add.w	r6, r6, #1
    1e2a:	f240 80de 	bls.w	1fea <vscan+0x37e>
    1e2e:	f029 0020 	bic.w	r0, r9, #32
    1e32:	3841      	subs	r0, #65	; 0x41
    1e34:	2805      	cmp	r0, #5
    1e36:	f63f af27 	bhi.w	1c88 <vscan+0x1c>
    1e3a:	4546      	cmp	r6, r8
    1e3c:	f43f af24 	beq.w	1c88 <vscan+0x1c>
    1e40:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1e44:	2b05      	cmp	r3, #5
    1e46:	bf94      	ite	ls
    1e48:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1e4c:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1e50:	b2c0      	uxtb	r0, r0
    1e52:	f8be 3000 	ldrh.w	r3, [lr]
    1e56:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1e5a:	f8ae 0000 	strh.w	r0, [lr]
    1e5e:	e7db      	b.n	1e18 <vscan+0x1ac>
			switch (*fmt++) {
    1e60:	78b0      	ldrb	r0, [r6, #2]
    1e62:	1cf1      	adds	r1, r6, #3
    1e64:	2875      	cmp	r0, #117	; 0x75
    1e66:	d07d      	beq.n	1f64 <vscan+0x2f8>
    1e68:	d831      	bhi.n	1ece <vscan+0x262>
    1e6a:	2800      	cmp	r0, #0
    1e6c:	f43f af1f 	beq.w	1cae <vscan+0x42>
    1e70:	2864      	cmp	r0, #100	; 0x64
    1e72:	f47f af09 	bne.w	1c88 <vscan+0x1c>
    1e76:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1e78:	f813 6b01 	ldrb.w	r6, [r3], #1
    1e7c:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1e80:	2809      	cmp	r0, #9
    1e82:	d962      	bls.n	1f4a <vscan+0x2de>
    1e84:	2e2d      	cmp	r6, #45	; 0x2d
    1e86:	d001      	beq.n	1e8c <vscan+0x220>
    1e88:	2e2b      	cmp	r6, #43	; 0x2b
    1e8a:	d15b      	bne.n	1f44 <vscan+0x2d8>
    1e8c:	7818      	ldrb	r0, [r3, #0]
    1e8e:	4698      	mov	r8, r3
    1e90:	3830      	subs	r0, #48	; 0x30
    1e92:	2809      	cmp	r0, #9
    1e94:	d8ef      	bhi.n	1e76 <vscan+0x20a>
    1e96:	3e2d      	subs	r6, #45	; 0x2d
    1e98:	4270      	negs	r0, r6
    1e9a:	4170      	adcs	r0, r6
    1e9c:	f852 eb04 	ldr.w	lr, [r2], #4
    1ea0:	3401      	adds	r4, #1
    1ea2:	f8ce 5000 	str.w	r5, [lr]
    1ea6:	f898 6000 	ldrb.w	r6, [r8]
    1eaa:	4643      	mov	r3, r8
    1eac:	3e30      	subs	r6, #48	; 0x30
    1eae:	fa5f f986 	uxtb.w	r9, r6
    1eb2:	f1b9 0f09 	cmp.w	r9, #9
    1eb6:	f108 0801 	add.w	r8, r8, #1
    1eba:	d948      	bls.n	1f4e <vscan+0x2e2>
    1ebc:	2800      	cmp	r0, #0
    1ebe:	f47f aee3 	bne.w	1c88 <vscan+0x1c>
    1ec2:	f8de 0000 	ldr.w	r0, [lr]
    1ec6:	4240      	negs	r0, r0
    1ec8:	f8ce 0000 	str.w	r0, [lr]
    1ecc:	e6dc      	b.n	1c88 <vscan+0x1c>
    1ece:	2878      	cmp	r0, #120	; 0x78
    1ed0:	f47f aeda 	bne.w	1c88 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1ed4:	f893 e000 	ldrb.w	lr, [r3]
    1ed8:	461e      	mov	r6, r3
    1eda:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1ede:	2809      	cmp	r0, #9
    1ee0:	f103 0301 	add.w	r3, r3, #1
    1ee4:	d904      	bls.n	1ef0 <vscan+0x284>
    1ee6:	f02e 0020 	bic.w	r0, lr, #32
    1eea:	3841      	subs	r0, #65	; 0x41
    1eec:	2805      	cmp	r0, #5
    1eee:	d85a      	bhi.n	1fa6 <vscan+0x33a>
    1ef0:	f852 eb04 	ldr.w	lr, [r2], #4
    1ef4:	3401      	adds	r4, #1
    1ef6:	f8ce 5000 	str.w	r5, [lr]
    1efa:	f106 0809 	add.w	r8, r6, #9
    1efe:	f896 9000 	ldrb.w	r9, [r6]
    1f02:	4633      	mov	r3, r6
    1f04:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1f08:	b2c0      	uxtb	r0, r0
    1f0a:	2809      	cmp	r0, #9
    1f0c:	f106 0601 	add.w	r6, r6, #1
    1f10:	d96f      	bls.n	1ff2 <vscan+0x386>
    1f12:	f029 0020 	bic.w	r0, r9, #32
    1f16:	3841      	subs	r0, #65	; 0x41
    1f18:	2805      	cmp	r0, #5
    1f1a:	f63f aeb5 	bhi.w	1c88 <vscan+0x1c>
    1f1e:	4546      	cmp	r6, r8
    1f20:	f43f aeb2 	beq.w	1c88 <vscan+0x1c>
    1f24:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1f28:	2b05      	cmp	r3, #5
    1f2a:	bf94      	ite	ls
    1f2c:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1f30:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1f34:	b2c0      	uxtb	r0, r0
    1f36:	f8de 3000 	ldr.w	r3, [lr]
    1f3a:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1f3e:	f8ce 0000 	str.w	r0, [lr]
    1f42:	e7dc      	b.n	1efe <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1f44:	2e00      	cmp	r6, #0
    1f46:	d196      	bne.n	1e76 <vscan+0x20a>
    1f48:	e6b1      	b.n	1cae <vscan+0x42>
    1f4a:	2000      	movs	r0, #0
    1f4c:	e7a6      	b.n	1e9c <vscan+0x230>
    1f4e:	f8de 3000 	ldr.w	r3, [lr]
    1f52:	b2b6      	uxth	r6, r6
    1f54:	437b      	muls	r3, r7
    1f56:	1b9e      	subs	r6, r3, r6
    1f58:	f8ce 6000 	str.w	r6, [lr]
    1f5c:	e7a3      	b.n	1ea6 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1f5e:	2800      	cmp	r0, #0
    1f60:	f43f aea5 	beq.w	1cae <vscan+0x42>
    1f64:	7818      	ldrb	r0, [r3, #0]
    1f66:	461e      	mov	r6, r3
    1f68:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1f6c:	f1be 0f09 	cmp.w	lr, #9
    1f70:	f103 0301 	add.w	r3, r3, #1
    1f74:	d8f3      	bhi.n	1f5e <vscan+0x2f2>
    1f76:	f852 eb04 	ldr.w	lr, [r2], #4
    1f7a:	3401      	adds	r4, #1
    1f7c:	f8ce 5000 	str.w	r5, [lr]
    1f80:	7830      	ldrb	r0, [r6, #0]
    1f82:	4633      	mov	r3, r6
    1f84:	3830      	subs	r0, #48	; 0x30
    1f86:	fa5f f880 	uxtb.w	r8, r0
    1f8a:	f1b8 0f09 	cmp.w	r8, #9
    1f8e:	f106 0601 	add.w	r6, r6, #1
    1f92:	f63f ae79 	bhi.w	1c88 <vscan+0x1c>
    1f96:	f8de 3000 	ldr.w	r3, [lr]
    1f9a:	b280      	uxth	r0, r0
    1f9c:	fb07 0003 	mla	r0, r7, r3, r0
    1fa0:	f8ce 0000 	str.w	r0, [lr]
    1fa4:	e7ec      	b.n	1f80 <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    1fa6:	f1be 0f00 	cmp.w	lr, #0
    1faa:	d193      	bne.n	1ed4 <vscan+0x268>
    1fac:	e67f      	b.n	1cae <vscan+0x42>
			if ((c = *buf++) == '\0')
    1fae:	f813 0b01 	ldrb.w	r0, [r3], #1
    1fb2:	2800      	cmp	r0, #0
    1fb4:	f43f ae7b 	beq.w	1cae <vscan+0x42>
			sap = va_arg (ap, char*);
    1fb8:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    1fbc:	3401      	adds	r4, #1
			*sap = c;
    1fbe:	7030      	strb	r0, [r6, #0]
			break;
    1fc0:	e662      	b.n	1c88 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1fc2:	fa2c fe0e 	lsr.w	lr, ip, lr
    1fc6:	f01e 0f01 	tst.w	lr, #1
    1fca:	f47f ae7a 	bne.w	1cc2 <vscan+0x56>
    1fce:	e687      	b.n	1ce0 <vscan+0x74>
						*sap++ = *buf++;
    1fd0:	f80e 3b01 	strb.w	r3, [lr], #1
    1fd4:	e68a      	b.n	1cec <vscan+0x80>
			while (isspace (*buf)) buf++;
    1fd6:	fa2c f000 	lsr.w	r0, ip, r0
    1fda:	07c0      	lsls	r0, r0, #31
    1fdc:	f53f ae95 	bmi.w	1d0a <vscan+0x9e>
    1fe0:	e6a2      	b.n	1d28 <vscan+0xbc>
		return 0;
    1fe2:	4604      	mov	r4, r0
    1fe4:	e663      	b.n	1cae <vscan+0x42>
    1fe6:	460c      	mov	r4, r1
    1fe8:	e661      	b.n	1cae <vscan+0x42>
		    case 'x': scanx (word); break;
    1fea:	4546      	cmp	r6, r8
    1fec:	f47f af31 	bne.w	1e52 <vscan+0x1e6>
    1ff0:	e64a      	b.n	1c88 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1ff2:	4546      	cmp	r6, r8
    1ff4:	d19f      	bne.n	1f36 <vscan+0x2ca>
    1ff6:	e647      	b.n	1c88 <vscan+0x1c>
    1ff8:	00800013 	addeq	r0, r0, r3, lsl r0

00001ffc <NOROM_AONBatMonTemperatureGetDegC>:
    1ffc:	4b08      	ldr	r3, [pc, #32]	; (2020 <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    1ffe:	6818      	ldr	r0, [r3, #0]
    2000:	4b08      	ldr	r3, [pc, #32]	; (2024 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    2002:	7819      	ldrb	r1, [r3, #0]
    2004:	4b08      	ldr	r3, [pc, #32]	; (2028 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    2006:	681a      	ldr	r2, [r3, #0]
    2008:	f340 0310 	sbfx	r3, r0, #0, #17
    200c:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    2010:	b248      	sxtb	r0, r1
    2012:	4350      	muls	r0, r2
    2014:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    2018:	3080      	adds	r0, #128	; 0x80
    201a:	1200      	asrs	r0, r0, #8
    201c:	4770      	bx	lr
    201e:	bf00      	nop
    2020:	40095030 	andmi	r5, r9, r0, lsr r0
    2024:	5000130c 	andpl	r1, r0, ip, lsl #6
    2028:	40095028 	andmi	r5, r9, r8, lsr #32

0000202c <NOROM_AONRTCCurrent64BitValueGet>:
    202c:	4b03      	ldr	r3, [pc, #12]	; (203c <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    202e:	4904      	ldr	r1, [pc, #16]	; (2040 <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    2030:	681a      	ldr	r2, [r3, #0]
    2032:	6808      	ldr	r0, [r1, #0]
    2034:	6819      	ldr	r1, [r3, #0]
    2036:	4291      	cmp	r1, r2
    2038:	d1f8      	bne.n	202c <NOROM_AONRTCCurrent64BitValueGet>
    203a:	4770      	bx	lr
    203c:	40092008 	andmi	r2, r9, r8
    2040:	4009200c 	andmi	r2, r9, ip

00002044 <NOROM_CPUcpsid>:
    2044:	f3ef 8010 	mrs	r0, PRIMASK
    2048:	b672      	cpsid	i
    204a:	4770      	bx	lr

0000204c <NOROM_CPUcpsie>:
    204c:	f3ef 8010 	mrs	r0, PRIMASK
    2050:	b662      	cpsie	i
    2052:	4770      	bx	lr

00002054 <TrimAfterColdResetWakeupFromShutDown>:
    2054:	b538      	push	{r3, r4, r5, lr}
    2056:	4605      	mov	r5, r0
    2058:	4b26      	ldr	r3, [pc, #152]	; (20f4 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    205a:	2201      	movs	r2, #1
    205c:	601a      	str	r2, [r3, #0]
    205e:	4b26      	ldr	r3, [pc, #152]	; (20f8 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    2060:	681b      	ldr	r3, [r3, #0]
    2062:	2b00      	cmp	r3, #0
    2064:	d0fb      	beq.n	205e <TrimAfterColdResetWakeupFromShutDown+0xa>
    2066:	4b25      	ldr	r3, [pc, #148]	; (20fc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    2068:	22c0      	movs	r2, #192	; 0xc0
    206a:	601a      	str	r2, [r3, #0]
    206c:	4b24      	ldr	r3, [pc, #144]	; (2100 <TrimAfterColdResetWakeupFromShutDown+0xac>)
    206e:	681b      	ldr	r3, [r3, #0]
    2070:	079b      	lsls	r3, r3, #30
    2072:	bf5f      	itttt	pl
    2074:	4b23      	ldrpl	r3, [pc, #140]	; (2104 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    2076:	4a24      	ldrpl	r2, [pc, #144]	; (2108 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    2078:	681b      	ldrpl	r3, [r3, #0]
    207a:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    207e:	bf5c      	itt	pl
    2080:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    2084:	7013      	strbpl	r3, [r2, #0]
    2086:	4b21      	ldr	r3, [pc, #132]	; (210c <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    2088:	2200      	movs	r2, #0
    208a:	601a      	str	r2, [r3, #0]
    208c:	4b20      	ldr	r3, [pc, #128]	; (2110 <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    208e:	681c      	ldr	r4, [r3, #0]
    2090:	4620      	mov	r0, r4
    2092:	f000 f8d9 	bl	2248 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    2096:	4628      	mov	r0, r5
    2098:	4621      	mov	r1, r4
    209a:	f000 fa0d 	bl	24b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    209e:	f240 221d 	movw	r2, #541	; 0x21d
    20a2:	4b1c      	ldr	r3, [pc, #112]	; (2114 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    20a4:	681b      	ldr	r3, [r3, #0]
    20a6:	b29b      	uxth	r3, r3
    20a8:	4293      	cmp	r3, r2
    20aa:	d814      	bhi.n	20d6 <TrimAfterColdResetWakeupFromShutDown+0x82>
    20ac:	4a1a      	ldr	r2, [pc, #104]	; (2118 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    20ae:	6813      	ldr	r3, [r2, #0]
    20b0:	6812      	ldr	r2, [r2, #0]
    20b2:	f3c3 6303 	ubfx	r3, r3, #24, #4
    20b6:	f3c2 4203 	ubfx	r2, r2, #16, #4
    20ba:	b103      	cbz	r3, 20be <TrimAfterColdResetWakeupFromShutDown+0x6a>
    20bc:	3b01      	subs	r3, #1
    20be:	1f91      	subs	r1, r2, #6
    20c0:	2901      	cmp	r1, #1
    20c2:	bf86      	itte	hi
    20c4:	3202      	addhi	r2, #2
    20c6:	f002 020f 	andhi.w	r2, r2, #15
    20ca:	2207      	movls	r2, #7
    20cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    20d0:	4a12      	ldr	r2, [pc, #72]	; (211c <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    20d2:	b2db      	uxtb	r3, r3
    20d4:	7013      	strb	r3, [r2, #0]
    20d6:	4620      	mov	r0, r4
    20d8:	f000 fabc 	bl	2654 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    20dc:	4b10      	ldr	r3, [pc, #64]	; (2120 <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    20de:	2002      	movs	r0, #2
    20e0:	681b      	ldr	r3, [r3, #0]
    20e2:	68db      	ldr	r3, [r3, #12]
    20e4:	4798      	blx	r3
    20e6:	4b05      	ldr	r3, [pc, #20]	; (20fc <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    20e8:	2240      	movs	r2, #64	; 0x40
    20ea:	601a      	str	r2, [r3, #0]
    20ec:	4b0d      	ldr	r3, [pc, #52]	; (2124 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    20ee:	2201      	movs	r2, #1
    20f0:	601a      	str	r2, [r3, #0]
    20f2:	bd38      	pop	{r3, r4, r5, pc}
    20f4:	40091010 	andmi	r1, r9, r0, lsl r0
    20f8:	43220294 			; <UNDEFINED> instruction: 0x43220294
    20fc:	400c6000 	andmi	r6, ip, r0
    2100:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2104:	50003fac 	andpl	r3, r0, ip, lsr #31
    2108:	40086256 	andmi	r6, r8, r6, asr r2
    210c:	40091040 	andmi	r1, r9, r0, asr #32
    2110:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2114:	50001314 	andpl	r1, r0, r4, lsl r3
    2118:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    211c:	40086002 	andmi	r6, r8, r2
    2120:	100001a0 	andne	r0, r0, r0, lsr #3
    2124:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00002128 <NOROM_SetupTrimDevice>:
    2128:	b510      	push	{r4, lr}
    212a:	4b1f      	ldr	r3, [pc, #124]	; (21a8 <NOROM_SetupTrimDevice+0x80>)
    212c:	681c      	ldr	r4, [r3, #0]
    212e:	1c63      	adds	r3, r4, #1
    2130:	bf08      	it	eq
    2132:	2400      	moveq	r4, #0
    2134:	f000 fcde 	bl	2af4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    2138:	4b1c      	ldr	r3, [pc, #112]	; (21ac <NOROM_SetupTrimDevice+0x84>)
    213a:	2200      	movs	r2, #0
    213c:	601a      	str	r2, [r3, #0]
    213e:	4a1c      	ldr	r2, [pc, #112]	; (21b0 <NOROM_SetupTrimDevice+0x88>)
    2140:	2301      	movs	r3, #1
    2142:	6013      	str	r3, [r2, #0]
    2144:	4a1b      	ldr	r2, [pc, #108]	; (21b4 <NOROM_SetupTrimDevice+0x8c>)
    2146:	6013      	str	r3, [r2, #0]
    2148:	f000 fa3e 	bl	25c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    214c:	4b1a      	ldr	r3, [pc, #104]	; (21b8 <NOROM_SetupTrimDevice+0x90>)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	b123      	cbz	r3, 215c <NOROM_SetupTrimDevice+0x34>
    2152:	4b1a      	ldr	r3, [pc, #104]	; (21bc <NOROM_SetupTrimDevice+0x94>)
    2154:	4620      	mov	r0, r4
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	f7ff ff7c 	bl	2054 <TrimAfterColdResetWakeupFromShutDown>
    215c:	4b18      	ldr	r3, [pc, #96]	; (21c0 <NOROM_SetupTrimDevice+0x98>)
    215e:	2200      	movs	r2, #0
    2160:	601a      	str	r2, [r3, #0]
    2162:	4a18      	ldr	r2, [pc, #96]	; (21c4 <NOROM_SetupTrimDevice+0x9c>)
    2164:	6813      	ldr	r3, [r2, #0]
    2166:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    216a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    216e:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    2172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2176:	6013      	str	r3, [r2, #0]
    2178:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    217c:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    2180:	6813      	ldr	r3, [r2, #0]
    2182:	f3c3 3301 	ubfx	r3, r3, #12, #2
    2186:	2b01      	cmp	r3, #1
    2188:	bf01      	itttt	eq
    218a:	6813      	ldreq	r3, [r2, #0]
    218c:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    2190:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2194:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2198:	bf04      	itt	eq
    219a:	6011      	streq	r1, [r2, #0]
    219c:	6013      	streq	r3, [r2, #0]
    219e:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <NOROM_SetupTrimDevice+0xa0>)
    21a0:	681b      	ldr	r3, [r3, #0]
    21a2:	2b00      	cmp	r3, #0
    21a4:	d1fb      	bne.n	219e <NOROM_SetupTrimDevice+0x76>
    21a6:	bd10      	pop	{r4, pc}
    21a8:	5000131c 	andpl	r1, r0, ip, lsl r3
    21ac:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    21b0:	400c605c 	andmi	r6, ip, ip, asr r0
    21b4:	43042208 	movwmi	r2, #16904	; 0x4208
    21b8:	43280180 			; <UNDEFINED> instruction: 0x43280180
    21bc:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    21c0:	4008218c 	andmi	r2, r8, ip, lsl #3
    21c4:	40032048 	andmi	r2, r3, r8, asr #32
    21c8:	4268000c 	rsbmi	r0, r8, #12

000021cc <NOROM_SetupSetVddrLevel>:
    21cc:	b530      	push	{r4, r5, lr}
    21ce:	4b19      	ldr	r3, [pc, #100]	; (2234 <NOROM_SetupSetVddrLevel+0x68>)
    21d0:	681a      	ldr	r2, [r3, #0]
    21d2:	4b19      	ldr	r3, [pc, #100]	; (2238 <NOROM_SetupSetVddrLevel+0x6c>)
    21d4:	f3c2 6204 	ubfx	r2, r2, #24, #5
    21d8:	781b      	ldrb	r3, [r3, #0]
    21da:	2a15      	cmp	r2, #21
    21dc:	f003 031f 	and.w	r3, r3, #31
    21e0:	bf88      	it	hi
    21e2:	3a20      	subhi	r2, #32
    21e4:	2b15      	cmp	r3, #21
    21e6:	bf88      	it	hi
    21e8:	3b20      	subhi	r3, #32
    21ea:	4293      	cmp	r3, r2
    21ec:	d020      	beq.n	2230 <NOROM_SetupSetVddrLevel+0x64>
    21ee:	4913      	ldr	r1, [pc, #76]	; (223c <NOROM_SetupSetVddrLevel+0x70>)
    21f0:	2000      	movs	r0, #0
    21f2:	6008      	str	r0, [r1, #0]
    21f4:	4608      	mov	r0, r1
    21f6:	1ad1      	subs	r1, r2, r3
    21f8:	2902      	cmp	r1, #2
    21fa:	dc05      	bgt.n	2208 <NOROM_SetupSetVddrLevel+0x3c>
    21fc:	f06f 0401 	mvn.w	r4, #1
    2200:	42a1      	cmp	r1, r4
    2202:	bfb8      	it	lt
    2204:	4621      	movlt	r1, r4
    2206:	e000      	b.n	220a <NOROM_SetupSetVddrLevel+0x3e>
    2208:	2102      	movs	r1, #2
    220a:	440b      	add	r3, r1
    220c:	490c      	ldr	r1, [pc, #48]	; (2240 <NOROM_SetupSetVddrLevel+0x74>)
    220e:	4d0d      	ldr	r5, [pc, #52]	; (2244 <NOROM_SetupSetVddrLevel+0x78>)
    2210:	680c      	ldr	r4, [r1, #0]
    2212:	f003 041f 	and.w	r4, r3, #31
    2216:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    221a:	802c      	strh	r4, [r5, #0]
    221c:	4293      	cmp	r3, r2
    221e:	f04f 0401 	mov.w	r4, #1
    2222:	600c      	str	r4, [r1, #0]
    2224:	d1e7      	bne.n	21f6 <NOROM_SetupSetVddrLevel+0x2a>
    2226:	680b      	ldr	r3, [r1, #0]
    2228:	600c      	str	r4, [r1, #0]
    222a:	680b      	ldr	r3, [r1, #0]
    222c:	6004      	str	r4, [r0, #0]
    222e:	680b      	ldr	r3, [r1, #0]
    2230:	bd30      	pop	{r4, r5, pc}
    2232:	bf00      	nop
    2234:	50001388 	andpl	r1, r0, r8, lsl #7
    2238:	40086206 	andmi	r6, r8, r6, lsl #4
    223c:	43200098 			; <UNDEFINED> instruction: 0x43200098
    2240:	4009202c 	andmi	r2, r9, ip, lsr #32
    2244:	4008626c 	andmi	r6, r8, ip, ror #4

00002248 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    2248:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2250:	b510      	push	{r4, lr}
    2252:	4604      	mov	r4, r0
    2254:	d10f      	bne.n	2276 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    2256:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    225a:	4a1e      	ldr	r2, [pc, #120]	; (22d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    225c:	2380      	movs	r3, #128	; 0x80
    225e:	7013      	strb	r3, [r2, #0]
    2260:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    2264:	f802 3c10 	strb.w	r3, [r2, #-16]
    2268:	f7ff ffb0 	bl	21cc <NOROM_SetupSetVddrLevel>
    226c:	4b1a      	ldr	r3, [pc, #104]	; (22d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    226e:	681b      	ldr	r3, [r3, #0]
    2270:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2274:	e003      	b.n	227e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    2276:	4b19      	ldr	r3, [pc, #100]	; (22dc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    2278:	681b      	ldr	r3, [r3, #0]
    227a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    227e:	2b15      	cmp	r3, #21
    2280:	bf88      	it	hi
    2282:	3b20      	subhi	r3, #32
    2284:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2288:	3301      	adds	r3, #1
    228a:	2b15      	cmp	r3, #21
    228c:	dc05      	bgt.n	229a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    228e:	f06f 0209 	mvn.w	r2, #9
    2292:	4293      	cmp	r3, r2
    2294:	bfb8      	it	lt
    2296:	4613      	movlt	r3, r2
    2298:	e000      	b.n	229c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    229a:	2315      	movs	r3, #21
    229c:	4a10      	ldr	r2, [pc, #64]	; (22e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    229e:	f003 031f 	and.w	r3, r3, #31
    22a2:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    22a6:	8013      	strh	r3, [r2, #0]
    22a8:	4b0e      	ldr	r3, [pc, #56]	; (22e4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	f013 0302 	ands.w	r3, r3, #2
    22b0:	bf0a      	itet	eq
    22b2:	4a0d      	ldreq	r2, [pc, #52]	; (22e8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    22b4:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    22b8:	6013      	streq	r3, [r2, #0]
    22ba:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    22be:	4a0b      	ldr	r2, [pc, #44]	; (22ec <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    22c0:	f083 0301 	eor.w	r3, r3, #1
    22c4:	6013      	str	r3, [r2, #0]
    22c6:	f3c4 6480 	ubfx	r4, r4, #26, #1
    22ca:	4b09      	ldr	r3, [pc, #36]	; (22f0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    22cc:	f084 0401 	eor.w	r4, r4, #1
    22d0:	601c      	str	r4, [r3, #0]
    22d2:	bd10      	pop	{r4, pc}
    22d4:	40086225 	andmi	r6, r8, r5, lsr #4
    22d8:	50001388 	andpl	r1, r0, r8, lsl #7
    22dc:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    22e0:	4008626e 	andmi	r6, r8, lr, ror #4
    22e4:	40090000 	andmi	r0, r9, r0
    22e8:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    22ec:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    22f0:	43200008 			; <UNDEFINED> instruction: 0x43200008

000022f4 <NOROM_SetupGetTrimForAnabypassValue1>:
    22f4:	4b15      	ldr	r3, [pc, #84]	; (234c <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    22f6:	0381      	lsls	r1, r0, #14
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	f3c3 6283 	ubfx	r2, r3, #26, #4
    22fe:	f3c3 238f 	ubfx	r3, r3, #10, #16
    2302:	d41f      	bmi.n	2344 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2304:	f340 2007 	sbfx	r0, r0, #8, #8
    2308:	2800      	cmp	r0, #0
    230a:	da19      	bge.n	2340 <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    230c:	085b      	lsrs	r3, r3, #1
    230e:	d105      	bne.n	231c <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    2310:	0852      	lsrs	r2, r2, #1
    2312:	bf06      	itte	eq
    2314:	2301      	moveq	r3, #1
    2316:	461a      	moveq	r2, r3
    2318:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    231c:	3001      	adds	r0, #1
    231e:	e7f3      	b.n	2308 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    2320:	005b      	lsls	r3, r3, #1
    2322:	f043 0301 	orr.w	r3, r3, #1
    2326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    232a:	d308      	bcc.n	233e <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    232c:	0052      	lsls	r2, r2, #1
    232e:	f042 0201 	orr.w	r2, r2, #1
    2332:	2a0f      	cmp	r2, #15
    2334:	bf86      	itte	hi
    2336:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    233a:	220f      	movhi	r2, #15
    233c:	2301      	movls	r3, #1
    233e:	3801      	subs	r0, #1
    2340:	2800      	cmp	r0, #0
    2342:	d1ed      	bne.n	2320 <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    2344:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    2348:	4770      	bx	lr
    234a:	bf00      	nop
    234c:	50001350 	andpl	r1, r0, r0, asr r3

00002350 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    2350:	4a04      	ldr	r2, [pc, #16]	; (2364 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    2352:	6813      	ldr	r3, [r2, #0]
    2354:	6810      	ldr	r0, [r2, #0]
    2356:	f3c3 0387 	ubfx	r3, r3, #2, #8
    235a:	f000 0003 	and.w	r0, r0, #3
    235e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    2362:	4770      	bx	lr
    2364:	50001350 	andpl	r1, r0, r0, asr r3

00002368 <NOROM_SetupGetTrimForAmpcompTh2>:
    2368:	4b02      	ldr	r3, [pc, #8]	; (2374 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    236a:	6818      	ldr	r0, [r3, #0]
    236c:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    2370:	4770      	bx	lr
    2372:	bf00      	nop
    2374:	50001374 	andpl	r1, r0, r4, ror r3

00002378 <NOROM_SetupGetTrimForAmpcompTh1>:
    2378:	4b03      	ldr	r3, [pc, #12]	; (2388 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    237a:	6818      	ldr	r0, [r3, #0]
    237c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2380:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2384:	4770      	bx	lr
    2386:	bf00      	nop
    2388:	50001370 	andpl	r1, r0, r0, ror r3

0000238c <NOROM_SetupGetTrimForAmpcompCtrl>:
    238c:	b570      	push	{r4, r5, r6, lr}
    238e:	4b15      	ldr	r3, [pc, #84]	; (23e4 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    2390:	4915      	ldr	r1, [pc, #84]	; (23e8 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    2392:	681c      	ldr	r4, [r3, #0]
    2394:	6809      	ldr	r1, [r1, #0]
    2396:	f3c4 5203 	ubfx	r2, r4, #20, #4
    239a:	f011 0501 	ands.w	r5, r1, #1
    239e:	f3c4 4303 	ubfx	r3, r4, #16, #4
    23a2:	d113      	bne.n	23cc <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    23a4:	4911      	ldr	r1, [pc, #68]	; (23ec <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    23a6:	6809      	ldr	r1, [r1, #0]
    23a8:	f341 2603 	sbfx	r6, r1, #8, #4
    23ac:	18b2      	adds	r2, r6, r2
    23ae:	d403      	bmi.n	23b8 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    23b0:	2a0f      	cmp	r2, #15
    23b2:	bfa8      	it	ge
    23b4:	220f      	movge	r2, #15
    23b6:	e000      	b.n	23ba <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    23b8:	462a      	mov	r2, r5
    23ba:	f341 3103 	sbfx	r1, r1, #12, #4
    23be:	18cb      	adds	r3, r1, r3
    23c0:	d403      	bmi.n	23ca <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    23c2:	2b0f      	cmp	r3, #15
    23c4:	bfa8      	it	ge
    23c6:	230f      	movge	r3, #15
    23c8:	e000      	b.n	23cc <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    23ca:	2300      	movs	r3, #0
    23cc:	b2a1      	uxth	r1, r4
    23ce:	2821      	cmp	r0, #33	; 0x21
    23d0:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    23d4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    23d8:	bf84      	itt	hi
    23da:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    23de:	4323      	orrhi	r3, r4
    23e0:	4618      	mov	r0, r3
    23e2:	bd70      	pop	{r4, r5, r6, pc}
    23e4:	50001378 	andpl	r1, r0, r8, ror r3
    23e8:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    23ec:	50003fac 	andpl	r3, r0, ip, lsr #31

000023f0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    23f0:	281f      	cmp	r0, #31
    23f2:	bf83      	ittte	hi
    23f4:	4b02      	ldrhi	r3, [pc, #8]	; (2400 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    23f6:	6818      	ldrhi	r0, [r3, #0]
    23f8:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    23fc:	2000      	movls	r0, #0
    23fe:	4770      	bx	lr
    2400:	50001398 	mulpl	r0, r8, r3

00002404 <NOROM_SetupGetTrimForAdcShModeEn>:
    2404:	2821      	cmp	r0, #33	; 0x21
    2406:	bf83      	ittte	hi
    2408:	4b02      	ldrhi	r3, [pc, #8]	; (2414 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    240a:	6818      	ldrhi	r0, [r3, #0]
    240c:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    2410:	2001      	movls	r0, #1
    2412:	4770      	bx	lr
    2414:	5000138c 	andpl	r1, r0, ip, lsl #7

00002418 <NOROM_SetupGetTrimForAdcShVbufEn>:
    2418:	2821      	cmp	r0, #33	; 0x21
    241a:	bf83      	ittte	hi
    241c:	4b02      	ldrhi	r3, [pc, #8]	; (2428 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    241e:	6818      	ldrhi	r0, [r3, #0]
    2420:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    2424:	2001      	movls	r0, #1
    2426:	4770      	bx	lr
    2428:	5000138c 	andpl	r1, r0, ip, lsl #7

0000242c <NOROM_SetupGetTrimForXoscHfCtl>:
    242c:	281f      	cmp	r0, #31
    242e:	bf81      	itttt	hi
    2430:	4b07      	ldrhi	r3, [pc, #28]	; (2450 <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    2432:	681b      	ldrhi	r3, [r3, #0]
    2434:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    2438:	0080      	lslhi	r0, r0, #2
    243a:	bf81      	itttt	hi
    243c:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    2440:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    2444:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    2448:	4318      	orrhi	r0, r3
    244a:	bf98      	it	ls
    244c:	2000      	movls	r0, #0
    244e:	4770      	bx	lr
    2450:	50001398 	mulpl	r0, r8, r3

00002454 <NOROM_SetupGetTrimForXoscHfFastStart>:
    2454:	4b02      	ldr	r3, [pc, #8]	; (2460 <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    2456:	6818      	ldr	r0, [r3, #0]
    2458:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    245c:	4770      	bx	lr
    245e:	bf00      	nop
    2460:	5000138c 	andpl	r1, r0, ip, lsl #7

00002464 <NOROM_SetupGetTrimForRadcExtCfg>:
    2464:	281f      	cmp	r0, #31
    2466:	bf81      	itttt	hi
    2468:	4b07      	ldrhi	r3, [pc, #28]	; (2488 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    246a:	681b      	ldrhi	r3, [r3, #0]
    246c:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    2470:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    2474:	bf81      	itttt	hi
    2476:	0400      	lslhi	r0, r0, #16
    2478:	031b      	lslhi	r3, r3, #12
    247a:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    247e:	b29b      	uxthhi	r3, r3
    2480:	bf8c      	ite	hi
    2482:	4318      	orrhi	r0, r3
    2484:	4801      	ldrls	r0, [pc, #4]	; (248c <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    2486:	4770      	bx	lr
    2488:	50001398 	mulpl	r0, r8, r3
    248c:	403f8000 	eorsmi	r8, pc, r0

00002490 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    2490:	2821      	cmp	r0, #33	; 0x21
    2492:	bf83      	ittte	hi
    2494:	4b02      	ldrhi	r3, [pc, #8]	; (24a0 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    2496:	6818      	ldrhi	r0, [r3, #0]
    2498:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    249c:	2000      	movls	r0, #0
    249e:	4770      	bx	lr
    24a0:	5000138c 	andpl	r1, r0, ip, lsl #7

000024a4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    24a4:	2821      	cmp	r0, #33	; 0x21
    24a6:	bf83      	ittte	hi
    24a8:	4b02      	ldrhi	r3, [pc, #8]	; (24b4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    24aa:	6818      	ldrhi	r0, [r3, #0]
    24ac:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    24b0:	2000      	movls	r0, #0
    24b2:	4770      	bx	lr
    24b4:	5000138c 	andpl	r1, r0, ip, lsl #7

000024b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    24b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    24ba:	4605      	mov	r5, r0
    24bc:	4608      	mov	r0, r1
    24be:	f7ff ff19 	bl	22f4 <NOROM_SetupGetTrimForAnabypassValue1>
    24c2:	4c39      	ldr	r4, [pc, #228]	; (25a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    24c4:	4602      	mov	r2, r0
    24c6:	2118      	movs	r1, #24
    24c8:	4620      	mov	r0, r4
    24ca:	f000 fb33 	bl	2b34 <NOROM_DDI32RegWrite>
    24ce:	f7ff ff3f 	bl	2350 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    24d2:	4b36      	ldr	r3, [pc, #216]	; (25ac <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    24d4:	b280      	uxth	r0, r0
    24d6:	681b      	ldr	r3, [r3, #0]
    24d8:	9000      	str	r0, [sp, #0]
    24da:	685e      	ldr	r6, [r3, #4]
    24dc:	4620      	mov	r0, r4
    24de:	212c      	movs	r1, #44	; 0x2c
    24e0:	f240 32ff 	movw	r2, #1023	; 0x3ff
    24e4:	2300      	movs	r3, #0
    24e6:	47b0      	blx	r6
    24e8:	4b31      	ldr	r3, [pc, #196]	; (25b0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    24ea:	4620      	mov	r0, r4
    24ec:	681a      	ldr	r2, [r3, #0]
    24ee:	211c      	movs	r1, #28
    24f0:	f3c2 020d 	ubfx	r2, r2, #0, #14
    24f4:	f000 fb1e 	bl	2b34 <NOROM_DDI32RegWrite>
    24f8:	f7ff ff36 	bl	2368 <NOROM_SetupGetTrimForAmpcompTh2>
    24fc:	2114      	movs	r1, #20
    24fe:	4602      	mov	r2, r0
    2500:	4620      	mov	r0, r4
    2502:	f000 fb17 	bl	2b34 <NOROM_DDI32RegWrite>
    2506:	f7ff ff37 	bl	2378 <NOROM_SetupGetTrimForAmpcompTh1>
    250a:	2110      	movs	r1, #16
    250c:	4602      	mov	r2, r0
    250e:	4620      	mov	r0, r4
    2510:	f000 fb10 	bl	2b34 <NOROM_DDI32RegWrite>
    2514:	4628      	mov	r0, r5
    2516:	f7ff ff39 	bl	238c <NOROM_SetupGetTrimForAmpcompCtrl>
    251a:	210c      	movs	r1, #12
    251c:	4602      	mov	r2, r0
    251e:	4620      	mov	r0, r4
    2520:	f000 fb08 	bl	2b34 <NOROM_DDI32RegWrite>
    2524:	4628      	mov	r0, r5
    2526:	f7ff ff6d 	bl	2404 <NOROM_SetupGetTrimForAdcShModeEn>
    252a:	0040      	lsls	r0, r0, #1
    252c:	4e21      	ldr	r6, [pc, #132]	; (25b4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    252e:	f040 0020 	orr.w	r0, r0, #32
    2532:	b2c0      	uxtb	r0, r0
    2534:	7030      	strb	r0, [r6, #0]
    2536:	4628      	mov	r0, r5
    2538:	f7ff ff6e 	bl	2418 <NOROM_SetupGetTrimForAdcShVbufEn>
    253c:	f040 0010 	orr.w	r0, r0, #16
    2540:	b2c0      	uxtb	r0, r0
    2542:	7030      	strb	r0, [r6, #0]
    2544:	4628      	mov	r0, r5
    2546:	f7ff ff71 	bl	242c <NOROM_SetupGetTrimForXoscHfCtl>
    254a:	2128      	movs	r1, #40	; 0x28
    254c:	4602      	mov	r2, r0
    254e:	4620      	mov	r0, r4
    2550:	f000 faf0 	bl	2b34 <NOROM_DDI32RegWrite>
    2554:	4628      	mov	r0, r5
    2556:	f7ff ff4b 	bl	23f0 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    255a:	0040      	lsls	r0, r0, #1
    255c:	4b16      	ldr	r3, [pc, #88]	; (25b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    255e:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    2562:	b2c0      	uxtb	r0, r0
    2564:	7018      	strb	r0, [r3, #0]
    2566:	4628      	mov	r0, r5
    2568:	f7ff ff92 	bl	2490 <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    256c:	00c0      	lsls	r0, r0, #3
    256e:	4b13      	ldr	r3, [pc, #76]	; (25bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    2570:	f060 007f 	orn	r0, r0, #127	; 0x7f
    2574:	b2c0      	uxtb	r0, r0
    2576:	7018      	strb	r0, [r3, #0]
    2578:	4628      	mov	r0, r5
    257a:	f7ff ff93 	bl	24a4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    257e:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    2582:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    2586:	4b0e      	ldr	r3, [pc, #56]	; (25c0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2588:	b280      	uxth	r0, r0
    258a:	8018      	strh	r0, [r3, #0]
    258c:	4628      	mov	r0, r5
    258e:	f7ff ff69 	bl	2464 <NOROM_SetupGetTrimForRadcExtCfg>
    2592:	2108      	movs	r1, #8
    2594:	4602      	mov	r2, r0
    2596:	4620      	mov	r0, r4
    2598:	f000 facc 	bl	2b34 <NOROM_DDI32RegWrite>
    259c:	4b09      	ldr	r3, [pc, #36]	; (25c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    259e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    25a2:	601a      	str	r2, [r3, #0]
    25a4:	b002      	add	sp, #8
    25a6:	bd70      	pop	{r4, r5, r6, pc}
    25a8:	400ca000 	andmi	sl, ip, r0
    25ac:	100001a4 	andne	r0, r0, r4, lsr #3
    25b0:	5000137c 	andpl	r1, r0, ip, ror r3
    25b4:	400ca149 	andmi	sl, ip, r9, asr #2
    25b8:	400ca14c 	andmi	sl, ip, ip, asr #2
    25bc:	400ca141 	andmi	sl, ip, r1, asr #2
    25c0:	400ca1dc 	ldrdmi	sl, [ip], -ip
    25c4:	400ca040 	andmi	sl, ip, r0, asr #32

000025c8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    25c8:	b530      	push	{r4, r5, lr}
    25ca:	4b14      	ldr	r3, [pc, #80]	; (261c <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    25cc:	681b      	ldr	r3, [r3, #0]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d1fb      	bne.n	25ca <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    25d2:	4a13      	ldr	r2, [pc, #76]	; (2620 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    25d4:	4913      	ldr	r1, [pc, #76]	; (2624 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    25d6:	6813      	ldr	r3, [r2, #0]
    25d8:	6809      	ldr	r1, [r1, #0]
    25da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    25de:	f023 0307 	bic.w	r3, r3, #7
    25e2:	f011 0f04 	tst.w	r1, #4
    25e6:	4614      	mov	r4, r2
    25e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    25ec:	d003      	beq.n	25f6 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    25ee:	f043 0305 	orr.w	r3, r3, #5
    25f2:	6013      	str	r3, [r2, #0]
    25f4:	bd30      	pop	{r4, r5, pc}
    25f6:	490c      	ldr	r1, [pc, #48]	; (2628 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    25f8:	f043 0004 	orr.w	r0, r3, #4
    25fc:	680d      	ldr	r5, [r1, #0]
    25fe:	07ad      	lsls	r5, r5, #30
    2600:	d009      	beq.n	2616 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    2602:	f043 0307 	orr.w	r3, r3, #7
    2606:	6013      	str	r3, [r2, #0]
    2608:	680b      	ldr	r3, [r1, #0]
    260a:	f003 0303 	and.w	r3, r3, #3
    260e:	2b03      	cmp	r3, #3
    2610:	d1fa      	bne.n	2608 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    2612:	6020      	str	r0, [r4, #0]
    2614:	bd30      	pop	{r4, r5, pc}
    2616:	6010      	str	r0, [r2, #0]
    2618:	bd30      	pop	{r4, r5, pc}
    261a:	bf00      	nop
    261c:	4268000c 	rsbmi	r0, r8, #12
    2620:	40034004 	andmi	r4, r3, r4
    2624:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2628:	40034000 	andmi	r4, r3, r0

0000262c <NOROM_SetupSetAonRtcSubSecInc>:
    262c:	4b07      	ldr	r3, [pc, #28]	; (264c <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    262e:	b282      	uxth	r2, r0
    2630:	f3c0 4007 	ubfx	r0, r0, #16, #8
    2634:	601a      	str	r2, [r3, #0]
    2636:	6058      	str	r0, [r3, #4]
    2638:	2201      	movs	r2, #1
    263a:	3308      	adds	r3, #8
    263c:	601a      	str	r2, [r3, #0]
    263e:	4a04      	ldr	r2, [pc, #16]	; (2650 <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    2640:	6812      	ldr	r2, [r2, #0]
    2642:	2a00      	cmp	r2, #0
    2644:	d0fb      	beq.n	263e <NOROM_SetupSetAonRtcSubSecInc+0x12>
    2646:	2200      	movs	r2, #0
    2648:	601a      	str	r2, [r3, #0]
    264a:	4770      	bx	lr
    264c:	400c603c 	andmi	r6, ip, ip, lsr r0
    2650:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

00002654 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    2654:	f3c0 4381 	ubfx	r3, r0, #18, #2
    2658:	2b01      	cmp	r3, #1
    265a:	b510      	push	{r4, lr}
    265c:	4604      	mov	r4, r0
    265e:	d002      	beq.n	2666 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    2660:	2b02      	cmp	r3, #2
    2662:	d02f      	beq.n	26c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    2664:	e02a      	b.n	26bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    2666:	4b42      	ldr	r3, [pc, #264]	; (2770 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    2668:	681b      	ldr	r3, [r3, #0]
    266a:	039a      	lsls	r2, r3, #14
    266c:	d426      	bmi.n	26bc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    266e:	4a41      	ldr	r2, [pc, #260]	; (2774 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    2670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2674:	6011      	str	r1, [r2, #0]
    2676:	4940      	ldr	r1, [pc, #256]	; (2778 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    2678:	f3c3 3003 	ubfx	r0, r3, #12, #4
    267c:	680a      	ldr	r2, [r1, #0]
    267e:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    2682:	4302      	orrs	r2, r0
    2684:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2688:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    268c:	600a      	str	r2, [r1, #0]
    268e:	f851 2c01 	ldr.w	r2, [r1, #-1]
    2692:	f3c3 2003 	ubfx	r0, r3, #8, #4
    2696:	f022 020f 	bic.w	r2, r2, #15
    269a:	4302      	orrs	r2, r0
    269c:	f851 0c01 	ldr.w	r0, [r1, #-1]
    26a0:	f841 2c01 	str.w	r2, [r1, #-1]
    26a4:	f851 2c02 	ldr.w	r2, [r1, #-2]
    26a8:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    26ac:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    26b0:	4313      	orrs	r3, r2
    26b2:	f851 2c02 	ldr.w	r2, [r1, #-2]
    26b6:	f841 3c02 	str.w	r3, [r1, #-2]
    26ba:	e003      	b.n	26c4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    26bc:	4b2d      	ldr	r3, [pc, #180]	; (2774 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    26be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    26c2:	601a      	str	r2, [r3, #0]
    26c4:	4b2d      	ldr	r3, [pc, #180]	; (277c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    26c6:	681b      	ldr	r3, [r3, #0]
    26c8:	071b      	lsls	r3, r3, #28
    26ca:	bf5e      	ittt	pl
    26cc:	4b2c      	ldrpl	r3, [pc, #176]	; (2780 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    26ce:	2240      	movpl	r2, #64	; 0x40
    26d0:	601a      	strpl	r2, [r3, #0]
    26d2:	4b2c      	ldr	r3, [pc, #176]	; (2784 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    26d4:	f44f 7200 	mov.w	r2, #512	; 0x200
    26d8:	601a      	str	r2, [r3, #0]
    26da:	f7ff febb 	bl	2454 <NOROM_SetupGetTrimForXoscHfFastStart>
    26de:	4b2a      	ldr	r3, [pc, #168]	; (2788 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    26e0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    26e4:	b2c0      	uxtb	r0, r0
    26e6:	7018      	strb	r0, [r3, #0]
    26e8:	f3c4 5081 	ubfx	r0, r4, #22, #2
    26ec:	2801      	cmp	r0, #1
    26ee:	d00b      	beq.n	2708 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    26f0:	d302      	bcc.n	26f8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    26f2:	2802      	cmp	r0, #2
    26f4:	d026      	beq.n	2744 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    26f6:	e028      	b.n	274a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    26f8:	2004      	movs	r0, #4
    26fa:	2101      	movs	r1, #1
    26fc:	f000 fa1e 	bl	2b3c <NOROM_OSCClockSourceSet>
    2700:	4822      	ldr	r0, [pc, #136]	; (278c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    2702:	f7ff ff93 	bl	262c <NOROM_SetupSetAonRtcSubSecInc>
    2706:	e024      	b.n	2752 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2708:	f000 fa46 	bl	2b98 <NOROM_OSCClockSourceGet>
    270c:	4604      	mov	r4, r0
    270e:	2004      	movs	r0, #4
    2710:	4621      	mov	r1, r4
    2712:	f000 fa13 	bl	2b3c <NOROM_OSCClockSourceSet>
    2716:	2004      	movs	r0, #4
    2718:	f000 fa3e 	bl	2b98 <NOROM_OSCClockSourceGet>
    271c:	42a0      	cmp	r0, r4
    271e:	d1fa      	bne.n	2716 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    2720:	4b1b      	ldr	r3, [pc, #108]	; (2790 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    2722:	681c      	ldr	r4, [r3, #0]
    2724:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    2728:	f7ff ff80 	bl	262c <NOROM_SetupSetAonRtcSubSecInc>
    272c:	4b19      	ldr	r3, [pc, #100]	; (2794 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    272e:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	0e20      	lsrs	r0, r4, #24
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	2107      	movs	r1, #7
    273a:	4798      	blx	r3
    273c:	4b0d      	ldr	r3, [pc, #52]	; (2774 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    273e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2742:	601a      	str	r2, [r3, #0]
    2744:	2004      	movs	r0, #4
    2746:	2103      	movs	r1, #3
    2748:	e001      	b.n	274e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    274a:	2004      	movs	r0, #4
    274c:	2102      	movs	r1, #2
    274e:	f000 f9f5 	bl	2b3c <NOROM_OSCClockSourceSet>
    2752:	4b11      	ldr	r3, [pc, #68]	; (2798 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    2754:	4a11      	ldr	r2, [pc, #68]	; (279c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    2756:	681b      	ldr	r3, [r3, #0]
    2758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    275c:	7013      	strb	r3, [r2, #0]
    275e:	f647 0218 	movw	r2, #30744	; 0x7818
    2762:	4b0f      	ldr	r3, [pc, #60]	; (27a0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    2764:	801a      	strh	r2, [r3, #0]
    2766:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    276a:	3b44      	subs	r3, #68	; 0x44
    276c:	681b      	ldr	r3, [r3, #0]
    276e:	bd10      	pop	{r4, pc}
    2770:	5000138c 	andpl	r1, r0, ip, lsl #7
    2774:	400ca040 	andmi	sl, ip, r0, asr #32
    2778:	4008600c 	andmi	r6, r8, ip
    277c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2780:	400ca068 	andmi	sl, ip, r8, rrx
    2784:	400ca080 	andmi	sl, ip, r0, lsl #1
    2788:	400ca108 	andmi	sl, ip, r8, lsl #2
    278c:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    2790:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2794:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2798:	5000136c 	andpl	r1, r0, ip, ror #6
    279c:	400cb00b 	andmi	fp, ip, fp
    27a0:	400cb070 	andmi	fp, ip, r0, ror r0

000027a4 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    27a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27a8:	4b77      	ldr	r3, [pc, #476]	; (2988 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    27aa:	4607      	mov	r7, r0
    27ac:	681b      	ldr	r3, [r3, #0]
    27ae:	4e77      	ldr	r6, [pc, #476]	; (298c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    27b0:	f013 0f02 	tst.w	r3, #2
    27b4:	d004      	beq.n	27c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    27b6:	2308      	movs	r3, #8
    27b8:	71b3      	strb	r3, [r6, #6]
    27ba:	4a75      	ldr	r2, [pc, #468]	; (2990 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    27bc:	4b75      	ldr	r3, [pc, #468]	; (2994 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    27be:	e0df      	b.n	2980 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    27c0:	f7ff fc1c 	bl	1ffc <NOROM_AONBatMonTemperatureGetDegC>
    27c4:	4b74      	ldr	r3, [pc, #464]	; (2998 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    27c6:	681d      	ldr	r5, [r3, #0]
    27c8:	172a      	asrs	r2, r5, #28
    27ca:	02ac      	lsls	r4, r5, #10
    27cc:	f102 0101 	add.w	r1, r2, #1
    27d0:	d408      	bmi.n	27e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    27d2:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    27d6:	10db      	asrs	r3, r3, #3
    27d8:	2b08      	cmp	r3, #8
    27da:	bfa8      	it	ge
    27dc:	2308      	movge	r3, #8
    27de:	4299      	cmp	r1, r3
    27e0:	bfb8      	it	lt
    27e2:	4619      	movlt	r1, r3
    27e4:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    27e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    27ec:	d10a      	bne.n	2804 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    27ee:	4b6b      	ldr	r3, [pc, #428]	; (299c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    27f0:	681a      	ldr	r2, [r3, #0]
    27f2:	681b      	ldr	r3, [r3, #0]
    27f4:	f3c2 2204 	ubfx	r2, r2, #8, #5
    27f8:	2a15      	cmp	r2, #21
    27fa:	bf88      	it	hi
    27fc:	3a20      	subhi	r2, #32
    27fe:	f3c3 6304 	ubfx	r3, r3, #24, #5
    2802:	e00a      	b.n	281a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2804:	4b66      	ldr	r3, [pc, #408]	; (29a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2806:	681a      	ldr	r2, [r3, #0]
    2808:	4b66      	ldr	r3, [pc, #408]	; (29a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    280a:	f3c2 6204 	ubfx	r2, r2, #24, #5
    280e:	681b      	ldr	r3, [r3, #0]
    2810:	2a15      	cmp	r2, #21
    2812:	bf88      	it	hi
    2814:	3a20      	subhi	r2, #32
    2816:	f3c3 4304 	ubfx	r3, r3, #16, #5
    281a:	2b15      	cmp	r3, #21
    281c:	440a      	add	r2, r1
    281e:	bf88      	it	hi
    2820:	3b20      	subhi	r3, #32
    2822:	2a15      	cmp	r2, #21
    2824:	dc05      	bgt.n	2832 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    2826:	f06f 0109 	mvn.w	r1, #9
    282a:	428a      	cmp	r2, r1
    282c:	bfb8      	it	lt
    282e:	460a      	movlt	r2, r1
    2830:	e000      	b.n	2834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    2832:	2215      	movs	r2, #21
    2834:	4c5c      	ldr	r4, [pc, #368]	; (29a8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    2836:	f002 011f 	and.w	r1, r2, #31
    283a:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    283e:	8021      	strh	r1, [r4, #0]
    2840:	495a      	ldr	r1, [pc, #360]	; (29ac <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    2842:	6809      	ldr	r1, [r1, #0]
    2844:	f011 0403 	ands.w	r4, r1, #3
    2848:	bf18      	it	ne
    284a:	2401      	movne	r4, #1
    284c:	0749      	lsls	r1, r1, #29
    284e:	bf48      	it	mi
    2850:	f044 0402 	orrmi.w	r4, r4, #2
    2854:	b10f      	cbz	r7, 285a <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    2856:	f044 0404 	orr.w	r4, r4, #4
    285a:	f996 1007 	ldrsb.w	r1, [r6, #7]
    285e:	1a41      	subs	r1, r0, r1
    2860:	2904      	cmp	r1, #4
    2862:	dc03      	bgt.n	286c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    2864:	4949      	ldr	r1, [pc, #292]	; (298c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    2866:	7989      	ldrb	r1, [r1, #6]
    2868:	428c      	cmp	r4, r1
    286a:	d06f      	beq.n	294c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    286c:	f1b0 010f 	subs.w	r1, r0, #15
    2870:	9101      	str	r1, [sp, #4]
    2872:	f004 0101 	and.w	r1, r4, #1
    2876:	f8df a144 	ldr.w	sl, [pc, #324]	; 29bc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    287a:	f004 0904 	and.w	r9, r4, #4
    287e:	f004 0802 	and.w	r8, r4, #2
    2882:	460f      	mov	r7, r1
    2884:	d42a      	bmi.n	28dc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2886:	9901      	ldr	r1, [sp, #4]
    2888:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    288c:	ea4f 2e21 	mov.w	lr, r1, asr #8
    2890:	f1be 0f07 	cmp.w	lr, #7
    2894:	9101      	str	r1, [sp, #4]
    2896:	d801      	bhi.n	289c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2898:	d104      	bne.n	28a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    289a:	e001      	b.n	28a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    289c:	f04f 0e07 	mov.w	lr, #7
    28a0:	2106      	movs	r1, #6
    28a2:	e000      	b.n	28a6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    28a4:	4671      	mov	r1, lr
    28a6:	f8df b118 	ldr.w	fp, [pc, #280]	; 29c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    28aa:	3101      	adds	r1, #1
    28ac:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    28b0:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    28b4:	ebc1 0c0c 	rsb	ip, r1, ip
    28b8:	fa5f f18c 	uxtb.w	r1, ip
    28bc:	f1b9 0f00 	cmp.w	r9, #0
    28c0:	d002      	beq.n	28c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    28c2:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    28c6:	4459      	add	r1, fp
    28c8:	f1b8 0f00 	cmp.w	r8, #0
    28cc:	d002      	beq.n	28d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    28ce:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    28d2:	4459      	add	r1, fp
    28d4:	b12f      	cbz	r7, 28e2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    28d6:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    28da:	e002      	b.n	28e2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    28dc:	f04f 0e00 	mov.w	lr, #0
    28e0:	4671      	mov	r1, lr
    28e2:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    28e6:	fa5f fc8a 	uxtb.w	ip, sl
    28ea:	f1b9 0f00 	cmp.w	r9, #0
    28ee:	d002      	beq.n	28f6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    28f0:	f3ca 2907 	ubfx	r9, sl, #8, #8
    28f4:	44cc      	add	ip, r9
    28f6:	f1b8 0f00 	cmp.w	r8, #0
    28fa:	d002      	beq.n	2902 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    28fc:	f3ca 4807 	ubfx	r8, sl, #16, #8
    2900:	44c4      	add	ip, r8
    2902:	b10f      	cbz	r7, 2908 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2904:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2908:	1a9b      	subs	r3, r3, r2
    290a:	2b01      	cmp	r3, #1
    290c:	bfb8      	it	lt
    290e:	2301      	movlt	r3, #1
    2910:	9f01      	ldr	r7, [sp, #4]
    2912:	2234      	movs	r2, #52	; 0x34
    2914:	4353      	muls	r3, r2
    2916:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    291a:	4379      	muls	r1, r7
    291c:	b2ed      	uxtb	r5, r5
    291e:	436b      	muls	r3, r5
    2920:	3180      	adds	r1, #128	; 0x80
    2922:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    2926:	fbb3 f1f1 	udiv	r1, r3, r1
    292a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    292e:	4561      	cmp	r1, ip
    2930:	bf28      	it	cs
    2932:	4661      	movcs	r1, ip
    2934:	287f      	cmp	r0, #127	; 0x7f
    2936:	80b1      	strh	r1, [r6, #4]
    2938:	dc05      	bgt.n	2946 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    293a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    293e:	4298      	cmp	r0, r3
    2940:	bfb8      	it	lt
    2942:	4618      	movlt	r0, r3
    2944:	e000      	b.n	2948 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    2946:	207f      	movs	r0, #127	; 0x7f
    2948:	71f0      	strb	r0, [r6, #7]
    294a:	71b4      	strb	r4, [r6, #6]
    294c:	4b18      	ldr	r3, [pc, #96]	; (29b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    294e:	2100      	movs	r1, #0
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	6033      	str	r3, [r6, #0]
    2954:	88b3      	ldrh	r3, [r6, #4]
    2956:	2b1e      	cmp	r3, #30
    2958:	bf9e      	ittt	ls
    295a:	4a0c      	ldrls	r2, [pc, #48]	; (298c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    295c:	231f      	movls	r3, #31
    295e:	8093      	strhls	r3, [r2, #4]
    2960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2964:	d302      	bcc.n	296c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    2966:	085b      	lsrs	r3, r3, #1
    2968:	3101      	adds	r1, #1
    296a:	e7f9      	b.n	2960 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    296c:	4a11      	ldr	r2, [pc, #68]	; (29b4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    296e:	3b0f      	subs	r3, #15
    2970:	430a      	orrs	r2, r1
    2972:	091b      	lsrs	r3, r3, #4
    2974:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    2978:	4a06      	ldr	r2, [pc, #24]	; (2994 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    297a:	6013      	str	r3, [r2, #0]
    297c:	4b0e      	ldr	r3, [pc, #56]	; (29b8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    297e:	2200      	movs	r2, #0
    2980:	601a      	str	r2, [r3, #0]
    2982:	b003      	add	sp, #12
    2984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2988:	40090000 	andmi	r0, r9, r0
    298c:	20000070 	andcs	r0, r0, r0, ror r0
    2990:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2994:	40091030 	andmi	r1, r9, r0, lsr r0
    2998:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    299c:	50001388 	andpl	r1, r0, r8, lsl #7
    29a0:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    29a4:	5000113c 	andpl	r1, r0, ip, lsr r1
    29a8:	4008626e 	andmi	r6, r8, lr, ror #4
    29ac:	40082224 	andmi	r2, r8, r4, lsr #4
    29b0:	40092008 	andmi	r2, r9, r8
    29b4:	80a4e700 	adchi	lr, r4, r0, lsl #14
    29b8:	40091034 	andmi	r1, r9, r4, lsr r0
    29bc:	5000139c 	mulpl	r0, ip, r3
    29c0:	50001398 	mulpl	r0, r8, r3

000029c4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    29c4:	b510      	push	{r4, lr}
    29c6:	4b14      	ldr	r3, [pc, #80]	; (2a18 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    29c8:	681c      	ldr	r4, [r3, #0]
    29ca:	b2a4      	uxth	r4, r4
    29cc:	b314      	cbz	r4, 2a14 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    29ce:	f7ff fb15 	bl	1ffc <NOROM_AONBatMonTemperatureGetDegC>
    29d2:	4b12      	ldr	r3, [pc, #72]	; (2a1c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    29d4:	f993 2007 	ldrsb.w	r2, [r3, #7]
    29d8:	4290      	cmp	r0, r2
    29da:	da05      	bge.n	29e8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    29dc:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    29e0:	4290      	cmp	r0, r2
    29e2:	bfb8      	it	lt
    29e4:	4610      	movlt	r0, r2
    29e6:	71d8      	strb	r0, [r3, #7]
    29e8:	889a      	ldrh	r2, [r3, #4]
    29ea:	490c      	ldr	r1, [pc, #48]	; (2a1c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    29ec:	4294      	cmp	r4, r2
    29ee:	d310      	bcc.n	2a12 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    29f0:	4b0b      	ldr	r3, [pc, #44]	; (2a20 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    29f2:	6808      	ldr	r0, [r1, #0]
    29f4:	681b      	ldr	r3, [r3, #0]
    29f6:	1aa4      	subs	r4, r4, r2
    29f8:	3302      	adds	r3, #2
    29fa:	1a1b      	subs	r3, r3, r0
    29fc:	2b1f      	cmp	r3, #31
    29fe:	bf28      	it	cs
    2a00:	231f      	movcs	r3, #31
    2a02:	085b      	lsrs	r3, r3, #1
    2a04:	40dc      	lsrs	r4, r3
    2a06:	4414      	add	r4, r2
    2a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2a0c:	4294      	cmp	r4, r2
    2a0e:	bf28      	it	cs
    2a10:	4614      	movcs	r4, r2
    2a12:	808c      	strh	r4, [r1, #4]
    2a14:	bd10      	pop	{r4, pc}
    2a16:	bf00      	nop
    2a18:	40091034 	andmi	r1, r9, r4, lsr r0
    2a1c:	20000070 	andcs	r0, r0, r0, ror r0
    2a20:	40092008 	andmi	r2, r9, r8

00002a24 <NOROM_SysCtrlResetSourceGet>:
    2a24:	4b04      	ldr	r3, [pc, #16]	; (2a38 <NOROM_SysCtrlResetSourceGet+0x14>)
    2a26:	681a      	ldr	r2, [r3, #0]
    2a28:	0412      	lsls	r2, r2, #16
    2a2a:	bf5a      	itte	pl
    2a2c:	6818      	ldrpl	r0, [r3, #0]
    2a2e:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    2a32:	2008      	movmi	r0, #8
    2a34:	4770      	bx	lr
    2a36:	bf00      	nop
    2a38:	40090004 	andmi	r0, r9, r4

00002a3c <NOROM_ChipInfo_GetChipFamily>:
    2a3c:	f64b 129a 	movw	r2, #47514	; 0xb99a
    2a40:	4b10      	ldr	r3, [pc, #64]	; (2a84 <NOROM_ChipInfo_GetChipFamily+0x48>)
    2a42:	6818      	ldr	r0, [r3, #0]
    2a44:	f3c0 300f 	ubfx	r0, r0, #12, #16
    2a48:	4290      	cmp	r0, r2
    2a4a:	d106      	bne.n	2a5a <NOROM_ChipInfo_GetChipFamily+0x1e>
    2a4c:	681b      	ldr	r3, [r3, #0]
    2a4e:	0f1b      	lsrs	r3, r3, #28
    2a50:	2b0b      	cmp	r3, #11
    2a52:	bf0c      	ite	eq
    2a54:	2004      	moveq	r0, #4
    2a56:	2000      	movne	r0, #0
    2a58:	e011      	b.n	2a7e <NOROM_ChipInfo_GetChipFamily+0x42>
    2a5a:	f64b 13be 	movw	r3, #47550	; 0xb9be
    2a5e:	4298      	cmp	r0, r3
    2a60:	d00a      	beq.n	2a78 <NOROM_ChipInfo_GetChipFamily+0x3c>
    2a62:	f64b 3341 	movw	r3, #47937	; 0xbb41
    2a66:	4298      	cmp	r0, r3
    2a68:	d008      	beq.n	2a7c <NOROM_ChipInfo_GetChipFamily+0x40>
    2a6a:	f64b 3320 	movw	r3, #47904	; 0xbb20
    2a6e:	4298      	cmp	r0, r3
    2a70:	bf14      	ite	ne
    2a72:	20ff      	movne	r0, #255	; 0xff
    2a74:	2002      	moveq	r0, #2
    2a76:	e002      	b.n	2a7e <NOROM_ChipInfo_GetChipFamily+0x42>
    2a78:	2001      	movs	r0, #1
    2a7a:	e000      	b.n	2a7e <NOROM_ChipInfo_GetChipFamily+0x42>
    2a7c:	2003      	movs	r0, #3
    2a7e:	b240      	sxtb	r0, r0
    2a80:	4770      	bx	lr
    2a82:	bf00      	nop
    2a84:	50001318 	andpl	r1, r0, r8, lsl r3

00002a88 <NOROM_ChipInfo_GetHwRevision>:
    2a88:	b538      	push	{r3, r4, r5, lr}
    2a8a:	4b19      	ldr	r3, [pc, #100]	; (2af0 <NOROM_ChipInfo_GetHwRevision+0x68>)
    2a8c:	681d      	ldr	r5, [r3, #0]
    2a8e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    2a92:	6818      	ldr	r0, [r3, #0]
    2a94:	0f2d      	lsrs	r5, r5, #28
    2a96:	b2c4      	uxtb	r4, r0
    2a98:	2c80      	cmp	r4, #128	; 0x80
    2a9a:	bf28      	it	cs
    2a9c:	2400      	movcs	r4, #0
    2a9e:	f7ff ffcd 	bl	2a3c <NOROM_ChipInfo_GetChipFamily>
    2aa2:	2804      	cmp	r0, #4
    2aa4:	d821      	bhi.n	2aea <NOROM_ChipInfo_GetHwRevision+0x62>
    2aa6:	e8df f000 	tbb	[pc, r0]
    2aaa:	1b1b1303 	blne	6c76be <__ccfg+0x6a7716>
    2aae:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    2ab2:	2d07      	cmp	r5, #7
    2ab4:	d819      	bhi.n	2aea <NOROM_ChipInfo_GetHwRevision+0x62>
    2ab6:	e8df f005 	tbb	[pc, r5]
    2aba:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    2abe:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    2ac2:	2014      	movs	r0, #20
    2ac4:	e012      	b.n	2aec <NOROM_ChipInfo_GetHwRevision+0x64>
    2ac6:	2015      	movs	r0, #21
    2ac8:	e010      	b.n	2aec <NOROM_ChipInfo_GetHwRevision+0x64>
    2aca:	f104 0016 	add.w	r0, r4, #22
    2ace:	e00a      	b.n	2ae6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2ad0:	b125      	cbz	r5, 2adc <NOROM_ChipInfo_GetHwRevision+0x54>
    2ad2:	2d02      	cmp	r5, #2
    2ad4:	d109      	bne.n	2aea <NOROM_ChipInfo_GetHwRevision+0x62>
    2ad6:	f104 0014 	add.w	r0, r4, #20
    2ada:	e004      	b.n	2ae6 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2adc:	200a      	movs	r0, #10
    2ade:	e005      	b.n	2aec <NOROM_ChipInfo_GetHwRevision+0x64>
    2ae0:	b91d      	cbnz	r5, 2aea <NOROM_ChipInfo_GetHwRevision+0x62>
    2ae2:	f104 000a 	add.w	r0, r4, #10
    2ae6:	b2c0      	uxtb	r0, r0
    2ae8:	e000      	b.n	2aec <NOROM_ChipInfo_GetHwRevision+0x64>
    2aea:	20ff      	movs	r0, #255	; 0xff
    2aec:	b240      	sxtb	r0, r0
    2aee:	bd38      	pop	{r3, r4, r5, pc}
    2af0:	50001318 	andpl	r1, r0, r8, lsl r3

00002af4 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2af4:	b508      	push	{r3, lr}
    2af6:	f7ff ffa1 	bl	2a3c <NOROM_ChipInfo_GetChipFamily>
    2afa:	2801      	cmp	r0, #1
    2afc:	d103      	bne.n	2b06 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2afe:	f7ff ffc3 	bl	2a88 <NOROM_ChipInfo_GetHwRevision>
    2b02:	2813      	cmp	r0, #19
    2b04:	dc00      	bgt.n	2b08 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2b06:	e7fe      	b.n	2b06 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2b08:	bd08      	pop	{r3, pc}
	...

00002b0c <AuxAdiDdiSafeWrite.constprop.1>:
    2b0c:	b538      	push	{r3, r4, r5, lr}
    2b0e:	4604      	mov	r4, r0
    2b10:	460d      	mov	r5, r1
    2b12:	f7ff fa97 	bl	2044 <NOROM_CPUcpsid>
    2b16:	4b06      	ldr	r3, [pc, #24]	; (2b30 <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    2b18:	681a      	ldr	r2, [r3, #0]
    2b1a:	2a00      	cmp	r2, #0
    2b1c:	d0fb      	beq.n	2b16 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    2b1e:	2201      	movs	r2, #1
    2b20:	6025      	str	r5, [r4, #0]
    2b22:	601a      	str	r2, [r3, #0]
    2b24:	b918      	cbnz	r0, 2b2e <AuxAdiDdiSafeWrite.constprop.1+0x22>
    2b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2b2a:	f7ff ba8f 	b.w	204c <NOROM_CPUcpsie>
    2b2e:	bd38      	pop	{r3, r4, r5, pc}
    2b30:	400c8000 	andmi	r8, ip, r0

00002b34 <NOROM_DDI32RegWrite>:
    2b34:	4408      	add	r0, r1
    2b36:	4611      	mov	r1, r2
    2b38:	f7ff bfe8 	b.w	2b0c <AuxAdiDdiSafeWrite.constprop.1>

00002b3c <NOROM_OSCClockSourceSet>:
    2b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2b3e:	460c      	mov	r4, r1
    2b40:	07c1      	lsls	r1, r0, #31
    2b42:	4605      	mov	r5, r0
    2b44:	d509      	bpl.n	2b5a <NOROM_OSCClockSourceSet+0x1e>
    2b46:	4b12      	ldr	r3, [pc, #72]	; (2b90 <NOROM_OSCClockSourceSet+0x54>)
    2b48:	b2a2      	uxth	r2, r4
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	2100      	movs	r1, #0
    2b4e:	9200      	str	r2, [sp, #0]
    2b50:	685e      	ldr	r6, [r3, #4]
    2b52:	4810      	ldr	r0, [pc, #64]	; (2b94 <NOROM_OSCClockSourceSet+0x58>)
    2b54:	2201      	movs	r2, #1
    2b56:	460b      	mov	r3, r1
    2b58:	47b0      	blx	r6
    2b5a:	07aa      	lsls	r2, r5, #30
    2b5c:	d509      	bpl.n	2b72 <NOROM_OSCClockSourceSet+0x36>
    2b5e:	4b0c      	ldr	r3, [pc, #48]	; (2b90 <NOROM_OSCClockSourceSet+0x54>)
    2b60:	b2a2      	uxth	r2, r4
    2b62:	681b      	ldr	r3, [r3, #0]
    2b64:	9200      	str	r2, [sp, #0]
    2b66:	685e      	ldr	r6, [r3, #4]
    2b68:	480a      	ldr	r0, [pc, #40]	; (2b94 <NOROM_OSCClockSourceSet+0x58>)
    2b6a:	2100      	movs	r1, #0
    2b6c:	2202      	movs	r2, #2
    2b6e:	2301      	movs	r3, #1
    2b70:	47b0      	blx	r6
    2b72:	076b      	lsls	r3, r5, #29
    2b74:	d509      	bpl.n	2b8a <NOROM_OSCClockSourceSet+0x4e>
    2b76:	4b06      	ldr	r3, [pc, #24]	; (2b90 <NOROM_OSCClockSourceSet+0x54>)
    2b78:	b2a4      	uxth	r4, r4
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	9400      	str	r4, [sp, #0]
    2b7e:	685c      	ldr	r4, [r3, #4]
    2b80:	4804      	ldr	r0, [pc, #16]	; (2b94 <NOROM_OSCClockSourceSet+0x58>)
    2b82:	2100      	movs	r1, #0
    2b84:	220c      	movs	r2, #12
    2b86:	2302      	movs	r3, #2
    2b88:	47a0      	blx	r4
    2b8a:	b002      	add	sp, #8
    2b8c:	bd70      	pop	{r4, r5, r6, pc}
    2b8e:	bf00      	nop
    2b90:	100001a4 	andne	r0, r0, r4, lsr #3
    2b94:	400ca000 	andmi	sl, ip, r0

00002b98 <NOROM_OSCClockSourceGet>:
    2b98:	b510      	push	{r4, lr}
    2b9a:	4b08      	ldr	r3, [pc, #32]	; (2bbc <NOROM_OSCClockSourceGet+0x24>)
    2b9c:	2804      	cmp	r0, #4
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	f04f 0134 	mov.w	r1, #52	; 0x34
    2ba4:	68dc      	ldr	r4, [r3, #12]
    2ba6:	bf07      	ittee	eq
    2ba8:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2bac:	231d      	moveq	r3, #29
    2bae:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2bb2:	231c      	movne	r3, #28
    2bb4:	4802      	ldr	r0, [pc, #8]	; (2bc0 <NOROM_OSCClockSourceGet+0x28>)
    2bb6:	47a0      	blx	r4
    2bb8:	bd10      	pop	{r4, pc}
    2bba:	bf00      	nop
    2bbc:	100001a4 	andne	r0, r0, r4, lsr #3
    2bc0:	400ca000 	andmi	sl, ip, r0
    2bc4:	25206325 	strcs	r6, [r0, #-805]!	; 0xfffffcdb
    2bc8:	45002064 	strmi	r2, [r0, #-100]	; 0xffffff9c
    2bcc:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2bd0:	756f7920 	strbvc	r7, [pc, #-2336]!	; 22b8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x70>
    2bd4:	616e2072 	smcvs	57858	; 0xe202
    2bd8:	203a656d 	eorscs	r6, sl, sp, ror #10
    2bdc:	6c655700 	stclvs	7, cr5, [r5], #-0
    2be0:	656d6f63 	strbvs	r6, [sp, #-3939]!	; 0xfffff09d
    2be4:	0a732520 	beq	1ccc06c <__ccfg+0x1cac0c4>
    2be8:	6c65530d 	stclvs	3, cr5, [r5], #-52	; 0xffffffcc
    2bec:	20746365 	rsbscs	r6, r4, r5, ror #6
    2bf0:	20656e6f 	rsbcs	r6, r5, pc, ror #28
    2bf4:	7420666f 	strtvc	r6, [r0], #-1647	; 0xfffff991
    2bf8:	66206568 	strtvs	r6, [r0], -r8, ror #10
    2bfc:	6f6c6c6f 	svcvs	0x006c6c6f
    2c00:	676e6977 			; <UNDEFINED> instruction: 0x676e6977
    2c04:	65706f20 	ldrbvs	r6, [r0, #-3872]!	; 0xfffff0e0
    2c08:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
    2c0c:	3a736e6f 	bcc	1cde5d0 <__ccfg+0x1cbe628>
    2c10:	41280d0a 			; <UNDEFINED> instruction: 0x41280d0a
    2c14:	756a6429 	strbvc	r6, [sl, #-1065]!	; 0xfffffbd7
    2c18:	49207473 	stmdbmi	r0!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    2c1c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2c20:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
    2c24:	646e6120 	strbtvs	r6, [lr], #-288	; 0xfffffee0
    2c28:	61747320 	cmnvs	r4, r0, lsr #6
    2c2c:	0d0a7472 	cfstrseq	mvf7, [sl, #-456]	; 0xfffffe38
    2c30:	74295328 	strtvc	r5, [r9], #-808	; 0xfffffcd8
    2c34:	6f20706f 	svcvs	0x0020706f
    2c38:	61726570 	cmnvs	r2, r0, ror r5
    2c3c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    2c40:	56280d0a 	strtpl	r0, [r8], -sl, lsl #26
    2c44:	77656929 	strbvc	r6, [r5, -r9, lsr #18]!
    2c48:	72756320 	rsbsvc	r6, r5, #32, 6	; 0x80000000
    2c4c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
    2c50:	74657320 	strbtvc	r7, [r5], #-800	; 0xfffffce0
    2c54:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
    2c58:	4d280d0a 	stcmi	13, cr0, [r8, #-40]!	; 0xffffffd8
    2c5c:	696e6f29 	stmdbvs	lr!, {r0, r3, r5, r8, r9, sl, fp, sp, lr}^
    2c60:	0a726f74 	beq	1c9ea38 <__ccfg+0x1c7ea90>
    2c64:	6f68430d 	svcvs	0x0068430d
    2c68:	3a656369 	bcc	195ba14 <__ccfg+0x193ba6c>
    2c6c:	63250020 			; <UNDEFINED> instruction: 0x63250020
    2c70:	746e4500 	strbtvc	r4, [lr], #-1280	; 0xfffffb00
    2c74:	74207265 	strtvc	r7, [r0], #-613	; 0xfffffd9b
    2c78:	69206568 	stmdbvs	r0!, {r3, r5, r6, r8, sl, sp, lr}
    2c7c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    2c80:	736c6176 	cmnvc	ip, #-2147483619	; 0x8000001d
    2c84:	65522820 	ldrbvs	r2, [r2, #-2080]	; 0xfffff7e0
    2c88:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2c8c:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2c90:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2c94:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2c98:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2c9c:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2ca0:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2ca4:	64655228 	strbtvs	r5, [r5], #-552	; 0xfffffdd8
    2ca8:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2cac:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2cb0:	7247202c 	subvc	r2, r7, #44	; 0x2c
    2cb4:	206e6565 	rsbcs	r6, lr, r5, ror #10
    2cb8:	202c4e4f 	eorcs	r4, ip, pc, asr #28
    2cbc:	2946464f 	stmdbcs	r6, {r0, r1, r2, r3, r6, r9, sl, lr}^
    2cc0:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
    2cc4:	61767265 	cmnvs	r6, r5, ror #4
    2cc8:	203a736c 	eorscs	r7, sl, ip, ror #6
    2ccc:	2c642528 	cfstr64cs	mvdx2, [r4], #-160	; 0xffffff60
    2cd0:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    2cd4:	2c642520 	cfstr64cs	mvdx2, [r4], #-128	; 0xffffff80
    2cd8:	29642520 	stmdbcs	r4!, {r5, r8, sl, sp}^
    2cdc:	4d000d0a 	stcmi	13, cr0, [r0, #-40]	; 0xffffffd8
    2ce0:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
    2ce4:	2820726f 	stmdacs	r0!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
    2ce8:	73657270 	cmnvc	r5, #112, 4
    2cec:	20532073 	subscs	r2, r3, r3, ror r0
    2cf0:	73206f74 			; <UNDEFINED> instruction: 0x73206f74
    2cf4:	29706f74 	ldmdbcs	r0!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
    2cf8:	5300203a 	movwpl	r2, #58	; 0x3a
    2cfc:	52455359 	subpl	r5, r5, #1677721601	; 0x64000001
    2d00:	25203a52 	strcs	r3, [r0, #-2642]!	; 0xfffff5ae
    2d04:	25202c78 	strcs	r2, [r0, #-3192]!	; 0xfffff388
    2d08:	61750073 	cmnvs	r5, r3, ror r0
    2d0c:	61750072 	cmnvs	r5, r2, ror r0
    2d10:	69500069 	ldmdbvs	r0, {r0, r3, r5, r6}^
    2d14:	20534f63 	subscs	r4, r3, r3, ror #30
    2d18:	342e3576 	strtcc	r3, [lr], #-1398	; 0xfffffa8a
    2d1c:	3147502f 	cmpcc	r7, pc, lsr #32
    2d20:	32323038 	eorscc	r3, r2, #56	; 0x38
    2d24:	432d4132 			; <UNDEFINED> instruction: 0x432d4132
    2d28:	35333143 	ldrcc	r3, [r3, #-323]!	; 0xfffffebd
    2d2c:	414c5f30 	cmpmi	ip, r0, lsr pc
    2d30:	48434e55 	stmdami	r3, {r0, r2, r4, r6, r9, sl, fp, lr}^
    2d34:	202c4c58 	eorcs	r4, ip, r8, asr ip
    2d38:	20294328 	eorcs	r4, r9, r8, lsr #6
    2d3c:	6f736c4f 	svcvs	0x00736c4f
    2d40:	2074656e 	rsbscs	r6, r4, lr, ror #10
    2d44:	6d6d6f43 	stclvs	15, cr6, [sp, #-268]!	; 0xfffffef4
    2d48:	63696e75 	cmnvs	r9, #1872	; 0x750
    2d4c:	6f697461 	svcvs	0x00697461
    2d50:	202c736e 	eorcs	r7, ip, lr, ror #6
    2d54:	32303032 	eorscc	r3, r0, #50	; 0x32
    2d58:	3130322d 	teqcc	r0, sp, lsr #4
    2d5c:	654c0038 	strbvs	r0, [ip, #-56]	; 0xffffffc8
    2d60:	766f7466 	strbtvc	r7, [pc], -r6, ror #8
    2d64:	52207265 	eorpl	r7, r0, #1342177286	; 0x50000006
    2d68:	203a4d41 	eorscs	r4, sl, r1, asr #26
    2d6c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
    2d70:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    2d74:	00747300 	rsbseq	r7, r4, r0, lsl #6

00002d78 <port_confs>:
    2d78:	00306080 	eorseq	r6, r0, r0, lsl #1
    2d7c:	00386080 	eorseq	r6, r8, r0, lsl #1
    2d80:	00186010 	andseq	r6, r8, r0, lsl r0
    2d84:	2010400f 	andscs	r4, r0, pc
    2d88:	30694000 	rsbcc	r4, r9, r0
    2d8c:	30714000 	rsbscc	r4, r1, r0
    2d90:	00b86008 	adcseq	r6, r8, r8
    2d94:	60c94000 	sbcvs	r4, r9, r0
    2d98:	60d14000 	sbcsvs	r4, r1, r0
    2d9c:	60d94000 	sbcsvs	r4, r9, r0
    2da0:	60e14000 	rscvs	r4, r1, r0
    2da4:	00096380 	andeq	r6, r9, r0, lsl #7
    2da8:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2dac:	20402000 	subcs	r2, r0, r0
    2db0:	00486080 	subeq	r6, r8, r0, lsl #1
    2db4:	00506080 	subseq	r6, r0, r0, lsl #1
    2db8:	00a06000 	adceq	r6, r0, r0
    2dbc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2dc0:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2dc4:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2dc8:	6f690076 	svcvs	0x00690076
    2dcc:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2dd0:	616d0031 	cmnvs	sp, r1, lsr r0
    2dd4:	6b00676c 	blvs	1cb8c <_etext+0x19d94>
    2dd8:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2ddc:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002de0 <__pi_hex_enc_table>:
    2de0:	33323130 	teqcc	r2, #48, 2
    2de4:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2de8:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2dec:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002df0 <__input_pins>:
    2df0:	9c9b9a99 	vldmials	fp, {s18-s170}

00002df4 <__button_list>:
    2df4:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .data:

20000000 <greenCharacter>:
char greenCharacter = 'G';
20000000:	00000047 	andeq	r0, r0, r7, asr #32

20000004 <greenLed>:
int greenLed = 1;
20000004:	00000001 	andeq	r0, r0, r1

20000008 <redCharacter>:
char redCharacter = 'R';
20000008:	Address 0x0000000020000008 is out of bounds.


Disassembly of section .bss:

2000000c <On>:
	...

2000000d <ch.5746>:
	...

2000000e <displayCycle>:
	...

20000010 <greenOff>:
	...

20000012 <greenOn>:
	...

20000014 <led.5745>:
20000014:	00000000 	andeq	r0, r0, r0

20000018 <ledFlag>:
int ledFlag = 0;
20000018:	00000000 	andeq	r0, r0, r0

2000001c <offTime.5748>:
	...

2000001e <onTime.5747>:
	...

20000020 <redLed>:
int redLed = 0;
20000020:	00000000 	andeq	r0, r0, r0

20000024 <redOff>:
	...

20000026 <redOn>:
	...

20000028 <username.5767>:
	...

2000003c <setdel>:
	...

2000003e <urates>:
	...

20000040 <__PCB>:
20000040:	00000000 	andeq	r0, r0, r0

20000044 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000044:	00000000 	andeq	r0, r0, r0

20000048 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000048:	00000000 	andeq	r0, r0, r0

2000004c <mevent>:
2000004c:	00000000 	andeq	r0, r0, r0

20000050 <mnfree>:
20000050:	00000000 	andeq	r0, r0, r0

20000054 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000054:	00000000 	andeq	r0, r0, r0

20000058 <dopen>:
	...

20000059 <dstat>:
20000059:	 	andeq	r0, r0, r0

2000005c <len.5699>:
2000005c:	00000000 	andeq	r0, r0, r0

20000060 <ptr.5698>:
20000060:	00000000 	andeq	r0, r0, r0

20000064 <__inpline>:
char *__inpline = NULL;
20000064:	00000000 	andeq	r0, r0, r0

20000068 <len.5700>:
20000068:	00000000 	andeq	r0, r0, r0

2000006c <ptr.5699>:
2000006c:	00000000 	andeq	r0, r0, r0

20000070 <powerQualGlobals>:
	...

20000078 <__pi_uart>:
	...

20000080 <system_event_count>:
20000080:	00000000 	andeq	r0, r0, r0

20000084 <entropy>:
20000084:	00000000 	andeq	r0, r0, r0

20000088 <__pi_mintk>:
	...

2000008a <__pi_old>:
	...

2000008c <__pi_systat>:
	...

20000094 <__pi_new>:
20000094:	00000000 	andeq	r0, r0, r0

20000098 <__pi_utims>:
	...

200000a8 <__pi_curr>:
200000a8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000ac <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000078f 	andeq	r0, r0, pc, lsl #15
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000012f 	andeq	r0, r0, pc, lsr #2
      10:	00029d0c 	andeq	r9, r2, ip, lsl #26
      14:	00038000 	andeq	r8, r3, r0
      18:	00009800 	andeq	r9, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000374 	andeq	r0, r0, r4, ror r3
      2c:	d0050202 	andle	r0, r5, r2, lsl #4
      30:	02000003 	andeq	r0, r0, #3
      34:	00a40504 	adceq	r0, r4, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00009f05 	andeq	r9, r0, r5, lsl #30
			i = k;
      40:	220a0300 	andcs	r0, sl, #0, 6
				j->Next = k;
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
}
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	00000372 	andeq	r0, r0, r2, ror r3
      54:	0020f803 	eoreq	pc, r0, r3, lsl #16
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	30070202 	andcc	r0, r7, r2, lsl #4
      64:	03000002 	movweq	r0, #2
      68:	000017c1 	andeq	r1, r0, r1, asr #15
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00790704 	rsbseq	r0, r9, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00007407 	andeq	r7, r0, r7, lsl #8
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	000015ce 	andeq	r1, r0, lr, asr #11
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013c603 	andseq	ip, r3, r3, lsl #12
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	161f0300 	ldrne	r0, [pc], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	63030000 	movwvs	r0, #12288	; 0x3000
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	0000027e 	andeq	r0, r0, lr, ror r2
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	00000098 	muleq	r0, r8, r0
			curr += 0x1000;
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (from >= EE_SIZE || upto < from)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	0000024c 	andeq	r0, r0, ip, asr #4
			upto = EE_SIZE - 1;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
     114:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     118:	ac033704 	stcge	7, cr3, [r3], {4}
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
     124:	000003f8 	strdeq	r0, [r0], -r8
            ch = redCharacter;
     128:	ac033804 	stcge	8, cr3, [r3], {4}
            onTime = redOn;
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
            offTime = redOff;
     130:	09000004 	stmdbeq	r0, {r2}
     134:	000003e9 	andeq	r0, r0, r9, ror #7
            ledFlag = 0;
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
        if(On)
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
     140:	00004009 	andeq	r4, r0, r9
     144:	033c0400 	teqeq	ip, #0, 8
            leds(led,1);
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
            leds(led,0);
     14c:	006d0902 	rsbeq	r0, sp, r2, lsl #18
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
     158:	1e090300 	cdpne	3, 0, cr0, cr9, cr0, {0}
     15c:	04000001 	streq	r0, [r0], #-1
        if (displayCycle)
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
     164:	00040000 	andeq	r0, r4, r0
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     168:	00042803 	andeq	r2, r4, r3, lsl #16
     16c:	03410400 	movteq	r0, #5120	; 0x1400
     170:	000000da 	ldrdeq	r0, [r0], -sl
        if(onTime > 0)
     174:	00016806 	andeq	r6, r1, r6, lsl #16
            delay(onTime, OFF_PERIOD);
     178:	02720a00 	rsbseq	r0, r2, #0, 20
        when(&On, Check_PERIOD);
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
        release;
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
            led = greenLed;
     188:	000002de 	ldrdeq	r0, [r0], -lr
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
            ch = greenCharacter;
     190:	01000001 	tsteq	r0, r1
            onTime = greenOn;
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
     198:	02000001 	andeq	r0, r0, #1
            offTime = greenOff;
     19c:	037b0801 	cmneq	fp, #65536	; 0x10000
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
            leds(led,0);
     1a4:	0a000001 	beq	1b0 <_Min_Stack_Size+0xb0>
     1a8:	000002ec 	andeq	r0, r0, ip, ror #5
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
     1b0:	01000001 	tsteq	r0, r1
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
        leds(led,0);
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
     1bc:	85090000 	strhi	r0, [r9, #-0]
     1c0:	05000002 	streq	r0, [r0, #-2]
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
            proceed Check_PERIOD;
     1cc:	000005fb 	strdeq	r0, [r0], -fp
}
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
     1d4:	04000000 	streq	r0, [r0], #-0
     1d8:	00046b09 	andeq	r6, r4, r9, lsl #22
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
     1e0:	000000b8 	strheq	r0, [r0], -r8
     1e4:	06030006 	streq	r0, [r3], -r6
     1e8:	05000004 	streq	r0, [r0, #-4]
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
     1f0:	e60c0000 	str	r0, [ip], -r0
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
     1fc:	00360a00 	eorseq	r0, r6, r0, lsl #20
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
     208:	0c010100 	stfeqs	f0, [r1], {-0}
     20c:	0000009b 	muleq	r0, fp, r0
     210:	0000021b 	andeq	r0, r0, fp, lsl r2
     214:	0000880e 	andeq	r8, r0, lr, lsl #16
     218:	07000300 	streq	r0, [r0, -r0, lsl #6]
     21c:	09910601 	ldmibeq	r1, {r0, r9, sl}
     220:	00000245 	andeq	r0, r0, r5, asr #4
    word number = 0;
     224:	00045e08 	andeq	r5, r4, r8, lsl #28
    int numbersIndex = 0;
     228:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
        if(settingsInput[i] == ' ') {
     230:	00010701 	andeq	r0, r1, r1, lsl #14
     234:	00003108 	andeq	r3, r0, r8, lsl #2
            numbers[numbersIndex] = number;
     238:	03940600 	orrseq	r0, r4, #0, 12
     23c:	000000ac 	andeq	r0, r0, ip, lsr #1
            number = 0;
     240:	00000101 	andeq	r0, r0, r1, lsl #2
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	02430300 	subeq	r0, r3, #0, 6
    redOn = numbers[0];
     248:	96060000 	strls	r0, [r6], -r0
     24c:	00021b03 	andeq	r1, r2, r3, lsl #22
    redOff = numbers[1];
     250:	02450500 	subeq	r0, r5, #0, 10
     254:	510c0000 	mrspl	r0, (UNDEF: 12)
    greenOn = numbers[2];
     258:	61000002 	tstvs	r0, r2
     25c:	0d000002 	stceq	0, cr0, [r0, #-8]
    greenOff = numbers[3];
     260:	02560500 	subseq	r0, r6, #0, 10
     264:	a80a0000 	stmdage	sl, {}	; <UNPREDICTABLE>
}
     268:	06000002 	streq	r0, [r0], -r2
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
     270:	01010000 	mrseq	r0, (UNDEF: 1)
            number = number * 10;
     274:	0000a70c 	andeq	sl, r0, ip, lsl #14
            number += settingsInput[i] - 48;
     278:	00027f00 	andeq	r7, r2, r0, lsl #30
     27c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     280:	00000274 	andeq	r0, r0, r4, ror r2
     284:	0003640a 	andeq	r6, r3, sl, lsl #8
     288:	13060700 	movwne	r0, #26368	; 0x6700
     28c:	0000027f 	andeq	r0, r0, pc, ror r2
fsm root {
     290:	fe0a0101 	cdp2	1, 0, cr0, cr10, cr1, {0}
     294:	05000000 	streq	r0, [r0, #-0]
     298:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
     29c:	01010000 	mrseq	r0, (UNDEF: 1)
     2a0:	0004780f 	andeq	r7, r4, pc, lsl #16
     2a4:	016e0800 	cmneq	lr, r0, lsl #16
     2a8:	0002ad10 	andeq	sl, r2, r0, lsl sp
        ser_outf(Initial, "Enter your name: ");
     2ac:	b3040b00 	movwlt	r0, #19200	; 0x4b00
     2b0:	10000002 	andne	r0, r0, r2
        ser_in(Get_Name, username, NAME_LENGTH);
     2b4:	0002bf01 	andeq	fp, r2, r1, lsl #30
     2b8:	009b1100 	addseq	r1, fp, r0, lsl #2
        runfsm blinker;
     2bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2c0:	000001a2 	andeq	r0, r0, r2, lsr #3
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	000002ca 	andeq	r0, r0, sl, asr #5
     2c8:	bf05000d 	svclt	0x0005000d
     2cc:	12000002 	andne	r0, r0, #2
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	00000438 	andeq	r0, r0, r8, lsr r4
     2d4:	13017f08 	movwne	r7, #7944	; 0x1f08
        if (choice == 'A' || choice == 'a'){
     2d8:	000002ca 	andeq	r0, r0, sl, asr #5
     2dc:	5c120101 	ldfpls	f0, [r2], {1}
     2e0:	08000003 	stmdaeq	r0, {r0, r1}
            proceed Adjust_Intervals;
     2e4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
            proceed Monitor;
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
        proceed Show_Menu;
     2ec:	04631201 	strbteq	r1, [r3], #-513	; 0xfffffdff
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     2f4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	01010000 	mrseq	r0, (UNDEF: 1)
     2fc:	03080813 	movweq	r0, #34835	; 0x8813
     300:	03230903 			; <UNDEFINED> instruction: 0x03230903
        processSettingsInput(settings);
     304:	02140000 	andseq	r0, r4, #0
        On = YES;
     308:	08000022 	stmdaeq	r0, {r1, r5}
     30c:	9b070307 	blls	1c0f30 <__ccfg+0x1a0f88>
        trigger(&On);
     310:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
     314:	00054d14 	andeq	r4, r5, r4, lsl sp
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	03080800 	movweq	r0, #34816	; 0x8800
     31c:	0000ce08 	andeq	ip, r0, r8, lsl #28
     320:	0f000400 	svceq	0x00000400
     324:	00000223 	andeq	r0, r0, r3, lsr #4
     328:	03030908 	movweq	r0, #14600	; 0x3908
     32c:	000002fc 	strdeq	r0, [r0], -ip
     330:	00049515 	andeq	r9, r4, r5, lsl r5
        proceed Show_Menu;
     334:	0b083000 	bleq	20c33c <__ccfg+0x1ec394>
     338:	03930803 	orrseq	r0, r3, #196608	; 0x30000
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	80140000 	andshi	r0, r4, r0
     340:	08000004 	stmdaeq	r0, {r2}
        displayCycle = YES;
     344:	9b070314 	blls	1c0f9c <__ccfg+0x1a0ff4>
        ser_inf(Await_Stop, "%c", &ch);
     348:	00000000 	andeq	r0, r0, r0
     34c:	00028f14 	andeq	r8, r2, r4, lsl pc
     350:	03150800 	tsteq	r5, #0, 16
        if(ch == 'S' || ch == 's'){
     354:	00009b07 	andeq	r9, r0, r7, lsl #22
     358:	7b140200 	blvc	500b60 <__ccfg+0x4e0bb8>
     35c:	08000004 	stmdaeq	r0, {r2}
            displayCycle = NO;
     360:	a00a0316 	andge	r0, sl, r6, lsl r3
     364:	04000002 	streq	r0, [r0], #-2
            proceed Show_Menu;
     368:	000f4d14 	andeq	r4, pc, r4, lsl sp	; <UNPREDICTABLE>
        proceed Monitor;
     36c:	03170800 	tsteq	r7, #0, 16
        On = NO;
     370:	0000ce08 	andeq	ip, r0, r8, lsl #28
     374:	31140800 	tstcc	r4, r0, lsl #16
     378:	08000004 	stmdaeq	r0, {r2}
        leds(1, 0);
     37c:	930f0318 	movwls	r0, #62232	; 0xf318
     380:	0c000003 	stceq	0, cr0, [r0], {3}
     384:	00028a14 	andeq	r8, r2, r4, lsl sl
     388:	03190800 	tsteq	r9, #0, 16
     38c:	0003a315 	andeq	sl, r3, r5, lsl r3
     390:	0c002c00 	stceq	12, cr2, [r0], {-0}
        leds(0, 0);
     394:	00000323 	andeq	r0, r0, r3, lsr #6
     398:	000003a3 	andeq	r0, r0, r3, lsr #7
     39c:	0000880e 	andeq	r8, r0, lr, lsl #16
        proceed Show_Menu;
     3a0:	0b000300 	bleq	fa8 <update_n_wake+0x8>
     3a4:	00033004 	andeq	r3, r3, r4
     3a8:	04a00f00 	strteq	r0, [r0], #3840	; 0xf00
     3ac:	1c080000 	stcne	0, cr0, [r8], {-0}
        } else if (choice == 'S' || choice == 's') {
     3b0:	03301b03 	teqeq	r0, #3072	; 0xc00
            proceed Stop;
     3b4:	52120000 	andspl	r0, r2, #0
        } else if (choice == 'V' || choice == 'v') {
     3b8:	08000003 	stmdaeq	r0, {r0, r1}
            proceed View_Settings;
     3bc:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
        } else if (choice == 'M' || choice == 'm') {
     3c0:	01000003 	tsteq	r0, r3
            proceed Monitor;
     3c4:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
     3c8:	16000003 	strne	r0, [r0], -r3
     3cc:	0000025a 	andeq	r0, r0, sl, asr r2
     3d0:	81050c01 	tsthi	r5, r1, lsl #24
     3d4:	01000000 	mrseq	r0, (UNDEF: 0)
     3d8:	00040305 	andeq	r0, r4, r5, lsl #6
     3dc:	ab162000 	blge	5883e4 <__ccfg+0x56843c>
     3e0:	01000004 	tsteq	r0, r4
     3e4:	019b060d 	orrseq	r0, fp, sp, lsl #12
     3e8:	05010000 	streq	r0, [r1, #-0]
     3ec:	00000003 	andeq	r0, r0, r3
     3f0:	02951620 	addseq	r1, r5, #32, 12	; 0x2000000
     3f4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
     3f8:	00009b06 	andeq	r9, r0, r6, lsl #22
     3fc:	03050100 	movweq	r0, #20736	; 0x5100
     400:	20000012 	andcs	r0, r0, r2, lsl r0
     404:	0002d516 	andeq	sp, r2, r6, lsl r5
     408:	060f0100 	streq	r0, [pc], -r0, lsl #2
static void devinit_uart (int devnum) {
     40c:	0000009b 	muleq	r0, fp, r0
	adddevfunc (ioreq_uart_a, devnum);
     410:	10030501 	andne	r0, r3, r1, lsl #10
     414:	16200000 	strtne	r0, [r0], -r0
void udelay (volatile word n) {
     418:	00000047 	andeq	r0, r0, r7, asr #32
     41c:	81051101 	tsthi	r5, r1, lsl #2
	while (n) {
     420:	01000000 	mrseq	r0, (UNDEF: 0)
     424:	00200305 	eoreq	r0, r0, r5, lsl #6
}
     428:	c8162000 	ldmdagt	r6, {sp}
	while (n--);
     42c:	01000002 	tsteq	r0, r2
     430:	019b0612 	orrseq	r0, fp, r2, lsl r6
     434:	05010000 	streq	r0, [r1, #-0]
		n--;
     438:	00000803 	andeq	r0, r0, r3, lsl #16
     43c:	044b1620 	strbeq	r1, [fp], #-1568	; 0xfffff9e0
     440:	13010000 	movwne	r0, #4096	; 0x1000
void mdelay (volatile word n) {
     444:	00009b06 	andeq	r9, r0, r6, lsl #22
     448:	03050100 	movweq	r0, #20736	; 0x5100
	while (n) {
     44c:	20000026 	andcs	r0, r0, r6, lsr #32
     450:	0003da16 	andeq	sp, r3, r6, lsl sl
}
     454:	06140100 	ldreq	r0, [r4], -r0, lsl #2
		udelay (999);
     458:	0000009b 	muleq	r0, fp, r0
     45c:	24030501 	strcs	r0, [r3], #-1281	; 0xfffffaff
		n--;
     460:	16200000 	strtne	r0, [r0], -r0
     464:	00000420 	andeq	r0, r0, r0, lsr #8
     468:	81051701 	tsthi	r5, r1, lsl #14
     46c:	01000000 	mrseq	r0, (UNDEF: 0)
void __pi_ondomain (lword d) {
     470:	00180305 	andseq	r0, r8, r5, lsl #6
     474:	4f172000 	svcmi	0x00172000
		if (__pi_systat.effpdm > 1)
     478:	1a01006e 	bne	40638 <__ccfg+0x20690>
     47c:	00008f09 	andeq	r8, r0, r9, lsl #30
			__pi_systat.effpdm = 1;
     480:	03050100 	movweq	r0, #20736	; 0x5100
	PRCMPowerDomainOn (d);
     484:	2000000c 	andcs	r0, r0, ip
     488:	00045116 	andeq	r5, r4, r6, lsl r1
     48c:	091b0100 	ldmdbeq	fp, {r8}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	0000008f 	andeq	r0, r0, pc, lsl #1
     494:	0e030501 	cfsh32eq	mvfx0, mvfx3, #1
     498:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
	__pi_systat.ondmns |= d;
     49c:	0004ba01 	andeq	fp, r4, r1, lsl #20
     4a0:	06710100 	ldrbteq	r0, [r1], -r0, lsl #2
}
     4a4:	00029001 	andeq	r9, r2, r1
     4a8:	00040c00 	andeq	r0, r4, r0, lsl #24
void __pi_syserror (word ec, const char *m) {
     4ac:	e29c0100 	adds	r0, ip, #0, 2
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	19000005 	stmdbne	r0, {r0, r2}
     4b4:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	9b117101 	blls	45c8c4 <__ccfg+0x43c91c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4bc:	00000000 	andeq	r0, r0, r0
     4c0:	1a000000 	bne	4c8 <__pi_syserror+0x1c>
     4c4:	000000ee 	andeq	r0, r0, lr, ror #1
		all_leds_blink;
     4c8:	aa147501 	bge	51d8d4 <__ccfg+0x4fd92c>
     4cc:	1a000002 	bne	4dc <__pi_syserror+0x30>
     4d0:	0000004e 	andeq	r0, r0, lr, asr #32
     4d4:	b2177801 	andslt	r7, r7, #65536	; 0x10000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	1a000002 	bne	4e8 <__pi_syserror+0x3c>
     4dc:	000000c7 	andeq	r0, r0, r7, asr #1
     4e0:	bc1a7b01 			; <UNDEFINED> instruction: 0xbc1a7b01
     4e4:	1a000002 	bne	4f4 <__pi_syserror+0x48>
     4e8:	000000ad 	andeq	r0, r0, sp, lsr #1
     4ec:	c4187e01 	ldrgt	r7, [r8], #-3585	; 0xfffff1ff
	while (1) {
     4f0:	1a000002 	bne	500 <tci_run_delay_timer>
     4f4:	0000040d 	andeq	r0, r0, sp, lsl #8
     4f8:	ce198701 	cdpgt	7, 1, cr8, cr9, cr1, {0}
     4fc:	1a000002 	bne	50c <tci_run_delay_timer+0xc>
void tci_run_delay_timer () {
     500:	000003b7 			; <UNDEFINED> instruction: 0x000003b7
	setdel = __pi_mintk - __pi_old;
     504:	f01f9801 			; <UNDEFINED> instruction: 0xf01f9801
     508:	1a000002 	bne	518 <tci_run_delay_timer+0x18>
     50c:	00000326 	andeq	r0, r0, r6, lsr #6
     510:	f81c9b01 			; <UNDEFINED> instruction: 0xf81c9b01
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	1a000002 	bne	524 <tci_run_delay_timer+0x24>
     518:	0000033c 	andeq	r0, r0, ip, lsr r3
     51c:	181ca801 	ldmdane	ip, {r0, fp, sp, pc}
     520:	1a000003 	bne	534 <tci_run_delay_timer+0x34>
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	00000000 	andeq	r0, r0, r0
	sti_tim;
     528:	3a16b201 	bcc	5acd34 <__ccfg+0x58cd8c>
}
     52c:	1a000003 	bne	540 <tci_run_auxiliary_timer>
     530:	000002b5 			; <UNDEFINED> instruction: 0x000002b5
     534:	4819b601 	ldmdami	r9, {r0, r9, sl, ip, sp, pc}
     538:	1a000003 	bne	54c <tci_run_auxiliary_timer+0xc>
     53c:	00000111 	andeq	r0, r0, r1, lsl r1
	cli_aux;
     540:	7013c101 	andsvc	ip, r3, r1, lsl #2
     544:	1b000003 	blne	558 <tci_run_auxiliary_timer+0x18>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	00000038 	andeq	r0, r0, r8, lsr r0
     54c:	0002691c 	andeq	r6, r2, ip, lsl r9
     550:	11730100 	cmnne	r3, r0, lsl #2
     554:	000005e2 	andeq	r0, r0, r2, ror #11
	sti_aux;
     558:	00280305 	eoreq	r0, r8, r5, lsl #6
}
     55c:	501d2000 	andspl	r2, sp, r0
     560:	77000000 	strvc	r0, [r0, -r0]
     564:	1c000005 	stcne	0, cr0, [r0], {5}
void AONRTCIntHandler () {
     568:	00000471 	andeq	r0, r0, r1, ror r4
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	9b0e8801 	blls	3a2578 <__ccfg+0x3825d0>
     570:	02000001 	andeq	r0, r0, #1
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	1e004491 	mcrne	4, 0, r4, cr0, cr1, {4}
		if (__pi_utims [0] == 0)
     578:	000002f8 	strdeq	r0, [r0], -r8
     57c:	00000318 	andeq	r0, r0, r8, lsl r3
		if (*(__pi_utims [0])) {
     580:	00000594 	muleq	r0, r4, r5
     584:	0003151c 	andeq	r1, r3, ip, lsl r5
			(*(__pi_utims [0]))--;
     588:	0e9c0100 	fmleqe	f0, f4, f0
		if (__pi_utims [1] == 0)
     58c:	000005f2 	strdeq	r0, [r0], -r2
		if (*(__pi_utims [1])) {
     590:	00449102 	subeq	r9, r4, r2, lsl #2
			aux_timer_inactive = 0;
     594:	0003481e 	andeq	r4, r3, lr, lsl r8
			(*(__pi_utims [1]))--;
     598:	00037000 	andeq	r7, r3, r0
		if (__pi_utims [2] == 0)
     59c:	0005b000 	andeq	fp, r5, r0
		if (*(__pi_utims [2])) {
     5a0:	68631f00 	stmdavs	r3!, {r8, r9, sl, fp, ip}^
			(*(__pi_utims [2]))--;
     5a4:	0eb70100 	frdeqs	f0, f7, f0
		if (__pi_utims [3] != 0) {
     5a8:	0000019b 	muleq	r0, fp, r1
			if (*(__pi_utims [3])) {
     5ac:	00449102 	subeq	r9, r4, r2, lsl #2
				aux_timer_inactive = 0;
     5b0:	00075c20 	andeq	r5, r7, r0, lsr #24
				(*(__pi_utims [3]))--;
     5b4:	00037400 	andeq	r7, r3, r0, lsl #8
	if (__pi_systat.ledsts) {
     5b8:	00006800 	andeq	r6, r0, r0, lsl #16
     5bc:	8dc40100 	stfhie	f0, [r4]
		if (__pi_systat.ledblc++ == 0) {
     5c0:	000005ca 	andeq	r0, r0, sl, asr #11
     5c4:	00076b21 	andeq	r6, r7, r1, lsr #22
			if (__pi_systat.ledblk) {
     5c8:	5c220000 	stcpl	0, cr0, [r2], #-0
     5cc:	8c000007 	stchi	0, cr0, [r0], {7}
     5d0:	80000003 	andhi	r0, r0, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	01000000 	mrseq	r0, (UNDEF: 0)
     5d8:	6b2133c5 	blvs	84d4f4 <__ccfg+0x82d54c>
				if (__pi_systat.ledsts & 0x2)
     5dc:	00000007 	andeq	r0, r0, r7
     5e0:	9b0c0000 	blls	3005e8 <__ccfg+0x2e0640>
     5e4:	f2000001 	vhadd.s8	d0, d0, d1
				if (__pi_systat.ledsts & 0x4)
     5e8:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
				__pi_systat.ledblk = 0;
     5ec:	00000088 	andeq	r0, r0, r8, lsl #1
     5f0:	9b0c0013 	blls	300644 <__ccfg+0x2e069c>
			if (__pi_systat.fstblk)
     5f4:	02000001 	andeq	r0, r0, #1
     5f8:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
				__pi_systat.ledblc = 200;
     5fc:	00000088 	andeq	r0, r0, r8, lsl #1
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	01180031 	tsteq	r8, r1, lsr r0
		cli_tim;
     604:	000002f8 	strdeq	r0, [r0], -r8
		__pi_new += setdel;
     608:	01065901 	tsteq	r6, r1, lsl #18
     60c:	00000224 	andeq	r0, r0, r4, lsr #4
		setdel = 0;
     610:	00000290 	muleq	r0, r0, r2
		RISE_N_SHINE;
     614:	066a9c01 	strbteq	r9, [sl], -r1, lsl #24
		__pi_new += setdel;
     618:	5f190000 	svcpl	0x00190000
		RISE_N_SHINE;
     61c:	01000000 	mrseq	r0, (UNDEF: 0)
     620:	01952259 	orrseq	r2, r5, r9, asr r2
		aux_timer_inactive = 1;
     624:	001e0000 	andseq	r0, lr, r0
     628:	e11c0000 	tst	ip, r0
				if (__pi_systat.ledsts & 0x1)
     62c:	01000003 	tsteq	r0, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	020b0a5a 	andeq	r0, fp, #368640	; 0x5a000
     634:	91020000 	mrsls	r0, (UNDEF: 2)
				if (__pi_systat.ledsts & 0x2)
     638:	008b2368 	addeq	r2, fp, r8, ror #6
     63c:	5b010000 	blpl	40644 <__ccfg+0x2069c>
     640:	00008109 	andeq	r8, r0, r9, lsl #2
				if (__pi_systat.ledsts & 0x8)
     644:	00003100 	andeq	r3, r0, r0, lsl #2
				__pi_systat.ledblk = 1;
     648:	02532300 	subseq	r2, r3, #0, 6
     64c:	5d010000 	stcpl	0, cr0, [r1, #-0]
		if (aux_timer_inactive) {
     650:	00009b0a 	andeq	r9, r0, sl, lsl #22
			cli_aux;
     654:	00004400 	andeq	r4, r0, r0, lsl #8
     658:	00181b00 	andseq	r1, r8, r0, lsl #22
     65c:	69240000 	stmdbvs	r4!, {}	; <UNPREDICTABLE>
     660:	0e5f0100 	rdfeqe	f0, f7, f0
     664:	00000081 	andeq	r0, r0, r1, lsl #1
     668:	01180000 	tsteq	r8, r0
     66c:	0000030d 	andeq	r0, r0, sp, lsl #6
     670:	01061e01 	tsteq	r6, r1, lsl #28
     674:	000000c8 	andeq	r0, r0, r8, asr #1
     678:	00000224 	andeq	r0, r0, r4, lsr #4
word tci_update_delay_ticks (Boolean force) {
     67c:	075c9c01 	ldrbeq	r9, [ip, -r1, lsl #24]
	cli_tim;
     680:	bf190000 	svclt	0x00190000
     684:	01000000 	mrseq	r0, (UNDEF: 0)
	if (setdel) {
     688:	009b141e 	addseq	r1, fp, lr, lsl r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	00780000 	rsbseq	r0, r8, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	101a0000 	andsne	r0, sl, r0
     694:	01000000 	mrseq	r0, (UNDEF: 0)
     698:	010e1925 	tsteq	lr, r5, lsr #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69c:	db1a0000 	blle	6806a4 <__ccfg+0x6606fc>
				AON_RTC_O_CH0CMP)) - gettav ());
     6a0:	01000000 	mrseq	r0, (UNDEF: 0)
	return NO;
     6a4:	00d01947 	sbcseq	r1, r0, r7, asr #18
			setdel = 0;
     6a8:	001b0000 	andseq	r0, fp, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	1f000000 	svcne	0x00000000
     6b0:	0064656c 	rsbeq	r6, r4, ip, ror #10
}
     6b4:	81101f01 	tsthi	r0, r1, lsl #30
		sti_tim;
     6b8:	05000000 	streq	r0, [r0, #-0]
		return YES;
     6bc:	00001403 	andeq	r1, r0, r3, lsl #8
     6c0:	68631f20 	stmdavs	r3!, {r5, r8, r9, sl, fp, ip}^
     6c4:	11200100 			; <UNDEFINED> instruction: 0x11200100
     6c8:	0000019b 	muleq	r0, fp, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	000d0305 	andeq	r0, sp, r5, lsl #6
	UARTDisable (UART0_BASE);
     6d0:	b01c2000 	andslt	r2, ip, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	01000003 	tsteq	r0, r3
	UARTDisable (UART0_BASE);
     6d8:	009b1122 	addseq	r1, fp, r2, lsr #2
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	03050000 	movweq	r0, #20480	; 0x5000
     6e0:	2000001e 	andcs	r0, r0, lr, lsl r0
     6e4:	00031e1c 	andeq	r1, r3, ip, lsl lr
     6e8:	11230100 			; <UNDEFINED> instruction: 0x11230100
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	0000009b 	muleq	r0, fp, r0
     6f0:	001c0305 	andseq	r0, ip, r5, lsl #6
     6f4:	5c252000 	stcpl	0, cr2, [r5], #-0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	dc000007 	stcle	0, cr0, [r0], {7}
     6fc:	e0000000 	and	r0, r0, r0
     700:	01000000 	mrseq	r0, (UNDEF: 0)
	urates [0] = rate;
     704:	07103549 	ldreq	r3, [r0, -r9, asr #10]
}
     708:	6b210000 	blvs	840710 <__ccfg+0x820768>
     70c:	00000007 	andeq	r0, r0, r7
     710:	00075c25 	andeq	r5, r7, r5, lsr #24
     714:	00014e00 	andeq	r4, r1, r0, lsl #28
     718:	00015000 	andeq	r5, r1, r0
     71c:	393b0100 	ldmdbcc	fp!, {r8}
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	0000072a 	andeq	r0, r0, sl, lsr #14
     724:	00076b21 	andeq	r6, r7, r1, lsr #22
     728:	5c250000 	stcpl	0, cr0, [r5], #-0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	aa000007 	bge	750 <reinit_uart+0x30>
     730:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	01000001 	tsteq	r0, r1
     738:	0744953b 	smlaldxeq	r9, r4, fp, r5
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	6b210000 	blvs	840744 <__ccfg+0x82079c>
     740:	00000007 	andeq	r0, r0, r7
     744:	00075c26 	andeq	r5, r7, r6, lsr #24
     748:	0001bc00 	andeq	fp, r1, r0, lsl #24
     74c:	0001c000 	andeq	ip, r1, r0
     750:	91490100 	mrsls	r0, (UNDEF: 89)
     754:	00076b21 	andeq	r6, r7, r1, lsr #22
	switch (operation) {
     758:	00000000 	andeq	r0, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	00048727 	andeq	r8, r4, r7, lsr #14
     760:	01540200 	cmpeq	r4, r0, lsl #4
     764:	79030101 	stmdbvc	r3, {r0, r8}
     768:	28000007 	stmdacs	r0, {r0, r1, r2}
     76c:	00000125 	andeq	r0, r0, r5, lsr #2
				*buf++ = uart_a_read;
     770:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
     774:	00000067 	andeq	r0, r0, r7, rrx
			while (len && uart_a_char_available) {
     778:	00252900 	eoreq	r2, r5, r0, lsl #18
     77c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
     780:	03010101 	movweq	r0, #4353	; 0x1101
			if (len != operation) {
     784:	00012528 	andeq	r2, r1, r8, lsr #10
}
     788:	011e0200 	tsteq	lr, r0, lsl #4
     78c:	00006717 	andeq	r6, r0, r7, lsl r7
			uart_a_disable_int;
     790:	8c000000 	stchi	0, cr0, [r0], {-0}
			if (uart_a_char_available) {
     794:	03000014 	movweq	r0, #20
				*buf++ = uart_a_read;
     798:	00025200 	andeq	r5, r2, r0, lsl #4
			uart_a_disable_int;
     79c:	2f010400 	svccs	0x00010400
     7a0:	0c000001 	stceq	0, cr0, [r0], {1}
			if (uart_a_char_available) {
     7a4:	00000936 	andeq	r0, r0, r6, lsr r9
     7a8:	00000380 	andeq	r0, r0, r0, lsl #7
				uart_a_enable_int;
     7ac:	00000520 	andeq	r0, r0, r0, lsr #10
     7b0:	00000000 	andeq	r0, r0, r0
				goto Redo_rx;
     7b4:	000004ec 	andeq	r0, r0, ip, ror #9
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	74060102 	strvc	r0, [r6], #-258	; 0xfffffefe
     7bc:	02000003 	andeq	r0, r0, #3
			return -2;
     7c0:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
     7c4:	56030000 	strpl	r0, [r3], -r0
				uart_a_write (*buf);
     7c8:	10000016 	andne	r0, r0, r6, lsl r0
     7cc:	003f1828 	eorseq	r1, pc, r8, lsr #16
			while (len && uart_a_room_in_tx) {
     7d0:	04020000 	streq	r0, [r2], #-0
     7d4:	0000a405 	andeq	sl, r0, r5, lsl #8
     7d8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
			if (len != operation) {
     7dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
			uart_a_disable_int;
     7e0:	00220a03 	eoreq	r0, r2, r3, lsl #20
     7e4:	182e1000 	stmdane	lr!, {ip}
			if (uart_a_room_in_tx) {
     7e8:	00000059 	andeq	r0, r0, r9, asr r0
     7ec:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
				uart_a_enable_int;
     7f0:	03000003 	movweq	r0, #3
     7f4:	000020f8 	strdeq	r2, [r0], -r8
				*buf++ = uart_a_read;
     7f8:	6c193110 	ldfvss	f3, [r9], {16}
			if (uart_a_room_in_tx) {
     7fc:	02000000 	andeq	r0, r0, #0
				uart_a_write (*buf);
     800:	02300702 	eorseq	r0, r0, #524288	; 0x80000
     804:	c1030000 	mrsgt	r0, (UNDEF: 3)
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	10000017 	andne	r0, r0, r7, lsl r0
     80c:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
			uart_a_enable_int;
     810:	04020000 	streq	r0, [r2], #-0
     814:	00007907 	andeq	r7, r0, r7, lsl #18
     818:	07080200 	streq	r0, [r8, -r0, lsl #4]
			return 0;
     81c:	00000074 	andeq	r0, r0, r4, ror r0
			if (len == UART_CNTRL_SETRATE) {
     820:	69050404 	stmdbvs	r5, {r2, sl}
				if (__pi_uart_setrate (*((word*)buf),
     824:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     828:	007e0704 	rsbseq	r0, lr, r4, lsl #14
     82c:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
				syserror (EREQPAR, "uar");
     830:	11000003 	tstne	r0, r3
			syserror (ENOOPER, "uai");
     834:	004d1226 	subeq	r1, sp, r6, lsr #4
			if (len == UART_CNTRL_GETRATE) {
     838:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
				return 1;
     83c:	11000015 	tstne	r0, r5, lsl r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	00601227 	rsbeq	r1, r0, r7, lsr #4
			syserror (ENOOPER, "uai");
     844:	a7050000 	strge	r0, [r5, -r0]
     848:	06000000 	streq	r0, [r0], -r0
     84c:	000000a7 	andeq	r0, r0, r7, lsr #1
     850:	00091403 	andeq	r1, r9, r3, lsl #8
     854:	12281100 	eorne	r1, r8, #0, 2
     858:	00000033 	andeq	r0, r0, r3, lsr r0
     85c:	0013c603 	andseq	ip, r3, r3, lsl #12
     860:	122b1100 	eorne	r1, fp, #0, 2
     864:	0000004d 	andeq	r0, r0, sp, asr #32
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	0000c906 	andeq	ip, r0, r6, lsl #18
void UART0IntHandler () {
     86c:	00c90500 	sbceq	r0, r9, r0, lsl #10
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	1f030000 	svcne	0x00030000
     874:	11000016 	tstne	r0, r6, lsl r0
     878:	0073122c 	rsbseq	r1, r3, ip, lsr #4
     87c:	df050000 	svcle	0x00050000
     880:	03000000 	movweq	r0, #0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	00000263 	andeq	r0, r0, r3, ror #4
     888:	73122d11 	tstvc	r2, #1088	; 0x440
		RISE_N_SHINE;
     88c:	03000000 	movweq	r0, #0
     890:	00000770 	andeq	r0, r0, r0, ror r7
		i_trigger (devevent (UART_A, READ));
     894:	08102e11 	ldmdaeq	r0, {r0, r4, r9, sl, fp, sp}
     898:	07000001 	streq	r0, [r0, -r1]
     89c:	0000a704 	andeq	sl, r0, r4, lsl #14
     8a0:	11080800 	tstne	r8, r0, lsl #16
     8a4:	019c0932 	orrseq	r0, ip, r2, lsr r9
     8a8:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
     8ac:	11000002 	tstne	r0, r2
     8b0:	00c90734 	sbceq	r0, r9, r4, lsr r7
     8b4:	01010000 	mrseq	r0, (UNDEF: 1)
     8b8:	98090007 	stmdals	r9, {r0, r1, r2}
     8bc:	11000000 	mrsne	r0, (UNDEF: 0)
     8c0:	00c90335 	sbceq	r0, r9, r5, lsr r3
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	01010000 	mrseq	r0, (UNDEF: 1)
     8c8:	4c090006 	stcmi	0, cr0, [r9], {6}
     8cc:	11000002 	tstne	r0, r2
		i_trigger (devevent (UART_A, WRITE));
     8d0:	00c90336 	sbceq	r0, r9, r6, lsr r3
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	01010000 	mrseq	r0, (UNDEF: 1)
     8d8:	ff090005 			; <UNDEFINED> instruction: 0xff090005
		RISE_N_SHINE;
     8dc:	11000003 	tstne	r0, r3
     8e0:	00c90337 	sbceq	r0, r9, r7, lsr r3
     8e4:	01010000 	mrseq	r0, (UNDEF: 1)
		i_trigger (devevent (UART_A, WRITE));
     8e8:	f8090004 			; <UNDEFINED> instruction: 0xf8090004
     8ec:	11000003 	tstne	r0, r3
     8f0:	00c90338 	sbceq	r0, r9, r8, lsr r3
     8f4:	04010000 	streq	r0, [r1], #-0
     8f8:	e90a0000 	stmdb	sl, {}	; <UNPREDICTABLE>
     8fc:	11000003 	tstne	r0, r3
     900:	00c9073a 	sbceq	r0, r9, sl, lsr r7
     904:	0a010000 	beq	4090c <__ccfg+0x20964>
     908:	00000040 	andeq	r0, r0, r0, asr #32
     90c:	c9033c11 	stmdbgt	r3, {r0, r4, sl, fp, ip, sp}
     910:	02000000 	andeq	r0, r0, #0
}
     914:	00006d0a 	andeq	r6, r0, sl, lsl #26
     918:	033d1100 	teqeq	sp, #0, 2
     91c:	000000c9 	andeq	r0, r0, r9, asr #1
     920:	011e0a03 	tsteq	lr, r3, lsl #20
     924:	3f110000 	svccc	0x00110000
void __buttons_setirq (int val) {
     928:	0000df08 	andeq	sp, r0, r8, lsl #30
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	03000400 	movweq	r0, #1024	; 0x400
     930:	00000428 	andeq	r0, r0, r8, lsr #8
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	0e034111 	mcreq	1, 0, r4, cr3, cr1, {0}
     938:	06000001 	streq	r0, [r0], -r1
     93c:	0000019c 	muleq	r0, ip, r1
		bn = BUTTON_GPIO (__button_list [i]);
     940:	0002720b 	andeq	r7, r2, fp, lsl #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	1a431100 	bne	10c4d4c <__ccfg+0x10a4da4>
     948:	000001a8 	andeq	r0, r0, r8, lsr #3
     94c:	de0b0101 	adflee	f0, f3, f1
     950:	11000002 	tstne	r0, r2
     954:	01c90e45 	biceq	r0, r9, r5, asr #28
     958:	01010000 	mrseq	r0, (UNDEF: 1)
}
     95c:	01cf0407 	biceq	r0, pc, r7, lsl #8
     960:	01020000 	mrseq	r0, (UNDEF: 2)
     964:	00037b08 	andeq	r7, r3, r8, lsl #22
     968:	01cf0500 	biceq	r0, pc, r0, lsl #10
void __pinlist_setirq (int val) {
     96c:	ec0b0000 	stc	0, cr0, [fp], {-0}
	for (i = 0; i < N_PINLIST; i++) {
     970:	11000002 	tstne	r0, r2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	01c91e45 	biceq	r1, r9, r5, asr #28
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	01010000 	mrseq	r0, (UNDEF: 1)
	for (i = 0; i < N_PINLIST; i++) {
     97c:	8f120808 	svchi	0x00120808
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	00021a09 	andeq	r1, r2, r9, lsl #20
     984:	02850a00 	addeq	r0, r5, #0, 20
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     988:	90120000 	andsls	r0, r2, r0
     98c:	0000730b 	andeq	r7, r0, fp, lsl #6
     990:	fb0a0000 	blx	28099a <__ccfg+0x2609f2>
	for (i = 0; i < N_PINLIST; i++) {
     994:	12000005 	andne	r0, r0, #5
}
     998:	00a70891 	umlaleq	r0, r7, r1, r8
     99c:	0a040000 	beq	1009a4 <__ccfg+0xe09fc>
     9a0:	0000046b 	andeq	r0, r0, fp, ror #8
     9a4:	d5109212 	ldrle	r9, [r0, #-530]	; 0xfffffdee
void GPIOIntHandler () {
     9a8:	06000000 	streq	r0, [r0], -r0
if (buttons_int) {
     9ac:	04060300 	streq	r0, [r6], #-768	; 0xfffffd00
     9b0:	93120000 	tstls	r2, #0
	buttons_disable ();
     9b4:	0001e903 	andeq	lr, r1, r3, lsl #18
     9b8:	021a0500 	andseq	r0, sl, #0, 10
	i_trigger ((aword)&__button_list);
     9bc:	1a0c0000 	bne	3009c4 <__ccfg+0x2e0a1c>
     9c0:	36000002 	strcc	r0, [r0], -r2
     9c4:	0d000002 	stceq	0, cr0, [r0, #-8]
     9c8:	00360b00 	eorseq	r0, r6, r0, lsl #22
     9cc:	99120000 	ldmdbls	r2, {}	; <UNPREDICTABLE>
     9d0:	00022b0f 	andeq	r2, r2, pc, lsl #22
     9d4:	07010100 	streq	r0, [r1, -r0, lsl #2]
     9d8:	0000da04 	andeq	sp, r0, r4, lsl #20
     9dc:	13010800 	movwne	r0, #6144	; 0x1800
     9e0:	02740991 	rsbseq	r0, r4, #2375680	; 0x244000
     9e4:	5e090000 	cdppl	0, 0, cr0, cr9, cr0, {0}
	RISE_N_SHINE;
     9e8:	13000004 	movwne	r0, #4
     9ec:	00c90793 	smulleq	r0, r9, r3, r7
     9f0:	07010000 	streq	r0, [r1, -r0]
if (pin_sensor_int) {
     9f4:	31090001 	tstcc	r9, r1
     9f8:	13000000 	movwne	r0, #0
	i_trigger ((aword)(&__input_pins));
     9fc:	00c90394 	smulleq	r0, r9, r4, r3
     a00:	01010000 	mrseq	r0, (UNDEF: 1)
     a04:	03000000 	movweq	r0, #0
     a08:	00000243 	andeq	r0, r0, r3, asr #4
     a0c:	4a039613 	bmi	e6260 <__ccfg+0xc62b8>
     a10:	05000002 	streq	r0, [r0, #-2]
     a14:	00000274 	andeq	r0, r0, r4, ror r2
     a18:	0002800c 	andeq	r8, r2, ip
     a1c:	00029000 	andeq	r9, r2, r0
     a20:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     a24:	00000285 	andeq	r0, r0, r5, lsl #5
	__pinsen_disable_and_clear;
     a28:	0002a80b 	andeq	sl, r2, fp, lsl #16
	RISE_N_SHINE;
     a2c:	179c1300 	ldrne	r1, [ip, r0, lsl #6]
     a30:	00000290 	muleq	r0, r0, r2
     a34:	b30c0101 	movwlt	r0, #49409	; 0xc101
}
     a38:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     a3c:	0d000002 	stceq	0, cr0, [r0, #-8]
     a40:	02a30500 	adceq	r0, r3, #0, 10
     a44:	640b0000 	strvs	r0, [fp], #-0
     a48:	14000003 	strne	r0, [r0], #-3
void system_init () {
     a4c:	02ae1306 	adceq	r1, lr, #402653184	; 0x18000000
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	01010000 	mrseq	r0, (UNDEF: 1)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a54:	0000fe0b 	andeq	pc, r0, fp, lsl #28
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	0ec31200 	cdpeq	2, 12, cr1, cr3, cr0, {0}
     a5c:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     a60:	780e0101 	stmdavc	lr, {r0, r8}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a64:	15000004 	strne	r0, [r0, #-4]
     a68:	dc10016e 	ldfles	f0, [r0], {110}	; 0x6e
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a6c:	07000002 	streq	r0, [r0, -r2]
     a70:	0002e204 	andeq	lr, r2, r4, lsl #4
     a74:	ee010f00 	cdp	15, 0, cr0, cr1, cr0, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	10000002 	andne	r0, r0, r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a7c:	000000a7 	andeq	r0, r0, r7, lsr #1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a80:	01d60c00 	bicseq	r0, r6, r0, lsl #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a84:	02f90000 	rscseq	r0, r9, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	000d0000 	andeq	r0, sp, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8c:	0002ee05 	andeq	lr, r2, r5, lsl #28
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	04381100 	ldrteq	r1, [r8], #-256	; 0xffffff00
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	7f150000 	svcvc	0x00150000
		pin = (port_confs [i] >> 19) & 0x1f;
     a98:	02f91601 	rscseq	r1, r9, #1048576	; 0x100000
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9c:	01010000 	mrseq	r0, (UNDEF: 1)
     aa0:	00035c11 	andeq	r5, r3, r1, lsl ip
     aa4:	01821500 	orreq	r1, r2, r0, lsl #10
     aa8:	0000eb14 	andeq	lr, r0, r4, lsl fp
		if (port_confs [i] & 0x80)
     aac:	11010100 	mrsne	r0, (UNDEF: 17)
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	00000463 	andeq	r0, r0, r3, ror #8
     ab4:	0e02d815 	mcreq	8, 0, sp, cr2, cr5, {0}
		if (port_confs [i] & 0x40)
     ab8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	08120101 	ldmdaeq	r2, {r0, r8}
     ac0:	09030315 	stmdbeq	r3, {r0, r2, r4, r8, r9}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00000352 	andeq	r0, r0, r2, asr r3
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	00220213 	eoreq	r0, r2, r3, lsl r2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	03071500 	movweq	r1, #29952	; 0x7500
	all_leds_blink;
     ad0:	0000a707 	andeq	sl, r0, r7, lsl #14
     ad4:	4d130000 	ldcmi	0, cr0, [r3, #-0]
     ad8:	15000005 	strne	r0, [r0, #-5]
     adc:	f0080308 			; <UNDEFINED> instruction: 0xf0080308
     ae0:	04000000 	streq	r0, [r0], #-0
     ae4:	02230e00 	eoreq	r0, r3, #0, 28
     ae8:	09150000 	ldmdbeq	r5, {}	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aec:	032b0303 			; <UNDEFINED> instruction: 0x032b0303
     af0:	95140000 	ldrls	r0, [r4, #-0]
     af4:	30000004 	andcc	r0, r0, r4
     af8:	08030b15 	stmdaeq	r3, {r0, r2, r4, r8, r9, fp}
     afc:	000003c2 	andeq	r0, r0, r2, asr #7
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	00048013 	andeq	r8, r4, r3, lsl r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	03141500 	tsteq	r4, #0, 10
     b08:	0000a708 	andeq	sl, r0, r8, lsl #14
	IntEnable (INT_AON_RTC_COMB);
     b0c:	8f130000 	svchi	0x00130000
     b10:	15000002 	strne	r0, [r0, #-2]
     b14:	a7080315 	smladge	r8, r5, r3, r0
	__pi_malloc_init ();
     b18:	02000000 	andeq	r0, r0, #0
	IntEnable (INT_AON_GPIO_EDGE);
     b1c:	00047b13 	andeq	r7, r4, r3, lsl fp
     b20:	03161500 	tsteq	r6, #0, 10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	0002cf0b 	andeq	ip, r2, fp, lsl #30
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b28:	4d130400 	cfldrsmi	mvf0, [r3, #-0]
     b2c:	1500000f 	strne	r0, [r0, #-15]
     b30:	f0090317 			; <UNDEFINED> instruction: 0xf0090317
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     b38:	00043113 	andeq	r3, r4, r3, lsl r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	03181500 	tsteq	r8, #0, 10
     b40:	0003c20f 	andeq	ip, r3, pc, lsl #4
     b44:	8a130c00 	bhi	4c3b4c <__ccfg+0x4a3ba4>
	urates [0] = UART_RATE / 100;
     b48:	15000002 	strne	r0, [r0, #-2]
     b4c:	d2150319 	andsle	r0, r5, #1677721600	; 0x64000000
	reinit_uart ();
     b50:	2c000003 	stccs	0, cr0, [r0], {3}
	EXTRA_INITIALIZERS;
     b54:	03520c00 	cmpeq	r2, #0, 24
     b58:	03d20000 	bicseq	r0, r2, #0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b5c:	94150000 	ldrls	r0, [r5], #-0
     b60:	03000000 	movweq	r0, #0
     b64:	5f040700 	svcpl	0x00040700
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b68:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     b6c:	000004a0 	andeq	r0, r0, r0, lsr #9
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b70:	1b031c15 	blne	c7bcc <__ccfg+0xa7c24>
     b74:	0000035f 	andeq	r0, r0, pc, asr r3
			devinit [i] . init (devinit [i] . param);
     b78:	00035211 	andeq	r5, r3, r1, lsl r2
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	031e1500 	tsteq	lr, #0, 10
     b80:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
     b84:	07010100 	streq	r0, [r1, -r0, lsl #2]
	IntEnable (INT_UART0_COMB);
     b88:	0003d804 	andeq	sp, r3, r4, lsl #16
     b8c:	04bf0b00 	ldrteq	r0, [pc], #2816	; b94 <system_init+0x148>
}
     b90:	1d160000 	ldcne	0, cr0, [r6, #-0]
	tci_run_auxiliary_timer ();
     b94:	0000a713 	andeq	sl, r0, r3, lsl r7
		diag ("");
     b98:	0b010100 	bleq	40fa0 <__ccfg+0x20ff8>
     b9c:	00000729 	andeq	r0, r0, r9, lsr #14
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     ba0:	b81a1e16 	ldmdalt	sl, {r1, r2, r4, r9, sl, fp, ip}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	01000000 	mrseq	r0, (UNDEF: 0)
		diag ("Leftover RAM: %d bytes",
     ba8:	08b90b01 	ldmeq	r9!, {r0, r8, r9, fp}
     bac:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
     bb0:	0000b824 	andeq	fp, r0, r4, lsr #16
     bb4:	0b010100 	bleq	40fbc <__ccfg+0x21014>
     bb8:	000005e8 	andeq	r0, r0, r8, ror #11
     bbc:	f4142216 			; <UNDEFINED> instruction: 0xf4142216
     bc0:	01000003 	tsteq	r0, r3
     bc4:	05310301 	ldreq	r0, [r1, #-769]!	; 0xfffffcff
     bc8:	43160000 	tstmi	r6, #0
     bcc:	00043e10 	andeq	r3, r4, r0, lsl lr
     bd0:	44040700 	strmi	r0, [r4], #-1792	; 0xfffff900
     bd4:	0f000004 	svceq	0x00000004
     bd8:	00045001 	andeq	r5, r4, r1
     bdc:	008d1000 	addeq	r1, sp, r0
     be0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     be4:	09461608 	stmdbeq	r6, {r3, r9, sl, ip}^
     be8:	00000474 	andeq	r0, r0, r4, ror r4
     bec:	000a940a 	andeq	r9, sl, sl, lsl #8
     bf0:	0f4a1600 	svceq	0x004a1600
     bf4:	00000432 	andeq	r0, r0, r2, lsr r4
     bf8:	07960a00 	ldreq	r0, [r6, r0, lsl #20]
     bfc:	4b160000 	blmi	580c04 <__ccfg+0x560c5c>
     c00:	00008d07 	andeq	r8, r0, r7, lsl #26
__attribute__ ((noreturn)) void __pi_release () {
     c04:	03000400 	movweq	r0, #1024	; 0x400
     c08:	000005b7 			; <UNDEFINED> instruction: 0x000005b7
     c0c:	50034c16 	andpl	r4, r3, r6, lsl ip
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c10:	05000004 	streq	r0, [r0, #-4]
	check_stack_overflow;
     c14:	00000474 	andeq	r0, r0, r4, ror r4
     c18:	0000fc0c 	andeq	pc, r0, ip, lsl #24
     c1c:	00049500 	andeq	r9, r4, r0, lsl #10
	update_n_wake (MAX_WORD, NO);
     c20:	00941500 	addseq	r1, r4, r0, lsl #10
     c24:	00030000 	andeq	r0, r3, r0
     c28:	0009090b 	andeq	r0, r9, fp, lsl #18
	for_all_tasks (__pi_curr) {
     c2c:	120d0100 	andne	r0, sp, #0, 2
     c30:	00000485 	andeq	r0, r0, r5, lsl #9
     c34:	800c0101 	andhi	r0, ip, r1, lsl #2
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	b3000004 	movwlt	r0, #4
	__SLEEP;
     c3c:	15000004 	strne	r0, [r0, #-4]
     c40:	00000094 	muleq	r0, r4, r0
     c44:	a3050001 	movwge	r0, #20481	; 0x5001
     c48:	16000004 	strne	r0, [r0], -r4
	system_event_count ++;
     c4c:	00000919 	andeq	r0, r0, r9, lsl r9
     c50:	b318cf01 	tstlt	r8, #1, 30
	switch (__pi_systat.effpdm) {
     c54:	0c000004 	stceq	0, cr0, [r0], {4}
     c58:	000000eb 	andeq	r0, r0, fp, ror #1
     c5c:	000004d4 	ldrdeq	r0, [r0], -r4
     c60:	00009415 	andeq	r9, r0, r5, lsl r4
			__WFI ();
     c64:	05001000 	streq	r1, [r0, #-0]
     c68:	000004c4 	andeq	r0, r0, r4, asr #9
     c6c:	00071617 	andeq	r1, r7, r7, lsl r6
	check_stack_overflow;
     c70:	0dec0100 	stfeqe	f0, [ip]
     c74:	000004d4 	ldrdeq	r0, [r0], -r4
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c78:	78030501 	stmdavc	r3, {r0, r8, sl}
     c7c:	1800002d 	stmdane	r0, {r0, r2, r3, r5}
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	00000596 	muleq	r0, r6, r5
			goto Redo;
     c84:	0d010c01 	stceq	12, cr0, [r1, #-4]
	for_all_tasks (__pi_curr) {
     c88:	000000a7 	andeq	r0, r0, r7, lsr #1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	003c0305 	eorseq	r0, ip, r5, lsl #6
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	36192000 	ldrcc	r2, [r9], -r0
     c94:	01000002 	tsteq	r0, r2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	050802d0 	streq	r0, [r8, #-720]	; 0xfffffd30
     c9c:	00007803 	andeq	r7, r0, r3, lsl #16
     ca0:	00a70c20 	adceq	r0, r7, r0, lsr #24
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca4:	051e0000 	ldreq	r0, [lr, #-0]
     ca8:	94150000 	ldrls	r0, [r5], #-0
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	05171800 	ldreq	r1, [r7, #-2048]	; 0xfffff800
			__WFI ();
     cb4:	d2010000 	andle	r0, r1, #0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb8:	050e0d02 	streq	r0, [lr, #-3330]	; 0xfffff2fe
     cbc:	03050000 	movweq	r0, #20480	; 0x5000
}
     cc0:	2000003e 	andcs	r0, r0, lr, lsr r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cc4:	0002c119 	andeq	ip, r2, r9, lsl r1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc8:	048c0100 	streq	r0, [ip], #256	; 0x100
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	80030507 	andhi	r0, r3, r7, lsl #10
     cd0:	1a200000 	bne	800cd8 <__ccfg+0x7e0d30>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd4:	00050b01 	andeq	r0, r5, r1, lsl #22
     cd8:	05720100 	ldrbeq	r0, [r2, #-256]!	; 0xffffff00
     cdc:	008d0105 	addeq	r0, sp, r5, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	0ebc0000 	cdpeq	0, 11, cr0, cr12, cr0, {0}
     ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
     cec:	00000584 	andeq	r0, r0, r4, lsl #11
     cf0:	0005081b 	andeq	r0, r5, fp, lsl r8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	00057200 	andeq	r7, r5, r0, lsl #4
     cf8:	00691c00 	rsbeq	r1, r9, r0, lsl #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	11057601 	tstne	r5, r1, lsl #12
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d00:	000000bd 	strheq	r0, [r0], -sp
     d04:	11f71d00 	mvnsne	r1, r0, lsl #26
     d08:	0e9e0000 	cdpeq	0, 9, cr0, cr14, cr0, {0}
     d0c:	0ea00000 	cdpeq	0, 10, cr0, cr0, cr0, {0}
     d10:	8d010000 	stchi	0, cr0, [r1, #-0]
			SysCtrlSetRechargeBeforePowerDown
     d14:	1e000205 	cdpne	2, 0, cr0, cr0, cr5, {0}
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d18:	0007b001 	andeq	fp, r7, r1
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	05680100 	strbeq	r0, [r8, #-256]!	; 0xffffff00
     d20:	000c0421 	andeq	r0, ip, r1, lsr #8
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	000e5c00 	andeq	r5, lr, r0, lsl #24
     d28:	e49c0100 	ldr	r0, [ip], #256	; 0x100
     d2c:	1f000007 	svcne	0x00000007
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	000007bd 			; <UNDEFINED> instruction: 0x000007bd
     d34:	2001080d 	andcs	r0, r1, sp, lsl #16
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	000011d0 	ldrdeq	r1, [r0], -r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	00000c04 	andeq	r0, r0, r4, lsl #24
     d40:	00000368 	andeq	r0, r0, r8, ror #6
     d44:	02056a01 	andeq	r6, r5, #4096	; 0x1000
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d48:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
			while (!(AONWUCPowerStatusGet () &
     d4c:	0011df21 	andseq	sp, r1, r1, lsr #30
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	12220000 	eorne	r0, r2, #0
     d54:	1e000008 	cdpne	0, 0, cr0, cr0, cr8, {0}
     d58:	8800000c 	stmdahi	r0, {r2, r3}
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	0d000003 	stceq	0, cr0, [r0, #-12]
     d60:	07b30227 	ldreq	r0, [r3, r7, lsr #4]!
     d64:	88230000 	stmdahi	r3!, {}	; <UNPREDICTABLE>
     d68:	24000003 	strcs	r0, [r0], #-3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	00000820 	andeq	r0, r0, r0, lsr #16
     d70:	00000cac 	andeq	r0, r0, ip, lsr #25
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	00125c25 	andseq	r5, r2, r5, lsr #24
     d78:	000c1e00 	andeq	r1, ip, r0, lsl #28
			SysCtrlAdjustRechargeAfterPowerDown ();
     d7c:	0003b000 	andeq	fp, r3, r0
			reinit_uart ();
     d80:	04b30100 	ldrteq	r0, [r3], #256	; 0x100
     d84:	14381d04 	ldrtne	r1, [r8], #-3332	; 0xfffff2fc
     d88:	0c960000 	ldceq	0, cr0, [r6], {0}
}
     d8c:	0ca20000 	stceq	0, cr0, [r2]
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d90:	a4010000 	strge	r0, [r1], #-0
     d94:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	aa000012 	bge	de8 <__pi_release+0x1e4>
     d9c:	ac00000c 	stcge	0, cr0, [r0], {12}
     da0:	0100000c 	tsteq	r0, ip
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	250404aa 	strcs	r0, [r4, #-1194]	; 0xfffffb56
     da8:	000012c0 	andeq	r1, r0, r0, asr #5
     dac:	00000cc2 	andeq	r0, r0, r2, asr #25
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     db0:	000003c8 	andeq	r0, r0, r8, asr #7
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	0404bb01 	streq	fp, [r4], #-2817	; 0xfffff4ff
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	00144325 	andseq	r4, r4, r5, lsr #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dbc:	000cc200 	andeq	ip, ip, r0, lsl #4
     dc0:	0003e800 	andeq	lr, r3, r0, lsl #16
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	04c50100 	strbeq	r0, [r5], #256	; 0x100
     dc8:	128e2004 	addne	r2, lr, #4
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	0cca0000 	stcleq	0, cr0, [sl], {0}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd0:	04080000 	streq	r0, [r8], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd4:	c0010000 	andgt	r0, r1, r0
     dd8:	06510404 	ldrbeq	r0, [r1], -r4, lsl #8
			PRCMPowerDomainOff (
     ddc:	9d210000 	stcls	0, cr0, [r1, #-0]
     de0:	00000012 	andeq	r0, r0, r2, lsl r0
	__SLEEP;
     de4:	00125c1d 	andseq	r5, r2, sp, lsl ip
     de8:	000cda00 	andeq	sp, ip, r0, lsl #20
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	000cdc00 	andeq	sp, ip, r0, lsl #24
	goto Redo;
     df0:	04c30100 	strbeq	r0, [r3], #256	; 0x100
     df4:	142d2504 	strtne	r2, [sp], #-1284	; 0xfffffafc
     df8:	0cde0000 	ldcleq	0, cr0, [lr], {0}
     dfc:	04280000 	strteq	r0, [r8], #-0
     e00:	d5010000 	strle	r0, [r1, #-0]
     e04:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
     e08:	f4000014 	vst4.8	{d0-d3}, [r0 :64], r4
     e0c:	4800000c 	stmdami	r0, {r2, r3}
     e10:	01000004 	tsteq	r0, r4
     e14:	8e0404cc 	cdphi	4, 0, cr0, cr4, cr12, {6}
     e18:	21000006 	tstcs	r0, r6
     e1c:	0000145d 	andeq	r1, r0, sp, asr r4
     e20:	125c1d00 	subsne	r1, ip, #0, 26
     e24:	0d180000 	ldceq	0, cr0, [r8, #-0]
     e28:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
     e2c:	df010000 	svcle	0x00010000
     e30:	38250404 	stmdacc	r5!, {r2, sl}
     e34:	38000014 	stmdacc	r0, {r2, r4}
     e38:	6000000d 	andvs	r0, r0, sp
     e3c:	01000004 	tsteq	r0, r4
     e40:	250404e8 	strcs	r0, [r4, #-1256]	; 0xfffffb18
     e44:	0000127f 	andeq	r1, r0, pc, ror r2
     e48:	00000d3c 	andeq	r0, r0, ip, lsr sp
     e4c:	00000478 	andeq	r0, r0, r8, ror r4
     e50:	0d04ee01 	stceq	14, cr14, [r4, #-4]
     e54:	00128e26 	andseq	r8, r2, r6, lsr #28
     e58:	000d4600 	andeq	r4, sp, r0, lsl #12
int main (void) {
     e5c:	000d4a00 	andeq	r4, sp, r0, lsl #20
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
     e64:	0006dc04 	andeq	sp, r6, r4, lsl #24
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	129d2100 	addsne	r2, sp, #0, 2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	25000000 	strcs	r0, [r0, #-0]
	system_init ();
     e70:	00001443 	andeq	r1, r0, r3, asr #8
	tcv_init ();
     e74:	00000d6a 	andeq	r0, r0, sl, ror #26
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e78:	00000490 	muleq	r0, r0, r4
     e7c:	0404f701 	streq	pc, [r4], #-1793	; 0xfffff8ff
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	00144e20 	andseq	r4, r4, r0, lsr #28
     e84:	000d6c00 	andeq	r6, sp, r0, lsl #24
     e88:	0004a800 	andeq	sl, r4, r0, lsl #16
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
     e90:	00070804 	andeq	r0, r7, r4, lsl #16
	delay (16, 0);
     e94:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
     e98:	1d000000 	stcne	0, cr0, [r0, #-0]
     e9c:	000012b6 			; <UNDEFINED> instruction: 0x000012b6
	__pi_release ();
     ea0:	00000d74 	andeq	r0, r0, r4, ror sp
     ea4:	00000d78 	andeq	r0, r0, r8, ror sp
     ea8:	0404fd01 	streq	pc, [r4], #-3329	; 0xfffff2ff
     eac:	00125c1d 	andseq	r5, r2, sp, lsl ip
     eb0:	000d7800 	andeq	r7, sp, r0, lsl #16
     eb4:	000d7a00 	andeq	r7, sp, r0, lsl #20
     eb8:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
static void killev (__pi_pcb_t *pid) {
     ebc:	0b952604 	bleq	fe54a6d4 <_estack+0xde5456d4>
	wfun = (aword)(pid->code);
     ec0:	0d820000 	stceq	0, cr0, [r2]
	for_all_tasks (i) {
     ec4:	0d8e0000 	stceq	0, cr0, [lr]
		for (j = 0; j < nevents (i); j++) {
     ec8:	0d010000 	stceq	0, cr0, [r1, #-0]
     ecc:	075c0405 	ldrbeq	r0, [ip, -r5, lsl #8]
     ed0:	11270000 			; <UNDEFINED> instruction: 0x11270000
			    || i->Events [j] . Event == wfun
     ed4:	82000013 	andhi	r0, r0, #19
		for (j = 0; j < nevents (i); j++) {
     ed8:	8c00000d 	stchi	0, cr0, [r0], {13}
			if (i->Events [j] . Event == (aword)pid
     edc:	0100000d 	tsteq	r0, sp
     ee0:	210203bd 			; <UNDEFINED> instruction: 0x210203bd
     ee4:	0000132d 	andeq	r1, r0, sp, lsr #6
				wakeupev (i, j);
     ee8:	00132021 	andseq	r2, r3, r1, lsr #32
     eec:	1d000000 	stcne	0, cr0, [r0, #-0]
	for_all_tasks (i) {
     ef0:	0000125c 	andeq	r1, r0, ip, asr r2
}
     ef4:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	00000db8 			; <UNDEFINED> instruction: 0x00000db8
static void qfree (aword *ch) {
     efc:	04053e01 	streq	r3, [r5], #-3585	; 0xfffff1ff
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f00:	0012741d 	andseq	r7, r2, sp, lsl r4
	cc = (aword*)(mpools + MA_NP);
     f04:	000db800 	andeq	fp, sp, r0, lsl #16
	m_setnextp (ch, chunk);
     f08:	000dc800 	andeq	ip, sp, r0, lsl #16
	m_setnextp (cc, ch);
     f0c:	05410100 	strbeq	r0, [r1, #-256]	; 0xffffff00
}
     f10:	125c1d04 	subsne	r1, ip, #4, 26	; 0x100
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	0dc80000 	stcleq	0, cr0, [r8]
     f18:	0dca0000 	stcleq	0, cr0, [sl]
     f1c:	44010000 	strmi	r0, [r1], #-0
			m_setnextp (cc, m_nextp (chunk));
     f20:	7f250405 	svcvc	0x00250405
			m_size (chunk) += m_hdrlen + m_size (ch);
     f24:	ca000012 	bgt	f74 <qfree+0x7c>
     f28:	c000000d 	andgt	r0, r0, sp
     f2c:	01000004 	tsteq	r0, r4
     f30:	250b0547 	strcs	r0, [fp, #-1351]	; 0xfffffab9
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	0000146b 	andeq	r1, r0, fp, ror #8
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	00000dd2 	ldrdeq	r0, [r0], -r2
     f3c:	000004d8 	ldrdeq	r0, [r0], -r8
     f40:	04054b01 	streq	r4, [r5], #-2817	; 0xfffff4ff
			m_setnextp (cc, m_nextp (chunk));
     f44:	ed280000 	stc	0, cr0, [r8, #-0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	38000011 	stmdacc	r0, {r0, r4}
     f4c:	3a00000c 	bcc	f84 <dgout+0xc>
     f50:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
     f54:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
     f58:	66000011 			; <UNDEFINED> instruction: 0x66000011
     f5c:	6800000c 	stmdavs	r0, {r2, r3}
			if (m_size (chunk) >= m_size (ch))
     f60:	0d00000c 	stceq	0, cr0, [r0, #-48]	; 0xffffffd0
     f64:	f7280227 			; <UNDEFINED> instruction: 0xf7280227
     f68:	ec000011 	stc	0, cr0, [r0], {17}
		chunk = m_nextp (chunk))
     f6c:	ee00000d 	cdp	0, 0, cr0, cr0, cr13, {0}
     f70:	0d00000d 	stceq	0, cr0, [r0, #-52]	; 0xffffffcc
     f74:	1a000227 	bne	1818 <ser_inf+0x38>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	00082801 	andeq	r2, r8, r1, lsl #16
	diag_wait (a);
     f7c:	055c0100 	ldrbeq	r0, [ip, #-256]	; 0xffffff00
	diag_wchar (c, a);
     f80:	00a70106 	adceq	r0, r7, r6, lsl #2
	...
}
     f8c:	9c010000 	stcls	0, cr0, [r1], {-0}
	syserror (ESTATE, "state");
     f90:	00000812 	andeq	r0, r0, r2, lsl r8
     f94:	00637329 	rsbeq	r7, r3, r9, lsr #6
     f98:	07055e01 	streq	r5, [r5, -r1, lsl #28]
     f9c:	000000a7 	andeq	r0, r0, r7, lsr #1
void update_n_wake (word min, Boolean force) {
     fa0:	000000b7 	strheq	r0, [r0], -r7
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	07482a00 	strbeq	r2, [r8, -r0, lsl #20]
     fa8:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
     fac:	2a031404 	bcs	c5fc4 <__ccfg+0xa601c>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	2b000008 	blcs	fd8 <update_n_wake+0x38>
     fb4:	000009e1 	andeq	r0, r0, r1, ror #19
     fb8:	0104ad01 	tsteq	r4, r1, lsl #26
     fbc:	ec012c00 	stc	12, cr2, [r1], {-0}
     fc0:	01000006 	tsteq	r0, r6
     fc4:	0106047e 	tsteq	r6, lr, ror r4
	...
     fd0:	08559c01 	ldmdaeq	r5, {r0, sl, fp, ip, pc}^
     fd4:	802d0000 	eorhi	r0, sp, r0
     fd8:	01000002 	tsteq	r0, r2
     fdc:	a719047e 			; <UNDEFINED> instruction: 0xa719047e
     fe0:	ca000000 	bgt	fe8 <update_n_wake+0x48>
		for_all_tasks (i) {
     fe4:	00000000 	andeq	r0, r0, r0
	__pi_mintk = znew + min;
     fe8:	0575011e 	ldrbeq	r0, [r5, #-286]!	; 0xfffffee2
     fec:	01010000 	mrseq	r0, (UNDEF: 1)
			if (!twaiting (i))
     ff0:	0a4c0604 	beq	1302808 <__ccfg+0x12e2860>
     ff4:	0c040000 	stceq	0, cr0, [r4], {-0}
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	9c010000 	stcls	0, cr0, [r1], {-0}
     ffc:	00000a1e 	andeq	r0, r0, lr, lsl sl
    1000:	000b762e 	andeq	r7, fp, lr, lsr #12
    1004:	000b7c00 	andeq	r7, fp, r0, lsl #24
    1008:	00088600 	andeq	r8, r8, r0, lsl #12
    100c:	00691c00 	rsbeq	r1, r9, r0, lsl #24
    1010:	0b046b01 	bleq	11bc1c <__ccfg+0xfbc74>
    1014:	0000008d 	andeq	r0, r0, sp, lsl #1
    1018:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    101c:	0a760000 	beq	1d81024 <__ccfg+0x1d6107c>
    1020:	02480000 	subeq	r0, r8, #0
    1024:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
				wakeuptm (i);
    1028:	54200204 	strtpl	r0, [r0], #-516	; 0xfffffdfc
    102c:	7800000f 	stmdavc	r0, {r0, r1, r2, r3}
		for_all_tasks (i) {
    1030:	6800000a 	stmdavs	r0, {r1, r3}
				d = i->Timer - znew;
    1034:	01000002 	tsteq	r0, r2
    1038:	1a02040b 	bne	8206c <__ccfg+0x620c4>
    103c:	23000009 	movwcs	r0, #9
		if ((word)(__pi_mintk - znew) < min) 
    1040:	00000268 	andeq	r0, r0, r8, ror #4
    1044:	000f612f 	andeq	r6, pc, pc, lsr #2
    1048:	0f6d3000 	svceq	0x006d3000
	__pi_old = znew;
    104c:	02680000 	rsbeq	r0, r8, #0
}
    1050:	6e310000 	cdpvs	0, 3, cr0, cr1, cr0, {0}
	TCI_RUN_DELAY_TIMER;
    1054:	dd00000f 	stcle	0, cr0, [r0, #-60]	; 0xffffffc4
}
    1058:	22000000 	andcs	r0, r0, #0
    105c:	000013c9 	andeq	r1, r0, r9, asr #7
    1060:	00000a82 	andeq	r0, r0, r2, lsl #21
    1064:	00000288 	andeq	r0, r0, r8, lsl #5
    1068:	e704fa01 	str	pc, [r4, -r1, lsl #20]
void proceed (word state) {
    106c:	21000008 	tstcs	r0, r8
	prcdstate (__pi_curr, state);
    1070:	000013e5 	andeq	r1, r0, r5, ror #7
    1074:	0013d821 	andseq	sp, r3, r1, lsr #16
	release;
    1078:	f3220000 	vhadd.u32	d0, d2, d0
    107c:	86000013 			; <UNDEFINED> instruction: 0x86000013
void __pi_wait (aword event, word state) {
    1080:	a000000a 	andge	r0, r0, sl
	sint j = nevents (__pi_curr);
    1084:	01000002 	tsteq	r0, r2
	if (j >= MAX_EVENTS_PER_TASK)
    1088:	090104fe 	stmdbeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl}
    108c:	02210000 	eoreq	r0, r1, #0
    1090:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ENEVENTS, "sw");
    1094:	00141032 	andseq	r1, r4, r2, lsr r0
    1098:	000a8a00 	andeq	r8, sl, r0, lsl #20
	setestate (__pi_curr->Events [j], state, event);
    109c:	0002b800 	andeq	fp, r2, r0, lsl #16
	incwait (__pi_curr);
    10a0:	04fc0100 	ldrbteq	r0, [ip], #256	; 0x100
	setestate (__pi_curr->Events [j], state, event);
    10a4:	00141f21 	andseq	r1, r4, r1, lsr #30
}
    10a8:	00000000 	andeq	r0, r0, r0
    10ac:	14102000 	ldrne	r2, [r0], #-0
    10b0:	0aca0000 	beq	ff2810b8 <_estack+0xdf27c0b8>
void __pi_trigger (aword event) {
    10b4:	02d00000 	sbcseq	r0, r0, #0
	for_all_tasks (i) {
    10b8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
		for (j = 0; j < nevents (i); j++) {
    10bc:	09350204 	ldmdbeq	r5!, {r2, r9}
    10c0:	1f210000 	svcne	0x00210000
    10c4:	00000014 	andeq	r0, r0, r4, lsl r0
    10c8:	00141020 	andseq	r1, r4, r0, lsr #32
			if (i->Events [j] . Event == event) {
    10cc:	000acc00 	andeq	ip, sl, r0, lsl #24
    10d0:	0002f000 	andeq	pc, r2, r0
    10d4:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
				wakeupev (i, j);
    10d8:	00095002 	andeq	r5, r9, r2
    10dc:	141f2100 	ldrne	r2, [pc], #-256	; 10e4 <__pi_trigger+0x30>
	for_all_tasks (i) {
    10e0:	20000000 	andcs	r0, r0, r0
}
    10e4:	000013f3 	strdeq	r1, [r0], -r3
aword __pi_join (aword pid, word st) {
    10e8:	00000ae6 	andeq	r0, r0, r6, ror #21
	for_all_tasks (i) {
    10ec:	00000308 	andeq	r0, r0, r8, lsl #6
    10f0:	02040e01 	andeq	r0, r4, #1, 28
	return 0;
    10f4:	0000096b 	andeq	r0, r0, fp, ror #18
		if ((aword)i == pid) {
    10f8:	00140221 	andseq	r0, r4, r1, lsr #4
			__pi_wait (pid, st);
    10fc:	f3260000 	vhadd.u32	d0, d6, d0
}
    1100:	ec000013 	stc	0, cr0, [r0], {19}
	for_all_tasks (i) {
    1104:	ee00000a 	cdp	0, 0, cr0, cr0, cr10, {0}
    1108:	0100000a 	tsteq	r0, sl
void delay (word d, word state) {
    110c:	8602040e 	strhi	r0, [r2], -lr, lsl #8
	settstate (__pi_curr, state);
    1110:	21000009 	tstcs	r0, r9
    1114:	00001402 	andeq	r1, r0, r2, lsl #8
    1118:	12342000 	eorsne	r2, r4, #0
    111c:	0afe0000 	beq	fff81124 <_estack+0xdff7c124>
	update_n_wake (d, YES);
    1120:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    1124:	1b010000 	blne	4112c <__ccfg+0x21184>
	__pi_curr->Timer = __pi_old + d;
    1128:	09a10204 	stmibeq	r1!, {r2, r9}
    112c:	43210000 			; <UNDEFINED> instruction: 0x43210000
	inctimer (__pi_curr);
    1130:	00000012 	andeq	r0, r0, r2, lsl r0
    1134:	000ccb26 	andeq	ip, ip, r6, lsr #22
    1138:	000b2800 	andeq	r2, fp, r0, lsl #16
}
    113c:	000b5200 	andeq	r5, fp, r0, lsl #4
    1140:	043e0100 	ldrteq	r0, [lr], #-256	; 0xffffff00
	if (fun == NULL)
    1144:	0009c802 	andeq	ip, r9, r2, lsl #16
		return (int) __pi_curr;
    1148:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
    114c:	0b460000 	bleq	1181154 <__ccfg+0x11611ac>
	for_all_tasks (i)
    1150:	03380000 	teqeq	r8, #0
}
    1154:	01010000 	mrseq	r0, (UNDEF: 1)
		if (i->code == fun)
    1158:	26000203 	strcs	r0, [r0], -r3, lsl #4
	for_all_tasks (i)
    115c:	000012ab 	andeq	r1, r0, fp, lsr #5
    1160:	00000b62 	andeq	r0, r0, r2, ror #22
    1164:	00000b76 	andeq	r0, r0, r6, ror fp
int __pi_strlen (const char *s) {
    1168:	03045101 	movweq	r5, #16641	; 0x4101
	for (i = 0; *(s+i) != '\0'; i++);
    116c:	000009ef 	andeq	r0, r0, pc, ror #19
}
    1170:	0012b61d 	andseq	fp, r2, sp, lsl r6
	for (i = 0; *(s+i) != '\0'; i++);
    1174:	000b6200 	andeq	r6, fp, r0, lsl #4
	while (n--)
    1178:	000b6600 	andeq	r6, fp, r0, lsl #12
    117c:	01140b00 	tsteq	r4, r0, lsl #22
		*dest++ = *src++;
    1180:	95330005 	ldrls	r0, [r3, #-5]!
    1184:	7c00000b 	stcvc	0, cr0, [r0], {11}
    1188:	5000000b 	andpl	r0, r0, fp
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	01000003 	tsteq	r0, r3
		syserror (EREQPAR, "addv");
    1190:	33020472 	movwcc	r0, #9330	; 0x2472
		syserror (ERESOURCE, "addv");
    1194:	00001311 	andeq	r1, r0, r1, lsl r3
	if (ioreq [loc] != NULL)
    1198:	00000b7c 	andeq	r0, r0, ip, ror fp
    119c:	00000350 	andeq	r0, r0, r0, asr r3
		syserror (ERESOURCE, "addv");
    11a0:	0203bd01 	andeq	fp, r3, #1, 26	; 0x40
	ioreq [loc] = rf;
    11a4:	00132d21 	andseq	r2, r3, r1, lsr #26
}
    11a8:	13202100 	nopne	{0}	; <UNPREDICTABLE>
    11ac:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	4f012c00 	svcmi	0x00012c00
    11b4:	01000008 	tsteq	r0, r8
    11b8:	010603ed 	smlatteq	r6, sp, r3, r0
    11bc:	0000096c 	andeq	r0, r0, ip, ror #18
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11c0:	000009a8 	andeq	r0, r0, r8, lsr #19
    11c4:	0aa79c01 	beq	fe9e81d0 <_estack+0xde9e31d0>
    11c8:	76340000 	ldrtvc	r0, [r4], -r0
		syserror (ENODEVICE, "io");
    11cc:	01006c61 	tsteq	r0, r1, ror #24
    11d0:	8d1c03ed 	ldchi	3, cr0, [ip, #-948]	; 0xfffffc4c
	if (len == 0)
    11d4:	01000000 	mrseq	r0, (UNDEF: 0)
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	00692950 	rsbeq	r2, r9, r0, asr r9
    11dc:	0603ef01 	streq	lr, [r3], -r1, lsl #30
	if (ret >= 0)
    11e0:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (ret == -1) {
    11e4:	000000fb 	strdeq	r0, [r0], -fp
    11e8:	006e6229 	rsbeq	r6, lr, r9, lsr #4
		if (retry == WNONE)
    11ec:	0803f001 	stmdaeq	r3, {r0, ip, sp, lr, pc}
		iowait (dev, operation, retry);
    11f0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    11f4:	00000119 	andeq	r0, r0, r9, lsl r1
    11f8:	0011ed25 	andseq	lr, r1, r5, lsr #26
			release;
    11fc:	00096c00 	andeq	r6, r9, r0, lsl #24
	if (ret == -2) {
    1200:	00020800 	andeq	r0, r2, r0, lsl #16
		if (retry != WNONE) {
    1204:	03f20100 	mvnseq	r0, #0, 2
    1208:	13ac2002 			; <UNDEFINED> instruction: 0x13ac2002
			iowait (dev, operation, retry);
    120c:	09720000 	ldmdbeq	r2!, {}^	; <UNPREDICTABLE>
    1210:	02200000 	eoreq	r0, r0, #0
			(ioreq [dev]) (NONE, buf, len);
    1214:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    1218:	0a950303 	beq	fe541e2c <_estack+0xde53ce2c>
    121c:	bb350000 	bllt	d41224 <__ccfg+0xd2127c>
		(ioreq [dev]) (NONE, buf, len);
    1220:	19000013 	stmdbne	r0, {r0, r1, r4}
    1224:	00000001 	andeq	r0, r0, r1
    1228:	0011f71d 	andseq	pc, r1, sp, lsl r7	; <UNPREDICTABLE>
}
    122c:	00099600 	andeq	r9, r9, r0, lsl #12
	if (retry != WNONE) {
    1230:	00099800 	andeq	r9, r9, r0, lsl #16
		delay (-ret - 2, retry);
    1234:	03f90100 	mvnseq	r0, #0, 2
    1238:	012c0002 			; <UNDEFINED> instruction: 0x012c0002
    123c:	000007f3 	strdeq	r0, [r0], -r3
    1240:	0603da01 	streq	sp, [r3], -r1, lsl #20
		release;
    1244:	00092801 	andeq	r2, r9, r1, lsl #16
    1248:	00096c00 	andeq	r6, r9, r0, lsl #24
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    124c:	2c9c0100 	ldfcss	f0, [ip], {0}
    1250:	3400000b 	strcc	r0, [r0], #-11
    1254:	006c6176 	rsbeq	r6, ip, r6, ror r1
    1258:	1c03da01 			; <UNDEFINED> instruction: 0x1c03da01
    125c:	0000008d 	andeq	r0, r0, sp, lsl #1
		syserror (ERESOURCE, "mal1");
    1260:	691c5001 	ldmdbvs	ip, {r0, ip, lr}
    1264:	03dc0100 	bicseq	r0, ip, #0, 2
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1268:	00008d06 	andeq	r8, r0, r6, lsl #26
    126c:	6e622900 	vmulvs.f16	s5, s4, s0	; <UNPREDICTABLE>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1270:	03dd0100 	bicseq	r0, sp, #0, 2
	m_size (mpools [0]) = mlen - m_hdrlen;
    1274:	0000df08 	andeq	sp, r0, r8, lsl #30
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1278:	00012c00 	andeq	r2, r1, r0, lsl #24
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    127c:	11ed2500 	mvnne	r2, r0, lsl #10
    1280:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
}
    1284:	01c00000 	biceq	r0, r0, r0
    1288:	df010000 	svcle	0x00010000
    128c:	ac200203 	sfmge	f0, 4, [r0], #-12
    1290:	2c000013 	stccs	0, cr0, [r0], {19}
    1294:	d8000009 	stmdale	r0, {r0, r3}
    1298:	01000001 	tsteq	r0, r1
void __pi_free (aword *ch) {
    129c:	1a0303e2 	bne	c222c <__ccfg+0xa2284>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12a0:	3500000b 	strcc	r0, [r0, #-11]
    12a4:	000013bb 			; <UNDEFINED> instruction: 0x000013bb
		syserror (EMALLOC, "malg");
    12a8:	0000013f 	andeq	r0, r0, pc, lsr r1
    12ac:	11f71d00 	mvnsne	r1, r0, lsl #26
	mcfree [MA_NP] += m_size (ch);
    12b0:	095a0000 	ldmdbeq	sl, {}^	; <UNPREDICTABLE>
		m_size (ch) ^= MALLOC_UMASK;
    12b4:	095c0000 	ldmdbeq	ip, {}^	; <UNPREDICTABLE>
    12b8:	e6010000 	str	r0, [r1], -r0
	mcfree [MA_NP] += m_size (ch);
    12bc:	1e000203 	cdpne	2, 0, cr0, cr0, cr3, {0}
	QFREE;
    12c0:	00086001 	andeq	r6, r8, r1
	if (mevent [MA_NP] . nwait) {
    12c4:	03c60100 	biceq	r0, r6, #0, 2
    12c8:	0009a806 	andeq	sl, r9, r6, lsl #16
		trigger ((aword)(&(mevent [MA_NP])));
    12cc:	000a4c00 	andeq	r4, sl, r0, lsl #24
		mevent [MA_NP] . nwait --;
    12d0:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
}
    12d4:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    12d8:	000009ba 			; <UNDEFINED> instruction: 0x000009ba
    12dc:	000009e8 	andeq	r0, r0, r8, ror #19
    12e0:	00000b6e 	andeq	r0, r0, lr, ror #22
void kill (aword pid) {
    12e4:	07006a36 	smladxeq	r0, r6, sl, r6
		pid = (aword) __pi_curr;
    12e8:	008d0203 	addeq	r0, sp, r3, lsl #4
	j = NULL;
    12ec:	01520000 	cmpeq	r2, r0
	for_all_tasks (i) {
    12f0:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
	syserror (EREQPAR, "kpi");
    12f4:	02030700 	andeq	r0, r3, #0, 14
    12f8:	000003f4 	strdeq	r0, [r0], -r4
		if ((aword)i == pid) {
    12fc:	00000165 	andeq	r0, r0, r5, ror #2
    1300:	09fa3700 	ldmibeq	sl!, {r8, r9, sl, ip, sp}^
				__PCB = i->Next;
    1304:	0a280000 	beq	a0130c <__ccfg+0x9e1364>
			killev (i);
    1308:	6a360000 	bvs	d81310 <__ccfg+0xd61368>
			ufree (i);
    130c:	02020800 	andeq	r0, r2, #0, 16
			if (i == __pi_curr)
    1310:	0000008d 	andeq	r0, r0, sp, lsl #1
    1314:	00000178 	andeq	r0, r0, r8, ror r1
				release;
    1318:	08006936 	stmdaeq	r0, {r1, r2, r4, r5, r8, fp, sp, lr}
				j->Next = i->Next;
    131c:	03f40202 	mvnseq	r0, #536870912	; 0x20000000
    1320:	018b0000 	orreq	r0, fp, r0
    1324:	00000000 	andeq	r0, r0, r0
}
    1328:	00067438 	andeq	r7, r6, r8, lsr r4
    132c:	03bb0100 			; <UNDEFINED> instruction: 0x03bb0100
    1330:	011e0314 	tsteq	lr, r4, lsl r3
	if (size < 8)
    1334:	000009d1 	ldrdeq	r0, [r0], -r1
		_size = 2;
    1338:	06038201 	streq	r8, [r3], -r1, lsl #4
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    133c:	00000868 	andeq	r0, r0, r8, ror #16
		_size = (((aword)size) + 3) >> 2;
    1340:	00000928 	andeq	r0, r0, r8, lsr #18
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	0c289c01 	stceq	12, cr9, [r8], #-4
		_size = (((aword)size) + 3) >> 2;
    1348:	942e0000 	strtls	r0, [lr], #-0
		if (mevent [MA_NP] . nfail != 255)
    134c:	c2000008 	andgt	r0, r0, #8
    1350:	e3000008 	movw	r0, #8
			mevent [MA_NP] . nfail ++;
    1354:	2900000b 	stmdbcs	r0, {r0, r1, r3}
		mnfree [MA_NP] = 0;
    1358:	8901006a 	stmdbhi	r1, {r1, r3, r5, r6}
    135c:	008d0303 	addeq	r0, sp, r3, lsl #6
		if (m_magic (chunk) != MALLOC_MAGIC)
    1360:	019e0000 	orrseq	r0, lr, r0
    1364:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
			syserror (EMALLOC, "malc");
    1368:	03890100 	orreq	r0, r9, #0, 2
    136c:	0003f403 	andeq	pc, r3, r3, lsl #8
		if (m_size (chunk) >= _size)
    1370:	0001b100 	andeq	fp, r1, r0, lsl #2
    1374:	a81b0000 	ldmdage	fp, {}	; <UNPREDICTABLE>
		chunk = m_nextp (chunk)) {
    1378:	0b000001 	bleq	1384 <__pi_malloc+0x50>
		m_setnextp (cc, m_nextp (chunk));
    137c:	2900000c 	stmdbcs	r0, {r2, r3}
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1380:	8f01006a 	svchi	0x0001006a
    1384:	008d0303 	addeq	r0, sp, r3, lsl #6
			m_size (chunk) = _size;
    1388:	01c40000 	biceq	r0, r4, r0
			cc = chunk + _size + m_hdrlen;
    138c:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    1390:	038f0100 	orreq	r0, pc, #0, 2
			m_size (cc) = waste - m_hdrlen;
    1394:	0003f403 	andeq	pc, r3, r3, lsl #8
			QFREE;
    1398:	0001d700 	andeq	sp, r1, r0, lsl #14
		mevent [MA_NP] . nfail = 0;
    139c:	e7330000 	ldr	r0, [r3, -r0]!
		mcfree [MA_NP] -= m_size (chunk);
    13a0:	68000012 	stmdavs	r0, {r1, r4}
    13a4:	88000008 	stmdahi	r0, {r3}
    13a8:	01000001 	tsteq	r0, r1
    13ac:	21020384 	smlabbcs	r2, r4, r3, r0
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	00001303 	andeq	r1, r0, r3, lsl #6
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13b4:	0012f621 	andseq	pc, r2, r1, lsr #12
		m_size (chunk) |= MALLOC_UMASK;
    13b8:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
			mnfree [MA_NP] = mcfree [MA_NP];
    13bc:	00000778 	andeq	r0, r0, r8, ror r7
}
    13c0:	0d037d01 	stceq	13, cr7, [r3, #-4]
    13c4:	00040c01 	andeq	r0, r4, r1, lsl #24
    13c8:	00041800 	andeq	r1, r4, r0, lsl #16
    13cc:	529c0100 	addspl	r0, ip, #0, 2
    13d0:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    13d4:	0000092f 	andeq	r0, r0, pc, lsr #18
    13d8:	1f037d01 	svcne	0x00037d01
aword __pi_fork (fsmcode func, aword data) {
    13dc:	0000008d 	andeq	r0, r0, sp, lsl #1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	000001ea 	andeq	r0, r0, sl, ror #3
    13e4:	08fc3a00 	ldmeq	ip!, {r9, fp, ip, sp}^
    13e8:	10010000 	andne	r0, r1, r0
		if ((j = __PCB) == NULL)
    13ec:	8d010c03 	stchi	12, cr0, [r1, #-12]
	i->Next = NULL;
    13f0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
	i->data = data;
    13f4:	68000007 	stmdavs	r0, {r0, r1, r2}
		if ((j = __PCB) == NULL)
    13f8:	01000008 	tsteq	r0, r8
}
    13fc:	000ccb9c 	muleq	ip, ip, fp
			for (; j->Next != NULL; j = j->Next);
    1400:	06f92d00 	ldrbteq	r2, [r9], r0, lsl #26
    1404:	10010000 	andne	r0, r1, r0
	return (aword) i;
    1408:	008d1e03 	addeq	r1, sp, r3, lsl #28
    140c:	02080000 	andeq	r0, r8, #0
	if (mevent [MA_NP] . nwait != 255)
    1410:	623b0000 	eorsvs	r0, fp, #0
    1414:	01006675 	tsteq	r0, r5, ror r6
    1418:	c92f0310 	stmdbgt	pc!, {r4, r8, r9}	; <UNPREDICTABLE>
		mevent [MA_NP] . nwait ++;
    141c:	1b000001 	blne	1428 <diag>
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	3b000002 	blcc	1430 <diag+0x8>
    1424:	006e656c 	rsbeq	r6, lr, ip, ror #10
void diag (const char *mess, ...) {
    1428:	38031001 	stmdacc	r3, {r0, ip}
    142c:	0000008d 	andeq	r0, r0, sp, lsl #1
    1430:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
	diag_disable_int (a, is);
    1434:	0006202b 	andeq	r2, r6, fp, lsr #32
    1438:	03180100 	tsteq	r8, #0, 2
    143c:	07212b01 	streq	r2, [r1, -r1, lsl #22]!
				d = (bc == 16) ? 10000 : 1000000000;
    1440:	3d010000 	stccc	0, cr0, [r1, #-0]
	diag_disable_int (a, is);
    1444:	44270103 	strtmi	r0, [r7], #-259	; 0xfffffefd
	while (*mess != '\0') {
    1448:	3a00000d 	bcc	1484 <diag+0x5c>
	dgout ('\r');
    144c:	3c000008 	stccc	0, cr0, [r0], {8}
	dgout ('\n');
    1450:	01000008 	tsteq	r0, r8
    1454:	21150365 	tstcs	r5, r5, ror #6
    1458:	00000d58 	andeq	r0, r0, r8, asr sp
	diag_wait (a);
    145c:	c2380000 	eorsgt	r0, r8, #0
	diag_enable_int (a, is);
    1460:	01000007 	tsteq	r0, r7
    1464:	010d02fc 	strdeq	r0, [sp, -ip]
}
    1468:	0007c33c 	andeq	ip, r7, ip, lsr r3
    146c:	02f00100 	rscseq	r0, r0, #0, 2
    1470:	0007200d 	andeq	r2, r7, sp
		if (*mess == '%') {
    1474:	00075800 	andeq	r5, r7, r0, lsl #16
    1478:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
			if (*mess == 'l') {
    147c:	2000000d 	andcs	r0, r0, sp
    1480:	0000133b 	andeq	r1, r0, fp, lsr r3
				mess++;
    1484:	00000720 	andeq	r0, r0, r0, lsr #14
				val = va_arg (ap, lword);
    1488:	00000170 	andeq	r0, r0, r0, ror r1
				bc = 32;
    148c:	0202f501 	andeq	pc, r2, #4194304	; 0x400000
				bc = 16;
    1490:	00000d07 	andeq	r0, r0, r7, lsl #26
			switch (*mess) {
    1494:	00134a21 	andseq	r4, r3, r1, lsr #20
    1498:	75260000 	strvc	r0, [r6, #-0]!
    149c:	2c000013 	stccs	0, cr0, [r0], {19}
				dgout ('%');
    14a0:	32000007 	andcc	r0, r0, #7
    14a4:	01000007 	tsteq	r0, r7
				dgout (*mess);
    14a8:	2c0202f6 	sfmcs	f0, 4, [r2], {246}	; 0xf6
    14ac:	2100000d 	tstcs	r0, sp
			switch (*mess) {
    14b0:	0000139e 	muleq	r0, lr, r3
					v = __pi_hex_enc_table [
    14b4:	00139121 	andseq	r9, r3, r1, lsr #2
					i += 4;
    14b8:	13842100 	orrne	r2, r4, #0, 2
					(val >> (bc - i)) & 0xf];
    14bc:	27000000 	strcs	r0, [r0, -r0]
    14c0:	000012ca 	andeq	r1, r0, sl, asr #5
					dgout (v);
    14c4:	00000732 	andeq	r0, r0, r2, lsr r7
    14c8:	0000073c 	andeq	r0, r0, ip, lsr r7
				while (i < bc) {
    14cc:	0202f701 	andeq	pc, r2, #262144	; 0x40000
			mess++;
    14d0:	0012d921 	andseq	sp, r2, r1, lsr #18
					d /= 10;
    14d4:	3d000000 	stccc	0, cr0, [r0, #-0]
				if ((val >> (bc - 1)) & 1) {
    14d8:	0005ee01 	andeq	lr, r5, r1, lsl #28
    14dc:	02eb0100 	rsceq	r0, fp, #0, 2
					dgout ('-');
    14e0:	00a70106 	adceq	r0, r7, r6, lsl #2
    14e4:	65010000 	strvs	r0, [r1, #-0]
						val |= 0xffff0000;
    14e8:	3e00000d 	cdpcc	0, 0, cr0, cr0, cr13, {0}
    14ec:	01006175 	tsteq	r0, r5, ror r1
    14f0:	652702eb 	strvs	r0, [r7, #-747]!	; 0xfffffd15
				d = (bc == 16) ? 10000 : 1000000000;
    14f4:	0000000d 	andeq	r0, r0, sp
    14f8:	02260407 	eoreq	r0, r6, #117440512	; 0x7000000
    14fc:	011a0000 	tsteq	sl, r0
					v = (word) (val / d);
    1500:	000006a7 	andeq	r0, r0, r7, lsr #13
					if (v || d == 1) break;
    1504:	0902d401 	stmdbeq	r2, {r0, sl, ip, lr, pc}
    1508:	00009b01 	andeq	r9, r0, r1, lsl #22
					d /= 10;
    150c:	0006cc00 	andeq	ip, r6, r0, lsl #24
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	00072000 	andeq	r2, r7, r0
					dgout (v + '0');
    1514:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    1518:	2d00000d 	stccs	0, cr0, [r0, #-52]	; 0xffffffcc
    151c:	000005fb 	strdeq	r0, [r0], -fp
					d /= 10;
    1520:	2102d401 	tstcs	r2, r1, lsl #8
					val = val - (v * d);
    1524:	000000a7 	andeq	r0, r0, r7, lsr #1
					if (d == 0) break;
    1528:	00000349 	andeq	r0, r0, r9, asr #6
					v = (word) (val / d);
    152c:	0061753b 	rsbeq	r7, r1, fp, lsr r5
    1530:	2f02d401 	svccs	0x0002d401
				if (bc == 16)
    1534:	00000dc1 	andeq	r0, r0, r1, asr #27
				d = (bc == 16) ? 10000 : 1000000000;
    1538:	0000035c 	andeq	r0, r0, ip, asr r3
					val &= 0xffff;
    153c:	00135833 	andseq	r5, r3, r3, lsr r8
					dgout (*s);
    1540:	0006ec00 	andeq	lr, r6, r0, lsl #24
					s++;
    1544:	00015800 	andeq	r5, r1, r0, lsl #16
				while (*s != '\0') {
    1548:	02e60100 	rsceq	r0, r6, #0, 2
    154c:	13672102 	cmnne	r7, #-2147483648	; 0x80000000
			dgout (*mess++);
    1550:	00000000 	andeq	r0, r0, r0
    1554:	021a0407 	andseq	r0, sl, #117440512	; 0x7000000
    1558:	011a0000 	tsteq	sl, r0
    155c:	000009f7 	strdeq	r0, [r0], -r7
    1560:	06018a01 	streq	r8, [r1], -r1, lsl #20
}
    1564:	0000a701 	andeq	sl, r0, r1, lsl #14
    while(1)
    1568:	00067c00 	andeq	r7, r6, r0, lsl #24
{
    156c:	0006cc00 	andeq	ip, r6, r0, lsl #24
    SetupTrimDevice();
    1570:	0f9c0100 	svceq	0x009c0100
    pui32Src = &_etext;
    1574:	2d00000e 	stccs	0, cr0, [r0, #-56]	; 0xffffffc8
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1578:	000007cf 	andeq	r0, r0, pc, asr #15
    __asm("    ldr     r0, =_bss\n"
    157c:	26018a01 	strcs	r8, [r1], -r1, lsl #20
    1580:	0000009b 	muleq	r0, fp, r0
    1584:	0000036f 	andeq	r0, r0, pc, ror #6
    1588:	0058453f 	subseq	r4, r8, pc, lsr r5
    158c:	0101a401 	tsteq	r1, r1, lsl #8
   main();
    1590:	000f461d 	andeq	r4, pc, sp, lsl r6	; <UNPREDICTABLE>
    FaultISR();
    1594:	00069000 	andeq	r9, r6, r0
        *pui32Dest++ = *pui32Src++;
    1598:	00069a00 	andeq	r9, r6, r0, lsl #20
    159c:	019c0100 	orrseq	r0, ip, r0, lsl #2
    15a0:	011e001a 	tsteq	lr, sl, lsl r0
    15a4:	00000785 	andeq	r0, r0, r5, lsl #15
    15a8:	06013801 	streq	r3, [r1], -r1, lsl #16
    15ac:	00000568 	andeq	r0, r0, r8, ror #10
    15b0:	0000067c 	andeq	r0, r0, ip, ror r6
    15b4:	0ec19c01 	cdpeq	12, 12, cr9, cr1, cr1, {0}
static byte get_byte () {
    15b8:	9a400000 	bls	10015c0 <__ccfg+0xfe1618>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15bc:	01000008 	tsteq	r0, r8
    15c0:	df08013a 	svcle	0x0008013a
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c4:	8d000000 	stchi	0, cr0, [r0, #-0]
    15c8:	41000003 	tstmi	r0, r3
		if (ee_inp)
    15cc:	00545545 	subseq	r5, r4, r5, asr #10
			b |= 1;
    15d0:	01016801 	tsteq	r1, r1, lsl #16
    15d4:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15d8:	00014023 	andeq	r4, r1, r3, lsr #32
	for (b = 0, i = 0; i < 8; i++) {
    15dc:	07034000 	streq	r4, [r3, -r0]
}
    15e0:	47010000 	strmi	r0, [r1, -r0]
    15e4:	009b0b01 	addseq	r0, fp, r1, lsl #22
    15e8:	03d80000 	bicseq	r0, r8, #0
static void put_byte (byte b) {
    15ec:	10420000 	subne	r0, r2, r0
    15f0:	d4000014 	strle	r0, [r0], #-20	; 0xffffffec
    15f4:	dc000005 	stcle	0, cr0, [r0], {5}
    15f8:	05000005 	streq	r0, [r0, #-5]
		if (b & 0x80)
    15fc:	0e75060d 	cdpeq	6, 7, cr0, cr5, cr13, {0}
    1600:	1f210000 	svcne	0x00210000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1604:	00000014 	andeq	r0, r0, r4, lsl r0
	for (i = 0; i < 8; i++) {
    1608:	00141042 	andseq	r1, r4, r2, asr #32
		b <<= 1;
    160c:	0005e000 	andeq	lr, r5, r0
	for (i = 0; i < 8; i++) {
    1610:	0005e800 	andeq	lr, r5, r0, lsl #16
}
    1614:	060f0500 	streq	r0, [pc], -r0, lsl #10
    1618:	00000e8f 	andeq	r0, r0, pc, lsl #29
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    161c:	00141f21 	andseq	r1, r4, r1, lsr #30
    1620:	f3420000 	vhadd.u8	d16, d2, d0
	put_byte (cmd);
    1624:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
    1628:	36000006 	strcc	r0, [r0], -r6
}
    162c:	05000006 	streq	r0, [r0, #-6]
    1630:	0ea90617 	mcreq	6, 5, r0, cr9, cr7, {0}
static void wwait (word st, word del) {
    1634:	02210000 	eoreq	r0, r1, #0
    1638:	00000014 	andeq	r0, r0, r4, lsl r0
    163c:	0013f343 	andseq	pc, r3, r3, asr #6
	while (dopen && (rdsr () & 1)) {
    1640:	00063a00 	andeq	r3, r6, r0, lsl #20
    1644:	00064200 	andeq	r4, r6, r0, lsl #4
    1648:	06190500 	ldreq	r0, [r9], -r0, lsl #10
    164c:	00140221 	andseq	r0, r4, r1, lsr #4
	put_byte (CMD_RDSR);
    1650:	00000000 	andeq	r0, r0, r0
	r = get_byte ();
    1654:	0837011e 	ldmdaeq	r7!, {r1, r2, r3, r4, r8}
    1658:	2b010000 	blcs	41660 <__ccfg+0x216b8>
	while (dopen && (rdsr () & 1)) {
    165c:	05400601 	strbeq	r0, [r0, #-1537]	; 0xfffff9ff
}
    1660:	05680000 	strbeq	r0, [r8, #-0]!
		if (st == WNONE)
    1664:	9c010000 	stcls	0, cr0, [r1], {-0}
    1668:	00000ef1 	strdeq	r0, [r0], -r1
			mdelay (1);
    166c:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
    1670:	00054800 	andeq	r4, r5, r0, lsl #16
			delay (del, st);
    1674:	00012800 	andeq	r2, r1, r0, lsl #16
    1678:	01320100 	teqeq	r2, r0, lsl #2
			release;
    167c:	0f38212c 	svceq	0x0038212c
    1680:	00000000 	andeq	r0, r0, r0
    1684:	079c011e 			; <UNDEFINED> instruction: 0x079c011e
static void ready () {
    1688:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
	if (dopen) {
    168c:	05000601 	streq	r0, [r0, #-1537]	; 0xfffff9ff
		wwait (WNONE, 1);
    1690:	05400000 	strbeq	r0, [r0, #-0]
    1694:	9c010000 	stcls	0, cr0, [r1], {-0}
    1698:	00000f25 	andeq	r0, r0, r5, lsr #30
	dstat = 0;
    169c:	000f2533 	andeq	r2, pc, r3, lsr r5	; <UNPREDICTABLE>
}
    16a0:	00051200 	andeq	r1, r5, r0, lsl #4
    16a4:	00010800 	andeq	r0, r1, r0, lsl #16
    16a8:	01250100 			; <UNDEFINED> instruction: 0x01250100
	udelay (1);
    16ac:	0f38352c 	svceq	0x0038352c
    16b0:	04170000 	ldreq	r0, [r7], #-0
	udelay (1);
    16b4:	00000000 	andeq	r0, r0, r0
		dopen = DOPEN_TEMP;
    16b8:	00089344 	andeq	r9, r8, r4, asr #6
    16bc:	01170100 	tsteq	r7, r0, lsl #2
    16c0:	00df0115 	sbcseq	r0, pc, r5, lsl r1	; <UNPREDICTABLE>
    16c4:	46030000 	strmi	r0, [r3], -r0
static void cclose () {
    16c8:	3e00000f 	cdpcc	0, 0, cr0, cr0, cr15, {0}
	if (dopen == DOPEN_TEMP) {
    16cc:	006c6564 	rsbeq	r6, ip, r4, ror #10
    16d0:	22011701 	andcs	r1, r1, #262144	; 0x40000
		wwait (WNONE, 1);
    16d4:	000000a7 	andeq	r0, r0, r7, lsr #1
    16d8:	05104500 	ldreq	r4, [r0, #-1280]	; 0xfffffb00
	cmd_0 (CMD_DP);
    16dc:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    16e0:	00a71401 	adceq	r1, r7, r1, lsl #8
		dopen = 0;
    16e4:	46030000 	strmi	r0, [r3], -r0
}
    16e8:	000009eb 	andeq	r0, r0, fp, ror #19
word ee_open () {
    16ec:	0314ee01 	tsteq	r4, #1, 28
	ready ();
    16f0:	00000f7a 	andeq	r0, r0, sl, ror pc
	dopen = DOPEN_PERM;
    16f4:	6e697047 	cdpvs	0, 6, cr7, cr9, cr7, {2}
    16f8:	06f20100 	ldrbteq	r0, [r2], r0, lsl #2
}
    16fc:	0000008d 	andeq	r0, r0, sp, lsl #1
	if (dopen) {
    1700:	00694748 	rsbeq	r4, r9, r8, asr #14
    1704:	8d0bf401 	cfstrshi	mvf15, [fp, #-4]
		dopen = DOPEN_TEMP;
    1708:	00000000 	andeq	r0, r0, r0
		cclose ();
    170c:	21014900 	tstcs	r1, r0, lsl #18
}
    1710:	01000009 	tsteq	r0, r9
int ser_in (word st, char *buf, int len) {
    1714:	ac010698 	stcge	6, cr0, [r1], {152}	; 0x98
    1718:	00000004 	andeq	r0, r0, r4
	if (len == 0)
    171c:	01000005 	tsteq	r0, r5
	if (__inpline == NULL) {
    1720:	0010249c 	mulseq	r0, ip, r4
		if ((prcs = running (__inserial)) == 0) {
    1724:	63654a00 	cmnvs	r5, #0, 20
    1728:	1a980100 	bne	fe601b30 <_estack+0xde5fcb30>
			prcs = runthread (__inserial);
    172c:	000000a7 	andeq	r0, r0, r7, lsr #1
    1730:	0000042a 	andeq	r0, r0, sl, lsr #8
			if (prcs == 0) {
    1734:	01006d4a 	tsteq	r0, sl, asr #26
				npwait (st);
    1738:	10242a98 	mlane	r4, r8, sl, r2
		release;
    173c:	043d0000 	ldrteq	r0, [sp], #-0
		join (prcs, st);
    1740:	ed280000 	stc	0, cr0, [r8, #-0]
    1744:	b8000011 	stmdalt	r0, {r0, r4}
	if (*__inpline == NULL) // bin cmd
    1748:	ba000004 	blt	1760 <ser_in+0x4c>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    174c:	01000004 	tsteq	r0, r4
	if (prcs >= len)
    1750:	102202a8 	eorne	r0, r2, r8, lsr #5
		prcs = len-1;
    1754:	ba000014 	blt	17ac <ser_outf+0x20>
	memcpy (buf, __inpline, prcs);
    1758:	b8000004 	stmdalt	r0, {r2}
    175c:	01000000 	mrseq	r0, (UNDEF: 0)
    1760:	0fd903b8 	svceq	0x00d903b8
	ufree (__inpline);
    1764:	1f210000 	svcne	0x00210000
	__inpline = NULL;
    1768:	00000014 	andeq	r0, r0, r4, lsl r0
	if (*buf) // if it's NULL, it's a bin cmd
    176c:	00141022 	andseq	r1, r4, r2, lsr #32
		buf [prcs] = '\0';
    1770:	0004c000 	andeq	ip, r4, r0
}
    1774:	0000d800 	andeq	sp, r0, r0, lsl #16
		prcs = strlen (__inpline);
    1778:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    177c:	00000ff3 	strdeq	r0, [r0], -r3
		return 0;
    1780:	00141f21 	andseq	r1, r4, r1, lsr #30
    1784:	f3220000 	vhadd.u32	d0, d2, d0
    1788:	d8000013 	stmdale	r0, {r0, r1, r4}
int ser_outf (word st, const char *m, ...) {
    178c:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    1790:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((prcs = running (__outserial)) != 0) {
    1794:	100d03b8 			; <UNDEFINED> instruction: 0x100d03b8
    1798:	02210000 	eoreq	r0, r1, #0
		join (prcs, st);
    179c:	00000014 	andeq	r0, r0, r4, lsl r0
    17a0:	0013f343 	andseq	pc, r3, r3, asr #6
		release;
    17a4:	0004de00 	andeq	sp, r4, r0, lsl #28
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17a8:	0004e000 	andeq	lr, r4, r0
    17ac:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    17b0:	00140221 	andseq	r0, r4, r1, lsr #4
		umwait (st);
    17b4:	07000000 	streq	r0, [r0, -r0]
    17b8:	0001d604 	andeq	sp, r1, r4, lsl #12
	if (runstrand (__outserial, buf) == 0) {
    17bc:	c2014900 	andgt	r4, r1, #0, 18
    17c0:	01000008 	tsteq	r0, r8
    17c4:	00010672 	andeq	r0, r1, r2, ror r6
		ufree (buf);
    17c8:	00000000 	andeq	r0, r0, r0
		npwait (st);
    17cc:	01000000 	mrseq	r0, (UNDEF: 0)
}
    17d0:	0010ca9c 	mulseq	r0, ip, sl
    17d4:	74734a00 	ldrbtvc	r4, [r3], #-2560	; 0xfffff600
    17d8:	18720100 	ldmdane	r2!, {r8}^
    17dc:	000000a7 	andeq	r0, r0, r7, lsr #1
int ser_inf (word st, const char *fmt, ...) {
    17e0:	0000045b 	andeq	r0, r0, fp, asr r4
    17e4:	6e65734a 	cdpvs	3, 6, cr7, cr5, cr10, {2}
	if (fmt == NULL)
    17e8:	28720100 	ldmdacs	r2!, {r8}^
	if (__inpline == NULL) {
    17ec:	00000244 	andeq	r0, r0, r4, asr #4
		if ((prcs = running (__inserial)) == 0) {
    17f0:	0000046e 	andeq	r0, r0, lr, ror #8
    17f4:	6c61764a 	stclvs	6, cr7, [r1], #-296	; 0xfffffed8
			prcs = runthread (__inserial);
    17f8:	35720100 	ldrbcc	r0, [r2, #-256]!	; 0xffffff00
    17fc:	000000fc 	strdeq	r0, [r0], -ip
			if (prcs == 0) {
    1800:	0000048c 	andeq	r0, r0, ip, lsl #9
				npwait (st);
    1804:	00052b4b 	andeq	r2, r5, fp, asr #22
		release;
    1808:	0e740100 	rpweqs	f0, f4, f0
		join (prcs, st);
    180c:	000000c9 	andeq	r0, r0, r9, asr #1
    1810:	00000305 	andeq	r0, r0, r5, lsl #6
	va_start (ap, fmt);
    1814:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
	prcs = vscan (__inpline, fmt, ap);
    1818:	0100000a 	tsteq	r0, sl
    181c:	00000178 	andeq	r0, r0, r8, ror r1
	ufree (__inpline);
    1820:	204d0000 	subcs	r0, sp, r0
	__inpline = NULL;
    1824:	00000012 	andeq	r0, r0, r2, lsl r0
}
    1828:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    182c:	01000004 	tsteq	r0, r4
    1830:	01420381 	smlalbbeq	r0, r2, r1, r3
		return 0;
    1834:	00000012 	andeq	r0, r0, r2, lsl r0
    1838:	00000000 	andeq	r0, r0, r0
    183c:	01000000 	mrseq	r0, (UNDEF: 0)
strand (__outserial, const char*)
    1840:	10b9127e 	adcsne	r1, r9, lr, ror r2
    1844:	132f0000 			; <UNDEFINED> instruction: 0x132f0000
    1848:	00000012 	andeq	r0, r0, r2, lsl r0
    184c:	00122a28 	andseq	r2, r2, r8, lsr #20
	...
	ptr = data;
    1858:	03840100 	orreq	r0, r4, #0, 2
    185c:	b5014e00 	strlt	r4, [r1, #-3584]	; 0xfffff200
	if (*ptr)
    1860:	01000009 	tsteq	r0, r9
		len = strlen (ptr);
    1864:	00010662 	andeq	r0, r1, r2, ror #12
    1868:	00000000 	andeq	r0, r0, r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    186c:	01000000 	mrseq	r0, (UNDEF: 0)
    1870:	ca01499c 	bgt	53ee8 <__ccfg+0x33f40>
    1874:	01000004 	tsteq	r0, r4
    1878:	0001064f 	andeq	r0, r1, pc, asr #12
    187c:	00000000 	andeq	r0, r0, r0
	len -= quant;
    1880:	01000000 	mrseq	r0, (UNDEF: 0)
    1884:	0011079c 	mulseq	r1, ip, r7
    1888:	12512800 	subsne	r2, r1, #0, 16
	...
		finish;
    1894:	5f010000 	svcpl	0x00010000
    1898:	01490003 	cmpeq	r9, r3
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    189c:	00000501 	andeq	r0, r0, r1, lsl #10
    18a0:	01063b01 	tsteq	r6, r1, lsl #22
	...
    18ac:	112e9c01 			; <UNDEFINED> instruction: 0x112e9c01
strand (__inserial, address)
    18b0:	644a0000 	strbvs	r0, [sl], #-0
    18b4:	1c3b0100 	ldfnes	f0, [fp], #-0
    18b8:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    18bc:	000004aa 	andeq	r0, r0, sl, lsr #9
    18c0:	c1014900 	tstgt	r1, r0, lsl #18
	if (__inpline != NULL)
    18c4:	01000005 	tsteq	r0, r5
    18c8:	7001062b 	andvc	r0, r1, fp, lsr #12
		finish;
    18cc:	ac000004 	stcge	0, cr0, [r0], {4}
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    18d0:	01000004 	tsteq	r0, r4
    18d4:	0011559c 	mulseq	r1, ip, r5
    18d8:	00644a00 	rsbeq	r4, r4, r0, lsl #20
    18dc:	df1b2b01 	svcle	0x001b2b01
		umwait (IM_INIT);
    18e0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
		release;
    18e4:	00000004 	andeq	r0, r0, r4
	savedata (data);
    18e8:	08040149 	stmdaeq	r4, {r0, r3, r6, r8}
	len = MAX_LINE_LENGTH;
    18ec:	20010000 	andcs	r0, r1, r0
	io (IM_READ, __cport, READ, ptr, 1);
    18f0:	04440106 	strbeq	r0, [r4], #-262	; 0xfffffefa
    18f4:	046e0000 	strbteq	r0, [lr], #-0
    18f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    18fc:	0000117c 	andeq	r1, r0, ip, ror r1
	if (ptr == (char*) data) { // new line
    1900:	01006e4a 	tsteq	r0, sl, asr #28
    1904:	00b81c20 	adcseq	r1, r8, r0, lsr #24
		if (*ptr == '\0') { // bin cmd
    1908:	04e60000 	strbteq	r0, [r6], #0
			proceed (IM_BIN);
    190c:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    1910:	0008a101 	andeq	sl, r8, r1, lsl #2
		if (*ptr < 0x20)
    1914:	06190100 	ldreq	r0, [r9], -r0, lsl #2
    1918:	00041801 	andeq	r1, r4, r1, lsl #16
			proceed (IM_READ);
    191c:	00044400 	andeq	r4, r4, r0, lsl #8
    1920:	b79c0100 	ldrlt	r0, [ip, r0, lsl #2]
	if (*ptr == '\n' || *ptr == '\r') {
    1924:	4f000011 	svcmi	0x00000011
    1928:	1901006e 	stmdbne	r1, {r1, r2, r3, r5, r6}
    192c:	0000b81c 	andeq	fp, r0, ip, lsl r8
		*ptr = '\0';
    1930:	43500100 	cmpmi	r0, #0, 2
		__inpline = (char*)data;
    1934:	000011b7 			; <UNDEFINED> instruction: 0x000011b7
		finish;
    1938:	0000042c 	andeq	r0, r0, ip, lsr #8
	if (len) {
    193c:	00000436 	andeq	r0, r0, r6, lsr r4
		ptr++;
    1940:	21031b01 	tstcs	r3, r1, lsl #22
    1944:	000011c5 	andeq	r1, r0, r5, asr #3
		len--;
    1948:	c9500000 	ldmdbgt	r0, {}^	; <UNPREDICTABLE>
	proceed (IM_READ);
    194c:	01000009 	tsteq	r0, r9
	io (IM_BIN, __cport, READ, ptr, 1);
    1950:	03011415 	movweq	r1, #5141	; 0x1415
    1954:	000011d0 	ldrdeq	r1, [r0], -r0
    1958:	01006e51 	tsteq	r0, r1, asr lr
    195c:	00b82b15 	adcseq	r2, r8, r5, lsl fp
    1960:	52000000 	andpl	r0, r0, #0
	len -= 2;
    1964:	000005ad 	andeq	r0, r0, sp, lsr #11
	if (len > *ptr + 1) // 1 for 0x04
    1968:	35011a03 	strcc	r1, [r1, #-2563]	; 0xfffff5fd
    196c:	11ed0301 	mvnne	r0, r1, lsl #6
		len = *ptr + 1;
    1970:	ba530000 	blt	14c1978 <__ccfg+0x14a19d0>
    1974:	03000009 	movweq	r0, #9
	ptr++;
    1978:	7348011a 	movtvc	r0, #33050	; 0x811a
	quant = io (IM_BINL, __cport, READ, ptr, len);
    197c:	00000000 	andeq	r0, r0, r0
    1980:	00080b54 	andeq	r0, r8, r4, asr fp
    1984:	355b0300 	ldrbcc	r0, [fp, #-768]	; 0xfffffd00
    1988:	1e540301 	cdpne	3, 5, cr0, cr4, cr1, {0}
    198c:	03000005 	movweq	r0, #5
    1990:	03013550 	movweq	r3, #5456	; 0x1550
	len -= quant;
    1994:	0008e155 	andeq	lr, r8, r5, asr r1
		__inpline = (char*)data;
    1998:	01bf0f00 			; <UNDEFINED> instruction: 0x01bf0f00
		finish;
    199c:	00007301 	andeq	r7, r0, r1, lsl #6
	ptr += quant;
    19a0:	12200300 	eorne	r0, r0, #0, 6
    19a4:	6d160000 	ldcvs	0, cr0, [r6, #-0]
endstrand
    19a8:	0f000009 	svceq	0x00000009
    19ac:	00730ec1 	rsbseq	r0, r3, r1, asr #29
	proceed (IM_BINL);
    19b0:	54000000 	strpl	r0, [r0], #-0
endstrand
    19b4:	000008a8 	andeq	r0, r0, r8, lsr #17
    19b8:	0101900f 	tsteq	r1, pc
    19bc:	04e85403 	strbteq	r5, [r8], #1027	; 0x403
    19c0:	7b0f0000 	blvc	3c19c8 <__ccfg+0x3a1a20>
    19c4:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    19c8:	0000075b 	andeq	r0, r0, fp, asr r7
		if (res && (d < n))
    19cc:	0103660a 	tsteq	r3, sl, lsl #12
    19d0:	12510301 	subsne	r0, r1, #67108864	; 0x4000000
    19d4:	32530000 	subscc	r0, r3, #0
    19d8:	0a000007 	beq	19fc <__pi_vfparse+0x10>
			res [d] = (char) c;
    19dc:	731f0366 	tstvc	pc, #-1744830463	; 0x98000001
		d++;
    19e0:	00000000 	andeq	r0, r0, r0
    19e4:	00088056 	andeq	r8, r8, r6, asr r0
    19e8:	014c0200 	mrseq	r0, (UNDEF: 108)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19ec:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    19f0:	00000819 	andeq	r0, r0, r9, lsl r8
    19f4:	0101c402 	tsteq	r1, r2, lsl #8
				enci (10000);
    19f8:	06345703 	ldrteq	r5, [r4], -r3, lsl #14
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19fc:	ad020000 	stcge	0, cr0, [r2, #-0]
    1a00:	00730101 	rsbseq	r0, r3, r1, lsl #2
	d = 0;
    1a04:	56030000 	strpl	r0, [r3], -r0
		c = *fm++;
    1a08:	00000581 	andeq	r0, r0, r1, lsl #11
		if (c == '\\') {
    1a0c:	0102450e 	tsteq	r2, lr, lsl #10
			if ((c = *fm++) == '\0') {
    1a10:	53580301 	cmppl	r8, #67108864	; 0x4000000
    1a14:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
				outc ('\\');
    1a18:	0101022c 	tsteq	r1, ip, lsr #4
			if ((c = *fm++) == '\0') {
    1a1c:	00000073 	andeq	r0, r0, r3, ror r0
				outc ('\\');
    1a20:	053e5203 	ldreq	r5, [lr, #-515]!	; 0xfffffdfd
    1a24:	dc0e0000 	stcle	0, cr0, [lr], {-0}
			outc (c);
    1a28:	03010101 	movweq	r0, #4353	; 0x1101
    1a2c:	000012ab 	andeq	r1, r0, fp, lsr #5
			if (c == '\0')
    1a30:	0004f853 	andeq	pc, r4, r3, asr r8	; <UNPREDICTABLE>
    1a34:	01dc0e00 	bicseq	r0, ip, r0, lsl #28
			outc (c);
    1a38:	0000731f 	andeq	r7, r0, pc, lsl r3
				outc (val);
    1a3c:	b9560000 	ldmdblt	r6, {}^	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    1a40:	0b000006 	bleq	1a60 <__pi_vfparse+0x74>
		if (c == '%') {
    1a44:	0101010f 	tsteq	r1, pc, lsl #2
    1a48:	06005403 	streq	r5, [r0], -r3, lsl #8
			c = *fm++;
    1a4c:	ed0c0000 	stc	0, cr0, [ip, #-0]
			switch (c) {
    1a50:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    1a54:	000008ce 	andeq	r0, r0, lr, asr #17
    1a58:	0101d60c 	tsteq	r1, ip, lsl #12
    1a5c:	05cf5203 	strbeq	r5, [pc, #515]	; 1c67 <vform+0x4b>
    1a60:	40060000 	andmi	r0, r6, r0
    1a64:	03010104 	movweq	r0, #4356	; 0x1104
    1a68:	000012e7 	andeq	r1, r0, r7, ror #5
    1a6c:	00073f53 	andeq	r3, r7, r3, asr pc
				outc ('%');
    1a70:	04400600 	strbeq	r0, [r0], #-1536	; 0xfffffa00
    1a74:	00007324 	andeq	r7, r0, r4, lsr #6
				outc (c);
    1a78:	68520000 	ldmdavs	r2, {}^	; <UNPREDICTABLE>
    1a7c:	06000005 	streq	r0, [r0], -r5
    1a80:	01010391 			; <UNDEFINED> instruction: 0x01010391
				if (c == '\0')
    1a84:	00131103 	andseq	r1, r3, r3, lsl #2
				return d;
    1a88:	073f5300 	ldreq	r5, [pc, -r0, lsl #6]!
}
    1a8c:	91060000 	mrsls	r0, (UNDEF: 6)
    1a90:	00731703 	rsbseq	r1, r3, r3, lsl #14
			switch (c) {
    1a94:	9a530000 	bls	14c1a9c <__ccfg+0x14a1af4>
    1a98:	06000006 	streq	r0, [r0], -r6
    1a9c:	732a0391 			; <UNDEFINED> instruction: 0x732a0391
				for (i = 12; ; i -= 4) {
    1aa0:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1aa4:	00098052 	andeq	r8, r9, r2, asr r0
						[ (val >> i) & 0xf ]);
    1aa8:	030c0600 	movweq	r0, #50688	; 0xc600
    1aac:	3b030101 	blcc	c1eb8 <__ccfg+0xa1f10>
    1ab0:	53000013 	movwpl	r0, #19
					outc (__pi_hex_enc_table
    1ab4:	0000073f 	andeq	r0, r0, pc, lsr r7
    1ab8:	18030c06 	stmdane	r3, {r1, r2, sl, fp}
					if (i == 0)
    1abc:	00000073 	andeq	r0, r0, r3, ror r0
    1ac0:	00069a53 	andeq	r9, r6, r3, asr sl
				for (i = 12; ; i -= 4) {
    1ac4:	030c0600 	movweq	r0, #50688	; 0xc600
				val = (word) va_arg (ap, aword);
    1ac8:	0000732b 	andeq	r7, r0, fp, lsr #6
				if (c == 'd' && (val & 0x8000) != 0) {
    1acc:	8b520000 	blhi	1481ad4 <__ccfg+0x1461b2c>
				val = (word) va_arg (ap, aword);
    1ad0:	06000006 	streq	r0, [r0], -r6
				if (c == 'd' && (val & 0x8000) != 0) {
    1ad4:	010101e7 	smlatteq	r1, r7, r1, r0
    1ad8:	00135803 	andseq	r5, r3, r3, lsl #16
					outc ('-');
    1adc:	073f5300 	ldreq	r5, [pc, -r0, lsl #6]!
    1ae0:	e7060000 	str	r0, [r6, -r0]
					val = (~val) + 1;
    1ae4:	00731901 	rsbseq	r1, r3, r1, lsl #18
    1ae8:	52000000 	andpl	r0, r0, #0
				for (i = 12; ; i -= 4) {
    1aec:	000007d5 	ldrdeq	r0, [r0], -r5
				enci (10000);
    1af0:	0101ba06 	tsteq	r1, r6, lsl #20
    1af4:	13750301 	cmnne	r5, #67108864	; 0x4000000
    1af8:	3f530000 	svccc	0x00530000
    1afc:	06000007 	streq	r0, [r0], -r7
    1b00:	731501ba 	tstvc	r5, #-2147483602	; 0x8000002e
    1b04:	00000000 	andeq	r0, r0, r0
    1b08:	00086f52 	andeq	r6, r8, r2, asr pc
    1b0c:	01390600 	teqeq	r9, r0, lsl #12
    1b10:	ac030101 	stfges	f0, [r3], {1}
    1b14:	53000013 	movwpl	r0, #19
    1b18:	0000073f 	andeq	r0, r0, pc, lsr r7
    1b1c:	1b013906 	blne	4ff3c <__ccfg+0x2ff94>
    1b20:	00000073 	andeq	r0, r0, r3, ror r0
    1b24:	00062853 	andeq	r2, r6, r3, asr r8
    1b28:	01390600 	teqeq	r9, r0, lsl #12
    1b2c:	0000732e 	andeq	r7, r0, lr, lsr #6
    1b30:	06145300 	ldreq	r5, [r4], -r0, lsl #6
    1b34:	3a060000 	bcc	181b3c <__ccfg+0x161b94>
				if (c == 'd' || c == 'u') {
    1b38:	00731b01 	rsbseq	r1, r3, r1, lsl #22
    1b3c:	52000000 	andpl	r0, r0, #0
					if (c == 'd' &&
    1b40:	000007e0 	andeq	r0, r0, r0, ror #15
					val = va_arg (ap, lword);
    1b44:	01028404 	tsteq	r2, r4, lsl #8
					fm++;
    1b48:	13c90301 	bicne	r0, r9, #67108864	; 0x4000000
					if (c == 'd' &&
    1b4c:	25530000 	ldrbcs	r0, [r3, #-0]
    1b50:	04000001 	streq	r0, [r0], #-1
						outc ('-');
    1b54:	731e0284 	tstvc	lr, #132, 4	; 0x40000008
    1b58:	00000000 	andeq	r0, r0, r0
						val = (~val) + 1;
    1b5c:	0004d052 	andeq	sp, r4, r2, asr r0
				enci (10000);
    1b60:	02060400 	andeq	r0, r6, #0, 8
					enci (1000000000UL);
    1b64:	f3030101 	vrhadd.u8	d0, d3, d1
    1b68:	53000013 	movwpl	r0, #19
    1b6c:	00000125 	andeq	r0, r0, r5, lsr #2
    1b70:	23020604 	movwcs	r0, #9732	; 0x2604
    1b74:	00000073 	andeq	r0, r0, r3, ror r0
    1b78:	0009a353 	andeq	sl, r9, r3, asr r3
    1b7c:	02060400 	andeq	r0, r6, #0, 8
    1b80:	00007337 	andeq	r7, r0, r7, lsr r3
    1b84:	87520000 	ldrbhi	r0, [r2, -r0]
    1b88:	04000004 	streq	r0, [r0], #-4
    1b8c:	01010154 	tsteq	r1, r4, asr r1
    1b90:	00141003 	andseq	r1, r4, r3
    1b94:	01255300 			; <UNDEFINED> instruction: 0x01255300
    1b98:	54040000 	strpl	r0, [r4], #-0
    1b9c:	00731901 	rsbseq	r1, r3, r1, lsl #18
    1ba0:	52000000 	andpl	r0, r0, #0
    1ba4:	00000025 	andeq	r0, r0, r5, lsr #32
				} else if (c == 'x') {
    1ba8:	01011e04 	tsteq	r1, r4, lsl #28
					for (i = 28; ; i -= 4) {
    1bac:	142d0301 	strtne	r0, [sp], #-769	; 0xfffffcff
					val = va_arg (ap, lword);
    1bb0:	25530000 	ldrbcs	r0, [r3, #-0]
							[ (val >> i) & 0xf ]);
    1bb4:	04000001 	streq	r0, [r0], #-1
    1bb8:	7317011e 	tstvc	r7, #-2147483641	; 0x80000007
						outc (__pi_hex_enc_table
    1bbc:	00000000 	andeq	r0, r0, r0
    1bc0:	0006d256 	andeq	sp, r6, r6, asr r2
    1bc4:	04630900 	strbteq	r0, [r3], #-2304	; 0xfffff700
						if (i == 0)
    1bc8:	56030101 	strpl	r0, [r3], -r1, lsl #2
    1bcc:	00000644 	andeq	r0, r0, r4, asr #12
					for (i = 28; ; i -= 4) {
    1bd0:	01045409 	tsteq	r4, r9, lsl #8
					outc ('%');
    1bd4:	5d560301 	ldclpl	3, cr0, [r6, #-4]
    1bd8:	09000006 	stmdbeq	r0, {r1, r2}
    1bdc:	0101022a 	tsteq	r1, sl, lsr #4
					outc ('l');
    1be0:	098e5203 	stmibeq	lr, {r0, r1, r9, ip, lr}
    1be4:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
				val = (word) va_arg (ap, aword);
    1be8:	03010101 	movweq	r0, #4353	; 0x1101
				outc (val);
    1bec:	0000146b 	andeq	r1, r0, fp, ror #8
    1bf0:	00066953 	andeq	r6, r6, r3, asr r9
				while (*st != '\0') {
    1bf4:	01680900 	cmneq	r8, r0, lsl #18
    1bf8:	0000731f 	andeq	r7, r0, pc, lsl r3
    1bfc:	9d560000 	ldclls	0, cr0, [r6, #-0]
    1c00:	09000005 	stmdbeq	r0, {r0, r2}
					outc (*st);
    1c04:	01010132 	tsteq	r1, r2, lsr r1
    1c08:	0d445903 	vstreq.16	s11, [r4, #-6]	; <UNPREDICTABLE>
	...
		c = *fm++;
    1c14:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c18:	000d5835 	andeq	r5, sp, r5, lsr r8
char *vform (char *res, const char *fm, va_list aq) {
    1c1c:	0004f900 	andeq	pc, r4, r0, lsl #18
    1c20:	1f000000 	svcne	0x00000000
	if (res != NULL) {
    1c24:	03000012 	movweq	r0, #18
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1c28:	0007be00 	andeq	fp, r7, r0, lsl #28
    1c2c:	2f010400 	svccs	0x00010400
    1c30:	0c000001 	stceq	0, cr0, [r0], {1}
}
    1c34:	00000a99 	muleq	r0, r9, sl
    1c38:	00000380 	andeq	r0, r0, r0, lsl #7
	fml = strlen (fm) + 17;
    1c3c:	00000698 	muleq	r0, r8, r6
    1c40:	00000000 	andeq	r0, r0, r0
    1c44:	00001a4c 	andeq	r1, r0, ip, asr #20
	if ((res = (char*) umalloc (fml)) == NULL)
    1c48:	74060102 	strvc	r0, [r6], #-258	; 0xfffffefe
    1c4c:	02000003 	andeq	r0, r0, #3
    1c50:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1c54:	56030000 	strpl	r0, [r3], -r0
    1c58:	03000016 	movweq	r0, #22
    1c5c:	003f1828 	eorseq	r1, pc, r8, lsr #16
    1c60:	04020000 	streq	r0, [r2], #-0
		ufree (res);
    1c64:	0000a405 	andeq	sl, r0, r5, lsl #8
		goto Again;
    1c68:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
	if (buf == NULL || fmt == NULL)
    1c6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c70:	00220a03 	eoreq	r0, r2, r3, lsl #20
	if (buf == NULL || fmt == NULL)
    1c74:	182e0300 	stmdane	lr!, {r8, r9}
    1c78:	00000059 	andeq	r0, r0, r9, asr r0
    1c7c:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
		    	    case 'u': scanu (lword); break;
    1c80:	03000003 	movweq	r0, #3
			while (isspace (*buf)) buf++;
    1c84:	000020f8 	strdeq	r2, [r0], -r8
    1c88:	6c193103 	ldfvss	f3, [r9], {3}
	while (*fmt != '\0') {
    1c8c:	02000000 	andeq	r0, r0, #0
		if (*fmt++ != '%')
    1c90:	02300702 	eorseq	r0, r0, #524288	; 0x80000
		switch (*fmt++) {
    1c94:	c1030000 	mrsgt	r0, (UNDEF: 3)
    1c98:	03000017 	movweq	r0, #23
    1c9c:	007f1934 	rsbseq	r1, pc, r4, lsr r9	; <UNPREDICTABLE>
    1ca0:	04020000 	streq	r0, [r2], #-0
    1ca4:	00007907 	andeq	r7, r0, r7, lsl #18
    1ca8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    1cac:	00000074 	andeq	r0, r0, r4, ror r0
}
    1cb0:	69050404 	stmdbvs	r5, {r2, sl}
		switch (*fmt++) {
    1cb4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    1cb8:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    1cbc:	54030000 	strpl	r0, [r3], #-0
    1cc0:	0400000b 	streq	r0, [r0], #-11
			while (isspace (*buf)) buf++;
    1cc4:	00a71b28 	adceq	r1, r7, r8, lsr #22
    1cc8:	6a050000 	bvs	141cd0 <__ccfg+0x121d28>
    1ccc:	0400000a 	streq	r0, [r0], #-10
    1cd0:	00bf000b 	adcseq	r0, pc, fp
    1cd4:	0a060000 	beq	181cdc <__ccfg+0x161d34>
    1cd8:	bf00000c 	svclt	0x0000000c
			if (*buf == '\0')
    1cdc:	00000000 	andeq	r0, r0, r0
			if (*buf != ',') {
    1ce0:	04070001 	streq	r0, [r7], #-1
			sap = va_arg (ap, char*);
    1ce4:	000a6c03 	andeq	r6, sl, r3, lsl #24
			nc++;
    1ce8:	18630400 	stmdane	r3!, {sl}^
			if (*buf != ',') {
    1cec:	0000009b 	muleq	r0, fp, r0
				while (!isspace (*buf) && *buf != ',' &&
    1cf0:	0003f003 	andeq	pc, r3, r3
    1cf4:	12260500 	eorne	r0, r6, #0, 10
    1cf8:	0000004d 	andeq	r0, r0, sp, asr #32
    1cfc:	0015ce03 	andseq	ip, r5, r3, lsl #28
    1d00:	12270500 	eorne	r0, r7, #0, 10
    1d04:	00000060 	andeq	r0, r0, r0, rrx
    1d08:	0000d908 	andeq	sp, r0, r8, lsl #18
			while (isspace (*buf)) buf++;
    1d0c:	00d90900 	sbcseq	r0, r9, r0, lsl #18
    1d10:	14030000 	strne	r0, [r3], #-0
    1d14:	05000009 	streq	r0, [r0, #-9]
    1d18:	00331228 	eorseq	r1, r3, r8, lsr #4
    1d1c:	c6030000 	strgt	r0, [r3], -r0
			if (*buf == ',') buf++;
    1d20:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
    1d24:	004d122b 	subeq	r1, sp, fp, lsr #4
			*sap = '\0';
    1d28:	fb090000 	blx	241d32 <__ccfg+0x221d8a>
			break;
    1d2c:	03000000 	movweq	r0, #0
		    case 'd': scani (word); break;
    1d30:	0000161f 	andeq	r1, r0, pc, lsl r6
    1d34:	73122c05 	tstvc	r2, #1280	; 0x500
    1d38:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1d3c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1d40:	00026303 	andeq	r6, r2, r3, lsl #6
    1d44:	122d0500 	eorne	r0, sp, #0, 10
    1d48:	00000073 	andeq	r0, r0, r3, ror r0
    1d4c:	00077003 	andeq	r7, r7, r3
    1d50:	102e0500 	eorne	r0, lr, r0, lsl #10
    1d54:	00000135 	andeq	r0, r0, r5, lsr r1
    1d58:	00d9040a 	sbcseq	r0, r9, sl, lsl #8
    1d5c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    1d60:	c9093205 	stmdbgt	r9, {r0, r2, r9, ip, sp}
    1d64:	0c000001 	stceq	0, cr0, [r0], {1}
    1d68:	0000027e 	andeq	r0, r0, lr, ror r2
    1d6c:	fb073405 	blx	1ced8a <__ccfg+0x1aede2>
    1d70:	01000000 	mrseq	r0, (UNDEF: 0)
    1d74:	0c000701 	stceq	7, cr0, [r0], {1}
    1d78:	00000098 	muleq	r0, r8, r0
    1d7c:	fb033505 	blx	cf19a <__ccfg+0xaf1f2>
    1d80:	01000000 	mrseq	r0, (UNDEF: 0)
    1d84:	0c000601 	stceq	6, cr0, [r0], {1}
    1d88:	0000024c 	andeq	r0, r0, ip, asr #4
    1d8c:	fb033605 	blx	cf5aa <__ccfg+0xaf602>
    1d90:	01000000 	mrseq	r0, (UNDEF: 0)
    1d94:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    1d98:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1d9c:	fb033705 	blx	cf9ba <__ccfg+0xafa12>
		    case 'u': scanu (word); break;
    1da0:	01000000 	mrseq	r0, (UNDEF: 0)
    1da4:	0c000401 	cfstrseq	mvf0, [r0], {1}
    1da8:	000003f8 	strdeq	r0, [r0], -r8
    1dac:	fb033805 	blx	cfdca <__ccfg+0xafe22>
    1db0:	01000000 	mrseq	r0, (UNDEF: 0)
    1db4:	0d000004 	stceq	0, cr0, [r0, #-16]
    1db8:	000003e9 	andeq	r0, r0, r9, ror #7
    1dbc:	fb073a05 	blx	1d05da <__ccfg+0x1b0632>
    1dc0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dc4:	0000400d 	andeq	r4, r0, sp
    1dc8:	033c0500 	teqeq	ip, #0, 10
    1dcc:	000000fb 	strdeq	r0, [r0], -fp
    1dd0:	006d0d02 	rsbeq	r0, sp, r2, lsl #26
    1dd4:	3d050000 	stccc	0, cr0, [r5, #-0]
    1dd8:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1ddc:	1e0d0300 	cdpne	3, 0, cr0, cr13, cr0, {0}
    1de0:	05000001 	streq	r0, [r0, #-1]
    1de4:	010c083f 	tsteq	ip, pc, lsr r8
		    case 'x': scanx (word); break;
    1de8:	00040000 	andeq	r0, r4, r0
    1dec:	00042803 	andeq	r2, r4, r3, lsl #16
    1df0:	03410500 	movteq	r0, #5376	; 0x1500
    1df4:	0000013b 	andeq	r0, r0, fp, lsr r1
    1df8:	0001c909 	andeq	ip, r1, r9, lsl #18
    1dfc:	02720e00 	rsbseq	r0, r2, #0, 28
    1e00:	43050000 	movwmi	r0, #20480	; 0x5000
    1e04:	0001d51a 	andeq	sp, r1, sl, lsl r5
    1e08:	0e010100 	adfeqs	f0, f1, f0
    1e0c:	000002de 	ldrdeq	r0, [r0], -lr
    1e10:	f60e4505 			; <UNDEFINED> instruction: 0xf60e4505
    1e14:	01000001 	tsteq	r0, r1
    1e18:	fc040a01 	stc2	10, cr0, [r4], {1}	; <UNPREDICTABLE>
    1e1c:	02000001 	andeq	r0, r0, #1
    1e20:	037b0801 	cmneq	fp, #65536	; 0x10000
    1e24:	fc080000 	stc2	0, cr0, [r8], {-0}
    1e28:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1e2c:	000002ec 	andeq	r0, r0, ip, ror #5
    1e30:	f61e4505 			; <UNDEFINED> instruction: 0xf61e4505
    1e34:	01000001 	tsteq	r0, r1
    1e38:	06080b01 	streq	r0, [r8], -r1, lsl #22
    1e3c:	0247098f 	subeq	r0, r7, #2342912	; 0x23c000
    1e40:	850d0000 	strhi	r0, [sp, #-0]
    1e44:	06000002 	streq	r0, [r0], -r2
    1e48:	00730b90 			; <UNDEFINED> instruction: 0x00730b90
    1e4c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1e50:	000005fb 	strdeq	r0, [r0], -fp
    1e54:	d9089106 	stmdble	r8, {r1, r2, r8, ip, pc}
    1e58:	04000000 	streq	r0, [r0], #-0
    1e5c:	00046b0d 	andeq	r6, r4, sp, lsl #22
			switch (*fmt++) {
    1e60:	10920600 	addsne	r0, r2, r0, lsl #12
    1e64:	00000107 	andeq	r0, r0, r7, lsl #2
    1e68:	06030006 	streq	r0, [r3], -r6
    1e6c:	06000004 	streq	r0, [r0], -r4
    1e70:	02160393 	andseq	r0, r6, #1275068418	; 0x4c000002
    1e74:	470f0000 	strmi	r0, [pc, -r0]
		    	    case 'd': scani (lword); break;
    1e78:	5e000002 	cdppl	0, 0, cr0, cr0, cr2, {0}
    1e7c:	10000002 	andne	r0, r0, r2
    1e80:	00360e00 	eorseq	r0, r6, r0, lsl #28
    1e84:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    1e88:	0002530f 	andeq	r5, r2, pc, lsl #6
    1e8c:	0b010100 	bleq	42294 <__ccfg+0x222ec>
    1e90:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    1e94:	00000296 	muleq	r0, r6, r2
    1e98:	00045e0c 	andeq	r5, r4, ip, lsl #28
    1e9c:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    1ea0:	000000fb 	strdeq	r0, [r0], -fp
    1ea4:	00010701 	andeq	r0, r1, r1, lsl #14
    1ea8:	0000310c 	andeq	r3, r0, ip, lsl #2
    1eac:	03940700 	orrseq	r0, r4, #0, 14
    1eb0:	000000fb 	strdeq	r0, [r0], -fp
    1eb4:	00000101 	andeq	r0, r0, r1, lsl #2
    1eb8:	02430300 	subeq	r0, r3, #0, 6
    1ebc:	96070000 	strls	r0, [r7], -r0
    1ec0:	00026c03 	andeq	r6, r2, r3, lsl #24
    1ec4:	02960800 	addseq	r0, r6, #0, 16
    1ec8:	a20f0000 	andge	r0, pc, #0
    1ecc:	b2000002 	andlt	r0, r0, #2
    1ed0:	10000002 	andne	r0, r0, r2
		    	    case 'x': scanx (lword); break;
    1ed4:	02a70800 	adceq	r0, r7, #0, 16
    1ed8:	a80e0000 	stmdage	lr, {}	; <UNPREDICTABLE>
    1edc:	07000002 	streq	r0, [r0, -r2]
    1ee0:	02b2179c 	adcseq	r1, r2, #156, 14	; 0x2700000
    1ee4:	01010000 	mrseq	r0, (UNDEF: 1)
    1ee8:	0000e50f 	andeq	lr, r0, pc, lsl #10
    1eec:	0002d000 	andeq	sp, r2, r0
    1ef0:	08001000 	stmdaeq	r0, {ip}
    1ef4:	000002c5 	andeq	r0, r0, r5, asr #5
    1ef8:	0003640e 	andeq	r6, r3, lr, lsl #8
    1efc:	13060800 	movwne	r0, #26624	; 0x6800
    1f00:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1f04:	fe0e0101 	cdp2	1, 0, cr0, cr14, cr1, {0}
    1f08:	06000000 	streq	r0, [r0], -r0
    1f0c:	010c0ec3 	smlabteq	ip, r3, lr, r0
    1f10:	01010000 	mrseq	r0, (UNDEF: 1)
    1f14:	00047811 	andeq	r7, r4, r1, lsl r8
    1f18:	016e0900 	cmneq	lr, r0, lsl #18
    1f1c:	0002fe10 	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
    1f20:	04040a00 	streq	r0, [r4], #-2560	; 0xfffff600
    1f24:	12000003 	andne	r0, r0, #3
    1f28:	00031001 	andeq	r1, r3, r1
    1f2c:	00d91300 	sbcseq	r1, r9, r0, lsl #6
    1f30:	0f000000 	svceq	0x00000000
    1f34:	00000203 	andeq	r0, r0, r3, lsl #4
    1f38:	0000031b 	andeq	r0, r0, fp, lsl r3
    1f3c:	10080010 	andne	r0, r8, r0, lsl r0
    1f40:	14000003 	strne	r0, [r0], #-3
		    	    case 'd': scani (lword); break;
    1f44:	00000438 	andeq	r0, r0, r8, lsr r4
    1f48:	16017f09 	strne	r7, [r1], -r9, lsl #30
    1f4c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1f50:	5c140101 	ldfpls	f0, [r4], {1}
    1f54:	09000003 	stmdbeq	r0, {r0, r1}
    1f58:	18140182 	ldmdane	r4, {r1, r7, r8}
    1f5c:	01000001 	tsteq	r0, r1
		    	    case 'u': scanu (lword); break;
    1f60:	04631401 	strbteq	r1, [r3], #-1025	; 0xfffffbff
    1f64:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    1f68:	010c0e02 	tsteq	ip, r2, lsl #28
    1f6c:	01010000 	mrseq	r0, (UNDEF: 1)
    1f70:	03090815 	movweq	r0, #38933	; 0x9815
    1f74:	03740903 	cmneq	r4, #49152	; 0xc000
    1f78:	02160000 	andseq	r0, r6, #0
    1f7c:	09000022 	stmdbeq	r0, {r1, r5}
    1f80:	d9070307 	stmdble	r7, {r0, r1, r2, r8, r9}
    1f84:	00000000 	andeq	r0, r0, r0
    1f88:	00054d16 	andeq	r4, r5, r6, lsl sp
    1f8c:	03080900 	movweq	r0, #35072	; 0x8900
    1f90:	00011d08 	andeq	r1, r1, r8, lsl #26
    1f94:	11000400 	tstne	r0, r0, lsl #8
    1f98:	00000223 	andeq	r0, r0, r3, lsr #4
    1f9c:	03030909 	movweq	r0, #14601	; 0x3909
    1fa0:	0000034d 	andeq	r0, r0, sp, asr #6
    1fa4:	00049517 	andeq	r9, r4, r7, lsl r5
		    	    case 'x': scanx (lword); break;
    1fa8:	0b093000 	bleq	24dfb0 <__ccfg+0x22e008>
    1fac:	03e40803 	mvneq	r0, #196608	; 0x30000
			if ((c = *buf++) == '\0')
    1fb0:	80160000 	andshi	r0, r6, r0
    1fb4:	09000004 	stmdbeq	r0, {r2}
			sap = va_arg (ap, char*);
    1fb8:	d9080314 	stmdble	r8, {r2, r4, r8, r9}
			nc++;
    1fbc:	00000000 	andeq	r0, r0, r0
			break;
    1fc0:	00028f16 	andeq	r8, r2, r6, lsl pc
			while (isspace (*buf)) buf++;
    1fc4:	03150900 	tsteq	r5, #0, 18
    1fc8:	0000d908 	andeq	sp, r0, r8, lsl #18
    1fcc:	7b160200 	blvc	5827d4 <__ccfg+0x56282c>
						*sap++ = *buf++;
    1fd0:	09000004 	stmdbeq	r0, {r2}
    1fd4:	f10b0316 			; <UNDEFINED> instruction: 0xf10b0316
			while (isspace (*buf)) buf++;
    1fd8:	04000002 	streq	r0, [r0], #-2
    1fdc:	000f4d16 	andeq	r4, pc, r6, lsl sp	; <UNPREDICTABLE>
    1fe0:	03170900 	tsteq	r7, #0, 18
		return 0;
    1fe4:	00011d09 	andeq	r1, r1, r9, lsl #26
    1fe8:	31160800 	tstcc	r6, r0, lsl #16
		    case 'x': scanx (word); break;
    1fec:	09000004 	stmdbeq	r0, {r2}
    1ff0:	e40f0318 	str	r0, [pc], #-792	; 1ff8 <vscan+0x38c>
		    	    case 'x': scanx (lword); break;
    1ff4:	0c000003 	stceq	0, cr0, [r0], {3}
    1ff8:	00028a16 	andeq	r8, r2, r6, lsl sl
    1ffc:	03190900 	tsteq	r9, #0, 18
    2000:	0003f415 	andeq	pc, r3, r5, lsl r4	; <UNPREDICTABLE>
    2004:	0f002c00 	svceq	0x00002c00
    2008:	00000374 	andeq	r0, r0, r4, ror r3
    200c:	000003f4 	strdeq	r0, [r0], -r4
    2010:	00009418 	andeq	r9, r0, r8, lsl r4
    2014:	0a000300 	beq	2c1c <NOROM_OSCClockSourceGet+0x84>
    2018:	00038104 	andeq	r8, r3, r4, lsl #2
    201c:	04a01100 	strteq	r1, [r0], #256	; 0x100
    2020:	1c090000 	stcne	0, cr0, [r9], {-0}
    2024:	03811b03 	orreq	r1, r1, #3072	; 0xc00
    2028:	52140000 	andspl	r0, r4, #0
    202c:	09000003 	stmdbeq	r0, {r0, r1}
    2030:	1614031e 			; <UNDEFINED> instruction: 0x1614031e
    2034:	01000004 	tsteq	r0, r4
    2038:	fa040a01 	blx	104844 <__ccfg+0xe489c>
    203c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    2040:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    2044:	d9131d0a 	ldmdble	r3, {r1, r3, r8, sl, fp, ip}
    2048:	01000000 	mrseq	r0, (UNDEF: 0)
    204c:	07290e01 	streq	r0, [r9, -r1, lsl #28]!
    2050:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2054:	0000ea1a 	andeq	lr, r0, sl, lsl sl
    2058:	0e010100 	adfeqs	f0, f1, f0
    205c:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    2060:	ea241e0a 	b	909890 <__ccfg+0x8e98e8>
    2064:	01000000 	mrseq	r0, (UNDEF: 0)
    2068:	05e80e01 	strbeq	r0, [r8, #3585]!	; 0xe01
    206c:	220a0000 	andcs	r0, sl, #0
    2070:	00041614 	andeq	r1, r4, r4, lsl r6
    2074:	03010100 	movweq	r0, #4352	; 0x1100
    2078:	00000a16 	andeq	r0, r0, r6, lsl sl
    207c:	600f440a 	andvs	r4, pc, sl, lsl #8
    2080:	0a000004 	beq	2098 <TrimAfterColdResetWakeupFromShutDown+0x44>
    2084:	00046604 	andeq	r6, r4, r4, lsl #12
    2088:	8d011900 	vstrhi.16	s2, [r1, #-0]	; <UNPREDICTABLE>
    208c:	80000000 	andhi	r0, r0, r0
    2090:	13000004 	movwne	r0, #4
    2094:	0000008d 	andeq	r0, r0, sp, lsl #1
    2098:	0001f613 	andeq	pc, r1, r3, lsl r6	; <UNPREDICTABLE>
    209c:	008d1300 	addeq	r1, sp, r0, lsl #6
    20a0:	1a000000 	bne	20a8 <TrimAfterColdResetWakeupFromShutDown+0x54>
    20a4:	0000033e 	andeq	r0, r0, lr, lsr r3
    20a8:	05070c01 	streq	r0, [r7, #-3073]	; 0xfffff3ff
    20ac:	00008403 	andeq	r8, r0, r3, lsl #8
    20b0:	0be01b20 	bleq	ff808d38 <_estack+0xdf803d38>
    20b4:	10010000 	andne	r0, r1, r0
    20b8:	00010c07 	andeq	r0, r1, r7, lsl #24
    20bc:	03050100 	movweq	r0, #20736	; 0x5100
    20c0:	00000000 	andeq	r0, r0, r0
    20c4:	0004461a 	andeq	r4, r4, sl, lsl r6
    20c8:	0d1a0100 	ldfeqs	f0, [sl, #-0]
    20cc:	00400305 	subeq	r0, r0, r5, lsl #6
    20d0:	540f2000 	strpl	r2, [pc], #-0	; 20d8 <TrimAfterColdResetWakeupFromShutDown+0x84>
    20d4:	bf000004 	svclt	0x00000004
    20d8:	18000004 	stmdane	r0, {r2}
    20dc:	00000094 	muleq	r0, r4, r0
    20e0:	4e1c0000 	cdpmi	0, 1, cr0, cr12, cr0, {0}
    20e4:	0100000a 	tsteq	r0, sl
    20e8:	04af141e 	strteq	r1, [pc], #1054	; 20f0 <TrimAfterColdResetWakeupFromShutDown+0x9c>
    20ec:	03050000 	movweq	r0, #20480	; 0x5000
    20f0:	20000044 	andcs	r0, r0, r4, asr #32
    20f4:	0001da1a 	andeq	sp, r1, sl, lsl sl
    20f8:	13220100 			; <UNDEFINED> instruction: 0x13220100
    20fc:	008c0305 	addeq	r0, ip, r5, lsl #6
    2100:	071a2000 	ldreq	r2, [sl, -r0]
    2104:	01000004 	tsteq	r0, r4
    2108:	03050d27 	movweq	r0, #23847	; 0x5d27
    210c:	200000a8 	andcs	r0, r0, r8, lsr #1
    2110:	00041c1a 	andeq	r1, r4, sl, lsl ip
    2114:	07300100 	ldreq	r0, [r0, -r0, lsl #2]!
    2118:	00880305 	addeq	r0, r8, r5, lsl #6
    211c:	2a1a2000 	bcs	68a124 <__ccfg+0x66a17c>
    2120:	01000004 	tsteq	r0, r4
    2124:	03050f31 	movweq	r0, #24369	; 0x5f31
    2128:	2000008a 	andcs	r0, r0, sl, lsl #1
    212c:	0004381a 	andeq	r3, r4, sl, lsl r8
    2130:	19310100 	ldmdbne	r1!, {r8}
    2134:	00940305 	addseq	r0, r4, r5, lsl #6
    2138:	290f2000 	stmdbcs	pc, {sp}	; <UNPREDICTABLE>
    213c:	27000001 	strcs	r0, [r0, -r1]
    2140:	18000005 	stmdane	r0, {r0, r2}
    2144:	00000094 	muleq	r0, r4, r0
    2148:	091b0003 	ldmdbeq	fp, {r0, r1}
    214c:	01000009 	tsteq	r0, r9
    2150:	05170a36 	ldreq	r0, [r7, #-2614]	; 0xfffff5ca
    2154:	05010000 	streq	r0, [r1, #-0]
    2158:	00009803 	andeq	r9, r0, r3, lsl #16
    215c:	03201a20 			; <UNDEFINED> instruction: 0x03201a20
    2160:	3f010000 	svccc	0x00010000
    2164:	e003050c 	and	r0, r3, ip, lsl #10
    2168:	1a00002d 	bne	2224 <NOROM_SetupSetVddrLevel+0x58>
    216c:	0000032f 	andeq	r0, r0, pc, lsr #6
    2170:	050d4501 	streq	r4, [sp, #-1281]	; 0xfffffaff
    2174:	00000003 	andeq	r0, r0, r3
    2178:	01020b00 	tsteq	r2, r0, lsl #22
    217c:	057a0949 	ldrbeq	r0, [sl, #-2377]!	; 0xfffff6b7
    2180:	420d0000 	andmi	r0, sp, #0
    2184:	0100000a 	tsteq	r0, sl
    2188:	00fb074a 	rscseq	r0, fp, sl, asr #14
    218c:	0d000000 	stceq	0, cr0, [r0, #-0]
    2190:	00000c24 	andeq	r0, r0, r4, lsr #24
    2194:	fb074b01 	blx	1d4da2 <__ccfg+0x1b4dfa>
    2198:	01000000 	mrseq	r0, (UNDEF: 0)
    219c:	0b4b0300 	bleq	12c2da4 <__ccfg+0x12a2dfc>
    21a0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    21a4:	00055603 	andeq	r5, r5, r3, lsl #12
    21a8:	057a0f00 	ldrbeq	r0, [sl, #-3840]!	; 0xfffff100
    21ac:	05960000 	ldreq	r0, [r6]
    21b0:	94180000 	ldrls	r0, [r8], #-0
    21b4:	00000000 	andeq	r0, r0, r0
    21b8:	0b801c00 	bleq	fe0091c0 <_estack+0xde0041c0>
    21bc:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    21c0:	00058611 	andeq	r8, r5, r1, lsl r6
    21c4:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    21c8:	0f200000 	svceq	0x00200000
    21cc:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    21d0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    21d4:	00009418 	andeq	r9, r0, r8, lsl r4
    21d8:	0a000000 	beq	21e0 <NOROM_SetupSetVddrLevel+0x14>
    21dc:	00011d04 	andeq	r1, r1, r4, lsl #26
    21e0:	0a631d00 	beq	18c95e8 <__ccfg+0x18a9640>
    21e4:	bd010000 	stclt	0, cr0, [r1, #-0]
    21e8:	05a80f02 	streq	r0, [r8, #3842]!	; 0xf02
    21ec:	03050000 	movweq	r0, #20480	; 0x5000
    21f0:	20000054 	andcs	r0, r0, r4, asr r0
    21f4:	00011d0f 	andeq	r1, r1, pc, lsl #26
    21f8:	0005e100 	andeq	lr, r5, r0, lsl #2
    21fc:	00941800 	addseq	r1, r4, r0, lsl #16
    2200:	00000000 	andeq	r0, r0, r0
    2204:	000b061d 	andeq	r0, fp, sp, lsl r6
    2208:	02c20100 	sbceq	r0, r2, #0, 2
    220c:	0005d10e 	andeq	sp, r5, lr, lsl #2
    2210:	50030500 	andpl	r0, r3, r0, lsl #10
    2214:	1d200000 	stcne	0, cr0, [r0, #-0]
    2218:	00000b63 	andeq	r0, r0, r3, ror #22
    221c:	2602c201 	strcs	ip, [r2], -r1, lsl #4
    2220:	000005d1 	ldrdeq	r0, [r0], -r1
    2224:	00480305 	subeq	r0, r8, r5, lsl #6
    2228:	011e2000 	tsteq	lr, r0
    222c:	00000bac 	andeq	r0, r0, ip, lsr #23
    2230:	07052f01 	streq	r2, [r5, -r1, lsl #30]
    2234:	00010c01 	andeq	r0, r1, r1, lsl #24
	...
    2240:	1f9c0100 	svcne	0x009c0100
    2244:	000b3a01 	andeq	r3, fp, r1, lsl #20
    2248:	04820100 	streq	r0, [r2], #256	; 0x100
    224c:	14280106 	strtne	r0, [r8], #-262	; 0xfffffefa
    2250:	15640000 	strbne	r0, [r4, #-0]!
    2254:	9c010000 	stcls	0, cr0, [r1], {-0}
    2258:	0000070e 	andeq	r0, r0, lr, lsl #14
    225c:	000b7b20 	andeq	r7, fp, r0, lsr #22
    2260:	04820100 	streq	r0, [r2], #256	; 0x100
    2264:	00070e18 	andeq	r0, r7, r8, lsl lr
    2268:	00050c00 	andeq	r0, r5, r0, lsl #24
    226c:	76222100 	strtvc	r2, [r2], -r0, lsl #2
    2270:	01006c61 	tsteq	r0, r1, ror #24
    2274:	0c080487 	cfstrseq	mvf0, [r8], {135}	; 0x87
    2278:	4c000001 	stcmi	0, cr0, [r0], {1}
    227c:	23000005 	movwcs	r0, #5
    2280:	01007061 	tsteq	r0, r1, rrx
    2284:	c10a0488 	smlabbgt	sl, r8, r4, r0
    2288:	02000000 	andeq	r0, r0, #0
    228c:	62224c91 	eorvs	r4, r2, #37120	; 0x9100
    2290:	89010063 	stmdbhi	r1, {r0, r1, r5, r6}
    2294:	00ef0704 	rsceq	r0, pc, r4, lsl #14
    2298:	058b0000 	streq	r0, [fp]
    229c:	76220000 	strtvc	r0, [r2], -r0
    22a0:	048a0100 	streq	r0, [sl], #256	; 0x100
    22a4:	0000d907 	andeq	sp, r0, r7, lsl #18
    22a8:	0005bf00 	andeq	fp, r5, r0, lsl #30
    22ac:	73692400 	cmnvc	r9, #0, 8
    22b0:	048b0100 	streq	r0, [fp], #256	; 0x100
    22b4:	0000fb07 	andeq	pc, r0, r7, lsl #22
    22b8:	0c342500 	cfldr32eq	mvfx2, [r4], #-0
    22bc:	b0010000 	andlt	r0, r1, r0
    22c0:	14f40104 	ldrbtne	r0, [r4], #260	; 0x104
    22c4:	b4260000 	strtlt	r0, [r6], #-0
    22c8:	d0000014 	andle	r0, r0, r4, lsl r0
    22cc:	c0000014 	andgt	r0, r0, r4, lsl r0
    22d0:	22000006 	andcs	r0, r0, #6
    22d4:	9f010069 	svcls	0x00010069
    22d8:	00ef0a04 	rsceq	r0, pc, r4, lsl #20
    22dc:	05e80000 	strbeq	r0, [r8, #0]!
    22e0:	27000000 	strcs	r0, [r0, -r0]
    22e4:	00000650 	andeq	r0, r0, r0, asr r6
    22e8:	000006d9 	ldrdeq	r0, [r0], -r9
    22ec:	01006422 	tsteq	r0, r2, lsr #8
    22f0:	0c0b04a9 	cfstrseq	mvf0, [fp], {169}	; 0xa9
    22f4:	fb000001 	blx	2302 <NOROM_SetupGetTrimForAnabypassValue1+0xe>
    22f8:	00000005 	andeq	r0, r0, r5
    22fc:	00154026 	andseq	r4, r5, r6, lsr #32
    2300:	00154e00 	andseq	r4, r5, r0, lsl #28
    2304:	0006f600 	andeq	pc, r6, r0, lsl #12
    2308:	00732200 	rsbseq	r2, r3, r0, lsl #4
    230c:	0b04c601 	bleq	133b18 <__ccfg+0x113b70>
    2310:	000001f6 	strdeq	r0, [r0], -r6
    2314:	00000624 	andeq	r0, r0, r4, lsr #12
    2318:	10c12800 	sbcne	r2, r1, r0, lsl #16
    231c:	14560000 	ldrbne	r0, [r6], #-0
    2320:	06800000 	streq	r0, [r0], r0
    2324:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    2328:	d4290204 	strtle	r0, [r9], #-516	; 0xfffffdfc
    232c:	00000010 	andeq	r0, r0, r0, lsl r0
    2330:	03040a00 	movweq	r0, #18944	; 0x4a00
    2334:	2a000002 	bcs	2344 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2338:	00000c04 	andeq	r0, r0, r4, lsl #24
    233c:	0d044701 	stceq	7, cr4, [r4, #-4]
    2340:	000f7801 	andeq	r7, pc, r1, lsl #16
    2344:	000f9000 	andeq	r9, pc, r0
    2348:	539c0100 	orrspl	r0, ip, #0, 2
    234c:	2b000007 	blcs	2370 <NOROM_SetupGetTrimForAmpcompTh2+0x8>
    2350:	47010063 	strmi	r0, [r1, -r3, rrx]
    2354:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2358:	06370000 	ldrteq	r0, [r7], -r0
    235c:	c1280000 			; <UNDEFINED> instruction: 0xc1280000
    2360:	78000010 	stmdavc	r0, {r4}
    2364:	f800000f 			; <UNDEFINED> instruction: 0xf800000f
    2368:	01000005 	tsteq	r0, r5
    236c:	29020449 	stmdbcs	r2, {r0, r3, r6, sl}
    2370:	000010d4 	ldrdeq	r1, [r0], -r4
    2374:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2378:	00000aeb 	andeq	r0, r0, fp, ror #21
    237c:	06042801 	streq	r2, [r4], -r1, lsl #16
    2380:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    238c:	b49c0100 	ldrlt	r0, [ip], #256	; 0x100
    2390:	2b000007 	blcs	23b4 <NOROM_SetupGetTrimForAmpcompCtrl+0x28>
    2394:	0100636e 	tsteq	r0, lr, ror #6
    2398:	291c0428 	ldmdbcs	ip, {r3, r5, sl}
    239c:	4a000001 	bmi	23a8 <NOROM_SetupGetTrimForAmpcompCtrl+0x1c>
    23a0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    23a4:	00000bcc 	andeq	r0, r0, ip, asr #23
    23a8:	09043101 	stmdbeq	r4, {r0, r8, ip, sp}
    23ac:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    23b0:	00000668 	andeq	r0, r0, r8, ror #12
    23b4:	78616d22 	stmdavc	r1!, {r1, r5, r8, sl, fp, sp, lr}^
    23b8:	04320100 	ldrteq	r0, [r2], #-256	; 0xffffff00
    23bc:	00011d08 	andeq	r1, r1, r8, lsl #26
    23c0:	00068600 	andeq	r8, r6, r0, lsl #12
    23c4:	0b012d00 	bleq	4d7cc <__ccfg+0x2d824>
    23c8:	32010000 	andcc	r0, r1, #0
    23cc:	011d0d04 	tsteq	sp, r4, lsl #26
    23d0:	06a40000 	strteq	r0, [r4], r0
    23d4:	2c000000 	stccs	0, cr0, [r0], {-0}
    23d8:	000bb901 	andeq	fp, fp, r1, lsl #18
    23dc:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    23e0:	00d90106 	sbcseq	r0, r9, r6, lsl #2
	...
    23ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    23f0:	000007e3 	andeq	r0, r0, r3, ror #15
    23f4:	6e696d2b 	cdpvs	13, 6, cr6, cr9, cr11, {1}
    23f8:	04150100 	ldreq	r0, [r5], #-256	; 0xffffff00
    23fc:	0001291c 	andeq	r2, r1, ip, lsl r9
    2400:	0006cd00 	andeq	ip, r6, r0, lsl #26
    2404:	011f0000 	tsteq	pc, r0
    2408:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    240c:	06040201 	streq	r0, [r4], -r1, lsl #4
    2410:	00141001 	andseq	r1, r4, r1
    2414:	00142800 	andseq	r2, r4, r0, lsl #16
    2418:	0e9c0100 	fmleqe	f0, f4, f0
    241c:	20000008 	andcs	r0, r0, r8
    2420:	00000b8f 	andeq	r0, r0, pc, lsl #23
    2424:	19040201 	stmdbne	r4, {r0, r9}
    2428:	000000d9 	ldrdeq	r0, [r0], -r9
    242c:	000006e0 	andeq	r0, r0, r0, ror #13
    2430:	35012c00 	strcc	r2, [r1, #-3072]	; 0xfffff400
    2434:	0100000a 	tsteq	r0, sl
    2438:	010803a3 	smlatbeq	r8, r3, r3, r0
    243c:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    2440:	00001334 	andeq	r1, r0, r4, lsr r3
    2444:	000013dc 	ldrdeq	r1, [r0], -ip
    2448:	08809c01 	stmeq	r0, {r0, sl, fp, ip, pc}
    244c:	a5200000 	strge	r0, [r0, #-0]!
    2450:	01000013 	tsteq	r0, r3, lsl r0
    2454:	d91a03a3 	ldmdble	sl, {r0, r1, r5, r7, r8, r9}
    2458:	f3000000 	vhadd.u8	d0, d0, d0
    245c:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    2460:	00000bcc 	andeq	r0, r0, ip, asr #23
    2464:	0903ab01 	stmdbeq	r3, {r0, r8, r9, fp, sp, pc}
    2468:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    246c:	00000706 	andeq	r0, r0, r6, lsl #14
    2470:	00636322 	rsbeq	r6, r3, r2, lsr #6
    2474:	1103ab01 	tstne	r3, r1, lsl #22
    2478:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    247c:	0000073a 	andeq	r0, r0, sl, lsr r7
    2480:	000b6a2d 	andeq	r6, fp, sp, lsr #20
    2484:	03ab0100 			; <UNDEFINED> instruction: 0x03ab0100
    2488:	00011d15 	andeq	r1, r1, r5, lsl sp
    248c:	00076300 	andeq	r6, r7, r0, lsl #6
    2490:	13a42d00 			; <UNDEFINED> instruction: 0x13a42d00
    2494:	af010000 	svcge	0x00010000
    2498:	011d0803 	tsteq	sp, r3, lsl #16
    249c:	07760000 	ldrbeq	r0, [r6, -r0]!
    24a0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    24a4:	000c2a01 	andeq	r2, ip, r1, lsl #20
    24a8:	037c0100 	cmneq	ip, #0, 2
    24ac:	9d010106 	stflss	f0, [r1, #-24]	; 0xffffffe8
    24b0:	2f000008 	svccs	0x00000008
    24b4:	01006863 	tsteq	r0, r3, ror #16
    24b8:	b818037c 	ldmdalt	r8, {r2, r3, r4, r5, r6, r8, r9}
    24bc:	00000005 	andeq	r0, r0, r5
    24c0:	000a482a 	andeq	r4, sl, sl, lsr #16
    24c4:	034a0100 	movteq	r0, #41216	; 0xa100
    24c8:	0ef8010d 	cdpeq	1, 15, cr0, cr8, cr13, {0}
    24cc:	0f780000 	svceq	0x00780000
    24d0:	9c010000 	stcls	0, cr0, [r1], {-0}
    24d4:	000008e7 	andeq	r0, r0, r7, ror #17
    24d8:	0068632b 	rsbeq	r6, r8, fp, lsr #6
    24dc:	1b034a01 	blne	d4ce8 <__ccfg+0xb4d40>
    24e0:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
    24e4:	000007a0 	andeq	r0, r0, r0, lsr #15
    24e8:	000bcc2d 	andeq	ip, fp, sp, lsr #24
    24ec:	03570100 	cmpeq	r7, #0, 2
    24f0:	0005b809 	andeq	fp, r5, r9, lsl #16
    24f4:	0007be00 	andeq	fp, r7, r0, lsl #28
    24f8:	63632200 	cmnvs	r3, #0, 4
    24fc:	03570100 	cmpeq	r7, #0, 2
    2500:	0005b811 	andeq	fp, r5, r1, lsl r8
    2504:	0007ff00 	andeq	pc, r7, r0, lsl #30
    2508:	01300000 	teqeq	r0, r0
    250c:	00000a88 	andeq	r0, r0, r8, lsl #21
    2510:	0602f001 	streq	pc, [r2], -r1
    2514:	0000124c 	andeq	r1, r0, ip, asr #4
    2518:	0000129c 	muleq	r0, ip, r2
    251c:	09119c01 	ldmdbeq	r1, {r0, sl, fp, ip, pc}
    2520:	152d0000 	strne	r0, [sp, #-0]!
    2524:	0100000b 	tsteq	r0, fp
    2528:	1d0802f5 	sfmne	f0, 4, [r8, #-980]	; 0xfffffc2c
    252c:	33000001 	movwcc	r0, #1
    2530:	00000008 	andeq	r0, r0, r8
    2534:	6f690131 	svcvs	0x00690131
    2538:	02790100 	rsbseq	r0, r9, #0, 2
    253c:	00ef0106 	rsceq	r0, pc, r6, lsl #2
    2540:	11b00000 	movsne	r0, r0
    2544:	124c0000 	subne	r0, ip, #0
    2548:	9c010000 	stcls	0, cr0, [r1], {-0}
    254c:	00000994 	muleq	r0, r4, r9
    2550:	000b7020 	andeq	r7, fp, r0, lsr #32
    2554:	02790100 	rsbseq	r0, r9, #0, 2
    2558:	0000d90f 	andeq	sp, r0, pc, lsl #18
    255c:	00085100 	andeq	r5, r8, r0, lsl #2
    2560:	65642b00 	strbvs	r2, [r4, #-2816]!	; 0xfffff500
    2564:	79010076 	stmdbvc	r1, {r1, r2, r4, r5, r6}
    2568:	00d91b02 	sbcseq	r1, r9, r2, lsl #22
    256c:	086f0000 	stmdaeq	pc!, {}^	; <UNPREDICTABLE>
    2570:	f9200000 			; <UNDEFINED> instruction: 0xf9200000
    2574:	01000006 	tsteq	r0, r6
    2578:	d9250279 	stmdble	r5!, {r0, r3, r4, r5, r6, r9}
    257c:	8d000000 	stchi	0, cr0, [r0, #-0]
    2580:	2b000008 	blcs	25a8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>
    2584:	00667562 	rsbeq	r7, r6, r2, ror #10
    2588:	36027901 	strcc	r7, [r2], -r1, lsl #18
    258c:	000001f6 	strdeq	r0, [r0], -r6
    2590:	000008ab 	andeq	r0, r0, fp, lsr #17
    2594:	6e656c2b 	cdpvs	12, 6, cr6, cr5, cr11, {1}
    2598:	02790100 	rsbseq	r0, r9, #0, 2
    259c:	0000d940 	andeq	sp, r0, r0, asr #18
    25a0:	0008c900 	andeq	ip, r8, r0, lsl #18
    25a4:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    25a8:	7b010074 	blvc	42780 <__ccfg+0x227d8>
    25ac:	00ef0702 	rsceq	r0, pc, r2, lsl #14
    25b0:	08e90000 	stmiaeq	r9!, {}^	; <UNPREDICTABLE>
    25b4:	1f000000 	svcne	0x00000000
    25b8:	000b2801 	andeq	r2, fp, r1, lsl #16
    25bc:	02690100 	rsbeq	r0, r9, #0, 2
    25c0:	118c0106 	orrne	r0, ip, r6, lsl #2
    25c4:	11b00000 	movsne	r0, r0
    25c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25cc:	000009cf 	andeq	r0, r0, pc, asr #19
    25d0:	0066722b 	rsbeq	r7, r6, fp, lsr #4
    25d4:	1e026901 	vmlane.f16	s12, s4, s2	; <UNPREDICTABLE>
    25d8:	00000454 	andeq	r0, r0, r4, asr r4
    25dc:	0000091d 	andeq	r0, r0, sp, lsl r9
    25e0:	636f6c2b 	cmnvs	pc, #11008	; 0x2b00
    25e4:	02690100 	rsbeq	r0, r9, #0, 2
    25e8:	00008d26 	andeq	r8, r0, r6, lsr #26
    25ec:	00094600 	andeq	r4, r9, r0, lsl #12
    25f0:	011f0000 	tsteq	pc, r0
    25f4:	00000c3b 	andeq	r0, r0, fp, lsr ip
    25f8:	06025f01 	streq	r5, [r2], -r1, lsl #30
    25fc:	00000001 	andeq	r0, r0, r1
    2600:	00000000 	andeq	r0, r0, r0
    2604:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    2608:	2000000a 	andcs	r0, r0, sl
    260c:	00000b76 	andeq	r0, r0, r6, ror fp
    2610:	19025f01 	stmdbne	r2, {r0, r8, r9, sl, fp, ip, lr}
    2614:	000001f6 	strdeq	r0, [r0], -r6
    2618:	0000096f 	andeq	r0, r0, pc, ror #18
    261c:	01006332 	tsteq	r0, r2, lsr r3
    2620:	fc24025f 	stc2	2, cr0, [r4], #-380	; 0xfffffe84
    2624:	01000001 	tsteq	r0, r1
    2628:	006e2b51 	rsbeq	r2, lr, r1, asr fp
    262c:	2b025f01 	blcs	9a238 <__ccfg+0x7a290>
    2630:	0000008d 	andeq	r0, r0, sp, lsl #1
    2634:	0000098d 	andeq	r0, r0, sp, lsl #19
    2638:	f8011f00 			; <UNDEFINED> instruction: 0xf8011f00
    263c:	0100000b 	tsteq	r0, fp
    2640:	01060259 	tsteq	r6, r9, asr r2
    2644:	00001176 	andeq	r1, r0, r6, ror r1
    2648:	0000118a 	andeq	r1, r0, sl, lsl #3
    264c:	0a619c01 	beq	1869658 <__ccfg+0x18496b0>
    2650:	76200000 	strtvc	r0, [r0], -r0
    2654:	0100000b 	tsteq	r0, fp
    2658:	f6190259 			; <UNDEFINED> instruction: 0xf6190259
    265c:	a0000001 	andge	r0, r0, r1
    2660:	2b000009 	blcs	268c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x38>
    2664:	00637273 	rsbeq	r7, r3, r3, ror r2
    2668:	2b025901 	blcs	98a74 <__ccfg+0x78acc>
    266c:	0000070e 	andeq	r0, r0, lr, lsl #14
    2670:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
    2674:	01006e2b 	tsteq	r0, fp, lsr #28
    2678:	8d340259 	lfmhi	f0, 4, [r4, #-356]!	; 0xfffffe9c
    267c:	d1000000 	mrsle	r0, (UNDEF: 0)
    2680:	00000009 	andeq	r0, r0, r9
    2684:	0c6c011f 	stfeqe	f0, [ip], #-124	; 0xffffff84
    2688:	54010000 	strpl	r0, [r1], #-0
    268c:	00010602 	andeq	r0, r1, r2, lsl #12
    2690:	00000000 	andeq	r0, r0, r0
    2694:	01000000 	mrseq	r0, (UNDEF: 0)
    2698:	000aa69c 	muleq	sl, ip, r6
    269c:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    26a0:	1a025401 	bne	976ac <__ccfg+0x77704>
    26a4:	000001f6 	strdeq	r0, [r0], -r6
    26a8:	000009e4 	andeq	r0, r0, r4, ror #19
    26ac:	0100732b 	tsteq	r0, fp, lsr #6
    26b0:	0e290254 	mcreq	2, 1, r0, cr9, cr4, {2}
    26b4:	f7000007 			; <UNDEFINED> instruction: 0xf7000007
    26b8:	32000009 	andcc	r0, r0, #9
    26bc:	5401006e 	strpl	r0, [r1], #-110	; 0xffffff92
    26c0:	008d3002 	addeq	r3, sp, r2
    26c4:	52010000 	andpl	r0, r1, #0
    26c8:	3f011f00 	svccc	0x00011f00
    26cc:	0100000b 	tsteq	r0, fp
    26d0:	0106024e 	tsteq	r6, lr, asr #4
	...
    26dc:	0ade9c01 	beq	ff7a96e8 <_estack+0xdf7a46e8>
    26e0:	642b0000 	strtvs	r0, [fp], #-0
    26e4:	024e0100 	subeq	r0, lr, #0, 2
    26e8:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    26ec:	000a0a00 	andeq	r0, sl, r0, lsl #20
    26f0:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    26f4:	28024e01 	stmdacs	r2, {r0, r9, sl, fp, lr}
    26f8:	0000070e 	andeq	r0, r0, lr, lsl #14
    26fc:	00000a28 	andeq	r0, r0, r8, lsr #20
    2700:	47011f00 	strmi	r1, [r1, -r0, lsl #30]
    2704:	0100000c 	tsteq	r0, ip
    2708:	01060247 	tsteq	r6, r7, asr #4
	...
    2714:	0b259c01 	bleq	969720 <__ccfg+0x949778>
    2718:	642b0000 	strtvs	r0, [fp], #-0
    271c:	02470100 	subeq	r0, r7, #0, 2
    2720:	0001f61a 	andeq	pc, r1, sl, lsl r6	; <UNPREDICTABLE>
    2724:	000a3b00 	andeq	r3, sl, r0, lsl #22
    2728:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    272c:	29024701 	stmdbcs	r2, {r0, r8, r9, sl, lr}
    2730:	0000070e 	andeq	r0, r0, lr, lsl #14
    2734:	00000a59 	andeq	r0, r0, r9, asr sl
    2738:	01006e2b 	tsteq	r0, fp, lsr #28
    273c:	8d300247 	lfmhi	f0, 4, [r0, #-284]!	; 0xfffffee4
    2740:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2744:	0000000a 	andeq	r0, r0, sl
    2748:	0a29011f 	beq	a42bcc <__ccfg+0xa22c24>
    274c:	42010000 	andmi	r0, r1, #0
    2750:	00010602 	andeq	r0, r1, r2, lsl #12
    2754:	00000000 	andeq	r0, r0, r0
    2758:	01000000 	mrseq	r0, (UNDEF: 0)
    275c:	000b5d9c 	muleq	fp, ip, sp
    2760:	00642b00 	rsbeq	r2, r4, r0, lsl #22
    2764:	19024201 	stmdbne	r2, {r0, r9, lr}
    2768:	000001f6 	strdeq	r0, [r0], -r6
    276c:	00000a7f 	andeq	r0, r0, pc, ror sl
    2770:	0100732b 	tsteq	r0, fp, lsr #6
    2774:	0e280242 	cdpeq	2, 2, cr0, cr8, cr2, {2}
    2778:	92000007 	andls	r0, r0, #7
    277c:	0000000a 	andeq	r0, r0, sl
    2780:	0adf012c 	beq	ff7c2c38 <_estack+0xdf7bdc38>
    2784:	39010000 	stmdbcc	r1, {}	; <UNPREDICTABLE>
    2788:	8d010502 	cfstr32hi	mvfx0, [r1, #-8]
    278c:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    2790:	76000011 			; <UNDEFINED> instruction: 0x76000011
    2794:	01000011 	tsteq	r0, r1, lsl r0
    2798:	000b999c 	muleq	fp, ip, r9
    279c:	00732b00 	rsbseq	r2, r3, r0, lsl #22
    27a0:	1e023901 	vmlane.f16	s6, s4, s2	; <UNPREDICTABLE>
    27a4:	0000070e 	andeq	r0, r0, lr, lsl #14
    27a8:	00000ab0 			; <UNDEFINED> instruction: 0x00000ab0
    27ac:	01006922 	tsteq	r0, r2, lsr #18
    27b0:	8d06023b 	sfmhi	f0, 4, [r6, #-236]	; 0xffffff14
    27b4:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    27b8:	0000000a 	andeq	r0, r0, sl
    27bc:	0af8012c 	beq	ffe02c74 <_estack+0xdfdfdc74>
    27c0:	2d010000 	stccs	0, cr0, [r1, #-0]
    27c4:	d9010602 	stmdble	r1, {r1, r9, sl}
	...
    27d0:	01000000 	mrseq	r0, (UNDEF: 0)
    27d4:	000be69c 	muleq	fp, ip, r6
    27d8:	75662b00 	strbvc	r2, [r6, #-2816]!	; 0xfffff500
    27dc:	2d01006e 	stccs	0, cr0, [r1, #-440]	; 0xfffffe48
    27e0:	02f11802 	rscseq	r1, r1, #131072	; 0x20000
    27e4:	0ae10000 	beq	ff8427ec <_estack+0xdf83d7ec>
    27e8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    27ec:	022f0100 	eoreq	r0, pc, #0, 2
    27f0:	0004160e 	andeq	r1, r4, lr, lsl #12
    27f4:	000aff00 	andeq	pc, sl, r0, lsl #30
    27f8:	00632200 	rsbeq	r2, r3, r0, lsl #4
    27fc:	07023001 	streq	r3, [r2, -r1]
    2800:	000000d9 	ldrdeq	r0, [r0], -r9
    2804:	00000b1d 	andeq	r0, r0, sp, lsl fp
    2808:	f9012c00 			; <UNDEFINED> instruction: 0xf9012c00
    280c:	0100000a 	tsteq	r0, sl
    2810:	0107021f 	tsteq	r7, pc, lsl r2
    2814:	0000011d 	andeq	r0, r0, sp, lsl r1
    2818:	00001144 	andeq	r1, r0, r4, asr #2
    281c:	00001168 	andeq	r1, r0, r8, ror #2
    2820:	0c229c01 	stceq	12, cr9, [r2], #-4
    2824:	662b0000 	strtvs	r0, [fp], -r0
    2828:	01006e75 	tsteq	r0, r5, ror lr
    282c:	f118021f 			; <UNDEFINED> instruction: 0xf118021f
    2830:	30000002 	andcc	r0, r0, r2
    2834:	2300000b 	movwcs	r0, #11
    2838:	21010069 	tstcs	r1, r9, rrx
    283c:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    2840:	50010000 	andpl	r0, r1, r0
    2844:	ea012c00 	b	4d84c <__ccfg+0x2d8a4>
    2848:	0100000b 	tsteq	r0, fp
    284c:	01090213 	tsteq	r9, r3, lsl r2
    2850:	000002f1 	strdeq	r0, [r0], -r1
	...
    285c:	0c609c01 	stcleq	12, cr9, [r0], #-4
    2860:	702b0000 	eorvc	r0, fp, r0
    2864:	01006469 	tsteq	r0, r9, ror #8
    2868:	1d180213 	lfmne	f0, 4, [r8, #-76]	; 0xffffffb4
    286c:	59000001 	stmdbpl	r0, {r0}
    2870:	2200000b 	andcs	r0, r0, #11
    2874:	15010069 	strne	r0, [r1, #-105]	; 0xffffff97
    2878:	04160e02 	ldreq	r0, [r6], #-3586	; 0xfffff1fe
    287c:	0b770000 	bleq	1dc2884 <__ccfg+0x1da28dc>
    2880:	1f000000 	svcne	0x00000000
    2884:	000bb101 	andeq	fp, fp, r1, lsl #2
    2888:	01f50100 	mvnseq	r0, r0, lsl #2
    288c:	00000106 	andeq	r0, r0, r6, lsl #2
    2890:	00000000 	andeq	r0, r0, r0
    2894:	9c010000 	stcls	0, cr0, [r1], {-0}
    2898:	00000cc9 	andeq	r0, r0, r9, asr #25
    289c:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    28a0:	01f50100 	mvnseq	r0, r0, lsl #2
    28a4:	0002f117 	andeq	pc, r2, r7, lsl r1	; <UNPREDICTABLE>
    28a8:	000b9500 	andeq	r9, fp, r0, lsl #10
    28ac:	65722200 	ldrbvs	r2, [r2, #-512]!	; 0xfffffe00
    28b0:	f901006c 			; <UNDEFINED> instruction: 0xf901006c
    28b4:	00cd0a01 	sbceq	r0, sp, r1, lsl #20
    28b8:	0bb30000 	bleq	fecc28c0 <_estack+0xdecbd8c0>
    28bc:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    28c0:	01fa0100 	mvnseq	r0, r0, lsl #2
    28c4:	0004160e 	andeq	r1, r4, lr, lsl #12
    28c8:	000bc600 	andeq	ip, fp, r0, lsl #12
    28cc:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    28d0:	1201fa01 	andne	pc, r1, #4096	; 0x1000
    28d4:	00000416 	andeq	r0, r0, r6, lsl r4
    28d8:	00000bfa 	strdeq	r0, [r0], -sl
    28dc:	01006b22 	tsteq	r0, r2, lsr #22
    28e0:	161601fa 			; <UNDEFINED> instruction: 0x161601fa
    28e4:	18000004 	stmdane	r0, {r2}
    28e8:	0000000c 	andeq	r0, r0, ip
    28ec:	0a5e011f 	beq	1782d70 <__ccfg+0x1762dc8>
    28f0:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    28f4:	e4010601 	str	r0, [r1], #-1537	; 0xfffff9ff
    28f8:	34000012 	strcc	r0, [r0], #-18	; 0xffffffee
    28fc:	01000013 	tsteq	r0, r3, lsl r0
    2900:	000d0e9c 	muleq	sp, ip, lr
    2904:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    2908:	d9010064 	stmdble	r1, {r2, r5, r6}
    290c:	011d1201 	tsteq	sp, r1, lsl #4
    2910:	0c360000 	ldceq	0, cr0, [r6], #-0
    2914:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    2918:	01dd0100 	bicseq	r0, sp, r0, lsl #2
    291c:	0004160e 	andeq	r1, r4, lr, lsl #12
    2920:	000c6a00 	andeq	r6, ip, r0, lsl #20
    2924:	006a2400 	rsbeq	r2, sl, r0, lsl #8
    2928:	1201dd01 	andne	sp, r1, #1, 26	; 0x40
    292c:	00000416 	andeq	r0, r0, r6, lsl r4
    2930:	0a222a00 	beq	88d138 <__ccfg+0x86d190>
    2934:	c4010000 	strgt	r0, [r1], #-0
    2938:	bc010d01 	stclt	13, cr0, [r1], {1}
    293c:	f800000e 			; <UNDEFINED> instruction: 0xf800000e
    2940:	0100000e 	tsteq	r0, lr
    2944:	000d639c 	muleq	sp, ip, r3
    2948:	69703200 	ldmdbvs	r0!, {r9, ip, sp}^
    294c:	c4010064 	strgt	r0, [r1], #-100	; 0xffffff9c
    2950:	04162101 	ldreq	r2, [r6], #-257	; 0xfffffeff
    2954:	50010000 	andpl	r0, r1, r0
    2958:	000c1f2d 	andeq	r1, ip, sp, lsr #30
    295c:	01c80100 	biceq	r0, r8, r0, lsl #2
    2960:	00011d08 	andeq	r1, r1, r8, lsl #26
    2964:	000c9300 	andeq	r9, ip, r0, lsl #6
    2968:	006a2200 	rsbeq	r2, sl, r0, lsl #4
    296c:	0601c901 	streq	ip, [r1], -r1, lsl #18
    2970:	0000008d 	andeq	r0, r0, sp, lsl #1
    2974:	00000ca6 	andeq	r0, r0, r6, lsr #25
    2978:	01006923 	tsteq	r0, r3, lsr #18
    297c:	160e01ca 	strne	r0, [lr], -sl, asr #3
    2980:	01000004 	tsteq	r0, r4
    2984:	012c0052 	qsubeq	r0, r2, ip
    2988:	00000bf2 	strdeq	r0, [r0], -r2
    298c:	0601b301 	streq	fp, [r1], -r1, lsl #6
    2990:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    299c:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    29a0:	2b00000d 	blcs	29dc <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x18>
    29a4:	00646970 	rsbeq	r6, r4, r0, ror r9
    29a8:	1301b301 	movwne	fp, #4865	; 0x1301
    29ac:	0000011d 	andeq	r0, r0, sp, lsl r1
    29b0:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    29b4:	01006922 	tsteq	r0, r2, lsr #18
    29b8:	160e01b5 			; <UNDEFINED> instruction: 0x160e01b5
    29bc:	d7000004 	strle	r0, [r0, -r4]
    29c0:	0000000c 	andeq	r0, r0, ip
    29c4:	0a410133 	beq	1042e98 <__ccfg+0x1022ef0>
    29c8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    29cc:	00010601 	andeq	r0, r1, r1, lsl #12
    29d0:	00000000 	andeq	r0, r0, r0
    29d4:	01000000 	mrseq	r0, (UNDEF: 0)
    29d8:	a9011f9c 	stmdbge	r1, {r2, r3, r4, r7, r8, r9, sl, fp, ip}
    29dc:	01000018 	tsteq	r0, r8, lsl r0
    29e0:	0106019a 			; <UNDEFINED> instruction: 0x0106019a
    29e4:	0000110c 	andeq	r1, r0, ip, lsl #2
    29e8:	00001144 	andeq	r1, r0, r4, asr #2
    29ec:	0df09c01 	ldcleq	12, cr9, [r0, #4]!
    29f0:	642b0000 	strtvs	r0, [fp], #-0
    29f4:	019a0100 	orrseq	r0, sl, r0, lsl #2
    29f8:	0000d912 	andeq	sp, r0, r2, lsl r9
    29fc:	000cf500 	andeq	pc, ip, r0, lsl #10
    2a00:	0b8f2000 	bleq	fe3caa08 <_estack+0xde3c5a08>
    2a04:	9a010000 	bls	42a0c <__ccfg+0x22a64>
    2a08:	00d91a01 	sbcseq	r1, r9, r1, lsl #20
    2a0c:	0d080000 	stceq	0, cr0, [r8, #-0]
    2a10:	2c000000 	stccs	0, cr0, [r0], {-0}
    2a14:	000c5401 	andeq	r5, ip, r1, lsl #8
    2a18:	01880100 	orreq	r0, r8, r0, lsl #2
    2a1c:	011d0107 	tsteq	sp, r7, lsl #2
    2a20:	10e80000 	rscne	r0, r8, r0
    2a24:	110c0000 	mrsne	r0, (UNDEF: 12)
    2a28:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a2c:	00000e3e 	andeq	r0, r0, lr, lsr lr
    2a30:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2a34:	01880100 	orreq	r0, r8, r0, lsl #2
    2a38:	00011d18 	andeq	r1, r1, r8, lsl sp
    2a3c:	000d1b00 	andeq	r1, sp, r0, lsl #22
    2a40:	74732b00 	ldrbtvc	r2, [r3], #-2816	; 0xfffff500
    2a44:	01880100 	orreq	r0, r8, r0, lsl #2
    2a48:	0000d922 	andeq	sp, r0, r2, lsr #18
    2a4c:	000d4400 	andeq	r4, sp, r0, lsl #8
    2a50:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2a54:	0e018a01 	vmlaeq.f32	s16, s2, s2
    2a58:	00000416 	andeq	r0, r0, r6, lsl r4
    2a5c:	00000d62 	andeq	r0, r0, r2, ror #26
    2a60:	1a011f00 	bne	4a668 <__ccfg+0x2a6c0>
    2a64:	0100000b 	tsteq	r0, fp
    2a68:	01060178 	tsteq	r6, r8, ror r1
	...
    2a74:	0e969c01 	cdpeq	12, 9, cr9, cr6, cr1, {0}
    2a78:	702b0000 	eorvc	r0, fp, r0
    2a7c:	01006469 	tsteq	r0, r9, ror #8
    2a80:	1d1b0178 	ldfnes	f0, [fp, #-480]	; 0xfffffe20
    2a84:	80000001 	andhi	r0, r0, r1
    2a88:	2000000d 	andcs	r0, r0, sp
    2a8c:	00000b81 	andeq	r0, r0, r1, lsl #23
    2a90:	26017801 	strcs	r7, [r1], -r1, lsl #16
    2a94:	0000011d 	andeq	r0, r0, sp, lsl r1
    2a98:	00000d93 	muleq	r0, r3, sp
    2a9c:	01006923 	tsteq	r0, r3, lsr #18
    2aa0:	160e017c 			; <UNDEFINED> instruction: 0x160e017c
    2aa4:	01000004 	tsteq	r0, r4
    2aa8:	006a2250 	rsbeq	r2, sl, r0, asr r2
    2aac:	07017d01 	streq	r7, [r1, -r1, lsl #26]
    2ab0:	0000008d 	andeq	r0, r0, sp, lsl #1
    2ab4:	00000db1 			; <UNDEFINED> instruction: 0x00000db1
    2ab8:	d2011f00 	andle	r1, r1, #0, 30
    2abc:	0100000a 	tsteq	r0, sl
    2ac0:	01060166 	tsteq	r6, r6, ror #2
    2ac4:	000010b4 	strheq	r1, [r0], -r4
    2ac8:	000010e8 	andeq	r1, r0, r8, ror #1
    2acc:	0edb9c01 	cdpeq	12, 13, cr9, cr11, cr1, {0}
    2ad0:	81340000 	teqhi	r4, r0
    2ad4:	0100000b 	tsteq	r0, fp
    2ad8:	1d1a0166 	ldfnes	f0, [sl, #-408]	; 0xfffffe68
    2adc:	01000001 	tsteq	r0, r1
    2ae0:	006a2250 	rsbeq	r2, sl, r0, asr r2
    2ae4:	06016a01 	streq	r6, [r1], -r1, lsl #20
    2ae8:	0000008d 	andeq	r0, r0, sp, lsl #1
    2aec:	00000dcf 	andeq	r0, r0, pc, asr #27
    2af0:	01006923 	tsteq	r0, r3, lsr #18
    2af4:	160e016b 	strne	r0, [lr], -fp, ror #2
    2af8:	01000004 	tsteq	r0, r4
    2afc:	012e0052 	qsubeq	r0, r2, lr
    2b00:	00000b95 	muleq	r0, r5, fp
    2b04:	06015901 	streq	r5, [r1], -r1, lsl #18
    2b08:	0f110101 	svceq	0x00110101
    2b0c:	81350000 	teqhi	r5, r0
    2b10:	0100000b 	tsteq	r0, fp
    2b14:	1d170159 	ldfnes	f0, [r7, #-356]	; 0xfffffe9c
    2b18:	35000001 	strcc	r0, [r0, #-1]
    2b1c:	00000b8f 	andeq	r0, r0, pc, lsl #23
    2b20:	23015901 	movwcs	r5, #6401	; 0x1901
    2b24:	000000d9 	ldrdeq	r0, [r0], -r9
    2b28:	01006a24 	tsteq	r0, r4, lsr #20
    2b2c:	ef07015d 	svc	0x0007015d
    2b30:	00000000 	andeq	r0, r0, r0
    2b34:	0b0d011f 	bleq	342fb8 <__ccfg+0x323010>
    2b38:	53010000 	movwpl	r0, #4096	; 0x1000
    2b3c:	6c010601 	stcvs	6, cr0, [r1], {1}
    2b40:	80000010 	andhi	r0, r0, r0, lsl r0
    2b44:	01000010 	tsteq	r0, r0, lsl r0
    2b48:	000f3c9c 	muleq	pc, ip, ip	; <UNPREDICTABLE>
    2b4c:	0b8f2000 	bleq	fe3cab54 <_estack+0xde3c5b54>
    2b50:	53010000 	movwpl	r0, #4096	; 0x1000
    2b54:	00d91401 	sbcseq	r1, r9, r1, lsl #8
    2b58:	0de20000 	stcleq	0, cr0, [r2]
    2b5c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2b60:	000a5401 	andeq	r5, sl, r1, lsl #8
    2b64:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    2b68:	011d0107 	tsteq	sp, r7, lsl #2
    2b6c:	13dc0000 	bicsne	r0, ip, #0
    2b70:	14100000 	ldrne	r0, [r0], #-0
    2b74:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b78:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    2b7c:	000b2e20 	andeq	r2, fp, r0, lsr #28
    2b80:	012c0100 			; <UNDEFINED> instruction: 0x012c0100
    2b84:	0002f11a 	andeq	pc, r2, sl, lsl r1	; <UNPREDICTABLE>
    2b88:	000df500 	andeq	pc, sp, r0, lsl #10
    2b8c:	0f4d2000 	svceq	0x004d2000
    2b90:	2c010000 	stccs	0, cr0, [r1], {-0}
    2b94:	011d2601 	tsteq	sp, r1, lsl #12
    2b98:	0e130000 	cdpeq	0, 1, cr0, cr3, cr0, {0}
    2b9c:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2ba0:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
    2ba4:	0004160e 	andeq	r1, r4, lr, lsl #12
    2ba8:	36500100 	ldrbcc	r0, [r0], -r0, lsl #2
    2bac:	00000628 	andeq	r0, r0, r8, lsr #12
    2bb0:	01006a22 	tsteq	r0, r2, lsr #20
    2bb4:	160f013d 			; <UNDEFINED> instruction: 0x160f013d
    2bb8:	31000004 	tstcc	r0, r4
    2bbc:	0000000e 	andeq	r0, r0, lr
    2bc0:	d2013700 	andle	r3, r1, #0, 14
    2bc4:	0100000b 	tsteq	r0, fp
    2bc8:	010106af 	smlatbeq	r1, pc, r6, r0	; <UNPREDICTABLE>
    2bcc:	00000fe3 	andeq	r0, r0, r3, ror #31
    2bd0:	6e696d38 	mcrvs	13, 3, r6, cr9, cr8, {1}
    2bd4:	1aaf0100 	bne	febc2fdc <_estack+0xdebbdfdc>
    2bd8:	000000d9 	ldrdeq	r0, [r0], -r9
    2bdc:	0007cf39 	andeq	ip, r7, r9, lsr pc
    2be0:	27af0100 	strcs	r0, [pc, r0, lsl #2]!
    2be4:	000000cd 	andeq	r0, r0, sp, asr #1
    2be8:	0100693a 	tsteq	r0, sl, lsr r9
    2bec:	04160ebd 	ldreq	r0, [r6], #-3773	; 0xfffff143
    2bf0:	643a0000 	ldrtvs	r0, [sl], #-0
    2bf4:	07be0100 	ldreq	r0, [lr, r0, lsl #2]!
    2bf8:	000000d9 	ldrdeq	r0, [r0], -r9
    2bfc:	4b4f4d3b 	blmi	13d60f0 <__ccfg+0x13b6148>
    2c00:	01090100 	mrseq	r0, (UNDEF: 25)
    2c04:	013c0001 	teqeq	ip, r1
    2c08:	00000c0f 	andeq	r0, r0, pc, lsl #24
    2c0c:	0106a701 	tsteq	r6, r1, lsl #14
	...
    2c18:	10189c01 	andsne	r9, r8, r1, lsl #24
    2c1c:	743d0000 	ldrtvc	r0, [sp], #-0
    2c20:	1fa70100 	svcne	0x00a70100
    2c24:	00000129 	andeq	r0, r0, r9, lsr #2
    2c28:	00000e5a 	andeq	r0, r0, sl, asr lr
    2c2c:	0100763d 	tsteq	r0, sp, lsr r6
    2c30:	00d927a7 	sbcseq	r2, r9, r7, lsr #15
    2c34:	0e6d0000 	cdpeq	0, 6, cr0, cr13, cr0, {0}
    2c38:	3c000000 	stccc	0, cr0, [r0], {-0}
    2c3c:	000c5e01 	andeq	r5, ip, r1, lsl #28
    2c40:	068f0100 	streq	r0, [pc], r0, lsl #2
    2c44:	00000001 	andeq	r0, r0, r1
    2c48:	00000000 	andeq	r0, r0, r0
    2c4c:	4e9c0100 	fmlmie	f0, f4, f0
    2c50:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2c54:	01007475 	tsteq	r0, r5, ror r4
    2c58:	01291d8f 	smlawbeq	r9, pc, sp, r1	; <UNPREDICTABLE>
    2c5c:	0e800000 	cdpeq	0, 8, cr0, cr0, cr0, {0}
    2c60:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    2c64:	06930100 	ldreq	r0, [r3], r0, lsl #2
    2c68:	0000008d 	andeq	r0, r0, sp, lsl #1
    2c6c:	00000e9e 	muleq	r0, lr, lr
    2c70:	74013c00 	strvc	r3, [r1], #-3072	; 0xfffff400
    2c74:	0100000a 	tsteq	r0, sl
    2c78:	0001067f 	andeq	r0, r1, pc, ror r6
    2c7c:	00000000 	andeq	r0, r0, r0
    2c80:	01000000 	mrseq	r0, (UNDEF: 0)
    2c84:	0010849c 	mulseq	r0, ip, r4
    2c88:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    2c8c:	1a7f0100 	bne	1fc3094 <__ccfg+0x1fa30ec>
    2c90:	00000129 	andeq	r0, r0, r9, lsr #2
    2c94:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
    2c98:	0100693e 	tsteq	r0, lr, lsr r9
    2c9c:	008d0683 	addeq	r0, sp, r3, lsl #13
    2ca0:	0ee50000 	cdpeq	0, 14, cr0, cr5, cr0, {0}
    2ca4:	3f000000 	svccc	0x00000000
    2ca8:	000b8701 	andeq	r8, fp, r1, lsl #14
    2cac:	067b0100 	ldrbteq	r0, [fp], -r0, lsl #2
    2cb0:	000f9001 	andeq	r9, pc, r1
    2cb4:	000fa000 	andeq	sl, pc, r0
    2cb8:	409c0100 	addsmi	r0, ip, r0, lsl #2
    2cbc:	00000b33 	andeq	r0, r0, r3, lsr fp
    2cc0:	01145f01 	tsteq	r4, r1, lsl #30
    2cc4:	00000416 	andeq	r0, r0, r6, lsl r4
    2cc8:	0010c101 	andseq	ip, r0, r1, lsl #2
    2ccc:	69703800 	ldmdbvs	r0!, {fp, ip, sp}^
    2cd0:	5f010064 	svcpl	0x00010064
    2cd4:	00011d22 	andeq	r1, r1, r2, lsr #26
    2cd8:	00693a00 	rsbeq	r3, r9, r0, lsl #20
    2cdc:	16176101 	ldrne	r6, [r7], -r1, lsl #2
    2ce0:	00000004 	andeq	r0, r0, r4
    2ce4:	000a7f41 	andeq	r7, sl, r1, asr #30
    2ce8:	029e0200 	addseq	r0, lr, #0, 4
    2cec:	10e20101 	rscne	r0, r2, r1, lsl #2
    2cf0:	e2030000 	and	r0, r3, #0
    2cf4:	35000010 	strcc	r0, [r0, #-16]
    2cf8:	0000073f 	andeq	r0, r0, pc, lsr r7
    2cfc:	13029e02 	movwne	r9, #11778	; 0x2e02
    2d00:	00000073 	andeq	r0, r0, r3, ror r0
    2d04:	02010200 	andeq	r0, r1, #0, 4
    2d08:	00000bc6 	andeq	r0, r0, r6, asr #23
    2d0c:	00109842 	andseq	r9, r0, r2, asr #16
	...
    2d18:	2e9c0100 	fmlcse	f0, f4, f0
    2d1c:	43000011 	movwmi	r0, #17
    2d20:	000010aa 	andeq	r1, r0, sl, lsr #1
    2d24:	00000f03 	andeq	r0, r0, r3, lsl #30
    2d28:	0010b644 	andseq	fp, r0, r4, asr #12
    2d2c:	000f2c00 	andeq	r2, pc, r0, lsl #24
    2d30:	10984500 	addsne	r4, r8, r0, lsl #10
	...
    2d3c:	5f010000 	svcpl	0x00010000
    2d40:	10aa4314 	adcne	r4, sl, r4, lsl r3
    2d44:	0f4a0000 	svceq	0x004a0000
    2d48:	b6460000 	strblt	r0, [r6], -r0
    2d4c:	00000010 	andeq	r0, r0, r0, lsl r0
    2d50:	0f9e4200 	svceq	0x009e4200
    2d54:	0fa00000 	svceq	0x00a00000
    2d58:	106c0000 	rsbne	r0, ip, r0
    2d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2d60:	0000119a 	muleq	r0, sl, r1
    2d64:	000fad43 	andeq	sl, pc, r3, asr #26
    2d68:	000f5d00 	andeq	r5, pc, r0, lsl #26
    2d6c:	0fb94300 	svceq	0x00b94300
    2d70:	0f700000 	svceq	0x00700000
    2d74:	c5460000 	strbgt	r0, [r6, #-0]
    2d78:	4600000f 	strmi	r0, [r0], -pc
    2d7c:	00000fcf 	andeq	r0, r0, pc, asr #31
    2d80:	000f9e47 	andeq	r9, pc, r7, asr #28
    2d84:	000fae00 	andeq	sl, pc, r0, lsl #28
    2d88:	00061000 	andeq	r1, r6, r0
    2d8c:	06af0100 	strteq	r0, [pc], r0, lsl #2
    2d90:	000fb929 	andeq	fp, pc, r9, lsr #18
    2d94:	0fad4300 	svceq	0x00ad4300
    2d98:	0f830000 	svceq	0x00830000
    2d9c:	10360000 	eorsne	r0, r6, r0
    2da0:	44000006 	strmi	r0, [r0], #-6
    2da4:	00000fc5 	andeq	r0, r0, r5, asr #31
    2da8:	00000fac 	andeq	r0, r0, ip, lsr #31
    2dac:	000fcf46 	andeq	ip, pc, r6, asr #30
    2db0:	0fd94800 	svceq	0x00d94800
    2db4:	104a0000 	subne	r0, sl, r0
    2db8:	00000000 	andeq	r0, r0, r0
    2dbc:	0edb4200 	cdpeq	2, 13, cr4, cr11, cr0, {0}
    2dc0:	10800000 	addne	r0, r0, r0
    2dc4:	10b40000 	adcsne	r0, r4, r0
    2dc8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dcc:	000011ee 	andeq	r1, r0, lr, ror #3
    2dd0:	000eeb43 	andeq	lr, lr, r3, asr #22
    2dd4:	000fca00 	andeq	ip, pc, r0, lsl #20
    2dd8:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    2ddc:	0fe80000 	svceq	0x00e80000
    2de0:	05460000 	strbeq	r0, [r6, #-0]
    2de4:	4900000f 	stmdbmi	r0, {r0, r1, r2, r3}
    2de8:	00000edb 	ldrdeq	r0, [r0], -fp
    2dec:	00001092 	muleq	r0, r2, r0
    2df0:	0000109a 	muleq	r0, sl, r0
    2df4:	06015901 	streq	r5, [r1], -r1, lsl #18
    2df8:	000eeb43 	andeq	lr, lr, r3, asr #22
    2dfc:	00100600 	andseq	r0, r0, r0, lsl #12
    2e00:	0ef84300 	cdpeq	3, 15, cr4, cr8, cr0, {0}
    2e04:	10190000 	andsne	r0, r9, r0
    2e08:	05460000 	strbeq	r0, [r6, #-0]
    2e0c:	0000000f 	andeq	r0, r0, pc
    2e10:	08804a00 	stmeq	r0, {r9, fp, lr}
    2e14:	129c0000 	addsne	r0, ip, #0
    2e18:	12e40000 	rscne	r0, r4, #0
    2e1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e20:	00089043 	andeq	r9, r8, r3, asr #32
    2e24:	00102c00 	andseq	r2, r0, r0, lsl #24
    2e28:	08804900 	stmeq	r0, {r8, fp, lr}
    2e2c:	12a80000 	adcne	r0, r8, #0
    2e30:	12b00000 	adcsne	r0, r0, #0
    2e34:	7c010000 	stcvc	0, cr0, [r1], {-0}
    2e38:	90430603 	subls	r0, r3, r3, lsl #12
    2e3c:	4a000008 	bmi	2e64 <__exidx_end+0x6c>
    2e40:	00000010 	andeq	r0, r0, r0, lsl r0
    2e44:	13330000 	teqne	r3, #0
    2e48:	00030000 	andeq	r0, r3, r0
    2e4c:	00000c2d 	andeq	r0, r0, sp, lsr #24
    2e50:	012f0104 			; <UNDEFINED> instruction: 0x012f0104
    2e54:	ad0c0000 	stcge	0, cr0, [ip, #-0]
    2e58:	8000000c 	andhi	r0, r0, ip
    2e5c:	18000003 	stmdane	r0, {r0, r1}
    2e60:	00000008 	andeq	r0, r0, r8
    2e64:	30000000 	andcc	r0, r0, r0
    2e68:	02000029 	andeq	r0, r0, #41	; 0x29
    2e6c:	03740601 	cmneq	r4, #1048576	; 0x100000
    2e70:	02020000 	andeq	r0, r2, #0
    2e74:	0003d005 	andeq	sp, r3, r5
    2e78:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2e7c:	000000a4 	andeq	r0, r0, r4, lsr #1
    2e80:	9f050802 	svcls	0x00050802
    2e84:	03000000 	movweq	r0, #0
    2e88:	0000220a 	andeq	r2, r0, sl, lsl #4
    2e8c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    2e90:	02000000 	andeq	r0, r0, #0
    2e94:	03720801 	cmneq	r2, #65536	; 0x10000
    2e98:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    2e9c:	02000020 	andeq	r0, r0, #32
    2ea0:	00601931 	rsbeq	r1, r0, r1, lsr r9
    2ea4:	02020000 	andeq	r0, r2, #0
    2ea8:	00023007 	andeq	r3, r2, r7
    2eac:	17c10300 	strbne	r0, [r1, r0, lsl #6]
    2eb0:	34020000 	strcc	r0, [r2], #-0
    2eb4:	00007319 	andeq	r7, r0, r9, lsl r3
    2eb8:	07040200 	streq	r0, [r4, -r0, lsl #4]
    2ebc:	00000079 	andeq	r0, r0, r9, ror r0
    2ec0:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    2ec4:	04000000 	streq	r0, [r0], #-0
    2ec8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2ecc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    2ed0:	00007e07 	andeq	r7, r0, r7, lsl #28
    2ed4:	0b540300 	bleq	1503adc <__ccfg+0x14e3b34>
    2ed8:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2edc:	00009b1b 	andeq	r9, r0, fp, lsl fp
    2ee0:	0a6a0500 	beq	1a842e8 <__ccfg+0x1a64340>
    2ee4:	0d040000 	stceq	0, cr0, [r4, #-0]
    2ee8:	0000b300 	andeq	fp, r0, r0, lsl #6
    2eec:	0c0a0600 	stceq	6, cr0, [sl], {-0}
    2ef0:	00b30000 	adcseq	r0, r3, r0
    2ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    2ef8:	03040700 	movweq	r0, #18176	; 0x4700
    2efc:	00000a6c 	andeq	r0, r0, ip, ror #20
    2f00:	8f186303 	svchi	0x00186303
    2f04:	03000000 	movweq	r0, #0
    2f08:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2f0c:	41122604 	tstmi	r2, r4, lsl #12
    2f10:	03000000 	movweq	r0, #0
    2f14:	000015ce 	andeq	r1, r0, lr, asr #11
    2f18:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    2f1c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f20:	000000cd 	andeq	r0, r0, sp, asr #1
    2f24:	0000cd09 	andeq	ip, r0, r9, lsl #26
    2f28:	13c60300 	bicne	r0, r6, #0, 6
    2f2c:	2b040000 	blcs	102f34 <__ccfg+0xe2f8c>
    2f30:	00004112 	andeq	r4, r0, r2, lsl r1
    2f34:	00e30900 	rsceq	r0, r3, r0, lsl #18
    2f38:	e3080000 	movw	r0, #32768	; 0x8000
    2f3c:	03000000 	movweq	r0, #0
    2f40:	0000161f 	andeq	r1, r0, pc, lsl r6
    2f44:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    2f48:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2f4c:	000000f9 	strdeq	r0, [r0], -r9
    2f50:	00026303 	andeq	r6, r2, r3, lsl #6
    2f54:	122d0400 	eorne	r0, sp, #0, 8
    2f58:	00000067 	andeq	r0, r0, r7, rrx
    2f5c:	00077003 	andeq	r7, r7, r3
    2f60:	102e0400 	eorne	r0, lr, r0, lsl #8
    2f64:	00000122 	andeq	r0, r0, r2, lsr #2
    2f68:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    2f6c:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    2f70:	b6093204 	strlt	r3, [r9], -r4, lsl #4
    2f74:	0c000001 	stceq	0, cr0, [r0], {1}
    2f78:	0000027e 	andeq	r0, r0, lr, ror r2
    2f7c:	e3073404 	movw	r3, #29700	; 0x7404
    2f80:	01000000 	mrseq	r0, (UNDEF: 0)
    2f84:	0c000701 	stceq	7, cr0, [r0], {1}
    2f88:	00000098 	muleq	r0, r8, r0
    2f8c:	e3033504 	movw	r3, #13572	; 0x3504
    2f90:	01000000 	mrseq	r0, (UNDEF: 0)
    2f94:	0c000601 	stceq	6, cr0, [r0], {1}
    2f98:	0000024c 	andeq	r0, r0, ip, asr #4
    2f9c:	e3033604 	movw	r3, #13828	; 0x3604
    2fa0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fa4:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    2fa8:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    2fac:	e3033704 	movw	r3, #14084	; 0x3704
    2fb0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fb4:	0c000401 	cfstrseq	mvf0, [r0], {1}
    2fb8:	000003f8 	strdeq	r0, [r0], -r8
    2fbc:	e3033804 	movw	r3, #14340	; 0x3804
    2fc0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fc4:	0d000004 	stceq	0, cr0, [r0, #-16]
    2fc8:	000003e9 	andeq	r0, r0, r9, ror #7
    2fcc:	e3073a04 	movw	r3, #31236	; 0x7a04
    2fd0:	01000000 	mrseq	r0, (UNDEF: 0)
    2fd4:	0000400d 	andeq	r4, r0, sp
    2fd8:	033c0400 	teqeq	ip, #0, 8
    2fdc:	000000e3 	andeq	r0, r0, r3, ror #1
    2fe0:	006d0d02 	rsbeq	r0, sp, r2, lsl #26
    2fe4:	3d040000 	stccc	0, cr0, [r4, #-0]
    2fe8:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fec:	1e0d0300 	cdpne	3, 0, cr0, cr13, cr0, {0}
    2ff0:	04000001 	streq	r0, [r0], #-1
    2ff4:	00f9083f 	rscseq	r0, r9, pc, lsr r8
    2ff8:	00040000 	andeq	r0, r4, r0
    2ffc:	00042803 	andeq	r2, r4, r3, lsl #16
    3000:	03410400 	movteq	r0, #5120	; 0x1400
    3004:	00000128 	andeq	r0, r0, r8, lsr #2
    3008:	0001b609 	andeq	fp, r1, r9, lsl #12
    300c:	02720e00 	rsbseq	r0, r2, #0, 28
    3010:	43040000 	movwmi	r0, #16384	; 0x4000
    3014:	0001c21a 	andeq	ip, r1, sl, lsl r2
    3018:	0e010100 	adfeqs	f0, f1, f0
    301c:	000002de 	ldrdeq	r0, [r0], -lr
    3020:	e30e4504 	movw	r4, #58628	; 0xe504
    3024:	01000001 	tsteq	r0, r1
    3028:	e9040a01 	stmdb	r4, {r0, r9, fp}
    302c:	02000001 	andeq	r0, r0, #1
    3030:	037b0801 	cmneq	fp, #65536	; 0x10000
    3034:	e9080000 	stmdb	r8, {}	; <UNPREDICTABLE>
    3038:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    303c:	000002ec 	andeq	r0, r0, ip, ror #5
    3040:	e31e4504 	tst	lr, #4, 10	; 0x1000000
    3044:	01000001 	tsteq	r0, r1
    3048:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    304c:	0234098f 	eorseq	r0, r4, #2342912	; 0x23c000
    3050:	850d0000 	strhi	r0, [sp, #-0]
    3054:	05000002 	streq	r0, [r0, #-2]
    3058:	00670b90 	mlseq	r7, r0, fp, r0
    305c:	0d000000 	stceq	0, cr0, [r0, #-0]
    3060:	000005fb 	strdeq	r0, [r0], -fp
    3064:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    3068:	04000000 	streq	r0, [r0], #-0
    306c:	00046b0d 	andeq	r6, r4, sp, lsl #22
    3070:	10920500 	addsne	r0, r2, r0, lsl #10
    3074:	000000ef 	andeq	r0, r0, pc, ror #1
    3078:	06030006 	streq	r0, [r3], -r6
    307c:	05000004 	streq	r0, [r0, #-4]
    3080:	02030393 	andeq	r0, r3, #1275068418	; 0x4c000002
    3084:	340f0000 	strcc	r0, [pc], #-0	; 308c <__exidx_end+0x294>
    3088:	4b000002 	blmi	3098 <__exidx_end+0x2a0>
    308c:	10000002 	andne	r0, r0, r2
    3090:	00360e00 	eorseq	r0, r6, r0, lsl #28
    3094:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    3098:	0002400f 	andeq	r4, r2, pc
    309c:	0a010100 	beq	434a4 <__ccfg+0x234fc>
    30a0:	0000f404 	andeq	pc, r0, r4, lsl #8
    30a4:	06010b00 	streq	r0, [r1], -r0, lsl #22
    30a8:	02890991 	addeq	r0, r9, #2375680	; 0x244000
    30ac:	5e0c0000 	cdppl	0, 0, cr0, cr12, cr0, {0}
    30b0:	06000004 	streq	r0, [r0], -r4
    30b4:	00e30793 	smlaleq	r0, r3, r3, r7
    30b8:	07010000 	streq	r0, [r1, -r0]
    30bc:	310c0001 	tstcc	ip, r1
    30c0:	06000000 	streq	r0, [r0], -r0
    30c4:	00e30394 	smlaleq	r0, r3, r4, r3
    30c8:	01010000 	mrseq	r0, (UNDEF: 1)
    30cc:	03000000 	movweq	r0, #0
    30d0:	00000243 	andeq	r0, r0, r3, asr #4
    30d4:	5f039606 	svcpl	0x00039606
    30d8:	08000002 	stmdaeq	r0, {r1}
    30dc:	00000289 	andeq	r0, r0, r9, lsl #5
    30e0:	0002950f 	andeq	r9, r2, pc, lsl #10
    30e4:	0002a500 	andeq	sl, r2, r0, lsl #10
    30e8:	08001000 	stmdaeq	r0, {ip}
    30ec:	0000029a 	muleq	r0, sl, r2
    30f0:	0002a80e 	andeq	sl, r2, lr, lsl #16
    30f4:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    30f8:	000002a5 	andeq	r0, r0, r5, lsr #5
    30fc:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    3100:	c3000000 	movwgt	r0, #0
    3104:	10000002 	andne	r0, r0, r2
    3108:	02b80800 	adcseq	r0, r8, #0, 16
    310c:	640e0000 	strvs	r0, [lr], #-0
    3110:	07000003 	streq	r0, [r0, -r3]
    3114:	02c31306 	sbceq	r1, r3, #402653184	; 0x18000000
    3118:	01010000 	mrseq	r0, (UNDEF: 1)
    311c:	0000fe0e 	andeq	pc, r0, lr, lsl #28
    3120:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    3124:	000000f9 	strdeq	r0, [r0], -r9
    3128:	78110101 	ldmdavc	r1, {r0, r8}
    312c:	08000004 	stmdaeq	r0, {r2}
    3130:	f110016e 			; <UNDEFINED> instruction: 0xf110016e
    3134:	0a000002 	beq	3144 <__exidx_end+0x34c>
    3138:	0002f704 	andeq	pc, r2, r4, lsl #14
    313c:	03011200 	movweq	r1, #4608	; 0x1200
    3140:	13000003 	movwne	r0, #3
    3144:	000000cd 	andeq	r0, r0, sp, asr #1
    3148:	01f00f00 	mvnseq	r0, r0, lsl #30
    314c:	030e0000 	movweq	r0, #57344	; 0xe000
    3150:	00100000 	andseq	r0, r0, r0
    3154:	00030308 	andeq	r0, r3, r8, lsl #6
    3158:	04381400 	ldrteq	r1, [r8], #-1024	; 0xfffffc00
    315c:	7f080000 	svcvc	0x00080000
    3160:	030e1601 	movweq	r1, #58881	; 0xe601
    3164:	01010000 	mrseq	r0, (UNDEF: 1)
    3168:	00035c14 	andeq	r5, r3, r4, lsl ip
    316c:	01820800 	orreq	r0, r2, r0, lsl #16
    3170:	00010514 	andeq	r0, r1, r4, lsl r5
    3174:	0b010100 	bleq	4357c <__ccfg+0x235d4>
    3178:	09080904 	stmdbeq	r8, {r2, r8, fp}
    317c:	00000355 	andeq	r0, r0, r5, asr r3
    3180:	000ecc0d 	andeq	ip, lr, sp, lsl #24
    3184:	070f0900 	streq	r0, [pc, -r0, lsl #18]
    3188:	000000cd 	andeq	r0, r0, sp, asr #1
    318c:	0e4a0d00 	cdpeq	13, 4, cr0, cr10, cr0, {0}
    3190:	10090000 	andne	r0, r9, r0
    3194:	0000cd03 	andeq	ip, r0, r3, lsl #26
    3198:	03000200 	movweq	r0, #512	; 0x200
    319c:	00000eba 			; <UNDEFINED> instruction: 0x00000eba
    31a0:	31031109 	tstcc	r3, r9, lsl #2
    31a4:	0b000003 	bleq	31b8 <__exidx_end+0x3c0>
    31a8:	09160920 	ldmdbeq	r6, {r5, r8, fp}
    31ac:	000003d3 	ldrdeq	r0, [r0], -r3
    31b0:	000eaa0d 	andeq	sl, lr, sp, lsl #20
    31b4:	08170900 	ldmdaeq	r7, {r8, fp}
    31b8:	000003ed 	andeq	r0, r0, sp, ror #7
    31bc:	0db20d00 	ldceq	13, cr0, [r2]
    31c0:	18090000 	stmdane	r9, {}	; <UNPREDICTABLE>
    31c4:	00040808 	andeq	r0, r4, r8, lsl #16
    31c8:	1a0d0400 	bne	3441d0 <__ccfg+0x324228>
    31cc:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    31d0:	043e0819 	ldrteq	r0, [lr], #-2073	; 0xfffff7e7
    31d4:	0d080000 	stceq	0, cr0, [r8, #-0]
    31d8:	00000e68 	andeq	r0, r0, r8, ror #28
    31dc:	59081a09 	stmdbpl	r8, {r0, r3, r9, fp, ip}
    31e0:	0c000004 	stceq	0, cr0, [r0], {4}
    31e4:	000dd90d 	andeq	sp, sp, sp, lsl #18
    31e8:	081b0900 	ldmdaeq	fp, {r8, fp}
    31ec:	0000046f 	andeq	r0, r0, pc, ror #8
    31f0:	0eb20d10 	mrceq	13, 5, r0, cr2, cr0, {0}
    31f4:	1c090000 	stcne	0, cr0, [r9], {-0}
    31f8:	00046f08 	andeq	r6, r4, r8, lsl #30
    31fc:	f10d1400 			; <UNDEFINED> instruction: 0xf10d1400
    3200:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3204:	046f081d 	strbteq	r0, [pc], #-2077	; 320c <__exidx_end+0x414>
    3208:	0d180000 	ldceq	0, cr0, [r8, #-0]
    320c:	00000d24 	andeq	r0, r0, r4, lsr #26
    3210:	81061e09 	tsthi	r6, r9, lsl #28
    3214:	1c000000 	stcne	0, cr0, [r0], {-0}
    3218:	81011500 	tsthi	r1, r0, lsl #10
    321c:	ed000000 	stc	0, cr0, [r0, #-0]
    3220:	13000003 	movwne	r0, #3
    3224:	00000081 	andeq	r0, r0, r1, lsl #1
    3228:	00008113 	andeq	r8, r0, r3, lsl r1
    322c:	00b51300 	adcseq	r1, r5, r0, lsl #6
    3230:	0a000000 	beq	3238 <__exidx_end+0x440>
    3234:	0003d304 	andeq	sp, r3, r4, lsl #6
    3238:	81011500 	tsthi	r1, r0, lsl #10
    323c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3240:	13000004 	movwne	r0, #4
    3244:	00000081 	andeq	r0, r0, r1, lsl #1
    3248:	00008113 	andeq	r8, r0, r3, lsl r1
    324c:	040a0000 	streq	r0, [sl], #-0
    3250:	000003f3 	strdeq	r0, [r0], -r3
    3254:	00810115 	addeq	r0, r1, r5, lsl r1
    3258:	04320000 	ldrteq	r0, [r2], #-0
    325c:	81130000 	tsthi	r3, r0
    3260:	13000000 	movwne	r0, #0
    3264:	00000116 	andeq	r0, r0, r6, lsl r1
    3268:	00008113 	andeq	r8, r0, r3, lsl r1
    326c:	04321300 	ldrteq	r1, [r2], #-768	; 0xfffffd00
    3270:	38130000 	ldmdacc	r3, {}	; <UNPREDICTABLE>
    3274:	00000004 	andeq	r0, r0, r4
    3278:	0081040a 	addeq	r0, r1, sl, lsl #8
    327c:	040a0000 	streq	r0, [sl], #-0
    3280:	00000355 	andeq	r0, r0, r5, asr r3
    3284:	040e040a 	streq	r0, [lr], #-1034	; 0xfffffbf6
    3288:	01150000 	tsteq	r5, r0
    328c:	00000081 	andeq	r0, r0, r1, lsl #1
    3290:	00000459 	andeq	r0, r0, r9, asr r4
    3294:	00011613 	andeq	r1, r1, r3, lsl r6
    3298:	04381300 	ldrteq	r1, [r8], #-768	; 0xfffffd00
    329c:	0a000000 	beq	32a4 <__exidx_end+0x4ac>
    32a0:	00044404 	andeq	r4, r4, r4, lsl #8
    32a4:	81011500 	tsthi	r1, r0, lsl #10
    32a8:	6f000000 	svcvs	0x00000000
    32ac:	13000004 	movwne	r0, #4
    32b0:	00000116 	andeq	r0, r0, r6, lsl r1
    32b4:	5f040a00 	svcpl	0x00040a00
    32b8:	03000004 	movweq	r0, #4
    32bc:	00000d0f 	andeq	r0, r0, pc, lsl #26
    32c0:	61031f09 	tstvs	r3, r9, lsl #30
    32c4:	08000003 	stmdaeq	r0, {r0, r1}
    32c8:	00000475 	andeq	r0, r0, r5, ror r4
    32cc:	000d6f16 	andeq	r6, sp, r6, lsl pc
    32d0:	24090800 	strcs	r0, [r9], #-2048	; 0xfffff800
    32d4:	0004ae08 	andeq	sl, r4, r8, lsl #28
    32d8:	0d000d00 	stceq	13, cr0, [r0, #-0]
    32dc:	25090000 	strcs	r0, [r9, #-0]
    32e0:	0004ae18 	andeq	sl, r4, r8, lsl lr
    32e4:	830d0000 	movwhi	r0, #53248	; 0xd000
    32e8:	0900000c 	stmdbeq	r0, {r2, r3}
    32ec:	04ae0626 	strteq	r0, [lr], #1574	; 0x626
    32f0:	00040000 	andeq	r0, r4, r0
    32f4:	0486040a 	streq	r0, [r6], #1034	; 0x40a
    32f8:	7d030000 	stcvc	0, cr0, [r3, #-0]
    32fc:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3300:	04861e29 	streq	r1, [r6], #3625	; 0xe29
    3304:	dc030000 	stcle	0, cr0, [r3], {-0}
    3308:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    330c:	04861e2a 	streq	r1, [r6], #3626	; 0xe2a
    3310:	020b0000 	andeq	r0, fp, #0
    3314:	36023f09 	strcc	r3, [r2], -r9, lsl #30
    3318:	0c000005 	stceq	0, cr0, [r0], {5}
    331c:	00000e4f 	andeq	r0, r0, pc, asr #28
    3320:	cd094009 	stcgt	0, cr4, [r9, #-36]	; 0xffffffdc
    3324:	02000000 	andeq	r0, r0, #0
    3328:	0c000f01 	stceq	15, cr0, [r0], {1}
    332c:	00000f2e 	andeq	r0, r0, lr, lsr #30
    3330:	cd044109 	stfgts	f4, [r4, #-36]	; 0xffffffdc
    3334:	02000000 	andeq	r0, r0, #0
    3338:	0c000e01 	stceq	14, cr0, [r0], {1}
    333c:	00000d9f 	muleq	r0, pc, sp	; <UNPREDICTABLE>
    3340:	cd044209 	sfmgt	f4, 4, [r4, #-36]	; 0xffffffdc
    3344:	02000000 	andeq	r0, r0, #0
    3348:	0c000d01 	stceq	13, cr0, [r0], {1}
    334c:	00000e70 	andeq	r0, r0, r0, ror lr
    3350:	cd044309 	stcgt	3, cr4, [r4, #-36]	; 0xffffffdc
    3354:	02000000 	andeq	r0, r0, #0
    3358:	0c000607 	stceq	6, cr0, [r0], {7}
    335c:	00000eea 	andeq	r0, r0, sl, ror #29
    3360:	cd044409 	cfstrsgt	mvf4, [r4, #-36]	; 0xffffffdc
    3364:	02000000 	andeq	r0, r0, #0
    3368:	0c000303 	stceq	3, cr0, [r0], {3}
    336c:	00000e3c 	andeq	r0, r0, ip, lsr lr
    3370:	cd044509 	cfstr32gt	mvfx4, [r4, #-36]	; 0xffffffdc
    3374:	02000000 	andeq	r0, r0, #0
    3378:	00000003 	andeq	r0, r0, r3
    337c:	3d090217 	sfmcc	f0, 4, [r9, #-92]	; 0xffffffa4
    3380:	00055609 	andeq	r5, r5, r9, lsl #12
    3384:	0da61800 	stceq	8, cr1, [r6]
    3388:	3e090000 	cdpcc	0, 0, cr0, cr9, cr0, {0}
    338c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3390:	00621900 	rsbeq	r1, r2, r0, lsl #18
    3394:	cc044609 	stcgt	6, cr4, [r4], {9}
    3398:	00000004 	andeq	r0, r0, r4
    339c:	000c8803 	andeq	r8, ip, r3, lsl #16
    33a0:	03470900 	movteq	r0, #30976	; 0x7900
    33a4:	00000536 	andeq	r0, r0, r6, lsr r5
    33a8:	50090817 	andpl	r0, r9, r7, lsl r8
    33ac:	00058405 	andeq	r8, r5, r5, lsl #8
    33b0:	0f101800 	svceq	0x00101800
    33b4:	51090000 	mrspl	r0, (UNDEF: 9)
    33b8:	0004b410 	andeq	fp, r4, r0, lsl r4
    33bc:	0dfe1800 	ldcleq	8, cr1, [lr]
    33c0:	52090000 	andpl	r0, r9, #0
    33c4:	0003550b 	andeq	r5, r3, fp, lsl #10
    33c8:	1f160000 	svcne	0x00160000
    33cc:	0c00000f 	stceq	0, cr0, [r0], {15}
    33d0:	b7084c09 	strlt	r4, [r8, -r9, lsl #24]
    33d4:	1a000005 	bne	33f0 <__exidx_end+0x5f8>
    33d8:	58090075 	stmdapl	r9, {r0, r2, r4, r5, r6}
    33dc:	00056207 	andeq	r6, r5, r7, lsl #4
    33e0:	f10d0000 			; <UNDEFINED> instruction: 0xf10d0000
    33e4:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    33e8:	00cd0763 	sbceq	r0, sp, r3, ror #14
    33ec:	0d080000 	stceq	0, cr0, [r8, #-0]
    33f0:	00000ed1 	ldrdeq	r0, [r0], -r1
    33f4:	56106809 	ldrpl	r6, [r0], -r9, lsl #16
    33f8:	0a000005 	beq	3414 <__exidx_end+0x61c>
    33fc:	0d8b0300 	stceq	3, cr0, [fp]
    3400:	79090000 	stmdbvc	r9, {}	; <UNPREDICTABLE>
    3404:	0005841f 	andeq	r8, r5, pc, lsl r4
    3408:	090c0b00 	stmdbeq	ip, {r8, r9, fp}
    340c:	05e7097b 	strbeq	r0, [r7, #2427]!	; 0x97b
    3410:	ea0d0000 	b	343418 <__ccfg+0x323470>
    3414:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    3418:	04c0117f 	strbeq	r1, [r0], #383	; 0x17f
    341c:	0d000000 	stceq	0, cr0, [r0, #-0]
    3420:	00000e9f 	muleq	r0, pc, lr	; <UNPREDICTABLE>
    3424:	56118309 	ldrpl	r8, [r1], -r9, lsl #6
    3428:	08000005 	stmdaeq	r0, {r0, r2}
    342c:	0e2c0300 	cdpeq	3, 2, cr0, cr12, cr0, {0}
    3430:	92090000 	andls	r0, r9, #0
    3434:	0005c303 	andeq	ip, r5, r3, lsl #6
    3438:	04631400 	strbteq	r1, [r3], #-1024	; 0xfffffc00
    343c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    3440:	00f90e02 	rscseq	r0, r9, r2, lsl #28
    3444:	01010000 	mrseq	r0, (UNDEF: 1)
    3448:	0308081b 	movweq	r0, #34843	; 0x881b
    344c:	06290903 	strteq	r0, [r9], -r3, lsl #18
    3450:	021c0000 	andseq	r0, ip, #0
    3454:	08000022 	stmdaeq	r0, {r1, r5}
    3458:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    345c:	00000000 	andeq	r0, r0, r0
    3460:	00054d1c 	andeq	r4, r5, ip, lsl sp
    3464:	03080800 	movweq	r0, #34816	; 0x8800
    3468:	00010a08 	andeq	r0, r1, r8, lsl #20
    346c:	11000400 	tstne	r0, r0, lsl #8
    3470:	00000223 	andeq	r0, r0, r3, lsr #4
    3474:	03030908 	movweq	r0, #14600	; 0x3908
    3478:	00000602 	andeq	r0, r0, r2, lsl #12
    347c:	0004951d 	andeq	r9, r4, sp, lsl r5
    3480:	0b083000 	bleq	20f488 <__ccfg+0x1ef4e0>
    3484:	06990803 	ldreq	r0, [r9], r3, lsl #16
    3488:	801c0000 	andshi	r0, ip, r0
    348c:	08000004 	stmdaeq	r0, {r2}
    3490:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    3494:	00000000 	andeq	r0, r0, r0
    3498:	00028f1c 	andeq	r8, r2, ip, lsl pc
    349c:	03150800 	tsteq	r5, #0, 16
    34a0:	0000cd08 	andeq	ip, r0, r8, lsl #26
    34a4:	7b1c0200 	blvc	703cac <__ccfg+0x6e3d04>
    34a8:	08000004 	stmdaeq	r0, {r2}
    34ac:	e40b0316 	str	r0, [fp], #-790	; 0xfffffcea
    34b0:	04000002 	streq	r0, [r0], #-2
    34b4:	000f4d1c 	andeq	r4, pc, ip, lsl sp	; <UNPREDICTABLE>
    34b8:	03170800 	tsteq	r7, #0, 16
    34bc:	00010a09 	andeq	r0, r1, r9, lsl #20
    34c0:	311c0800 	tstcc	ip, r0, lsl #16
    34c4:	08000004 	stmdaeq	r0, {r2}
    34c8:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    34cc:	0c000006 	stceq	0, cr0, [r0], {6}
    34d0:	00028a1c 	andeq	r8, r2, ip, lsl sl
    34d4:	03190800 	tsteq	r9, #0, 16
    34d8:	0006a915 	andeq	sl, r6, r5, lsl r9
    34dc:	0f002c00 	svceq	0x00002c00
    34e0:	00000629 	andeq	r0, r0, r9, lsr #12
    34e4:	000006a9 	andeq	r0, r0, r9, lsr #13
    34e8:	0000881e 	andeq	r8, r0, lr, lsl r8
    34ec:	0a000300 	beq	40f4 <__exidx_end+0x12fc>
    34f0:	00063604 	andeq	r3, r6, r4, lsl #12
    34f4:	04a01100 	strteq	r1, [r0], #256	; 0x100
    34f8:	1c080000 	stcne	0, cr0, [r8], {-0}
    34fc:	06361b03 	ldrteq	r1, [r6], -r3, lsl #22
    3500:	52140000 	andspl	r0, r4, #0
    3504:	08000003 	stmdaeq	r0, {r0, r1}
    3508:	cb14031e 	blgt	504188 <__ccfg+0x4e41e0>
    350c:	01000006 	tsteq	r0, r6
    3510:	af040a01 	svcge	0x00040a01
    3514:	0e000006 	cdpeq	0, 0, cr0, cr0, cr6, {0}
    3518:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
    351c:	cd131d0a 	ldcgt	13, cr1, [r3, #-40]	; 0xffffffd8
    3520:	01000000 	mrseq	r0, (UNDEF: 0)
    3524:	07290e01 	streq	r0, [r9, -r1, lsl #28]!
    3528:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    352c:	0000de1a 	andeq	sp, r0, sl, lsl lr
    3530:	0e010100 	adfeqs	f0, f1, f0
    3534:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    3538:	de241e0a 	cdple	14, 2, cr1, cr4, cr10, {0}
    353c:	01000000 	mrseq	r0, (UNDEF: 0)
    3540:	05e80e01 	strbeq	r0, [r8, #3585]!	; 0xe01
    3544:	220a0000 	andcs	r0, sl, #0
    3548:	0006cb14 	andeq	ip, r6, r4, lsl fp
    354c:	03010100 	movweq	r0, #4352	; 0x1100
    3550:	00000d05 	andeq	r0, r0, r5, lsl #26
    3554:	150f0e0b 	strne	r0, [pc, #-3595]	; 2751 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfd>
    3558:	0a000007 	beq	357c <__exidx_end+0x784>
    355c:	00071b04 	andeq	r1, r7, r4, lsl #22
    3560:	81011500 	tsthi	r1, r0, lsl #10
    3564:	30000000 	andcc	r0, r0, r0
    3568:	13000007 	movwne	r0, #7
    356c:	00000081 	andeq	r0, r0, r1, lsl #1
    3570:	00011613 	andeq	r1, r1, r3, lsl r6
    3574:	400f0000 	andmi	r0, pc, r0
    3578:	40000007 	andmi	r0, r0, r7
    357c:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3580:	00000088 	andeq	r0, r0, r8, lsl #1
    3584:	040a0007 	streq	r0, [sl], #-7
    3588:	000005e7 	andeq	r0, r0, r7, ror #11
    358c:	000dba1f 	andeq	fp, sp, pc, lsl sl
    3590:	150d0c00 	strne	r0, [sp, #-3072]	; 0xfffff400
    3594:	00000730 	andeq	r0, r0, r0, lsr r7
    3598:	00000305 	andeq	r0, r0, r5, lsl #6
    359c:	090f0000 	stmdbeq	pc, {}	; <UNPREDICTABLE>
    35a0:	68000007 	stmdavs	r0, {r0, r1, r2}
    35a4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    35a8:	00000088 	andeq	r0, r0, r8, lsl #1
    35ac:	411f0002 	tstmi	pc, r2
    35b0:	0c00000e 	stceq	0, cr0, [r0], {14}
    35b4:	07581413 	smmlaeq	r8, r3, r4, r1
    35b8:	03050000 	movweq	r0, #20480	; 0x5000
    35bc:	00000000 	andeq	r0, r0, r0
    35c0:	00078a0f 	andeq	r8, r7, pc, lsl #20
    35c4:	00078a00 	andeq	r8, r7, r0, lsl #20
    35c8:	00881e00 	addeq	r1, r8, r0, lsl #28
    35cc:	00020000 	andeq	r0, r2, r0
    35d0:	04c0040a 	strbeq	r0, [r0], #1034	; 0x40a
    35d4:	671f0000 	ldrvs	r0, [pc, -r0]
    35d8:	0c00000d 	stceq	0, cr0, [r0], {13}
    35dc:	077a1319 			; <UNDEFINED> instruction: 0x077a1319
    35e0:	03050000 	movweq	r0, #20480	; 0x5000
    35e4:	00000000 	andeq	r0, r0, r0
    35e8:	0000810f 	andeq	r8, r0, pc, lsl #2
    35ec:	0007b200 	andeq	fp, r7, r0, lsl #4
    35f0:	00881e00 	addeq	r1, r8, r0, lsl #28
    35f4:	00020000 	andeq	r0, r2, r0
    35f8:	000d3f1f 	andeq	r3, sp, pc, lsl pc
    35fc:	0f1e0c00 	svceq	0x001e0c00
    3600:	000007a2 	andeq	r0, r0, r2, lsr #15
    3604:	00000305 	andeq	r0, r0, r5, lsl #6
    3608:	d40f0000 	strle	r0, [pc], #-0	; 3610 <__exidx_end+0x818>
    360c:	d4000007 	strle	r0, [r0], #-7
    3610:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    3614:	00000088 	andeq	r0, r0, r8, lsl #1
    3618:	040a0002 	streq	r0, [sl], #-2
    361c:	00000481 	andeq	r0, r0, r1, lsl #9
    3620:	000f171f 	andeq	r1, pc, pc, lsl r7	; <UNPREDICTABLE>
    3624:	1b230c00 	blne	8c662c <__ccfg+0x8a6684>
    3628:	000007c4 	andeq	r0, r0, r4, asr #15
    362c:	00000305 	andeq	r0, r0, r5, lsl #6
    3630:	01200000 			; <UNDEFINED> instruction: 0x01200000
    3634:	00000e5f 	andeq	r0, r0, pc, asr lr
    3638:	01050d01 	tsteq	r5, r1, lsl #26
    363c:	00156401 	andseq	r6, r5, r1, lsl #8
    3640:	00156600 	andseq	r6, r5, r0, lsl #12
    3644:	219c0100 	orrscs	r0, ip, r0, lsl #2
    3648:	000d4e01 	andeq	r4, sp, r1, lsl #28
    364c:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3650:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    365c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3660:	00000863 	andeq	r0, r0, r3, ror #16
    3664:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3668:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    366c:	0000812d 	andeq	r8, r0, sp, lsr #2
    3670:	00105d00 	andseq	r5, r0, r0, lsl #26
    3674:	114e2300 	mrsne	r2, SPSR_hyp
    3678:	00000000 	andeq	r0, r0, r0
    367c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3680:	0a010000 	beq	43688 <__ccfg+0x236e0>
    3684:	60240905 	eorvs	r0, r4, r5, lsl #18
    3688:	7b000011 	blvc	36d4 <__exidx_end+0x8dc>
    368c:	25000010 	strcs	r0, [r0, #-16]
    3690:	00000800 	andeq	r0, r0, r0, lsl #16
    3694:	00116b26 	andseq	r6, r1, r6, lsr #22
    3698:	00108e00 	andseq	r8, r0, r0, lsl #28
    369c:	11762600 	cmnne	r6, r0, lsl #12
    36a0:	10ac0000 	adcne	r0, ip, r0
    36a4:	00000000 	andeq	r0, r0, r0
    36a8:	94012700 	strls	r2, [r1], #-1792	; 0xfffff900
    36ac:	0100000e 	tsteq	r0, lr
    36b0:	010104fa 	strdeq	r0, [r1, -sl]
	...
    36bc:	089d9c01 	ldmeq	sp, {r0, sl, fp, ip, pc}
    36c0:	70220000 	eorvc	r0, r2, r0
    36c4:	0100746b 	tsteq	r0, fp, ror #8
    36c8:	163004fa 			; <UNDEFINED> instruction: 0x163004fa
    36cc:	d6000001 	strle	r0, [r0], -r1
    36d0:	28000010 	stmdacs	r0, {r4}
    36d4:	fe010062 	cdp2	0, 0, cr0, cr1, cr2, {3}
    36d8:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    36dc:	10f40000 	rscsne	r0, r4, r0
    36e0:	0a000000 	beq	36e8 <__exidx_end+0x8f0>
    36e4:	0005b704 	andeq	fp, r5, r4, lsl #14
    36e8:	96012100 	strls	r2, [r1], -r0, lsl #2
    36ec:	0100000c 	tsteq	r0, ip
    36f0:	010104e9 	smlatteq	r1, r9, r4, r0
    36f4:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3700:	08f19c01 	ldmeq	r1!, {r0, sl, fp, ip, pc}^
    3704:	70220000 	eorvc	r0, r2, r0
    3708:	01007968 	tsteq	r0, r8, ror #18
    370c:	812f04e9 	smulwthi	pc, r9, r4	; <UNPREDICTABLE>
    3710:	12000000 	andne	r0, r0, #0
    3714:	28000011 	stmdacs	r0, {r0, r4}
    3718:	0100716f 	tsteq	r0, pc, ror #2
    371c:	8a0b04ed 	bhi	2c4ad8 <__ccfg+0x2a4b30>
    3720:	30000007 	andcc	r0, r0, r7
    3724:	28000011 	stmdacs	r0, {r0, r4}
    3728:	ee010062 	cdp	0, 0, cr0, cr1, cr2, {3}
    372c:	089d0c04 	ldmeq	sp, {r2, sl, fp}
    3730:	11430000 	mrsne	r0, (UNDEF: 67)
    3734:	21000000 	mrscs	r0, (UNDEF: 0)
    3738:	000d1901 	andeq	r1, sp, r1, lsl #18
    373c:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    3740:	01160101 	tsteq	r6, r1, lsl #2
	...
    374c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3750:	00000950 	andeq	r0, r0, r0, asr r9
    3754:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3758:	04d20100 	ldrbeq	r0, [r2], #256	; 0x100
    375c:	0000812f 	andeq	r8, r0, pc, lsr #2
    3760:	00116200 	andseq	r6, r1, r0, lsl #4
    3764:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    3768:	d201006e 	andle	r0, r1, #110	; 0x6e
    376c:	04323904 	ldrteq	r3, [r2], #-2308	; 0xfffff6fc
    3770:	11800000 	orrne	r0, r0, r0
    3774:	6f280000 	svcvs	0x00280000
    3778:	d7010071 	smlsdxle	r1, r1, r0, r0
    377c:	078a0b04 	streq	r0, [sl, r4, lsl #22]
    3780:	119e0000 	orrsne	r0, lr, r0
    3784:	62280000 	eorvs	r0, r8, #0
    3788:	04d80100 	ldrbeq	r0, [r8], #256	; 0x100
    378c:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3790:	0011bc00 	andseq	fp, r1, r0, lsl #24
    3794:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3798:	00000f05 	andeq	r0, r0, r5, lsl #30
    379c:	0104a101 	tsteq	r4, r1, lsl #2
    37a0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    37ac:	eb9c0100 	bl	fe703bb4 <_estack+0xde6febb4>
    37b0:	22000009 	andcs	r0, r0, #9
    37b4:	00796870 	rsbseq	r6, r9, r0, ror r8
    37b8:	2b04a101 	blcs	12bbc4 <__ccfg+0x10bc1c>
    37bc:	00000081 	andeq	r0, r0, r1, lsl #1
    37c0:	000011e6 	andeq	r1, r0, r6, ror #3
    37c4:	01007022 	tsteq	r0, r2, lsr #32
    37c8:	163804a1 	ldrtne	r0, [r8], -r1, lsr #9
    37cc:	1a000001 	bne	37d8 <__exidx_end+0x9e0>
    37d0:	22000012 	andcs	r0, r0, #18
    37d4:	006e656c 	rsbeq	r6, lr, ip, ror #10
    37d8:	3f04a101 	svccc	0x0004a101
    37dc:	00000081 	andeq	r0, r0, r1, lsl #1
    37e0:	0000124e 	andeq	r1, r0, lr, asr #4
    37e4:	676c7029 	strbvs	r7, [ip, -r9, lsr #32]!
    37e8:	04a60100 	strteq	r0, [r6], #256	; 0x100
    37ec:	00008106 	andeq	r8, r0, r6, lsl #2
    37f0:	73642800 	cmnvc	r4, #0, 16
    37f4:	a6010070 			; <UNDEFINED> instruction: 0xa6010070
    37f8:	00810b04 	addeq	r0, r1, r4, lsl #22
    37fc:	12820000 	addne	r0, r2, #0
    3800:	732a0000 			; <UNDEFINED> instruction: 0x732a0000
    3804:	01007365 	tsteq	r0, r5, ror #6
    3808:	811004a6 	tsthi	r0, r6, lsr #9
    380c:	02000000 	andeq	r0, r0, #0
    3810:	612a5091 			; <UNDEFINED> instruction: 0x612a5091
    3814:	a7010070 	smlsdxge	r1, r0, r0, r0
    3818:	03550b04 	cmpeq	r5, #4, 22	; 0x1000
    381c:	91020000 	mrsls	r0, (UNDEF: 2)
    3820:	00632854 	rsbeq	r2, r3, r4, asr r8
    3824:	0a04a801 	beq	12d830 <__ccfg+0x10d888>
    3828:	00000116 	andeq	r0, r0, r6, lsl r1
    382c:	000012a0 	andeq	r1, r0, r0, lsr #5
    3830:	f5012100 			; <UNDEFINED> instruction: 0xf5012100
    3834:	0100000c 	tsteq	r0, ip
    3838:	01010487 	smlabbeq	r1, r7, r4, r0
    383c:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3848:	0a4a9c01 	beq	12aa854 <__ccfg+0x128a8ac>
    384c:	70220000 	eorvc	r0, r2, r0
    3850:	01007968 	tsteq	r0, r8, ror #18
    3854:	812b0487 	smlawbhi	fp, r7, r4, r0
    3858:	b3000000 	movwlt	r0, #0
    385c:	22000012 	andcs	r0, r0, #18
    3860:	01007370 	tsteq	r0, r0, ror r3
    3864:	093a0487 	ldmdbeq	sl!, {r0, r1, r2, r7, sl}
    3868:	d1000007 	tstle	r0, r7
    386c:	2b000012 	blcs	38bc <__exidx_end+0xac4>
    3870:	00000d28 	andeq	r0, r0, r8, lsr #26
    3874:	42048701 	andmi	r8, r4, #262144	; 0x40000
    3878:	00000081 	andeq	r0, r0, r1, lsl #1
    387c:	000012ef 	andeq	r1, r0, pc, ror #5
    3880:	01007128 	tsteq	r0, r8, lsr #2
    3884:	8a0b048d 	bhi	2c4ac0 <__ccfg+0x2a4b18>
    3888:	0d000007 	stceq	0, cr0, [r0, #-28]	; 0xffffffe4
    388c:	00000013 	andeq	r0, r0, r3, lsl r0
    3890:	0de1012c 	stfeqe	f0, [r1, #176]!	; 0xb0
    3894:	86010000 	strhi	r0, [r1], -r0
    3898:	16010103 	strne	r0, [r1], -r3, lsl #2
    389c:	01000001 	tsteq	r0, r1
    38a0:	00000a91 	muleq	r0, r1, sl
    38a4:	0013a52d 	andseq	sl, r3, sp, lsr #10
    38a8:	03860100 	orreq	r0, r6, #0, 2
    38ac:	0000812d 	andeq	r8, r0, sp, lsr #2
    38b0:	73642e00 	cmnvc	r4, #0, 28
    38b4:	86010070 			; <UNDEFINED> instruction: 0x86010070
    38b8:	00813703 	addeq	r3, r1, r3, lsl #14
    38bc:	732e0000 			; <UNDEFINED> instruction: 0x732e0000
    38c0:	01007365 	tsteq	r0, r5, ror #6
    38c4:	81400386 	smlalbbhi	r0, r0, r6, r3	; <UNPREDICTABLE>
    38c8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    38cc:	8a010070 	bhi	43a94 <__ccfg+0x23aec>
    38d0:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    38d4:	27000000 	strcs	r0, [r0, -r0]
    38d8:	000ce801 	andeq	lr, ip, r1, lsl #16
    38dc:	037f0100 	cmneq	pc, #0, 2
    38e0:	00000101 	andeq	r0, r0, r1, lsl #2
    38e4:	00000000 	andeq	r0, r0, r0
    38e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    38ec:	00000acb 	andeq	r0, r0, fp, asr #21
    38f0:	01007022 	tsteq	r0, r2, lsr #32
    38f4:	1632037f 			; <UNDEFINED> instruction: 0x1632037f
    38f8:	3c000001 	stccc	0, cr0, [r0], {1}
    38fc:	22000013 	andcs	r0, r0, #19
    3900:	00707364 	rsbseq	r7, r0, r4, ror #6
    3904:	39037f01 	stmdbcc	r3, {r0, r8, r9, sl, fp, ip, sp, lr}
    3908:	00000081 	andeq	r0, r0, r1, lsl #1
    390c:	0000134f 	andeq	r1, r0, pc, asr #6
    3910:	78012100 	stmdavc	r1, {r8, sp}
    3914:	0100000e 	tsteq	r0, lr
    3918:	0101036b 	tsteq	r1, fp, ror #6
    391c:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3928:	0b259c01 	bleq	96a934 <__ccfg+0x94a98c>
    392c:	70220000 	eorvc	r0, r2, r0
    3930:	036b0100 	cmneq	fp, #0, 2
    3934:	00011633 	andeq	r1, r1, r3, lsr r6
    3938:	00136200 	andseq	r6, r3, r0, lsl #4
    393c:	0ef82b00 	vmoveq.f64	d18, #128	; 0xc0000000 -2.0
    3940:	6b010000 	blvs	43948 <__ccfg+0x239a0>
    3944:	00813a03 	addeq	r3, r1, r3, lsl #20
    3948:	13800000 	orrne	r0, r0, #0
    394c:	70280000 	eorvc	r0, r8, r0
    3950:	6f010063 	svcvs	0x00010063
    3954:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3958:	139e0000 	orrsne	r0, lr, #0
    395c:	70290000 	eorvc	r0, r9, r0
    3960:	6f010070 	svcvs	0x00010070
    3964:	089d1103 	ldmeq	sp, {r0, r1, r8, ip}
    3968:	27000000 	strcs	r0, [r0, -r0]
    396c:	000d5b01 	andeq	r5, sp, r1, lsl #22
    3970:	03630100 	cmneq	r3, #0, 2
    3974:	00000101 	andeq	r0, r0, r1, lsl #2
    3978:	00000000 	andeq	r0, r0, r0
    397c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3980:	00000b5f 	andeq	r0, r0, pc, asr fp
    3984:	01007022 	tsteq	r0, r2, lsr #32
    3988:	16310363 	ldrtne	r0, [r1], -r3, ror #6
    398c:	bc000001 	stclt	0, cr0, [r0], {1}
    3990:	22000013 	andcs	r0, r0, #19
    3994:	00796870 	rsbseq	r6, r9, r0, ror r8
    3998:	38036301 	stmdacc	r3, {r0, r8, r9, sp, lr}
    399c:	00000081 	andeq	r0, r0, r1, lsl #1
    39a0:	000013da 	ldrdeq	r1, [r0], -sl
    39a4:	83012700 	movwhi	r2, #5888	; 0x1700
    39a8:	0100000e 	tsteq	r0, lr
    39ac:	0101035a 	tsteq	r1, sl, asr r3
	...
    39b8:	0b999c01 	bleq	fe66a9c4 <_estack+0xde6659c4>
    39bc:	70220000 	eorvc	r0, r2, r0
    39c0:	035a0100 	cmpeq	sl, #0, 2
    39c4:	00011631 	andeq	r1, r1, r1, lsr r6
    39c8:	0013f800 	andseq	pc, r3, r0, lsl #16
    39cc:	65732200 	ldrbvs	r2, [r3, #-512]!	; 0xfffffe00
    39d0:	5a010073 	bpl	43ba4 <__ccfg+0x23bfc>
    39d4:	00813803 	addeq	r3, r1, r3, lsl #16
    39d8:	14160000 	ldrne	r0, [r6], #-0
    39dc:	2c000000 	stccs	0, cr0, [r0], {-0}
    39e0:	000f3701 	andeq	r3, pc, r1, lsl #14
    39e4:	03520100 	cmpeq	r2, #0, 2
    39e8:	00810101 	addeq	r0, r1, r1, lsl #2
    39ec:	d5010000 	strle	r0, [r1, #-0]
    39f0:	2e00000b 	cdpcs	0, 0, cr0, cr0, cr11, {0}
    39f4:	00796870 	rsbseq	r6, r9, r0, ror r8
    39f8:	2d035201 	sfmcs	f5, 4, [r3, #-4]
    39fc:	00000081 	andeq	r0, r0, r1, lsl #1
    3a00:	74706f2e 	ldrbtvc	r6, [r0], #-3886	; 0xfffff0d2
    3a04:	03520100 	cmpeq	r2, #0, 2
    3a08:	00008136 	andeq	r8, r0, r6, lsr r1
    3a0c:	72612e00 	rsbvc	r2, r1, #0, 28
    3a10:	52010067 	andpl	r0, r1, #103	; 0x67
    3a14:	01164303 	tsteq	r6, r3, lsl #6
    3a18:	21000000 	mrscs	r0, (UNDEF: 0)
    3a1c:	000ca101 	andeq	sl, ip, r1, lsl #2
    3a20:	03330100 	teqeq	r3, #0, 2
    3a24:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3a30:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a34:	00000c3e 	andeq	r0, r0, lr, lsr ip
    3a38:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3a3c:	2c033301 	stccs	3, cr3, [r3], {1}
    3a40:	00000081 	andeq	r0, r0, r1, lsl #1
    3a44:	00001434 	andeq	r1, r0, r4, lsr r4
    3a48:	74706f22 	ldrbtvc	r6, [r0], #-3874	; 0xfffff0de
    3a4c:	03330100 	teqeq	r3, #0, 2
    3a50:	00008134 	andeq	r8, r0, r4, lsr r1
    3a54:	00147300 	andseq	r7, r4, r0, lsl #6
    3a58:	72612200 	rsbvc	r2, r1, #0, 4
    3a5c:	33010067 	movwcc	r0, #4199	; 0x1067
    3a60:	01164103 	tsteq	r6, r3, lsl #2
    3a64:	149c0000 	ldrne	r0, [ip], #0
    3a68:	002f0000 	eoreq	r0, pc, r0
    3a6c:	00000000 	andeq	r0, r0, r0
    3a70:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    3a74:	3c010070 	stccc	0, cr0, [r1], {112}	; 0x70
    3a78:	07d41503 	ldrbeq	r1, [r4, r3, lsl #10]
    3a7c:	14c50000 	strbne	r0, [r5], #0
    3a80:	00000000 	andeq	r0, r0, r0
    3a84:	0d360127 	ldfeqs	f0, [r6, #-156]!	; 0xffffff64
    3a88:	2b010000 	blcs	43a90 <__ccfg+0x23ae8>
    3a8c:	00010103 	andeq	r0, r1, r3, lsl #2
    3a90:	00000000 	andeq	r0, r0, r0
    3a94:	01000000 	mrseq	r0, (UNDEF: 0)
    3a98:	000c679c 	muleq	ip, ip, r7
    3a9c:	00702200 	rsbseq	r2, r0, r0, lsl #4
    3aa0:	2e032b01 	vmlacs.f64	d2, d3, d1
    3aa4:	00000116 	andeq	r0, r0, r6, lsl r1
    3aa8:	000014d8 	ldrdeq	r1, [r0], -r8
    3aac:	10012100 	andne	r2, r1, r0, lsl #2
    3ab0:	0100000e 	tsteq	r0, lr
    3ab4:	0101031a 	tsteq	r1, sl, lsl r3
    3ab8:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3ac4:	0cc19c01 	stcleq	12, cr9, [r1], {1}
    3ac8:	70220000 	eorvc	r0, r2, r0
    3acc:	031a0100 	tsteq	sl, #0, 2
    3ad0:	0001162e 	andeq	r1, r1, lr, lsr #12
    3ad4:	0014f600 	andseq	pc, r4, r0, lsl #12
    3ad8:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    3adc:	1a010066 	bne	43c7c <__ccfg+0x23cd4>
    3ae0:	02593d03 	subseq	r3, r9, #3, 26	; 0xc0
    3ae4:	15140000 	ldrne	r0, [r4, #-0]
    3ae8:	6c220000 	stcvs	0, cr0, [r2], #-0
    3aec:	01006e65 	tsteq	r0, r5, ror #28
    3af0:	8146031a 	cmphi	r6, sl, lsl r3
    3af4:	27000000 	strcs	r0, [r0, -r0]
    3af8:	29000015 	stmdbcs	r0, {r0, r2, r4}
    3afc:	1e010062 	cdpne	0, 0, cr0, cr1, cr2, {3}
    3b00:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3b04:	21000000 	mrscs	r0, (UNDEF: 0)
    3b08:	000e5601 	andeq	r5, lr, r1, lsl #12
    3b0c:	03080100 	movweq	r0, #33024	; 0x8100
    3b10:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3b1c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b20:	00000d1b 	andeq	r0, r0, fp, lsl sp
    3b24:	01007022 	tsteq	r0, r2, lsr #32
    3b28:	162d0308 	strtne	r0, [sp], -r8, lsl #6
    3b2c:	45000001 	strmi	r0, [r0, #-1]
    3b30:	22000015 	andcs	r0, r0, #21
    3b34:	00667562 	rsbeq	r7, r6, r2, ror #10
    3b38:	36030801 	strcc	r0, [r3], -r1, lsl #16
    3b3c:	00000d1b 	andeq	r0, r0, fp, lsl sp
    3b40:	00001563 	andeq	r1, r0, r3, ror #10
    3b44:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3b48:	03080100 	movweq	r0, #33024	; 0x8100
    3b4c:	0000813f 	andeq	r8, r0, pc, lsr r1
    3b50:	00158100 	andseq	r8, r5, r0, lsl #2
    3b54:	00622900 	rsbeq	r2, r2, r0, lsl #18
    3b58:	0c030c01 	stceq	12, cr0, [r3], {1}
    3b5c:	0000089d 	muleq	r0, sp, r8
    3b60:	e3040a00 	movw	r0, #18944	; 0x4a00
    3b64:	21000000 	mrscs	r0, (UNDEF: 0)
    3b68:	000e0701 	andeq	r0, lr, r1, lsl #14
    3b6c:	02cd0100 	sbceq	r0, sp, #0, 2
    3b70:	01160101 	tsteq	r6, r1, lsl #2
	...
    3b7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3b80:	00000dbf 			; <UNDEFINED> instruction: 0x00000dbf
    3b84:	000b8f2b 	andeq	r8, fp, fp, lsr #30
    3b88:	02cd0100 	sbceq	r0, sp, #0, 2
    3b8c:	0000cd2e 	andeq	ip, r0, lr, lsr #26
    3b90:	00159f00 	andseq	r9, r5, r0, lsl #30
    3b94:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3b98:	02cd0100 	sbceq	r0, sp, #0, 2
    3b9c:	00008139 	andeq	r8, r0, r9, lsr r1
    3ba0:	0015bd00 	andseq	fp, r5, r0, lsl #26
    3ba4:	0ef12b00 	vmoveq.f64	d18, #16	; 0x40800000  4.0
    3ba8:	cd010000 	stcgt	0, cr0, [r1, #-0]
    3bac:	00814102 	addeq	r4, r1, r2, lsl #2
    3bb0:	15e60000 	strbne	r0, [r6, #0]!
    3bb4:	75220000 	strvc	r0, [r2, #-0]!
    3bb8:	01006772 	tsteq	r0, r2, ror r7
    3bbc:	c11102ce 	tstgt	r1, lr, asr #5
    3bc0:	30000000 	andcc	r0, r0, r0
    3bc4:	28000016 	stmdacs	r0, {r1, r2, r4}
    3bc8:	cf010062 	svcgt	0x00010062
    3bcc:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3bd0:	16430000 	strbne	r0, [r3], -r0
    3bd4:	f9300000 			; <UNDEFINED> instruction: 0xf9300000
    3bd8:	0100000d 	tsteq	r0, sp
    3bdc:	550b02d0 	strpl	r0, [fp, #-720]	; 0xfffffd30
    3be0:	02000003 	andeq	r0, r0, #3
    3be4:	732a6491 			; <UNDEFINED> instruction: 0x732a6491
    3be8:	02d10100 	sbcseq	r0, r1, #0, 2
    3bec:	0007400d 	andeq	r4, r7, sp
    3bf0:	28570100 	ldmdacs	r7, {r8}^
    3bf4:	00646965 	rsbeq	r6, r4, r5, ror #18
    3bf8:	0602d201 	streq	sp, [r2], -r1, lsl #4
    3bfc:	00000081 	andeq	r0, r0, r1, lsl #1
    3c00:	00001661 	andeq	r1, r0, r1, ror #12
    3c04:	c6012100 	strgt	r2, [r1], -r0, lsl #2
    3c08:	0100000d 	tsteq	r0, sp
    3c0c:	010102a4 	smlatbeq	r1, r4, r2, r0
    3c10:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3c1c:	0e729c01 	cdpeq	12, 7, cr9, cr2, cr1, {0}
    3c20:	66220000 	strtvs	r0, [r2], -r0
    3c24:	a4010064 	strge	r0, [r1], #-100	; 0xffffff9c
    3c28:	00812a02 	addeq	r2, r1, r2, lsl #20
    3c2c:	168a0000 	strne	r0, [sl], r0
    3c30:	f82b0000 			; <UNDEFINED> instruction: 0xf82b0000
    3c34:	0100000e 	tsteq	r0, lr
    3c38:	813202a4 	teqhi	r2, r4, lsr #5
    3c3c:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    3c40:	28000016 	stmdacs	r0, {r1, r2, r4}
    3c44:	a8010073 	stmdage	r1, {r0, r1, r4, r5, r6}
    3c48:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3c4c:	16f20000 	ldrbtne	r0, [r2], r0
    3c50:	6e280000 	cdpvs	0, 2, cr0, cr8, cr0, {0}
    3c54:	a9010071 	stmdbge	r1, {r0, r4, r5, r6}
    3c58:	00810602 	addeq	r0, r1, r2, lsl #12
    3c5c:	17570000 	ldrbne	r0, [r7, -r0]
    3c60:	72280000 	eorvc	r0, r8, #0
    3c64:	aa010071 	bge	43e30 <__ccfg+0x23e88>
    3c68:	078a0b02 	streq	r0, [sl, r2, lsl #22]
    3c6c:	17750000 	ldrbne	r0, [r5, -r0]!
    3c70:	62280000 	eorvs	r0, r8, #0
    3c74:	02ab0100 	adceq	r0, fp, #0, 2
    3c78:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3c7c:	00179300 	andseq	r9, r7, r0, lsl #6
    3c80:	0dac3100 	stfeqs	f3, [ip]
    3c84:	c0010000 	andgt	r0, r1, r0
    3c88:	00000102 	andeq	r0, r0, r2, lsl #2
    3c8c:	4e320000 	cdpmi	0, 3, cr0, cr2, cr0, {0}
    3c90:	00000011 	andeq	r0, r0, r1, lsl r0
    3c94:	00000000 	andeq	r0, r0, r0
    3c98:	01000000 	mrseq	r0, (UNDEF: 0)
    3c9c:	330a02bb 	movwcc	r0, #41659	; 0xa2bb
    3ca0:	00001160 	andeq	r1, r0, r0, ror #2
    3ca4:	00116b26 	andseq	r6, r1, r6, lsr #22
    3ca8:	0017bc00 	andseq	fp, r7, r0, lsl #24
    3cac:	11762600 	cmnne	r6, r0, lsl #12
    3cb0:	17cf0000 	strbne	r0, [pc, r0]
    3cb4:	00000000 	andeq	r0, r0, r0
    3cb8:	0c790121 	ldfeqe	f0, [r9], #-132	; 0xffffff7c
    3cbc:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3cc0:	81010102 	tsthi	r1, r2, lsl #2
	...
    3ccc:	01000000 	mrseq	r0, (UNDEF: 0)
    3cd0:	000eef9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
    3cd4:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3cd8:	027d0100 	rsbseq	r0, sp, #0, 2
    3cdc:	0000812a 	andeq	r8, r0, sl, lsr #2
    3ce0:	0017e200 	andseq	lr, r7, r0, lsl #4
    3ce4:	0ef82b00 	vmoveq.f64	d18, #128	; 0xc0000000 -2.0
    3ce8:	7d010000 	stcvc	0, cr0, [r1, #-0]
    3cec:	00813202 	addeq	r3, r1, r2, lsl #4
    3cf0:	18160000 	ldmdane	r6, {}	; <UNPREDICTABLE>
    3cf4:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3cf8:	02810100 	addeq	r0, r1, #0, 2
    3cfc:	0007400d 	andeq	r4, r7, sp
    3d00:	00183f00 	andseq	r3, r8, r0, lsl #30
    3d04:	716e2800 	cmnvc	lr, r0, lsl #16
    3d08:	02820100 	addeq	r0, r2, #0, 2
    3d0c:	00008106 	andeq	r8, r0, r6, lsl #2
    3d10:	0018a400 	andseq	sl, r8, r0, lsl #8
    3d14:	71722800 	cmnvc	r2, r0, lsl #16
    3d18:	02830100 	addeq	r0, r3, #0, 2
    3d1c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3d20:	0018c200 	andseq	ip, r8, r0, lsl #4
    3d24:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3d28:	0c028401 	cfstrseq	mvf8, [r2], {1}
    3d2c:	0000089d 	muleq	r0, sp, r8
    3d30:	000018eb 	andeq	r1, r0, fp, ror #17
    3d34:	fd012100 	stc2	1, cr2, [r1, #-0]
    3d38:	0100000e 	tsteq	r0, lr
    3d3c:	01010256 	tsteq	r1, r6, asr r2
    3d40:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3d4c:	0f5c9c01 	svceq	0x005c9c01
    3d50:	8f2b0000 	svchi	0x002b0000
    3d54:	0100000b 	tsteq	r0, fp
    3d58:	cd2d0256 	sfmgt	f0, 4, [sp, #-344]!	; 0xfffffea8
    3d5c:	1f000000 	svcne	0x00000000
    3d60:	22000019 	andcs	r0, r0, #25
    3d64:	01006466 	tsteq	r0, r6, ror #8
    3d68:	81380256 	teqhi	r8, r6, asr r2
    3d6c:	32000000 	andcc	r0, r0, #0
    3d70:	28000019 	stmdacs	r0, {r0, r3, r4}
    3d74:	5d010070 	stcpl	0, cr0, [r1, #-448]	; 0xfffffe40
    3d78:	01160a02 	tsteq	r6, r2, lsl #20
    3d7c:	19710000 	ldmdbne	r1!, {}^	; <UNPREDICTABLE>
    3d80:	62280000 	eorvs	r0, r8, #0
    3d84:	025e0100 	subseq	r0, lr, #0, 2
    3d88:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3d8c:	00198400 	andseq	r8, r9, r0, lsl #8
    3d90:	71722800 	cmnvc	r2, r0, lsl #16
    3d94:	025f0100 	subseq	r0, pc, #0, 2
    3d98:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3d9c:	0019ad00 	andseq	sl, r9, r0, lsl #26
    3da0:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3da4:	00000ec3 	andeq	r0, r0, r3, asr #29
    3da8:	01024a01 	tsteq	r2, r1, lsl #20
    3dac:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3db8:	999c0100 	ldmibls	ip, {r8}
    3dbc:	2200000f 	andcs	r0, r0, #15
    3dc0:	0064726f 	rsbeq	r7, r4, pc, ror #4
    3dc4:	29024a01 	stmdbcs	r2, {r0, r9, fp, lr}
    3dc8:	00000081 	andeq	r0, r0, r1, lsl #1
    3dcc:	000019e7 	andeq	r1, r0, r7, ror #19
    3dd0:	006c7034 	rsbeq	r7, ip, r4, lsr r0
    3dd4:	3f024a01 	svccc	0x00024a01
    3dd8:	000007d4 	ldrdeq	r0, [r0], -r4
    3ddc:	21005101 	tstcs	r0, r1, lsl #2
    3de0:	000e2201 	andeq	r2, lr, r1, lsl #4
    3de4:	02290100 	eoreq	r0, r9, #0, 2
    3de8:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3df4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3df8:	00000ff6 	strdeq	r0, [r0], -r6
    3dfc:	000b8f2b 	andeq	r8, fp, fp, lsr #30
    3e00:	02290100 	eoreq	r0, r9, #0, 2
    3e04:	0000cd2b 	andeq	ip, r0, fp, lsr #26
    3e08:	001a0500 	andseq	r0, sl, r0, lsl #10
    3e0c:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3e10:	02290100 	eoreq	r0, r9, #0, 2
    3e14:	00008136 	andeq	r8, r0, r6, lsr r1
    3e18:	001a2300 	andseq	r2, sl, r0, lsl #6
    3e1c:	00732800 	rsbseq	r2, r3, r0, lsl #16
    3e20:	0d022b01 	vstreq	d2, [r2, #-4]
    3e24:	00000740 	andeq	r0, r0, r0, asr #14
    3e28:	00001a6d 	andeq	r1, r0, sp, ror #20
    3e2c:	01006228 	tsteq	r0, r8, lsr #4
    3e30:	9d0c022c 	sfmls	f0, 4, [ip, #-176]	; 0xffffff50
    3e34:	80000008 	andhi	r0, r0, r8
    3e38:	0000001a 	andeq	r0, r0, sl, lsl r0
    3e3c:	0d2d0121 	stfeqs	f0, [sp, #-132]!	; 0xffffff7c
    3e40:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3e44:	81010101 	tsthi	r1, r1, lsl #2
	...
    3e50:	01000000 	mrseq	r0, (UNDEF: 0)
    3e54:	0010839c 	mulseq	r0, ip, r3
    3e58:	0b8f2b00 	bleq	fe3cea60 <_estack+0xde3c9a60>
    3e5c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3e60:	00cd2a01 	sbceq	r2, sp, r1, lsl #20
    3e64:	1a930000 	bne	fe4c3e6c <_estack+0xde4bee6c>
    3e68:	70220000 	eorvc	r0, r2, r0
    3e6c:	01007968 	tsteq	r0, r8, ror #18
    3e70:	813501f6 	teqhi	r5, r6	; <illegal shifter operand>
    3e74:	bc000000 	stclt	0, cr0, [r0], {-0}
    3e78:	2b00001a 	blcs	3ee8 <__exidx_end+0x10f0>
    3e7c:	00000e8f 	andeq	r0, r0, pc, lsl #29
    3e80:	3e01f601 	cfmadd32cc	mvax0, mvfx15, mvfx1, mvfx1
    3e84:	00000081 	andeq	r0, r0, r1, lsl #1
    3e88:	00001b11 	andeq	r1, r0, r1, lsl fp
    3e8c:	64662835 	strbtvs	r2, [r6], #-2101	; 0xfffff7cb
    3e90:	01f80100 	mvnseq	r0, r0, lsl #2
    3e94:	00008106 	andeq	r8, r0, r6, lsl #2
    3e98:	001b4900 	andseq	r4, fp, r0, lsl #18
    3e9c:	0d9a3600 	ldceq	6, cr3, [sl]
    3ea0:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
    3ea4:	05560a01 	ldrbeq	r0, [r6, #-2561]	; 0xfffff5ff
    3ea8:	73280000 			; <UNDEFINED> instruction: 0x73280000
    3eac:	01fa0100 	mvnseq	r0, r0, lsl #2
    3eb0:	0007400d 	andeq	r4, r7, sp
    3eb4:	001b6700 	andseq	r6, fp, r0, lsl #14
    3eb8:	70612a00 	rsbvc	r2, r1, r0, lsl #20
    3ebc:	01fc0100 	mvnseq	r0, r0, lsl #2
    3ec0:	0000b50b 	andeq	fp, r0, fp, lsl #10
    3ec4:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3ec8:	d0012700 	andle	r2, r1, r0, lsl #14
    3ecc:	0100000d 	tsteq	r0, sp
    3ed0:	0101013b 	tsteq	r1, fp, lsr r1
	...
    3edc:	10bb9c01 	adcsne	r9, fp, r1, lsl #24
    3ee0:	70220000 	eorvc	r0, r2, r0
    3ee4:	013b0100 	teqeq	fp, r0, lsl #2
    3ee8:	0001162e 	andeq	r1, r1, lr, lsr #12
    3eec:	001bb100 	andseq	fp, fp, r0, lsl #2
    3ef0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3ef4:	0c014101 	stfeqs	f4, [r1], {1}
    3ef8:	0000089d 	muleq	r0, sp, r8
    3efc:	00001bda 	ldrdeq	r1, [r0], -sl
    3f00:	70613700 	rsbvc	r3, r1, r0, lsl #14
    3f04:	14010062 	strne	r0, [r1], #-98	; 0xffffff9e
    3f08:	9d010101 	stflss	f0, [r1, #-4]
    3f0c:	00000008 	andeq	r0, r0, r8
    3f10:	00000000 	andeq	r0, r0, r0
    3f14:	01000000 	mrseq	r0, (UNDEF: 0)
    3f18:	0011029c 	mulseq	r1, ip, r2
    3f1c:	13a52b00 			; <UNDEFINED> instruction: 0x13a52b00
    3f20:	14010000 	strne	r0, [r1], #-0
    3f24:	00cd2b01 	sbceq	r2, sp, r1, lsl #22
    3f28:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    3f2c:	702a0000 	eorvc	r0, sl, r0
    3f30:	01190100 	tsteq	r9, r0, lsl #2
    3f34:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3f38:	29500100 	ldmdbcs	r0, {r8}^
    3f3c:	01007363 	tsteq	r0, r3, ror #6
    3f40:	cd07011a 	stfgts	f0, [r7, #-104]	; 0xffffff98
    3f44:	00000000 	andeq	r0, r0, r0
    3f48:	706c7238 	rsbvc	r7, ip, r8, lsr r2
    3f4c:	01040100 	mrseq	r0, (UNDEF: 20)
    3f50:	00000101 	andeq	r0, r0, r1, lsl #2
    3f54:	00000000 	andeq	r0, r0, r0
    3f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f5c:	0000112a 	andeq	r1, r0, sl, lsr #2
    3f60:	01007022 	tsteq	r0, r2, lsr #32
    3f64:	9d2b0104 	stflss	f0, [fp, #-16]!
    3f68:	21000008 	tstcs	r0, r8
    3f6c:	0000001c 	andeq	r0, r0, ip, lsl r0
    3f70:	000ced39 	andeq	lr, ip, r9, lsr sp
    3f74:	01e00100 	mvneq	r0, r0, lsl #2
    3f78:	114e0101 	cmpne	lr, r1, lsl #2
    3f7c:	703a0000 	eorsvc	r0, sl, r0
    3f80:	2fe00100 	svccs	0x00e00100
    3f84:	0000089d 	muleq	r0, sp, r8
    3f88:	0076643a 	rsbseq	r6, r6, sl, lsr r4
    3f8c:	8136e001 	teqhi	r6, r1
    3f90:	00000000 	andeq	r0, r0, r0
    3f94:	000d483b 	andeq	r4, sp, fp, lsr r8
    3f98:	01cf0100 	biceq	r0, pc, r0, lsl #2
    3f9c:	00008101 	andeq	r8, r0, r1, lsl #2
    3fa0:	11810100 	orrne	r0, r1, r0, lsl #2
    3fa4:	6f3a0000 	svcvs	0x003a0000
    3fa8:	cf010071 	svcgt	0x00010071
    3fac:	00078a2b 	andeq	r8, r7, fp, lsr #20
    3fb0:	716e3c00 	cmnvc	lr, r0, lsl #24
    3fb4:	06d30100 	ldrbeq	r0, [r3], r0, lsl #2
    3fb8:	00000081 	andeq	r0, r0, r1, lsl #1
    3fbc:	0100623c 	tsteq	r0, ip, lsr r2
    3fc0:	089d0cd4 	ldmeq	sp, {r2, r4, r6, r7, sl, fp}
    3fc4:	3d000000 	stccc	0, cr0, [r0, #-0]
    3fc8:	00716e65 	rsbseq	r6, r1, r5, ror #28
    3fcc:	0101a801 	tsteq	r1, r1, lsl #16
    3fd0:	0011a401 	andseq	sl, r1, r1, lsl #8
    3fd4:	00713a00 	rsbseq	r3, r1, r0, lsl #20
    3fd8:	8a2aa801 	bhi	aadfe4 <__ccfg+0xa8e03c>
    3fdc:	3a000007 	bcc	4000 <__exidx_end+0x1208>
    3fe0:	a8010070 	stmdage	r1, {r4, r5, r6}
    3fe4:	00089d37 	andeq	r9, r8, r7, lsr sp
    3fe8:	643d0000 	ldrtvs	r0, [sp], #-0
    3fec:	01007165 	tsteq	r0, r5, ror #2
    3ff0:	0101017f 	tsteq	r1, pc, ror r1
    3ff4:	000011bd 			; <UNDEFINED> instruction: 0x000011bd
    3ff8:	0100703a 	tsteq	r0, sl, lsr r0
    3ffc:	089d2b7f 	ldmeq	sp, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, sp}
    4000:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4004:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    4010:	11f29c01 	mvnsne	r9, r1, lsl #24
    4014:	b23f0000 	eorslt	r0, pc, #0
    4018:	01000011 	tsteq	r0, r1, lsl r0
    401c:	11a44050 			; <UNDEFINED> instruction: 0x11a44050
	...
    4028:	7f010000 	svcvc	0x00010000
    402c:	11b22401 			; <UNDEFINED> instruction: 0x11b22401
    4030:	1c340000 	ldcne	0, cr0, [r4], #-0
    4034:	00000000 	andeq	r0, r0, r0
    4038:	0011813e 	andseq	r8, r1, lr, lsr r1
	...
    4044:	3b9c0100 	blcc	fe70444c <_estack+0xde6ff44c>
    4048:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    404c:	0000118f 	andeq	r1, r0, pc, lsl #3
    4050:	00001c47 	andeq	r1, r0, r7, asr #24
    4054:	00119924 	andseq	r9, r1, r4, lsr #18
    4058:	001c7b00 	andseq	r7, ip, r0, lsl #22
    405c:	11814000 	orrne	r4, r1, r0
	...
    4068:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    406c:	118f2401 	orrne	r2, pc, r1, lsl #8
    4070:	1caf0000 	stcne	0, cr0, [pc]	; 4078 <__exidx_end+0x1280>
    4074:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    4078:	cd000011 	stcgt	0, cr0, [r0, #-68]	; 0xffffffbc
    407c:	0000001c 	andeq	r0, r0, ip, lsl r0
    4080:	112a3e00 			; <UNDEFINED> instruction: 0x112a3e00
	...
    408c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4090:	00001280 	andeq	r1, r0, r0, lsl #5
    4094:	00113824 	andseq	r3, r1, r4, lsr #16
    4098:	001ceb00 	andseq	lr, ip, r0, lsl #22
    409c:	11422400 	cmpne	r2, r0, lsl #8
    40a0:	1d400000 	stclne	0, cr0, [r0, #-0]
    40a4:	2a410000 	bcs	10440ac <__ccfg+0x1024104>
    40a8:	00000011 	andeq	r0, r0, r1, lsl r0
    40ac:	e0000000 	and	r0, r0, r0
    40b0:	01000007 	tsteq	r0, r7
    40b4:	423301e0 	eorsmi	r0, r3, #224, 2	; 0x38
    40b8:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    40bc:	00001138 	andeq	r1, r0, r8, lsr r1
    40c0:	00001d53 	andeq	r1, r0, r3, asr sp
    40c4:	993e0000 	ldmdbls	lr!, {}	; <UNPREDICTABLE>
    40c8:	0000000b 	andeq	r0, r0, fp
    40cc:	00000000 	andeq	r0, r0, r0
    40d0:	01000000 	mrseq	r0, (UNDEF: 0)
    40d4:	0012d89c 	mulseq	r2, ip, r8
    40d8:	0bad2400 	bleq	feb4d0e0 <_estack+0xdeb480e0>
    40dc:	1d710000 	ldclne	0, cr0, [r1, #-0]
    40e0:	ba240000 	blt	9040e8 <__ccfg+0x8e4140>
    40e4:	8f00000b 	svchi	0x0000000b
    40e8:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    40ec:	00000bc7 	andeq	r0, r0, r7, asr #23
    40f0:	00001db8 			; <UNDEFINED> instruction: 0x00001db8
    40f4:	000b9932 	andeq	r9, fp, r2, lsr r9
	...
    4100:	03520100 	cmpeq	r2, #0, 2
    4104:	0bad3301 	bleq	feb50d10 <_estack+0xdeb4bd10>
    4108:	ba240000 	blt	904110 <__ccfg+0x8e4168>
    410c:	e100000b 	tst	r0, fp
    4110:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    4114:	00000bc7 	andeq	r0, r0, r7, asr #23
    4118:	00001df4 	strdeq	r1, [r0], -r4
    411c:	4a420000 	bmi	1084124 <__ccfg+0x106417c>
    4120:	0000000a 	andeq	r0, r0, sl
    4124:	00000000 	andeq	r0, r0, r0
    4128:	01000000 	mrseq	r0, (UNDEF: 0)
    412c:	0a5e249c 	beq	178d3a4 <__ccfg+0x176d3fc>
    4130:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    4134:	6b240000 	blvs	90413c <__ccfg+0x8e4194>
    4138:	1a00000a 	bne	4168 <__exidx_end+0x1370>
    413c:	2400001e 	strcs	r0, [r0], #-30	; 0xffffffe2
    4140:	00000a78 	andeq	r0, r0, r8, ror sl
    4144:	00001e7a 	andeq	r1, r0, sl, ror lr
    4148:	000a8526 	andeq	r8, sl, r6, lsr #10
    414c:	001ec400 	andseq	ip, lr, r0, lsl #8
    4150:	0a4a3200 	beq	1290958 <__ccfg+0x12709b0>
	...
    415c:	86010000 	strhi	r0, [r1], -r0
    4160:	5e330103 	rsfpls	f0, f3, f3
    4164:	2400000a 	strcs	r0, [r0], #-10
    4168:	00000a6b 	andeq	r0, r0, fp, ror #20
    416c:	00001ef8 	strdeq	r1, [r0], -r8
    4170:	000a7833 	andeq	r7, sl, r3, lsr r8
    4174:	0a854300 	beq	fe154d7c <_estack+0xde14fd7c>
    4178:	00000000 	andeq	r0, r0, r0
    417c:	00017400 	andeq	r7, r1, r0, lsl #8
    4180:	09000300 	stmdbeq	r0, {r8, r9}
    4184:	04000010 	streq	r0, [r0], #-16
    4188:	00012f01 	andeq	r2, r1, r1, lsl #30
    418c:	0f850c00 	svceq	0x00850c00
    4190:	03800000 	orreq	r0, r0, #0
    4194:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    4198:	00000000 	andeq	r0, r0, r0
    419c:	35eb0000 	strbcc	r0, [fp, #0]!
    41a0:	01020000 	mrseq	r0, (UNDEF: 2)
    41a4:	00037406 	andeq	r7, r3, r6, lsl #8
    41a8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    41ac:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    41b0:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    41b4:	02000000 	andeq	r0, r0, #0
    41b8:	009f0508 	addseq	r0, pc, r8, lsl #10
    41bc:	01020000 	mrseq	r0, (UNDEF: 2)
    41c0:	00037208 	andeq	r7, r3, r8, lsl #4
    41c4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    41c8:	00000230 	andeq	r0, r0, r0, lsr r2
    41cc:	0017c103 	andseq	ip, r7, r3, lsl #2
    41d0:	19340200 	ldmdbne	r4!, {r9}
    41d4:	0000005b 	andeq	r0, r0, fp, asr r0
    41d8:	79070402 	stmdbvc	r7, {r1, sl}
    41dc:	02000000 	andeq	r0, r0, #0
    41e0:	00740708 	rsbseq	r0, r4, r8, lsl #14
    41e4:	04040000 	streq	r0, [r4], #-0
    41e8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    41ec:	07040200 	streq	r0, [r4, -r0, lsl #4]
    41f0:	0000007e 	andeq	r0, r0, lr, ror r0
    41f4:	00820405 	addeq	r0, r2, r5, lsl #8
    41f8:	77060000 	strvc	r0, [r6, -r0]
    41fc:	07000000 	streq	r0, [r0, -r0]
    4200:	4f040501 	svcmi	0x00040501
    4204:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4208:	00000f78 	andeq	r0, r0, r8, ror pc
    420c:	4f117f01 	svcmi	0x00117f01
    4210:	01000000 	mrseq	r0, (UNDEF: 0)
    4214:	0f4c0801 	svceq	0x004c0801
    4218:	80010000 	andhi	r0, r1, r0
    421c:	00004f11 	andeq	r4, r0, r1, lsl pc
    4220:	08010100 	stmdaeq	r1, {r8}
    4224:	00000fc8 	andeq	r0, r0, r8, asr #31
    4228:	4f118101 	svcmi	0x00118101
    422c:	01000000 	mrseq	r0, (UNDEF: 0)
    4230:	0fc30801 	svceq	0x00c30801
    4234:	82010000 	andhi	r0, r1, #0
    4238:	00004f11 	andeq	r4, r0, r1, lsl pc
    423c:	08010100 	stmdaeq	r1, {r8}
    4240:	00000f7f 	andeq	r0, r0, pc, ror pc
    4244:	4f118301 	svcmi	0x00118301
    4248:	01000000 	mrseq	r0, (UNDEF: 0)
    424c:	0f440801 	svceq	0x00440801
    4250:	84010000 	strhi	r0, [r1], #-0
    4254:	00004f11 	andeq	r4, r0, r1, lsl pc
    4258:	09010100 	stmdbeq	r1, {r8}
    425c:	0000007d 	andeq	r0, r0, sp, ror r0
    4260:	000000ee 	andeq	r0, r0, lr, ror #1
    4264:	0000700a 	andeq	r7, r0, sl
    4268:	06003100 	streq	r3, [r0], -r0, lsl #2
    426c:	000000de 	ldrdeq	r0, [r0], -lr
    4270:	000fe10b 	andeq	lr, pc, fp, lsl #2
    4274:	0f8e0100 	svceq	0x008e0100
    4278:	000000ee 	andeq	r0, r0, lr, ror #1
    427c:	00030501 	andeq	r0, r3, r1, lsl #10
    4280:	0c000000 	stceq	0, cr0, [r0], {-0}
    4284:	00000fcf 	andeq	r0, r0, pc, asr #31
    4288:	01012801 	tsteq	r1, r1, lsl #16
    428c:	00156a01 	andseq	r6, r5, r1, lsl #20
    4290:	00156c00 	andseq	r6, r5, r0, lsl #24
    4294:	0c9c0100 	ldfeqs	f0, [ip], {0}
    4298:	00000f5b 	andeq	r0, r0, fp, asr pc
    429c:	01011601 	tsteq	r1, r1, lsl #12
    42a0:	00156801 	andseq	r6, r5, r1, lsl #16
    42a4:	00156a00 	andseq	r6, r5, r0, lsl #20
    42a8:	0c9c0100 	ldfeqs	f0, [ip], {0}
    42ac:	00000f6b 	andeq	r0, r0, fp, ror #30
    42b0:	01010401 	tsteq	r1, r1, lsl #8
    42b4:	00156601 	andseq	r6, r5, r1, lsl #12
    42b8:	00156800 	andseq	r6, r5, r0, lsl #16
    42bc:	0d9c0100 	ldfeqs	f0, [ip]
    42c0:	000ff801 	andeq	pc, pc, r1, lsl #16
    42c4:	01d20100 	bicseq	r0, r2, r0, lsl #2
    42c8:	00156c01 	andseq	r6, r5, r1, lsl #24
    42cc:	0015b000 	andseq	fp, r5, r0
    42d0:	0e9c0100 	fmleqe	f0, f4, f0
    42d4:	00000f52 	andeq	r0, r0, r2, asr pc
    42d8:	840fd401 	strhi	sp, [pc], #-1025	; 42e0 <__exidx_end+0x14e8>
    42dc:	0b000000 	bleq	42e4 <__exidx_end+0x14ec>
    42e0:	0e00001f 	mcreq	0, 0, r0, cr0, cr15, {0}
    42e4:	00000fee 	andeq	r0, r0, lr, ror #31
    42e8:	841ad401 	ldrhi	sp, [sl], #-1025	; 0xfffffbff
    42ec:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    42f0:	0000001f 	andeq	r0, r0, pc, lsl r0
    42f4:	00053700 	andeq	r3, r5, r0, lsl #14
    42f8:	ce000300 	cdpgt	3, 0, cr0, cr0, cr0, {0}
    42fc:	04000010 	streq	r0, [r0], #-16
    4300:	00012f01 	andeq	r2, r1, r1, lsl #30
    4304:	10580c00 	subsne	r0, r8, r0, lsl #24
    4308:	03800000 	orreq	r0, r0, #0
    430c:	37120000 	ldrcc	r0, [r2, -r0]
    4310:	01020000 	mrseq	r0, (UNDEF: 2)
    4314:	00037406 	andeq	r7, r3, r6, lsl #8
    4318:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    431c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4320:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    4324:	02000000 	andeq	r0, r0, #0
    4328:	009f0508 	addseq	r0, pc, r8, lsl #10
    432c:	0a030000 	beq	c4334 <__ccfg+0xa438c>
    4330:	01000022 	tsteq	r0, r2, lsr #32
    4334:	0045182e 	subeq	r1, r5, lr, lsr #16
    4338:	01020000 	mrseq	r0, (UNDEF: 2)
    433c:	00037208 	andeq	r7, r3, r8, lsl #4
    4340:	20f80300 	rscscs	r0, r8, r0, lsl #6
    4344:	31010000 	mrscc	r0, (UNDEF: 1)
    4348:	00005819 	andeq	r5, r0, r9, lsl r8
    434c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4350:	00000230 	andeq	r0, r0, r0, lsr r2
    4354:	0017c103 	andseq	ip, r7, r3, lsl #2
    4358:	19340100 	ldmdbne	r4!, {r8}
    435c:	0000006b 	andeq	r0, r0, fp, rrx
    4360:	79070402 	stmdbvc	r7, {r1, sl}
    4364:	02000000 	andeq	r0, r0, #0
    4368:	00740708 	rsbseq	r0, r4, r8, lsl #14
    436c:	04040000 	streq	r0, [r4], #-0
    4370:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4374:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4378:	0000007e 	andeq	r0, r0, lr, ror r0
    437c:	2f025805 	svccs	0x00025805
    4380:	0001af09 	andeq	sl, r1, r9, lsl #30
    4384:	11b20600 			; <UNDEFINED> instruction: 0x11b20600
    4388:	31020000 	mrscc	r0, (UNDEF: 2)
    438c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4390:	c7060000 	strgt	r0, [r6, -r0]
    4394:	02000010 	andeq	r0, r0, #16
    4398:	005f1032 	subseq	r1, pc, r2, lsr r0	; <UNPREDICTABLE>
    439c:	06040000 	streq	r0, [r4], -r0
    43a0:	0000108f 	andeq	r1, r0, pc, lsl #1
    43a4:	5f103302 	svcpl	0x00103302
    43a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    43ac:	00104206 	andseq	r4, r0, r6, lsl #4
    43b0:	10340200 	eorsne	r0, r4, r0, lsl #4
    43b4:	0000005f 	andeq	r0, r0, pc, asr r0
    43b8:	1001060c 	andne	r0, r1, ip, lsl #12
    43bc:	35020000 	strcc	r0, [r2, #-0]
    43c0:	00005f10 	andeq	r5, r0, r0, lsl pc
    43c4:	12061000 	andne	r1, r6, #0
    43c8:	02000010 	andeq	r0, r0, #16
    43cc:	005f1036 	subseq	r1, pc, r6, lsr r0	; <UNPREDICTABLE>
    43d0:	06140000 	ldreq	r0, [r4], -r0
    43d4:	00001032 	andeq	r1, r0, r2, lsr r0
    43d8:	5f103702 	svcpl	0x00103702
    43dc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    43e0:	00115706 	andseq	r5, r1, r6, lsl #14
    43e4:	10380200 	eorsne	r0, r8, r0, lsl #4
    43e8:	0000005f 	andeq	r0, r0, pc, asr r0
    43ec:	10a7061c 	adcne	r0, r7, ip, lsl r6
    43f0:	39020000 	stmdbcc	r2, {}	; <UNPREDICTABLE>
    43f4:	00005f10 	andeq	r5, r0, r0, lsl pc
    43f8:	b7062000 	strlt	r2, [r6, -r0]
    43fc:	02000010 	andeq	r0, r0, #16
    4400:	005f103a 	subseq	r1, pc, sl, lsr r0	; <UNPREDICTABLE>
    4404:	06240000 	strteq	r0, [r4], -r0
    4408:	0000117d 	andeq	r1, r0, sp, ror r1
    440c:	5f103b02 	svcpl	0x00103b02
    4410:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    4414:	00118d06 	andseq	r8, r1, r6, lsl #26
    4418:	103c0200 	eorsne	r0, ip, r0, lsl #4
    441c:	0000005f 	andeq	r0, r0, pc, asr r0
    4420:	1023062c 	eorne	r0, r3, ip, lsr #12
    4424:	3d020000 	stccc	0, cr0, [r2, #-0]
    4428:	00005f10 	andeq	r5, r0, r0, lsl pc
    442c:	1d063000 	stcne	0, cr3, [r6, #-0]
    4430:	02000011 	andeq	r0, r0, #17
    4434:	005f103e 	subseq	r1, pc, lr, lsr r0	; <UNPREDICTABLE>
    4438:	06340000 	ldrteq	r0, [r4], -r0
    443c:	000011c2 	andeq	r1, r0, r2, asr #3
    4440:	5f103f02 	svcpl	0x00103f02
    4444:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    4448:	0010d806 	andseq	sp, r0, r6, lsl #16
    444c:	10400200 	subne	r0, r0, r0, lsl #4
    4450:	0000005f 	andeq	r0, r0, pc, asr r0
    4454:	10ec063c 	rscne	r0, ip, ip, lsr r6
    4458:	41020000 	mrsmi	r0, (UNDEF: 2)
    445c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4460:	41064000 	mrsmi	r4, (UNDEF: 6)
    4464:	02000011 	andeq	r0, r0, #17
    4468:	005f1042 	subseq	r1, pc, r2, asr #32
    446c:	06440000 	strbeq	r0, [r4], -r0
    4470:	0000112d 	andeq	r1, r0, sp, lsr #2
    4474:	5f104302 	svcpl	0x00104302
    4478:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    447c:	00116806 	andseq	r6, r1, r6, lsl #16
    4480:	10440200 	subne	r0, r4, r0, lsl #4
    4484:	0000005f 	andeq	r0, r0, pc, asr r0
    4488:	119d064c 	orrsne	r0, sp, ip, asr #12
    448c:	45020000 	strmi	r0, [r2, #-0]
    4490:	00005f10 	andeq	r5, r0, r0, lsl pc
    4494:	07065000 	streq	r5, [r6, -r0]
    4498:	02000011 	andeq	r0, r0, #17
    449c:	005f1046 	subseq	r1, pc, r6, asr #32
    44a0:	00540000 	subseq	r0, r4, r0
    44a4:	00110003 	andseq	r0, r1, r3
    44a8:	03470200 	movteq	r0, #29184	; 0x7200
    44ac:	00000087 	andeq	r0, r0, r7, lsl #1
    44b0:	0001af07 	andeq	sl, r1, r7, lsl #30
    44b4:	10510800 	subsne	r0, r1, r0, lsl #16
    44b8:	4e020000 	cdpmi	0, 0, cr0, cr2, cr0, {0}
    44bc:	0001bb15 	andeq	fp, r1, r5, lsl fp
    44c0:	03010100 	movweq	r0, #4352	; 0x1100
    44c4:	000015ce 	andeq	r1, r0, lr, asr #11
    44c8:	4c122703 	ldcmi	7, cr2, [r2], {3}
    44cc:	07000000 	streq	r0, [r0, -r0]
    44d0:	000001ce 	andeq	r0, r0, lr, asr #3
    44d4:	0001ce09 	andeq	ip, r1, r9, lsl #28
    44d8:	13c60300 	bicne	r0, r6, #0, 6
    44dc:	2b030000 	blcs	c44e4 <__ccfg+0xa453c>
    44e0:	00003912 	andeq	r3, r0, r2, lsl r9
    44e4:	01e40900 	mvneq	r0, r0, lsl #18
    44e8:	1f030000 	svcne	0x00030000
    44ec:	03000016 	movweq	r0, #22
    44f0:	005f122c 	subseq	r1, pc, ip, lsr #4
    44f4:	f5070000 			; <UNDEFINED> instruction: 0xf5070000
    44f8:	03000001 	movweq	r0, #1
    44fc:	00000263 	andeq	r0, r0, r3, ror #4
    4500:	5f122d03 	svcpl	0x00122d03
    4504:	05000000 	streq	r0, [r0, #-0]
    4508:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    450c:	000002a0 	andeq	r0, r0, r0, lsr #5
    4510:	00027e0a 	andeq	r7, r2, sl, lsl #28
    4514:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    4518:	000001e4 	andeq	r0, r0, r4, ror #3
    451c:	00070101 	andeq	r0, r7, r1, lsl #2
    4520:	0000980a 	andeq	r9, r0, sl, lsl #16
    4524:	03350300 	teqeq	r5, #0, 6
    4528:	000001e4 	andeq	r0, r0, r4, ror #3
    452c:	00060101 	andeq	r0, r6, r1, lsl #2
    4530:	00024c0a 	andeq	r4, r2, sl, lsl #24
    4534:	03360300 	teqeq	r6, #0, 6
    4538:	000001e4 	andeq	r0, r0, r4, ror #3
    453c:	00050101 	andeq	r0, r5, r1, lsl #2
    4540:	0003ff0a 	andeq	pc, r3, sl, lsl #30
    4544:	03370300 	teqeq	r7, #0, 6
    4548:	000001e4 	andeq	r0, r0, r4, ror #3
    454c:	00040101 	andeq	r0, r4, r1, lsl #2
    4550:	0003f80a 	andeq	pc, r3, sl, lsl #16
    4554:	03380300 	teqeq	r8, #0, 6
    4558:	000001e4 	andeq	r0, r0, r4, ror #3
    455c:	00000401 	andeq	r0, r0, r1, lsl #8
    4560:	0003e906 	andeq	lr, r3, r6, lsl #18
    4564:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    4568:	000001e4 	andeq	r0, r0, r4, ror #3
    456c:	00400601 	subeq	r0, r0, r1, lsl #12
    4570:	3c030000 	stccc	0, cr0, [r3], {-0}
    4574:	0001e403 	andeq	lr, r1, r3, lsl #8
    4578:	6d060200 	sfmvs	f0, 4, [r6, #-0]
    457c:	03000000 	movweq	r0, #0
    4580:	01e4033d 	mvneq	r0, sp, lsr r3
    4584:	06030000 	streq	r0, [r3], -r0
    4588:	0000011e 	andeq	r0, r0, lr, lsl r1
    458c:	f5083f03 			; <UNDEFINED> instruction: 0xf5083f03
    4590:	04000001 	streq	r0, [r0], #-1
    4594:	04280300 	strteq	r0, [r8], #-768	; 0xfffffd00
    4598:	41030000 	mrsmi	r0, (UNDEF: 3)
    459c:	00021203 	andeq	r1, r2, r3, lsl #4
    45a0:	02a00900 	adceq	r0, r0, #0, 18
    45a4:	72080000 	andvc	r0, r8, #0
    45a8:	03000002 	movweq	r0, #2
    45ac:	02ac1a43 	adceq	r1, ip, #274432	; 0x43000
    45b0:	01010000 	mrseq	r0, (UNDEF: 1)
    45b4:	0002de08 	andeq	sp, r2, r8, lsl #28
    45b8:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    45bc:	000002cd 	andeq	r0, r0, sp, asr #5
    45c0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    45c4:	000002d3 	ldrdeq	r0, [r0], -r3
    45c8:	7b080102 	blvc	2049d8 <__ccfg+0x1e4a30>
    45cc:	07000003 	streq	r0, [r0, -r3]
    45d0:	000002d3 	ldrdeq	r0, [r0], -r3
    45d4:	0002ec08 	andeq	lr, r2, r8, lsl #24
    45d8:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    45dc:	000002cd 	andeq	r0, r0, sp, asr #5
    45e0:	08050101 	stmdaeq	r5, {r0, r8}
    45e4:	1e098f04 	cdpne	15, 0, cr8, cr9, cr4, {0}
    45e8:	06000003 	streq	r0, [r0], -r3
    45ec:	00000285 	andeq	r0, r0, r5, lsl #5
    45f0:	5f0b9004 	svcpl	0x000b9004
    45f4:	00000000 	andeq	r0, r0, r0
    45f8:	0005fb06 	andeq	pc, r5, r6, lsl #22
    45fc:	08910400 	ldmeq	r1, {sl}
    4600:	000001ce 	andeq	r0, r0, lr, asr #3
    4604:	046b0604 	strbteq	r0, [fp], #-1540	; 0xfffff9fc
    4608:	92040000 	andls	r0, r4, #0
    460c:	0001f010 	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
    4610:	03000600 	movweq	r0, #1536	; 0x600
    4614:	00000406 	andeq	r0, r0, r6, lsl #8
    4618:	ed039304 	stc	3, cr9, [r3, #-16]
    461c:	0c000002 	stceq	0, cr0, [r0], {2}
    4620:	0000031e 	andeq	r0, r0, lr, lsl r3
    4624:	00000335 	andeq	r0, r0, r5, lsr r3
    4628:	3608000d 	strcc	r0, [r8], -sp
    462c:	04000000 	streq	r0, [r0], #-0
    4630:	032a0f99 			; <UNDEFINED> instruction: 0x032a0f99
    4634:	01010000 	mrseq	r0, (UNDEF: 1)
    4638:	91050105 	tstls	r5, r5, lsl #2
    463c:	00036d09 	andeq	r6, r3, r9, lsl #26
    4640:	045e0a00 	ldrbeq	r0, [lr], #-2560	; 0xfffff600
    4644:	93050000 	movwls	r0, #20480	; 0x5000
    4648:	0001e407 	andeq	lr, r1, r7, lsl #8
    464c:	01070100 	mrseq	r0, (UNDEF: 23)
    4650:	00310a00 	eorseq	r0, r1, r0, lsl #20
    4654:	94050000 	strls	r0, [r5], #-0
    4658:	0001e403 	andeq	lr, r1, r3, lsl #8
    465c:	00010100 	andeq	r0, r1, r0, lsl #2
    4660:	43030000 	movwmi	r0, #12288	; 0x3000
    4664:	05000002 	streq	r0, [r0, #-2]
    4668:	03430396 	movteq	r0, #13206	; 0x3396
    466c:	6d070000 	stcvs	0, cr0, [r7, #-0]
    4670:	0c000003 	stceq	0, cr0, [r0], {3}
    4674:	00000379 	andeq	r0, r0, r9, ror r3
    4678:	00000389 	andeq	r0, r0, r9, lsl #7
    467c:	7e07000d 	cdpvc	0, 0, cr0, cr7, cr13, {0}
    4680:	08000003 	stmdaeq	r0, {r0, r1}
    4684:	000002a8 	andeq	r0, r0, r8, lsr #5
    4688:	89179c05 	ldmdbhi	r7, {r0, r2, sl, fp, ip, pc}
    468c:	01000003 	tsteq	r0, r3
    4690:	01da0c01 	bicseq	r0, sl, r1, lsl #24
    4694:	03a70000 			; <UNDEFINED> instruction: 0x03a70000
    4698:	000d0000 	andeq	r0, sp, r0
    469c:	00039c07 	andeq	r9, r3, r7, lsl #24
    46a0:	03640800 	cmneq	r4, #0, 16
    46a4:	06060000 	streq	r0, [r6], -r0
    46a8:	0003a713 	andeq	sl, r3, r3, lsl r7
    46ac:	08010100 	stmdaeq	r1, {r8}
    46b0:	000000fe 	strdeq	r0, [r0], -lr
    46b4:	f50ec304 			; <UNDEFINED> instruction: 0xf50ec304
    46b8:	01000001 	tsteq	r0, r1
    46bc:	04780e01 	ldrbteq	r0, [r8], #-3585	; 0xfffff1ff
    46c0:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    46c4:	03d51001 	bicseq	r1, r5, #1
    46c8:	040b0000 	streq	r0, [fp], #-0
    46cc:	000003db 	ldrdeq	r0, [r0], -fp
    46d0:	03e7010f 	mvneq	r0, #-1073741821	; 0xc0000003
    46d4:	ce100000 	cdpgt	0, 1, cr0, cr0, cr0, {0}
    46d8:	00000001 	andeq	r0, r0, r1
    46dc:	0002da0c 	andeq	sp, r2, ip, lsl #20
    46e0:	0003f200 	andeq	pc, r3, r0, lsl #4
    46e4:	07000d00 	streq	r0, [r0, -r0, lsl #26]
    46e8:	000003e7 	andeq	r0, r0, r7, ror #7
    46ec:	00043811 	andeq	r3, r4, r1, lsl r8
    46f0:	017f0700 	cmneq	pc, r0, lsl #14
    46f4:	0003f216 	andeq	pc, r3, r6, lsl r2	; <UNPREDICTABLE>
    46f8:	11010100 	mrsne	r0, (UNDEF: 17)
    46fc:	0000035c 	andeq	r0, r0, ip, asr r3
    4700:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    4704:	00000201 	andeq	r0, r0, r1, lsl #4
    4708:	63110101 	tstvs	r1, #1073741824	; 0x40000000
    470c:	07000004 	streq	r0, [r0, -r4]
    4710:	f50e02d8 			; <UNDEFINED> instruction: 0xf50e02d8
    4714:	01000001 	tsteq	r0, r1
    4718:	07081201 	streq	r1, [r8, -r1, lsl #4]
    471c:	4b090303 	blmi	245330 <__ccfg+0x225388>
    4720:	13000004 	movwne	r0, #4
    4724:	00002202 	andeq	r2, r0, r2, lsl #4
    4728:	07030707 	streq	r0, [r3, -r7, lsl #14]
    472c:	000001ce 	andeq	r0, r0, lr, asr #3
    4730:	054d1300 	strbeq	r1, [sp, #-768]	; 0xfffffd00
    4734:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    4738:	02060803 	andeq	r0, r6, #196608	; 0x30000
    473c:	00040000 	andeq	r0, r4, r0
    4740:	0002230e 	andeq	r2, r2, lr, lsl #6
    4744:	03090700 	movweq	r0, #38656	; 0x9700
    4748:	00042403 	andeq	r2, r4, r3, lsl #8
    474c:	04951400 	ldreq	r1, [r5], #1024	; 0x400
    4750:	07300000 	ldreq	r0, [r0, -r0]!
    4754:	bb08030b 	bllt	205388 <__ccfg+0x1e53e0>
    4758:	13000004 	movwne	r0, #4
    475c:	00000480 	andeq	r0, r0, r0, lsl #9
    4760:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    4764:	000001ce 	andeq	r0, r0, lr, asr #3
    4768:	028f1300 	addeq	r1, pc, #0, 6
    476c:	15070000 	strne	r0, [r7, #-0]
    4770:	01ce0803 	biceq	r0, lr, r3, lsl #16
    4774:	13020000 	movwne	r0, #8192	; 0x2000
    4778:	0000047b 	andeq	r0, r0, fp, ror r4
    477c:	0b031607 	bleq	c9fa0 <__ccfg+0xa9ff8>
    4780:	000003c8 	andeq	r0, r0, r8, asr #7
    4784:	0f4d1304 	svceq	0x004d1304
    4788:	17070000 	strne	r0, [r7, -r0]
    478c:	02060903 	andeq	r0, r6, #49152	; 0xc000
    4790:	13080000 	movwne	r0, #32768	; 0x8000
    4794:	00000431 	andeq	r0, r0, r1, lsr r4
    4798:	0f031807 	svceq	0x00031807
    479c:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    47a0:	028a130c 	addeq	r1, sl, #12, 6	; 0x30000000
    47a4:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    47a8:	04cb1503 	strbeq	r1, [fp], #1283	; 0x503
    47ac:	002c0000 	eoreq	r0, ip, r0
    47b0:	00044b0c 	andeq	r4, r4, ip, lsl #22
    47b4:	0004cb00 	andeq	ip, r4, r0, lsl #22
    47b8:	00801500 	addeq	r1, r0, r0, lsl #10
    47bc:	00030000 	andeq	r0, r3, r0
    47c0:	0458040b 	ldrbeq	r0, [r8], #-1035	; 0xfffffbf5
    47c4:	a00e0000 	andge	r0, lr, r0
    47c8:	07000004 	streq	r0, [r0, -r4]
    47cc:	581b031c 	ldmdapl	fp, {r2, r3, r4, r8, r9}
    47d0:	11000004 	tstne	r0, r4
    47d4:	00000352 	andeq	r0, r0, r2, asr r3
    47d8:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    47dc:	000004ed 	andeq	r0, r0, sp, ror #9
    47e0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    47e4:	000004d1 	ldrdeq	r0, [r0], -r1
    47e8:	0004bf08 	andeq	fp, r4, r8, lsl #30
    47ec:	131d0800 	tstne	sp, #0, 16
    47f0:	000001ce 	andeq	r0, r0, lr, asr #3
    47f4:	29080101 	stmdbcs	r8, {r0, r8}
    47f8:	08000007 	stmdaeq	r0, {r0, r1, r2}
    47fc:	01df1a1e 	bicseq	r1, pc, lr, lsl sl	; <UNPREDICTABLE>
    4800:	01010000 	mrseq	r0, (UNDEF: 1)
    4804:	0008b908 	andeq	fp, r8, r8, lsl #18
    4808:	241e0800 	ldrcs	r0, [lr], #-2048	; 0xfffff800
    480c:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4810:	e8080101 	stmda	r8, {r0, r8}
    4814:	08000005 	stmdaeq	r0, {r0, r2}
    4818:	04ed1422 	strbteq	r1, [sp], #1058	; 0x422
    481c:	01010000 	mrseq	r0, (UNDEF: 1)
    4820:	0001c016 	andeq	ip, r1, r6, lsl r0
    4824:	02170900 	andseq	r0, r7, #0, 18
    4828:	a803050e 	stmdage	r3, {r1, r2, r3, r8, sl}
    482c:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4830:	00000500 	andeq	r0, r0, r0, lsl #10
    4834:	11ed0003 	mvnne	r0, r3
    4838:	01040000 	mrseq	r0, (UNDEF: 4)
    483c:	0000012f 	andeq	r0, r0, pc, lsr #2
    4840:	0012090c 	andseq	r0, r2, ip, lsl #18
    4844:	00038000 	andeq	r8, r3, r0
    4848:	00096000 	andeq	r6, r9, r0
    484c:	00000000 	andeq	r0, r0, r0
    4850:	00389b00 	eorseq	r9, r8, r0, lsl #22
    4854:	06010200 	streq	r0, [r1], -r0, lsl #4
    4858:	00000374 	andeq	r0, r0, r4, ror r3
    485c:	d0050202 	andle	r0, r5, r2, lsl #4
    4860:	02000003 	andeq	r0, r0, #3
    4864:	00a40504 	adceq	r0, r4, r4, lsl #10
    4868:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    486c:	00009f05 	andeq	r9, r0, r5, lsl #30
    4870:	220a0300 	andcs	r0, sl, #0, 6
    4874:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    4878:	00004d18 	andeq	r4, r0, r8, lsl sp
    487c:	08010200 	stmdaeq	r1, {r9}
    4880:	00000372 	andeq	r0, r0, r2, ror r3
    4884:	0020f803 	eoreq	pc, r0, r3, lsl #16
    4888:	19310400 	ldmdbne	r1!, {sl}
    488c:	00000060 	andeq	r0, r0, r0, rrx
    4890:	30070202 	andcc	r0, r7, r2, lsl #4
    4894:	03000002 	movweq	r0, #2
    4898:	000017c1 	andeq	r1, r0, r1, asr #15
    489c:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    48a0:	02000000 	andeq	r0, r0, #0
    48a4:	00790704 	rsbseq	r0, r9, r4, lsl #14
    48a8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    48ac:	00007407 	andeq	r7, r0, r7, lsl #8
    48b0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    48b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    48b8:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    48bc:	03000000 	movweq	r0, #0
    48c0:	000015ce 	andeq	r1, r0, lr, asr #11
    48c4:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    48c8:	05000000 	streq	r0, [r0, #-0]
    48cc:	0000008f 	andeq	r0, r0, pc, lsl #1
    48d0:	00008f06 	andeq	r8, r0, r6, lsl #30
    48d4:	13c60300 	bicne	r0, r6, #0, 6
    48d8:	2b050000 	blcs	1448e0 <__ccfg+0x124938>
    48dc:	00004112 	andeq	r4, r0, r2, lsl r1
    48e0:	00a50600 	adceq	r0, r5, r0, lsl #12
    48e4:	a5050000 	strge	r0, [r5, #-0]
    48e8:	03000000 	movweq	r0, #0
    48ec:	0000161f 	andeq	r1, r0, pc, lsl r6
    48f0:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    48f4:	05000000 	streq	r0, [r0, #-0]
    48f8:	000000bb 	strheq	r0, [r0], -fp
    48fc:	00026303 	andeq	r6, r2, r3, lsl #6
    4900:	122d0500 	eorne	r0, sp, #0, 10
    4904:	00000067 	andeq	r0, r0, r7, rrx
    4908:	00077003 	andeq	r7, r7, r3
    490c:	102e0500 	eorne	r0, lr, r0, lsl #10
    4910:	000000e4 	andeq	r0, r0, r4, ror #1
    4914:	008f0407 	addeq	r0, pc, r7, lsl #8
    4918:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    491c:	78093205 	stmdavc	r9, {r0, r2, r9, ip, sp}
    4920:	09000001 	stmdbeq	r0, {r0}
    4924:	0000027e 	andeq	r0, r0, lr, ror r2
    4928:	a5073405 	strge	r3, [r7, #-1029]	; 0xfffffbfb
    492c:	01000000 	mrseq	r0, (UNDEF: 0)
    4930:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    4934:	00000098 	muleq	r0, r8, r0
    4938:	a5033505 	strge	r3, [r3, #-1285]	; 0xfffffafb
    493c:	01000000 	mrseq	r0, (UNDEF: 0)
    4940:	09000601 	stmdbeq	r0, {r0, r9, sl}
    4944:	0000024c 	andeq	r0, r0, ip, asr #4
    4948:	a5033605 	strge	r3, [r3, #-1541]	; 0xfffff9fb
    494c:	01000000 	mrseq	r0, (UNDEF: 0)
    4950:	09000501 	stmdbeq	r0, {r0, r8, sl}
    4954:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4958:	a5033705 	strge	r3, [r3, #-1797]	; 0xfffff8fb
    495c:	01000000 	mrseq	r0, (UNDEF: 0)
    4960:	09000401 	stmdbeq	r0, {r0, sl}
    4964:	000003f8 	strdeq	r0, [r0], -r8
    4968:	a5033805 	strge	r3, [r3, #-2053]	; 0xfffff7fb
    496c:	01000000 	mrseq	r0, (UNDEF: 0)
    4970:	0a000004 	beq	4988 <__exidx_end+0x1b90>
    4974:	000003e9 	andeq	r0, r0, r9, ror #7
    4978:	a5073a05 	strge	r3, [r7, #-2565]	; 0xfffff5fb
    497c:	01000000 	mrseq	r0, (UNDEF: 0)
    4980:	0000400a 	andeq	r4, r0, sl
    4984:	033c0500 	teqeq	ip, #0, 10
    4988:	000000a5 	andeq	r0, r0, r5, lsr #1
    498c:	006d0a02 	rsbeq	r0, sp, r2, lsl #20
    4990:	3d050000 	stccc	0, cr0, [r5, #-0]
    4994:	0000a503 	andeq	sl, r0, r3, lsl #10
    4998:	1e0a0300 	cdpne	3, 0, cr0, cr10, cr0, {0}
    499c:	05000001 	streq	r0, [r0, #-1]
    49a0:	00bb083f 	adcseq	r0, fp, pc, lsr r8
    49a4:	00040000 	andeq	r0, r4, r0
    49a8:	00042803 	andeq	r2, r4, r3, lsl #16
    49ac:	03410500 	movteq	r0, #5376	; 0x1500
    49b0:	000000ea 	andeq	r0, r0, sl, ror #1
    49b4:	00017806 	andeq	r7, r1, r6, lsl #16
    49b8:	02720b00 	rsbseq	r0, r2, #0, 22
    49bc:	43050000 	movwmi	r0, #20480	; 0x5000
    49c0:	0001841a 	andeq	r8, r1, sl, lsl r4
    49c4:	0b010100 	bleq	44dcc <__ccfg+0x24e24>
    49c8:	000002de 	ldrdeq	r0, [r0], -lr
    49cc:	a50e4505 	strge	r4, [lr, #-1285]	; 0xfffffafb
    49d0:	01000001 	tsteq	r0, r1
    49d4:	ab040701 	blge	1065e0 <__ccfg+0xe6638>
    49d8:	02000001 	andeq	r0, r0, #1
    49dc:	037b0801 	cmneq	fp, #65536	; 0x10000
    49e0:	ab050000 	blge	1449e8 <__ccfg+0x124a40>
    49e4:	0b000001 	bleq	49f0 <__exidx_end+0x1bf8>
    49e8:	000002ec 	andeq	r0, r0, ip, ror #5
    49ec:	a51e4505 	ldrge	r4, [lr, #-1285]	; 0xfffffafb
    49f0:	01000001 	tsteq	r0, r1
    49f4:	06080801 	streq	r0, [r8], -r1, lsl #16
    49f8:	01f6098f 	mvnseq	r0, pc, lsl #19
    49fc:	850a0000 	strhi	r0, [sl, #-0]
    4a00:	06000002 	streq	r0, [r0], -r2
    4a04:	00670b90 	mlseq	r7, r0, fp, r0
    4a08:	0a000000 	beq	4a10 <__exidx_end+0x1c18>
    4a0c:	000005fb 	strdeq	r0, [r0], -fp
    4a10:	8f089106 	svchi	0x00089106
    4a14:	04000000 	streq	r0, [r0], #-0
    4a18:	00046b0a 	andeq	r6, r4, sl, lsl #22
    4a1c:	10920600 	addsne	r0, r2, r0, lsl #12
    4a20:	000000b1 	strheq	r0, [r0], -r1
    4a24:	06030006 	streq	r0, [r3], -r6
    4a28:	06000004 	streq	r0, [r0], -r4
    4a2c:	01c50393 			; <UNDEFINED> instruction: 0x01c50393
    4a30:	f60c0000 			; <UNDEFINED> instruction: 0xf60c0000
    4a34:	0d000001 	stceq	0, cr0, [r0, #-4]
    4a38:	0d000002 	stceq	0, cr0, [r0, #-8]
    4a3c:	00360b00 	eorseq	r0, r6, r0, lsl #22
    4a40:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    4a44:	0002020f 	andeq	r0, r2, pc, lsl #4
    4a48:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4a4c:	0000b604 	andeq	fp, r0, r4, lsl #12
    4a50:	07010800 	streq	r0, [r1, -r0, lsl #16]
    4a54:	024b0991 	subeq	r0, fp, #2375680	; 0x244000
    4a58:	5e090000 	cdppl	0, 0, cr0, cr9, cr0, {0}
    4a5c:	07000004 	streq	r0, [r0, -r4]
    4a60:	00a50793 	umlaleq	r0, r5, r3, r7
    4a64:	07010000 	streq	r0, [r1, -r0]
    4a68:	31090001 	tstcc	r9, r1
    4a6c:	07000000 	streq	r0, [r0, -r0]
    4a70:	00a50394 	umlaleq	r0, r5, r4, r3
    4a74:	01010000 	mrseq	r0, (UNDEF: 1)
    4a78:	03000000 	movweq	r0, #0
    4a7c:	00000243 	andeq	r0, r0, r3, asr #4
    4a80:	21039607 	tstcs	r3, r7, lsl #12
    4a84:	05000002 	streq	r0, [r0, #-2]
    4a88:	0000024b 	andeq	r0, r0, fp, asr #4
    4a8c:	0002570c 	andeq	r5, r2, ip, lsl #14
    4a90:	00026700 	andeq	r6, r2, r0, lsl #14
    4a94:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4a98:	0000025c 	andeq	r0, r0, ip, asr r2
    4a9c:	0002a80b 	andeq	sl, r2, fp, lsl #16
    4aa0:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    4aa4:	00000267 	andeq	r0, r0, r7, ror #4
    4aa8:	9b0c0101 	blls	304eb4 <__ccfg+0x2e4f0c>
    4aac:	85000000 	strhi	r0, [r0, #-0]
    4ab0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4ab4:	027a0500 	rsbseq	r0, sl, #0, 10
    4ab8:	640b0000 	strvs	r0, [fp], #-0
    4abc:	08000003 	stmdaeq	r0, {r0, r1}
    4ac0:	02851306 	addeq	r1, r5, #402653184	; 0x18000000
    4ac4:	01010000 	mrseq	r0, (UNDEF: 1)
    4ac8:	0000fe0b 	andeq	pc, r0, fp, lsl #28
    4acc:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    4ad0:	000000bb 	strheq	r0, [r0], -fp
    4ad4:	780e0101 	stmdavc	lr, {r0, r8}
    4ad8:	09000004 	stmdbeq	r0, {r2}
    4adc:	b310016e 	tstlt	r0, #-2147483621	; 0x8000001b
    4ae0:	07000002 	streq	r0, [r0, -r2]
    4ae4:	0002b904 	andeq	fp, r2, r4, lsl #18
    4ae8:	c5010f00 	strgt	r0, [r1, #-3840]	; 0xfffff100
    4aec:	10000002 	andne	r0, r0, r2
    4af0:	0000008f 	andeq	r0, r0, pc, lsl #1
    4af4:	01b20c00 			; <UNDEFINED> instruction: 0x01b20c00
    4af8:	02d00000 	sbcseq	r0, r0, #0
    4afc:	000d0000 	andeq	r0, sp, r0
    4b00:	0002c505 	andeq	ip, r2, r5, lsl #10
    4b04:	04381100 	ldrteq	r1, [r8], #-256	; 0xffffff00
    4b08:	7f090000 	svcvc	0x00090000
    4b0c:	02d01601 	sbcseq	r1, r0, #1048576	; 0x100000
    4b10:	01010000 	mrseq	r0, (UNDEF: 1)
    4b14:	00035c11 	andeq	r5, r3, r1, lsl ip
    4b18:	01820900 	orreq	r0, r2, r0, lsl #18
    4b1c:	0000c714 	andeq	ip, r0, r4, lsl r7
    4b20:	11010100 	mrsne	r0, (UNDEF: 17)
    4b24:	00000463 	andeq	r0, r0, r3, ror #8
    4b28:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    4b2c:	000000bb 	strheq	r0, [r0], -fp
    4b30:	08120101 	ldmdaeq	r2, {r0, r8}
    4b34:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    4b38:	00000329 	andeq	r0, r0, r9, lsr #6
    4b3c:	00220213 	eoreq	r0, r2, r3, lsl r2
    4b40:	03070900 	movweq	r0, #30976	; 0x7900
    4b44:	00008f07 	andeq	r8, r0, r7, lsl #30
    4b48:	4d130000 	ldcmi	0, cr0, [r3, #-0]
    4b4c:	09000005 	stmdbeq	r0, {r0, r2}
    4b50:	cc080308 	stcgt	3, cr0, [r8], {8}
    4b54:	04000000 	streq	r0, [r0], #-0
    4b58:	02230e00 	eoreq	r0, r3, #0, 28
    4b5c:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    4b60:	03020303 	movweq	r0, #8963	; 0x2303
    4b64:	95140000 	ldrls	r0, [r4, #-0]
    4b68:	30000004 	andcc	r0, r0, r4
    4b6c:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    4b70:	00000399 	muleq	r0, r9, r3
    4b74:	00048013 	andeq	r8, r4, r3, lsl r0
    4b78:	03140900 	tsteq	r4, #0, 18
    4b7c:	00008f08 	andeq	r8, r0, r8, lsl #30
    4b80:	8f130000 	svchi	0x00130000
    4b84:	09000002 	stmdbeq	r0, {r1}
    4b88:	8f080315 	svchi	0x00080315
    4b8c:	02000000 	andeq	r0, r0, #0
    4b90:	00047b13 	andeq	r7, r4, r3, lsl fp
    4b94:	03160900 	tsteq	r6, #0, 18
    4b98:	0002a60b 	andeq	sl, r2, fp, lsl #12
    4b9c:	4d130400 	cfldrsmi	mvf0, [r3, #-0]
    4ba0:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    4ba4:	cc090317 	stcgt	3, cr0, [r9], {23}
    4ba8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4bac:	00043113 	andeq	r3, r4, r3, lsl r1
    4bb0:	03180900 	tsteq	r8, #0, 18
    4bb4:	0003990f 	andeq	r9, r3, pc, lsl #18
    4bb8:	8a130c00 	bhi	4c7bc0 <__ccfg+0x4a7c18>
    4bbc:	09000002 	stmdbeq	r0, {r1}
    4bc0:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    4bc4:	2c000003 	stccs	0, cr0, [r0], {3}
    4bc8:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
    4bcc:	03a90000 			; <UNDEFINED> instruction: 0x03a90000
    4bd0:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    4bd4:	03000000 	movweq	r0, #0
    4bd8:	36040700 	strcc	r0, [r4], -r0, lsl #14
    4bdc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    4be0:	000004a0 	andeq	r0, r0, r0, lsr #9
    4be4:	1b031c09 	blne	cbc10 <__ccfg+0xabc68>
    4be8:	00000336 	andeq	r0, r0, r6, lsr r3
    4bec:	00035211 	andeq	r5, r3, r1, lsl r2
    4bf0:	031e0900 	tsteq	lr, #0, 18
    4bf4:	0003cb14 	andeq	ip, r3, r4, lsl fp
    4bf8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4bfc:	0003af04 	andeq	sl, r3, r4, lsl #30
    4c00:	04bf0b00 	ldrteq	r0, [pc], #2816	; 4c08 <__exidx_end+0x1e10>
    4c04:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    4c08:	00008f13 	andeq	r8, r0, r3, lsl pc
    4c0c:	0b010100 	bleq	45014 <__ccfg+0x2506c>
    4c10:	00000729 	andeq	r0, r0, r9, lsr #14
    4c14:	a01a1e0a 	andsge	r1, sl, sl, lsl #28
    4c18:	01000000 	mrseq	r0, (UNDEF: 0)
    4c1c:	08b90b01 	ldmeq	r9!, {r0, r8, r9, fp}
    4c20:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    4c24:	0000a024 	andeq	sl, r0, r4, lsr #32
    4c28:	0b010100 	bleq	45030 <__ccfg+0x25088>
    4c2c:	000005e8 	andeq	r0, r0, r8, ror #11
    4c30:	cb14220a 	blgt	50d460 <__ccfg+0x4ed4b8>
    4c34:	01000003 	tsteq	r0, r3
    4c38:	026c1601 	rsbeq	r1, ip, #1048576	; 0x100000
    4c3c:	0d010000 	stceq	0, cr0, [r1, #-0]
    4c40:	f0030510 			; <UNDEFINED> instruction: 0xf0030510
    4c44:	1700002d 	strne	r0, [r0, -sp, lsr #32]
    4c48:	0011e901 	andseq	lr, r1, r1, lsl #18
    4c4c:	06110100 	ldreq	r0, [r1], -r0, lsl #2
    4c50:	00000001 	andeq	r0, r0, r1
    4c54:	00000000 	andeq	r0, r0, r0
    4c58:	bb9c0100 	bllt	fe705060 <_estack+0xde700060>
    4c5c:	18000004 	stmdane	r0, {r2}
    4c60:	01007473 	tsteq	r0, r3, ror r4
    4c64:	008f1c11 	addeq	r1, pc, r1, lsl ip	; <UNPREDICTABLE>
    4c68:	1f470000 	svcne	0x00470000
    4c6c:	e4190000 	ldr	r0, [r9], #-0
    4c70:	01000011 	tsteq	r0, r1, lsl r0
    4c74:	021b2c11 	andseq	r2, fp, #4352	; 0x1100
    4c78:	1f650000 	svcne	0x00650000
    4c7c:	76180000 	ldrvc	r0, [r8], -r0
    4c80:	01006c61 	tsteq	r0, r1, ror #24
    4c84:	00d83a11 	sbcseq	r3, r8, r1, lsl sl
    4c88:	1f830000 	svcne	0x00830000
    4c8c:	701a0000 	andsvc	r0, sl, r0
    4c90:	12130100 	andsne	r0, r3, #0, 2
    4c94:	000004bb 			; <UNDEFINED> instruction: 0x000004bb
    4c98:	0100691b 	tsteq	r0, fp, lsl r9
    4c9c:	008f0714 	addeq	r0, pc, r4, lsl r7	; <UNPREDICTABLE>
    4ca0:	1fa10000 	svcne	0x00a10000
    4ca4:	761a0000 	ldrvc	r0, [sl], -r0
    4ca8:	07150100 	ldreq	r0, [r5, -r0, lsl #2]
    4cac:	000000a5 	andeq	r0, r0, r5, lsr #1
    4cb0:	0004d41c 	andeq	sp, r4, ip, lsl r4
	...
    4cbc:	031c0100 	tsteq	ip, #0, 2
    4cc0:	0004de1c 	andeq	sp, r4, ip, lsl lr
	...
    4ccc:	031f0100 	tsteq	pc, #0, 2
    4cd0:	0004e81d 	andeq	lr, r4, sp, lsl r8
    4cd4:	00000000 	andeq	r0, r0, r0
    4cd8:	00093800 	andeq	r3, r9, r0, lsl #16
    4cdc:	0b260100 	bleq	9850e4 <__ccfg+0x96513c>
    4ce0:	0004f61e 	andeq	pc, r4, lr, lsl r6	; <UNPREDICTABLE>
    4ce4:	001fb400 	andseq	fp, pc, r0, lsl #8
    4ce8:	07000000 	streq	r0, [r0, -r0]
    4cec:	00025704 	andeq	r5, r2, r4, lsl #14
    4cf0:	f9011f00 			; <UNDEFINED> instruction: 0xf9011f00
    4cf4:	01000011 	tsteq	r0, r1, lsl r0
    4cf8:	0000060f 	andeq	r0, r0, pc, lsl #12
    4cfc:	00000000 	andeq	r0, r0, r0
    4d00:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d04:	00080b20 	andeq	r0, r8, r0, lsr #22
    4d08:	355b0200 	ldrbcc	r0, [fp, #-512]	; 0xfffffe00
    4d0c:	1e200301 	cdpne	3, 2, cr0, cr0, cr1, {0}
    4d10:	02000005 	andeq	r0, r0, #5
    4d14:	03013550 	movweq	r3, #5456	; 0x1550
    4d18:	0011d721 	andseq	sp, r1, r1, lsr #14
    4d1c:	01a40300 			; <UNDEFINED> instruction: 0x01a40300
    4d20:	00006701 	andeq	r6, r0, r1, lsl #14
    4d24:	25220300 	strcs	r0, [r2, #-768]!	; 0xfffffd00
    4d28:	03000001 	movweq	r0, #1
    4d2c:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    4d30:	00000000 	andeq	r0, r0, r0
    4d34:	000004f6 	strdeq	r0, [r0], -r6
    4d38:	13de0003 	bicsne	r0, lr, #3
    4d3c:	01040000 	mrseq	r0, (UNDEF: 4)
    4d40:	0000012f 	andeq	r0, r0, pc, lsr #2
    4d44:	0012630c 	andseq	r6, r2, ip, lsl #6
    4d48:	00038000 	andeq	r8, r3, r0
    4d4c:	0009d800 	andeq	sp, r9, r0, lsl #16
    4d50:	00000000 	andeq	r0, r0, r0
    4d54:	003b3800 	eorseq	r3, fp, r0, lsl #16
    4d58:	06010200 	streq	r0, [r1], -r0, lsl #4
    4d5c:	00000374 	andeq	r0, r0, r4, ror r3
    4d60:	d0050202 	andle	r0, r5, r2, lsl #4
    4d64:	02000003 	andeq	r0, r0, #3
    4d68:	00a40504 	adceq	r0, r4, r4, lsl #10
    4d6c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4d70:	00009f05 	andeq	r9, r0, r5, lsl #30
    4d74:	220a0300 	andcs	r0, sl, #0, 6
    4d78:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
    4d7c:	00004d18 	andeq	r4, r0, r8, lsl sp
    4d80:	08010200 	stmdaeq	r1, {r9}
    4d84:	00000372 	andeq	r0, r0, r2, ror r3
    4d88:	0020f803 	eoreq	pc, r0, r3, lsl #16
    4d8c:	19310300 	ldmdbne	r1!, {r8, r9}
    4d90:	00000060 	andeq	r0, r0, r0, rrx
    4d94:	30070202 	andcc	r0, r7, r2, lsl #4
    4d98:	03000002 	movweq	r0, #2
    4d9c:	000017c1 	andeq	r1, r0, r1, asr #15
    4da0:	73193403 	tstvc	r9, #50331648	; 0x3000000
    4da4:	02000000 	andeq	r0, r0, #0
    4da8:	00790704 	rsbseq	r0, r9, r4, lsl #14
    4dac:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4db0:	00007407 	andeq	r7, r0, r7, lsl #8
    4db4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    4db8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    4dbc:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    4dc0:	03000000 	movweq	r0, #0
    4dc4:	000015ce 	andeq	r1, r0, lr, asr #11
    4dc8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    4dcc:	05000000 	streq	r0, [r0, #-0]
    4dd0:	0000008f 	andeq	r0, r0, pc, lsl #1
    4dd4:	00008f06 	andeq	r8, r0, r6, lsl #30
    4dd8:	13c60300 	bicne	r0, r6, #0, 6
    4ddc:	2b040000 	blcs	104de4 <__ccfg+0xe4e3c>
    4de0:	00004112 	andeq	r4, r0, r2, lsl r1
    4de4:	00a50600 	adceq	r0, r5, r0, lsl #12
    4de8:	1f030000 	svcne	0x00030000
    4dec:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    4df0:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    4df4:	b6050000 	strlt	r0, [r5], -r0
    4df8:	03000000 	movweq	r0, #0
    4dfc:	00000263 	andeq	r0, r0, r3, ror #4
    4e00:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    4e04:	07000000 	streq	r0, [r0, -r0]
    4e08:	09320408 	ldmdbeq	r2!, {r3, sl}
    4e0c:	00000161 	andeq	r0, r0, r1, ror #2
    4e10:	00027e08 	andeq	r7, r2, r8, lsl #28
    4e14:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    4e18:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e1c:	00070101 	andeq	r0, r7, r1, lsl #2
    4e20:	00009808 	andeq	r9, r0, r8, lsl #16
    4e24:	03350400 	teqeq	r5, #0, 8
    4e28:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e2c:	00060101 	andeq	r0, r6, r1, lsl #2
    4e30:	00024c08 	andeq	r4, r2, r8, lsl #24
    4e34:	03360400 	teqeq	r6, #0, 8
    4e38:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e3c:	00050101 	andeq	r0, r5, r1, lsl #2
    4e40:	0003ff08 	andeq	pc, r3, r8, lsl #30
    4e44:	03370400 	teqeq	r7, #0, 8
    4e48:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e4c:	00040101 	andeq	r0, r4, r1, lsl #2
    4e50:	0003f808 	andeq	pc, r3, r8, lsl #16
    4e54:	03380400 	teqeq	r8, #0, 8
    4e58:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e5c:	00000401 	andeq	r0, r0, r1, lsl #8
    4e60:	0003e909 	andeq	lr, r3, r9, lsl #18
    4e64:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    4e68:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e6c:	00400901 	subeq	r0, r0, r1, lsl #18
    4e70:	3c040000 	stccc	0, cr0, [r4], {-0}
    4e74:	0000a503 	andeq	sl, r0, r3, lsl #10
    4e78:	6d090200 	sfmvs	f0, 4, [r9, #-0]
    4e7c:	04000000 	streq	r0, [r0], #-0
    4e80:	00a5033d 	adceq	r0, r5, sp, lsr r3
    4e84:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    4e88:	0000011e 	andeq	r0, r0, lr, lsl r1
    4e8c:	b6083f04 	strlt	r3, [r8], -r4, lsl #30
    4e90:	04000000 	streq	r0, [r0], #-0
    4e94:	04280300 	strteq	r0, [r8], #-768	; 0xfffffd00
    4e98:	41040000 	mrsmi	r0, (UNDEF: 4)
    4e9c:	0000d303 	andeq	sp, r0, r3, lsl #6
    4ea0:	01610600 	cmneq	r1, r0, lsl #12
    4ea4:	720a0000 	andvc	r0, sl, #0
    4ea8:	04000002 	streq	r0, [r0], #-2
    4eac:	016d1a43 	cmneq	sp, r3, asr #20
    4eb0:	01010000 	mrseq	r0, (UNDEF: 1)
    4eb4:	0002de0a 	andeq	sp, r2, sl, lsl #28
    4eb8:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    4ebc:	0000018e 	andeq	r0, r0, lr, lsl #3
    4ec0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    4ec4:	00000194 	muleq	r0, r4, r1
    4ec8:	7b080102 	blvc	2052d8 <__ccfg+0x1e5330>
    4ecc:	05000003 	streq	r0, [r0, #-3]
    4ed0:	00000194 	muleq	r0, r4, r1
    4ed4:	0002ec0a 	andeq	lr, r2, sl, lsl #24
    4ed8:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    4edc:	0000018e 	andeq	r0, r0, lr, lsl #3
    4ee0:	08070101 	stmdaeq	r7, {r0, r8}
    4ee4:	df098f05 	svcle	0x00098f05
    4ee8:	09000001 	stmdbeq	r0, {r0}
    4eec:	00000285 	andeq	r0, r0, r5, lsl #5
    4ef0:	670b9005 	strvs	r9, [fp, -r5]
    4ef4:	00000000 	andeq	r0, r0, r0
    4ef8:	0005fb09 	andeq	pc, r5, r9, lsl #22
    4efc:	08910500 	ldmeq	r1, {r8, sl}
    4f00:	0000008f 	andeq	r0, r0, pc, lsl #1
    4f04:	046b0904 	strbteq	r0, [fp], #-2308	; 0xfffff6fc
    4f08:	92050000 	andls	r0, r5, #0
    4f0c:	0000b110 	andeq	fp, r0, r0, lsl r1
    4f10:	03000600 	movweq	r0, #1536	; 0x600
    4f14:	00000406 	andeq	r0, r0, r6, lsl #8
    4f18:	ae039305 	cdpge	3, 0, cr9, cr3, cr5, {0}
    4f1c:	0c000001 	stceq	0, cr0, [r0], {1}
    4f20:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4f24:	000001f6 	strdeq	r0, [r0], -r6
    4f28:	360a000d 	strcc	r0, [sl], -sp
    4f2c:	05000000 	streq	r0, [r0, #-0]
    4f30:	01eb0f99 	strexheq	r0, r9, [fp]
    4f34:	01010000 	mrseq	r0, (UNDEF: 1)
    4f38:	91060107 	tstls	r6, r7, lsl #2
    4f3c:	00022e09 	andeq	r2, r2, r9, lsl #28
    4f40:	045e0800 	ldrbeq	r0, [lr], #-2048	; 0xfffff800
    4f44:	93060000 	movwls	r0, #24576	; 0x6000
    4f48:	0000a507 	andeq	sl, r0, r7, lsl #10
    4f4c:	01070100 	mrseq	r0, (UNDEF: 23)
    4f50:	00310800 	eorseq	r0, r1, r0, lsl #16
    4f54:	94060000 	strls	r0, [r6], #-0
    4f58:	0000a503 	andeq	sl, r0, r3, lsl #10
    4f5c:	00010100 	andeq	r0, r1, r0, lsl #2
    4f60:	43030000 	movwmi	r0, #12288	; 0x3000
    4f64:	06000002 	streq	r0, [r0], -r2
    4f68:	02040396 	andeq	r0, r4, #1476395010	; 0x58000002
    4f6c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    4f70:	0c000002 	stceq	0, cr0, [r0], {2}
    4f74:	0000023a 	andeq	r0, r0, sl, lsr r2
    4f78:	0000024a 	andeq	r0, r0, sl, asr #4
    4f7c:	3f05000d 	svccc	0x0005000d
    4f80:	0a000002 	beq	4f90 <__exidx_end+0x2198>
    4f84:	000002a8 	andeq	r0, r0, r8, lsr #5
    4f88:	4a179c06 	bmi	5ebfa8 <__ccfg+0x5cc000>
    4f8c:	01000002 	tsteq	r0, r2
    4f90:	009b0c01 	addseq	r0, fp, r1, lsl #24
    4f94:	02680000 	rsbeq	r0, r8, #0
    4f98:	000d0000 	andeq	r0, sp, r0
    4f9c:	00025d05 	andeq	r5, r2, r5, lsl #26
    4fa0:	03640a00 	cmneq	r4, #0, 20
    4fa4:	06070000 	streq	r0, [r7], -r0
    4fa8:	00026813 	andeq	r6, r2, r3, lsl r8
    4fac:	0a010100 	beq	453b4 <__ccfg+0x2540c>
    4fb0:	000000fe 	strdeq	r0, [r0], -lr
    4fb4:	b60ec305 	strlt	ip, [lr], -r5, lsl #6
    4fb8:	01000000 	mrseq	r0, (UNDEF: 0)
    4fbc:	04780e01 	ldrbteq	r0, [r8], #-3585	; 0xfffff1ff
    4fc0:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    4fc4:	02961001 	addseq	r1, r6, #1
    4fc8:	040b0000 	streq	r0, [fp], #-0
    4fcc:	0000029c 	muleq	r0, ip, r2
    4fd0:	02a8010f 	adceq	r0, r8, #-1073741821	; 0xc0000003
    4fd4:	8f100000 	svchi	0x00100000
    4fd8:	00000000 	andeq	r0, r0, r0
    4fdc:	00019b0c 	andeq	r9, r1, ip, lsl #22
    4fe0:	0002b300 	andeq	fp, r2, r0, lsl #6
    4fe4:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4fe8:	000002a8 	andeq	r0, r0, r8, lsr #5
    4fec:	00043811 	andeq	r3, r4, r1, lsl r8
    4ff0:	017f0800 	cmneq	pc, r0, lsl #16
    4ff4:	0002b316 	andeq	fp, r2, r6, lsl r3
    4ff8:	11010100 	mrsne	r0, (UNDEF: 17)
    4ffc:	0000035c 	andeq	r0, r0, ip, asr r3
    5000:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    5004:	000000c2 	andeq	r0, r0, r2, asr #1
    5008:	63110101 	tstvs	r1, #1073741824	; 0x40000000
    500c:	08000004 	stmdaeq	r0, {r2}
    5010:	b60e02d8 			; <UNDEFINED> instruction: 0xb60e02d8
    5014:	01000000 	mrseq	r0, (UNDEF: 0)
    5018:	08081201 	stmdaeq	r8, {r0, r9, ip}
    501c:	0c090303 	stceq	3, cr0, [r9], {3}
    5020:	13000003 	movwne	r0, #3
    5024:	00002202 	andeq	r2, r0, r2, lsl #4
    5028:	07030708 	streq	r0, [r3, -r8, lsl #14]
    502c:	0000008f 	andeq	r0, r0, pc, lsl #1
    5030:	054d1300 	strbeq	r1, [sp, #-768]	; 0xfffffd00
    5034:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    5038:	00c70803 	sbceq	r0, r7, r3, lsl #16
    503c:	00040000 	andeq	r0, r4, r0
    5040:	0002230e 	andeq	r2, r2, lr, lsl #6
    5044:	03090800 	movweq	r0, #38912	; 0x9800
    5048:	0002e503 	andeq	lr, r2, r3, lsl #10
    504c:	04951400 	ldreq	r1, [r5], #1024	; 0x400
    5050:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    5054:	7c08030b 	stcvc	3, cr0, [r8], {11}
    5058:	13000003 	movwne	r0, #3
    505c:	00000480 	andeq	r0, r0, r0, lsl #9
    5060:	08031408 	stmdaeq	r3, {r3, sl, ip}
    5064:	0000008f 	andeq	r0, r0, pc, lsl #1
    5068:	028f1300 	addeq	r1, pc, #0, 6
    506c:	15080000 	strne	r0, [r8, #-0]
    5070:	008f0803 	addeq	r0, pc, r3, lsl #16
    5074:	13020000 	movwne	r0, #8192	; 0x2000
    5078:	0000047b 	andeq	r0, r0, fp, ror r4
    507c:	0b031608 	bleq	ca8a4 <__ccfg+0xaa8fc>
    5080:	00000289 	andeq	r0, r0, r9, lsl #5
    5084:	0f4d1304 	svceq	0x004d1304
    5088:	17080000 	strne	r0, [r8, -r0]
    508c:	00c70903 	sbceq	r0, r7, r3, lsl #18
    5090:	13080000 	movwne	r0, #32768	; 0x8000
    5094:	00000431 	andeq	r0, r0, r1, lsr r4
    5098:	0f031808 	svceq	0x00031808
    509c:	0000037c 	andeq	r0, r0, ip, ror r3
    50a0:	028a130c 	addeq	r1, sl, #12, 6	; 0x30000000
    50a4:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    50a8:	038c1503 	orreq	r1, ip, #12582912	; 0xc00000
    50ac:	002c0000 	eoreq	r0, ip, r0
    50b0:	00030c0c 	andeq	r0, r3, ip, lsl #24
    50b4:	00038c00 	andeq	r8, r3, r0, lsl #24
    50b8:	00881500 	addeq	r1, r8, r0, lsl #10
    50bc:	00030000 	andeq	r0, r3, r0
    50c0:	0319040b 	tsteq	r9, #184549376	; 0xb000000
    50c4:	a00e0000 	andge	r0, lr, r0
    50c8:	08000004 	stmdaeq	r0, {r2}
    50cc:	191b031c 	ldmdbne	fp, {r2, r3, r4, r8, r9}
    50d0:	11000003 	tstne	r0, r3
    50d4:	00000352 	andeq	r0, r0, r2, asr r3
    50d8:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    50dc:	000003ae 	andeq	r0, r0, lr, lsr #7
    50e0:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    50e4:	00000392 	muleq	r0, r2, r3
    50e8:	0004bf0a 	andeq	fp, r4, sl, lsl #30
    50ec:	131d0900 	tstne	sp, #0, 18
    50f0:	0000008f 	andeq	r0, r0, pc, lsl #1
    50f4:	290a0101 	stmdbcs	sl, {r0, r8}
    50f8:	09000007 	stmdbeq	r0, {r0, r1, r2}
    50fc:	00a01a1e 	adceq	r1, r0, lr, lsl sl
    5100:	01010000 	mrseq	r0, (UNDEF: 1)
    5104:	0008b90a 	andeq	fp, r8, sl, lsl #18
    5108:	241e0900 	ldrcs	r0, [lr], #-2304	; 0xfffff700
    510c:	000000a0 	andeq	r0, r0, r0, lsr #1
    5110:	e80a0101 	stmda	sl, {r0, r8}
    5114:	09000005 	stmdbeq	r0, {r0, r2}
    5118:	03ae1422 			; <UNDEFINED> instruction: 0x03ae1422
    511c:	01010000 	mrseq	r0, (UNDEF: 1)
    5120:	00125216 	andseq	r5, r2, r6, lsl r2
    5124:	0f080100 	svceq	0x00080100
    5128:	00000296 	muleq	r0, r6, r2
    512c:	00000305 	andeq	r0, r0, r5, lsl #6
    5130:	9f160000 	svcls	0x00160000
    5134:	01000012 	tsteq	r0, r2, lsl r0
    5138:	008f0d09 	addeq	r0, pc, r9, lsl #26
    513c:	03050000 	movweq	r0, #20480	; 0x5000
    5140:	00000000 	andeq	r0, r0, r0
    5144:	00026d17 	andeq	r6, r2, r7, lsl sp
    5148:	0c0a0100 	stfeqs	f0, [sl], {-0}
    514c:	2df40305 	ldclcs	3, cr0, [r4, #20]!
    5150:	01180000 	tsteq	r8, r0
    5154:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    5158:	01065801 	tsteq	r6, r1, lsl #16
	...
    5164:	04479c01 	strbeq	r9, [r7], #-3073	; 0xfffff3ff
    5168:	61190000 	tstvs	r9, r0
    516c:	01007463 	tsteq	r0, r3, ror #8
    5170:	02961d58 	addseq	r1, r6, #88, 26	; 0x1600
    5174:	1fc70000 	svcne	0x00c70000
    5178:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    517c:	0012a701 	andseq	sl, r2, r1, lsl #14
    5180:	011c0100 	tsteq	ip, r0, lsl #2
    5184:	00000001 	andeq	r0, r0, r1
    5188:	00000000 	andeq	r0, r0, r0
    518c:	de9c0100 	fmllee	f0, f4, f0
    5190:	1a000004 	bne	51a8 <__exidx_end+0x23b0>
    5194:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    5198:	8f011c01 	svchi	0x00011c01
    519c:	03000000 	movweq	r0, #0
    51a0:	1b000020 	blne	5228 <__exidx_end+0x2430>
    51a4:	0000124d 	andeq	r1, r0, sp, asr #4
    51a8:	00012101 	andeq	r2, r1, r1, lsl #2
    51ac:	1b000000 	blne	51b4 <__exidx_end+0x23bc>
    51b0:	0000125a 	andeq	r1, r0, sl, asr r2
    51b4:	00013001 	andeq	r3, r1, r1
    51b8:	1b000000 	blne	51c0 <__exidx_end+0x23c8>
    51bc:	000013b1 			; <UNDEFINED> instruction: 0x000013b1
    51c0:	00013701 	andeq	r3, r1, r1, lsl #14
    51c4:	1c000000 	stcne	0, cr0, [r0], {-0}
    51c8:	000004de 	ldrdeq	r0, [r0], -lr
    51cc:	00000000 	andeq	r0, r0, r0
    51d0:	00000978 	andeq	r0, r0, r8, ror r9
    51d4:	ad072b01 	vstrge	d2, [r7, #-4]
    51d8:	1d000004 	stcne	0, cr0, [r0, #-16]
    51dc:	000004ec 	andeq	r0, r0, ip, ror #9
    51e0:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    51e4:	00000000 	andeq	r0, r0, r0
    51e8:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    51ec:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    51f0:	0004c707 	andeq	ip, r4, r7, lsl #14
    51f4:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    51f8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    51fc:	000004de 	ldrdeq	r0, [r0], -lr
    5200:	00000000 	andeq	r0, r0, r0
    5204:	000009b8 			; <UNDEFINED> instruction: 0x000009b8
    5208:	1d074a01 	vstrne	s8, [r7, #-4]
    520c:	000004ec 	andeq	r0, r0, ip, ror #9
    5210:	d71f0000 	ldrle	r0, [pc, -r0]
    5214:	02000011 	andeq	r0, r0, #17
    5218:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    521c:	03000000 	movweq	r0, #0
    5220:	00012520 	andeq	r2, r1, r0, lsr #10
    5224:	18a40200 	stmiane	r4!, {r9}
    5228:	00000067 	andeq	r0, r0, r7, rrx
    522c:	0aa70000 	beq	fe9c5234 <_estack+0xde9c0234>
    5230:	00030000 	andeq	r0, r3, r0
    5234:	000015a9 	andeq	r1, r0, r9, lsr #11
    5238:	012f0104 			; <UNDEFINED> instruction: 0x012f0104
    523c:	3f0c0000 	svccc	0x000c0000
    5240:	80000013 	andhi	r0, r0, r3, lsl r0
    5244:	78000003 	stmdavc	r0, {r0, r1}
    5248:	0000000b 	andeq	r0, r0, fp
    524c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    5250:	0200003e 	andeq	r0, r0, #62	; 0x3e
    5254:	03740601 	cmneq	r4, #1048576	; 0x100000
    5258:	02020000 	andeq	r0, r2, #0
    525c:	0003d005 	andeq	sp, r3, r5
    5260:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5264:	000000a4 	andeq	r0, r0, r4, lsr #1
    5268:	9f050802 	svcls	0x00050802
    526c:	03000000 	movweq	r0, #0
    5270:	0000220a 	andeq	r2, r0, sl, lsl #4
    5274:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    5278:	02000000 	andeq	r0, r0, #0
    527c:	03720801 	cmneq	r2, #65536	; 0x10000
    5280:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    5284:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    5288:	00601931 	rsbeq	r1, r0, r1, lsr r9
    528c:	02020000 	andeq	r0, r2, #0
    5290:	00023007 	andeq	r3, r2, r7
    5294:	17c10300 	strbne	r0, [r1, r0, lsl #6]
    5298:	34040000 	strcc	r0, [r4], #-0
    529c:	00007319 	andeq	r7, r0, r9, lsl r3
    52a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    52a4:	00000079 	andeq	r0, r0, r9, ror r0
    52a8:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    52ac:	04000000 	streq	r0, [r0], #-0
    52b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    52b4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    52b8:	00007e07 	andeq	r7, r0, r7, lsl #28
    52bc:	03f00300 	mvnseq	r0, #0, 6
    52c0:	26050000 	strcs	r0, [r5], -r0
    52c4:	00004112 	andeq	r4, r0, r2, lsl r1
    52c8:	15ce0300 	strbne	r0, [lr, #768]	; 0x300
    52cc:	27050000 	strcs	r0, [r5, -r0]
    52d0:	00005412 	andeq	r5, r0, r2, lsl r4
    52d4:	009b0500 	addseq	r0, fp, r0, lsl #10
    52d8:	9b060000 	blls	1852e0 <__ccfg+0x165338>
    52dc:	03000000 	movweq	r0, #0
    52e0:	000013c6 	andeq	r1, r0, r6, asr #7
    52e4:	41122b05 	tstmi	r2, r5, lsl #22
    52e8:	06000000 	streq	r0, [r0], -r0
    52ec:	000000b1 	strheq	r0, [r0], -r1
    52f0:	0000b105 	andeq	fp, r0, r5, lsl #2
    52f4:	161f0300 	ldrne	r0, [pc], -r0, lsl #6
    52f8:	2c050000 	stccs	0, cr0, [r5], {-0}
    52fc:	00006712 	andeq	r6, r0, r2, lsl r7
    5300:	00c70500 	sbceq	r0, r7, r0, lsl #10
    5304:	63030000 	movwvs	r0, #12288	; 0x3000
    5308:	05000002 	streq	r0, [r0, #-2]
    530c:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    5310:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    5314:	72093205 	andvc	r3, r9, #1342177280	; 0x50000000
    5318:	08000001 	stmdaeq	r0, {r0}
    531c:	0000027e 	andeq	r0, r0, lr, ror r2
    5320:	b1073405 	tstlt	r7, r5, lsl #8
    5324:	01000000 	mrseq	r0, (UNDEF: 0)
    5328:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
    532c:	00000098 	muleq	r0, r8, r0
    5330:	b1033505 	tstlt	r3, r5, lsl #10
    5334:	01000000 	mrseq	r0, (UNDEF: 0)
    5338:	08000601 	stmdaeq	r0, {r0, r9, sl}
    533c:	0000024c 	andeq	r0, r0, ip, asr #4
    5340:	b1033605 	tstlt	r3, r5, lsl #12
    5344:	01000000 	mrseq	r0, (UNDEF: 0)
    5348:	08000501 	stmdaeq	r0, {r0, r8, sl}
    534c:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5350:	b1033705 	tstlt	r3, r5, lsl #14
    5354:	01000000 	mrseq	r0, (UNDEF: 0)
    5358:	08000401 	stmdaeq	r0, {r0, sl}
    535c:	000003f8 	strdeq	r0, [r0], -r8
    5360:	b1033805 	tstlt	r3, r5, lsl #16
    5364:	01000000 	mrseq	r0, (UNDEF: 0)
    5368:	09000004 	stmdbeq	r0, {r2}
    536c:	000003e9 	andeq	r0, r0, r9, ror #7
    5370:	b1073a05 	tstlt	r7, r5, lsl #20
    5374:	01000000 	mrseq	r0, (UNDEF: 0)
    5378:	00004009 	andeq	r4, r0, r9
    537c:	033c0500 	teqeq	ip, #0, 10
    5380:	000000b1 	strheq	r0, [r0], -r1
    5384:	006d0902 	rsbeq	r0, sp, r2, lsl #18
    5388:	3d050000 	stccc	0, cr0, [r5, #-0]
    538c:	0000b103 	andeq	fp, r0, r3, lsl #2
    5390:	1e090300 	cdpne	3, 0, cr0, cr9, cr0, {0}
    5394:	05000001 	streq	r0, [r0, #-1]
    5398:	00c7083f 	sbceq	r0, r7, pc, lsr r8
    539c:	00040000 	andeq	r0, r4, r0
    53a0:	00042803 	andeq	r2, r4, r3, lsl #16
    53a4:	03410500 	movteq	r0, #5376	; 0x1500
    53a8:	000000e4 	andeq	r0, r0, r4, ror #1
    53ac:	00017206 	andeq	r7, r1, r6, lsl #4
    53b0:	02720a00 	rsbseq	r0, r2, #0, 20
    53b4:	43050000 	movwmi	r0, #20480	; 0x5000
    53b8:	00017e1a 	andeq	r7, r1, sl, lsl lr
    53bc:	0a010100 	beq	457c4 <__ccfg+0x2581c>
    53c0:	000002de 	ldrdeq	r0, [r0], -lr
    53c4:	9f0e4505 	svcls	0x000e4505
    53c8:	01000001 	tsteq	r0, r1
    53cc:	a5040b01 	strge	r0, [r4, #-2817]	; 0xfffff4ff
    53d0:	02000001 	andeq	r0, r0, #1
    53d4:	037b0801 	cmneq	fp, #65536	; 0x10000
    53d8:	a5050000 	strge	r0, [r5, #-0]
    53dc:	0a000001 	beq	53e8 <__exidx_end+0x25f0>
    53e0:	000002ec 	andeq	r0, r0, ip, ror #5
    53e4:	9f1e4505 	svcls	0x001e4505
    53e8:	01000001 	tsteq	r0, r1
    53ec:	06080701 	streq	r0, [r8], -r1, lsl #14
    53f0:	01f0098f 	mvnseq	r0, pc, lsl #19
    53f4:	85090000 	strhi	r0, [r9, #-0]
    53f8:	06000002 	streq	r0, [r0], -r2
    53fc:	00670b90 	mlseq	r7, r0, fp, r0
    5400:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5404:	000005fb 	strdeq	r0, [r0], -fp
    5408:	9b089106 	blls	229828 <__ccfg+0x209880>
    540c:	04000000 	streq	r0, [r0], #-0
    5410:	00046b09 	andeq	r6, r4, r9, lsl #22
    5414:	10920600 	addsne	r0, r2, r0, lsl #12
    5418:	000000bd 	strheq	r0, [r0], -sp
    541c:	06030006 	streq	r0, [r3], -r6
    5420:	06000004 	streq	r0, [r0], -r4
    5424:	01bf0393 			; <UNDEFINED> instruction: 0x01bf0393
    5428:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
    542c:	07000001 	streq	r0, [r0, -r1]
    5430:	0d000002 	stceq	0, cr0, [r0, #-8]
    5434:	00360a00 	eorseq	r0, r6, r0, lsl #20
    5438:	99060000 	stmdbls	r6, {}	; <UNPREDICTABLE>
    543c:	0001fc0f 	andeq	pc, r1, pc, lsl #24
    5440:	0b010100 	bleq	45848 <__ccfg+0x258a0>
    5444:	0000c204 	andeq	ip, r0, r4, lsl #4
    5448:	07010700 	streq	r0, [r1, -r0, lsl #14]
    544c:	02450991 	subeq	r0, r5, #2375680	; 0x244000
    5450:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
    5454:	07000004 	streq	r0, [r0, -r4]
    5458:	00b10793 	umlalseq	r0, r1, r3, r7
    545c:	07010000 	streq	r0, [r1, -r0]
    5460:	31080001 	tstcc	r8, r1
    5464:	07000000 	streq	r0, [r0, -r0]
    5468:	00b10394 	umlalseq	r0, r1, r4, r3
    546c:	01010000 	mrseq	r0, (UNDEF: 1)
    5470:	03000000 	movweq	r0, #0
    5474:	00000243 	andeq	r0, r0, r3, asr #4
    5478:	1b039607 	blne	eac9c <__ccfg+0xcacf4>
    547c:	05000002 	streq	r0, [r0, #-2]
    5480:	00000245 	andeq	r0, r0, r5, asr #4
    5484:	0002510c 	andeq	r5, r2, ip, lsl #2
    5488:	00026100 	andeq	r6, r2, r0, lsl #2
    548c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5490:	00000256 	andeq	r0, r0, r6, asr r2
    5494:	0002a80a 	andeq	sl, r2, sl, lsl #16
    5498:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    549c:	00000261 	andeq	r0, r0, r1, ror #4
    54a0:	a70c0101 	strge	r0, [ip, -r1, lsl #2]
    54a4:	7f000000 	svcvc	0x00000000
    54a8:	0d000002 	stceq	0, cr0, [r0, #-8]
    54ac:	02740500 	rsbseq	r0, r4, #0, 10
    54b0:	640a0000 	strvs	r0, [sl], #-0
    54b4:	08000003 	stmdaeq	r0, {r0, r1}
    54b8:	027f1306 	rsbseq	r1, pc, #402653184	; 0x18000000
    54bc:	01010000 	mrseq	r0, (UNDEF: 1)
    54c0:	0000fe0a 	andeq	pc, r0, sl, lsl #28
    54c4:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    54c8:	000000c7 	andeq	r0, r0, r7, asr #1
    54cc:	780e0101 	stmdavc	lr, {r0, r8}
    54d0:	09000004 	stmdbeq	r0, {r2}
    54d4:	ad10016e 	ldfges	f0, [r0, #-440]	; 0xfffffe48
    54d8:	0b000002 	bleq	54e8 <__exidx_end+0x26f0>
    54dc:	0002b304 	andeq	fp, r2, r4, lsl #6
    54e0:	bf010f00 	svclt	0x00010f00
    54e4:	10000002 	andne	r0, r0, r2
    54e8:	0000009b 	muleq	r0, fp, r0
    54ec:	01ac0c00 			; <UNDEFINED> instruction: 0x01ac0c00
    54f0:	02ca0000 	sbceq	r0, sl, #0
    54f4:	000d0000 	andeq	r0, sp, r0
    54f8:	0002bf05 	andeq	fp, r2, r5, lsl #30
    54fc:	04381100 	ldrteq	r1, [r8], #-256	; 0xffffff00
    5500:	7f090000 	svcvc	0x00090000
    5504:	02ca1601 	sbceq	r1, sl, #1048576	; 0x100000
    5508:	01010000 	mrseq	r0, (UNDEF: 1)
    550c:	00035c11 	andeq	r5, r3, r1, lsl ip
    5510:	01820900 	orreq	r0, r2, r0, lsl #18
    5514:	0000d314 	andeq	sp, r0, r4, lsl r3
    5518:	11010100 	mrsne	r0, (UNDEF: 17)
    551c:	00000463 	andeq	r0, r0, r3, ror #8
    5520:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    5524:	000000c7 	andeq	r0, r0, r7, asr #1
    5528:	08120101 	ldmdaeq	r2, {r0, r8}
    552c:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    5530:	00000323 	andeq	r0, r0, r3, lsr #6
    5534:	00220213 	eoreq	r0, r2, r3, lsl r2
    5538:	03070900 	movweq	r0, #30976	; 0x7900
    553c:	00009b07 	andeq	r9, r0, r7, lsl #22
    5540:	4d130000 	ldcmi	0, cr0, [r3, #-0]
    5544:	09000005 	stmdbeq	r0, {r0, r2}
    5548:	d8080308 	stmdale	r8, {r3, r8, r9}
    554c:	04000000 	streq	r0, [r0], #-0
    5550:	02230e00 	eoreq	r0, r3, #0, 28
    5554:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    5558:	02fc0303 	rscseq	r0, ip, #201326592	; 0xc000000
    555c:	95140000 	ldrls	r0, [r4, #-0]
    5560:	30000004 	andcc	r0, r0, r4
    5564:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    5568:	00000393 	muleq	r0, r3, r3
    556c:	00048013 	andeq	r8, r4, r3, lsl r0
    5570:	03140900 	tsteq	r4, #0, 18
    5574:	00009b08 	andeq	r9, r0, r8, lsl #22
    5578:	8f130000 	svchi	0x00130000
    557c:	09000002 	stmdbeq	r0, {r1}
    5580:	9b080315 	blls	2061dc <__ccfg+0x1e6234>
    5584:	02000000 	andeq	r0, r0, #0
    5588:	00047b13 	andeq	r7, r4, r3, lsl fp
    558c:	03160900 	tsteq	r6, #0, 18
    5590:	0002a00b 	andeq	sl, r2, fp
    5594:	4d130400 	cfldrsmi	mvf0, [r3, #-0]
    5598:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    559c:	d8090317 	stmdale	r9, {r0, r1, r2, r4, r8, r9}
    55a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    55a4:	00043113 	andeq	r3, r4, r3, lsl r1
    55a8:	03180900 	tsteq	r8, #0, 18
    55ac:	0003930f 	andeq	r9, r3, pc, lsl #6
    55b0:	8a130c00 	bhi	4c85b8 <__ccfg+0x4a8610>
    55b4:	09000002 	stmdbeq	r0, {r1}
    55b8:	a3150319 	tstge	r5, #1677721600	; 0x64000000
    55bc:	2c000003 	stccs	0, cr0, [r0], {3}
    55c0:	03230c00 			; <UNDEFINED> instruction: 0x03230c00
    55c4:	03a30000 			; <UNDEFINED> instruction: 0x03a30000
    55c8:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    55cc:	03000000 	movweq	r0, #0
    55d0:	30040b00 	andcc	r0, r4, r0, lsl #22
    55d4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    55d8:	000004a0 	andeq	r0, r0, r0, lsr #9
    55dc:	1b031c09 	blne	cc608 <__ccfg+0xac660>
    55e0:	00000330 	andeq	r0, r0, r0, lsr r3
    55e4:	00035211 	andeq	r5, r3, r1, lsl r2
    55e8:	031e0900 	tsteq	lr, #0, 18
    55ec:	0003c514 	andeq	ip, r3, r4, lsl r5
    55f0:	0b010100 	bleq	459f8 <__ccfg+0x25a50>
    55f4:	0003a904 	andeq	sl, r3, r4, lsl #18
    55f8:	04bf0a00 	ldrteq	r0, [pc], #2560	; 5600 <__exidx_end+0x2808>
    55fc:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    5600:	00009b13 	andeq	r9, r0, r3, lsl fp
    5604:	0a010100 	beq	45a0c <__ccfg+0x25a64>
    5608:	00000729 	andeq	r0, r0, r9, lsr #14
    560c:	ac1a1e0a 	ldcge	14, cr1, [sl], {10}
    5610:	01000000 	mrseq	r0, (UNDEF: 0)
    5614:	08b90a01 	ldmeq	r9!, {r0, r9, fp}
    5618:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    561c:	0000ac24 	andeq	sl, r0, r4, lsr #24
    5620:	0a010100 	beq	45a28 <__ccfg+0x25a80>
    5624:	000005e8 	andeq	r0, r0, r8, ror #11
    5628:	c514220a 	ldrgt	r2, [r4, #-522]	; 0xfffffdf6
    562c:	01000003 	tsteq	r0, r3
    5630:	03571601 	cmpeq	r7, #1048576	; 0x100000
    5634:	0f010000 	svceq	0x00010000
    5638:	0000c70f 	andeq	ip, r0, pc, lsl #14
    563c:	00030500 	andeq	r0, r3, r0, lsl #10
    5640:	16000000 	strne	r0, [r0], -r0
    5644:	00001317 	andeq	r1, r0, r7, lsl r3
    5648:	c7150f01 	ldrgt	r0, [r5, -r1, lsl #30]
    564c:	05000000 	streq	r0, [r0, #-0]
    5650:	00000003 	andeq	r0, r0, r3
    5654:	139d1600 	orrsne	r1, sp, #0, 12
    5658:	10010000 	andne	r0, r1, r0
    565c:	00021514 	andeq	r1, r2, r4, lsl r5
    5660:	00030500 	andeq	r0, r3, r0, lsl #10
    5664:	16000000 	strne	r0, [r0], -r0
    5668:	000012fd 	strdeq	r1, [r0], -sp
    566c:	b10d1201 	tstlt	sp, r1, lsl #4
    5670:	05000000 	streq	r0, [r0, #-0]
    5674:	00005803 	andeq	r5, r0, r3, lsl #16
    5678:	13911620 	orrsne	r1, r1, #32, 12	; 0x2000000
    567c:	13010000 	movwne	r0, #4096	; 0x1000
    5680:	0000b103 	andeq	fp, r0, r3, lsl #2
    5684:	59030500 	stmdbpl	r3, {r8, sl}
    5688:	16200000 	strtne	r0, [r0], -r0
    568c:	00000bf3 	strdeq	r0, [r0], -r3
    5690:	9b0d1501 	blls	34aa9c <__ccfg+0x32aaf4>
    5694:	05000000 	streq	r0, [r0, #-0]
    5698:	00000003 	andeq	r0, r0, r3
    569c:	c9011700 	stmdbgt	r1, {r8, r9, sl, ip}
    56a0:	03000012 	movweq	r0, #18
    56a4:	00000613 	andeq	r0, r0, r3, lsl r6
    56a8:	00000000 	andeq	r0, r0, r0
    56ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    56b0:	13a20118 			; <UNDEFINED> instruction: 0x13a20118
    56b4:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    56b8:	00c70107 	sbceq	r0, r7, r7, lsl #2
	...
    56c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    56c8:	000004bc 			; <UNDEFINED> instruction: 0x000004bc
    56cc:	00726519 	rsbseq	r6, r2, r9, lsl r5
    56d0:	bc190803 	ldclt	8, cr0, [r9], {3}
    56d4:	37000004 	strcc	r0, [r0, -r4]
    56d8:	1a000020 	bne	5760 <__exidx_end+0x2968>
    56dc:	00757265 	rsbseq	r7, r5, r5, ror #4
    56e0:	c2240803 	eorgt	r0, r4, #196608	; 0x30000
    56e4:	01000004 	tsteq	r0, r4
    56e8:	040b0051 	streq	r0, [fp], #-81	; 0xffffffaf
    56ec:	0000008f 	andeq	r0, r0, pc, lsl #1
    56f0:	00c7040b 	sbceq	r0, r7, fp, lsl #8
    56f4:	011b0000 	tsteq	fp, r0
    56f8:	00001325 	andeq	r1, r0, r5, lsr #6
    56fc:	06016001 	streq	r6, [r1], -r1
    5700:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    570c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5710:	1c000004 	stcne	0, cr0, [r0], {4}
    5714:	01007473 	tsteq	r0, r3, ror r4
    5718:	9b140160 	blls	505ca0 <__ccfg+0x4e5cf8>
    571c:	4a000000 	bmi	5724 <__exidx_end+0x292c>
    5720:	00000020 	andeq	r0, r0, r0, lsr #32
    5724:	131c011d 	tstne	ip, #1073741831	; 0x40000007
    5728:	5b010000 	blpl	45730 <__ccfg+0x25788>
    572c:	00000601 	andeq	r0, r0, r1, lsl #12
    5730:	00000000 	andeq	r0, r0, r0
    5734:	9c010000 	stcls	0, cr0, [r1], {-0}
    5738:	12f4011b 	rscsne	r0, r4, #-1073741818	; 0xc0000006
    573c:	21010000 	mrscs	r0, (UNDEF: 1)
    5740:	9b010601 	blls	46f4c <__ccfg+0x26fa4>
	...
    574c:	01000000 	mrseq	r0, (UNDEF: 0)
    5750:	0005c09c 	muleq	r5, ip, r0
    5754:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    5758:	01210100 			; <UNDEFINED> instruction: 0x01210100
    575c:	00009b15 	andeq	r9, r0, r5, lsl fp
    5760:	00205d00 	eoreq	r5, r0, r0, lsl #26
    5764:	00611c00 	rsbeq	r1, r1, r0, lsl #24
    5768:	1f012101 	svcne	0x00012101
    576c:	000000c7 	andeq	r0, r0, r7, asr #1
    5770:	00002070 	andeq	r2, r0, r0, ror r0
    5774:	0100731c 	tsteq	r0, ip, lsl r3
    5778:	152e0121 	strne	r0, [lr, #-289]!	; 0xfffffedf
    577c:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    5780:	1c000020 	stcne	0, cr0, [r0], {32}
    5784:	006e656c 	rsbeq	r6, lr, ip, ror #10
    5788:	36012101 	strcc	r2, [r1], -r1, lsl #2
    578c:	0000009b 	muleq	r0, fp, r0
    5790:	000020a1 	andeq	r2, r0, r1, lsr #1
    5794:	006c621e 	rsbeq	r6, ip, lr, lsl r2
    5798:	07012301 	streq	r2, [r1, -r1, lsl #6]
    579c:	0000009b 	muleq	r0, fp, r0
    57a0:	000020b4 	strheq	r2, [r0], -r4
    57a4:	00130b1f 	andseq	r0, r3, pc, lsl fp
    57a8:	01320100 	teqeq	r2, r0, lsl #2
    57ac:	00000001 	andeq	r0, r0, r1
    57b0:	09f62000 	ldmibeq	r6!, {sp}^
    57b4:	00000000 	andeq	r0, r0, r0
    57b8:	0b600000 	bleq	18057c0 <__ccfg+0x17e5818>
    57bc:	43010000 	movwmi	r0, #4096	; 0x1000
    57c0:	05a30301 	streq	r0, [r3, #769]!	; 0x301
    57c4:	12210000 	eorne	r0, r1, #0
    57c8:	2100000a 	tstcs	r0, sl
    57cc:	00000a05 	andeq	r0, r0, r5, lsl #20
    57d0:	09f62200 	ldmibeq	r6!, {r9, sp}^
	...
    57dc:	50010000 	andpl	r0, r1, r0
    57e0:	12210301 	eorne	r0, r1, #67108864	; 0x4000000
    57e4:	2100000a 	tstcs	r0, sl
    57e8:	00000a05 	andeq	r0, r0, r5, lsl #20
    57ec:	01180000 	tsteq	r8, r0
    57f0:	000012eb 	andeq	r1, r0, fp, ror #5
    57f4:	0106cb01 	tsteq	r6, r1, lsl #22
    57f8:	0000009b 	muleq	r0, fp, r0
	...
    5804:	06819c01 	streq	r9, [r1], r1, lsl #24
    5808:	73190000 	tstvc	r9, #0
    580c:	cb010074 	blgt	459e4 <__ccfg+0x25a3c>
    5810:	00009b15 	andeq	r9, r0, r5, lsl fp
    5814:	0020dd00 	eoreq	sp, r0, r0, lsl #26
    5818:	132d2300 			; <UNDEFINED> instruction: 0x132d2300
    581c:	cb010000 	blgt	45824 <__ccfg+0x2587c>
    5820:	0000c71f 	andeq	ip, r0, pc, lsl r7
    5824:	0020fb00 	eoreq	pc, r0, r0, lsl #22
    5828:	12d72300 	sbcsne	r2, r7, #0, 6
    582c:	cb010000 	blgt	45834 <__ccfg+0x2588c>
    5830:	0000c72b 	andeq	ip, r0, fp, lsr #14
    5834:	00212400 	eoreq	r2, r1, r0, lsl #8
    5838:	12c32400 	sbcne	r2, r3, #0, 8
    583c:	e6010000 	str	r0, [r1], -r0
    5840:	00000001 	andeq	r0, r0, r1
    5844:	13b02400 	movsne	r2, #0, 8
    5848:	ea010000 	b	45850 <__ccfg+0x258a8>
    584c:	00000001 	andeq	r0, r0, r1
    5850:	085e2500 	ldmdaeq	lr, {r8, sl, sp}^
    5854:	00000000 	andeq	r0, r0, r0
    5858:	0b300000 	bleq	c05860 <__ccfg+0xbe58b8>
    585c:	fc010000 	stc2	0, cr0, [r1], {-0}
    5860:	08782604 	ldmdaeq	r8!, {r2, r9, sl, sp}^
    5864:	21420000 	mrscs	r0, (UNDEF: 66)
    5868:	6c260000 	stcvs	0, cr0, [r6], #-0
    586c:	55000008 	strpl	r0, [r0, #-8]
    5870:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    5874:	000009f6 	strdeq	r0, [r0], -r6
    5878:	00000000 	andeq	r0, r0, r0
    587c:	00000b48 	andeq	r0, r0, r8, asr #22
    5880:	64024301 	strvs	r4, [r2], #-769	; 0xfffffcff
    5884:	21000006 	tstcs	r0, r6
    5888:	00000a12 	andeq	r0, r0, r2, lsl sl
    588c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5890:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5894:	00000009 	andeq	r0, r0, r9
    5898:	00000000 	andeq	r0, r0, r0
    589c:	01000000 	mrseq	r0, (UNDEF: 0)
    58a0:	12210248 	eorne	r0, r1, #72, 4	; 0x80000004
    58a4:	2100000a 	tstcs	r0, sl
    58a8:	00000a05 	andeq	r0, r0, r5, lsl #20
    58ac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    58b0:	00133201 	andseq	r3, r3, r1, lsl #4
    58b4:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
    58b8:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    58c4:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    58c8:	19000007 	stmdbne	r0, {r0, r1, r2}
    58cc:	b0010061 	andlt	r0, r1, r1, rrx
    58d0:	0000c715 	andeq	ip, r0, r5, lsl r7
    58d4:	00216800 	eoreq	r6, r1, r0, lsl #16
    58d8:	00731900 	rsbseq	r1, r3, r0, lsl #18
    58dc:	041eb001 	ldreq	fp, [lr], #-1
    58e0:	91000007 	tstls	r0, r7
    58e4:	19000021 	stmdbne	r0, {r0, r5}
    58e8:	006e656c 	rsbeq	r6, lr, ip, ror #10
    58ec:	9b26b001 	blls	9b18f8 <__ccfg+0x991950>
    58f0:	c5000000 	strgt	r0, [r0, #-0]
    58f4:	27000021 	strcs	r0, [r0, -r1, lsr #32]
    58f8:	000009f6 	strdeq	r0, [r0], -r6
    58fc:	00000000 	andeq	r0, r0, r0
    5900:	00000b18 	andeq	r0, r0, r8, lsl fp
    5904:	e802ba01 	stmda	r2, {r0, r9, fp, ip, sp, pc}
    5908:	21000006 	tstcs	r0, r6
    590c:	00000a12 	andeq	r0, r0, r2, lsl sl
    5910:	000a0521 	andeq	r0, sl, r1, lsr #10
    5914:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5918:	00000009 	andeq	r0, r0, r9
    591c:	00000000 	andeq	r0, r0, r0
    5920:	01000000 	mrseq	r0, (UNDEF: 0)
    5924:	122102c4 	eorne	r0, r1, #196, 4	; 0x4000000c
    5928:	2100000a 	tstcs	r0, sl
    592c:	00000a05 	andeq	r0, r0, r5, lsl #20
    5930:	040b0000 	streq	r0, [fp], #-0
    5934:	000000b1 	strheq	r0, [r0], -r1
    5938:	12e20117 	rscne	r0, r2, #-1073741819	; 0xc0000005
    593c:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    5940:	00170006 	andseq	r0, r7, r6
    5944:	00171400 	andseq	r1, r7, r0, lsl #8
    5948:	299c0100 	ldmibcs	ip, {r8}
    594c:	00130301 	andseq	r0, r3, r1, lsl #6
    5950:	06930100 	ldreq	r0, [r3], r0, lsl #2
    5954:	0000009b 	muleq	r0, fp, r0
    5958:	000016ec 	andeq	r1, r0, ip, ror #13
    595c:	00001700 	andeq	r1, r0, r0, lsl #14
    5960:	aa2a9c01 	bge	aac96c <__ccfg+0xa8c9c4>
    5964:	01000013 	tsteq	r0, r3, lsl r0
    5968:	16880d82 	strne	r0, [r8], r2, lsl #27
    596c:	16c80000 	strbne	r0, [r8], r0
    5970:	9c010000 	stcls	0, cr0, [r1], {-0}
    5974:	00000796 	muleq	r0, r6, r7
    5978:	00079f28 	andeq	r9, r7, r8, lsr #30
    597c:	0016a200 	andseq	sl, r6, r0, lsl #4
    5980:	0016b600 	andseq	fp, r6, r0, lsl #12
    5984:	038a0100 	orreq	r0, sl, #0, 2
    5988:	0009f627 	andeq	pc, r9, r7, lsr #12
    598c:	0016a200 	andseq	sl, r6, r0, lsl #4
    5990:	000ae800 	andeq	lr, sl, r0, lsl #16
    5994:	02720100 	rsbseq	r0, r2, #0, 2
    5998:	00000779 	andeq	r0, r0, r9, ror r7
    599c:	000a1221 	andeq	r1, sl, r1, lsr #4
    59a0:	0a052100 	beq	14dda8 <__ccfg+0x12de00>
    59a4:	25000000 	strcs	r0, [r0, #-0]
    59a8:	000009f6 	strdeq	r0, [r0], -r6
    59ac:	000016ae 	andeq	r1, r0, lr, lsr #13
    59b0:	00000b00 	andeq	r0, r0, r0, lsl #22
    59b4:	21027401 	tstcs	r2, r1, lsl #8
    59b8:	00000a12 	andeq	r0, r0, r2, lsl sl
    59bc:	000a0521 	andeq	r0, sl, r1, lsr #10
    59c0:	00000000 	andeq	r0, r0, r0
    59c4:	00138a2b 	andseq	r8, r3, fp, lsr #20
    59c8:	0d780100 	ldfeqe	f0, [r8, #-0]
    59cc:	13972b01 	orrsne	r2, r7, #1024	; 0x400
    59d0:	6d010000 	stcvs	0, cr0, [r1, #-0]
    59d4:	b62b010d 	strtlt	r0, [fp], -sp, lsl #2
    59d8:	01000013 	tsteq	r0, r3, lsl r0
    59dc:	2c010d66 	stccs	13, cr0, [r1], {102}	; 0x66
    59e0:	000013bc 			; <UNDEFINED> instruction: 0x000013bc
    59e4:	010d5801 	tsteq	sp, r1, lsl #16
    59e8:	00001634 	andeq	r1, r0, r4, lsr r6
    59ec:	00001688 	andeq	r1, r0, r8, lsl #13
    59f0:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    59f4:	73190000 	tstvc	r9, #0
    59f8:	58010074 	stmdapl	r1, {r2, r4, r5, r6}
    59fc:	00009b19 	andeq	r9, r0, r9, lsl fp
    5a00:	0021e300 	eoreq	lr, r1, r0, lsl #6
    5a04:	65641900 	strbvs	r1, [r4, #-2304]!	; 0xfffff700
    5a08:	5801006c 	stmdapl	r1, {r2, r3, r5, r6}
    5a0c:	00009b22 	andeq	r9, r0, r2, lsr #22
    5a10:	0021f600 	eoreq	pc, r1, r0, lsl #12
    5a14:	08422500 	stmdaeq	r2, {r8, sl, sp}^
    5a18:	163c0000 	ldrtne	r0, [ip], -r0
    5a1c:	0aa00000 	beq	fe805a24 <_estack+0xde800a24>
    5a20:	5c010000 	stcpl	0, cr0, [r1], {-0}
    5a24:	0aa02d13 	beq	fe810e78 <_estack+0xde80be78>
    5a28:	532e0000 			; <UNDEFINED> instruction: 0x532e0000
    5a2c:	09000008 	stmdbeq	r0, {r3}
    5a30:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    5a34:	000009f6 	strdeq	r0, [r0], -r6
    5a38:	0000163c 	andeq	r1, r0, ip, lsr r6
    5a3c:	00000ac0 	andeq	r0, r0, r0, asr #21
    5a40:	24025101 	strcs	r5, [r2], #-257	; 0xfffffeff
    5a44:	21000008 	tstcs	r0, r8
    5a48:	00000a12 	andeq	r0, r0, r2, lsl sl
    5a4c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5a50:	f6280000 			; <UNDEFINED> instruction: 0xf6280000
    5a54:	56000009 	strpl	r0, [r0], -r9
    5a58:	5a000016 	bpl	5ab8 <__exidx_end+0x2cc0>
    5a5c:	01000016 	tsteq	r0, r6, lsl r0
    5a60:	12210254 	eorne	r0, r1, #84, 4	; 0x40000005
    5a64:	2100000a 	tstcs	r0, sl
    5a68:	00000a05 	andeq	r0, r0, r5, lsl #20
    5a6c:	00000000 	andeq	r0, r0, r0
    5a70:	00133a2f 	andseq	r3, r3, pc, lsr #20
    5a74:	0d4b0100 	stfeqe	f0, [fp, #-0]
    5a78:	000000b1 	strheq	r0, [r0], -r1
    5a7c:	00085e01 	andeq	r5, r8, r1, lsl #28
    5a80:	00723000 	rsbseq	r3, r2, r0
    5a84:	b1074f01 	tstlt	r7, r1, lsl #30
    5a88:	00000000 	andeq	r0, r0, r0
    5a8c:	00131131 	andseq	r1, r3, r1, lsr r1
    5a90:	0d410100 	stfeqe	f0, [r1, #-0]
    5a94:	08830101 	stmeq	r3, {r0, r8}
    5a98:	63320000 	teqvs	r2, #0
    5a9c:	0100646d 	tsteq	r0, sp, ror #8
    5aa0:	00b11941 	adcseq	r1, r1, r1, asr #18
    5aa4:	61320000 	teqvs	r2, r0
    5aa8:	24410100 	strbcs	r0, [r1], #-256	; 0xffffff00
    5aac:	000000c7 	andeq	r0, r0, r7, asr #1
    5ab0:	12dc2c00 	sbcsne	r2, ip, #0, 24
    5ab4:	3a010000 	bcc	45abc <__ccfg+0x25b14>
    5ab8:	161c010d 	ldrne	r0, [ip], -sp, lsl #2
    5abc:	16340000 	ldrtne	r0, [r4], -r0
    5ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5ac4:	000008e5 	andeq	r0, r0, r5, ror #17
    5ac8:	646d6319 	strbtvs	r6, [sp], #-793	; 0xfffffce7
    5acc:	193a0100 	ldmdbne	sl!, {r8}
    5ad0:	000000b1 	strheq	r0, [r0], -r1
    5ad4:	0000221c 	andeq	r2, r0, ip, lsl r2
    5ad8:	0009f627 	andeq	pc, r9, r7, lsr #12
    5adc:	00161c00 	andseq	r1, r6, r0, lsl #24
    5ae0:	000a8800 	andeq	r8, sl, r0, lsl #16
    5ae4:	023c0100 	eorseq	r0, ip, #0, 2
    5ae8:	000008c9 	andeq	r0, r0, r9, asr #17
    5aec:	000a1221 	andeq	r1, sl, r1, lsr #4
    5af0:	0a052100 	beq	14def8 <__ccfg+0x12df50>
    5af4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    5af8:	000009f6 	strdeq	r0, [r0], -r6
    5afc:	00001628 	andeq	r1, r0, r8, lsr #12
    5b00:	0000162c 	andeq	r1, r0, ip, lsr #12
    5b04:	21023e01 	tstcs	r2, r1, lsl #28
    5b08:	00000a12 	andeq	r0, r0, r2, lsl sl
    5b0c:	000a0521 	andeq	r0, sl, r1, lsr #10
    5b10:	2c000000 	stccs	0, cr0, [r0], {-0}
    5b14:	000013cb 	andeq	r1, r0, fp, asr #7
    5b18:	010d2901 	tsteq	sp, r1, lsl #18
    5b1c:	000015ec 	andeq	r1, r0, ip, ror #11
    5b20:	0000161c 	andeq	r1, r0, ip, lsl r6
    5b24:	09799c01 	ldmdbeq	r9!, {r0, sl, fp, ip, pc}^
    5b28:	62190000 	andsvs	r0, r9, #0
    5b2c:	1c290100 	stfnes	f0, [r9], #-0
    5b30:	000000b1 	strheq	r0, [r0], -r1
    5b34:	0000222f 	andeq	r2, r0, pc, lsr #4
    5b38:	01006930 	tsteq	r0, r0, lsr r9
    5b3c:	0081062b 	addeq	r0, r1, fp, lsr #12
    5b40:	3d270000 	stccc	0, cr0, [r7, #-0]
    5b44:	f400000a 	vst4.8	{d0-d3}, [r0], sl
    5b48:	50000015 	andpl	r0, r0, r5, lsl r0
    5b4c:	0100000a 	tsteq	r0, sl
    5b50:	092e0332 	stmdbeq	lr!, {r1, r4, r5, r8, r9}
    5b54:	4c210000 	stcmi	0, cr0, [r1], #-0
    5b58:	0000000a 	andeq	r0, r0, sl
    5b5c:	000a3d33 	andeq	r3, sl, r3, lsr sp
    5b60:	00160000 	andseq	r0, r6, r0
    5b64:	00160400 	andseq	r0, r6, r0, lsl #8
    5b68:	042f0100 	strteq	r0, [pc], #-256	; 5b70 <__exidx_end+0x2d78>
    5b6c:	00000948 	andeq	r0, r0, r8, asr #18
    5b70:	000a4c21 	andeq	r4, sl, r1, lsr #24
    5b74:	20330000 	eorscs	r0, r3, r0
    5b78:	0400000a 	streq	r0, [r0], #-10
    5b7c:	06000016 			; <UNDEFINED> instruction: 0x06000016
    5b80:	01000016 	tsteq	r0, r6, lsl r0
    5b84:	09620431 	stmdbeq	r2!, {r0, r4, r5, sl}^
    5b88:	2f210000 	svccs	0x00210000
    5b8c:	0000000a 	andeq	r0, r0, sl
    5b90:	000a2025 	andeq	r2, sl, r5, lsr #32
    5b94:	00160c00 	andseq	r0, r6, r0, lsl #24
    5b98:	000a7000 	andeq	r7, sl, r0
    5b9c:	03330100 	teqeq	r3, #0, 2
    5ba0:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5ba4:	34000000 	strcc	r0, [r0], #-0
    5ba8:	000013c2 	andeq	r1, r0, r2, asr #7
    5bac:	b10d1901 	tstlt	sp, r1, lsl #18
    5bb0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    5bb4:	ec000015 	stc	0, cr0, [r0], {21}
    5bb8:	01000015 	tsteq	r0, r5, lsl r0
    5bbc:	0009f69c 	muleq	r9, ip, r6
    5bc0:	00693000 	rsbeq	r3, r9, r0
    5bc4:	81061b01 	tsthi	r6, r1, lsl #22
    5bc8:	35000000 	strcc	r0, [r0, #-0]
    5bcc:	1c010062 	stcne	0, cr0, [r1], {98}	; 0x62
    5bd0:	0000b107 	andeq	fp, r0, r7, lsl #2
    5bd4:	00224d00 	eoreq	r4, r2, r0, lsl #26
    5bd8:	0a3d2700 	beq	f4f7e0 <__ccfg+0xf2f838>
    5bdc:	15bc0000 	ldrne	r0, [ip, #0]!
    5be0:	09f00000 	ldmibeq	r0!, {}^	; <UNPREDICTABLE>
    5be4:	22010000 	andcs	r0, r1, #0
    5be8:	0009c503 	andeq	ip, r9, r3, lsl #10
    5bec:	0a4c2100 	beq	130dff4 <__ccfg+0x12ee04c>
    5bf0:	27000000 	strcs	r0, [r0, -r0]
    5bf4:	00000a20 	andeq	r0, r0, r0, lsr #20
    5bf8:	000015c2 	andeq	r1, r0, r2, asr #11
    5bfc:	00000a18 	andeq	r0, r0, r8, lsl sl
    5c00:	df032301 	svcle	0x00032301
    5c04:	21000009 	tstcs	r0, r9
    5c08:	00000a2f 	andeq	r0, r0, pc, lsr #20
    5c0c:	0a5a2500 	beq	168f014 <__ccfg+0x166f06c>
    5c10:	15c40000 	strbne	r0, [r4]
    5c14:	0a300000 	beq	c05c1c <__ccfg+0xbe5c74>
    5c18:	20010000 	andcs	r0, r1, r0
    5c1c:	0a6c2107 	beq	1b0e040 <__ccfg+0x1aee098>
    5c20:	00000000 	andeq	r0, r0, r0
    5c24:	0004d036 	andeq	sp, r4, r6, lsr r0
    5c28:	02060200 	andeq	r0, r6, #0, 4
    5c2c:	20030101 	andcs	r0, r3, r1, lsl #2
    5c30:	3700000a 	strcc	r0, [r0, -sl]
    5c34:	00000125 	andeq	r0, r0, r5, lsr #2
    5c38:	23020602 	movwcs	r0, #9730	; 0x2602
    5c3c:	00000067 	andeq	r0, r0, r7, rrx
    5c40:	0009a337 	andeq	sl, r9, r7, lsr r3
    5c44:	02060200 	andeq	r0, r6, #0, 4
    5c48:	00006737 	andeq	r6, r0, r7, lsr r7
    5c4c:	87360000 	ldrhi	r0, [r6, -r0]!
    5c50:	02000004 	andeq	r0, r0, #4
    5c54:	01010154 	tsteq	r1, r4, asr r1
    5c58:	000a3d03 	andeq	r3, sl, r3, lsl #26
    5c5c:	01253700 			; <UNDEFINED> instruction: 0x01253700
    5c60:	54020000 	strpl	r0, [r2], #-0
    5c64:	00671901 	rsbeq	r1, r7, r1, lsl #18
    5c68:	36000000 	strcc	r0, [r0], -r0
    5c6c:	00000025 	andeq	r0, r0, r5, lsr #32
    5c70:	01011e02 	tsteq	r1, r2, lsl #28
    5c74:	0a5a0301 	beq	1686880 <__ccfg+0x16668d8>
    5c78:	25370000 	ldrcs	r0, [r7, #-0]!
    5c7c:	02000001 	andeq	r0, r0, #1
    5c80:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
    5c84:	00000000 	andeq	r0, r0, r0
    5c88:	0011d738 	andseq	sp, r1, r8, lsr r7
    5c8c:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    5c90:	00006701 	andeq	r6, r0, r1, lsl #14
    5c94:	0a790300 	beq	1e4689c <__ccfg+0x1e268f4>
    5c98:	25390000 	ldrcs	r0, [r9, #-0]!
    5c9c:	02000001 	andeq	r0, r0, #1
    5ca0:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    5ca4:	3a000000 	bcc	5cac <__exidx_end+0x2eb4>
    5ca8:	00000796 	muleq	r0, r6, r7
    5cac:	000016c8 	andeq	r1, r0, r8, asr #13
    5cb0:	000016ec 	andeq	r1, r0, ip, ror #13
    5cb4:	96289c01 	strtls	r9, [r8], -r1, lsl #24
    5cb8:	d2000007 	andle	r0, r0, #7
    5cbc:	e6000016 			; <UNDEFINED> instruction: 0xe6000016
    5cc0:	01000016 	tsteq	r0, r6, lsl r0
    5cc4:	a83b0d78 	ldmdage	fp!, {r3, r4, r5, r6, r8, sl, fp}
    5cc8:	dc000007 	stcle	0, cr0, [r0], {7}
    5ccc:	e2000016 	and	r0, r0, #22
    5cd0:	01000016 	tsteq	r0, r6, lsl r0
    5cd4:	0000037c 	andeq	r0, r0, ip, ror r3
    5cd8:	00041200 	andeq	r1, r4, r0, lsl #4
    5cdc:	4f000300 	svcmi	0x00000300
    5ce0:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
    5ce4:	00012f01 	andeq	r2, r1, r1, lsl #30
    5ce8:	13de0c00 	bicsne	r0, lr, #0, 24
    5cec:	03800000 	orreq	r0, r0, #0
    5cf0:	0bf80000 	bleq	ffe05cf8 <_estack+0xdfe00cf8>
    5cf4:	00000000 	andeq	r0, r0, r0
    5cf8:	47ad0000 	strmi	r0, [sp, r0]!
    5cfc:	01020000 	mrseq	r0, (UNDEF: 2)
    5d00:	00037406 	andeq	r7, r3, r6, lsl #8
    5d04:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    5d08:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5d0c:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    5d10:	02000000 	andeq	r0, r0, #0
    5d14:	009f0508 	addseq	r0, pc, r8, lsl #10
    5d18:	0a030000 	beq	c5d20 <__ccfg+0xa5d78>
    5d1c:	02000022 	andeq	r0, r0, #34	; 0x22
    5d20:	004d182e 	subeq	r1, sp, lr, lsr #16
    5d24:	01020000 	mrseq	r0, (UNDEF: 2)
    5d28:	00037208 	andeq	r7, r3, r8, lsl #4
    5d2c:	20f80300 	rscscs	r0, r8, r0, lsl #6
    5d30:	31020000 	mrscc	r0, (UNDEF: 2)
    5d34:	00006019 	andeq	r6, r0, r9, lsl r0
    5d38:	07020200 	streq	r0, [r2, -r0, lsl #4]
    5d3c:	00000230 	andeq	r0, r0, r0, lsr r2
    5d40:	0017c103 	andseq	ip, r7, r3, lsl #2
    5d44:	19340200 	ldmdbne	r4!, {r9}
    5d48:	00000073 	andeq	r0, r0, r3, ror r0
    5d4c:	79070402 	stmdbvc	r7, {r1, sl}
    5d50:	02000000 	andeq	r0, r0, #0
    5d54:	00740708 	rsbseq	r0, r4, r8, lsl #14
    5d58:	04040000 	streq	r0, [r4], #-0
    5d5c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    5d60:	07040200 	streq	r0, [r4, -r0, lsl #4]
    5d64:	0000007e 	andeq	r0, r0, lr, ror r0
    5d68:	0015ce03 	andseq	ip, r5, r3, lsl #28
    5d6c:	12270300 	eorne	r0, r7, #0, 6
    5d70:	00000054 	andeq	r0, r0, r4, asr r0
    5d74:	00008f05 	andeq	r8, r0, r5, lsl #30
    5d78:	13c60300 	bicne	r0, r6, #0, 6
    5d7c:	2b030000 	blcs	c5d84 <__ccfg+0xa5ddc>
    5d80:	00004112 	andeq	r4, r0, r2, lsl r1
    5d84:	00a00600 	adceq	r0, r0, r0, lsl #12
    5d88:	1f030000 	svcne	0x00030000
    5d8c:	03000016 	movweq	r0, #22
    5d90:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    5d94:	b1050000 	mrslt	r0, (UNDEF: 5)
    5d98:	03000000 	movweq	r0, #0
    5d9c:	00000263 	andeq	r0, r0, r3, ror #4
    5da0:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    5da4:	07000000 	streq	r0, [r0, -r0]
    5da8:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    5dac:	0000015c 	andeq	r0, r0, ip, asr r1
    5db0:	00027e08 	andeq	r7, r2, r8, lsl #28
    5db4:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    5db8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5dbc:	00070101 	andeq	r0, r7, r1, lsl #2
    5dc0:	00009808 	andeq	r9, r0, r8, lsl #16
    5dc4:	03350300 	teqeq	r5, #0, 6
    5dc8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5dcc:	00060101 	andeq	r0, r6, r1, lsl #2
    5dd0:	00024c08 	andeq	r4, r2, r8, lsl #24
    5dd4:	03360300 	teqeq	r6, #0, 6
    5dd8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5ddc:	00050101 	andeq	r0, r5, r1, lsl #2
    5de0:	0003ff08 	andeq	pc, r3, r8, lsl #30
    5de4:	03370300 	teqeq	r7, #0, 6
    5de8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5dec:	00040101 	andeq	r0, r4, r1, lsl #2
    5df0:	0003f808 	andeq	pc, r3, r8, lsl #16
    5df4:	03380300 	teqeq	r8, #0, 6
    5df8:	000000a0 	andeq	r0, r0, r0, lsr #1
    5dfc:	00000401 	andeq	r0, r0, r1, lsl #8
    5e00:	0003e909 	andeq	lr, r3, r9, lsl #18
    5e04:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    5e08:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e0c:	00400901 	subeq	r0, r0, r1, lsl #18
    5e10:	3c030000 	stccc	0, cr0, [r3], {-0}
    5e14:	0000a003 	andeq	sl, r0, r3
    5e18:	6d090200 	sfmvs	f0, 4, [r9, #-0]
    5e1c:	03000000 	movweq	r0, #0
    5e20:	00a0033d 	adceq	r0, r0, sp, lsr r3
    5e24:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    5e28:	0000011e 	andeq	r0, r0, lr, lsl r1
    5e2c:	b1083f03 	tstlt	r8, r3, lsl #30
    5e30:	04000000 	streq	r0, [r0], #-0
    5e34:	04280300 	strteq	r0, [r8], #-768	; 0xfffffd00
    5e38:	41030000 	mrsmi	r0, (UNDEF: 3)
    5e3c:	0000ce03 	andeq	ip, r0, r3, lsl #28
    5e40:	015c0600 	cmpeq	ip, r0, lsl #12
    5e44:	720a0000 	andvc	r0, sl, #0
    5e48:	03000002 	movweq	r0, #2
    5e4c:	01681a43 	cmneq	r8, r3, asr #20
    5e50:	01010000 	mrseq	r0, (UNDEF: 1)
    5e54:	0002de0a 	andeq	sp, r2, sl, lsl #28
    5e58:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    5e5c:	00000189 	andeq	r0, r0, r9, lsl #3
    5e60:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    5e64:	0000018f 	andeq	r0, r0, pc, lsl #3
    5e68:	7b080102 	blvc	206278 <__ccfg+0x1e62d0>
    5e6c:	05000003 	streq	r0, [r0, #-3]
    5e70:	0000018f 	andeq	r0, r0, pc, lsl #3
    5e74:	0002ec0a 	andeq	lr, r2, sl, lsl #24
    5e78:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    5e7c:	00000189 	andeq	r0, r0, r9, lsl #3
    5e80:	08070101 	stmdaeq	r7, {r0, r8}
    5e84:	da098f04 	ble	269a9c <__ccfg+0x249af4>
    5e88:	09000001 	stmdbeq	r0, {r0}
    5e8c:	00000285 	andeq	r0, r0, r5, lsl #5
    5e90:	670b9004 	strvs	r9, [fp, -r4]
    5e94:	00000000 	andeq	r0, r0, r0
    5e98:	0005fb09 	andeq	pc, r5, r9, lsl #22
    5e9c:	08910400 	ldmeq	r1, {sl}
    5ea0:	0000008f 	andeq	r0, r0, pc, lsl #1
    5ea4:	046b0904 	strbteq	r0, [fp], #-2308	; 0xfffff6fc
    5ea8:	92040000 	andls	r0, r4, #0
    5eac:	0000ac10 	andeq	sl, r0, r0, lsl ip
    5eb0:	03000600 	movweq	r0, #1536	; 0x600
    5eb4:	00000406 	andeq	r0, r0, r6, lsl #8
    5eb8:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    5ebc:	0c000001 	stceq	0, cr0, [r0], {1}
    5ec0:	000001da 	ldrdeq	r0, [r0], -sl
    5ec4:	000001f1 	strdeq	r0, [r0], -r1
    5ec8:	360a000d 	strcc	r0, [sl], -sp
    5ecc:	04000000 	streq	r0, [r0], #-0
    5ed0:	01e60f99 	strexheq	r0, r9, [r6]
    5ed4:	01010000 	mrseq	r0, (UNDEF: 1)
    5ed8:	91050107 	tstls	r5, r7, lsl #2
    5edc:	00022909 	andeq	r2, r2, r9, lsl #18
    5ee0:	045e0800 	ldrbeq	r0, [lr], #-2048	; 0xfffff800
    5ee4:	93050000 	movwls	r0, #20480	; 0x5000
    5ee8:	0000a007 	andeq	sl, r0, r7
    5eec:	01070100 	mrseq	r0, (UNDEF: 23)
    5ef0:	00310800 	eorseq	r0, r1, r0, lsl #16
    5ef4:	94050000 	strls	r0, [r5], #-0
    5ef8:	0000a003 	andeq	sl, r0, r3
    5efc:	00010100 	andeq	r0, r1, r0, lsl #2
    5f00:	43030000 	movwmi	r0, #12288	; 0x3000
    5f04:	05000002 	streq	r0, [r0, #-2]
    5f08:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    5f0c:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    5f10:	0c000002 	stceq	0, cr0, [r0], {2}
    5f14:	00000235 	andeq	r0, r0, r5, lsr r2
    5f18:	00000245 	andeq	r0, r0, r5, asr #4
    5f1c:	3a05000d 	bcc	145f58 <__ccfg+0x125fb0>
    5f20:	0a000002 	beq	5f30 <__exidx_end+0x3138>
    5f24:	000002a8 	andeq	r0, r0, r8, lsr #5
    5f28:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    5f2c:	01000002 	tsteq	r0, r2
    5f30:	009b0c01 	addseq	r0, fp, r1, lsl #24
    5f34:	02630000 	rsbeq	r0, r3, #0
    5f38:	000d0000 	andeq	r0, sp, r0
    5f3c:	00025805 	andeq	r5, r2, r5, lsl #16
    5f40:	03640a00 	cmneq	r4, #0, 20
    5f44:	06060000 	streq	r0, [r6], -r0
    5f48:	00026313 	andeq	r6, r2, r3, lsl r3
    5f4c:	0a010100 	beq	46354 <__ccfg+0x263ac>
    5f50:	000000fe 	strdeq	r0, [r0], -lr
    5f54:	b10ec304 	tstlt	lr, r4, lsl #6
    5f58:	01000000 	mrseq	r0, (UNDEF: 0)
    5f5c:	04780e01 	ldrbteq	r0, [r8], #-3585	; 0xfffff1ff
    5f60:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    5f64:	02911001 	addseq	r1, r1, #1
    5f68:	040b0000 	streq	r0, [fp], #-0
    5f6c:	00000297 	muleq	r0, r7, r2
    5f70:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    5f74:	8f100000 	svchi	0x00100000
    5f78:	00000000 	andeq	r0, r0, r0
    5f7c:	0001960c 	andeq	r9, r1, ip, lsl #12
    5f80:	0002ae00 	andeq	sl, r2, r0, lsl #28
    5f84:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    5f88:	000002a3 	andeq	r0, r0, r3, lsr #5
    5f8c:	00043811 	andeq	r3, r4, r1, lsl r8
    5f90:	017f0700 	cmneq	pc, r0, lsl #14
    5f94:	0002ae16 	andeq	sl, r2, r6, lsl lr
    5f98:	11010100 	mrsne	r0, (UNDEF: 17)
    5f9c:	0000035c 	andeq	r0, r0, ip, asr r3
    5fa0:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    5fa4:	000000bd 	strheq	r0, [r0], -sp
    5fa8:	63110101 	tstvs	r1, #1073741824	; 0x40000000
    5fac:	07000004 	streq	r0, [r0, -r4]
    5fb0:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    5fb4:	01000000 	mrseq	r0, (UNDEF: 0)
    5fb8:	07081201 	streq	r1, [r8, -r1, lsl #4]
    5fbc:	07090303 	streq	r0, [r9, -r3, lsl #6]
    5fc0:	13000003 	movwne	r0, #3
    5fc4:	00002202 	andeq	r2, r0, r2, lsl #4
    5fc8:	07030707 	streq	r0, [r3, -r7, lsl #14]
    5fcc:	0000008f 	andeq	r0, r0, pc, lsl #1
    5fd0:	054d1300 	strbeq	r1, [sp, #-768]	; 0xfffffd00
    5fd4:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    5fd8:	00c20803 	sbceq	r0, r2, r3, lsl #16
    5fdc:	00040000 	andeq	r0, r4, r0
    5fe0:	0002230e 	andeq	r2, r2, lr, lsl #6
    5fe4:	03090700 	movweq	r0, #38656	; 0x9700
    5fe8:	0002e003 	andeq	lr, r2, r3
    5fec:	04951400 	ldreq	r1, [r5], #1024	; 0x400
    5ff0:	07300000 	ldreq	r0, [r0, -r0]!
    5ff4:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    5ff8:	13000003 	movwne	r0, #3
    5ffc:	00000480 	andeq	r0, r0, r0, lsl #9
    6000:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6004:	0000008f 	andeq	r0, r0, pc, lsl #1
    6008:	028f1300 	addeq	r1, pc, #0, 6
    600c:	15070000 	strne	r0, [r7, #-0]
    6010:	008f0803 	addeq	r0, pc, r3, lsl #16
    6014:	13020000 	movwne	r0, #8192	; 0x2000
    6018:	0000047b 	andeq	r0, r0, fp, ror r4
    601c:	0b031607 	bleq	cb840 <__ccfg+0xab898>
    6020:	00000284 	andeq	r0, r0, r4, lsl #5
    6024:	0f4d1304 	svceq	0x004d1304
    6028:	17070000 	strne	r0, [r7, -r0]
    602c:	00c20903 	sbceq	r0, r2, r3, lsl #18
    6030:	13080000 	movwne	r0, #32768	; 0x8000
    6034:	00000431 	andeq	r0, r0, r1, lsr r4
    6038:	0f031807 	svceq	0x00031807
    603c:	00000377 	andeq	r0, r0, r7, ror r3
    6040:	028a130c 	addeq	r1, sl, #12, 6	; 0x30000000
    6044:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    6048:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    604c:	002c0000 	eoreq	r0, ip, r0
    6050:	0003070c 	andeq	r0, r3, ip, lsl #14
    6054:	00038700 	andeq	r8, r3, r0, lsl #14
    6058:	00881500 	addeq	r1, r8, r0, lsl #10
    605c:	00030000 	andeq	r0, r3, r0
    6060:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    6064:	a00e0000 	andge	r0, lr, r0
    6068:	07000004 	streq	r0, [r0, -r4]
    606c:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6070:	11000003 	tstne	r0, r3
    6074:	00000352 	andeq	r0, r0, r2, asr r3
    6078:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    607c:	000003a9 	andeq	r0, r0, r9, lsr #7
    6080:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6084:	0000038d 	andeq	r0, r0, sp, lsl #7
    6088:	0013d40a 	andseq	sp, r3, sl, lsl #8
    608c:	0e090100 	adfeqe	f0, f1, f0
    6090:	00000189 	andeq	r0, r0, r9, lsl #3
    6094:	01160101 	tsteq	r6, r1, lsl #2
    6098:	0000141d 	andeq	r1, r0, sp, lsl r4
    609c:	01050d01 	tsteq	r5, r1, lsl #26
    60a0:	00000081 	andeq	r0, r0, r1, lsl #1
    60a4:	00001714 	andeq	r1, r0, r4, lsl r7
    60a8:	0000178c 	andeq	r1, r0, ip, lsl #15
    60ac:	73179c01 	tstvc	r7, #256	; 0x100
    60b0:	0d010074 	stceq	0, cr0, [r1, #-464]	; 0xfffffe30
    60b4:	00008f12 	andeq	r8, r0, r2, lsl pc
    60b8:	00226b00 	eoreq	r6, r2, r0, lsl #22
    60bc:	75621700 	strbvc	r1, [r2, #-1792]!	; 0xfffff900
    60c0:	0d010066 	stceq	0, cr0, [r1, #-408]	; 0xfffffe68
    60c4:	0001891c 	andeq	r8, r1, ip, lsl r9
    60c8:	00228900 	eoreq	r8, r2, r0, lsl #18
    60cc:	656c1700 	strbvs	r1, [ip, #-1792]!	; 0xfffff900
    60d0:	0d01006e 	stceq	0, cr0, [r1, #-440]	; 0xfffffe48
    60d4:	00008125 	andeq	r8, r0, r5, lsr #2
    60d8:	0022de00 	eoreq	sp, r2, r0, lsl #28
    60dc:	14241800 	strtne	r1, [r4], #-2048	; 0xfffff800
    60e0:	11010000 	mrsne	r0, (UNDEF: 1)
    60e4:	00008106 	andeq	r8, r0, r6, lsl #2
    60e8:	00233300 	eoreq	r3, r3, r0, lsl #6
    60ec:	4c000000 	stcmi	0, cr0, [r0], {-0}
    60f0:	03000004 	movweq	r0, #4
    60f4:	001a9e00 	andseq	r9, sl, r0, lsl #28
    60f8:	2f010400 	svccs	0x00010400
    60fc:	0c000001 	stceq	0, cr0, [r0], {1}
    6100:	00001432 	andeq	r1, r0, r2, lsr r4
    6104:	00000380 	andeq	r0, r0, r0, lsl #7
    6108:	00000c08 	andeq	r0, r0, r8, lsl #24
    610c:	00000000 	andeq	r0, r0, r0
    6110:	00004972 	andeq	r4, r0, r2, ror r9
    6114:	74060102 	strvc	r0, [r6], #-258	; 0xfffffefe
    6118:	02000003 	andeq	r0, r0, #3
    611c:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
    6120:	04020000 	streq	r0, [r2], #-0
    6124:	0000a405 	andeq	sl, r0, r5, lsl #8
    6128:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    612c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6130:	00220a03 	eoreq	r0, r2, r3, lsl #20
    6134:	182e0200 	stmdane	lr!, {r9}
    6138:	0000004d 	andeq	r0, r0, sp, asr #32
    613c:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    6140:	03000003 	movweq	r0, #3
    6144:	000020f8 	strdeq	r2, [r0], -r8
    6148:	60193102 	andsvs	r3, r9, r2, lsl #2
    614c:	02000000 	andeq	r0, r0, #0
    6150:	02300702 	eorseq	r0, r0, #524288	; 0x80000
    6154:	c1030000 	mrsgt	r0, (UNDEF: 3)
    6158:	02000017 	andeq	r0, r0, #23
    615c:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6160:	04020000 	streq	r0, [r2], #-0
    6164:	00007907 	andeq	r7, r0, r7, lsl #18
    6168:	07080200 	streq	r0, [r8, -r0, lsl #4]
    616c:	00000074 	andeq	r0, r0, r4, ror r0
    6170:	69050404 	stmdbvs	r5, {r2, sl}
    6174:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6178:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    617c:	54030000 	strpl	r0, [r3], #-0
    6180:	0300000b 	movweq	r0, #11
    6184:	009b1b28 	addseq	r1, fp, r8, lsr #22
    6188:	6a050000 	bvs	146190 <__ccfg+0x1261e8>
    618c:	0400000a 	streq	r0, [r0], #-10
    6190:	00b30009 	adcseq	r0, r3, r9
    6194:	0a060000 	beq	18619c <__ccfg+0x1661f4>
    6198:	b300000c 	movwlt	r0, #12
    619c:	00000000 	andeq	r0, r0, r0
    61a0:	04070001 	streq	r0, [r7], #-1
    61a4:	000a6c03 	andeq	r6, sl, r3, lsl #24
    61a8:	18630300 	stmdane	r3!, {r8, r9}^
    61ac:	0000008f 	andeq	r0, r0, pc, lsl #1
    61b0:	0015ce03 	andseq	ip, r5, r3, lsl #28
    61b4:	12270400 	eorne	r0, r7, #0, 8
    61b8:	00000054 	andeq	r0, r0, r4, asr r0
    61bc:	0000c108 	andeq	ip, r0, r8, lsl #2
    61c0:	13c60300 	bicne	r0, r6, #0, 6
    61c4:	2b040000 	blcs	1061cc <__ccfg+0xe6224>
    61c8:	00004112 	andeq	r4, r0, r2, lsl r1
    61cc:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    61d0:	1f030000 	svcne	0x00030000
    61d4:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    61d8:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    61dc:	e3080000 	movw	r0, #32768	; 0x8000
    61e0:	03000000 	movweq	r0, #0
    61e4:	00000263 	andeq	r0, r0, r3, ror #4
    61e8:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    61ec:	0a000000 	beq	61f4 <__exidx_end+0x33fc>
    61f0:	09320408 	ldmdbeq	r2!, {r3, sl}
    61f4:	0000018e 	andeq	r0, r0, lr, lsl #3
    61f8:	00027e0b 	andeq	r7, r2, fp, lsl #28
    61fc:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    6200:	000000d2 	ldrdeq	r0, [r0], -r2
    6204:	00070101 	andeq	r0, r7, r1, lsl #2
    6208:	0000980b 	andeq	r9, r0, fp, lsl #16
    620c:	03350400 	teqeq	r5, #0, 8
    6210:	000000d2 	ldrdeq	r0, [r0], -r2
    6214:	00060101 	andeq	r0, r6, r1, lsl #2
    6218:	00024c0b 	andeq	r4, r2, fp, lsl #24
    621c:	03360400 	teqeq	r6, #0, 8
    6220:	000000d2 	ldrdeq	r0, [r0], -r2
    6224:	00050101 	andeq	r0, r5, r1, lsl #2
    6228:	0003ff0b 	andeq	pc, r3, fp, lsl #30
    622c:	03370400 	teqeq	r7, #0, 8
    6230:	000000d2 	ldrdeq	r0, [r0], -r2
    6234:	00040101 	andeq	r0, r4, r1, lsl #2
    6238:	0003f80b 	andeq	pc, r3, fp, lsl #16
    623c:	03380400 	teqeq	r8, #0, 8
    6240:	000000d2 	ldrdeq	r0, [r0], -r2
    6244:	00000401 	andeq	r0, r0, r1, lsl #8
    6248:	0003e90c 	andeq	lr, r3, ip, lsl #18
    624c:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    6250:	000000d2 	ldrdeq	r0, [r0], -r2
    6254:	00400c01 	subeq	r0, r0, r1, lsl #24
    6258:	3c040000 	stccc	0, cr0, [r4], {-0}
    625c:	0000d203 	andeq	sp, r0, r3, lsl #4
    6260:	6d0c0200 	sfmvs	f0, 4, [ip, #-0]
    6264:	04000000 	streq	r0, [r0], #-0
    6268:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    626c:	0c030000 	stceq	0, cr0, [r3], {-0}
    6270:	0000011e 	andeq	r0, r0, lr, lsl r1
    6274:	e3083f04 	movw	r3, #36612	; 0x8f04
    6278:	04000000 	streq	r0, [r0], #-0
    627c:	04280300 	strteq	r0, [r8], #-768	; 0xfffffd00
    6280:	41040000 	mrsmi	r0, (UNDEF: 4)
    6284:	00010003 	andeq	r0, r1, r3
    6288:	018e0900 	orreq	r0, lr, r0, lsl #18
    628c:	720d0000 	andvc	r0, sp, #0
    6290:	04000002 	streq	r0, [r0], #-2
    6294:	019a1a43 	orrseq	r1, sl, r3, asr #20
    6298:	01010000 	mrseq	r0, (UNDEF: 1)
    629c:	0002de0d 	andeq	sp, r2, sp, lsl #28
    62a0:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    62a4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    62a8:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    62ac:	000001c1 	andeq	r0, r0, r1, asr #3
    62b0:	7b080102 	blvc	2066c0 <__ccfg+0x1e6718>
    62b4:	08000003 	stmdaeq	r0, {r0, r1}
    62b8:	000001c1 	andeq	r0, r0, r1, asr #3
    62bc:	0002ec0d 	andeq	lr, r2, sp, lsl #24
    62c0:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    62c4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    62c8:	080a0101 	stmdaeq	sl, {r0, r8}
    62cc:	0c098f05 	stceq	15, cr8, [r9], {5}
    62d0:	0c000002 	stceq	0, cr0, [r0], {2}
    62d4:	00000285 	andeq	r0, r0, r5, lsl #5
    62d8:	670b9005 	strvs	r9, [fp, -r5]
    62dc:	00000000 	andeq	r0, r0, r0
    62e0:	0005fb0c 	andeq	pc, r5, ip, lsl #22
    62e4:	08910500 	ldmeq	r1, {r8, sl}
    62e8:	000000c1 	andeq	r0, r0, r1, asr #1
    62ec:	046b0c04 	strbteq	r0, [fp], #-3076	; 0xfffff3fc
    62f0:	92050000 	andls	r0, r5, #0
    62f4:	0000de10 	andeq	sp, r0, r0, lsl lr
    62f8:	03000600 	movweq	r0, #1536	; 0x600
    62fc:	00000406 	andeq	r0, r0, r6, lsl #8
    6300:	db039305 	blle	eaf1c <__ccfg+0xcaf74>
    6304:	0f000001 	svceq	0x00000001
    6308:	0000020c 	andeq	r0, r0, ip, lsl #4
    630c:	00000223 	andeq	r0, r0, r3, lsr #4
    6310:	360d0010 			; <UNDEFINED> instruction: 0x360d0010
    6314:	05000000 	streq	r0, [r0, #-0]
    6318:	02180f99 	andseq	r0, r8, #612	; 0x264
    631c:	01010000 	mrseq	r0, (UNDEF: 1)
    6320:	9106010a 	tstls	r6, sl, lsl #2
    6324:	00025b09 	andeq	r5, r2, r9, lsl #22
    6328:	045e0b00 	ldrbeq	r0, [lr], #-2816	; 0xfffff500
    632c:	93060000 	movwls	r0, #24576	; 0x6000
    6330:	0000d207 	andeq	sp, r0, r7, lsl #4
    6334:	01070100 	mrseq	r0, (UNDEF: 23)
    6338:	00310b00 	eorseq	r0, r1, r0, lsl #22
    633c:	94060000 	strls	r0, [r6], #-0
    6340:	0000d203 	andeq	sp, r0, r3, lsl #4
    6344:	00010100 	andeq	r0, r1, r0, lsl #2
    6348:	43030000 	movwmi	r0, #12288	; 0x3000
    634c:	06000002 	streq	r0, [r0], -r2
    6350:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    6354:	5b080000 	blpl	20635c <__ccfg+0x1e63b4>
    6358:	0f000002 	svceq	0x00000002
    635c:	00000267 	andeq	r0, r0, r7, ror #4
    6360:	00000277 	andeq	r0, r0, r7, ror r2
    6364:	6c080010 	stcvs	0, cr0, [r8], {16}
    6368:	0d000002 	stceq	0, cr0, [r0, #-8]
    636c:	000002a8 	andeq	r0, r0, r8, lsr #5
    6370:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    6374:	01000002 	tsteq	r0, r2
    6378:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    637c:	02950000 	addseq	r0, r5, #0
    6380:	00100000 	andseq	r0, r0, r0
    6384:	00028a08 	andeq	r8, r2, r8, lsl #20
    6388:	03640d00 	cmneq	r4, #0, 26
    638c:	06070000 	streq	r0, [r7], -r0
    6390:	00029513 	andeq	r9, r2, r3, lsl r5
    6394:	0d010100 	stfeqs	f0, [r1, #-0]
    6398:	000000fe 	strdeq	r0, [r0], -lr
    639c:	e30ec305 	movw	ip, #58117	; 0xe305
    63a0:	01000000 	mrseq	r0, (UNDEF: 0)
    63a4:	04781101 	ldrbteq	r1, [r8], #-257	; 0xfffffeff
    63a8:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    63ac:	02c31001 	sbceq	r1, r3, #1
    63b0:	040e0000 	streq	r0, [lr], #-0
    63b4:	000002c9 	andeq	r0, r0, r9, asr #5
    63b8:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    63bc:	c1130000 	tstgt	r3, r0
    63c0:	00000000 	andeq	r0, r0, r0
    63c4:	0001c80f 	andeq	ip, r1, pc, lsl #16
    63c8:	0002e000 	andeq	lr, r2, r0
    63cc:	08001000 	stmdaeq	r0, {ip}
    63d0:	000002d5 	ldrdeq	r0, [r0], -r5
    63d4:	00043814 	andeq	r3, r4, r4, lsl r8
    63d8:	017f0800 	cmneq	pc, r0, lsl #16
    63dc:	0002e016 	andeq	lr, r2, r6, lsl r0
    63e0:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    63e4:	0000035c 	andeq	r0, r0, ip, asr r3
    63e8:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    63ec:	000000ef 	andeq	r0, r0, pc, ror #1
    63f0:	63140101 	tstvs	r4, #1073741824	; 0x40000000
    63f4:	08000004 	stmdaeq	r0, {r2}
    63f8:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    63fc:	01000000 	mrseq	r0, (UNDEF: 0)
    6400:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    6404:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    6408:	16000003 	strne	r0, [r0], -r3
    640c:	00002202 	andeq	r2, r0, r2, lsl #4
    6410:	07030708 	streq	r0, [r3, -r8, lsl #14]
    6414:	000000c1 	andeq	r0, r0, r1, asr #1
    6418:	054d1600 	strbeq	r1, [sp, #-1536]	; 0xfffffa00
    641c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6420:	00f40803 	rscseq	r0, r4, r3, lsl #16
    6424:	00040000 	andeq	r0, r4, r0
    6428:	00022311 	andeq	r2, r2, r1, lsl r3
    642c:	03090800 	movweq	r0, #38912	; 0x9800
    6430:	00031203 	andeq	r1, r3, r3, lsl #4
    6434:	04951700 	ldreq	r1, [r5], #1792	; 0x700
    6438:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    643c:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    6440:	16000003 	strne	r0, [r0], -r3
    6444:	00000480 	andeq	r0, r0, r0, lsl #9
    6448:	08031408 	stmdaeq	r3, {r3, sl, ip}
    644c:	000000c1 	andeq	r0, r0, r1, asr #1
    6450:	028f1600 	addeq	r1, pc, #0, 12
    6454:	15080000 	strne	r0, [r8, #-0]
    6458:	00c10803 	sbceq	r0, r1, r3, lsl #16
    645c:	16020000 	strne	r0, [r2], -r0
    6460:	0000047b 	andeq	r0, r0, fp, ror r4
    6464:	0b031608 	bleq	cbc8c <__ccfg+0xabce4>
    6468:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    646c:	0f4d1604 	svceq	0x004d1604
    6470:	17080000 	strne	r0, [r8, -r0]
    6474:	00f40903 	rscseq	r0, r4, r3, lsl #18
    6478:	16080000 	strne	r0, [r8], -r0
    647c:	00000431 	andeq	r0, r0, r1, lsr r4
    6480:	0f031808 	svceq	0x00031808
    6484:	000003a9 	andeq	r0, r0, r9, lsr #7
    6488:	028a160c 	addeq	r1, sl, #12, 12	; 0xc00000
    648c:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    6490:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    6494:	002c0000 	eoreq	r0, ip, r0
    6498:	0003390f 	andeq	r3, r3, pc, lsl #18
    649c:	0003b900 	andeq	fp, r3, r0, lsl #18
    64a0:	00881800 	addeq	r1, r8, r0, lsl #16
    64a4:	00030000 	andeq	r0, r3, r0
    64a8:	0346040e 	movteq	r0, #25614	; 0x640e
    64ac:	a0110000 	andsge	r0, r1, r0
    64b0:	08000004 	stmdaeq	r0, {r2}
    64b4:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    64b8:	14000003 	strne	r0, [r0], #-3
    64bc:	00000352 	andeq	r0, r0, r2, asr r3
    64c0:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    64c4:	000003db 	ldrdeq	r0, [r0], -fp
    64c8:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    64cc:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    64d0:	14290119 	strtne	r0, [r9], #-281	; 0xfffffee7
    64d4:	0c010000 	stceq	0, cr0, [r1], {-0}
    64d8:	00810105 	addeq	r0, r1, r5, lsl #2
    64dc:	178c0000 	strne	r0, [ip, r0]
    64e0:	17e00000 	strbne	r0, [r0, r0]!
    64e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    64e8:	00000449 	andeq	r0, r0, r9, asr #8
    64ec:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    64f0:	c1140c01 	tstgt	r4, r1, lsl #24
    64f4:	7d000000 	stcvc	0, cr0, [r0, #-0]
    64f8:	1b000023 	blne	658c <__exidx_end+0x3794>
    64fc:	0c01006d 	stceq	0, cr0, [r1], {109}	; 0x6d
    6500:	00044924 	andeq	r4, r4, r4, lsr #18
    6504:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6508:	14241d1c 	strtne	r1, [r4], #-3356	; 0xfffff2e4
    650c:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6510:	00008106 	andeq	r8, r0, r6, lsl #2
    6514:	00239000 	eoreq	r9, r3, r0
    6518:	75621e00 	strbvc	r1, [r2, #-3584]!	; 0xfffff200
    651c:	0f010066 	svceq	0x00010066
    6520:	0001bb08 	andeq	fp, r1, r8, lsl #22
    6524:	0023cf00 	eoreq	ip, r3, r0, lsl #30
    6528:	70611f00 	rsbvc	r1, r1, r0, lsl #30
    652c:	0a100100 	beq	406934 <__ccfg+0x3e698c>
    6530:	000000b5 	strheq	r0, [r0], -r5
    6534:	005c9102 	subseq	r9, ip, r2, lsl #2
    6538:	01c8040e 	biceq	r0, r8, lr, lsl #8
    653c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    6540:	03000004 	movweq	r0, #4
    6544:	001c4a00 	andseq	r4, ip, r0, lsl #20
    6548:	2f010400 	svccs	0x00010400
    654c:	0c000001 	stceq	0, cr0, [r0], {1}
    6550:	00001473 	andeq	r1, r0, r3, ror r4
    6554:	00000380 	andeq	r0, r0, r0, lsl #7
    6558:	00000c18 	andeq	r0, r0, r8, lsl ip
    655c:	00000000 	andeq	r0, r0, r0
    6560:	00004b14 	andeq	r4, r0, r4, lsl fp
    6564:	74060102 	strvc	r0, [r6], #-258	; 0xfffffefe
    6568:	02000003 	andeq	r0, r0, #3
    656c:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
    6570:	04020000 	streq	r0, [r2], #-0
    6574:	0000a405 	andeq	sl, r0, r5, lsl #8
    6578:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    657c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    6580:	00220a03 	eoreq	r0, r2, r3, lsl #20
    6584:	182e0200 	stmdane	lr!, {r9}
    6588:	0000004d 	andeq	r0, r0, sp, asr #32
    658c:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    6590:	03000003 	movweq	r0, #3
    6594:	000020f8 	strdeq	r2, [r0], -r8
    6598:	60193102 	andsvs	r3, r9, r2, lsl #2
    659c:	02000000 	andeq	r0, r0, #0
    65a0:	02300702 	eorseq	r0, r0, #524288	; 0x80000
    65a4:	c1030000 	mrsgt	r0, (UNDEF: 3)
    65a8:	02000017 	andeq	r0, r0, #23
    65ac:	00731934 	rsbseq	r1, r3, r4, lsr r9
    65b0:	04020000 	streq	r0, [r2], #-0
    65b4:	00007907 	andeq	r7, r0, r7, lsl #18
    65b8:	07080200 	streq	r0, [r8, -r0, lsl #4]
    65bc:	00000074 	andeq	r0, r0, r4, ror r0
    65c0:	69050404 	stmdbvs	r5, {r2, sl}
    65c4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    65c8:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    65cc:	54030000 	strpl	r0, [r3], #-0
    65d0:	0300000b 	movweq	r0, #11
    65d4:	009b1b28 	addseq	r1, fp, r8, lsr #22
    65d8:	6a050000 	bvs	1465e0 <__ccfg+0x126638>
    65dc:	0400000a 	streq	r0, [r0], #-10
    65e0:	00b30009 	adcseq	r0, r3, r9
    65e4:	0a060000 	beq	1865ec <__ccfg+0x166644>
    65e8:	b300000c 	movwlt	r0, #12
    65ec:	00000000 	andeq	r0, r0, r0
    65f0:	04070001 	streq	r0, [r7], #-1
    65f4:	000a6c03 	andeq	r6, sl, r3, lsl #24
    65f8:	18630300 	stmdane	r3!, {r8, r9}^
    65fc:	0000008f 	andeq	r0, r0, pc, lsl #1
    6600:	0015ce03 	andseq	ip, r5, r3, lsl #28
    6604:	12270400 	eorne	r0, r7, #0, 8
    6608:	00000054 	andeq	r0, r0, r4, asr r0
    660c:	0000c108 	andeq	ip, r0, r8, lsl #2
    6610:	13c60300 	bicne	r0, r6, #0, 6
    6614:	2b040000 	blcs	10661c <__ccfg+0xe6674>
    6618:	00004112 	andeq	r4, r0, r2, lsl r1
    661c:	00d20900 	sbcseq	r0, r2, r0, lsl #18
    6620:	1f030000 	svcne	0x00030000
    6624:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    6628:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    662c:	e3080000 	movw	r0, #32768	; 0x8000
    6630:	03000000 	movweq	r0, #0
    6634:	00000263 	andeq	r0, r0, r3, ror #4
    6638:	67122d04 	ldrvs	r2, [r2, -r4, lsl #26]
    663c:	0a000000 	beq	6644 <__exidx_end+0x384c>
    6640:	09320408 	ldmdbeq	r2!, {r3, sl}
    6644:	0000018e 	andeq	r0, r0, lr, lsl #3
    6648:	00027e0b 	andeq	r7, r2, fp, lsl #28
    664c:	07340400 	ldreq	r0, [r4, -r0, lsl #8]!
    6650:	000000d2 	ldrdeq	r0, [r0], -r2
    6654:	00070101 	andeq	r0, r7, r1, lsl #2
    6658:	0000980b 	andeq	r9, r0, fp, lsl #16
    665c:	03350400 	teqeq	r5, #0, 8
    6660:	000000d2 	ldrdeq	r0, [r0], -r2
    6664:	00060101 	andeq	r0, r6, r1, lsl #2
    6668:	00024c0b 	andeq	r4, r2, fp, lsl #24
    666c:	03360400 	teqeq	r6, #0, 8
    6670:	000000d2 	ldrdeq	r0, [r0], -r2
    6674:	00050101 	andeq	r0, r5, r1, lsl #2
    6678:	0003ff0b 	andeq	pc, r3, fp, lsl #30
    667c:	03370400 	teqeq	r7, #0, 8
    6680:	000000d2 	ldrdeq	r0, [r0], -r2
    6684:	00040101 	andeq	r0, r4, r1, lsl #2
    6688:	0003f80b 	andeq	pc, r3, fp, lsl #16
    668c:	03380400 	teqeq	r8, #0, 8
    6690:	000000d2 	ldrdeq	r0, [r0], -r2
    6694:	00000401 	andeq	r0, r0, r1, lsl #8
    6698:	0003e90c 	andeq	lr, r3, ip, lsl #18
    669c:	073a0400 	ldreq	r0, [sl, -r0, lsl #8]!
    66a0:	000000d2 	ldrdeq	r0, [r0], -r2
    66a4:	00400c01 	subeq	r0, r0, r1, lsl #24
    66a8:	3c040000 	stccc	0, cr0, [r4], {-0}
    66ac:	0000d203 	andeq	sp, r0, r3, lsl #4
    66b0:	6d0c0200 	sfmvs	f0, 4, [ip, #-0]
    66b4:	04000000 	streq	r0, [r0], #-0
    66b8:	00d2033d 	sbcseq	r0, r2, sp, lsr r3
    66bc:	0c030000 	stceq	0, cr0, [r3], {-0}
    66c0:	0000011e 	andeq	r0, r0, lr, lsl r1
    66c4:	e3083f04 	movw	r3, #36612	; 0x8f04
    66c8:	04000000 	streq	r0, [r0], #-0
    66cc:	04280300 	strteq	r0, [r8], #-768	; 0xfffffd00
    66d0:	41040000 	mrsmi	r0, (UNDEF: 4)
    66d4:	00010003 	andeq	r0, r1, r3
    66d8:	018e0900 	orreq	r0, lr, r0, lsl #18
    66dc:	720d0000 	andvc	r0, sp, #0
    66e0:	04000002 	streq	r0, [r0], #-2
    66e4:	019a1a43 	orrseq	r1, sl, r3, asr #20
    66e8:	01010000 	mrseq	r0, (UNDEF: 1)
    66ec:	0002de0d 	andeq	sp, r2, sp, lsl #28
    66f0:	0e450400 	cdpeq	4, 4, cr0, cr5, cr0, {0}
    66f4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    66f8:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    66fc:	000001c1 	andeq	r0, r0, r1, asr #3
    6700:	7b080102 	blvc	206b10 <__ccfg+0x1e6b68>
    6704:	08000003 	stmdaeq	r0, {r0, r1}
    6708:	000001c1 	andeq	r0, r0, r1, asr #3
    670c:	0002ec0d 	andeq	lr, r2, sp, lsl #24
    6710:	1e450400 	cdpne	4, 4, cr0, cr5, cr0, {0}
    6714:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6718:	080a0101 	stmdaeq	sl, {r0, r8}
    671c:	0c098f05 	stceq	15, cr8, [r9], {5}
    6720:	0c000002 	stceq	0, cr0, [r0], {2}
    6724:	00000285 	andeq	r0, r0, r5, lsl #5
    6728:	670b9005 	strvs	r9, [fp, -r5]
    672c:	00000000 	andeq	r0, r0, r0
    6730:	0005fb0c 	andeq	pc, r5, ip, lsl #22
    6734:	08910500 	ldmeq	r1, {r8, sl}
    6738:	000000c1 	andeq	r0, r0, r1, asr #1
    673c:	046b0c04 	strbteq	r0, [fp], #-3076	; 0xfffff3fc
    6740:	92050000 	andls	r0, r5, #0
    6744:	0000de10 	andeq	sp, r0, r0, lsl lr
    6748:	03000600 	movweq	r0, #1536	; 0x600
    674c:	00000406 	andeq	r0, r0, r6, lsl #8
    6750:	db039305 	blle	eb36c <__ccfg+0xcb3c4>
    6754:	0f000001 	svceq	0x00000001
    6758:	0000020c 	andeq	r0, r0, ip, lsl #4
    675c:	00000223 	andeq	r0, r0, r3, lsr #4
    6760:	360d0010 			; <UNDEFINED> instruction: 0x360d0010
    6764:	05000000 	streq	r0, [r0, #-0]
    6768:	02180f99 	andseq	r0, r8, #612	; 0x264
    676c:	01010000 	mrseq	r0, (UNDEF: 1)
    6770:	9106010a 	tstls	r6, sl, lsl #2
    6774:	00025b09 	andeq	r5, r2, r9, lsl #22
    6778:	045e0b00 	ldrbeq	r0, [lr], #-2816	; 0xfffff500
    677c:	93060000 	movwls	r0, #24576	; 0x6000
    6780:	0000d207 	andeq	sp, r0, r7, lsl #4
    6784:	01070100 	mrseq	r0, (UNDEF: 23)
    6788:	00310b00 	eorseq	r0, r1, r0, lsl #22
    678c:	94060000 	strls	r0, [r6], #-0
    6790:	0000d203 	andeq	sp, r0, r3, lsl #4
    6794:	00010100 	andeq	r0, r1, r0, lsl #2
    6798:	43030000 	movwmi	r0, #12288	; 0x3000
    679c:	06000002 	streq	r0, [r0], -r2
    67a0:	02310396 	eorseq	r0, r1, #1476395010	; 0x58000002
    67a4:	5b080000 	blpl	2067ac <__ccfg+0x1e6804>
    67a8:	0f000002 	svceq	0x00000002
    67ac:	00000267 	andeq	r0, r0, r7, ror #4
    67b0:	00000277 	andeq	r0, r0, r7, ror r2
    67b4:	6c080010 	stcvs	0, cr0, [r8], {16}
    67b8:	0d000002 	stceq	0, cr0, [r0, #-8]
    67bc:	000002a8 	andeq	r0, r0, r8, lsr #5
    67c0:	77179c06 	ldrvc	r9, [r7, -r6, lsl #24]
    67c4:	01000002 	tsteq	r0, r2
    67c8:	00cd0f01 	sbceq	r0, sp, r1, lsl #30
    67cc:	02950000 	addseq	r0, r5, #0
    67d0:	00100000 	andseq	r0, r0, r0
    67d4:	00028a08 	andeq	r8, r2, r8, lsl #20
    67d8:	03640d00 	cmneq	r4, #0, 26
    67dc:	06070000 	streq	r0, [r7], -r0
    67e0:	00029513 	andeq	r9, r2, r3, lsl r5
    67e4:	0d010100 	stfeqs	f0, [r1, #-0]
    67e8:	000000fe 	strdeq	r0, [r0], -lr
    67ec:	e30ec305 	movw	ip, #58117	; 0xe305
    67f0:	01000000 	mrseq	r0, (UNDEF: 0)
    67f4:	04781101 	ldrbteq	r1, [r8], #-257	; 0xfffffeff
    67f8:	6e080000 	cdpvs	0, 0, cr0, cr8, cr0, {0}
    67fc:	02c31001 	sbceq	r1, r3, #1
    6800:	040e0000 	streq	r0, [lr], #-0
    6804:	000002c9 	andeq	r0, r0, r9, asr #5
    6808:	02d50112 	sbcseq	r0, r5, #-2147483644	; 0x80000004
    680c:	c1130000 	tstgt	r3, r0
    6810:	00000000 	andeq	r0, r0, r0
    6814:	0001c80f 	andeq	ip, r1, pc, lsl #16
    6818:	0002e000 	andeq	lr, r2, r0
    681c:	08001000 	stmdaeq	r0, {ip}
    6820:	000002d5 	ldrdeq	r0, [r0], -r5
    6824:	00043814 	andeq	r3, r4, r4, lsl r8
    6828:	017f0800 	cmneq	pc, r0, lsl #16
    682c:	0002e016 	andeq	lr, r2, r6, lsl r0
    6830:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    6834:	0000035c 	andeq	r0, r0, ip, asr r3
    6838:	14018208 	strne	r8, [r1], #-520	; 0xfffffdf8
    683c:	000000ef 	andeq	r0, r0, pc, ror #1
    6840:	63140101 	tstvs	r4, #1073741824	; 0x40000000
    6844:	08000004 	stmdaeq	r0, {r2}
    6848:	e30e02d8 	movw	r0, #58072	; 0xe2d8
    684c:	01000000 	mrseq	r0, (UNDEF: 0)
    6850:	08081501 	stmdaeq	r8, {r0, r8, sl, ip}
    6854:	39090303 	stmdbcc	r9, {r0, r1, r8, r9}
    6858:	16000003 	strne	r0, [r0], -r3
    685c:	00002202 	andeq	r2, r0, r2, lsl #4
    6860:	07030708 	streq	r0, [r3, -r8, lsl #14]
    6864:	000000c1 	andeq	r0, r0, r1, asr #1
    6868:	054d1600 	strbeq	r1, [sp, #-1536]	; 0xfffffa00
    686c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6870:	00f40803 	rscseq	r0, r4, r3, lsl #16
    6874:	00040000 	andeq	r0, r4, r0
    6878:	00022311 	andeq	r2, r2, r1, lsl r3
    687c:	03090800 	movweq	r0, #38912	; 0x9800
    6880:	00031203 	andeq	r1, r3, r3, lsl #4
    6884:	04951700 	ldreq	r1, [r5], #1792	; 0x700
    6888:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
    688c:	a908030b 	stmdbge	r8, {r0, r1, r3, r8, r9}
    6890:	16000003 	strne	r0, [r0], -r3
    6894:	00000480 	andeq	r0, r0, r0, lsl #9
    6898:	08031408 	stmdaeq	r3, {r3, sl, ip}
    689c:	000000c1 	andeq	r0, r0, r1, asr #1
    68a0:	028f1600 	addeq	r1, pc, #0, 12
    68a4:	15080000 	strne	r0, [r8, #-0]
    68a8:	00c10803 	sbceq	r0, r1, r3, lsl #16
    68ac:	16020000 	strne	r0, [r2], -r0
    68b0:	0000047b 	andeq	r0, r0, fp, ror r4
    68b4:	0b031608 	bleq	cc0dc <__ccfg+0xac134>
    68b8:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
    68bc:	0f4d1604 	svceq	0x004d1604
    68c0:	17080000 	strne	r0, [r8, -r0]
    68c4:	00f40903 	rscseq	r0, r4, r3, lsl #18
    68c8:	16080000 	strne	r0, [r8], -r0
    68cc:	00000431 	andeq	r0, r0, r1, lsr r4
    68d0:	0f031808 	svceq	0x00031808
    68d4:	000003a9 	andeq	r0, r0, r9, lsr #7
    68d8:	028a160c 	addeq	r1, sl, #12, 12	; 0xc00000
    68dc:	19080000 	stmdbne	r8, {}	; <UNPREDICTABLE>
    68e0:	03b91503 			; <UNDEFINED> instruction: 0x03b91503
    68e4:	002c0000 	eoreq	r0, ip, r0
    68e8:	0003390f 	andeq	r3, r3, pc, lsl #18
    68ec:	0003b900 	andeq	fp, r3, r0, lsl #18
    68f0:	00881800 	addeq	r1, r8, r0, lsl #16
    68f4:	00030000 	andeq	r0, r3, r0
    68f8:	0346040e 	movteq	r0, #25614	; 0x640e
    68fc:	a0110000 	andsge	r0, r1, r0
    6900:	08000004 	stmdaeq	r0, {r2}
    6904:	461b031c 			; <UNDEFINED> instruction: 0x461b031c
    6908:	14000003 	strne	r0, [r0], #-3
    690c:	00000352 	andeq	r0, r0, r2, asr r3
    6910:	14031e08 	strne	r1, [r3], #-3592	; 0xfffff1f8
    6914:	000003db 	ldrdeq	r0, [r0], -fp
    6918:	040e0101 	streq	r0, [lr], #-257	; 0xfffffeff
    691c:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
    6920:	0013d40d 	andseq	sp, r3, sp, lsl #8
    6924:	0e0a0100 	adfeqe	f0, f2, f0
    6928:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    692c:	01190101 	tsteq	r9, r1, lsl #2
    6930:	000014b3 			; <UNDEFINED> instruction: 0x000014b3
    6934:	01050e01 	tsteq	r5, r1, lsl #28
    6938:	00000081 	andeq	r0, r0, r1, lsl #1
    693c:	000017e0 	andeq	r1, r0, r0, ror #15
    6940:	00001840 	andeq	r1, r0, r0, asr #16
    6944:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    6948:	731a0000 	tstvc	sl, #0
    694c:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    6950:	0000c113 	andeq	ip, r0, r3, lsl r1
    6954:	00240300 	eoreq	r0, r4, r0, lsl #6
    6958:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    695c:	0e010074 	mcreq	0, 0, r0, cr1, cr4, {3}
    6960:	00044923 	andeq	r4, r4, r3, lsr #18
    6964:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    6968:	14241d1c 	strtne	r1, [r4], #-3356	; 0xfffff2e4
    696c:	13010000 	movwne	r0, #4096	; 0x1000
    6970:	00008106 	andeq	r8, r0, r6, lsl #2
    6974:	00242100 	eoreq	r2, r4, r0, lsl #2
    6978:	70611e00 	rsbvc	r1, r1, r0, lsl #28
    697c:	0a140100 	beq	506d84 <__ccfg+0x4e6ddc>
    6980:	000000b5 	strheq	r0, [r0], -r5
    6984:	00649102 	rsbeq	r9, r4, r2, lsl #2
    6988:	01c8040e 	biceq	r0, r8, lr, lsl #8
    698c:	2d000000 	stccs	0, cr0, [r0, #-0]
    6990:	03000004 	movweq	r0, #4
    6994:	001de500 	andseq	lr, sp, r0, lsl #10
    6998:	2f010400 	svccs	0x00010400
    699c:	0c000001 	stceq	0, cr0, [r0], {1}
    69a0:	000014bb 			; <UNDEFINED> instruction: 0x000014bb
    69a4:	00000380 	andeq	r0, r0, r0, lsl #7
    69a8:	00000c40 	andeq	r0, r0, r0, asr #24
    69ac:	00000000 	andeq	r0, r0, r0
    69b0:	00004cc7 	andeq	r4, r0, r7, asr #25
    69b4:	74060102 	strvc	r0, [r6], #-258	; 0xfffffefe
    69b8:	02000003 	andeq	r0, r0, #3
    69bc:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
    69c0:	04020000 	streq	r0, [r2], #-0
    69c4:	0000a405 	andeq	sl, r0, r5, lsl #8
    69c8:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    69cc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    69d0:	00220a03 	eoreq	r0, r2, r3, lsl #20
    69d4:	182e0200 	stmdane	lr!, {r9}
    69d8:	0000004d 	andeq	r0, r0, sp, asr #32
    69dc:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    69e0:	03000003 	movweq	r0, #3
    69e4:	000020f8 	strdeq	r2, [r0], -r8
    69e8:	60193102 	andsvs	r3, r9, r2, lsl #2
    69ec:	02000000 	andeq	r0, r0, #0
    69f0:	02300702 	eorseq	r0, r0, #524288	; 0x80000
    69f4:	c1030000 	mrsgt	r0, (UNDEF: 3)
    69f8:	02000017 	andeq	r0, r0, #23
    69fc:	00731934 	rsbseq	r1, r3, r4, lsr r9
    6a00:	04020000 	streq	r0, [r2], #-0
    6a04:	00007907 	andeq	r7, r0, r7, lsl #18
    6a08:	07080200 	streq	r0, [r8, -r0, lsl #4]
    6a0c:	00000074 	andeq	r0, r0, r4, ror r0
    6a10:	69050404 	stmdbvs	r5, {r2, sl}
    6a14:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    6a18:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    6a1c:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
    6a20:	03000015 	movweq	r0, #21
    6a24:	00541227 	subseq	r1, r4, r7, lsr #4
    6a28:	8f050000 	svchi	0x00050000
    6a2c:	03000000 	movweq	r0, #0
    6a30:	000013c6 	andeq	r1, r0, r6, asr #7
    6a34:	41122b03 	tstmi	r2, r3, lsl #22
    6a38:	06000000 	streq	r0, [r0], -r0
    6a3c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a40:	00161f03 	andseq	r1, r6, r3, lsl #30
    6a44:	122c0300 	eorne	r0, ip, #0, 6
    6a48:	00000067 	andeq	r0, r0, r7, rrx
    6a4c:	0000b105 	andeq	fp, r0, r5, lsl #2
    6a50:	02630300 	rsbeq	r0, r3, #0, 6
    6a54:	2d030000 	stccs	0, cr0, [r3, #-0]
    6a58:	00006712 	andeq	r6, r0, r2, lsl r7
    6a5c:	03080700 	movweq	r0, #34560	; 0x8700
    6a60:	015c0932 	cmpeq	ip, r2, lsr r9
    6a64:	7e080000 	cdpvc	0, 0, cr0, cr8, cr0, {0}
    6a68:	03000002 	movweq	r0, #2
    6a6c:	00a00734 	adceq	r0, r0, r4, lsr r7
    6a70:	01010000 	mrseq	r0, (UNDEF: 1)
    6a74:	98080007 	stmdals	r8, {r0, r1, r2}
    6a78:	03000000 	movweq	r0, #0
    6a7c:	00a00335 	adceq	r0, r0, r5, lsr r3
    6a80:	01010000 	mrseq	r0, (UNDEF: 1)
    6a84:	4c080006 	stcmi	0, cr0, [r8], {6}
    6a88:	03000002 	movweq	r0, #2
    6a8c:	00a00336 	adceq	r0, r0, r6, lsr r3
    6a90:	01010000 	mrseq	r0, (UNDEF: 1)
    6a94:	ff080005 			; <UNDEFINED> instruction: 0xff080005
    6a98:	03000003 	movweq	r0, #3
    6a9c:	00a00337 	adceq	r0, r0, r7, lsr r3
    6aa0:	01010000 	mrseq	r0, (UNDEF: 1)
    6aa4:	f8080004 			; <UNDEFINED> instruction: 0xf8080004
    6aa8:	03000003 	movweq	r0, #3
    6aac:	00a00338 	adceq	r0, r0, r8, lsr r3
    6ab0:	04010000 	streq	r0, [r1], #-0
    6ab4:	e9090000 	stmdb	r9, {}	; <UNPREDICTABLE>
    6ab8:	03000003 	movweq	r0, #3
    6abc:	00a0073a 	adceq	r0, r0, sl, lsr r7
    6ac0:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    6ac4:	00000040 	andeq	r0, r0, r0, asr #32
    6ac8:	a0033c03 	andge	r3, r3, r3, lsl #24
    6acc:	02000000 	andeq	r0, r0, #0
    6ad0:	00006d09 	andeq	r6, r0, r9, lsl #26
    6ad4:	033d0300 	teqeq	sp, #0, 6
    6ad8:	000000a0 	andeq	r0, r0, r0, lsr #1
    6adc:	011e0903 	tsteq	lr, r3, lsl #18
    6ae0:	3f030000 	svccc	0x00030000
    6ae4:	0000b108 	andeq	fp, r0, r8, lsl #2
    6ae8:	03000400 	movweq	r0, #1024	; 0x400
    6aec:	00000428 	andeq	r0, r0, r8, lsr #8
    6af0:	ce034103 	adfgts	f4, f3, f3
    6af4:	06000000 	streq	r0, [r0], -r0
    6af8:	0000015c 	andeq	r0, r0, ip, asr r1
    6afc:	0002720a 	andeq	r7, r2, sl, lsl #4
    6b00:	1a430300 	bne	10c7708 <__ccfg+0x10a7760>
    6b04:	00000168 	andeq	r0, r0, r8, ror #2
    6b08:	de0a0101 	adflee	f0, f2, f1
    6b0c:	03000002 	movweq	r0, #2
    6b10:	01890e45 	orreq	r0, r9, r5, asr #28
    6b14:	01010000 	mrseq	r0, (UNDEF: 1)
    6b18:	018f040b 	orreq	r0, pc, fp, lsl #8
    6b1c:	01020000 	mrseq	r0, (UNDEF: 2)
    6b20:	00037b08 	andeq	r7, r3, r8, lsl #22
    6b24:	018f0500 	orreq	r0, pc, r0, lsl #10
    6b28:	ec0a0000 	stc	0, cr0, [sl], {-0}
    6b2c:	03000002 	movweq	r0, #2
    6b30:	01891e45 	orreq	r1, r9, r5, asr #28
    6b34:	01010000 	mrseq	r0, (UNDEF: 1)
    6b38:	8f040807 	svchi	0x00040807
    6b3c:	0001da09 	andeq	sp, r1, r9, lsl #20
    6b40:	02850900 	addeq	r0, r5, #0, 18
    6b44:	90040000 	andls	r0, r4, r0
    6b48:	0000670b 	andeq	r6, r0, fp, lsl #14
    6b4c:	fb090000 	blx	246b56 <__ccfg+0x226bae>
    6b50:	04000005 	streq	r0, [r0], #-5
    6b54:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    6b58:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    6b5c:	0000046b 	andeq	r0, r0, fp, ror #8
    6b60:	ac109204 	lfmge	f1, 1, [r0], {4}
    6b64:	06000000 	streq	r0, [r0], -r0
    6b68:	04060300 	streq	r0, [r6], #-768	; 0xfffffd00
    6b6c:	93040000 	movwls	r0, #16384	; 0x4000
    6b70:	0001a903 	andeq	sl, r1, r3, lsl #18
    6b74:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    6b78:	01f10000 	mvnseq	r0, r0
    6b7c:	000d0000 	andeq	r0, sp, r0
    6b80:	0000360a 	andeq	r3, r0, sl, lsl #12
    6b84:	0f990400 	svceq	0x00990400
    6b88:	000001e6 	andeq	r0, r0, r6, ror #3
    6b8c:	01070101 	tsteq	r7, r1, lsl #2
    6b90:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    6b94:	08000002 	stmdaeq	r0, {r1}
    6b98:	0000045e 	andeq	r0, r0, lr, asr r4
    6b9c:	a0079305 	andge	r9, r7, r5, lsl #6
    6ba0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ba4:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    6ba8:	00000031 	andeq	r0, r0, r1, lsr r0
    6bac:	a0039405 	andge	r9, r3, r5, lsl #8
    6bb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6bb4:	00000001 	andeq	r0, r0, r1
    6bb8:	00024303 	andeq	r4, r2, r3, lsl #6
    6bbc:	03960500 	orrseq	r0, r6, #0, 10
    6bc0:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    6bc4:	00022905 	andeq	r2, r2, r5, lsl #18
    6bc8:	02350c00 	eorseq	r0, r5, #0, 24
    6bcc:	02450000 	subeq	r0, r5, #0
    6bd0:	000d0000 	andeq	r0, sp, r0
    6bd4:	00023a05 	andeq	r3, r2, r5, lsl #20
    6bd8:	02a80a00 	adceq	r0, r8, #0, 20
    6bdc:	9c050000 	stcls	0, cr0, [r5], {-0}
    6be0:	00024517 	andeq	r4, r2, r7, lsl r5
    6be4:	0c010100 	stfeqs	f0, [r1], {-0}
    6be8:	0000009b 	muleq	r0, fp, r0
    6bec:	00000263 	andeq	r0, r0, r3, ror #4
    6bf0:	5805000d 	stmdapl	r5, {r0, r2, r3}
    6bf4:	0a000002 	beq	6c04 <__exidx_end+0x3e0c>
    6bf8:	00000364 	andeq	r0, r0, r4, ror #6
    6bfc:	63130606 	tstvs	r3, #6291456	; 0x600000
    6c00:	01000002 	tsteq	r0, r2
    6c04:	00fe0a01 	rscseq	r0, lr, r1, lsl #20
    6c08:	c3040000 	movwgt	r0, #16384	; 0x4000
    6c0c:	0000b10e 	andeq	fp, r0, lr, lsl #2
    6c10:	0e010100 	adfeqs	f0, f1, f0
    6c14:	00000478 	andeq	r0, r0, r8, ror r4
    6c18:	10016e07 	andne	r6, r1, r7, lsl #28
    6c1c:	00000291 	muleq	r0, r1, r2
    6c20:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    6c24:	010f0000 	mrseq	r0, CPSR
    6c28:	000002a3 	andeq	r0, r0, r3, lsr #5
    6c2c:	00008f10 	andeq	r8, r0, r0, lsl pc
    6c30:	960c0000 	strls	r0, [ip], -r0
    6c34:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    6c38:	0d000002 	stceq	0, cr0, [r0, #-8]
    6c3c:	02a30500 	adceq	r0, r3, #0, 10
    6c40:	38110000 	ldmdacc	r1, {}	; <UNPREDICTABLE>
    6c44:	07000004 	streq	r0, [r0, -r4]
    6c48:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    6c4c:	01000002 	tsteq	r0, r2
    6c50:	035c1101 	cmpeq	ip, #1073741824	; 0x40000000
    6c54:	82070000 	andhi	r0, r7, #0
    6c58:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    6c5c:	01010000 	mrseq	r0, (UNDEF: 1)
    6c60:	00046311 	andeq	r6, r4, r1, lsl r3
    6c64:	02d80700 	sbcseq	r0, r8, #0, 14
    6c68:	0000b10e 	andeq	fp, r0, lr, lsl #2
    6c6c:	12010100 	andne	r0, r1, #0, 2
    6c70:	03030708 	movweq	r0, #14088	; 0x3708
    6c74:	00030709 	andeq	r0, r3, r9, lsl #14
    6c78:	22021300 	andcs	r1, r2, #0, 6
    6c7c:	07070000 	streq	r0, [r7, -r0]
    6c80:	008f0703 	addeq	r0, pc, r3, lsl #14
    6c84:	13000000 	movwne	r0, #0
    6c88:	0000054d 	andeq	r0, r0, sp, asr #10
    6c8c:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    6c90:	000000c2 	andeq	r0, r0, r2, asr #1
    6c94:	230e0004 	movwcs	r0, #57348	; 0xe004
    6c98:	07000002 	streq	r0, [r0, -r2]
    6c9c:	e0030309 	and	r0, r3, r9, lsl #6
    6ca0:	14000002 	strne	r0, [r0], #-2
    6ca4:	00000495 	muleq	r0, r5, r4
    6ca8:	030b0730 	movweq	r0, #46896	; 0xb730
    6cac:	00037708 	andeq	r7, r3, r8, lsl #14
    6cb0:	04801300 	streq	r1, [r0], #768	; 0x300
    6cb4:	14070000 	strne	r0, [r7], #-0
    6cb8:	008f0803 	addeq	r0, pc, r3, lsl #16
    6cbc:	13000000 	movwne	r0, #0
    6cc0:	0000028f 	andeq	r0, r0, pc, lsl #5
    6cc4:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    6cc8:	0000008f 	andeq	r0, r0, pc, lsl #1
    6ccc:	047b1302 	ldrbteq	r1, [fp], #-770	; 0xfffffcfe
    6cd0:	16070000 	strne	r0, [r7], -r0
    6cd4:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    6cd8:	13040000 	movwne	r0, #16384	; 0x4000
    6cdc:	00000f4d 	andeq	r0, r0, sp, asr #30
    6ce0:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    6ce4:	000000c2 	andeq	r0, r0, r2, asr #1
    6ce8:	04311308 	ldrteq	r1, [r1], #-776	; 0xfffffcf8
    6cec:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    6cf0:	03770f03 	cmneq	r7, #3, 30
    6cf4:	130c0000 	movwne	r0, #49152	; 0xc000
    6cf8:	0000028a 	andeq	r0, r0, sl, lsl #5
    6cfc:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    6d00:	00000387 	andeq	r0, r0, r7, lsl #7
    6d04:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    6d08:	87000003 	strhi	r0, [r0, -r3]
    6d0c:	15000003 	strne	r0, [r0, #-3]
    6d10:	00000088 	andeq	r0, r0, r8, lsl #1
    6d14:	040b0003 	streq	r0, [fp], #-3
    6d18:	00000314 	andeq	r0, r0, r4, lsl r3
    6d1c:	0004a00e 	andeq	sl, r4, lr
    6d20:	031c0700 	tsteq	ip, #0, 14
    6d24:	0003141b 	andeq	r1, r3, fp, lsl r4
    6d28:	03521100 	cmpeq	r2, #0, 2
    6d2c:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    6d30:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    6d34:	01010000 	mrseq	r0, (UNDEF: 1)
    6d38:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    6d3c:	01160000 	tsteq	r6, r0
    6d40:	00001505 	andeq	r1, r0, r5, lsl #10
    6d44:	01011d01 	tsteq	r1, r1, lsl #26
    6d48:	00001840 	andeq	r1, r0, r0, asr #16
    6d4c:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    6d50:	042a9c01 	strteq	r9, [sl], #-3073	; 0xfffff3ff
    6d54:	bf170000 	svclt	0x00170000
    6d58:	01000000 	mrseq	r0, (UNDEF: 0)
    6d5c:	008f011d 	addeq	r0, pc, sp, lsl r1	; <UNPREDICTABLE>
    6d60:	246b0000 	strbtcs	r0, [fp], #-0
    6d64:	4d180000 	ldcmi	0, cr0, [r8, #-0]
    6d68:	0100000f 	tsteq	r0, pc
    6d6c:	042a011d 	strteq	r0, [sl], #-285	; 0xfffffee3
    6d70:	24940000 	ldrcs	r0, [r4], #0
    6d74:	11190000 	tstne	r9, r0
    6d78:	01000015 	tsteq	r0, r5, lsl r0
    6d7c:	281a0130 	ldmdacs	sl, {r4, r5, r8}
    6d80:	1b00000c 	blne	6db8 <__exidx_end+0x3fc0>
    6d84:	00727470 	rsbseq	r7, r2, r0, ror r4
    6d88:	2a152201 	bcs	54f594 <__ccfg+0x52f5ec>
    6d8c:	05000004 	streq	r0, [r0, #-4]
    6d90:	00006003 	andeq	r6, r0, r3
    6d94:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    6d98:	2301006e 	movwcs	r0, #4206	; 0x106e
    6d9c:	0000810d 	andeq	r8, r0, sp, lsl #2
    6da0:	5c030500 	cfstr32pl	mvfx0, [r3], {-0}
    6da4:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    6da8:	000014ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    6dac:	81062401 	tsthi	r6, r1, lsl #8
    6db0:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    6db4:	00000024 	andeq	r0, r0, r4, lsr #32
    6db8:	96040b00 	strls	r0, [r4], -r0, lsl #22
    6dbc:	00000001 	andeq	r0, r0, r1
    6dc0:	00000440 	andeq	r0, r0, r0, asr #8
    6dc4:	1f590003 	svcne	0x00590003
    6dc8:	01040000 	mrseq	r0, (UNDEF: 4)
    6dcc:	0000012f 	andeq	r0, r0, pc, lsr #2
    6dd0:	0015270c 	andseq	r2, r5, ip, lsl #14
    6dd4:	00038000 	andeq	r8, r3, r0
    6dd8:	000c7000 	andeq	r7, ip, r0
    6ddc:	00000000 	andeq	r0, r0, r0
    6de0:	004e6c00 	subeq	r6, lr, r0, lsl #24
    6de4:	06010200 	streq	r0, [r1], -r0, lsl #4
    6de8:	00000374 	andeq	r0, r0, r4, ror r3
    6dec:	d0050202 	andle	r0, r5, r2, lsl #4
    6df0:	02000003 	andeq	r0, r0, #3
    6df4:	00a40504 	adceq	r0, r4, r4, lsl #10
    6df8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6dfc:	00009f05 	andeq	r9, r0, r5, lsl #30
    6e00:	220a0300 	andcs	r0, sl, #0, 6
    6e04:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    6e08:	00004d18 	andeq	r4, r0, r8, lsl sp
    6e0c:	08010200 	stmdaeq	r1, {r9}
    6e10:	00000372 	andeq	r0, r0, r2, ror r3
    6e14:	0020f803 	eoreq	pc, r0, r3, lsl #16
    6e18:	19310200 	ldmdbne	r1!, {r9}
    6e1c:	00000060 	andeq	r0, r0, r0, rrx
    6e20:	30070202 	andcc	r0, r7, r2, lsl #4
    6e24:	03000002 	movweq	r0, #2
    6e28:	000017c1 	andeq	r1, r0, r1, asr #15
    6e2c:	73193402 	tstvc	r9, #33554432	; 0x2000000
    6e30:	02000000 	andeq	r0, r0, #0
    6e34:	00790704 	rsbseq	r0, r9, r4, lsl #14
    6e38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    6e3c:	00007407 	andeq	r7, r0, r7, lsl #8
    6e40:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    6e44:	00746e69 	rsbseq	r6, r4, r9, ror #28
    6e48:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    6e4c:	03000000 	movweq	r0, #0
    6e50:	000015ce 	andeq	r1, r0, lr, asr #11
    6e54:	54122703 	ldrpl	r2, [r2], #-1795	; 0xfffff8fd
    6e58:	05000000 	streq	r0, [r0, #-0]
    6e5c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6e60:	0013c603 	andseq	ip, r3, r3, lsl #12
    6e64:	122b0300 	eorne	r0, fp, #0, 6
    6e68:	00000041 	andeq	r0, r0, r1, asr #32
    6e6c:	0000a006 	andeq	sl, r0, r6
    6e70:	161f0300 	ldrne	r0, [pc], -r0, lsl #6
    6e74:	2c030000 	stccs	0, cr0, [r3], {-0}
    6e78:	00006712 	andeq	r6, r0, r2, lsl r7
    6e7c:	00b10500 	adcseq	r0, r1, r0, lsl #10
    6e80:	63030000 	movwvs	r0, #12288	; 0x3000
    6e84:	03000002 	movweq	r0, #2
    6e88:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    6e8c:	70030000 	andvc	r0, r3, r0
    6e90:	03000007 	movweq	r0, #7
    6e94:	00da102e 	sbcseq	r1, sl, lr, lsr #32
    6e98:	04070000 	streq	r0, [r7], #-0
    6e9c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6ea0:	32030808 	andcc	r0, r3, #8, 16	; 0x80000
    6ea4:	00016e09 	andeq	r6, r1, r9, lsl #28
    6ea8:	027e0900 	rsbseq	r0, lr, #0, 18
    6eac:	34030000 	strcc	r0, [r3], #-0
    6eb0:	0000a007 	andeq	sl, r0, r7
    6eb4:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6eb8:	00980900 	addseq	r0, r8, r0, lsl #18
    6ebc:	35030000 	strcc	r0, [r3, #-0]
    6ec0:	0000a003 	andeq	sl, r0, r3
    6ec4:	06010100 	streq	r0, [r1], -r0, lsl #2
    6ec8:	024c0900 	subeq	r0, ip, #0, 18
    6ecc:	36030000 	strcc	r0, [r3], -r0
    6ed0:	0000a003 	andeq	sl, r0, r3
    6ed4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    6ed8:	03ff0900 	mvnseq	r0, #0, 18
    6edc:	37030000 	strcc	r0, [r3, -r0]
    6ee0:	0000a003 	andeq	sl, r0, r3
    6ee4:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6ee8:	03f80900 	mvnseq	r0, #0, 18
    6eec:	38030000 	stmdacc	r3, {}	; <UNPREDICTABLE>
    6ef0:	0000a003 	andeq	sl, r0, r3
    6ef4:	00040100 	andeq	r0, r4, r0, lsl #2
    6ef8:	03e90a00 	mvneq	r0, #0, 20
    6efc:	3a030000 	bcc	c6f04 <__ccfg+0xa6f5c>
    6f00:	0000a007 	andeq	sl, r0, r7
    6f04:	400a0100 	andmi	r0, sl, r0, lsl #2
    6f08:	03000000 	movweq	r0, #0
    6f0c:	00a0033c 	adceq	r0, r0, ip, lsr r3
    6f10:	0a020000 	beq	86f18 <__ccfg+0x66f70>
    6f14:	0000006d 	andeq	r0, r0, sp, rrx
    6f18:	a0033d03 	andge	r3, r3, r3, lsl #26
    6f1c:	03000000 	movweq	r0, #0
    6f20:	00011e0a 	andeq	r1, r1, sl, lsl #28
    6f24:	083f0300 	ldmdaeq	pc!, {r8, r9}	; <UNPREDICTABLE>
    6f28:	000000b1 	strheq	r0, [r0], -r1
    6f2c:	28030004 	stmdacs	r3, {r2}
    6f30:	03000004 	movweq	r0, #4
    6f34:	00e00341 	rsceq	r0, r0, r1, asr #6
    6f38:	6e060000 	cdpvs	0, 0, cr0, cr6, cr0, {0}
    6f3c:	0b000001 	bleq	6f48 <__exidx_end+0x4150>
    6f40:	00000272 	andeq	r0, r0, r2, ror r2
    6f44:	7a1a4303 	bvc	697b58 <__ccfg+0x677bb0>
    6f48:	01000001 	tsteq	r0, r1
    6f4c:	02de0b01 	sbcseq	r0, lr, #1024	; 0x400
    6f50:	45030000 	strmi	r0, [r3, #-0]
    6f54:	00019b0e 	andeq	r9, r1, lr, lsl #22
    6f58:	07010100 	streq	r0, [r1, -r0, lsl #2]
    6f5c:	0001a104 	andeq	sl, r1, r4, lsl #2
    6f60:	08010200 	stmdaeq	r1, {r9}
    6f64:	0000037b 	andeq	r0, r0, fp, ror r3
    6f68:	0001a105 	andeq	sl, r1, r5, lsl #2
    6f6c:	02ec0b00 	rsceq	r0, ip, #0, 22
    6f70:	45030000 	strmi	r0, [r3, #-0]
    6f74:	00019b1e 	andeq	r9, r1, lr, lsl fp
    6f78:	08010100 	stmdaeq	r1, {r8}
    6f7c:	098f0408 	stmibeq	pc, {r3, sl}	; <UNPREDICTABLE>
    6f80:	000001ec 	andeq	r0, r0, ip, ror #3
    6f84:	0002850a 	andeq	r8, r2, sl, lsl #10
    6f88:	0b900400 	bleq	fe407f90 <_estack+0xde402f90>
    6f8c:	00000067 	andeq	r0, r0, r7, rrx
    6f90:	05fb0a00 	ldrbeq	r0, [fp, #2560]!	; 0xa00
    6f94:	91040000 	mrsls	r0, (UNDEF: 4)
    6f98:	00008f08 	andeq	r8, r0, r8, lsl #30
    6f9c:	6b0a0400 	blvs	287fa4 <__ccfg+0x267ffc>
    6fa0:	04000004 	streq	r0, [r0], #-4
    6fa4:	00ac1092 	umlaleq	r1, ip, r2, r0
    6fa8:	00060000 	andeq	r0, r6, r0
    6fac:	00040603 	andeq	r0, r4, r3, lsl #12
    6fb0:	03930400 	orrseq	r0, r3, #0, 8
    6fb4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
    6fb8:	0001ec0c 	andeq	lr, r1, ip, lsl #24
    6fbc:	00020300 	andeq	r0, r2, r0, lsl #6
    6fc0:	0b000d00 	bleq	a3c8 <__exidx_end+0x75d0>
    6fc4:	00000036 	andeq	r0, r0, r6, lsr r0
    6fc8:	f80f9904 			; <UNDEFINED> instruction: 0xf80f9904
    6fcc:	01000001 	tsteq	r0, r1
    6fd0:	05010801 	streq	r0, [r1, #-2049]	; 0xfffff7ff
    6fd4:	023b0991 	eorseq	r0, fp, #2375680	; 0x244000
    6fd8:	5e090000 	cdppl	0, 0, cr0, cr9, cr0, {0}
    6fdc:	05000004 	streq	r0, [r0, #-4]
    6fe0:	00a00793 	umlaleq	r0, r0, r3, r7	; <UNPREDICTABLE>
    6fe4:	07010000 	streq	r0, [r1, -r0]
    6fe8:	31090001 	tstcc	r9, r1
    6fec:	05000000 	streq	r0, [r0, #-0]
    6ff0:	00a00394 	umlaleq	r0, r0, r4, r3	; <UNPREDICTABLE>
    6ff4:	01010000 	mrseq	r0, (UNDEF: 1)
    6ff8:	03000000 	movweq	r0, #0
    6ffc:	00000243 	andeq	r0, r0, r3, asr #4
    7000:	11039605 	tstne	r3, r5, lsl #12
    7004:	05000002 	streq	r0, [r0, #-2]
    7008:	0000023b 	andeq	r0, r0, fp, lsr r2
    700c:	0002470c 	andeq	r4, r2, ip, lsl #14
    7010:	00025700 	andeq	r5, r2, r0, lsl #14
    7014:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7018:	0000024c 	andeq	r0, r0, ip, asr #4
    701c:	0002a80b 	andeq	sl, r2, fp, lsl #16
    7020:	179c0500 	ldrne	r0, [ip, r0, lsl #10]
    7024:	00000257 	andeq	r0, r0, r7, asr r2
    7028:	9b0c0101 	blls	307434 <__ccfg+0x2e748c>
    702c:	75000000 	strvc	r0, [r0, #-0]
    7030:	0d000002 	stceq	0, cr0, [r0, #-8]
    7034:	026a0500 	rsbeq	r0, sl, #0, 10
    7038:	640b0000 	strvs	r0, [fp], #-0
    703c:	06000003 	streq	r0, [r0], -r3
    7040:	02751306 	rsbseq	r1, r5, #402653184	; 0x18000000
    7044:	01010000 	mrseq	r0, (UNDEF: 1)
    7048:	0000fe0b 	andeq	pc, r0, fp, lsl #28
    704c:	0ec30400 	cdpeq	4, 12, cr0, cr3, cr0, {0}
    7050:	000000b1 	strheq	r0, [r0], -r1
    7054:	780e0101 	stmdavc	lr, {r0, r8}
    7058:	07000004 	streq	r0, [r0, -r4]
    705c:	a310016e 	tstge	r0, #-2147483621	; 0x8000001b
    7060:	07000002 	streq	r0, [r0, -r2]
    7064:	0002a904 	andeq	sl, r2, r4, lsl #18
    7068:	b5010f00 	strlt	r0, [r1, #-3840]	; 0xfffff100
    706c:	10000002 	andne	r0, r0, r2
    7070:	0000008f 	andeq	r0, r0, pc, lsl #1
    7074:	01a80c00 			; <UNDEFINED> instruction: 0x01a80c00
    7078:	02c00000 	sbceq	r0, r0, #0
    707c:	000d0000 	andeq	r0, sp, r0
    7080:	0002b505 	andeq	fp, r2, r5, lsl #10
    7084:	04381100 	ldrteq	r1, [r8], #-256	; 0xffffff00
    7088:	7f070000 	svcvc	0x00070000
    708c:	02c01601 	sbceq	r1, r0, #1048576	; 0x100000
    7090:	01010000 	mrseq	r0, (UNDEF: 1)
    7094:	00035c11 	andeq	r5, r3, r1, lsl ip
    7098:	01820700 	orreq	r0, r2, r0, lsl #14
    709c:	0000bd14 	andeq	fp, r0, r4, lsl sp
    70a0:	11010100 	mrsne	r0, (UNDEF: 17)
    70a4:	00000463 	andeq	r0, r0, r3, ror #8
    70a8:	0e02d807 	cdpeq	8, 0, cr13, cr2, cr7, {0}
    70ac:	000000b1 	strheq	r0, [r0], -r1
    70b0:	08120101 	ldmdaeq	r2, {r0, r8}
    70b4:	09030307 	stmdbeq	r3, {r0, r1, r2, r8, r9}
    70b8:	00000319 	andeq	r0, r0, r9, lsl r3
    70bc:	00220213 	eoreq	r0, r2, r3, lsl r2
    70c0:	03070700 	movweq	r0, #30464	; 0x7700
    70c4:	00008f07 	andeq	r8, r0, r7, lsl #30
    70c8:	4d130000 	ldcmi	0, cr0, [r3, #-0]
    70cc:	07000005 	streq	r0, [r0, -r5]
    70d0:	c2080308 	andgt	r0, r8, #8, 6	; 0x20000000
    70d4:	04000000 	streq	r0, [r0], #-0
    70d8:	02230e00 	eoreq	r0, r3, #0, 28
    70dc:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    70e0:	02f20303 	rscseq	r0, r2, #201326592	; 0xc000000
    70e4:	95140000 	ldrls	r0, [r4, #-0]
    70e8:	30000004 	andcc	r0, r0, r4
    70ec:	08030b07 	stmdaeq	r3, {r0, r1, r2, r8, r9, fp}
    70f0:	00000389 	andeq	r0, r0, r9, lsl #7
    70f4:	00048013 	andeq	r8, r4, r3, lsl r0
    70f8:	03140700 	tsteq	r4, #0, 14
    70fc:	00008f08 	andeq	r8, r0, r8, lsl #30
    7100:	8f130000 	svchi	0x00130000
    7104:	07000002 	streq	r0, [r0, -r2]
    7108:	8f080315 	svchi	0x00080315
    710c:	02000000 	andeq	r0, r0, #0
    7110:	00047b13 	andeq	r7, r4, r3, lsl fp
    7114:	03160700 	tsteq	r6, #0, 14
    7118:	0002960b 	andeq	r9, r2, fp, lsl #12
    711c:	4d130400 	cfldrsmi	mvf0, [r3, #-0]
    7120:	0700000f 	streq	r0, [r0, -pc]
    7124:	c2090317 	andgt	r0, r9, #1543503872	; 0x5c000000
    7128:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    712c:	00043113 	andeq	r3, r4, r3, lsl r1
    7130:	03180700 	tsteq	r8, #0, 14
    7134:	0003890f 	andeq	r8, r3, pc, lsl #18
    7138:	8a130c00 	bhi	4ca140 <__ccfg+0x4aa198>
    713c:	07000002 	streq	r0, [r0, -r2]
    7140:	99150319 	ldmdbls	r5, {r0, r3, r4, r8, r9}
    7144:	2c000003 	stccs	0, cr0, [r0], {3}
    7148:	03190c00 	tsteq	r9, #0, 24
    714c:	03990000 	orrseq	r0, r9, #0
    7150:	88150000 	ldmdahi	r5, {}	; <UNPREDICTABLE>
    7154:	03000000 	movweq	r0, #0
    7158:	26040700 	strcs	r0, [r4], -r0, lsl #14
    715c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    7160:	000004a0 	andeq	r0, r0, r0, lsr #9
    7164:	1b031c07 	blne	ce188 <__ccfg+0xae1e0>
    7168:	00000326 	andeq	r0, r0, r6, lsr #6
    716c:	00035211 	andeq	r5, r3, r1, lsl r2
    7170:	031e0700 	tsteq	lr, #0, 14
    7174:	0003bb14 	andeq	fp, r3, r4, lsl fp
    7178:	07010100 	streq	r0, [r1, -r0, lsl #2]
    717c:	00039f04 	andeq	r9, r3, r4, lsl #30
    7180:	13d41600 	bicsne	r1, r4, #0, 12
    7184:	0d010000 	stceq	0, cr0, [r1, #-0]
    7188:	00019b07 	andeq	r9, r1, r7, lsl #22
    718c:	03050100 	movweq	r0, #20736	; 0x5100
    7190:	20000064 	andcs	r0, r0, r4, rrx
    7194:	151c0117 	ldrne	r0, [ip, #-279]	; 0xfffffee9
    7198:	23010000 	movwcs	r0, #4096	; 0x1000
    719c:	18b00101 	ldmne	r0!, {r0, r8}
    71a0:	19cc0000 	stmibne	ip, {}^	; <UNPREDICTABLE>
    71a4:	9c010000 	stcls	0, cr0, [r1], {-0}
    71a8:	0000bf18 	andeq	fp, r0, r8, lsl pc
    71ac:	01230100 			; <UNDEFINED> instruction: 0x01230100
    71b0:	0000008f 	andeq	r0, r0, pc, lsl #1
    71b4:	000024d1 	ldrdeq	r2, [r0], -r1
    71b8:	000f4d19 	andeq	r4, pc, r9, lsl sp	; <UNPREDICTABLE>
    71bc:	01230100 			; <UNDEFINED> instruction: 0x01230100
    71c0:	000000ce 	andeq	r0, r0, lr, asr #1
    71c4:	000024ef 	andeq	r2, r0, pc, ror #9
    71c8:	000c501a 	andeq	r5, ip, sl, lsl r0
    71cc:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    71d0:	28010072 	stmdacs	r1, {r1, r4, r5, r6}
    71d4:	00019b0f 	andeq	r9, r1, pc, lsl #22
    71d8:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
    71dc:	1b200000 	blne	8071e4 <__ccfg+0x7e723c>
    71e0:	006e656c 	rsbeq	r6, lr, ip, ror #10
    71e4:	810d2901 	tsthi	sp, r1, lsl #18
    71e8:	05000000 	streq	r0, [r0, #-0]
    71ec:	00006803 	andeq	r6, r0, r3, lsl #16
    71f0:	14ff1920 	ldrbtne	r1, [pc], #2336	; 71f8 <__exidx_end+0x4400>
    71f4:	2a010000 	bcs	471fc <__ccfg+0x27254>
    71f8:	00008106 	andeq	r8, r0, r6, lsl #2
    71fc:	00254500 	eoreq	r4, r5, r0, lsl #10
    7200:	00000000 	andeq	r0, r0, r0
    7204:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7208:	20d10003 	sbcscs	r0, r1, r3
    720c:	01040000 	mrseq	r0, (UNDEF: 4)
    7210:	0000012f 	andeq	r0, r0, pc, lsr #2
    7214:	00156a0c 	andseq	r6, r5, ip, lsl #20
    7218:	00038000 	andeq	r8, r3, r0
    721c:	000cf800 	andeq	pc, ip, r0, lsl #16
    7220:	00000000 	andeq	r0, r0, r0
    7224:	0050bb00 	subseq	fp, r0, r0, lsl #22
    7228:	06010200 	streq	r0, [r1], -r0, lsl #4
    722c:	00000374 	andeq	r0, r0, r4, ror r3
    7230:	d0050202 	andle	r0, r5, r2, lsl #4
    7234:	02000003 	andeq	r0, r0, #3
    7238:	00a40504 	adceq	r0, r4, r4, lsl #10
    723c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7240:	00009f05 	andeq	r9, r0, r5, lsl #30
    7244:	220a0300 	andcs	r0, sl, #0, 6
    7248:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    724c:	00004d18 	andeq	r4, r0, r8, lsl sp
    7250:	08010200 	stmdaeq	r1, {r9}
    7254:	00000372 	andeq	r0, r0, r2, ror r3
    7258:	0020f803 	eoreq	pc, r0, r3, lsl #16
    725c:	19310200 	ldmdbne	r1!, {r9}
    7260:	00000060 	andeq	r0, r0, r0, rrx
    7264:	30070202 	andcc	r0, r7, r2, lsl #4
    7268:	03000002 	movweq	r0, #2
    726c:	000017c1 	andeq	r1, r0, r1, asr #15
    7270:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7274:	02000000 	andeq	r0, r0, #0
    7278:	00790704 	rsbseq	r0, r9, r4, lsl #14
    727c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7280:	00007407 	andeq	r7, r0, r7, lsl #8
    7284:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7288:	00746e69 	rsbseq	r6, r4, r9, ror #28
    728c:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    7290:	03000000 	movweq	r0, #0
    7294:	00000b54 	andeq	r0, r0, r4, asr fp
    7298:	9b1b2803 	blls	6d12ac <__ccfg+0x6b1304>
    729c:	05000000 	streq	r0, [r0, #-0]
    72a0:	00000a6a 	andeq	r0, r0, sl, ror #20
    72a4:	b3000904 	movwlt	r0, #2308	; 0x904
    72a8:	06000000 	streq	r0, [r0], -r0
    72ac:	00000c0a 	andeq	r0, r0, sl, lsl #24
    72b0:	000000b3 	strheq	r0, [r0], -r3
    72b4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    72b8:	0a6c0304 	beq	1b07ed0 <__ccfg+0x1ae7f28>
    72bc:	63030000 	movwvs	r0, #12288	; 0x3000
    72c0:	00008f18 	andeq	r8, r0, r8, lsl pc
    72c4:	15ce0300 	strbne	r0, [lr, #768]	; 0x300
    72c8:	27040000 	strcs	r0, [r4, -r0]
    72cc:	00005412 	andeq	r5, r0, r2, lsl r4
    72d0:	00c10800 	sbceq	r0, r1, r0, lsl #16
    72d4:	c6030000 	strgt	r0, [r3], -r0
    72d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    72dc:	0041122b 	subeq	r1, r1, fp, lsr #4
    72e0:	d2090000 	andle	r0, r9, #0
    72e4:	03000000 	movweq	r0, #0
    72e8:	0000161f 	andeq	r1, r0, pc, lsl r6
    72ec:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    72f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72f4:	000000e3 	andeq	r0, r0, r3, ror #1
    72f8:	00026303 	andeq	r6, r2, r3, lsl #6
    72fc:	122d0400 	eorne	r0, sp, #0, 8
    7300:	00000067 	andeq	r0, r0, r7, rrx
    7304:	00077003 	andeq	r7, r7, r3
    7308:	102e0400 	eorne	r0, lr, r0, lsl #8
    730c:	0000010c 	andeq	r0, r0, ip, lsl #2
    7310:	00c1040a 	sbceq	r0, r1, sl, lsl #8
    7314:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    7318:	a0093204 	andge	r3, r9, r4, lsl #4
    731c:	0c000001 	stceq	0, cr0, [r0], {1}
    7320:	0000027e 	andeq	r0, r0, lr, ror r2
    7324:	d2073404 	andle	r3, r7, #4, 8	; 0x4000000
    7328:	01000000 	mrseq	r0, (UNDEF: 0)
    732c:	0c000701 	stceq	7, cr0, [r0], {1}
    7330:	00000098 	muleq	r0, r8, r0
    7334:	d2033504 	andle	r3, r3, #4, 10	; 0x1000000
    7338:	01000000 	mrseq	r0, (UNDEF: 0)
    733c:	0c000601 	stceq	6, cr0, [r0], {1}
    7340:	0000024c 	andeq	r0, r0, ip, asr #4
    7344:	d2033604 	andle	r3, r3, #4, 12	; 0x400000
    7348:	01000000 	mrseq	r0, (UNDEF: 0)
    734c:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    7350:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7354:	d2033704 	andle	r3, r3, #4, 14	; 0x100000
    7358:	01000000 	mrseq	r0, (UNDEF: 0)
    735c:	0c000401 	cfstrseq	mvf0, [r0], {1}
    7360:	000003f8 	strdeq	r0, [r0], -r8
    7364:	d2033804 	andle	r3, r3, #4, 16	; 0x40000
    7368:	01000000 	mrseq	r0, (UNDEF: 0)
    736c:	0d000004 	stceq	0, cr0, [r0, #-16]
    7370:	000003e9 	andeq	r0, r0, r9, ror #7
    7374:	d2073a04 	andle	r3, r7, #4, 20	; 0x4000
    7378:	01000000 	mrseq	r0, (UNDEF: 0)
    737c:	0000400d 	andeq	r4, r0, sp
    7380:	033c0400 	teqeq	ip, #0, 8
    7384:	000000d2 	ldrdeq	r0, [r0], -r2
    7388:	006d0d02 	rsbeq	r0, sp, r2, lsl #26
    738c:	3d040000 	stccc	0, cr0, [r4, #-0]
    7390:	0000d203 	andeq	sp, r0, r3, lsl #4
    7394:	1e0d0300 	cdpne	3, 0, cr0, cr13, cr0, {0}
    7398:	04000001 	streq	r0, [r0], #-1
    739c:	00e3083f 	rsceq	r0, r3, pc, lsr r8
    73a0:	00040000 	andeq	r0, r4, r0
    73a4:	00042803 	andeq	r2, r4, r3, lsl #16
    73a8:	03410400 	movteq	r0, #5120	; 0x1400
    73ac:	00000112 	andeq	r0, r0, r2, lsl r1
    73b0:	0001a009 	andeq	sl, r1, r9
    73b4:	02720e00 	rsbseq	r0, r2, #0, 28
    73b8:	43040000 	movwmi	r0, #16384	; 0x4000
    73bc:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    73c0:	0e010100 	adfeqs	f0, f1, f0
    73c4:	000002de 	ldrdeq	r0, [r0], -lr
    73c8:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    73cc:	01000001 	tsteq	r0, r1
    73d0:	d3040a01 	movwle	r0, #18945	; 0x4a01
    73d4:	02000001 	andeq	r0, r0, #1
    73d8:	037b0801 	cmneq	fp, #65536	; 0x10000
    73dc:	d3080000 	movwle	r0, #32768	; 0x8000
    73e0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    73e4:	000002ec 	andeq	r0, r0, ip, ror #5
    73e8:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    73ec:	01000001 	tsteq	r0, r1
    73f0:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    73f4:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    73f8:	850d0000 	strhi	r0, [sp, #-0]
    73fc:	05000002 	streq	r0, [r0, #-2]
    7400:	00670b90 	mlseq	r7, r0, fp, r0
    7404:	0d000000 	stceq	0, cr0, [r0, #-0]
    7408:	000005fb 	strdeq	r0, [r0], -fp
    740c:	c1089105 	tstgt	r8, r5, lsl #2
    7410:	04000000 	streq	r0, [r0], #-0
    7414:	00046b0d 	andeq	r6, r4, sp, lsl #22
    7418:	10920500 	addsne	r0, r2, r0, lsl #10
    741c:	000000de 	ldrdeq	r0, [r0], -lr
    7420:	06030006 	streq	r0, [r3], -r6
    7424:	05000004 	streq	r0, [r0, #-4]
    7428:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    742c:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    7430:	35000002 	strcc	r0, [r0, #-2]
    7434:	10000002 	andne	r0, r0, r2
    7438:	00360e00 	eorseq	r0, r6, r0, lsl #28
    743c:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7440:	00022a0f 	andeq	r2, r2, pc, lsl #20
    7444:	0b010100 	bleq	4784c <__ccfg+0x278a4>
    7448:	09910601 	ldmibeq	r1, {r0, r9, sl}
    744c:	0000026d 	andeq	r0, r0, sp, ror #4
    7450:	00045e0c 	andeq	r5, r4, ip, lsl #28
    7454:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7458:	000000d2 	ldrdeq	r0, [r0], -r2
    745c:	00010701 	andeq	r0, r1, r1, lsl #14
    7460:	0000310c 	andeq	r3, r0, ip, lsl #2
    7464:	03940600 	orrseq	r0, r4, #0, 12
    7468:	000000d2 	ldrdeq	r0, [r0], -r2
    746c:	00000101 	andeq	r0, r0, r1, lsl #2
    7470:	02430300 	subeq	r0, r3, #0, 6
    7474:	96060000 	strls	r0, [r6], -r0
    7478:	00024303 	andeq	r4, r2, r3, lsl #6
    747c:	026d0800 	rsbeq	r0, sp, #0, 16
    7480:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    7484:	89000002 	stmdbhi	r0, {r1}
    7488:	10000002 	andne	r0, r0, r2
    748c:	027e0800 	rsbseq	r0, lr, #0, 16
    7490:	a80e0000 	stmdage	lr, {}	; <UNPREDICTABLE>
    7494:	06000002 	streq	r0, [r0], -r2
    7498:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    749c:	01010000 	mrseq	r0, (UNDEF: 1)
    74a0:	0000cd0f 	andeq	ip, r0, pc, lsl #26
    74a4:	0002a700 	andeq	sl, r2, r0, lsl #14
    74a8:	08001000 	stmdaeq	r0, {ip}
    74ac:	0000029c 	muleq	r0, ip, r2
    74b0:	0003640e 	andeq	r6, r3, lr, lsl #8
    74b4:	13060700 	movwne	r0, #26368	; 0x6700
    74b8:	000002a7 	andeq	r0, r0, r7, lsr #5
    74bc:	fe0e0101 	cdp2	1, 0, cr0, cr14, cr1, {0}
    74c0:	05000000 	streq	r0, [r0, #-0]
    74c4:	00e30ec3 	rsceq	r0, r3, r3, asr #29
    74c8:	01010000 	mrseq	r0, (UNDEF: 1)
    74cc:	00047811 	andeq	r7, r4, r1, lsl r8
    74d0:	016e0800 	cmneq	lr, r0, lsl #16
    74d4:	0002d510 	andeq	sp, r2, r0, lsl r5
    74d8:	db040a00 	blle	109ce0 <__ccfg+0xe9d38>
    74dc:	12000002 	andne	r0, r0, #2
    74e0:	0002e701 	andeq	lr, r2, r1, lsl #14
    74e4:	00c11300 	sbceq	r1, r1, r0, lsl #6
    74e8:	0f000000 	svceq	0x00000000
    74ec:	000001da 	ldrdeq	r0, [r0], -sl
    74f0:	000002f2 	strdeq	r0, [r0], -r2
    74f4:	e7080010 	smlad	r8, r0, r0, r0
    74f8:	14000002 	strne	r0, [r0], #-2
    74fc:	00000438 	andeq	r0, r0, r8, lsr r4
    7500:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7504:	000002f2 	strdeq	r0, [r0], -r2
    7508:	5c140101 	ldfpls	f0, [r4], {1}
    750c:	08000003 	stmdaeq	r0, {r0, r1}
    7510:	ef140182 	svc	0x00140182
    7514:	01000000 	mrseq	r0, (UNDEF: 0)
    7518:	04631401 	strbteq	r1, [r3], #-1025	; 0xfffffbff
    751c:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7520:	00e30e02 	rsceq	r0, r3, r2, lsl #28
    7524:	01010000 	mrseq	r0, (UNDEF: 1)
    7528:	03080815 	movweq	r0, #34837	; 0x8815
    752c:	034b0903 	movteq	r0, #47363	; 0xb903
    7530:	02160000 	andseq	r0, r6, #0
    7534:	08000022 	stmdaeq	r0, {r1, r5}
    7538:	c1070307 	tstgt	r7, r7, lsl #6
    753c:	00000000 	andeq	r0, r0, r0
    7540:	00054d16 	andeq	r4, r5, r6, lsl sp
    7544:	03080800 	movweq	r0, #34816	; 0x8800
    7548:	0000f408 	andeq	pc, r0, r8, lsl #8
    754c:	11000400 	tstne	r0, r0, lsl #8
    7550:	00000223 	andeq	r0, r0, r3, lsr #4
    7554:	03030908 	movweq	r0, #14600	; 0x3908
    7558:	00000324 	andeq	r0, r0, r4, lsr #6
    755c:	00049517 	andeq	r9, r4, r7, lsl r5
    7560:	0b083000 	bleq	213568 <__ccfg+0x1f35c0>
    7564:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    7568:	80160000 	andshi	r0, r6, r0
    756c:	08000004 	stmdaeq	r0, {r2}
    7570:	c1080314 	tstgt	r8, r4, lsl r3
    7574:	00000000 	andeq	r0, r0, r0
    7578:	00028f16 	andeq	r8, r2, r6, lsl pc
    757c:	03150800 	tsteq	r5, #0, 16
    7580:	0000c108 	andeq	ip, r0, r8, lsl #2
    7584:	7b160200 	blvc	587d8c <__ccfg+0x567de4>
    7588:	08000004 	stmdaeq	r0, {r2}
    758c:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    7590:	04000002 	streq	r0, [r0], #-2
    7594:	000f4d16 	andeq	r4, pc, r6, lsl sp	; <UNPREDICTABLE>
    7598:	03170800 	tsteq	r7, #0, 16
    759c:	0000f409 	andeq	pc, r0, r9, lsl #8
    75a0:	31160800 	tstcc	r6, r0, lsl #16
    75a4:	08000004 	stmdaeq	r0, {r2}
    75a8:	bb0f0318 	bllt	3c8210 <__ccfg+0x3a8268>
    75ac:	0c000003 	stceq	0, cr0, [r0], {3}
    75b0:	00028a16 	andeq	r8, r2, r6, lsl sl
    75b4:	03190800 	tsteq	r9, #0, 16
    75b8:	0003cb15 	andeq	ip, r3, r5, lsl fp
    75bc:	0f002c00 	svceq	0x00002c00
    75c0:	0000034b 	andeq	r0, r0, fp, asr #6
    75c4:	000003cb 	andeq	r0, r0, fp, asr #7
    75c8:	00008818 	andeq	r8, r0, r8, lsl r8
    75cc:	0a000300 	beq	81d4 <__exidx_end+0x53dc>
    75d0:	00035804 	andeq	r5, r3, r4, lsl #16
    75d4:	04a01100 	strteq	r1, [r0], #256	; 0x100
    75d8:	1c080000 	stcne	0, cr0, [r8], {-0}
    75dc:	03581b03 	cmpeq	r8, #3072	; 0xc00
    75e0:	52140000 	andspl	r0, r4, #0
    75e4:	08000003 	stmdaeq	r0, {r0, r1}
    75e8:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    75ec:	01000003 	tsteq	r0, r3
    75f0:	d1040a01 	tstle	r4, r1, lsl #20
    75f4:	19000003 	stmdbne	r0, {r0, r1}
    75f8:	0015c001 	andseq	ip, r5, r1
    75fc:	07910100 	ldreq	r0, [r1, r0, lsl #2]
    7600:	0001cd01 	andeq	ip, r1, r1, lsl #26
    7604:	001c1c00 	andseq	r1, ip, r0, lsl #24
    7608:	001c6c00 	andseq	r6, ip, r0, lsl #24
    760c:	689c0100 	ldmvs	ip, {r8}
    7610:	1a000004 	bne	7628 <__exidx_end+0x4830>
    7614:	00736572 	rsbseq	r6, r3, r2, ror r5
    7618:	cd149101 	ldfgtd	f1, [r4, #-4]
    761c:	63000001 	movwvs	r0, #1
    7620:	1a000025 	bne	76bc <__exidx_end+0x48c4>
    7624:	01006d66 	tsteq	r0, r6, ror #26
    7628:	04682591 	strbteq	r2, [r8], #-1425	; 0xfffffa6f
    762c:	25ad0000 	strcs	r0, [sp, #0]!
    7630:	611a0000 	tstvs	sl, r0
    7634:	91010071 	tstls	r1, r1, ror r0
    7638:	0000b531 	andeq	fp, r0, r1, lsr r5
    763c:	0025ec00 	eoreq	lr, r5, r0, lsl #24
    7640:	6d661b00 	vstmdbvs	r6!, {d17-d16}
    7644:	9301006c 	movwls	r0, #4204	; 0x106c
    7648:	0000c107 	andeq	ip, r0, r7, lsl #2
    764c:	00262000 	eoreq	r2, r6, r0
    7650:	00641b00 	rsbeq	r1, r4, r0, lsl #22
    7654:	c10c9301 	tstgt	ip, r1, lsl #6
    7658:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    765c:	1c000026 	stcne	0, cr0, [r0], {38}	; 0x26
    7660:	000015a8 	andeq	r1, r0, r8, lsr #11
    7664:	46019e01 	strmi	r9, [r1], -r1, lsl #28
    7668:	0000001c 	andeq	r0, r0, ip, lsl r0
    766c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    7670:	011d0000 	tsteq	sp, r0
    7674:	000015b3 			; <UNDEFINED> instruction: 0x000015b3
    7678:	01060801 	tsteq	r6, r1, lsl #16
    767c:	000000c1 	andeq	r0, r0, r1, asr #1
    7680:	000019ec 	andeq	r1, r0, ip, ror #19
    7684:	00001c1c 	andeq	r1, r0, ip, lsl ip
    7688:	721a9c01 	andsvc	r9, sl, #256	; 0x100
    768c:	01007365 	tsteq	r0, r5, ror #6
    7690:	01cd1a08 	biceq	r1, sp, r8, lsl #20
    7694:	26510000 	ldrbcs	r0, [r1], -r0
    7698:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    769c:	24080100 	strcs	r0, [r8], #-256	; 0xffffff00
    76a0:	000000c1 	andeq	r0, r0, r1, asr #1
    76a4:	00002664 	andeq	r2, r0, r4, ror #12
    76a8:	006d661a 	rsbeq	r6, sp, sl, lsl r6
    76ac:	68330801 	ldmdavs	r3!, {r0, fp}
    76b0:	77000004 	strvc	r0, [r0, -r4]
    76b4:	1a000026 	bne	7754 <__exidx_end+0x495c>
    76b8:	01007061 	tsteq	r0, r1, rrx
    76bc:	00b53f08 	adcseq	r3, r5, r8, lsl #30
    76c0:	26a00000 	strtcs	r0, [r0], r0
    76c4:	631b0000 	tstvs	fp, #0
    76c8:	070a0100 	streq	r0, [sl, -r0, lsl #2]
    76cc:	000001d3 	ldrdeq	r0, [r0], -r3
    76d0:	00002742 	andeq	r2, r0, r2, asr #14
    76d4:	0100641e 	tsteq	r0, lr, lsl r4
    76d8:	00c1070b 	sbceq	r0, r1, fp, lsl #14
    76dc:	91040000 	mrsls	r0, (UNDEF: 4)
    76e0:	1f062354 	svcne	0x00062354
    76e4:	000015ae 	andeq	r1, r0, lr, lsr #11
    76e8:	01070d01 	tsteq	r7, r1, lsl #26
    76ec:	000019cc 	andeq	r1, r0, ip, asr #19
    76f0:	000019ec 	andeq	r1, r0, ip, ror #19
    76f4:	7c059c01 	stcvc	12, cr9, [r5], {1}
    76f8:	06082300 	streq	r2, [r8], -r0, lsl #6
    76fc:	00000509 	andeq	r0, r0, r9, lsl #10
    7700:	01006320 	tsteq	r0, r0, lsr #6
    7704:	00c1120d 	sbceq	r1, r1, sp, lsl #4
    7708:	50010000 	andpl	r0, r1, r0
    770c:	6f452100 	svcvs	0x00452100
    7710:	8801006c 	stmdahi	r1, {r2, r3, r5, r6}
    7714:	001a2601 	andseq	r2, sl, r1, lsl #12
    7718:	65522100 	ldrbvs	r2, [r2, #-256]	; 0xffffff00
    771c:	8b010074 	blhi	478f4 <__ccfg+0x2794c>
    7720:	001a8801 	andseq	r8, sl, r1, lsl #16
    7724:	0ca82200 	sfmeq	f2, 4, [r8]
    7728:	05450000 	strbeq	r0, [r5, #-0]
    772c:	76230000 	strtvc	r0, [r3], -r0
    7730:	01006c61 	tsteq	r0, r1, ror #24
    7734:	00c10a3a 	sbceq	r0, r1, sl, lsr sl
    7738:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    773c:	133a0100 	teqne	sl, #0, 2
    7740:	00000081 	andeq	r0, r0, r1, lsl #1
    7744:	00002828 	andeq	r2, r0, r8, lsr #16
    7748:	0c802200 	sfmeq	f2, 4, [r0], {0}
    774c:	056d0000 	strbeq	r0, [sp, #-0]!
    7750:	761b0000 	ldrvc	r0, [fp], -r0
    7754:	01006c61 	tsteq	r0, r1, ror #24
    7758:	00c10a46 	sbceq	r0, r1, r6, asr #20
    775c:	283b0000 	ldmdacs	fp!, {}	; <UNPREDICTABLE>
    7760:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    7764:	0f460100 	svceq	0x00460100
    7768:	000000c1 	andeq	r0, r0, r1, asr #1
    776c:	00002864 	andeq	r2, r0, r4, ror #16
    7770:	0ce02200 	sfmeq	f2, 2, [r0]
    7774:	05950000 	ldreq	r0, [r5]
    7778:	761b0000 	ldrvc	r0, [fp], -r0
    777c:	01006c61 	tsteq	r0, r1, ror #24
    7780:	00e30c55 	rsceq	r0, r3, r5, asr ip
    7784:	288d0000 	stmcs	sp, {}	; <UNPREDICTABLE>
    7788:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    778c:	11550100 	cmpne	r5, r0, lsl #2
    7790:	000000e3 	andeq	r0, r0, r3, ror #1
    7794:	000028a0 	andeq	r2, r0, r0, lsr #17
    7798:	1baa2400 	blne	fea907a0 <_estack+0xdea8b7a0>
    779c:	1bd40000 	blne	ff5077a4 <_estack+0xdf5027a4>
    77a0:	05bf0000 	ldreq	r0, [pc, #0]!	; 77a8 <__exidx_end+0x49b0>
    77a4:	761e0000 	ldrvc	r0, [lr], -r0
    77a8:	01006c61 	tsteq	r0, r1, ror #24
    77ac:	00e30c60 	rsceq	r0, r3, r0, ror #24
    77b0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    77b4:	0100691b 	tsteq	r0, fp, lsl r9
    77b8:	00810a61 	addeq	r0, r1, r1, ror #20
    77bc:	28c90000 	stmiacs	r9, {}^	; <UNPREDICTABLE>
    77c0:	22000000 	andcs	r0, r0, #0
    77c4:	00000cc8 	andeq	r0, r0, r8, asr #25
    77c8:	000005d9 	ldrdeq	r0, [r0], -r9
    77cc:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    77d0:	0a710100 	beq	1c47bd8 <__ccfg+0x1c27c30>
    77d4:	000000c1 	andeq	r0, r0, r1, asr #1
    77d8:	000028dc 	ldrdeq	r2, [r0], -ip
    77dc:	1bf22500 	blne	ffc90be4 <_estack+0xdfc8bbe4>
    77e0:	1c0e0000 	stcne	0, cr0, [lr], {-0}
    77e4:	731b0000 	tstvc	fp, #0
    77e8:	78010074 	stmdavc	r1, {r2, r4, r5, r6}
    77ec:	0001cd0b 	andeq	ip, r1, fp, lsl #26
    77f0:	0028fc00 	eoreq	pc, r8, r0, lsl #24
    77f4:	00000000 	andeq	r0, r0, r0
    77f8:	0000058f 	andeq	r0, r0, pc, lsl #11
    77fc:	22e30003 	rsccs	r0, r3, #3
    7800:	01040000 	mrseq	r0, (UNDEF: 4)
    7804:	0000012f 	andeq	r0, r0, pc, lsr #2
    7808:	0015d30c 	andseq	sp, r5, ip, lsl #6
    780c:	00038000 	andeq	r8, r3, r0
    7810:	000da000 	andeq	sl, sp, r0
    7814:	00000000 	andeq	r0, r0, r0
    7818:	00547c00 	subseq	r7, r4, r0, lsl #24
    781c:	06010200 	streq	r0, [r1], -r0, lsl #4
    7820:	00000374 	andeq	r0, r0, r4, ror r3
    7824:	d0050202 	andle	r0, r5, r2, lsl #4
    7828:	02000003 	andeq	r0, r0, #3
    782c:	00a40504 	adceq	r0, r4, r4, lsl #10
    7830:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7834:	00009f05 	andeq	r9, r0, r5, lsl #30
    7838:	220a0300 	andcs	r0, sl, #0, 6
    783c:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    7840:	00004d18 	andeq	r4, r0, r8, lsl sp
    7844:	08010200 	stmdaeq	r1, {r9}
    7848:	00000372 	andeq	r0, r0, r2, ror r3
    784c:	0020f803 	eoreq	pc, r0, r3, lsl #16
    7850:	19310200 	ldmdbne	r1!, {r9}
    7854:	00000060 	andeq	r0, r0, r0, rrx
    7858:	30070202 	andcc	r0, r7, r2, lsl #4
    785c:	03000002 	movweq	r0, #2
    7860:	000017c1 	andeq	r1, r0, r1, asr #15
    7864:	73193402 	tstvc	r9, #33554432	; 0x2000000
    7868:	02000000 	andeq	r0, r0, #0
    786c:	00790704 	rsbseq	r0, r9, r4, lsl #14
    7870:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7874:	00007407 	andeq	r7, r0, r7, lsl #8
    7878:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    787c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7880:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    7884:	03000000 	movweq	r0, #0
    7888:	00000b54 	andeq	r0, r0, r4, asr fp
    788c:	9b1b2803 	blls	6d18a0 <__ccfg+0x6b18f8>
    7890:	05000000 	streq	r0, [r0, #-0]
    7894:	00000a6a 	andeq	r0, r0, sl, ror #20
    7898:	b3000904 	movwlt	r0, #2308	; 0x904
    789c:	06000000 	streq	r0, [r0], -r0
    78a0:	00000c0a 	andeq	r0, r0, sl, lsl #24
    78a4:	000000b3 	strheq	r0, [r0], -r3
    78a8:	07000100 	streq	r0, [r0, -r0, lsl #2]
    78ac:	0a6c0304 	beq	1b084c4 <__ccfg+0x1ae851c>
    78b0:	63030000 	movwvs	r0, #12288	; 0x3000
    78b4:	00008f18 	andeq	r8, r0, r8, lsl pc
    78b8:	03f00300 	mvnseq	r0, #0, 6
    78bc:	26040000 	strcs	r0, [r4], -r0
    78c0:	00004112 	andeq	r4, r0, r2, lsl r1
    78c4:	15ce0300 	strbne	r0, [lr, #768]	; 0x300
    78c8:	27040000 	strcs	r0, [r4, -r0]
    78cc:	00005412 	andeq	r5, r0, r2, lsl r4
    78d0:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    78d4:	c6030000 	strgt	r0, [r3], -r0
    78d8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    78dc:	0041122b 	subeq	r1, r1, fp, lsr #4
    78e0:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    78e4:	03000000 	movweq	r0, #0
    78e8:	0000161f 	andeq	r1, r0, pc, lsl r6
    78ec:	67122c04 	ldrvs	r2, [r2, -r4, lsl #24]
    78f0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    78f4:	000000ef 	andeq	r0, r0, pc, ror #1
    78f8:	00026303 	andeq	r6, r2, r3, lsl #6
    78fc:	122d0400 	eorne	r0, sp, #0, 8
    7900:	00000067 	andeq	r0, r0, r7, rrx
    7904:	00cd040a 	sbceq	r0, sp, sl, lsl #8
    7908:	080b0000 	stmdaeq	fp, {}	; <UNPREDICTABLE>
    790c:	a0093204 	andge	r3, r9, r4, lsl #4
    7910:	0c000001 	stceq	0, cr0, [r0], {1}
    7914:	0000027e 	andeq	r0, r0, lr, ror r2
    7918:	de073404 	cdple	4, 0, cr3, cr7, cr4, {0}
    791c:	01000000 	mrseq	r0, (UNDEF: 0)
    7920:	0c000701 	stceq	7, cr0, [r0], {1}
    7924:	00000098 	muleq	r0, r8, r0
    7928:	de033504 	cfsh32le	mvfx3, mvfx3, #4
    792c:	01000000 	mrseq	r0, (UNDEF: 0)
    7930:	0c000601 	stceq	6, cr0, [r0], {1}
    7934:	0000024c 	andeq	r0, r0, ip, asr #4
    7938:	de033604 	cfmadd32le	mvax0, mvfx3, mvfx3, mvfx4
    793c:	01000000 	mrseq	r0, (UNDEF: 0)
    7940:	0c000501 	cfstr32eq	mvfx0, [r0], {1}
    7944:	000003ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    7948:	de033704 	cdple	7, 0, cr3, cr3, cr4, {0}
    794c:	01000000 	mrseq	r0, (UNDEF: 0)
    7950:	0c000401 	cfstrseq	mvf0, [r0], {1}
    7954:	000003f8 	strdeq	r0, [r0], -r8
    7958:	de033804 	cdple	8, 0, cr3, cr3, cr4, {0}
    795c:	01000000 	mrseq	r0, (UNDEF: 0)
    7960:	0d000004 	stceq	0, cr0, [r0, #-16]
    7964:	000003e9 	andeq	r0, r0, r9, ror #7
    7968:	de073a04 	vmlale.f32	s6, s14, s8
    796c:	01000000 	mrseq	r0, (UNDEF: 0)
    7970:	0000400d 	andeq	r4, r0, sp
    7974:	033c0400 	teqeq	ip, #0, 8
    7978:	000000de 	ldrdeq	r0, [r0], -lr
    797c:	006d0d02 	rsbeq	r0, sp, r2, lsl #26
    7980:	3d040000 	stccc	0, cr0, [r4, #-0]
    7984:	0000de03 	andeq	sp, r0, r3, lsl #28
    7988:	1e0d0300 	cdpne	3, 0, cr0, cr13, cr0, {0}
    798c:	04000001 	streq	r0, [r0], #-1
    7990:	00ef083f 	rsceq	r0, pc, pc, lsr r8	; <UNPREDICTABLE>
    7994:	00040000 	andeq	r0, r4, r0
    7998:	00042803 	andeq	r2, r4, r3, lsl #16
    799c:	03410400 	movteq	r0, #5120	; 0x1400
    79a0:	00000112 	andeq	r0, r0, r2, lsl r1
    79a4:	0001a009 	andeq	sl, r1, r9
    79a8:	02720e00 	rsbseq	r0, r2, #0, 28
    79ac:	43040000 	movwmi	r0, #16384	; 0x4000
    79b0:	0001ac1a 	andeq	sl, r1, sl, lsl ip
    79b4:	0e010100 	adfeqs	f0, f1, f0
    79b8:	000002de 	ldrdeq	r0, [r0], -lr
    79bc:	cd0e4504 	cfstr32gt	mvfx4, [lr, #-16]
    79c0:	01000001 	tsteq	r0, r1
    79c4:	d3040a01 	movwle	r0, #18945	; 0x4a01
    79c8:	02000001 	andeq	r0, r0, #1
    79cc:	037b0801 	cmneq	fp, #65536	; 0x10000
    79d0:	d3080000 	movwle	r0, #32768	; 0x8000
    79d4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    79d8:	000002ec 	andeq	r0, r0, ip, ror #5
    79dc:	cd1e4504 	cfldr32gt	mvfx4, [lr, #-16]
    79e0:	01000001 	tsteq	r0, r1
    79e4:	05080b01 	streq	r0, [r8, #-2817]	; 0xfffff4ff
    79e8:	021e098f 	andseq	r0, lr, #2342912	; 0x23c000
    79ec:	850d0000 	strhi	r0, [sp, #-0]
    79f0:	05000002 	streq	r0, [r0, #-2]
    79f4:	00670b90 	mlseq	r7, r0, fp, r0
    79f8:	0d000000 	stceq	0, cr0, [r0, #-0]
    79fc:	000005fb 	strdeq	r0, [r0], -fp
    7a00:	cd089105 	stfgtd	f1, [r8, #-20]	; 0xffffffec
    7a04:	04000000 	streq	r0, [r0], #-0
    7a08:	00046b0d 	andeq	r6, r4, sp, lsl #22
    7a0c:	10920500 	addsne	r0, r2, r0, lsl #10
    7a10:	000000ea 	andeq	r0, r0, sl, ror #1
    7a14:	06030006 	streq	r0, [r3], -r6
    7a18:	05000004 	streq	r0, [r0, #-4]
    7a1c:	01ed0393 			; <UNDEFINED> instruction: 0x01ed0393
    7a20:	1e0f0000 	cdpne	0, 0, cr0, cr15, cr0, {0}
    7a24:	35000002 	strcc	r0, [r0, #-2]
    7a28:	10000002 	andne	r0, r0, r2
    7a2c:	00360e00 	eorseq	r0, r6, r0, lsl #28
    7a30:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
    7a34:	00022a0f 	andeq	r2, r2, pc, lsl #20
    7a38:	0b010100 	bleq	47e40 <__ccfg+0x27e98>
    7a3c:	09910601 	ldmibeq	r1, {r0, r9, sl}
    7a40:	0000026d 	andeq	r0, r0, sp, ror #4
    7a44:	00045e0c 	andeq	r5, r4, ip, lsl #28
    7a48:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    7a4c:	000000de 	ldrdeq	r0, [r0], -lr
    7a50:	00010701 	andeq	r0, r1, r1, lsl #14
    7a54:	0000310c 	andeq	r3, r0, ip, lsl #2
    7a58:	03940600 	orrseq	r0, r4, #0, 12
    7a5c:	000000de 	ldrdeq	r0, [r0], -lr
    7a60:	00000101 	andeq	r0, r0, r1, lsl #2
    7a64:	02430300 	subeq	r0, r3, #0, 6
    7a68:	96060000 	strls	r0, [r6], -r0
    7a6c:	00024303 	andeq	r4, r2, r3, lsl #6
    7a70:	026d0800 	rsbeq	r0, sp, #0, 16
    7a74:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    7a78:	89000002 	stmdbhi	r0, {r1}
    7a7c:	10000002 	andne	r0, r0, r2
    7a80:	027e0800 	rsbseq	r0, lr, #0, 16
    7a84:	a80e0000 	stmdage	lr, {}	; <UNPREDICTABLE>
    7a88:	06000002 	streq	r0, [r0], -r2
    7a8c:	0289179c 	addeq	r1, r9, #156, 14	; 0x2700000
    7a90:	01010000 	mrseq	r0, (UNDEF: 1)
    7a94:	0000d90f 	andeq	sp, r0, pc, lsl #18
    7a98:	0002a700 	andeq	sl, r2, r0, lsl #14
    7a9c:	08001000 	stmdaeq	r0, {ip}
    7aa0:	0000029c 	muleq	r0, ip, r2
    7aa4:	0003640e 	andeq	r6, r3, lr, lsl #8
    7aa8:	13060700 	movwne	r0, #26368	; 0x6700
    7aac:	000002a7 	andeq	r0, r0, r7, lsr #5
    7ab0:	fe0e0101 	cdp2	1, 0, cr0, cr14, cr1, {0}
    7ab4:	05000000 	streq	r0, [r0, #-0]
    7ab8:	00ef0ec3 	rsceq	r0, pc, r3, asr #29
    7abc:	01010000 	mrseq	r0, (UNDEF: 1)
    7ac0:	00047811 	andeq	r7, r4, r1, lsl r8
    7ac4:	016e0800 	cmneq	lr, r0, lsl #16
    7ac8:	0002d510 	andeq	sp, r2, r0, lsl r5
    7acc:	db040a00 	blle	10a2d4 <__ccfg+0xea32c>
    7ad0:	12000002 	andne	r0, r0, #2
    7ad4:	0002e701 	andeq	lr, r2, r1, lsl #14
    7ad8:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    7adc:	0f000000 	svceq	0x00000000
    7ae0:	000001da 	ldrdeq	r0, [r0], -sl
    7ae4:	000002f2 	strdeq	r0, [r0], -r2
    7ae8:	e7080010 	smlad	r8, r0, r0, r0
    7aec:	14000002 	strne	r0, [r0], #-2
    7af0:	00000438 	andeq	r0, r0, r8, lsr r4
    7af4:	16017f08 	strne	r7, [r1], -r8, lsl #30
    7af8:	000002f2 	strdeq	r0, [r0], -r2
    7afc:	5c140101 	ldfpls	f0, [r4], {1}
    7b00:	08000003 	stmdaeq	r0, {r0, r1}
    7b04:	fb140182 	blx	508116 <__ccfg+0x4e816e>
    7b08:	01000000 	mrseq	r0, (UNDEF: 0)
    7b0c:	04631401 	strbteq	r1, [r3], #-1025	; 0xfffffbff
    7b10:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
    7b14:	00ef0e02 	rsceq	r0, pc, r2, lsl #28
    7b18:	01010000 	mrseq	r0, (UNDEF: 1)
    7b1c:	03080815 	movweq	r0, #34837	; 0x8815
    7b20:	034b0903 	movteq	r0, #47363	; 0xb903
    7b24:	02160000 	andseq	r0, r6, #0
    7b28:	08000022 	stmdaeq	r0, {r1, r5}
    7b2c:	cd070307 	stcgt	3, cr0, [r7, #-28]	; 0xffffffe4
    7b30:	00000000 	andeq	r0, r0, r0
    7b34:	00054d16 	andeq	r4, r5, r6, lsl sp
    7b38:	03080800 	movweq	r0, #34816	; 0x8800
    7b3c:	00010008 	andeq	r0, r1, r8
    7b40:	11000400 	tstne	r0, r0, lsl #8
    7b44:	00000223 	andeq	r0, r0, r3, lsr #4
    7b48:	03030908 	movweq	r0, #14600	; 0x3908
    7b4c:	00000324 	andeq	r0, r0, r4, lsr #6
    7b50:	00049517 	andeq	r9, r4, r7, lsl r5
    7b54:	0b083000 	bleq	213b5c <__ccfg+0x1f3bb4>
    7b58:	03bb0803 			; <UNDEFINED> instruction: 0x03bb0803
    7b5c:	80160000 	andshi	r0, r6, r0
    7b60:	08000004 	stmdaeq	r0, {r2}
    7b64:	cd080314 	stcgt	3, cr0, [r8, #-80]	; 0xffffffb0
    7b68:	00000000 	andeq	r0, r0, r0
    7b6c:	00028f16 	andeq	r8, r2, r6, lsl pc
    7b70:	03150800 	tsteq	r5, #0, 16
    7b74:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7b78:	7b160200 	blvc	588380 <__ccfg+0x5683d8>
    7b7c:	08000004 	stmdaeq	r0, {r2}
    7b80:	c80b0316 	stmdagt	fp, {r1, r2, r4, r8, r9}
    7b84:	04000002 	streq	r0, [r0], #-2
    7b88:	000f4d16 	andeq	r4, pc, r6, lsl sp	; <UNPREDICTABLE>
    7b8c:	03170800 	tsteq	r7, #0, 16
    7b90:	00010009 	andeq	r0, r1, r9
    7b94:	31160800 	tstcc	r6, r0, lsl #16
    7b98:	08000004 	stmdaeq	r0, {r2}
    7b9c:	bb0f0318 	bllt	3c8804 <__ccfg+0x3a885c>
    7ba0:	0c000003 	stceq	0, cr0, [r0], {3}
    7ba4:	00028a16 	andeq	r8, r2, r6, lsl sl
    7ba8:	03190800 	tsteq	r9, #0, 16
    7bac:	0003cb15 	andeq	ip, r3, r5, lsl fp
    7bb0:	0f002c00 	svceq	0x00002c00
    7bb4:	0000034b 	andeq	r0, r0, fp, asr #6
    7bb8:	000003cb 	andeq	r0, r0, fp, asr #7
    7bbc:	00008818 	andeq	r8, r0, r8, lsl r8
    7bc0:	0a000300 	beq	87c8 <__exidx_end+0x59d0>
    7bc4:	00035804 	andeq	r5, r3, r4, lsl #16
    7bc8:	04a01100 	strteq	r1, [r0], #256	; 0x100
    7bcc:	1c080000 	stcne	0, cr0, [r8], {-0}
    7bd0:	03581b03 	cmpeq	r8, #3072	; 0xc00
    7bd4:	52140000 	andspl	r0, r4, #0
    7bd8:	08000003 	stmdaeq	r0, {r0, r1}
    7bdc:	ed14031e 	ldc	3, cr0, [r4, #-120]	; 0xffffff88
    7be0:	01000003 	tsteq	r0, r3
    7be4:	d1040a01 	tstle	r4, r1, lsl #20
    7be8:	19000003 	stmdbne	r0, {r0, r1}
    7bec:	00161101 	andseq	r1, r6, r1, lsl #2
    7bf0:	05080100 	streq	r0, [r8, #-256]	; 0xffffff00
    7bf4:	00008101 	andeq	r8, r0, r1, lsl #2
    7bf8:	001c6c00 	andseq	r6, ip, r0, lsl #24
    7bfc:	001ffc00 	andseq	pc, pc, r0, lsl #24
    7c00:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    7c04:	1a000005 	bne	7c20 <__exidx_end+0x4e28>
    7c08:	00667562 	rsbeq	r7, r6, r2, ror #10
    7c0c:	86180801 	ldrhi	r0, [r8], -r1, lsl #16
    7c10:	0f000005 	svceq	0x00000005
    7c14:	1a000029 	bne	7cc0 <__exidx_end+0x4ec8>
    7c18:	00746d66 	rsbseq	r6, r4, r6, ror #26
    7c1c:	86290801 	strthi	r0, [r9], -r1, lsl #16
    7c20:	06000005 	streq	r0, [r0], -r5
    7c24:	1a00002b 	bne	7cd8 <__exidx_end+0x4ee0>
    7c28:	01007061 	tsteq	r0, r1, rrx
    7c2c:	00b53608 	adcseq	r3, r5, r8, lsl #12
    7c30:	2b3a0000 	blcs	e87c38 <__ccfg+0xe67c90>
    7c34:	6e1b0000 	cdpvs	0, 1, cr0, cr11, cr0, {0}
    7c38:	0a010063 	beq	47dcc <__ccfg+0x27e24>
    7c3c:	00008106 	andeq	r8, r0, r6, lsl #2
    7c40:	002bd300 	eoreq	sp, fp, r0, lsl #6
    7c44:	15c61c00 	strbne	r1, [r6, #3072]	; 0xc00
    7c48:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    7c4c:	16171c11 			; <UNDEFINED> instruction: 0x16171c11
    7c50:	55010000 	strpl	r0, [r1, #-0]
    7c54:	1d2e1d16 	stcne	13, cr1, [lr, #-88]!	; 0xffffffa8
    7c58:	1d9e0000 	ldcne	0, cr0, [lr]
    7c5c:	04880000 	streq	r0, [r8], #0
    7c60:	761e0000 	ldrvc	r0, [lr], -r0
    7c64:	01007061 	tsteq	r0, r1, rrx
    7c68:	010c114e 	tsteq	ip, lr, asr #2
    7c6c:	56010000 	strpl	r0, [r1], -r0
    7c70:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    7c74:	c1114e01 	tstgt	r1, r1, lsl #28
    7c78:	54000000 	strpl	r0, [r0], #-0
    7c7c:	0000002c 	andeq	r0, r0, ip, lsr #32
    7c80:	001d9e1d 	andseq	r9, sp, sp, lsl lr
    7c84:	001de600 	andseq	lr, sp, r0, lsl #12
    7c88:	0004a400 	andeq	sl, r4, r0, lsl #8
    7c8c:	61761e00 	cmnvs	r6, r0, lsl #28
    7c90:	4f010070 	svcmi	0x00010070
    7c94:	00010c11 	andeq	r0, r1, r1, lsl ip
    7c98:	005e0100 	subseq	r0, lr, r0, lsl #2
    7c9c:	000d501f 	andeq	r5, sp, pc, lsl r0
    7ca0:	0004d500 	andeq	sp, r4, r0, lsl #10
    7ca4:	61761e00 	cmnvs	r6, r0, lsl #28
    7ca8:	50010070 	andpl	r0, r1, r0, ror r0
    7cac:	00010c11 	andeq	r0, r1, r1, lsl ip
    7cb0:	205e0100 	subscs	r0, lr, r0, lsl #2
    7cb4:	01006364 	tsteq	r0, r4, ror #6
    7cb8:	00811150 	addeq	r1, r1, r0, asr r1
    7cbc:	631b0000 	tstvs	fp, #0
    7cc0:	11500100 	cmpne	r0, r0, lsl #2
    7cc4:	000001d3 	ldrdeq	r0, [r0], -r3
    7cc8:	00002c72 	andeq	r2, r0, r2, ror ip
    7ccc:	0d681f00 	stcleq	15, cr1, [r8, #-0]
    7cd0:	04fc0000 	ldrbteq	r0, [ip], #0
    7cd4:	761e0000 	ldrvc	r0, [lr], -r0
    7cd8:	01007061 	tsteq	r0, r1, rrx
    7cdc:	058c1655 	streq	r1, [ip, #1621]	; 0x655
    7ce0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    7ce4:	00666d1b 	rsbeq	r6, r6, fp, lsl sp
    7ce8:	c1165501 	tstgt	r6, r1, lsl #10
    7cec:	90000000 	andls	r0, r0, r0
    7cf0:	0000002c 	andeq	r0, r0, ip, lsr #32
    7cf4:	000d181f 	andeq	r1, sp, pc, lsl r8
    7cf8:	00051400 	andeq	r1, r5, r0, lsl #8
    7cfc:	61761e00 	cmnvs	r6, r0, lsl #28
    7d00:	56010070 			; <UNDEFINED> instruction: 0x56010070
    7d04:	00058c16 	andeq	r8, r5, r6, lsl ip
    7d08:	005e0100 	subseq	r0, lr, r0, lsl #2
    7d0c:	000d801f 	andeq	r8, sp, pc, lsl r0
    7d10:	00054500 	andeq	r4, r5, r0, lsl #10
    7d14:	61761e00 	cmnvs	r6, r0, lsl #28
    7d18:	57010070 	smlsdxpl	r1, r0, r0, r0
    7d1c:	00058c16 	andeq	r8, r5, r6, lsl ip
    7d20:	205e0100 	subscs	r0, lr, r0, lsl #2
    7d24:	01006364 	tsteq	r0, r4, ror #6
    7d28:	00811657 	addeq	r1, r1, r7, asr r6
    7d2c:	631b0000 	tstvs	fp, #0
    7d30:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    7d34:	000001d3 	ldrdeq	r0, [r0], -r3
    7d38:	00002cae 	andeq	r2, r0, lr, lsr #25
    7d3c:	1fae1d00 	svcne	0x00ae1d00
    7d40:	1fc20000 	svcne	0x00c20000
    7d44:	056f0000 	strbeq	r0, [pc, #-0]!	; 7d4c <__exidx_end+0x4f54>
    7d48:	631b0000 	tstvs	fp, #0
    7d4c:	095c0100 	ldmdbeq	ip, {r8}^
    7d50:	000001d3 	ldrdeq	r0, [r0], -r3
    7d54:	00002ccc 	andeq	r2, r0, ip, asr #25
    7d58:	7061731e 	rsbvc	r7, r1, lr, lsl r3
    7d5c:	0d5c0100 	ldfeqe	f0, [ip, #-0]
    7d60:	000001cd 	andeq	r0, r0, sp, asr #3
    7d64:	21005601 	tstcs	r0, r1, lsl #12
    7d68:	00000d30 	andeq	r0, r0, r0, lsr sp
    7d6c:	7061731b 	rsbvc	r7, r1, fp, lsl r3
    7d70:	0a660100 	beq	1988178 <__ccfg+0x19681d0>
    7d74:	000001cd 	andeq	r0, r0, sp, asr #3
    7d78:	00002cdf 	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
    7d7c:	040a0000 	streq	r0, [sl], #-0
    7d80:	000001da 	ldrdeq	r0, [r0], -sl
    7d84:	00ef040a 	rsceq	r0, pc, sl, lsl #8
    7d88:	d5000000 	strle	r0, [r0, #-0]
    7d8c:	04000000 	streq	r0, [r0], #-0
    7d90:	00249f00 	eoreq	r9, r4, r0, lsl #30
    7d94:	5e010400 	cfcpyspl	mvf0, mvf1
    7d98:	01000016 	tsteq	r0, r6, lsl r0
    7d9c:	00001717 	andeq	r1, r0, r7, lsl r7
    7da0:	00001753 	andeq	r1, r0, r3, asr r7
    7da4:	00000db0 			; <UNDEFINED> instruction: 0x00000db0
    7da8:	00000000 	andeq	r0, r0, r0
    7dac:	00005746 	andeq	r5, r0, r6, asr #14
    7db0:	00170e02 	andseq	r0, r7, r2, lsl #28
    7db4:	301b0200 	andscc	r0, fp, r0, lsl #4
    7db8:	03000000 	movweq	r0, #0
    7dbc:	03740601 	cmneq	r4, #1048576	; 0x100000
    7dc0:	01030000 	mrseq	r0, (UNDEF: 3)
    7dc4:	00037208 	andeq	r7, r3, r8, lsl #4
    7dc8:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    7dcc:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    7dd0:	30070203 	andcc	r0, r7, r3, lsl #4
    7dd4:	02000002 	andeq	r0, r0, #2
    7dd8:	00001654 	andeq	r1, r0, r4, asr r6
    7ddc:	00573f02 	subseq	r3, r7, r2, lsl #30
    7de0:	04030000 	streq	r0, [r3], #-0
    7de4:	0000a405 	andeq	sl, r0, r5, lsl #8
    7de8:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7dec:	00000079 	andeq	r0, r0, r9, ror r0
    7df0:	9f050803 	svcls	0x00050803
    7df4:	03000000 	movweq	r0, #0
    7df8:	00740708 	rsbseq	r0, r4, r8, lsl #14
    7dfc:	04040000 	streq	r0, [r4], #-0
    7e00:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    7e04:	07040300 	streq	r0, [r4, -r0, lsl #6]
    7e08:	0000007e 	andeq	r0, r0, lr, ror r0
    7e0c:	00171002 	andseq	r1, r7, r2
    7e10:	25130300 	ldrcs	r0, [r3, #-768]	; 0xfffffd00
    7e14:	02000000 	andeq	r0, r0, #0
    7e18:	00001656 	andeq	r1, r0, r6, asr r6
    7e1c:	004c1f03 	subeq	r1, ip, r3, lsl #30
    7e20:	25050000 	strcs	r0, [r5, #-0]
    7e24:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    7e28:	00008caa 	andeq	r8, r0, sl, lsr #25
    7e2c:	001ffc00 	andseq	pc, pc, r0, lsl #24
    7e30:	00003000 	andeq	r3, r0, r0
    7e34:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    7e38:	00001748 	andeq	r1, r0, r8, asr #14
    7e3c:	008c3e01 	addeq	r3, ip, r1, lsl #28
    7e40:	2cfd0000 	ldclcs	0, cr0, [sp]
    7e44:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
    7e48:	01000017 	tsteq	r0, r7, lsl r0
    7e4c:	00008c3f 	andeq	r8, r0, pc, lsr ip
    7e50:	002d1600 	eoreq	r1, sp, r0, lsl #12
    7e54:	16470700 	strbne	r0, [r7], -r0, lsl #14
    7e58:	40010000 	andmi	r0, r1, r0
    7e5c:	00000081 	andeq	r0, r0, r1, lsl #1
    7e60:	00005101 	andeq	r5, r0, r1, lsl #2
    7e64:	00000143 	andeq	r0, r0, r3, asr #2
    7e68:	250e0004 	strcs	r0, [lr, #-4]
    7e6c:	01040000 	mrseq	r0, (UNDEF: 4)
    7e70:	0000165e 	andeq	r1, r0, lr, asr r6
    7e74:	00186401 	andseq	r6, r8, r1, lsl #8
    7e78:	00175300 	andseq	r5, r7, r0, lsl #6
    7e7c:	000dc000 	andeq	ip, sp, r0
    7e80:	00000000 	andeq	r0, r0, r0
    7e84:	0058b100 	subseq	fp, r8, r0, lsl #2
    7e88:	06010200 	streq	r0, [r1], -r0, lsl #4
    7e8c:	00000374 	andeq	r0, r0, r4, ror r3
    7e90:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    7e94:	02000003 	andeq	r0, r0, #3
    7e98:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
    7e9c:	02020000 	andeq	r0, r2, #0
    7ea0:	00023007 	andeq	r3, r2, r7
    7ea4:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7ea8:	000000a4 	andeq	r0, r0, r4, lsr #1
    7eac:	0017bf03 	andseq	fp, r7, r3, lsl #30
    7eb0:	53410200 	movtpl	r0, #4608	; 0x1200
    7eb4:	02000000 	andeq	r0, r0, #0
    7eb8:	00790704 	rsbseq	r0, r9, r4, lsl #14
    7ebc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ec0:	00009f05 	andeq	r9, r0, r5, lsl #30
    7ec4:	180e0300 	stmdane	lr, {r8, r9}
    7ec8:	5b020000 	blpl	87ed0 <__ccfg+0x67f28>
    7ecc:	0000006c 	andeq	r0, r0, ip, rrx
    7ed0:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    7ed4:	04000000 	streq	r0, [r0], #-0
    7ed8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7edc:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7ee0:	00007e07 	andeq	r7, r0, r7, lsl #28
    7ee4:	17c10300 	strbne	r0, [r1, r0, lsl #6]
    7ee8:	20030000 	andcs	r0, r3, r0
    7eec:	00000048 	andeq	r0, r0, r8, asr #32
    7ef0:	00181003 	andseq	r1, r8, r3
    7ef4:	61260300 			; <UNDEFINED> instruction: 0x61260300
    7ef8:	05000000 	streq	r0, [r0, #-0]
    7efc:	000017d9 	ldrdeq	r1, [r0], -r9
    7f00:	81034504 	tsthi	r3, r4, lsl #10
    7f04:	00000000 	andeq	r0, r0, r0
    7f08:	20000000 	andcs	r0, r0, r0
    7f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    7f10:	0000dd9c 	muleq	r0, ip, sp
    7f14:	17ca0600 	strbne	r0, [sl, r0, lsl #12]
    7f18:	40010000 	andmi	r0, r1, r0
    7f1c:	00000081 	andeq	r0, r0, r1, lsl #1
    7f20:	00002d4b 	andeq	r2, r0, fp, asr #26
    7f24:	00181906 	andseq	r1, r8, r6, lsl #18
    7f28:	81410100 	mrshi	r0, (UNDEF: 81)
    7f2c:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    7f30:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    7f34:	000017fc 	strdeq	r1, [r0], -ip
    7f38:	00814201 	addeq	r4, r1, r1, lsl #4
    7f3c:	52010000 	andpl	r0, r1, #0
    7f40:	182b0500 	stmdane	fp!, {r8, sl}
    7f44:	53040000 	movwpl	r0, #16384	; 0x4000
    7f48:	00008c03 	andeq	r8, r0, r3, lsl #24
    7f4c:	00202c00 	eoreq	r2, r0, r0, lsl #24
    7f50:	00001800 	andeq	r1, r0, r0, lsl #16
    7f54:	2f9c0100 	svccs	0x009c0100
    7f58:	08000001 	stmdaeq	r0, {r0}
    7f5c:	16590108 	ldrbne	r0, [r9], -r8, lsl #2
    7f60:	09000001 	stmdbeq	r0, {r0}
    7f64:	000017b3 			; <UNDEFINED> instruction: 0x000017b3
    7f68:	008c5a01 	addeq	r5, ip, r1, lsl #20
    7f6c:	57090000 	strpl	r0, [r9, -r0]
    7f70:	01000018 	tsteq	r0, r8, lsl r0
    7f74:	00012f5b 	andeq	r2, r1, fp, asr pc
    7f78:	4c0a0000 	stcmi	0, cr0, [sl], {-0}
    7f7c:	01000018 	tsteq	r0, r8, lsl r0
    7f80:	0000f75c 	andeq	pc, r0, ip, asr r7	; <UNPREDICTABLE>
    7f84:	17fc0700 	ldrbne	r0, [ip, r0, lsl #14]!
    7f88:	5d010000 	stcpl	0, cr0, [r1, #-0]
    7f8c:	00000081 	andeq	r0, r0, r1, lsl #1
    7f90:	0b005101 	bleq	1c39c <__exidx_end+0x195a4>
    7f94:	00000081 	andeq	r0, r0, r1, lsl #1
    7f98:	0000013f 	andeq	r0, r0, pc, lsr r1
    7f9c:	00013f0c 	andeq	r3, r1, ip, lsl #30
    7fa0:	02000100 	andeq	r0, r0, #0, 2
    7fa4:	18830704 	stmne	r3, {r2, r8, r9, sl}
    7fa8:	36000000 	strcc	r0, [r0], -r0
    7fac:	04000001 	streq	r0, [r0], #-1
    7fb0:	0025b800 	eoreq	fp, r5, r0, lsl #16
    7fb4:	5e010400 	cfcpyspl	mvf0, mvf1
    7fb8:	01000016 	tsteq	r0, r6, lsl r0
    7fbc:	000018df 	ldrdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    7fc0:	00001753 	andeq	r1, r0, r3, asr r7
    7fc4:	00000dd8 	ldrdeq	r0, [r0], -r8
    7fc8:	00000000 	andeq	r0, r0, r0
    7fcc:	00005a5e 	andeq	r5, r0, lr, asr sl
    7fd0:	74060102 	strvc	r0, [r6], #-258	; 0xfffffefe
    7fd4:	02000003 	andeq	r0, r0, #3
    7fd8:	03720801 	cmneq	r2, #65536	; 0x10000
    7fdc:	02020000 	andeq	r0, r2, #0
    7fe0:	0003d005 	andeq	sp, r3, r5
    7fe4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    7fe8:	00000230 	andeq	r0, r0, r0, lsr r2
    7fec:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    7ff0:	03000000 	movweq	r0, #0
    7ff4:	000017bf 			; <UNDEFINED> instruction: 0x000017bf
    7ff8:	00534102 	subseq	r4, r3, r2, lsl #2
    7ffc:	04020000 	streq	r0, [r2], #-0
    8000:	00007907 	andeq	r7, r0, r7, lsl #18
    8004:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8008:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    800c:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    8010:	04000000 	streq	r0, [r0], #-0
    8014:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8018:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    801c:	00007e07 	andeq	r7, r0, r7, lsl #28
    8020:	17c10300 	strbne	r0, [r1, r0, lsl #6]
    8024:	20030000 	andcs	r0, r3, r0
    8028:	00000048 	andeq	r0, r0, r8, asr #32
    802c:	0018c105 	andseq	ip, r8, r5, lsl #2
    8030:	766a0400 	strbtvc	r0, [sl], -r0, lsl #8
    8034:	44000000 	strmi	r0, [r0], #-0
    8038:	08000020 	stmdaeq	r0, {r5}
    803c:	01000000 	mrseq	r0, (UNDEF: 0)
    8040:	0000a69c 	muleq	r0, ip, r6
    8044:	18af0600 	stmiane	pc!, {r9, sl}	; <UNPREDICTABLE>
    8048:	77010000 	strvc	r0, [r1, -r0]
    804c:	00000076 	andeq	r0, r0, r6, ror r0
    8050:	18fa0500 	ldmne	sl!, {r8, sl}^
    8054:	78040000 	stmdavc	r4, {}	; <UNPREDICTABLE>
    8058:	00000076 	andeq	r0, r0, r6, ror r0
    805c:	00000000 	andeq	r0, r0, r0
    8060:	00000006 	andeq	r0, r0, r6
    8064:	00cb9c01 	sbceq	r9, fp, r1, lsl #24
    8068:	af060000 	svcge	0x00060000
    806c:	01000018 	tsteq	r0, r8, lsl r0
    8070:	000076c2 	andeq	r7, r0, r2, asr #13
    8074:	d0050000 	andle	r0, r5, r0
    8078:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    807c:	00007684 	andeq	r7, r0, r4, lsl #13
    8080:	00204c00 	eoreq	r4, r0, r0, lsl #24
    8084:	00000800 	andeq	r0, r0, r0, lsl #16
    8088:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    808c:	07000000 	streq	r0, [r0, -r0]
    8090:	000018af 	andeq	r1, r0, pc, lsr #17
    8094:	76010f01 	strvc	r0, [r1], -r1, lsl #30
    8098:	00000000 	andeq	r0, r0, r0
    809c:	00188c08 	andseq	r8, r8, r8, lsl #24
    80a0:	015b0400 	cmpeq	fp, r0, lsl #8
    80a4:	00000076 	andeq	r0, r0, r6, ror r0
    80a8:	00000000 	andeq	r0, r0, r0
    80ac:	00000006 	andeq	r0, r0, r6
    80b0:	01189c01 	tsteq	r8, r1, lsl #24
    80b4:	af070000 	svcge	0x00070000
    80b8:	01000018 	tsteq	r0, r8, lsl r0
    80bc:	0076015a 	rsbseq	r0, r6, sl, asr r1
    80c0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    80c4:	000018a0 	andeq	r1, r0, r0, lsr #17
    80c8:	00016c04 	andeq	r6, r1, r4, lsl #24
    80cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    80d0:	01000000 	mrseq	r0, (UNDEF: 0)
    80d4:	18b70a9c 	ldmne	r7!, {r2, r3, r4, r7, r9, fp}
    80d8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    80dc:	00007601 	andeq	r7, r0, r1, lsl #12
    80e0:	00500100 	subseq	r0, r0, r0, lsl #2
    80e4:	00020700 	andeq	r0, r2, r0, lsl #14
    80e8:	68000400 	stmdavs	r0, {sl}
    80ec:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    80f0:	00165e01 	andseq	r5, r6, r1, lsl #28
    80f4:	19c70100 	stmibne	r7, {r8}^
    80f8:	17530000 	ldrbne	r0, [r3, -r0]
    80fc:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    8100:	00000000 	andeq	r0, r0, r0
    8104:	5bfe0000 	blpl	fff8810c <_estack+0xdff8310c>
    8108:	01020000 	mrseq	r0, (UNDEF: 2)
    810c:	00037406 	andeq	r7, r3, r6, lsl #8
    8110:	08010200 	stmdaeq	r1, {r9}
    8114:	00000372 	andeq	r0, r0, r2, ror r3
    8118:	d0050202 	andle	r0, r5, r2, lsl #4
    811c:	02000003 	andeq	r0, r0, #3
    8120:	02300702 	eorseq	r0, r0, #524288	; 0x80000
    8124:	04020000 	streq	r0, [r2], #-0
    8128:	0000a405 	andeq	sl, r0, r5, lsl #8
    812c:	17bf0300 	ldrne	r0, [pc, r0, lsl #6]!
    8130:	41030000 	mrsmi	r0, (UNDEF: 3)
    8134:	00000053 	andeq	r0, r0, r3, asr r0
    8138:	79070402 	stmdbvc	r7, {r1, sl}
    813c:	02000000 	andeq	r0, r0, #0
    8140:	009f0508 	addseq	r0, pc, r8, lsl #10
    8144:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8148:	00007407 	andeq	r7, r0, r7, lsl #8
    814c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8150:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8154:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    8158:	03000000 	movweq	r0, #0
    815c:	000017c1 	andeq	r1, r0, r1, asr #15
    8160:	00482004 	subeq	r2, r8, r4
    8164:	24050000 	strcs	r0, [r5], #-0
    8168:	0200001a 	andeq	r0, r0, #26
    816c:	06030330 			; <UNDEFINED> instruction: 0x06030330
    8170:	00001a8f 	andeq	r1, r0, pc, lsl #21
    8174:	0501fd01 	streq	pc, [r1, #-3329]	; 0xfffff2ff
    8178:	00001a37 	andeq	r1, r0, r7, lsr sl
    817c:	01018201 	tsteq	r1, r1, lsl #4
    8180:	00191207 	andseq	r1, r9, r7, lsl #4
    8184:	010d0100 	mrseq	r0, (UNDEF: 29)
    8188:	00002054 	andeq	r2, r0, r4, asr r0
    818c:	000000d4 	ldrdeq	r0, [r0], -r4
    8190:	016d9c01 	cmneq	sp, r1, lsl #24
    8194:	12080000 	andne	r0, r8, #0
    8198:	0100001a 	tsteq	r0, sl, lsl r0
    819c:	0076010d 	rsbseq	r0, r6, sp, lsl #2
    81a0:	2d710000 	ldclcs	0, cr0, [r1, #-0]
    81a4:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    81a8:	0100001a 	tsteq	r0, sl, lsl r0
    81ac:	0076010f 	rsbseq	r0, r6, pc, lsl #2
    81b0:	2d9d0000 	ldccs	0, cr0, [sp]
    81b4:	0b090000 	bleq	2481bc <__ccfg+0x228214>
    81b8:	01000019 	tsteq	r0, r9, lsl r0
    81bc:	00760110 	rsbseq	r0, r6, r0, lsl r1
    81c0:	2db00000 	ldccs	0, cr0, [r0]
    81c4:	810a0000 	mrshi	r0, (UNDEF: 10)
    81c8:	86000000 	strhi	r0, [r0], -r0
    81cc:	06000020 	streq	r0, [r0], -r0, lsr #32
    81d0:	01000000 	mrseq	r0, (UNDEF: 0)
    81d4:	ac0b0136 	stfges	f0, [fp], {54}	; 0x36
    81d8:	2a000020 	bcs	8260 <__exidx_end+0x5468>
    81dc:	1f000000 	svcne	0x00000000
    81e0:	09000001 	stmdbeq	r0, {r0}
    81e4:	00001b04 	andeq	r1, r0, r4, lsl #22
    81e8:	76015301 	strvc	r5, [r1], -r1, lsl #6
    81ec:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    81f0:	0900002d 	stmdbeq	r0, {r0, r2, r3, r5}
    81f4:	00001a60 	andeq	r1, r0, r0, ror #20
    81f8:	76015401 	strvc	r5, [r1], -r1, lsl #8
    81fc:	dc000000 	stcle	0, cr0, [r0], {-0}
    8200:	0000002d 	andeq	r0, r0, sp, lsr #32
    8204:	0020960c 	eoreq	r9, r0, ip, lsl #12
    8208:	0001c300 	andeq	ip, r1, r0, lsl #6
    820c:	00013300 	andeq	r3, r1, r0, lsl #6
    8210:	50010d00 	andpl	r0, r1, r0, lsl #26
    8214:	00007402 	andeq	r7, r0, r2, lsl #8
    8218:	00209e0c 	eoreq	r9, r0, ip, lsl #28
    821c:	0001d400 	andeq	sp, r1, r0, lsl #8
    8220:	00014d00 	andeq	r4, r1, r0, lsl #26
    8224:	51010d00 	tstpl	r1, r0, lsl #26
    8228:	0d007402 	cfstrseq	mvf7, [r0, #-8]
    822c:	75025001 	strvc	r5, [r2, #-1]
    8230:	dc0c0000 	stcle	0, cr0, [ip], {-0}
    8234:	ea000020 	b	82bc <__exidx_end+0x54c4>
    8238:	61000001 	tstvs	r0, r1
    823c:	0d000001 	stceq	0, cr0, [r0, #-4]
    8240:	74025001 	strvc	r5, [r2], #-1
    8244:	e60e0000 	str	r0, [lr], -r0
    8248:	0d000020 	stceq	0, cr0, [r0, #-128]	; 0xffffff80
    824c:	32015001 	andcc	r5, r1, #1
    8250:	4a0f0000 	bmi	3c8258 <__ccfg+0x3a82b0>
    8254:	0700001a 	smladeq	r0, sl, r0, r0
    8258:	0021285f 	eoreq	r2, r1, pc, asr r8
    825c:	0000a400 	andeq	sl, r0, r0, lsl #8
    8260:	c39c0100 	orrsgt	r0, ip, #0, 2
    8264:	10000001 	andne	r0, r0, r1
    8268:	00001a12 	andeq	r1, r0, r2, lsl sl
    826c:	00767201 	rsbseq	r7, r6, r1, lsl #4
    8270:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
    8274:	6b100000 	blvs	40827c <__ccfg+0x3e82d4>
    8278:	0100001a 	tsteq	r0, sl, lsl r0
    827c:	00007673 	andeq	r7, r0, r3, ror r6
    8280:	002e1a00 	eoreq	r1, lr, r0, lsl #20
    8284:	21381100 	teqcs	r8, r0, lsl #2
    8288:	01fb0000 	mvnseq	r0, r0
    828c:	4c110000 	ldcmi	0, cr0, [r1], {-0}
    8290:	03000021 	movweq	r0, #33	; 0x21
    8294:	12000002 	andne	r0, r0, #2
    8298:	0000215c 	andeq	r2, r0, ip, asr r1
    829c:	0000009b 	muleq	r0, fp, r0
    82a0:	0250010d 	subseq	r0, r0, #1073741827	; 0x40000003
    82a4:	00000074 	andeq	r0, r0, r4, ror r0
    82a8:	00193713 	andseq	r3, r9, r3, lsl r7
    82ac:	d46c0500 	strbtle	r0, [ip], #-1280	; 0xfffffb00
    82b0:	14000001 	strne	r0, [r0], #-1
    82b4:	00000076 	andeq	r0, r0, r6, ror r0
    82b8:	19671300 	stmdbne	r7!, {r8, r9, ip}^
    82bc:	73050000 	movwvc	r0, #20480	; 0x5000
    82c0:	000001ea 	andeq	r0, r0, sl, ror #3
    82c4:	00007614 	andeq	r7, r0, r4, lsl r6
    82c8:	00761400 	rsbseq	r1, r6, r0, lsl #8
    82cc:	13000000 	movwne	r0, #0
    82d0:	00001997 	muleq	r0, r7, r9
    82d4:	01fb7a05 	mvnseq	r7, r5, lsl #20
    82d8:	76140000 	ldrvc	r0, [r4], -r0
    82dc:	00000000 	andeq	r0, r0, r0
    82e0:	001ac715 	andseq	ip, sl, r5, lsl r7
    82e4:	02430600 	subeq	r0, r3, #0, 12
    82e8:	0019e416 	andseq	lr, r9, r6, lsl r4
    82ec:	00fd0500 	rscseq	r0, sp, r0, lsl #10
    82f0:	00000b17 	andeq	r0, r0, r7, lsl fp
    82f4:	27aa0004 	strcs	r0, [sl, r4]!
    82f8:	01040000 	mrseq	r0, (UNDEF: 4)
    82fc:	0000165e 	andeq	r1, r0, lr, asr r6
    8300:	001d5f01 	andseq	r5, sp, r1, lsl #30
    8304:	00175300 	andseq	r5, r7, r0, lsl #6
    8308:	000e5000 	andeq	r5, lr, r0
    830c:	00000000 	andeq	r0, r0, r0
    8310:	005deb00 	subseq	lr, sp, r0, lsl #22
    8314:	06010200 	streq	r0, [r1], -r0, lsl #4
    8318:	00000374 	andeq	r0, r0, r4, ror r3
    831c:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    8320:	02000003 	andeq	r0, r0, #3
    8324:	03d00502 	bicseq	r0, r0, #8388608	; 0x800000
    8328:	02020000 	andeq	r0, r2, #0
    832c:	00023007 	andeq	r3, r2, r7
    8330:	16540300 	ldrbne	r0, [r4], -r0, lsl #6
    8334:	3f040000 	svccc	0x00040000
    8338:	0000004c 	andeq	r0, r0, ip, asr #32
    833c:	a4050402 	strge	r0, [r5], #-1026	; 0xfffffbfe
    8340:	03000000 	movweq	r0, #0
    8344:	000017bf 			; <UNDEFINED> instruction: 0x000017bf
    8348:	005e4104 	subseq	r4, lr, r4, lsl #2
    834c:	04020000 	streq	r0, [r2], #-0
    8350:	00007907 	andeq	r7, r0, r7, lsl #18
    8354:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8358:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    835c:	74070802 	strvc	r0, [r7], #-2050	; 0xfffff7fe
    8360:	04000000 	streq	r0, [r0], #-0
    8364:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8368:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    836c:	00007e07 	andeq	r7, r0, r7, lsl #28
    8370:	16560300 	ldrbne	r0, [r6], -r0, lsl #6
    8374:	1f050000 	svcne	0x00050000
    8378:	00000041 	andeq	r0, r0, r1, asr #32
    837c:	0017c103 	andseq	ip, r7, r3, lsl #2
    8380:	53200500 	noppl	{0}	; <UNPREDICTABLE>
    8384:	05000000 	streq	r0, [r0, #-0]
    8388:	00001df2 	strdeq	r1, [r0], -r2
    838c:	0081e902 	addeq	lr, r1, r2, lsl #18
    8390:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    8394:	06000000 	streq	r0, [r0], -r0
    8398:	00001b42 	andeq	r1, r0, r2, asr #22
    839c:	008ce902 	addeq	lr, ip, r2, lsl #18
    83a0:	4b070000 	blmi	1c83a8 <__ccfg+0x1a8400>
    83a4:	0200001e 	andeq	r0, r0, #30
    83a8:	000081ef 	andeq	r8, r0, pc, ror #3
    83ac:	77080000 	strvc	r0, [r8, -r0]
    83b0:	0200001b 	andeq	r0, r0, #27
    83b4:	00008cab 	andeq	r8, r0, fp, lsr #25
    83b8:	00e70100 	rsceq	r0, r7, r0, lsl #2
    83bc:	12090000 	andne	r0, r9, #0
    83c0:	0100001a 	tsteq	r0, sl, lsl r0
    83c4:	008c0329 	addeq	r0, ip, r9, lsr #6
    83c8:	ec0a0000 	stc	0, cr0, [sl], {-0}
    83cc:	0100001e 	tsteq	r0, lr, lsl r0
    83d0:	008c032b 	addeq	r0, ip, fp, lsr #6
    83d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    83d8:	00001e2a 	andeq	r1, r0, sl, lsr #28
    83dc:	008c8102 	addeq	r8, ip, r2, lsl #2
    83e0:	10010000 	andne	r0, r1, r0
    83e4:	09000001 	stmdbeq	r0, {r0}
    83e8:	00001a12 	andeq	r1, r0, r2, lsl sl
    83ec:	8c033c01 	stchi	12, cr3, [r3], {1}
    83f0:	0a000000 	beq	83f8 <__exidx_end+0x5600>
    83f4:	00001e9b 	muleq	r0, fp, lr
    83f8:	8c033e01 	stchi	14, cr3, [r3], {1}
    83fc:	00000000 	andeq	r0, r0, r0
    8400:	001cd808 	andseq	sp, ip, r8, lsl #16
    8404:	8c880200 	sfmhi	f0, 4, [r8], {0}
    8408:	01000000 	mrseq	r0, (UNDEF: 0)
    840c:	00000139 	andeq	r0, r0, r9, lsr r1
    8410:	001a1209 	andseq	r1, sl, r9, lsl #4
    8414:	034f0100 	movteq	r0, #61696	; 0xf100
    8418:	0000008c 	andeq	r0, r0, ip, lsl #1
    841c:	001e0f0a 	andseq	r0, lr, sl, lsl #30
    8420:	03510100 	cmpeq	r1, #0, 2
    8424:	0000008c 	andeq	r0, r0, ip, lsl #1
    8428:	1c3c0800 	ldcne	8, cr0, [ip], #-0
    842c:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    8430:	0000008c 	andeq	r0, r0, ip, lsl #1
    8434:	00016e01 	andeq	r6, r1, r1, lsl #28
    8438:	1a120900 	bne	48a840 <__ccfg+0x46a898>
    843c:	62010000 	andvs	r0, r1, #0
    8440:	00008c03 	andeq	r8, r0, r3, lsl #24
    8444:	1bcc0a00 	blne	ff30ac4c <_estack+0xdf305c4c>
    8448:	64010000 	strvs	r0, [r1], #-0
    844c:	00008c03 	andeq	r8, r0, r3, lsl #24
    8450:	1d0d0a00 	vstrne	s0, [sp, #-0]
    8454:	65010000 	strvs	r0, [r1, #-0]
    8458:	00008c03 	andeq	r8, r0, r3, lsl #24
    845c:	3f080000 	svccc	0x00080000
    8460:	0200001d 	andeq	r0, r0, #29
    8464:	00008cb2 			; <UNDEFINED> instruction: 0x00008cb2
    8468:	01a30100 			; <UNDEFINED> instruction: 0x01a30100
    846c:	12090000 	andne	r0, r9, #0
    8470:	0100001a 	tsteq	r0, sl, lsl r0
    8474:	008c0394 	umulleq	r0, ip, r4, r3
    8478:	5b0a0000 	blpl	288480 <__ccfg+0x2684d8>
    847c:	0100001c 	tsteq	r0, ip, lsl r0
    8480:	008c0396 	umulleq	r0, ip, r6, r3
    8484:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    8488:	0100001d 	tsteq	r0, sp, lsl r0
    848c:	008c0397 	umulleq	r0, ip, r7, r3
    8490:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8494:	00001c0a 	andeq	r1, r0, sl, lsl #24
    8498:	008cb902 	addeq	fp, ip, r2, lsl #18
    849c:	cc010000 	stcgt	0, cr0, [r1], {-0}
    84a0:	09000001 	stmdbeq	r0, {r0}
    84a4:	00001a12 	andeq	r1, r0, r2, lsl sl
    84a8:	8c03b401 	cfstrshi	mvf11, [r3], {1}
    84ac:	0a000000 	beq	84b4 <__exidx_end+0x56bc>
    84b0:	00001d17 	andeq	r1, r0, r7, lsl sp
    84b4:	8c03b601 	stchi	6, cr11, [r3], {1}
    84b8:	00000000 	andeq	r0, r0, r0
    84bc:	001db508 	andseq	fp, sp, r8, lsl #10
    84c0:	8cdf0200 	lfmhi	f0, 2, [pc], {0}
    84c4:	01000000 	mrseq	r0, (UNDEF: 0)
    84c8:	000001f5 	strdeq	r0, [r0], -r5
    84cc:	001a1209 	andseq	r1, sl, r9, lsl #4
    84d0:	03c80100 	biceq	r0, r8, #0, 2
    84d4:	0000008c 	andeq	r0, r0, ip, lsl #1
    84d8:	001f0c0a 	andseq	r0, pc, sl, lsl #24
    84dc:	03ca0100 	biceq	r0, sl, #0, 2
    84e0:	0000008c 	andeq	r0, r0, ip, lsl #1
    84e4:	1e750800 	cdpne	8, 7, cr0, cr5, cr0, {0}
    84e8:	d7020000 	strle	r0, [r2, -r0]
    84ec:	0000008c 	andeq	r0, r0, ip, lsl #1
    84f0:	00021201 	andeq	r1, r2, r1, lsl #4
    84f4:	1fbf0a00 	svcne	0x00bf0a00
    84f8:	83010000 	movwhi	r0, #4096	; 0x1000
    84fc:	00008c02 	andeq	r8, r0, r2, lsl #24
    8500:	190b0000 	stmdbne	fp, {}	; <UNPREDICTABLE>
    8504:	03000008 	movweq	r0, #8
    8508:	9c0c03c4 	stcls	3, cr0, [ip], {196}	; 0xc4
    850c:	0200001f 	andeq	r0, r0, #31
    8510:	21cc010f 	biccs	r0, ip, pc, lsl #2
    8514:	007c0000 	rsbseq	r0, ip, r0
    8518:	9c010000 	stcls	0, cr0, [r1], {-0}
    851c:	000002c4 	andeq	r0, r0, r4, asr #5
    8520:	001a7e0d 	andseq	r7, sl, sp, lsl #28
    8524:	8c7f0100 	ldfhie	f0, [pc], #-0	; 852c <__exidx_end+0x5734>
    8528:	2d000000 	stccs	0, cr0, [r0, #-0]
    852c:	0700002e 	streq	r0, [r0, -lr, lsr #32]
    8530:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
    8534:	008c8101 	addeq	r8, ip, r1, lsl #2
    8538:	340e0000 	strcc	r0, [lr], #-0
    853c:	0100001d 	tsteq	r0, sp, lsl r0
    8540:	00008182 	andeq	r8, r0, r2, lsl #3
    8544:	0f520100 	svceq	0x00520100
    8548:	00001ba7 	andeq	r1, r0, r7, lsr #23
    854c:	00818301 	addeq	r8, r1, r1, lsl #6
    8550:	2e4e0000 	cdpcs	0, 4, cr0, cr14, cr0, {0}
    8554:	750f0000 	strvc	r0, [pc, #-0]	; 855c <__exidx_end+0x5764>
    8558:	0100001c 	tsteq	r0, ip, lsl r0
    855c:	00008184 	andeq	r8, r0, r4, lsl #3
    8560:	002e6100 	eoreq	r6, lr, r0, lsl #2
    8564:	00971000 	addseq	r1, r7, r0
    8568:	21da0000 	bicscs	r0, sl, r0
    856c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
    8570:	97010000 	strls	r0, [r1, -r0]
    8574:	0000029b 	muleq	r0, fp, r2
    8578:	0000a711 	andeq	sl, r0, r1, lsl r7
    857c:	0e201200 	cdpeq	2, 2, cr1, cr0, cr0, {0}
    8580:	b2130000 	andslt	r0, r3, #0
    8584:	01000000 	mrseq	r0, (UNDEF: 0)
    8588:	14000052 	strne	r0, [r0], #-82	; 0xffffffae
    858c:	00000097 	muleq	r0, r7, r0
    8590:	000021e4 	andeq	r2, r0, r4, ror #3
    8594:	00000006 	andeq	r0, r0, r6
    8598:	a7119801 	ldrge	r9, [r1, -r1, lsl #16]
    859c:	15000000 	strne	r0, [r0, #-0]
    85a0:	000021e4 	andeq	r2, r0, r4, ror #3
    85a4:	00000006 	andeq	r0, r0, r6
    85a8:	0000b216 	andeq	fp, r0, r6, lsl r2
    85ac:	002e8f00 	eoreq	r8, lr, r0, lsl #30
    85b0:	00000000 	andeq	r0, r0, r0
    85b4:	00193717 	andseq	r3, r9, r7, lsl r7
    85b8:	486c0200 	stmdami	ip!, {r9}^
    85bc:	ac000022 	stcge	0, cr0, [r0], {34}	; 0x22
    85c0:	01000000 	mrseq	r0, (UNDEF: 0)
    85c4:	0003439c 	muleq	r3, ip, r3
    85c8:	1a7e0d00 	bne	1f8b9d0 <__ccfg+0x1f6ba28>
    85cc:	bf010000 	svclt	0x00010000
    85d0:	0000008c 	andeq	r0, r0, ip, lsl #1
    85d4:	00002ea2 	andeq	r2, r0, r2, lsr #29
    85d8:	001ece0f 	andseq	ip, lr, pc, lsl #28
    85dc:	81c10100 	bichi	r0, r1, r0, lsl #2
    85e0:	d6000000 	strle	r0, [r0], -r0
    85e4:	0f00002e 	svceq	0x0000002e
    85e8:	00001fe4 	andeq	r1, r0, r4, ror #31
    85ec:	0081c201 	addeq	ip, r1, r1, lsl #4
    85f0:	2eff0000 	cdpcs	0, 15, cr0, cr15, cr0, {0}
    85f4:	97180000 	ldrls	r0, [r8, -r0]
    85f8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    85fc:	06000022 	streq	r0, [r0], -r2, lsr #32
    8600:	01000000 	mrseq	r0, (UNDEF: 0)
    8604:	000332ee 	andeq	r3, r3, lr, ror #5
    8608:	00a71100 	adceq	r1, r7, r0, lsl #2
    860c:	7e150000 	cdpvc	0, 1, cr0, cr5, cr0, {0}
    8610:	06000022 	streq	r0, [r0], -r2, lsr #32
    8614:	16000000 	strne	r0, [r0], -r0
    8618:	000000b2 	strheq	r0, [r0], -r2
    861c:	00002f26 	andeq	r2, r0, r6, lsr #30
    8620:	6c190000 	ldcvs	0, cr0, [r9], {-0}
    8624:	1a000022 	bne	86b4 <__exidx_end+0x58bc>
    8628:	1a000002 	bne	8638 <__exidx_end+0x5840>
    862c:	74025001 	strvc	r5, [r2], #-1
    8630:	1b000000 	blne	8638 <__exidx_end+0x5840>
    8634:	00001b52 	andeq	r1, r0, r2, asr fp
    8638:	008ca402 	addeq	sl, ip, r2, lsl #8
    863c:	22f40000 	rscscs	r0, r4, #0
    8640:	005c0000 	subseq	r0, ip, r0
    8644:	9c010000 	stcls	0, cr0, [r1], {-0}
    8648:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    864c:	001a7e1c 	andseq	r7, sl, ip, lsl lr
    8650:	021f0100 	andseq	r0, pc, #0, 2
    8654:	0000008c 	andeq	r0, r0, ip, lsl #1
    8658:	00002f39 	andeq	r2, r0, r9, lsr pc
    865c:	001e661d 	andseq	r6, lr, sp, lsl r6
    8660:	02210100 	eoreq	r0, r1, #0, 2
    8664:	0000008c 	andeq	r0, r0, ip, lsl #1
    8668:	00002f5a 	andeq	r2, r0, sl, asr pc
    866c:	001f801d 	andseq	r8, pc, sp, lsl r0	; <UNPREDICTABLE>
    8670:	02220100 	eoreq	r0, r2, #0, 2
    8674:	0000008c 	andeq	r0, r0, ip, lsl #1
    8678:	00002f6d 	andeq	r2, r0, sp, ror #30
    867c:	001f8e1d 	andseq	r8, pc, sp, lsl lr	; <UNPREDICTABLE>
    8680:	02230100 	eoreq	r0, r3, #0, 2
    8684:	0000008c 	andeq	r0, r0, ip, lsl #1
    8688:	00002fbb 			; <UNDEFINED> instruction: 0x00002fbb
    868c:	001fcd1d 	andseq	ip, pc, sp, lsl sp	; <UNPREDICTABLE>
    8690:	02240100 	eoreq	r0, r4, #0, 2
    8694:	00000081 	andeq	r0, r0, r1, lsl #1
    8698:	00003023 	andeq	r3, r0, r3, lsr #32
    869c:	001fbf1d 	andseq	fp, pc, sp, lsl pc	; <UNPREDICTABLE>
    86a0:	02250100 	eoreq	r0, r5, #0, 2
    86a4:	0000008c 	andeq	r0, r0, ip, lsl #1
    86a8:	00003042 	andeq	r3, r0, r2, asr #32
    86ac:	1d8a1b00 	vstrne	d1, [sl]
    86b0:	c1020000 	mrsgt	r0, (UNDEF: 2)
    86b4:	0000008c 	andeq	r0, r0, ip, lsl #1
    86b8:	00002350 	andeq	r2, r0, r0, asr r3
    86bc:	00000018 	andeq	r0, r0, r8, lsl r0
    86c0:	03e79c01 	mvneq	r9, #256	; 0x100
    86c4:	bf1d0000 	svclt	0x001d0000
    86c8:	0100001f 	tsteq	r0, pc, lsl r0
    86cc:	008c0267 	addeq	r0, ip, r7, ror #4
    86d0:	30670000 	rsbcc	r0, r7, r0
    86d4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    86d8:	000001f5 	strdeq	r0, [r0], -r5
    86dc:	00000000 	andeq	r0, r0, r0
    86e0:	00000010 	andeq	r0, r0, r0, lsl r0
    86e4:	04049c01 	streq	r9, [r4], #-3073	; 0xfffff3ff
    86e8:	05160000 	ldreq	r0, [r6, #-0]
    86ec:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    86f0:	00000030 	andeq	r0, r0, r0, lsr r0
    86f4:	001cb81b 	andseq	fp, ip, fp, lsl r8
    86f8:	8c9d0200 	lfmhi	f0, 4, [sp], {0}
    86fc:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    8700:	10000023 	andne	r0, r0, r3, lsr #32
    8704:	01000000 	mrseq	r0, (UNDEF: 0)
    8708:	00043e9c 	muleq	r4, ip, lr
    870c:	1fbf1d00 	svcne	0x00bf1d00
    8710:	97010000 	strls	r0, [r1, -r0]
    8714:	00008c02 	andeq	r8, r0, r2, lsl #24
    8718:	0030a700 	eorseq	sl, r0, r0, lsl #14
    871c:	1e661d00 	cdpne	13, 6, cr1, cr6, cr0, {0}
    8720:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    8724:	00008c02 	andeq	r8, r0, r2, lsl #24
    8728:	0030c800 	eorseq	ip, r0, r0, lsl #16
    872c:	981b0000 	ldmdals	fp, {}	; <UNPREDICTABLE>
    8730:	0200001c 	andeq	r0, r0, #28
    8734:	00008c96 	muleq	r0, r6, ip
    8738:	00237800 	eoreq	r7, r3, r0, lsl #16
    873c:	00001400 	andeq	r1, r0, r0, lsl #8
    8740:	789c0100 	ldmvc	ip, {r8}
    8744:	1d000004 	stcne	0, cr0, [r0, #-16]
    8748:	00001fbf 			; <UNDEFINED> instruction: 0x00001fbf
    874c:	8c02ba01 			; <UNDEFINED> instruction: 0x8c02ba01
    8750:	db000000 	blle	8758 <__exidx_end+0x5960>
    8754:	1d000030 	stcne	0, cr0, [r0, #-192]	; 0xffffff40
    8758:	00001e66 	andeq	r1, r0, r6, ror #28
    875c:	8c02bb01 			; <UNDEFINED> instruction: 0x8c02bb01
    8760:	fc000000 	stc2	0, cr0, [r0], {-0}
    8764:	00000030 	andeq	r0, r0, r0, lsr r0
    8768:	001f5f1b 	andseq	r5, pc, fp, lsl pc	; <UNPREDICTABLE>
    876c:	8c8f0200 	sfmhi	f0, 4, [pc], {0}
    8770:	8c000000 	stchi	0, cr0, [r0], {-0}
    8774:	64000023 	strvs	r0, [r0], #-35	; 0xffffffdd
    8778:	01000000 	mrseq	r0, (UNDEF: 0)
    877c:	0004fe9c 	muleq	r4, ip, lr
    8780:	1a121c00 	bne	48f788 <__ccfg+0x46f7e0>
    8784:	db010000 	blle	4878c <__ccfg+0x287e4>
    8788:	00008c02 	andeq	r8, r0, r2, lsl #24
    878c:	00310f00 	eorseq	r0, r1, r0, lsl #30
    8790:	1fbf1d00 	svcne	0x00bf1d00
    8794:	dd010000 	stcle	0, cr0, [r1, #-0]
    8798:	00008c02 	andeq	r8, r0, r2, lsl #24
    879c:	00313000 	eorseq	r3, r1, r0
    87a0:	1e661d00 	cdpne	13, 6, cr1, cr6, cr0, {0}
    87a4:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    87a8:	00008c02 	andeq	r8, r0, r2, lsl #24
    87ac:	00316400 	eorseq	r6, r1, r0, lsl #8
    87b0:	1bc01d00 	blne	ff00fbb8 <_estack+0xdf00abb8>
    87b4:	df010000 	svcle	0x00010000
    87b8:	00008c02 	andeq	r8, r0, r2, lsl #24
    87bc:	00317700 	eorseq	r7, r1, r0, lsl #14
    87c0:	1f371d00 	svcne	0x00371d00
    87c4:	e0010000 	and	r0, r1, r0
    87c8:	00008c02 	andeq	r8, r0, r2, lsl #24
    87cc:	0031a500 	eorseq	sl, r1, r0, lsl #10
    87d0:	1e5c0a00 	vnmlsne.f32	s1, s24, s0
    87d4:	e1010000 	mrs	r0, (UNDEF: 1)
    87d8:	00008c02 	andeq	r8, r0, r2, lsl #24
    87dc:	1c301d00 	ldcne	13, cr1, [r0], #-0
    87e0:	e2010000 	and	r0, r1, #0
    87e4:	00008102 	andeq	r8, r0, r2, lsl #2
    87e8:	0031d300 	eorseq	sp, r1, r0, lsl #6
    87ec:	be1e0000 	cdplt	0, 1, cr0, cr14, cr0, {0}
    87f0:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    87f4:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    87f8:	01000000 	mrseq	r0, (UNDEF: 0)
    87fc:	00054a9c 	muleq	r5, ip, sl
    8800:	00ce1f00 	sbceq	r1, lr, r0, lsl #30
    8804:	324e0000 	subcc	r0, lr, #0
    8808:	da160000 	ble	588810 <__ccfg+0x568868>
    880c:	6f000000 	svcvs	0x00000000
    8810:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8814:	000023f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8818:	0000000a 	andeq	r0, r0, sl
    881c:	0000ce1f 	andeq	ip, r0, pc, lsl lr
    8820:	00328e00 	eorseq	r8, r2, r0, lsl #28
    8824:	23f21500 	mvnscs	r1, #0, 10
    8828:	000a0000 	andeq	r0, sl, r0
    882c:	da160000 	ble	588834 <__ccfg+0x56888c>
    8830:	af000000 	svcge	0x00000000
    8834:	00000032 	andeq	r0, r0, r2, lsr r0
    8838:	e71e0000 	ldr	r0, [lr, -r0]
    883c:	04000000 	streq	r0, [r0], #-0
    8840:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    8844:	01000000 	mrseq	r0, (UNDEF: 0)
    8848:	0005969c 	muleq	r5, ip, r6
    884c:	00f71f00 	rscseq	r1, r7, r0, lsl #30
    8850:	32c20000 	sbccc	r0, r2, #0
    8854:	03160000 	tsteq	r6, #0
    8858:	e3000001 	movw	r0, #1
    885c:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8860:	00002406 	andeq	r2, r0, r6, lsl #8
    8864:	0000000a 	andeq	r0, r0, sl
    8868:	0000f71f 	andeq	pc, r0, pc, lsl r7	; <UNPREDICTABLE>
    886c:	00330200 	eorseq	r0, r3, r0, lsl #4
    8870:	24061500 	strcs	r1, [r6], #-1280	; 0xfffffb00
    8874:	000a0000 	andeq	r0, sl, r0
    8878:	03160000 	tsteq	r6, #0
    887c:	23000001 	movwcs	r0, #1
    8880:	00000033 	andeq	r0, r0, r3, lsr r0
    8884:	101e0000 	andsne	r0, lr, r0
    8888:	18000001 	stmdane	r0, {r0}
    888c:	14000024 	strne	r0, [r0], #-36	; 0xffffffdc
    8890:	01000000 	mrseq	r0, (UNDEF: 0)
    8894:	0005e29c 	muleq	r5, ip, r2
    8898:	01201f00 			; <UNDEFINED> instruction: 0x01201f00
    889c:	33360000 	teqcc	r6, #0
    88a0:	2c160000 	ldccs	0, cr0, [r6], {-0}
    88a4:	57000001 	strpl	r0, [r0, -r1]
    88a8:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    88ac:	0000241a 	andeq	r2, r0, sl, lsl r4
    88b0:	0000000a 	andeq	r0, r0, sl
    88b4:	0001201f 	andeq	r2, r1, pc, lsl r0
    88b8:	00337600 	eorseq	r7, r3, r0, lsl #12
    88bc:	241a1500 	ldrcs	r1, [sl], #-1280	; 0xfffffb00
    88c0:	000a0000 	andeq	r0, sl, r0
    88c4:	2c160000 	ldccs	0, cr0, [r6], {-0}
    88c8:	97000001 	strls	r0, [r0, -r1]
    88cc:	00000033 	andeq	r0, r0, r3, lsr r0
    88d0:	391e0000 	ldmdbcc	lr, {}	; <UNPREDICTABLE>
    88d4:	2c000001 	stccs	0, cr0, [r0], {1}
    88d8:	28000024 	stmdacs	r0, {r2, r5}
    88dc:	01000000 	mrseq	r0, (UNDEF: 0)
    88e0:	00063c9c 	muleq	r6, ip, ip
    88e4:	01491f00 	cmpeq	r9, r0, lsl #30
    88e8:	33aa0000 			; <UNDEFINED> instruction: 0x33aa0000
    88ec:	55160000 	ldrpl	r0, [r6, #-0]
    88f0:	cb000001 	blgt	88fc <__exidx_end+0x5b04>
    88f4:	20000033 	andcs	r0, r0, r3, lsr r0
    88f8:	00000161 	andeq	r0, r0, r1, ror #2
    88fc:	00242e15 	eoreq	r2, r4, r5, lsl lr
    8900:	00001c00 	andeq	r1, r0, r0, lsl #24
    8904:	01491f00 	cmpeq	r9, r0, lsl #30
    8908:	33ea0000 	mvncc	r0, #0
    890c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
    8910:	1c000024 	stcne	0, cr0, [r0], {36}	; 0x24
    8914:	16000000 	strne	r0, [r0], -r0
    8918:	00000155 	andeq	r0, r0, r5, asr r1
    891c:	0000340b 	andeq	r3, r0, fp, lsl #8
    8920:	00016116 	andeq	r6, r1, r6, lsl r1
    8924:	00343800 	eorseq	r3, r4, r0, lsl #16
    8928:	00000000 	andeq	r0, r0, r0
    892c:	001be51b 	andseq	lr, fp, fp, lsl r5
    8930:	8ccf0200 	sfmhi	f0, 2, [pc], {0}
    8934:	54000000 	strpl	r0, [r0], #-0
    8938:	10000024 	andne	r0, r0, r4, lsr #32
    893c:	01000000 	mrseq	r0, (UNDEF: 0)
    8940:	0006669c 	muleq	r6, ip, r6
    8944:	1c7f1d00 	ldclne	13, cr1, [pc], #-0	; 894c <__exidx_end+0x5b54>
    8948:	84010000 	strhi	r0, [r1], #-0
    894c:	00008c03 	andeq	r8, r0, r3, lsl #24
    8950:	00344b00 	eorseq	r4, r4, r0, lsl #22
    8954:	6e1e0000 	cdpvs	0, 1, cr0, cr14, cr0, {0}
    8958:	64000001 	strvs	r0, [r0], #-1
    895c:	2c000024 	stccs	0, cr0, [r0], {36}	; 0x24
    8960:	01000000 	mrseq	r0, (UNDEF: 0)
    8964:	0006c09c 	muleq	r6, ip, r0
    8968:	017e1f00 	cmneq	lr, r0, lsl #30
    896c:	34660000 	strbtcc	r0, [r6], #-0
    8970:	8a160000 	bhi	588978 <__ccfg+0x5689d0>
    8974:	87000001 	strhi	r0, [r0, -r1]
    8978:	20000034 	andcs	r0, r0, r4, lsr r0
    897c:	00000196 	muleq	r0, r6, r1
    8980:	00246615 	eoreq	r6, r4, r5, lsl r6
    8984:	00001e00 	andeq	r1, r0, r0, lsl #28
    8988:	017e1f00 	cmneq	lr, r0, lsl #30
    898c:	34aa0000 	strtcc	r0, [sl], #0
    8990:	66150000 	ldrvs	r0, [r5], -r0
    8994:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    8998:	16000000 	strne	r0, [r0], -r0
    899c:	0000018a 	andeq	r0, r0, sl, lsl #3
    89a0:	000034cb 	andeq	r3, r0, fp, asr #9
    89a4:	00019616 	andeq	r9, r1, r6, lsl r6
    89a8:	0034f800 	eorseq	pc, r4, r0, lsl #16
    89ac:	00000000 	andeq	r0, r0, r0
    89b0:	0001a31e 	andeq	sl, r1, lr, lsl r3
    89b4:	00249000 	eoreq	r9, r4, r0
    89b8:	00001400 	andeq	r1, r0, r0, lsl #8
    89bc:	0c9c0100 	ldfeqs	f0, [ip], {0}
    89c0:	1f000007 	svcne	0x00000007
    89c4:	000001b3 			; <UNDEFINED> instruction: 0x000001b3
    89c8:	0000350b 	andeq	r3, r0, fp, lsl #10
    89cc:	0001bf16 	andeq	fp, r1, r6, lsl pc
    89d0:	00352c00 	eorseq	r2, r5, r0, lsl #24
    89d4:	24921500 	ldrcs	r1, [r2], #1280	; 0x500
    89d8:	000a0000 	andeq	r0, sl, r0
    89dc:	b31f0000 	tstlt	pc, #0
    89e0:	4b000001 	blmi	89ec <__exidx_end+0x5bf4>
    89e4:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    89e8:	00002492 	muleq	r0, r2, r4
    89ec:	0000000a 	andeq	r0, r0, sl
    89f0:	0001bf16 	andeq	fp, r1, r6, lsl pc
    89f4:	00356c00 	eorseq	r6, r5, r0, lsl #24
    89f8:	00000000 	andeq	r0, r0, r0
    89fc:	0001cc1e 	andeq	ip, r1, lr, lsl ip
    8a00:	0024a400 	eoreq	sl, r4, r0, lsl #8
    8a04:	00001400 	andeq	r1, r0, r0, lsl #8
    8a08:	589c0100 	ldmpl	ip, {r8}
    8a0c:	1f000007 	svcne	0x00000007
    8a10:	000001dc 	ldrdeq	r0, [r0], -ip
    8a14:	0000357f 	andeq	r3, r0, pc, ror r5
    8a18:	0001e816 	andeq	lr, r1, r6, lsl r8
    8a1c:	0035a000 	eorseq	sl, r5, r0
    8a20:	24a61500 	strtcs	r1, [r6], #1280	; 0x500
    8a24:	000a0000 	andeq	r0, sl, r0
    8a28:	dc1f0000 	ldcle	0, cr0, [pc], {-0}
    8a2c:	bf000001 	svclt	0x00000001
    8a30:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8a34:	000024a6 	andeq	r2, r0, r6, lsr #9
    8a38:	0000000a 	andeq	r0, r0, sl
    8a3c:	0001e816 	andeq	lr, r1, r6, lsl r8
    8a40:	0035e000 	eorseq	lr, r5, r0
    8a44:	00000000 	andeq	r0, r0, r0
    8a48:	00196717 	andseq	r6, r9, r7, lsl r7
    8a4c:	b8730200 	ldmdalt	r3!, {r9}^
    8a50:	10000024 	andne	r0, r0, r4, lsr #32
    8a54:	01000001 	tsteq	r0, r1
    8a58:	0009639c 	muleq	r9, ip, r3
    8a5c:	1a121c00 	bne	48fa64 <__ccfg+0x46fabc>
    8a60:	27010000 	strcs	r0, [r1, -r0]
    8a64:	00008c01 	andeq	r8, r0, r1, lsl #24
    8a68:	0035f300 	eorseq	pc, r5, r0, lsl #6
    8a6c:	1a7e1c00 	bne	1f8fa74 <__ccfg+0x1f6facc>
    8a70:	27010000 	strcs	r0, [r1, -r0]
    8a74:	00008c01 	andeq	r8, r0, r1, lsl #24
    8a78:	00361f00 	eorseq	r1, r6, r0, lsl #30
    8a7c:	1de91d00 	stclne	13, cr1, [r9]
    8a80:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    8a84:	00008c01 	andeq	r8, r0, r1, lsl #24
    8a88:	00364000 	eorseq	r4, r6, r0
    8a8c:	01f52100 	mvnseq	r2, r0, lsl #2
    8a90:	24e80000 	strbtcs	r0, [r8], #0
    8a94:	0e380000 	cdpeq	0, 3, cr0, cr8, cr0, {0}
    8a98:	40010000 	andmi	r0, r1, r0
    8a9c:	0007c101 	andeq	ip, r7, r1, lsl #2
    8aa0:	0e381200 	cdpeq	2, 3, cr1, cr8, cr0, {0}
    8aa4:	05160000 	ldreq	r0, [r6, #-0]
    8aa8:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    8aac:	00000037 	andeq	r0, r0, r7, lsr r0
    8ab0:	24c22200 	strbcs	r2, [r2], #512	; 0x200
    8ab4:	03430000 	movteq	r0, #12288	; 0x3000
    8ab8:	07d60000 	ldrbeq	r0, [r6, r0]
    8abc:	011a0000 	tsteq	sl, r0
    8ac0:	01f30350 	mvnseq	r0, r0, asr r3
    8ac4:	ce220051 	mcrgt	0, 1, r0, cr2, cr1, {2}
    8ac8:	d6000024 	strle	r0, [r0], -r4, lsr #32
    8acc:	ef00000a 	svc	0x0000000a
    8ad0:	1a000007 	bne	8af4 <__exidx_end+0x5cfc>
    8ad4:	48015101 	stmdami	r1, {r0, r8, ip, lr}
    8ad8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8adc:	23000074 	movwcs	r0, #116	; 0x74
    8ae0:	000024d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8ae4:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
    8ae8:	0024e824 	eoreq	lr, r4, r4, lsr #16
    8aec:	00760200 	rsbseq	r0, r6, r0, lsl #4
    8af0:	0000081d 	andeq	r0, r0, sp, lsl r8
    8af4:	0153011a 	cmpeq	r3, sl, lsl r1
    8af8:	52011a30 	andpl	r1, r1, #48, 20	; 0x30000
    8afc:	03ff0a03 	mvnseq	r0, #12288	; 0x3000
    8b00:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8b04:	011a2c08 	tsteq	sl, r8, lsl #24
    8b08:	00740250 	rsbseq	r0, r4, r0, asr r2
    8b0c:	24f82200 	ldrbtcs	r2, [r8], #512	; 0x200
    8b10:	0ad60000 	beq	ff588b18 <_estack+0xdf583b18>
    8b14:	08360000 	ldmdaeq	r6!, {}	; <UNPREDICTABLE>
    8b18:	011a0000 	tsteq	sl, r0
    8b1c:	1a4c0151 	bne	1309068 <__ccfg+0x12e90c0>
    8b20:	74025001 	strvc	r5, [r2], #-1
    8b24:	fc230000 	stc2	0, cr0, [r3], #-0
    8b28:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    8b2c:	22000004 	andcs	r0, r0, #4
    8b30:	00002506 	andeq	r2, r0, r6, lsl #10
    8b34:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b38:	00000858 	andeq	r0, r0, r8, asr r8
    8b3c:	0151011a 	cmpeq	r1, sl, lsl r1
    8b40:	50011a44 	andpl	r1, r1, r4, asr #20
    8b44:	00007402 	andeq	r7, r0, r2, lsl #8
    8b48:	00250a23 	eoreq	r0, r5, r3, lsr #20
    8b4c:	00043e00 	andeq	r3, r4, r0, lsl #28
    8b50:	25142200 	ldrcs	r2, [r4, #-512]	; 0xfffffe00
    8b54:	0ad60000 	beq	ff588b5c <_estack+0xdf583b5c>
    8b58:	087a0000 	ldmdaeq	sl!, {}^	; <UNPREDICTABLE>
    8b5c:	011a0000 	tsteq	sl, r0
    8b60:	1a400151 	bne	10090ac <__ccfg+0xfe9104>
    8b64:	74025001 	strvc	r5, [r2], #-1
    8b68:	1a220000 	bne	888b70 <__ccfg+0x868bc8>
    8b6c:	78000025 	stmdavc	r0, {r0, r2, r5}
    8b70:	8e000004 	cdphi	0, 0, cr0, cr0, cr4, {0}
    8b74:	1a000008 	bne	8b9c <__exidx_end+0x5da4>
    8b78:	75025001 	strvc	r5, [r2, #-1]
    8b7c:	24220000 	strtcs	r0, [r2], #-0
    8b80:	d6000025 	strle	r0, [r0], -r5, lsr #32
    8b84:	a700000a 	strge	r0, [r0, -sl]
    8b88:	1a000008 	bne	8bb0 <__exidx_end+0x5db8>
    8b8c:	3c015101 	stfccs	f5, [r1], {1}
    8b90:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8b94:	22000074 	andcs	r0, r0, #116	; 0x74
    8b98:	0000252a 	andeq	r2, r0, sl, lsr #10
    8b9c:	000000e7 	andeq	r0, r0, r7, ror #1
    8ba0:	000008bb 			; <UNDEFINED> instruction: 0x000008bb
    8ba4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8ba8:	22000075 	andcs	r0, r0, #117	; 0x75
    8bac:	0000253c 	andeq	r2, r0, ip, lsr r5
    8bb0:	00000110 	andeq	r0, r0, r0, lsl r1
    8bb4:	000008cf 	andeq	r0, r0, pc, asr #17
    8bb8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bbc:	22000075 	andcs	r0, r0, #117	; 0x75
    8bc0:	0000254a 	andeq	r2, r0, sl, asr #10
    8bc4:	00000139 	andeq	r0, r0, r9, lsr r1
    8bc8:	000008e3 	andeq	r0, r0, r3, ror #17
    8bcc:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bd0:	22000075 	andcs	r0, r0, #117	; 0x75
    8bd4:	00002554 	andeq	r2, r0, r4, asr r5
    8bd8:	00000ad6 	ldrdeq	r0, [r0], -r6
    8bdc:	000008fd 	strdeq	r0, [r0], -sp
    8be0:	0251011a 	subseq	r0, r1, #-2147483642	; 0x80000006
    8be4:	011a2808 	tsteq	sl, r8, lsl #16
    8be8:	00740250 	rsbseq	r0, r4, r0, asr r2
    8bec:	255a2200 	ldrbcs	r2, [sl, #-512]	; 0xfffffe00
    8bf0:	00be0000 	adcseq	r0, lr, r0
    8bf4:	09110000 	ldmdbeq	r1, {}	; <UNPREDICTABLE>
    8bf8:	011a0000 	tsteq	sl, r0
    8bfc:	00750250 	rsbseq	r0, r5, r0, asr r2
    8c00:	256c2200 	strbcs	r2, [ip, #-512]!	; 0xfffffe00
    8c04:	01a30000 			; <UNDEFINED> instruction: 0x01a30000
    8c08:	09250000 	stmdbeq	r5!, {}	; <UNPREDICTABLE>
    8c0c:	011a0000 	tsteq	sl, r0
    8c10:	00750250 	rsbseq	r0, r5, r0, asr r2
    8c14:	257e2200 	ldrbcs	r2, [lr, #-512]!	; 0xfffffe00
    8c18:	01cc0000 	biceq	r0, ip, r0
    8c1c:	09390000 	ldmdbeq	r9!, {}	; <UNPREDICTABLE>
    8c20:	011a0000 	tsteq	sl, r0
    8c24:	00750250 	rsbseq	r0, r5, r0, asr r2
    8c28:	25922200 	ldrcs	r2, [r2, #512]	; 0x200
    8c2c:	016e0000 	cmneq	lr, r0
    8c30:	094d0000 	stmdbeq	sp, {}^	; <UNPREDICTABLE>
    8c34:	011a0000 	tsteq	sl, r0
    8c38:	00750250 	rsbseq	r0, r5, r0, asr r2
    8c3c:	259c1900 	ldrcs	r1, [ip, #2304]	; 0x900
    8c40:	0ad60000 	beq	ff588c48 <_estack+0xdf583c48>
    8c44:	011a0000 	tsteq	sl, r0
    8c48:	1a380151 	bne	e09194 <__ccfg+0xde91ec>
    8c4c:	74025001 	strvc	r5, [r2], #-1
    8c50:	17000000 	strne	r0, [r0, -r0]
    8c54:	000019e4 	andeq	r1, r0, r4, ror #19
    8c58:	25c8fd02 	strbcs	pc, [r8, #3330]	; 0xd02	; <UNPREDICTABLE>
    8c5c:	00640000 	rsbeq	r0, r4, r0
    8c60:	9c010000 	stcls	0, cr0, [r1], {-0}
    8c64:	00000989 	andeq	r0, r0, r9, lsl #19
    8c68:	001bb31d 	andseq	fp, fp, sp, lsl r3
    8c6c:	03eb0100 	mvneq	r0, #0, 2
    8c70:	0000008c 	andeq	r0, r0, ip, lsl #1
    8c74:	00003727 	andeq	r3, r0, r7, lsr #14
    8c78:	1f410c00 	svcne	0x00410c00
    8c7c:	06020000 	streq	r0, [r2], -r0
    8c80:	00262c01 	eoreq	r2, r6, r1, lsl #24
    8c84:	00002800 	andeq	r2, r0, r0, lsl #16
    8c88:	b09c0100 	addslt	r0, ip, r0, lsl #2
    8c8c:	1c000009 	stcne	0, cr0, [r0], {9}
    8c90:	00001d80 	andeq	r1, r0, r0, lsl #27
    8c94:	8c041301 	stchi	3, cr1, [r4], {1}
    8c98:	42000000 	andmi	r0, r0, #0
    8c9c:	00000037 	andeq	r0, r0, r7, lsr r0
    8ca0:	00199717 	andseq	r9, r9, r7, lsl r7
    8ca4:	547a0200 	ldrbtpl	r0, [sl], #-512	; 0xfffffe00
    8ca8:	50000026 	andpl	r0, r0, r6, lsr #32
    8cac:	01000001 	tsteq	r0, r1
    8cb0:	000ad69c 	muleq	sl, ip, r6
    8cb4:	1a7e1c00 	bne	1f8fcbc <__ccfg+0x1f6fd14>
    8cb8:	9b010000 	blls	48cc0 <__ccfg+0x28d18>
    8cbc:	00008c01 	andeq	r8, r0, r1, lsl #24
    8cc0:	00376300 	eorseq	r6, r7, r0, lsl #6
    8cc4:	1edf1d00 	cdpne	13, 13, cr1, cr15, cr0, {0}
    8cc8:	9d010000 	stcls	0, cr0, [r1, #-0]
    8ccc:	00008c01 	andeq	r8, r0, r1, lsl #24
    8cd0:	0037be00 	eorseq	fp, r7, r0, lsl #28
    8cd4:	1de91d00 	stclne	13, cr1, [r9]
    8cd8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    8cdc:	00008c01 	andeq	r8, r0, r1, lsl #24
    8ce0:	0037d100 	eorseq	sp, r7, r0, lsl #2
    8ce4:	1b331d00 	blne	cd00ec <__ccfg+0xcb0144>
    8ce8:	9f010000 	svcls	0x00010000
    8cec:	00008c01 	andeq	r8, r0, r1, lsl #24
    8cf0:	0037e400 	eorseq	lr, r7, r0, lsl #8
    8cf4:	1b0e1d00 	blne	3900fc <__ccfg+0x370154>
    8cf8:	a0010000 	andge	r0, r1, r0
    8cfc:	00008c01 	andeq	r8, r0, r1, lsl #24
    8d00:	00380200 	eorseq	r0, r8, r0, lsl #4
    8d04:	02122500 	andseq	r2, r2, #0, 10
    8d08:	27660000 	strbcs	r0, [r6, -r0]!
    8d0c:	003e0000 	eorseq	r0, lr, r0
    8d10:	16010000 	strne	r0, [r1], -r0
    8d14:	26de2302 	ldrbcs	r2, [lr], r2, lsl #6
    8d18:	063c0000 	ldrteq	r0, [ip], -r0
    8d1c:	00220000 	eoreq	r0, r2, r0
    8d20:	f2000027 	vhadd.s8	d0, d0, d23
    8d24:	4600000a 	strmi	r0, [r0], -sl
    8d28:	1a00000a 	bne	8d58 <__exidx_end+0x5f60>
    8d2c:	31015101 	tstcc	r1, r1, lsl #2
    8d30:	0150011a 	cmpeq	r0, sl, lsl r1
    8d34:	06220034 			; <UNDEFINED> instruction: 0x06220034
    8d38:	89000027 	stmdbhi	r0, {r0, r1, r2, r5}
    8d3c:	5d000009 	stcpl	0, cr0, [r0, #-36]	; 0xffffffdc
    8d40:	1a00000a 	bne	8d70 <__exidx_end+0x5f78>
    8d44:	0c055001 	stceq	0, cr5, [r5], {1}
    8d48:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    8d4c:	270c2300 	strcs	r2, [ip, -r0, lsl #6]
    8d50:	0b080000 	bleq	208d58 <__ccfg+0x1e8db0>
    8d54:	16220000 	strtne	r0, [r2], -r0
    8d58:	f2000027 	vhadd.s8	d0, d0, d23
    8d5c:	7f00000a 	svcvc	0x0000000a
    8d60:	1a00000a 	bne	8d90 <__exidx_end+0x5f98>
    8d64:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    8d68:	50011a00 	andpl	r1, r1, r0, lsl #20
    8d6c:	22003401 	andcs	r3, r0, #16777216	; 0x1000000
    8d70:	0000271c 	andeq	r2, r0, ip, lsl r7
    8d74:	00000b08 	andeq	r0, r0, r8, lsl #22
    8d78:	00000a92 	muleq	r0, r2, sl
    8d7c:	0150011a 	cmpeq	r0, sl, lsl r1
    8d80:	2c220034 	stccs	0, cr0, [r2], #-208	; 0xffffff30
    8d84:	89000027 	stmdbhi	r0, {r0, r1, r2, r5}
    8d88:	ac000009 	stcge	0, cr0, [r0], {9}
    8d8c:	1a00000a 	bne	8dbc <__exidx_end+0x5fc4>
    8d90:	74085001 	strvc	r5, [r8], #-1
    8d94:	ffff0c00 			; <UNDEFINED> instruction: 0xffff0c00
    8d98:	001a00ff 	ldrsheq	r0, [sl], -pc	; <UNPREDICTABLE>
    8d9c:	00273c26 	eoreq	r3, r7, r6, lsr #24
    8da0:	000acc00 	andeq	ip, sl, r0, lsl #24
    8da4:	52011a00 	andpl	r1, r1, #0, 20
    8da8:	60000c05 	andvs	r0, r0, r5, lsl #24
    8dac:	011a6000 	tsteq	sl, r0
    8db0:	1a370151 	bne	dc92fc <__ccfg+0xda9354>
    8db4:	74045001 	strvc	r5, [r4], #-1
    8db8:	00254800 	eoreq	r4, r5, r0, lsl #16
    8dbc:	00275223 	eoreq	r5, r7, r3, lsr #4
    8dc0:	000af200 	andeq	pc, sl, r0, lsl #4
    8dc4:	f9270000 			; <UNDEFINED> instruction: 0xf9270000
    8dc8:	0600001c 			; <UNDEFINED> instruction: 0x0600001c
    8dcc:	0af201ca 	beq	ffc894fc <_estack+0xdfc844fc>
    8dd0:	8c280000 	stchi	0, cr0, [r8], #-0
    8dd4:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    8dd8:	0000008c 	andeq	r0, r0, ip, lsl #1
    8ddc:	00008c28 	andeq	r8, r0, r8, lsr #24
    8de0:	1b290000 	blne	a48de8 <__ccfg+0xa28e40>
    8de4:	0700001b 	smladeq	r0, fp, r0, r0
    8de8:	000b08f9 	strdeq	r0, [fp], -r9
    8dec:	008c2800 	addeq	r2, ip, r0, lsl #16
    8df0:	8c280000 	stchi	0, cr0, [r8], #-0
    8df4:	00000000 	andeq	r0, r0, r0
    8df8:	001eb62a 	andseq	fp, lr, sl, lsr #12
    8dfc:	01100700 	tsteq	r0, r0, lsl #14
    8e00:	0000008c 	andeq	r0, r0, ip, lsl #1
    8e04:	00008c28 	andeq	r8, r0, r8, lsr #24
    8e08:	23000000 	movwcs	r0, #0
    8e0c:	04000009 	streq	r0, [r0], #-9
    8e10:	002a0b00 	eoreq	r0, sl, r0, lsl #22
    8e14:	5e010400 	cfcpyspl	mvf0, mvf1
    8e18:	01000016 	tsteq	r0, r6, lsl r0
    8e1c:	000020c9 	andeq	r2, r0, r9, asr #1
    8e20:	00001753 	andeq	r1, r0, r3, asr r7
    8e24:	00000f28 	andeq	r0, r0, r8, lsr #30
    8e28:	00000000 	andeq	r0, r0, r0
    8e2c:	00006246 	andeq	r6, r0, r6, asr #4
    8e30:	00170e02 	andseq	r0, r7, r2, lsl #28
    8e34:	301b0600 	andscc	r0, fp, r0, lsl #12
    8e38:	03000000 	movweq	r0, #0
    8e3c:	03740601 	cmneq	r4, #1048576	; 0x100000
    8e40:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    8e44:	06000022 	streq	r0, [r0], -r2, lsr #32
    8e48:	0000421d 	andeq	r4, r0, sp, lsl r2
    8e4c:	08010300 	stmdaeq	r1, {r8, r9}
    8e50:	00000372 	andeq	r0, r0, r2, ror r3
    8e54:	d0050203 	andle	r0, r5, r3, lsl #4
    8e58:	02000003 	andeq	r0, r0, #3
    8e5c:	000020f6 	strdeq	r2, [r0], -r6
    8e60:	005b2b06 	subseq	r2, fp, r6, lsl #22
    8e64:	02030000 	andeq	r0, r3, #0
    8e68:	00023007 	andeq	r3, r2, r7
    8e6c:	16540200 	ldrbne	r0, [r4], -r0, lsl #4
    8e70:	3f060000 	svccc	0x00060000
    8e74:	0000006d 	andeq	r0, r0, sp, rrx
    8e78:	a4050403 	strge	r0, [r5], #-1027	; 0xfffffbfd
    8e7c:	02000000 	andeq	r0, r0, #0
    8e80:	000017bf 			; <UNDEFINED> instruction: 0x000017bf
    8e84:	007f4106 	rsbseq	r4, pc, r6, lsl #2
    8e88:	04030000 	streq	r0, [r3], #-0
    8e8c:	00007907 	andeq	r7, r0, r7, lsl #18
    8e90:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
    8e94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    8e98:	74070803 	strvc	r0, [r7], #-2051	; 0xfffff7fd
    8e9c:	04000000 	streq	r0, [r0], #-0
    8ea0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8ea4:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
    8ea8:	00007e07 	andeq	r7, r0, r7, lsl #28
    8eac:	17100200 	ldrne	r0, [r0, -r0, lsl #4]
    8eb0:	13070000 	movwne	r0, #28672	; 0x7000
    8eb4:	00000025 	andeq	r0, r0, r5, lsr #32
    8eb8:	00220a02 	eoreq	r0, r2, r2, lsl #20
    8ebc:	37140700 	ldrcc	r0, [r4, -r0, lsl #14]
    8ec0:	02000000 	andeq	r0, r0, #0
    8ec4:	000020f8 	strdeq	r2, [r0], -r8
    8ec8:	00501a07 	subseq	r1, r0, r7, lsl #20
    8ecc:	56020000 	strpl	r0, [r2], -r0
    8ed0:	07000016 	smladeq	r0, r6, r0, r0
    8ed4:	0000621f 	andeq	r6, r0, pc, lsl r2
    8ed8:	17c10200 	strbne	r0, [r1, r0, lsl #4]
    8edc:	20070000 	andcs	r0, r7, r0
    8ee0:	00000074 	andeq	r0, r0, r4, ror r0
    8ee4:	0022e102 	eoreq	lr, r2, r2, lsl #2
    8ee8:	e4330800 	ldrt	r0, [r3], #-2048	; 0xfffff800
    8eec:	05000000 	streq	r0, [r0, #-0]
    8ef0:	0000ea04 	andeq	lr, r0, r4, lsl #20
    8ef4:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    8ef8:	000000f1 	strdeq	r0, [r0], -r1
    8efc:	0000fc07 	andeq	pc, r0, r7, lsl #24
    8f00:	00ad0800 	adceq	r0, sp, r0, lsl #16
    8f04:	02000000 	andeq	r0, r0, #0
    8f08:	00002357 	andeq	r2, r0, r7, asr r3
    8f0c:	01074209 	tsteq	r7, r9, lsl #4
    8f10:	04050000 	streq	r0, [r5], #-0
    8f14:	0000010d 	andeq	r0, r0, sp, lsl #2
    8f18:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8f1c:	00012600 	andeq	r2, r1, r0, lsl #12
    8f20:	01260800 			; <UNDEFINED> instruction: 0x01260800
    8f24:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    8f28:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8f2c:	000000ce 	andeq	r0, r0, lr, asr #1
    8f30:	ad040500 	cfstr32ge	mvfx0, [r4, #-0]
    8f34:	02000000 	andeq	r0, r0, #0
    8f38:	00002480 	andeq	r2, r0, r0, lsl #9
    8f3c:	01374609 	teqeq	r7, r9, lsl #12
    8f40:	04050000 	streq	r0, [r5], #-0
    8f44:	0000013d 	andeq	r0, r0, sp, lsr r1
    8f48:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    8f4c:	24ec0200 	strbtcs	r0, [ip], #512	; 0x200
    8f50:	48090000 	stmdami	r9, {}	; <UNPREDICTABLE>
    8f54:	00000137 	andeq	r0, r0, r7, lsr r1
    8f58:	00223202 	eoreq	r3, r2, r2, lsl #4
    8f5c:	584a0900 	stmdapl	sl, {r8, fp}^
    8f60:	05000001 	streq	r0, [r0, #-1]
    8f64:	00015e04 	andeq	r5, r1, r4, lsl #28
    8f68:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    8f6c:	016d0000 	cmneq	sp, r0
    8f70:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    8f74:	00000000 	andeq	r0, r0, r0
    8f78:	00219802 	eoreq	r9, r1, r2, lsl #16
    8f7c:	374c0900 	strbcc	r0, [ip, -r0, lsl #18]
    8f80:	02000001 	andeq	r0, r0, #1
    8f84:	00002101 	andeq	r2, r0, r1, lsl #2
    8f88:	01074e09 	tsteq	r7, r9, lsl #28
    8f8c:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
    8f90:	09000021 	stmdbeq	r0, {r0, r5}
    8f94:	0000e451 	andeq	lr, r0, r1, asr r4
    8f98:	20040200 	andcs	r0, r4, r0, lsl #4
    8f9c:	53090000 	movwpl	r0, #36864	; 0x9000
    8fa0:	00000199 	muleq	r0, r9, r1
    8fa4:	019f0405 	orrseq	r0, pc, r5, lsl #8
    8fa8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8fac:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    8fb0:	08000001 	stmdaeq	r0, {r0}
    8fb4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    8fb8:	0000b808 	andeq	fp, r0, r8, lsl #16
    8fbc:	00b80800 	adcseq	r0, r8, r0, lsl #16
    8fc0:	05000000 	streq	r0, [r0, #-0]
    8fc4:	0000b804 	andeq	fp, r0, r4, lsl #16
    8fc8:	237b0200 	cmncs	fp, #0, 4
    8fcc:	57090000 	strpl	r0, [r9, -r0]
    8fd0:	000001c9 	andeq	r0, r0, r9, asr #3
    8fd4:	01cf0405 	biceq	r0, pc, r5, lsl #8
    8fd8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8fdc:	e3000000 	movw	r0, #0
    8fe0:	08000001 	stmdaeq	r0, {r0}
    8fe4:	000001e3 	andeq	r0, r0, r3, ror #3
    8fe8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8fec:	04050000 	streq	r0, [r5], #-0
    8ff0:	000000ce 	andeq	r0, r0, lr, asr #1
    8ff4:	0021bb02 	eoreq	fp, r1, r2, lsl #22
    8ff8:	c95a0900 	ldmdbgt	sl, {r8, fp}^
    8ffc:	02000001 	andeq	r0, r0, #1
    9000:	00002284 	andeq	r2, r0, r4, lsl #5
    9004:	01c95d09 	biceq	r5, r9, r9, lsl #26
    9008:	16020000 	strne	r0, [r2], -r0
    900c:	09000020 	stmdbeq	r0, {r5}
    9010:	0001c960 	andeq	ip, r1, r0, ror #18
    9014:	23a60200 			; <UNDEFINED> instruction: 0x23a60200
    9018:	63090000 	movwvs	r0, #36864	; 0x9000
    901c:	000000e4 	andeq	r0, r0, r4, ror #1
    9020:	00203c02 	eoreq	r3, r0, r2, lsl #24
    9024:	20650900 	rsbcs	r0, r5, r0, lsl #18
    9028:	05000002 	streq	r0, [r0, #-2]
    902c:	00022604 	andeq	r2, r2, r4, lsl #12
    9030:	02310700 	eorseq	r0, r1, #0, 14
    9034:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9038:	00000000 	andeq	r0, r0, r0
    903c:	0024fd02 	eoreq	pc, r4, r2, lsl #26
    9040:	20670900 	rsbcs	r0, r7, r0, lsl #18
    9044:	02000002 	andeq	r0, r0, #2
    9048:	000022f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    904c:	00eb6909 	rsceq	r6, fp, r9, lsl #18
    9050:	cb020000 	blgt	89058 <__ccfg+0x690b0>
    9054:	09000024 	stmdbeq	r0, {r2, r5}
    9058:	0000eb6b 	andeq	lr, r0, fp, ror #22
    905c:	22a00200 	adccs	r0, r0, #0, 4
    9060:	6d090000 	stcvs	0, cr0, [r9, #-0]
    9064:	000000eb 	andeq	r0, r0, fp, ror #1
    9068:	0022b202 	eoreq	fp, r2, r2, lsl #4
    906c:	eb6f0900 	bl	1bcb474 <__ccfg+0x1bab4cc>
    9070:	0b000000 	bleq	9078 <__exidx_end+0x6280>
    9074:	557a094c 	ldrbpl	r0, [sl, #-2380]!	; 0xfffff6b4
    9078:	0c000003 	stceq	0, cr0, [r0], {3}
    907c:	00002256 	andeq	r2, r0, r6, asr r2
    9080:	00fc7c09 	rscseq	r7, ip, r9, lsl #24
    9084:	0c000000 	stceq	0, cr0, [r0], {-0}
    9088:	000024be 			; <UNDEFINED> instruction: 0x000024be
    908c:	012c7d09 			; <UNDEFINED> instruction: 0x012c7d09
    9090:	0c040000 	stceq	0, cr0, [r4], {-0}
    9094:	0000227a 	andeq	r2, r0, sl, ror r2
    9098:	01427e09 	cmpeq	r2, r9, lsl #28
    909c:	0c080000 	stceq	0, cr0, [r8], {-0}
    90a0:	000023e5 	andeq	r2, r0, r5, ror #7
    90a4:	014d7f09 	cmpeq	sp, r9, lsl #30
    90a8:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    90ac:	000023f7 	strdeq	r2, [r0], -r7
    90b0:	016d8009 	cmneq	sp, r9
    90b4:	0c100000 	ldceq	0, cr0, [r0], {-0}
    90b8:	00002409 	andeq	r2, r0, r9, lsl #8
    90bc:	01788109 	cmneq	r8, r9, lsl #2
    90c0:	0c140000 	ldceq	0, cr0, [r4], {-0}
    90c4:	00002154 	andeq	r2, r0, r4, asr r1
    90c8:	01838209 	orreq	r8, r3, r9, lsl #4
    90cc:	0c180000 	ldceq	0, cr0, [r8], {-0}
    90d0:	0000226f 	andeq	r2, r0, pc, ror #4
    90d4:	018e8309 	orreq	r8, lr, r9, lsl #6
    90d8:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    90dc:	000023c0 	andeq	r2, r0, r0, asr #7
    90e0:	01be8409 			; <UNDEFINED> instruction: 0x01be8409
    90e4:	0c200000 	stceq	0, cr0, [r0], #-0
    90e8:	000021f7 	strdeq	r2, [r0], -r7
    90ec:	01e98509 	mvneq	r8, r9, lsl #10
    90f0:	0c240000 	stceq	0, cr0, [r4], #-0
    90f4:	00002212 	andeq	r2, r0, r2, lsl r2
    90f8:	01f48609 	mvnseq	r8, r9, lsl #12
    90fc:	0c280000 	stceq	0, cr0, [r8], #-0
    9100:	0000242d 	andeq	r2, r0, sp, lsr #8
    9104:	01ff8709 	mvnseq	r8, r9, lsl #14
    9108:	0c2c0000 	stceq	0, cr0, [ip], #-0
    910c:	000021a9 	andeq	r2, r0, r9, lsr #3
    9110:	02158809 	andseq	r8, r5, #589824	; 0x90000
    9114:	0c300000 	ldceq	0, cr0, [r0], #-0
    9118:	0000241b 	andeq	r2, r0, fp, lsl r4
    911c:	02318909 	eorseq	r8, r1, #147456	; 0x24000
    9120:	0c340000 	ldceq	0, cr0, [r4], #-0
    9124:	0000225c 	andeq	r2, r0, ip, asr r2
    9128:	020a8a09 	andeq	r8, sl, #36864	; 0x9000
    912c:	0c380000 	ldceq	0, cr0, [r8], #-0
    9130:	000022d0 	ldrdeq	r2, [r0], -r0
    9134:	023c8b09 	eorseq	r8, ip, #9216	; 0x2400
    9138:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    913c:	000023d6 	ldrdeq	r2, [r0], -r6
    9140:	02478c09 	subeq	r8, r7, #2304	; 0x900
    9144:	0c400000 	mareq	acc0, r0, r0
    9148:	000021d1 	ldrdeq	r2, [r0], -r1
    914c:	02528d09 	subseq	r8, r2, #576	; 0x240
    9150:	0c440000 	mareq	acc0, r0, r4
    9154:	0000202d 	andeq	r2, r0, sp, lsr #32
    9158:	025d8e09 	subseq	r8, sp, #9, 28	; 0x90
    915c:	00480000 	subeq	r0, r8, r0
    9160:	00233102 	eoreq	r3, r3, r2, lsl #2
    9164:	688f0900 	stmvs	pc, {r8, fp}	; <UNPREDICTABLE>
    9168:	0b000002 	bleq	9178 <__exidx_end+0x6380>
    916c:	994e0108 	stmdbls	lr, {r3, r8}^
    9170:	0c000003 	stceq	0, cr0, [r0], {3}
    9174:	00002374 	andeq	r2, r0, r4, ror r3
    9178:	00ce4f01 	sbceq	r4, lr, r1, lsl #30
    917c:	0c000000 	stceq	0, cr0, [r0], {-0}
    9180:	00002441 	andeq	r2, r0, r1, asr #8
    9184:	00b85001 	adcseq	r5, r8, r1
    9188:	0c040000 	stceq	0, cr0, [r4], {-0}
    918c:	00002200 	andeq	r2, r0, r0, lsl #4
    9190:	00ad5101 	adceq	r5, sp, r1, lsl #2
    9194:	0c060000 	stceq	0, cr0, [r6], {-0}
    9198:	0000213f 	andeq	r2, r0, pc, lsr r1
    919c:	00a25201 	adceq	r5, r2, r1, lsl #4
    91a0:	00070000 	andeq	r0, r7, r0
    91a4:	00246d02 	eoreq	r6, r4, r2, lsl #26
    91a8:	60530100 	subsvs	r0, r3, r0, lsl #2
    91ac:	0d000003 	stceq	0, cr0, [r0, #-12]
    91b0:	0000053e 	andeq	r0, r0, lr, lsr r5
    91b4:	0301dc02 	movweq	sp, #7170	; 0x1c02
    91b8:	000003be 			; <UNDEFINED> instruction: 0x000003be
    91bc:	0004f80e 	andeq	pc, r4, lr, lsl #16
    91c0:	01dc0200 	bicseq	r0, ip, r0, lsl #4
    91c4:	000000ce 	andeq	r0, r0, lr, asr #1
    91c8:	05530f00 	ldrbeq	r0, [r3, #-3840]	; 0xfffff100
    91cc:	2c020000 	stccs	0, cr0, [r2], {-0}
    91d0:	0000ce02 	andeq	ip, r0, r2, lsl #28
    91d4:	5d100300 	ldcpl	3, cr0, [r0, #-0]
    91d8:	04000006 	streq	r0, [r0], #-6
    91dc:	1103022a 	tstne	r3, sl, lsr #4
    91e0:	00001df2 	strdeq	r1, [r0], -r2
    91e4:	00c3e905 	sbceq	lr, r3, r5, lsl #18
    91e8:	fb030000 	blx	c91f2 <__ccfg+0xa924a>
    91ec:	12000003 	andne	r0, r0, #3
    91f0:	00001b42 	andeq	r1, r0, r2, asr #22
    91f4:	00cee905 	sbceq	lr, lr, r5, lsl #18
    91f8:	4b130000 	blmi	4c9200 <__ccfg+0x4a9258>
    91fc:	0500001e 	streq	r0, [r0, #-30]	; 0xffffffe2
    9200:	0000c3ef 	andeq	ip, r0, pc, ror #7
    9204:	600d0000 	andvs	r0, sp, r0
    9208:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    920c:	1503025c 	strne	r0, [r3, #-604]	; 0xfffffda4
    9210:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
    9214:	0000212e 	andeq	r2, r0, lr, lsr #2
    9218:	ce025c04 	cdpgt	12, 0, cr5, cr2, cr4, {0}
    921c:	00000000 	andeq	r0, r0, r0
    9220:	00234510 	eoreq	r4, r3, r0, lsl r5
    9224:	01400300 	mrseq	r0, SPSR_irq
    9228:	23010f03 	movwcs	r0, #7939	; 0x1f03
    922c:	3e040000 	cdpcc	0, 0, cr0, cr4, cr0, {0}
    9230:	00042b02 	andeq	r2, r4, r2, lsl #22
    9234:	01030300 	mrseq	r0, SP_svc
    9238:	000bc602 	andeq	ip, fp, r2, lsl #12
    923c:	23891400 	orrcs	r1, r9, #0, 8
    9240:	9e0a0000 	cdpls	0, 0, cr0, cr10, cr0, {0}
    9244:	00000000 	andeq	r0, r0, r0
    9248:	000000f4 	strdeq	r0, [r0], -r4
    924c:	05cd9c01 	strbeq	r9, [sp, #3073]	; 0xc01
    9250:	ef150000 	svc	0x00150000
    9254:	01000021 	tsteq	r0, r1, lsr #32
    9258:	0000ce7b 	andeq	ip, r0, fp, ror lr
    925c:	00381500 	eorseq	r1, r8, r0, lsl #10
    9260:	21461600 	cmpcs	r6, r0, lsl #12
    9264:	7c010000 	stcvc	0, cr0, [r1], {-0}
    9268:	000000ce 	andeq	r0, r0, lr, asr #1
    926c:	a41707ff 	ldrge	r0, [r7], #-2047	; 0xfffff801
    9270:	00000003 	andeq	r0, r0, r3
    9274:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    9278:	0100000e 	tsteq	r0, lr
    927c:	00047d81 	andeq	r7, r4, r1, lsl #27
    9280:	03b11800 			; <UNDEFINED> instruction: 0x03b11800
    9284:	00010000 	andeq	r0, r1, r0
    9288:	0003be19 	andeq	fp, r3, r9, lsl lr
    928c:	00000000 	andeq	r0, r0, r0
    9290:	00000400 	andeq	r0, r0, r0, lsl #8
    9294:	1a820100 	bne	fe08969c <_estack+0xde08469c>
    9298:	00000415 	andeq	r0, r0, r5, lsl r4
    929c:	00000000 	andeq	r0, r0, r0
    92a0:	00000008 	andeq	r0, r0, r8
    92a4:	04a9a101 	strteq	sl, [r9], #257	; 0x101
    92a8:	001b0000 	andseq	r0, fp, r0
    92ac:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    92b0:	00000008 	andeq	r0, r0, r8
    92b4:	0003cb19 	andeq	ip, r3, r9, lsl fp
    92b8:	00000000 	andeq	r0, r0, r0
    92bc:	00000600 	andeq	r0, r0, r0, lsl #12
    92c0:	19b10100 	ldmibne	r1!, {r8}
    92c4:	0000041e 	andeq	r0, r0, lr, lsl r4
    92c8:	00000000 	andeq	r0, r0, r0
    92cc:	00000004 	andeq	r0, r0, r4
    92d0:	fb1ab201 	blx	6b5ade <__ccfg+0x695b36>
    92d4:	00000003 	andeq	r0, r0, r3
    92d8:	0a000000 	beq	92e0 <__exidx_end+0x64e8>
    92dc:	01000000 	mrseq	r0, (UNDEF: 0)
    92e0:	0004e1b8 			; <UNDEFINED> instruction: 0x0004e1b8
    92e4:	04081800 	streq	r1, [r8], #-2048	; 0xfffff800
    92e8:	00110000 	andseq	r0, r1, r0
    92ec:	0003cb19 	andeq	ip, r3, r9, lsl fp
    92f0:	00000000 	andeq	r0, r0, r0
    92f4:	00000400 	andeq	r0, r0, r0, lsl #8
    92f8:	19b90100 	ldmibne	r9!, {r8}
    92fc:	0000041e 	andeq	r0, r0, lr, lsl r4
    9300:	00000000 	andeq	r0, r0, r0
    9304:	00000002 	andeq	r0, r0, r2
    9308:	cb19ba01 	blgt	677b14 <__ccfg+0x657b6c>
    930c:	00000003 	andeq	r0, r0, r3
    9310:	06000000 	streq	r0, [r0], -r0
    9314:	01000000 	mrseq	r0, (UNDEF: 0)
    9318:	041e19cf 	ldreq	r1, [lr], #-2511	; 0xfffff631
    931c:	00000000 	andeq	r0, r0, r0
    9320:	00020000 	andeq	r0, r2, r0
    9324:	d0010000 	andle	r0, r1, r0
    9328:	0000001c 	andeq	r0, r0, ip, lsl r0
    932c:	00052e00 	andeq	r2, r5, r0, lsl #28
    9330:	50011d00 	andpl	r1, r1, r0, lsl #26
    9334:	07ff0a03 	ldrbeq	r0, [pc, r3, lsl #20]!
    9338:	00001c00 	andeq	r1, r0, r0, lsl #24
    933c:	053f0000 	ldreq	r0, [pc, #-0]!	; 9344 <__exidx_end+0x654c>
    9340:	011d0000 	tsteq	sp, r0
    9344:	ff0a0350 			; <UNDEFINED> instruction: 0xff0a0350
    9348:	001e0007 	andseq	r0, lr, r7
    934c:	ef000000 	svc	0x00000000
    9350:	57000008 	strpl	r0, [r0, -r8]
    9354:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9358:	31015101 	tstcc	r1, r1, lsl #2
    935c:	0150011d 	cmpeq	r0, sp, lsl r1
    9360:	001e0033 	andseq	r0, lr, r3, lsr r0
    9364:	ef000000 	svc	0x00000000
    9368:	6f000008 	svcvs	0x00000008
    936c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9370:	33015101 	movwcc	r5, #4353	; 0x1101
    9374:	0150011d 	cmpeq	r0, sp, lsl r1
    9378:	001e0034 	andseq	r0, lr, r4, lsr r0
    937c:	05000000 	streq	r0, [r0, #-0]
    9380:	82000009 	andhi	r0, r0, #9
    9384:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9388:	31015001 	tstcc	r1, r1
    938c:	00001c00 	andeq	r1, r0, r0, lsl #24
    9390:	05910000 	ldreq	r0, [r1]
    9394:	011d0000 	tsteq	sp, r0
    9398:	00370150 	eorseq	r0, r7, r0, asr r1
    939c:	0000001c 	andeq	r0, r0, ip, lsl r0
    93a0:	0005a000 	andeq	sl, r5, r0
    93a4:	50011d00 	andpl	r1, r1, r0, lsl #26
    93a8:	1c003701 	stcne	7, cr3, [r0], {1}
    93ac:	00000000 	andeq	r0, r0, r0
    93b0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
    93b4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    93b8:	1c000076 	stcne	0, cr0, [r0], {118}	; 0x76
    93bc:	00000000 	andeq	r0, r0, r0
    93c0:	000005c0 	andeq	r0, r0, r0, asr #11
    93c4:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    93c8:	1f000076 	svcne	0x00000076
    93cc:	00000000 	andeq	r0, r0, r0
    93d0:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    93d4:	00000076 	andeq	r0, r0, r6, ror r0
    93d8:	0020a120 	eoreq	sl, r0, r0, lsr #2
    93dc:	01010a00 	tsteq	r1, r0, lsl #20
    93e0:	000027a4 	andeq	r2, r0, r4, lsr #15
    93e4:	00000220 	andeq	r0, r0, r0, lsr #4
    93e8:	07c89c01 	strbeq	r9, [r8, r1, lsl #24]
    93ec:	c2210000 	eorgt	r0, r1, #0
    93f0:	01000022 	tsteq	r0, r2, lsr #32
    93f4:	0000ceda 	ldrdeq	ip, [r0], -sl
    93f8:	00384000 	eorseq	r4, r8, r0
    93fc:	20251500 	eorcs	r1, r5, r0, lsl #10
    9400:	dc010000 	stcle	0, cr0, [r1], {-0}
    9404:	000000c3 	andeq	r0, r0, r3, asr #1
    9408:	0000386c 	andeq	r3, r0, ip, ror #16
    940c:	00230d15 	eoreq	r0, r3, r5, lsl sp
    9410:	c3dd0100 	bicsgt	r0, sp, #0, 2
    9414:	8a000000 	bhi	941c <__exidx_end+0x6624>
    9418:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    941c:	00002243 	andeq	r2, r0, r3, asr #4
    9420:	00c3de01 	sbceq	sp, r3, r1, lsl #28
    9424:	38e40000 	stmiacc	r4!, {}^	; <UNPREDICTABLE>
    9428:	5f150000 	svcpl	0x00150000
    942c:	01000024 	tsteq	r0, r4, lsr #32
    9430:	0000c3df 	ldrdeq	ip, [r0], -pc	; <UNPREDICTABLE>
    9434:	00390200 	eorseq	r0, r9, r0, lsl #4
    9438:	1ff61500 	svcne	0x00f61500
    943c:	e0010000 	and	r0, r1, r0
    9440:	000000c3 	andeq	r0, r0, r3, asr #1
    9444:	00003920 	andeq	r3, r0, r0, lsr #18
    9448:	00204d22 	eoreq	r4, r0, r2, lsr #26
    944c:	c3e10100 	mvngt	r0, #0, 2
    9450:	01000000 	mrseq	r0, (UNDEF: 0)
    9454:	1a7e1553 	bne	1f8e9a8 <__ccfg+0x1f6ea00>
    9458:	e2010000 	and	r0, r1, #0
    945c:	000000ce 	andeq	r0, r0, lr, asr #1
    9460:	00003933 	andeq	r3, r0, r3, lsr r9
    9464:	00233c15 	eoreq	r3, r3, r5, lsl ip
    9468:	cee30100 	cdpgt	1, 14, cr0, cr3, cr0, {0}
    946c:	46000000 	strmi	r0, [r0], -r0
    9470:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    9474:	00002061 	andeq	r2, r0, r1, rrx
    9478:	00cee401 	sbceq	lr, lr, r1, lsl #8
    947c:	39650000 	stmdbcc	r5!, {}^	; <UNPREDICTABLE>
    9480:	64230000 	strtvs	r0, [r3], #-0
    9484:	e5010069 	str	r0, [r1, #-105]	; 0xffffff97
    9488:	000000ce 	andeq	r0, r0, lr, asr #1
    948c:	00003978 	andeq	r3, r0, r8, ror r9
    9490:	69696423 	stmdbvs	r9!, {r0, r1, r5, sl, sp, lr}^
    9494:	cee60100 	cdpgt	1, 14, cr0, cr6, cr0, {0}
    9498:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    949c:	23000039 	movwcs	r0, #57	; 0x39
    94a0:	01006974 	tsteq	r0, r4, ror r9
    94a4:	0000cee7 	andeq	ip, r0, r7, ror #29
    94a8:	0039e400 	eorseq	lr, r9, r0, lsl #8
    94ac:	64632300 	strbtvs	r2, [r3], #-768	; 0xfffffd00
    94b0:	cee80100 	cdpgt	1, 14, cr0, cr8, cr0, {0}
    94b4:	54000000 	strpl	r0, [r0], #-0
    94b8:	2300003a 	movwcs	r0, #58	; 0x3a
    94bc:	01006c63 	tsteq	r0, r3, ror #24
    94c0:	0000cee9 	andeq	ip, r0, r9, ror #29
    94c4:	003a6700 	eorseq	r6, sl, r0, lsl #14
    94c8:	20721500 	rsbscs	r1, r2, r0, lsl #10
    94cc:	ea010000 	b	494d4 <__ccfg+0x2952c>
    94d0:	000000ce 	andeq	r0, r0, lr, asr #1
    94d4:	00003a7a 	andeq	r3, r0, sl, ror sl
    94d8:	01006b24 	tsteq	r0, r4, lsr #22
    94dc:	0000ceeb 	andeq	ip, r0, fp, ror #29
    94e0:	21c91300 	biccs	r1, r9, r0, lsl #6
    94e4:	ec010000 	stc	0, cr0, [r1], {-0}
    94e8:	000000ce 	andeq	r0, r0, lr, asr #1
    94ec:	00217615 	eoreq	r7, r1, r5, lsl r6
    94f0:	ceed0100 	cdpgt	1, 14, cr0, cr13, cr0, {0}
    94f4:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    94f8:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    94fc:	0000213a 	andeq	r2, r0, sl, lsr r1
    9500:	00ceee01 	sbceq	lr, lr, r1, lsl #28
    9504:	3ac10000 	bcc	ff04950c <_estack+0xdf04450c>
    9508:	71150000 	tstvc	r5, r0
    950c:	01000021 	tsteq	r0, r1, lsr #32
    9510:	0000ceef 	andeq	ip, r0, pc, ror #29
    9514:	003ae000 	eorseq	lr, sl, r0
    9518:	23c91500 	biccs	r1, r9, #0, 10
    951c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    9520:	000007c8 	andeq	r0, r0, r8, asr #15
    9524:	00003b24 	andeq	r3, r0, r4, lsr #22
    9528:	0027d225 	eoreq	sp, r7, r5, lsr #4
    952c:	00001200 	andeq	r1, r0, r0, lsl #4
    9530:	00073b00 	andeq	r3, r7, r0, lsl #22
    9534:	23192600 	tstcs	r9, #0, 12
    9538:	0a010000 	beq	49540 <__ccfg+0x29598>
    953c:	0000c301 	andeq	ip, r0, r1, lsl #6
    9540:	003b3c00 	eorseq	r3, fp, r0, lsl #24
    9544:	d4270000 	strtle	r0, [r7], #-0
    9548:	f8000003 			; <UNDEFINED> instruction: 0xf8000003
    954c:	06000027 	streq	r0, [r0], -r7, lsr #32
    9550:	01000000 	mrseq	r0, (UNDEF: 0)
    9554:	07680111 			; <UNDEFINED> instruction: 0x07680111
    9558:	e4280000 	strt	r0, [r8], #-0
    955c:	29000003 	stmdbcs	r0, {r0, r1}
    9560:	000027f8 	strdeq	r2, [r0], -r8
    9564:	00000006 	andeq	r0, r0, r6
    9568:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    956c:	003b4f00 	eorseq	r4, fp, r0, lsl #30
    9570:	27000000 	strcs	r0, [r0, -r0]
    9574:	000003d4 	ldrdeq	r0, [r0], -r4
    9578:	00002810 	andeq	r2, r0, r0, lsl r8
    957c:	00000006 	andeq	r0, r0, r6
    9580:	95011b01 	strls	r1, [r1, #-2817]	; 0xfffff4ff
    9584:	28000007 	stmdacs	r0, {r0, r1, r2}
    9588:	000003e4 	andeq	r0, r0, r4, ror #7
    958c:	00281029 	eoreq	r1, r8, r9, lsr #32
    9590:	00000600 	andeq	r0, r0, r0, lsl #12
    9594:	03ef2a00 	mvneq	r2, #0, 20
    9598:	3b620000 	blcc	18895a0 <__ccfg+0x18695f8>
    959c:	00000000 	andeq	r0, r0, r0
    95a0:	0003d42b 	andeq	sp, r3, fp, lsr #8
    95a4:	00281a00 	eoreq	r1, r8, r0, lsl #20
    95a8:	000f1000 	andeq	r1, pc, r0
    95ac:	011f0100 	tsteq	pc, r0, lsl #2
    95b0:	000007be 			; <UNDEFINED> instruction: 0x000007be
    95b4:	0003e428 	andeq	lr, r3, r8, lsr #8
    95b8:	0f102c00 	svceq	0x00102c00
    95bc:	ef2a0000 	svc	0x002a0000
    95c0:	75000003 	strvc	r0, [r0, #-3]
    95c4:	0000003b 	andeq	r0, r0, fp, lsr r0
    95c8:	27c41b00 	strbcs	r1, [r4, r0, lsl #22]
    95cc:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    95d0:	05000000 	streq	r0, [r0, #-0]
    95d4:	0007ce04 	andeq	ip, r7, r4, lsl #28
    95d8:	00ce2d00 	sbceq	r2, lr, r0, lsl #26
    95dc:	77200000 	strvc	r0, [r0, -r0]!
    95e0:	0a000020 	beq	9668 <__exidx_end+0x6870>
    95e4:	29c40117 	stmibcs	r4, {r0, r1, r2, r4, r8}^
    95e8:	00600000 	rsbeq	r0, r0, r0
    95ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    95f0:	00000833 	andeq	r0, r0, r3, lsr r8
    95f4:	00202526 	eoreq	r2, r0, r6, lsr #10
    95f8:	01b80100 			; <UNDEFINED> instruction: 0x01b80100
    95fc:	000000c3 	andeq	r0, r0, r3, asr #1
    9600:	00003b88 	andeq	r3, r0, r8, lsl #23
    9604:	00221c26 	eoreq	r1, r2, r6, lsr #24
    9608:	01b90100 			; <UNDEFINED> instruction: 0x01b90100
    960c:	000000ce 	andeq	r0, r0, lr, asr #1
    9610:	00003bb3 			; <UNDEFINED> instruction: 0x00003bb3
    9614:	0021e526 	eoreq	lr, r1, r6, lsr #10
    9618:	01ba0100 			; <UNDEFINED> instruction: 0x01ba0100
    961c:	000000ce 	andeq	r0, r0, lr, asr #1
    9620:	00003bc6 	andeq	r3, r0, r6, asr #23
    9624:	00217626 	eoreq	r7, r1, r6, lsr #12
    9628:	01bb0100 			; <UNDEFINED> instruction: 0x01bb0100
    962c:	000000ce 	andeq	r0, r0, lr, asr #1
    9630:	00003bed 	andeq	r3, r0, sp, ror #23
    9634:	0029d21b 	eoreq	sp, r9, fp, lsl r2
    9638:	00091b00 	andeq	r1, r9, r0, lsl #22
    963c:	91200000 			; <UNDEFINED> instruction: 0x91200000
    9640:	0a000024 	beq	96d8 <__exidx_end+0x68e0>
    9644:	00000129 	andeq	r0, r0, r9, lsr #2
    9648:	00780000 	rsbseq	r0, r8, r0
    964c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9650:	0000088a 	andeq	r0, r0, sl, lsl #17
    9654:	00229326 	eoreq	r9, r2, r6, lsr #6
    9658:	01e70100 	mvneq	r0, r0, lsl #2
    965c:	000000ce 	andeq	r0, r0, lr, asr #1
    9660:	00003c16 	andeq	r3, r0, r6, lsl ip
    9664:	00245226 	eoreq	r5, r4, r6, lsr #4
    9668:	01e80100 	mvneq	r0, r0, lsl #2
    966c:	000000ce 	andeq	r0, r0, lr, asr #1
    9670:	00003c29 	andeq	r3, r0, r9, lsr #24
    9674:	001a7e26 	andseq	r7, sl, r6, lsr #28
    9678:	01e90100 	mvneq	r0, r0, lsl #2
    967c:	000000ce 	andeq	r0, r0, lr, asr #1
    9680:	00003c3c 	andeq	r3, r0, ip, lsr ip
    9684:	00236426 	eoreq	r6, r3, r6, lsr #8
    9688:	01ea0100 	mvneq	r0, r0, lsl #2
    968c:	000000ce 	andeq	r0, r0, lr, asr #1
    9690:	00003c4f 	andeq	r3, r0, pc, asr #24
    9694:	21122e00 	tstcs	r2, r0, lsl #28
    9698:	420a0000 	andmi	r0, sl, #0
    969c:	0000ce01 	andeq	ip, r0, r1, lsl #28
    96a0:	002a2400 	eoreq	r2, sl, r0, lsl #8
    96a4:	00001800 	andeq	r1, r0, r0, lsl #16
    96a8:	229c0100 	addscs	r0, ip, #0, 2
    96ac:	000024db 	ldrdeq	r2, [r0], -fp
    96b0:	03995501 	orrseq	r5, r9, #4194304	; 0x400000
    96b4:	03050000 	movweq	r0, #20480	; 0x5000
    96b8:	20000070 	andcs	r0, r0, r0, ror r0
    96bc:	0000ce2f 	andeq	ip, r0, pc, lsr #28
    96c0:	0008c100 	andeq	ip, r8, r0, lsl #2
    96c4:	08c13000 	stmiaeq	r1, {ip, sp}^
    96c8:	000c0000 	andeq	r0, ip, r0
    96cc:	83070403 	movwhi	r0, #29699	; 0x7403
    96d0:	22000018 	andcs	r0, r0, #24
    96d4:	00002321 	andeq	r2, r0, r1, lsr #6
    96d8:	08d96101 	ldmeq	r9, {r0, r8, sp, lr}^
    96dc:	03050000 	movweq	r0, #20480	; 0x5000
    96e0:	00000000 	andeq	r0, r0, r0
    96e4:	0008b12d 	andeq	fp, r8, sp, lsr #2
    96e8:	20e93100 	rsccs	r3, r9, r0, lsl #2
    96ec:	99090000 	stmdbls	r9, {}	; <UNPREDICTABLE>
    96f0:	000008ef 	andeq	r0, r0, pc, ror #17
    96f4:	0000d908 	andeq	sp, r0, r8, lsl #18
    96f8:	1b310000 	blne	c49700 <__ccfg+0xc29758>
    96fc:	0300001b 	movweq	r0, #27
    9700:	000905f9 	strdeq	r0, [r9], -r9
    9704:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    9708:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    970c:	00000000 	andeq	r0, r0, r0
    9710:	001eb632 	andseq	fp, lr, r2, lsr r6
    9714:	01100300 	tsteq	r0, r0, lsl #6
    9718:	000000ce 	andeq	r0, r0, lr, asr #1
    971c:	0000091b 	andeq	r0, r0, fp, lsl r9
    9720:	0000ce08 	andeq	ip, r0, r8, lsl #28
    9724:	25330000 	ldrcs	r0, [r3, #-0]!
    9728:	0b000016 	bleq	9788 <__exidx_end+0x6990>
    972c:	0000c3aa 	andeq	ip, r0, sl, lsr #7
    9730:	03cc0000 	biceq	r0, ip, #0
    9734:	00040000 	andeq	r0, r4, r0
    9738:	00002cc5 	andeq	r2, r0, r5, asr #25
    973c:	165e0104 	ldrbne	r0, [lr], -r4, lsl #2
    9740:	e4010000 	str	r0, [r1], #-0
    9744:	53000027 	movwpl	r0, #39	; 0x27
    9748:	88000017 	stmdahi	r0, {r0, r1, r2, r4}
    974c:	0000000f 	andeq	r0, r0, pc
    9750:	af000000 	svcge	0x00000000
    9754:	02000065 	andeq	r0, r0, #101	; 0x65
    9758:	03740601 	cmneq	r4, #1048576	; 0x100000
    975c:	01020000 	mrseq	r0, (UNDEF: 2)
    9760:	00037208 	andeq	r7, r3, r8, lsl #4
    9764:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    9768:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    976c:	30070202 	andcc	r0, r7, r2, lsl #4
    9770:	02000002 	andeq	r0, r0, #2
    9774:	00a40504 	adceq	r0, r4, r4, lsl #10
    9778:	bf030000 	svclt	0x00030000
    977c:	03000017 	movweq	r0, #23
    9780:	00005341 	andeq	r5, r0, r1, asr #6
    9784:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9788:	00000079 	andeq	r0, r0, r9, ror r0
    978c:	9f050802 	svcls	0x00050802
    9790:	02000000 	andeq	r0, r0, #0
    9794:	00740708 	rsbseq	r0, r4, r8, lsl #14
    9798:	04040000 	streq	r0, [r4], #-0
    979c:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    97a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    97a4:	0000007e 	andeq	r0, r0, lr, ror r0
    97a8:	0017c103 	andseq	ip, r7, r3, lsl #2
    97ac:	48200400 	stmdami	r0!, {sl}
    97b0:	05000000 	streq	r0, [r0, #-0]
    97b4:	a2630201 	rsbge	r0, r3, #268435456	; 0x10000000
    97b8:	06000000 	streq	r0, [r0], -r0
    97bc:	0000271e 	andeq	r2, r0, lr, lsl r7
    97c0:	275e0600 	ldrbcs	r0, [lr, -r0, lsl #12]
    97c4:	06020000 	streq	r0, [r2], -r0
    97c8:	000026ce 	andeq	r2, r0, lr, asr #13
    97cc:	250e0604 	strcs	r0, [lr, #-1540]	; 0xfffff9fc
    97d0:	00080000 	andeq	r0, r8, r0
    97d4:	0026ba03 	eoreq	fp, r6, r3, lsl #20
    97d8:	81680200 	cmnhi	r8, r0, lsl #4
    97dc:	05000000 	streq	r0, [r0, #-0]
    97e0:	daa50201 	ble	fe949fec <_estack+0xde944fec>
    97e4:	06000000 	streq	r0, [r0], -r0
    97e8:	000027d4 	ldrdeq	r2, [r0], -r4
    97ec:	2526067f 	strcs	r0, [r6, #-1663]!	; 0xfffff981
    97f0:	06000000 	streq	r0, [r0], -r0
    97f4:	00002885 	andeq	r2, r0, r5, lsl #17
    97f8:	27120601 	ldrcs	r0, [r2, -r1, lsl #12]
    97fc:	06020000 	streq	r0, [r2], -r0
    9800:	00002877 	andeq	r2, r0, r7, ror r8
    9804:	260b0603 	strcs	r0, [fp], -r3, lsl #12
    9808:	00040000 	andeq	r0, r4, r0
    980c:	00289103 	eoreq	r9, r8, r3, lsl #2
    9810:	adac0200 	sfmge	f0, 4, [ip]
    9814:	07000000 	streq	r0, [r0, -r0]
    9818:	013d0201 	teqeq	sp, r1, lsl #4
    981c:	00000125 	andeq	r0, r0, r5, lsr #2
    9820:	0026e806 	eoreq	lr, r6, r6, lsl #16
    9824:	d6067f00 	strle	r7, [r6], -r0, lsl #30
    9828:	00000025 	andeq	r0, r0, r5, lsr #32
    982c:	00263206 	eoreq	r3, r6, r6, lsl #4
    9830:	6e060100 	adfvss	f0, f6, f0
    9834:	02000026 	andeq	r0, r0, #38	; 0x26
    9838:	0027b906 	eoreq	fp, r7, r6, lsl #18
    983c:	32060300 	andcc	r0, r6, #0, 6
    9840:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    9844:	0025fa06 	eoreq	pc, r5, r6, lsl #20
    9848:	93060500 	movwls	r0, #25856	; 0x6500
    984c:	06000027 	streq	r0, [r0], -r7, lsr #32
    9850:	0027a606 	eoreq	sl, r7, r6, lsl #12
    9854:	08000700 	stmdaeq	r0, {r8, r9, sl}
    9858:	000025be 			; <UNDEFINED> instruction: 0x000025be
    985c:	e5014702 	str	r4, [r1, #-1794]	; 0xfffff8fe
    9860:	07000000 	streq	r0, [r0, -r0]
    9864:	01590201 	cmpeq	r9, r1, lsl #4
    9868:	0000015f 	andeq	r0, r0, pc, asr r1
    986c:	00265f06 	eoreq	r5, r6, r6, lsl #30
    9870:	88067f00 	stmdahi	r6, {r8, r9, sl, fp, ip, sp, lr}
    9874:	00000026 	andeq	r0, r0, r6, lsr #32
    9878:	00270406 	eoreq	r0, r7, r6, lsl #8
    987c:	4b060100 	blmi	189c84 <__ccfg+0x169cdc>
    9880:	02000025 	andeq	r0, r0, #37	; 0x25
    9884:	00276e06 	eoreq	r6, r7, r6, lsl #28
    9888:	21060300 	mrscs	r0, LR_und
    988c:	04000026 	streq	r0, [r0], #-38	; 0xffffffda
    9890:	25e70800 	strbcs	r0, [r7, #2048]!	; 0x800
    9894:	60020000 	andvs	r0, r2, r0
    9898:	00013101 	andeq	r3, r1, r1, lsl #2
    989c:	02010700 	andeq	r0, r1, #0, 14
    98a0:	019901b8 			; <UNDEFINED> instruction: 0x019901b8
    98a4:	9e060000 	cdpls	0, 0, cr0, cr6, cr0, {0}
    98a8:	7f000026 	svcvc	0x00000026
    98ac:	0027ca06 	eoreq	ip, r7, r6, lsl #20
    98b0:	2f060a00 	svccs	0x00060a00
    98b4:	14000027 	strne	r0, [r0], #-39	; 0xffffffd9
    98b8:	00275406 	eoreq	r5, r7, r6, lsl #8
    98bc:	fa061500 	blx	18ecc4 <__ccfg+0x16ed1c>
    98c0:	16000026 	strne	r0, [r0], -r6, lsr #32
    98c4:	00278006 	eoreq	r8, r7, r6
    98c8:	08001700 	stmdaeq	r0, {r8, r9, sl, ip}
    98cc:	000025c9 	andeq	r2, r0, r9, asr #11
    98d0:	6b01bf02 	blvs	794e0 <__ccfg+0x59538>
    98d4:	09000001 	stmdbeq	r0, {r0}
    98d8:	00002810 	andeq	r2, r0, r0, lsl r8
    98dc:	76010702 	strvc	r0, [r1], -r2, lsl #14
    98e0:	03000000 	movweq	r0, #0
    98e4:	00255d0a 	eoreq	r5, r5, sl, lsl #26
    98e8:	016a0200 	cmneq	sl, r0, lsl #4
    98ec:	0000015f 	andeq	r0, r0, pc, asr r1
    98f0:	0001da01 	andeq	sp, r1, r1, lsl #20
    98f4:	26960b00 	ldrcs	r0, [r6], r0, lsl #22
    98f8:	68010000 	stmdavs	r1, {}	; <UNPREDICTABLE>
    98fc:	0000015f 	andeq	r0, r0, pc, asr r1
    9900:	0025430b 	eoreq	r4, r5, fp, lsl #6
    9904:	76690100 	strbtvc	r0, [r9], -r0, lsl #2
    9908:	00000000 	andeq	r0, r0, r0
    990c:	0028be09 	eoreq	fp, r8, r9, lsl #28
    9910:	01320200 	teqeq	r2, r0, lsl #4
    9914:	00000076 	andeq	r0, r0, r6, ror r0
    9918:	28500c03 	ldmdacs	r0, {r0, r1, sl, fp}^
    991c:	72020000 	andvc	r0, r2, #0
    9920:	000000a2 	andeq	r0, r0, r2, lsr #1
    9924:	00000000 	andeq	r0, r0, r0
    9928:	00000010 	andeq	r0, r0, r0, lsl r0
    992c:	7a0d9c01 	bvc	370938 <__ccfg+0x350990>
    9930:	02000025 	andeq	r0, r0, #37	; 0x25
    9934:	0000dab6 			; <UNDEFINED> instruction: 0x0000dab6
    9938:	00000000 	andeq	r0, r0, r0
    993c:	00001800 	andeq	r1, r0, r0, lsl #16
    9940:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    9944:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    9948:	000025b5 			; <UNDEFINED> instruction: 0x000025b5
    994c:	00da5201 	sbcseq	r5, sl, r1, lsl #4
    9950:	3c620000 	stclcc	0, cr0, [r2], #-0
    9954:	0f000000 	svceq	0x00000000
    9958:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    995c:	00002a3c 	andeq	r2, r0, ip, lsr sl
    9960:	0000004c 	andeq	r0, r0, ip, asr #32
    9964:	026e9c01 	rsbeq	r9, lr, #256	; 0x100
    9968:	c3100000 	tstgt	r0, #0
    996c:	8a000001 	bhi	9978 <__exidx_end+0x6b80>
    9970:	1000003c 	andne	r0, r0, ip, lsr r0
    9974:	000001ce 	andeq	r0, r0, lr, asr #3
    9978:	00003caa 	andeq	r3, r0, sl, lsr #25
    997c:	002a4c11 	eoreq	r4, sl, r1, lsl ip
    9980:	00000e00 	andeq	r0, r0, r0, lsl #28
    9984:	01c31200 	biceq	r1, r3, r0, lsl #4
    9988:	ce120000 	cdpgt	0, 1, cr0, cr2, cr0, {0}
    998c:	13000001 	movwne	r0, #1
    9990:	000001a5 	andeq	r0, r0, r5, lsr #3
    9994:	00002a4c 	andeq	r2, r0, ip, asr #20
    9998:	00000004 	andeq	r0, r0, r4
    999c:	00007001 	andeq	r7, r0, r1
    99a0:	00273914 	eoreq	r3, r7, r4, lsl r9
    99a4:	01510200 	cmpeq	r1, r0, lsl #4
    99a8:	00000125 	andeq	r0, r0, r5, lsr #2
    99ac:	00000000 	andeq	r0, r0, r0
    99b0:	00000030 	andeq	r0, r0, r0, lsr r0
    99b4:	02ca9c01 	sbceq	r9, sl, #256	; 0x100
    99b8:	8a0e0000 	bhi	3899c0 <__ccfg+0x369a18>
    99bc:	01000027 	tsteq	r0, r7, lsr #32
    99c0:	00012585 	andeq	r2, r1, r5, lsl #11
    99c4:	003cde00 	eorseq	sp, ip, r0, lsl #28
    99c8:	28040b00 	stmdacs	r4, {r8, r9, fp}
    99cc:	86010000 	strhi	r0, [r1], -r0
    99d0:	00000076 	andeq	r0, r0, r6, ror r0
    99d4:	0026ac0e 	eoreq	sl, r6, lr, lsl #24
    99d8:	76870100 	strvc	r0, [r7], r0, lsl #2
    99dc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    99e0:	1300003c 	movwne	r0, #60	; 0x3c
    99e4:	000001da 	ldrdeq	r0, [r0], -sl
    99e8:	00000000 	andeq	r0, r0, r0
    99ec:	00000004 	andeq	r0, r0, r4
    99f0:	00158601 	andseq	r8, r5, r1, lsl #12
    99f4:	b2000000 	andlt	r0, r0, #0
    99f8:	00000001 	andeq	r0, r0, r1
    99fc:	00282e16 	eoreq	r2, r8, r6, lsl lr
    9a00:	01190200 	tsteq	r9, r0, lsl #4
    9a04:	00000076 	andeq	r0, r0, r6, ror r0
    9a08:	0002e803 	andeq	lr, r2, r3, lsl #16
    9a0c:	26181700 	ldrcs	r1, [r8], -r0, lsl #14
    9a10:	1b020000 	blne	89a18 <__ccfg+0x69a70>
    9a14:	00007601 	andeq	r7, r0, r1, lsl #12
    9a18:	98140000 	ldmdals	r4, {}	; <UNPREDICTABLE>
    9a1c:	02000025 	andeq	r0, r0, #37	; 0x25
    9a20:	019901c9 	orrseq	r0, r9, r9, asr #3
    9a24:	2a880000 	bcs	fe209a2c <_estack+0xde204a2c>
    9a28:	006c0000 	rsbeq	r0, ip, r0
    9a2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    9a30:	00000365 	andeq	r0, r0, r5, ror #6
    9a34:	0025f40e 	eoreq	pc, r5, lr, lsl #8
    9a38:	99a80100 	stmibls	r8!, {r8}
    9a3c:	11000001 	tstne	r0, r1
    9a40:	0b00003d 	bleq	9b3c <__exidx_end+0x6d44>
    9a44:	0000267f 	andeq	r2, r0, pc, ror r6
    9a48:	0076a901 	rsbseq	sl, r6, r1, lsl #18
    9a4c:	45180000 	ldrmi	r0, [r8, #-0]
    9a50:	01000028 	tsteq	r0, r8, lsr #32
    9a54:	000076aa 	andeq	r7, r0, sl, lsr #13
    9a58:	19540100 	ldmdbne	r4, {r8}^
    9a5c:	000001a5 	andeq	r0, r0, r5, lsr #3
    9a60:	00002a8a 	andeq	r2, r0, sl, lsl #21
    9a64:	00000f58 	andeq	r0, r0, r8, asr pc
    9a68:	ca1aa901 	bgt	6b3e74 <__ccfg+0x693ecc>
    9a6c:	8e000002 	cdphi	0, 0, cr0, cr0, cr2, {0}
    9a70:	7000002a 	andvc	r0, r0, sl, lsr #32
    9a74:	0100000f 	tsteq	r0, pc
    9a78:	00035baa 	andeq	r5, r3, sl, lsr #23
    9a7c:	0f701b00 	svceq	0x00701b00
    9a80:	db100000 	blle	409a88 <__ccfg+0x3e9ae0>
    9a84:	6e000002 	cdpvs	0, 0, cr0, cr0, cr2, {0}
    9a88:	0000003d 	andeq	r0, r0, sp, lsr r0
    9a8c:	2aa21500 	bcs	fe88ee94 <_estack+0xde889e94>
    9a90:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9a94:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    9a98:	00002643 	andeq	r2, r0, r3, asr #12
    9a9c:	72018302 	andvc	r8, r1, #134217728	; 0x8000000
    9aa0:	03000003 	movweq	r0, #3
    9aa4:	c6020102 	strgt	r0, [r2], -r2, lsl #2
    9aa8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    9aac:	0000289f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
    9ab0:	7201f002 	andvc	pc, r1, #2
    9ab4:	03000003 	movweq	r0, #3
    9ab8:	001ac71c 	andseq	ip, sl, ip, lsl r7
    9abc:	02430200 	subeq	r0, r3, #0, 4
    9ac0:	00002af4 	strdeq	r2, [r0], -r4
    9ac4:	00000016 	andeq	r0, r0, r6, lsl r0
    9ac8:	651d9c01 	ldrvs	r9, [sp, #-3073]	; 0xfffff3ff
    9acc:	f6000003 			; <UNDEFINED> instruction: 0xf6000003
    9ad0:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    9ad4:	01000000 	mrseq	r0, (UNDEF: 0)
    9ad8:	0003b5e2 	andeq	fp, r3, r2, ror #11
    9adc:	2afa1500 	bcs	ffe8eee4 <_estack+0xdfe89ee4>
    9ae0:	01b20000 			; <UNDEFINED> instruction: 0x01b20000
    9ae4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    9ae8:	00000379 	andeq	r0, r0, r9, ror r3
    9aec:	00002afe 	strdeq	r2, [r0], -lr
    9af0:	00000004 	andeq	r0, r0, r4
    9af4:	0215e301 	andseq	lr, r5, #67108864	; 0x4000000
    9af8:	e800002b 	stmda	r0, {r0, r1, r3, r5}
    9afc:	00000002 	andeq	r0, r0, r2
    9b00:	05a70000 	streq	r0, [r7, #0]!
    9b04:	00040000 	andeq	r0, r4, r0
    9b08:	00002e93 	muleq	r0, r3, lr
    9b0c:	165e0104 	ldrbne	r0, [lr], -r4, lsl #2
    9b10:	96010000 	strls	r0, [r1], -r0
    9b14:	53000029 	movwpl	r0, #41	; 0x29
    9b18:	c0000017 	andgt	r0, r0, r7, lsl r0
    9b1c:	0000000f 	andeq	r0, r0, pc
    9b20:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    9b24:	02000067 	andeq	r0, r0, #103	; 0x67
    9b28:	03740601 	cmneq	r4, #1048576	; 0x100000
    9b2c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    9b30:	03000022 	movweq	r0, #34	; 0x22
    9b34:	0000371d 	andeq	r3, r0, sp, lsl r7
    9b38:	08010200 	stmdaeq	r1, {r9}
    9b3c:	00000372 	andeq	r0, r0, r2, ror r3
    9b40:	d0050202 	andle	r0, r5, r2, lsl #4
    9b44:	03000003 	movweq	r0, #3
    9b48:	000020f6 	strdeq	r2, [r0], -r6
    9b4c:	00502b03 	subseq	r2, r0, r3, lsl #22
    9b50:	02020000 	andeq	r0, r2, #0
    9b54:	00023007 	andeq	r3, r2, r7
    9b58:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9b5c:	000000a4 	andeq	r0, r0, r4, lsr #1
    9b60:	0017bf03 	andseq	fp, r7, r3, lsl #30
    9b64:	69410300 	stmdbvs	r1, {r8, r9}^
    9b68:	02000000 	andeq	r0, r0, #0
    9b6c:	00790704 	rsbseq	r0, r9, r4, lsl #14
    9b70:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    9b74:	00009f05 	andeq	r9, r0, r5, lsl #30
    9b78:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9b7c:	00000074 	andeq	r0, r0, r4, ror r0
    9b80:	69050404 	stmdbvs	r5, {r2, sl}
    9b84:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    9b88:	007e0704 	rsbseq	r0, lr, r4, lsl #14
    9b8c:	0a030000 	beq	c9b94 <__ccfg+0xa9bec>
    9b90:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    9b94:	00002c14 	andeq	r2, r0, r4, lsl ip
    9b98:	20f80300 	rscscs	r0, r8, r0, lsl #6
    9b9c:	1a040000 	bne	109ba4 <__ccfg+0xe9bfc>
    9ba0:	00000045 	andeq	r0, r0, r5, asr #32
    9ba4:	0017c103 	andseq	ip, r7, r3, lsl #2
    9ba8:	5e200400 	cdppl	4, 2, cr0, cr0, cr0, {0}
    9bac:	05000000 	streq	r0, [r0, #-0]
    9bb0:	0000290f 	andeq	r2, r0, pc, lsl #18
    9bb4:	e6038901 	str	r8, [r3], -r1, lsl #18
    9bb8:	06000000 	streq	r0, [r0], -r0
    9bbc:	000028f1 	strdeq	r2, [r0], -r1
    9bc0:	00a28901 	adceq	r8, r2, r1, lsl #18
    9bc4:	62060000 	andvs	r0, r6, #0
    9bc8:	01000029 	tsteq	r0, r9, lsr #32
    9bcc:	0000a289 	andeq	sl, r0, r9, lsl #5
    9bd0:	29d20600 	ldmibcs	r2, {r9, sl}^
    9bd4:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9bd8:	000000a2 	andeq	r0, r0, r2, lsr #1
    9bdc:	0029c607 	eoreq	ip, r9, r7, lsl #12
    9be0:	e68c0100 	str	r0, [ip], r0, lsl #2
    9be4:	00000000 	andeq	r0, r0, r0
    9be8:	c6020102 	strgt	r0, [r2], -r2, lsl #2
    9bec:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    9bf0:	00002970 	andeq	r2, r0, r0, ror r9
    9bf4:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9bf8:	2a030000 	bcs	c9c00 <__ccfg+0xa9c58>
    9bfc:	06000001 	streq	r0, [r0], -r1
    9c00:	000028f1 	strdeq	r2, [r0], -r1
    9c04:	00a2a901 	adceq	sl, r2, r1, lsl #18
    9c08:	d2060000 	andle	r0, r6, #0
    9c0c:	01000029 	tsteq	r0, r9, lsr #32
    9c10:	0000a2a9 	andeq	sl, r0, r9, lsr #5
    9c14:	290a0700 	stmdbcs	sl, {r8, r9, sl}
    9c18:	ab010000 	blge	49c20 <__ccfg+0x29c78>
    9c1c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c20:	0029c607 	eoreq	ip, r9, r7, lsl #12
    9c24:	e6ad0100 	strt	r0, [sp], r0, lsl #2
    9c28:	00000000 	andeq	r0, r0, r0
    9c2c:	0000ad09 	andeq	sl, r0, r9, lsl #26
    9c30:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    9c34:	00002800 	andeq	r2, r0, r0, lsl #16
    9c38:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    9c3c:	0a000001 	beq	9c48 <__exidx_end+0x6e50>
    9c40:	000000b9 	strheq	r0, [r0], -r9
    9c44:	00003d81 	andeq	r3, r0, r1, lsl #27
    9c48:	0000c40a 	andeq	ip, r0, sl, lsl #8
    9c4c:	003dc600 	eorseq	ip, sp, r0, lsl #12
    9c50:	00da0b00 	sbcseq	r0, sl, r0, lsl #22
    9c54:	3e0b0000 	cdpcc	0, 0, cr0, cr11, cr0, {0}
    9c58:	cf0c0000 	svcgt	0x000c0000
    9c5c:	04000000 	streq	r0, [r0], #-0
    9c60:	002b160d 	eoreq	r1, fp, sp, lsl #12
    9c64:	00059400 	andeq	r9, r5, r0, lsl #8
    9c68:	2b2e0e00 	blcs	b8d470 <__ccfg+0xb6d4c8>
    9c6c:	059f0000 	ldreq	r0, [pc]	; 9c74 <__exidx_end+0x6e7c>
    9c70:	0f000000 	svceq	0x00000000
    9c74:	00001cf9 	strdeq	r1, [r0], -r9
    9c78:	3401ca01 	strcc	ip, [r1], #-2561	; 0xfffff5ff
    9c7c:	0800002b 	stmdaeq	r0, {r0, r1, r3, r5}
    9c80:	01000000 	mrseq	r0, (UNDEF: 0)
    9c84:	0001d19c 	muleq	r1, ip, r1
    9c88:	073f1000 	ldreq	r1, [pc, -r0]!
    9c8c:	42020000 	andmi	r0, r2, #0
    9c90:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c94:	00003e31 	andeq	r3, r0, r1, lsr lr
    9c98:	0028d110 	eoreq	sp, r8, r0, lsl r1
    9c9c:	a2420200 	subge	r0, r2, #0, 4
    9ca0:	52000000 	andpl	r0, r0, #0
    9ca4:	1000003e 	andne	r0, r0, lr, lsr r0
    9ca8:	00002968 	andeq	r2, r0, r8, ror #18
    9cac:	00a24302 	adceq	r4, r2, r2, lsl #6
    9cb0:	3e730000 	cdpcc	0, 7, cr0, cr3, cr0, {0}
    9cb4:	3c110000 	ldccc	0, cr0, [r1], {-0}
    9cb8:	2a00002b 	bcs	9d6c <__exidx_end+0x6f74>
    9cbc:	12000001 	andne	r0, r0, #1
    9cc0:	f3035101 	vrhadd.u8	d5, d3, d1
    9cc4:	01125201 	tsteq	r2, r1, lsl #4
    9cc8:	01f30750 	mvnseq	r0, r0, asr r7
    9ccc:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    9cd0:	0f000022 	svceq	0x00000022
    9cd4:	00002982 	andeq	r2, r0, r2, lsl #19
    9cd8:	0001df01 	andeq	sp, r1, r1, lsl #30
    9cdc:	22000000 	andcs	r0, r0, #0
    9ce0:	01000000 	mrseq	r0, (UNDEF: 0)
    9ce4:	0002ea9c 	muleq	r2, ip, sl
    9ce8:	073f1000 	ldreq	r1, [pc, -r0]!
    9cec:	57020000 	strpl	r0, [r2, -r0]
    9cf0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9cf4:	00003e94 	muleq	r0, r4, lr
    9cf8:	0028d110 	eoreq	sp, r8, r0, lsl r1
    9cfc:	a2570200 	subsge	r0, r7, #0, 4
    9d00:	b5000000 	strlt	r0, [r0, #-0]
    9d04:	1000003e 	andne	r0, r0, lr, lsr r0
    9d08:	000029b1 			; <UNDEFINED> instruction: 0x000029b1
    9d0c:	00a25802 	adceq	r5, r2, r2, lsl #16
    9d10:	3ed60000 	cdpcc	0, 13, cr0, cr6, cr0, {0}
    9d14:	2b100000 	blcs	409d1c <__ccfg+0x3e9d74>
    9d18:	02000029 	andeq	r0, r0, #41	; 0x29
    9d1c:	0000a258 	andeq	sl, r0, r8, asr r2
    9d20:	003f2100 	eorseq	r2, pc, r0, lsl #2
    9d24:	29ba1300 	ldmibcs	sl!, {r8, r9, ip}
    9d28:	5a020000 	bpl	89d30 <__ccfg+0x69d88>
    9d2c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d30:	00003f42 	andeq	r3, r0, r2, asr #30
    9d34:	00293613 	eoreq	r3, r9, r3, lsl r6
    9d38:	a25b0200 	subsge	r0, fp, #0, 4
    9d3c:	d6000000 	strle	r0, [r0], -r0
    9d40:	1100003f 	tstne	r0, pc, lsr r0
    9d44:	00000000 	andeq	r0, r0, r0
    9d48:	0000012a 	andeq	r0, r0, sl, lsr #2
    9d4c:	45510112 	ldrbmi	r0, [r1, #-274]	; 0xfffffeee
    9d50:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9d54:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9d58:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9d5c:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9d60:	13160001 	tstne	r6, #1
    9d64:	f3302440 	vshl.u64	q1, q0, q0
    9d68:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9d6c:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    9d70:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9d74:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    9d78:	f3131600 	vmax.u16	d1, d3, d0
    9d7c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    9d80:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    9d84:	0001282e 	andeq	r2, r1, lr, lsr #16
    9d88:	01f31316 	mvnseq	r1, r6, lsl r3
    9d8c:	28293053 	stmdacs	r9!, {r0, r1, r4, r6, ip, sp}
    9d90:	13160001 	tstne	r6, #1
    9d94:	50011221 	andpl	r1, r1, r1, lsr #4
    9d98:	5101f351 	tstpl	r1, r1, asr r3	; <UNPREDICTABLE>
    9d9c:	01f32431 	mvnseq	r2, r1, lsr r4
    9da0:	80232250 	eorhi	r2, r3, r0, asr r2
    9da4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9da8:	01f32431 	mvnseq	r2, r1, lsr r4
    9dac:	01f32250 	mvnseq	r2, r0, asr r2
    9db0:	30254052 	eorcc	r4, r5, r2, asr r0
    9db4:	00012829 	andeq	r2, r1, r9, lsr #16
    9db8:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    9dbc:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9dc0:	01f32431 	mvnseq	r2, r1, lsr r4
    9dc4:	80232250 	eorhi	r2, r3, r0, asr r2
    9dc8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    9dcc:	01f32431 	mvnseq	r2, r1, lsr r4
    9dd0:	01f32250 	mvnseq	r2, r0, asr r2
    9dd4:	30254052 	eorcc	r4, r5, r2, asr r0
    9dd8:	00012829 	andeq	r2, r1, r9, lsr #16
    9ddc:	01f31316 	mvnseq	r1, r6, lsl r3
    9de0:	30254052 	eorcc	r4, r5, r2, asr r0
    9de4:	0001282e 	andeq	r2, r1, lr, lsr #16
    9de8:	00001316 	andeq	r1, r0, r6, lsl r3
    9dec:	0029490f 	eoreq	r4, r9, pc, lsl #18
    9df0:	01f60100 	mvnseq	r0, r0, lsl #2
    9df4:	00000000 	andeq	r0, r0, r0
    9df8:	0000002e 	andeq	r0, r0, lr, lsr #32
    9dfc:	041f9c01 	ldreq	r9, [pc], #-3073	; 9e04 <__exidx_end+0x700c>
    9e00:	3f100000 	svccc	0x00100000
    9e04:	02000007 	andeq	r0, r0, #7
    9e08:	0000a283 	andeq	sl, r0, r3, lsl #5
    9e0c:	00402200 	subeq	r2, r0, r0, lsl #4
    9e10:	28d11000 	ldmcs	r1, {ip}^
    9e14:	83020000 	movwhi	r0, #8192	; 0x2000
    9e18:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e1c:	00004043 	andeq	r4, r0, r3, asr #32
    9e20:	0029b110 	eoreq	fp, r9, r0, lsl r1
    9e24:	a2840200 	addge	r0, r4, #0, 4
    9e28:	64000000 	strvs	r0, [r0], #-0
    9e2c:	10000040 	andne	r0, r0, r0, asr #32
    9e30:	0000293f 	andeq	r2, r0, pc, lsr r9
    9e34:	00a28402 	adceq	r8, r2, r2, lsl #8
    9e38:	40b50000 	adcsmi	r0, r5, r0
    9e3c:	36100000 	ldrcc	r0, [r0], -r0
    9e40:	02000029 	andeq	r0, r0, #41	; 0x29
    9e44:	00009785 	andeq	r9, r0, r5, lsl #15
    9e48:	00410600 	subeq	r0, r1, r0, lsl #12
    9e4c:	29ba1300 	ldmibcs	sl!, {r8, r9, ip}
    9e50:	87020000 	strhi	r0, [r2, -r0]
    9e54:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e58:	00004126 	andeq	r4, r0, r6, lsr #2
    9e5c:	00292b13 	eoreq	r2, r9, r3, lsl fp
    9e60:	a2880200 	addge	r0, r8, #0, 4
    9e64:	cc000000 	stcgt	0, cr0, [r0], {-0}
    9e68:	11000041 	tstne	r0, r1, asr #32
    9e6c:	00000000 	andeq	r0, r0, r0
    9e70:	0000012a 	andeq	r0, r0, sl, lsr #2
    9e74:	40510112 	subsmi	r0, r1, r2, lsl r1
    9e78:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9e7c:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    9e80:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9e84:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9e88:	8000000f 	andhi	r0, r0, pc
    9e8c:	0001282b 	andeq	r2, r1, fp, lsr #16
    9e90:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
    9e94:	0294007d 	addseq	r0, r4, #125	; 0x7d
    9e98:	1affff0a 	bne	9ac8 <__exidx_end+0x6cd0>
    9e9c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9ea0:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    9ea4:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    9ea8:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    9eac:	8000000f 	andhi	r0, r0, pc
    9eb0:	0001282b 	andeq	r2, r1, fp, lsr #16
    9eb4:	21241316 			; <UNDEFINED> instruction: 0x21241316
    9eb8:	63500112 	cmpvs	r0, #-2147483644	; 0x80000004
    9ebc:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ec0:	5001f324 	andpl	pc, r1, r4, lsr #6
    9ec4:	04802322 	streq	r2, [r0], #802	; 0x322
    9ec8:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ecc:	5001f324 	andpl	pc, r1, r4, lsr #6
    9ed0:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    9ed4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9ed8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9edc:	01282c80 	smlawbeq	r8, r0, ip, r2
    9ee0:	23131600 	tstcs	r3, #0, 12
    9ee4:	01f30484 	mvnseq	r0, r4, lsl #9
    9ee8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9eec:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9ef0:	01f30480 	mvnseq	r0, r0, lsl #9
    9ef4:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9ef8:	f3225001 	vhadd.u32	d5, d2, d1
    9efc:	4b405301 	blmi	101eb08 <__ccfg+0xffeb60>
    9f00:	0f0c2224 	svceq	0x000c2224
    9f04:	2c800000 	stccs	0, cr0, [r0], {0}
    9f08:	16000128 	strne	r0, [r0], -r8, lsr #2
    9f0c:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    9f10:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f14:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f18:	01282b80 	smlawbeq	r8, r0, fp, r2
    9f1c:	00131600 	andseq	r1, r3, r0, lsl #12
    9f20:	28f71400 	ldmcs	r7!, {sl, ip}^
    9f24:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    9f28:	00009702 	andeq	r9, r0, r2, lsl #14
    9f2c:	00000000 	andeq	r0, r0, r0
    9f30:	00003400 	andeq	r3, r0, r0, lsl #8
    9f34:	d29c0100 	addsle	r0, ip, #0, 2
    9f38:	10000004 	andne	r0, r0, r4
    9f3c:	0000073f 	andeq	r0, r0, pc, lsr r7
    9f40:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9f44:	422c0000 	eormi	r0, ip, #0
    9f48:	d1100000 	tstle	r0, r0
    9f4c:	02000028 	andeq	r0, r0, #40	; 0x28
    9f50:	0000a2af 	andeq	sl, r0, pc, lsr #5
    9f54:	00424d00 	subeq	r4, r2, r0, lsl #26
    9f58:	29b11000 	ldmibcs	r1!, {ip}
    9f5c:	af020000 	svcge	0x00020000
    9f60:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f64:	0000426e 	andeq	r4, r0, lr, ror #4
    9f68:	0029ba13 	eoreq	fp, r9, r3, lsl sl
    9f6c:	a2b10200 	adcsge	r0, r1, #0, 4
    9f70:	ab000000 	blge	9f78 <__exidx_end+0x7180>
    9f74:	13000042 	movwne	r0, #66	; 0x42
    9f78:	00002922 	andeq	r2, r0, r2, lsr #18
    9f7c:	0097b202 	addseq	fp, r7, r2, lsl #4
    9f80:	42e50000 	rscmi	r0, r5, #0
    9f84:	ed150000 	ldc	0, cr0, [r5, #-0]
    9f88:	00000000 	andeq	r0, r0, r0
    9f8c:	1a000000 	bne	9f94 <__exidx_end+0x719c>
    9f90:	02000000 	andeq	r0, r0, #0
    9f94:	01080cca 	smlabteq	r8, sl, ip, r0
    9f98:	0a020000 	beq	89fa0 <__ccfg+0x69ff8>
    9f9c:	000000fd 	strdeq	r0, [r0], -sp
    9fa0:	000042fd 	strdeq	r4, [r0], -sp
    9fa4:	00000016 	andeq	r0, r0, r6, lsl r0
    9fa8:	00001a00 	andeq	r1, r0, r0, lsl #20
    9fac:	01130b00 	tsteq	r3, r0, lsl #22
    9fb0:	43370000 	teqmi	r7, #0
    9fb4:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    9fb8:	50000001 	andpl	r0, r0, r1
    9fbc:	0d000043 	stceq	0, cr0, [r0, #-268]	; 0xfffffef4
    9fc0:	00000000 	andeq	r0, r0, r0
    9fc4:	00000594 	muleq	r0, r4, r5
    9fc8:	0000000d 	andeq	r0, r0, sp
    9fcc:	00059f00 	andeq	r9, r5, r0, lsl #30
    9fd0:	00000000 	andeq	r0, r0, r0
    9fd4:	0028d914 	eoreq	sp, r8, r4, lsl r9
    9fd8:	021d0100 	andseq	r0, sp, #0, 2
    9fdc:	00000097 	muleq	r0, r7, r0
    9fe0:	00000000 	andeq	r0, r0, r0
    9fe4:	00000040 	andeq	r0, r0, r0, asr #32
    9fe8:	05949c01 	ldreq	r9, [r4, #3073]	; 0xc01
    9fec:	3f100000 	svccc	0x00100000
    9ff0:	02000007 	andeq	r0, r0, #7
    9ff4:	0000a2dd 	ldrdeq	sl, [r0], -sp
    9ff8:	00436700 	subeq	r6, r3, r0, lsl #14
    9ffc:	28d11000 	ldmcs	r1, {ip}^
    a000:	dd020000 	stcle	0, cr0, [r2, #-0]
    a004:	000000a2 	andeq	r0, r0, r2, lsr #1
    a008:	00004388 	andeq	r4, r0, r8, lsl #7
    a00c:	0029b110 	eoreq	fp, r9, r0, lsl r1
    a010:	a2de0200 	sbcsge	r0, lr, #0, 4
    a014:	a9000000 	stmdbge	r0, {}	; <UNPREDICTABLE>
    a018:	10000043 	andne	r0, r0, r3, asr #32
    a01c:	0000293f 	andeq	r2, r0, pc, lsr r9
    a020:	00a2de02 	adceq	sp, r2, r2, lsl #28
    a024:	43ec0000 	mvnmi	r0, #0
    a028:	ba130000 	blt	4ca030 <__ccfg+0x4aa088>
    a02c:	02000029 	andeq	r0, r0, #41	; 0x29
    a030:	0000a2e0 	andeq	sl, r0, r0, ror #5
    a034:	00442f00 	subeq	r2, r4, r0, lsl #30
    a038:	29221300 	stmdbcs	r2!, {r8, r9, ip}
    a03c:	e1020000 	mrs	r0, (UNDEF: 2)
    a040:	00000097 	muleq	r0, r7, r0
    a044:	0000448a 	andeq	r4, r0, sl, lsl #9
    a048:	0000ed15 	andeq	lr, r0, r5, lsl sp
    a04c:	00000000 	andeq	r0, r0, r0
    a050:	00001a00 	andeq	r1, r0, r0, lsl #20
    a054:	0cfa0200 	lfmeq	f0, 2, [sl]
    a058:	00000108 	andeq	r0, r0, r8, lsl #2
    a05c:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
    a060:	44ad0000 	strtmi	r0, [sp], #0
    a064:	00160000 	andseq	r0, r6, r0
    a068:	1a000000 	bne	a070 <__exidx_end+0x7278>
    a06c:	0b000000 	bleq	a074 <__exidx_end+0x727c>
    a070:	00000113 	andeq	r0, r0, r3, lsl r1
    a074:	000044ed 	andeq	r4, r0, sp, ror #9
    a078:	00011e0b 	andeq	r1, r1, fp, lsl #28
    a07c:	00450600 	subeq	r0, r5, r0, lsl #12
    a080:	00000d00 	andeq	r0, r0, r0, lsl #26
    a084:	05940000 	ldreq	r0, [r4]
    a088:	000d0000 	andeq	r0, sp, r0
    a08c:	9f000000 	svcls	0x00000000
    a090:	00000005 	andeq	r0, r0, r5
    a094:	c1170000 	tstgt	r7, r0
    a098:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
    a09c:	0000a26a 	andeq	sl, r0, sl, ror #4
    a0a0:	18d01700 	ldmne	r0, {r8, r9, sl, ip}^
    a0a4:	84050000 	strhi	r0, [r5], #-0
    a0a8:	000000a2 	andeq	r0, r0, r2, lsr #1
    a0ac:	0008bf00 	andeq	fp, r8, r0, lsl #30
    a0b0:	e7000400 	str	r0, [r0, -r0, lsl #8]
    a0b4:	0400002f 	streq	r0, [r0], #-47	; 0xffffffd1
    a0b8:	00165e01 	andseq	r5, r6, r1, lsl #28
    a0bc:	2a5f0100 	bcs	17ca4c4 <__ccfg+0x17aa51c>
    a0c0:	17530000 	ldrbne	r0, [r3, -r0]
    a0c4:	10100000 	andsne	r0, r0, r0
    a0c8:	00000000 	andeq	r0, r0, r0
    a0cc:	6a000000 	bvs	a0d4 <__exidx_end+0x72dc>
    a0d0:	01020000 	mrseq	r0, (UNDEF: 2)
    a0d4:	00037406 	andeq	r7, r3, r6, lsl #8
    a0d8:	22080300 	andcs	r0, r8, #0, 6
    a0dc:	1d030000 	stcne	0, cr0, [r3, #-0]
    a0e0:	00000037 	andeq	r0, r0, r7, lsr r0
    a0e4:	72080102 	andvc	r0, r8, #-2147483648	; 0x80000000
    a0e8:	03000003 	movweq	r0, #3
    a0ec:	00002c75 	andeq	r2, r0, r5, ror ip
    a0f0:	00492903 	subeq	r2, r9, r3, lsl #18
    a0f4:	02020000 	andeq	r0, r2, #0
    a0f8:	0003d005 	andeq	sp, r3, r5
    a0fc:	20f60300 	rscscs	r0, r6, r0, lsl #6
    a100:	2b030000 	blcs	ca108 <__ccfg+0xaa160>
    a104:	0000005b 	andeq	r0, r0, fp, asr r0
    a108:	30070202 	andcc	r0, r7, r2, lsl #4
    a10c:	03000002 	movweq	r0, #2
    a110:	00001654 	andeq	r1, r0, r4, asr r6
    a114:	006d3f03 	rsbeq	r3, sp, r3, lsl #30
    a118:	04020000 	streq	r0, [r2], #-0
    a11c:	0000a405 	andeq	sl, r0, r5, lsl #8
    a120:	17bf0300 	ldrne	r0, [pc, r0, lsl #6]!
    a124:	41030000 	mrsmi	r0, (UNDEF: 3)
    a128:	0000007f 	andeq	r0, r0, pc, ror r0
    a12c:	79070402 	stmdbvc	r7, {r1, sl}
    a130:	02000000 	andeq	r0, r0, #0
    a134:	009f0508 	addseq	r0, pc, r8, lsl #10
    a138:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    a13c:	00007407 	andeq	r7, r0, r7, lsl #8
    a140:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    a144:	00746e69 	rsbseq	r6, r4, r9, ror #28
    a148:	7e070402 	cdpvc	4, 0, cr0, cr7, cr2, {0}
    a14c:	03000000 	movweq	r0, #0
    a150:	0000220a 	andeq	r2, r0, sl, lsl #4
    a154:	002c1404 	eoreq	r1, ip, r4, lsl #8
    a158:	77030000 	strvc	r0, [r3, -r0]
    a15c:	0400002c 	streq	r0, [r0], #-44	; 0xffffffd4
    a160:	00003e19 	andeq	r3, r0, r9, lsl lr
    a164:	20f80300 	rscscs	r0, r8, r0, lsl #6
    a168:	1a040000 	bne	10a170 <__ccfg+0xea1c8>
    a16c:	00000050 	andeq	r0, r0, r0, asr r0
    a170:	00165603 	andseq	r5, r6, r3, lsl #12
    a174:	621f0400 	andsvs	r0, pc, #0, 8
    a178:	03000000 	movweq	r0, #0
    a17c:	000017c1 	andeq	r1, r0, r1, asr #15
    a180:	00742004 	rsbseq	r2, r4, r4
    a184:	e1030000 	mrs	r0, (UNDEF: 3)
    a188:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    a18c:	0000e433 	andeq	lr, r0, r3, lsr r4
    a190:	ea040500 	b	10b598 <__ccfg+0xeb5f0>
    a194:	06000000 	streq	r0, [r0], -r0
    a198:	00f10405 	rscseq	r0, r1, r5, lsl #8
    a19c:	fc070000 	stc2	0, cr0, [r7], {-0}
    a1a0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a1a4:	000000a2 	andeq	r0, r0, r2, lsr #1
    a1a8:	23570300 	cmpcs	r7, #0, 6
    a1ac:	42060000 	andmi	r0, r6, #0
    a1b0:	00000107 	andeq	r0, r0, r7, lsl #2
    a1b4:	010d0405 	tsteq	sp, r5, lsl #8
    a1b8:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a1bc:	26000000 	strcs	r0, [r0], -r0
    a1c0:	08000001 	stmdaeq	r0, {r0}
    a1c4:	00000126 	andeq	r0, r0, r6, lsr #2
    a1c8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a1cc:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    a1d0:	05000000 	streq	r0, [r0, #-0]
    a1d4:	0000a204 	andeq	sl, r0, r4, lsl #4
    a1d8:	24800300 	strcs	r0, [r0], #768	; 0x300
    a1dc:	46060000 	strmi	r0, [r6], -r0
    a1e0:	00000137 	andeq	r0, r0, r7, lsr r1
    a1e4:	013d0405 	teqeq	sp, r5, lsl #8
    a1e8:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    a1ec:	03000000 	movweq	r0, #0
    a1f0:	000024ec 	andeq	r2, r0, ip, ror #9
    a1f4:	01374806 	teqeq	r7, r6, lsl #16
    a1f8:	32030000 	andcc	r0, r3, #0
    a1fc:	06000022 	streq	r0, [r0], -r2, lsr #32
    a200:	0001584a 	andeq	r5, r1, sl, asr #16
    a204:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    a208:	09000001 	stmdbeq	r0, {r0}
    a20c:	000000ce 	andeq	r0, r0, lr, asr #1
    a210:	0000016d 	andeq	r0, r0, sp, ror #2
    a214:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a218:	98030000 	stmdals	r3, {}	; <UNPREDICTABLE>
    a21c:	06000021 	streq	r0, [r0], -r1, lsr #32
    a220:	0001374c 	andeq	r3, r1, ip, asr #14
    a224:	21010300 	mrscs	r0, SP_irq
    a228:	4e060000 	cdpmi	0, 0, cr0, cr6, cr0, {0}
    a22c:	00000107 	andeq	r0, r0, r7, lsl #2
    a230:	00218803 	eoreq	r8, r1, r3, lsl #16
    a234:	e4510600 	ldrb	r0, [r1], #-1536	; 0xfffffa00
    a238:	03000000 	movweq	r0, #0
    a23c:	00002004 	andeq	r2, r0, r4
    a240:	01995306 	orrseq	r5, r9, r6, lsl #6
    a244:	04050000 	streq	r0, [r5], #-0
    a248:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    a24c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a250:	0001b800 	andeq	fp, r1, r0, lsl #16
    a254:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    a258:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    a25c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a260:	000000b8 	strheq	r0, [r0], -r8
    a264:	b8040500 	stmdalt	r4, {r8, sl}
    a268:	03000000 	movweq	r0, #0
    a26c:	0000237b 	andeq	r2, r0, fp, ror r3
    a270:	01c95706 	biceq	r5, r9, r6, lsl #14
    a274:	04050000 	streq	r0, [r5], #-0
    a278:	000001cf 	andeq	r0, r0, pc, asr #3
    a27c:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a280:	0001e300 	andeq	lr, r1, r0, lsl #6
    a284:	01e30800 	mvneq	r0, r0, lsl #16
    a288:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a28c:	00000000 	andeq	r0, r0, r0
    a290:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    a294:	bb030000 	bllt	ca29c <__ccfg+0xaa2f4>
    a298:	06000021 	streq	r0, [r0], -r1, lsr #32
    a29c:	0001c95a 	andeq	ip, r1, sl, asr r9
    a2a0:	22840300 	addcs	r0, r4, #0, 6
    a2a4:	5d060000 	stcpl	0, cr0, [r6, #-0]
    a2a8:	000001c9 	andeq	r0, r0, r9, asr #3
    a2ac:	00201603 	eoreq	r1, r0, r3, lsl #12
    a2b0:	c9600600 	stmdbgt	r0!, {r9, sl}^
    a2b4:	03000001 	movweq	r0, #1
    a2b8:	000023a6 	andeq	r2, r0, r6, lsr #7
    a2bc:	00e46306 	rsceq	r6, r4, r6, lsl #6
    a2c0:	3c030000 	stccc	0, cr0, [r3], {-0}
    a2c4:	06000020 	streq	r0, [r0], -r0, lsr #32
    a2c8:	00022065 	andeq	r2, r2, r5, rrx
    a2cc:	26040500 	strcs	r0, [r4], -r0, lsl #10
    a2d0:	07000002 	streq	r0, [r0, -r2]
    a2d4:	00000231 	andeq	r0, r0, r1, lsr r2
    a2d8:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a2dc:	fd030000 	stc2	0, cr0, [r3, #-0]
    a2e0:	06000024 	streq	r0, [r0], -r4, lsr #32
    a2e4:	00022067 	andeq	r2, r2, r7, rrx
    a2e8:	22f20300 	rscscs	r0, r2, #0, 6
    a2ec:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    a2f0:	000000eb 	andeq	r0, r0, fp, ror #1
    a2f4:	0024cb03 	eoreq	ip, r4, r3, lsl #22
    a2f8:	eb6b0600 	bl	1acbb00 <__ccfg+0x1aabb58>
    a2fc:	03000000 	movweq	r0, #0
    a300:	000022a0 	andeq	r2, r0, r0, lsr #5
    a304:	00eb6d06 	rsceq	r6, fp, r6, lsl #26
    a308:	b2030000 	andlt	r0, r3, #0
    a30c:	06000022 	streq	r0, [r0], -r2, lsr #32
    a310:	0000eb6f 	andeq	lr, r0, pc, ror #22
    a314:	064c0b00 	strbeq	r0, [ip], -r0, lsl #22
    a318:	0003557a 	andeq	r5, r3, sl, ror r5
    a31c:	22560c00 	subscs	r0, r6, #0, 24
    a320:	7c060000 	stcvc	0, cr0, [r6], {-0}
    a324:	000000fc 	strdeq	r0, [r0], -ip
    a328:	24be0c00 	ldrtcs	r0, [lr], #3072	; 0xc00
    a32c:	7d060000 	stcvc	0, cr0, [r6, #-0]
    a330:	0000012c 	andeq	r0, r0, ip, lsr #2
    a334:	227a0c04 	rsbscs	r0, sl, #4, 24	; 0x400
    a338:	7e060000 	cdpvc	0, 0, cr0, cr6, cr0, {0}
    a33c:	00000142 	andeq	r0, r0, r2, asr #2
    a340:	23e50c08 	mvncs	r0, #8, 24	; 0x800
    a344:	7f060000 	svcvc	0x00060000
    a348:	0000014d 	andeq	r0, r0, sp, asr #2
    a34c:	23f70c0c 	mvnscs	r0, #12, 24	; 0xc00
    a350:	80060000 	andhi	r0, r6, r0
    a354:	0000016d 	andeq	r0, r0, sp, ror #2
    a358:	24090c10 	strcs	r0, [r9], #-3088	; 0xfffff3f0
    a35c:	81060000 	mrshi	r0, (UNDEF: 6)
    a360:	00000178 	andeq	r0, r0, r8, ror r1
    a364:	21540c14 	cmpcs	r4, r4, lsl ip
    a368:	82060000 	andhi	r0, r6, #0
    a36c:	00000183 	andeq	r0, r0, r3, lsl #3
    a370:	226f0c18 	rsbcs	r0, pc, #24, 24	; 0x1800
    a374:	83060000 	movwhi	r0, #24576	; 0x6000
    a378:	0000018e 	andeq	r0, r0, lr, lsl #3
    a37c:	23c00c1c 	biccs	r0, r0, #28, 24	; 0x1c00
    a380:	84060000 	strhi	r0, [r6], #-0
    a384:	000001be 			; <UNDEFINED> instruction: 0x000001be
    a388:	21f70c20 	mvnscs	r0, r0, lsr #24
    a38c:	85060000 	strhi	r0, [r6, #-0]
    a390:	000001e9 	andeq	r0, r0, r9, ror #3
    a394:	22120c24 	andscs	r0, r2, #36, 24	; 0x2400
    a398:	86060000 	strhi	r0, [r6], -r0
    a39c:	000001f4 	strdeq	r0, [r0], -r4
    a3a0:	242d0c28 	strtcs	r0, [sp], #-3112	; 0xfffff3d8
    a3a4:	87060000 	strhi	r0, [r6, -r0]
    a3a8:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    a3ac:	21a90c2c 			; <UNDEFINED> instruction: 0x21a90c2c
    a3b0:	88060000 	stmdahi	r6, {}	; <UNPREDICTABLE>
    a3b4:	00000215 	andeq	r0, r0, r5, lsl r2
    a3b8:	241b0c30 	ldrcs	r0, [fp], #-3120	; 0xfffff3d0
    a3bc:	89060000 	stmdbhi	r6, {}	; <UNPREDICTABLE>
    a3c0:	00000231 	andeq	r0, r0, r1, lsr r2
    a3c4:	225c0c34 	subscs	r0, ip, #52, 24	; 0x3400
    a3c8:	8a060000 	bhi	18a3d0 <__ccfg+0x16a428>
    a3cc:	0000020a 	andeq	r0, r0, sl, lsl #4
    a3d0:	22d00c38 	sbcscs	r0, r0, #56, 24	; 0x3800
    a3d4:	8b060000 	blhi	18a3dc <__ccfg+0x16a434>
    a3d8:	0000023c 	andeq	r0, r0, ip, lsr r2
    a3dc:	23d60c3c 	bicscs	r0, r6, #60, 24	; 0x3c00
    a3e0:	8c060000 	stchi	0, cr0, [r6], {-0}
    a3e4:	00000247 	andeq	r0, r0, r7, asr #4
    a3e8:	21d10c40 	bicscs	r0, r1, r0, asr #24
    a3ec:	8d060000 	stchi	0, cr0, [r6, #-0]
    a3f0:	00000252 	andeq	r0, r0, r2, asr r2
    a3f4:	202d0c44 	eorcs	r0, sp, r4, asr #24
    a3f8:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    a3fc:	0000025d 	andeq	r0, r0, sp, asr r2
    a400:	31030048 	tstcc	r3, r8, asr #32
    a404:	06000023 	streq	r0, [r0], -r3, lsr #32
    a408:	0002688f 	andeq	r6, r2, pc, lsl #17
    a40c:	01140b00 	tsteq	r4, r0, lsl #22
    a410:	0003a554 	andeq	sl, r3, r4, asr r5
    a414:	2a470c00 	bcs	11cd41c <__ccfg+0x11ad474>
    a418:	55010000 	strpl	r0, [r1, #-0]
    a41c:	000000ce 	andeq	r0, r0, lr, asr #1
    a420:	2bac0c00 	blcs	feb0d428 <_estack+0xdeb08428>
    a424:	56010000 	strpl	r0, [r1], -r0
    a428:	000000ce 	andeq	r0, r0, lr, asr #1
    a42c:	29e00c04 	stmibcs	r0!, {r2, sl, fp}^
    a430:	57010000 	strpl	r0, [r1, -r0]
    a434:	000000ce 	andeq	r0, r0, lr, asr #1
    a438:	2a7a0c08 	bcs	1e8d460 <__ccfg+0x1e6d4b8>
    a43c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    a440:	000000ce 	andeq	r0, r0, lr, asr #1
    a444:	2a100c0c 	bcs	40d47c <__ccfg+0x3ed4d4>
    a448:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    a44c:	000000c3 	andeq	r0, r0, r3, asr #1
    a450:	d7030010 	smladle	r3, r0, r0, r0
    a454:	0100002b 	tsteq	r0, fp, lsr #32
    a458:	0003605a 	andeq	r6, r3, sl, asr r0
    a45c:	1b1b0d00 	blne	6cd864 <__ccfg+0x6ad8bc>
    a460:	f9020000 			; <UNDEFINED> instruction: 0xf9020000
    a464:	0003d301 	andeq	sp, r3, r1, lsl #6
    a468:	2bfa0e00 	blcs	ffe8dc70 <_estack+0xdfe88c70>
    a46c:	65010000 	strvs	r0, [r1, #-0]
    a470:	000000ce 	andeq	r0, r0, lr, asr #1
    a474:	0029d80e 	eoreq	sp, r9, lr, lsl #16
    a478:	ce650100 	powgts	f0, f5, f0
    a47c:	00000000 	andeq	r0, r0, r0
    a480:	001eb60f 	andseq	fp, lr, pc, lsl #12
    a484:	01100200 	tsteq	r0, r0, lsl #4
    a488:	000000ce 	andeq	r0, r0, lr, asr #1
    a48c:	0003fb01 	andeq	pc, r3, r1, lsl #22
    a490:	2bfa0e00 	blcs	ffe8dc98 <_estack+0xdfe88c98>
    a494:	a0010000 	andge	r0, r1, r0
    a498:	000000ce 	andeq	r0, r0, lr, asr #1
    a49c:	002c6510 	eoreq	r6, ip, r0, lsl r5
    a4a0:	cea20100 	fdvgts	f0, f2, f0
    a4a4:	00000000 	andeq	r0, r0, r0
    a4a8:	0003b011 	andeq	fp, r3, r1, lsl r0
    a4ac:	002b3c00 	eoreq	r3, fp, r0, lsl #24
    a4b0:	00005c00 	andeq	r5, r0, r0, lsl #24
    a4b4:	b69c0100 	ldrlt	r0, [ip], r0, lsl #2
    a4b8:	12000004 	andne	r0, r0, #4
    a4bc:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
    a4c0:	0000451d 	andeq	r4, r0, sp, lsl r5
    a4c4:	0003c712 	andeq	ip, r3, r2, lsl r7
    a4c8:	00454900 	subeq	r4, r5, r0, lsl #18
    a4cc:	2b761300 	blcs	1d8f0d4 <__ccfg+0x1d6f12c>
    a4d0:	00140000 	andseq	r0, r4, r0
    a4d4:	04610000 	strbteq	r0, [r1], #-0
    a4d8:	bc120000 	ldclt	0, cr0, [r2], {-0}
    a4dc:	75000003 	strvc	r0, [r0, #-3]
    a4e0:	12000045 	andne	r0, r0, #69	; 0x45
    a4e4:	000003c7 	andeq	r0, r0, r7, asr #7
    a4e8:	00004588 	andeq	r4, r0, r8, lsl #11
    a4ec:	002b8a14 	eoreq	r8, fp, r4, lsl sl
    a4f0:	00740200 	rsbseq	r0, r4, r0, lsl #4
    a4f4:	01530115 	cmpeq	r3, r5, lsl r1
    a4f8:	52011532 	andpl	r1, r1, #209715200	; 0xc800000
    a4fc:	01153c01 	tsteq	r5, r1, lsl #24
    a500:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a504:	0c055001 	stceq	0, cr5, [r5], {1}
    a508:	400ca000 	andmi	sl, ip, r0
    a50c:	5a160000 	bpl	58a514 <__ccfg+0x56a56c>
    a510:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a514:	048d0076 	streq	r0, [sp], #118	; 0x76
    a518:	01150000 	tsteq	r5, r0
    a51c:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    a520:	31015201 	tstcc	r1, r1, lsl #4
    a524:	01510115 	cmpeq	r1, r5, lsl r1
    a528:	50011530 	andpl	r1, r1, r0, lsr r5
    a52c:	a0000c05 	andge	r0, r0, r5, lsl #24
    a530:	0215400c 	andseq	r4, r5, #12
    a534:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    a538:	72140000 	andsvc	r0, r4, #0
    a53c:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a540:	01150076 	tsteq	r5, r6, ror r0
    a544:	15310153 	ldrne	r0, [r1, #-339]!	; 0xfffffead
    a548:	32015201 	andcc	r5, r1, #268435456	; 0x10000000
    a54c:	01510115 	cmpeq	r1, r5, lsl r1
    a550:	50011530 	andpl	r1, r1, r0, lsr r5
    a554:	a0000c05 	andge	r0, r0, r5, lsl #24
    a558:	0215400c 	andseq	r4, r5, #12
    a55c:	7402007d 	strvc	r0, [r2], #-125	; 0xffffff83
    a560:	11000000 	mrsne	r0, (UNDEF: 0)
    a564:	000003d3 	ldrdeq	r0, [r0], -r3
    a568:	00002b98 	muleq	r0, r8, fp
    a56c:	0000002c 	andeq	r0, r0, ip, lsr #32
    a570:	050d9c01 	streq	r9, [sp, #-3073]	; 0xfffff3ff
    a574:	e4120000 	ldr	r0, [r2], #-0
    a578:	a9000003 	stmdbge	r0, {r0, r1}
    a57c:	17000045 	strne	r0, [r0, -r5, asr #32]
    a580:	000003ef 	andeq	r0, r0, pc, ror #7
    a584:	f8185001 			; <UNDEFINED> instruction: 0xf8185001
    a588:	f400000f 	vst4.8	{d0-d3}, [r0]
    a58c:	19000004 	stmdbne	r0, {r2}
    a590:	000003e4 	andeq	r0, r0, r4, ror #7
    a594:	0ff81a04 	svceq	0x00f81a04
    a598:	ef1b0000 	svc	0x001b0000
    a59c:	00000003 	andeq	r0, r0, r3
    a5a0:	2bb81400 	blcs	fee0f5a8 <_estack+0xdee0a5a8>
    a5a4:	74020000 	strvc	r0, [r2], #-0
    a5a8:	51011500 	tstpl	r1, r0, lsl #10
    a5ac:	15340802 	ldrne	r0, [r4, #-2050]!	; 0xfffff7fe
    a5b0:	0c055001 	stceq	0, cr5, [r5], {1}
    a5b4:	400ca000 	andmi	sl, ip, r0
    a5b8:	e01c0000 	ands	r0, ip, r0
    a5bc:	0200002c 	andeq	r0, r0, #44	; 0x2c
    a5c0:	00ce0184 	sbceq	r0, lr, r4, lsl #3
    a5c4:	00000000 	andeq	r0, r0, r0
    a5c8:	00900000 	addseq	r0, r0, r0
    a5cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    a5d0:	00000576 	andeq	r0, r0, r6, ror r5
    a5d4:	002be61d 	eoreq	lr, fp, sp, lsl r6
    a5d8:	cec20100 	polgts	f0, f2, f0
    a5dc:	ca000000 	bgt	a5e4 <__exidx_end+0x77ec>
    a5e0:	1e000045 	cdpne	0, 0, cr0, cr0, cr5, {2}
    a5e4:	00002b64 	andeq	r2, r0, r4, ror #22
    a5e8:	00cec401 	sbceq	ip, lr, r1, lsl #8
    a5ec:	45f60000 	ldrbmi	r0, [r6, #0]!
    a5f0:	7d1e0000 	ldcvc	0, cr0, [lr, #-0]
    a5f4:	0100002b 	tsteq	r0, fp, lsr #32
    a5f8:	0000c3c5 	andeq	ip, r0, r5, asr #7
    a5fc:	00460900 	subeq	r0, r6, r0, lsl #18
    a600:	2a1c1e00 	bcs	711e08 <__ccfg+0x6f1e60>
    a604:	c6010000 	strgt	r0, [r1], -r0
    a608:	000000ce 	andeq	r0, r0, lr, asr #1
    a60c:	00004630 	andeq	r4, r0, r0, lsr r6
    a610:	0000001f 	andeq	r0, r0, pc, lsl r0
    a614:	00089e00 	andeq	r9, r8, r0, lsl #28
    a618:	00001f00 	andeq	r1, r0, r0, lsl #30
    a61c:	08aa0000 	stmiaeq	sl!, {}	; <UNPREDICTABLE>
    a620:	20000000 	andcs	r0, r0, r0
    a624:	00002aa3 	andeq	r2, r0, r3, lsr #21
    a628:	00019102 	andeq	r9, r1, r2, lsl #2
    a62c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    a630:	01000000 	mrseq	r0, (UNDEF: 0)
    a634:	0005ae9c 	muleq	r5, ip, lr
    a638:	00002100 	andeq	r2, r0, r0, lsl #2
    a63c:	03b00000 	movseq	r0, #0
    a640:	05a40000 	streq	r0, [r4, #0]!
    a644:	01150000 	tsteq	r5, r0
    a648:	15310151 	ldrne	r0, [r1, #-337]!	; 0xfffffeaf
    a64c:	33015001 	movwcc	r5, #4097	; 0x1001
    a650:	00001f00 	andeq	r1, r0, r0, lsl #30
    a654:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a658:	22000000 	andcs	r0, r0, #0
    a65c:	00002bbb 			; <UNDEFINED> instruction: 0x00002bbb
    a660:	bb012202 	bllt	52e70 <__ccfg+0x32ec8>
    a664:	03000005 	movweq	r0, #5
    a668:	c6020102 	strgt	r0, [r2], -r2, lsl #2
    a66c:	2300000b 	movwcs	r0, #11
    a670:	00002345 	andeq	r2, r0, r5, asr #6
    a674:	03014002 	movweq	r4, #4098	; 0x1002
    a678:	0029ee1c 	eoreq	lr, r9, ip, lsl lr
    a67c:	01a10200 			; <UNDEFINED> instruction: 0x01a10200
    a680:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
    a684:	00000000 	andeq	r0, r0, r0
    a688:	00000060 	andeq	r0, r0, r0, rrx
    a68c:	06779c01 	ldrbteq	r9, [r7], -r1, lsl #24
    a690:	9c240000 	stcls	0, cr0, [r4], #-0
    a694:	0100002b 	tsteq	r0, fp, lsr #32
    a698:	00ce0102 	sbceq	r0, lr, r2, lsl #2
    a69c:	46840000 	strmi	r0, [r4], r0
    a6a0:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    a6a4:	0100002c 	tsteq	r0, ip, lsr #32
    a6a8:	00ce0103 	sbceq	r0, lr, r3, lsl #2
    a6ac:	46970000 	ldrmi	r0, [r7], r0
    a6b0:	ae250000 	cdpge	0, 2, cr0, cr5, cr0, {0}
    a6b4:	00000005 	andeq	r0, r0, r5
    a6b8:	10000000 	andne	r0, r0, r0
    a6bc:	01000000 	mrseq	r0, (UNDEF: 0)
    a6c0:	063c0109 	ldrteq	r0, [ip], -r9, lsl #2
    a6c4:	00140000 	andseq	r0, r4, r0
    a6c8:	02000000 	andeq	r0, r0, #0
    a6cc:	01150074 	tsteq	r5, r4, ror r0
    a6d0:	15300153 	ldrne	r0, [r0, #-339]!	; 0xfffffead
    a6d4:	31015201 	tstcc	r1, r1, lsl #4
    a6d8:	02510115 	subseq	r0, r1, #1073741829	; 0x40000005
    a6dc:	01153408 	tsteq	r5, r8, lsl #8
    a6e0:	000c0550 	andeq	r0, ip, r0, asr r5
    a6e4:	00400ca0 	subeq	r0, r0, r0, lsr #25
    a6e8:	05c22500 	strbeq	r2, [r2, #1280]	; 0x500
    a6ec:	00000000 	andeq	r0, r0, r0
    a6f0:	00080000 	andeq	r0, r8, r0
    a6f4:	0a010000 	beq	4a6fc <__ccfg+0x2a754>
    a6f8:	00065a01 	andeq	r5, r6, r1, lsl #20
    a6fc:	00001f00 	andeq	r1, r0, r0, lsl #30
    a700:	08b50000 	ldmeq	r5!, {}	; <UNPREDICTABLE>
    a704:	21000000 	mrscs	r0, (UNDEF: 0)
    a708:	00000000 	andeq	r0, r0, r0
    a70c:	000003d3 	ldrdeq	r0, [r0], -r3
    a710:	0000066d 	andeq	r0, r0, sp, ror #12
    a714:	01500115 	cmpeq	r0, r5, lsl r1
    a718:	001f0031 	andseq	r0, pc, r1, lsr r0	; <UNPREDICTABLE>
    a71c:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a720:	00000008 	andeq	r0, r0, r8
    a724:	002ac320 	eoreq	ip, sl, r0, lsr #6
    a728:	01ae0200 			; <UNDEFINED> instruction: 0x01ae0200
    a72c:	00000000 	andeq	r0, r0, r0
    a730:	00000034 	andeq	r0, r0, r4, lsr r0
    a734:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
    a738:	c2250000 	eorgt	r0, r5, #0
    a73c:	00000005 	andeq	r0, r0, r5
    a740:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a744:	01000000 	mrseq	r0, (UNDEF: 0)
    a748:	06ab012f 	strteq	r0, [fp], pc, lsr #2
    a74c:	001f0000 	andseq	r0, pc, r0
    a750:	b5000000 	strlt	r0, [r0, #-0]
    a754:	00000008 	andeq	r0, r0, r8
    a758:	00000021 	andeq	r0, r0, r1, lsr #32
    a75c:	0003b000 	andeq	fp, r3, r0
    a760:	0006c300 	andeq	ip, r6, r0, lsl #6
    a764:	51011500 	tstpl	r1, r0, lsl #10
    a768:	01153001 	tsteq	r5, r1
    a76c:	00330150 	eorseq	r0, r3, r0, asr r1
    a770:	00000021 	andeq	r0, r0, r1, lsr #32
    a774:	0003d300 	andeq	sp, r3, r0, lsl #6
    a778:	0006d600 	andeq	sp, r6, r0, lsl #12
    a77c:	50011500 	andpl	r1, r1, r0, lsl #10
    a780:	1f003101 	svcne	0x00003101
    a784:	00000000 	andeq	r0, r0, r0
    a788:	0000089e 	muleq	r0, lr, r8
    a78c:	0000001f 	andeq	r0, r0, pc, lsl r0
    a790:	0008aa00 	andeq	sl, r8, r0, lsl #20
    a794:	e81c0000 	ldmda	ip, {}	; <UNPREDICTABLE>
    a798:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a79c:	00c301f2 	strdeq	r0, [r3], #18
    a7a0:	00000000 	andeq	r0, r0, r0
    a7a4:	00380000 	eorseq	r0, r8, r0
    a7a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    a7ac:	0000079a 	muleq	r0, sl, r7
    a7b0:	002c0526 	eoreq	r0, ip, r6, lsr #10
    a7b4:	013c0100 	teqeq	ip, r0, lsl #2
    a7b8:	000000c3 	andeq	r0, r0, r3, asr #1
    a7bc:	000046aa 	andeq	r4, r0, sl, lsr #13
    a7c0:	002b9227 	eoreq	r9, fp, r7, lsr #4
    a7c4:	013f0100 	teqeq	pc, r0, lsl #2
    a7c8:	000000ce 	andeq	r0, r0, lr, asr #1
    a7cc:	fb275101 	blx	9debda <__ccfg+0x9bec32>
    a7d0:	0100002c 	tsteq	r0, ip, lsr #32
    a7d4:	00c30141 	sbceq	r0, r3, r1, asr #2
    a7d8:	71050000 	mrsvc	r0, (UNDEF: 5)
    a7dc:	9f264000 	svcls	0x00264000
    a7e0:	002a2f27 	eoreq	r2, sl, r7, lsr #30
    a7e4:	01430100 	mrseq	r0, (UNDEF: 83)
    a7e8:	000000c3 	andeq	r0, r0, r3, asr #1
    a7ec:	40007107 	andmi	r7, r0, r7, lsl #2
    a7f0:	9f264824 	svcls	0x00264824
    a7f4:	002a3727 	eoreq	r3, sl, r7, lsr #14
    a7f8:	01450100 	mrseq	r0, (UNDEF: 85)
    a7fc:	000000c3 	andeq	r0, r0, r3, asr #1
    a800:	48007107 	stmdami	r0, {r0, r1, r2, r8, ip, sp, lr}
    a804:	9f264824 	svcls	0x00264824
    a808:	002a3f24 	eoreq	r3, sl, r4, lsr #30
    a80c:	01470100 	mrseq	r0, (UNDEF: 87)
    a810:	000000c3 	andeq	r0, r0, r3, asr #1
    a814:	000046d8 	ldrdeq	r4, [r0], -r8
    a818:	002a8c24 	eoreq	r8, sl, r4, lsr #24
    a81c:	01560100 	cmpeq	r6, r0, lsl #2
    a820:	000000c3 	andeq	r0, r0, r3, asr #1
    a824:	000046f1 	strdeq	r4, [r0], -r1
    a828:	002b3724 	eoreq	r3, fp, r4, lsr #14
    a82c:	01570100 	cmpeq	r7, r0, lsl #2
    a830:	000000c3 	andeq	r0, r0, r3, asr #1
    a834:	00004714 	andeq	r4, r0, r4, lsl r7
    a838:	01006428 	tsteq	r0, r8, lsr #8
    a83c:	00c30158 	sbceq	r0, r3, r8, asr r1
    a840:	473d0000 	ldrmi	r0, [sp, -r0]!
    a844:	1c000000 	stcne	0, cr0, [r0], {-0}
    a848:	00002c29 	andeq	r2, r0, r9, lsr #24
    a84c:	ad020e02 	stcge	14, cr0, [r2, #-8]
    a850:	00000000 	andeq	r0, r0, r0
    a854:	0c000000 	stceq	0, cr0, [r0], {-0}
    a858:	01000000 	mrseq	r0, (UNDEF: 0)
    a85c:	0007d59c 	muleq	r7, ip, r5
    a860:	2b502600 	blcs	1414068 <__ccfg+0x13f40c0>
    a864:	63010000 	movwvs	r0, #4096	; 0x1000
    a868:	0000c301 	andeq	ip, r0, r1, lsl #6
    a86c:	0047b700 	subeq	fp, r7, r0, lsl #14
    a870:	2c7f2400 	cfldrdcs	mvd2, [pc], #-0	; a878 <__exidx_end+0x7a80>
    a874:	85010000 	strhi	r0, [r1, #-0]
    a878:	0000c301 	andeq	ip, r0, r1, lsl #6
    a87c:	0047d800 	subeq	sp, r7, r0, lsl #16
    a880:	121c0000 	andsne	r0, ip, #0
    a884:	0200002b 	andeq	r0, r0, #43	; 0x2b
    a888:	00ce01c2 	sbceq	r0, lr, r2, asr #3
    a88c:	00000000 	andeq	r0, r0, r0
    a890:	00340000 	eorseq	r0, r4, r0
    a894:	9c010000 	stcls	0, cr0, [r1], {-0}
    a898:	00000842 	andeq	r0, r0, r2, asr #16
    a89c:	002cd224 	eoreq	sp, ip, r4, lsr #4
    a8a0:	01920100 	orrseq	r0, r2, r0, lsl #2
    a8a4:	000000ce 	andeq	r0, r0, lr, asr #1
    a8a8:	00004818 	andeq	r4, r0, r8, lsl r8
    a8ac:	002c0e24 	eoreq	r0, ip, r4, lsr #28
    a8b0:	01930100 	orrseq	r0, r3, r0, lsl #2
    a8b4:	000000ce 	andeq	r0, r0, lr, asr #1
    a8b8:	0000483a 	andeq	r4, r0, sl, lsr r8
    a8bc:	0021e524 	eoreq	lr, r1, r4, lsr #10
    a8c0:	01940100 	orrseq	r0, r4, r0, lsl #2
    a8c4:	000000ce 	andeq	r0, r0, lr, asr #1
    a8c8:	0000484d 	andeq	r4, r0, sp, asr #16
    a8cc:	002aba24 	eoreq	fp, sl, r4, lsr #20
    a8d0:	01950100 	orrseq	r0, r5, r0, lsl #2
    a8d4:	000000ce 	andeq	r0, r0, lr, asr #1
    a8d8:	00004870 	andeq	r4, r0, r0, ror r8
    a8dc:	0000001f 	andeq	r0, r0, pc, lsl r0
    a8e0:	00089e00 	andeq	r9, r8, r0, lsl #28
    a8e4:	00001f00 	andeq	r1, r0, r0, lsl #30
    a8e8:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a8ec:	1c000000 	stcne	0, cr0, [r0], {-0}
    a8f0:	00002c9e 	muleq	r0, lr, ip
    a8f4:	ce01d302 	cdpgt	3, 0, cr13, cr1, cr2, {0}
    a8f8:	00000000 	andeq	r0, r0, r0
    a8fc:	1c000000 	stcne	0, cr0, [r0], {-0}
    a900:	01000000 	mrseq	r0, (UNDEF: 0)
    a904:	00088d9c 	muleq	r8, ip, sp
    a908:	2bcc2400 	blcs	ff313910 <_estack+0xdf30e910>
    a90c:	b7010000 	strlt	r0, [r1, -r0]
    a910:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a914:	00488c00 	subeq	r8, r8, r0, lsl #24
    a918:	2c902400 	cfldrscs	mvf2, [r0], {0}
    a91c:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
    a920:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a924:	00489f00 	subeq	r9, r8, r0, lsl #30
    a928:	2a962400 	bcs	fe593930 <_estack+0xde58e930>
    a92c:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
    a930:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a934:	0048ba00 	subeq	fp, r8, r0, lsl #20
    a938:	43290000 			; <UNDEFINED> instruction: 0x43290000
    a93c:	0100002b 	tsteq	r0, fp, lsr #32
    a940:	0003a55c 	andeq	sl, r3, ip, asr r5
    a944:	00030500 	andeq	r0, r3, r0, lsl #10
    a948:	2a000000 	bcs	a950 <__exidx_end+0x7b58>
    a94c:	000017d9 	ldrdeq	r1, [r0], -r9
    a950:	ce034507 	cfsh32gt	mvfx4, mvfx3, #7
    a954:	2b000000 	blcs	a95c <__exidx_end+0x7b64>
    a958:	00001625 	andeq	r1, r0, r5, lsr #12
    a95c:	00c3aa08 	sbceq	sl, r3, r8, lsl #20
    a960:	e92c0000 	stmdb	ip!, {}	; <UNPREDICTABLE>
    a964:	06000020 	streq	r0, [r0], -r0, lsr #32
    a968:	00d90899 	smullseq	r0, r9, r9, r8
    a96c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			i = k;
      40:	13490035 	movtne	r0, #36917	; 0x9035
				j->Next = k;
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
}
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0xecc>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
			wwait (st, 50);
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
			curr += 0x1000;
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
		if (from >= EE_SIZE || upto < from)
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
			upto = EE_SIZE - 1;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	0a020c3f 	beq	83224 <__ccfg+0x6327c>
     124:	34170000 	ldrcc	r0, [r7], #-0
            ch = redCharacter;
     128:	3a080300 	bcc	200d30 <__ccfg+0x1e0d88>
            onTime = redOn;
     12c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
            offTime = redOff;
     130:	3f13490b 	svccc	0x0013490b
     134:	000a020c 	andeq	r0, sl, ip, lsl #4
            ledFlag = 0;
     138:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
        if(On)
     13c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
     140:	0b3b0b3a 	bleq	ec2e30 <__ccfg+0xea2e88>
     144:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
            leds(led,1);
     148:	01120111 	tsteq	r2, r1, lsl r1
            leds(led,0);
     14c:	13010a40 	movwne	r0, #6720	; 0x1a40
     150:	05190000 	ldreq	r0, [r9, #-0]
     154:	3a0e0300 	bcc	380d5c <__ccfg+0x360db4>
     158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     15c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
        if (displayCycle)
     160:	1a000006 	bne	180 <_Min_Stack_Size+0x80>
     164:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
     16c:	01110b39 	tsteq	r1, r9, lsr fp
     170:	0b1b0000 	bleq	6c0178 <__ccfg+0x6a01d0>
        if(onTime > 0)
     174:	00065501 	andeq	r5, r6, r1, lsl #10
            delay(onTime, OFF_PERIOD);
     178:	00341c00 	eorseq	r1, r4, r0, lsl #24
        when(&On, Check_PERIOD);
     17c:	0b3a0e03 	bleq	e83990 <__ccfg+0xe639e8>
     180:	0b390b3b 	bleq	e42e74 <__ccfg+0xe22ecc>
        release;
     184:	0a021349 	beq	84eb0 <__ccfg+0x64f08>
            led = greenLed;
     188:	0b1d0000 	bleq	740190 <__ccfg+0x7201e8>
     18c:	01065501 	tsteq	r6, r1, lsl #10
            ch = greenCharacter;
     190:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
            onTime = greenOn;
     194:	0111010b 	tsteq	r1, fp, lsl #2
     198:	13010112 	movwne	r0, #4370	; 0x1112
            offTime = greenOff;
     19c:	341f0000 	ldrcc	r0, [pc], #-0	; 1a4 <_Min_Stack_Size+0xa4>
     1a0:	3a080300 	bcc	200da8 <__ccfg+0x1e0e00>
            leds(led,0);
     1a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1ac:	2000000a 	andcs	r0, r0, sl
     1b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     1b4:	06550152 			; <UNDEFINED> instruction: 0x06550152
        leds(led,0);
     1b8:	0b590b58 	bleq	1642f20 <__ccfg+0x1622f78>
     1bc:	13010b57 	movwne	r0, #6999	; 0x1b57
     1c0:	05210000 	streq	r0, [r1, #-0]!
     1c4:	00133100 	andseq	r3, r3, r0, lsl #2
     1c8:	011d2200 	tsteq	sp, r0, lsl #4
            proceed Check_PERIOD;
     1cc:	01521331 	cmpeq	r2, r1, lsr r3
}
     1d0:	0b580655 	bleq	1601b2c <__ccfg+0x15e1b84>
     1d4:	0b570b59 	bleq	15c2f40 <__ccfg+0x15a2f98>
     1d8:	34230000 	strtcc	r0, [r3], #-0
     1dc:	3a0e0300 	bcc	380de4 <__ccfg+0x360e3c>
     1e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     1e8:	24000006 	strcs	r0, [r0], #-6
     1ec:	08030034 	stmdaeq	r3, {r2, r4, r5}
     1f0:	0b3b0b3a 	bleq	ec2ee0 <__ccfg+0xea2f38>
     1f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     1f8:	1d250000 	stcne	0, cr0, [r5, #-0]
     1fc:	11133101 	tstne	r3, r1, lsl #2
     200:	58011201 	stmdapl	r1, {r0, r9, ip}
     204:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     208:	0013010b 	andseq	r0, r3, fp, lsl #2
     20c:	011d2600 	tsteq	sp, r0, lsl #12
     210:	01111331 	tsteq	r1, r1, lsr r3
     214:	0b580112 	bleq	1600664 <__ccfg+0x15e06bc>
     218:	0b570b59 	bleq	15c2f84 <__ccfg+0x15a2fdc>
     21c:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
     220:	3a0e0301 	bcc	380e2c <__ccfg+0x360e84>
    word number = 0;
     224:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    int numbersIndex = 0;
     228:	200c270b 	andcs	r2, ip, fp, lsl #14
     22c:	0013010b 	andseq	r0, r3, fp, lsl #2
        if(settingsInput[i] == ' ') {
     230:	00052800 	andeq	r2, r5, r0, lsl #16
     234:	0b3a0e03 	bleq	e83a48 <__ccfg+0xe63aa0>
            numbers[numbersIndex] = number;
     238:	0b39053b 	bleq	e4172c <__ccfg+0xe21784>
     23c:	00001349 	andeq	r1, r0, r9, asr #6
            number = 0;
     240:	03012e29 	movweq	r2, #7721	; 0x1e29
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	3b0b3a0e 	blcc	2cea84 <__ccfg+0x2aeadc>
    redOn = numbers[0];
     248:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     24c:	000b200c 	andeq	r2, fp, ip
    redOff = numbers[1];
     250:	11010000 	mrsne	r0, (UNDEF: 1)
     254:	130e2501 	movwne	r2, #58625	; 0xe501
    greenOn = numbers[2];
     258:	1b0e030b 	blne	380e8c <__ccfg+0x360ee4>
     25c:	1106550e 	tstne	r6, lr, lsl #10
    greenOff = numbers[3];
     260:	00061001 	andeq	r1, r6, r1
     264:	00240200 	eoreq	r0, r4, r0, lsl #4
}
     268:	0b3e0b0b 	bleq	f82e9c <__ccfg+0xf62ef4>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	00000e03 	andeq	r0, r0, r3, lsl #28
     270:	03001603 	movweq	r1, #1539	; 0x603
            number = number * 10;
     274:	3b0b3a0e 	blcc	2ceab4 <__ccfg+0x2aeb0c>
            number += settingsInput[i] - 48;
     278:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     27c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     280:	0b0b0024 	bleq	2c0318 <__ccfg+0x2a0370>
     284:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     288:	26050000 	strcs	r0, [r5], -r0
     28c:	00134900 	andseq	r4, r3, r0, lsl #18
fsm root {
     290:	00350600 	eorseq	r0, r5, r0, lsl #12
     294:	00001349 	andeq	r1, r0, r9, asr #6
     298:	0b000f07 	bleq	3ebc <__exidx_end+0x10c4>
     29c:	0013490b 	andseq	r4, r3, fp, lsl #18
     2a0:	01130800 	tsteq	r3, r0, lsl #16
     2a4:	0b3a0b0b 	bleq	e82ed8 <__ccfg+0xe62f30>
     2a8:	0b390b3b 	bleq	e42f9c <__ccfg+0xe22ff4>
        ser_outf(Initial, "Enter your name: ");
     2ac:	00001301 	andeq	r1, r0, r1, lsl #6
     2b0:	03000d09 	movweq	r0, #3337	; 0xd09
        ser_in(Get_Name, username, NAME_LENGTH);
     2b4:	3b0b3a0e 	blcc	2ceaf4 <__ccfg+0x2aeb4c>
     2b8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
        runfsm blinker;
     2bc:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     2c0:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	0a00000b 	beq	2f8 <root+0x68>
     2c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     2cc:	0b3b0b3a 	bleq	ec2fbc <__ccfg+0xea3014>
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	13490b39 	movtne	r0, #39737	; 0x9b39
     2d4:	00000b38 	andeq	r0, r0, r8, lsr fp
        if (choice == 'A' || choice == 'a'){
     2d8:	0300340b 	movweq	r3, #1035	; 0x40b
     2dc:	3b0b3a0e 	blcc	2ceb1c <__ccfg+0x2aeb74>
     2e0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
            proceed Adjust_Intervals;
     2e4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
            proceed Monitor;
     2e8:	0c00000c 	stceq	0, cr0, [r0], {12}
        proceed Show_Menu;
     2ec:	13490101 	movtne	r0, #37121	; 0x9101
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	00001301 	andeq	r1, r0, r1, lsl #6
     2f4:	0000210d 	andeq	r2, r0, sp, lsl #2
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	00160e00 	andseq	r0, r6, r0, lsl #28
     2fc:	0b3a0e03 	bleq	e83b10 <__ccfg+0xe63b68>
     300:	0b39053b 	bleq	e417f4 <__ccfg+0xe2184c>
        processSettingsInput(settings);
     304:	00001349 	andeq	r1, r0, r9, asr #6
        On = YES;
     308:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
     30c:	0013010c 	andseq	r0, r3, ip, lsl #2
        trigger(&On);
     310:	00051000 	andeq	r1, r5, r0
        proceed Show_Menu;
     314:	00001349 	andeq	r1, r0, r9, asr #6
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	03003411 	movweq	r3, #1041	; 0x411
     31c:	3b0b3a0e 	blcc	2ceb5c <__ccfg+0x2aebb4>
     320:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     324:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     328:	1200000c 	andne	r0, r0, #12
     32c:	0b0b0113 	bleq	2c0780 <__ccfg+0x2a07d8>
     330:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
        proceed Show_Menu;
     334:	13010b39 	movwne	r0, #6969	; 0x1b39
     338:	0d130000 	ldceq	0, cr0, [r3, #-0]
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	3a0e0300 	bcc	380f44 <__ccfg+0x360f9c>
     340:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        displayCycle = YES;
     344:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
        ser_inf(Await_Stop, "%c", &ch);
     348:	1400000b 	strne	r0, [r0], #-11
     34c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     350:	0b3a0b0b 	bleq	e82f84 <__ccfg+0xe62fdc>
        if(ch == 'S' || ch == 's'){
     354:	0b39053b 	bleq	e41848 <__ccfg+0xe218a0>
     358:	00001301 	andeq	r1, r0, r1, lsl #6
     35c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
            displayCycle = NO;
     360:	000b2f13 	andeq	r2, fp, r3, lsl pc
     364:	00341600 	eorseq	r1, r4, r0, lsl #12
            proceed Show_Menu;
     368:	0b3a0e03 	bleq	e83b7c <__ccfg+0xe63bd4>
        proceed Monitor;
     36c:	0b390b3b 	bleq	e43060 <__ccfg+0xe230b8>
        On = NO;
     370:	00001349 	andeq	r1, r0, r9, asr #6
     374:	03003417 	movweq	r3, #1047	; 0x417
     378:	3b0b3a0e 	blcc	2cebb8 <__ccfg+0x2aec10>
        leds(1, 0);
     37c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     380:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     384:	1800000a 	stmdane	r0, {r1, r3}
     388:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     38c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     390:	13490b39 	movtne	r0, #39737	; 0x9b39
        leds(0, 0);
     394:	00000a02 	andeq	r0, r0, r2, lsl #20
     398:	47003419 	smladmi	r0, r9, r4, r3
     39c:	3b0b3a13 	blcc	2cebf0 <__ccfg+0x2aec48>
        proceed Show_Menu;
     3a0:	020b3905 	andeq	r3, fp, #81920	; 0x14000
     3a4:	1a00000a 	bne	3d4 <root+0x144>
     3a8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2f8 <root+0x68>
     3ac:	0b3a0e03 	bleq	e83bc0 <__ccfg+0xe63c18>
        } else if (choice == 'S' || choice == 's') {
     3b0:	0b39053b 	bleq	e418a4 <__ccfg+0xe218fc>
            proceed Stop;
     3b4:	13490c27 	movtne	r0, #39975	; 0x9c27
        } else if (choice == 'V' || choice == 'v') {
     3b8:	01120111 	tsteq	r2, r1, lsl r1
            proceed View_Settings;
     3bc:	13010a40 	movwne	r0, #6720	; 0x1a40
        } else if (choice == 'M' || choice == 'm') {
     3c0:	0b1b0000 	bleq	6c03c8 <__ccfg+0x6a0420>
            proceed Monitor;
     3c4:	01065501 	tsteq	r6, r1, lsl #10
     3c8:	1c000013 	stcne	0, cr0, [r0], {19}
     3cc:	08030034 	stmdaeq	r3, {r2, r4, r5}
     3d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     3d4:	13490b39 	movtne	r0, #39737	; 0x9b39
     3d8:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
     3dc:	11133100 	tstne	r3, r0, lsl #2
     3e0:	58011201 	stmdapl	r1, {r0, r9, ip}
     3e4:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     3e8:	1e00000b 	cdpne	0, 0, cr0, cr0, cr11, {0}
     3ec:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 33c <root+0xac>
     3f0:	0b3a0e03 	bleq	e83c04 <__ccfg+0xe63c5c>
     3f4:	0b39053b 	bleq	e418e8 <__ccfg+0xe21940>
     3f8:	01120111 	tsteq	r2, r1, lsl r1
     3fc:	13010a40 	movwne	r0, #6720	; 0x1a40
     400:	0a1f0000 	beq	7c0408 <__ccfg+0x7a0460>
     404:	3a0e0300 	bcc	38100c <__ccfg+0x361064>
     408:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
static void devinit_uart (int devnum) {
     40c:	2000000b 	andcs	r0, r0, fp
	adddevfunc (ioreq_uart_a, devnum);
     410:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     414:	06550152 			; <UNDEFINED> instruction: 0x06550152
void udelay (volatile word n) {
     418:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     41c:	13010b57 	movwne	r0, #6999	; 0x1b57
	while (n) {
     420:	05210000 	streq	r0, [r1, #-0]!
     424:	00133100 	andseq	r3, r3, r0, lsl #2
}
     428:	011d2200 	tsteq	sp, r0, lsl #4
	while (n--);
     42c:	01521331 	cmpeq	r2, r1, lsr r3
     430:	0b580655 	bleq	1601d8c <__ccfg+0x15e1de4>
     434:	0b570b59 	bleq	15c31a0 <__ccfg+0x15a31f8>
		n--;
     438:	00001301 	andeq	r1, r0, r1, lsl #6
     43c:	55010b23 	strpl	r0, [r1, #-2851]	; 0xfffff4dd
     440:	24000006 	strcs	r0, [r0], #-6
void mdelay (volatile word n) {
     444:	1331000a 	teqne	r1, #10
     448:	00000111 	andeq	r0, r0, r1, lsl r1
	while (n) {
     44c:	31001d25 	tstcc	r0, r5, lsr #26
     450:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
}
     454:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
		udelay (999);
     458:	000b5705 	andeq	r5, fp, r5, lsl #14
     45c:	011d2600 	tsteq	sp, r0, lsl #12
		n--;
     460:	01111331 	tsteq	r1, r1, lsr r3
     464:	0b580112 	bleq	16008b4 <__ccfg+0x15e090c>
     468:	0b570559 	bleq	15c19d4 <__ccfg+0x15a1a2c>
     46c:	00001301 	andeq	r1, r0, r1, lsl #6
void __pi_ondomain (lword d) {
     470:	31011d27 	tstcc	r1, r7, lsr #26
     474:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		if (__pi_systat.effpdm > 1)
     478:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     47c:	000b5705 	andeq	r5, fp, r5, lsl #14
			__pi_systat.effpdm = 1;
     480:	001d2800 	andseq	r2, sp, r0, lsl #16
	PRCMPowerDomainOn (d);
     484:	01111331 	tsteq	r1, r1, lsr r3
     488:	0b580112 	bleq	16008d8 <__ccfg+0x15e0930>
     48c:	0b570b59 	bleq	15c31f8 <__ccfg+0x15a3250>
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	34290000 	strtcc	r0, [r9], #-0
     494:	3a080300 	bcc	20109c <__ccfg+0x1e10f4>
     498:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__pi_systat.ondmns |= d;
     49c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4a0:	2a000006 	bcs	4c0 <__pi_syserror+0x14>
}
     4a4:	0e03012e 	adfeqsp	f0, f3, #0.5
     4a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pi_syserror (word ec, const char *m) {
     4ac:	0b200b39 	bleq	803198 <__ccfg+0x7e31f0>
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	00001301 	andeq	r1, r0, r1, lsl #6
     4b4:	03000a2b 	movweq	r0, #2603	; 0xa2b
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	3b0b3a0e 	blcc	2cecf8 <__ccfg+0x2aed50>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4bc:	000b3905 	andeq	r3, fp, r5, lsl #18
     4c0:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
     4c4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		all_leds_blink;
     4c8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4cc:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     4d0:	01120111 	tsteq	r2, r1, lsl r1
     4d4:	13010a40 	movwne	r0, #6720	; 0x1a40
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	052d0000 	streq	r0, [sp, #-0]!
     4dc:	3a0e0300 	bcc	3810e4 <__ccfg+0x36113c>
     4e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     4e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4e8:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
     4ec:	0111010b 	tsteq	r1, fp, lsl #2
	while (1) {
     4f0:	13010112 	movwne	r0, #4370	; 0x1112
     4f4:	342f0000 	strtcc	r0, [pc], #-0	; 4fc <__pi_syserror+0x50>
     4f8:	00133100 	andseq	r3, r3, r0, lsl #2
     4fc:	010b3000 	mrseq	r3, (UNDEF: 11)
void tci_run_delay_timer () {
     500:	06551331 			; <UNDEFINED> instruction: 0x06551331
	setdel = __pi_mintk - __pi_old;
     504:	34310000 	ldrtcc	r0, [r1], #-0
     508:	02133100 	andseq	r3, r3, #0, 2
     50c:	32000006 	andcc	r0, r0, #6
     510:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	06550152 			; <UNDEFINED> instruction: 0x06550152
     518:	0b590b58 	bleq	1643280 <__ccfg+0x16232d8>
     51c:	00000b57 	andeq	r0, r0, r7, asr fp
     520:	31011d33 	tstcc	r1, r3, lsr sp
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	sti_tim;
     528:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
}
     52c:	000b5705 	andeq	r5, fp, r5, lsl #14
     530:	00053400 	andeq	r3, r5, r0, lsl #8
     534:	0b3a0803 	bleq	e82548 <__ccfg+0xe625a0>
     538:	0b39053b 	bleq	e41a2c <__ccfg+0xe21a84>
     53c:	0a021349 	beq	85268 <__ccfg+0x652c0>
	cli_aux;
     540:	05350000 	ldreq	r0, [r5, #-0]!
     544:	02133100 	andseq	r3, r3, #0, 2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	36000006 	strcc	r0, [r0], -r6
     54c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     550:	0b3b0b3a 	bleq	ec3240 <__ccfg+0xea3298>
     554:	13490b39 	movtne	r0, #39737	; 0x9b39
	sti_aux;
     558:	00000602 	andeq	r0, r0, r2, lsl #12
}
     55c:	11010b37 	tstne	r1, r7, lsr fp
     560:	00011201 	andeq	r1, r1, r1, lsl #4
     564:	002e3800 	eoreq	r3, lr, r0, lsl #16
void AONRTCIntHandler () {
     568:	0b3a0e03 	bleq	e83d7c <__ccfg+0xe63dd4>
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	0b39053b 	bleq	e41a60 <__ccfg+0xe21ab8>
     570:	00000b20 	andeq	r0, r0, r0, lsr #22
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	03012e39 	movweq	r2, #7737	; 0x1e39
		if (__pi_utims [0] == 0)
     578:	3b0b3a0e 	blcc	2cedb8 <__ccfg+0x2aee10>
     57c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
		if (*(__pi_utims [0])) {
     580:	1201110c 	andne	r1, r1, #12, 2
     584:	010a4001 	tsteq	sl, r1
			(*(__pi_utims [0]))--;
     588:	3a000013 	bcc	5dc <AONRTCIntHandler+0x74>
		if (__pi_utims [1] == 0)
     58c:	0e03012e 	adfeqsp	f0, f3, #0.5
		if (*(__pi_utims [1])) {
     590:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			aux_timer_inactive = 0;
     594:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
			(*(__pi_utims [1]))--;
     598:	01111349 	tsteq	r1, r9, asr #6
		if (__pi_utims [2] == 0)
     59c:	0a400112 	beq	10009ec <__ccfg+0xfe0a44>
		if (*(__pi_utims [2])) {
     5a0:	00001301 	andeq	r1, r0, r1, lsl #6
			(*(__pi_utims [2]))--;
     5a4:	0300053b 	movweq	r0, #1339	; 0x53b
		if (__pi_utims [3] != 0) {
     5a8:	3b0b3a08 	blcc	2cedd0 <__ccfg+0x2aee28>
			if (*(__pi_utims [3])) {
     5ac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				aux_timer_inactive = 0;
     5b0:	00060213 	andeq	r0, r6, r3, lsl r2
				(*(__pi_utims [3]))--;
     5b4:	012e3c00 			; <UNDEFINED> instruction: 0x012e3c00
	if (__pi_systat.ledsts) {
     5b8:	0b3a0e03 	bleq	e83dcc <__ccfg+0xe63e24>
     5bc:	0b39053b 	bleq	e41ab0 <__ccfg+0xe21b08>
		if (__pi_systat.ledblc++ == 0) {
     5c0:	01120111 	tsteq	r2, r1, lsl r1
     5c4:	13010a40 	movwne	r0, #6720	; 0x1a40
			if (__pi_systat.ledblk) {
     5c8:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     5cc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     5d0:	3b0b3a0e 	blcc	2cee10 <__ccfg+0x2aee68>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     5d8:	2013490c 	andscs	r4, r3, ip, lsl #18
				if (__pi_systat.ledsts & 0x2)
     5dc:	0013010b 	andseq	r0, r3, fp, lsl #2
     5e0:	00053e00 	andeq	r3, r5, r0, lsl #28
     5e4:	0b3a0803 	bleq	e825f8 <__ccfg+0xe62650>
				if (__pi_systat.ledsts & 0x4)
     5e8:	0b39053b 	bleq	e41adc <__ccfg+0xe21b34>
				__pi_systat.ledblk = 0;
     5ec:	00001349 	andeq	r1, r0, r9, asr #6
     5f0:	03000a3f 	movweq	r0, #2623	; 0xa3f
			if (__pi_systat.fstblk)
     5f4:	3b0b3a08 	blcc	2cee1c <__ccfg+0x2aee74>
     5f8:	000b3905 	andeq	r3, fp, r5, lsl #18
				__pi_systat.ledblc = 200;
     5fc:	00344000 	eorseq	r4, r4, r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	0b3a0e03 	bleq	e83e14 <__ccfg+0xe63e6c>
		cli_tim;
     604:	0b39053b 	bleq	e41af8 <__ccfg+0xe21b50>
		__pi_new += setdel;
     608:	06021349 	streq	r1, [r2], -r9, asr #6
     60c:	0a410000 	beq	1040614 <__ccfg+0x102066c>
		setdel = 0;
     610:	3a080300 	bcc	201218 <__ccfg+0x1e1270>
		RISE_N_SHINE;
     614:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		__pi_new += setdel;
     618:	0001110b 	andeq	r1, r1, fp, lsl #2
		RISE_N_SHINE;
     61c:	011d4200 	tsteq	sp, r0, lsl #4
     620:	01111331 	tsteq	r1, r1, lsr r3
		aux_timer_inactive = 1;
     624:	0b580112 	bleq	1600a74 <__ccfg+0x15e0acc>
     628:	0b570b59 	bleq	15c3394 <__ccfg+0x15a33ec>
				if (__pi_systat.ledsts & 0x1)
     62c:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	31011d43 	tstcc	r1, r3, asr #26
     634:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				if (__pi_systat.ledsts & 0x2)
     638:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     63c:	000b570b 	andeq	r5, fp, fp, lsl #14
     640:	012e4400 			; <UNDEFINED> instruction: 0x012e4400
				if (__pi_systat.ledsts & 0x8)
     644:	0b3a0e03 	bleq	e83e58 <__ccfg+0xe63eb0>
				__pi_systat.ledblk = 1;
     648:	0b39053b 	bleq	e41b3c <__ccfg+0xe21b94>
     64c:	13490c27 	movtne	r0, #39975	; 0x9c27
		if (aux_timer_inactive) {
     650:	13010b20 	movwne	r0, #6944	; 0x1b20
			cli_aux;
     654:	2e450000 	cdpcs	0, 4, cr0, cr5, cr0, {0}
     658:	3a0e0300 	bcc	381260 <__ccfg+0x3612b8>
     65c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     660:	2013490b 	andscs	r4, r3, fp, lsl #18
     664:	4600000b 	strmi	r0, [r0], -fp
     668:	0e03012e 	adfeqsp	f0, f3, #0.5
     66c:	0b3b0b3a 	bleq	ec335c <__ccfg+0xea33b4>
     670:	0b200b39 	bleq	80335c <__ccfg+0x7e33b4>
     674:	00001301 	andeq	r1, r0, r1, lsl #6
     678:	03003447 	movweq	r3, #1095	; 0x447
word tci_update_delay_ticks (Boolean force) {
     67c:	3b0b3a08 	blcc	2ceea4 <__ccfg+0x2aeefc>
	cli_tim;
     680:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     684:	48000013 	stmdami	r0, {r0, r1, r4}
	if (setdel) {
     688:	0000010b 	andeq	r0, r0, fp, lsl #2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	3f012e49 	svccc	0x00012e49
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	3a0e030c 	bcc	3812c8 <__ccfg+0x361320>
     694:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     698:	110c270b 	tstne	ip, fp, lsl #14
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69c:	40011201 	andmi	r1, r1, r1, lsl #4
				AON_RTC_O_CH0CMP)) - gettav ());
     6a0:	0013010a 	andseq	r0, r3, sl, lsl #2
	return NO;
     6a4:	00054a00 	andeq	r4, r5, r0, lsl #20
			setdel = 0;
     6a8:	0b3a0803 	bleq	e826bc <__ccfg+0xe62714>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	0b390b3b 	bleq	e433a0 <__ccfg+0xe233f8>
     6b0:	06021349 	streq	r1, [r2], -r9, asr #6
}
     6b4:	344b0000 	strbcc	r0, [fp], #-0
		sti_tim;
     6b8:	3a0e0300 	bcc	3812c0 <__ccfg+0x361318>
		return YES;
     6bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     6c4:	4c00000a 	stcmi	0, cr0, [r0], {10}
     6c8:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	0b3b0b3a 	bleq	ec33bc <__ccfg+0xea3414>
	UARTDisable (UART0_BASE);
     6d0:	01110b39 	tsteq	r1, r9, lsr fp
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	1d4d0000 	stclne	0, cr0, [sp, #-0]
	UARTDisable (UART0_BASE);
     6d8:	52133100 	andspl	r3, r3, #0, 2
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     6e0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     6e4:	4e00000b 	cdpmi	0, 0, cr0, cr0, cr11, {0}
     6e8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 638 <AONRTCIntHandler+0xd0>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	0b3a0e03 	bleq	e83f00 <__ccfg+0xe63f58>
     6f0:	0b390b3b 	bleq	e433e4 <__ccfg+0xe2343c>
     6f4:	01110c27 	tsteq	r1, r7, lsr #24
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	0a400112 	beq	1000b48 <__ccfg+0xfe0ba0>
     6fc:	054f0000 	strbeq	r0, [pc, #-0]	; 704 <__pi_uart_setrate+0x38>
     700:	3a080300 	bcc	201308 <__ccfg+0x1e1360>
	urates [0] = rate;
     704:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
}
     708:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     70c:	5000000a 	andpl	r0, r0, sl
     710:	0e03012e 	adfeqsp	f0, f3, #0.5
     714:	0b3b0b3a 	bleq	ec3404 <__ccfg+0xea345c>
     718:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     71c:	13010b20 	movwne	r0, #6944	; 0x1b20
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	05510000 	ldrbeq	r0, [r1, #-0]
     724:	3a080300 	bcc	20132c <__ccfg+0x1e1384>
     728:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	0013490b 	andseq	r4, r3, fp, lsl #18
     730:	012e5200 			; <UNDEFINED> instruction: 0x012e5200
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	0b3a0e03 	bleq	e83f48 <__ccfg+0xe63fa0>
     738:	0b39053b 	bleq	e41c2c <__ccfg+0xe21c84>
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	0b200c27 	bleq	8037e0 <__ccfg+0x7e3838>
     740:	00001301 	andeq	r1, r0, r1, lsl #6
     744:	03000553 	movweq	r0, #1363	; 0x553
     748:	3b0b3a0e 	blcc	2cef88 <__ccfg+0x2aefe0>
     74c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     750:	54000013 	strpl	r0, [r0], #-19	; 0xffffffed
     754:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
	switch (operation) {
     758:	0b3b0b3a 	bleq	ec3448 <__ccfg+0xea34a0>
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     760:	00000b20 	andeq	r0, r0, r0, lsr #22
     764:	03012e55 	movweq	r2, #7765	; 0x1e55
     768:	3b0b3a0e 	blcc	2cefa8 <__ccfg+0x2af000>
     76c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
				*buf++ = uart_a_read;
     770:	2013490c 	andscs	r4, r3, ip, lsl #18
     774:	0013010b 	andseq	r0, r3, fp, lsl #2
			while (len && uart_a_char_available) {
     778:	002e5600 	eoreq	r5, lr, r0, lsl #12
     77c:	0b3a0e03 	bleq	e83f90 <__ccfg+0xe63fe8>
     780:	0b39053b 	bleq	e41c74 <__ccfg+0xe21ccc>
			if (len != operation) {
     784:	0b200c27 	bleq	803828 <__ccfg+0x7e3880>
}
     788:	2e570000 	cdpcs	0, 5, cr0, cr7, cr0, {0}
     78c:	3a0e0300 	bcc	381394 <__ccfg+0x3613ec>
			uart_a_disable_int;
     790:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (uart_a_char_available) {
     794:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
				*buf++ = uart_a_read;
     798:	000b2013 	andeq	r2, fp, r3, lsl r0
			uart_a_disable_int;
     79c:	002e5800 	eoreq	r5, lr, r0, lsl #16
     7a0:	0b3a0e03 	bleq	e83fb4 <__ccfg+0xe6400c>
			if (uart_a_char_available) {
     7a4:	0b39053b 	bleq	e41c98 <__ccfg+0xe21cf0>
     7a8:	13490c27 	movtne	r0, #39975	; 0x9c27
				uart_a_enable_int;
     7ac:	00000b20 	andeq	r0, r0, r0, lsr #22
     7b0:	31012e59 	tstcc	r1, r9, asr lr
				goto Redo_rx;
     7b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	000a4001 	andeq	r4, sl, r1
     7bc:	11010000 	mrsne	r0, (UNDEF: 1)
			return -2;
     7c0:	130e2501 	movwne	r2, #58625	; 0xe501
     7c4:	1b0e030b 	blne	3813f8 <__ccfg+0x361450>
				uart_a_write (*buf);
     7c8:	1106550e 	tstne	r6, lr, lsl #10
     7cc:	00061001 	andeq	r1, r6, r1
			while (len && uart_a_room_in_tx) {
     7d0:	00240200 	eoreq	r0, r4, r0, lsl #4
     7d4:	0b3e0b0b 	bleq	f83408 <__ccfg+0xf63460>
     7d8:	00000e03 	andeq	r0, r0, r3, lsl #28
			if (len != operation) {
     7dc:	03001603 	movweq	r1, #1539	; 0x603
			uart_a_disable_int;
     7e0:	3b0b3a0e 	blcc	2cf020 <__ccfg+0x2af078>
     7e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			if (uart_a_room_in_tx) {
     7e8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     7ec:	0b0b0024 	bleq	2c0884 <__ccfg+0x2a08dc>
				uart_a_enable_int;
     7f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     7f4:	13050000 	movwne	r0, #20480	; 0x5000
				*buf++ = uart_a_read;
     7f8:	0b0e0301 	bleq	381404 <__ccfg+0x36145c>
			if (uart_a_room_in_tx) {
     7fc:	3b0b3a0b 	blcc	2cf030 <__ccfg+0x2af088>
				uart_a_write (*buf);
     800:	0013010b 	andseq	r0, r3, fp, lsl #2
     804:	000d0600 	andeq	r0, sp, r0, lsl #12
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	13490e03 	movtne	r0, #40451	; 0x9e03
     80c:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
			uart_a_enable_int;
     810:	0f070000 	svceq	0x00070000
     814:	000b0b00 	andeq	r0, fp, r0, lsl #22
     818:	00260800 	eoreq	r0, r6, r0, lsl #16
			return 0;
     81c:	00001349 	andeq	r1, r0, r9, asr #6
			if (len == UART_CNTRL_SETRATE) {
     820:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
				if (__pi_uart_setrate (*((word*)buf),
     824:	0a000013 	beq	878 <UART0IntHandler+0x10>
     828:	0b0b000f 	bleq	2c086c <__ccfg+0x2a08c4>
     82c:	00001349 	andeq	r1, r0, r9, asr #6
				syserror (EREQPAR, "uar");
     830:	0b01130b 	bleq	45464 <__ccfg+0x254bc>
			syserror (ENOOPER, "uai");
     834:	3b0b3a0b 	blcc	2cf068 <__ccfg+0x2af0c0>
			if (len == UART_CNTRL_GETRATE) {
     838:	010b390b 	tsteq	fp, fp, lsl #18
				return 1;
     83c:	0c000013 	stceq	0, cr0, [r0], {19}
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			syserror (ENOOPER, "uai");
     844:	0b3b0b3a 	bleq	ec3534 <__ccfg+0xea358c>
     848:	13490b39 	movtne	r0, #39737	; 0x9b39
     84c:	0b0d0b0b 	bleq	343480 <__ccfg+0x3234d8>
     850:	0b380b0c 	bleq	e03488 <__ccfg+0xde34e0>
     854:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     858:	3a0e0300 	bcc	381460 <__ccfg+0x3614b8>
     85c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     860:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     864:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
void UART0IntHandler () {
     86c:	0b3b0b3a 	bleq	ec355c <__ccfg+0xea35b4>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	13490b39 	movtne	r0, #39737	; 0x9b39
     874:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     878:	010f0000 	mrseq	r0, CPSR
     87c:	01134901 	tsteq	r3, r1, lsl #18
     880:	10000013 	andne	r0, r0, r3, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	00000021 	andeq	r0, r0, r1, lsr #32
     888:	03001611 	movweq	r1, #1553	; 0x611
		RISE_N_SHINE;
     88c:	3b0b3a0e 	blcc	2cf0cc <__ccfg+0x2af124>
     890:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		i_trigger (devevent (UART_A, READ));
     894:	12000013 	andne	r0, r0, #19
     898:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
     89c:	00001301 	andeq	r1, r0, r1, lsl #6
     8a0:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     8a4:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     8a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     8b0:	13490b39 	movtne	r0, #39737	; 0x9b39
     8b4:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     8b8:	13150000 	tstne	r5, #0
     8bc:	3a0b0b01 	bcc	2c34c8 <__ccfg+0x2a3520>
     8c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     8c8:	000d1600 	andeq	r1, sp, r0, lsl #12
     8cc:	0b3a0e03 	bleq	e840e0 <__ccfg+0xe64138>
		i_trigger (devevent (UART_A, WRITE));
     8d0:	0b39053b 	bleq	e41dc4 <__ccfg+0xe21e1c>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	0b381349 	bleq	e05600 <__ccfg+0xde5658>
     8d8:	13170000 	tstne	r7, #0
		RISE_N_SHINE;
     8dc:	0b0e0301 	bleq	3814e8 <__ccfg+0x361540>
     8e0:	3b0b3a0b 	blcc	2cf114 <__ccfg+0x2af16c>
     8e4:	010b3905 	tsteq	fp, r5, lsl #18
		i_trigger (devevent (UART_A, WRITE));
     8e8:	18000013 	stmdane	r0, {r0, r1, r4}
     8ec:	13490021 	movtne	r0, #36897	; 0x9021
     8f0:	00000b2f 	andeq	r0, r0, pc, lsr #22
     8f4:	27011519 	smladcs	r1, r9, r5, r1
     8f8:	0113490c 	tsteq	r3, ip, lsl #18
     8fc:	1a000013 	bne	950 <__buttons_setirq+0x28>
     900:	13470034 	movtne	r0, #28724	; 0x7034
     904:	0b3b0b3a 	bleq	ec35f4 <__ccfg+0xea364c>
     908:	0a020b39 	beq	835f4 <__ccfg+0x6364c>
     90c:	341b0000 	ldrcc	r0, [fp], #-0
     910:	3a0e0300 	bcc	381518 <__ccfg+0x361570>
}
     914:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     918:	3f13490b 	svccc	0x0013490b
     91c:	000a020c 	andeq	r0, sl, ip, lsl #4
     920:	00341c00 	eorseq	r1, r4, r0, lsl #24
     924:	0b3a0e03 	bleq	e84138 <__ccfg+0xe64190>
void __buttons_setirq (int val) {
     928:	0b390b3b 	bleq	e4361c <__ccfg+0xe23674>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	0a021349 	beq	85658 <__ccfg+0x656b0>
     930:	341d0000 	ldrcc	r0, [sp], #-0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	3a0e0300 	bcc	38153c <__ccfg+0x361594>
     938:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     93c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		bn = BUTTON_GPIO (__button_list [i]);
     940:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 894 <UART0IntHandler+0x2c>
     948:	0b3a0e03 	bleq	e8415c <__ccfg+0xe641b4>
     94c:	0b39053b 	bleq	e41e40 <__ccfg+0xe21e98>
     950:	13490c27 	movtne	r0, #39975	; 0x9c27
     954:	01120111 	tsteq	r2, r1, lsl r1
     958:	00000a40 	andeq	r0, r0, r0, asr #20
}
     95c:	3f012e1f 	svccc	0x00012e1f
     960:	3a0e030c 	bcc	381598 <__ccfg+0x3615f0>
     964:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     968:	110c270b 	tstne	ip, fp, lsl #14
void __pinlist_setirq (int val) {
     96c:	40011201 	andmi	r1, r1, r1, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     970:	0013010a 	andseq	r0, r3, sl, lsl #2
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	00052000 	andeq	r2, r5, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	0b3a0e03 	bleq	e8418c <__ccfg+0xe641e4>
	for (i = 0; i < N_PINLIST; i++) {
     97c:	0b39053b 	bleq	e41e70 <__ccfg+0xe21ec8>
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	06021349 	streq	r1, [r2], -r9, asr #6
     984:	18210000 	stmdane	r1!, {}	; <UNPREDICTABLE>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     988:	22000000 	andcs	r0, r0, #0
     98c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     990:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	for (i = 0; i < N_PINLIST; i++) {
     994:	13490b39 	movtne	r0, #39737	; 0x9b39
}
     998:	00000602 	andeq	r0, r0, r2, lsl #12
     99c:	03003423 	movweq	r3, #1059	; 0x423
     9a0:	3b0b3a08 	blcc	2cf1c8 <__ccfg+0x2af220>
     9a4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
void GPIOIntHandler () {
     9a8:	000a0213 	andeq	r0, sl, r3, lsl r2
if (buttons_int) {
     9ac:	00342400 	eorseq	r2, r4, r0, lsl #8
     9b0:	0b3a0803 	bleq	e829c4 <__ccfg+0xe62a1c>
	buttons_disable ();
     9b4:	0b39053b 	bleq	e41ea8 <__ccfg+0xe21f00>
     9b8:	00001349 	andeq	r1, r0, r9, asr #6
	i_trigger ((aword)&__button_list);
     9bc:	03000a25 	movweq	r0, #2597	; 0xa25
     9c0:	3b0b3a0e 	blcc	2cf200 <__ccfg+0x2af258>
     9c4:	110b3905 	tstne	fp, r5, lsl #18
     9c8:	26000001 	strcs	r0, [r0], -r1
     9cc:	0111010b 	tsteq	r1, fp, lsl #2
     9d0:	13010112 	movwne	r0, #4370	; 0x1112
     9d4:	0b270000 	bleq	9c09dc <__ccfg+0x9a0a34>
     9d8:	01065501 	tsteq	r6, r1, lsl #10
     9dc:	28000013 	stmdacs	r0, {r0, r1, r4}
     9e0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     9e4:	06550152 			; <UNDEFINED> instruction: 0x06550152
	RISE_N_SHINE;
     9e8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     9ec:	00000b57 	andeq	r0, r0, r7, asr fp
     9f0:	31000529 	tstcc	r0, r9, lsr #10
if (pin_sensor_int) {
     9f4:	2a000013 	bcs	a48 <GPIOIntHandler+0xa0>
     9f8:	0e03012e 	adfeqsp	f0, f3, #0.5
	i_trigger ((aword)(&__input_pins));
     9fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a00:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     a04:	01120111 	tsteq	r2, r1, lsl r1
     a08:	13010a40 	movwne	r0, #6720	; 0x1a40
     a0c:	052b0000 	streq	r0, [fp, #-0]!
     a10:	3a080300 	bcc	201618 <__ccfg+0x1e1670>
     a14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a18:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a1c:	2c000006 	stccs	0, cr0, [r0], {6}
     a20:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 970 <__pinlist_setirq+0x4>
     a24:	0b3a0e03 	bleq	e84238 <__ccfg+0xe64290>
	__pinsen_disable_and_clear;
     a28:	0b39053b 	bleq	e41f1c <__ccfg+0xe21f74>
	RISE_N_SHINE;
     a2c:	13490c27 	movtne	r0, #39975	; 0x9c27
     a30:	01120111 	tsteq	r2, r1, lsl r1
     a34:	13010a40 	movwne	r0, #6720	; 0x1a40
}
     a38:	342d0000 	strtcc	r0, [sp], #-0
     a3c:	3a0e0300 	bcc	381644 <__ccfg+0x36169c>
     a40:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a44:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a48:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
void system_init () {
     a4c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 99c <__pinlist_setirq+0x30>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	0b3a0e03 	bleq	e84264 <__ccfg+0xe642bc>
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a54:	0b39053b 	bleq	e41f48 <__ccfg+0xe21fa0>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	0b200c27 	bleq	803afc <__ccfg+0x7e3b54>
     a5c:	00001301 	andeq	r1, r0, r1, lsl #6
     a60:	0300052f 	movweq	r0, #1327	; 0x52f
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a64:	3b0b3a08 	blcc	2cf28c <__ccfg+0x2af2e4>
     a68:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a6c:	30000013 	andcc	r0, r0, r3, lsl r0
     a70:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 9c0 <GPIOIntHandler+0x18>
     a74:	0b3a0e03 	bleq	e84288 <__ccfg+0xe642e0>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	0b39053b 	bleq	e41f6c <__ccfg+0xe21fc4>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a7c:	01120111 	tsteq	r2, r1, lsl r1
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a80:	13010a40 	movwne	r0, #6720	; 0x1a40
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a84:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	030c3f01 	movweq	r3, #52993	; 0xcf01
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8c:	3b0b3a08 	blcc	2cf2b4 <__ccfg+0x2af30c>
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	1113490c 	tstne	r3, ip, lsl #18
		pin = (port_confs [i] >> 19) & 0x1f;
     a98:	40011201 	andmi	r1, r1, r1, lsl #4
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9c:	0013010a 	andseq	r0, r3, sl, lsl #2
     aa0:	00053200 	andeq	r3, r5, r0, lsl #4
     aa4:	0b3a0803 	bleq	e82ab8 <__ccfg+0xe62b10>
     aa8:	0b39053b 	bleq	e41f9c <__ccfg+0xe21ff4>
		if (port_confs [i] & 0x80)
     aac:	0a021349 	beq	857d8 <__ccfg+0x65830>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
     ab4:	030c3f00 	movweq	r3, #52992	; 0xcf00
		if (port_confs [i] & 0x40)
     ab8:	3b0b3a0e 	blcc	2cf2f8 <__ccfg+0x2af350>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     ac0:	1201110c 	andne	r1, r1, #12, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	000a4001 	andeq	r4, sl, r1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	00053400 	andeq	r3, r5, r0, lsl #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	0b3a0e03 	bleq	e842e0 <__ccfg+0xe64338>
	all_leds_blink;
     ad0:	0b39053b 	bleq	e41fc4 <__ccfg+0xe2201c>
     ad4:	0a021349 	beq	85800 <__ccfg+0x65858>
     ad8:	05350000 	ldreq	r0, [r5, #-0]!
     adc:	3a0e0300 	bcc	3816e4 <__ccfg+0x36173c>
     ae0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ae8:	010b3600 	tsteq	fp, r0, lsl #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aec:	00000655 	andeq	r0, r0, r5, asr r6
     af0:	3f012e37 	svccc	0x00012e37
     af4:	3a0e030c 	bcc	38172c <__ccfg+0x361784>
     af8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     afc:	200c270b 	andcs	r2, ip, fp, lsl #14
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	0013010b 	andseq	r0, r3, fp, lsl #2
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	00053800 	andeq	r3, r5, r0, lsl #16
     b08:	0b3a0803 	bleq	e82b1c <__ccfg+0xe62b74>
	IntEnable (INT_AON_RTC_COMB);
     b0c:	0b390b3b 	bleq	e43800 <__ccfg+0xe23858>
     b10:	00001349 	andeq	r1, r0, r9, asr #6
     b14:	03000539 	movweq	r0, #1337	; 0x539
	__pi_malloc_init ();
     b18:	3b0b3a0e 	blcc	2cf358 <__ccfg+0x2af3b0>
	IntEnable (INT_AON_GPIO_EDGE);
     b1c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b20:	3a000013 	bcc	b74 <system_init+0x128>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	08030034 	stmdaeq	r3, {r2, r4, r5}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b28:	0b3b0b3a 	bleq	ec3818 <__ccfg+0xea3870>
     b2c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b30:	0a3b0000 	beq	ec0b38 <__ccfg+0xea0b90>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	3a080300 	bcc	20173c <__ccfg+0x1e1794>
     b38:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	3c00000b 	stccc	0, cr0, [r0], {11}
     b40:	0c3f012e 	ldfeqs	f0, [pc], #-184	; a90 <system_init+0x44>
     b44:	0b3a0e03 	bleq	e84358 <__ccfg+0xe643b0>
	urates [0] = UART_RATE / 100;
     b48:	0b390b3b 	bleq	e4383c <__ccfg+0xe23894>
     b4c:	01110c27 	tsteq	r1, r7, lsr #24
	reinit_uart ();
     b50:	0a400112 	beq	1000fa0 <__ccfg+0xfe0ff8>
	EXTRA_INITIALIZERS;
     b54:	00001301 	andeq	r1, r0, r1, lsl #6
     b58:	0300053d 	movweq	r0, #1341	; 0x53d
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b5c:	3b0b3a08 	blcc	2cf384 <__ccfg+0x2af3dc>
     b60:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b64:	00060213 	andeq	r0, r6, r3, lsl r2
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b68:	00343e00 	eorseq	r3, r4, r0, lsl #28
     b6c:	0b3a0803 	bleq	e82b80 <__ccfg+0xe62bd8>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b70:	0b390b3b 	bleq	e43864 <__ccfg+0xe238bc>
     b74:	06021349 	streq	r1, [r2], -r9, asr #6
			devinit [i] . init (devinit [i] . param);
     b78:	2e3f0000 	cdpcs	0, 3, cr0, cr15, cr0, {0}
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	030c3f00 	movweq	r3, #52992	; 0xcf00
     b80:	3b0b3a0e 	blcc	2cf3c0 <__ccfg+0x2af418>
     b84:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	IntEnable (INT_UART0_COMB);
     b88:	1201110c 	andne	r1, r1, #12, 2
     b8c:	000a4001 	andeq	r4, sl, r1
}
     b90:	012e4000 			; <UNDEFINED> instruction: 0x012e4000
	tci_run_auxiliary_timer ();
     b94:	0b3a0e03 	bleq	e843a8 <__ccfg+0xe64400>
		diag ("");
     b98:	0b390b3b 	bleq	e4388c <__ccfg+0xe238e4>
     b9c:	13490c27 	movtne	r0, #39975	; 0x9c27
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     ba0:	13010b20 	movwne	r0, #6944	; 0x1b20
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	2e410000 	cdpcs	0, 4, cr0, cr1, cr0, {0}
		diag ("Leftover RAM: %d bytes",
     ba8:	3a0e0301 	bcc	3817b4 <__ccfg+0x36180c>
     bac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     bb0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     bb4:	010b2013 	tsteq	fp, r3, lsl r0
     bb8:	42000013 	andmi	r0, r0, #19
     bbc:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     bc0:	01120111 	tsteq	r2, r1, lsl r1
     bc4:	13010a40 	movwne	r0, #6720	; 0x1a40
     bc8:	05430000 	strbeq	r0, [r3, #-0]
     bcc:	02133100 	andseq	r3, r3, #0, 2
     bd0:	44000006 	strmi	r0, [r0], #-6
     bd4:	13310034 	teqne	r1, #52	; 0x34
     bd8:	00000602 	andeq	r0, r0, r2, lsl #12
     bdc:	31011d45 	tstcc	r1, r5, asr #26
     be0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     be4:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     be8:	000b570b 	andeq	r5, fp, fp, lsl #14
     bec:	00344600 	eorseq	r4, r4, r0, lsl #12
     bf0:	00001331 	andeq	r1, r0, r1, lsr r3
     bf4:	31011d47 	tstcc	r1, r7, asr #26
     bf8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     bfc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     c00:	000b570b 	andeq	r5, fp, fp, lsl #14
__attribute__ ((noreturn)) void __pi_release () {
     c04:	000a4800 	andeq	r4, sl, r0, lsl #16
     c08:	01111331 	tsteq	r1, r1, lsr r3
     c0c:	1d490000 	stclne	0, cr0, [r9, #-0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c10:	11133101 	tstne	r3, r1, lsl #2
	check_stack_overflow;
     c14:	58011201 	stmdapl	r1, {r0, r9, ip}
     c18:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     c1c:	4a00000b 	bmi	c50 <__pi_release+0x4c>
	update_n_wake (MAX_WORD, NO);
     c20:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     c24:	01120111 	tsteq	r2, r1, lsl r1
     c28:	00000a40 	andeq	r0, r0, r0, asr #20
	for_all_tasks (__pi_curr) {
     c2c:	01110100 	tsteq	r1, r0, lsl #2
     c30:	0b130e25 	bleq	4c44cc <__ccfg+0x4a4524>
     c34:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	01110655 	tsteq	r1, r5, asr r6
	__SLEEP;
     c3c:	00000610 	andeq	r0, r0, r0, lsl r6
     c40:	0b002402 	bleq	9c50 <__exidx_end+0x6e58>
     c44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c48:	0300000e 	movweq	r0, #14
	system_event_count ++;
     c4c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     c50:	0b3b0b3a 	bleq	ec3940 <__ccfg+0xea3998>
	switch (__pi_systat.effpdm) {
     c54:	13490b39 	movtne	r0, #39737	; 0x9b39
     c58:	24040000 	strcs	r0, [r4], #-0
     c5c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     c60:	0008030b 	andeq	r0, r8, fp, lsl #6
			__WFI ();
     c64:	01130500 	tsteq	r3, r0, lsl #10
     c68:	0b0b0e03 	bleq	2c447c <__ccfg+0x2a44d4>
     c6c:	0b3b0b3a 	bleq	ec395c <__ccfg+0xea39b4>
	check_stack_overflow;
     c70:	00001301 	andeq	r1, r0, r1, lsl #6
     c74:	03000d06 	movweq	r0, #3334	; 0xd06
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c78:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
     c7c:	000c340b 	andeq	r3, ip, fp, lsl #8
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	000f0700 	andeq	r0, pc, r0, lsl #14
			goto Redo;
     c84:	00000b0b 	andeq	r0, r0, fp, lsl #22
	for_all_tasks (__pi_curr) {
     c88:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	09000013 	stmdbeq	r0, {r0, r1, r4}
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	13490035 	movtne	r0, #36917	; 0x9035
     c94:	0f0a0000 	svceq	0x000a0000
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c9c:	0b000013 	bleq	cf0 <__pi_release+0xec>
     ca0:	0b0b0113 	bleq	2c10f4 <__ccfg+0x2a114c>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca4:	0b3b0b3a 	bleq	ec3994 <__ccfg+0xea39ec>
     ca8:	13010b39 	movwne	r0, #6969	; 0x1b39
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     cb0:	3a0e0300 	bcc	3818b8 <__ccfg+0x361910>
			__WFI ();
     cb4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb8:	0b13490b 	bleq	4d30ec <__ccfg+0x4b3144>
     cbc:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
}
     cc0:	000b380b 	andeq	r3, fp, fp, lsl #16
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cc4:	000d0d00 	andeq	r0, sp, r0, lsl #26
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc8:	0b3a0e03 	bleq	e844dc <__ccfg+0xe64534>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	0b390b3b 	bleq	e439c0 <__ccfg+0xe23a18>
     cd0:	0b381349 	bleq	e059fc <__ccfg+0xde5a54>
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd4:	340e0000 	strcc	r0, [lr], #-0
     cd8:	3a0e0300 	bcc	3818e0 <__ccfg+0x361938>
     cdc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	3f13490b 	svccc	0x0013490b
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     ce8:	01010f00 	tsteq	r1, r0, lsl #30
     cec:	13011349 	movwne	r1, #4937	; 0x1349
     cf0:	21100000 	tstcs	r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	11000000 	mrsne	r0, (UNDEF: 0)
     cf8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d00:	13490b39 	movtne	r0, #39737	; 0x9b39
     d04:	15120000 	ldrne	r0, [r2, #-0]
     d08:	010c2701 	tsteq	ip, r1, lsl #14
     d0c:	13000013 	movwne	r0, #19
     d10:	13490005 	movtne	r0, #36869	; 0x9005
			SysCtrlSetRechargeBeforePowerDown
     d14:	34140000 	ldrcc	r0, [r4], #-0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d18:	3a0e0300 	bcc	381920 <__ccfg+0x361978>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d20:	3f13490b 	svccc	0x0013490b
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	000c3c0c 	andeq	r3, ip, ip, lsl #24
     d28:	01151500 	tsteq	r5, r0, lsl #10
     d2c:	13490c27 	movtne	r0, #39975	; 0x9c27
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	00001301 	andeq	r1, r0, r1, lsl #6
     d34:	03011316 	movweq	r1, #4886	; 0x1316
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	3a0b0b0e 	bcc	2c3978 <__ccfg+0x2a39d0>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d40:	0013010b 	andseq	r0, r3, fp, lsl #2
     d44:	01171700 	tsteq	r7, r0, lsl #14
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d48:	0b3a0b0b 	bleq	e8397c <__ccfg+0xe639d4>
			while (!(AONWUCPowerStatusGet () &
     d4c:	0b390b3b 	bleq	e43a40 <__ccfg+0xe23a98>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	00001301 	andeq	r1, r0, r1, lsl #6
     d54:	03000d18 	movweq	r0, #3352	; 0xd18
     d58:	3b0b3a0e 	blcc	2cf598 <__ccfg+0x2af5f0>
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d60:	19000013 	stmdbne	r0, {r0, r1, r4}
     d64:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     d68:	0b3b0b3a 	bleq	ec3a58 <__ccfg+0xea3ab0>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	13490b39 	movtne	r0, #39737	; 0x9b39
     d70:	0d1a0000 	ldceq	0, cr0, [sl, #-0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	3a080300 	bcc	20197c <__ccfg+0x1e19d4>
     d78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			SysCtrlAdjustRechargeAfterPowerDown ();
     d7c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			reinit_uart ();
     d80:	1b00000b 	blne	db4 <__pi_release+0x1b0>
     d84:	0b0b0113 	bleq	2c11d8 <__ccfg+0x2a1230>
     d88:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
}
     d8c:	13010b39 	movwne	r0, #6969	; 0x1b39
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d90:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
     d94:	3a0e0300 	bcc	38199c <__ccfg+0x3619f4>
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d9c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     da0:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     da8:	0b3a0b0b 	bleq	e839dc <__ccfg+0xe63a34>
     dac:	0b39053b 	bleq	e422a0 <__ccfg+0xe222f8>
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     db0:	00001301 	andeq	r1, r0, r1, lsl #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	4900211e 	stmdbmi	r0, {r1, r2, r3, r4, r8, sp}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dbc:	00341f00 	eorseq	r1, r4, r0, lsl #30
     dc0:	0b3a0e03 	bleq	e845d4 <__ccfg+0xe6462c>
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	0b390b3b 	bleq	e43ab8 <__ccfg+0xe23b10>
     dc8:	0a021349 	beq	85af4 <__ccfg+0x65b4c>
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd0:	030c3f00 	movweq	r3, #52992	; 0xcf00
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd4:	3b0b3a0e 	blcc	2cf614 <__ccfg+0x2af66c>
     dd8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
			PRCMPowerDomainOff (
     ddc:	1201110c 	andne	r1, r1, #12, 2
     de0:	000a4001 	andeq	r4, sl, r1
	__SLEEP;
     de4:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
     de8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	goto Redo;
     df0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     df4:	01111349 	tsteq	r1, r9, asr #6
     df8:	0a400112 	beq	1001248 <__ccfg+0xfe12a0>
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
     e00:	03000522 	movweq	r0, #1314	; 0x522
     e04:	3b0b3a08 	blcc	2cf62c <__ccfg+0x2af684>
     e08:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     e0c:	00060213 	andeq	r0, r6, r3, lsl r2
     e10:	011d2300 	tsteq	sp, r0, lsl #6
     e14:	01521331 	cmpeq	r2, r1, lsr r3
     e18:	0b580655 	bleq	1602774 <__ccfg+0x15e27cc>
     e1c:	0b570559 	bleq	15c2388 <__ccfg+0x15a23e0>
     e20:	05240000 	streq	r0, [r4, #-0]!
     e24:	02133100 	andseq	r3, r3, #0, 2
     e28:	25000006 	strcs	r0, [r0, #-6]
     e2c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     e30:	34260000 	strtcc	r0, [r6], #-0
     e34:	02133100 	andseq	r3, r3, #0, 2
     e38:	27000006 	strcs	r0, [r0, -r6]
     e3c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; d8c <__pi_release+0x188>
     e40:	0b3a0e03 	bleq	e84654 <__ccfg+0xe646ac>
     e44:	0b39053b 	bleq	e42338 <__ccfg+0xe22390>
     e48:	01110c27 	tsteq	r1, r7, lsr #24
     e4c:	0a400112 	beq	100129c <__ccfg+0xfe12f4>
     e50:	00001301 	andeq	r1, r0, r1, lsl #6
     e54:	03003428 	movweq	r3, #1064	; 0x428
     e58:	3b0b3a08 	blcc	2cf680 <__ccfg+0x2af6d8>
int main (void) {
     e5c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	00060213 	andeq	r0, r6, r3, lsl r2
     e64:	00342900 	eorseq	r2, r4, r0, lsl #18
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	0b3a0803 	bleq	e82e7c <__ccfg+0xe62ed4>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	0b39053b 	bleq	e42360 <__ccfg+0xe223b8>
	system_init ();
     e70:	00001349 	andeq	r1, r0, r9, asr #6
	tcv_init ();
     e74:	0300342a 	movweq	r3, #1066	; 0x42a
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e78:	3b0b3a08 	blcc	2cf6a0 <__ccfg+0x2af6f8>
     e7c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	000a0213 	andeq	r0, sl, r3, lsl r2
     e84:	00052b00 	andeq	r2, r5, r0, lsl #22
     e88:	0b3a0e03 	bleq	e8469c <__ccfg+0xe646f4>
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	0b39053b 	bleq	e42380 <__ccfg+0xe223d8>
     e90:	06021349 	streq	r1, [r2], -r9, asr #6
	delay (16, 0);
     e94:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     e98:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e9c:	3b0b3a0e 	blcc	2cf6dc <__ccfg+0x2af734>
	__pi_release ();
     ea0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     ea4:	2013490c 	andscs	r4, r3, ip, lsl #18
     ea8:	0013010b 	andseq	r0, r3, fp, lsl #2
     eac:	00052d00 	andeq	r2, r5, r0, lsl #26
     eb0:	0b3a0e03 	bleq	e846c4 <__ccfg+0xe6471c>
     eb4:	0b39053b 	bleq	e423a8 <__ccfg+0xe22400>
     eb8:	00001349 	andeq	r1, r0, r9, asr #6
static void killev (__pi_pcb_t *pid) {
     ebc:	0300052e 	movweq	r0, #1326	; 0x52e
	wfun = (aword)(pid->code);
     ec0:	3b0b3a08 	blcc	2cf6e8 <__ccfg+0x2af740>
	for_all_tasks (i) {
     ec4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
		for (j = 0; j < nevents (i); j++) {
     ec8:	2f000013 	svccs	0x00000013
     ecc:	0111010b 	tsteq	r1, fp, lsl #2
     ed0:	00000112 	andeq	r0, r0, r2, lsl r1
			    || i->Events [j] . Event == wfun
     ed4:	03003430 	movweq	r3, #1072	; 0x430
		for (j = 0; j < nevents (i); j++) {
     ed8:	3b0b3a0e 	blcc	2cf718 <__ccfg+0x2af770>
			if (i->Events [j] . Event == (aword)pid
     edc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     ee0:	000a0213 	andeq	r0, sl, r3, lsl r2
     ee4:	000a3100 	andeq	r3, sl, r0, lsl #2
				wakeupev (i, j);
     ee8:	0b3a0e03 	bleq	e846fc <__ccfg+0xe64754>
     eec:	0b39053b 	bleq	e423e0 <__ccfg+0xe22438>
	for_all_tasks (i) {
     ef0:	00000111 	andeq	r0, r0, r1, lsl r1
}
     ef4:	31011d32 	tstcc	r1, r2, lsr sp
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
static void qfree (aword *ch) {
     efc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f00:	000b5705 	andeq	r5, fp, r5, lsl #14
	cc = (aword*)(mpools + MA_NP);
     f04:	00053300 	andeq	r3, r5, r0, lsl #6
	m_setnextp (ch, chunk);
     f08:	00001331 	andeq	r1, r0, r1, lsr r3
	m_setnextp (cc, ch);
     f0c:	03000534 	movweq	r0, #1332	; 0x534
}
     f10:	3b0b3a08 	blcc	2cf738 <__ccfg+0x2af790>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f18:	000a0213 	andeq	r0, sl, r3, lsl r2
     f1c:	00183500 	andseq	r3, r8, r0, lsl #10
			m_setnextp (cc, m_nextp (chunk));
     f20:	34360000 	ldrtcc	r0, [r6], #-0
			m_size (chunk) += m_hdrlen + m_size (ch);
     f24:	3a0e0300 	bcc	381b2c <__ccfg+0x361b84>
     f28:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f2c:	0013490b 	andseq	r4, r3, fp, lsl #18
     f30:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	0b3a0803 	bleq	e82f48 <__ccfg+0xe62fa0>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	0b39053b 	bleq	e4242c <__ccfg+0xe22484>
     f3c:	13490c27 	movtne	r0, #39975	; 0x9c27
     f40:	01120111 	tsteq	r2, r1, lsl r1
			m_setnextp (cc, m_nextp (chunk));
     f44:	13010a40 	movwne	r0, #6720	; 0x1a40
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     f4c:	3a080301 	bcc	201b58 <__ccfg+0x1e1bb0>
     f50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f54:	110c270b 	tstne	ip, fp, lsl #14
     f58:	40011201 	andmi	r1, r1, r1, lsl #4
     f5c:	0013010a 	andseq	r0, r3, sl, lsl #2
			if (m_size (chunk) >= m_size (ch))
     f60:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     f64:	0b3a0e03 	bleq	e84778 <__ccfg+0xe647d0>
     f68:	0b390b3b 	bleq	e43c5c <__ccfg+0xe23cb4>
		chunk = m_nextp (chunk))
     f6c:	0b200c27 	bleq	804010 <__ccfg+0x7e4068>
     f70:	00001301 	andeq	r1, r0, r1, lsl #6
     f74:	0300053a 	movweq	r0, #1338	; 0x53a
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	3b0b3a08 	blcc	2cf7a0 <__ccfg+0x2af7f8>
	diag_wait (a);
     f7c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	diag_wchar (c, a);
     f80:	3b000013 	blcc	fd4 <update_n_wake+0x34>
     f84:	0e03012e 	adfeqsp	f0, f3, #0.5
}
     f88:	0b3b0b3a 	bleq	ec3c78 <__ccfg+0xea3cd0>
     f8c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	syserror (ESTATE, "state");
     f90:	0b201349 	bleq	805cbc <__ccfg+0x7e5d14>
     f94:	00001301 	andeq	r1, r0, r1, lsl #6
     f98:	0300343c 	movweq	r3, #1084	; 0x43c
     f9c:	3b0b3a08 	blcc	2cf7c4 <__ccfg+0x2af81c>
void update_n_wake (word min, Boolean force) {
     fa0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     fa8:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
     fac:	0b3b0b3a 	bleq	ec3c9c <__ccfg+0xea3cf4>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     fb4:	13010b20 	movwne	r0, #6944	; 0x1b20
     fb8:	2e3e0000 	cdpcs	0, 3, cr0, cr14, cr0, {0}
     fbc:	11133101 	tstne	r3, r1, lsl #2
     fc0:	40011201 	andmi	r1, r1, r1, lsl #4
     fc4:	0013010a 	andseq	r0, r3, sl, lsl #2
     fc8:	00053f00 	andeq	r3, r5, r0, lsl #30
     fcc:	0a021331 	beq	85c98 <__ccfg+0x65cf0>
     fd0:	1d400000 	stclne	0, cr0, [r0, #-0]
     fd4:	11133101 	tstne	r3, r1, lsl #2
     fd8:	58011201 	stmdapl	r1, {r0, r9, ip}
     fdc:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
     fe0:	4100000b 	tstmi	r0, fp
		for_all_tasks (i) {
     fe4:	1331011d 	teqne	r1, #1073741831	; 0x40000007
	__pi_mintk = znew + min;
     fe8:	06550152 			; <UNDEFINED> instruction: 0x06550152
     fec:	0b590b58 	bleq	1643d54 <__ccfg+0x1623dac>
			if (!twaiting (i))
     ff0:	00000b57 	andeq	r0, r0, r7, asr fp
     ff4:	31012e42 	tstcc	r1, r2, asr #28
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     ffc:	000a4001 	andeq	r4, sl, r1
    1000:	00344300 	eorseq	r4, r4, r0, lsl #6
    1004:	00001331 	andeq	r1, r0, r1, lsr r3
    1008:	01110100 	tsteq	r1, r0, lsl #2
    100c:	0b130e25 	bleq	4c48a8 <__ccfg+0x4a4900>
    1010:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1014:	01110655 	tsteq	r1, r5, asr r6
    1018:	00000610 	andeq	r0, r0, r0, lsl r6
    101c:	0b002402 	bleq	a02c <__exidx_end+0x7234>
    1020:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1024:	0300000e 	movweq	r0, #14
				wakeuptm (i);
    1028:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    102c:	0b3b0b3a 	bleq	ec3d1c <__ccfg+0xea3d74>
		for_all_tasks (i) {
    1030:	13490b39 	movtne	r0, #39737	; 0x9b39
				d = i->Timer - znew;
    1034:	24040000 	strcs	r0, [r4], #-0
    1038:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    103c:	0008030b 	andeq	r0, r8, fp, lsl #6
		if ((word)(__pi_mintk - znew) < min) 
    1040:	000f0500 	andeq	r0, pc, r0, lsl #10
    1044:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1048:	26060000 	strcs	r0, [r6], -r0
	__pi_old = znew;
    104c:	00134900 	andseq	r4, r3, r0, lsl #18
}
    1050:	00150700 	andseq	r0, r5, r0, lsl #14
	TCI_RUN_DELAY_TIMER;
    1054:	00000c27 	andeq	r0, r0, r7, lsr #24
}
    1058:	03003408 	movweq	r3, #1032	; 0x408
    105c:	3b0b3a0e 	blcc	2cf89c <__ccfg+0x2af8f4>
    1060:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1064:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1068:	0900000c 	stmdbeq	r0, {r2, r3}
void proceed (word state) {
    106c:	13490101 	movtne	r0, #37121	; 0x9101
	prcdstate (__pi_curr, state);
    1070:	00001301 	andeq	r1, r0, r1, lsl #6
    1074:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
	release;
    1078:	000b2f13 	andeq	r2, fp, r3, lsl pc
    107c:	00340b00 	eorseq	r0, r4, r0, lsl #22
void __pi_wait (aword event, word state) {
    1080:	0b3a0e03 	bleq	e84894 <__ccfg+0xe648ec>
	sint j = nevents (__pi_curr);
    1084:	0b390b3b 	bleq	e43d78 <__ccfg+0xe23dd0>
	if (j >= MAX_EVENTS_PER_TASK)
    1088:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; f6c <qfree+0x74>
    108c:	00000a02 	andeq	r0, r0, r2, lsl #20
    1090:	03002e0c 	movweq	r2, #3596	; 0xe0c
		syserror (ENEVENTS, "sw");
    1094:	3b0b3a0e 	blcc	2cf8d4 <__ccfg+0x2af92c>
    1098:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	setestate (__pi_curr->Events [j], state, event);
    109c:	1201110c 	andne	r1, r1, #12, 2
	incwait (__pi_curr);
    10a0:	000a4001 	andeq	r4, sl, r1
	setestate (__pi_curr->Events [j], state, event);
    10a4:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
}
    10a8:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    10ac:	0b3b0b3a 	bleq	ec3d9c <__ccfg+0xea3df4>
    10b0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
void __pi_trigger (aword event) {
    10b4:	01120111 	tsteq	r2, r1, lsl r1
	for_all_tasks (i) {
    10b8:	00000a40 	andeq	r0, r0, r0, asr #20
		for (j = 0; j < nevents (i); j++) {
    10bc:	0300340e 	movweq	r3, #1038	; 0x40e
    10c0:	3b0b3a0e 	blcc	2cf900 <__ccfg+0x2af958>
    10c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10c8:	00060213 	andeq	r0, r6, r3, lsl r2
			if (i->Events [j] . Event == event) {
    10cc:	11010000 	mrsne	r0, (UNDEF: 1)
    10d0:	130e2501 	movwne	r2, #58625	; 0xe501
    10d4:	1b0e030b 	blne	381d08 <__ccfg+0x361d60>
				wakeupev (i, j);
    10d8:	0006100e 	andeq	r1, r6, lr
    10dc:	00240200 	eoreq	r0, r4, r0, lsl #4
	for_all_tasks (i) {
    10e0:	0b3e0b0b 	bleq	f83d14 <__ccfg+0xf63d6c>
}
    10e4:	00000e03 	andeq	r0, r0, r3, lsl #28
aword __pi_join (aword pid, word st) {
    10e8:	03001603 	movweq	r1, #1539	; 0x603
	for_all_tasks (i) {
    10ec:	3b0b3a0e 	blcc	2cf92c <__ccfg+0x2af984>
    10f0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	return 0;
    10f4:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
		if ((aword)i == pid) {
    10f8:	0b0b0024 	bleq	2c1190 <__ccfg+0x2a11e8>
			__pi_wait (pid, st);
    10fc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
}
    1100:	13050000 	movwne	r0, #20480	; 0x5000
	for_all_tasks (i) {
    1104:	3a0b0b01 	bcc	2c3d10 <__ccfg+0x2a3d68>
    1108:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
void delay (word d, word state) {
    110c:	0013010b 	andseq	r0, r3, fp, lsl #2
	settstate (__pi_curr, state);
    1110:	000d0600 	andeq	r0, sp, r0, lsl #12
    1114:	0b3a0e03 	bleq	e84928 <__ccfg+0xe64980>
    1118:	0b390b3b 	bleq	e43e0c <__ccfg+0xe23e64>
    111c:	0b381349 	bleq	e05e48 <__ccfg+0xde5ea0>
	update_n_wake (d, YES);
    1120:	26070000 	strcs	r0, [r7], -r0
    1124:	00134900 	andseq	r4, r3, r0, lsl #18
	__pi_curr->Timer = __pi_old + d;
    1128:	00340800 	eorseq	r0, r4, r0, lsl #16
    112c:	0b3a0e03 	bleq	e84940 <__ccfg+0xe64998>
	inctimer (__pi_curr);
    1130:	0b390b3b 	bleq	e43e24 <__ccfg+0xe23e7c>
    1134:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1018 <update_n_wake+0x78>
    1138:	00000c3c 	andeq	r0, r0, ip, lsr ip
}
    113c:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    1140:	0a000013 	beq	1194 <adddevfunc+0x8>
	if (fun == NULL)
    1144:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		return (int) __pi_curr;
    1148:	0b3b0b3a 	bleq	ec3e38 <__ccfg+0xea3e90>
    114c:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i)
    1150:	0b0d0b0b 	bleq	343d84 <__ccfg+0x323ddc>
}
    1154:	0b380b0c 	bleq	e03d8c <__ccfg+0xde3de4>
		if (i->code == fun)
    1158:	0f0b0000 	svceq	0x000b0000
	for_all_tasks (i)
    115c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1160:	0c000013 	stceq	0, cr0, [r0], {19}
    1164:	13490101 	movtne	r0, #37121	; 0x9101
int __pi_strlen (const char *s) {
    1168:	00001301 	andeq	r1, r0, r1, lsl #6
	for (i = 0; *(s+i) != '\0'; i++);
    116c:	0000210d 	andeq	r2, r0, sp, lsl #2
}
    1170:	00160e00 	andseq	r0, r6, r0, lsl #28
	for (i = 0; *(s+i) != '\0'; i++);
    1174:	0b3a0e03 	bleq	e84988 <__ccfg+0xe649e0>
	while (n--)
    1178:	0b39053b 	bleq	e4266c <__ccfg+0xe226c4>
    117c:	00001349 	andeq	r1, r0, r9, asr #6
		*dest++ = *src++;
    1180:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1184:	0013010c 	andseq	r0, r3, ip, lsl #2
    1188:	00051000 	andeq	r1, r5, r0
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	00001349 	andeq	r1, r0, r9, asr #6
		syserror (EREQPAR, "addv");
    1190:	03003411 	movweq	r3, #1041	; 0x411
		syserror (ERESOURCE, "addv");
    1194:	3b0b3a0e 	blcc	2cf9d4 <__ccfg+0x2afa2c>
	if (ioreq [loc] != NULL)
    1198:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    119c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		syserror (ERESOURCE, "addv");
    11a0:	1200000c 	andne	r0, r0, #12
	ioreq [loc] = rf;
    11a4:	0b0b0113 	bleq	2c15f8 <__ccfg+0x2a1650>
}
    11a8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    11ac:	13010b39 	movwne	r0, #6969	; 0x1b39
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	0d130000 	ldceq	0, cr0, [r3, #-0]
    11b4:	3a0e0300 	bcc	381dbc <__ccfg+0x361e14>
    11b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    11bc:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11c0:	1400000b 	strne	r0, [r0], #-11
    11c4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    11c8:	0b3a0b0b 	bleq	e83dfc <__ccfg+0xe63e54>
		syserror (ENODEVICE, "io");
    11cc:	0b39053b 	bleq	e426c0 <__ccfg+0xe22718>
    11d0:	00001301 	andeq	r1, r0, r1, lsl #6
	if (len == 0)
    11d4:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	000b2f13 	andeq	r2, fp, r3, lsl pc
    11dc:	00341600 	eorseq	r1, r4, r0, lsl #12
	if (ret >= 0)
    11e0:	0b3a1347 	bleq	e85f04 <__ccfg+0xe65f5c>
	if (ret == -1) {
    11e4:	0b39053b 	bleq	e426d8 <__ccfg+0xe22730>
    11e8:	00000a02 	andeq	r0, r0, r2, lsl #20
		if (retry == WNONE)
    11ec:	01110100 	tsteq	r1, r0, lsl #2
		iowait (dev, operation, retry);
    11f0:	0b130e25 	bleq	4c4a8c <__ccfg+0x4a4ae4>
    11f4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    11f8:	01110655 	tsteq	r1, r5, asr r6
			release;
    11fc:	00000610 	andeq	r0, r0, r0, lsl r6
	if (ret == -2) {
    1200:	0b002402 	bleq	a210 <__exidx_end+0x7418>
		if (retry != WNONE) {
    1204:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1208:	0300000e 	movweq	r0, #14
			iowait (dev, operation, retry);
    120c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1210:	0b3b0b3a 	bleq	ec3f00 <__ccfg+0xea3f58>
			(ioreq [dev]) (NONE, buf, len);
    1214:	13490b39 	movtne	r0, #39737	; 0x9b39
    1218:	24040000 	strcs	r0, [r4], #-0
    121c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
		(ioreq [dev]) (NONE, buf, len);
    1220:	0008030b 	andeq	r0, r8, fp, lsl #6
    1224:	00260500 	eoreq	r0, r6, r0, lsl #10
    1228:	00001349 	andeq	r1, r0, r9, asr #6
}
    122c:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
	if (retry != WNONE) {
    1230:	07000013 	smladeq	r0, r3, r0, r0
		delay (-ret - 2, retry);
    1234:	0b0b000f 	bleq	2c1278 <__ccfg+0x2a12d0>
    1238:	00001349 	andeq	r1, r0, r9, asr #6
    123c:	0b011308 	bleq	45e64 <__ccfg+0x25ebc>
    1240:	3b0b3a0b 	blcc	2cfa74 <__ccfg+0x2afacc>
		release;
    1244:	010b390b 	tsteq	fp, fp, lsl #18
    1248:	09000013 	stmdbeq	r0, {r0, r1, r4}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    124c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1250:	0b3b0b3a 	bleq	ec3f40 <__ccfg+0xea3f98>
    1254:	13490b39 	movtne	r0, #39737	; 0x9b39
    1258:	0b0d0b0b 	bleq	343e8c <__ccfg+0x323ee4>
    125c:	0b380b0c 	bleq	e03e94 <__ccfg+0xde3eec>
		syserror (ERESOURCE, "mal1");
    1260:	0d0a0000 	stceq	0, cr0, [sl, #-0]
    1264:	3a0e0300 	bcc	381e6c <__ccfg+0x361ec4>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1268:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    126c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1270:	0b00000b 	bleq	12a4 <__pi_free+0x8>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1274:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1278:	0b3b0b3a 	bleq	ec3f68 <__ccfg+0xea3fc0>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    127c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1280:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
}
    1284:	010c0000 	mrseq	r0, (UNDEF: 12)
    1288:	01134901 	tsteq	r3, r1, lsl #18
    128c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1290:	00000021 	andeq	r0, r0, r1, lsr #32
    1294:	0300160e 	movweq	r1, #1550	; 0x60e
    1298:	3b0b3a0e 	blcc	2cfad8 <__ccfg+0x2afb30>
void __pi_free (aword *ch) {
    129c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12a0:	0f000013 	svceq	0x00000013
    12a4:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		syserror (EMALLOC, "malg");
    12a8:	00001301 	andeq	r1, r0, r1, lsl #6
    12ac:	49000510 	stmdbmi	r0, {r4, r8, sl}
	mcfree [MA_NP] += m_size (ch);
    12b0:	11000013 	tstne	r0, r3, lsl r0
		m_size (ch) ^= MALLOC_UMASK;
    12b4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	mcfree [MA_NP] += m_size (ch);
    12bc:	13490b39 	movtne	r0, #39737	; 0x9b39
	QFREE;
    12c0:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	if (mevent [MA_NP] . nwait) {
    12c4:	13120000 	tstne	r2, #0
    12c8:	3a0b0b01 	bcc	2c3ed4 <__ccfg+0x2a3f2c>
		trigger ((aword)(&(mevent [MA_NP])));
    12cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		mevent [MA_NP] . nwait --;
    12d0:	0013010b 	andseq	r0, r3, fp, lsl #2
}
    12d4:	000d1300 	andeq	r1, sp, r0, lsl #6
    12d8:	0b3a0e03 	bleq	e84aec <__ccfg+0xe64b44>
    12dc:	0b39053b 	bleq	e427d0 <__ccfg+0xe22828>
    12e0:	0b381349 	bleq	e0600c <__ccfg+0xde6064>
void kill (aword pid) {
    12e4:	13140000 	tstne	r4, #0
		pid = (aword) __pi_curr;
    12e8:	0b0e0301 	bleq	381ef4 <__ccfg+0x361f4c>
	j = NULL;
    12ec:	3b0b3a0b 	blcc	2cfb20 <__ccfg+0x2afb78>
	for_all_tasks (i) {
    12f0:	010b3905 	tsteq	fp, r5, lsl #18
	syserror (EREQPAR, "kpi");
    12f4:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    12f8:	13490021 	movtne	r0, #36897	; 0x9021
		if ((aword)i == pid) {
    12fc:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1300:	47003416 	smladmi	r0, r6, r4, r3
				__PCB = i->Next;
    1304:	3b0b3a13 	blcc	2cfb58 <__ccfg+0x2afbb0>
			killev (i);
    1308:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
			ufree (i);
    130c:	1700000a 	strne	r0, [r0, -sl]
			if (i == __pi_curr)
    1310:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1260 <__pi_malloc_init+0x14>
    1314:	0b3a0e03 	bleq	e84b28 <__ccfg+0xe64b80>
				release;
    1318:	0b390b3b 	bleq	e4400c <__ccfg+0xe24064>
				j->Next = i->Next;
    131c:	01110c27 	tsteq	r1, r7, lsr #24
    1320:	0a400112 	beq	1001770 <__ccfg+0xfe17c8>
    1324:	00001301 	andeq	r1, r0, r1, lsl #6
}
    1328:	03000518 	movweq	r0, #1304	; 0x518
    132c:	3b0b3a08 	blcc	2cfb54 <__ccfg+0x2afbac>
    1330:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (size < 8)
    1334:	00060213 	andeq	r0, r6, r3, lsl r2
		_size = 2;
    1338:	00051900 	andeq	r1, r5, r0, lsl #18
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    133c:	0b3a0e03 	bleq	e84b50 <__ccfg+0xe64ba8>
		_size = (((aword)size) + 3) >> 2;
    1340:	0b390b3b 	bleq	e44034 <__ccfg+0xe2408c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	06021349 	streq	r1, [r2], -r9, asr #6
		_size = (((aword)size) + 3) >> 2;
    1348:	341a0000 	ldrcc	r0, [sl], #-0
		if (mevent [MA_NP] . nfail != 255)
    134c:	3a080300 	bcc	201f54 <__ccfg+0x1e1fac>
    1350:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			mevent [MA_NP] . nfail ++;
    1354:	0013490b 	andseq	r4, r3, fp, lsl #18
		mnfree [MA_NP] = 0;
    1358:	00341b00 	eorseq	r1, r4, r0, lsl #22
    135c:	0b3a0803 	bleq	e83370 <__ccfg+0xe633c8>
		if (m_magic (chunk) != MALLOC_MAGIC)
    1360:	0b390b3b 	bleq	e44054 <__ccfg+0xe240ac>
    1364:	06021349 	streq	r1, [r2], -r9, asr #6
			syserror (EMALLOC, "malc");
    1368:	1d1c0000 	ldcne	0, cr0, [ip, #-0]
    136c:	11133100 	tstne	r3, r0, lsl #2
		if (m_size (chunk) >= _size)
    1370:	58011201 	stmdapl	r1, {r0, r9, ip}
    1374:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		chunk = m_nextp (chunk)) {
    1378:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
		m_setnextp (cc, m_nextp (chunk));
    137c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1380:	06550152 			; <UNDEFINED> instruction: 0x06550152
    1384:	0b590b58 	bleq	16440ec <__ccfg+0x1624144>
			m_size (chunk) = _size;
    1388:	00000b57 	andeq	r0, r0, r7, asr fp
			cc = chunk + _size + m_hdrlen;
    138c:	3100051e 	tstcc	r0, lr, lsl r5
    1390:	00060213 	andeq	r0, r6, r3, lsl r2
			m_size (cc) = waste - m_hdrlen;
    1394:	002e1f00 	eoreq	r1, lr, r0, lsl #30
			QFREE;
    1398:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		mevent [MA_NP] . nfail = 0;
    139c:	0b3b0b3a 	bleq	ec408c <__ccfg+0xea40e4>
		mcfree [MA_NP] -= m_size (chunk);
    13a0:	01110b39 	tsteq	r1, r9, lsr fp
    13a4:	0a400112 	beq	10017f4 <__ccfg+0xfe184c>
    13a8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    13ac:	3a0e0300 	bcc	381fb4 <__ccfg+0x36200c>
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13b4:	200c270b 	andcs	r2, ip, fp, lsl #14
		m_size (chunk) |= MALLOC_UMASK;
    13b8:	2100000b 	tstcs	r0, fp
			mnfree [MA_NP] = mcfree [MA_NP];
    13bc:	0e03012e 	adfeqsp	f0, f3, #0.5
}
    13c0:	0b3b0b3a 	bleq	ec40b0 <__ccfg+0xea4108>
    13c4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    13c8:	0b201349 	bleq	8060f4 <__ccfg+0x7e614c>
    13cc:	05220000 	streq	r0, [r2, #-0]!
    13d0:	3a0e0300 	bcc	381fd8 <__ccfg+0x362030>
    13d4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13d8:	0013490b 	andseq	r4, r3, fp, lsl #18
aword __pi_fork (fsmcode func, aword data) {
    13dc:	11010000 	mrsne	r0, (UNDEF: 1)
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	130e2501 	movwne	r2, #58625	; 0xe501
    13e4:	1b0e030b 	blne	382018 <__ccfg+0x362070>
    13e8:	1106550e 	tstne	r6, lr, lsl #10
		if ((j = __PCB) == NULL)
    13ec:	00061001 	andeq	r1, r6, r1
	i->Next = NULL;
    13f0:	00240200 	eoreq	r0, r4, r0, lsl #4
	i->data = data;
    13f4:	0b3e0b0b 	bleq	f84028 <__ccfg+0xf64080>
		if ((j = __PCB) == NULL)
    13f8:	00000e03 	andeq	r0, r0, r3, lsl #28
}
    13fc:	03001603 	movweq	r1, #1539	; 0x603
			for (; j->Next != NULL; j = j->Next);
    1400:	3b0b3a0e 	blcc	2cfc40 <__ccfg+0x2afc98>
    1404:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	return (aword) i;
    1408:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    140c:	0b0b0024 	bleq	2c14a4 <__ccfg+0x2a14fc>
	if (mevent [MA_NP] . nwait != 255)
    1410:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1414:	26050000 	strcs	r0, [r5], -r0
    1418:	00134900 	andseq	r4, r3, r0, lsl #18
		mevent [MA_NP] . nwait ++;
    141c:	00350600 	eorseq	r0, r5, r0, lsl #12
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	00001349 	andeq	r1, r0, r9, asr #6
    1424:	0b011307 	bleq	46048 <__ccfg+0x260a0>
void diag (const char *mess, ...) {
    1428:	3b0b3a0b 	blcc	2cfc5c <__ccfg+0x2afcb4>
    142c:	010b390b 	tsteq	fp, fp, lsl #18
    1430:	08000013 	stmdaeq	r0, {r0, r1, r4}
	diag_disable_int (a, is);
    1434:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1438:	0b3b0b3a 	bleq	ec4128 <__ccfg+0xea4180>
    143c:	13490b39 	movtne	r0, #39737	; 0x9b39
				d = (bc == 16) ? 10000 : 1000000000;
    1440:	0b0d0b0b 	bleq	344074 <__ccfg+0x3240cc>
	diag_disable_int (a, is);
    1444:	0b380b0c 	bleq	e0407c <__ccfg+0xde40d4>
	while (*mess != '\0') {
    1448:	0d090000 	stceq	0, cr0, [r9, #-0]
	dgout ('\r');
    144c:	3a0e0300 	bcc	382054 <__ccfg+0x3620ac>
	dgout ('\n');
    1450:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1454:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1458:	0a00000b 	beq	148c <diag+0x64>
	diag_wait (a);
    145c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
	diag_enable_int (a, is);
    1460:	0b3b0b3a 	bleq	ec4150 <__ccfg+0xea41a8>
    1464:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1468:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    146c:	0f0b0000 	svceq	0x000b0000
    1470:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		if (*mess == '%') {
    1474:	0c000013 	stceq	0, cr0, [r0], {19}
    1478:	13490101 	movtne	r0, #37121	; 0x9101
			if (*mess == 'l') {
    147c:	00001301 	andeq	r1, r0, r1, lsl #6
    1480:	0000210d 	andeq	r2, r0, sp, lsl #2
				mess++;
    1484:	00160e00 	andseq	r0, r6, r0, lsl #28
				val = va_arg (ap, lword);
    1488:	0b3a0e03 	bleq	e84c9c <__ccfg+0xe64cf4>
				bc = 32;
    148c:	0b39053b 	bleq	e42980 <__ccfg+0xe229d8>
				bc = 16;
    1490:	00001349 	andeq	r1, r0, r9, asr #6
			switch (*mess) {
    1494:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1498:	0013010c 	andseq	r0, r3, ip, lsl #2
    149c:	00051000 	andeq	r1, r5, r0
				dgout ('%');
    14a0:	00001349 	andeq	r1, r0, r9, asr #6
    14a4:	03003411 	movweq	r3, #1041	; 0x411
				dgout (*mess);
    14a8:	3b0b3a0e 	blcc	2cfce8 <__ccfg+0x2afd40>
    14ac:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			switch (*mess) {
    14b0:	3c0c3f13 	stccc	15, cr3, [ip], {19}
					v = __pi_hex_enc_table [
    14b4:	1200000c 	andne	r0, r0, #12
					i += 4;
    14b8:	0b0b0113 	bleq	2c190c <__ccfg+0x2a1964>
					(val >> (bc - i)) & 0xf];
    14bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14c0:	13010b39 	movwne	r0, #6969	; 0x1b39
					dgout (v);
    14c4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    14c8:	3a0e0300 	bcc	3820d0 <__ccfg+0x362128>
				while (i < bc) {
    14cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			mess++;
    14d0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
					d /= 10;
    14d4:	1400000b 	strne	r0, [r0], #-11
				if ((val >> (bc - 1)) & 1) {
    14d8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    14dc:	0b3a0b0b 	bleq	e84110 <__ccfg+0xe64168>
					dgout ('-');
    14e0:	0b39053b 	bleq	e429d4 <__ccfg+0xe22a2c>
    14e4:	00001301 	andeq	r1, r0, r1, lsl #6
						val |= 0xffff0000;
    14e8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    14ec:	000b2f13 	andeq	r2, fp, r3, lsl pc
    14f0:	00341600 	eorseq	r1, r4, r0, lsl #12
				d = (bc == 16) ? 10000 : 1000000000;
    14f4:	0b3a0e03 	bleq	e84d08 <__ccfg+0xe64d60>
    14f8:	0b390b3b 	bleq	e441ec <__ccfg+0xe24244>
    14fc:	0a021349 	beq	86228 <__ccfg+0x66280>
					v = (word) (val / d);
    1500:	34170000 	ldrcc	r0, [r7], #-0
					if (v || d == 1) break;
    1504:	3a134700 	bcc	4d310c <__ccfg+0x4b3164>
    1508:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					d /= 10;
    150c:	000a020b 	andeq	r0, sl, fp, lsl #4
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
					dgout (v + '0');
    1514:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1518:	0b3b0b3a 	bleq	ec4208 <__ccfg+0xea4260>
    151c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					d /= 10;
    1520:	01120111 	tsteq	r2, r1, lsl r1
					val = val - (v * d);
    1524:	13010a40 	movwne	r0, #6720	; 0x1a40
					if (d == 0) break;
    1528:	05190000 	ldreq	r0, [r9, #-0]
					v = (word) (val / d);
    152c:	3a080300 	bcc	202134 <__ccfg+0x1e218c>
    1530:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				if (bc == 16)
    1534:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				d = (bc == 16) ? 10000 : 1000000000;
    1538:	1a000006 	bne	1558 <diag+0x130>
					val &= 0xffff;
    153c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
					dgout (*s);
    1540:	0b3b0b3a 	bleq	ec4230 <__ccfg+0xea4288>
					s++;
    1544:	13490b39 	movtne	r0, #39737	; 0x9b39
				while (*s != '\0') {
    1548:	00000602 	andeq	r0, r0, r2, lsl #12
    154c:	03000a1b 	movweq	r0, #2587	; 0xa1b
			dgout (*mess++);
    1550:	3b0b3a0e 	blcc	2cfd90 <__ccfg+0x2afde8>
    1554:	110b390b 	tstne	fp, fp, lsl #18
    1558:	1c000001 	stcne	0, cr0, [r0], {1}
    155c:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    1560:	06550152 			; <UNDEFINED> instruction: 0x06550152
}
    1564:	0b590b58 	bleq	16442cc <__ccfg+0x1624324>
    while(1)
    1568:	13010b57 	movwne	r0, #6999	; 0x1b57
{
    156c:	051d0000 	ldreq	r0, [sp, #-0]
    SetupTrimDevice();
    1570:	00133100 	andseq	r3, r3, r0, lsl #2
    pui32Src = &_etext;
    1574:	011d1e00 	tsteq	sp, r0, lsl #28
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1578:	01521331 	cmpeq	r2, r1, lsr r3
    __asm("    ldr     r0, =_bss\n"
    157c:	0b580655 	bleq	1602ed8 <__ccfg+0x15e2f30>
    1580:	0b570b59 	bleq	15c42ec <__ccfg+0x15a4344>
    1584:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    1588:	3a0e0301 	bcc	382194 <__ccfg+0x3621ec>
    158c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   main();
    1590:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    FaultISR();
    1594:	000b2013 	andeq	r2, fp, r3, lsl r0
        *pui32Dest++ = *pui32Src++;
    1598:	00052000 	andeq	r2, r5, r0
    159c:	0b3a0e03 	bleq	e84db0 <__ccfg+0xe64e08>
    15a0:	0b390b3b 	bleq	e44294 <__ccfg+0xe242ec>
    15a4:	00001349 	andeq	r1, r0, r9, asr #6
    15a8:	01110100 	tsteq	r1, r0, lsl #2
    15ac:	0b130e25 	bleq	4c4e48 <__ccfg+0x4a4ea0>
    15b0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    15b4:	01110655 	tsteq	r1, r5, asr r6
static byte get_byte () {
    15b8:	00000610 	andeq	r0, r0, r0, lsl r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15bc:	0b002402 	bleq	a5cc <__exidx_end+0x77d4>
    15c0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c4:	0300000e 	movweq	r0, #14
    15c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
		if (ee_inp)
    15cc:	0b3b0b3a 	bleq	ec42bc <__ccfg+0xea4314>
			b |= 1;
    15d0:	13490b39 	movtne	r0, #39737	; 0x9b39
    15d4:	24040000 	strcs	r0, [r4], #-0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15d8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	for (b = 0, i = 0; i < 8; i++) {
    15dc:	0008030b 	andeq	r0, r8, fp, lsl #6
}
    15e0:	00260500 	eoreq	r0, r6, r0, lsl #10
    15e4:	00001349 	andeq	r1, r0, r9, asr #6
    15e8:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
static void put_byte (byte b) {
    15ec:	07000013 	smladeq	r0, r3, r0, r0
    15f0:	0b0b0113 	bleq	2c1a44 <__ccfg+0x2a1a9c>
    15f4:	0b3b0b3a 	bleq	ec42e4 <__ccfg+0xea433c>
    15f8:	13010b39 	movwne	r0, #6969	; 0x1b39
		if (b & 0x80)
    15fc:	0d080000 	stceq	0, cr0, [r8, #-0]
    1600:	3a0e0300 	bcc	382208 <__ccfg+0x362260>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1604:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	for (i = 0; i < 8; i++) {
    1608:	0b13490b 	bleq	4d3a3c <__ccfg+0x4b3a94>
		b <<= 1;
    160c:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
	for (i = 0; i < 8; i++) {
    1610:	000b380b 	andeq	r3, fp, fp, lsl #16
}
    1614:	000d0900 	andeq	r0, sp, r0, lsl #18
    1618:	0b3a0e03 	bleq	e84e2c <__ccfg+0xe64e84>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    161c:	0b390b3b 	bleq	e44310 <__ccfg+0xe24368>
    1620:	0b381349 	bleq	e0634c <__ccfg+0xde63a4>
	put_byte (cmd);
    1624:	340a0000 	strcc	r0, [sl], #-0
    1628:	3a0e0300 	bcc	382230 <__ccfg+0x362288>
}
    162c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1630:	3f13490b 	svccc	0x0013490b
static void wwait (word st, word del) {
    1634:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1638:	000f0b00 	andeq	r0, pc, r0, lsl #22
    163c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
	while (dopen && (rdsr () & 1)) {
    1640:	010c0000 	mrseq	r0, (UNDEF: 12)
    1644:	01134901 	tsteq	r3, r1, lsl #18
    1648:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    164c:	00000021 	andeq	r0, r0, r1, lsr #32
	put_byte (CMD_RDSR);
    1650:	0300160e 	movweq	r1, #1550	; 0x60e
	r = get_byte ();
    1654:	3b0b3a0e 	blcc	2cfe94 <__ccfg+0x2afeec>
    1658:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	while (dopen && (rdsr () & 1)) {
    165c:	0f000013 	svceq	0x00000013
}
    1660:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
		if (st == WNONE)
    1664:	00001301 	andeq	r1, r0, r1, lsl #6
    1668:	49000510 	stmdbmi	r0, {r4, r8, sl}
			mdelay (1);
    166c:	11000013 	tstne	r0, r3, lsl r0
    1670:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			delay (del, st);
    1674:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1678:	13490b39 	movtne	r0, #39737	; 0x9b39
			release;
    167c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1680:	13120000 	tstne	r2, #0
    1684:	3a0b0b01 	bcc	2c4290 <__ccfg+0x2a42e8>
static void ready () {
    1688:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (dopen) {
    168c:	0013010b 	andseq	r0, r3, fp, lsl #2
		wwait (WNONE, 1);
    1690:	000d1300 	andeq	r1, sp, r0, lsl #6
    1694:	0b3a0e03 	bleq	e84ea8 <__ccfg+0xe64f00>
    1698:	0b39053b 	bleq	e42b8c <__ccfg+0xe22be4>
	dstat = 0;
    169c:	0b381349 	bleq	e063c8 <__ccfg+0xde6420>
}
    16a0:	13140000 	tstne	r4, #0
    16a4:	0b0e0301 	bleq	3822b0 <__ccfg+0x362308>
    16a8:	3b0b3a0b 	blcc	2cfedc <__ccfg+0x2aff34>
	udelay (1);
    16ac:	010b3905 	tsteq	fp, r5, lsl #18
    16b0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
	udelay (1);
    16b4:	13490021 	movtne	r0, #36897	; 0x9021
		dopen = DOPEN_TEMP;
    16b8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    16bc:	03003416 	movweq	r3, #1046	; 0x416
    16c0:	3b0b3a0e 	blcc	2cff00 <__ccfg+0x2aff58>
    16c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
static void cclose () {
    16c8:	000a0213 	andeq	r0, sl, r3, lsl r2
	if (dopen == DOPEN_TEMP) {
    16cc:	002e1700 	eoreq	r1, lr, r0, lsl #14
    16d0:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
		wwait (WNONE, 1);
    16d4:	0b3b0b3a 	bleq	ec43c4 <__ccfg+0xea441c>
    16d8:	01110b39 	tsteq	r1, r9, lsr fp
	cmd_0 (CMD_DP);
    16dc:	0a400112 	beq	1001b2c <__ccfg+0xfe1b84>
    16e0:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
		dopen = 0;
    16e4:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
    16e8:	3b0b3a0e 	blcc	2cff28 <__ccfg+0x2aff80>
word ee_open () {
    16ec:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
	ready ();
    16f0:	1113490c 	tstne	r3, ip, lsl #18
	dopen = DOPEN_PERM;
    16f4:	40011201 	andmi	r1, r1, r1, lsl #4
    16f8:	0013010a 	andseq	r0, r3, sl, lsl #2
}
    16fc:	00051900 	andeq	r1, r5, r0, lsl #18
	if (dopen) {
    1700:	0b3a0803 	bleq	e83714 <__ccfg+0xe6376c>
    1704:	0b390b3b 	bleq	e443f8 <__ccfg+0xe24450>
		dopen = DOPEN_TEMP;
    1708:	06021349 	streq	r1, [r2], -r9, asr #6
		cclose ();
    170c:	051a0000 	ldreq	r0, [sl, #-0]
}
    1710:	3a080300 	bcc	202318 <__ccfg+0x1e2370>
int ser_in (word st, char *buf, int len) {
    1714:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1718:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (len == 0)
    171c:	1b00000a 	blne	174c <ser_in+0x38>
	if (__inpline == NULL) {
    1720:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1670 <wwait+0x3c>
		if ((prcs = running (__inserial)) == 0) {
    1724:	0b3a0e03 	bleq	e84f38 <__ccfg+0xe64f90>
    1728:	0b39053b 	bleq	e42c1c <__ccfg+0xe22c74>
			prcs = runthread (__inserial);
    172c:	13490c27 	movtne	r0, #39975	; 0x9c27
    1730:	01120111 	tsteq	r2, r1, lsl r1
			if (prcs == 0) {
    1734:	13010a40 	movwne	r0, #6720	; 0x1a40
				npwait (st);
    1738:	051c0000 	ldreq	r0, [ip, #-0]
		release;
    173c:	3a080300 	bcc	202344 <__ccfg+0x1e239c>
		join (prcs, st);
    1740:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1744:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (*__inpline == NULL) // bin cmd
    1748:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    174c:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; 169c <ready+0x14>
	if (prcs >= len)
    1750:	0b3a0e03 	bleq	e84f64 <__ccfg+0xe64fbc>
		prcs = len-1;
    1754:	0b39053b 	bleq	e42c48 <__ccfg+0xe22ca0>
	memcpy (buf, __inpline, prcs);
    1758:	01120111 	tsteq	r2, r1, lsl r1
    175c:	00000a40 	andeq	r0, r0, r0, asr #20
    1760:	0300341e 	movweq	r3, #1054	; 0x41e
	ufree (__inpline);
    1764:	3b0b3a08 	blcc	2cff8c <__ccfg+0x2affe4>
	__inpline = NULL;
    1768:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	if (*buf) // if it's NULL, it's a bin cmd
    176c:	00060213 	andeq	r0, r6, r3, lsl r2
		buf [prcs] = '\0';
    1770:	000a1f00 	andeq	r1, sl, r0, lsl #30
}
    1774:	0b3a0e03 	bleq	e84f88 <__ccfg+0xe64fe0>
		prcs = strlen (__inpline);
    1778:	0b39053b 	bleq	e42c6c <__ccfg+0xe22cc4>
    177c:	00000111 	andeq	r0, r0, r1, lsl r1
		return 0;
    1780:	31011d20 	tstcc	r1, r0, lsr #26
    1784:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    1788:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
int ser_outf (word st, const char *m, ...) {
    178c:	010b5705 	tsteq	fp, r5, lsl #14
    1790:	21000013 	tstcs	r0, r3, lsl r0
	if ((prcs = running (__outserial)) != 0) {
    1794:	13310005 	teqne	r1, #5
    1798:	1d220000 	stcne	0, cr0, [r2, #-0]
		join (prcs, st);
    179c:	11133101 	tstne	r3, r1, lsl #2
    17a0:	58011201 	stmdapl	r1, {r0, r9, ip}
		release;
    17a4:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17a8:	2300000b 	movwcs	r0, #11
    17ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    17b0:	0b3b0b3a 	bleq	ec44a0 <__ccfg+0xea44f8>
		umwait (st);
    17b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    17b8:	00000602 	andeq	r0, r0, r2, lsl #12
	if (runstrand (__outserial, buf) == 0) {
    17bc:	03000a24 	movweq	r0, #2596	; 0xa24
    17c0:	3b0b3a0e 	blcc	2d0000 <__ccfg+0x2b0058>
    17c4:	110b390b 	tstne	fp, fp, lsl #18
		ufree (buf);
    17c8:	25000001 	strcs	r0, [r0, #-1]
		npwait (st);
    17cc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
}
    17d0:	06550152 			; <UNDEFINED> instruction: 0x06550152
    17d4:	0b590b58 	bleq	164453c <__ccfg+0x1624594>
    17d8:	00000b57 	andeq	r0, r0, r7, asr fp
    17dc:	31000526 	tstcc	r0, r6, lsr #10
int ser_inf (word st, const char *fmt, ...) {
    17e0:	00060213 	andeq	r0, r6, r3, lsl r2
    17e4:	011d2700 	tsteq	sp, r0, lsl #14
	if (fmt == NULL)
    17e8:	01521331 	cmpeq	r2, r1, lsr r3
	if (__inpline == NULL) {
    17ec:	0b580655 	bleq	1603148 <__ccfg+0x15e31a0>
		if ((prcs = running (__inserial)) == 0) {
    17f0:	0b570b59 	bleq	15c455c <__ccfg+0x15a45b4>
    17f4:	00001301 	andeq	r1, r0, r1, lsl #6
			prcs = runthread (__inserial);
    17f8:	31011d28 	tstcc	r1, r8, lsr #26
    17fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			if (prcs == 0) {
    1800:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
				npwait (st);
    1804:	000b570b 	andeq	r5, fp, fp, lsl #14
		release;
    1808:	002e2900 	eoreq	r2, lr, r0, lsl #18
		join (prcs, st);
    180c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1810:	0b3b0b3a 	bleq	ec4500 <__ccfg+0xea4558>
	va_start (ap, fmt);
    1814:	13490b39 	movtne	r0, #39737	; 0x9b39
	prcs = vscan (__inpline, fmt, ap);
    1818:	01120111 	tsteq	r2, r1, lsl r1
    181c:	00000a40 	andeq	r0, r0, r0, asr #20
	ufree (__inpline);
    1820:	03012e2a 	movweq	r2, #7722	; 0x1e2a
	__inpline = NULL;
    1824:	3b0b3a0e 	blcc	2d0064 <__ccfg+0x2b00bc>
}
    1828:	110b390b 	tstne	fp, fp, lsl #18
    182c:	40011201 	andmi	r1, r1, r1, lsl #4
    1830:	0013010a 	andseq	r0, r3, sl, lsl #2
		return 0;
    1834:	002e2b00 	eoreq	r2, lr, r0, lsl #22
    1838:	0b3a0e03 	bleq	e8504c <__ccfg+0xe650a4>
    183c:	0b390b3b 	bleq	e44530 <__ccfg+0xe24588>
strand (__outserial, const char*)
    1840:	00000b20 	andeq	r0, r0, r0, lsr #22
    1844:	03012e2c 	movweq	r2, #7724	; 0x1e2c
    1848:	3b0b3a0e 	blcc	2d0088 <__ccfg+0x2b00e0>
    184c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
endstrand
    1850:	1201110c 	andne	r1, r1, #12, 2
    1854:	010a4001 	tsteq	sl, r1
	ptr = data;
    1858:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    185c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
	if (*ptr)
    1860:	342e0000 	strtcc	r0, [lr], #-0
		len = strlen (ptr);
    1864:	02133100 	andseq	r3, r3, #0, 2
    1868:	2f000006 	svccs	0x00000006
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    186c:	0e03012e 	adfeqsp	f0, f3, #0.5
    1870:	0b3b0b3a 	bleq	ec4560 <__ccfg+0xea45b8>
    1874:	13490b39 	movtne	r0, #39737	; 0x9b39
    1878:	13010b20 	movwne	r0, #6944	; 0x1b20
    187c:	34300000 	ldrtcc	r0, [r0], #-0
	len -= quant;
    1880:	3a080300 	bcc	202488 <__ccfg+0x1e24e0>
    1884:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1888:	0013490b 	andseq	r4, r3, fp, lsl #18
	if (len == 0) {
    188c:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
		ufree (data);
    1890:	0b3a0e03 	bleq	e850a4 <__ccfg+0xe650fc>
		finish;
    1894:	0b390b3b 	bleq	e44588 <__ccfg+0xe245e0>
    1898:	0b200c27 	bleq	80493c <__ccfg+0x7e4994>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    189c:	00001301 	andeq	r1, r0, r1, lsl #6
    18a0:	03000532 	movweq	r0, #1330	; 0x532
    18a4:	3b0b3a08 	blcc	2d00cc <__ccfg+0x2b0124>
    18a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    18ac:	33000013 	movwcc	r0, #19
strand (__inserial, address)
    18b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    18b4:	01120111 	tsteq	r2, r1, lsl r1
    18b8:	0b590b58 	bleq	1644620 <__ccfg+0x1624678>
    18bc:	13010b57 	movwne	r0, #6999	; 0x1b57
    18c0:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
	if (__inpline != NULL)
    18c4:	3a0e0301 	bcc	3824d0 <__ccfg+0x362528>
    18c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		finish;
    18cc:	1113490b 	tstne	r3, fp, lsl #18
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    18d0:	40011201 	andmi	r1, r1, r1, lsl #4
    18d4:	0013010a 	andseq	r0, r3, sl, lsl #2
    18d8:	00343500 	eorseq	r3, r4, r0, lsl #10
    18dc:	0b3a0803 	bleq	e838f0 <__ccfg+0xe63948>
		umwait (IM_INIT);
    18e0:	0b390b3b 	bleq	e445d4 <__ccfg+0xe2462c>
		release;
    18e4:	06021349 	streq	r1, [r2], -r9, asr #6
	savedata (data);
    18e8:	2e360000 	cdpcs	0, 3, cr0, cr6, cr0, {0}
	len = MAX_LINE_LENGTH;
    18ec:	3a0e0301 	bcc	3824f8 <__ccfg+0x362550>
	io (IM_READ, __cport, READ, ptr, 1);
    18f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    18f4:	200c270b 	andcs	r2, ip, fp, lsl #14
    18f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    18fc:	00053700 	andeq	r3, r5, r0, lsl #14
	if (ptr == (char*) data) { // new line
    1900:	0b3a0e03 	bleq	e85114 <__ccfg+0xe6516c>
    1904:	0b39053b 	bleq	e42df8 <__ccfg+0xe22e50>
		if (*ptr == '\0') { // bin cmd
    1908:	00001349 	andeq	r1, r0, r9, asr #6
			proceed (IM_BIN);
    190c:	03012e38 	movweq	r2, #7736	; 0x1e38
    1910:	3b0b3a0e 	blcc	2d0150 <__ccfg+0x2b01a8>
		if (*ptr < 0x20)
    1914:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1918:	2013490c 	andscs	r4, r3, ip, lsl #18
			proceed (IM_READ);
    191c:	0013010b 	andseq	r0, r3, fp, lsl #2
    1920:	00053900 	andeq	r3, r5, r0, lsl #18
	if (*ptr == '\n' || *ptr == '\r') {
    1924:	0b3a0e03 	bleq	e85138 <__ccfg+0xe65190>
    1928:	0b390b3b 	bleq	e4461c <__ccfg+0xe24674>
    192c:	00001349 	andeq	r1, r0, r9, asr #6
		*ptr = '\0';
    1930:	31012e3a 	tstcc	r1, sl, lsr lr
		__inpline = (char*)data;
    1934:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
		finish;
    1938:	000a4001 	andeq	r4, sl, r1
	if (len) {
    193c:	001d3b00 	andseq	r3, sp, r0, lsl #22
		ptr++;
    1940:	01111331 	tsteq	r1, r1, lsr r3
    1944:	0b580112 	bleq	1601d94 <__ccfg+0x15e1dec>
		len--;
    1948:	0b570b59 	bleq	15c46b4 <__ccfg+0x15a470c>
	proceed (IM_READ);
    194c:	01000000 	mrseq	r0, (UNDEF: 0)
	io (IM_BIN, __cport, READ, ptr, 1);
    1950:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1954:	0e030b13 	vmoveq.32	d3[0], r0
    1958:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    195c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1960:	24020000 	strcs	r0, [r2], #-0
	len -= 2;
    1964:	3e0b0b00 	vmlacc.f64	d0, d11, d0
	if (len > *ptr + 1) // 1 for 0x04
    1968:	000e030b 	andeq	r0, lr, fp, lsl #6
    196c:	00160300 	andseq	r0, r6, r0, lsl #6
		len = *ptr + 1;
    1970:	0b3a0e03 	bleq	e85184 <__ccfg+0xe651dc>
    1974:	0b390b3b 	bleq	e44668 <__ccfg+0xe246c0>
	ptr++;
    1978:	00001349 	andeq	r1, r0, r9, asr #6
	quant = io (IM_BINL, __cport, READ, ptr, len);
    197c:	0b002404 	bleq	a994 <__exidx_end+0x7b9c>
    1980:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1984:	05000008 	streq	r0, [r0, #-8]
    1988:	13490026 	movtne	r0, #36902	; 0x9026
    198c:	35060000 	strcc	r0, [r6, #-0]
    1990:	00134900 	andseq	r4, r3, r0, lsl #18
	len -= quant;
    1994:	01130700 	tsteq	r3, r0, lsl #14
		__inpline = (char*)data;
    1998:	0b3a0b0b 	bleq	e845cc <__ccfg+0xe64624>
		finish;
    199c:	0b390b3b 	bleq	e44690 <__ccfg+0xe246e8>
	ptr += quant;
    19a0:	00001301 	andeq	r1, r0, r1, lsl #6
    19a4:	03000d08 	movweq	r0, #3336	; 0xd08
endstrand
    19a8:	3b0b3a0e 	blcc	2d01e8 <__ccfg+0x2b0240>
    19ac:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	proceed (IM_BINL);
    19b0:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
endstrand
    19b4:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    19b8:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    19bc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    19c0:	0b3b0b3a 	bleq	ec46b0 <__ccfg+0xea4708>
    19c4:	13490b39 	movtne	r0, #39737	; 0x9b39
    19c8:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (res && (d < n))
    19cc:	0300340a 	movweq	r3, #1034	; 0x40a
    19d0:	3b0b3a0e 	blcc	2d0210 <__ccfg+0x2b0268>
    19d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19d8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			res [d] = (char) c;
    19dc:	0b00000c 	bleq	1a14 <__pi_vfparse+0x28>
		d++;
    19e0:	0b0b000f 	bleq	2c1a24 <__ccfg+0x2a1a7c>
    19e4:	00001349 	andeq	r1, r0, r9, asr #6
    19e8:	4901010c 	stmdbmi	r1, {r2, r3, r8}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19ec:	00130113 	andseq	r0, r3, r3, lsl r1
    19f0:	00210d00 	eoreq	r0, r1, r0, lsl #26
    19f4:	160e0000 	strne	r0, [lr], -r0
				enci (10000);
    19f8:	3a0e0300 	bcc	382600 <__ccfg+0x362658>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a00:	0013490b 	andseq	r4, r3, fp, lsl #18
	d = 0;
    1a04:	01150f00 	tsteq	r5, r0, lsl #30
		c = *fm++;
    1a08:	13010c27 	movwne	r0, #7207	; 0x1c27
		if (c == '\\') {
    1a0c:	05100000 	ldreq	r0, [r0, #-0]
			if ((c = *fm++) == '\0') {
    1a10:	00134900 	andseq	r4, r3, r0, lsl #18
    1a14:	00341100 	eorseq	r1, r4, r0, lsl #2
				outc ('\\');
    1a18:	0b3a0e03 	bleq	e8522c <__ccfg+0xe65284>
			if ((c = *fm++) == '\0') {
    1a1c:	0b39053b 	bleq	e42f10 <__ccfg+0xe22f68>
				outc ('\\');
    1a20:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1904 <__inserial+0x54>
    1a24:	00000c3c 	andeq	r0, r0, ip, lsr ip
			outc (c);
    1a28:	0b011312 	bleq	46678 <__ccfg+0x266d0>
    1a2c:	3b0b3a0b 	blcc	2d0260 <__ccfg+0x2b02b8>
			if (c == '\0')
    1a30:	010b3905 	tsteq	fp, r5, lsl #18
    1a34:	13000013 	movwne	r0, #19
			outc (c);
    1a38:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
				outc (val);
    1a3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
				val = (word) va_arg (ap, aword);
    1a40:	13490b39 	movtne	r0, #39737	; 0x9b39
		if (c == '%') {
    1a44:	00000b38 	andeq	r0, r0, r8, lsr fp
    1a48:	03011314 	movweq	r1, #4884	; 0x1314
			c = *fm++;
    1a4c:	3a0b0b0e 	bcc	2c468c <__ccfg+0x2a46e4>
			switch (c) {
    1a50:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1a54:	0013010b 	andseq	r0, r3, fp, lsl #2
    1a58:	00211500 	eoreq	r1, r1, r0, lsl #10
    1a5c:	0b2f1349 	bleq	bc6788 <__ccfg+0xba67e0>
    1a60:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1a64:	030c3f01 	movweq	r3, #52993	; 0xcf01
    1a68:	3b0b3a0e 	blcc	2d02a8 <__ccfg+0x2b0300>
    1a6c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
				outc ('%');
    1a70:	1113490c 	tstne	r3, ip, lsl #18
    1a74:	40011201 	andmi	r1, r1, r1, lsl #4
				outc (c);
    1a78:	1700000a 	strne	r0, [r0, -sl]
    1a7c:	08030005 	stmdaeq	r3, {r0, r2}
    1a80:	0b3b0b3a 	bleq	ec4770 <__ccfg+0xea47c8>
				if (c == '\0')
    1a84:	13490b39 	movtne	r0, #39737	; 0x9b39
				return d;
    1a88:	00000602 	andeq	r0, r0, r2, lsl #12
}
    1a8c:	03003418 	movweq	r3, #1048	; 0x418
    1a90:	3b0b3a0e 	blcc	2d02d0 <__ccfg+0x2b0328>
			switch (c) {
    1a94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1a98:	00060213 	andeq	r0, r6, r3, lsl r2
    1a9c:	11010000 	mrsne	r0, (UNDEF: 1)
				for (i = 12; ; i -= 4) {
    1aa0:	130e2501 	movwne	r2, #58625	; 0xe501
				val = (word) va_arg (ap, aword);
    1aa4:	1b0e030b 	blne	3826d8 <__ccfg+0x362730>
						[ (val >> i) & 0xf ]);
    1aa8:	1106550e 	tstne	r6, lr, lsl #10
    1aac:	00061001 	andeq	r1, r6, r1
    1ab0:	00240200 	eoreq	r0, r4, r0, lsl #4
					outc (__pi_hex_enc_table
    1ab4:	0b3e0b0b 	bleq	f846e8 <__ccfg+0xf64740>
    1ab8:	00000e03 	andeq	r0, r0, r3, lsl #28
					if (i == 0)
    1abc:	03001603 	movweq	r1, #1539	; 0x603
    1ac0:	3b0b3a0e 	blcc	2d0300 <__ccfg+0x2b0358>
				for (i = 12; ; i -= 4) {
    1ac4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
				val = (word) va_arg (ap, aword);
    1ac8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
				if (c == 'd' && (val & 0x8000) != 0) {
    1acc:	0b0b0024 	bleq	2c1b64 <__ccfg+0x2a1bbc>
				val = (word) va_arg (ap, aword);
    1ad0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
				if (c == 'd' && (val & 0x8000) != 0) {
    1ad4:	13050000 	movwne	r0, #20480	; 0x5000
    1ad8:	0b0e0301 	bleq	3826e4 <__ccfg+0x36273c>
					outc ('-');
    1adc:	3b0b3a0b 	blcc	2d0310 <__ccfg+0x2b0368>
    1ae0:	0013010b 	andseq	r0, r3, fp, lsl #2
					val = (~val) + 1;
    1ae4:	000d0600 	andeq	r0, sp, r0, lsl #12
    1ae8:	13490e03 	movtne	r0, #40451	; 0x9e03
				for (i = 12; ; i -= 4) {
    1aec:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
				enci (10000);
    1af0:	0f070000 	svceq	0x00070000
    1af4:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1af8:	00260800 	eoreq	r0, r6, r0, lsl #16
    1afc:	00001349 	andeq	r1, r0, r9, asr #6
    1b00:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    1b04:	0a000013 	beq	1b58 <__pi_vfparse+0x16c>
    1b08:	0b0b0113 	bleq	2c1f5c <__ccfg+0x2a1fb4>
    1b0c:	0b3b0b3a 	bleq	ec47fc <__ccfg+0xea4854>
    1b10:	13010b39 	movwne	r0, #6969	; 0x1b39
    1b14:	0d0b0000 	stceq	0, cr0, [fp, #-0]
    1b18:	3a0e0300 	bcc	382720 <__ccfg+0x362778>
    1b1c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b20:	0b13490b 	bleq	4d3f54 <__ccfg+0x4b3fac>
    1b24:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1b28:	000b380b 	andeq	r3, fp, fp, lsl #16
    1b2c:	000d0c00 	andeq	r0, sp, r0, lsl #24
    1b30:	0b3a0e03 	bleq	e85344 <__ccfg+0xe6539c>
    1b34:	0b390b3b 	bleq	e44828 <__ccfg+0xe24880>
				if (c == 'd' || c == 'u') {
    1b38:	0b381349 	bleq	e06864 <__ccfg+0xde68bc>
    1b3c:	340d0000 	strcc	r0, [sp], #-0
					if (c == 'd' &&
    1b40:	3a0e0300 	bcc	382748 <__ccfg+0x3627a0>
					val = va_arg (ap, lword);
    1b44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					fm++;
    1b48:	3f13490b 	svccc	0x0013490b
					if (c == 'd' &&
    1b4c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1b50:	000f0e00 	andeq	r0, pc, r0, lsl #28
						outc ('-');
    1b54:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1b58:	010f0000 	mrseq	r0, CPSR
						val = (~val) + 1;
    1b5c:	01134901 	tsteq	r3, r1, lsl #18
				enci (10000);
    1b60:	10000013 	andne	r0, r0, r3, lsl r0
					enci (1000000000UL);
    1b64:	00000021 	andeq	r0, r0, r1, lsr #32
    1b68:	03001611 	movweq	r1, #1553	; 0x611
    1b6c:	3b0b3a0e 	blcc	2d03ac <__ccfg+0x2b0404>
    1b70:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1b74:	12000013 	andne	r0, r0, #19
    1b78:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1b7c:	00001301 	andeq	r1, r0, r1, lsl #6
    1b80:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    1b84:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1b88:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1b8c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1b90:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b94:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1b98:	13150000 	tstne	r5, #0
    1b9c:	3a0b0b01 	bcc	2c47a8 <__ccfg+0x2a4800>
    1ba0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ba4:	0013010b 	andseq	r0, r3, fp, lsl #2
				} else if (c == 'x') {
    1ba8:	000d1600 	andeq	r1, sp, r0, lsl #12
					for (i = 28; ; i -= 4) {
    1bac:	0b3a0e03 	bleq	e853c0 <__ccfg+0xe65418>
					val = va_arg (ap, lword);
    1bb0:	0b39053b 	bleq	e430a4 <__ccfg+0xe230fc>
							[ (val >> i) & 0xf ]);
    1bb4:	0b381349 	bleq	e068e0 <__ccfg+0xde6938>
    1bb8:	13170000 	tstne	r7, #0
						outc (__pi_hex_enc_table
    1bbc:	0b0e0301 	bleq	3827c8 <__ccfg+0x362820>
    1bc0:	3b0b3a0b 	blcc	2d03f4 <__ccfg+0x2b044c>
    1bc4:	010b3905 	tsteq	fp, r5, lsl #18
						if (i == 0)
    1bc8:	18000013 	stmdane	r0, {r0, r1, r4}
    1bcc:	13490021 	movtne	r0, #36897	; 0x9021
					for (i = 28; ; i -= 4) {
    1bd0:	00000b2f 	andeq	r0, r0, pc, lsr #22
					outc ('%');
    1bd4:	3f012e19 	svccc	0x00012e19
    1bd8:	3a0e030c 	bcc	382810 <__ccfg+0x362868>
    1bdc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					outc ('l');
    1be0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1be4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				val = (word) va_arg (ap, aword);
    1be8:	010a4001 	tsteq	sl, r1
				outc (val);
    1bec:	1a000013 	bne	1c40 <vform+0x24>
    1bf0:	08030005 	stmdaeq	r3, {r0, r2}
				while (*st != '\0') {
    1bf4:	0b3b0b3a 	bleq	ec48e4 <__ccfg+0xea493c>
    1bf8:	13490b39 	movtne	r0, #39737	; 0x9b39
    1bfc:	00000602 	andeq	r0, r0, r2, lsl #12
    1c00:	0300051b 	movweq	r0, #1307	; 0x51b
					outc (*st);
    1c04:	3b0b3a08 	blcc	2d042c <__ccfg+0x2b0484>
    1c08:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
					st++;
    1c0c:	000a0213 	andeq	r0, sl, r3, lsl r2
		c = *fm++;
    1c10:	00181c00 	andseq	r1, r8, r0, lsl #24
    1c14:	341d0000 	ldrcc	r0, [sp], #-0
    1c18:	3a0e0300 	bcc	382820 <__ccfg+0x362878>
char *vform (char *res, const char *fm, va_list aq) {
    1c1c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1c20:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	if (res != NULL) {
    1c24:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1c28:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1c2c:	0b3b0b3a 	bleq	ec491c <__ccfg+0xea4974>
    1c30:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    1c34:	00000602 	andeq	r0, r0, r2, lsl #12
    1c38:	0300341f 	movweq	r3, #1055	; 0x41f
	fml = strlen (fm) + 17;
    1c3c:	3b0b3a08 	blcc	2d0464 <__ccfg+0x2b04bc>
    1c40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c44:	000a0213 	andeq	r0, sl, r3, lsl r2
	if ((res = (char*) umalloc (fml)) == NULL)
    1c48:	11010000 	mrsne	r0, (UNDEF: 1)
    1c4c:	130e2501 	movwne	r2, #58625	; 0xe501
    1c50:	1b0e030b 	blne	382884 <__ccfg+0x3628dc>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1c54:	1106550e 	tstne	r6, lr, lsl #10
    1c58:	00061001 	andeq	r1, r6, r1
    1c5c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1c60:	0b3e0b0b 	bleq	f84894 <__ccfg+0xf648ec>
		ufree (res);
    1c64:	00000e03 	andeq	r0, r0, r3, lsl #28
		goto Again;
    1c68:	03001603 	movweq	r1, #1539	; 0x603
	if (buf == NULL || fmt == NULL)
    1c6c:	3b0b3a0e 	blcc	2d04ac <__ccfg+0x2b0504>
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c70:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if (buf == NULL || fmt == NULL)
    1c74:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1c78:	0b0b0024 	bleq	2c1d10 <__ccfg+0x2a1d68>
    1c7c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
		    	    case 'u': scanu (lword); break;
    1c80:	13050000 	movwne	r0, #20480	; 0x5000
			while (isspace (*buf)) buf++;
    1c84:	0b0e0301 	bleq	382890 <__ccfg+0x3628e8>
    1c88:	3b0b3a0b 	blcc	2d04bc <__ccfg+0x2b0514>
	while (*fmt != '\0') {
    1c8c:	0013010b 	andseq	r0, r3, fp, lsl #2
		if (*fmt++ != '%')
    1c90:	000d0600 	andeq	r0, sp, r0, lsl #12
		switch (*fmt++) {
    1c94:	13490e03 	movtne	r0, #40451	; 0x9e03
    1c98:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    1c9c:	0f070000 	svceq	0x00070000
    1ca0:	000b0b00 	andeq	r0, fp, r0, lsl #22
    1ca4:	00260800 	eoreq	r0, r6, r0, lsl #16
    1ca8:	00001349 	andeq	r1, r0, r9, asr #6
    1cac:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
}
    1cb0:	0a000013 	beq	1d04 <vscan+0x98>
		switch (*fmt++) {
    1cb4:	0b0b0113 	bleq	2c2108 <__ccfg+0x2a2160>
    1cb8:	0b3b0b3a 	bleq	ec49a8 <__ccfg+0xea4a00>
    1cbc:	13010b39 	movwne	r0, #6969	; 0x1b39
    1cc0:	0d0b0000 	stceq	0, cr0, [fp, #-0]
			while (isspace (*buf)) buf++;
    1cc4:	3a0e0300 	bcc	3828cc <__ccfg+0x362924>
    1cc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ccc:	0b13490b 	bleq	4d4100 <__ccfg+0x4b4158>
    1cd0:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1cd4:	000b380b 	andeq	r3, fp, fp, lsl #16
    1cd8:	000d0c00 	andeq	r0, sp, r0, lsl #24
			if (*buf == '\0')
    1cdc:	0b3a0e03 	bleq	e854f0 <__ccfg+0xe65548>
			if (*buf != ',') {
    1ce0:	0b390b3b 	bleq	e449d4 <__ccfg+0xe24a2c>
			sap = va_arg (ap, char*);
    1ce4:	0b381349 	bleq	e06a10 <__ccfg+0xde6a68>
			nc++;
    1ce8:	340d0000 	strcc	r0, [sp], #-0
			if (*buf != ',') {
    1cec:	3a0e0300 	bcc	3828f4 <__ccfg+0x36294c>
				while (!isspace (*buf) && *buf != ',' &&
    1cf0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf4:	3f13490b 	svccc	0x0013490b
    1cf8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1cfc:	000f0e00 	andeq	r0, pc, r0, lsl #28
    1d00:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1d04:	010f0000 	mrseq	r0, CPSR
    1d08:	01134901 	tsteq	r3, r1, lsl #18
			while (isspace (*buf)) buf++;
    1d0c:	10000013 	andne	r0, r0, r3, lsl r0
    1d10:	00000021 	andeq	r0, r0, r1, lsr #32
    1d14:	03001611 	movweq	r1, #1553	; 0x611
    1d18:	3b0b3a0e 	blcc	2d0558 <__ccfg+0x2b05b0>
    1d1c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
			if (*buf == ',') buf++;
    1d20:	12000013 	andne	r0, r0, #19
    1d24:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
			*sap = '\0';
    1d28:	00001301 	andeq	r1, r0, r1, lsl #6
			break;
    1d2c:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
		    case 'd': scani (word); break;
    1d30:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    1d34:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1d38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d3c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d40:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1d44:	13150000 	tstne	r5, #0
    1d48:	3a0b0b01 	bcc	2c4954 <__ccfg+0x2a49ac>
    1d4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d50:	0013010b 	andseq	r0, r3, fp, lsl #2
    1d54:	000d1600 	andeq	r1, sp, r0, lsl #12
    1d58:	0b3a0e03 	bleq	e8556c <__ccfg+0xe655c4>
    1d5c:	0b39053b 	bleq	e43250 <__ccfg+0xe232a8>
    1d60:	0b381349 	bleq	e06a8c <__ccfg+0xde6ae4>
    1d64:	13170000 	tstne	r7, #0
    1d68:	0b0e0301 	bleq	382974 <__ccfg+0x3629cc>
    1d6c:	3b0b3a0b 	blcc	2d05a0 <__ccfg+0x2b05f8>
    1d70:	010b3905 	tsteq	fp, r5, lsl #18
    1d74:	18000013 	stmdane	r0, {r0, r1, r4}
    1d78:	13490021 	movtne	r0, #36897	; 0x9021
    1d7c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1d80:	3f012e19 	svccc	0x00012e19
    1d84:	3a0e030c 	bcc	3829bc <__ccfg+0x362a14>
    1d88:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d8c:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1d90:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1d94:	010a4001 	tsteq	sl, r1
    1d98:	1a000013 	bne	1dec <vscan+0x180>
    1d9c:	08030005 	stmdaeq	r3, {r0, r2}
		    case 'u': scanu (word); break;
    1da0:	0b3b0b3a 	bleq	ec4a90 <__ccfg+0xea4ae8>
    1da4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1da8:	00000602 	andeq	r0, r0, r2, lsl #12
    1dac:	0300051b 	movweq	r0, #1307	; 0x51b
    1db0:	3b0b3a08 	blcc	2d05d8 <__ccfg+0x2b0630>
    1db4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1db8:	000a0213 	andeq	r0, sl, r3, lsl r2
    1dbc:	00181c00 	andseq	r1, r8, r0, lsl #24
    1dc0:	341d0000 	ldrcc	r0, [sp], #-0
    1dc4:	3a0e0300 	bcc	3829cc <__ccfg+0x362a24>
    1dc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1dcc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1dd0:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
    1dd4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1dd8:	0b3b0b3a 	bleq	ec4ac8 <__ccfg+0xea4b20>
    1ddc:	13490b39 	movtne	r0, #39737	; 0x9b39
    1de0:	00000a02 	andeq	r0, r0, r2, lsl #20
    1de4:	01110100 	tsteq	r1, r0, lsl #2
		    case 'x': scanx (word); break;
    1de8:	0b130e25 	bleq	4c5684 <__ccfg+0x4a56dc>
    1dec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1df0:	01110655 	tsteq	r1, r5, asr r6
    1df4:	00000610 	andeq	r0, r0, r0, lsl r6
    1df8:	0b002402 	bleq	ae08 <__exidx_end+0x8010>
    1dfc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1e00:	0300000e 	movweq	r0, #14
    1e04:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1e08:	0b3b0b3a 	bleq	ec4af8 <__ccfg+0xea4b50>
    1e0c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e10:	24040000 	strcs	r0, [r4], #-0
    1e14:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1e18:	0008030b 	andeq	r0, r8, fp, lsl #6
    1e1c:	00260500 	eoreq	r0, r6, r0, lsl #10
    1e20:	00001349 	andeq	r1, r0, r9, asr #6
    1e24:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1e28:	07000013 	smladeq	r0, r3, r0, r0
    1e2c:	0b0b0113 	bleq	2c2280 <__ccfg+0x2a22d8>
    1e30:	0b3b0b3a 	bleq	ec4b20 <__ccfg+0xea4b78>
    1e34:	13010b39 	movwne	r0, #6969	; 0x1b39
    1e38:	0d080000 	stceq	0, cr0, [r8, #-0]
    1e3c:	3a0e0300 	bcc	382a44 <__ccfg+0x362a9c>
    1e40:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e44:	0b13490b 	bleq	4d4278 <__ccfg+0x4b42d0>
    1e48:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    1e4c:	000b380b 	andeq	r3, fp, fp, lsl #16
    1e50:	000d0900 	andeq	r0, sp, r0, lsl #18
    1e54:	0b3a0e03 	bleq	e85668 <__ccfg+0xe656c0>
    1e58:	0b390b3b 	bleq	e44b4c <__ccfg+0xe24ba4>
    1e5c:	0b381349 	bleq	e06b88 <__ccfg+0xde6be0>
			switch (*fmt++) {
    1e60:	340a0000 	strcc	r0, [sl], #-0
    1e64:	3a0e0300 	bcc	382a6c <__ccfg+0x362ac4>
    1e68:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1e6c:	3f13490b 	svccc	0x0013490b
    1e70:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    1e74:	000f0b00 	andeq	r0, pc, r0, lsl #22
		    	    case 'd': scani (lword); break;
    1e78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1e7c:	010c0000 	mrseq	r0, (UNDEF: 12)
    1e80:	01134901 	tsteq	r3, r1, lsl #18
    1e84:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1e88:	00000021 	andeq	r0, r0, r1, lsr #32
    1e8c:	0300160e 	movweq	r1, #1550	; 0x60e
    1e90:	3b0b3a0e 	blcc	2d06d0 <__ccfg+0x2b0728>
    1e94:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1e98:	0f000013 	svceq	0x00000013
    1e9c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    1ea0:	00001301 	andeq	r1, r0, r1, lsl #6
    1ea4:	49000510 	stmdbmi	r0, {r4, r8, sl}
    1ea8:	11000013 	tstne	r0, r3, lsl r0
    1eac:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1eb0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1eb4:	13490b39 	movtne	r0, #39737	; 0x9b39
    1eb8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1ebc:	13120000 	tstne	r2, #0
    1ec0:	3a0b0b01 	bcc	2c4acc <__ccfg+0x2a4b24>
    1ec4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1ec8:	0013010b 	andseq	r0, r3, fp, lsl #2
    1ecc:	000d1300 	andeq	r1, sp, r0, lsl #6
    1ed0:	0b3a0e03 	bleq	e856e4 <__ccfg+0xe6573c>
		    	    case 'x': scanx (lword); break;
    1ed4:	0b39053b 	bleq	e433c8 <__ccfg+0xe23420>
    1ed8:	0b381349 	bleq	e06c04 <__ccfg+0xde6c5c>
    1edc:	13140000 	tstne	r4, #0
    1ee0:	0b0e0301 	bleq	382aec <__ccfg+0x362b44>
    1ee4:	3b0b3a0b 	blcc	2d0718 <__ccfg+0x2b0770>
    1ee8:	010b3905 	tsteq	fp, r5, lsl #18
    1eec:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    1ef0:	13490021 	movtne	r0, #36897	; 0x9021
    1ef4:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1ef8:	3f012e16 	svccc	0x00012e16
    1efc:	3a0e030c 	bcc	382b34 <__ccfg+0x362b8c>
    1f00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f04:	110c270b 	tstne	ip, fp, lsl #14
    1f08:	40011201 	andmi	r1, r1, r1, lsl #4
    1f0c:	0013010a 	andseq	r0, r3, sl, lsl #2
    1f10:	00051700 	andeq	r1, r5, r0, lsl #14
    1f14:	0b3a0e03 	bleq	e85728 <__ccfg+0xe65780>
    1f18:	0b390b3b 	bleq	e44c0c <__ccfg+0xe24c64>
    1f1c:	06021349 	streq	r1, [r2], -r9, asr #6
    1f20:	34180000 	ldrcc	r0, [r8], #-0
    1f24:	3a0e0300 	bcc	382b2c <__ccfg+0x362b84>
    1f28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f30:	19000006 	stmdbne	r0, {r1, r2}
    1f34:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    1f38:	0b3b0b3a 	bleq	ec4c28 <__ccfg+0xea4c80>
    1f3c:	00000b39 	andeq	r0, r0, r9, lsr fp
    1f40:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
		    	    case 'd': scani (lword); break;
    1f44:	1b000006 	blne	1f64 <vscan+0x2f8>
    1f48:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1f4c:	0b3b0b3a 	bleq	ec4c3c <__ccfg+0xea4c94>
    1f50:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f54:	00000a02 	andeq	r0, r0, r2, lsl #20
    1f58:	01110100 	tsteq	r1, r0, lsl #2
    1f5c:	0b130e25 	bleq	4c57f8 <__ccfg+0x4a5850>
		    	    case 'u': scanu (lword); break;
    1f60:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1f64:	01110655 	tsteq	r1, r5, asr r6
    1f68:	00000610 	andeq	r0, r0, r0, lsl r6
    1f6c:	0b002402 	bleq	af7c <__exidx_end+0x8184>
    1f70:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1f74:	0300000e 	movweq	r0, #14
    1f78:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1f7c:	0b3b0b3a 	bleq	ec4c6c <__ccfg+0xea4cc4>
    1f80:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f84:	24040000 	strcs	r0, [r4], #-0
    1f88:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1f8c:	0008030b 	andeq	r0, r8, fp, lsl #6
    1f90:	00260500 	eoreq	r0, r6, r0, lsl #10
    1f94:	00001349 	andeq	r1, r0, r9, asr #6
    1f98:	49003506 	stmdbmi	r0, {r1, r2, r8, sl, ip, sp}
    1f9c:	07000013 	smladeq	r0, r3, r0, r0
    1fa0:	0b0b000f 	bleq	2c1fe4 <__ccfg+0x2a203c>
    1fa4:	00001349 	andeq	r1, r0, r9, asr #6
		    	    case 'x': scanx (lword); break;
    1fa8:	0b011308 	bleq	46bd0 <__ccfg+0x26c28>
    1fac:	3b0b3a0b 	blcc	2d07e0 <__ccfg+0x2b0838>
			if ((c = *buf++) == '\0')
    1fb0:	010b390b 	tsteq	fp, fp, lsl #18
    1fb4:	09000013 	stmdbeq	r0, {r0, r1, r4}
			sap = va_arg (ap, char*);
    1fb8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			nc++;
    1fbc:	0b3b0b3a 	bleq	ec4cac <__ccfg+0xea4d04>
			break;
    1fc0:	13490b39 	movtne	r0, #39737	; 0x9b39
			while (isspace (*buf)) buf++;
    1fc4:	0b0d0b0b 	bleq	344bf8 <__ccfg+0x324c50>
    1fc8:	0b380b0c 	bleq	e04c00 <__ccfg+0xde4c58>
    1fcc:	0d0a0000 	stceq	0, cr0, [sl, #-0]
						*sap++ = *buf++;
    1fd0:	3a0e0300 	bcc	382bd8 <__ccfg+0x362c30>
    1fd4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			while (isspace (*buf)) buf++;
    1fd8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1fdc:	0b00000b 	bleq	2010 <NOROM_AONBatMonTemperatureGetDegC+0x14>
    1fe0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		return 0;
    1fe4:	0b3b0b3a 	bleq	ec4cd4 <__ccfg+0xea4d2c>
    1fe8:	13490b39 	movtne	r0, #39737	; 0x9b39
		    case 'x': scanx (word); break;
    1fec:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1ff0:	010c0000 	mrseq	r0, (UNDEF: 12)
		    	    case 'x': scanx (lword); break;
    1ff4:	01134901 	tsteq	r3, r1, lsl #18
    1ff8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
    1ffc:	00000021 	andeq	r0, r0, r1, lsr #32
    2000:	0300160e 	movweq	r1, #1550	; 0x60e
    2004:	3b0b3a0e 	blcc	2d0844 <__ccfg+0x2b089c>
    2008:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    200c:	0f000013 	svceq	0x00000013
    2010:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    2014:	00001301 	andeq	r1, r0, r1, lsl #6
    2018:	49000510 	stmdbmi	r0, {r4, r8, sl}
    201c:	11000013 	tstne	r0, r3, lsl r0
    2020:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2024:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2028:	13490b39 	movtne	r0, #39737	; 0x9b39
    202c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    2030:	13120000 	tstne	r2, #0
    2034:	3a0b0b01 	bcc	2c4c40 <__ccfg+0x2a4c98>
    2038:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    203c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2040:	000d1300 	andeq	r1, sp, r0, lsl #6
    2044:	0b3a0e03 	bleq	e85858 <__ccfg+0xe658b0>
    2048:	0b39053b 	bleq	e4353c <__ccfg+0xe23594>
    204c:	0b381349 	bleq	e06d78 <__ccfg+0xde6dd0>
    2050:	13140000 	tstne	r4, #0
    2054:	0b0e0301 	bleq	382c60 <__ccfg+0x362cb8>
    2058:	3b0b3a0b 	blcc	2d088c <__ccfg+0x2b08e4>
    205c:	010b3905 	tsteq	fp, r5, lsl #18
    2060:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2064:	13490021 	movtne	r0, #36897	; 0x9021
    2068:	00000b2f 	andeq	r0, r0, pc, lsr #22
    206c:	03003416 	movweq	r3, #1046	; 0x416
    2070:	3b0b3a0e 	blcc	2d08b0 <__ccfg+0x2b0908>
    2074:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2078:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
    207c:	1700000a 	strne	r0, [r0, -sl]
    2080:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1fd0 <vscan+0x364>
    2084:	0b3a0e03 	bleq	e85898 <__ccfg+0xe658f0>
    2088:	0b390b3b 	bleq	e44d7c <__ccfg+0xe24dd4>
    208c:	01110c27 	tsteq	r1, r7, lsr #24
    2090:	0a400112 	beq	10024e0 <__ccfg+0xfe2538>
    2094:	05180000 	ldreq	r0, [r8, #-0]
    2098:	3a0e0300 	bcc	382ca0 <__ccfg+0x362cf8>
    209c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    20a4:	19000006 	stmdbne	r0, {r1, r2}
    20a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    20ac:	0b3b0b3a 	bleq	ec4d9c <__ccfg+0xea4df4>
    20b0:	13490b39 	movtne	r0, #39737	; 0x9b39
    20b4:	00000602 	andeq	r0, r0, r2, lsl #12
    20b8:	55010b1a 	strpl	r0, [r1, #-2842]	; 0xfffff4e6
    20bc:	1b000006 	blne	20dc <TrimAfterColdResetWakeupFromShutDown+0x88>
    20c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    20c4:	0b3b0b3a 	bleq	ec4db4 <__ccfg+0xea4e0c>
    20c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    20cc:	00000a02 	andeq	r0, r0, r2, lsl #20
    20d0:	01110100 	tsteq	r1, r0, lsl #2
    20d4:	0b130e25 	bleq	4c5970 <__ccfg+0x4a59c8>
    20d8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    20dc:	01110655 	tsteq	r1, r5, asr r6
    20e0:	00000610 	andeq	r0, r0, r0, lsl r6
    20e4:	0b002402 	bleq	b0f4 <__exidx_end+0x82fc>
    20e8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    20ec:	0300000e 	movweq	r0, #14
    20f0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    20f4:	0b3b0b3a 	bleq	ec4de4 <__ccfg+0xea4e3c>
    20f8:	13490b39 	movtne	r0, #39737	; 0x9b39
    20fc:	24040000 	strcs	r0, [r4], #-0
    2100:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2104:	0008030b 	andeq	r0, r8, fp, lsl #6
    2108:	01130500 	tsteq	r3, r0, lsl #10
    210c:	0b0b0e03 	bleq	2c5920 <__ccfg+0x2a5978>
    2110:	0b3b0b3a 	bleq	ec4e00 <__ccfg+0xea4e58>
    2114:	00001301 	andeq	r1, r0, r1, lsl #6
    2118:	03000d06 	movweq	r0, #3334	; 0xd06
    211c:	3813490e 	ldmdacc	r3, {r1, r2, r3, r8, fp, lr}
    2120:	000c340b 	andeq	r3, ip, fp, lsl #8
    2124:	000f0700 	andeq	r0, pc, r0, lsl #14
    2128:	00000b0b 	andeq	r0, r0, fp, lsl #22
    212c:	49002608 	stmdbmi	r0, {r3, r9, sl, sp}
    2130:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2134:	13490035 	movtne	r0, #36917	; 0x9035
    2138:	0f0a0000 	svceq	0x000a0000
    213c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2140:	0b000013 	bleq	2194 <NOROM_SetupTrimDevice+0x6c>
    2144:	0b0b0113 	bleq	2c2598 <__ccfg+0x2a25f0>
    2148:	0b3b0b3a 	bleq	ec4e38 <__ccfg+0xea4e90>
    214c:	13010b39 	movwne	r0, #6969	; 0x1b39
    2150:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2154:	3a0e0300 	bcc	382d5c <__ccfg+0x362db4>
    2158:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    215c:	0b13490b 	bleq	4d4590 <__ccfg+0x4b45e8>
    2160:	0c0b0d0b 	stceq	13, cr0, [fp], {11}
    2164:	000b380b 	andeq	r3, fp, fp, lsl #16
    2168:	000d0d00 	andeq	r0, sp, r0, lsl #26
    216c:	0b3a0e03 	bleq	e85980 <__ccfg+0xe659d8>
    2170:	0b390b3b 	bleq	e44e64 <__ccfg+0xe24ebc>
    2174:	0b381349 	bleq	e06ea0 <__ccfg+0xde6ef8>
    2178:	340e0000 	strcc	r0, [lr], #-0
    217c:	3a0e0300 	bcc	382d84 <__ccfg+0x362ddc>
    2180:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2184:	3f13490b 	svccc	0x0013490b
    2188:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    218c:	01010f00 	tsteq	r1, r0, lsl #30
    2190:	13011349 	movwne	r1, #4937	; 0x1349
    2194:	21100000 	tstcs	r0, r0
    2198:	11000000 	mrsne	r0, (UNDEF: 0)
    219c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    21a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    21a8:	15120000 	ldrne	r0, [r2, #-0]
    21ac:	010c2701 	tsteq	ip, r1, lsl #14
    21b0:	13000013 	movwne	r0, #19
    21b4:	13490005 	movtne	r0, #36869	; 0x9005
    21b8:	34140000 	ldrcc	r0, [r4], #-0
    21bc:	3a0e0300 	bcc	382dc4 <__ccfg+0x362e1c>
    21c0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21c4:	3f13490b 	svccc	0x0013490b
    21c8:	000c3c0c 	andeq	r3, ip, ip, lsl #24
    21cc:	01131500 	tsteq	r3, r0, lsl #10
    21d0:	0b3a0b0b 	bleq	e84e04 <__ccfg+0xe64e5c>
    21d4:	0b39053b 	bleq	e436c8 <__ccfg+0xe23720>
    21d8:	00001301 	andeq	r1, r0, r1, lsl #6
    21dc:	03000d16 	movweq	r0, #3350	; 0xd16
    21e0:	3b0b3a0e 	blcc	2d0a20 <__ccfg+0x2b0a78>
    21e4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21e8:	000b3813 	andeq	r3, fp, r3, lsl r8
    21ec:	01131700 	tsteq	r3, r0, lsl #14
    21f0:	0b0b0e03 	bleq	2c5a04 <__ccfg+0x2a5a5c>
    21f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21f8:	13010b39 	movwne	r0, #6969	; 0x1b39
    21fc:	21180000 	tstcs	r8, r0
    2200:	2f134900 	svccs	0x00134900
    2204:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2208:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 2158 <NOROM_SetupTrimDevice+0x30>
    220c:	0b3a0e03 	bleq	e85a20 <__ccfg+0xe65a78>
    2210:	0b390b3b 	bleq	e44f04 <__ccfg+0xe24f5c>
    2214:	13490c27 	movtne	r0, #39975	; 0x9c27
    2218:	01120111 	tsteq	r2, r1, lsl r1
    221c:	13010a40 	movwne	r0, #6720	; 0x1a40
    2220:	051a0000 	ldreq	r0, [sl, #-0]
    2224:	3a080300 	bcc	202e2c <__ccfg+0x1e2e84>
    2228:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    222c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2230:	1b000006 	blne	2250 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8>
    2234:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2238:	0b3b0b3a 	bleq	ec4f28 <__ccfg+0xea4f80>
    223c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2240:	00000602 	andeq	r0, r0, r2, lsl #12
    2244:	03000a1c 	movweq	r0, #2588	; 0xa1c
    2248:	3b0b3a0e 	blcc	2d0a88 <__ccfg+0x2b0ae0>
    224c:	110b390b 	tstne	fp, fp, lsl #18
    2250:	1d000001 	stcne	0, cr0, [r0, #-4]
    2254:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 21a4 <NOROM_SetupTrimDevice+0x7c>
    2258:	0b3a0e03 	bleq	e85a6c <__ccfg+0xe65ac4>
    225c:	0b390b3b 	bleq	e44f50 <__ccfg+0xe24fa8>
    2260:	13490c27 	movtne	r0, #39975	; 0x9c27
    2264:	01120111 	tsteq	r2, r1, lsl r1
    2268:	00000a40 	andeq	r0, r0, r0, asr #20
    226c:	0300341e 	movweq	r3, #1054	; 0x41e
    2270:	3b0b3a08 	blcc	2d0a98 <__ccfg+0x2b0af0>
    2274:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2278:	000a0213 	andeq	r0, sl, r3, lsl r2
    227c:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
    2280:	0b3a0e03 	bleq	e85a94 <__ccfg+0xe65aec>
    2284:	0b390b3b 	bleq	e44f78 <__ccfg+0xe24fd0>
    2288:	01110c27 	tsteq	r1, r7, lsr #24
    228c:	0a400112 	beq	10026dc <__ccfg+0xfe2734>
    2290:	13010a48 	movwne	r0, #6728	; 0x1a48
    2294:	05200000 	streq	r0, [r0, #-0]!
    2298:	3a080300 	bcc	202ea0 <__ccfg+0x1e2ef8>
    229c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    22a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    22a4:	2100000a 	tstcs	r0, sl
    22a8:	0803000a 	stmdaeq	r3, {r1, r3}
    22ac:	0b3b0b3a 	bleq	ec4f9c <__ccfg+0xea4ff4>
    22b0:	01110b39 	tsteq	r1, r9, lsr fp
    22b4:	0b220000 	bleq	8822bc <__ccfg+0x862314>
    22b8:	01065501 	tsteq	r6, r1, lsl #10
    22bc:	23000013 	movwcs	r0, #19
    22c0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    22c4:	0b3b0b3a 	bleq	ec4fb4 <__ccfg+0xea500c>
    22c8:	13490b39 	movtne	r0, #39737	; 0x9b39
    22cc:	0b240000 	bleq	9022d4 <__ccfg+0x8e232c>
    22d0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    22d4:	00130101 	andseq	r0, r3, r1, lsl #2
    22d8:	010b2500 	tsteq	fp, r0, lsl #10
    22dc:	01120111 	tsteq	r2, r1, lsl r1
    22e0:	01000000 	mrseq	r0, (UNDEF: 0)
    22e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    22e8:	0e030b13 	vmoveq.32	d3[0], r0
    22ec:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    22f0:	06100111 			; <UNDEFINED> instruction: 0x06100111
    22f4:	24020000 	strcs	r0, [r2], #-0
    22f8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    22fc:	000e030b 	andeq	r0, lr, fp, lsl #6
    2300:	00160300 	andseq	r0, r6, r0, lsl #6
    2304:	0b3a0e03 	bleq	e85b18 <__ccfg+0xe65b70>
    2308:	0b390b3b 	bleq	e44ffc <__ccfg+0xe25054>
    230c:	00001349 	andeq	r1, r0, r9, asr #6
    2310:	0b002404 	bleq	b328 <__exidx_end+0x8530>
    2314:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2318:	05000008 	streq	r0, [r0, #-8]
    231c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2320:	0b3a0b0b 	bleq	e84f54 <__ccfg+0xe64fac>
    2324:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2328:	0d060000 	stceq	0, cr0, [r6, #-0]
    232c:	490e0300 	stmdbmi	lr, {r8, r9}
    2330:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    2334:	0700000c 	streq	r0, [r0, -ip]
    2338:	0b0b000f 	bleq	2c237c <__ccfg+0x2a23d4>
    233c:	26080000 	strcs	r0, [r8], -r0
    2340:	00134900 	andseq	r4, r3, r0, lsl #18
    2344:	00350900 	eorseq	r0, r5, r0, lsl #18
    2348:	00001349 	andeq	r1, r0, r9, asr #6
    234c:	0b000f0a 	bleq	5f7c <__exidx_end+0x3184>
    2350:	0013490b 	andseq	r4, r3, fp, lsl #18
    2354:	01130b00 	tsteq	r3, r0, lsl #22
    2358:	0b3a0b0b 	bleq	e84f8c <__ccfg+0xe64fe4>
    235c:	0b390b3b 	bleq	e45050 <__ccfg+0xe250a8>
    2360:	00001301 	andeq	r1, r0, r1, lsl #6
    2364:	03000d0c 	movweq	r0, #3340	; 0xd0c
    2368:	3b0b3a0e 	blcc	2d0ba8 <__ccfg+0x2b0c00>
    236c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2370:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    2374:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    2378:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    237c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2380:	0b3b0b3a 	bleq	ec5070 <__ccfg+0xea50c8>
    2384:	13490b39 	movtne	r0, #39737	; 0x9b39
    2388:	00000b38 	andeq	r0, r0, r8, lsr fp
    238c:	0300340e 	movweq	r3, #1038	; 0x40e
    2390:	3b0b3a0e 	blcc	2d0bd0 <__ccfg+0x2b0c28>
    2394:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2398:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    239c:	0f00000c 	svceq	0x0000000c
    23a0:	13490101 	movtne	r0, #37121	; 0x9101
    23a4:	00001301 	andeq	r1, r0, r1, lsl #6
    23a8:	00002110 	andeq	r2, r0, r0, lsl r1
    23ac:	00161100 	andseq	r1, r6, r0, lsl #2
    23b0:	0b3a0e03 	bleq	e85bc4 <__ccfg+0xe65c1c>
    23b4:	0b39053b 	bleq	e438a8 <__ccfg+0xe23900>
    23b8:	00001349 	andeq	r1, r0, r9, asr #6
    23bc:	27011512 	smladcs	r1, r2, r5, r1
    23c0:	0013010c 	andseq	r0, r3, ip, lsl #2
    23c4:	00051300 	andeq	r1, r5, r0, lsl #6
    23c8:	00001349 	andeq	r1, r0, r9, asr #6
    23cc:	03003414 	movweq	r3, #1044	; 0x414
    23d0:	3b0b3a0e 	blcc	2d0c10 <__ccfg+0x2b0c68>
    23d4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    23d8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    23dc:	1500000c 	strne	r0, [r0, #-12]
    23e0:	0b0b0113 	bleq	2c2834 <__ccfg+0x2a288c>
    23e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    23e8:	13010b39 	movwne	r0, #6969	; 0x1b39
    23ec:	0d160000 	ldceq	0, cr0, [r6, #-0]
    23f0:	3a0e0300 	bcc	382ff8 <__ccfg+0x363050>
    23f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23f8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    23fc:	1700000b 	strne	r0, [r0, -fp]
    2400:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    2404:	0b3a0b0b 	bleq	e85038 <__ccfg+0xe65090>
    2408:	0b39053b 	bleq	e438fc <__ccfg+0xe23954>
    240c:	00001301 	andeq	r1, r0, r1, lsl #6
    2410:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    2414:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2418:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    241c:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    2420:	0b3b0b3a 	bleq	ec5110 <__ccfg+0xea5168>
    2424:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    2428:	01111349 	tsteq	r1, r9, asr #6
    242c:	0a400112 	beq	100287c <__ccfg+0xfe28d4>
    2430:	00001301 	andeq	r1, r0, r1, lsl #6
    2434:	0300051a 	movweq	r0, #1306	; 0x51a
    2438:	3b0b3a08 	blcc	2d0c60 <__ccfg+0x2b0cb8>
    243c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2440:	00060213 	andeq	r0, r6, r3, lsl r2
    2444:	00341b00 	eorseq	r1, r4, r0, lsl #22
    2448:	0b3a0803 	bleq	e8445c <__ccfg+0xe644b4>
    244c:	0b390b3b 	bleq	e45140 <__ccfg+0xe25198>
    2450:	06021349 	streq	r1, [r2], -r9, asr #6
    2454:	0a1c0000 	beq	70245c <__ccfg+0x6e24b4>
    2458:	3a0e0300 	bcc	383060 <__ccfg+0x3630b8>
    245c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2460:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
    2464:	0111010b 	tsteq	r1, fp, lsl #2
    2468:	13010112 	movwne	r0, #4370	; 0x1112
    246c:	341e0000 	ldrcc	r0, [lr], #-0
    2470:	3a080300 	bcc	203078 <__ccfg+0x1e30d0>
    2474:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2478:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    247c:	1f00000a 	svcne	0x0000000a
    2480:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    2484:	00001301 	andeq	r1, r0, r1, lsl #6
    2488:	03003420 	movweq	r3, #1056	; 0x420
    248c:	3b0b3a08 	blcc	2d0cb4 <__ccfg+0x2b0d0c>
    2490:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2494:	21000013 	tstcs	r0, r3, lsl r0
    2498:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    249c:	01000000 	mrseq	r0, (UNDEF: 0)
    24a0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    24a4:	0e030b13 	vmoveq.32	d3[0], r0
    24a8:	17550e1b 	smmlane	r5, fp, lr, r0
    24ac:	17100111 			; <UNDEFINED> instruction: 0x17100111
    24b0:	16020000 	strne	r0, [r2], -r0
    24b4:	3a0e0300 	bcc	3830bc <__ccfg+0x363114>
    24b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    24bc:	03000013 	movweq	r0, #19
    24c0:	0b0b0024 	bleq	2c2558 <__ccfg+0x2a25b0>
    24c4:	0e030b3e 	vmoveq.16	d3[0], r0
    24c8:	24040000 	strcs	r0, [r4], #-0
    24cc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    24d0:	0008030b 	andeq	r0, r8, fp, lsl #6
    24d4:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    24d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    24dc:	0b3b0b3a 	bleq	ec51cc <__ccfg+0xea5224>
    24e0:	13491927 	movtne	r1, #39207	; 0x9927
    24e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    24e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    24ec:	06000019 			; <UNDEFINED> instruction: 0x06000019
    24f0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    24f4:	0b3b0b3a 	bleq	ec51e4 <__ccfg+0xea523c>
    24f8:	17021349 	strne	r1, [r2, -r9, asr #6]
    24fc:	34070000 	strcc	r0, [r7], #-0
    2500:	3a0e0300 	bcc	383108 <__ccfg+0x363160>
    2504:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2508:	00180213 	andseq	r0, r8, r3, lsl r2
    250c:	11010000 	mrsne	r0, (UNDEF: 1)
    2510:	130e2501 	movwne	r2, #58625	; 0xe501
    2514:	1b0e030b 	blne	383148 <__ccfg+0x3631a0>
    2518:	1117550e 	tstne	r7, lr, lsl #10
    251c:	00171001 	andseq	r1, r7, r1
    2520:	00240200 	eoreq	r0, r4, r0, lsl #4
    2524:	0b3e0b0b 	bleq	f85158 <__ccfg+0xf651b0>
    2528:	00000e03 	andeq	r0, r0, r3, lsl #28
    252c:	03001603 	movweq	r1, #1539	; 0x603
    2530:	3b0b3a0e 	blcc	2d0d70 <__ccfg+0x2b0dc8>
    2534:	0013490b 	andseq	r4, r3, fp, lsl #18
    2538:	00240400 	eoreq	r0, r4, r0, lsl #8
    253c:	0b3e0b0b 	bleq	f85170 <__ccfg+0xf651c8>
    2540:	00000803 	andeq	r0, r0, r3, lsl #16
    2544:	3f012e05 	svccc	0x00012e05
    2548:	3a0e0319 	bcc	3831b4 <__ccfg+0x36320c>
    254c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2550:	11134919 	tstne	r3, r9, lsl r9
    2554:	40061201 	andmi	r1, r6, r1, lsl #4
    2558:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    255c:	00001301 	andeq	r1, r0, r1, lsl #6
    2560:	03003406 	movweq	r3, #1030	; 0x406
    2564:	3b0b3a0e 	blcc	2d0da4 <__ccfg+0x2b0dfc>
    2568:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    256c:	07000017 	smladeq	r0, r7, r0, r0
    2570:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2574:	0b3b0b3a 	bleq	ec5264 <__ccfg+0xea52bc>
    2578:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    257c:	17080000 	strne	r0, [r8, -r0]
    2580:	3a0b0b01 	bcc	2c518c <__ccfg+0x2a51e4>
    2584:	010b3b0b 	tsteq	fp, fp, lsl #22
    2588:	09000013 	stmdbeq	r0, {r0, r1, r4}
    258c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2590:	0b3b0b3a 	bleq	ec5280 <__ccfg+0xea52d8>
    2594:	00001349 	andeq	r1, r0, r9, asr #6
    2598:	0300340a 	movweq	r3, #1034	; 0x40a
    259c:	3b0b3a0e 	blcc	2d0ddc <__ccfg+0x2b0e34>
    25a0:	0013490b 	andseq	r4, r3, fp, lsl #18
    25a4:	01010b00 	tsteq	r1, r0, lsl #22
    25a8:	13011349 	movwne	r1, #4937	; 0x1349
    25ac:	210c0000 	mrscs	r0, (UNDEF: 12)
    25b0:	2f134900 	svccs	0x00134900
    25b4:	0000000b 	andeq	r0, r0, fp
    25b8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    25bc:	030b130e 	movweq	r1, #45838	; 0xb30e
    25c0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    25c4:	10011117 	andne	r1, r1, r7, lsl r1
    25c8:	02000017 	andeq	r0, r0, #23
    25cc:	0b0b0024 	bleq	2c2664 <__ccfg+0x2a26bc>
    25d0:	0e030b3e 	vmoveq.16	d3[0], r0
    25d4:	16030000 	strne	r0, [r3], -r0
    25d8:	3a0e0300 	bcc	3831e0 <__ccfg+0x363238>
    25dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    25e0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    25e4:	0b0b0024 	bleq	2c267c <__ccfg+0x2a26d4>
    25e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    25ec:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    25f0:	03193f01 	tsteq	r9, #1, 30
    25f4:	3b0b3a0e 	blcc	2d0e34 <__ccfg+0x2b0e8c>
    25f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    25fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2600:	97184006 	ldrls	r4, [r8, -r6]
    2604:	13011942 	movwne	r1, #6466	; 0x1942
    2608:	34060000 	strcc	r0, [r6], #-0
    260c:	3a0e0300 	bcc	383214 <__ccfg+0x36326c>
    2610:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2614:	07000013 	smladeq	r0, r3, r0, r0
    2618:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    261c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2620:	00001349 	andeq	r1, r0, r9, asr #6
    2624:	3f012e08 	svccc	0x00012e08
    2628:	3a0e0319 	bcc	383294 <__ccfg+0x3632ec>
    262c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2630:	11134919 	tstne	r3, r9, lsl r9
    2634:	40061201 	andmi	r1, r6, r1, lsl #4
    2638:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    263c:	00001301 	andeq	r1, r0, r1, lsl #6
    2640:	3f012e09 	svccc	0x00012e09
    2644:	3a0e0319 	bcc	3832b0 <__ccfg+0x363308>
    2648:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    264c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2650:	97184006 	ldrls	r4, [r8, -r6]
    2654:	00001942 	andeq	r1, r0, r2, asr #18
    2658:	0300050a 	movweq	r0, #1290	; 0x50a
    265c:	3b0b3a0e 	blcc	2d0e9c <__ccfg+0x2b0ef4>
    2660:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2664:	00000018 	andeq	r0, r0, r8, lsl r0
    2668:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    266c:	030b130e 	movweq	r1, #45838	; 0xb30e
    2670:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2674:	10011117 	andne	r1, r1, r7, lsl r1
    2678:	02000017 	andeq	r0, r0, #23
    267c:	0b0b0024 	bleq	2c2714 <__ccfg+0x2a276c>
    2680:	0e030b3e 	vmoveq.16	d3[0], r0
    2684:	16030000 	strne	r0, [r3], -r0
    2688:	3a0e0300 	bcc	383290 <__ccfg+0x3632e8>
    268c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2690:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2694:	0b0b0024 	bleq	2c272c <__ccfg+0x2a2784>
    2698:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    269c:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    26a0:	3a0e0300 	bcc	3832a8 <__ccfg+0x363300>
    26a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    26a8:	000b2019 	andeq	r2, fp, r9, lsl r0
    26ac:	002e0600 	eoreq	r0, lr, r0, lsl #12
    26b0:	0b3a0e03 	bleq	e85ec4 <__ccfg+0xe65f1c>
    26b4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    26b8:	00000b20 	andeq	r0, r0, r0, lsr #22
    26bc:	03012e07 	movweq	r2, #7687	; 0x1e07
    26c0:	3b0b3a0e 	blcc	2d0f00 <__ccfg+0x2b0f58>
    26c4:	11192705 	tstne	r9, r5, lsl #14
    26c8:	40061201 	andmi	r1, r6, r1, lsl #4
    26cc:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    26d0:	00001301 	andeq	r1, r0, r1, lsl #6
    26d4:	03000508 	movweq	r0, #1288	; 0x508
    26d8:	3b0b3a0e 	blcc	2d0f18 <__ccfg+0x2b0f70>
    26dc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    26e0:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    26e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    26e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26ec:	17021349 	strne	r1, [r2, -r9, asr #6]
    26f0:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    26f4:	11133100 	tstne	r3, r0, lsl #2
    26f8:	58061201 	stmdapl	r6, {r0, r9, ip}
    26fc:	0005590b 	andeq	r5, r5, fp, lsl #18
    2700:	010b0b00 	tsteq	fp, r0, lsl #22
    2704:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2708:	00001301 	andeq	r1, r0, r1, lsl #6
    270c:	0182890c 	orreq	r8, r2, ip, lsl #18
    2710:	31011101 	tstcc	r1, r1, lsl #2
    2714:	00130113 	andseq	r0, r3, r3, lsl r1
    2718:	828a0d00 	addhi	r0, sl, #0, 26
    271c:	18020001 	stmdane	r2, {r0}
    2720:	00184291 	mulseq	r8, r1, r2
    2724:	82890e00 	addhi	r0, r9, #0, 28
    2728:	01110101 	tsteq	r1, r1, lsl #2
    272c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2730:	03193f01 	tsteq	r9, #1, 30
    2734:	3b0b3a0e 	blcc	2d0f74 <__ccfg+0x2b0fcc>
    2738:	1119270b 	tstne	r9, fp, lsl #14
    273c:	40061201 	andmi	r1, r6, r1, lsl #4
    2740:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2744:	00001301 	andeq	r1, r0, r1, lsl #6
    2748:	03003410 	movweq	r3, #1040	; 0x410
    274c:	3b0b3a0e 	blcc	2d0f8c <__ccfg+0x2b0fe4>
    2750:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2754:	11000017 	tstne	r0, r7, lsl r0
    2758:	00018289 	andeq	r8, r1, r9, lsl #5
    275c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2760:	89120000 	ldmdbhi	r2, {}	; <UNPREDICTABLE>
    2764:	11010182 	smlabbne	r1, r2, r1, r0
    2768:	00133101 	andseq	r3, r3, r1, lsl #2
    276c:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
    2770:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2774:	0b3b0b3a 	bleq	ec5464 <__ccfg+0xea54bc>
    2778:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    277c:	00001301 	andeq	r1, r0, r1, lsl #6
    2780:	49000514 	stmdbmi	r0, {r2, r4, r8, sl}
    2784:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2788:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    278c:	0b3a0e03 	bleq	e85fa0 <__ccfg+0xe65ff8>
    2790:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2794:	0000193c 	andeq	r1, r0, ip, lsr r9
    2798:	3f002e16 	svccc	0x00002e16
    279c:	3a0e0319 	bcc	383408 <__ccfg+0x363460>
    27a0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    27a4:	00193c19 	andseq	r3, r9, r9, lsl ip
    27a8:	11010000 	mrsne	r0, (UNDEF: 1)
    27ac:	130e2501 	movwne	r2, #58625	; 0xe501
    27b0:	1b0e030b 	blne	3833e4 <__ccfg+0x36343c>
    27b4:	1117550e 	tstne	r7, lr, lsl #10
    27b8:	00171001 	andseq	r1, r7, r1
    27bc:	00240200 	eoreq	r0, r4, r0, lsl #4
    27c0:	0b3e0b0b 	bleq	f853f4 <__ccfg+0xf6544c>
    27c4:	00000e03 	andeq	r0, r0, r3, lsl #28
    27c8:	03001603 	movweq	r1, #1539	; 0x603
    27cc:	3b0b3a0e 	blcc	2d100c <__ccfg+0x2b1064>
    27d0:	0013490b 	andseq	r4, r3, fp, lsl #18
    27d4:	00240400 	eoreq	r0, r4, r0, lsl #8
    27d8:	0b3e0b0b 	bleq	f8540c <__ccfg+0xf65464>
    27dc:	00000803 	andeq	r0, r0, r3, lsl #16
    27e0:	03012e05 	movweq	r2, #7685	; 0x1e05
    27e4:	3b0b3a0e 	blcc	2d1024 <__ccfg+0x2b107c>
    27e8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    27ec:	010b2013 	tsteq	fp, r3, lsl r0
    27f0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    27f4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    27f8:	0b3b0b3a 	bleq	ec54e8 <__ccfg+0xea5540>
    27fc:	00001349 	andeq	r1, r0, r9, asr #6
    2800:	03003407 	movweq	r3, #1031	; 0x407
    2804:	3b0b3a0e 	blcc	2d1044 <__ccfg+0x2b109c>
    2808:	0013490b 	andseq	r4, r3, fp, lsl #18
    280c:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2810:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2814:	0b3b0b3a 	bleq	ec5504 <__ccfg+0xea555c>
    2818:	13491927 	movtne	r1, #39207	; 0x9927
    281c:	13010b20 	movwne	r0, #6944	; 0x1b20
    2820:	05090000 	streq	r0, [r9, #-0]
    2824:	3a0e0300 	bcc	38342c <__ccfg+0x363484>
    2828:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    282c:	0a000013 	beq	2880 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xdc>
    2830:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2834:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2838:	00001349 	andeq	r1, r0, r9, asr #6
    283c:	03002e0b 	movweq	r2, #3595	; 0xe0b
    2840:	3b0b3a0e 	blcc	2d1080 <__ccfg+0x2b10d8>
    2844:	2019270b 	andscs	r2, r9, fp, lsl #14
    2848:	0c00000b 	stceq	0, cr0, [r0], {11}
    284c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2850:	0b3a0e03 	bleq	e86064 <__ccfg+0xe660bc>
    2854:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2858:	06120111 			; <UNDEFINED> instruction: 0x06120111
    285c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2860:	00130119 	andseq	r0, r3, r9, lsl r1
    2864:	00050d00 	andeq	r0, r5, r0, lsl #26
    2868:	0b3a0e03 	bleq	e8607c <__ccfg+0xe660d4>
    286c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2870:	00001702 	andeq	r1, r0, r2, lsl #14
    2874:	0300340e 	movweq	r3, #1038	; 0x40e
    2878:	3b0b3a0e 	blcc	2d10b8 <__ccfg+0x2b1110>
    287c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2880:	0f000018 	svceq	0x00000018
    2884:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2888:	0b3b0b3a 	bleq	ec5578 <__ccfg+0xea55d0>
    288c:	17021349 	strne	r1, [r2, -r9, asr #6]
    2890:	1d100000 	ldcne	0, cr0, [r0, #-0]
    2894:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2898:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    289c:	010b590b 	tsteq	fp, fp, lsl #18
    28a0:	11000013 	tstne	r0, r3, lsl r0
    28a4:	13310005 	teqne	r1, #5
    28a8:	0b120000 	bleq	4828b0 <__ccfg+0x462908>
    28ac:	00175501 	andseq	r5, r7, r1, lsl #10
    28b0:	00341300 	eorseq	r1, r4, r0, lsl #6
    28b4:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    28b8:	1d140000 	ldcne	0, cr0, [r4, #-0]
    28bc:	11133101 	tstne	r3, r1, lsl #2
    28c0:	58061201 	stmdapl	r6, {r0, r9, ip}
    28c4:	000b590b 	andeq	r5, fp, fp, lsl #18
    28c8:	010b1500 	tsteq	fp, r0, lsl #10
    28cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28d0:	34160000 	ldrcc	r0, [r6], #-0
    28d4:	02133100 	andseq	r3, r3, #0, 2
    28d8:	17000017 	smladne	r0, r7, r0, r0
    28dc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    28e0:	0b3a0e03 	bleq	e860f4 <__ccfg+0xe6614c>
    28e4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    28e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28ec:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    28f0:	00130119 	andseq	r0, r3, r9, lsl r1
    28f4:	011d1800 	tsteq	sp, r0, lsl #16
    28f8:	01111331 	tsteq	r1, r1, lsr r3
    28fc:	0b580612 	bleq	160414c <__ccfg+0x15e41a4>
    2900:	13010b59 	movwne	r0, #7001	; 0x1b59
    2904:	89190000 	ldmdbhi	r9, {}	; <UNPREDICTABLE>
    2908:	11010182 	smlabbne	r1, r2, r1, r0
    290c:	00133101 	andseq	r3, r3, r1, lsl #2
    2910:	828a1a00 	addhi	r1, sl, #0, 20
    2914:	18020001 	stmdane	r2, {r0}
    2918:	00184291 	mulseq	r8, r1, r2
    291c:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
    2920:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2924:	0b3b0b3a 	bleq	ec5614 <__ccfg+0xea566c>
    2928:	13491927 	movtne	r1, #39207	; 0x9927
    292c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2930:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2934:	00130119 	andseq	r0, r3, r9, lsl r1
    2938:	00051c00 	andeq	r1, r5, r0, lsl #24
    293c:	0b3a0e03 	bleq	e86150 <__ccfg+0xe661a8>
    2940:	1349053b 	movtne	r0, #38203	; 0x953b
    2944:	00001702 	andeq	r1, r0, r2, lsl #14
    2948:	0300341d 	movweq	r3, #1053	; 0x41d
    294c:	3b0b3a0e 	blcc	2d118c <__ccfg+0x2b11e4>
    2950:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2954:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    2958:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    295c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2960:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2964:	00130119 	andseq	r0, r3, r9, lsl r1
    2968:	00051f00 	andeq	r1, r5, r0, lsl #30
    296c:	17021331 	smladxne	r2, r1, r3, r1
    2970:	34200000 	strtcc	r0, [r0], #-0
    2974:	00133100 	andseq	r3, r3, r0, lsl #2
    2978:	011d2100 	tsteq	sp, r0, lsl #2
    297c:	01521331 	cmpeq	r2, r1, lsr r3
    2980:	0b581755 	bleq	16086dc <__ccfg+0x15e8734>
    2984:	13010559 	movwne	r0, #5465	; 0x1559
    2988:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
    298c:	11010182 	smlabbne	r1, r2, r1, r0
    2990:	01133101 	tsteq	r3, r1, lsl #2
    2994:	23000013 	movwcs	r0, #19
    2998:	00018289 	andeq	r8, r1, r9, lsl #5
    299c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    29a0:	89240000 	stmdbhi	r4!, {}	; <UNPREDICTABLE>
    29a4:	11010182 	smlabbne	r1, r2, r1, r0
    29a8:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    29ac:	00001301 	andeq	r1, r0, r1, lsl #6
    29b0:	31001d25 	tstcc	r0, r5, lsr #26
    29b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    29b8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    29bc:	26000005 	strcs	r0, [r0], -r5
    29c0:	01018289 	smlabbeq	r1, r9, r2, r8
    29c4:	13010111 	movwne	r0, #4369	; 0x1111
    29c8:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
    29cc:	03193f01 	tsteq	r9, #1, 30
    29d0:	3b0b3a0e 	blcc	2d1210 <__ccfg+0x2b1268>
    29d4:	3c192705 	ldccc	7, cr2, [r9], {5}
    29d8:	00130119 	andseq	r0, r3, r9, lsl r1
    29dc:	00052800 	andeq	r2, r5, r0, lsl #16
    29e0:	00001349 	andeq	r1, r0, r9, asr #6
    29e4:	3f012e29 	svccc	0x00012e29
    29e8:	3a0e0319 	bcc	383654 <__ccfg+0x3636ac>
    29ec:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    29f0:	01193c19 	tsteq	r9, r9, lsl ip
    29f4:	2a000013 	bcs	2a48 <NOROM_ChipInfo_GetChipFamily+0xc>
    29f8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29fc:	0b3a0e03 	bleq	e86210 <__ccfg+0xe66268>
    2a00:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a04:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2a08:	01000000 	mrseq	r0, (UNDEF: 0)
    2a0c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2a10:	0e030b13 	vmoveq.32	d3[0], r0
    2a14:	17550e1b 	smmlane	r5, fp, lr, r0
    2a18:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2a1c:	16020000 	strne	r0, [r2], -r0
    2a20:	3a0e0300 	bcc	383628 <__ccfg+0x363680>
    2a24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a28:	03000013 	movweq	r0, #19
    2a2c:	0b0b0024 	bleq	2c2ac4 <__ccfg+0x2a2b1c>
    2a30:	0e030b3e 	vmoveq.16	d3[0], r0
    2a34:	24040000 	strcs	r0, [r4], #-0
    2a38:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2a3c:	0008030b 	andeq	r0, r8, fp, lsl #6
    2a40:	000f0500 	andeq	r0, pc, r0, lsl #10
    2a44:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2a48:	15060000 	strne	r0, [r6, #-0]
    2a4c:	00192700 	andseq	r2, r9, r0, lsl #14
    2a50:	01150700 	tsteq	r5, r0, lsl #14
    2a54:	13011927 	movwne	r1, #6439	; 0x1927
    2a58:	05080000 	streq	r0, [r8, #-0]
    2a5c:	00134900 	andseq	r4, r3, r0, lsl #18
    2a60:	01150900 	tsteq	r5, r0, lsl #18
    2a64:	13491927 	movtne	r1, #39207	; 0x9927
    2a68:	00001301 	andeq	r1, r0, r1, lsl #6
    2a6c:	2700150a 	strcs	r1, [r0, -sl, lsl #10]
    2a70:	00134919 	andseq	r4, r3, r9, lsl r9
    2a74:	01130b00 	tsteq	r3, r0, lsl #22
    2a78:	0b3a0b0b 	bleq	e856ac <__ccfg+0xe65704>
    2a7c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    2a80:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    2a84:	3a0e0300 	bcc	38368c <__ccfg+0x3636e4>
    2a88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2a8c:	000b3813 	andeq	r3, fp, r3, lsl r8
    2a90:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2a94:	0b3a0e03 	bleq	e862a8 <__ccfg+0xe66300>
    2a98:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2a9c:	13010b20 	movwne	r0, #6944	; 0x1b20
    2aa0:	050e0000 	streq	r0, [lr, #-0]
    2aa4:	3a0e0300 	bcc	3836ac <__ccfg+0x363704>
    2aa8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2aac:	0f000013 	svceq	0x00000013
    2ab0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    2ab4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ab8:	13491927 	movtne	r1, #39207	; 0x9927
    2abc:	00000b20 	andeq	r0, r0, r0, lsr #22
    2ac0:	03002e10 	movweq	r2, #3600	; 0xe10
    2ac4:	3b0b3a0e 	blcc	2d1304 <__ccfg+0x2b135c>
    2ac8:	20192705 	andscs	r2, r9, r5, lsl #14
    2acc:	1100000b 	tstne	r0, fp
    2ad0:	0e03012e 	adfeqsp	f0, f3, #0.5
    2ad4:	0b3b0b3a 	bleq	ec57c4 <__ccfg+0xea581c>
    2ad8:	13491927 	movtne	r1, #39207	; 0x9927
    2adc:	13010b20 	movwne	r0, #6944	; 0x1b20
    2ae0:	05120000 	ldreq	r0, [r2, #-0]
    2ae4:	3a0e0300 	bcc	3836ec <__ccfg+0x363744>
    2ae8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2aec:	13000013 	movwne	r0, #19
    2af0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2af4:	0b3b0b3a 	bleq	ec57e4 <__ccfg+0xea583c>
    2af8:	00001349 	andeq	r1, r0, r9, asr #6
    2afc:	3f012e14 	svccc	0x00012e14
    2b00:	3a0e0319 	bcc	38376c <__ccfg+0x3637c4>
    2b04:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2b08:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2b0c:	97184006 	ldrls	r4, [r8, -r6]
    2b10:	13011942 	movwne	r1, #6466	; 0x1942
    2b14:	34150000 	ldrcc	r0, [r5], #-0
    2b18:	3a0e0300 	bcc	383720 <__ccfg+0x363778>
    2b1c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b20:	00170213 	andseq	r0, r7, r3, lsl r2
    2b24:	00341600 	eorseq	r1, r4, r0, lsl #12
    2b28:	0b3a0e03 	bleq	e8633c <__ccfg+0xe66394>
    2b2c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2b30:	0000051c 	andeq	r0, r0, ip, lsl r5
    2b34:	31011d17 	tstcc	r1, r7, lsl sp
    2b38:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2b3c:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2b40:	0013010b 	andseq	r0, r3, fp, lsl #2
    2b44:	00051800 	andeq	r1, r5, r0, lsl #16
    2b48:	0b1c1331 	bleq	707814 <__ccfg+0x6e786c>
    2b4c:	1d190000 	ldcne	0, cr0, [r9, #-0]
    2b50:	11133100 	tstne	r3, r0, lsl #2
    2b54:	58061201 	stmdapl	r6, {r0, r9, ip}
    2b58:	000b590b 	andeq	r5, fp, fp, lsl #18
    2b5c:	011d1a00 	tsteq	sp, r0, lsl #20
    2b60:	01111331 	tsteq	r1, r1, lsr r3
    2b64:	0b580612 	bleq	16043b4 <__ccfg+0x15e440c>
    2b68:	13010b59 	movwne	r0, #7001	; 0x1b59
    2b6c:	891b0000 	ldmdbhi	fp, {}	; <UNPREDICTABLE>
    2b70:	11000182 	smlabbne	r0, r2, r1, r0
    2b74:	00133101 	andseq	r3, r3, r1, lsl #2
    2b78:	82891c00 	addhi	r1, r9, #0, 24
    2b7c:	01110101 	tsteq	r1, r1, lsl #2
    2b80:	00001301 	andeq	r1, r0, r1, lsl #6
    2b84:	01828a1d 	orreq	r8, r2, sp, lsl sl
    2b88:	91180200 	tstls	r8, r0, lsl #4
    2b8c:	00001842 	andeq	r1, r0, r2, asr #16
    2b90:	0182891e 	orreq	r8, r2, lr, lsl r9
    2b94:	31011101 	tstcc	r1, r1, lsl #2
    2b98:	00130113 	andseq	r0, r3, r3, lsl r1
    2b9c:	82891f00 	addhi	r1, r9, #0, 30
    2ba0:	01110101 	tsteq	r1, r1, lsl #2
    2ba4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    2ba8:	03193f01 	tsteq	r9, #1, 30
    2bac:	3b0b3a0e 	blcc	2d13ec <__ccfg+0x2b1444>
    2bb0:	11192705 	tstne	r9, r5, lsl #14
    2bb4:	40061201 	andmi	r1, r6, r1, lsl #4
    2bb8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2bbc:	00001301 	andeq	r1, r0, r1, lsl #6
    2bc0:	03000521 	movweq	r0, #1313	; 0x521
    2bc4:	3b0b3a0e 	blcc	2d1404 <__ccfg+0x2b145c>
    2bc8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2bcc:	22000017 	andcs	r0, r0, #23
    2bd0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2bd4:	0b3b0b3a 	bleq	ec58c4 <__ccfg+0xea591c>
    2bd8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2bdc:	34230000 	strtcc	r0, [r3], #-0
    2be0:	3a080300 	bcc	2037e8 <__ccfg+0x1e3840>
    2be4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2be8:	00170213 	andseq	r0, r7, r3, lsl r2
    2bec:	00342400 	eorseq	r2, r4, r0, lsl #8
    2bf0:	0b3a0803 	bleq	e84c04 <__ccfg+0xe64c5c>
    2bf4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2bf8:	0b250000 	bleq	942c00 <__ccfg+0x922c58>
    2bfc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2c00:	00130106 	andseq	r0, r3, r6, lsl #2
    2c04:	00342600 	eorseq	r2, r4, r0, lsl #12
    2c08:	0b3a0e03 	bleq	e8641c <__ccfg+0xe66474>
    2c0c:	1349053b 	movtne	r0, #38203	; 0x953b
    2c10:	00001702 	andeq	r1, r0, r2, lsl #14
    2c14:	31011d27 	tstcc	r1, r7, lsr #26
    2c18:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c1c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2c20:	00130105 	andseq	r0, r3, r5, lsl #2
    2c24:	00052800 	andeq	r2, r5, r0, lsl #16
    2c28:	00001331 	andeq	r1, r0, r1, lsr r3
    2c2c:	11010b29 	tstne	r1, r9, lsr #22
    2c30:	00061201 	andeq	r1, r6, r1, lsl #4
    2c34:	00342a00 	eorseq	r2, r4, r0, lsl #20
    2c38:	17021331 	smladxne	r2, r1, r3, r1
    2c3c:	1d2b0000 	stcne	0, cr0, [fp, #-0]
    2c40:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2c44:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2c48:	0105590b 	tsteq	r5, fp, lsl #18
    2c4c:	2c000013 	stccs	0, cr0, [r0], {19}
    2c50:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2c54:	262d0000 	strtcs	r0, [sp], -r0
    2c58:	00134900 	andseq	r4, r3, r0, lsl #18
    2c5c:	002e2e00 	eoreq	r2, lr, r0, lsl #28
    2c60:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2c64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2c68:	13491927 	movtne	r1, #39207	; 0x9927
    2c6c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c70:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2c74:	2f000019 	svccs	0x00000019
    2c78:	13490101 	movtne	r0, #37121	; 0x9101
    2c7c:	00001301 	andeq	r1, r0, r1, lsl #6
    2c80:	49002130 	stmdbmi	r0, {r4, r5, r8, sp}
    2c84:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2c88:	012e3100 			; <UNDEFINED> instruction: 0x012e3100
    2c8c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2c90:	0b3b0b3a 	bleq	ec5980 <__ccfg+0xea59d8>
    2c94:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2c98:	00001301 	andeq	r1, r0, r1, lsl #6
    2c9c:	3f012e32 	svccc	0x00012e32
    2ca0:	3a0e0319 	bcc	38390c <__ccfg+0x363964>
    2ca4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ca8:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2cac:	00130119 	andseq	r0, r3, r9, lsl r1
    2cb0:	002e3300 	eoreq	r3, lr, r0, lsl #6
    2cb4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2cb8:	0b3b0b3a 	bleq	ec59a8 <__ccfg+0xea5a00>
    2cbc:	13491927 	movtne	r1, #39207	; 0x9927
    2cc0:	0000193c 	andeq	r1, r0, ip, lsr r9
    2cc4:	01110100 	tsteq	r1, r0, lsl #2
    2cc8:	0b130e25 	bleq	4c6564 <__ccfg+0x4a65bc>
    2ccc:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2cd0:	01111755 	tsteq	r1, r5, asr r7
    2cd4:	00001710 	andeq	r1, r0, r0, lsl r7
    2cd8:	0b002402 	bleq	bce8 <__exidx_end+0x8ef0>
    2cdc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2ce0:	0300000e 	movweq	r0, #14
    2ce4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2ce8:	0b3b0b3a 	bleq	ec59d8 <__ccfg+0xea5a30>
    2cec:	00001349 	andeq	r1, r0, r9, asr #6
    2cf0:	0b002404 	bleq	bd08 <__exidx_end+0x8f10>
    2cf4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2cf8:	05000008 	streq	r0, [r0, #-8]
    2cfc:	0b0b0104 	bleq	2c3114 <__ccfg+0x2a316c>
    2d00:	0b3b0b3a 	bleq	ec59f0 <__ccfg+0xea5a48>
    2d04:	00001301 	andeq	r1, r0, r1, lsl #6
    2d08:	03002806 	movweq	r2, #2054	; 0x806
    2d0c:	000d1c0e 	andeq	r1, sp, lr, lsl #24
    2d10:	01040700 	tsteq	r4, r0, lsl #14
    2d14:	0b3a0b0b 	bleq	e85948 <__ccfg+0xe659a0>
    2d18:	1301053b 	movwne	r0, #5435	; 0x153b
    2d1c:	16080000 	strne	r0, [r8], -r0
    2d20:	3a0e0300 	bcc	383928 <__ccfg+0x363980>
    2d24:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d28:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2d2c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    2d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d34:	13491927 	movtne	r1, #39207	; 0x9927
    2d38:	00000b20 	andeq	r0, r0, r0, lsr #22
    2d3c:	3f012e0a 	svccc	0x00012e0a
    2d40:	3a0e0319 	bcc	3839ac <__ccfg+0x363a04>
    2d44:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2d48:	20134919 	andscs	r4, r3, r9, lsl r9
    2d4c:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d50:	00340b00 	eorseq	r0, r4, r0, lsl #22
    2d54:	0b3a0e03 	bleq	e86568 <__ccfg+0xe665c0>
    2d58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2d5c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
    2d60:	03193f00 	tsteq	r9, #0, 30
    2d64:	3b0b3a0e 	blcc	2d15a4 <__ccfg+0x2b15fc>
    2d68:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2d6c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2d70:	97184006 	ldrls	r4, [r8, -r6]
    2d74:	00001942 	andeq	r1, r0, r2, asr #18
    2d78:	3f012e0d 	svccc	0x00012e0d
    2d7c:	3a0e0319 	bcc	3839e8 <__ccfg+0x363a40>
    2d80:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2d84:	11134919 	tstne	r3, r9, lsl r9
    2d88:	40061201 	andmi	r1, r6, r1, lsl #4
    2d8c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2d90:	00001301 	andeq	r1, r0, r1, lsl #6
    2d94:	0300340e 	movweq	r3, #1038	; 0x40e
    2d98:	3b0b3a0e 	blcc	2d15d8 <__ccfg+0x2b1630>
    2d9c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2da0:	0f000017 	svceq	0x00000017
    2da4:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    2da8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2db0:	00130119 	andseq	r0, r3, r9, lsl r1
    2db4:	00341000 	eorseq	r1, r4, r0
    2db8:	17021331 	smladxne	r2, r1, r3, r1
    2dbc:	0b110000 	bleq	442dc4 <__ccfg+0x422e1c>
    2dc0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2dc4:	12000006 	andne	r0, r0, #6
    2dc8:	13310034 	teqne	r1, #52	; 0x34
    2dcc:	1d130000 	ldcne	0, cr0, [r3, #-0]
    2dd0:	11133100 	tstne	r3, r0, lsl #2
    2dd4:	58061201 	stmdapl	r6, {r0, r9, ip}
    2dd8:	000b590b 	andeq	r5, fp, fp, lsl #18
    2ddc:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2de0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2de4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2de8:	13491927 	movtne	r1, #39207	; 0x9927
    2dec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2df0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2df4:	00130119 	andseq	r0, r3, r9, lsl r1
    2df8:	82891500 	addhi	r1, r9, #0, 10
    2dfc:	01110001 	tsteq	r1, r1
    2e00:	00001331 	andeq	r1, r0, r1, lsr r3
    2e04:	03012e16 	movweq	r2, #7702	; 0x1e16
    2e08:	3b0b3a0e 	blcc	2d1648 <__ccfg+0x2b16a0>
    2e0c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2e10:	010b2013 	tsteq	fp, r3, lsl r0
    2e14:	17000013 	smladne	r0, r3, r0, r0
    2e18:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2e1c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2e20:	00001349 	andeq	r1, r0, r9, asr #6
    2e24:	03003418 	movweq	r3, #1048	; 0x418
    2e28:	3b0b3a0e 	blcc	2d1668 <__ccfg+0x2b16c0>
    2e2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2e30:	19000018 	stmdbne	r0, {r3, r4}
    2e34:	1331001d 	teqne	r1, #29
    2e38:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2e3c:	0b590b58 	bleq	1645ba4 <__ccfg+0x1625bfc>
    2e40:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2e44:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2e48:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2e4c:	010b590b 	tsteq	fp, fp, lsl #18
    2e50:	1b000013 	blne	2ea4 <__exidx_end+0xac>
    2e54:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    2e58:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    2e5c:	03193f01 	tsteq	r9, #1, 30
    2e60:	3b0b3a0e 	blcc	2d16a0 <__ccfg+0x2b16f8>
    2e64:	11192705 	tstne	r9, r5, lsl #14
    2e68:	40061201 	andmi	r1, r6, r1, lsl #4
    2e6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2e70:	1d1d0000 	ldcne	0, cr0, [sp, #-0]
    2e74:	11133101 	tstne	r3, r1, lsl #2
    2e78:	58061201 	stmdapl	r6, {r0, r9, ip}
    2e7c:	010b590b 	tsteq	fp, fp, lsl #18
    2e80:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2e84:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2e88:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e8c:	0b590b58 	bleq	1645bf4 <__ccfg+0x1625c4c>
    2e90:	01000000 	mrseq	r0, (UNDEF: 0)
    2e94:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2e98:	0e030b13 	vmoveq.32	d3[0], r0
    2e9c:	17550e1b 	smmlane	r5, fp, lr, r0
    2ea0:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2ea4:	24020000 	strcs	r0, [r2], #-0
    2ea8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2eac:	000e030b 	andeq	r0, lr, fp, lsl #6
    2eb0:	00160300 	andseq	r0, r6, r0, lsl #6
    2eb4:	0b3a0e03 	bleq	e866c8 <__ccfg+0xe66720>
    2eb8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2ebc:	24040000 	strcs	r0, [r4], #-0
    2ec0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2ec4:	0008030b 	andeq	r0, r8, fp, lsl #6
    2ec8:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    2ecc:	0b3a0e03 	bleq	e866e0 <__ccfg+0xe66738>
    2ed0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2ed4:	13010b20 	movwne	r0, #6944	; 0x1b20
    2ed8:	05060000 	streq	r0, [r6, #-0]
    2edc:	3a0e0300 	bcc	383ae4 <__ccfg+0x363b3c>
    2ee0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ee4:	07000013 	smladeq	r0, r3, r0, r0
    2ee8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2eec:	0b3b0b3a 	bleq	ec5bdc <__ccfg+0xea5c34>
    2ef0:	00001349 	andeq	r1, r0, r9, asr #6
    2ef4:	03012e08 	movweq	r2, #7688	; 0x1e08
    2ef8:	3b0b3a0e 	blcc	2d1738 <__ccfg+0x2b1790>
    2efc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2f00:	010b2013 	tsteq	fp, r3, lsl r0
    2f04:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2f08:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    2f0c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2f10:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2f14:	00130119 	andseq	r0, r3, r9, lsl r1
    2f18:	00050a00 	andeq	r0, r5, r0, lsl #20
    2f1c:	17021331 	smladxne	r2, r1, r3, r1
    2f20:	340b0000 	strcc	r0, [fp], #-0
    2f24:	02133100 	andseq	r3, r3, #0, 2
    2f28:	0c000017 	stceq	0, cr0, [r0], {23}
    2f2c:	13310005 	teqne	r1, #5
    2f30:	00000b1c 	andeq	r0, r0, ip, lsl fp
    2f34:	0182890d 	orreq	r8, r2, sp, lsl #18
    2f38:	31011100 	mrscc	r1, (UNDEF: 17)
    2f3c:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2f40:	00018289 	andeq	r8, r1, r9, lsl #5
    2f44:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    2f48:	00133119 	andseq	r3, r3, r9, lsl r1
    2f4c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    2f50:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2f54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2f58:	01111927 	tsteq	r1, r7, lsr #18
    2f5c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2f60:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2f64:	10000013 	andne	r0, r0, r3, lsl r0
    2f68:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2f6c:	0b3b0b3a 	bleq	ec5c5c <__ccfg+0xea5cb4>
    2f70:	17021349 	strne	r1, [r2, -r9, asr #6]
    2f74:	89110000 	ldmdbhi	r1, {}	; <UNPREDICTABLE>
    2f78:	11010182 	smlabbne	r1, r2, r1, r0
    2f7c:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
    2f80:	00001331 	andeq	r1, r0, r1, lsr r3
    2f84:	01828a12 	orreq	r8, r2, r2, lsl sl
    2f88:	91180200 	tstls	r8, r0, lsl #4
    2f8c:	00001842 	andeq	r1, r0, r2, asr #16
    2f90:	03003413 	movweq	r3, #1043	; 0x413
    2f94:	3b0b3a0e 	blcc	2d17d4 <__ccfg+0x2b182c>
    2f98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f9c:	14000017 	strne	r0, [r0], #-23	; 0xffffffe9
    2fa0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2fa4:	0b3a0e03 	bleq	e867b8 <__ccfg+0xe66810>
    2fa8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2fac:	01111349 	tsteq	r1, r9, asr #6
    2fb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2fb4:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2fb8:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2fbc:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2fc0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2fc4:	0b590b58 	bleq	1645d2c <__ccfg+0x1625d84>
    2fc8:	0b160000 	bleq	582fd0 <__ccfg+0x563028>
    2fcc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    2fd0:	17000006 	strne	r0, [r0, -r6]
    2fd4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2fd8:	0b3a0e03 	bleq	e867ec <__ccfg+0xe66844>
    2fdc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2fe0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    2fe4:	01000000 	mrseq	r0, (UNDEF: 0)
    2fe8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2fec:	0e030b13 	vmoveq.32	d3[0], r0
    2ff0:	17550e1b 	smmlane	r5, fp, lr, r0
    2ff4:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2ff8:	24020000 	strcs	r0, [r2], #-0
    2ffc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3000:	000e030b 	andeq	r0, lr, fp, lsl #6
    3004:	00160300 	andseq	r0, r6, r0, lsl #6
    3008:	0b3a0e03 	bleq	e8681c <__ccfg+0xe66874>
    300c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3010:	24040000 	strcs	r0, [r4], #-0
    3014:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    3018:	0008030b 	andeq	r0, r8, fp, lsl #6
    301c:	000f0500 	andeq	r0, pc, r0, lsl #10
    3020:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    3024:	15060000 	strne	r0, [r6, #-0]
    3028:	00192700 	andseq	r2, r9, r0, lsl #14
    302c:	01150700 	tsteq	r5, r0, lsl #14
    3030:	13011927 	movwne	r1, #6439	; 0x1927
    3034:	05080000 	streq	r0, [r8, #-0]
    3038:	00134900 	andseq	r4, r3, r0, lsl #18
    303c:	01150900 	tsteq	r5, r0, lsl #18
    3040:	13491927 	movtne	r1, #39207	; 0x9927
    3044:	00001301 	andeq	r1, r0, r1, lsl #6
    3048:	2700150a 	strcs	r1, [r0, -sl, lsl #10]
    304c:	00134919 	andseq	r4, r3, r9, lsl r9
    3050:	01130b00 	tsteq	r3, r0, lsl #22
    3054:	0b3a0b0b 	bleq	e85c88 <__ccfg+0xe65ce0>
    3058:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    305c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    3060:	3a0e0300 	bcc	383c68 <__ccfg+0x363cc0>
    3064:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3068:	000b3813 	andeq	r3, fp, r3, lsl r8
    306c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    3070:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3074:	0b3b0b3a 	bleq	ec5d64 <__ccfg+0xea5dbc>
    3078:	0b201927 	bleq	80951c <__ccfg+0x7e9574>
    307c:	00001301 	andeq	r1, r0, r1, lsl #6
    3080:	0300050e 	movweq	r0, #1294	; 0x50e
    3084:	3b0b3a0e 	blcc	2d18c4 <__ccfg+0x2b191c>
    3088:	0013490b 	andseq	r4, r3, fp, lsl #18
    308c:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
    3090:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3094:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3098:	13491927 	movtne	r1, #39207	; 0x9927
    309c:	13010b20 	movwne	r0, #6944	; 0x1b20
    30a0:	34100000 	ldrcc	r0, [r0], #-0
    30a4:	3a0e0300 	bcc	383cac <__ccfg+0x363d04>
    30a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    30ac:	11000013 	tstne	r0, r3, lsl r0
    30b0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
    30b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    30b8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    30bc:	00130119 	andseq	r0, r3, r9, lsl r1
    30c0:	00051200 	andeq	r1, r5, r0, lsl #4
    30c4:	17021331 	smladxne	r2, r1, r3, r1
    30c8:	0b130000 	bleq	4c30d0 <__ccfg+0x4a3128>
    30cc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    30d0:	00130106 	andseq	r0, r3, r6, lsl #2
    30d4:	82891400 	addhi	r1, r9, #0, 8
    30d8:	01110101 	tsteq	r1, r1, lsl #2
    30dc:	00184293 	mulseq	r8, r3, r2
    30e0:	828a1500 	addhi	r1, sl, #0, 10
    30e4:	18020001 	stmdane	r2, {r0}
    30e8:	00184291 	mulseq	r8, r1, r2
    30ec:	82891600 	addhi	r1, r9, #0, 12
    30f0:	01110101 	tsteq	r1, r1, lsl #2
    30f4:	01184293 			; <UNDEFINED> instruction: 0x01184293
    30f8:	17000013 	smladne	r0, r3, r0, r0
    30fc:	13310034 	teqne	r1, #52	; 0x34
    3100:	00001802 	andeq	r1, r0, r2, lsl #16
    3104:	55010b18 	strpl	r0, [r1, #-2840]	; 0xfffff4e8
    3108:	00130117 	andseq	r0, r3, r7, lsl r1
    310c:	00051900 	andeq	r1, r5, r0, lsl #18
    3110:	0b1c1331 	bleq	707ddc <__ccfg+0x6e7e34>
    3114:	0b1a0000 	bleq	68311c <__ccfg+0x663174>
    3118:	00175501 	andseq	r5, r7, r1, lsl #10
    311c:	00341b00 	eorseq	r1, r4, r0, lsl #22
    3120:	00001331 	andeq	r1, r0, r1, lsr r3
    3124:	3f012e1c 	svccc	0x00012e1c
    3128:	3a0e0319 	bcc	383d94 <__ccfg+0x363dec>
    312c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3130:	11134919 	tstne	r3, r9, lsl r9
    3134:	40061201 	andmi	r1, r6, r1, lsl #4
    3138:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    313c:	00001301 	andeq	r1, r0, r1, lsl #6
    3140:	0300051d 	movweq	r0, #1309	; 0x51d
    3144:	3b0b3a0e 	blcc	2d1984 <__ccfg+0x2b19dc>
    3148:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    314c:	1e000017 	mcrne	0, 0, r0, cr0, cr7, {0}
    3150:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    3154:	0b3b0b3a 	bleq	ec5e44 <__ccfg+0xea5e9c>
    3158:	17021349 	strne	r1, [r2, -r9, asr #6]
    315c:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    3160:	11000182 	smlabbne	r0, r2, r1, r0
    3164:	00133101 	andseq	r3, r3, r1, lsl #2
    3168:	012e2000 			; <UNDEFINED> instruction: 0x012e2000
    316c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3170:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3174:	01111927 	tsteq	r1, r7, lsr #18
    3178:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    317c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    3180:	21000013 	tstcs	r0, r3, lsl r0
    3184:	01018289 	smlabbeq	r1, r9, r2, r8
    3188:	13310111 	teqne	r1, #1073741828	; 0x40000004
    318c:	00001301 	andeq	r1, r0, r1, lsl #6
    3190:	03002e22 	movweq	r2, #3618	; 0xe22
    3194:	3b0b3a0e 	blcc	2d19d4 <__ccfg+0x2b1a2c>
    3198:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    319c:	000b2013 	andeq	r2, fp, r3, lsl r0
    31a0:	002e2300 	eoreq	r2, lr, r0, lsl #6
    31a4:	0b3a0e03 	bleq	e869b8 <__ccfg+0xe66a10>
    31a8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31ac:	00000b20 	andeq	r0, r0, r0, lsr #22
    31b0:	03003424 	movweq	r3, #1060	; 0x424
    31b4:	3b0b3a0e 	blcc	2d19f4 <__ccfg+0x2b1a4c>
    31b8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    31bc:	25000017 	strcs	r0, [r0, #-23]	; 0xffffffe9
    31c0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    31c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    31c8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    31cc:	00001301 	andeq	r1, r0, r1, lsl #6
    31d0:	03000526 	movweq	r0, #1318	; 0x526
    31d4:	3b0b3a0e 	blcc	2d1a14 <__ccfg+0x2b1a6c>
    31d8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    31dc:	27000017 	smladcs	r0, r7, r0, r0
    31e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    31e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    31e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    31ec:	34280000 	strtcc	r0, [r8], #-0
    31f0:	3a080300 	bcc	203df8 <__ccfg+0x1e3e50>
    31f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    31f8:	00170213 	andseq	r0, r7, r3, lsl r2
    31fc:	00342900 	eorseq	r2, r4, r0, lsl #18
    3200:	0b3a0e03 	bleq	e86a14 <__ccfg+0xe66a6c>
    3204:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3208:	00001802 	andeq	r1, r0, r2, lsl #16
    320c:	3f002e2a 	svccc	0x00002e2a
    3210:	3a0e0319 	bcc	383e7c <__ccfg+0x363ed4>
    3214:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    3218:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    321c:	2b000019 	blcs	3288 <__exidx_end+0x490>
    3220:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    3224:	0b3a0e03 	bleq	e86a38 <__ccfg+0xe66a90>
    3228:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    322c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
    3230:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
    3234:	03193f01 	tsteq	r9, #1, 30
    3238:	3b0b3a0e 	blcc	2d1a78 <__ccfg+0x2b1ad0>
    323c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    3240:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	00000290 	muleq	r0, r0, r2
       4:	000002ac 	andeq	r0, r0, ip, lsr #5
       8:	c6500001 	ldrbgt	r0, [r0], -r1
       c:	c9000003 	stmdbgt	r0, {r0, r1}
      10:	01000003 	tsteq	r0, r3
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	02240000 	eoreq	r0, r4, #0
      20:	022e0000 	eoreq	r0, lr, #0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	00022e00 	andeq	r2, r2, r0, lsl #28
      34:	00029000 	andeq	r9, r2, r0
      38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				j->Next = k;
      44:	0000022e 	andeq	r0, r0, lr, lsr #4
      48:	00000240 	andeq	r0, r0, r0, asr #4
}
      4c:	44530001 	ldrbmi	r0, [r3], #-1
      50:	4e000002 	cdpmi	0, 0, cr0, cr0, cr2, {0}
      54:	01000002 	tsteq	r0, r2
		release;
      58:	026c5300 	rsbeq	r5, ip, #0, 6
      5c:	02780000 	rsbseq	r0, r8, #0
      60:	00010000 	andeq	r0, r1, r0
      64:	00027e53 	andeq	r7, r2, r3, asr lr
      68:	00029000 	andeq	r9, r2, r0
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      78:	000000c8 	andeq	r0, r0, r8, asr #1
      7c:	000000fc 	strdeq	r0, [r0], -ip
      80:	0e500001 	cdpeq	0, 5, cr0, cr0, cr1, {0}
      84:	20000001 	andcs	r0, r0, r1
      88:	01000001 	tsteq	r0, r1
      8c:	01885000 	orreq	r5, r8, r0
	descriptors [fd] = s;
      90:	01a20000 			; <UNDEFINED> instruction: 0x01a20000
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	0001b850 	andeq	fp, r1, r0, asr r8
	if (s == NULL)
      9c:	0001ca00 	andeq	ip, r1, r0, lsl #20
		syserror (EMALLOC, "tcv05");
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
      a4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      a8:	000001d7 	ldrdeq	r0, [r0], -r7
      ac:	00500001 	subseq	r0, r0, r1
	...
      bc:	01000000 	mrseq	r0, (UNDEF: 0)
      c0:	00005000 	andeq	r5, r0, r0
	...
      d0:	00010000 	andeq	r0, r1, r0
      d4:	00000050 	andeq	r0, r0, r0, asr r0
      d8:	00000000 	andeq	r0, r0, r0
      dc:	000a9000 	andeq	r9, sl, r0
      e0:	000a9600 	andeq	r9, sl, r0, lsl #12
      e4:	56000100 	strpl	r0, [r0], -r0, lsl #2
      e8:	00000ac6 	andeq	r0, r0, r6, asr #21
      ec:	00000aca 	andeq	r0, r0, sl, asr #21
      f0:	00560001 	subseq	r0, r6, r1
			wwait (st, 50);
      f4:	00000000 	andeq	r0, r0, r0
			curr += 0x1000;
      f8:	7a000000 	bvc	100 <_Min_Stack_Size>
      fc:	7e000009 	cdpvc	0, 0, cr0, cr0, cr9, {0}
		if (from >= EE_SIZE || upto < from)
     100:	01000009 	tsteq	r0, r9
     104:	09945200 	ldmibeq	r4, {r9, ip, lr}
			upto = EE_SIZE - 1;
     108:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
     10c:	00010000 	andeq	r0, r1, r0
     110:	00000052 	andeq	r0, r0, r2, asr r0
     114:	00000000 	andeq	r0, r0, r0
     118:	00098200 	andeq	r8, r9, r0, lsl #4
     11c:	00098800 	andeq	r8, r9, r0, lsl #16
     120:	53000100 	movwpl	r0, #256	; 0x100
	...
            onTime = redOn;
     12c:	00000938 	andeq	r0, r0, r8, lsr r9
            offTime = redOff;
     130:	00000942 	andeq	r0, r0, r2, asr #18
     134:	00530001 	subseq	r0, r3, r1
            ledFlag = 0;
     138:	00000000 	andeq	r0, r0, r0
        if(On)
     13c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     140:	3e000009 	cdpcc	0, 0, cr0, cr0, cr9, {0}
     144:	01000009 	tsteq	r0, r9
            leds(led,1);
     148:	00005300 	andeq	r5, r0, r0, lsl #6
            leds(led,0);
     14c:	00000000 	andeq	r0, r0, r0
     150:	09ce0000 	stmibeq	lr, {}^	; <UNPREDICTABLE>
     154:	09d80000 	ldmibeq	r8, {}^	; <UNPREDICTABLE>
     158:	00010000 	andeq	r0, r1, r0
     15c:	00000053 	andeq	r0, r0, r3, asr r0
        if (displayCycle)
     160:	00000000 	andeq	r0, r0, r0
     164:	0009c000 	andeq	ip, r9, r0
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     168:	0009ea00 	andeq	lr, r9, r0, lsl #20
     16c:	52000100 	andpl	r0, r0, #0, 2
	...
            delay(onTime, OFF_PERIOD);
     178:	00000a0e 	andeq	r0, r0, lr, lsl #20
        when(&On, Check_PERIOD);
     17c:	00000a18 	andeq	r0, r0, r8, lsl sl
     180:	00530001 	subseq	r0, r3, r1
	...
            led = greenLed;
     18c:	3600000a 	strcc	r0, [r0], -sl
            ch = greenCharacter;
     190:	0100000a 	tsteq	r0, sl
            onTime = greenOn;
     194:	00005000 	andeq	r5, r0, r0
     198:	00000000 	andeq	r0, r0, r0
            offTime = greenOff;
     19c:	08a60000 	stmiaeq	r6!, {}	; <UNPREDICTABLE>
     1a0:	08b00000 	ldmeq	r0!, {}	; <UNPREDICTABLE>
            leds(led,0);
     1a4:	00010000 	andeq	r0, r1, r0
     1a8:	00000053 	andeq	r0, r0, r3, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	00089800 	andeq	r9, r8, r0, lsl #16
     1b4:	0008c200 	andeq	ip, r8, r0, lsl #4
        leds(led,0);
     1b8:	52000100 	andpl	r0, r0, #0, 2
	...
     1c4:	000008f8 	strdeq	r0, [r0], -r8
     1c8:	00000902 	andeq	r0, r0, r2, lsl #18
            proceed Check_PERIOD;
     1cc:	00530001 	subseq	r0, r3, r1
}
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	ea000000 	b	1dc <_Min_Stack_Size+0xdc>
     1d8:	12000008 	andne	r0, r0, #8
     1dc:	01000009 	tsteq	r0, r9
     1e0:	00005200 	andeq	r5, r0, r0, lsl #4
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	040c0000 	streq	r0, [ip], #-0
     1ec:	04100000 	ldreq	r0, [r0], #-0
     1f0:	00010000 	andeq	r0, r1, r0
     1f4:	00041050 	andeq	r1, r4, r0, asr r0
     1f8:	00041300 	andeq	r1, r4, r0, lsl #6
     1fc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     208:	00000758 	andeq	r0, r0, r8, asr r7
     20c:	0000075a 	andeq	r0, r0, sl, asr r7
     210:	00500001 	subseq	r0, r0, r1
     214:	00000000 	andeq	r0, r0, r0
     218:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     21c:	6e000007 	cdpvs	0, 0, cr0, cr0, cr7, {0}
     220:	01000007 	tsteq	r0, r7
    word number = 0;
     224:	076e5100 	strbeq	r5, [lr, -r0, lsl #2]!
    int numbersIndex = 0;
     228:	07720000 	ldrbeq	r0, [r2, -r0]!
     22c:	00010000 	andeq	r0, r1, r0
        if(settingsInput[i] == ' ') {
     230:	00077855 	andeq	r7, r7, r5, asr r8
     234:	00078e00 	andeq	r8, r7, r0, lsl #28
            numbers[numbersIndex] = number;
     238:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
     23c:	0000078e 	andeq	r0, r0, lr, lsl #15
            number = 0;
     240:	0000079c 	muleq	r0, ip, r7
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	9c510001 	mrrcls	0, 0, r0, r1, cr1
    redOn = numbers[0];
     248:	ca000007 	bgt	26c <processSettingsInput+0x48>
     24c:	01000007 	tsteq	r0, r7
    redOff = numbers[1];
     250:	07d05500 	ldrbeq	r5, [r0, r0, lsl #10]
     254:	07f80000 	ldrbeq	r0, [r8, r0]!
    greenOn = numbers[2];
     258:	00010000 	andeq	r0, r1, r0
     25c:	0007f855 	andeq	pc, r7, r5, asr r8	; <UNPREDICTABLE>
    greenOff = numbers[3];
     260:	00080600 	andeq	r0, r8, r0, lsl #12
     264:	51000100 	mrspl	r0, (UNDEF: 16)
}
     268:	00000806 	andeq	r0, r0, r6, lsl #16
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	00000810 	andeq	r0, r0, r0, lsl r8
     270:	10550001 	subsne	r0, r5, r1
            number = number * 10;
     274:	1b000008 	blne	29c <root+0xc>
            number += settingsInput[i] - 48;
     278:	01000008 	tsteq	r0, r8
     27c:	081b5100 	ldmdaeq	fp, {r8, ip, lr}
     280:	081e0000 	ldmdaeq	lr, {}	; <UNPREDICTABLE>
     284:	00010000 	andeq	r0, r1, r0
     288:	00081e55 	andeq	r1, r8, r5, asr lr
     28c:	00082400 	andeq	r2, r8, r0, lsl #8
fsm root {
     290:	51000100 	mrspl	r0, (UNDEF: 16)
     294:	00000824 	andeq	r0, r0, r4, lsr #16
     298:	00000836 	andeq	r0, r0, r6, lsr r8
     29c:	36550001 	ldrbcc	r0, [r5], -r1
     2a0:	48000008 	stmdami	r0, {r3}
     2a4:	01000008 	tsteq	r0, r8
     2a8:	08485100 	stmdaeq	r8, {r8, ip, lr}^
        ser_outf(Initial, "Enter your name: ");
     2ac:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
     2b0:	00010000 	andeq	r0, r1, r0
        ser_in(Get_Name, username, NAME_LENGTH);
     2b4:	00000055 	andeq	r0, r0, r5, asr r0
     2b8:	00000000 	andeq	r0, r0, r0
        runfsm blinker;
     2bc:	00075800 	andeq	r5, r7, r0, lsl #16
     2c0:	00076e00 	andeq	r6, r7, r0, lsl #28
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	52000100 	andpl	r0, r0, #0, 2
     2c8:	0000076e 	andeq	r0, r0, lr, ror #14
     2cc:	00000774 	andeq	r0, r0, r4, ror r7
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	78560001 	ldmdavc	r6, {r0}^
     2d4:	88000007 	stmdahi	r0, {r0, r1, r2}
        if (choice == 'A' || choice == 'a'){
     2d8:	01000007 	tsteq	r0, r7
     2dc:	078e5600 	streq	r5, [lr, r0, lsl #12]
     2e0:	079c0000 	ldreq	r0, [ip, r0]
            proceed Adjust_Intervals;
     2e4:	00010000 	andeq	r0, r1, r0
            proceed Monitor;
     2e8:	00079c52 	andeq	r9, r7, r2, asr ip
        proceed Show_Menu;
     2ec:	0007cc00 	andeq	ip, r7, r0, lsl #24
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	56000100 	strpl	r0, [r0], -r0, lsl #2
     2f4:	000007d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	000007f8 	strdeq	r0, [r0], -r8
     2fc:	f8560001 			; <UNDEFINED> instruction: 0xf8560001
     300:	06000007 	streq	r0, [r0], -r7
        processSettingsInput(settings);
     304:	01000008 	tsteq	r0, r8
        On = YES;
     308:	08065200 	stmdaeq	r6, {r9, ip, lr}
     30c:	08100000 	ldmdaeq	r0, {}	; <UNPREDICTABLE>
        trigger(&On);
     310:	00010000 	andeq	r0, r1, r0
        proceed Show_Menu;
     314:	00081056 	andeq	r1, r8, r6, asr r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	00081b00 	andeq	r1, r8, r0, lsl #22
     31c:	52000100 	andpl	r0, r0, #0, 2
     320:	0000081e 	andeq	r0, r0, lr, lsl r8
     324:	00000829 	andeq	r0, r0, r9, lsr #16
     328:	29520001 	ldmdbcs	r2, {r0}^
     32c:	36000008 	strcc	r0, [r0], -r8
     330:	01000008 	tsteq	r0, r8
        proceed Show_Menu;
     334:	08365400 	ldmdaeq	r6!, {sl, ip, lr}
     338:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	00010000 	andeq	r0, r1, r0
     340:	00000052 	andeq	r0, r0, r2, asr r0
        displayCycle = YES;
     344:	00000000 	andeq	r0, r0, r0
        ser_inf(Await_Stop, "%c", &ch);
     348:	0006cc00 	andeq	ip, r6, r0, lsl #24
     34c:	0006da00 	andeq	sp, r6, r0, lsl #20
     350:	50000100 	andpl	r0, r0, r0, lsl #2
	...
        if(ch == 'S' || ch == 's'){
     35c:	000006cc 	andeq	r0, r0, ip, asr #13
            displayCycle = NO;
     360:	000006db 	ldrdeq	r0, [r0], -fp
     364:	00510001 	subseq	r0, r1, r1
            proceed Show_Menu;
     368:	00000000 	andeq	r0, r0, r0
        proceed Monitor;
     36c:	7c000000 	stcvc	0, cr0, [r0], {-0}
        On = NO;
     370:	93000006 	movwls	r0, #6
     374:	01000006 	tsteq	r0, r6
     378:	06b65000 	ldrteq	r5, [r6], r0
        leds(1, 0);
     37c:	06cc0000 	strbeq	r0, [ip], r0
     380:	00010000 	andeq	r0, r1, r0
     384:	00000050 	andeq	r0, r0, r0, asr r0
     388:	00000000 	andeq	r0, r0, r0
     38c:	00057200 	andeq	r7, r5, r0, lsl #4
     390:	00058200 	andeq	r8, r5, r0, lsl #4
        leds(0, 0);
     394:	52000100 	andpl	r0, r0, #0, 2
     398:	00000582 	andeq	r0, r0, r2, lsl #11
     39c:	0000058a 	andeq	r0, r0, sl, lsl #11
        proceed Show_Menu;
     3a0:	040c0005 	streq	r0, [ip], #-5
     3a4:	24400920 	strbcs	r0, [r0], #-2336	; 0xfffff6e0
     3a8:	28000006 	stmdacs	r0, {r1, r2}
     3ac:	05000006 	streq	r0, [r0, #-6]
        } else if (choice == 'S' || choice == 's') {
     3b0:	20040c00 	andcs	r0, r4, r0, lsl #24
            proceed Stop;
     3b4:	06284009 	strteq	r4, [r8], -r9
        } else if (choice == 'V' || choice == 'v') {
     3b8:	062a0000 	strteq	r0, [sl], -r0
            proceed View_Settings;
     3bc:	00010000 	andeq	r0, r1, r0
        } else if (choice == 'M' || choice == 'm') {
     3c0:	00062a52 	andeq	r2, r6, r2, asr sl
            proceed Monitor;
     3c4:	00062c00 	andeq	r2, r6, r0, lsl #24
     3c8:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     3cc:	40092004 	andmi	r2, r9, r4
	...
     3d8:	0000058c 	andeq	r0, r0, ip, lsl #11
     3dc:	00000596 	muleq	r0, r6, r5
     3e0:	9a520001 	bls	14803ec <__ccfg+0x1460444>
     3e4:	a4000005 	strge	r0, [r0], #-5
     3e8:	01000005 	tsteq	r0, r5
     3ec:	05a85200 	streq	r5, [r8, #512]!	; 0x200
     3f0:	05b20000 	ldreq	r0, [r2, #0]!
     3f4:	00010000 	andeq	r0, r1, r0
     3f8:	0005b652 	andeq	fp, r5, r2, asr r6
     3fc:	0005c200 	andeq	ip, r5, r0, lsl #4
     400:	52000100 	andpl	r0, r0, #0, 2
     404:	0000064e 	andeq	r0, r0, lr, asr #12
     408:	00000652 	andeq	r0, r0, r2, asr r6
static void devinit_uart (int devnum) {
     40c:	00520001 	subseq	r0, r2, r1
	adddevfunc (ioreq_uart_a, devnum);
     410:	00000000 	andeq	r0, r0, r0
     414:	12000000 	andne	r0, r0, #0
void udelay (volatile word n) {
     418:	24000005 	strcs	r0, [r0], #-5
     41c:	01000005 	tsteq	r0, r5
	while (n) {
     420:	00005400 	andeq	r5, r0, r0, lsl #8
     424:	00000000 	andeq	r0, r0, r0
}
     428:	04ac0000 	strteq	r0, [ip], #0
	while (n--);
     42c:	04b40000 	ldrteq	r0, [r4], #0
     430:	00010000 	andeq	r0, r1, r0
     434:	00000050 	andeq	r0, r0, r0, asr r0
		n--;
     438:	00000000 	andeq	r0, r0, r0
     43c:	0004ac00 	andeq	sl, r4, r0, lsl #24
     440:	0004b200 	andeq	fp, r4, r0, lsl #4
void mdelay (volatile word n) {
     444:	51000100 	mrspl	r0, (UNDEF: 16)
     448:	000004b2 			; <UNDEFINED> instruction: 0x000004b2
	while (n) {
     44c:	000004b7 			; <UNDEFINED> instruction: 0x000004b7
     450:	00520001 	subseq	r0, r2, r1
	...
		n--;
     460:	01000000 	mrseq	r0, (UNDEF: 0)
     464:	00005000 	andeq	r5, r0, r0
	...
void __pi_ondomain (lword d) {
     474:	00010000 	andeq	r0, r1, r0
		if (__pi_systat.effpdm > 1)
     478:	00000051 	andeq	r0, r0, r1, asr r0
     47c:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
     480:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     494:	00520001 	subseq	r0, r2, r1
     498:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
     49c:	01000000 	mrseq	r0, (UNDEF: 0)
     4a0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	00010000 	andeq	r0, r1, r0
     4b4:	00000050 	andeq	r0, r0, r0, asr r0
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4bc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		all_leds_blink;
     4c8:	00000470 	andeq	r0, r0, r0, ror r4
     4cc:	00000488 	andeq	r0, r0, r8, lsl #9
     4d0:	88500001 	ldmdahi	r0, {r0}^
     4d4:	a0000004 	andge	r0, r0, r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	01000004 	tsteq	r0, r4
     4dc:	00005400 	andeq	r5, r0, r0, lsl #8
     4e0:	00000000 	andeq	r0, r0, r0
     4e4:	04440000 	strbeq	r0, [r4], #-0
     4e8:	044a0000 	strbeq	r0, [sl], #-0
     4ec:	00010000 	andeq	r0, r1, r0
	while (1) {
     4f0:	00000050 	andeq	r0, r0, r0, asr r0
	...
void tci_run_delay_timer () {
     500:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	setdel = __pi_mintk - __pi_old;
     50c:	00001428 	andeq	r1, r0, r8, lsr #8
     510:	00001446 	andeq	r1, r0, r6, asr #8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	70910002 	addsvc	r0, r1, r2
     518:	00001446 	andeq	r1, r0, r6, asr #8
     51c:	0000146e 	andeq	r1, r0, lr, ror #8
     520:	72540001 	subsvc	r0, r4, #1
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	7a000014 	bvc	57c <AONRTCIntHandler+0x14>
	sti_tim;
     528:	01000014 	tsteq	r0, r4, lsl r0
}
     52c:	14885400 	strne	r5, [r8], #1024	; 0x400
     530:	14d20000 	ldrbne	r0, [r2], #0
     534:	00010000 	andeq	r0, r1, r0
     538:	0014d656 	andseq	sp, r4, r6, asr r6
     53c:	00154e00 	andseq	r4, r5, r0, lsl #28
	cli_aux;
     540:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     54c:	00001492 	muleq	r0, r2, r4
     550:	000014d0 	ldrdeq	r1, [r0], -r0
     554:	d6510001 	ldrble	r0, [r1], -r1
	sti_aux;
     558:	e8000014 	stmda	r0, {r2, r4}
}
     55c:	01000014 	tsteq	r0, r4, lsl r0
     560:	14f45100 	ldrbtne	r5, [r4], #256	; 0x100
     564:	14fe0000 	ldrbtne	r0, [lr], #0
void AONRTCIntHandler () {
     568:	00010000 	andeq	r0, r1, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	00151051 	andseq	r1, r5, r1, asr r0
     570:	00151400 	andseq	r1, r5, r0, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	51000100 	mrspl	r0, (UNDEF: 16)
		if (__pi_utims [0] == 0)
     578:	00001534 	andeq	r1, r0, r4, lsr r5
     57c:	00001538 	andeq	r1, r0, r8, lsr r5
		if (*(__pi_utims [0])) {
     580:	00510001 	subseq	r0, r1, r1
     584:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [0]))--;
     588:	92000000 	andls	r0, r0, #0
		if (__pi_utims [1] == 0)
     58c:	d0000014 	andle	r0, r0, r4, lsl r0
		if (*(__pi_utims [1])) {
     590:	01000014 	tsteq	r0, r4, lsl r0
			aux_timer_inactive = 0;
     594:	14d65500 	ldrbne	r5, [r6], #1280	; 0x500
			(*(__pi_utims [1]))--;
     598:	14fe0000 	ldrbtne	r0, [lr], #0
		if (__pi_utims [2] == 0)
     59c:	00010000 	andeq	r0, r1, r0
		if (*(__pi_utims [2])) {
     5a0:	00151055 	andseq	r1, r5, r5, asr r0
			(*(__pi_utims [2]))--;
     5a4:	00151400 	andseq	r1, r5, r0, lsl #8
		if (__pi_utims [3] != 0) {
     5a8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
			if (*(__pi_utims [3])) {
     5ac:	00001534 	andeq	r1, r0, r4, lsr r5
				aux_timer_inactive = 0;
     5b0:	0000154e 	andeq	r1, r0, lr, asr #10
				(*(__pi_utims [3]))--;
     5b4:	00550001 	subseq	r0, r5, r1
	if (__pi_systat.ledsts) {
     5b8:	00000000 	andeq	r0, r0, r0
     5bc:	04000000 	streq	r0, [r0], #-0
		if (__pi_systat.ledblc++ == 0) {
     5c0:	10000015 	andne	r0, r0, r5, lsl r0
     5c4:	01000015 	tsteq	r0, r5, lsl r0
			if (__pi_systat.ledblk) {
     5c8:	15145500 	ldrne	r5, [r4, #-1280]	; 0xfffffb00
     5cc:	152e0000 	strne	r0, [lr, #-0]!
     5d0:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	00153255 	andseq	r3, r5, r5, asr r2
     5d8:	00153400 	andseq	r3, r5, r0, lsl #8
				if (__pi_systat.ledsts & 0x2)
     5dc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
				if (__pi_systat.ledsts & 0x4)
     5e8:	000014b8 			; <UNDEFINED> instruction: 0x000014b8
				__pi_systat.ledblk = 0;
     5ec:	000014d0 	ldrdeq	r1, [r0], -r0
     5f0:	00540001 	subseq	r0, r4, r1
			if (__pi_systat.fstblk)
     5f4:	00000000 	andeq	r0, r0, r0
     5f8:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
				__pi_systat.ledblc = 200;
     5fc:	10000014 	andne	r0, r0, r4, lsl r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	01000015 	tsteq	r0, r5, lsl r0
		cli_tim;
     604:	15145400 	ldrne	r5, [r4, #-1024]	; 0xfffffc00
		__pi_new += setdel;
     608:	15280000 	strne	r0, [r8, #-0]!
     60c:	00010000 	andeq	r0, r1, r0
		setdel = 0;
     610:	00152854 	andseq	r2, r5, r4, asr r8
		RISE_N_SHINE;
     614:	00153400 	andseq	r3, r5, r0, lsl #8
		__pi_new += setdel;
     618:	53000100 	movwpl	r0, #256	; 0x100
	...
		aux_timer_inactive = 1;
     624:	00001540 	andeq	r1, r0, r0, asr #10
     628:	0000154e 	andeq	r1, r0, lr, asr #10
				if (__pi_systat.ledsts & 0x1)
     62c:	00510001 	subseq	r0, r1, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	00000000 	andeq	r0, r0, r0
     634:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
				if (__pi_systat.ledsts & 0x2)
     638:	8400000f 	strhi	r0, [r0], #-15
     63c:	0100000f 	tsteq	r0, pc
     640:	00005000 	andeq	r5, r0, r0
	...
		if (aux_timer_inactive) {
     650:	00010000 	andeq	r0, r1, r0
			cli_aux;
     654:	00000050 	andeq	r0, r0, r0, asr r0
     658:	00000000 	andeq	r0, r0, r0
     65c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     670:	00510001 	subseq	r0, r1, r1
     674:	00000000 	andeq	r0, r0, r0
     678:	01000000 	mrseq	r0, (UNDEF: 0)
word tci_update_delay_ticks (Boolean force) {
     67c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	00010000 	andeq	r0, r1, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	00000052 	andeq	r0, r0, r2, asr r0
     694:	00000000 	andeq	r0, r0, r0
     698:	52000100 	andpl	r0, r0, #0, 2
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	00530001 	subseq	r0, r3, r1
     6b0:	00000000 	andeq	r0, r0, r0
}
     6b4:	01000000 	mrseq	r0, (UNDEF: 0)
		sti_tim;
     6b8:	00005300 	andeq	r5, r0, r0, lsl #6
		return YES;
     6bc:	00000000 	andeq	r0, r0, r0
     6c0:	00010000 	andeq	r0, r1, r0
     6c4:	00000053 	andeq	r0, r0, r3, asr r0
	...
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	UARTConfigSetExpClk (UART0_BASE,
     6e0:	00001410 	andeq	r1, r0, r0, lsl r4
     6e4:	00001418 	andeq	r1, r0, r8, lsl r4
     6e8:	00500001 	subseq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	00000000 	andeq	r0, r0, r0
     6f0:	34000000 	strcc	r0, [r0], #-0
     6f4:	3a000013 	bcc	748 <reinit_uart+0x28>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	01000013 	tsteq	r0, r3, lsl r0
     6fc:	00005000 	andeq	r5, r0, r0
     700:	00000000 	andeq	r0, r0, r0
	urates [0] = rate;
     704:	134a0000 	movtne	r0, #40960	; 0xa000
}
     708:	13760000 	cmnne	r6, #0
     70c:	00010000 	andeq	r0, r1, r0
     710:	00137654 	andseq	r7, r3, r4, asr r6
     714:	00137c00 	andseq	r7, r3, r0, lsl #24
     718:	52000100 	andpl	r0, r0, #0, 2
     71c:	0000137c 	andeq	r1, r0, ip, ror r3
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	000013c4 	andeq	r1, r0, r4, asr #7
     724:	c4540001 	ldrbgt	r0, [r4], #-1
     728:	dc000013 	stcle	0, cr0, [r0], {19}
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	01000013 	tsteq	r0, r3, lsl r0
     730:	00005000 	andeq	r5, r0, r0
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	00000000 	andeq	r0, r0, r0
     738:	13760000 	cmnne	r6, #0
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	137a0000 	cmnne	sl, #0
     740:	00010000 	andeq	r0, r1, r0
     744:	00137a54 	andseq	r7, r3, r4, asr sl
     748:	00137c00 	andseq	r7, r3, r0, lsl #24
     74c:	53000100 	movwpl	r0, #256	; 0x100
     750:	00001392 	muleq	r0, r2, r3
     754:	0000139b 	muleq	r0, fp, r3
	switch (operation) {
     758:	00500001 	subseq	r0, r0, r1
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	00000000 	andeq	r0, r0, r0
     760:	84000000 	strhi	r0, [r0], #-0
     764:	94000013 	strls	r0, [r0], #-19	; 0xffffffed
     768:	01000013 	tsteq	r0, r3, lsl r0
     76c:	00005300 	andeq	r5, r0, r0, lsl #6
				*buf++ = uart_a_read;
     770:	00000000 	andeq	r0, r0, r0
     774:	134a0000 	movtne	r0, #40960	; 0xa000
			while (len && uart_a_char_available) {
     778:	13680000 	cmnne	r8, #0
     77c:	00010000 	andeq	r0, r1, r0
     780:	00136e50 	andseq	r6, r3, r0, asr lr
			if (len != operation) {
     784:	00138e00 	andseq	r8, r3, r0, lsl #28
}
     788:	50000100 	andpl	r0, r0, r0, lsl #2
     78c:	0000138e 	andeq	r1, r0, lr, lsl #7
			uart_a_disable_int;
     790:	00001398 	muleq	r0, r8, r3
			if (uart_a_char_available) {
     794:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
			uart_a_disable_int;
     7a0:	00000ef8 	strdeq	r0, [r0], -r8
			if (uart_a_char_available) {
     7a4:	00000f26 	andeq	r0, r0, r6, lsr #30
     7a8:	34500001 	ldrbcc	r0, [r0], #-1
				uart_a_enable_int;
     7ac:	7800000f 	stmdavc	r0, {r0, r1, r2, r3}
     7b0:	0100000f 	tsteq	r0, pc
				goto Redo_rx;
     7b4:	00005000 	andeq	r5, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	00000000 	andeq	r0, r0, r0
     7bc:	0f000000 	svceq	0x00000000
			return -2;
     7c0:	0f0c0000 	svceq	0x000c0000
     7c4:	00010000 	andeq	r0, r1, r0
				uart_a_write (*buf);
     7c8:	000f0c53 	andeq	r0, pc, r3, asr ip	; <UNPREDICTABLE>
     7cc:	000f0e00 	andeq	r0, pc, r0, lsl #28
			while (len && uart_a_room_in_tx) {
     7d0:	70000200 	andvc	r0, r0, r0, lsl #4
     7d4:	000f1200 	andeq	r1, pc, r0, lsl #4
     7d8:	000f6a00 	andeq	r6, pc, r0, lsl #20
			if (len != operation) {
     7dc:	53000100 	movwpl	r0, #256	; 0x100
			uart_a_disable_int;
     7e0:	00000f6a 	andeq	r0, r0, sl, ror #30
     7e4:	00000f6e 	andeq	r0, r0, lr, ror #30
			if (uart_a_room_in_tx) {
     7e8:	00730002 	rsbseq	r0, r3, r2
     7ec:	00000f6e 	andeq	r0, r0, lr, ror #30
				uart_a_enable_int;
     7f0:	00000f78 	andeq	r0, r0, r8, ror pc
     7f4:	00530001 	subseq	r0, r3, r1
	...
				uart_a_write (*buf);
     800:	0200000f 	andeq	r0, r0, #15
     804:	0100000f 	tsteq	r0, pc
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	0f125200 	svceq	0x00125200
     80c:	0f520000 	svceq	0x00520000
			uart_a_enable_int;
     810:	00010000 	andeq	r0, r1, r0
     814:	000f6a52 	andeq	r6, pc, r2, asr sl	; <UNPREDICTABLE>
     818:	000f6e00 	andeq	r6, pc, r0, lsl #28
			return 0;
     81c:	53000100 	movwpl	r0, #256	; 0x100
			if (len == UART_CNTRL_SETRATE) {
     820:	00000f6e 	andeq	r0, r0, lr, ror #30
				if (__pi_uart_setrate (*((word*)buf),
     824:	00000f78 	andeq	r0, r0, r8, ror pc
     828:	00520001 	subseq	r0, r2, r1
     82c:	00000000 	andeq	r0, r0, r0
				syserror (EREQPAR, "uar");
     830:	5c000000 	stcpl	0, cr0, [r0], {-0}
			syserror (ENOOPER, "uai");
     834:	64000012 	strvs	r0, [r0], #-18	; 0xffffffee
			if (len == UART_CNTRL_GETRATE) {
     838:	01000012 	tsteq	r0, r2, lsl r0
				return 1;
     83c:	12685100 	rsbne	r5, r8, #0, 2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	126a0000 	rsbne	r0, sl, #0
			syserror (ENOOPER, "uai");
     844:	00010000 	andeq	r0, r1, r0
     848:	00000051 	andeq	r0, r0, r1, asr r0
     84c:	00000000 	andeq	r0, r0, r0
     850:	0011b000 	andseq	fp, r1, r0
     854:	0011cc00 	andseq	ip, r1, r0, lsl #24
     858:	50000100 	andpl	r0, r0, r0, lsl #2
     85c:	000011d2 	ldrdeq	r1, [r0], -r2
     860:	000011de 	ldrdeq	r1, [r0], -lr
     864:	00500001 	subseq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     86c:	b0000000 	andlt	r0, r0, r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	ce000011 	mcrgt	0, 0, r0, cr0, cr1, {0}
     874:	01000011 	tsteq	r0, r1, lsl r0
     878:	11d25100 	bicsne	r5, r2, r0, lsl #2
     87c:	11dc0000 	bicsne	r0, ip, r0
     880:	00010000 	andeq	r0, r1, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	00000051 	andeq	r0, r0, r1, asr r0
     888:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     88c:	0011b000 	andseq	fp, r1, r0
     890:	0011d100 	andseq	sp, r1, r0, lsl #2
		i_trigger (devevent (UART_A, READ));
     894:	52000100 	andpl	r0, r0, #0, 2
     898:	000011d2 	ldrdeq	r1, [r0], -r2
     89c:	000011da 	ldrdeq	r1, [r0], -sl
     8a0:	00520001 	subseq	r0, r2, r1
     8a4:	00000000 	andeq	r0, r0, r0
     8a8:	b0000000 	andlt	r0, r0, r0
     8ac:	c8000011 	stmdagt	r0, {r0, r4}
     8b0:	01000011 	tsteq	r0, r1, lsl r0
     8b4:	11c85300 	bicne	r5, r8, r0, lsl #6
     8b8:	124c0000 	subne	r0, ip, #0
     8bc:	00010000 	andeq	r0, r1, r0
     8c0:	00000055 	andeq	r0, r0, r5, asr r0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	00000000 	andeq	r0, r0, r0
     8c8:	0011b000 	andseq	fp, r1, r0
     8cc:	00123000 	andseq	r3, r2, r0
		i_trigger (devevent (UART_A, WRITE));
     8d0:	91000200 	mrsls	r0, R8_usr
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	00123000 	andseq	r3, r2, r0
     8d8:	00124c00 	andseq	r4, r2, r0, lsl #24
		RISE_N_SHINE;
     8dc:	91000200 	mrsls	r0, R8_usr
	...
		i_trigger (devevent (UART_A, WRITE));
     8e8:	0011e000 	andseq	lr, r1, r0
     8ec:	0011f600 	andseq	pc, r1, r0, lsl #12
     8f0:	50000100 	andpl	r0, r0, r0, lsl #2
     8f4:	000011fe 	strdeq	r1, [r0], -lr
     8f8:	00001210 	andeq	r1, r0, r0, lsl r2
     8fc:	20500001 	subscs	r0, r0, r1
     900:	28000012 	stmdacs	r0, {r1, r4}
     904:	01000012 	tsteq	r0, r2, lsl r0
     908:	12305000 	eorsne	r5, r0, #0
     90c:	12380000 	eorsne	r0, r8, #0
     910:	00010000 	andeq	r0, r1, r0
}
     914:	00000050 	andeq	r0, r0, r0, asr r0
     918:	00000000 	andeq	r0, r0, r0
     91c:	00118c00 	andseq	r8, r1, r0, lsl #24
     920:	00119200 	andseq	r9, r1, r0, lsl #4
     924:	50000100 	andpl	r0, r0, r0, lsl #2
void __buttons_setirq (int val) {
     928:	00001198 	muleq	r0, r8, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	000011a0 	andeq	r1, r0, r0, lsr #3
     930:	a4500001 	ldrbge	r0, [r0], #-1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	b0000011 	andlt	r0, r0, r1, lsl r0
     938:	01000011 	tsteq	r0, r1, lsl r0
     93c:	00005000 	andeq	r5, r0, r0
		bn = BUTTON_GPIO (__button_list [i]);
     940:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	118c0000 	orrne	r0, ip, r0
     948:	11940000 	orrsne	r0, r4, r0
     94c:	00010000 	andeq	r0, r1, r0
     950:	00119851 	andseq	r9, r1, r1, asr r8
     954:	0011a200 	andseq	sl, r1, r0, lsl #4
     958:	51000100 	mrspl	r0, (UNDEF: 16)
}
     95c:	000011a4 	andeq	r1, r0, r4, lsr #3
     960:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
     964:	00510001 	subseq	r0, r1, r1
	...
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	01000000 	mrseq	r0, (UNDEF: 0)
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	00005000 	andeq	r5, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
     97c:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	00010000 	andeq	r0, r1, r0
     984:	00000050 	andeq	r0, r0, r0, asr r0
	...
	for (i = 0; i < N_PINLIST; i++) {
     994:	52000100 	andpl	r0, r0, #0, 2
	...
}
     9a0:	00001176 	andeq	r1, r0, r6, ror r1
     9a4:	00001178 	andeq	r1, r0, r8, ror r1
void GPIOIntHandler () {
     9a8:	00500001 	subseq	r0, r0, r1
if (buttons_int) {
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	76000000 	strvc	r0, [r0], -r0
	buttons_disable ();
     9b4:	80000011 	andhi	r0, r0, r1, lsl r0
     9b8:	01000011 	tsteq	r0, r1, lsl r0
	i_trigger ((aword)&__button_list);
     9bc:	11845100 	orrne	r5, r4, r0, lsl #2
     9c0:	118a0000 	orrne	r0, sl, r0
     9c4:	00010000 	andeq	r0, r1, r0
     9c8:	00000051 	andeq	r0, r0, r1, asr r0
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	00117600 	andseq	r7, r1, r0, lsl #12
     9d4:	00117a00 	andseq	r7, r1, r0, lsl #20
     9d8:	52000100 	andpl	r0, r0, #0, 2
	...
	RISE_N_SHINE;
     9ec:	00500001 	subseq	r0, r0, r1
	...
	i_trigger ((aword)(&__input_pins));
     9fc:	01000000 	mrseq	r0, (UNDEF: 0)
     a00:	00005100 	andeq	r5, r0, r0, lsl #2
	...
     a10:	00010000 	andeq	r0, r1, r0
     a14:	00000050 	andeq	r0, r0, r0, asr r0
     a18:	00000000 	andeq	r0, r0, r0
     a1c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	RISE_N_SHINE;
     a30:	00510001 	subseq	r0, r1, r1
	...
}
     a40:	01000000 	mrseq	r0, (UNDEF: 0)
     a44:	00005000 	andeq	r5, r0, r0
     a48:	00000000 	andeq	r0, r0, r0
void system_init () {
     a4c:	00010000 	andeq	r0, r1, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a60:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a74:	00520001 	subseq	r0, r2, r1
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a84:	01000000 	mrseq	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	00005000 	andeq	r5, r0, r0
	...
		pin = (port_confs [i] >> 19) & 0x1f;
     a98:	00010000 	andeq	r0, r1, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9c:	00000051 	andeq	r0, r0, r1, asr r0
     aa0:	00000000 	andeq	r0, r0, r0
     aa4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	00001168 	andeq	r1, r0, r8, ror #2
     ab4:	0000116c 	andeq	r1, r0, ip, ror #2
		if (port_confs [i] & 0x40)
     ab8:	6c500001 	mrrcvs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	76000011 			; <UNDEFINED> instruction: 0x76000011
     ac0:	01000011 	tsteq	r0, r1, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	00005300 	andeq	r5, r0, r0, lsl #6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	116c0000 	cmnne	ip, r0
	all_leds_blink;
     ad0:	11760000 	cmnne	r6, r0
     ad4:	00010000 	andeq	r0, r1, r0
     ad8:	00000050 	andeq	r0, r0, r0, asr r0
	...
     ae8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     af4:	00510001 	subseq	r0, r1, r1
	...
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	01000000 	mrseq	r0, (UNDEF: 0)
     b08:	00005200 	andeq	r5, r0, r0, lsl #4
	IntEnable (INT_AON_RTC_COMB);
     b0c:	00000000 	andeq	r0, r0, r0
     b10:	00010000 	andeq	r0, r1, r0
     b14:	00000052 	andeq	r0, r0, r2, asr r0
	...
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b30:	00001144 	andeq	r1, r0, r4, asr #2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	0000114c 	andeq	r1, r0, ip, asr #2
     b38:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	52000011 	andpl	r0, r0, #17
     b40:	01000011 	tsteq	r0, r1, lsl r0
     b44:	11525000 	cmpne	r2, r0
	urates [0] = UART_RATE / 100;
     b48:	11680000 	cmnne	r8, r0
     b4c:	00010000 	andeq	r0, r1, r0
	reinit_uart ();
     b50:	00000053 	andeq	r0, r0, r3, asr r0
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b60:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b6c:	00500001 	subseq	r0, r0, r1
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	01000000 	mrseq	r0, (UNDEF: 0)
     b80:	00005000 	andeq	r5, r0, r0
     b84:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_UART0_COMB);
     b88:	00010000 	andeq	r0, r1, r0
     b8c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		diag ("");
     b9c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("Leftover RAM: %d bytes",
     ba8:	00570001 	subseq	r0, r7, r1
	...
     bb8:	01000000 	mrseq	r0, (UNDEF: 0)
     bbc:	00005600 	andeq	r5, r0, r0, lsl #12
	...
     bcc:	00010000 	andeq	r0, r1, r0
     bd0:	00000050 	andeq	r0, r0, r0, asr r0
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     be4:	00580001 	subseq	r0, r8, r1
     be8:	00000000 	andeq	r0, r0, r0
     bec:	01000000 	mrseq	r0, (UNDEF: 0)
     bf0:	00005000 	andeq	r5, r0, r0
	...
     c00:	00010000 	andeq	r0, r1, r0
__attribute__ ((noreturn)) void __pi_release () {
     c04:	00000054 	andeq	r0, r0, r4, asr r0
     c08:	00000000 	andeq	r0, r0, r0
     c0c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	update_n_wake (MAX_WORD, NO);
     c20:	00580001 	subseq	r0, r8, r1
     c24:	00000000 	andeq	r0, r0, r0
     c28:	01000000 	mrseq	r0, (UNDEF: 0)
	for_all_tasks (__pi_curr) {
     c2c:	00005800 	andeq	r5, r0, r0, lsl #16
     c30:	00000000 	andeq	r0, r0, r0
     c34:	12e40000 	rscne	r0, r4, #0
     c38:	12ec0000 	rscne	r0, ip, #0
	__SLEEP;
     c3c:	00010000 	andeq	r0, r1, r0
     c40:	0012ec50 	andseq	lr, r2, r0, asr ip
     c44:	0012f600 	andseq	pc, r2, r0, lsl #12
     c48:	50000100 	andpl	r0, r0, r0, lsl #2
	system_event_count ++;
     c4c:	000012fc 	strdeq	r1, [r0], -ip
     c50:	00001308 	andeq	r1, r0, r8, lsl #6
	switch (__pi_systat.effpdm) {
     c54:	1c500001 	mrrcne	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     c58:	26000013 			; <UNDEFINED> instruction: 0x26000013
     c5c:	01000013 	tsteq	r0, r3, lsl r0
     c60:	00005000 	andeq	r5, r0, r0
			__WFI ();
     c64:	00000000 	andeq	r0, r0, r0
     c68:	12f20000 	rscsne	r0, r2, #0
     c6c:	13240000 			; <UNDEFINED> instruction: 0x13240000
	check_stack_overflow;
     c70:	00010000 	andeq	r0, r1, r0
     c74:	00132454 	andseq	r2, r3, r4, asr r4
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c78:	00132600 	andseq	r2, r3, r0, lsl #12
     c7c:	52000100 	andpl	r0, r0, #0, 2
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	00001326 	andeq	r1, r0, r6, lsr #6
			goto Redo;
     c84:	00001328 	andeq	r1, r0, r8, lsr #6
	for_all_tasks (__pi_curr) {
     c88:	00540001 	subseq	r0, r4, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	00000000 	andeq	r0, r0, r0
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	c2000000 	andgt	r0, r0, #0
     c94:	f400000e 	vst4.8	{d0-d3}, [r0], lr
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	0100000e 	tsteq	r0, lr
     c9c:	00005600 	andeq	r5, r0, r0, lsl #12
     ca0:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca4:	0ed80000 	cdpeq	0, 13, cr0, cr8, cr0, {0}
     ca8:	0ee20000 	cdpeq	0, 14, cr0, cr2, cr0, {0}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	00010000 	andeq	r0, r1, r0
     cb0:	00000053 	andeq	r0, r0, r3, asr r0
	...
}
     cc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	00540001 	subseq	r0, r4, r1
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cdc:	01000000 	mrseq	r0, (UNDEF: 0)
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	00005000 	andeq	r5, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     ce8:	00010000 	andeq	r0, r1, r0
     cec:	00000050 	andeq	r0, r0, r0, asr r0
     cf0:	00000000 	andeq	r0, r0, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	00110c00 	andseq	r0, r1, r0, lsl #24
     cf8:	00112500 	andseq	r2, r1, r0, lsl #10
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d08:	0000110c 	andeq	r1, r0, ip, lsl #2
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d0c:	00001122 	andeq	r1, r0, r2, lsr #2
     d10:	00510001 	subseq	r0, r1, r1
			SysCtrlSetRechargeBeforePowerDown
     d14:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d18:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	fc000010 	stc2	0, cr0, [r0], {16}
     d20:	01000010 	tsteq	r0, r0, lsl r0
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	10fc5000 	rscsne	r5, ip, r0
     d28:	11000000 	mrsne	r0, (UNDEF: 0)
     d2c:	00010000 	andeq	r0, r1, r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	00110454 	andseq	r0, r1, r4, asr r4
     d34:	00110c00 	andseq	r0, r1, r0, lsl #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     d44:	000010e8 	andeq	r1, r0, r8, ror #1
     d48:	000010ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
			while (!(AONWUCPowerStatusGet () &
     d4c:	04510001 	ldrbeq	r0, [r1], #-1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	0c000011 	stceq	0, cr0, [r0], {17}
     d54:	01000011 	tsteq	r0, r1, lsl r0
     d58:	00005100 	andeq	r5, r0, r0, lsl #2
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	10f00000 	rscsne	r0, r0, r0
     d64:	10ff0000 	rscsne	r0, pc, r0
     d68:	00010000 	andeq	r0, r1, r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	00110453 	andseq	r0, r1, r3, asr r4
     d70:	00110c00 	andseq	r0, r1, r0, lsl #24
     d74:	53000100 	movwpl	r0, #256	; 0x100
	...
     d88:	00500001 	subseq	r0, r0, r1
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	01000000 	mrseq	r0, (UNDEF: 0)
     d9c:	00005100 	andeq	r5, r0, r0, lsl #2
     da0:	00000000 	andeq	r0, r0, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	00010000 	andeq	r0, r1, r0
     da8:	00000055 	andeq	r0, r0, r5, asr r0
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	52000100 	andpl	r0, r0, #0, 2
	...
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	00520001 	subseq	r0, r2, r1
     dc8:	00000000 	andeq	r0, r0, r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd0:	d2000010 	andle	r0, r0, #16
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd4:	01000010 	tsteq	r0, r0, lsl r0
     dd8:	00005300 	andeq	r5, r0, r0, lsl #6
			PRCMPowerDomainOff (
     ddc:	00000000 	andeq	r0, r0, r0
     de0:	106c0000 	rsbne	r0, ip, r0
	__SLEEP;
     de4:	10720000 	rsbsne	r0, r2, r0
     de8:	00010000 	andeq	r0, r1, r0
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	00000050 	andeq	r0, r0, r0, asr r0
	goto Redo;
     df0:	00000000 	andeq	r0, r0, r0
     df4:	0013dc00 	andseq	sp, r3, r0, lsl #24
     df8:	0013e200 	andseq	lr, r3, r0, lsl #4
     dfc:	50000100 	andpl	r0, r0, r0, lsl #2
     e00:	000013e2 	andeq	r1, r0, r2, ror #7
     e04:	00001410 	andeq	r1, r0, r0, lsl r4
     e08:	00550001 	subseq	r0, r5, r1
     e0c:	00000000 	andeq	r0, r0, r0
     e10:	dc000000 	stcle	0, cr0, [r0], {-0}
     e14:	e7000013 	smlad	r0, r3, r0, r0
     e18:	01000013 	tsteq	r0, r3, lsl r0
     e1c:	13e75100 	mvnne	r5, #0, 2
     e20:	14100000 	ldrne	r0, [r0], #-0
     e24:	00010000 	andeq	r0, r1, r0
     e28:	00000054 	andeq	r0, r0, r4, asr r0
     e2c:	00000000 	andeq	r0, r0, r0
     e30:	0013f800 	andseq	pc, r3, r0, lsl #16
     e34:	0013fc00 	andseq	pc, r3, r0, lsl #24
     e38:	53000100 	movwpl	r0, #256	; 0x100
     e3c:	000013fe 	strdeq	r1, [r0], -lr
     e40:	00001402 	andeq	r1, r0, r2, lsl #8
     e44:	02530001 	subseq	r0, r3, #1
     e48:	10000014 	andne	r0, r0, r4, lsl r0
     e4c:	01000014 	tsteq	r0, r4, lsl r0
     e50:	00005200 	andeq	r5, r0, r0, lsl #4
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	00010000 	andeq	r0, r1, r0
     e64:	00000050 	andeq	r0, r0, r0, asr r0
	...
	tcv_init ();
     e74:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e88:	00500001 	subseq	r0, r0, r1
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	00000000 	andeq	r0, r0, r0
     e90:	01000000 	mrseq	r0, (UNDEF: 0)
	delay (16, 0);
     e94:	00005000 	andeq	r5, r0, r0
	...
	__pi_release ();
     ea4:	00010000 	andeq	r0, r1, r0
     ea8:	00000053 	andeq	r0, r0, r3, asr r0
     eac:	00000000 	andeq	r0, r0, r0
     eb0:	53000100 	movwpl	r0, #256	; 0x100
	...
	for_all_tasks (i) {
     ec4:	00500001 	subseq	r0, r0, r1
		for (j = 0; j < nevents (i); j++) {
     ec8:	00000000 	andeq	r0, r0, r0
     ecc:	01000000 	mrseq	r0, (UNDEF: 0)
     ed0:	00005300 	andeq	r5, r0, r0, lsl #6
			    || i->Events [j] . Event == wfun
     ed4:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
     ed8:	00010000 	andeq	r0, r1, r0
			if (i->Events [j] . Event == (aword)pid
     edc:	00000053 	andeq	r0, r0, r3, asr r0
	...
				wakeupev (i, j);
     eec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	00500001 	subseq	r0, r0, r1
	...
	m_setnextp (ch, chunk);
     f08:	01000000 	mrseq	r0, (UNDEF: 0)
	m_setnextp (cc, ch);
     f0c:	00005000 	andeq	r5, r0, r0
}
     f10:	00000000 	andeq	r0, r0, r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	00010000 	andeq	r0, r1, r0
     f18:	00000053 	andeq	r0, r0, r3, asr r0
     f1c:	00000000 	andeq	r0, r0, r0
			m_setnextp (cc, m_nextp (chunk));
     f20:	53000100 	movwpl	r0, #256	; 0x100
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	00500001 	subseq	r0, r0, r1
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	00000000 	andeq	r0, r0, r0
     f3c:	01000000 	mrseq	r0, (UNDEF: 0)
     f40:	00005000 	andeq	r5, r0, r0
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     f50:	00010000 	andeq	r0, r1, r0
     f54:	00000053 	andeq	r0, r0, r3, asr r0
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	000fa000 	andeq	sl, pc, r0
			if (m_size (chunk) >= m_size (ch))
     f60:	000fa600 	andeq	sl, pc, r0, lsl #12
     f64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		chunk = m_nextp (chunk))
     f70:	00000fa0 	andeq	r0, r0, r0, lsr #31
     f74:	00000fa9 	andeq	r0, r0, r9, lsr #31
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	00510001 	subseq	r0, r1, r1
	diag_wait (a);
     f7c:	00000000 	andeq	r0, r0, r0
	diag_wchar (c, a);
     f80:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     f84:	ec00000f 	stc	0, cr0, [r0], {15}
}
     f88:	0100000f 	tsteq	r0, pc
     f8c:	0ff05400 	svceq	0x00f05400
	syserror (ESTATE, "state");
     f90:	103e0000 	eorsne	r0, lr, r0
     f94:	00010000 	andeq	r0, r1, r0
     f98:	00104054 	andseq	r4, r0, r4, asr r0
     f9c:	00104a00 	andseq	r4, r0, r0, lsl #20
void update_n_wake (word min, Boolean force) {
     fa0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
     fac:	00000fe6 	andeq	r0, r0, r6, ror #31
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	00000fe8 	andeq	r0, r0, r8, ror #31
     fb4:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
     fb8:	4000000f 	andmi	r0, r0, pc
     fbc:	01000010 	tsteq	r0, r0, lsl r0
     fc0:	00005000 	andeq	r5, r0, r0
     fc4:	00000000 	andeq	r0, r0, r0
     fc8:	10800000 	addne	r0, r0, r0
     fcc:	10940000 	addsne	r0, r4, r0
     fd0:	00010000 	andeq	r0, r1, r0
     fd4:	00109a50 	andseq	r9, r0, r0, asr sl
     fd8:	0010b400 	andseq	fp, r0, r0, lsl #8
     fdc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	__pi_mintk = znew + min;
     fe8:	00001080 	andeq	r1, r0, r0, lsl #1
     fec:	00001096 	muleq	r0, r6, r0
			if (!twaiting (i))
     ff0:	9a510001 	bls	1440ffc <__ccfg+0x1421054>
     ff4:	a0000010 	andge	r0, r0, r0, lsl r0
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	01000010 	tsteq	r0, r0, lsl r0
     ffc:	00005100 	andeq	r5, r0, r0, lsl #2
    1000:	00000000 	andeq	r0, r0, r0
    1004:	10920000 	addsne	r0, r2, r0
    1008:	10940000 	addsne	r0, r4, r0
    100c:	00010000 	andeq	r0, r1, r0
    1010:	00000050 	andeq	r0, r0, r0, asr r0
    1014:	00000000 	andeq	r0, r0, r0
    1018:	00109200 	andseq	r9, r0, r0, lsl #4
    101c:	00109600 	andseq	r9, r0, r0, lsl #12
    1020:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				wakeuptm (i);
    102c:	0000129c 	muleq	r0, ip, r2
		for_all_tasks (i) {
    1030:	000012aa 	andeq	r1, r0, sl, lsr #5
				d = i->Timer - znew;
    1034:	b0500001 	subslt	r0, r0, r1
    1038:	c3000012 	movwgt	r0, #18
    103c:	01000012 	tsteq	r0, r2, lsl r0
		if ((word)(__pi_mintk - znew) < min) 
    1040:	00005000 	andeq	r5, r0, r0
    1044:	00000000 	andeq	r0, r0, r0
    1048:	12a80000 	adcne	r0, r8, #0
	__pi_old = znew;
    104c:	12aa0000 	adcne	r0, sl, #0
}
    1050:	00010000 	andeq	r0, r1, r0
	TCI_RUN_DELAY_TIMER;
    1054:	00000050 	andeq	r0, r0, r0, asr r0
	...
}
    1064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	prcdstate (__pi_curr, state);
    1070:	00500001 	subseq	r0, r0, r1
	...
void __pi_wait (aword event, word state) {
    1080:	01000000 	mrseq	r0, (UNDEF: 0)
	sint j = nevents (__pi_curr);
    1084:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		syserror (ENEVENTS, "sw");
    1094:	00010000 	andeq	r0, r1, r0
    1098:	00000054 	andeq	r0, r0, r4, asr r0
	setestate (__pi_curr->Events [j], state, event);
    109c:	00000000 	andeq	r0, r0, r0
	incwait (__pi_curr);
    10a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
void __pi_trigger (aword event) {
    10b4:	00500001 	subseq	r0, r0, r1
	for_all_tasks (i) {
    10b8:	00000000 	andeq	r0, r0, r0
		for (j = 0; j < nevents (i); j++) {
    10bc:	01000000 	mrseq	r0, (UNDEF: 0)
    10c0:	00005000 	andeq	r5, r0, r0
    10c4:	00000000 	andeq	r0, r0, r0
    10c8:	00020000 	andeq	r0, r2, r0
			if (i->Events [j] . Event == event) {
    10cc:	00000075 	andeq	r0, r0, r5, ror r0
	...
				wakeupev (i, j);
    10dc:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i) {
    10e0:	00000050 	andeq	r0, r0, r0, asr r0
}
    10e4:	00000000 	andeq	r0, r0, r0
aword __pi_join (aword pid, word st) {
    10e8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			__pi_wait (pid, st);
    10fc:	00540001 	subseq	r0, r4, r1
}
    1100:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
    1104:	01000000 	mrseq	r0, (UNDEF: 0)
    1108:	00005000 	andeq	r5, r0, r0
	...
	settstate (__pi_curr, state);
    1118:	00010000 	andeq	r0, r1, r0
    111c:	00000050 	andeq	r0, r0, r0, asr r0
	update_n_wake (d, YES);
    1120:	00000000 	andeq	r0, r0, r0
    1124:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	inctimer (__pi_curr);
    1138:	00530001 	subseq	r0, r3, r1
	...
		return (int) __pi_curr;
    1148:	01000000 	mrseq	r0, (UNDEF: 0)
    114c:	00005000 	andeq	r5, r0, r0
	for_all_tasks (i)
    1150:	00000000 	andeq	r0, r0, r0
}
    1154:	00020000 	andeq	r0, r2, r0
		if (i->code == fun)
    1158:	00000073 	andeq	r0, r0, r3, ror r0
	...
int __pi_strlen (const char *s) {
    1168:	00010000 	andeq	r0, r1, r0
	for (i = 0; *(s+i) != '\0'; i++);
    116c:	00000050 	andeq	r0, r0, r0, asr r0
}
    1170:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1174:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		*dest++ = *src++;
    1188:	00510001 	subseq	r0, r1, r1
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	00000000 	andeq	r0, r0, r0
		syserror (EREQPAR, "addv");
    1190:	01000000 	mrseq	r0, (UNDEF: 0)
		syserror (ERESOURCE, "addv");
    1194:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	ioreq [loc] = rf;
    11a4:	00010000 	andeq	r0, r1, r0
}
    11a8:	00000053 	andeq	r0, r0, r3, asr r0
    11ac:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	53000100 	movwpl	r0, #256	; 0x100
	...
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11c4:	00500001 	subseq	r0, r0, r1
    11c8:	00000000 	andeq	r0, r0, r0
		syserror (ENODEVICE, "io");
    11cc:	01000000 	mrseq	r0, (UNDEF: 0)
    11d0:	00005000 	andeq	r5, r0, r0
	if (len == 0)
    11d4:	00000000 	andeq	r0, r0, r0
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	00020000 	andeq	r0, r2, r0
    11dc:	00000073 	andeq	r0, r0, r3, ror r0
	...
		if (retry == WNONE)
    11ec:	00010000 	andeq	r0, r1, r0
		iowait (dev, operation, retry);
    11f0:	00000050 	andeq	r0, r0, r0, asr r0
    11f4:	00000000 	andeq	r0, r0, r0
    11f8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		if (retry != WNONE) {
    1204:	00500001 	subseq	r0, r0, r1
    1208:	00000000 	andeq	r0, r0, r0
			iowait (dev, operation, retry);
    120c:	01000000 	mrseq	r0, (UNDEF: 0)
    1210:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		(ioreq [dev]) (NONE, buf, len);
    1220:	00010000 	andeq	r0, r1, r0
    1224:	00000051 	andeq	r0, r0, r1, asr r0
    1228:	00000000 	andeq	r0, r0, r0
}
    122c:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
		delay (-ret - 2, retry);
    1238:	00510001 	subseq	r0, r1, r1
    123c:	00000000 	andeq	r0, r0, r0
    1240:	01000000 	mrseq	r0, (UNDEF: 0)
		release;
    1244:	00005700 	andeq	r5, r0, r0, lsl #14
	...
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    1254:	00010000 	andeq	r0, r1, r0
    1258:	00000052 	andeq	r0, r0, r2, asr r0
    125c:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "mal1");
    1260:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    126c:	00520001 	subseq	r0, r2, r1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1270:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1274:	01000000 	mrseq	r0, (UNDEF: 0)
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1278:	00005400 	andeq	r5, r0, r0, lsl #8
	...
}
    1288:	00010000 	andeq	r0, r1, r0
    128c:	00000050 	andeq	r0, r0, r0, asr r0
    1290:	00000000 	andeq	r0, r0, r0
    1294:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		syserror (EMALLOC, "malg");
    12a8:	00500001 	subseq	r0, r0, r1
	...
		m_size (ch) ^= MALLOC_UMASK;
    12b8:	01000000 	mrseq	r0, (UNDEF: 0)
	mcfree [MA_NP] += m_size (ch);
    12bc:	00005000 	andeq	r5, r0, r0
	QFREE;
    12c0:	00000000 	andeq	r0, r0, r0
	if (mevent [MA_NP] . nwait) {
    12c4:	00010000 	andeq	r0, r1, r0
    12c8:	00000054 	andeq	r0, r0, r4, asr r0
	...
}
    12d8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
void kill (aword pid) {
    12e4:	00510001 	subseq	r0, r1, r1
	...
	syserror (EREQPAR, "kpi");
    12f4:	01000000 	mrseq	r0, (UNDEF: 0)
    12f8:	00005200 	andeq	r5, r0, r0, lsl #4
		if ((aword)i == pid) {
    12fc:	00000000 	andeq	r0, r0, r0
    1300:	00010000 	andeq	r0, r1, r0
				__PCB = i->Next;
    1304:	00000052 	andeq	r0, r0, r2, asr r0
	...
			if (i == __pi_curr)
    1314:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				j->Next = i->Next;
    1320:	00740007 	rsbseq	r0, r4, r7
    1324:	00722432 	rsbseq	r2, r2, r2, lsr r4
}
    1328:	00000022 	andeq	r0, r0, r2, lsr #32
    132c:	00000000 	andeq	r0, r0, r0
    1330:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	00500001 	subseq	r0, r0, r1
	...
			mevent [MA_NP] . nfail ++;
    1354:	01000000 	mrseq	r0, (UNDEF: 0)
		mnfree [MA_NP] = 0;
    1358:	00005100 	andeq	r5, r0, r0, lsl #2
	...
			syserror (EMALLOC, "malc");
    1368:	00010000 	andeq	r0, r1, r0
    136c:	00000050 	andeq	r0, r0, r0, asr r0
		if (m_size (chunk) >= _size)
    1370:	00000000 	andeq	r0, r0, r0
    1374:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
			m_size (chunk) = _size;
    1388:	00510001 	subseq	r0, r1, r1
			cc = chunk + _size + m_hdrlen;
    138c:	00000000 	andeq	r0, r0, r0
    1390:	01000000 	mrseq	r0, (UNDEF: 0)
			m_size (cc) = waste - m_hdrlen;
    1394:	00005600 	andeq	r5, r0, r0, lsl #12
	...
		mcfree [MA_NP] -= m_size (chunk);
    13a4:	00010000 	andeq	r0, r1, r0
    13a8:	00000050 	andeq	r0, r0, r0, asr r0
    13ac:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
}
    13c4:	00500001 	subseq	r0, r0, r1
    13c8:	00000000 	andeq	r0, r0, r0
    13cc:	01000000 	mrseq	r0, (UNDEF: 0)
    13d0:	00005000 	andeq	r5, r0, r0
	...
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	00010000 	andeq	r0, r1, r0
    13e4:	00000051 	andeq	r0, r0, r1, asr r0
    13e8:	00000000 	andeq	r0, r0, r0
		if ((j = __PCB) == NULL)
    13ec:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			for (; j->Next != NULL; j = j->Next);
    1400:	00500001 	subseq	r0, r0, r1
    1404:	00000000 	andeq	r0, r0, r0
	return (aword) i;
    1408:	01000000 	mrseq	r0, (UNDEF: 0)
    140c:	00005000 	andeq	r5, r0, r0
	...
		mevent [MA_NP] . nwait ++;
    141c:	00010000 	andeq	r0, r1, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	00000051 	andeq	r0, r0, r1, asr r0
    1424:	00000000 	andeq	r0, r0, r0
void diag (const char *mess, ...) {
    1428:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	diag_disable_int (a, is);
    143c:	00500001 	subseq	r0, r0, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1440:	00000000 	andeq	r0, r0, r0
	diag_disable_int (a, is);
    1444:	01000000 	mrseq	r0, (UNDEF: 0)
	while (*mess != '\0') {
    1448:	00005000 	andeq	r5, r0, r0
	dgout ('\r');
    144c:	00000000 	andeq	r0, r0, r0
	dgout ('\n');
    1450:	00010000 	andeq	r0, r1, r0
    1454:	00000050 	andeq	r0, r0, r0, asr r0
    1458:	00000000 	andeq	r0, r0, r0
	diag_wait (a);
    145c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    1468:	00500001 	subseq	r0, r0, r1
	...
		if (*mess == '%') {
    1478:	01000000 	mrseq	r0, (UNDEF: 0)
			if (*mess == 'l') {
    147c:	00005100 	andeq	r5, r0, r0, lsl #2
    1480:	00000000 	andeq	r0, r0, r0
				mess++;
    1484:	00010000 	andeq	r0, r1, r0
				val = va_arg (ap, lword);
    1488:	00000051 	andeq	r0, r0, r1, asr r0
				bc = 32;
    148c:	00000000 	andeq	r0, r0, r0
				bc = 16;
    1490:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				dgout ('%');
    14a4:	00520001 	subseq	r0, r2, r1
				dgout (*mess);
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (*mess) {
    14b0:	00005200 	andeq	r5, r0, r0, lsl #4
					v = __pi_hex_enc_table [
    14b4:	00000000 	andeq	r0, r0, r0
					i += 4;
    14b8:	00010000 	andeq	r0, r1, r0
					(val >> (bc - i)) & 0xf];
    14bc:	00000052 	andeq	r0, r0, r2, asr r0
	...
				while (i < bc) {
    14cc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					dgout ('-');
    14e0:	00500001 	subseq	r0, r0, r1
    14e4:	00000000 	andeq	r0, r0, r0
						val |= 0xffff0000;
    14e8:	01000000 	mrseq	r0, (UNDEF: 0)
    14ec:	00005000 	andeq	r5, r0, r0
	...
				d = (bc == 16) ? 10000 : 1000000000;
    14fc:	00010000 	andeq	r0, r1, r0
					v = (word) (val / d);
    1500:	00000050 	andeq	r0, r0, r0, asr r0
					if (v || d == 1) break;
    1504:	00000000 	andeq	r0, r0, r0
    1508:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					dgout (v + '0');
    151c:	00510001 	subseq	r0, r1, r1
	...
					v = (word) (val / d);
    152c:	01000000 	mrseq	r0, (UNDEF: 0)
    1530:	00005200 	andeq	r5, r0, r0, lsl #4
				if (bc == 16)
    1534:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    1538:	00010000 	andeq	r0, r1, r0
					val &= 0xffff;
    153c:	00000055 	andeq	r0, r0, r5, asr r0
	...
				while (*s != '\0') {
    154c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			dgout (*mess++);
    1558:	00540001 	subseq	r0, r4, r1
	...
    while(1)
    1568:	01000000 	mrseq	r0, (UNDEF: 0)
{
    156c:	00005100 	andeq	r5, r0, r0, lsl #2
    SetupTrimDevice();
    1570:	00000000 	andeq	r0, r0, r0
    pui32Src = &_etext;
    1574:	00010000 	andeq	r0, r1, r0
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1578:	00000050 	andeq	r0, r0, r0, asr r0
	...
    __asm("    ldr     r0, =_bss\n"
    1588:	52000100 	andpl	r0, r0, #0, 2
	...
    FaultISR();
    1594:	00550001 	subseq	r0, r5, r1
	...
        *pui32Dest++ = *pui32Src++;
    15a4:	01000000 	mrseq	r0, (UNDEF: 0)
    15a8:	00005000 	andeq	r5, r0, r0
    15ac:	00000000 	andeq	r0, r0, r0
    15b0:	00010000 	andeq	r0, r1, r0
    15b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			b |= 1;
    15d0:	00510001 	subseq	r0, r1, r1
    15d4:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15d8:	01000000 	mrseq	r0, (UNDEF: 0)
	for (b = 0, i = 0; i < 8; i++) {
    15dc:	00005100 	andeq	r5, r0, r0, lsl #2
	...
static void put_byte (byte b) {
    15ec:	00010000 	andeq	r0, r1, r0
    15f0:	00000052 	andeq	r0, r0, r2, asr r0
    15f4:	00000000 	andeq	r0, r0, r0
    15f8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1604:	00520001 	subseq	r0, r2, r1
	for (i = 0; i < 8; i++) {
    1608:	00000000 	andeq	r0, r0, r0
		b <<= 1;
    160c:	01000000 	mrseq	r0, (UNDEF: 0)
	for (i = 0; i < 8; i++) {
    1610:	00005400 	andeq	r5, r0, r0, lsl #8
}
    1614:	00000000 	andeq	r0, r0, r0
    1618:	00010000 	andeq	r0, r1, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    161c:	00000054 	andeq	r0, r0, r4, asr r0
    1620:	00000000 	andeq	r0, r0, r0
	put_byte (cmd);
    1624:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
static void wwait (word st, word del) {
    1638:	00530001 	subseq	r0, r3, r1
	...
	while (dopen && (rdsr () & 1)) {
    1648:	01000000 	mrseq	r0, (UNDEF: 0)
    164c:	00005000 	andeq	r5, r0, r0
	put_byte (CMD_RDSR);
    1650:	00000000 	andeq	r0, r0, r0
	r = get_byte ();
    1654:	00010000 	andeq	r0, r1, r0
    1658:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (st == WNONE)
    1668:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			delay (del, st);
    1674:	00500001 	subseq	r0, r0, r1
    1678:	00000000 	andeq	r0, r0, r0
			release;
    167c:	01000000 	mrseq	r0, (UNDEF: 0)
    1680:	00005000 	andeq	r5, r0, r0
	...
		wwait (WNONE, 1);
    1690:	00010000 	andeq	r0, r1, r0
    1694:	00000050 	andeq	r0, r0, r0, asr r0
    1698:	00000000 	andeq	r0, r0, r0
	dstat = 0;
    169c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    16a8:	00500001 	subseq	r0, r0, r1
	udelay (1);
    16ac:	00000000 	andeq	r0, r0, r0
    16b0:	01000000 	mrseq	r0, (UNDEF: 0)
	udelay (1);
    16b4:	00005000 	andeq	r5, r0, r0
	...
		dopen = DOPEN_TEMP;
    16c4:	00010000 	andeq	r0, r1, r0
static void cclose () {
    16c8:	00000051 	andeq	r0, r0, r1, asr r0
	if (dopen == DOPEN_TEMP) {
    16cc:	00000000 	andeq	r0, r0, r0
    16d0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	cmd_0 (CMD_DP);
    16dc:	00510001 	subseq	r0, r1, r1
    16e0:	00000000 	andeq	r0, r0, r0
		dopen = 0;
    16e4:	01000000 	mrseq	r0, (UNDEF: 0)
}
    16e8:	00005100 	andeq	r5, r0, r0, lsl #2
	...
	dopen = DOPEN_PERM;
    16f8:	00010000 	andeq	r0, r1, r0
}
    16fc:	00000054 	andeq	r0, r0, r4, asr r0
	if (dopen) {
    1700:	00000000 	andeq	r0, r0, r0
    1704:	70000a00 	andvc	r0, r0, r0, lsl #20
		dopen = DOPEN_TEMP;
    1708:	03243200 			; <UNDEFINED> instruction: 0x03243200
		cclose ();
    170c:	00000000 	andeq	r0, r0, r0
}
    1710:	00000022 	andeq	r0, r0, r2, lsr #32
int ser_in (word st, char *buf, int len) {
    1714:	00000000 	andeq	r0, r0, r0
    1718:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		if ((prcs = running (__inserial)) == 0) {
    1724:	0070000a 	rsbseq	r0, r0, sl
    1728:	00032432 	andeq	r2, r3, r2, lsr r4
			prcs = runthread (__inserial);
    172c:	22000000 	andcs	r0, r0, #0
	...
				npwait (st);
    1738:	00540001 	subseq	r0, r4, r1
		release;
    173c:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    1740:	0a000000 	beq	1748 <ser_in+0x34>
    1744:	32007000 	andcc	r7, r0, #0
	if (*__inpline == NULL) // bin cmd
    1748:	00000324 	andeq	r0, r0, r4, lsr #6
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    174c:	00220000 	eoreq	r0, r2, r0
	...
	memcpy (buf, __inpline, prcs);
    175c:	01000000 	mrseq	r0, (UNDEF: 0)
    1760:	00005500 	andeq	r5, r0, r0, lsl #10
	ufree (__inpline);
    1764:	00000000 	andeq	r0, r0, r0
	__inpline = NULL;
    1768:	00010000 	andeq	r0, r1, r0
	if (*buf) // if it's NULL, it's a bin cmd
    176c:	00000055 	andeq	r0, r0, r5, asr r0
	...
		prcs = strlen (__inpline);
    177c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		return 0;
    1788:	00540001 	subseq	r0, r4, r1
	...
	if ((prcs = running (__outserial)) != 0) {
    1798:	01000000 	mrseq	r0, (UNDEF: 0)
		join (prcs, st);
    179c:	00005000 	andeq	r5, r0, r0
    17a0:	00000000 	andeq	r0, r0, r0
		release;
    17a4:	00010000 	andeq	r0, r1, r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17a8:	00000050 	andeq	r0, r0, r0, asr r0
    17ac:	00000000 	andeq	r0, r0, r0
    17b0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (runstrand (__outserial, buf) == 0) {
    17c4:	00550001 	subseq	r0, r5, r1
	...
}
    17d4:	01000000 	mrseq	r0, (UNDEF: 0)
    17d8:	00005000 	andeq	r5, r0, r0
	...
	if (fmt == NULL)
    17e8:	00010000 	andeq	r0, r1, r0
	if (__inpline == NULL) {
    17ec:	00000050 	andeq	r0, r0, r0, asr r0
		if ((prcs = running (__inserial)) == 0) {
    17f0:	00000000 	andeq	r0, r0, r0
    17f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			if (prcs == 0) {
    1800:	00500001 	subseq	r0, r0, r1
				npwait (st);
    1804:	00000000 	andeq	r0, r0, r0
		release;
    1808:	01000000 	mrseq	r0, (UNDEF: 0)
		join (prcs, st);
    180c:	00005000 	andeq	r5, r0, r0
	...
	prcs = vscan (__inpline, fmt, ap);
    181c:	00010000 	andeq	r0, r1, r0
	ufree (__inpline);
    1820:	00000051 	andeq	r0, r0, r1, asr r0
	__inpline = NULL;
    1824:	00000000 	andeq	r0, r0, r0
}
    1828:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		return 0;
    1834:	00510001 	subseq	r0, r1, r1
	...
strand (__outserial, const char*)
    1844:	01000000 	mrseq	r0, (UNDEF: 0)
    1848:	00005300 	andeq	r5, r0, r0, lsl #6
    184c:	00000000 	andeq	r0, r0, r0
endstrand
    1850:	000a0000 	andeq	r0, sl, r0
    1854:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
	ptr = data;
    1858:	00000003 	andeq	r0, r0, r3
    185c:	00002200 	andeq	r2, r0, r0, lsl #4
	if (*ptr)
    1860:	00000000 	andeq	r0, r0, r0
		len = strlen (ptr);
    1864:	00010000 	andeq	r0, r1, r0
    1868:	00000053 	andeq	r0, r0, r3, asr r0
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    186c:	00000000 	andeq	r0, r0, r0
    1870:	70000a00 	andvc	r0, r0, r0, lsl #20
    1874:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1878:	00000000 	andeq	r0, r0, r0
    187c:	00000022 	andeq	r0, r0, r2, lsr #32
	len -= quant;
    1880:	00000000 	andeq	r0, r0, r0
    1884:	53000100 	movwpl	r0, #256	; 0x100
	...
		ufree (data);
    1890:	0070000a 	rsbseq	r0, r0, sl
		finish;
    1894:	00032432 	andeq	r2, r3, r2, lsr r4
    1898:	22000000 	andcs	r0, r0, #0
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    18ac:	00500001 	subseq	r0, r0, r1
strand (__inserial, address)
    18b0:	00000000 	andeq	r0, r0, r0
    18b4:	01000000 	mrseq	r0, (UNDEF: 0)
    18b8:	00005000 	andeq	r5, r0, r0
	...
	if (__inpline != NULL)
    18c8:	00010000 	andeq	r0, r1, r0
		finish;
    18cc:	00000053 	andeq	r0, r0, r3, asr r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	53000100 	movwpl	r0, #256	; 0x100
	...
		umwait (IM_INIT);
    18e0:	00530001 	subseq	r0, r3, r1
	...
	io (IM_READ, __cport, READ, ptr, 1);
    18f0:	01000000 	mrseq	r0, (UNDEF: 0)
    18f4:	00005200 	andeq	r5, r0, r0, lsl #4
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	00010000 	andeq	r0, r1, r0
	if (ptr == (char*) data) { // new line
    1900:	00000052 	andeq	r0, r0, r2, asr r0
    1904:	00000000 	andeq	r0, r0, r0
		if (*ptr == '\0') { // bin cmd
    1908:	52000100 	andpl	r0, r0, #0, 2
	...
		if (*ptr < 0x20)
    1914:	00520001 	subseq	r0, r2, r1
	...
	if (*ptr == '\n' || *ptr == '\r') {
    1924:	01000000 	mrseq	r0, (UNDEF: 0)
    1928:	00005000 	andeq	r5, r0, r0
	...
		finish;
    1938:	00010000 	andeq	r0, r1, r0
	if (len) {
    193c:	00000051 	andeq	r0, r0, r1, asr r0
		ptr++;
    1940:	00000000 	andeq	r0, r0, r0
    1944:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	io (IM_BIN, __cport, READ, ptr, 1);
    1950:	00510001 	subseq	r0, r1, r1
    1954:	00000000 	andeq	r0, r0, r0
    1958:	01000000 	mrseq	r0, (UNDEF: 0)
    195c:	00005100 	andeq	r5, r0, r0, lsl #2
    1960:	00000000 	andeq	r0, r0, r0
	len -= 2;
    1964:	00010000 	andeq	r0, r1, r0
	if (len > *ptr + 1) // 1 for 0x04
    1968:	00000051 	andeq	r0, r0, r1, asr r0
	...
	ptr++;
    1978:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    198c:	00540001 	subseq	r0, r4, r1
    1990:	00000000 	andeq	r0, r0, r0
	len -= quant;
    1994:	01000000 	mrseq	r0, (UNDEF: 0)
		__inpline = (char*)data;
    1998:	00005000 	andeq	r5, r0, r0
		finish;
    199c:	00000000 	andeq	r0, r0, r0
	ptr += quant;
    19a0:	00010000 	andeq	r0, r1, r0
    19a4:	00000054 	andeq	r0, r0, r4, asr r0
	...
endstrand
    19b4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    19c0:	00500001 	subseq	r0, r0, r1
    19c4:	00000000 	andeq	r0, r0, r0
    19c8:	07000000 	streq	r0, [r0, -r0]
		if (res && (d < n))
    19cc:	32007100 	andcc	r7, r0, #0, 2
    19d0:	22007224 	andcs	r7, r0, #36, 4	; 0x40000002
	...
			res [d] = (char) c;
    19dc:	00500001 	subseq	r0, r0, r1
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19ec:	01000000 	mrseq	r0, (UNDEF: 0)
    19f0:	00005000 	andeq	r5, r0, r0
    19f4:	00000000 	andeq	r0, r0, r0
				enci (10000);
    19f8:	00010000 	andeq	r0, r1, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19fc:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (c == '\\') {
    1a0c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				outc ('\\');
    1a18:	00500001 	subseq	r0, r0, r1
	...
			outc (c);
    1a28:	01000000 	mrseq	r0, (UNDEF: 0)
    1a2c:	00005100 	andeq	r5, r0, r0, lsl #2
			if (c == '\0')
    1a30:	00000000 	andeq	r0, r0, r0
    1a34:	00010000 	andeq	r0, r1, r0
			outc (c);
    1a38:	00000055 	andeq	r0, r0, r5, asr r0
				outc (val);
    1a3c:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1a40:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			c = *fm++;
    1a4c:	00550001 	subseq	r0, r5, r1
			switch (c) {
    1a50:	00000000 	andeq	r0, r0, r0
    1a54:	01000000 	mrseq	r0, (UNDEF: 0)
    1a58:	00005100 	andeq	r5, r0, r0, lsl #2
    1a5c:	00000000 	andeq	r0, r0, r0
    1a60:	00010000 	andeq	r0, r1, r0
    1a64:	00000055 	andeq	r0, r0, r5, asr r0
	...
				outc ('%');
    1a74:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
				return d;
    1a88:	00500001 	subseq	r0, r0, r1
	...
			switch (c) {
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
    1a9c:	00005000 	andeq	r5, r0, r0
				for (i = 12; ; i -= 4) {
    1aa0:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    1aa4:	00010000 	andeq	r0, r1, r0
						[ (val >> i) & 0xf ]);
    1aa8:	00000050 	andeq	r0, r0, r0, asr r0
    1aac:	00000000 	andeq	r0, r0, r0
    1ab0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				for (i = 12; ; i -= 4) {
    1ac4:	00510001 	subseq	r0, r1, r1
				val = (word) va_arg (ap, aword);
    1ac8:	00000000 	andeq	r0, r0, r0
				if (c == 'd' && (val & 0x8000) != 0) {
    1acc:	01000000 	mrseq	r0, (UNDEF: 0)
				val = (word) va_arg (ap, aword);
    1ad0:	00005700 	andeq	r5, r0, r0, lsl #14
				if (c == 'd' && (val & 0x8000) != 0) {
    1ad4:	00000000 	andeq	r0, r0, r0
    1ad8:	00010000 	andeq	r0, r1, r0
					outc ('-');
    1adc:	00000051 	andeq	r0, r0, r1, asr r0
    1ae0:	00000000 	andeq	r0, r0, r0
					val = (~val) + 1;
    1ae4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
				enci (10000);
    1af0:	00570001 	subseq	r0, r7, r1
    1af4:	00000000 	andeq	r0, r0, r0
    1af8:	01000000 	mrseq	r0, (UNDEF: 0)
    1afc:	00005100 	andeq	r5, r0, r0, lsl #2
    1b00:	00000000 	andeq	r0, r0, r0
    1b04:	00010000 	andeq	r0, r1, r0
    1b08:	00000057 	andeq	r0, r0, r7, asr r0
	...
    1b18:	91000200 	mrsls	r0, R8_usr
    1b1c:	00000078 	andeq	r0, r0, r8, ror r0
    1b20:	00000000 	andeq	r0, r0, r0
    1b24:	91000200 	mrsls	r0, R8_usr
    1b28:	00000078 	andeq	r0, r0, r8, ror r0
    1b2c:	00000000 	andeq	r0, r0, r0
    1b30:	91000200 	mrsls	r0, R8_usr
    1b34:	00000078 	andeq	r0, r0, r8, ror r0
				if (c == 'd' || c == 'u') {
    1b38:	00000000 	andeq	r0, r0, r0
    1b3c:	91000200 	mrsls	r0, R8_usr
					if (c == 'd' &&
    1b40:	00000078 	andeq	r0, r0, r8, ror r0
	...
    1b50:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
						val = (~val) + 1;
    1b5c:	00560001 	subseq	r0, r6, r1
	...
					enci (1000000000UL);
    1b6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1b70:	00005000 	andeq	r5, r0, r0
    1b74:	00000000 	andeq	r0, r0, r0
    1b78:	00010000 	andeq	r0, r1, r0
    1b7c:	00000054 	andeq	r0, r0, r4, asr r0
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1b90:	00540001 	subseq	r0, r4, r1
    1b94:	00000000 	andeq	r0, r0, r0
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
    1b9c:	00005000 	andeq	r5, r0, r0
    1ba0:	00000000 	andeq	r0, r0, r0
    1ba4:	00010000 	andeq	r0, r1, r0
				} else if (c == 'x') {
    1ba8:	00000054 	andeq	r0, r0, r4, asr r0
	...
							[ (val >> i) & 0xf ]);
    1bb8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
						outc (__pi_hex_enc_table
    1bc4:	00500001 	subseq	r0, r0, r1
						if (i == 0)
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	01000000 	mrseq	r0, (UNDEF: 0)
					for (i = 28; ; i -= 4) {
    1bd0:	00005000 	andeq	r5, r0, r0
	...
					outc ('l');
    1be0:	00010000 	andeq	r0, r1, r0
    1be4:	00000054 	andeq	r0, r0, r4, asr r0
				val = (word) va_arg (ap, aword);
    1be8:	00000000 	andeq	r0, r0, r0
				outc (val);
    1bec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
				while (*st != '\0') {
    1bf8:	00540001 	subseq	r0, r4, r1
    1bfc:	00000000 	andeq	r0, r0, r0
    1c00:	01000000 	mrseq	r0, (UNDEF: 0)
					outc (*st);
    1c04:	00005000 	andeq	r5, r0, r0
	...
		c = *fm++;
    1c14:	00010000 	andeq	r0, r1, r0
    1c18:	00000050 	andeq	r0, r0, r0, asr r0
	...
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1c28:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	fml = strlen (fm) + 17;
    1c3c:	00500001 	subseq	r0, r0, r1
	...
	if ((res = (char*) umalloc (fml)) == NULL)
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00005000 	andeq	r5, r0, r0
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	00010000 	andeq	r0, r1, r0
    1c5c:	00000055 	andeq	r0, r0, r5, asr r0
    1c60:	00000000 	andeq	r0, r0, r0
		ufree (res);
    1c64:	50000100 	andpl	r0, r0, r0, lsl #2
	...
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c70:	00550001 	subseq	r0, r5, r1
	...
		    	    case 'u': scanu (lword); break;
    1c80:	01000000 	mrseq	r0, (UNDEF: 0)
			while (isspace (*buf)) buf++;
    1c84:	00005100 	andeq	r5, r0, r0, lsl #2
    1c88:	00000000 	andeq	r0, r0, r0
	while (*fmt != '\0') {
    1c8c:	00010000 	andeq	r0, r1, r0
		if (*fmt++ != '%')
    1c90:	00000054 	andeq	r0, r0, r4, asr r0
		switch (*fmt++) {
    1c94:	00000000 	andeq	r0, r0, r0
    1c98:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1ca4:	00540001 	subseq	r0, r4, r1
	...
    1cb4:	01000000 	mrseq	r0, (UNDEF: 0)
    1cb8:	00005000 	andeq	r5, r0, r0
    1cbc:	00000000 	andeq	r0, r0, r0
    1cc0:	00010000 	andeq	r0, r1, r0
			while (isspace (*buf)) buf++;
    1cc4:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1cd4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			if (*buf != ',') {
    1ce0:	00540001 	subseq	r0, r4, r1
	...
				while (!isspace (*buf) && *buf != ',' &&
    1cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    1cf4:	00005000 	andeq	r5, r0, r0
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	00010000 	andeq	r0, r1, r0
    1d00:	00000054 	andeq	r0, r0, r4, asr r0
    1d04:	00000000 	andeq	r0, r0, r0
    1d08:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			while (isspace (*buf)) buf++;
    1d14:	00500001 	subseq	r0, r0, r1
    1d18:	00000000 	andeq	r0, r0, r0
    1d1c:	01000000 	mrseq	r0, (UNDEF: 0)
			if (*buf == ',') buf++;
    1d20:	00005400 	andeq	r5, r0, r0, lsl #8
    1d24:	00000000 	andeq	r0, r0, r0
			*sap = '\0';
    1d28:	00010000 	andeq	r0, r1, r0
			break;
    1d2c:	00000050 	andeq	r0, r0, r0, asr r0
		    case 'd': scani (word); break;
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d48:	00510001 	subseq	r0, r1, r1
	...
    1d58:	01000000 	mrseq	r0, (UNDEF: 0)
    1d5c:	00005000 	andeq	r5, r0, r0
    1d60:	00000000 	andeq	r0, r0, r0
    1d64:	00010000 	andeq	r0, r1, r0
    1d68:	00000054 	andeq	r0, r0, r4, asr r0
	...
    1d78:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d84:	00530001 	subseq	r0, r3, r1
	...
    1d94:	01000000 	mrseq	r0, (UNDEF: 0)
    1d98:	00005100 	andeq	r5, r0, r0, lsl #2
    1d9c:	00000000 	andeq	r0, r0, r0
		    case 'u': scanu (word); break;
    1da0:	00010000 	andeq	r0, r1, r0
    1da4:	00000050 	andeq	r0, r0, r0, asr r0
    1da8:	00000000 	andeq	r0, r0, r0
    1dac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dc0:	00520001 	subseq	r0, r2, r1
    1dc4:	00000000 	andeq	r0, r0, r0
    1dc8:	01000000 	mrseq	r0, (UNDEF: 0)
    1dcc:	00005100 	andeq	r5, r0, r0, lsl #2
    1dd0:	00000000 	andeq	r0, r0, r0
    1dd4:	00010000 	andeq	r0, r1, r0
    1dd8:	00000051 	andeq	r0, r0, r1, asr r0
	...
		    case 'x': scanx (word); break;
    1de8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1dfc:	00510001 	subseq	r0, r1, r1
	...
    1e0c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e10:	00005000 	andeq	r5, r0, r0
	...
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00000051 	andeq	r0, r0, r1, asr r0
    1e28:	00000000 	andeq	r0, r0, r0
    1e2c:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    1e38:	00510001 	subseq	r0, r1, r1
    1e3c:	00000000 	andeq	r0, r0, r0
    1e40:	01000000 	mrseq	r0, (UNDEF: 0)
    1e44:	00005600 	andeq	r5, r0, r0, lsl #12
    1e48:	00000000 	andeq	r0, r0, r0
    1e4c:	00010000 	andeq	r0, r1, r0
    1e50:	00000051 	andeq	r0, r0, r1, asr r0
    1e54:	00000000 	andeq	r0, r0, r0
    1e58:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			switch (*fmt++) {
    1e64:	00510001 	subseq	r0, r1, r1
    1e68:	00000000 	andeq	r0, r0, r0
    1e6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e70:	00005600 	andeq	r5, r0, r0, lsl #12
	...
		    	    case 'd': scani (lword); break;
    1e80:	00010000 	andeq	r0, r1, r0
    1e84:	00000052 	andeq	r0, r0, r2, asr r0
    1e88:	00000000 	andeq	r0, r0, r0
    1e8c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1e98:	00520001 	subseq	r0, r2, r1
    1e9c:	00000000 	andeq	r0, r0, r0
    1ea0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea4:	00005500 	andeq	r5, r0, r0, lsl #10
    1ea8:	00000000 	andeq	r0, r0, r0
    1eac:	00010000 	andeq	r0, r1, r0
    1eb0:	00000052 	andeq	r0, r0, r2, asr r0
    1eb4:	00000000 	andeq	r0, r0, r0
    1eb8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1ecc:	00500001 	subseq	r0, r0, r1
    1ed0:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    1ed4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed8:	00005000 	andeq	r5, r0, r0
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	00010000 	andeq	r0, r1, r0
    1ee4:	00000054 	andeq	r0, r0, r4, asr r0
    1ee8:	00000000 	andeq	r0, r0, r0
    1eec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f00:	00510001 	subseq	r0, r1, r1
    1f04:	00000000 	andeq	r0, r0, r0
    1f08:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1f0c:	91000015 	tstls	r0, r5, lsl r0
    1f10:	01000015 	tsteq	r0, r5, lsl r0
    1f14:	159c5200 	ldrne	r5, [ip, #512]	; 0x200
    1f18:	15b00000 	ldrne	r0, [r0, #0]!
    1f1c:	00010000 	andeq	r0, r1, r0
    1f20:	00000052 	andeq	r0, r0, r2, asr r0
    1f24:	00000000 	andeq	r0, r0, r0
    1f28:	00157800 	andseq	r7, r5, r0, lsl #16
    1f2c:	00159100 	andseq	r9, r5, r0, lsl #2
    1f30:	53000100 	movwpl	r0, #256	; 0x100
    1f34:	000015a0 	andeq	r1, r0, r0, lsr #11
    1f38:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
    1f3c:	00530001 	subseq	r0, r3, r1
	...
		    	    case 'd': scani (lword); break;
    1f4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1f50:	00005000 	andeq	r5, r0, r0
    1f54:	00000000 	andeq	r0, r0, r0
    1f58:	00010000 	andeq	r0, r1, r0
    1f5c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    	    case 'u': scanu (lword); break;
    1f6c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1f78:	00510001 	subseq	r0, r1, r1
	...
    1f88:	01000000 	mrseq	r0, (UNDEF: 0)
    1f8c:	00005200 	andeq	r5, r0, r0, lsl #4
    1f90:	00000000 	andeq	r0, r0, r0
    1f94:	00010000 	andeq	r0, r1, r0
    1f98:	00000052 	andeq	r0, r0, r2, asr r0
	...
		    	    case 'x': scanx (lword); break;
    1fa8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			nc++;
    1fbc:	00500001 	subseq	r0, r0, r1
	...
			while (isspace (*buf)) buf++;
    1fcc:	01000000 	mrseq	r0, (UNDEF: 0)
						*sap++ = *buf++;
    1fd0:	00005000 	andeq	r5, r0, r0
    1fd4:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    1fd8:	00050000 	andeq	r0, r5, r0
    1fdc:	00000003 	andeq	r0, r0, r3
	...
		return 0;
    1fe8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		    	    case 'x': scanx (lword); break;
    1ff4:	00030005 	andeq	r0, r3, r5
	...
    2008:	01000000 	mrseq	r0, (UNDEF: 0)
    200c:	00005000 	andeq	r5, r0, r0
    2010:	00000000 	andeq	r0, r0, r0
    2014:	00010000 	andeq	r0, r1, r0
    2018:	00000050 	andeq	r0, r0, r0, asr r0
    201c:	00000000 	andeq	r0, r0, r0
    2020:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    202c:	00500001 	subseq	r0, r0, r1
	...
    203c:	01000000 	mrseq	r0, (UNDEF: 0)
    2040:	00005000 	andeq	r5, r0, r0
	...
    2050:	00010000 	andeq	r0, r1, r0
    2054:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2078:	00510001 	subseq	r0, r1, r1
    207c:	00000000 	andeq	r0, r0, r0
    2080:	01000000 	mrseq	r0, (UNDEF: 0)
    2084:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    2094:	00010000 	andeq	r0, r1, r0
    2098:	00000052 	andeq	r0, r0, r2, asr r0
	...
    20a8:	53000100 	movwpl	r0, #256	; 0x100
	...
    20bc:	00540001 	subseq	r0, r4, r1
    20c0:	00000000 	andeq	r0, r0, r0
    20c4:	01000000 	mrseq	r0, (UNDEF: 0)
    20c8:	00005400 	andeq	r5, r0, r0, lsl #8
    20cc:	00000000 	andeq	r0, r0, r0
    20d0:	00010000 	andeq	r0, r1, r0
    20d4:	00000054 	andeq	r0, r0, r4, asr r0
	...
    20e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    20f0:	00500001 	subseq	r0, r0, r1
	...
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	00005100 	andeq	r5, r0, r0, lsl #2
    2108:	00000000 	andeq	r0, r0, r0
    210c:	00010000 	andeq	r0, r1, r0
    2110:	00000056 	andeq	r0, r0, r6, asr r0
    2114:	00000000 	andeq	r0, r0, r0
    2118:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    212c:	00520001 	subseq	r0, r2, r1
    2130:	00000000 	andeq	r0, r0, r0
    2134:	01000000 	mrseq	r0, (UNDEF: 0)
    2138:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2148:	00010000 	andeq	r0, r1, r0
    214c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    215c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2170:	00500001 	subseq	r0, r0, r1
    2174:	00000000 	andeq	r0, r0, r0
    2178:	01000000 	mrseq	r0, (UNDEF: 0)
    217c:	00005500 	andeq	r5, r0, r0, lsl #10
    2180:	00000000 	andeq	r0, r0, r0
    2184:	00010000 	andeq	r0, r1, r0
    2188:	00000050 	andeq	r0, r0, r0, asr r0
	...
    2198:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    21a4:	00560001 	subseq	r0, r6, r1
    21a8:	00000000 	andeq	r0, r0, r0
    21ac:	01000000 	mrseq	r0, (UNDEF: 0)
    21b0:	00005600 	andeq	r5, r0, r0, lsl #12
    21b4:	00000000 	andeq	r0, r0, r0
    21b8:	00010000 	andeq	r0, r1, r0
    21bc:	00000051 	andeq	r0, r0, r1, asr r0
	...
    21cc:	52000100 	andpl	r0, r0, #0, 2
	...
    21d8:	00520001 	subseq	r0, r2, r1
    21dc:	00000000 	andeq	r0, r0, r0
    21e0:	34000000 	strcc	r0, [r0], #-0
    21e4:	44000016 	strmi	r0, [r0], #-22	; 0xffffffea
    21e8:	01000016 	tsteq	r0, r6, lsl r0
    21ec:	00005000 	andeq	r5, r0, r0
    21f0:	00000000 	andeq	r0, r0, r0
    21f4:	16340000 	ldrtne	r0, [r4], -r0
    21f8:	16440000 	strbne	r0, [r4], -r0
    21fc:	00010000 	andeq	r0, r1, r0
    2200:	00000051 	andeq	r0, r0, r1, asr r0
    2204:	00000000 	andeq	r0, r0, r0
    2208:	00165600 	andseq	r5, r6, r0, lsl #12
    220c:	00165a00 	andseq	r5, r6, r0, lsl #20
    2210:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    221c:	0000161c 	andeq	r1, r0, ip, lsl r6
    2220:	00001627 	andeq	r1, r0, r7, lsr #12
    2224:	00500001 	subseq	r0, r0, r1
    2228:	00000000 	andeq	r0, r0, r0
    222c:	ec000000 	stc	0, cr0, [r0], {-0}
    2230:	08000015 	stmdaeq	r0, {r0, r2, r4}
    2234:	01000016 	tsteq	r0, r6, lsl r0
    2238:	16105000 	ldrne	r5, [r0], -r0
    223c:	161c0000 	ldrne	r0, [ip], -r0
    2240:	00010000 	andeq	r0, r1, r0
    2244:	00000050 	andeq	r0, r0, r0, asr r0
    2248:	00000000 	andeq	r0, r0, r0
    224c:	0015c800 	andseq	ip, r5, r0, lsl #16
    2250:	0015cc00 	andseq	ip, r5, r0, lsl #24
    2254:	50000100 	andpl	r0, r0, r0, lsl #2
    2258:	000015d0 	ldrdeq	r1, [r0], -r0
    225c:	000015ec 	andeq	r1, r0, ip, ror #11
    2260:	00500001 	subseq	r0, r0, r1
    2264:	00000000 	andeq	r0, r0, r0
    2268:	14000000 	strne	r0, [r0], #-0
    226c:	22000017 	andcs	r0, r0, #23
    2270:	01000017 	tsteq	r0, r7, lsl r0
    2274:	177e5000 	ldrbne	r5, [lr, -r0]!
    2278:	178c0000 	strne	r0, [ip, r0]
    227c:	00010000 	andeq	r0, r1, r0
    2280:	00000050 	andeq	r0, r0, r0, asr r0
    2284:	00000000 	andeq	r0, r0, r0
    2288:	00171400 	andseq	r1, r7, r0, lsl #8
    228c:	00172900 	andseq	r2, r7, r0, lsl #18
    2290:	51000100 	mrspl	r0, (UNDEF: 16)
    2294:	00001729 	andeq	r1, r0, r9, lsr #14
    2298:	00001748 	andeq	r1, r0, r8, asr #14
    229c:	48570001 	ldmdami	r7, {r0}^
    22a0:	50000017 	andpl	r0, r0, r7, lsl r0
    22a4:	01000017 	tsteq	r0, r7, lsl r0
    22a8:	17505100 	ldrbne	r5, [r0, -r0, lsl #2]
    22ac:	17760000 	ldrbne	r0, [r6, -r0]!
    22b0:	00010000 	andeq	r0, r1, r0
    22b4:	00177657 	andseq	r7, r7, r7, asr r6
    22b8:	00177900 	andseq	r7, r7, r0, lsl #18
    22bc:	51000100 	mrspl	r0, (UNDEF: 16)
    22c0:	00001779 	andeq	r1, r0, r9, ror r7
    22c4:	0000177e 	andeq	r1, r0, lr, ror r7
    22c8:	7e570001 	cdpvc	0, 5, cr0, cr7, cr1, {0}
    22cc:	8c000017 	stchi	0, cr0, [r0], {23}
    22d0:	01000017 	tsteq	r0, r7, lsl r0
    22d4:	00005100 	andeq	r5, r0, r0, lsl #2
    22d8:	00000000 	andeq	r0, r0, r0
    22dc:	17140000 	ldrne	r0, [r4, -r0]
    22e0:	17290000 	strne	r0, [r9, -r0]!
    22e4:	00010000 	andeq	r0, r1, r0
    22e8:	00172952 	andseq	r2, r7, r2, asr r9
    22ec:	00174800 	andseq	r4, r7, r0, lsl #16
    22f0:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    22f4:	00001748 	andeq	r1, r0, r8, asr #14
    22f8:	00001750 	andeq	r1, r0, r0, asr r7
    22fc:	50520001 	subspl	r0, r2, r1
    2300:	76000017 			; <UNDEFINED> instruction: 0x76000017
    2304:	01000017 	tsteq	r0, r7, lsl r0
    2308:	17765500 	ldrbne	r5, [r6, -r0, lsl #10]!
    230c:	17790000 	ldrbne	r0, [r9, -r0]!
    2310:	00010000 	andeq	r0, r1, r0
    2314:	00177952 	andseq	r7, r7, r2, asr r9
    2318:	00177e00 	andseq	r7, r7, r0, lsl #28
    231c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2320:	0000177e 	andeq	r1, r0, lr, ror r7
    2324:	0000178c 	andeq	r1, r0, ip, lsl #15
    2328:	00520001 	subseq	r0, r2, r1
    232c:	00000000 	andeq	r0, r0, r0
    2330:	2a000000 	bcs	2338 <NOROM_SetupGetTrimForAnabypassValue1+0x44>
    2334:	30000017 	andcc	r0, r0, r7, lsl r0
    2338:	01000017 	tsteq	r0, r7, lsl r0
    233c:	17305000 	ldrne	r5, [r0, -r0]!
    2340:	17330000 	ldrne	r0, [r3, -r0]!
    2344:	00010000 	andeq	r0, r1, r0
    2348:	00173451 	andseq	r3, r7, r1, asr r4
    234c:	00173800 	andseq	r3, r7, r0, lsl #16
    2350:	50000100 	andpl	r0, r0, r0, lsl #2
    2354:	00001740 	andeq	r1, r0, r0, asr #14
    2358:	00001745 	andeq	r1, r0, r5, asr #14
    235c:	50500001 	subspl	r0, r0, r1
    2360:	72000017 	andvc	r0, r0, #23
    2364:	01000017 	tsteq	r0, r7, lsl r0
    2368:	177c5400 	ldrbne	r5, [ip, -r0, lsl #8]!
    236c:	177e0000 	ldrbne	r0, [lr, -r0]!
    2370:	00010000 	andeq	r0, r1, r0
    2374:	00000050 	andeq	r0, r0, r0, asr r0
    2378:	00000000 	andeq	r0, r0, r0
    237c:	00178c00 	andseq	r8, r7, r0, lsl #24
    2380:	00179400 	andseq	r9, r7, r0, lsl #8
    2384:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2390:	00001798 	muleq	r0, r8, r7
    2394:	000017a1 	andeq	r1, r0, r1, lsr #15
    2398:	a1500001 	cmpge	r0, r1
    239c:	a6000017 			; <UNDEFINED> instruction: 0xa6000017
    23a0:	01000017 	tsteq	r0, r7, lsl r0
    23a4:	17a65600 	strne	r5, [r6, r0, lsl #12]!
    23a8:	17af0000 	strne	r0, [pc, r0]!
    23ac:	00010000 	andeq	r0, r1, r0
    23b0:	0017af50 	andseq	sl, r7, r0, asr pc
    23b4:	0017d600 	andseq	sp, r7, r0, lsl #12
    23b8:	56000100 	strpl	r0, [r0], -r0, lsl #2
    23bc:	000017d6 	ldrdeq	r1, [r0], -r6
    23c0:	000017e0 	andeq	r1, r0, r0, ror #15
    23c4:	00500001 	subseq	r0, r0, r1
    23c8:	00000000 	andeq	r0, r0, r0
    23cc:	b0000000 	andlt	r0, r0, r0
    23d0:	b4000017 	strlt	r0, [r0], #-23	; 0xffffffe9
    23d4:	01000017 	tsteq	r0, r7, lsl r0
    23d8:	17b45000 	ldrne	r5, [r4, r0]!
    23dc:	17bc0000 	ldrne	r0, [ip, r0]!
    23e0:	00010000 	andeq	r0, r1, r0
    23e4:	0017bc55 	andseq	fp, r7, r5, asr ip
    23e8:	0017c000 	andseq	ip, r7, r0
    23ec:	50000100 	andpl	r0, r0, r0, lsl #2
    23f0:	000017c0 	andeq	r1, r0, r0, asr #15
    23f4:	000017d6 	ldrdeq	r1, [r0], -r6
    23f8:	00550001 	subseq	r0, r5, r1
    23fc:	00000000 	andeq	r0, r0, r0
    2400:	e0000000 	and	r0, r0, r0
    2404:	ee000017 	mcr	0, 0, r0, cr0, cr7, {0}
    2408:	01000017 	tsteq	r0, r7, lsl r0
    240c:	18345000 	ldmdane	r4!, {ip, lr}
    2410:	18400000 	stmdane	r0, {}^	; <UNPREDICTABLE>
    2414:	00010000 	andeq	r0, r1, r0
    2418:	00000050 	andeq	r0, r0, r0, asr r0
    241c:	00000000 	andeq	r0, r0, r0
    2420:	0017f600 	andseq	pc, r7, r0, lsl #12
    2424:	0017fc00 	andseq	pc, r7, r0, lsl #24
    2428:	50000100 	andpl	r0, r0, r0, lsl #2
    242c:	000017fc 	strdeq	r1, [r0], -ip
    2430:	000017ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    2434:	00510001 	subseq	r0, r1, r1
    2438:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    243c:	01000018 	tsteq	r0, r8, lsl r0
    2440:	180c5000 	stmdane	ip, {ip, lr}
    2444:	18110000 	ldmdane	r1, {}	; <UNPREDICTABLE>
    2448:	00010000 	andeq	r0, r1, r0
    244c:	00181e50 	andseq	r1, r8, r0, asr lr
    2450:	00182000 	andseq	r2, r8, r0
    2454:	50000100 	andpl	r0, r0, r0, lsl #2
    2458:	00001820 	andeq	r1, r0, r0, lsr #16
    245c:	00001828 	andeq	r1, r0, r8, lsr #16
    2460:	00540001 	subseq	r0, r4, r1
    2464:	00000000 	andeq	r0, r0, r0
    2468:	40000000 	andmi	r0, r0, r0
    246c:	57000018 	smladpl	r0, r8, r0, r0
    2470:	01000018 	tsteq	r0, r8, lsl r0
    2474:	18585000 	ldmdane	r8, {ip, lr}^
    2478:	18640000 	stmdane	r4!, {}^	; <UNPREDICTABLE>
    247c:	00010000 	andeq	r0, r1, r0
    2480:	00189c50 	andseq	r9, r8, r0, asr ip
    2484:	0018b000 	andseq	fp, r8, r0
    2488:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2494:	00001848 	andeq	r1, r0, r8, asr #16
    2498:	00001854 	andeq	r1, r0, r4, asr r8
    249c:	54550001 	ldrbpl	r0, [r5], #-1
    24a0:	57000018 	smladpl	r0, r8, r0, r0
    24a4:	02000018 	andeq	r0, r0, #24
    24a8:	58087300 	stmdapl	r8, {r8, r9, ip, sp, lr}
    24ac:	b0000018 	andlt	r0, r0, r8, lsl r0
    24b0:	01000018 	tsteq	r0, r8, lsl r0
    24b4:	00005500 	andeq	r5, r0, r0, lsl #10
    24b8:	00000000 	andeq	r0, r0, r0
    24bc:	187e0000 	ldmdane	lr!, {}^	; <UNPREDICTABLE>
    24c0:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
    24c4:	00010000 	andeq	r0, r1, r0
    24c8:	00000050 	andeq	r0, r0, r0, asr r0
    24cc:	00000000 	andeq	r0, r0, r0
    24d0:	0018b000 	andseq	fp, r8, r0
    24d4:	0018cc00 	andseq	ip, r8, r0, lsl #24
    24d8:	50000100 	andpl	r0, r0, r0, lsl #2
    24dc:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
    24e0:	000019bb 			; <UNDEFINED> instruction: 0x000019bb
    24e4:	00500001 	subseq	r0, r0, r1
    24e8:	00000000 	andeq	r0, r0, r0
    24ec:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    24f0:	da000018 	ble	2558 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xa0>
    24f4:	01000018 	tsteq	r0, r8, lsl r0
    24f8:	18da5400 	ldmne	sl, {sl, ip, lr}^
    24fc:	18e10000 	stmiane	r1!, {}^	; <UNPREDICTABLE>
    2500:	00010000 	andeq	r0, r1, r0
    2504:	0018e150 	andseq	lr, r8, r0, asr r1
    2508:	0018e600 	andseq	lr, r8, r0, lsl #12
    250c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2510:	000018e6 	andeq	r1, r0, r6, ror #17
    2514:	000018f0 	strdeq	r1, [r0], -r0
    2518:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    251c:	ae000018 	mcrge	0, 0, r0, cr0, cr8, {0}
    2520:	01000019 	tsteq	r0, r9, lsl r0
    2524:	19b25400 	ldmibne	r2!, {sl, ip, lr}
    2528:	19b80000 	ldmibne	r8!, {}	; <UNPREDICTABLE>
    252c:	00010000 	andeq	r0, r1, r0
    2530:	0019b854 	andseq	fp, r9, r4, asr r8
    2534:	0019bb00 	andseq	fp, r9, r0, lsl #22
    2538:	72000200 	andvc	r0, r0, #0, 4
    253c:	00000008 	andeq	r0, r0, r8
    2540:	00000000 	andeq	r0, r0, r0
    2544:	00199200 	andseq	r9, r9, r0, lsl #4
    2548:	00199400 	andseq	r9, r9, r0, lsl #8
    254c:	50000100 	andpl	r0, r0, r0, lsl #2
    2550:	00001994 	muleq	r0, r4, r9
    2554:	000019ae 	andeq	r1, r0, lr, lsr #19
    2558:	00560001 	subseq	r0, r6, r1
    255c:	00000000 	andeq	r0, r0, r0
    2560:	1c000000 	stcne	0, cr0, [r0], {-0}
    2564:	3300001c 	movwcc	r0, #28
    2568:	0100001c 	tsteq	r0, ip, lsl r0
    256c:	1c335000 	ldcne	0, cr5, [r3], #-0
    2570:	1c3a0000 	ldcne	0, cr0, [sl], #-0
    2574:	00010000 	andeq	r0, r1, r0
    2578:	001c3a54 	andseq	r3, ip, r4, asr sl
    257c:	001c3c00 	andseq	r3, ip, r0, lsl #24
    2580:	50000100 	andpl	r0, r0, r0, lsl #2
    2584:	00001c3c 	andeq	r1, r0, ip, lsr ip
    2588:	00001c4c 	andeq	r1, r0, ip, asr #24
    258c:	4c540001 	mrrcmi	0, 0, r0, r4, cr1
    2590:	5b00001c 	blpl	2608 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    2594:	0100001c 	tsteq	r0, ip, lsl r0
    2598:	1c5b5000 	mrane	r5, fp, acc0
    259c:	1c6c0000 	stclne	0, cr0, [ip], #-0
    25a0:	00010000 	andeq	r0, r1, r0
    25a4:	00000054 	andeq	r0, r0, r4, asr r0
    25a8:	00000000 	andeq	r0, r0, r0
    25ac:	001c1c00 	andseq	r1, ip, r0, lsl #24
    25b0:	001c3000 	andseq	r3, ip, r0
    25b4:	51000100 	mrspl	r0, (UNDEF: 16)
    25b8:	00001c30 	andeq	r1, r0, r0, lsr ip
    25bc:	00001c33 	andeq	r1, r0, r3, lsr ip
    25c0:	33520001 	cmpcc	r2, #1
    25c4:	3a00001c 	bcc	263c <NOROM_SetupSetAonRtcSubSecInc+0x10>
    25c8:	0100001c 	tsteq	r0, ip, lsl r0
    25cc:	1c3a5600 	ldcne	6, cr5, [sl], #-0
    25d0:	1c3f0000 	ldcne	0, cr0, [pc], #-0	; 25d8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x10>
    25d4:	00010000 	andeq	r0, r1, r0
    25d8:	001c3f51 	andseq	r3, ip, r1, asr pc
    25dc:	001c6c00 	andseq	r6, ip, r0, lsl #24
    25e0:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    25ec:	00001c1c 	andeq	r1, r0, ip, lsl ip
    25f0:	00001c24 	andeq	r1, r0, r4, lsr #24
    25f4:	28520001 	ldmdacs	r2, {r0}^
    25f8:	2c00001c 	stccs	0, cr0, [r0], {28}
    25fc:	0100001c 	tsteq	r0, ip, lsl r0
    2600:	1c345200 	lfmne	f5, 4, [r4], #-0
    2604:	1c3a0000 	ldcne	0, cr0, [sl], #-0
    2608:	00010000 	andeq	r0, r1, r0
    260c:	001c4657 	andseq	r4, ip, r7, asr r6
    2610:	001c6c00 	andseq	r6, ip, r0, lsl #24
    2614:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    2620:	00001c46 	andeq	r1, r0, r6, asr #24
    2624:	00001c68 	andeq	r1, r0, r8, ror #24
    2628:	68550001 	ldmdavs	r5, {r0}^
    262c:	6c00001c 	stcvs	0, cr0, [r0], {28}
    2630:	0100001c 	tsteq	r0, ip, lsl r0
    2634:	00005800 	andeq	r5, r0, r0, lsl #16
    2638:	00000000 	andeq	r0, r0, r0
    263c:	1c600000 	stclne	0, cr0, [r0], #-0
    2640:	1c640000 	stclne	0, cr0, [r4], #-0
    2644:	00010000 	andeq	r0, r1, r0
    2648:	00000050 	andeq	r0, r0, r0, asr r0
    264c:	00000000 	andeq	r0, r0, r0
    2650:	0019ec00 	andseq	lr, r9, r0, lsl #24
    2654:	001a0600 	andseq	r0, sl, r0, lsl #12
    2658:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2664:	000019ec 	andeq	r1, r0, ip, ror #19
    2668:	00001a06 	andeq	r1, r0, r6, lsl #20
    266c:	00510001 	subseq	r0, r1, r1
    2670:	00000000 	andeq	r0, r0, r0
    2674:	ec000000 	stc	0, cr0, [r0], {-0}
    2678:	06000019 			; <UNDEFINED> instruction: 0x06000019
    267c:	0100001a 	tsteq	r0, sl, lsl r0
    2680:	1a165200 	bne	596e88 <__ccfg+0x576ee0>
    2684:	1a420000 	bne	108268c <__ccfg+0x10626e4>
    2688:	00010000 	andeq	r0, r1, r0
    268c:	001a5055 	andseq	r5, sl, r5, asr r0
    2690:	001c0e00 	andseq	r0, ip, r0, lsl #28
    2694:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    26a0:	000019ec 	andeq	r1, r0, ip, ror #19
    26a4:	000019f0 	strdeq	r1, [r0], -r0
    26a8:	f2530001 	vhadd.s16	d16, d3, d1
    26ac:	f4000019 	vst4.8	{d0-d3}, [r0 :64], r9
    26b0:	03000019 	movweq	r0, #25
    26b4:	04935300 	ldreq	r5, [r3], #768	; 0x300
    26b8:	000019f4 	strdeq	r1, [r0], -r4
    26bc:	00001a3e 	andeq	r1, r0, lr, lsr sl
    26c0:	93540003 	cmpls	r4, #3
    26c4:	001a3e04 	andseq	r3, sl, r4, lsl #28
    26c8:	001a9200 	andseq	r9, sl, r0, lsl #4
    26cc:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    26d0:	1a920493 	bne	fe483924 <_estack+0xde47e924>
    26d4:	1a9e0000 	bne	fe7826dc <_estack+0xde77d6dc>
    26d8:	00030000 	andeq	r0, r3, r0
    26dc:	a6049354 			; <UNDEFINED> instruction: 0xa6049354
    26e0:	c800001a 	stmdagt	r0, {r1, r3, r4}
    26e4:	0300001a 	movweq	r0, #26
    26e8:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    26ec:	00001acc 	andeq	r1, r0, ip, asr #21
    26f0:	00001b46 	andeq	r1, r0, r6, asr #22
    26f4:	93540003 	cmpls	r4, #3
    26f8:	001b4c04 	andseq	r4, fp, r4, lsl #24
    26fc:	001b6000 	andseq	r6, fp, r0
    2700:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2704:	1ba60493 	blne	fe983958 <_estack+0xde97e958>
    2708:	1bb20000 	blne	fec82710 <_estack+0xdec7d710>
    270c:	00030000 	andeq	r0, r3, r0
    2710:	d4049354 	strle	r9, [r4], #-852	; 0xfffffcac
    2714:	e600001b 			; <UNDEFINED> instruction: 0xe600001b
    2718:	0300001b 	movweq	r0, #27
    271c:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2720:	00001bea 	andeq	r1, r0, sl, ror #23
    2724:	00001bf2 	strdeq	r1, [r0], -r2
    2728:	93540003 	cmpls	r4, #3
    272c:	001bf604 	andseq	pc, fp, r4, lsl #12
    2730:	001c1c00 	andseq	r1, ip, r0, lsl #24
    2734:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2738:	00000493 	muleq	r0, r3, r4
    273c:	00000000 	andeq	r0, r0, r0
    2740:	1a0a0000 	bne	282748 <__ccfg+0x2627a0>
    2744:	1a140000 	bne	50274c <__ccfg+0x4e27a4>
    2748:	00010000 	andeq	r0, r1, r0
    274c:	001a1459 	andseq	r1, sl, r9, asr r4
    2750:	001a1600 	andseq	r1, sl, r0, lsl #12
    2754:	72000200 	andvc	r0, r0, #0, 4
    2758:	001a1600 	andseq	r1, sl, r0, lsl #12
    275c:	001a3a00 	andseq	r3, sl, r0, lsl #20
    2760:	59000100 	stmdbpl	r0, {r8}
    2764:	00001a42 	andeq	r1, r0, r2, asr #20
    2768:	00001a50 	andeq	r1, r0, r0, asr sl
    276c:	50590001 	subspl	r0, r9, r1
    2770:	8800001a 	stmdahi	r0, {r1, r3, r4}
    2774:	0100001a 	tsteq	r0, sl, lsl r0
    2778:	1a925800 	bne	fe498780 <_estack+0xde493780>
    277c:	1aa20000 	bne	fe882784 <_estack+0xde87d784>
    2780:	00010000 	andeq	r0, r1, r0
    2784:	001aa258 	andseq	sl, sl, r8, asr r2
    2788:	001aaa00 	andseq	sl, sl, r0, lsl #20
    278c:	72000200 	andvc	r0, r0, #0, 4
    2790:	001ac801 	andseq	ip, sl, r1, lsl #16
    2794:	001af200 	andseq	pc, sl, r0, lsl #4
    2798:	58000100 	stmdapl	r0, {r8}
    279c:	00001af6 	strdeq	r1, [r0], -r6
    27a0:	00001afa 	strdeq	r1, [r0], -sl
    27a4:	04500001 	ldrbeq	r0, [r0], #-1
    27a8:	0e00001b 	mcreq	0, 0, r0, cr0, cr11, {0}
    27ac:	0100001b 	tsteq	r0, fp, lsl r0
    27b0:	1b2e5000 	blne	b967b8 <__ccfg+0xb76810>
    27b4:	1b300000 	blne	c027bc <__ccfg+0xbe2814>
    27b8:	00010000 	andeq	r0, r1, r0
    27bc:	001b3650 	andseq	r3, fp, r0, asr r6
    27c0:	001b3800 	andseq	r3, fp, r0, lsl #16
    27c4:	58000100 	stmdapl	r0, {r8}
    27c8:	00001b38 	andeq	r1, r0, r8, lsr fp
    27cc:	00001b5b 	andeq	r1, r0, fp, asr fp
    27d0:	6a530001 	bvs	14c27dc <__ccfg+0x14a2834>
    27d4:	6e00001b 	mcrvs	0, 0, r0, cr0, cr11, {0}
    27d8:	0100001b 	tsteq	r0, fp, lsl r0
    27dc:	1b785900 	blne	1e18be4 <__ccfg+0x1df8c3c>
    27e0:	1b980000 	blne	fe6027e8 <_estack+0xde5fd7e8>
    27e4:	00010000 	andeq	r0, r1, r0
    27e8:	001b9e59 	andseq	r9, fp, r9, asr lr
    27ec:	001ba000 	andseq	sl, fp, r0
    27f0:	59000100 	stmdbpl	r0, {r8}
    27f4:	00001ba6 	andeq	r1, r0, r6, lsr #23
    27f8:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    27fc:	d4530001 	ldrble	r0, [r3], #-1
    2800:	dd00001b 	stcle	0, cr0, [r0, #-108]	; 0xffffff94
    2804:	0100001b 	tsteq	r0, fp, lsl r0
    2808:	1be65300 	blne	ff997410 <_estack+0xdf992410>
    280c:	1bfa0000 	blne	ffe82814 <_estack+0xdfe7d814>
    2810:	00010000 	andeq	r0, r1, r0
    2814:	001c0e58 	andseq	r0, ip, r8, asr lr
    2818:	001c1c00 	andseq	r1, ip, r0, lsl #24
    281c:	59000100 	stmdbpl	r0, {r8}
	...
    2828:	00001aaa 	andeq	r1, r0, sl, lsr #21
    282c:	00001ac8 	andeq	r1, r0, r8, asr #21
    2830:	00580001 	subseq	r0, r8, r1
    2834:	00000000 	andeq	r0, r0, r0
    2838:	d4000000 	strle	r0, [r0], #-0
    283c:	e800001a 	stmda	r0, {r1, r3, r4}
    2840:	0100001a 	tsteq	r0, sl, lsl r0
    2844:	1aec5900 	bne	ffb18c4c <_estack+0xdfb13c4c>
    2848:	1b1a0000 	blne	682850 <__ccfg+0x6628a8>
    284c:	00010000 	andeq	r0, r1, r0
    2850:	001b2259 	andseq	r2, fp, r9, asr r2
    2854:	001b3600 	andseq	r3, fp, r0, lsl #12
    2858:	59000100 	stmdbpl	r0, {r8}
	...
    2864:	00001af2 	strdeq	r1, [r0], -r2
    2868:	00001b24 	andeq	r1, r0, r4, lsr #22
    286c:	24580001 	ldrbcs	r0, [r8], #-1
    2870:	3000001b 	andcc	r0, r0, fp, lsl r0
    2874:	0100001b 	tsteq	r0, fp, lsl r0
    2878:	1b305300 	blne	c17480 <__ccfg+0xbf74d8>
    287c:	1b360000 	blne	d82884 <__ccfg+0xd628dc>
    2880:	00010000 	andeq	r0, r1, r0
    2884:	00000058 	andeq	r0, r0, r8, asr r0
    2888:	00000000 	andeq	r0, r0, r0
    288c:	001b6000 	andseq	r6, fp, r0
    2890:	001ba600 	andseq	sl, fp, r0, lsl #12
    2894:	5a000100 	bpl	2c9c <NOROM_OSCClockSourceGet+0x104>
	...
    28a0:	00001b66 	andeq	r1, r0, r6, ror #22
    28a4:	00001b90 	muleq	r0, r0, fp
    28a8:	90580001 	subsls	r0, r8, r1
    28ac:	a000001b 	andge	r0, r0, fp, lsl r0
    28b0:	0100001b 	tsteq	r0, fp, lsl r0
    28b4:	1ba05300 	blne	fe8174bc <_estack+0xde8124bc>
    28b8:	1ba60000 	blne	fe9828c0 <_estack+0xde97d8c0>
    28bc:	00010000 	andeq	r0, r1, r0
    28c0:	00000058 	andeq	r0, r0, r8, asr r0
    28c4:	00000000 	andeq	r0, r0, r0
    28c8:	001bb400 	andseq	fp, fp, r0, lsl #8
    28cc:	001bd400 	andseq	sp, fp, r0, lsl #8
    28d0:	58000100 	stmdapl	r0, {r8}
	...
    28dc:	00001be6 	andeq	r1, r0, r6, ror #23
    28e0:	00001bea 	andeq	r1, r0, sl, ror #23
    28e4:	00740002 	rsbseq	r0, r4, r2
    28e8:	00001bea 	andeq	r1, r0, sl, ror #23
    28ec:	00001bf2 	strdeq	r1, [r0], -r2
    28f0:	7c740002 	ldclvc	0, cr0, [r4], #-8
	...
    28fc:	00001bfe 	strdeq	r1, [r0], -lr
    2900:	00001c0c 	andeq	r1, r0, ip, lsl #24
    2904:	00580001 	subseq	r0, r8, r1
    2908:	00000000 	andeq	r0, r0, r0
    290c:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2910:	8800001c 	stmdahi	r0, {r2, r3, r4}
    2914:	0100001c 	tsteq	r0, ip, lsl r0
    2918:	1cc65000 	stclne	0, cr5, [r6], {0}
    291c:	1cd80000 	ldclne	0, cr0, [r8], {0}
    2920:	00010000 	andeq	r0, r1, r0
    2924:	001cd853 	andseq	sp, ip, r3, asr r8
    2928:	001cec00 	andseq	lr, ip, r0, lsl #24
    292c:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2930:	00001cee 	andeq	r1, r0, lr, ror #25
    2934:	00001d0a 	andeq	r1, r0, sl, lsl #26
    2938:	1c560001 	mrrcne	0, 0, r0, r6, cr1
    293c:	2800001d 	stmdacs	r0, {r0, r2, r3, r4}
    2940:	0100001d 	tsteq	r0, sp, lsl r0
    2944:	1d285600 	stcne	6, cr5, [r8, #-0]
    2948:	1d2e0000 	stcne	0, cr0, [lr, #-0]
    294c:	00010000 	andeq	r0, r1, r0
    2950:	001d3453 	andseq	r3, sp, r3, asr r4
    2954:	001d3800 	andseq	r3, sp, r0, lsl #16
    2958:	53000100 	movwpl	r0, #256	; 0x100
    295c:	00001d38 	andeq	r1, r0, r8, lsr sp
    2960:	00001d48 	andeq	r1, r0, r8, asr #26
    2964:	485e0001 	ldmdami	lr, {r0}^
    2968:	5e00001d 	mcrpl	0, 0, r0, cr0, cr13, {0}
    296c:	0100001d 	tsteq	r0, sp, lsl r0
    2970:	1d5e5300 	ldclne	3, cr5, [lr, #-0]
    2974:	1d660000 	stclne	0, cr0, [r6, #-0]
    2978:	00010000 	andeq	r0, r1, r0
    297c:	001d6c5e 	andseq	r6, sp, lr, asr ip
    2980:	001d8800 	andseq	r8, sp, r0, lsl #16
    2984:	53000100 	movwpl	r0, #256	; 0x100
    2988:	00001d88 	andeq	r1, r0, r8, lsl #27
    298c:	00001d8e 	andeq	r1, r0, lr, lsl #27
    2990:	8e5e0001 	cdphi	0, 5, cr0, cr14, cr1, {0}
    2994:	9000001d 	andls	r0, r0, sp, lsl r0
    2998:	0100001d 	tsteq	r0, sp, lsl r0
    299c:	1d9c5300 	ldcne	3, cr5, [ip]
    29a0:	1d9e0000 	ldcne	0, cr0, [lr]
    29a4:	00010000 	andeq	r0, r1, r0
    29a8:	001d9e5e 	andseq	r9, sp, lr, asr lr
    29ac:	001db200 	andseq	fp, sp, r0, lsl #4
    29b0:	53000100 	movwpl	r0, #256	; 0x100
    29b4:	00001db2 			; <UNDEFINED> instruction: 0x00001db2
    29b8:	00001dc2 	andeq	r1, r0, r2, asr #27
    29bc:	c2560001 	subsgt	r0, r6, #1
    29c0:	d600001d 			; <UNDEFINED> instruction: 0xd600001d
    29c4:	0100001d 	tsteq	r0, sp, lsl r0
    29c8:	1de45300 	stclne	3, cr5, [r4]
    29cc:	1de60000 	stclne	0, cr0, [r6]
    29d0:	00010000 	andeq	r0, r1, r0
    29d4:	001de656 	andseq	lr, sp, r6, asr r6
    29d8:	001dfe00 	andseq	pc, sp, r0, lsl #28
    29dc:	53000100 	movwpl	r0, #256	; 0x100
    29e0:	00001dfe 	strdeq	r1, [r0], -lr
    29e4:	00001e18 	andeq	r1, r0, r8, lsl lr
    29e8:	1e560001 	cdpne	0, 5, cr0, cr6, cr1, {0}
    29ec:	4000001e 	andmi	r0, r0, lr, lsl r0
    29f0:	0100001e 	tsteq	r0, lr, lsl r0
    29f4:	1e405300 	cdpne	3, 4, cr5, cr0, cr0, {0}
    29f8:	1e520000 	cdpne	0, 5, cr0, cr2, cr0, {0}
    29fc:	00010000 	andeq	r0, r1, r0
    2a00:	001e7856 	andseq	r7, lr, r6, asr r8
    2a04:	001e7c00 	andseq	r7, lr, r0, lsl #24
    2a08:	53000100 	movwpl	r0, #256	; 0x100
    2a0c:	00001e7c 	andeq	r1, r0, ip, ror lr
    2a10:	00001e8c 	andeq	r1, r0, ip, lsl #29
    2a14:	8c580001 	mrrchi	0, 0, r0, r8, cr1
    2a18:	9c00001e 	stcls	0, cr0, [r0], {30}
    2a1c:	0100001e 	tsteq	r0, lr, lsl r0
    2a20:	1e9c5300 	cdpne	3, 9, cr5, cr12, cr0, {0}
    2a24:	1ea60000 	cdpne	0, 10, cr0, cr6, cr0, {0}
    2a28:	00010000 	andeq	r0, r1, r0
    2a2c:	001eac58 	andseq	sl, lr, r8, asr ip
    2a30:	001ece00 	andseq	ip, lr, r0, lsl #28
    2a34:	53000100 	movwpl	r0, #256	; 0x100
    2a38:	00001ed4 	ldrdeq	r1, [r0], -r4
    2a3c:	00001ee4 	andeq	r1, r0, r4, ror #29
    2a40:	e4530001 	ldrb	r0, [r3], #-1
    2a44:	fe00001e 	mcr2	0, 0, r0, cr0, cr14, {0}
    2a48:	0100001e 	tsteq	r0, lr, lsl r0
    2a4c:	1f045600 	svcne	0x00045600
    2a50:	1f240000 	svcne	0x00240000
    2a54:	00010000 	andeq	r0, r1, r0
    2a58:	001f2453 	andseq	r2, pc, r3, asr r4	; <UNPREDICTABLE>
    2a5c:	001f3600 	andseq	r3, pc, r0, lsl #12
    2a60:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a64:	00001f4a 	andeq	r1, r0, sl, asr #30
    2a68:	00001f4e 	andeq	r1, r0, lr, asr #30
    2a6c:	4e580001 	cdpmi	0, 5, cr0, cr8, cr1, {0}
    2a70:	5200001f 	andpl	r0, r0, #31
    2a74:	0100001f 	tsteq	r0, pc, lsl r0
    2a78:	1f5c5300 	svcne	0x005c5300
    2a7c:	1f5e0000 	svcne	0x005e0000
    2a80:	00010000 	andeq	r0, r1, r0
    2a84:	001f5e58 	andseq	r5, pc, r8, asr lr	; <UNPREDICTABLE>
    2a88:	001f7400 	andseq	r7, pc, r0, lsl #8
    2a8c:	53000100 	movwpl	r0, #256	; 0x100
    2a90:	00001f74 	andeq	r1, r0, r4, ror pc
    2a94:	00001f84 	andeq	r1, r0, r4, lsl #31
    2a98:	84560001 	ldrbhi	r0, [r6], #-1
    2a9c:	9a00001f 	bls	2b20 <AuxAdiDdiSafeWrite.constprop.1+0x14>
    2aa0:	0100001f 	tsteq	r0, pc, lsl r0
    2aa4:	1fa45300 	svcne	0x00a45300
    2aa8:	1fa60000 	svcne	0x00a60000
    2aac:	00010000 	andeq	r0, r1, r0
    2ab0:	001fa656 	andseq	sl, pc, r6, asr r6	; <UNPREDICTABLE>
    2ab4:	001fae00 	andseq	sl, pc, r0, lsl #28
    2ab8:	53000100 	movwpl	r0, #256	; 0x100
    2abc:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
    2ac0:	00001fc2 	andeq	r1, r0, r2, asr #31
    2ac4:	c2530001 	subsgt	r0, r3, #1
    2ac8:	d000001f 	andle	r0, r0, pc, lsl r0
    2acc:	0100001f 	tsteq	r0, pc, lsl r0
    2ad0:	1fd05600 	svcne	0x00d05600
    2ad4:	1fd60000 	svcne	0x00d60000
    2ad8:	00010000 	andeq	r0, r1, r0
    2adc:	001fd658 	andseq	sp, pc, r8, asr r6	; <UNPREDICTABLE>
    2ae0:	001fe200 	andseq	lr, pc, r0, lsl #4
    2ae4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2ae8:	00001fe2 	andeq	r1, r0, r2, ror #31
    2aec:	00001fea 	andeq	r1, r0, sl, ror #31
    2af0:	ea500001 	b	1402afc <__ccfg+0x13e2b54>
    2af4:	fc00001f 	stc2	0, cr0, [r0], {31}
    2af8:	0100001f 	tsteq	r0, pc, lsl r0
    2afc:	00005300 	andeq	r5, r0, r0, lsl #6
    2b00:	00000000 	andeq	r0, r0, r0
    2b04:	1c6c0000 	stclne	0, cr0, [ip], #-0
    2b08:	1c8a0000 	stcne	0, cr0, [sl], {0}
    2b0c:	00010000 	andeq	r0, r1, r0
    2b10:	001c8a51 	andseq	r8, ip, r1, asr sl
    2b14:	001c9000 	andseq	r9, ip, r0
    2b18:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2b1c:	00001c90 	muleq	r0, r0, ip
    2b20:	00001cae 	andeq	r1, r0, lr, lsr #25
    2b24:	b4510001 	ldrblt	r0, [r1], #-1
    2b28:	fc00001c 	stc2	0, cr0, [r0], {28}
    2b2c:	0100001f 	tsteq	r0, pc, lsl r0
    2b30:	00005100 	andeq	r5, r0, r0, lsl #2
    2b34:	00000000 	andeq	r0, r0, r0
    2b38:	1c6c0000 	stclne	0, cr0, [ip], #-0
    2b3c:	1c6c0000 	stclne	0, cr0, [ip], #-0
    2b40:	00010000 	andeq	r0, r1, r0
    2b44:	001c6c52 	andseq	r6, ip, r2, asr ip
    2b48:	001c8800 	andseq	r8, ip, r0, lsl #16
    2b4c:	52000300 	andpl	r0, r0, #0, 6
    2b50:	1d2e0493 	cfstrsne	mvf0, [lr, #-588]!	; 0xfffffdb4
    2b54:	1d620000 	stclne	0, cr0, [r2, #-0]
    2b58:	00010000 	andeq	r0, r1, r0
    2b5c:	001d8852 	andseq	r8, sp, r2, asr r8
    2b60:	001d8e00 	andseq	r8, sp, r0, lsl #28
    2b64:	52000100 	andpl	r0, r0, #0, 2
    2b68:	00001d9e 	muleq	r0, lr, sp
    2b6c:	00001db8 			; <UNDEFINED> instruction: 0x00001db8
    2b70:	e6520001 	ldrb	r0, [r2], -r1
    2b74:	0e00001d 	mcreq	0, 0, r0, cr0, cr13, {0}
    2b78:	0100001e 	tsteq	r0, lr, lsl r0
    2b7c:	1e605200 	cdpne	2, 6, cr5, cr0, cr0, {0}
    2b80:	1ea00000 	cdpne	0, 10, cr0, cr0, cr0, {0}
    2b84:	00010000 	andeq	r0, r1, r0
    2b88:	001ece52 	andseq	ip, lr, r2, asr lr
    2b8c:	001ef400 	andseq	pc, lr, r0, lsl #8
    2b90:	52000100 	andpl	r0, r0, #0, 2
    2b94:	00001f44 	andeq	r1, r0, r4, asr #30
    2b98:	00001f4e 	andeq	r1, r0, lr, asr #30
    2b9c:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    2ba0:	7a00001f 	bvc	2c24 <NOROM_OSCClockSourceGet+0x8c>
    2ba4:	0100001f 	tsteq	r0, pc, lsl r0
    2ba8:	1fa65200 	svcne	0x00a65200
    2bac:	1fbc0000 	svcne	0x00bc0000
    2bb0:	00010000 	andeq	r0, r1, r0
    2bb4:	001fc252 	andseq	ip, pc, r2, asr r2	; <UNPREDICTABLE>
    2bb8:	001fd000 	andseq	sp, pc, r0
    2bbc:	52000100 	andpl	r0, r0, #0, 2
    2bc0:	00001fe2 	andeq	r1, r0, r2, ror #31
    2bc4:	00001fea 	andeq	r1, r0, sl, ror #31
    2bc8:	00520001 	subseq	r0, r2, r1
    2bcc:	00000000 	andeq	r0, r0, r0
    2bd0:	ea000000 	b	2bd8 <NOROM_OSCClockSourceGet+0x40>
    2bd4:	ec00001c 	stc	0, cr0, [r0], {28}
    2bd8:	0100001c 	tsteq	r0, ip, lsl r0
    2bdc:	1d645400 	cfstrdne	mvd5, [r4, #-0]
    2be0:	1d880000 	stcne	0, cr0, [r8]
    2be4:	00010000 	andeq	r0, r1, r0
    2be8:	001d8e54 	andseq	r8, sp, r4, asr lr
    2bec:	001d9e00 	andseq	r9, sp, r0, lsl #28
    2bf0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2bf4:	00001dba 			; <UNDEFINED> instruction: 0x00001dba
    2bf8:	00001de6 	andeq	r1, r0, r6, ror #27
    2bfc:	10540001 	subsne	r0, r4, r1
    2c00:	6000001e 	andvs	r0, r0, lr, lsl r0
    2c04:	0100001e 	tsteq	r0, lr, lsl r0
    2c08:	1ea25400 	cdpne	4, 10, cr5, cr2, cr0, {0}
    2c0c:	1ece0000 	cdpne	0, 12, cr0, cr14, cr0, {0}
    2c10:	00010000 	andeq	r0, r1, r0
    2c14:	001ef654 	andseq	pc, lr, r4, asr r6	; <UNPREDICTABLE>
    2c18:	001f4400 	andseq	r4, pc, r0, lsl #8
    2c1c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c20:	00001f4e 	andeq	r1, r0, lr, asr #30
    2c24:	00001f5e 	andeq	r1, r0, lr, asr pc
    2c28:	7c540001 	mrrcvc	0, 0, r0, r4, cr1
    2c2c:	a600001f 			; <UNDEFINED> instruction: 0xa600001f
    2c30:	0100001f 	tsteq	r0, pc, lsl r0
    2c34:	1fbe5400 	svcne	0x00be5400
    2c38:	1fc20000 	svcne	0x00c20000
    2c3c:	00010000 	andeq	r0, r1, r0
    2c40:	001fea54 	andseq	lr, pc, r4, asr sl	; <UNPREDICTABLE>
    2c44:	001ffc00 	andseq	pc, pc, r0, lsl #24
    2c48:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2c54:	00001d5e 	andeq	r1, r0, lr, asr sp
    2c58:	00001d88 	andeq	r1, r0, r8, lsl #27
    2c5c:	8e580001 	cdphi	0, 5, cr0, cr8, cr1, {0}
    2c60:	9e00001d 	mcrls	0, 0, r0, cr0, cr13, {0}
    2c64:	0100001d 	tsteq	r0, sp, lsl r0
    2c68:	00005800 	andeq	r5, r0, r0, lsl #16
    2c6c:	00000000 	andeq	r0, r0, r0
    2c70:	1e400000 	cdpne	0, 4, cr0, cr0, cr0, {0}
    2c74:	1e520000 	cdpne	0, 5, cr0, cr2, cr0, {0}
    2c78:	00010000 	andeq	r0, r1, r0
    2c7c:	001e5259 	andseq	r5, lr, r9, asr r2
    2c80:	001e5a00 	andseq	r5, lr, r0, lsl #20
    2c84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2c90:	00001e9c 	muleq	r0, ip, lr
    2c94:	00001ec6 	andeq	r1, r0, r6, asr #29
    2c98:	4e500001 	cdpmi	0, 5, cr0, cr0, cr1, {0}
    2c9c:	5e00001f 	mcrpl	0, 0, r0, cr0, cr15, {0}
    2ca0:	0100001f 	tsteq	r0, pc, lsl r0
    2ca4:	00005000 	andeq	r5, r0, r0
    2ca8:	00000000 	andeq	r0, r0, r0
    2cac:	1f240000 	svcne	0x00240000
    2cb0:	1f360000 	svcne	0x00360000
    2cb4:	00010000 	andeq	r0, r1, r0
    2cb8:	001f3659 	andseq	r3, pc, r9, asr r6	; <UNPREDICTABLE>
    2cbc:	001f3e00 	andseq	r3, pc, r0, lsl #28
    2cc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2ccc:	00001fb2 			; <UNDEFINED> instruction: 0x00001fb2
    2cd0:	00001fc2 	andeq	r1, r0, r2, asr #31
    2cd4:	00500001 	subseq	r0, r0, r1
    2cd8:	00000000 	andeq	r0, r0, r0
    2cdc:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
    2ce0:	0a00001c 	beq	2d58 <NOROM_OSCClockSourceGet+0x1c0>
    2ce4:	0100001d 	tsteq	r0, sp, lsl r0
    2ce8:	1fd45e00 	svcne	0x00d45e00
    2cec:	1fd60000 	svcne	0x00d60000
    2cf0:	00010000 	andeq	r0, r1, r0
    2cf4:	0000005e 	andeq	r0, r0, lr, asr r0
    2cf8:	00000000 	andeq	r0, r0, r0
    2cfc:	00200000 	eoreq	r0, r0, r0
    2d00:	00201200 	eoreq	r1, r0, r0, lsl #4
    2d04:	70000700 	andvc	r0, r0, r0, lsl #14
    2d08:	3f243f00 	svccc	0x00243f00
    2d0c:	00009f26 	andeq	r9, r0, r6, lsr #30
    2d10:	00000000 	andeq	r0, r0, r0
    2d14:	20080000 	andcs	r0, r8, r0
    2d18:	20100000 	andscs	r0, r0, r0
    2d1c:	000d0000 	andeq	r0, sp, r0
    2d20:	717a8072 	cmnvc	sl, r2, ror r0
    2d24:	48244800 	stmdami	r4!, {fp, lr}
    2d28:	26341e26 	ldrtcs	r1, [r4], -r6, lsr #28
    2d2c:	0020109f 	mlaeq	r0, pc, r0, r1	; <UNPREDICTABLE>
    2d30:	00202c00 	eoreq	r2, r0, r0, lsl #24
    2d34:	71000c00 	tstvc	r0, r0, lsl #24
    2d38:	48244800 	stmdami	r4!, {fp, lr}
    2d3c:	1e007226 	cdpne	2, 0, cr7, cr0, cr6, {1}
    2d40:	009f2634 	addseq	r2, pc, r4, lsr r6	; <UNPREDICTABLE>
	...
    2d50:	01000000 	mrseq	r0, (UNDEF: 0)
    2d54:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    2d64:	00010000 	andeq	r0, r1, r0
    2d68:	00000050 	andeq	r0, r0, r0, asr r0
    2d6c:	00000000 	andeq	r0, r0, r0
    2d70:	00205400 	eoreq	r5, r0, r0, lsl #8
    2d74:	00209200 	eoreq	r9, r0, r0, lsl #4
    2d78:	50000100 	andpl	r0, r0, r0, lsl #2
    2d7c:	00002092 	muleq	r0, r2, r0
    2d80:	000020f4 	strdeq	r2, [r0], -r4
    2d84:	f4550001 			; <UNDEFINED> instruction: 0xf4550001
    2d88:	28000020 	stmdacs	r0, {r5}
    2d8c:	04000021 	streq	r0, [r0], #-33	; 0xffffffdf
    2d90:	5001f300 	andpl	pc, r1, r0, lsl #6
    2d94:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2d98:	00000000 	andeq	r0, r0, r0
    2d9c:	00209000 	eoreq	r9, r0, r0
    2da0:	0020f400 	eoreq	pc, r0, r0, lsl #8
    2da4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2db0:	000020a6 	andeq	r2, r0, r6, lsr #1
    2db4:	000020a8 	andeq	r2, r0, r8, lsr #1
    2db8:	00730007 	rsbseq	r0, r3, r7
    2dbc:	1affff0a 	bne	29ec <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x28>
    2dc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2dc4:	00000000 	andeq	r0, r0, r0
    2dc8:	0020b600 	eoreq	fp, r0, r0, lsl #12
    2dcc:	0020d000 	eoreq	sp, r0, r0
    2dd0:	53000100 	movwpl	r0, #256	; 0x100
	...
    2ddc:	000020ba 	strheq	r2, [r0], -sl
    2de0:	000020c6 	andeq	r2, r0, r6, asr #1
    2de4:	c6520001 	ldrbgt	r0, [r2], -r1
    2de8:	ca000020 	bgt	2e70 <__exidx_end+0x78>
    2dec:	03000020 	movweq	r0, #32
    2df0:	9f067100 	svcls	0x00067100
    2df4:	000020ca 	andeq	r2, r0, sl, asr #1
    2df8:	000020d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2dfc:	00520001 	subseq	r0, r2, r1
    2e00:	00000000 	andeq	r0, r0, r0
    2e04:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    2e08:	a8000021 	stmdage	r0, {r0, r5}
    2e0c:	01000021 	tsteq	r0, r1, lsr #32
    2e10:	00005400 	andeq	r5, r0, r0, lsl #8
    2e14:	00000000 	andeq	r0, r0, r0
    2e18:	21940000 	orrscs	r0, r4, r0
    2e1c:	219e0000 	orrscs	r0, lr, r0
    2e20:	00010000 	andeq	r0, r1, r0
    2e24:	00000053 	andeq	r0, r0, r3, asr r0
    2e28:	00000000 	andeq	r0, r0, r0
    2e2c:	0021cc00 	eoreq	ip, r1, r0, lsl #24
    2e30:	0021f200 	eoreq	pc, r1, r0, lsl #4
    2e34:	50000100 	andpl	r0, r0, r0, lsl #2
    2e38:	000021f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    2e3c:	00002248 	andeq	r2, r0, r8, asr #4
    2e40:	01f30004 	mvnseq	r0, r4
    2e44:	00009f50 	andeq	r9, r0, r0, asr pc
    2e48:	00000000 	andeq	r0, r0, r0
    2e4c:	21f40000 	mvnscs	r0, r0
    2e50:	22280000 	eorcs	r0, r8, #0
    2e54:	00010000 	andeq	r0, r1, r0
    2e58:	00000053 	andeq	r0, r0, r3, asr r0
    2e5c:	00000000 	andeq	r0, r0, r0
    2e60:	0021f800 	eoreq	pc, r1, r0, lsl #16
    2e64:	00220600 	eoreq	r0, r2, r0, lsl #12
    2e68:	51000100 	mrspl	r0, (UNDEF: 16)
    2e6c:	00002206 	andeq	r2, r0, r6, lsl #4
    2e70:	00002208 	andeq	r2, r0, r8, lsl #4
    2e74:	00720006 	rsbseq	r0, r2, r6
    2e78:	9f1c0073 	svcls	0x001c0073
    2e7c:	00002208 	andeq	r2, r0, r8, lsl #4
    2e80:	0000220e 	andeq	r2, r0, lr, lsl #4
    2e84:	00510001 	subseq	r0, r1, r1
    2e88:	00000000 	andeq	r0, r0, r0
    2e8c:	e4000000 	str	r0, [r0], #-0
    2e90:	f6000021 			; <UNDEFINED> instruction: 0xf6000021
    2e94:	01000021 	tsteq	r0, r1, lsr #32
    2e98:	00005300 	andeq	r5, r0, r0, lsl #6
    2e9c:	00000000 	andeq	r0, r0, r0
    2ea0:	22480000 	subcs	r0, r8, #0
    2ea4:	226b0000 	rsbcs	r0, fp, #0
    2ea8:	00010000 	andeq	r0, r1, r0
    2eac:	00226b50 	eoreq	r6, r2, r0, asr fp
    2eb0:	00227600 	eoreq	r7, r2, r0, lsl #12
    2eb4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2eb8:	00002276 	andeq	r2, r0, r6, ror r2
    2ebc:	0000227e 	andeq	r2, r0, lr, ror r2
    2ec0:	7e500001 	cdpvc	0, 5, cr0, cr0, cr1, {0}
    2ec4:	ca000022 	bgt	2f54 <__exidx_end+0x15c>
    2ec8:	01000022 	tsteq	r0, r2, lsr #32
    2ecc:	00005400 	andeq	r5, r0, r0, lsl #8
    2ed0:	00000000 	andeq	r0, r0, r0
    2ed4:	22840000 	addcs	r0, r4, #0
    2ed8:	22880000 	addcs	r0, r8, #0
    2edc:	00010000 	andeq	r0, r1, r0
    2ee0:	00228a53 	eoreq	r8, r2, r3, asr sl
    2ee4:	00229800 	eoreq	r9, r2, r0, lsl #16
    2ee8:	53000100 	movwpl	r0, #256	; 0x100
    2eec:	0000229a 	muleq	r0, sl, r2
    2ef0:	000022a2 	andeq	r2, r0, r2, lsr #5
    2ef4:	00530001 	subseq	r0, r3, r1
    2ef8:	00000000 	andeq	r0, r0, r0
    2efc:	84000000 	strhi	r0, [r0], #-0
    2f00:	b8000022 	stmdalt	r0, {r1, r5}
    2f04:	05000022 	streq	r0, [r0, #-34]	; 0xffffffde
    2f08:	4c007400 	cfstrsmi	mvf7, [r0], {-0}
    2f0c:	22b89f26 	adcscs	r9, r8, #38, 30	; 0x98
    2f10:	22f40000 	rscscs	r0, r4, #0
    2f14:	00060000 	andeq	r0, r6, r0
    2f18:	4c5001f3 	ldfmie	f0, [r0], {243}	; 0xf3
    2f1c:	00009f26 	andeq	r9, r0, r6, lsr #30
    2f20:	00000000 	andeq	r0, r0, r0
    2f24:	227e0000 	rsbscs	r0, lr, #0
    2f28:	22880000 	addcs	r0, r8, #0
    2f2c:	00010000 	andeq	r0, r1, r0
    2f30:	00000053 	andeq	r0, r0, r3, asr r0
    2f34:	00000000 	andeq	r0, r0, r0
    2f38:	0022f400 	eoreq	pc, r2, r0, lsl #8
    2f3c:	00230800 	eoreq	r0, r3, r0, lsl #16
    2f40:	50000100 	andpl	r0, r0, r0, lsl #2
    2f44:	00002308 	andeq	r2, r0, r8, lsl #6
    2f48:	00002350 	andeq	r2, r0, r0, asr r3
    2f4c:	01f30004 	mvnseq	r0, r4
    2f50:	00009f50 	andeq	r9, r0, r0, asr pc
    2f54:	00000000 	andeq	r0, r0, r0
    2f58:	22fa0000 	rscscs	r0, sl, #0
    2f5c:	23020000 	movwcs	r0, #8192	; 0x2000
    2f60:	00010000 	andeq	r0, r1, r0
    2f64:	00000053 	andeq	r0, r0, r3, asr r0
    2f68:	00000000 	andeq	r0, r0, r0
    2f6c:	0022fe00 	eoreq	pc, r2, r0, lsl #28
    2f70:	00231000 	eoreq	r1, r3, r0
    2f74:	52000100 	andpl	r0, r0, #0, 2
    2f78:	00002310 	andeq	r2, r0, r0, lsl r3
    2f7c:	00002312 	andeq	r2, r0, r2, lsl r3
    2f80:	00720005 	rsbseq	r0, r2, r5
    2f84:	129f2531 	addsne	r2, pc, #205520896	; 0xc400000
    2f88:	18000023 	stmdane	r0, {r0, r1, r5}
    2f8c:	01000023 	tsteq	r0, r3, lsr #32
    2f90:	231c5200 	tstcs	ip, #0, 4
    2f94:	232e0000 			; <UNDEFINED> instruction: 0x232e0000
    2f98:	00010000 	andeq	r0, r1, r0
    2f9c:	00233252 	eoreq	r3, r3, r2, asr r2
    2fa0:	00233c00 	eoreq	r3, r3, r0, lsl #24
    2fa4:	52000100 	andpl	r0, r0, #0, 2
    2fa8:	0000233e 	andeq	r2, r0, lr, lsr r3
    2fac:	00002350 	andeq	r2, r0, r0, asr r3
    2fb0:	00520001 	subseq	r0, r2, r1
    2fb4:	00000000 	andeq	r0, r0, r0
    2fb8:	02000000 	andeq	r0, r0, #0
    2fbc:	0c000023 	stceq	0, cr0, [r0], {35}	; 0x23
    2fc0:	01000023 	tsteq	r0, r3, lsr #32
    2fc4:	230c5300 	movwcs	r5, #49920	; 0xc300
    2fc8:	230e0000 	movwcs	r0, #57344	; 0xe000
    2fcc:	00050000 	andeq	r0, r5, r0
    2fd0:	25310073 	ldrcs	r0, [r1, #-115]!	; 0xffffff8d
    2fd4:	00230e9f 	mlaeq	r3, pc, lr, r0	; <UNPREDICTABLE>
    2fd8:	00231000 	eoreq	r1, r3, r0
    2fdc:	53000100 	movwpl	r0, #256	; 0x100
    2fe0:	00002310 	andeq	r2, r0, r0, lsl r3
    2fe4:	0000231c 	andeq	r2, r0, ip, lsl r3
    2fe8:	ff0a0004 			; <UNDEFINED> instruction: 0xff0a0004
    2fec:	231c9fff 	tstcs	ip, #1020	; 0x3fc
    2ff0:	23220000 			; <UNDEFINED> instruction: 0x23220000
    2ff4:	00010000 	andeq	r0, r1, r0
    2ff8:	00232653 	eoreq	r2, r3, r3, asr r6
    2ffc:	00232c00 	eoreq	r2, r3, r0, lsl #24
    3000:	53000100 	movwpl	r0, #256	; 0x100
    3004:	0000232c 	andeq	r2, r0, ip, lsr #6
    3008:	0000233e 	andeq	r2, r0, lr, lsr r3
    300c:	9f310002 	svcls	0x00310002
    3010:	0000233e 	andeq	r2, r0, lr, lsr r3
    3014:	00002350 	andeq	r2, r0, r0, asr r3
    3018:	00530001 	subseq	r0, r3, r1
    301c:	00000000 	andeq	r0, r0, r0
    3020:	02000000 	andeq	r0, r0, #0
    3024:	08000023 	stmdaeq	r0, {r0, r1, r5}
    3028:	02000023 	andeq	r0, r0, #35	; 0x23
    302c:	089f3000 	ldmeq	pc, {ip, sp}	; <UNPREDICTABLE>
    3030:	44000023 	strmi	r0, [r0], #-35	; 0xffffffdd
    3034:	01000023 	tsteq	r0, r3, lsr #32
    3038:	00005000 	andeq	r5, r0, r0
    303c:	00000000 	andeq	r0, r0, r0
    3040:	23440000 	movtcs	r0, #16384	; 0x4000
    3044:	23480000 	movtcs	r0, #32768	; 0x8000
    3048:	00080000 	andeq	r0, r8, r0
    304c:	24400072 	strbcs	r0, [r0], #-114	; 0xffffff8e
    3050:	9f210073 	svcls	0x00210073
    3054:	00002348 	andeq	r2, r0, r8, asr #6
    3058:	00002350 	andeq	r2, r0, r0, asr r3
    305c:	00500001 	subseq	r0, r0, r1
    3060:	00000000 	andeq	r0, r0, r0
    3064:	5a000000 	bpl	306c <__exidx_end+0x274>
    3068:	5e000023 	cdppl	0, 0, cr0, cr0, cr3, {1}
    306c:	0a000023 	beq	3100 <__exidx_end+0x308>
    3070:	33007000 	movwcc	r7, #0
    3074:	7324381a 			; <UNDEFINED> instruction: 0x7324381a
    3078:	629f2100 	addsvs	r2, pc, #0, 2
    307c:	68000023 	stmdavs	r0, {r0, r1, r5}
    3080:	01000023 	tsteq	r0, r3, lsr #32
    3084:	00005000 	andeq	r5, r0, r0
	...
    3094:	00070000 	andeq	r0, r7, r0
    3098:	ff0a0070 			; <UNDEFINED> instruction: 0xff0a0070
    309c:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    30a0:	00000000 	andeq	r0, r0, r0
    30a4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    30a8:	70000023 	andvc	r0, r0, r3, lsr #32
    30ac:	0f000023 	svceq	0x00000023
    30b0:	08007000 	stmdaeq	r0, {ip, sp, lr}
    30b4:	00701afc 	ldrshteq	r1, [r0], #-172	; 0xffffff54
    30b8:	f3f88011 	vshr.u32	d24, d1, #8
    30bc:	9f211a67 	svcls	0x00211a67
	...
    30c8:	0000236c 	andeq	r2, r0, ip, ror #6
    30cc:	00002370 	andeq	r2, r0, r0, ror r3
    30d0:	00500001 	subseq	r0, r0, r1
    30d4:	00000000 	andeq	r0, r0, r0
    30d8:	7c000000 	stcvc	0, cr0, [r0], {-0}
    30dc:	80000023 	andhi	r0, r0, r3, lsr #32
    30e0:	0f000023 	svceq	0x00000023
    30e4:	08007000 	stmdaeq	r0, {ip, sp, lr}
    30e8:	00701a3f 	rsbseq	r1, r0, pc, lsr sl
    30ec:	fcffc00c 	ldc2l	0, cr12, [pc], #48	; 3124 <__exidx_end+0x32c>
    30f0:	9f211a00 	svcls	0x00211a00
	...
    30fc:	0000237c 	andeq	r2, r0, ip, ror r3
    3100:	00002380 	andeq	r2, r0, r0, lsl #7
    3104:	00500001 	subseq	r0, r0, r1
    3108:	00000000 	andeq	r0, r0, r0
    310c:	8c000000 	stchi	0, cr0, [r0], {-0}
    3110:	e2000023 	and	r0, r0, #35	; 0x23
    3114:	01000023 	tsteq	r0, r3, lsr #32
    3118:	23e25000 	mvncs	r5, #0
    311c:	23f00000 	mvnscs	r0, #0
    3120:	00040000 	andeq	r0, r4, r0
    3124:	9f5001f3 	svcls	0x005001f3
	...
    3130:	000023cc 	andeq	r2, r0, ip, asr #7
    3134:	000023d4 	ldrdeq	r2, [r0], -r4
    3138:	00740017 	rsbseq	r0, r4, r7, lsl r0
    313c:	1aff000a 	bne	fffc316c <_estack+0xdffbe16c>
    3140:	f0080074 			; <UNDEFINED> instruction: 0xf0080074
    3144:	0072211a 	rsbseq	r2, r2, sl, lsl r1
    3148:	73212444 			; <UNDEFINED> instruction: 0x73212444
    314c:	21244000 			; <UNDEFINED> instruction: 0x21244000
    3150:	0023d89f 	mlaeq	r3, pc, r8, sp	; <UNPREDICTABLE>
    3154:	0023f000 	eoreq	pc, r3, r0
    3158:	53000100 	movwpl	r0, #256	; 0x100
	...
    3164:	00002394 	muleq	r0, r4, r3
    3168:	000023de 	ldrdeq	r2, [r0], -lr
    316c:	00540001 	subseq	r0, r4, r1
    3170:	00000000 	andeq	r0, r0, r0
    3174:	9a000000 	bls	317c <__exidx_end+0x384>
    3178:	ae000023 	cdpge	0, 0, cr0, cr0, cr3, {1}
    317c:	01000023 	tsteq	r0, r3, lsr #32
    3180:	23ae5200 			; <UNDEFINED> instruction: 0x23ae5200
    3184:	23ba0000 			; <UNDEFINED> instruction: 0x23ba0000
    3188:	00060000 	andeq	r0, r6, r0
    318c:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    3190:	23cc9f24 	biccs	r9, ip, #36, 30	; 0x90
    3194:	23d40000 	bicscs	r0, r4, #0
    3198:	00010000 	andeq	r0, r1, r0
    319c:	00000052 	andeq	r0, r0, r2, asr r0
    31a0:	00000000 	andeq	r0, r0, r0
    31a4:	0023a200 	eoreq	sl, r3, r0, lsl #4
    31a8:	0023c000 	eoreq	ip, r3, r0
    31ac:	53000100 	movwpl	r0, #256	; 0x100
    31b0:	000023c0 	andeq	r2, r0, r0, asr #7
    31b4:	000023cc 	andeq	r2, r0, ip, asr #7
    31b8:	00740006 	rsbseq	r0, r4, r6
    31bc:	9f24f009 	svcls	0x0024f009
    31c0:	000023cc 	andeq	r2, r0, ip, asr #7
    31c4:	000023d8 	ldrdeq	r2, [r0], -r8
    31c8:	00530001 	subseq	r0, r3, r1
    31cc:	00000000 	andeq	r0, r0, r0
    31d0:	ac000000 	stcge	0, cr0, [r0], {-0}
    31d4:	ae000023 	cdpge	0, 0, cr0, cr0, cr3, {1}
    31d8:	06000023 	streq	r0, [r0], -r3, lsr #32
    31dc:	72007600 	andvc	r7, r0, #0, 12
    31e0:	ae9f2200 	cdpge	2, 9, cr2, cr15, cr0, {0}
    31e4:	b6000023 	strlt	r0, [r0], -r3, lsr #32
    31e8:	01000023 	tsteq	r0, r3, lsr #32
    31ec:	23b65200 			; <UNDEFINED> instruction: 0x23b65200
    31f0:	23b80000 			; <UNDEFINED> instruction: 0x23b80000
    31f4:	00090000 	andeq	r0, r9, r0
    31f8:	ec090074 	stc	0, cr0, [r9], {116}	; 0x74
    31fc:	22007624 	andcs	r7, r0, #36, 12	; 0x2400000
    3200:	0023b89f 	mlaeq	r3, pc, r8, fp	; <UNPREDICTABLE>
    3204:	0023ba00 	eoreq	fp, r3, r0, lsl #20
    3208:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    320c:	000023be 			; <UNDEFINED> instruction: 0x000023be
    3210:	000023c0 	andeq	r2, r0, r0, asr #7
    3214:	00710006 	rsbseq	r0, r1, r6
    3218:	9f220073 	svcls	0x00220073
    321c:	000023c0 	andeq	r2, r0, r0, asr #7
    3220:	000023c8 	andeq	r2, r0, r8, asr #7
    3224:	c8530001 	ldmdagt	r3, {r0}^
    3228:	ca000023 	bgt	32bc <__exidx_end+0x4c4>
    322c:	09000023 	stmdbeq	r0, {r0, r1, r5}
    3230:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3234:	007124f0 	ldrshteq	r2, [r1], #-64	; 0xffffffc0
    3238:	23ca9f22 	biccs	r9, sl, #34, 30	; 0x88
    323c:	23cc0000 	biccs	r0, ip, #0
    3240:	00020000 	andeq	r0, r2, r0
    3244:	00009f30 	andeq	r9, r0, r0, lsr pc
    3248:	00000000 	andeq	r0, r0, r0
    324c:	23f00000 	mvnscs	r0, #0
    3250:	23f80000 	mvnscs	r0, #0
    3254:	00010000 	andeq	r0, r1, r0
    3258:	0023f850 	eoreq	pc, r3, r0, asr r8	; <UNPREDICTABLE>
    325c:	00240400 	eoreq	r0, r4, r0, lsl #8
    3260:	f3000400 	vshl.u8	d0, d0, d0
    3264:	009f5001 	addseq	r5, pc, r1
    3268:	00000000 	andeq	r0, r0, r0
    326c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    3270:	fe000023 	cdp2	0, 0, cr0, cr0, cr3, {1}
    3274:	02000023 	andeq	r0, r0, #35	; 0x23
    3278:	fe9f3000 	cdp2	0, 9, cr3, cr15, cr0, {0}
    327c:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3280:	01000024 	tsteq	r0, r4, lsr #32
    3284:	00005000 	andeq	r5, r0, r0
    3288:	00000000 	andeq	r0, r0, r0
    328c:	23f20000 	mvnscs	r0, #0
    3290:	23f80000 	mvnscs	r0, #0
    3294:	00010000 	andeq	r0, r1, r0
    3298:	0023f850 	eoreq	pc, r3, r0, asr r8	; <UNPREDICTABLE>
    329c:	00240400 	eoreq	r0, r4, r0, lsl #8
    32a0:	f3000400 	vshl.u8	d0, d0, d0
    32a4:	009f5001 	addseq	r5, pc, r1
    32a8:	00000000 	andeq	r0, r0, r0
    32ac:	fc000000 	stc2	0, cr0, [r0], {-0}
    32b0:	fe000023 	cdp2	0, 0, cr0, cr0, cr3, {1}
    32b4:	01000023 	tsteq	r0, r3, lsr #32
    32b8:	00005000 	andeq	r5, r0, r0
    32bc:	00000000 	andeq	r0, r0, r0
    32c0:	24040000 	strcs	r0, [r4], #-0
    32c4:	240c0000 	strcs	r0, [ip], #-0
    32c8:	00010000 	andeq	r0, r1, r0
    32cc:	00240c50 	eoreq	r0, r4, r0, asr ip
    32d0:	00241800 	eoreq	r1, r4, r0, lsl #16
    32d4:	f3000400 	vshl.u8	d0, d0, d0
    32d8:	009f5001 	addseq	r5, pc, r1
    32dc:	00000000 	andeq	r0, r0, r0
    32e0:	04000000 	streq	r0, [r0], #-0
    32e4:	12000024 	andne	r0, r0, #36	; 0x24
    32e8:	02000024 	andeq	r0, r0, #36	; 0x24
    32ec:	129f3100 	addsne	r3, pc, #0, 2
    32f0:	18000024 	stmdane	r0, {r2, r5}
    32f4:	01000024 	tsteq	r0, r4, lsr #32
    32f8:	00005000 	andeq	r5, r0, r0
    32fc:	00000000 	andeq	r0, r0, r0
    3300:	24060000 	strcs	r0, [r6], #-0
    3304:	240c0000 	strcs	r0, [ip], #-0
    3308:	00010000 	andeq	r0, r1, r0
    330c:	00240c50 	eoreq	r0, r4, r0, asr ip
    3310:	00241800 	eoreq	r1, r4, r0, lsl #16
    3314:	f3000400 	vshl.u8	d0, d0, d0
    3318:	009f5001 	addseq	r5, pc, r1
    331c:	00000000 	andeq	r0, r0, r0
    3320:	10000000 	andne	r0, r0, r0
    3324:	12000024 	andne	r0, r0, #36	; 0x24
    3328:	01000024 	tsteq	r0, r4, lsr #32
    332c:	00005000 	andeq	r5, r0, r0
    3330:	00000000 	andeq	r0, r0, r0
    3334:	24180000 	ldrcs	r0, [r8], #-0
    3338:	24200000 	strtcs	r0, [r0], #-0
    333c:	00010000 	andeq	r0, r1, r0
    3340:	00242050 	eoreq	r2, r4, r0, asr r0
    3344:	00242c00 	eoreq	r2, r4, r0, lsl #24
    3348:	f3000400 	vshl.u8	d0, d0, d0
    334c:	009f5001 	addseq	r5, pc, r1
    3350:	00000000 	andeq	r0, r0, r0
    3354:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3358:	26000024 	strcs	r0, [r0], -r4, lsr #32
    335c:	02000024 	andeq	r0, r0, #36	; 0x24
    3360:	269f3100 	ldrcs	r3, [pc], r0, lsl #2
    3364:	2c000024 	stccs	0, cr0, [r0], {36}	; 0x24
    3368:	01000024 	tsteq	r0, r4, lsr #32
    336c:	00005000 	andeq	r5, r0, r0
    3370:	00000000 	andeq	r0, r0, r0
    3374:	241a0000 	ldrcs	r0, [sl], #-0
    3378:	24200000 	strtcs	r0, [r0], #-0
    337c:	00010000 	andeq	r0, r1, r0
    3380:	00242050 	eoreq	r2, r4, r0, asr r0
    3384:	00242c00 	eoreq	r2, r4, r0, lsl #24
    3388:	f3000400 	vshl.u8	d0, d0, d0
    338c:	009f5001 	addseq	r5, pc, r1
    3390:	00000000 	andeq	r0, r0, r0
    3394:	24000000 	strcs	r0, [r0], #-0
    3398:	26000024 	strcs	r0, [r0], -r4, lsr #32
    339c:	01000024 	tsteq	r0, r4, lsr #32
    33a0:	00005000 	andeq	r5, r0, r0
    33a4:	00000000 	andeq	r0, r0, r0
    33a8:	242c0000 	strtcs	r0, [ip], #-0
    33ac:	24380000 	ldrtcs	r0, [r8], #-0
    33b0:	00010000 	andeq	r0, r1, r0
    33b4:	00243850 	eoreq	r3, r4, r0, asr r8
    33b8:	00245400 	eoreq	r5, r4, r0, lsl #8
    33bc:	f3000400 	vshl.u8	d0, d0, d0
    33c0:	009f5001 	addseq	r5, pc, r1
    33c4:	00000000 	andeq	r0, r0, r0
    33c8:	2c000000 	stccs	0, cr0, [r0], {-0}
    33cc:	4e000024 	cdpmi	0, 0, cr0, cr0, cr4, {1}
    33d0:	02000024 	andeq	r0, r0, #36	; 0x24
    33d4:	4e9f3000 	cdpmi	0, 9, cr3, cr15, cr0, {0}
    33d8:	54000024 	strpl	r0, [r0], #-36	; 0xffffffdc
    33dc:	01000024 	tsteq	r0, r4, lsr #32
    33e0:	00005000 	andeq	r5, r0, r0
    33e4:	00000000 	andeq	r0, r0, r0
    33e8:	242e0000 	strtcs	r0, [lr], #-0
    33ec:	24380000 	ldrtcs	r0, [r8], #-0
    33f0:	00010000 	andeq	r0, r1, r0
    33f4:	00243850 	eoreq	r3, r4, r0, asr r8
    33f8:	00245400 	eoreq	r5, r4, r0, lsl #8
    33fc:	f3000400 	vshl.u8	d0, d0, d0
    3400:	009f5001 	addseq	r5, pc, r1
    3404:	00000000 	andeq	r0, r0, r0
    3408:	40000000 	andmi	r0, r0, r0
    340c:	48000024 	stmdami	r0, {r2, r5}
    3410:	10000024 	andne	r0, r0, r4, lsr #32
    3414:	4c007300 	stcmi	3, cr7, [r0], {-0}
    3418:	481a2446 	ldmdami	sl, {r1, r2, r6, sl, sp}
    341c:	72243225 	eorvc	r3, r4, #1342177282	; 0x50000002
    3420:	21243800 			; <UNDEFINED> instruction: 0x21243800
    3424:	00244a9f 	mlaeq	r4, pc, sl, r4	; <UNPREDICTABLE>
    3428:	00244e00 	eoreq	r4, r4, r0, lsl #28
    342c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3438:	00002434 	andeq	r2, r0, r4, lsr r4
    343c:	00002448 	andeq	r2, r0, r8, asr #8
    3440:	00530001 	subseq	r0, r3, r1
    3444:	00000000 	andeq	r0, r0, r0
    3448:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    344c:	5c000024 	stcpl	0, cr0, [r0], {36}	; 0x24
    3450:	09000024 	stmdbeq	r0, {r2, r5}
    3454:	48007000 	stmdami	r0, {ip, sp, lr}
    3458:	431a2440 	tstmi	sl, #64, 8	; 0x40000000
    345c:	00009f25 	andeq	r9, r0, r5, lsr #30
    3460:	00000000 	andeq	r0, r0, r0
    3464:	24640000 	strbtcs	r0, [r4], #-0
    3468:	24700000 	ldrbtcs	r0, [r0], #-0
    346c:	00010000 	andeq	r0, r1, r0
    3470:	00247050 	eoreq	r7, r4, r0, asr r0
    3474:	00249000 	eoreq	r9, r4, r0
    3478:	f3000400 	vshl.u8	d0, d0, d0
    347c:	009f5001 	addseq	r5, pc, r1
    3480:	00000000 	andeq	r0, r0, r0
    3484:	64000000 	strvs	r0, [r0], #-0
    3488:	86000024 	strhi	r0, [r0], -r4, lsr #32
    348c:	06000024 	streq	r0, [r0], -r4, lsr #32
    3490:	80000c00 	andhi	r0, r0, r0, lsl #24
    3494:	869f403f 			; <UNDEFINED> instruction: 0x869f403f
    3498:	90000024 	andls	r0, r0, r4, lsr #32
    349c:	01000024 	tsteq	r0, r4, lsr #32
    34a0:	00005000 	andeq	r5, r0, r0
    34a4:	00000000 	andeq	r0, r0, r0
    34a8:	24660000 	strbtcs	r0, [r6], #-0
    34ac:	24700000 	ldrbtcs	r0, [r0], #-0
    34b0:	00010000 	andeq	r0, r1, r0
    34b4:	00247050 	eoreq	r7, r4, r0, asr r0
    34b8:	00249000 	eoreq	r9, r4, r0
    34bc:	f3000400 	vshl.u8	d0, d0, d0
    34c0:	009f5001 	addseq	r5, pc, r1
    34c4:	00000000 	andeq	r0, r0, r0
    34c8:	74000000 	strvc	r0, [r0], #-0
    34cc:	7a000024 	bvc	3564 <__exidx_end+0x76c>
    34d0:	10000024 	andne	r0, r0, r4, lsr #32
    34d4:	0a007300 	beq	200dc <__ccfg+0x134>
    34d8:	341a03f0 	ldrcc	r0, [sl], #-1008	; 0xfffffc10
    34dc:	72244025 	eorvc	r4, r4, #37	; 0x25
    34e0:	21244600 			; <UNDEFINED> instruction: 0x21244600
    34e4:	0024849f 	mlaeq	r4, pc, r4, r8	; <UNPREDICTABLE>
    34e8:	00248600 	eoreq	r8, r4, r0, lsl #12
    34ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    34f8:	0000246c 	andeq	r2, r0, ip, ror #8
    34fc:	0000247a 	andeq	r2, r0, sl, ror r4
    3500:	00530001 	subseq	r0, r3, r1
    3504:	00000000 	andeq	r0, r0, r0
    3508:	90000000 	andls	r0, r0, r0
    350c:	98000024 	stmdals	r0, {r2, r5}
    3510:	01000024 	tsteq	r0, r4, lsr #32
    3514:	24985000 	ldrcs	r5, [r8], #0
    3518:	24a40000 	strtcs	r0, [r4], #0
    351c:	00040000 	andeq	r0, r4, r0
    3520:	9f5001f3 	svcls	0x005001f3
	...
    352c:	00002490 	muleq	r0, r0, r4
    3530:	0000249e 	muleq	r0, lr, r4
    3534:	9f300002 	svcls	0x00300002
    3538:	0000249e 	muleq	r0, lr, r4
    353c:	000024a4 	andeq	r2, r0, r4, lsr #9
    3540:	00500001 	subseq	r0, r0, r1
    3544:	00000000 	andeq	r0, r0, r0
    3548:	92000000 	andls	r0, r0, #0
    354c:	98000024 	stmdals	r0, {r2, r5}
    3550:	01000024 	tsteq	r0, r4, lsr #32
    3554:	24985000 	ldrcs	r5, [r8], #0
    3558:	24a40000 	strtcs	r0, [r4], #0
    355c:	00040000 	andeq	r0, r4, r0
    3560:	9f5001f3 	svcls	0x005001f3
	...
    356c:	0000249c 	muleq	r0, ip, r4
    3570:	0000249e 	muleq	r0, lr, r4
    3574:	00500001 	subseq	r0, r0, r1
    3578:	00000000 	andeq	r0, r0, r0
    357c:	a4000000 	strge	r0, [r0], #-0
    3580:	ac000024 	stcge	0, cr0, [r0], {36}	; 0x24
    3584:	01000024 	tsteq	r0, r4, lsr #32
    3588:	24ac5000 	strtcs	r5, [ip], #0
    358c:	24b80000 	ldrtcs	r0, [r8], #0
    3590:	00040000 	andeq	r0, r4, r0
    3594:	9f5001f3 	svcls	0x005001f3
	...
    35a0:	000024a4 	andeq	r2, r0, r4, lsr #9
    35a4:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    35a8:	9f300002 	svcls	0x00300002
    35ac:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    35b0:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    35b4:	00500001 	subseq	r0, r0, r1
    35b8:	00000000 	andeq	r0, r0, r0
    35bc:	a6000000 	strge	r0, [r0], -r0
    35c0:	ac000024 	stcge	0, cr0, [r0], {36}	; 0x24
    35c4:	01000024 	tsteq	r0, r4, lsr #32
    35c8:	24ac5000 	strtcs	r5, [ip], #0
    35cc:	24b80000 	ldrtcs	r0, [r8], #0
    35d0:	00040000 	andeq	r0, r4, r0
    35d4:	9f5001f3 	svcls	0x005001f3
	...
    35e0:	000024b0 			; <UNDEFINED> instruction: 0x000024b0
    35e4:	000024b2 			; <UNDEFINED> instruction: 0x000024b2
    35e8:	00500001 	subseq	r0, r0, r1
    35ec:	00000000 	andeq	r0, r0, r0
    35f0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    35f4:	be000024 	cdplt	0, 0, cr0, cr0, cr4, {1}
    35f8:	01000024 	tsteq	r0, r4, lsr #32
    35fc:	24be5000 	ldrtcs	r5, [lr], #0
    3600:	25a80000 	strcs	r0, [r8, #0]!
    3604:	00010000 	andeq	r0, r1, r0
    3608:	0025a855 	eoreq	sl, r5, r5, asr r8
    360c:	0025c800 	eoreq	ip, r5, r0, lsl #16
    3610:	f3000400 	vshl.u8	d0, d0, d0
    3614:	009f5001 	addseq	r5, pc, r1
    3618:	00000000 	andeq	r0, r0, r0
    361c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    3620:	c1000024 	tstgt	r0, r4, lsr #32
    3624:	01000024 	tsteq	r0, r4, lsr #32
    3628:	24c15100 	strbcs	r5, [r1], #256	; 0x100
    362c:	25c80000 	strbcs	r0, [r8]
    3630:	00040000 	andeq	r0, r4, r0
    3634:	9f5101f3 	svcls	0x005101f3
	...
    3640:	000024c6 	andeq	r2, r0, r6, asr #9
    3644:	000024ca 	andeq	r2, r0, sl, asr #9
    3648:	ca500001 	bgt	1403654 <__ccfg+0x13e36ac>
    364c:	cd000024 	stcgt	0, cr0, [r0, #-144]	; 0xffffff70
    3650:	01000024 	tsteq	r0, r4, lsr #32
    3654:	24d25200 	ldrbcs	r5, [r2], #512	; 0x200
    3658:	24d60000 	ldrbcs	r0, [r6], #0
    365c:	00010000 	andeq	r0, r1, r0
    3660:	00250050 	eoreq	r0, r5, r0, asr r0
    3664:	00250200 	eoreq	r0, r5, r0, lsl #4
    3668:	50000100 	andpl	r0, r0, r0, lsl #2
    366c:	00002502 	andeq	r2, r0, r2, lsl #10
    3670:	00002505 	andeq	r2, r0, r5, lsl #10
    3674:	0e520001 	cdpeq	0, 5, cr0, cr2, cr1, {0}
    3678:	10000025 	andne	r0, r0, r5, lsr #32
    367c:	01000025 	tsteq	r0, r5, lsr #32
    3680:	25105000 	ldrcs	r5, [r0, #-0]
    3684:	25130000 	ldrcs	r0, [r3, #-0]
    3688:	00010000 	andeq	r0, r1, r0
    368c:	00251e52 	eoreq	r1, r5, r2, asr lr
    3690:	00252000 	eoreq	r2, r5, r0
    3694:	50000100 	andpl	r0, r0, r0, lsl #2
    3698:	00002520 	andeq	r2, r0, r0, lsr #10
    369c:	00002523 	andeq	r2, r0, r3, lsr #10
    36a0:	2a520001 	bcs	14836ac <__ccfg+0x1463704>
    36a4:	2c000025 	stccs	0, cr0, [r0], {37}	; 0x25
    36a8:	01000025 	tsteq	r0, r5, lsr #32
    36ac:	253c5000 	ldrcs	r5, [ip, #-0]!
    36b0:	25400000 	strbcs	r0, [r0, #-0]
    36b4:	00010000 	andeq	r0, r1, r0
    36b8:	00254e50 	eoreq	r4, r5, r0, asr lr
    36bc:	00255000 	eoreq	r5, r5, r0
    36c0:	50000100 	andpl	r0, r0, r0, lsl #2
    36c4:	00002550 	andeq	r2, r0, r0, asr r5
    36c8:	00002553 	andeq	r2, r0, r3, asr r5
    36cc:	5a520001 	bpl	14836d8 <__ccfg+0x1463730>
    36d0:	5c000025 	stcpl	0, cr0, [r0], {37}	; 0x25
    36d4:	01000025 	tsteq	r0, r5, lsr #32
    36d8:	256c5000 	strbcs	r5, [ip, #-0]!
    36dc:	256e0000 	strbcs	r0, [lr, #-0]!
    36e0:	00010000 	andeq	r0, r1, r0
    36e4:	00257e50 	eoreq	r7, r5, r0, asr lr
    36e8:	00258200 	eoreq	r8, r5, r0, lsl #4
    36ec:	50000100 	andpl	r0, r0, r0, lsl #2
    36f0:	00002596 	muleq	r0, r6, r5
    36f4:	00002598 	muleq	r0, r8, r5
    36f8:	98500001 	ldmdals	r0, {r0}^
    36fc:	9b000025 	blls	3798 <__exidx_end+0x9a0>
    3700:	01000025 	tsteq	r0, r5, lsr #32
    3704:	00005200 	andeq	r5, r0, r0, lsl #4
    3708:	00000000 	andeq	r0, r0, r0
    370c:	24ee0000 	strbtcs	r0, [lr], #0
    3710:	24f40000 	ldrbtcs	r0, [r4], #0
    3714:	00070000 	andeq	r0, r7, r0
    3718:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    371c:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    3720:	00000000 	andeq	r0, r0, r0
    3724:	e2000000 	and	r0, r0, #0
    3728:	ec000025 	stc	0, cr0, [r0], {37}	; 0x25
    372c:	09000025 	stmdbeq	r0, {r0, r2, r5}
    3730:	0c007300 	stceq	3, cr7, [r0], {-0}
    3734:	20000004 	andcs	r0, r0, r4
    3738:	00009f21 	andeq	r9, r0, r1, lsr #30
    373c:	00000000 	andeq	r0, r0, r0
    3740:	262c0000 	strtcs	r0, [ip], -r0
    3744:	26340000 	ldrtcs	r0, [r4], -r0
    3748:	00010000 	andeq	r0, r1, r0
    374c:	00263450 	eoreq	r3, r6, r0, asr r4
    3750:	00265400 	eoreq	r5, r6, r0, lsl #8
    3754:	f3000400 	vshl.u8	d0, d0, d0
    3758:	009f5001 	addseq	r5, pc, r1
    375c:	00000000 	andeq	r0, r0, r0
    3760:	54000000 	strpl	r0, [r0], #-0
    3764:	7c000026 	stcvc	0, cr0, [r0], {38}	; 0x26
    3768:	01000026 	tsteq	r0, r6, lsr #32
    376c:	267c5000 	ldrbtcs	r5, [ip], -r0
    3770:	26bc0000 	ldrtcs	r0, [ip], r0
    3774:	00010000 	andeq	r0, r1, r0
    3778:	0026bc54 	eoreq	fp, r6, r4, asr ip
    377c:	0026c400 	eoreq	ip, r6, r0, lsl #8
    3780:	50000100 	andpl	r0, r0, r0, lsl #2
    3784:	000026c4 	andeq	r2, r0, r4, asr #13
    3788:	0000270e 	andeq	r2, r0, lr, lsl #14
    378c:	0e540001 	cdpeq	0, 5, cr0, cr4, cr1, {0}
    3790:	4a000027 	bmi	3834 <__exidx_end+0xa3c>
    3794:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3798:	5001f300 	andpl	pc, r1, r0, lsl #6
    379c:	00274a9f 	mlaeq	r7, pc, sl, r4	; <UNPREDICTABLE>
    37a0:	00274e00 	eoreq	r4, r7, r0, lsl #28
    37a4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    37a8:	0000274e 	andeq	r2, r0, lr, asr #14
    37ac:	000027a4 	andeq	r2, r0, r4, lsr #15
    37b0:	01f30004 	mvnseq	r0, r4
    37b4:	00009f50 	andeq	r9, r0, r0, asr pc
    37b8:	00000000 	andeq	r0, r0, r0
    37bc:	266a0000 	strbtcs	r0, [sl], -r0
    37c0:	26ac0000 	strtcs	r0, [ip], r0
    37c4:	00010000 	andeq	r0, r1, r0
    37c8:	00000053 	andeq	r0, r0, r3, asr r0
    37cc:	00000000 	andeq	r0, r0, r0
    37d0:	0026de00 	eoreq	sp, r6, r0, lsl #28
    37d4:	0026e400 	eoreq	lr, r6, r0, lsl #8
    37d8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    37e4:	0000270e 	andeq	r2, r0, lr, lsl #14
    37e8:	00002710 	andeq	r2, r0, r0, lsl r7
    37ec:	10500001 	subsne	r0, r0, r1
    37f0:	24000027 	strcs	r0, [r0], #-39	; 0xffffffd9
    37f4:	01000027 	tsteq	r0, r7, lsr #32
    37f8:	00005400 	andeq	r5, r0, r0, lsl #8
    37fc:	00000000 	andeq	r0, r0, r0
    3800:	27240000 	strcs	r0, [r4, -r0]!
    3804:	27440000 	strbcs	r0, [r4, -r0]
    3808:	00010000 	andeq	r0, r1, r0
    380c:	00000054 	andeq	r0, r0, r4, asr r0
	...
    381c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3828:	7f750003 	svcvc	0x00750003
    382c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3830:	00000000 	andeq	r0, r0, r0
    3834:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    3840:	000027a4 	andeq	r2, r0, r4, lsr #15
    3844:	000027c3 	andeq	r2, r0, r3, asr #15
    3848:	c3500001 	cmpgt	r0, #1
    384c:	84000027 	strhi	r0, [r0], #-39	; 0xffffffd9
    3850:	01000028 	tsteq	r0, r8, lsr #32
    3854:	28845700 	stmcs	r4, {r8, r9, sl, ip, lr}
    3858:	29c40000 	stmibcs	r4, {}^	; <UNPREDICTABLE>
    385c:	00040000 	andeq	r0, r4, r0
    3860:	9f5001f3 	svcls	0x005001f3
	...
    386c:	000027c4 	andeq	r2, r0, r4, asr #15
    3870:	00002944 	andeq	r2, r0, r4, asr #18
    3874:	46500001 	ldrbmi	r0, [r0], -r1
    3878:	80000029 	andhi	r0, r0, r9, lsr #32
    387c:	01000029 	tsteq	r0, r9, lsr #32
    3880:	00005000 	andeq	r5, r0, r0
    3884:	00000000 	andeq	r0, r0, r0
    3888:	286c0000 	stmdacs	ip!, {}^	; <UNPREDICTABLE>
    388c:	28700000 	ldmdacs	r0!, {}^	; <UNPREDICTABLE>
    3890:	00030000 	andeq	r0, r3, r0
    3894:	709f7170 	addsvc	r7, pc, r0, ror r1	; <UNPREDICTABLE>
    3898:	76000028 	strvc	r0, [r0], -r8, lsr #32
    389c:	01000028 	tsteq	r0, r8, lsr #32
    38a0:	28765100 	ldmdacs	r6!, {r8, ip, lr}^
    38a4:	28960000 	ldmcs	r6, {}	; <UNPREDICTABLE>
    38a8:	00020000 	andeq	r0, r2, r0
    38ac:	28965491 	ldmcs	r6, {r0, r4, r7, sl, ip, lr}
    38b0:	28a20000 	stmiacs	r2!, {}	; <UNPREDICTABLE>
    38b4:	00010000 	andeq	r0, r1, r0
    38b8:	0028a251 	eoreq	sl, r8, r1, asr r2
    38bc:	0028a400 	eoreq	sl, r8, r0, lsl #8
    38c0:	91000200 	mrsls	r0, R8_usr
    38c4:	0028a454 	eoreq	sl, r8, r4, asr r4
    38c8:	0028a600 	eoreq	sl, r8, r0, lsl #12
    38cc:	51000100 	mrspl	r0, (UNDEF: 16)
    38d0:	000028a6 	andeq	r2, r0, r6, lsr #17
    38d4:	0000294c 	andeq	r2, r0, ip, asr #18
    38d8:	54910002 	ldrpl	r0, [r1], #2
	...
    38e4:	000027d0 	ldrdeq	r2, [r0], -r0
    38e8:	0000282a 	andeq	r2, r0, sl, lsr #16
    38ec:	32510001 	subscc	r0, r1, #1
    38f0:	34000028 	strcc	r0, [r0], #-40	; 0xffffffd8
    38f4:	01000028 	tsteq	r0, r8, lsr #32
    38f8:	00005100 	andeq	r5, r0, r0, lsl #2
    38fc:	00000000 	andeq	r0, r0, r0
    3900:	28220000 	stmdacs	r2!, {}	; <UNPREDICTABLE>
    3904:	28300000 	ldmdacs	r0!, {}	; <UNPREDICTABLE>
    3908:	00010000 	andeq	r0, r1, r0
    390c:	00283252 	eoreq	r3, r8, r2, asr r2
    3910:	00291400 	eoreq	r1, r9, r0, lsl #8
    3914:	52000100 	andpl	r0, r0, #0, 2
	...
    3920:	00002822 	andeq	r2, r0, r2, lsr #16
    3924:	0000290a 	andeq	r2, r0, sl, lsl #18
    3928:	00530001 	subseq	r0, r3, r1
    392c:	00000000 	andeq	r0, r0, r0
    3930:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3934:	1e000027 	cdpne	0, 0, cr0, cr0, cr7, {1}
    3938:	01000029 	tsteq	r0, r9, lsr #32
    393c:	00005500 	andeq	r5, r0, r0, lsl #10
    3940:	00000000 	andeq	r0, r0, r0
    3944:	27c40000 	strbcs	r0, [r4, r0]
    3948:	284c0000 	stmdacs	ip, {}^	; <UNPREDICTABLE>
    394c:	00020000 	andeq	r0, r2, r0
    3950:	284c9f30 	stmdacs	ip, {r4, r5, r8, r9, sl, fp, ip, pc}^
    3954:	29800000 	stmibcs	r0, {}	; <UNPREDICTABLE>
    3958:	00010000 	andeq	r0, r1, r0
    395c:	00000054 	andeq	r0, r0, r4, asr r0
    3960:	00000000 	andeq	r0, r0, r0
    3964:	00284400 	eoreq	r4, r8, r0, lsl #8
    3968:	00284e00 	eoreq	r4, r8, r0, lsl #28
    396c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3978:	0000286c 	andeq	r2, r0, ip, ror #16
    397c:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
    3980:	9f300002 	svcls	0x00300002
    3984:	000028bc 			; <UNDEFINED> instruction: 0x000028bc
    3988:	000028dc 	ldrdeq	r2, [r0], -ip
    398c:	dc510001 	mrrcle	0, 0, r0, r1, cr1
    3990:	e2000028 	and	r0, r0, #40	; 0x28
    3994:	02000028 	andeq	r0, r0, #40	; 0x28
    3998:	e29f3000 	adds	r3, pc, #0
    399c:	1c000028 	stcne	0, cr0, [r0], {40}	; 0x28
    39a0:	01000029 	tsteq	r0, r9, lsr #32
    39a4:	00005100 	andeq	r5, r0, r0, lsl #2
    39a8:	00000000 	andeq	r0, r0, r0
    39ac:	28980000 	ldmcs	r8, {}	; <UNPREDICTABLE>
    39b0:	289c0000 	ldmcs	ip, {}	; <UNPREDICTABLE>
    39b4:	00010000 	andeq	r0, r1, r0
    39b8:	0028a45e 	eoreq	sl, r8, lr, asr r4
    39bc:	0028a600 	eoreq	sl, r8, r0, lsl #12
    39c0:	5e000100 	adfpls	f0, f0, f0
    39c4:	000028a6 	andeq	r2, r0, r6, lsr #17
    39c8:	000028ac 	andeq	r2, r0, ip, lsr #17
    39cc:	ac510001 	mrrcge	0, 0, r0, r1, cr1
    39d0:	b4000028 	strlt	r0, [r0], #-40	; 0xffffffd8
    39d4:	03000028 	movweq	r0, #40	; 0x28
    39d8:	9f7f7100 	svcls	0x007f7100
	...
    39e4:	0000286c 	andeq	r2, r0, ip, ror #16
    39e8:	00002896 	muleq	r0, r6, r8
    39ec:	9f300002 	svcls	0x00300002
    39f0:	00002896 	muleq	r0, r6, r8
    39f4:	000028a0 	andeq	r2, r0, r0, lsr #17
    39f8:	a05e0001 	subsge	r0, lr, r1
    39fc:	a2000028 	andge	r0, r0, #40	; 0x28
    3a00:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    3a04:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
    3a08:	28a29f26 	stmiacs	r2!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    3a0c:	28a40000 	stmiacs	r4!, {}	; <UNPREDICTABLE>
    3a10:	00060000 	andeq	r0, r6, r0
    3a14:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    3a18:	28a49f26 	stmiacs	r4!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    3a1c:	28a60000 	stmiacs	r6!, {}	; <UNPREDICTABLE>
    3a20:	00010000 	andeq	r0, r1, r0
    3a24:	0028a65e 	eoreq	sl, r8, lr, asr r6
    3a28:	0028dc00 	eoreq	sp, r8, r0, lsl #24
    3a2c:	91000600 	tstls	r0, r0, lsl #12
    3a30:	26380654 			; <UNDEFINED> instruction: 0x26380654
    3a34:	0028dc9f 	mlaeq	r8, pc, ip, sp	; <UNPREDICTABLE>
    3a38:	0028e200 	eoreq	lr, r8, r0, lsl #4
    3a3c:	30000200 	andcc	r0, r0, r0, lsl #4
    3a40:	0028e29f 	mlaeq	r8, pc, r2, lr	; <UNPREDICTABLE>
    3a44:	00294c00 	eoreq	r4, r9, r0, lsl #24
    3a48:	5e000100 	adfpls	f0, f0, f0
	...
    3a54:	000028b8 			; <UNDEFINED> instruction: 0x000028b8
    3a58:	000028dc 	ldrdeq	r2, [r0], -ip
    3a5c:	005c0001 	subseq	r0, ip, r1
    3a60:	00000000 	andeq	r0, r0, r0
    3a64:	e6000000 	str	r0, [r0], -r0
    3a68:	4c000028 	stcmi	0, cr0, [r0], {40}	; 0x28
    3a6c:	01000029 	tsteq	r0, r9, lsr #32
    3a70:	00005a00 	andeq	r5, r0, r0, lsl #20
    3a74:	00000000 	andeq	r0, r0, r0
    3a78:	28ea0000 	stmiacs	sl!, {}^	; <UNPREDICTABLE>
    3a7c:	29260000 	stmdbcs	r6!, {}	; <UNPREDICTABLE>
    3a80:	00010000 	andeq	r0, r1, r0
    3a84:	0029265c 	eoreq	r2, r9, ip, asr r6
    3a88:	00292a00 	eoreq	r2, r9, r0, lsl #20
    3a8c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3a98:	0000292a 	andeq	r2, r0, sl, lsr #18
    3a9c:	00002934 	andeq	r2, r0, r4, lsr r9
    3aa0:	00710017 	rsbseq	r0, r1, r7, lsl r0
    3aa4:	244b4012 	strbcs	r4, [fp], #-18	; 0xffffffee
    3aa8:	ffff0a22 			; <UNDEFINED> instruction: 0xffff0a22
    3aac:	4b401416 	blmi	1008b0c <__ccfg+0xfe8b64>
    3ab0:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3ab4:	13160001 	tstne	r6, #1
    3ab8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3abc:	00000000 	andeq	r0, r0, r0
    3ac0:	00295400 	eoreq	r5, r9, r0, lsl #8
    3ac4:	00296000 	eoreq	r6, r9, r0
    3ac8:	30000200 	andcc	r0, r0, r0, lsl #4
    3acc:	0029609f 	mlaeq	r9, pc, r0, r6	; <UNPREDICTABLE>
    3ad0:	00298000 	eoreq	r8, r9, r0
    3ad4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ae0:	00002956 	andeq	r2, r0, r6, asr r9
    3ae4:	00002958 	andeq	r2, r0, r8, asr r9
    3ae8:	58530001 	ldmdapl	r3, {r0}^
    3aec:	60000029 	andvs	r0, r0, r9, lsr #32
    3af0:	02000029 	andeq	r0, r0, #41	; 0x29
    3af4:	609f4f00 	addsvs	r4, pc, r0, lsl #30
    3af8:	70000029 	andvc	r0, r0, r9, lsr #32
    3afc:	01000029 	tsteq	r0, r9, lsr #32
    3b00:	29705300 	ldmdbcs	r0!, {r8, r9, ip, lr}^
    3b04:	29740000 	ldmdbcs	r4!, {}^	; <UNPREDICTABLE>
    3b08:	00050000 	andeq	r0, r5, r0
    3b0c:	25340073 	ldrcs	r0, [r4, #-115]!	; 0xffffff8d
    3b10:	0029749f 	mlaeq	r9, pc, r4, r7	; <UNPREDICTABLE>
    3b14:	00297800 	eoreq	r7, r9, r0, lsl #16
    3b18:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b24:	0000286c 	andeq	r2, r0, ip, ror #16
    3b28:	0000294c 	andeq	r2, r0, ip, asr #18
    3b2c:	9c0c0006 	stcls	0, cr0, [ip], {6}
    3b30:	9f500013 	svcls	0x00500013
	...
    3b3c:	000027d8 	ldrdeq	r2, [r0], -r8
    3b40:	000027e4 	andeq	r2, r0, r4, ror #15
    3b44:	00530001 	subseq	r0, r3, r1
    3b48:	00000000 	andeq	r0, r0, r0
    3b4c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    3b50:	04000027 	streq	r0, [r0], #-39	; 0xffffffd9
    3b54:	01000028 	tsteq	r0, r8, lsr #32
    3b58:	00005200 	andeq	r5, r0, r0, lsl #4
    3b5c:	00000000 	andeq	r0, r0, r0
    3b60:	280e0000 	stmdacs	lr, {}	; <UNPREDICTABLE>
    3b64:	281a0000 	ldmdacs	sl, {}	; <UNPREDICTABLE>
    3b68:	00010000 	andeq	r0, r1, r0
    3b6c:	00000052 	andeq	r0, r0, r2, asr r0
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	00281a00 	eoreq	r1, r8, r0, lsl #20
    3b78:	00290a00 	eoreq	r0, r9, r0, lsl #20
    3b7c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b88:	000029d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    3b8c:	000029dc 	ldrdeq	r2, [r0], -ip
    3b90:	dc500001 	mrrcle	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3b94:	e6000029 	str	r0, [r0], -r9, lsr #32
    3b98:	0e000029 	cdpeq	0, 0, cr0, cr0, cr9, {1}
    3b9c:	12007000 	andne	r7, r0, #0
    3ba0:	14168009 	ldrne	r8, [r6], #-9
    3ba4:	0001282b 	andeq	r2, r1, fp, lsr #16
    3ba8:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3bac:	00000000 	andeq	r0, r0, r0
    3bb0:	cc000000 	stcgt	0, cr0, [r0], {-0}
    3bb4:	f8000029 			; <UNDEFINED> instruction: 0xf8000029
    3bb8:	01000029 	tsteq	r0, r9, lsr #32
    3bbc:	00005400 	andeq	r5, r0, r0, lsl #8
    3bc0:	00000000 	andeq	r0, r0, r0
    3bc4:	29fc0000 	ldmibcs	ip!, {}^	; <UNPREDICTABLE>
    3bc8:	2a020000 	bcs	83bd0 <__ccfg+0x63c28>
    3bcc:	00150000 	andseq	r0, r5, r0
    3bd0:	40120073 	andsmi	r0, r2, r3, ror r0
    3bd4:	4f22244b 	svcmi	0x0022244b
    3bd8:	4b401416 	blmi	1008c38 <__ccfg+0xfe8c90>
    3bdc:	282d2224 	stmdacs	sp!, {r2, r5, r9, sp}
    3be0:	13160001 	tstne	r6, #1
    3be4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3be8:	00000000 	andeq	r0, r0, r0
    3bec:	002a0800 	eoreq	r0, sl, r0, lsl #16
    3bf0:	002a1200 	eoreq	r1, sl, r0, lsl #4
    3bf4:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    3bf8:	4b401200 	blmi	1008400 <__ccfg+0xfe8458>
    3bfc:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    3c00:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    3c04:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    3c08:	16000128 	strne	r0, [r0], -r8, lsr #2
    3c0c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    3c1c:	00010000 	andeq	r0, r1, r0
    3c20:	00000052 	andeq	r0, r0, r2, asr r0
	...
    3c30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3c44:	00510001 	subseq	r0, r1, r1
	...
    3c54:	01000000 	mrseq	r0, (UNDEF: 0)
    3c58:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    3c68:	00160000 	andseq	r0, r6, r0
    3c6c:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    3c70:	4b400070 	blmi	1003e38 <__ccfg+0xfe3e90>
    3c74:	050c2224 	streq	r2, [ip, #-548]	; 0xfffffddc
    3c78:	2d800000 	stccs	0, cr0, [r0]
    3c7c:	16000128 	strne	r0, [r0], -r8, lsr #2
    3c80:	00009f13 	andeq	r9, r0, r3, lsl pc
    3c84:	00000000 	andeq	r0, r0, r0
    3c88:	2a3c0000 	bcs	f03c90 <__ccfg+0xee3ce8>
    3c8c:	2a7e0000 	bcs	1f83c94 <__ccfg+0x1f63cec>
    3c90:	00030000 	andeq	r0, r3, r0
    3c94:	7e9fff09 	cdpvc	15, 9, cr15, cr15, cr9, {0}
    3c98:	8800002a 	stmdahi	r0, {r1, r3, r5}
    3c9c:	0100002a 	tsteq	r0, sl, lsr #32
    3ca0:	00005000 	andeq	r5, r0, r0
    3ca4:	00000000 	andeq	r0, r0, r0
    3ca8:	2a480000 	bcs	1203cb0 <__ccfg+0x11e3d08>
    3cac:	2a560000 	bcs	1583cb4 <__ccfg+0x1563d0c>
    3cb0:	00010000 	andeq	r0, r1, r0
    3cb4:	002a5a50 	eoreq	r5, sl, r0, asr sl
    3cb8:	002a7600 	eoreq	r7, sl, r0, lsl #12
    3cbc:	50000100 	andpl	r0, r0, r0, lsl #2
    3cc0:	00002a78 	andeq	r2, r0, r8, ror sl
    3cc4:	00002a7a 	andeq	r2, r0, sl, ror sl
    3cc8:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    3ccc:	7e00002a 	cdpvc	0, 0, cr0, cr0, cr10, {1}
    3cd0:	0100002a 	tsteq	r0, sl, lsr #32
    3cd4:	00005000 	andeq	r5, r0, r0
	...
    3ce4:	00030000 	andeq	r0, r3, r0
    3ce8:	009fff09 	addseq	pc, pc, r9, lsl #30
    3cec:	00000000 	andeq	r0, r0, r0
    3cf0:	01000000 	mrseq	r0, (UNDEF: 0)
    3cf4:	00005000 	andeq	r5, r0, r0
	...
    3d04:	00010000 	andeq	r0, r1, r0
    3d08:	00000054 	andeq	r0, r0, r4, asr r0
    3d0c:	00000000 	andeq	r0, r0, r0
    3d10:	002a8800 	eoreq	r8, sl, r0, lsl #16
    3d14:	002ac200 	eoreq	ip, sl, r0, lsl #4
    3d18:	09000300 	stmdbeq	r0, {r8, r9}
    3d1c:	2ac29fff 	bcs	ff0abd20 <_estack+0xdf0a6d20>
    3d20:	2ac60000 	bcs	ff183d28 <_estack+0xdf17ed28>
    3d24:	00020000 	andeq	r0, r2, r0
    3d28:	2ac69f44 	bcs	ff1aba40 <_estack+0xdf1a6a40>
    3d2c:	2aca0000 	bcs	ff283d34 <_estack+0xdf27ed34>
    3d30:	00020000 	andeq	r0, r2, r0
    3d34:	2aca9f45 	bcs	ff2aba50 <_estack+0xdf2a6a50>
    3d38:	2ae80000 	bcs	ffa03d40 <_estack+0xdf9fed40>
    3d3c:	00030000 	andeq	r0, r3, r0
    3d40:	e89fff09 	ldm	pc, {r0, r3, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    3d44:	ea00002a 	b	3df4 <__exidx_end+0xffc>
    3d48:	0100002a 	tsteq	r0, sl, lsr #32
    3d4c:	2aea5000 	bcs	ffa97d54 <_estack+0xdfa92d54>
    3d50:	2aec0000 	bcs	ffb03d58 <_estack+0xdfafed58>
    3d54:	00030000 	andeq	r0, r3, r0
    3d58:	ec9fff09 	ldc	15, cr15, [pc], {9}
    3d5c:	f400002a 	vst4.8	{d0-d3}, [r0 :128], sl
    3d60:	0100002a 	tsteq	r0, sl, lsr #32
    3d64:	00005000 	andeq	r5, r0, r0
    3d68:	00000000 	andeq	r0, r0, r0
    3d6c:	2a980000 	bcs	fe603d74 <_estack+0xde5fed74>
    3d70:	2af00000 	bcs	ffc03d78 <_estack+0xdfbfed78>
    3d74:	00010000 	andeq	r0, r1, r0
    3d78:	00000054 	andeq	r0, r0, r4, asr r0
    3d7c:	00000000 	andeq	r0, r0, r0
    3d80:	002b0c00 	eoreq	r0, fp, r0, lsl #24
    3d84:	002b1500 	eoreq	r1, fp, r0, lsl #10
    3d88:	50000100 	andpl	r0, r0, r0, lsl #2
    3d8c:	00002b15 	andeq	r2, r0, r5, lsl fp
    3d90:	00002b2a 	andeq	r2, r0, sl, lsr #22
    3d94:	2a540001 	bcs	1503da0 <__ccfg+0x14e3df8>
    3d98:	2e00002b 	cdpcs	0, 0, cr0, cr0, cr11, {1}
    3d9c:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    3da0:	5001f300 	andpl	pc, r1, r0, lsl #6
    3da4:	002b2e9f 	mlaeq	fp, pc, lr, r2	; <UNPREDICTABLE>
    3da8:	002b3000 	eoreq	r3, fp, r0
    3dac:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3db0:	00002b30 	andeq	r2, r0, r0, lsr fp
    3db4:	00002b34 	andeq	r2, r0, r4, lsr fp
    3db8:	01f30004 	mvnseq	r0, r4
    3dbc:	00009f50 	andeq	r9, r0, r0, asr pc
    3dc0:	00000000 	andeq	r0, r0, r0
    3dc4:	2b0c0000 	blcs	303dcc <__ccfg+0x2e3e24>
    3dc8:	2b150000 	blcs	543dd0 <__ccfg+0x523e28>
    3dcc:	00010000 	andeq	r0, r1, r0
    3dd0:	002b1551 	eoreq	r1, fp, r1, asr r5
    3dd4:	002b2a00 	eoreq	r2, fp, r0, lsl #20
    3dd8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    3ddc:	00002b2a 	andeq	r2, r0, sl, lsr #22
    3de0:	00002b2e 	andeq	r2, r0, lr, lsr #22
    3de4:	01f30004 	mvnseq	r0, r4
    3de8:	2b2e9f51 	blcs	babb34 <__ccfg+0xb8bb8c>
    3dec:	2b300000 	blcs	c03df4 <__ccfg+0xbe3e4c>
    3df0:	00010000 	andeq	r0, r1, r0
    3df4:	002b3055 	eoreq	r3, fp, r5, asr r0
    3df8:	002b3400 	eoreq	r3, fp, r0, lsl #8
    3dfc:	f3000400 	vshl.u8	d0, d0, d0
    3e00:	009f5101 	addseq	r5, pc, r1, lsl #2
    3e04:	00000000 	andeq	r0, r0, r0
    3e08:	16000000 	strne	r0, [r0], -r0
    3e0c:	2d00002b 	stccs	0, cr0, [r0, #-172]	; 0xffffff54
    3e10:	0500002b 	streq	r0, [r0, #-43]	; 0xffffffd5
    3e14:	30007000 	andcc	r7, r0, r0
    3e18:	2b2e9f29 	blcs	babac4 <__ccfg+0xb8bb1c>
    3e1c:	2b340000 	blcs	d03e24 <__ccfg+0xce3e7c>
    3e20:	00050000 	andeq	r0, r5, r0
    3e24:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    3e28:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3e2c:	00000000 	andeq	r0, r0, r0
    3e30:	002b3400 	eoreq	r3, fp, r0, lsl #8
    3e34:	002b3600 	eoreq	r3, fp, r0, lsl #12
    3e38:	50000100 	andpl	r0, r0, r0, lsl #2
    3e3c:	00002b36 	andeq	r2, r0, r6, lsr fp
    3e40:	00002b3c 	andeq	r2, r0, ip, lsr fp
    3e44:	01f30004 	mvnseq	r0, r4
    3e48:	00009f50 	andeq	r9, r0, r0, asr pc
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	2b340000 	blcs	d03e58 <__ccfg+0xce3eb0>
    3e54:	2b380000 	blcs	e03e5c <__ccfg+0xde3eb4>
    3e58:	00010000 	andeq	r0, r1, r0
    3e5c:	002b3851 	eoreq	r3, fp, r1, asr r8
    3e60:	002b3c00 	eoreq	r3, fp, r0, lsl #24
    3e64:	f3000400 	vshl.u8	d0, d0, d0
    3e68:	009f5101 	addseq	r5, pc, r1, lsl #2
    3e6c:	00000000 	andeq	r0, r0, r0
    3e70:	34000000 	strcc	r0, [r0], #-0
    3e74:	3b00002b 	blcc	3f28 <__exidx_end+0x1130>
    3e78:	0100002b 	tsteq	r0, fp, lsr #32
    3e7c:	2b3b5200 	blcs	ed8684 <__ccfg+0xeb86dc>
    3e80:	2b3c0000 	blcs	f03e88 <__ccfg+0xee3ee0>
    3e84:	00040000 	andeq	r0, r4, r0
    3e88:	9f5201f3 	svcls	0x005201f3
	...
    3e9c:	00500001 	subseq	r0, r0, r1
    3ea0:	00000000 	andeq	r0, r0, r0
    3ea4:	04000000 	streq	r0, [r0], #-0
    3ea8:	5001f300 	andpl	pc, r1, r0, lsl #6
    3eac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ebc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3ec8:	01f30004 	mvnseq	r0, r4
    3ecc:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    3edc:	00010000 	andeq	r0, r1, r0
    3ee0:	00000052 	andeq	r0, r0, r2, asr r0
    3ee4:	00000000 	andeq	r0, r0, r0
    3ee8:	f3000400 	vshl.u8	d0, d0, d0
    3eec:	009f5201 	addseq	r5, pc, r1, lsl #4
    3ef0:	00000000 	andeq	r0, r0, r0
    3ef4:	01000000 	mrseq	r0, (UNDEF: 0)
    3ef8:	00005200 	andeq	r5, r0, r0, lsl #4
    3efc:	00000000 	andeq	r0, r0, r0
    3f00:	00150000 	andseq	r0, r5, r0
    3f04:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3f08:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    3f0c:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3f10:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    3f14:	13160001 	tstne	r6, #1
    3f18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3f28:	53000100 	movwpl	r0, #256	; 0x100
	...
    3f34:	01f30004 	mvnseq	r0, r4
    3f38:	00009f53 	andeq	r9, r0, r3, asr pc
	...
    3f48:	00040000 	andeq	r0, r4, r0
    3f4c:	9f048070 	svcls	0x00048070
	...
    3f58:	01f3000d 	mvnseq	r0, sp
    3f5c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    3f60:	23225001 			; <UNDEFINED> instruction: 0x23225001
    3f64:	009f0480 	addseq	r0, pc, r0, lsl #9
    3f68:	00000000 	andeq	r0, r0, r0
    3f6c:	01000000 	mrseq	r0, (UNDEF: 0)
    3f70:	00005000 	andeq	r5, r0, r0
    3f74:	00000000 	andeq	r0, r0, r0
    3f78:	00520000 	subseq	r0, r2, r0
    3f7c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3f80:	5001f324 	andpl	pc, r1, r4, lsr #6
    3f84:	04802322 	streq	r2, [r0], #802	; 0x322
    3f88:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3f8c:	5001f324 	andpl	pc, r1, r4, lsr #6
    3f90:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    3f94:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    3f98:	16000128 	strne	r0, [r0], -r8, lsr #2
    3f9c:	04842313 	streq	r2, [r4], #787	; 0x313
    3fa0:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3fa4:	5001f324 	andpl	pc, r1, r4, lsr #6
    3fa8:	04802322 	streq	r2, [r0], #802	; 0x322
    3fac:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    3fb0:	5001f324 	andpl	pc, r1, r4, lsr #6
    3fb4:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    3fb8:	29302540 	ldmdbcs	r0!, {r6, r8, sl, sp}
    3fbc:	16000128 	strne	r0, [r0], -r8, lsr #2
    3fc0:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    3fc4:	2e302540 	cfneg32cs	mvfx2, mvfx0
    3fc8:	16000128 	strne	r0, [r0], -r8, lsr #2
    3fcc:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    3fdc:	00010000 	andeq	r0, r1, r0
    3fe0:	00000051 	andeq	r0, r0, r1, asr r0
    3fe4:	00000000 	andeq	r0, r0, r0
    3fe8:	30002f00 	andcc	r2, r0, r0, lsl #30
    3fec:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3ff0:	5201f325 	andpl	pc, r1, #-1811939328	; 0x94000000
    3ff4:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    3ff8:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    3ffc:	13160001 	tstne	r6, #1
    4000:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    4004:	5301f325 	movwpl	pc, #4901	; 0x1325	; <UNPREDICTABLE>
    4008:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    400c:	f3131600 	vmax.u16	d1, d3, d0
    4010:	29305301 	ldmdbcs	r0!, {r0, r8, r9, ip, lr}
    4014:	16000128 	strne	r0, [r0], -r8, lsr #2
    4018:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4028:	00010000 	andeq	r0, r1, r0
    402c:	00000050 	andeq	r0, r0, r0, asr r0
    4030:	00000000 	andeq	r0, r0, r0
    4034:	f3000400 	vshl.u8	d0, d0, d0
    4038:	009f5001 	addseq	r5, pc, r1
	...
    4048:	01000000 	mrseq	r0, (UNDEF: 0)
    404c:	00005100 	andeq	r5, r0, r0, lsl #2
    4050:	00000000 	andeq	r0, r0, r0
    4054:	00040000 	andeq	r0, r4, r0
    4058:	9f5101f3 	svcls	0x005101f3
	...
    406c:	00520001 	subseq	r0, r2, r1
    4070:	00000000 	andeq	r0, r0, r0
    4074:	04000000 	streq	r0, [r0], #-0
    4078:	5201f300 	andpl	pc, r1, #0, 6
    407c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4080:	00000000 	andeq	r0, r0, r0
    4084:	52000100 	andpl	r0, r0, #0, 2
	...
    4090:	01f3001b 	mvnseq	r0, fp, lsl r0
    4094:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4098:	01f35201 	mvnseq	r5, r1, lsl #4
    409c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    40a0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    40a4:	282b8000 	stmdacs	fp!, {pc}
    40a8:	13160001 	tstne	r6, #1
    40ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    40bc:	53000100 	movwpl	r0, #256	; 0x100
	...
    40c8:	01f30004 	mvnseq	r0, r4
    40cc:	00009f53 	andeq	r9, r0, r3, asr pc
    40d0:	00000000 	andeq	r0, r0, r0
    40d4:	00010000 	andeq	r0, r1, r0
    40d8:	00000053 	andeq	r0, r0, r3, asr r0
    40dc:	00000000 	andeq	r0, r0, r0
    40e0:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    40e4:	1c405301 	mcrrne	3, 0, r5, r0, cr1
    40e8:	f35301f3 	vbsl	q8, <illegal reg q9.5>, <illegal reg q9.5>
    40ec:	4b405301 	blmi	1018cf8 <__ccfg+0xff8d50>
    40f0:	0f0c2224 	svceq	0x000c2224
    40f4:	2b800000 	blcs	fe0040fc <_estack+0xddfff0fc>
    40f8:	16000128 	strne	r0, [r0], -r8, lsr #2
    40fc:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    410c:	00020000 	andeq	r0, r2, r0
    4110:	00000091 	muleq	r0, r1, r0
    4114:	00000000 	andeq	r0, r0, r0
    4118:	00020000 	andeq	r0, r2, r0
    411c:	0000007d 	andeq	r0, r0, sp, ror r0
	...
    412c:	00040000 	andeq	r0, r4, r0
    4130:	9f048070 	svcls	0x00048070
	...
    413c:	01f3000d 	mvnseq	r0, sp
    4140:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4144:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4148:	009f0480 	addseq	r0, pc, r0, lsl #9
    414c:	00000000 	andeq	r0, r0, r0
    4150:	01000000 	mrseq	r0, (UNDEF: 0)
    4154:	00005000 	andeq	r5, r0, r0
    4158:	00000000 	andeq	r0, r0, r0
    415c:	00640000 	rsbeq	r0, r4, r0
    4160:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4164:	5001f324 	andpl	pc, r1, r4, lsr #6
    4168:	04802322 	streq	r2, [r0], #802	; 0x322
    416c:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    4170:	5001f324 	andpl	pc, r1, r4, lsr #6
    4174:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    4178:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    417c:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4180:	01282c80 	smlawbeq	r8, r0, ip, r2
    4184:	23131600 	tstcs	r3, #0, 12
    4188:	01f30484 	mvnseq	r0, r4, lsl #9
    418c:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    4190:	23225001 			; <UNDEFINED> instruction: 0x23225001
    4194:	01f30480 	mvnseq	r0, r0, lsl #9
    4198:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    419c:	f3225001 	vhadd.u32	d5, d2, d1
    41a0:	4b405301 	blmi	1018dac <__ccfg+0xff8e04>
    41a4:	0f0c2224 	svceq	0x000c2224
    41a8:	2c800000 	stccs	0, cr0, [r0], {0}
    41ac:	16000128 	strne	r0, [r0], -r8, lsr #2
    41b0:	5301f313 	movwpl	pc, #4883	; 0x1313	; <UNPREDICTABLE>
    41b4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    41b8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    41bc:	01282b80 	smlawbeq	r8, r0, fp, r2
    41c0:	9f131600 	svcls	0x00131600
	...
    41d4:	0074000a 	rsbseq	r0, r4, sl
    41d8:	1affff0a 	bne	3e08 <__exidx_end+0x1010>
    41dc:	9f240073 	svcls	0x00240073
	...
    41e8:	007d000c 	rsbseq	r0, sp, ip
    41ec:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    41f0:	00731aff 	ldrshteq	r1, [r3], #-175	; 0xffffff51
    41f4:	00009f24 	andeq	r9, r0, r4, lsr #30
    41f8:	00000000 	andeq	r0, r0, r0
    41fc:	00240000 	eoreq	r0, r4, r0
    4200:	0294007d 	addseq	r0, r4, #125	; 0x7d
    4204:	1affff0a 	bne	3e34 <__exidx_end+0x103c>
    4208:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    420c:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    4210:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4214:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    4218:	8000000f 	andhi	r0, r0, pc
    421c:	0001282b 	andeq	r2, r1, fp, lsr #16
    4220:	9f241316 	svcls	0x00241316
	...
    4234:	00500001 	subseq	r0, r0, r1
    4238:	00000000 	andeq	r0, r0, r0
    423c:	04000000 	streq	r0, [r0], #-0
    4240:	5001f300 	andpl	pc, r1, r0, lsl #6
    4244:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4254:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    4260:	01f30004 	mvnseq	r0, r4
    4264:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    4274:	00010000 	andeq	r0, r1, r0
    4278:	00000052 	andeq	r0, r0, r2, asr r0
    427c:	00000000 	andeq	r0, r0, r0
    4280:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    428c:	01f30015 	mvnseq	r0, r5, lsl r0
    4290:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4294:	01f35201 	mvnseq	r5, r1, lsl #4
    4298:	30254052 	eorcc	r4, r5, r2, asr r0
    429c:	0001282e 	andeq	r2, r1, lr, lsr #16
    42a0:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    42b0:	01000000 	mrseq	r0, (UNDEF: 0)
    42b4:	00005500 	andeq	r5, r0, r0, lsl #10
    42b8:	00000000 	andeq	r0, r0, r0
    42bc:	001d0000 	andseq	r0, sp, r0
    42c0:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    42c4:	23225101 			; <UNDEFINED> instruction: 0x23225101
    42c8:	5001f302 	andpl	pc, r1, r2, lsl #6
    42cc:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    42d0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    42d4:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    42d8:	13160001 	tstne	r6, #1
    42dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    42ec:	75000600 	strvc	r0, [r0, #-1536]	; 0xfffffa00
    42f0:	1a007400 	bne	212f8 <__ccfg+0x1350>
    42f4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4304:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4310:	01f3001d 	mvnseq	r0, sp, lsl r0
    4314:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4318:	f3022322 	vcgt.u8	d2, d2, d18
    431c:	01f35001 	mvnseq	r5, r1
    4320:	01f32251 	mvnseq	r2, r1, asr r2
    4324:	30254052 	eorcc	r4, r5, r2, asr r0
    4328:	0001282e 	andeq	r2, r1, lr, lsr #16
    432c:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    433c:	07000000 	streq	r0, [r0, -r0]
    4340:	0a007500 	beq	21748 <__ccfg+0x17a0>
    4344:	9f1affff 	svcls	0x001affff
	...
    4358:	00700005 	rsbseq	r0, r0, r5
    435c:	009f2930 	addseq	r2, pc, r0, lsr r9	; <UNPREDICTABLE>
	...
    436c:	01000000 	mrseq	r0, (UNDEF: 0)
    4370:	00005000 	andeq	r5, r0, r0
    4374:	00000000 	andeq	r0, r0, r0
    4378:	00040000 	andeq	r0, r4, r0
    437c:	9f5001f3 	svcls	0x005001f3
	...
    4390:	00510001 	subseq	r0, r1, r1
    4394:	00000000 	andeq	r0, r0, r0
    4398:	04000000 	streq	r0, [r0], #-0
    439c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    43a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    43b0:	52000100 	andpl	r0, r0, #0, 2
	...
    43bc:	00540001 	subseq	r0, r4, r1
    43c0:	00000000 	andeq	r0, r0, r0
    43c4:	1b000000 	blne	43cc <__exidx_end+0x15d4>
    43c8:	5201f300 	andpl	pc, r1, #0, 6
    43cc:	01f32540 	mvnseq	r2, r0, asr #10
    43d0:	5301f352 	movwpl	pc, #4946	; 0x1352	; <UNPREDICTABLE>
    43d4:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    43d8:	00000f0c 	andeq	r0, r0, ip, lsl #30
    43dc:	01282b80 	smlawbeq	r8, r0, fp, r2
    43e0:	9f131600 	svcls	0x00131600
	...
    43f4:	00530001 	subseq	r0, r3, r1
    43f8:	00000000 	andeq	r0, r0, r0
    43fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4400:	00005500 	andeq	r5, r0, r0, lsl #10
    4404:	00000000 	andeq	r0, r0, r0
    4408:	001b0000 	andseq	r0, fp, r0
    440c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4410:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    4414:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4418:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    441c:	8000000f 	andhi	r0, r0, pc
    4420:	0001282b 	andeq	r2, r1, fp, lsr #16
    4424:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4434:	01000000 	mrseq	r0, (UNDEF: 0)
    4438:	00005600 	andeq	r5, r0, r0, lsl #12
    443c:	00000000 	andeq	r0, r0, r0
    4440:	00060000 	andeq	r0, r6, r0
    4444:	00710070 	rsbseq	r0, r1, r0, ror r0
    4448:	00009f22 	andeq	r9, r0, r2, lsr #30
    444c:	00000000 	andeq	r0, r0, r0
    4450:	00010000 	andeq	r0, r1, r0
    4454:	00000056 	andeq	r0, r0, r6, asr r0
    4458:	00000000 	andeq	r0, r0, r0
    445c:	f3002300 	vcgt.u8	d2, d0, d0
    4460:	01f35001 	mvnseq	r5, r1
    4464:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    4468:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    446c:	f3225101 	vrhadd.u32	d5, d2, d1
    4470:	4b405301 	blmi	101907c <__ccfg+0xff90d4>
    4474:	0f0c2224 	svceq	0x000c2224
    4478:	2b800000 	blcs	fe004480 <_estack+0xddfff480>
    447c:	16000128 	strne	r0, [r0], -r8, lsr #2
    4480:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4490:	00060000 	andeq	r0, r6, r0
    4494:	00740076 	rsbseq	r0, r4, r6, ror r0
    4498:	00009f1a 	andeq	r9, r0, sl, lsl pc
    449c:	00000000 	andeq	r0, r0, r0
    44a0:	00010000 	andeq	r0, r1, r0
    44a4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    44b4:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    44c0:	01f30023 	mvnseq	r0, r3, lsr #32
    44c4:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    44c8:	f3022322 	vcgt.u8	d2, d2, d18
    44cc:	01f35001 	mvnseq	r5, r1
    44d0:	01f32251 	mvnseq	r2, r1, asr r2
    44d4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    44d8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    44dc:	282b8000 	stmdacs	fp!, {pc}
    44e0:	13160001 	tstne	r6, #1
    44e4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    44f4:	76000700 	strvc	r0, [r0], -r0, lsl #14
    44f8:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    44fc:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    450c:	00050000 	andeq	r0, r5, r0
    4510:	29300070 	ldmdbcs	r0!, {r4, r5, r6}
    4514:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4518:	00000000 	andeq	r0, r0, r0
    451c:	002b3c00 	eoreq	r3, fp, r0, lsl #24
    4520:	002b5400 	eoreq	r5, fp, r0, lsl #8
    4524:	50000100 	andpl	r0, r0, r0, lsl #2
    4528:	00002b54 	andeq	r2, r0, r4, asr fp
    452c:	00002b8e 	andeq	r2, r0, lr, lsl #23
    4530:	8e550001 	cdphi	0, 5, cr0, cr5, cr1, {0}
    4534:	9800002b 	stmdals	r0, {r0, r1, r3, r5}
    4538:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    453c:	5001f300 	andpl	pc, r1, r0, lsl #6
    4540:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4544:	00000000 	andeq	r0, r0, r0
    4548:	002b3c00 	eoreq	r3, fp, r0, lsl #24
    454c:	002b4200 	eoreq	r4, fp, r0, lsl #4
    4550:	51000100 	mrspl	r0, (UNDEF: 16)
    4554:	00002b42 	andeq	r2, r0, r2, asr #22
    4558:	00002b7a 	andeq	r2, r0, sl, ror fp
    455c:	7a540001 	bvc	1504568 <__ccfg+0x14e45c0>
    4560:	9800002b 	stmdals	r0, {r0, r1, r3, r5}
    4564:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    4568:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    456c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4570:	00000000 	andeq	r0, r0, r0
    4574:	002b7600 	eoreq	r7, fp, r0, lsl #12
    4578:	002b8a00 	eoreq	r8, fp, r0, lsl #20
    457c:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4588:	00002b76 	andeq	r2, r0, r6, ror fp
    458c:	00002b7a 	andeq	r2, r0, sl, ror fp
    4590:	7a540001 	bvc	150459c <__ccfg+0x14e45f4>
    4594:	8a00002b 	bhi	4648 <__exidx_end+0x1850>
    4598:	0400002b 	streq	r0, [r0], #-43	; 0xffffffd5
    459c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    45a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    45a4:	00000000 	andeq	r0, r0, r0
    45a8:	002b9800 	eoreq	r9, fp, r0, lsl #16
    45ac:	002bb600 	eoreq	fp, fp, r0, lsl #12
    45b0:	50000100 	andpl	r0, r0, r0, lsl #2
    45b4:	00002bb6 			; <UNDEFINED> instruction: 0x00002bb6
    45b8:	00002bc4 	andeq	r2, r0, r4, asr #23
    45bc:	01f30004 	mvnseq	r0, r4
    45c0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    45d0:	00010000 	andeq	r0, r1, r0
    45d4:	00000050 	andeq	r0, r0, r0, asr r0
    45d8:	00000000 	andeq	r0, r0, r0
    45dc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    45e8:	01f30004 	mvnseq	r0, r4
    45ec:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    45fc:	00010000 	andeq	r0, r1, r0
    4600:	00000055 	andeq	r0, r0, r5, asr r0
	...
    4610:	70000700 	andvc	r0, r0, r0, lsl #14
    4614:	1c007300 	stcne	3, cr7, [r0], {-0}
    4618:	00009f19 	andeq	r9, r0, r9, lsl pc
    461c:	00000000 	andeq	r0, r0, r0
    4620:	00040000 	andeq	r0, r4, r0
    4624:	9f190070 	svcls	0x00190070
	...
    4638:	d00a0004 	andle	r0, sl, r4
    463c:	00009f07 	andeq	r9, r0, r7, lsl #30
    4640:	00000000 	andeq	r0, r0, r0
    4644:	00010000 	andeq	r0, r1, r0
    4648:	00000050 	andeq	r0, r0, r0, asr r0
    464c:	00000000 	andeq	r0, r0, r0
    4650:	72000500 	andvc	r0, r0, #0, 10
    4654:	9f254000 	svcls	0x00254000
	...
    4660:	00500001 	subseq	r0, r0, r1
    4664:	00000000 	andeq	r0, r0, r0
    4668:	04000000 	streq	r0, [r0], #-0
    466c:	07d00a00 	ldrbeq	r0, [r0, r0, lsl #20]
    4670:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4674:	00000000 	andeq	r0, r0, r0
    4678:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    468c:	00500001 	subseq	r0, r0, r1
	...
    469c:	01000000 	mrseq	r0, (UNDEF: 0)
    46a0:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	00000050 	andeq	r0, r0, r0, asr r0
    46b8:	00000000 	andeq	r0, r0, r0
    46bc:	70000300 	andvc	r0, r0, r0, lsl #6
    46c0:	00009f1b 	andeq	r9, r0, fp, lsl pc
    46c4:	00000000 	andeq	r0, r0, r0
    46c8:	00040000 	andeq	r0, r4, r0
    46cc:	9f5001f3 	svcls	0x005001f3
	...
    46e0:	00740007 	rsbseq	r0, r4, r7
    46e4:	26482448 	strbcs	r2, [r8], -r8, asr #8
    46e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    46f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4704:	01f30006 	mvnseq	r0, r6
    4708:	9f1c4b50 	svcls	0x001c4b50
	...
    471c:	00550001 	subseq	r0, r5, r1
    4720:	00000000 	andeq	r0, r0, r0
    4724:	0c000000 	stceq	0, cr0, [r0], {-0}
    4728:	5001f300 	andpl	pc, r1, r0, lsl #6
    472c:	01f31c4b 	mvnseq	r1, fp, asr #24
    4730:	1e1c4b50 			; <UNDEFINED> instruction: 0x1e1c4b50
    4734:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4744:	71002c00 	tstvc	r0, r0, lsl #24
    4748:	71264000 			; <UNDEFINED> instruction: 0x71264000
    474c:	48244000 	stmdami	r4!, {lr}
    4750:	1e007026 	cdpne	0, 0, cr7, cr0, cr6, {1}
    4754:	71222633 			; <UNDEFINED> instruction: 0x71222633
    4758:	48244800 	stmdami	r4!, {fp, lr}
    475c:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    4760:	7422263a 	strtvc	r2, [r2], #-1594	; 0xfffff9c6
    4764:	48244800 	stmdami	r4!, {fp, lr}
    4768:	1e007526 	cfsh32ne	mvfx7, mvfx0, #22
    476c:	421e0070 	andsmi	r0, lr, #112	; 0x70
    4770:	009f2226 	addseq	r2, pc, r6, lsr #4
    4774:	00000000 	andeq	r0, r0, r0
    4778:	32000000 	andcc	r0, r0, #0
    477c:	40007100 	andmi	r7, r0, r0, lsl #2
    4780:	5001f326 	andpl	pc, r1, r6, lsr #6
    4784:	00711c4b 	rsbseq	r1, r1, fp, asr #24
    4788:	26482440 	strbcs	r2, [r8], -r0, asr #8
    478c:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    4790:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    4794:	00752648 	rsbseq	r2, r5, r8, asr #12
    4798:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    479c:	4b5001f3 	blmi	1404f70 <__ccfg+0x13e4fc8>
    47a0:	4800741c 	stmdami	r0, {r2, r3, r4, sl, ip, sp, lr}
    47a4:	1e264824 	cdpne	8, 2, cr4, cr6, cr4, {1}
    47a8:	421e0075 	andsmi	r0, lr, #117	; 0x75
    47ac:	009f2226 	addseq	r2, pc, r6, lsr #4
	...
    47bc:	01000000 	mrseq	r0, (UNDEF: 0)
    47c0:	00005000 	andeq	r5, r0, r0
    47c4:	00000000 	andeq	r0, r0, r0
    47c8:	00040000 	andeq	r0, r4, r0
    47cc:	9f5001f3 	svcls	0x005001f3
	...
    47e0:	0070000b 	rsbseq	r0, r0, fp
    47e4:	461e0070 			; <UNDEFINED> instruction: 0x461e0070
    47e8:	1c007026 	stcne	0, cr7, [r0], {38}	; 0x26
    47ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    47f0:	00000000 	andeq	r0, r0, r0
    47f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4800:	01f3000e 	mvnseq	r0, lr
    4804:	5001f350 	andpl	pc, r1, r0, asr r3	; <UNPREDICTABLE>
    4808:	f326461e 	vmin.u32	d4, d6, d14
    480c:	9f1c5001 	svcls	0x001c5001
	...
    4820:	00550001 	subseq	r0, r5, r1
    4824:	00000000 	andeq	r0, r0, r0
    4828:	05000000 	streq	r0, [r0, #-0]
    482c:	10380c00 	eorsne	r0, r8, r0, lsl #24
    4830:	00004009 	andeq	r4, r0, r9
	...
    4840:	00010000 	andeq	r0, r1, r0
    4844:	00000056 	andeq	r0, r0, r6, asr r0
	...
    4854:	70000600 	andvc	r0, r0, r0, lsl #12
    4858:	1c007600 	stcne	6, cr7, [r0], {-0}
    485c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4860:	00000000 	andeq	r0, r0, r0
    4864:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4878:	0070000a 	rsbseq	r0, r0, sl
    487c:	2444fc08 	strbcs	pc, [r4], #-3080	; 0xfffff3f8	; <UNPREDICTABLE>
    4880:	9f25461a 	svcls	0x0025461a
	...
    4894:	00530001 	subseq	r0, r3, r1
	...
    48a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    48a8:	0a007300 	beq	214b0 <__ccfg+0x1508>
    48ac:	3a1afc00 	bcc	6c38b4 <__ccfg+0x6a390c>
    48b0:	00009f25 	andeq	r9, r0, r5, lsr #30
	...
    48c0:	000a0000 	andeq	r0, sl, r0
    48c4:	fc080073 	stc2	0, cr0, [r8], {115}	; 0x73
    48c8:	421a2440 	andsmi	r2, sl, #64, 8	; 0x40000000
    48cc:	00009f25 	andeq	r9, r0, r5, lsr #30
    48d0:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000002c 	andeq	r0, r0, ip, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	000000c8 	andeq	r0, r0, r8, asr #1
  14:	0000015c 	andeq	r0, r0, ip, asr r1
  18:	00000224 	andeq	r0, r0, r4, lsr #4
  1c:	0000006c 	andeq	r0, r0, ip, rrx
  20:	00000290 	muleq	r0, r0, r2
  24:	0000017c 	andeq	r0, r0, ip, ror r1
	...
  30:	000000e4 	andeq	r0, r0, r4, ror #1
  34:	07930002 	ldreq	r0, [r3, r2]
  38:	00040000 	andeq	r0, r4, r0
  3c:	00000000 	andeq	r0, r0, r0
			i = k;
  40:	0000040c 	andeq	r0, r0, ip, lsl #8
				j->Next = k;
  44:	0000000c 	andeq	r0, r0, ip
  48:	00000418 	andeq	r0, r0, r8, lsl r4
}
  4c:	0000002c 	andeq	r0, r0, ip, lsr #32
  50:	00000444 	andeq	r0, r0, r4, asr #8
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
		release;
  58:	00000470 	andeq	r0, r0, r0, ror r4
  5c:	0000003c 	andeq	r0, r0, ip, lsr r0
  60:	00000000 	andeq	r0, r0, r0
  64:	00000040 	andeq	r0, r0, r0, asr #32
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000020 	andeq	r0, r0, r0, lsr #32
  70:	000004ac 	andeq	r0, r0, ip, lsr #9
  74:	00000054 	andeq	r0, r0, r4, asr r0
  78:	00000500 	andeq	r0, r0, r0, lsl #10
  7c:	00000040 	andeq	r0, r0, r0, asr #32
  80:	00000540 	andeq	r0, r0, r0, asr #10
  84:	00000028 	andeq	r0, r0, r8, lsr #32
  88:	00000568 	andeq	r0, r0, r8, ror #10
  8c:	00000114 	andeq	r0, r0, r4, lsl r1
	descriptors [fd] = s;
  90:	0000067c 	andeq	r0, r0, ip, ror r6
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000050 	andeq	r0, r0, r0, asr r0
  98:	000006cc 	andeq	r0, r0, ip, asr #13
	if (s == NULL)
  9c:	00000054 	andeq	r0, r0, r4, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	00000720 	andeq	r0, r0, r0, lsr #14
  a4:	00000038 	andeq	r0, r0, r8, lsr r0
  a8:	00000758 	andeq	r0, r0, r8, asr r7
  ac:	00000110 	andeq	r0, r0, r0, lsl r1
  b0:	00000000 	andeq	r0, r0, r0
  b4:	0000000c 	andeq	r0, r0, ip
  b8:	00000868 	andeq	r0, r0, r8, ror #16
  bc:	000000c0 	andeq	r0, r0, r0, asr #1
  c0:	00000928 	andeq	r0, r0, r8, lsr #18
  c4:	00000044 	andeq	r0, r0, r4, asr #32
  c8:	0000096c 	andeq	r0, r0, ip, ror #18
  cc:	0000003c 	andeq	r0, r0, ip, lsr r0
  d0:	000009a8 	andeq	r0, r0, r8, lsr #19
  d4:	000000a4 	andeq	r0, r0, r4, lsr #1
  d8:	00000a4c 	andeq	r0, r0, ip, asr #20
  dc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e0:	00000000 	andeq	r0, r0, r0
  e4:	00000024 	andeq	r0, r0, r4, lsr #32
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000028 	andeq	r0, r0, r8, lsr #32
  f0:	00000c04 	andeq	r0, r0, r4, lsl #24
			wwait (st, 50);
  f4:	00000258 	andeq	r0, r0, r8, asr r2
			curr += 0x1000;
  f8:	00000000 	andeq	r0, r0, r0
  fc:	00000030 	andeq	r0, r0, r0, lsr r0
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	0000005c 	andeq	r0, r0, ip, asr r0
			upto = EE_SIZE - 1;
 108:	00000e5c 	andeq	r0, r0, ip, asr lr
 10c:	00000060 	andeq	r0, r0, r0, rrx
	...
 118:	00000154 	andeq	r0, r0, r4, asr r1
 11c:	1c230002 	stcne	0, cr0, [r3], #-8
 120:	00040000 	andeq	r0, r4, r0
 124:	00000000 	andeq	r0, r0, r0
            ch = redCharacter;
 128:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
            onTime = redOn;
 12c:	0000003c 	andeq	r0, r0, ip, lsr r0
            offTime = redOff;
 130:	00000ef8 	strdeq	r0, [r0], -r8
 134:	00000080 	andeq	r0, r0, r0, lsl #1
            ledFlag = 0;
 138:	00000f78 	andeq	r0, r0, r8, ror pc
        if(On)
 13c:	00000018 	andeq	r0, r0, r8, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	00000024 	andeq	r0, r0, r4, lsr #32
            leds(led,1);
 148:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
            leds(led,0);
 14c:	00000010 	andeq	r0, r0, r0, lsl r0
 150:	00000000 	andeq	r0, r0, r0
 154:	0000002c 	andeq	r0, r0, ip, lsr #32
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000004c 	andeq	r0, r0, ip, asr #32
        if (displayCycle)
 160:	00000000 	andeq	r0, r0, r0
 164:	00000006 	andeq	r0, r0, r6
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
 168:	00000fa0 	andeq	r0, r0, r0, lsr #31
 16c:	000000cc 	andeq	r0, r0, ip, asr #1
 170:	0000106c 	andeq	r1, r0, ip, rrx
        if(onTime > 0)
 174:	00000014 	andeq	r0, r0, r4, lsl r0
            delay(onTime, OFF_PERIOD);
 178:	00001080 	andeq	r1, r0, r0, lsl #1
        when(&On, Check_PERIOD);
 17c:	00000034 	andeq	r0, r0, r4, lsr r0
 180:	000010b4 	strheq	r1, [r0], -r4
        release;
 184:	00000034 	andeq	r0, r0, r4, lsr r0
            led = greenLed;
 188:	00000000 	andeq	r0, r0, r0
 18c:	0000002c 	andeq	r0, r0, ip, lsr #32
            ch = greenCharacter;
 190:	000010e8 	andeq	r1, r0, r8, ror #1
            onTime = greenOn;
 194:	00000024 	andeq	r0, r0, r4, lsr #32
 198:	0000110c 	andeq	r1, r0, ip, lsl #2
            offTime = greenOff;
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	00000000 	andeq	r0, r0, r0
            leds(led,0);
 1a4:	00000014 	andeq	r0, r0, r4, lsl r0
 1a8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 1ac:	00000040 	andeq	r0, r0, r0, asr #32
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
        leds(led,0);
 1b8:	00001144 	andeq	r1, r0, r4, asr #2
 1bc:	00000024 	andeq	r0, r0, r4, lsr #32
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	00000020 	andeq	r0, r0, r0, lsr #32
 1c8:	00001168 	andeq	r1, r0, r8, ror #2
            proceed Check_PERIOD;
 1cc:	0000000e 	andeq	r0, r0, lr
}
 1d0:	00000000 	andeq	r0, r0, r0
 1d4:	00000010 	andeq	r0, r0, r0, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	00000010 	andeq	r0, r0, r0, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000006 	andeq	r0, r0, r6
 1f0:	00001176 	andeq	r1, r0, r6, ror r1
 1f4:	00000014 	andeq	r0, r0, r4, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	0000000e 	andeq	r0, r0, lr
 200:	0000118c 	andeq	r1, r0, ip, lsl #3
 204:	00000024 	andeq	r0, r0, r4, lsr #32
 208:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
 20c:	0000009c 	muleq	r0, ip, r0
 210:	0000124c 	andeq	r1, r0, ip, asr #4
 214:	00000050 	andeq	r0, r0, r0, asr r0
 218:	0000129c 	muleq	r0, ip, r2
 21c:	00000048 	andeq	r0, r0, r8, asr #32
 220:	000012e4 	andeq	r1, r0, r4, ror #5
    word number = 0;
 224:	00000050 	andeq	r0, r0, r0, asr r0
    int numbersIndex = 0;
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000058 	andeq	r0, r0, r8, asr r0
        if(settingsInput[i] == ' ') {
 230:	00001334 	andeq	r1, r0, r4, lsr r3
 234:	000000a8 	andeq	r0, r0, r8, lsr #1
            numbers[numbersIndex] = number;
 238:	000013dc 	ldrdeq	r1, [r0], -ip
 23c:	00000034 	andeq	r0, r0, r4, lsr r0
            number = 0;
 240:	00001410 	andeq	r1, r0, r0, lsl r4
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
 244:	00000018 	andeq	r0, r0, r8, lsl r0
    redOn = numbers[0];
 248:	00000000 	andeq	r0, r0, r0
 24c:	00000030 	andeq	r0, r0, r0, lsr r0
    redOff = numbers[1];
 250:	00000000 	andeq	r0, r0, r0
 254:	00000038 	andeq	r0, r0, r8, lsr r0
    greenOn = numbers[2];
 258:	00001428 	andeq	r1, r0, r8, lsr #8
 25c:	0000013c 	andeq	r0, r0, ip, lsr r1
    greenOff = numbers[3];
 260:	00000000 	andeq	r0, r0, r0
 264:	00000024 	andeq	r0, r0, r4, lsr #32
	...
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 270:	00000104 	andeq	r0, r0, r4, lsl #2
            number = number * 10;
 274:	2e460002 	cdpcs	0, 4, cr0, cr6, cr2, {0}
            number += settingsInput[i] - 48;
 278:	00040000 	andeq	r0, r4, r0
	...
 284:	00000016 	andeq	r0, r0, r6, lsl r0
 288:	00000000 	andeq	r0, r0, r0
 28c:	0000001a 	andeq	r0, r0, sl, lsl r0
fsm root {
 290:	00000000 	andeq	r0, r0, r0
 294:	0000000e 	andeq	r0, r0, lr
 298:	00000000 	andeq	r0, r0, r0
 29c:	0000004c 	andeq	r0, r0, ip, asr #32
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	0000008c 	andeq	r0, r0, ip, lsl #1
 2a8:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter your name: ");
 2ac:	00000070 	andeq	r0, r0, r0, ror r0
 2b0:	00000000 	andeq	r0, r0, r0
        ser_in(Get_Name, username, NAME_LENGTH);
 2b4:	000000c0 	andeq	r0, r0, r0, asr #1
 2b8:	00000000 	andeq	r0, r0, r0
        runfsm blinker;
 2bc:	0000006c 	andeq	r0, r0, ip, rrx
 2c0:	00000000 	andeq	r0, r0, r0
        ser_outf(Show_Menu, "Welcome %s\n\r"
 2c4:	00000024 	andeq	r0, r0, r4, lsr #32
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000080 	andeq	r0, r0, r0, lsl #1
        ser_inf(Get_Choice, "%c", &choice);
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000070 	andeq	r0, r0, r0, ror r0
        if (choice == 'A' || choice == 'a'){
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000078 	andeq	r0, r0, r8, ror r0
 2e0:	00000000 	andeq	r0, r0, r0
            proceed Adjust_Intervals;
 2e4:	000000bc 	strheq	r0, [r0], -ip
            proceed Monitor;
 2e8:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 2ec:	0000003a 	andeq	r0, r0, sl, lsr r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000000a 	andeq	r0, r0, sl
 300:	00000000 	andeq	r0, r0, r0
        processSettingsInput(settings);
 304:	0000002c 	andeq	r0, r0, ip, lsr #32
        On = YES;
 308:	00000000 	andeq	r0, r0, r0
 30c:	00000060 	andeq	r0, r0, r0, rrx
        trigger(&On);
 310:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 314:	00000040 	andeq	r0, r0, r0, asr #32
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000002c 	andeq	r0, r0, ip, lsr #32
 320:	00000000 	andeq	r0, r0, r0
 324:	0000003c 	andeq	r0, r0, ip, lsr r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	00000006 	andeq	r0, r0, r6
 330:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 334:	00000068 	andeq	r0, r0, r8, rrx
 338:	00000000 	andeq	r0, r0, r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 33c:	00000050 	andeq	r0, r0, r0, asr r0
 340:	00000000 	andeq	r0, r0, r0
        displayCycle = YES;
 344:	0000009c 	muleq	r0, ip, r0
        ser_inf(Await_Stop, "%c", &ch);
 348:	00000000 	andeq	r0, r0, r0
 34c:	00000040 	andeq	r0, r0, r0, asr #32
 350:	00000000 	andeq	r0, r0, r0
        if(ch == 'S' || ch == 's'){
 354:	00000034 	andeq	r0, r0, r4, lsr r0
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000003c 	andeq	r0, r0, ip, lsr r0
            displayCycle = NO;
 360:	00000000 	andeq	r0, r0, r0
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
            proceed Show_Menu;
 368:	00001564 	andeq	r1, r0, r4, ror #10
        proceed Monitor;
 36c:	00000002 	andeq	r0, r0, r2
	...
 378:	00000034 	andeq	r0, r0, r4, lsr r0
        leds(1, 0);
 37c:	417d0002 	cmnmi	sp, r2
 380:	00040000 	andeq	r0, r4, r0
 384:	00000000 	andeq	r0, r0, r0
 388:	00001566 	andeq	r1, r0, r6, ror #10
 38c:	00000002 	andeq	r0, r0, r2
 390:	00001568 	andeq	r1, r0, r8, ror #10
        leds(0, 0);
 394:	00000002 	andeq	r0, r0, r2
 398:	0000156a 	andeq	r1, r0, sl, ror #10
 39c:	00000002 	andeq	r0, r0, r2
        proceed Show_Menu;
 3a0:	0000156c 	andeq	r1, r0, ip, ror #10
 3a4:	00000044 	andeq	r0, r0, r4, asr #32
	...
        } else if (choice == 'S' || choice == 's') {
 3b0:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed Stop;
 3b4:	42f50002 	rscsmi	r0, r5, #2
        } else if (choice == 'V' || choice == 'v') {
 3b8:	00040000 	andeq	r0, r4, r0
	...
 3c8:	00000024 	andeq	r0, r0, r4, lsr #32
 3cc:	48300002 	ldmdami	r0!, {r1}
 3d0:	00040000 	andeq	r0, r4, r0
	...
 3dc:	00000002 	andeq	r0, r0, r2
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000058 	andeq	r0, r0, r8, asr r0
	...
 3f0:	00000024 	andeq	r0, r0, r4, lsr #32
 3f4:	4d340002 	ldcmi	0, cr0, [r4, #-8]!
 3f8:	00040000 	andeq	r0, r4, r0
	...
 404:	000000cc 	andeq	r0, r0, ip, asr #1
 408:	00000000 	andeq	r0, r0, r0
static void devinit_uart (int devnum) {
 40c:	00000038 	andeq	r0, r0, r8, lsr r0
	...
void udelay (volatile word n) {
 418:	0000008c 	andeq	r0, r0, ip, lsl #1
 41c:	522e0002 	eorpl	r0, lr, #2
	while (n) {
 420:	00040000 	andeq	r0, r4, r0
 424:	00000000 	andeq	r0, r0, r0
}
 428:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
	while (n--);
 42c:	00000034 	andeq	r0, r0, r4, lsr r0
 430:	000015ec 	andeq	r1, r0, ip, ror #11
 434:	00000030 	andeq	r0, r0, r0, lsr r0
		n--;
 438:	0000161c 	andeq	r1, r0, ip, lsl r6
 43c:	00000018 	andeq	r0, r0, r8, lsl r0
 440:	00001634 	andeq	r1, r0, r4, lsr r6
void mdelay (volatile word n) {
 444:	00000054 	andeq	r0, r0, r4, asr r0
 448:	00001688 	andeq	r1, r0, r8, lsl #13
	while (n) {
 44c:	00000040 	andeq	r0, r0, r0, asr #32
 450:	000016c8 	andeq	r1, r0, r8, asr #13
}
 454:	00000024 	andeq	r0, r0, r4, lsr #32
		udelay (999);
 458:	000016ec 	andeq	r1, r0, ip, ror #13
 45c:	00000014 	andeq	r0, r0, r4, lsl r0
		n--;
 460:	00001700 	andeq	r1, r0, r0, lsl #14
 464:	00000014 	andeq	r0, r0, r4, lsl r0
 468:	00000000 	andeq	r0, r0, r0
 46c:	00000064 	andeq	r0, r0, r4, rrx
void __pi_ondomain (lword d) {
 470:	00000000 	andeq	r0, r0, r0
 474:	00000128 	andeq	r0, r0, r8, lsr #2
		if (__pi_systat.effpdm > 1)
 478:	00000000 	andeq	r0, r0, r0
 47c:	000000ec 	andeq	r0, r0, ip, ror #1
			__pi_systat.effpdm = 1;
 480:	00000000 	andeq	r0, r0, r0
	PRCMPowerDomainOn (d);
 484:	00000002 	andeq	r0, r0, r2
 488:	00000000 	andeq	r0, r0, r0
 48c:	00000004 	andeq	r0, r0, r4
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 490:	00000000 	andeq	r0, r0, r0
 494:	00000014 	andeq	r0, r0, r4, lsl r0
 498:	00000000 	andeq	r0, r0, r0
	__pi_systat.ondmns |= d;
 49c:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
}
 4a8:	0000001c 	andeq	r0, r0, ip, lsl r0
void __pi_syserror (word ec, const char *m) {
 4ac:	5cd90002 	ldclpl	0, cr0, [r9], {2}
	diag ("SYSERR: %x, %s", ec, m);
 4b0:	00040000 	andeq	r0, r4, r0
 4b4:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
 4b8:	00001714 	andeq	r1, r0, r4, lsl r7
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 4bc:	00000078 	andeq	r0, r0, r8, ror r0
	...
		all_leds_blink;
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	60ef0002 	rscvs	r0, pc, r2
 4d0:	00040000 	andeq	r0, r4, r0
 4d4:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 4d8:	0000178c 	andeq	r1, r0, ip, lsl #15
 4dc:	00000054 	andeq	r0, r0, r4, asr r0
	...
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	653f0002 	ldrvs	r0, [pc, #-2]!	; 4f2 <__pi_syserror+0x46>
	while (1) {
 4f0:	00040000 	andeq	r0, r4, r0
 4f4:	00000000 	andeq	r0, r0, r0
 4f8:	000017e0 	andeq	r1, r0, r0, ror #15
 4fc:	00000060 	andeq	r0, r0, r0, rrx
	...
	setdel = __pi_mintk - __pi_old;
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	698f0002 	stmibvs	pc, {r1}	; <UNPREDICTABLE>
 510:	00040000 	andeq	r0, r4, r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 514:	00000000 	andeq	r0, r0, r0
 518:	00001840 	andeq	r1, r0, r0, asr #16
 51c:	00000070 	andeq	r0, r0, r0, ror r0
	...
	sti_tim;
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
}
 52c:	6dc00002 	stclvs	0, cr0, [r0, #8]
 530:	00040000 	andeq	r0, r4, r0
 534:	00000000 	andeq	r0, r0, r0
 538:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
 53c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 548:	0000002c 	andeq	r0, r0, ip, lsr #32
 54c:	72040002 	andvc	r0, r4, #2
 550:	00040000 	andeq	r0, r4, r0
 554:	00000000 	andeq	r0, r0, r0
	sti_aux;
 558:	000019cc 	andeq	r1, r0, ip, asr #19
}
 55c:	00000020 	andeq	r0, r0, r0, lsr #32
 560:	000019ec 	andeq	r1, r0, ip, ror #19
 564:	00000230 	andeq	r0, r0, r0, lsr r2
void AONRTCIntHandler () {
 568:	00001c1c 	andeq	r1, r0, ip, lsl ip
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 56c:	00000050 	andeq	r0, r0, r0, asr r0
	...
		if (__pi_utims [0] == 0)
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	77f80002 	ldrbvc	r0, [r8, r2]!
		if (*(__pi_utims [0])) {
 580:	00040000 	andeq	r0, r4, r0
 584:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [0]))--;
 588:	00001c6c 	andeq	r1, r0, ip, ror #24
		if (__pi_utims [1] == 0)
 58c:	00000390 	muleq	r0, r0, r3
	...
			(*(__pi_utims [1]))--;
 598:	0000001c 	andeq	r0, r0, ip, lsl r0
		if (__pi_utims [2] == 0)
 59c:	7d8b0002 	stcvc	0, cr0, [fp, #8]
		if (*(__pi_utims [2])) {
 5a0:	00040000 	andeq	r0, r4, r0
			(*(__pi_utims [2]))--;
 5a4:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [3] != 0) {
 5a8:	00001ffc 	strdeq	r1, [r0], -ip
			if (*(__pi_utims [3])) {
 5ac:	00000030 	andeq	r0, r0, r0, lsr r0
	...
	if (__pi_systat.ledsts) {
 5b8:	00000024 	andeq	r0, r0, r4, lsr #32
 5bc:	7e640002 	cdpvc	0, 6, cr0, cr4, cr2, {0}
		if (__pi_systat.ledblc++ == 0) {
 5c0:	00040000 	andeq	r0, r4, r0
	...
			if (__pi_systat.ledblk) {
 5cc:	00000020 	andeq	r0, r0, r0, lsr #32
 5d0:	0000202c 	andeq	r2, r0, ip, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 5d4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 5e0:	0000003c 	andeq	r0, r0, ip, lsr r0
 5e4:	7fab0002 	svcvc	0x00ab0002
				if (__pi_systat.ledsts & 0x4)
 5e8:	00040000 	andeq	r0, r4, r0
				__pi_systat.ledblk = 0;
 5ec:	00000000 	andeq	r0, r0, r0
 5f0:	00002044 	andeq	r2, r0, r4, asr #32
			if (__pi_systat.fstblk)
 5f4:	00000008 	andeq	r0, r0, r8
 5f8:	00000000 	andeq	r0, r0, r0
				__pi_systat.ledblc = 200;
 5fc:	00000006 	andeq	r0, r0, r6
	if (events & AON_RTC_EVFLAGS_CH0) {
 600:	0000204c 	andeq	r2, r0, ip, asr #32
		cli_tim;
 604:	00000008 	andeq	r0, r0, r8
		__pi_new += setdel;
 608:	00000000 	andeq	r0, r0, r0
 60c:	00000006 	andeq	r0, r0, r6
		setdel = 0;
 610:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
 614:	00000008 	andeq	r0, r0, r8
	...
 620:	00000024 	andeq	r0, r0, r4, lsr #32
		aux_timer_inactive = 1;
 624:	80e50002 	rschi	r0, r5, r2
 628:	00040000 	andeq	r0, r4, r0
				if (__pi_systat.ledsts & 0x1)
 62c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 630:	00002054 	andeq	r2, r0, r4, asr r0
 634:	000000d4 	ldrdeq	r0, [r0], -r4
				if (__pi_systat.ledsts & 0x2)
 638:	00002128 	andeq	r2, r0, r8, lsr #2
 63c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
				__pi_systat.ledblk = 1;
 648:	000000b4 	strheq	r0, [r0], -r4
 64c:	82f00002 	rscshi	r0, r0, #2
		if (aux_timer_inactive) {
 650:	00040000 	andeq	r0, r4, r0
			cli_aux;
 654:	00000000 	andeq	r0, r0, r0
 658:	000021cc 	andeq	r2, r0, ip, asr #3
 65c:	0000007c 	andeq	r0, r0, ip, ror r0
 660:	00002248 	andeq	r2, r0, r8, asr #4
 664:	000000ac 	andeq	r0, r0, ip, lsr #1
 668:	000022f4 	strdeq	r2, [r0], -r4
 66c:	0000005c 	andeq	r0, r0, ip, asr r0
 670:	00002350 	andeq	r2, r0, r0, asr r3
 674:	00000018 	andeq	r0, r0, r8, lsl r0
 678:	00000000 	andeq	r0, r0, r0
word tci_update_delay_ticks (Boolean force) {
 67c:	00000010 	andeq	r0, r0, r0, lsl r0
	cli_tim;
 680:	00002368 	andeq	r2, r0, r8, ror #6
 684:	00000010 	andeq	r0, r0, r0, lsl r0
	if (setdel) {
 688:	00002378 	andeq	r2, r0, r8, ror r3
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 68c:	00000014 	andeq	r0, r0, r4, lsl r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 690:	0000238c 	andeq	r2, r0, ip, lsl #7
 694:	00000064 	andeq	r0, r0, r4, rrx
 698:	000023f0 	strdeq	r2, [r0], -r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 69c:	00000014 	andeq	r0, r0, r4, lsl r0
				AON_RTC_O_CH0CMP)) - gettav ());
 6a0:	00002404 	andeq	r2, r0, r4, lsl #8
	return NO;
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
			setdel = 0;
 6a8:	00002418 	andeq	r2, r0, r8, lsl r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
 6b0:	0000242c 	andeq	r2, r0, ip, lsr #8
}
 6b4:	00000028 	andeq	r0, r0, r8, lsr #32
		sti_tim;
 6b8:	00002454 	andeq	r2, r0, r4, asr r4
		return YES;
 6bc:	00000010 	andeq	r0, r0, r0, lsl r0
 6c0:	00002464 	andeq	r2, r0, r4, ror #8
 6c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 6c8:	00002490 	muleq	r0, r0, r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6cc:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTDisable (UART0_BASE);
 6d0:	000024a4 	andeq	r2, r0, r4, lsr #9
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
	UARTDisable (UART0_BASE);
 6d8:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
	UARTConfigSetExpClk (UART0_BASE,
 6dc:	00000110 	andeq	r0, r0, r0, lsl r1
 6e0:	000025c8 	andeq	r2, r0, r8, asr #11
 6e4:	00000064 	andeq	r0, r0, r4, rrx
 6e8:	0000262c 	andeq	r2, r0, ip, lsr #12
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 6ec:	00000028 	andeq	r0, r0, r8, lsr #32
 6f0:	00002654 	andeq	r2, r0, r4, asr r6
 6f4:	00000150 	andeq	r0, r0, r0, asr r1
	...
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 700:	0000003c 	andeq	r0, r0, ip, lsr r0
	urates [0] = rate;
 704:	8e0b0002 	cdphi	0, 0, cr0, cr11, cr2, {0}
}
 708:	00040000 	andeq	r0, r4, r0
	...
 714:	000000f4 	strdeq	r0, [r0], -r4
 718:	000027a4 	andeq	r2, r0, r4, lsr #15
 71c:	00000220 	andeq	r0, r0, r0, lsr #4
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 720:	000029c4 	andeq	r2, r0, r4, asr #19
 724:	00000060 	andeq	r0, r0, r0, rrx
 728:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
 72c:	00000078 	andeq	r0, r0, r8, ror r0
 730:	00002a24 	andeq	r2, r0, r4, lsr #20
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 734:	00000018 	andeq	r0, r0, r8, lsl r0
	...
	__pi_uart_setrate (urates [0], __pi_uart);
 740:	00000044 	andeq	r0, r0, r4, asr #32
 744:	97320002 	ldrls	r0, [r2, -r2]!
 748:	00040000 	andeq	r0, r4, r0
	...
 754:	00000010 	andeq	r0, r0, r0, lsl r0
	switch (operation) {
 758:	00000000 	andeq	r0, r0, r0
static int ioreq_uart_a (int operation, char *buf, int len) {
 75c:	00000018 	andeq	r0, r0, r8, lsl r0
 760:	00002a3c 	andeq	r2, r0, ip, lsr sl
 764:	0000004c 	andeq	r0, r0, ip, asr #32
 768:	00000000 	andeq	r0, r0, r0
 76c:	00000030 	andeq	r0, r0, r0, lsr r0
				*buf++ = uart_a_read;
 770:	00002a88 	andeq	r2, r0, r8, lsl #21
 774:	0000006c 	andeq	r0, r0, ip, rrx
			while (len && uart_a_char_available) {
 778:	00002af4 	strdeq	r2, [r0], -r4
 77c:	00000016 	andeq	r0, r0, r6, lsl r0
	...
}
 788:	00000044 	andeq	r0, r0, r4, asr #32
 78c:	9b020002 	blls	8079c <__ccfg+0x607f4>
			uart_a_disable_int;
 790:	00040000 	andeq	r0, r4, r0
			if (uart_a_char_available) {
 794:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
 798:	00002b0c 	andeq	r2, r0, ip, lsl #22
			uart_a_disable_int;
 79c:	00000028 	andeq	r0, r0, r8, lsr #32
 7a0:	00002b34 	andeq	r2, r0, r4, lsr fp
			if (uart_a_char_available) {
 7a4:	00000008 	andeq	r0, r0, r8
 7a8:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 7ac:	00000022 	andeq	r0, r0, r2, lsr #32
 7b0:	00000000 	andeq	r0, r0, r0
				goto Redo_rx;
 7b4:	0000002e 	andeq	r0, r0, lr, lsr #32
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000034 	andeq	r0, r0, r4, lsr r0
			return -2;
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000040 	andeq	r0, r0, r0, asr #32
	...
			while (len && uart_a_room_in_tx) {
 7d0:	00000064 	andeq	r0, r0, r4, rrx
 7d4:	a0ad0002 	adcge	r0, sp, r2
 7d8:	00040000 	andeq	r0, r4, r0
			if (len != operation) {
 7dc:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 7e0:	00002b3c 	andeq	r2, r0, ip, lsr fp
 7e4:	0000005c 	andeq	r0, r0, ip, asr r0
			if (uart_a_room_in_tx) {
 7e8:	00002b98 	muleq	r0, r8, fp
 7ec:	0000002c 	andeq	r0, r0, ip, lsr #32
				uart_a_enable_int;
 7f0:	00000000 	andeq	r0, r0, r0
 7f4:	00000090 	muleq	r0, r0, r0
				*buf++ = uart_a_read;
 7f8:	00000000 	andeq	r0, r0, r0
			if (uart_a_room_in_tx) {
 7fc:	00000018 	andeq	r0, r0, r8, lsl r0
				uart_a_write (*buf);
 800:	00000000 	andeq	r0, r0, r0
 804:	00000060 	andeq	r0, r0, r0, rrx
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000034 	andeq	r0, r0, r4, lsr r0
			uart_a_enable_int;
 810:	00000000 	andeq	r0, r0, r0
 814:	00000038 	andeq	r0, r0, r8, lsr r0
 818:	00000000 	andeq	r0, r0, r0
			return 0;
 81c:	0000000c 	andeq	r0, r0, ip
			if (len == UART_CNTRL_SETRATE) {
 820:	00000000 	andeq	r0, r0, r0
				if (__pi_uart_setrate (*((word*)buf),
 824:	00000034 	andeq	r0, r0, r4, lsr r0
 828:	00000000 	andeq	r0, r0, r0
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
       4:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
       8:	000001d4 	ldrdeq	r0, [r0], -r4
       c:	00000224 	andeq	r0, r0, r4, lsr #4
	...
      18:	00000224 	andeq	r0, r0, r4, lsr #4
      1c:	00000224 	andeq	r0, r0, r4, lsr #4
      20:	0000022e 	andeq	r0, r0, lr, lsr #4
      24:	00000248 	andeq	r0, r0, r8, asr #4
      28:	0000026c 	andeq	r0, r0, ip, ror #4
      2c:	00000290 	muleq	r0, r0, r2
	...
      38:	000002aa 	andeq	r0, r0, sl, lsr #5
      3c:	000003a8 	andeq	r0, r0, r8, lsr #7
			i = k;
      40:	000003ae 	andeq	r0, r0, lr, lsr #7
				j->Next = k;
      44:	000003ca 	andeq	r0, r0, sl, asr #7
	...
}
      50:	000002ce 	andeq	r0, r0, lr, asr #5
      54:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
		release;
      58:	000003ae 	andeq	r0, r0, lr, lsr #7
      5c:	000003c6 	andeq	r0, r0, r6, asr #7
	...
      68:	00000374 	andeq	r0, r0, r4, ror r3
      6c:	00000376 	andeq	r0, r0, r6, ror r3
      70:	00000378 	andeq	r0, r0, r8, ror r3
      74:	0000037c 	andeq	r0, r0, ip, ror r3
	...
      80:	0000038c 	andeq	r0, r0, ip, lsl #7
      84:	0000038e 	andeq	r0, r0, lr, lsl #7
      88:	00000390 	muleq	r0, r0, r3
      8c:	00000392 	muleq	r0, r2, r3
	...
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      98:	000000c8 	andeq	r0, r0, r8, asr #1
	if (s == NULL)
      9c:	00000224 	andeq	r0, r0, r4, lsr #4
		syserror (EMALLOC, "tcv05");
      a0:	00000224 	andeq	r0, r0, r4, lsr #4
      a4:	00000290 	muleq	r0, r0, r2
      a8:	00000290 	muleq	r0, r0, r2
      ac:	0000040c 	andeq	r0, r0, ip, lsl #8
	...
      b8:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
      bc:	000004c0 	andeq	r0, r0, r0, asr #9
      c0:	000004c0 	andeq	r0, r0, r0, asr #9
      c4:	000004c0 	andeq	r0, r0, r0, asr #9
      c8:	000004c4 	andeq	r0, r0, r4, asr #9
      cc:	000004c6 	andeq	r0, r0, r6, asr #9
	...
      d8:	000004c0 	andeq	r0, r0, r0, asr #9
      dc:	000004c2 	andeq	r0, r0, r2, asr #9
      e0:	000004c6 	andeq	r0, r0, r6, asr #9
      e4:	000004c8 	andeq	r0, r0, r8, asr #9
	...
      f0:	000004d8 	ldrdeq	r0, [r0], -r8
			wwait (st, 50);
      f4:	000004da 	ldrdeq	r0, [r0], -sl
			curr += 0x1000;
      f8:	000004dc 	ldrdeq	r0, [r0], -ip
      fc:	000004de 	ldrdeq	r0, [r0], -lr
	...
			upto = EE_SIZE - 1;
     108:	00000512 	andeq	r0, r0, r2, lsl r5
     10c:	00000516 	andeq	r0, r0, r6, lsl r5
     110:	00000518 	andeq	r0, r0, r8, lsl r5
     114:	0000051a 	andeq	r0, r0, sl, lsl r5
     118:	0000051c 	andeq	r0, r0, ip, lsl r5
     11c:	00000524 	andeq	r0, r0, r4, lsr #10
	...
            ch = redCharacter;
     128:	00000548 	andeq	r0, r0, r8, asr #10
            onTime = redOn;
     12c:	0000054e 	andeq	r0, r0, lr, asr #10
            offTime = redOff;
     130:	00000550 	andeq	r0, r0, r0, asr r5
     134:	00000556 	andeq	r0, r0, r6, asr r5
	...
        if(On)
     140:	00000578 	andeq	r0, r0, r8, ror r5
     144:	000005fe 	strdeq	r0, [r0], -lr
            leds(led,1);
     148:	00000624 	andeq	r0, r0, r4, lsr #12
            leds(led,0);
     14c:	0000067c 	andeq	r0, r0, ip, ror r6
	...
     158:	000006ec 	andeq	r0, r0, ip, ror #13
     15c:	000006ee 	andeq	r0, r0, lr, ror #13
        if (displayCycle)
     160:	000006f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     164:	00000704 	andeq	r0, r0, r4, lsl #14
	...
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     170:	00000720 	andeq	r0, r0, r0, lsr #14
        if(onTime > 0)
     174:	00000722 	andeq	r0, r0, r2, lsr #14
            delay(onTime, OFF_PERIOD);
     178:	00000724 	andeq	r0, r0, r4, lsr #14
        when(&On, Check_PERIOD);
     17c:	0000072c 	andeq	r0, r0, ip, lsr #14
	...
            led = greenLed;
     188:	00000868 	andeq	r0, r0, r8, ror #16
     18c:	0000086c 	andeq	r0, r0, ip, ror #16
            ch = greenCharacter;
     190:	0000086e 	andeq	r0, r0, lr, ror #16
            onTime = greenOn;
     194:	00000870 	andeq	r0, r0, r0, ror r8
     198:	00000872 	andeq	r0, r0, r2, ror r8
            offTime = greenOff;
     19c:	00000874 	andeq	r0, r0, r4, ror r8
	...
            leds(led,0);
     1a8:	000008d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1ac:	000008d4 	ldrdeq	r0, [r0], -r4
     1b0:	000008e6 	andeq	r0, r0, r6, ror #17
     1b4:	00000912 	andeq	r0, r0, r2, lsl r9
	...
        leds(led,0);
     1c0:	00000928 	andeq	r0, r0, r8, lsr #18
     1c4:	00000928 	andeq	r0, r0, r8, lsr #18
     1c8:	0000092a 	andeq	r0, r0, sl, lsr #18
            proceed Check_PERIOD;
     1cc:	0000092c 	andeq	r0, r0, ip, lsr #18
	...
}
     1d8:	0000092c 	andeq	r0, r0, ip, lsr #18
     1dc:	0000092e 	andeq	r0, r0, lr, lsr #18
     1e0:	00000930 	andeq	r0, r0, r0, lsr r9
     1e4:	00000932 	andeq	r0, r0, r2, lsr r9
     1e8:	00000938 	andeq	r0, r0, r8, lsr r9
     1ec:	0000093e 	andeq	r0, r0, lr, lsr r9
     1f0:	00000948 	andeq	r0, r0, r8, asr #18
     1f4:	0000094a 	andeq	r0, r0, sl, asr #18
     1f8:	00000956 	andeq	r0, r0, r6, asr r9
     1fc:	00000958 	andeq	r0, r0, r8, asr r9
	...
     208:	0000096c 	andeq	r0, r0, ip, ror #18
     20c:	0000096c 	andeq	r0, r0, ip, ror #18
     210:	0000096e 	andeq	r0, r0, lr, ror #18
     214:	00000970 	andeq	r0, r0, r0, ror r9
	...
     220:	00000972 	andeq	r0, r0, r2, ror r9
    word number = 0;
     224:	00000974 	andeq	r0, r0, r4, ror r9
    int numbersIndex = 0;
     228:	00000976 	andeq	r0, r0, r6, ror r9
     22c:	00000978 	andeq	r0, r0, r8, ror r9
        if(settingsInput[i] == ' ') {
     230:	00000982 	andeq	r0, r0, r2, lsl #19
     234:	00000986 	andeq	r0, r0, r6, lsl #19
            numbers[numbersIndex] = number;
     238:	00000990 	muleq	r0, r0, r9
     23c:	00000992 	muleq	r0, r2, r9
	...
    redOn = numbers[0];
     248:	00000a76 	andeq	r0, r0, r6, ror sl
     24c:	00000a78 	andeq	r0, r0, r8, ror sl
    redOff = numbers[1];
     250:	00000a7a 	andeq	r0, r0, sl, ror sl
     254:	00000a7e 	andeq	r0, r0, lr, ror sl
    greenOn = numbers[2];
     258:	00000a8e 	andeq	r0, r0, lr, lsl #21
     25c:	00000a90 	muleq	r0, r0, sl
	...
}
     268:	00000a78 	andeq	r0, r0, r8, ror sl
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	00000a7a 	andeq	r0, r0, sl, ror sl
     270:	00000a7e 	andeq	r0, r0, lr, ror sl
            number = number * 10;
     274:	00000a8e 	andeq	r0, r0, lr, lsl #21
            number += settingsInput[i] - 48;
     278:	00000a90 	muleq	r0, r0, sl
     27c:	00000aca 	andeq	r0, r0, sl, asr #21
	...
     288:	00000a82 	andeq	r0, r0, r2, lsl #21
     28c:	00000a86 	andeq	r0, r0, r6, lsl #21
fsm root {
     290:	00000aae 	andeq	r0, r0, lr, lsr #21
     294:	00000ab6 			; <UNDEFINED> instruction: 0x00000ab6
	...
     2a0:	00000a86 	andeq	r0, r0, r6, lsl #21
     2a4:	00000a8a 	andeq	r0, r0, sl, lsl #21
     2a8:	00000ac2 	andeq	r0, r0, r2, asr #21
        ser_outf(Initial, "Enter your name: ");
     2ac:	00000ac6 	andeq	r0, r0, r6, asr #21
	...
        ser_in(Get_Name, username, NAME_LENGTH);
     2b8:	00000a8a 	andeq	r0, r0, sl, lsl #21
        runfsm blinker;
     2bc:	00000a8e 	andeq	r0, r0, lr, lsl #21
     2c0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	00000ac2 	andeq	r0, r0, r2, asr #21
	...
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	00000aca 	andeq	r0, r0, sl, asr #21
     2d4:	00000acc 	andeq	r0, r0, ip, asr #21
        if (choice == 'A' || choice == 'a'){
     2d8:	00000ace 	andeq	r0, r0, lr, asr #21
     2dc:	00000ad0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2e0:	00000ad2 	ldrdeq	r0, [r0], -r2
            proceed Adjust_Intervals;
     2e4:	00000ad4 	ldrdeq	r0, [r0], -r4
	...
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	00000acc 	andeq	r0, r0, ip, asr #21
     2f4:	00000ace 	andeq	r0, r0, lr, asr #21
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	00000ad4 	ldrdeq	r0, [r0], -r4
     2fc:	00000ad6 	ldrdeq	r0, [r0], -r6
	...
        On = YES;
     308:	00000ae6 	andeq	r0, r0, r6, ror #21
     30c:	00000ae8 	andeq	r0, r0, r8, ror #21
        trigger(&On);
     310:	00000aea 	andeq	r0, r0, sl, ror #21
        proceed Show_Menu;
     314:	00000aec 	andeq	r0, r0, ip, ror #21
	...
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     320:	00000afe 	strdeq	r0, [r0], -lr
     324:	00000b00 	andeq	r0, r0, r0, lsl #22
     328:	00000b02 	andeq	r0, r0, r2, lsl #22
     32c:	00000b04 	andeq	r0, r0, r4, lsl #22
	...
        proceed Show_Menu;
     338:	00000b46 	andeq	r0, r0, r6, asr #22
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	00000b46 	andeq	r0, r0, r6, asr #22
     340:	00000b4a 	andeq	r0, r0, sl, asr #22
        displayCycle = YES;
     344:	00000b4c 	andeq	r0, r0, ip, asr #22
	...
        ser_inf(Await_Stop, "%c", &ch);
     350:	00000b7c 	andeq	r0, r0, ip, ror fp
        if(ch == 'S' || ch == 's'){
     354:	00000b7e 	andeq	r0, r0, lr, ror fp
     358:	00000b80 	andeq	r0, r0, r0, lsl #23
     35c:	00000b88 	andeq	r0, r0, r8, lsl #23
	...
            proceed Show_Menu;
     368:	00000c04 	andeq	r0, r0, r4, lsl #24
        proceed Monitor;
     36c:	00000c04 	andeq	r0, r0, r4, lsl #24
        On = NO;
     370:	00000c0a 	andeq	r0, r0, sl, lsl #24
     374:	00000c0c 	andeq	r0, r0, ip, lsl #24
     378:	00000c0e 	andeq	r0, r0, lr, lsl #24
        leds(1, 0);
     37c:	00000c12 	andeq	r0, r0, r2, lsl ip
	...
     388:	00000c1e 	andeq	r0, r0, lr, lsl ip
     38c:	00000c20 	andeq	r0, r0, r0, lsr #24
     390:	00000c36 	andeq	r0, r0, r6, lsr ip
        leds(0, 0);
     394:	00000c38 	andeq	r0, r0, r8, lsr ip
     398:	00000c4a 	andeq	r0, r0, sl, asr #24
     39c:	00000c66 	andeq	r0, r0, r6, ror #24
        proceed Show_Menu;
     3a0:	00000c8a 	andeq	r0, r0, sl, lsl #25
     3a4:	00000de4 	andeq	r0, r0, r4, ror #27
	...
        } else if (choice == 'S' || choice == 's') {
     3b0:	00000c1e 	andeq	r0, r0, lr, lsl ip
            proceed Stop;
     3b4:	00000c20 	andeq	r0, r0, r0, lsr #24
        } else if (choice == 'V' || choice == 'v') {
     3b8:	00000cbe 			; <UNDEFINED> instruction: 0x00000cbe
            proceed View_Settings;
     3bc:	00000cc2 	andeq	r0, r0, r2, asr #25
	...
     3c8:	00000cc2 	andeq	r0, r0, r2, asr #25
     3cc:	00000cc2 	andeq	r0, r0, r2, asr #25
     3d0:	00000cc6 	andeq	r0, r0, r6, asr #25
     3d4:	00000cca 	andeq	r0, r0, sl, asr #25
     3d8:	00000cce 	andeq	r0, r0, lr, asr #25
     3dc:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
     3e8:	00000cc2 	andeq	r0, r0, r2, asr #25
     3ec:	00000cc6 	andeq	r0, r0, r6, asr #25
     3f0:	00000cdc 	ldrdeq	r0, [r0], -ip
     3f4:	00000cde 	ldrdeq	r0, [r0], -lr
     3f8:	00000ce2 	andeq	r0, r0, r2, ror #25
     3fc:	00000ce6 	andeq	r0, r0, r6, ror #25
	...
     408:	00000cca 	andeq	r0, r0, sl, asr #25
static void devinit_uart (int devnum) {
     40c:	00000cce 	andeq	r0, r0, lr, asr #25
	adddevfunc (ioreq_uart_a, devnum);
     410:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     414:	00000cd2 	ldrdeq	r0, [r0], -r2
void udelay (volatile word n) {
     418:	00000cd6 	ldrdeq	r0, [r0], -r6
     41c:	00000cda 	ldrdeq	r0, [r0], -sl
	...
}
     428:	00000cde 	ldrdeq	r0, [r0], -lr
	while (n--);
     42c:	00000ce2 	andeq	r0, r0, r2, ror #25
     430:	00000cfc 	strdeq	r0, [r0], -ip
     434:	00000d00 	andeq	r0, r0, r0, lsl #26
		n--;
     438:	00000d02 	andeq	r0, r0, r2, lsl #26
     43c:	00000d0a 	andeq	r0, r0, sl, lsl #26
	...
void mdelay (volatile word n) {
     448:	00000cf4 	strdeq	r0, [r0], -r4
	while (n) {
     44c:	00000cf6 	strdeq	r0, [r0], -r6
     450:	00000cf8 	strdeq	r0, [r0], -r8
}
     454:	00000cfc 	strdeq	r0, [r0], -ip
	...
		n--;
     460:	00000d38 	andeq	r0, r0, r8, lsr sp
     464:	00000d3c 	andeq	r0, r0, ip, lsr sp
     468:	00000d3e 	andeq	r0, r0, lr, lsr sp
     46c:	00000d46 	andeq	r0, r0, r6, asr #26
	...
		if (__pi_systat.effpdm > 1)
     478:	00000d3c 	andeq	r0, r0, ip, lsr sp
     47c:	00000d3e 	andeq	r0, r0, lr, lsr sp
			__pi_systat.effpdm = 1;
     480:	00000d4a 	andeq	r0, r0, sl, asr #26
	PRCMPowerDomainOn (d);
     484:	00000d4c 	andeq	r0, r0, ip, asr #26
	...
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	00000d6a 	andeq	r0, r0, sl, ror #26
     494:	00000d6c 	andeq	r0, r0, ip, ror #26
     498:	00000d6e 	andeq	r0, r0, lr, ror #26
	__pi_systat.ondmns |= d;
     49c:	00000d70 	andeq	r0, r0, r0, ror sp
	...
}
     4a8:	00000d6c 	andeq	r0, r0, ip, ror #26
void __pi_syserror (word ec, const char *m) {
     4ac:	00000d6e 	andeq	r0, r0, lr, ror #26
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	00000d70 	andeq	r0, r0, r0, ror sp
     4b4:	00000d74 	andeq	r0, r0, r4, ror sp
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4c0:	00000dca 	andeq	r0, r0, sl, asr #27
     4c4:	00000dcc 	andeq	r0, r0, ip, asr #27
		all_leds_blink;
     4c8:	00000dcc 	andeq	r0, r0, ip, asr #27
     4cc:	00000dce 	andeq	r0, r0, lr, asr #27
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	00000dd2 	ldrdeq	r0, [r0], -r2
     4dc:	00000dd6 	ldrdeq	r0, [r0], -r6
     4e0:	00000dd8 	ldrdeq	r0, [r0], -r8
     4e4:	00000dda 	ldrdeq	r0, [r0], -sl
	...
	while (1) {
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
     4f8:	00000001 	andeq	r0, r0, r1
     4fc:	00000001 	andeq	r0, r0, r1
	...
	setdel = __pi_mintk - __pi_old;
     508:	00000e5c 	andeq	r0, r0, ip, asr lr
     50c:	00000e5c 	andeq	r0, r0, ip, asr lr
     510:	00000e60 	andeq	r0, r0, r0, ror #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	00000e6c 	andeq	r0, r0, ip, ror #28
	...
     520:	0000040c 	andeq	r0, r0, ip, lsl #8
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	00000418 	andeq	r0, r0, r8, lsl r4
	sti_tim;
     528:	00000418 	andeq	r0, r0, r8, lsl r4
}
     52c:	00000444 	andeq	r0, r0, r4, asr #8
     530:	00000444 	andeq	r0, r0, r4, asr #8
     534:	0000046e 	andeq	r0, r0, lr, ror #8
     538:	00000470 	andeq	r0, r0, r0, ror r4
     53c:	000004ac 	andeq	r0, r0, ip, lsr #9
	cli_aux;
     540:	00000001 	andeq	r0, r0, r1
     544:	00000001 	andeq	r0, r0, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	00000001 	andeq	r0, r0, r1
     54c:	00000001 	andeq	r0, r0, r1
     550:	000004ac 	andeq	r0, r0, ip, lsr #9
     554:	00000500 	andeq	r0, r0, r0, lsl #10
	sti_aux;
     558:	00000500 	andeq	r0, r0, r0, lsl #10
}
     55c:	00000540 	andeq	r0, r0, r0, asr #10
     560:	00000540 	andeq	r0, r0, r0, asr #10
     564:	00000568 	andeq	r0, r0, r8, ror #10
void AONRTCIntHandler () {
     568:	00000568 	andeq	r0, r0, r8, ror #10
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	0000067c 	andeq	r0, r0, ip, ror r6
     570:	0000067c 	andeq	r0, r0, ip, ror r6
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	000006cc 	andeq	r0, r0, ip, asr #13
		if (__pi_utims [0] == 0)
     578:	000006cc 	andeq	r0, r0, ip, asr #13
     57c:	00000720 	andeq	r0, r0, r0, lsr #14
		if (*(__pi_utims [0])) {
     580:	00000720 	andeq	r0, r0, r0, lsr #14
     584:	00000758 	andeq	r0, r0, r8, asr r7
			(*(__pi_utims [0]))--;
     588:	00000758 	andeq	r0, r0, r8, asr r7
		if (__pi_utims [1] == 0)
     58c:	00000868 	andeq	r0, r0, r8, ror #16
		if (*(__pi_utims [1])) {
     590:	00000001 	andeq	r0, r0, r1
			aux_timer_inactive = 0;
     594:	00000001 	andeq	r0, r0, r1
			(*(__pi_utims [1]))--;
     598:	00000868 	andeq	r0, r0, r8, ror #16
		if (__pi_utims [2] == 0)
     59c:	00000928 	andeq	r0, r0, r8, lsr #18
		if (*(__pi_utims [2])) {
     5a0:	00000928 	andeq	r0, r0, r8, lsr #18
			(*(__pi_utims [2]))--;
     5a4:	0000096c 	andeq	r0, r0, ip, ror #18
		if (__pi_utims [3] != 0) {
     5a8:	0000096c 	andeq	r0, r0, ip, ror #18
			if (*(__pi_utims [3])) {
     5ac:	000009a8 	andeq	r0, r0, r8, lsr #19
				aux_timer_inactive = 0;
     5b0:	000009a8 	andeq	r0, r0, r8, lsr #19
				(*(__pi_utims [3]))--;
     5b4:	00000a4c 	andeq	r0, r0, ip, asr #20
	if (__pi_systat.ledsts) {
     5b8:	00000a4c 	andeq	r0, r0, ip, asr #20
     5bc:	00000c04 	andeq	r0, r0, r4, lsl #24
		if (__pi_systat.ledblc++ == 0) {
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
			if (__pi_systat.ledblk) {
     5c8:	00000001 	andeq	r0, r0, r1
     5cc:	00000001 	andeq	r0, r0, r1
     5d0:	00000c04 	andeq	r0, r0, r4, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	00000e5c 	andeq	r0, r0, ip, asr lr
     5d8:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x2)
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	00000001 	andeq	r0, r0, r1
     5e4:	00000001 	andeq	r0, r0, r1
				if (__pi_systat.ledsts & 0x4)
     5e8:	00000e5c 	andeq	r0, r0, ip, asr lr
				__pi_systat.ledblk = 0;
     5ec:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
	...
			if (__pi_systat.fstblk)
     5f8:	00000f78 	andeq	r0, r0, r8, ror pc
				__pi_systat.ledblc = 200;
     5fc:	00000f7a 	andeq	r0, r0, sl, ror pc
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	00000f7a 	andeq	r0, r0, sl, ror pc
		cli_tim;
     604:	00000f7c 	andeq	r0, r0, ip, ror pc
	...
		setdel = 0;
     610:	00000fae 	andeq	r0, r0, lr, lsr #31
		RISE_N_SHINE;
     614:	00001050 	andeq	r1, r0, r0, asr r0
		__pi_new += setdel;
     618:	00001054 	andeq	r1, r0, r4, asr r0
		RISE_N_SHINE;
     61c:	00001058 	andeq	r1, r0, r8, asr r0
	...
		aux_timer_inactive = 1;
     628:	000013ec 	andeq	r1, r0, ip, ror #7
				if (__pi_systat.ledsts & 0x1)
     62c:	000013ee 	andeq	r1, r0, lr, ror #7
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	000013f2 	strdeq	r1, [r0], -r2
     634:	000013f4 	strdeq	r1, [r0], -r4
				if (__pi_systat.ledsts & 0x2)
     638:	000013f8 	strdeq	r1, [r0], -r8
     63c:	000013fc 	strdeq	r1, [r0], -ip
     640:	000013fe 	strdeq	r1, [r0], -lr
				if (__pi_systat.ledsts & 0x8)
     644:	00001408 	andeq	r1, r0, r8, lsl #8
	...
		if (aux_timer_inactive) {
     650:	0000143a 	andeq	r1, r0, sl, lsr r4
			cli_aux;
     654:	0000143c 	andeq	r1, r0, ip, lsr r4
     658:	0000143e 	andeq	r1, r0, lr, lsr r4
     65c:	00001442 	andeq	r1, r0, r2, asr #8
     660:	000014d2 	ldrdeq	r1, [r0], -r2
     664:	00001534 	andeq	r1, r0, r4, lsr r5
     668:	00001538 	andeq	r1, r0, r8, lsr r5
     66c:	0000153c 	andeq	r1, r0, ip, lsr r5
     670:	0000153e 	andeq	r1, r0, lr, lsr r5
     674:	00001540 	andeq	r1, r0, r0, asr #10
	...
	cli_tim;
     680:	00001456 	andeq	r1, r0, r6, asr r4
     684:	00001458 	andeq	r1, r0, r8, asr r4
	if (setdel) {
     688:	00001458 	andeq	r1, r0, r8, asr r4
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	0000145a 	andeq	r1, r0, sl, asr r4
	...
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     698:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69c:	00000ef8 	strdeq	r0, [r0], -r8
				AON_RTC_O_CH0CMP)) - gettav ());
     6a0:	00000ef8 	strdeq	r0, [r0], -r8
	return NO;
     6a4:	00000f78 	andeq	r0, r0, r8, ror pc
			setdel = 0;
     6a8:	00000f78 	andeq	r0, r0, r8, ror pc
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     6b0:	00000001 	andeq	r0, r0, r1
}
     6b4:	00000001 	andeq	r0, r0, r1
		sti_tim;
     6b8:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
		return YES;
     6bc:	00000fa0 	andeq	r0, r0, r0, lsr #31
     6c0:	00000001 	andeq	r0, r0, r1
     6c4:	00000001 	andeq	r0, r0, r1
     6c8:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     6d0:	00000001 	andeq	r0, r0, r1
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	00000001 	andeq	r0, r0, r1
	UARTDisable (UART0_BASE);
     6d8:	00000fa0 	andeq	r0, r0, r0, lsr #31
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	0000106c 	andeq	r1, r0, ip, rrx
     6e0:	0000106c 	andeq	r1, r0, ip, rrx
     6e4:	00001080 	andeq	r1, r0, r0, lsl #1
     6e8:	00001080 	andeq	r1, r0, r0, lsl #1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	000010b4 	strheq	r1, [r0], -r4
     6f0:	000010b4 	strheq	r1, [r0], -r4
     6f4:	000010e8 	andeq	r1, r0, r8, ror #1
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	00000001 	andeq	r0, r0, r1
     6fc:	00000001 	andeq	r0, r0, r1
     700:	000010e8 	andeq	r1, r0, r8, ror #1
	urates [0] = rate;
     704:	0000110c 	andeq	r1, r0, ip, lsl #2
}
     708:	0000110c 	andeq	r1, r0, ip, lsl #2
     70c:	00001144 	andeq	r1, r0, r4, asr #2
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	00000001 	andeq	r0, r0, r1
     724:	00000001 	andeq	r0, r0, r1
     728:	00001144 	andeq	r1, r0, r4, asr #2
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	00001168 	andeq	r1, r0, r8, ror #2
     730:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	00000001 	andeq	r0, r0, r1
     738:	00001168 	andeq	r1, r0, r8, ror #2
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	00001176 	andeq	r1, r0, r6, ror r1
     740:	00000001 	andeq	r0, r0, r1
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
	switch (operation) {
     758:	00000001 	andeq	r0, r0, r1
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	00000001 	andeq	r0, r0, r1
     760:	00001176 	andeq	r1, r0, r6, ror r1
     764:	0000118a 	andeq	r1, r0, sl, lsl #3
     768:	00000001 	andeq	r0, r0, r1
     76c:	00000001 	andeq	r0, r0, r1
				*buf++ = uart_a_read;
     770:	0000118c 	andeq	r1, r0, ip, lsl #3
     774:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
			while (len && uart_a_char_available) {
     778:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
     77c:	0000124c 	andeq	r1, r0, ip, asr #4
     780:	0000124c 	andeq	r1, r0, ip, asr #4
			if (len != operation) {
     784:	0000129c 	muleq	r0, ip, r2
}
     788:	0000129c 	muleq	r0, ip, r2
     78c:	000012e4 	andeq	r1, r0, r4, ror #5
			uart_a_disable_int;
     790:	000012e4 	andeq	r1, r0, r4, ror #5
			if (uart_a_char_available) {
     794:	00001334 	andeq	r1, r0, r4, lsr r3
				*buf++ = uart_a_read;
     798:	00000001 	andeq	r0, r0, r1
			uart_a_disable_int;
     79c:	00000001 	andeq	r0, r0, r1
     7a0:	00001334 	andeq	r1, r0, r4, lsr r3
			if (uart_a_char_available) {
     7a4:	000013dc 	ldrdeq	r1, [r0], -ip
     7a8:	000013dc 	ldrdeq	r1, [r0], -ip
				uart_a_enable_int;
     7ac:	00001410 	andeq	r1, r0, r0, lsl r4
     7b0:	00001410 	andeq	r1, r0, r0, lsl r4
				goto Redo_rx;
     7b4:	00001428 	andeq	r1, r0, r8, lsr #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
			return -2;
     7c0:	00000001 	andeq	r0, r0, r1
     7c4:	00000001 	andeq	r0, r0, r1
				uart_a_write (*buf);
     7c8:	00001428 	andeq	r1, r0, r8, lsr #8
     7cc:	00001564 	andeq	r1, r0, r4, ror #10
			while (len && uart_a_room_in_tx) {
     7d0:	00000001 	andeq	r0, r0, r1
     7d4:	00000001 	andeq	r0, r0, r1
	...
			uart_a_disable_int;
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
			if (uart_a_room_in_tx) {
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
				uart_a_enable_int;
     7f0:	00000001 	andeq	r0, r0, r1
     7f4:	00000001 	andeq	r0, r0, r1
	...
				uart_a_write (*buf);
     800:	00000001 	andeq	r0, r0, r1
     804:	00000001 	andeq	r0, r0, r1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	00000001 	andeq	r0, r0, r1
     80c:	00000001 	andeq	r0, r0, r1
	...
			uart_a_enable_int;
     818:	00000001 	andeq	r0, r0, r1
			return 0;
     81c:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     820:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
     82c:	00000001 	andeq	r0, r0, r1
				syserror (EREQPAR, "uar");
     830:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     834:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     838:	00000001 	andeq	r0, r0, r1
				return 1;
     83c:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     844:	00000001 	andeq	r0, r0, r1
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
     86c:	00000001 	andeq	r0, r0, r1
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	00000001 	andeq	r0, r0, r1
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
     880:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	00000001 	andeq	r0, r0, r1
     888:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
     8b4:	00000001 	andeq	r0, r0, r1
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	00000001 	andeq	r0, r0, r1
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     8d0:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	00000001 	andeq	r0, r0, r1
     8d8:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     8dc:	00000001 	andeq	r0, r0, r1
     8e0:	00000001 	andeq	r0, r0, r1
     8e4:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, WRITE));
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
     8f8:	00000001 	andeq	r0, r0, r1
     8fc:	00000001 	andeq	r0, r0, r1
     900:	00001564 	andeq	r1, r0, r4, ror #10
     904:	00001566 	andeq	r1, r0, r6, ror #10
	...
     910:	00001566 	andeq	r1, r0, r6, ror #10
}
     914:	00001568 	andeq	r1, r0, r8, ror #10
     918:	00001568 	andeq	r1, r0, r8, ror #10
     91c:	0000156a 	andeq	r1, r0, sl, ror #10
     920:	0000156a 	andeq	r1, r0, sl, ror #10
     924:	0000156c 	andeq	r1, r0, ip, ror #10
void __buttons_setirq (int val) {
     928:	0000156c 	andeq	r1, r0, ip, ror #10
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	000015b0 			; <UNDEFINED> instruction: 0x000015b0
	...
     938:	00000001 	andeq	r0, r0, r1
     93c:	00000001 	andeq	r0, r0, r1
		bn = BUTTON_GPIO (__button_list [i]);
     940:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	00000001 	andeq	r0, r0, r1
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
     950:	00000001 	andeq	r0, r0, r1
     954:	00000001 	andeq	r0, r0, r1
	...
}
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
     968:	00000001 	andeq	r0, r0, r1
void __pinlist_setirq (int val) {
     96c:	00000001 	andeq	r0, r0, r1
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     97c:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     988:	00000001 	andeq	r0, r0, r1
     98c:	00000001 	andeq	r0, r0, r1
     990:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     994:	00000001 	andeq	r0, r0, r1
	...
}
     9a0:	00000001 	andeq	r0, r0, r1
     9a4:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     9a8:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     9ac:	00000001 	andeq	r0, r0, r1
	...
	buttons_disable ();
     9b8:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     9bc:	00000001 	andeq	r0, r0, r1
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
     9c8:	00000001 	andeq	r0, r0, r1
     9cc:	00000001 	andeq	r0, r0, r1
	...
     9d8:	00000001 	andeq	r0, r0, r1
     9dc:	00000001 	andeq	r0, r0, r1
     9e0:	00000001 	andeq	r0, r0, r1
     9e4:	00000001 	andeq	r0, r0, r1
	...
	RISE_N_SHINE;
     9f0:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
if (pin_sensor_int) {
     9f4:	000015c0 	andeq	r1, r0, r0, asr #11
     9f8:	000015c6 	andeq	r1, r0, r6, asr #11
	i_trigger ((aword)(&__input_pins));
     9fc:	000015c8 	andeq	r1, r0, r8, asr #11
     a00:	000015d6 	ldrdeq	r1, [r0], -r6
     a04:	000015d6 	ldrdeq	r1, [r0], -r6
     a08:	000015d8 	ldrdeq	r1, [r0], -r8
     a0c:	000015da 	ldrdeq	r1, [r0], -sl
	...
     a18:	000015c2 	andeq	r1, r0, r2, asr #11
     a1c:	000015c4 	andeq	r1, r0, r4, asr #11
     a20:	000015da 	ldrdeq	r1, [r0], -sl
     a24:	000015dc 	ldrdeq	r1, [r0], -ip
	...
	RISE_N_SHINE;
     a30:	000015c4 	andeq	r1, r0, r4, asr #11
     a34:	000015c6 	andeq	r1, r0, r6, asr #11
}
     a38:	000015c8 	andeq	r1, r0, r8, asr #11
     a3c:	000015ca 	andeq	r1, r0, sl, asr #11
     a40:	000015d0 	ldrdeq	r1, [r0], -r0
     a44:	000015d0 	ldrdeq	r1, [r0], -r0
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	000015f4 	strdeq	r1, [r0], -r4
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a54:	000015fc 	strdeq	r1, [r0], -ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	00001606 	andeq	r1, r0, r6, lsl #12
     a5c:	00001606 	andeq	r1, r0, r6, lsl #12
     a60:	0000160a 	andeq	r1, r0, sl, lsl #12
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a64:	0000160c 	andeq	r1, r0, ip, lsl #12
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a70:	0000160c 	andeq	r1, r0, ip, lsl #12
     a74:	0000160c 	andeq	r1, r0, ip, lsl #12
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	0000160e 	andeq	r1, r0, lr, lsl #12
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a7c:	00001610 	andeq	r1, r0, r0, lsl r6
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	0000161c 	andeq	r1, r0, ip, lsl r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8c:	0000161e 	andeq	r1, r0, lr, lsl r6
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	00001620 	andeq	r1, r0, r0, lsr #12
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	00001624 	andeq	r1, r0, r4, lsr #12
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     aa0:	0000163c 	andeq	r1, r0, ip, lsr r6
     aa4:	0000163e 	andeq	r1, r0, lr, lsr r6
     aa8:	00001642 	andeq	r1, r0, r2, asr #12
		if (port_confs [i] & 0x80)
     aac:	00001644 	andeq	r1, r0, r4, asr #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	0000164a 	andeq	r1, r0, sl, asr #12
     ab4:	0000165a 	andeq	r1, r0, sl, asr r6
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     ac0:	0000163c 	andeq	r1, r0, ip, lsr r6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	0000163e 	andeq	r1, r0, lr, lsr r6
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	00001642 	andeq	r1, r0, r2, asr #12
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	00001644 	andeq	r1, r0, r4, asr #12
	all_leds_blink;
     ad0:	0000164a 	andeq	r1, r0, sl, asr #12
     ad4:	0000164a 	andeq	r1, r0, sl, asr #12
     ad8:	0000164c 	andeq	r1, r0, ip, asr #12
     adc:	0000164e 	andeq	r1, r0, lr, asr #12
	...
     ae8:	000016a2 	andeq	r1, r0, r2, lsr #13
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aec:	000016a6 	andeq	r1, r0, r6, lsr #13
     af0:	000016a8 	andeq	r1, r0, r8, lsr #13
     af4:	000016aa 	andeq	r1, r0, sl, lsr #13
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	000016ae 	andeq	r1, r0, lr, lsr #13
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	000016ae 	andeq	r1, r0, lr, lsr #13
     b08:	000016b0 			; <UNDEFINED> instruction: 0x000016b0
	IntEnable (INT_AON_RTC_COMB);
     b0c:	000016b2 			; <UNDEFINED> instruction: 0x000016b2
	...
	__pi_malloc_init ();
     b18:	00000001 	andeq	r0, r0, r1
	IntEnable (INT_AON_GPIO_EDGE);
     b1c:	00000001 	andeq	r0, r0, r1
     b20:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b30:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	00000001 	andeq	r0, r0, r1
     b38:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	00000001 	andeq	r0, r0, r1
	...
	urates [0] = UART_RATE / 100;
     b48:	00000001 	andeq	r0, r0, r1
     b4c:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     b50:	00000001 	andeq	r0, r0, r1
	EXTRA_INITIALIZERS;
     b54:	00000001 	andeq	r0, r0, r1
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b60:	00000001 	andeq	r0, r0, r1
     b64:	00000001 	andeq	r0, r0, r1
     b68:	00000001 	andeq	r0, r0, r1
     b6c:	00000001 	andeq	r0, r0, r1
	...
			devinit [i] . init (devinit [i] . param);
     b78:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	000015ec 	andeq	r1, r0, ip, ror #11
     b80:	000015ec 	andeq	r1, r0, ip, ror #11
     b84:	0000161c 	andeq	r1, r0, ip, lsl r6
	IntEnable (INT_UART0_COMB);
     b88:	0000161c 	andeq	r1, r0, ip, lsl r6
     b8c:	00001634 	andeq	r1, r0, r4, lsr r6
}
     b90:	00001634 	andeq	r1, r0, r4, lsr r6
	tci_run_auxiliary_timer ();
     b94:	00001688 	andeq	r1, r0, r8, lsl #13
		diag ("");
     b98:	00001688 	andeq	r1, r0, r8, lsl #13
     b9c:	000016c8 	andeq	r1, r0, r8, asr #13
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     ba0:	000016c8 	andeq	r1, r0, r8, asr #13
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	000016ec 	andeq	r1, r0, ip, ror #13
		diag ("Leftover RAM: %d bytes",
     ba8:	000016ec 	andeq	r1, r0, ip, ror #13
     bac:	00001700 	andeq	r1, r0, r0, lsl #14
     bb0:	00001700 	andeq	r1, r0, r0, lsl #14
     bb4:	00001714 	andeq	r1, r0, r4, lsl r7
     bb8:	00000001 	andeq	r0, r0, r1
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000001 	andeq	r0, r0, r1
     bc4:	00000001 	andeq	r0, r0, r1
     bc8:	00000001 	andeq	r0, r0, r1
     bcc:	00000001 	andeq	r0, r0, r1
     bd0:	00000001 	andeq	r0, r0, r1
     bd4:	00000001 	andeq	r0, r0, r1
     bd8:	00000001 	andeq	r0, r0, r1
     bdc:	00000001 	andeq	r0, r0, r1
     be0:	00000001 	andeq	r0, r0, r1
     be4:	00000001 	andeq	r0, r0, r1
     be8:	00000001 	andeq	r0, r0, r1
     bec:	00000001 	andeq	r0, r0, r1
	...
     bf8:	00001714 	andeq	r1, r0, r4, lsl r7
     bfc:	0000178c 	andeq	r1, r0, ip, lsl #15
	...
__attribute__ ((noreturn)) void __pi_release () {
     c08:	0000178c 	andeq	r1, r0, ip, lsl #15
     c0c:	000017e0 	andeq	r1, r0, r0, ror #15
	...
	check_stack_overflow;
     c18:	000017e0 	andeq	r1, r0, r0, ror #15
     c1c:	00001840 	andeq	r1, r0, r0, asr #16
	...
	update_n_wake (MAX_WORD, NO);
     c28:	0000184e 	andeq	r1, r0, lr, asr #16
	for_all_tasks (__pi_curr) {
     c2c:	0000184e 	andeq	r1, r0, lr, asr #16
     c30:	00001854 	andeq	r1, r0, r4, asr r8
     c34:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
	...
	__SLEEP;
     c40:	00001840 	andeq	r1, r0, r0, asr #16
     c44:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
	...
	system_event_count ++;
     c50:	000018c4 	andeq	r1, r0, r4, asr #17
	switch (__pi_systat.effpdm) {
     c54:	000019a8 	andeq	r1, r0, r8, lsr #19
     c58:	000019ae 	andeq	r1, r0, lr, lsr #19
     c5c:	000019b2 			; <UNDEFINED> instruction: 0x000019b2
     c60:	000019b8 			; <UNDEFINED> instruction: 0x000019b8
			__WFI ();
     c64:	000019cc 	andeq	r1, r0, ip, asr #19
	...
	check_stack_overflow;
     c70:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     c74:	000019cc 	andeq	r1, r0, ip, asr #19
	...
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	000019f8 	strdeq	r1, [r0], -r8
			goto Redo;
     c84:	000019fa 	strdeq	r1, [r0], -sl
	for_all_tasks (__pi_curr) {
     c88:	00001ac8 	andeq	r1, r0, r8, asr #21
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	00001aec 	andeq	r1, r0, ip, ror #21
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	00001aee 	andeq	r1, r0, lr, ror #21
     c94:	00001b36 	andeq	r1, r0, r6, lsr fp
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	00001b60 	andeq	r1, r0, r0, ror #22
     c9c:	00001b62 	andeq	r1, r0, r2, ror #22
	...
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca8:	000019fa 	strdeq	r1, [r0], -sl
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	000019fc 	strdeq	r1, [r0], -ip
     cb0:	00001a9e 	muleq	r0, lr, sl
			__WFI ();
     cb4:	00001ac8 	andeq	r1, r0, r8, asr #21
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb8:	00001aec 	andeq	r1, r0, ip, ror #21
     cbc:	00001aee 	andeq	r1, r0, lr, ror #21
	...
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc8:	00001a3a 	andeq	r1, r0, sl, lsr sl
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	00001a42 	andeq	r1, r0, r2, asr #20
     cd0:	00001be6 	andeq	r1, r0, r6, ror #23
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd4:	00001bf2 	strdeq	r1, [r0], -r2
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	00001b40 	andeq	r1, r0, r0, asr #22
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	00001b60 	andeq	r1, r0, r0, ror #22
     ce8:	00001b62 	andeq	r1, r0, r2, ror #22
     cec:	00001ba6 	andeq	r1, r0, r6, lsr #23
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf8:	000019cc 	andeq	r1, r0, ip, asr #19
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	000019ec 	andeq	r1, r0, ip, ror #19
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d00:	000019ec 	andeq	r1, r0, ip, ror #19
     d04:	00001c1c 	andeq	r1, r0, ip, lsl ip
     d08:	00001c1c 	andeq	r1, r0, ip, lsl ip
     d0c:	00001c6c 	andeq	r1, r0, ip, ror #24
	...
     d18:	00001c80 	andeq	r1, r0, r0, lsl #25
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	00001c84 	andeq	r1, r0, r4, lsl #25
     d20:	00001f5e 	andeq	r1, r0, lr, asr pc
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	00001fa6 	andeq	r1, r0, r6, lsr #31
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	00001c84 	andeq	r1, r0, r4, lsl #25
     d34:	00001c8a 	andeq	r1, r0, sl, lsl #25
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	00001cc2 	andeq	r1, r0, r2, asr #25
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	00001d2e 	andeq	r1, r0, lr, lsr #26
     d40:	00001fc2 	andeq	r1, r0, r2, asr #31
     d44:	00001fe2 	andeq	r1, r0, r2, ror #31
	...
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	00001de6 	andeq	r1, r0, r6, ror #27
     d54:	00001e60 	andeq	r1, r0, r0, ror #28
     d58:	00001fea 	andeq	r1, r0, sl, ror #31
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	00001ff2 	strdeq	r1, [r0], -r2
	...
     d68:	00001e78 	andeq	r1, r0, r8, ror lr
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	00001ece 	andeq	r1, r0, lr, asr #29
     d70:	00001f44 	andeq	r1, r0, r4, asr #30
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	00001f5e 	andeq	r1, r0, lr, asr pc
	...
			reinit_uart ();
     d80:	00001ed4 	ldrdeq	r1, [r0], -r4
     d84:	00001f44 	andeq	r1, r0, r4, asr #30
     d88:	00001fa6 	andeq	r1, r0, r6, lsr #31
}
     d8c:	00001fae 	andeq	r1, r0, lr, lsr #31
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d90:	00001ff2 	strdeq	r1, [r0], -r2
     d94:	00001ffc 	strdeq	r1, [r0], -ip
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     da0:	00001c6c 	andeq	r1, r0, ip, ror #24
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	00001ffc 	strdeq	r1, [r0], -ip
	...
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     db0:	00001ffc 	strdeq	r1, [r0], -ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	0000202c 	andeq	r2, r0, ip, lsr #32
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dc0:	00000001 	andeq	r0, r0, r1
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	00000001 	andeq	r0, r0, r1
     dc8:	0000202c 	andeq	r2, r0, ip, lsr #32
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	00002044 	andeq	r2, r0, r4, asr #32
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd8:	00002044 	andeq	r2, r0, r4, asr #32
			PRCMPowerDomainOff (
     ddc:	0000204c 	andeq	r2, r0, ip, asr #32
     de0:	00000001 	andeq	r0, r0, r1
	__SLEEP;
     de4:	00000001 	andeq	r0, r0, r1
     de8:	0000204c 	andeq	r2, r0, ip, asr #32
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	00002054 	andeq	r2, r0, r4, asr r0
	goto Redo;
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
     df8:	00000001 	andeq	r0, r0, r1
     dfc:	00000001 	andeq	r0, r0, r1
	...
     e08:	00002054 	andeq	r2, r0, r4, asr r0
     e0c:	00002128 	andeq	r2, r0, r8, lsr #2
     e10:	00002128 	andeq	r2, r0, r8, lsr #2
     e14:	000021cc 	andeq	r2, r0, ip, asr #3
	...
     e20:	000021da 	ldrdeq	r2, [r0], -sl
     e24:	000021dc 	ldrdeq	r2, [r0], -ip
     e28:	000021e0 	andeq	r2, r0, r0, ror #3
     e2c:	000021e4 	andeq	r2, r0, r4, ror #3
	...
     e38:	000024e8 	andeq	r2, r0, r8, ror #9
     e3c:	000024ea 	andeq	r2, r0, sl, ror #9
     e40:	000024ec 	andeq	r2, r0, ip, ror #9
     e44:	000024ee 	andeq	r2, r0, lr, ror #9
	...
     e50:	000021cc 	andeq	r2, r0, ip, asr #3
     e54:	00002248 	andeq	r2, r0, r8, asr #4
     e58:	00002248 	andeq	r2, r0, r8, asr #4
int main (void) {
     e5c:	000022f4 	strdeq	r2, [r0], -r4
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	000022f4 	strdeq	r2, [r0], -r4
     e64:	00002350 	andeq	r2, r0, r0, asr r3
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	00002350 	andeq	r2, r0, r0, asr r3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	00002368 	andeq	r2, r0, r8, ror #6
	system_init ();
     e70:	00000001 	andeq	r0, r0, r1
	tcv_init ();
     e74:	00000001 	andeq	r0, r0, r1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e78:	00002368 	andeq	r2, r0, r8, ror #6
     e7c:	00002378 	andeq	r2, r0, r8, ror r3
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	00002378 	andeq	r2, r0, r8, ror r3
     e84:	0000238c 	andeq	r2, r0, ip, lsl #7
     e88:	0000238c 	andeq	r2, r0, ip, lsl #7
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	000023f0 	strdeq	r2, [r0], -r0
     e90:	000023f0 	strdeq	r2, [r0], -r0
	delay (16, 0);
     e94:	00002404 	andeq	r2, r0, r4, lsl #8
     e98:	00002404 	andeq	r2, r0, r4, lsl #8
     e9c:	00002418 	andeq	r2, r0, r8, lsl r4
	__pi_release ();
     ea0:	00002418 	andeq	r2, r0, r8, lsl r4
     ea4:	0000242c 	andeq	r2, r0, ip, lsr #8
     ea8:	0000242c 	andeq	r2, r0, ip, lsr #8
     eac:	00002454 	andeq	r2, r0, r4, asr r4
     eb0:	00002454 	andeq	r2, r0, r4, asr r4
     eb4:	00002464 	andeq	r2, r0, r4, ror #8
     eb8:	00002464 	andeq	r2, r0, r4, ror #8
static void killev (__pi_pcb_t *pid) {
     ebc:	00002490 	muleq	r0, r0, r4
	wfun = (aword)(pid->code);
     ec0:	00002490 	muleq	r0, r0, r4
	for_all_tasks (i) {
     ec4:	000024a4 	andeq	r2, r0, r4, lsr #9
		for (j = 0; j < nevents (i); j++) {
     ec8:	000024a4 	andeq	r2, r0, r4, lsr #9
     ecc:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
     ed0:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
			    || i->Events [j] . Event == wfun
     ed4:	000025c8 	andeq	r2, r0, r8, asr #11
		for (j = 0; j < nevents (i); j++) {
     ed8:	000025c8 	andeq	r2, r0, r8, asr #11
			if (i->Events [j] . Event == (aword)pid
     edc:	0000262c 	andeq	r2, r0, ip, lsr #12
     ee0:	0000262c 	andeq	r2, r0, ip, lsr #12
     ee4:	00002654 	andeq	r2, r0, r4, asr r6
				wakeupev (i, j);
     ee8:	00002654 	andeq	r2, r0, r4, asr r6
     eec:	000027a4 	andeq	r2, r0, r4, lsr #15
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	00000001 	andeq	r0, r0, r1
static void qfree (aword *ch) {
     efc:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f00:	00000001 	andeq	r0, r0, r1
	cc = (aword*)(mpools + MA_NP);
     f04:	00000001 	andeq	r0, r0, r1
	...
}
     f10:	0000281a 	andeq	r2, r0, sl, lsl r8
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	0000281c 	andeq	r2, r0, ip, lsl r8
     f18:	0000281e 	andeq	r2, r0, lr, lsl r8
     f1c:	00002822 	andeq	r2, r0, r2, lsr #16
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     f28:	00000001 	andeq	r0, r0, r1
     f2c:	00000001 	andeq	r0, r0, r1
     f30:	000027a4 	andeq	r2, r0, r4, lsr #15
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	000029c4 	andeq	r2, r0, r4, asr #19
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	000029c4 	andeq	r2, r0, r4, asr #19
     f3c:	00002a24 	andeq	r2, r0, r4, lsr #20
     f40:	00000001 	andeq	r0, r0, r1
			m_setnextp (cc, m_nextp (chunk));
     f44:	00000001 	andeq	r0, r0, r1
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	00002a24 	andeq	r2, r0, r4, lsr #20
     f4c:	00002a3c 	andeq	r2, r0, ip, lsr sl
	...
     f58:	00002a8a 	andeq	r2, r0, sl, lsl #21
     f5c:	00002a8e 	andeq	r2, r0, lr, lsl #21
			if (m_size (chunk) >= m_size (ch))
     f60:	00002a94 	muleq	r0, r4, sl
     f64:	00002a96 	muleq	r0, r6, sl
	...
		chunk = m_nextp (chunk))
     f70:	00002a8e 	andeq	r2, r0, lr, lsl #21
     f74:	00002a94 	muleq	r0, r4, sl
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	00002a96 	muleq	r0, r6, sl
	diag_wait (a);
     f7c:	00002a9e 	muleq	r0, lr, sl
	...
}
     f88:	00000001 	andeq	r0, r0, r1
     f8c:	00000001 	andeq	r0, r0, r1
	syserror (ESTATE, "state");
     f90:	00000001 	andeq	r0, r0, r1
     f94:	00000001 	andeq	r0, r0, r1
     f98:	00002a3c 	andeq	r2, r0, ip, lsr sl
     f9c:	00002a88 	andeq	r2, r0, r8, lsl #21
void update_n_wake (word min, Boolean force) {
     fa0:	00000001 	andeq	r0, r0, r1
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	00000001 	andeq	r0, r0, r1
     fa8:	00002a88 	andeq	r2, r0, r8, lsl #21
     fac:	00002af4 	strdeq	r2, [r0], -r4
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	00002af4 	strdeq	r2, [r0], -r4
     fb4:	00002b0a 	andeq	r2, r0, sl, lsl #22
	...
     fc0:	00002b0c 	andeq	r2, r0, ip, lsl #22
     fc4:	00002b34 	andeq	r2, r0, r4, lsr fp
     fc8:	00002b34 	andeq	r2, r0, r4, lsr fp
     fcc:	00002b3c 	andeq	r2, r0, ip, lsr fp
     fd0:	00000001 	andeq	r0, r0, r1
     fd4:	00000001 	andeq	r0, r0, r1
     fd8:	00000001 	andeq	r0, r0, r1
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
     fe4:	00000001 	andeq	r0, r0, r1
	__pi_mintk = znew + min;
     fe8:	00000001 	andeq	r0, r0, r1
     fec:	00000001 	andeq	r0, r0, r1
	...
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	00002b9e 	muleq	r0, lr, fp
     ffc:	00002bae 	andeq	r2, r0, lr, lsr #23
    1000:	00002bb4 			; <UNDEFINED> instruction: 0x00002bb4
    1004:	00002bb6 			; <UNDEFINED> instruction: 0x00002bb6
	...
    1010:	00002b3c 	andeq	r2, r0, ip, lsr fp
    1014:	00002b98 	muleq	r0, r8, fp
    1018:	00002b98 	muleq	r0, r8, fp
    101c:	00002bc4 	andeq	r2, r0, r4, asr #23
    1020:	00000001 	andeq	r0, r0, r1
    1024:	00000001 	andeq	r0, r0, r1
				wakeuptm (i);
    1028:	00000001 	andeq	r0, r0, r1
    102c:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
    1030:	00000001 	andeq	r0, r0, r1
				d = i->Timer - znew;
    1034:	00000001 	andeq	r0, r0, r1
    1038:	00000001 	andeq	r0, r0, r1
    103c:	00000001 	andeq	r0, r0, r1
		if ((word)(__pi_mintk - znew) < min) 
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
	__pi_old = znew;
    104c:	00000001 	andeq	r0, r0, r1
}
    1050:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
    1054:	00000001 	andeq	r0, r0, r1
}
    1058:	00000001 	andeq	r0, r0, r1
    105c:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000004e8 	andeq	r0, r0, r8, ror #9
       4:	01380003 	teqeq	r8, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			i = k;
      40:	2f534f63 	svccs	0x00534f63
				j->Next = k;
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
}
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
            ch = redCharacter;
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
            onTime = redOn;
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
            offTime = redOff;
     130:	0300682e 	movweq	r6, #2094	; 0x82e
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
            ledFlag = 0;
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
        if(On)
     13c:	00040068 	andeq	r0, r4, r8, rrx
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
     144:	c8020500 	stmdagt	r2, {r8, sl}
            leds(led,1);
     148:	03000000 	movweq	r0, #0
            leds(led,0);
     14c:	1f05011d 	svcne	0x0005011d
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
     158:	03060905 	movweq	r0, #26885	; 0x6905
     15c:	0e053c2b 	cdpeq	12, 0, cr3, cr5, cr11, {1}
        if (displayCycle)
     160:	011e0501 	tsteq	lr, r1, lsl #10
     164:	01062805 	tsteq	r6, r5, lsl #16
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     168:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
     16c:	052e0630 	streq	r0, [lr, #-1584]!	; 0xfffff9d0
     170:	02040135 	andeq	r0, r4, #1073741837	; 0x4000000d
        if(onTime > 0)
     174:	90030505 	andls	r0, r3, r5, lsl #10
            delay(onTime, OFF_PERIOD);
     178:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
        when(&On, Check_PERIOD);
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     180:	06480501 	strbeq	r0, [r8], -r1, lsl #10
        release;
     184:	2e7deb03 	vaddcs.f64	d30, d13, d3
            led = greenLed;
     188:	01065b05 	tsteq	r6, r5, lsl #22
     18c:	4a01b705 	bmi	6dda8 <__ccfg+0x4de00>
            ch = greenCharacter;
     190:	0601ca05 	streq	ip, [r1], -r5, lsl #20
            onTime = greenOn;
     194:	0293054a 	addseq	r0, r3, #310378496	; 0x12800000
     198:	02980501 	addseq	r0, r8, #4194304	; 0x400000
            offTime = greenOff;
     19c:	02a00501 	adceq	r0, r0, #4194304	; 0x400000
     1a0:	06f90501 	ldrbteq	r0, [r9], r1, lsl #10
            leds(led,0);
     1a4:	15090501 	strne	r0, [r9, #-1281]	; 0xfffffaff
     1a8:	01060d05 	tsteq	r6, r5, lsl #26
     1ac:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
     1b0:	052f060d 	streq	r0, [pc, #-1549]!	; fffffbab <_estack+0xdfffabab>
     1b4:	14056909 	strne	r6, [r5], #-2313	; 0xfffff6f7
        leds(led,0);
     1b8:	0b050106 	bleq	1405d8 <__ccfg+0x120630>
     1bc:	060d0520 	streq	r0, [sp], -r0, lsr #10
     1c0:	0305052f 	movweq	r0, #21807	; 0x552f
     1c4:	14132e4e 	ldrne	r2, [r3], #-3662	; 0xfffff1b2
     1c8:	16090513 			; <UNDEFINED> instruction: 0x16090513
            proceed Check_PERIOD;
     1cc:	01061405 	tsteq	r6, r5, lsl #8
}
     1d0:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     1d4:	0567060d 	strbeq	r0, [r7, #-1549]!	; 0xfffff9f3
     1d8:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     1dc:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     1e0:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     1e4:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     1e8:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     1ec:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     1f0:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     1f4:	053e060d 	ldreq	r0, [lr, #-1549]!	; 0xfffff9f3
     1f8:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     1fc:	0527060d 	streq	r0, [r7, #-1549]!	; 0xfffff9f3
     200:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
     204:	05240609 	streq	r0, [r4, #-1545]!	; 0xfffff9f7
     208:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
     20c:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
     210:	12054b06 	andne	r4, r5, #6144	; 0x1800
     214:	02b20501 	adcseq	r0, r2, #4194304	; 0x400000
     218:	02c20501 	sbceq	r0, r2, #4194304	; 0x400000
     21c:	06250501 	strteq	r0, [r5], -r1, lsl #10
     220:	06340522 	ldrteq	r0, [r4], -r2, lsr #10
    word number = 0;
     224:	0139052e 	teqeq	r9, lr, lsr #10
    int numbersIndex = 0;
     228:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     22c:	01029e03 	tsteq	r2, r3, lsl #28
        if(settingsInput[i] == ' ') {
     230:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     234:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
            numbers[numbersIndex] = number;
     238:	dd03064c 	stcle	6, cr0, [r3, #-304]	; 0xfffffed0
     23c:	5f05207d 	svcpl	0x0005207d
            number = 0;
     240:	bb050106 	bllt	140660 <__ccfg+0x1206b8>
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	ce054a01 	vmlagt.f32	s8, s10, s2
    redOn = numbers[0];
     248:	054a0601 	strbeq	r0, [sl, #-1537]	; 0xfffff9ff
     24c:	050106fd 	streq	r0, [r1, #-1789]	; 0xfffff903
    redOff = numbers[1];
     250:	0d051509 	cfstr32eq	mvfx1, [r5, #-36]	; 0xffffffdc
     254:	0c050106 	stfeqs	f0, [r5], {6}
    greenOn = numbers[2];
     258:	060d0520 	streq	r0, [sp], -r0, lsr #10
     25c:	6909052f 	stmdbvs	r9, {r0, r1, r2, r3, r5, r8, sl}
    greenOff = numbers[3];
     260:	01061305 	tsteq	r6, r5, lsl #6
     264:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
}
     268:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	054b3e09 	strbeq	r3, [fp, #-3593]	; 0xfffff1f7
     270:	2e69030d 	cdpcs	3, 6, cr0, cr9, cr13, {0}
            number = number * 10;
     274:	01061105 	tsteq	r6, r5, lsl #2
            number += settingsInput[i] - 48;
     278:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     27c:	01061005 	tsteq	r6, r5
     280:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     284:	01061405 	tsteq	r6, r5, lsl #8
     288:	3d060d05 	stccc	13, cr0, [r6, #-20]	; 0xffffffec
     28c:	01061505 	tsteq	r6, r5, lsl #10
fsm root {
     290:	03060d05 	movweq	r0, #27909	; 0x6d05
     294:	12054a09 	andne	r4, r5, #36864	; 0x9000
     298:	01220501 			; <UNDEFINED> instruction: 0x01220501
     29c:	052e7e05 	streq	r7, [lr, #-3589]!	; 0xfffff1fb
     2a0:	01060181 	smlabbeq	r6, r1, r1, r0
     2a4:	06019005 	streq	r9, [r1], -r5
     2a8:	0195052e 	orrseq	r0, r5, lr, lsr #10
        ser_outf(Initial, "Enter your name: ");
     2ac:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     2b0:	029e0305 	addseq	r0, lr, #335544320	; 0x14000000
        ser_in(Get_Name, username, NAME_LENGTH);
     2b4:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
     2b8:	01040106 	tsteq	r4, r6, lsl #2
        runfsm blinker;
     2bc:	0601a805 	streq	sl, [r1], -r5, lsl #16
     2c0:	2e7ddd03 	cdpcs	13, 7, cr13, cr13, cr3, {0}
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	0601bb05 	streq	fp, [r1], -r5, lsl #22
     2c8:	067a0501 	ldrbteq	r0, [sl], -r1, lsl #10
     2cc:	05580e03 	ldrbeq	r0, [r8, #-3587]	; 0xfffff1fd
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	0501067d 	streq	r0, [r1, #-1661]	; 0xfffff983
     2d4:	2e06018c 	adfcsd	f0, f6, #4.0
        if (choice == 'A' || choice == 'a'){
     2d8:	01019105 	tsteq	r1, r5, lsl #2
     2dc:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     2e0:	01029003 	tsteq	r2, r3
            proceed Adjust_Intervals;
     2e4:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
            proceed Monitor;
     2e8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
        proceed Show_Menu;
     2ec:	030601a4 	movweq	r0, #24996	; 0x61a4
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	052e7deb 	streq	r7, [lr, #-3563]!	; 0xfffff215
     2f4:	010601b7 			; <UNDEFINED> instruction: 0x010601b7
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	03060d05 	movweq	r0, #27909	; 0x6d05
     2fc:	0105580a 	tsteq	r5, sl, lsl #16
     300:	01130540 	tsteq	r3, r0, asr #10
        processSettingsInput(settings);
     304:	01060105 	tsteq	r6, r5, lsl #2
        On = YES;
     308:	022e1305 	eoreq	r1, lr, #335544320	; 0x14000000
     30c:	01010028 	tsteq	r1, r8, lsr #32
        trigger(&On);
     310:	05003005 	streq	r3, [r0, #-5]
        proceed Show_Menu;
     314:	00022402 	andeq	r2, r2, r2, lsl #8
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	00d80300 	sbcseq	r0, r8, r0, lsl #6
     31c:	13050501 	movwne	r0, #21761	; 0x5501
     320:	05141413 	ldreq	r1, [r4, #-1043]	; 0xfffffbed
     324:	1505010a 	strne	r0, [r5, #-266]	; 0xfffffef6
     328:	060a0501 	streq	r0, [sl], -r1, lsl #10
     32c:	1c300510 	cfldr32ne	mvfx0, [r0], #-64	; 0xffffffc0
     330:	06220905 	strteq	r0, [r2], -r5, lsl #18
        proceed Show_Menu;
     334:	06190541 	ldreq	r0, [r9], -r1, asr #10
     338:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	2f060d05 	svccs	0x00060d05
     340:	01062305 	tsteq	r6, r5, lsl #6
        displayCycle = YES;
     344:	59060d05 	stmdbpl	r6, {r0, r2, r8, sl, fp}
        ser_inf(Await_Stop, "%c", &ch);
     348:	06140513 			; <UNDEFINED> instruction: 0x06140513
     34c:	21190511 	tstcs	r9, r1, lsl r5
     350:	1c061d05 	stcne	13, cr1, [r6], {5}
        if(ch == 'S' || ch == 's'){
     354:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
     358:	06010605 	streq	r0, [r1], -r5, lsl #12
     35c:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
            displayCycle = NO;
     360:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
     364:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
            proceed Show_Menu;
     368:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
        proceed Monitor;
     36c:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
        On = NO;
     370:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
     374:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
     378:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
        leds(1, 0);
     37c:	10054b01 	andne	r4, r5, r1, lsl #22
     380:	2e750306 	cdpcs	3, 7, cr0, cr5, cr6, {0}
     384:	01062c05 	tsteq	r6, r5, lsl #24
     388:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
     38c:	052f060d 	streq	r0, [pc, #-1549]!	; fffffd87 <_estack+0xdfffad87>
     390:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
        leds(0, 0);
     394:	053d060d 	ldreq	r0, [sp, #-1549]!	; 0xfffff9f3
     398:	02010614 	andeq	r0, r1, #20, 12	; 0x1400000
     39c:	0101000c 	tsteq	r1, ip
        proceed Show_Menu;
     3a0:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
     3a4:	00029002 	andeq	r9, r2, r2
     3a8:	00f00300 	rscseq	r0, r0, r0, lsl #6
     3ac:	011c0501 	tsteq	ip, r1, lsl #10
        } else if (choice == 'S' || choice == 's') {
     3b0:	01061a05 	tsteq	r6, r5, lsl #20
            proceed Stop;
     3b4:	ca060505 	bgt	1817d0 <__ccfg+0x161828>
        } else if (choice == 'V' || choice == 'v') {
     3b8:	4d150905 	vldrmi.16	s0, [r5, #-10]	; <UNPREDICTABLE>
            proceed View_Settings;
     3bc:	09034d5b 	stmdbeq	r3, {r0, r1, r3, r4, r6, r8, sl, fp, lr}
        } else if (choice == 'M' || choice == 'm') {
     3c0:	055a1458 	ldrbeq	r1, [sl, #-1112]	; 0xfffffba8
            proceed Monitor;
     3c4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     3c8:	0667060d 	strbteq	r0, [r7], -sp, lsl #12
     3cc:	06090526 	streq	r0, [r9], -r6, lsr #10
     3d0:	144d3f31 	strbne	r3, [sp], #-3889	; 0xfffff0cf
     3d4:	0c053e5a 	stceq	14, cr3, [r5], {90}	; 0x5a
     3d8:	09050106 	stmdbeq	r5, {r1, r2, r8}
     3dc:	3f303e06 	svccc	0x00303e06
     3e0:	054b3fdd 	strbeq	r3, [fp, #-4061]	; 0xfffff023
     3e4:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     3e8:	133f0609 	teqne	pc, #9437184	; 0x900000
     3ec:	060b055a 			; <UNDEFINED> instruction: 0x060b055a
     3f0:	060d0501 	streq	r0, [sp], -r1, lsl #10
     3f4:	061a0567 	ldreq	r0, [sl], -r7, ror #10
     3f8:	2f0d0501 	svccs	0x000d0501
     3fc:	051f1a05 	ldreq	r1, [pc, #-2565]	; fffff9ff <_estack+0xdfffa9ff>
     400:	0521060d 	streq	r0, [r1, #-1549]!	; 0xfffff9f3
     404:	053f3109 	ldreq	r3, [pc, #-265]!	; 303 <root+0x73>
     408:	0401060c 	streq	r0, [r1], #-1548	; 0xfffff9f4
static void devinit_uart (int devnum) {
     40c:	033e0502 	teqeq	lr, #8388608	; 0x800000
	adddevfunc (ioreq_uart_a, devnum);
     410:	042e019c 	strteq	r0, [lr], #-412	; 0xfffffe64
     414:	030c0501 	movweq	r0, #50433	; 0xc501
void udelay (volatile word n) {
     418:	05207ee4 	streq	r7, [r0, #-3812]!	; 0xfffff11c
     41c:	05220609 	streq	r0, [r2, #-1545]!	; 0xfffff9f7
	while (n) {
     420:	1e05010e 	adfnes	f0, f5, #0.5
     424:	01780501 	cmneq	r8, r1, lsl #10
}
     428:	01018805 	tsteq	r1, r5, lsl #16
	while (n--);
     42c:	01018d05 	tsteq	r1, r5, lsl #26
     430:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     434:	01019503 	tsteq	r1, r3, lsl #10
		n--;
     438:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     43c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     440:	030601a0 	movweq	r0, #24992	; 0x61a0
void mdelay (volatile word n) {
     444:	052e7ee6 	streq	r7, [lr, #-3814]!	; 0xfffff11a
     448:	010601b3 			; <UNDEFINED> instruction: 0x010601b3
	while (n) {
     44c:	3e050204 	cdpcc	2, 0, cr0, cr5, cr4, {0}
     450:	82019a03 	andhi	r9, r1, #12288	; 0x3000
}
     454:	b3050104 	movwlt	r0, #20740	; 0x5104
		udelay (999);
     458:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
     45c:	01c60520 	biceq	r0, r6, r0, lsr #10
		n--;
     460:	8b052006 	blhi	148480 <__ccfg+0x1284d8>
     464:	90050102 	andls	r0, r5, r2, lsl #2
     468:	98050102 	stmdals	r5, {r1, r8}
     46c:	e1050102 	tst	r5, r2, lsl #2
void __pi_ondomain (lword d) {
     470:	09050106 	stmdbeq	r5, {r1, r2, r8}
     474:	010e0513 	tsteq	lr, r3, lsl r5
		if (__pi_systat.effpdm > 1)
     478:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
     47c:	3305012e 	movwcc	r0, #20782	; 0x512e
			__pi_systat.effpdm = 1;
     480:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
	PRCMPowerDomainOn (d);
     484:	01940305 	orrseq	r0, r4, r5, lsl #6
     488:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
     48c:	01040106 	tsteq	r4, r6, lsl #2
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	03064605 	movweq	r4, #26117	; 0x6605
     494:	05207ee7 	streq	r7, [r0, #-3815]!	; 0xfffff119
     498:	05010659 	streq	r0, [r1, #-1625]	; 0xfffff9a7
	__pi_systat.ondmns |= d;
     49c:	59057609 	stmdbpl	r5, {r0, r3, r9, sl, ip, sp, lr}
     4a0:	066c051e 			; <UNDEFINED> instruction: 0x066c051e
}
     4a4:	028b0520 	addeq	r0, fp, #32, 10	; 0x8000000
     4a8:	02900501 	addseq	r0, r0, #4194304	; 0x400000
void __pi_syserror (word ec, const char *m) {
     4ac:	02980501 	addseq	r0, r8, #4194304	; 0x400000
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	06e10501 	strbteq	r0, [r1], r1, lsl #10
     4b4:	14090501 	strne	r0, [r9], #-1281	; 0xfffffaff
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	052f0105 	streq	r0, [pc, #-261]!	; 3bb <root+0x12b>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4bc:	3c460310 	mcrrcc	3, 1, r0, r6, cr0
     4c0:	01061305 	tsteq	r6, r5, lsl #6
     4c4:	2f060d05 	svccs	0x00060d05
		all_leds_blink;
     4c8:	052f1005 	streq	r1, [pc, #-5]!	; 4cb <__pi_syserror+0x1f>
     4cc:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     4d0:	052f060d 	streq	r0, [pc, #-1549]!	; fffffecb <_estack+0xdfffaecb>
     4d4:	13052f10 	movwne	r2, #24336	; 0x5f10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     4dc:	13052f06 	movwne	r2, #24326	; 0x5f06
     4e0:	052e3503 	streq	r3, [lr, #-1283]!	; 0xfffffafd
     4e4:	022e0601 	eoreq	r0, lr, #1048576	; 0x100000
     4e8:	01010021 	tsteq	r1, r1, lsr #32
     4ec:	0000155c 	andeq	r1, r0, ip, asr r5
	while (1) {
     4f0:	029b0003 	addseq	r0, fp, #3
     4f4:	01020000 	mrseq	r0, (UNDEF: 2)
     4f8:	000d0efb 	strdeq	r0, [sp], -fp
     4fc:	01010101 	tsteq	r1, r1, lsl #2
void tci_run_delay_timer () {
     500:	01000000 	mrseq	r0, (UNDEF: 0)
	setdel = __pi_mintk - __pi_old;
     504:	2f010000 	svccs	0x00010000
     508:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     50c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     510:	2f6e6974 	svccs	0x006e6974
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	6b736544 	blvs	1cd9a2c <__ccfg+0x1cb9a84>
     518:	2f706f74 	svccs	0x00706f74
     51c:	4f534c4f 	svcmi	0x00534c4f
     520:	2f54454e 	svccs	0x0054454e
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	4f434950 	svcmi	0x00434950
	sti_tim;
     528:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
     52c:	2f534f63 	svccs	0x00534f63
     530:	33314343 	teqcc	r1, #201326593	; 0xc000001
     534:	2f005858 	svccs	0x00005858
     538:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     53c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	cli_aux;
     540:	2f6e6974 	svccs	0x006e6974
     544:	6b736544 	blvs	1cd9a5c <__ccfg+0x1cb9ab4>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	2f706f74 	svccs	0x00706f74
     54c:	4f534c4f 	svcmi	0x00534c4f
     550:	2f54454e 	svccs	0x0054454e
     554:	4f434950 	svcmi	0x00434950
	sti_aux;
     558:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
     55c:	2f534f63 	svccs	0x00534f63
     560:	33314343 	teqcc	r1, #201326593	; 0xc000001
     564:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
void AONRTCIntHandler () {
     568:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
     570:	72642f45 	rsbvc	r2, r4, #276	; 0x114
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
		if (__pi_utims [0] == 0)
     578:	0062696c 	rsbeq	r6, r2, ip, ror #18
     57c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4c8 <__pi_syserror+0x1c>
		if (*(__pi_utims [0])) {
     580:	616d2f65 	cmnvs	sp, r5, ror #30
     584:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			(*(__pi_utims [0]))--;
     588:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
		if (__pi_utims [1] == 0)
     58c:	706f746b 	rsbvc	r7, pc, fp, ror #8
		if (*(__pi_utims [1])) {
     590:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			aux_timer_inactive = 0;
     594:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			(*(__pi_utims [1]))--;
     598:	4349502f 	movtmi	r5, #36911	; 0x902f
		if (__pi_utims [2] == 0)
     59c:	502f534f 	eorpl	r5, pc, pc, asr #6
		if (*(__pi_utims [2])) {
     5a0:	534f6369 	movtpl	r6, #62313	; 0xf369
			(*(__pi_utims [2]))--;
     5a4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		if (__pi_utims [3] != 0) {
     5a8:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
			if (*(__pi_utims [3])) {
     5ac:	682f004f 	stmdavs	pc!, {r0, r1, r2, r3, r6}	; <UNPREDICTABLE>
				aux_timer_inactive = 0;
     5b0:	2f656d6f 	svccs	0x00656d6f
				(*(__pi_utims [3]))--;
     5b4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	if (__pi_systat.ledsts) {
     5b8:	442f6e69 	strtmi	r6, [pc], #-3689	; 5c0 <AONRTCIntHandler+0x58>
     5bc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (__pi_systat.ledblc++ == 0) {
     5c0:	4f2f706f 	svcmi	0x002f706f
     5c4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
			if (__pi_systat.ledblk) {
     5c8:	502f5445 	eorpl	r5, pc, r5, asr #8
     5cc:	534f4349 	movtpl	r4, #62281	; 0xf349
     5d0:	6369502f 	cmnvs	r9, #47	; 0x2f
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	502f534f 	eorpl	r5, pc, pc, asr #6
     5d8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
				if (__pi_systat.ledsts & 0x2)
     5dc:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
     5e0:	73726f73 	cmnvc	r2, #460	; 0x1cc
     5e4:	6f682f00 	svcvs	0x00682f00
				if (__pi_systat.ledsts & 0x4)
     5e8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 43c <udelay+0x24>
				__pi_systat.ledblk = 0;
     5ec:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     5f0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
			if (__pi_systat.fstblk)
     5f4:	6f746b73 	svcvs	0x00746b73
     5f8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
				__pi_systat.ledblc = 200;
     5fc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		cli_tim;
     604:	2f534f43 	svccs	0x00534f43
		__pi_new += setdel;
     608:	4f636950 	svcmi	0x00636950
     60c:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
		setdel = 0;
     610:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
		RISE_N_SHINE;
     614:	73752f00 	cmnvc	r5, #0, 30
		__pi_new += setdel;
     618:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
		RISE_N_SHINE;
     61c:	63672f62 	cmnvs	r7, #392	; 0x188
     620:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
		aux_timer_inactive = 1;
     624:	6f6e2d6d 	svcvs	0x006e2d6d
     628:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
				if (__pi_systat.ledsts & 0x1)
     62c:	2f696261 	svccs	0x00696261
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
     634:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
				if (__pi_systat.ledsts & 0x2)
     638:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     63c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     640:	2f656d6f 	svccs	0x00656d6f
				if (__pi_systat.ledsts & 0x8)
     644:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
				__pi_systat.ledblk = 1;
     648:	442f6e69 	strtmi	r6, [pc], #-3689	; 650 <AONRTCIntHandler+0xe8>
     64c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (aux_timer_inactive) {
     650:	4f2f706f 	svcmi	0x002f706f
			cli_aux;
     654:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     658:	502f5445 	eorpl	r5, pc, r5, asr #8
     65c:	534f4349 	movtpl	r4, #62281	; 0xf349
     660:	6369502f 	cmnvs	r9, #47	; 0x2f
     664:	0000534f 	andeq	r5, r0, pc, asr #6
     668:	6e69616d 	powvsez	f6, f1, #5.0
     66c:	0100632e 	tsteq	r0, lr, lsr #6
     670:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     674:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
     678:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
word tci_update_delay_ticks (Boolean force) {
     67c:	00000200 	andeq	r0, r0, r0, lsl #4
	cli_tim;
     680:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     684:	63675f73 	cmnvs	r7, #460	; 0x1cc
	if (setdel) {
     688:	00682e63 	rsbeq	r2, r8, r3, ror #28
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	67000001 	strvs	r0, [r0, -r1]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
     694:	00020068 	andeq	r0, r2, r8, rrx
     698:	71726900 	cmnvc	r2, r0, lsl #18
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69c:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
				AON_RTC_O_CH0CMP)) - gettav ());
     6a0:	6c5f7265 	lfmvs	f7, 2, [pc], {101}	; 0x65
	return NO;
     6a4:	2e736465 	cdpcs	4, 7, cr6, cr3, cr5, {3}
			setdel = 0;
     6a8:	00030068 	andeq	r0, r3, r8, rrx
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	72617500 	rsbvc	r7, r1, #0, 10
     6b0:	00682e74 	rsbeq	r2, r8, r4, ror lr
}
     6b4:	69000002 	stmdbvs	r0, {r1}
		sti_tim;
     6b8:	625f7172 	subsvs	r7, pc, #-2147483620	; 0x8000001c
		return YES;
     6bc:	6f747475 	svcvs	0x00747475
     6c0:	682e736e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     6c4:	00000300 	andeq	r0, r0, r0, lsl #6
     6c8:	5f717269 	svcpl	0x00717269
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	5f6e6970 	svcpl	0x006e6970
	UARTDisable (UART0_BASE);
     6d0:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	682e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}
	UARTDisable (UART0_BASE);
     6d8:	00000400 	andeq	r0, r0, r0, lsl #8
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
     6e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     6e4:	6f610000 	svcvs	0x00610000
     6e8:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	00682e63 	rsbeq	r2, r8, r3, ror #28
     6f0:	70000002 	andvc	r0, r0, r2
     6f4:	635f7277 	cmpvs	pc, #1879048199	; 0x70000007
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
     6fc:	00020068 	andeq	r0, r2, r8, rrx
     700:	6e6f6100 	powvse	f6, f7, f0
	urates [0] = rate;
     704:	636f695f 	cmnvs	pc, #1556480	; 0x17c000
}
     708:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     70c:	63730000 	cmnvs	r3, #0
     710:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     714:	2e72656c 	cdpcs	5, 7, cr6, cr2, cr12, {3}
     718:	00050068 	andeq	r0, r5, r8, rrx
     71c:	6e6f6100 	powvse	f6, f7, f0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
     724:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     728:	6f610000 	svcvs	0x00610000
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	61625f6e 	cmnvs	r2, lr, ror #30
     730:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     738:	74730000 	ldrbtvc	r0, [r3], #-0
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
     740:	0600682e 	streq	r6, [r0], -lr, lsr #16
     744:	72610000 	rsbvc	r0, r1, #0
     748:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
     74c:	00000100 	andeq	r0, r0, r0, lsl #2
     750:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
     754:	0100682e 	tsteq	r0, lr, lsr #16
	switch (operation) {
     758:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     760:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
     764:	00000100 	andeq	r0, r0, r0, lsl #2
     768:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     76c:	5f736e6f 	svcpl	0x00736e6f
				*buf++ = uart_a_read;
     770:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     774:	00010068 	andeq	r0, r1, r8, rrx
			while (len && uart_a_char_available) {
     778:	73797300 	cmnvc	r9, #0, 6
     77c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     780:	00000700 	andeq	r0, r0, r0, lsl #14
			if (len != operation) {
     784:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
}
     788:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
     78c:	00000500 	andeq	r0, r0, r0, lsl #10
			uart_a_disable_int;
     790:	00270500 	eoreq	r0, r7, r0, lsl #10
			if (uart_a_char_available) {
     794:	040c0205 	streq	r0, [ip], #-517	; 0xfffffdfb
				*buf++ = uart_a_read;
     798:	fc030000 	stc2	0, cr0, [r3], {-0}
			uart_a_disable_int;
     79c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     7a0:	06270514 			; <UNDEFINED> instruction: 0x06270514
			if (uart_a_char_available) {
     7a4:	22020510 	andcs	r0, r2, #16, 10	; 0x4000000
     7a8:	01000502 	tsteq	r0, r2, lsl #10
				uart_a_enable_int;
     7ac:	001f0501 	andseq	r0, pc, r1, lsl #10
     7b0:	04180205 	ldreq	r0, [r8], #-517	; 0xfffffdfb
				goto Redo_rx;
     7b4:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     7bc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
			return -2;
     7c0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     7c4:	01053c08 	tsteq	r5, r8, lsl #24
				uart_a_write (*buf);
     7c8:	06030524 	streq	r0, [r3], -r4, lsr #10
     7cc:	1b02052b 	blne	81c80 <__ccfg+0x61cd8>
			while (len && uart_a_room_in_tx) {
     7d0:	05010d05 	streq	r0, [r1, #-3333]	; 0xfffff2fb
     7d4:	0a050108 	beq	140bfc <__ccfg+0x120c54>
     7d8:	08050106 	stmdaeq	r5, {r1, r2, r8}
			if (len != operation) {
     7dc:	0603053c 			; <UNDEFINED> instruction: 0x0603053c
			uart_a_disable_int;
     7e0:	06040534 			; <UNDEFINED> instruction: 0x06040534
     7e4:	00070201 	andeq	r0, r7, r1, lsl #4
			if (uart_a_room_in_tx) {
     7e8:	1f050101 	svcne	0x00050101
     7ec:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
				uart_a_enable_int;
     7f0:	03000004 	movweq	r0, #4
     7f4:	0205011f 	andeq	r0, r5, #-1073741817	; 0xc0000007
				*buf++ = uart_a_read;
     7f8:	0108053d 	tsteq	r8, sp, lsr r5
			if (uart_a_room_in_tx) {
     7fc:	01060905 	tsteq	r6, r5, lsl #18
				uart_a_write (*buf);
     800:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
     804:	03052401 	movweq	r2, #21505	; 0x5401
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	054b3906 	strbeq	r3, [fp, #-2310]	; 0xfffff6fa
     80c:	02010604 	andeq	r0, r1, #4, 12	; 0x400000
			uart_a_enable_int;
     810:	01010007 	tsteq	r1, r7
     814:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
     818:	00047002 	andeq	r7, r4, r2
			return 0;
     81c:	012a0300 			; <UNDEFINED> instruction: 0x012a0300
			if (len == UART_CNTRL_SETRATE) {
     820:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
				if (__pi_uart_setrate (*((word*)buf),
     824:	050e061e 	streq	r0, [lr, #-1566]	; 0xfffff9e2
     828:	1e052405 	cdpne	4, 0, cr2, cr5, cr5, {0}
     82c:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
				syserror (EREQPAR, "uar");
     830:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
			syserror (ENOOPER, "uai");
     834:	01061205 	tsteq	r6, r5, lsl #4
			if (len == UART_CNTRL_GETRATE) {
     838:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
				return 1;
     83c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
			syserror (ENOOPER, "uai");
     844:	593f0602 	ldmdbpl	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
     848:	05013b05 	streq	r3, [r1, #-2821]	; 0xfffff4fb
     84c:	09050108 	stmdbeq	r5, {r3, r8}
     850:	08050106 	stmdaeq	r5, {r1, r2, r8}
     854:	0602054a 	streq	r0, [r2], -sl, asr #10
     858:	06150530 			; <UNDEFINED> instruction: 0x06150530
     85c:	4b010501 	blmi	41c68 <__ccfg+0x21cc0>
     860:	01000502 	tsteq	r0, r2, lsl #10
     864:	001f0501 	andseq	r0, pc, r1, lsl #10
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	00000205 	andeq	r0, r0, r5, lsl #4
void UART0IntHandler () {
     86c:	3a030000 	bcc	c0874 <__ccfg+0xa08cc>
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	17020501 	strne	r0, [r2, -r1, lsl #10]
     874:	0d061f05 	stceq	15, cr1, [r6, #-20]	; 0xffffffec
     878:	05250205 	streq	r0, [r5, #-517]!	; 0xfffffdfb
     87c:	02051b1f 	andeq	r1, r5, #31744	; 0x7c00
     880:	053d0625 	ldreq	r0, [sp, #-1573]!	; 0xfffff9db
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	0805013c 	stmdaeq	r5, {r2, r3, r4, r5, r8}
     888:	06090501 	streq	r0, [r9], -r1, lsl #10
		RISE_N_SHINE;
     88c:	4a080501 	bmi	201c98 <__ccfg+0x1e1cf0>
     890:	30060205 	andcc	r0, r6, r5, lsl #4
		i_trigger (devevent (UART_A, READ));
     894:	01060505 	tsteq	r6, r5, lsl #10
     898:	4b060305 	blmi	1814b4 <__ccfg+0x16150c>
     89c:	01061205 	tsteq	r6, r5, lsl #4
     8a0:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
     8a4:	04052006 	streq	r2, [r5], #-6
     8a8:	24052106 	strcs	r2, [r5], #-262	; 0xfffffefa
     8ac:	17050106 	strne	r0, [r5, -r6, lsl #2]
     8b0:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
     8b4:	06150523 	ldreq	r0, [r5], -r3, lsr #10
     8b8:	4b010501 	blmi	41cc4 <__ccfg+0x21d1c>
     8bc:	01000502 	tsteq	r0, r2, lsl #10
     8c0:	00130501 	andseq	r0, r3, r1, lsl #10
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	00000205 	andeq	r0, r0, r5, lsl #4
     8c8:	ce030000 	cdpgt	0, 0, cr0, cr3, cr0, {0}
     8cc:	02050100 	andeq	r0, r5, #0, 2
		i_trigger (devevent (UART_A, WRITE));
     8d0:	06130514 			; <UNDEFINED> instruction: 0x06130514
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	2202051e 	andcs	r0, r2, #125829120	; 0x7800000
     8d8:	05363306 	ldreq	r3, [r6, #-774]!	; 0xfffffcfa
		RISE_N_SHINE;
     8dc:	02041303 	andeq	r1, r4, #201326592	; 0xc000000
     8e0:	f0030405 			; <UNDEFINED> instruction: 0xf0030405
     8e4:	05300101 	ldreq	r0, [r0, #-257]!	; 0xfffffeff
		i_trigger (devevent (UART_A, WRITE));
     8e8:	0501065c 	streq	r0, [r1, #-1628]	; 0xfffff9a4
     8ec:	143e0604 	ldrtne	r0, [lr], #-1540	; 0xfffff9fc
     8f0:	02100a05 	andseq	r0, r0, #20480	; 0x5000
     8f4:	01010005 	tsteq	r1, r5
     8f8:	05002d05 	streq	r2, [r0, #-3333]	; 0xfffff2fb
     8fc:	0004ac02 	andeq	sl, r4, r2, lsl #24
     900:	01970300 	orrseq	r0, r7, r0, lsl #6
     904:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     908:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
     90c:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
     910:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
}
     914:	4a090306 	bmi	241534 <__ccfg+0x22158c>
     918:	03050304 	movweq	r0, #21252	; 0x5304
     91c:	017fb503 	cmneq	pc, r3, lsl #10
     920:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     924:	01cb0306 	biceq	r0, fp, r6, lsl #6
void __buttons_setirq (int val) {
     928:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	8f030602 	svchi	0x00030602
     930:	03053c7f 	movweq	r3, #23679	; 0x5c7f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	04010113 	streq	r0, [r1], #-275	; 0xfffffeed
     938:	03290504 			; <UNDEFINED> instruction: 0x03290504
     93c:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
		bn = BUTTON_GPIO (__button_list [i]);
     940:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	01040106 	tsteq	r4, r6, lsl #2
     948:	90030305 	andls	r0, r3, r5, lsl #6
     94c:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     950:	f0032d05 			; <UNDEFINED> instruction: 0xf0032d05
     954:	01042000 	mrseq	r2, (UNDEF: 4)
     958:	03060305 	movweq	r0, #25349	; 0x6305
}
     95c:	04207f90 	strteq	r7, [r0], #-3984	; 0xfffff070
     960:	03290504 			; <UNDEFINED> instruction: 0x03290504
     964:	050100eb 	streq	r0, [r1, #-235]	; 0xffffff15
     968:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
void __pinlist_setirq (int val) {
     96c:	01040106 	tsteq	r4, r6, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     970:	03060305 	movweq	r0, #25349	; 0x6305
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	01207f90 			; <UNDEFINED> instruction: 0x01207f90
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	01010101 	tsteq	r1, r1, lsl #2
	for (i = 0; i < N_PINLIST; i++) {
     97c:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
     984:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     988:	17050501 	strne	r0, [r5, -r1, lsl #10]
     98c:	01062d05 	tsteq	r6, r5, lsl #26
     990:	03050104 	movweq	r0, #20740	; 0x5104
	for (i = 0; i < N_PINLIST; i++) {
     994:	207eda03 	rsbscs	sp, lr, r3, lsl #20
}
     998:	2d050404 	cfstrscs	mvf0, [r5, #-16]
     99c:	2001a603 	andcs	sl, r1, r3, lsl #12
     9a0:	03050104 	movweq	r0, #20740	; 0x5104
     9a4:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
void GPIOIntHandler () {
     9a8:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
if (buttons_int) {
     9ac:	01a10329 			; <UNDEFINED> instruction: 0x01a10329
     9b0:	17050501 	strne	r0, [r5, -r1, lsl #10]
	buttons_disable ();
     9b4:	01062d05 	tsteq	r6, r5, lsl #26
     9b8:	03050104 	movweq	r0, #20740	; 0x5104
	i_trigger ((aword)&__button_list);
     9bc:	7eda0306 	cdpvc	3, 13, cr0, cr10, cr6, {0}
     9c0:	01010120 	tsteq	r1, r0, lsr #2
     9c4:	58010101 	stmdapl	r1, {r0, r8}
     9c8:	08052e01 	stmdaeq	r5, {r0, r9, sl, fp, sp}
     9cc:	00090211 	andeq	r0, r9, r1, lsl r2
     9d0:	1d050101 	stfnes	f0, [r5, #-4]
     9d4:	00020500 	andeq	r0, r2, r0, lsl #10
     9d8:	03000005 	movweq	r0, #5
     9dc:	0501029d 	streq	r0, [r1, #-669]	; 0xfffffd63
     9e0:	1d051602 	stcne	6, cr1, [r5, #-8]
     9e4:	16050e06 	strne	r0, [r5], -r6, lsl #28
	RISE_N_SHINE;
     9e8:	4a090524 	bmi	241e80 <__ccfg+0x221ed8>
     9ec:	05201605 	streq	r1, [r0, #-1541]!	; 0xfffff9fb
     9f0:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
if (pin_sensor_int) {
     9f4:	76032306 	strvc	r2, [r3], -r6, lsl #6
     9f8:	06110501 	ldreq	r0, [r1], -r1, lsl #10
	i_trigger ((aword)(&__input_pins));
     9fc:	03020501 	movweq	r0, #9473	; 0x2501
     a00:	2f052e0d 	svccs	0x00052e0d
     a04:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
     a08:	200a032a 	andcs	r0, sl, sl, lsr #6
     a0c:	76032f05 	strvc	r2, [r3], -r5, lsl #30
     a10:	2e360520 	cfabs64cs	mvdx0, mvdx6
     a14:	0a032a05 	beq	cb230 <__ccfg+0xab288>
     a18:	0602052e 	streq	r0, [r2], -lr, lsr #10
     a1c:	06010523 	streq	r0, [r1], -r3, lsr #10
     a20:	000b022f 	andeq	r0, fp, pc, lsr #4
     a24:	21050101 	tstcs	r5, r1, lsl #2
	__pinsen_disable_and_clear;
     a28:	40020500 	andmi	r0, r2, r0, lsl #10
	RISE_N_SHINE;
     a2c:	03000005 	movweq	r0, #5
     a30:	050102aa 	streq	r0, [r1, #-682]	; 0xfffffd56
     a34:	21051702 	tstcs	r5, r2, lsl #14
}
     a38:	02051b06 	andeq	r1, r5, #6144	; 0x1800
     a3c:	06090525 	streq	r0, [r9], -r5, lsr #10
     a40:	1402052e 	strne	r0, [r2], #-1326	; 0xfffffad2
     a44:	05016903 	streq	r6, [r1, #-2307]	; 0xfffff6fd
     a48:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
void system_init () {
     a4c:	2a052e2f 	bcs	14c310 <__ccfg+0x12c368>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a54:	2069032f 	rsbcs	r0, r9, pc, lsr #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     a5c:	2017032a 	andscs	r0, r7, sl, lsr #6
     a60:	23060205 	movwcs	r0, #25093	; 0x6205
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a64:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
     a68:	02130601 	andseq	r0, r3, #1048576	; 0x100000
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a6c:	01010006 	tsteq	r1, r6
     a70:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
     a74:	00056802 	andeq	r6, r5, r2, lsl #16
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	02b70300 	adcseq	r0, r7, #0, 6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a7c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a80:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a84:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8c:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	02051e2b 	andeq	r1, r5, #688	; 0x2b0
		pin = (port_confs [i] >> 19) & 0x1f;
     a98:	05052206 	streq	r2, [r5, #-518]	; 0xfffffdfa
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9c:	03050106 	movweq	r0, #20742	; 0x5106
     aa0:	15182506 	ldrne	r2, [r8, #-1286]	; 0xfffffafa
     aa4:	01061205 	tsteq	r6, r5, lsl #4
     aa8:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
		if (port_confs [i] & 0x80)
     aac:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     ab4:	04052006 	streq	r2, [r5], #-6
		if (port_confs [i] & 0x40)
     ab8:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     ac0:	17052f06 	strne	r2, [r5, -r6, lsl #30]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	03050106 	movweq	r0, #20742	; 0x5106
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	12052206 	andne	r2, r5, #1610612736	; 0x60000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	06050106 	streq	r0, [r5], -r6, lsl #2
	all_leds_blink;
     ad0:	06030520 	streq	r0, [r3], -r0, lsr #10
     ad4:	06070522 	streq	r0, [r7], -r2, lsr #10
     ad8:	20060501 	andcs	r0, r6, r1, lsl #10
     adc:	21060405 	tstcs	r6, r5, lsl #8
     ae0:	13061705 	movwne	r1, #26373	; 0x6705
     ae4:	0604051f 			; <UNDEFINED> instruction: 0x0604051f
     ae8:	1403052f 	strne	r0, [r3], #-1327	; 0xfffffad1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aec:	01061205 	tsteq	r6, r5, lsl #4
     af0:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     af4:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
     af8:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     afc:	04052006 	streq	r2, [r5], #-6
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	17052106 	strne	r2, [r5, -r6, lsl #2]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	051f1306 	ldreq	r1, [pc, #-774]	; 806 <ioreq_uart_a+0xae>
     b08:	052f0604 	streq	r0, [pc, #-1540]!	; 50c <tci_run_delay_timer+0xc>
	IntEnable (INT_AON_RTC_COMB);
     b0c:	12051403 	andne	r1, r5, #50331648	; 0x3000000
     b10:	06050106 	streq	r0, [r5], -r6, lsl #2
     b14:	06040520 	streq	r0, [r4], -r0, lsr #10
	__pi_malloc_init ();
     b18:	06080521 	streq	r0, [r8], -r1, lsr #10
	IntEnable (INT_AON_GPIO_EDGE);
     b1c:	20070501 	andcs	r0, r7, r1, lsl #10
     b20:	21060505 	tstcs	r6, r5, lsl #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	13061805 	movwne	r1, #26629	; 0x6805
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b28:	0605051f 			; <UNDEFINED> instruction: 0x0605051f
     b2c:	0505042f 	streq	r0, [r5, #-1071]	; 0xfffffbd1
     b30:	7da30302 	stcvc	3, cr0, [r3, #8]!
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	06110501 	ldreq	r0, [r1], -r1, lsl #10
     b38:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	30060305 	andcc	r0, r6, r5, lsl #6
     b40:	01061205 	tsteq	r6, r5, lsl #4
     b44:	05201905 	streq	r1, [r0, #-2309]!	; 0xfffff6fb
	urates [0] = UART_RATE / 100;
     b48:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
     b4c:	13052106 	movwne	r2, #20742	; 0x5106
	reinit_uart ();
     b50:	07050106 	streq	r0, [r5, -r6, lsl #2]
	EXTRA_INITIALIZERS;
     b54:	2f140520 	svccs	0x00140520
     b58:	051f0705 	ldreq	r0, [pc, #-1797]	; 45b <mdelay+0x17>
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b5c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     b60:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     b64:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     b68:	03290504 			; <UNDEFINED> instruction: 0x03290504
     b6c:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b70:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     b74:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
			devinit [i] . init (devinit [i] . param);
     b78:	03060505 	movweq	r0, #25861	; 0x6505
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	054a7de6 	strbeq	r7, [sl, #-3558]	; 0xfffff21a
     b80:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     b84:	06052008 	streq	r2, [r5], -r8
	IntEnable (INT_UART0_COMB);
     b88:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     b8c:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
}
     b90:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
	tci_run_auxiliary_timer ();
     b94:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		diag ("");
     b98:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     b9c:	e8030605 	stmda	r3, {r0, r2, r9, sl}
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     ba0:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	06050106 	streq	r0, [r5], -r6, lsl #2
		diag ("Leftover RAM: %d bytes",
     ba8:	01012106 	tsteq	r1, r6, lsl #2
     bac:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     bb0:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     bb4:	01210606 			; <UNDEFINED> instruction: 0x01210606
     bb8:	13050501 	movwne	r0, #21761	; 0x5501
     bbc:	01061805 	tsteq	r6, r5, lsl #16
     bc0:	053c0a03 	ldreq	r0, [ip, #-2563]!	; 0xfffff5fd
     bc4:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
     bc8:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     bcc:	05052007 	streq	r2, [r5, #-7]
     bd0:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
     bd4:	01040106 	tsteq	r4, r6, lsl #2
     bd8:	03060b05 	movweq	r0, #27397	; 0x6b05
     bdc:	052e02cd 	streq	r0, [lr, #-717]!	; 0xfffffd33
     be0:	05051a02 	streq	r1, [r5, #-2562]	; 0xfffff5fe
     be4:	03050106 	movweq	r0, #20742	; 0x5106
     be8:	0c053406 	cfstrseq	mvf3, [r5], {6}
     bec:	03053006 	movweq	r3, #20486	; 0x5006
     bf0:	0522062c 	streq	r0, [r2, #-1580]!	; 0xfffff9d4
     bf4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     bf8:	0c052f0a 	stceq	15, cr2, [r5], {10}
     bfc:	2203051f 	andcs	r0, r3, #130023424	; 0x7c00000
     c00:	051e0c05 	ldreq	r0, [lr, #-3077]	; 0xfffff3fb
__attribute__ ((noreturn)) void __pi_release () {
     c04:	132f0603 			; <UNDEFINED> instruction: 0x132f0603
     c08:	02054a01 	andeq	r4, r5, #4096	; 0x1000
     c0c:	06010519 			; <UNDEFINED> instruction: 0x06010519
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c10:	03160513 	tsteq	r6, #79691776	; 0x4c00000
	check_stack_overflow;
     c14:	05042045 	streq	r2, [r4, #-69]	; 0xffffffbb
     c18:	03060505 	movweq	r0, #25861	; 0x6505
     c1c:	054a7dc9 	strbeq	r7, [sl, #-3529]	; 0xfffff237
	update_n_wake (MAX_WORD, NO);
     c20:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     c24:	04210606 	strteq	r0, [r1], #-1542	; 0xfffff9fa
     c28:	03290504 			; <UNDEFINED> instruction: 0x03290504
	for_all_tasks (__pi_curr) {
     c2c:	050102c2 	streq	r0, [r1, #-706]	; 0xfffffd3e
     c30:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
     c34:	05040106 	streq	r0, [r4, #-262]	; 0xfffffefa
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	03060505 	movweq	r0, #25861	; 0x6505
	__SLEEP;
     c3c:	054a7dba 	strbeq	r7, [sl, #-3514]	; 0xfffff246
     c40:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     c44:	06052008 	streq	r2, [r5], -r8
     c48:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
	system_event_count ++;
     c4c:	c0032905 	andgt	r2, r3, r5, lsl #18
     c50:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
	switch (__pi_systat.effpdm) {
     c54:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     c58:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     c5c:	bc030605 	stclt	6, cr0, [r3], {5}
     c60:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
			__WFI ();
     c64:	06050106 	streq	r0, [r5], -r6, lsl #2
     c68:	01012106 	tsteq	r1, r6, lsl #2
     c6c:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
	check_stack_overflow;
     c70:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
     c74:	01210606 			; <UNDEFINED> instruction: 0x01210606
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c78:	13050501 	movwne	r0, #21761	; 0x5501
     c7c:	01061805 	tsteq	r6, r5, lsl #16
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	03050104 	movweq	r0, #20740	; 0x5104
			goto Redo;
     c84:	02ce0306 	sbceq	r0, lr, #402653184	; 0x18000000
	for_all_tasks (__pi_curr) {
     c88:	0606054a 	streq	r0, [r6], -sl, asr #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	06040501 	streq	r0, [r4], -r1, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	00150230 	andseq	r0, r5, r0, lsr r2
     c94:	2d050101 	stfcss	f0, [r5, #-4]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	7c020500 	cfstr32vc	mvfx0, [r2], {-0}
     c9c:	03000006 	movweq	r0, #6
     ca0:	05010389 	streq	r0, [r1, #-905]	; 0xfffffc77
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca4:	2d051602 	stccs	6, cr1, [r5, #-8]
     ca8:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	2f060524 	svccs	0x00060524
     cb0:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
			__WFI ();
     cb4:	06060521 	streq	r0, [r6], -r1, lsr #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb8:	20050501 	andcs	r0, r5, r1, lsl #10
     cbc:	03060305 	movweq	r0, #25349	; 0x6305
}
     cc0:	06052009 	streq	r2, [r5], -r9
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cc4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc8:	1a052306 	bne	1498e8 <__ccfg+0x129940>
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     cd0:	7ef90306 	cdpvc	3, 15, cr0, cr9, cr6, {0}
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd4:	0610052e 	ldreq	r0, [r0], -lr, lsr #10
     cd8:	2e2e0501 	cfsh64cs	mvdx0, mvdx14, #1
     cdc:	87031a05 	strhi	r1, [r3, -r5, lsl #20]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	052f3c01 	streq	r3, [pc, #-3073]!	; e7 <blinker+0x1f>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	17052018 	smladne	r5, r8, r0, r2
     ce8:	0309051f 	movweq	r0, #38175	; 0x951f
     cec:	0d05200a 	stceq	0, cr2, [r5, #-40]	; 0xffffffd8
     cf0:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	0d05230b 	stceq	3, cr2, [r5, #-44]	; 0xffffffd4
     cf8:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	0105134d 	tsteq	r5, sp, asr #6
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d00:	03051906 	movweq	r1, #22790	; 0x5906
     d04:	052f2906 	streq	r2, [pc, #-2310]!	; 406 <root+0x176>
     d08:	0201060a 	andeq	r0, r1, #10485760	; 0xa00000
     d0c:	01010009 	tsteq	r1, r9
     d10:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
			SysCtrlSetRechargeBeforePowerDown
     d14:	0006cc02 	andeq	ip, r6, r2, lsl #24
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d18:	05d30300 	ldrbeq	r0, [r3, #768]	; 0x300
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     d20:	06330517 			; <UNDEFINED> instruction: 0x06330517
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
     d28:	33052702 	movwcc	r2, #22274	; 0x5702
     d2c:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	3e062702 	cdpcc	7, 0, cr2, cr6, cr2, {0}
     d34:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	017bd503 	cmneq	fp, r3, lsl #10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	02050104 	andeq	r0, r5, #4, 2
     d40:	04ab0306 	strteq	r0, [fp], #774	; 0x306
     d44:	09030601 	stmdbeq	r3, {r0, r9, sl}
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d48:	05060482 	streq	r0, [r6, #-1154]	; 0xfffffb7e
			while (!(AONWUCPowerStatusGet () &
     d4c:	7dd90324 	ldclvc	3, cr0, [r9, #144]	; 0x90
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	17050501 	strne	r0, [r5, -r1, lsl #10]
     d54:	01062305 	tsteq	r6, r5, lsl #6
     d58:	01050104 	tsteq	r5, r4, lsl #2
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	2002a503 	andcs	sl, r2, r3, lsl #10
     d60:	23050604 	movwcs	r0, #22020	; 0x5604
     d64:	207ddb03 	rsbscs	sp, sp, r3, lsl #22
     d68:	4f060505 	svcmi	0x00060505
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	01062205 	tsteq	r6, r5, lsl #4
     d70:	02050104 	andeq	r0, r5, #4, 2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	029e0306 	addseq	r0, lr, #402653184	; 0x18000000
     d78:	060d0566 	streq	r0, [sp], -r6, ror #10
			SysCtrlAdjustRechargeAfterPowerDown ();
     d7c:	06020501 	streq	r0, [r2], -r1, lsl #10
			reinit_uart ();
     d80:	0601052f 	streq	r0, [r1], -pc, lsr #10
     d84:	000c0213 	andeq	r0, ip, r3, lsl r2
     d88:	1c050101 	stfnes	f0, [r5], {1}
}
     d8c:	20020500 	andcs	r0, r2, r0, lsl #10
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d90:	03000007 	movweq	r0, #7
     d94:	050105ef 	streq	r0, [r1, #-1519]	; 0xfffffa11
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	06041702 	streq	r1, [r4], -r2, lsl #14
     d9c:	f7032405 			; <UNDEFINED> instruction: 0xf7032405
     da0:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	06230517 			; <UNDEFINED> instruction: 0x06230517
     da8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     dac:	02880302 	addeq	r0, r8, #134217728	; 0x8000000
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     db0:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	7df80323 	ldclvc	3, cr0, [r8, #140]!	; 0x8c
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dbc:	85030602 	strhi	r0, [r3, #-1538]	; 0xfffff9fe
     dc0:	06044a02 	streq	r4, [r4], -r2, lsl #20
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	c9032405 	stmdbgt	r3, {r0, r2, sl, sp}
     dc8:	2d05017c 	stfcss	f0, [r5, #-496]	; 0xfffffe10
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	05051717 	streq	r1, [r5, #-1815]	; 0xfffff8e9
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd0:	06230517 			; <UNDEFINED> instruction: 0x06230517
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     dd8:	a9030602 	stmdbge	r3, {r1, r9, sl}
			PRCMPowerDomainOff (
     ddc:	06043c03 	streq	r3, [r4], -r3, lsl #24
     de0:	ce032705 	cdpgt	7, 0, cr2, cr3, cr5, {0}
	__SLEEP;
     de4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
     de8:	06240514 			; <UNDEFINED> instruction: 0x06240514
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	goto Redo;
     df0:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
     df4:	0e02587d 	mcreq	8, 0, r5, cr2, cr13, {3}
     df8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     dfc:	0205003d 	andeq	r0, r5, #61	; 0x3d
     e00:	00000758 	andeq	r0, r0, r8, asr r7
     e04:	01068f03 	tsteq	r6, r3, lsl #30
     e08:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
     e0c:	2e1e063d 	mrccs	6, 0, r0, cr14, cr13, {1}
     e10:	03060505 	movweq	r0, #25861	; 0x6505
     e14:	0e05820b 	cdpeq	2, 0, cr8, cr5, cr11, {0}
     e18:	08050106 	stmdaeq	r5, {r1, r2, r8}
     e1c:	1f0e052f 	svcne	0x000e052f
     e20:	2f060505 	svccs	0x00060505
     e24:	050f0a05 	streq	r0, [pc, #-2565]	; 427 <udelay+0xf>
     e28:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
     e2c:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
     e30:	07053406 	streq	r3, [r5, -r6, lsl #8]
     e34:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     e38:	2e280306 	cdpcs	3, 2, cr0, cr8, cr6, {0}
     e3c:	01061605 	tsteq	r6, r5, lsl #12
     e40:	34030105 	strcc	r0, [r3], #-261	; 0xfffffefb
     e44:	03090520 	movweq	r0, #38176	; 0x9520
     e48:	053c7fa0 	ldreq	r7, [ip, #-4000]!	; 0xfffff060
     e4c:	200b0304 	andcs	r0, fp, r4, lsl #6
     e50:	05210805 	streq	r0, [r1, #-2053]!	; 0xfffff7fb
     e54:	2e74030e 	cdpcs	3, 7, cr0, cr4, cr14, {0}
     e58:	03060405 	movweq	r0, #25605	; 0x6405
int main (void) {
     e5c:	054b3c0b 	strbeq	r3, [fp, #-3083]	; 0xfffff3f5
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     e64:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	054b3006 	strbeq	r3, [fp, #-6]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	0b052404 	bleq	149e84 <__ccfg+0x129edc>
	system_init ();
     e70:	4a240306 	bmi	901a90 <__ccfg+0x8e1ae8>
	tcv_init ();
     e74:	062d0405 	strteq	r0, [sp], -r5, lsl #8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e78:	060b0521 	streq	r0, [fp], -r1, lsr #10
     e7c:	06050501 	streq	r0, [r5], -r1, lsl #10
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
     e84:	05300608 	ldreq	r0, [r0, #-1544]!	; 0xfffff9f8
     e88:	2f061e05 	svccs	0x00061e05
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	0e0a0513 	mcreq	5, 0, r0, cr10, cr3, {0}
     e90:	20061205 	andcs	r1, r6, r5, lsl #4
	delay (16, 0);
     e94:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
     e98:	05350604 	ldreq	r0, [r5, #-1540]!	; 0xfffff9fc
     e9c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
	__pi_release ();
     ea0:	4b340604 	blmi	d026b8 <__ccfg+0xce2710>
     ea4:	01060805 	tsteq	r6, r5, lsl #16
     ea8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     eac:	4b2f0605 	blmi	bc26c8 <__ccfg+0xba2720>
     eb0:	03060905 	movweq	r0, #26885	; 0x6905
     eb4:	0405204d 	streq	r2, [r5], #-77	; 0xffffffb3
     eb8:	05203003 	streq	r3, [r0, #-3]!
static void killev (__pi_pcb_t *pid) {
     ebc:	05052108 	streq	r2, [r5, #-264]	; 0xfffffef8
	wfun = (aword)(pid->code);
     ec0:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
	for_all_tasks (i) {
     ec4:	11030604 	tstne	r3, r4, lsl #12
		for (j = 0; j < nevents (i); j++) {
     ec8:	0b055e3c 	bleq	1587c0 <__ccfg+0x138818>
     ecc:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
     ed0:	052f061f 	streq	r0, [pc, #-1567]!	; 8b9 <UART0IntHandler+0x51>
			    || i->Events [j] . Event == wfun
     ed4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
		for (j = 0; j < nevents (i); j++) {
     ed8:	05250604 	streq	r0, [r5, #-1540]!	; 0xfffff9fc
			if (i->Events [j] . Event == (aword)pid
     edc:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
     ee0:	052f0605 	streq	r0, [pc, #-1541]!	; 8e3 <UART0IntHandler+0x7b>
     ee4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
				wakeupev (i, j);
     ee8:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
     eec:	04053106 	streq	r3, [r5], #-262	; 0xfffffefa
	for_all_tasks (i) {
     ef0:	2e160306 	cdpcs	3, 1, cr0, cr6, cr6, {0}
}
     ef4:	2e6d0306 	cdpcs	3, 6, cr0, cr13, cr6, {0}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	01060705 	tsteq	r6, r5, lsl #14
static void qfree (aword *ch) {
     efc:	2f060505 	svccs	0x00060505
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f00:	88030205 	stmdahi	r3, {r0, r2, r9}
	cc = (aword*)(mpools + MA_NP);
     f04:	1005017f 	andne	r0, r5, pc, ror r1
	m_setnextp (ch, chunk);
     f08:	0c050106 	stfeqs	f0, [r5], {6}
	m_setnextp (cc, ch);
     f0c:	2000f903 	andcs	pc, r0, r3, lsl #18
}
     f10:	051f1305 	ldreq	r1, [pc, #-773]	; c13 <__pi_release+0xf>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	052f0605 	streq	r0, [pc, #-1541]!	; 917 <UART0IntHandler+0xaf>
     f18:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
     f1c:	11030604 	tstne	r3, r4, lsl #12
			m_setnextp (cc, m_nextp (chunk));
     f20:	00120220 	andseq	r0, r2, r0, lsr #4
			m_size (chunk) += m_hdrlen + m_size (ch);
     f24:	2b050101 	blcs	141330 <__ccfg+0x121388>
     f28:	00020500 	andeq	r0, r2, r0, lsl #10
     f2c:	03000000 	movweq	r0, #0
     f30:	050105ea 	streq	r0, [r1, #-1514]	; 0xfffffa16
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	01051402 	tsteq	r5, r2, lsl #8
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	06021306 	streq	r1, [r2], -r6, lsl #6
     f3c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     f40:	02050019 	andeq	r0, r5, #25
			m_setnextp (cc, m_nextp (chunk));
     f44:	00000868 	andeq	r0, r0, r8, ror #16
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	01078103 	tsteq	r7, r3, lsl #2
     f4c:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
     f50:	03240506 			; <UNDEFINED> instruction: 0x03240506
     f54:	05050112 	streq	r0, [r5, #-274]	; 0xfffffeee
     f58:	06220517 			; <UNDEFINED> instruction: 0x06220517
     f5c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			if (m_size (chunk) >= m_size (ch))
     f60:	2e670319 	mcrcs	3, 3, r0, cr7, cr9, {0}
     f64:	22050604 	andcs	r0, r5, #4, 12	; 0x400000
     f68:	04201903 	strteq	r1, [r0], #-2307	; 0xfffff6fd
		chunk = m_nextp (chunk))
     f6c:	03060501 	movweq	r0, #25857	; 0x6501
     f70:	0604206b 	streq	r2, [r4], -fp, rrx
     f74:	15032205 	strne	r2, [r3, #-517]	; 0xfffffdfb
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	diag_wait (a);
     f7c:	6b030602 	blvs	c278c <__ccfg+0xa27e4>
	diag_wchar (c, a);
     f80:	06060520 	streq	r0, [r6], -r0, lsr #10
     f84:	20050501 	andcs	r0, r5, r1, lsl #10
}
     f88:	052e2905 	streq	r2, [lr, #-2309]!	; 0xfffff6fb
     f8c:	03052e1c 	movweq	r2, #24092	; 0x5e1c
	syserror (ESTATE, "state");
     f90:	014b2f06 	cmpeq	fp, r6, lsl #30
     f94:	01011358 	tsteq	r1, r8, asr r3
     f98:	20062e01 	andcs	r2, r6, r1, lsl #28
     f9c:	662e6606 	strtvs	r6, [lr], -r6, lsl #12
void update_n_wake (word min, Boolean force) {
     fa0:	052e014a 	streq	r0, [lr, #-330]!	; 0xfffffeb6
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	06051502 	streq	r1, [r5], -r2, lsl #10
     fa8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     fac:	2e250520 	cfsh64cs	mvdx0, mvdx5, #16
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
     fb4:	062f0603 	strteq	r0, [pc], -r3, lsl #12
     fb8:	4b062c14 	blmi	18c010 <__ccfg+0x16c068>
     fbc:	01135801 	tsteq	r3, r1, lsl #16
     fc0:	062e0101 	strteq	r0, [lr], -r1, lsl #2
     fc4:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
     fc8:	05014a58 	streq	r4, [r1, #-2648]	; 0xfffff5a8
     fcc:	02320601 	eorseq	r0, r2, #1048576	; 0x100000
     fd0:	0101000b 	tsteq	r1, fp
     fd4:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
     fd8:	00092802 	andeq	r2, r9, r2, lsl #16
     fdc:	07d90300 	ldrbeq	r0, [r9, r0, lsl #6]
     fe0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		for_all_tasks (i) {
     fe4:	03041413 	movweq	r1, #17427	; 0x4413
	__pi_mintk = znew + min;
     fe8:	fe030305 	cdp2	3, 0, cr0, cr3, cr5, {0}
     fec:	01040178 	tsteq	r4, r8, ror r1
			if (!twaiting (i))
     ff0:	03062105 	movweq	r2, #24837	; 0x6105
     ff4:	040106fd 	streq	r0, [r1], #-1789	; 0xfffff903
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	03030503 	movweq	r0, #13571	; 0x3503
     ffc:	04207983 	strteq	r7, [r0], #-2435	; 0xfffff67d
    1000:	06020501 	streq	r0, [r2], -r1, lsl #10
    1004:	20078303 	andcs	r8, r7, r3, lsl #6
    1008:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    100c:	04041303 	streq	r1, [r4], #-771	; 0xfffffcfd
    1010:	03063305 	movweq	r3, #25349	; 0x6305
    1014:	04017dad 	streq	r7, [r1], #-3501	; 0xfffff253
    1018:	03080501 	movweq	r0, #34049	; 0x8501
    101c:	042002d3 	strteq	r0, [r0], #-723	; 0xfffffd2d
    1020:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1024:	04207dad 	strteq	r7, [r0], #-3501	; 0xfffff253
				wakeuptm (i);
    1028:	03080501 	movweq	r0, #34049	; 0x8501
    102c:	052002d3 	streq	r0, [r0, #-723]!	; 0xfffffd2d
		for_all_tasks (i) {
    1030:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
				d = i->Timer - znew;
    1034:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    1038:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
    103c:	7da70329 	stcvc	3, cr0, [r7, #164]!	; 0xa4
		if ((word)(__pi_mintk - znew) < min) 
    1040:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1044:	01063305 	tsteq	r6, r5, lsl #6
    1048:	042e2d05 	strteq	r2, [lr], #-3333	; 0xfffff2fb
	__pi_old = znew;
    104c:	06030501 	streq	r0, [r3], -r1, lsl #10
}
    1050:	2002d503 	andcs	sp, r2, r3, lsl #10
	TCI_RUN_DELAY_TIMER;
    1054:	1e060805 	cdpne	8, 0, cr0, cr6, cr5, {0}
}
    1058:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
    105c:	04042c08 	streq	r2, [r4], #-3080	; 0xfffff3f8
    1060:	ad033305 	stcge	3, cr3, [r3, #-20]	; 0xffffffec
    1064:	0104207d 	tsteq	r4, sp, ror r0
    1068:	d5030305 	strle	r0, [r3, #-773]	; 0xfffffcfb
void proceed (word state) {
    106c:	41052002 	tstmi	r5, r2
	prcdstate (__pi_curr, state);
    1070:	061d0558 			; <UNDEFINED> instruction: 0x061d0558
    1074:	010e051d 	tsteq	lr, sp, lsl r5
	release;
    1078:	13130305 	tstne	r3, #335544320	; 0x14000000
    107c:	29050404 	stmdbcs	r5, {r2, sl}
void __pi_wait (aword event, word state) {
    1080:	017da703 	cmneq	sp, r3, lsl #14
	sint j = nevents (__pi_curr);
    1084:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
	if (j >= MAX_EVENTS_PER_TASK)
    1088:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    108c:	06030501 	streq	r0, [r3], -r1, lsl #10
    1090:	2002d503 	andcs	sp, r2, r3, lsl #10
		syserror (ENEVENTS, "sw");
    1094:	01064105 	tsteq	r6, r5, lsl #2
    1098:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
	setestate (__pi_curr->Events [j], state, event);
    109c:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
	incwait (__pi_curr);
    10a0:	03041802 	movweq	r1, #18434	; 0x4802
	setestate (__pi_curr->Events [j], state, event);
    10a4:	ec030305 	stc	3, cr0, [r3], {5}
}
    10a8:	01040178 	tsteq	r4, r8, ror r1
    10ac:	03060105 	movweq	r0, #24837	; 0x6105
    10b0:	02200795 	eoreq	r0, r0, #39059456	; 0x2540000
void __pi_trigger (aword event) {
    10b4:	01010008 	tsteq	r1, r8
	for_all_tasks (i) {
    10b8:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
		for (j = 0; j < nevents (i); j++) {
    10bc:	00096c02 	andeq	r6, r9, r2, lsl #24
    10c0:	07ec0300 	strbeq	r0, [ip, r0, lsl #6]!
    10c4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    10c8:	03041413 	movweq	r1, #17427	; 0x4413
			if (i->Events [j] . Event == event) {
    10cc:	eb030305 	bl	c1ce8 <__ccfg+0xa1d40>
    10d0:	01040178 	tsteq	r4, r8, ror r1
    10d4:	03062105 	movweq	r2, #24837	; 0x6105
				wakeupev (i, j);
    10d8:	04010790 	streq	r0, [r1], #-1936	; 0xfffff870
    10dc:	03030503 	movweq	r0, #13571	; 0x3503
	for_all_tasks (i) {
    10e0:	042078f0 	strteq	r7, [r0], #-2288	; 0xfffff710
}
    10e4:	06020501 	streq	r0, [r2], -r1, lsl #10
aword __pi_join (aword pid, word st) {
    10e8:	20079603 	andcs	r9, r7, r3, lsl #12
	for_all_tasks (i) {
    10ec:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10f0:	04010609 	streq	r0, [r1], #-1545	; 0xfffff9f7
	return 0;
    10f4:	03330504 	teqeq	r3, #4, 10	; 0x1000000
		if ((aword)i == pid) {
    10f8:	04207d9b 	strteq	r7, [r0], #-3483	; 0xfffff265
			__pi_wait (pid, st);
    10fc:	03080501 	movweq	r0, #34049	; 0x8501
}
    1100:	042002e6 	strteq	r0, [r0], #-742	; 0xfffffd1a
	for_all_tasks (i) {
    1104:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1108:	04207d9a 	strteq	r7, [r0], #-3482	; 0xfffff266
void delay (word d, word state) {
    110c:	03030501 	movweq	r0, #13569	; 0x3501
	settstate (__pi_curr, state);
    1110:	062002e8 	strteq	r0, [r0], -r8, ror #5
    1114:	0608051e 			; <UNDEFINED> instruction: 0x0608051e
    1118:	1f1e0501 	svcne	0x001e0501
    111c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
	update_n_wake (d, YES);
    1120:	042f0603 	strteq	r0, [pc], #-1539	; 1128 <delay+0x1c>
    1124:	03290504 			; <UNDEFINED> instruction: 0x03290504
	__pi_curr->Timer = __pi_old + d;
    1128:	05017d94 	streq	r7, [r1, #-3476]	; 0xfffff26c
    112c:	33051705 	movwcc	r1, #22277	; 0x5705
	inctimer (__pi_curr);
    1130:	01040106 	tsteq	r4, r6, lsl #2
    1134:	e8030305 	stmda	r3, {r0, r2, r8, r9}
    1138:	02052e02 	andeq	r2, r5, #2, 28
}
    113c:	05040447 	streq	r0, [r4, #-1095]	; 0xfffffbb9
    1140:	7d9b032d 	ldcvc	3, cr0, [fp, #180]	; 0xb4
	if (fun == NULL)
    1144:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
		return (int) __pi_curr;
    1148:	e8030603 	stmda	r3, {r0, r1, r9, sl}
    114c:	41052002 	tstmi	r5, r2
	for_all_tasks (i)
    1150:	1d050106 	stfnes	f0, [r5, #-24]	; 0xffffffe8
}
    1154:	0e051d06 	cdpeq	13, 0, cr1, cr5, cr6, {0}
		if (i->code == fun)
    1158:	06020501 	streq	r0, [r2], -r1, lsl #10
	for_all_tasks (i)
    115c:	04260601 	strteq	r0, [r6], #-1537	; 0xfffff9ff
    1160:	03030503 	movweq	r0, #13571	; 0x3503
    1164:	040178d9 	streq	r7, [r1], #-2265	; 0xfffff727
int __pi_strlen (const char *s) {
    1168:	06010501 	streq	r0, [r1], -r1, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
    116c:	2007a803 	andcs	sl, r7, r3, lsl #16
}
    1170:	01000802 	tsteq	r0, r2, lsl #16
	for (i = 0; *(s+i) != '\0'; i++);
    1174:	00180501 	andseq	r0, r8, r1, lsl #10
	while (n--)
    1178:	09a80205 	stmibeq	r8!, {r0, r2, r9}
    117c:	c5030000 	strgt	r0, [r3, #-0]
		*dest++ = *src++;
    1180:	07040107 	streq	r0, [r4, -r7, lsl #2]
    1184:	bb030105 	bllt	c15a0 <__ccfg+0xa15f8>
    1188:	01040178 	tsteq	r4, r8, ror r1
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	03061805 	movweq	r1, #26629	; 0x6805
		syserror (EREQPAR, "addv");
    1190:	040107c5 	streq	r0, [r1], #-1989	; 0xfffff83b
		syserror (ERESOURCE, "addv");
    1194:	03050507 	movweq	r0, #21767	; 0x5507
	if (ioreq [loc] != NULL)
    1198:	052078bb 	streq	r7, [r0, #-2235]!	; 0xfffff745
    119c:	02052e04 	andeq	r2, r5, #4, 28	; 0x40
		syserror (ERESOURCE, "addv");
    11a0:	013d3d06 	teqeq	sp, r6, lsl #26
	ioreq [loc] = rf;
    11a4:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
}
    11a8:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
    11ac:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	04580113 	ldrbeq	r0, [r8], #-275	; 0xfffffeed
    11b4:	0f010508 	svceq	0x00010508
    11b8:	01060505 	tsteq	r6, r5, lsl #10
    11bc:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11c0:	013d0602 	teqeq	sp, r2, lsl #12
    11c4:	063c0101 	ldrteq	r0, [ip], -r1, lsl #2
    11c8:	2e660620 	cdpcs	6, 6, cr0, cr6, cr0, {1}
		syserror (ENODEVICE, "io");
    11cc:	2e014a58 			; <UNDEFINED> instruction: 0x2e014a58
    11d0:	58012f13 	stmdapl	r1, {r0, r1, r4, r8, r9, sl, fp, sp}
	if (len == 0)
    11d4:	01050104 	tsteq	r5, r4, lsl #2
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	07d00306 	ldrbeq	r0, [r0, r6, lsl #6]
    11dc:	000b0201 	andeq	r0, fp, r1, lsl #4
	if (ret >= 0)
    11e0:	15050101 	strne	r0, [r5, #-257]	; 0xfffffeff
	if (ret == -1) {
    11e4:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    11e8:	0300000a 	movweq	r0, #10
		if (retry == WNONE)
    11ec:	05010880 	streq	r0, [r1, #-2176]	; 0xfffff780
		iowait (dev, operation, retry);
    11f0:	15051402 	strne	r1, [r5, #-1026]	; 0xfffffbfe
    11f4:	02051006 	andeq	r1, r5, #6
    11f8:	3e061e32 	mcrcc	14, 0, r1, cr6, cr2, {1}
			release;
    11fc:	04595959 	ldrbeq	r5, [r9], #-2393	; 0xfffff6a7
	if (ret == -2) {
    1200:	03050509 	movweq	r0, #21769	; 0x5509
		if (retry != WNONE) {
    1204:	05017ca7 	streq	r7, [r1, #-3239]	; 0xfffff359
    1208:	04010631 	streq	r0, [r1], #-1585	; 0xfffff9cf
			iowait (dev, operation, retry);
    120c:	030b0501 	movweq	r0, #46337	; 0xb501
    1210:	04207dc5 	strteq	r7, [r0], #-3525	; 0xfffff23b
			(ioreq [dev]) (NONE, buf, len);
    1214:	03310509 	teqeq	r1, #37748736	; 0x2400000
    1218:	042002bb 	strteq	r0, [r0], #-699	; 0xfffffd45
    121c:	03320501 	teqeq	r2, #4194304	; 0x400000
		(ioreq [dev]) (NONE, buf, len);
    1220:	042e7dc8 	strteq	r7, [lr], #-3528	; 0xfffff238
    1224:	03050504 	movweq	r0, #21764	; 0x5504
    1228:	052e029b 	streq	r0, [lr, #-667]!	; 0xfffffd65
}
    122c:	7ecc032d 	cdpvc	3, 12, cr0, cr12, cr13, {1}
	if (retry != WNONE) {
    1230:	2e4a032e 	cdpcs	3, 4, cr0, cr10, cr14, {1}
		delay (-ret - 2, retry);
    1234:	31050904 	tstcc	r5, r4, lsl #18
    1238:	2e028703 	cdpcs	7, 0, cr8, cr2, cr3, {0}
    123c:	02050104 	andeq	r0, r5, #4, 2
    1240:	03dc0306 	bicseq	r0, ip, #402653184	; 0x18000000
		release;
    1244:	79e70320 	stmibvc	r7!, {r5, r8, r9}^
    1248:	07051401 	streq	r1, [r5, -r1, lsl #8]
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    124c:	01120501 	tsteq	r2, r1, lsl #10
    1250:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
    1254:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    1258:	07052c3d 	smladxeq	r5, sp, ip, r2
    125c:	06030522 	streq	r0, [r3], -r2, lsr #10
		syserror (ERESOURCE, "mal1");
    1260:	0632052f 	ldrteq	r0, [r2], -pc, lsr #10
    1264:	2e210558 	mcrcs	5, 1, r0, cr1, cr8, {2}
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1268:	2f060305 	svccs	0x00060305
    126c:	01060605 	tsteq	r6, r5, lsl #12
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1270:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
	m_size (mpools [0]) = mlen - m_hdrlen;
    1274:	29050404 	stmdbcs	r5, {r2, sl}
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1278:	01029103 	tsteq	r2, r3, lsl #2
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    127c:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    1280:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
}
    1284:	01043c06 	tsteq	r4, r6, lsl #24
    1288:	03060305 	movweq	r0, #25349	; 0x6305
    128c:	05207de9 	streq	r7, [r0, #-3561]!	; 0xfffff217
    1290:	052e0606 	streq	r0, [lr, #-1542]!	; 0xfffff9fa
    1294:	04210604 	strteq	r0, [r1], #-1540	; 0xfffff9fc
    1298:	03290504 			; <UNDEFINED> instruction: 0x03290504
void __pi_free (aword *ch) {
    129c:	05050127 	streq	r0, [r5, #-295]	; 0xfffffed9
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12a0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    12a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		syserror (EMALLOC, "malg");
    12a8:	56030604 	strpl	r0, [r3], -r4, lsl #12
    12ac:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
	mcfree [MA_NP] += m_size (ch);
    12b0:	00db0329 	sbcseq	r0, fp, r9, lsr #6
		m_size (ch) ^= MALLOC_UMASK;
    12b4:	17050501 	strne	r0, [r5, -r1, lsl #10]
    12b8:	01062d05 	tsteq	r6, r5, lsl #26
	mcfree [MA_NP] += m_size (ch);
    12bc:	3c050104 	stfccs	f0, [r5], {4}
	QFREE;
    12c0:	7f960306 	svcvc	0x00960306
	if (mevent [MA_NP] . nwait) {
    12c4:	0112052e 	tsteq	r2, lr, lsr #10
    12c8:	01060205 	tsteq	r6, r5, lsl #4
		trigger ((aword)(&(mevent [MA_NP])));
    12cc:	069a0306 	ldreq	r0, [sl], r6, lsl #6
		mevent [MA_NP] . nwait --;
    12d0:	0401012e 	streq	r0, [r1], #-302	; 0xfffffed2
}
    12d4:	03290504 			; <UNDEFINED> instruction: 0x03290504
    12d8:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
    12dc:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    12e0:	01040106 	tsteq	r4, r6, lsl #2
void kill (aword pid) {
    12e4:	e6030205 	str	r0, [r3], -r5, lsl #4
		pid = (aword) __pi_curr;
    12e8:	04043c05 	streq	r3, [r4], #-3077	; 0xfffff3fb
	j = NULL;
    12ec:	9a032d05 	bls	cc708 <__ccfg+0xac760>
	for_all_tasks (i) {
    12f0:	0104207a 	tsteq	r4, sl, ror r0
	syserror (EREQPAR, "kpi");
    12f4:	03060205 	movweq	r0, #25093	; 0x6205
    12f8:	042005e6 	strteq	r0, [r0], #-1510	; 0xfffffa1a
		if ((aword)i == pid) {
    12fc:	03290504 			; <UNDEFINED> instruction: 0x03290504
    1300:	05017a95 	streq	r7, [r1, #-2709]	; 0xfffff56b
				__PCB = i->Next;
    1304:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
			killev (i);
    1308:	01040106 	tsteq	r4, r6, lsl #2
			ufree (i);
    130c:	03060205 	movweq	r0, #25093	; 0x6205
			if (i == __pi_curr)
    1310:	012005e6 	smulwteq	r0, r6, r5
    1314:	01010101 	tsteq	r1, r1, lsl #2
				release;
    1318:	2e016601 	cfmadd32cs	mvax0, mvfx6, mvfx1, mvfx1
				j->Next = i->Next;
    131c:	05040401 	streq	r0, [r4, #-1025]	; 0xfffffbff
    1320:	7acb0329 	bvc	ff2c1fcc <_estack+0xdf2bcfcc>
    1324:	17050501 	strne	r0, [r5, -r1, lsl #10]
}
    1328:	01062d05 	tsteq	r6, r5, lsl #26
    132c:	02050104 	andeq	r0, r5, #4, 2
    1330:	2005b003 	andcs	fp, r5, r3
	if (size < 8)
    1334:	2d050404 	cfstrscs	mvf0, [r5, #-16]
		_size = 2;
    1338:	207ad003 	rsbscs	sp, sl, r3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    133c:	02050104 	andeq	r0, r5, #4, 2
		_size = (((aword)size) + 3) >> 2;
    1340:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
		_size = (((aword)size) + 3) >> 2;
    1348:	7acb0329 	bvc	ff2c1ff4 <_estack+0xdf2bcff4>
		if (mevent [MA_NP] . nfail != 255)
    134c:	17050501 	strne	r0, [r5, -r1, lsl #10]
    1350:	01062d05 	tsteq	r6, r5, lsl #26
			mevent [MA_NP] . nfail ++;
    1354:	02050104 	andeq	r0, r5, #4, 2
		mnfree [MA_NP] = 0;
    1358:	05b00306 	ldreq	r0, [r0, #774]!	; 0x306
    135c:	01010120 	tsteq	r1, r0, lsr #2
		if (m_magic (chunk) != MALLOC_MAGIC)
    1360:	05010101 	streq	r0, [r1, #-257]	; 0xfffffeff
    1364:	10030623 	andne	r0, r3, r3, lsr #12
			syserror (EMALLOC, "malc");
    1368:	03020501 	movweq	r0, #9473	; 0x2501
    136c:	58062070 	stmdapl	r6, {r4, r5, r6, sp}
		if (m_size (chunk) >= _size)
    1370:	0d032e01 	stceq	14, cr2, [r3, #-4]
    1374:	050a0401 	streq	r0, [sl, #-1025]	; 0xfffffbff
		chunk = m_nextp (chunk)) {
    1378:	7ecd0305 	cdpvc	3, 12, cr0, cr13, cr5, {0}
		m_setnextp (cc, m_nextp (chunk));
    137c:	062f0501 	strteq	r0, [pc], -r1, lsl #10
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1380:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1384:	01ba0327 			; <UNDEFINED> instruction: 0x01ba0327
			m_size (chunk) = _size;
    1388:	050a0420 	streq	r0, [sl, #-1056]	; 0xfffffbe0
			cc = chunk + _size + m_hdrlen;
    138c:	7ec6032f 	cdpvc	3, 12, cr0, cr6, cr15, {1}
    1390:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
			m_size (cc) = waste - m_hdrlen;
    1394:	b5030602 	strlt	r0, [r3, #-1538]	; 0xfffff9fe
			QFREE;
    1398:	23052001 	movwcs	r2, #20481	; 0x5001
		mevent [MA_NP] . nfail = 0;
    139c:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
		mcfree [MA_NP] -= m_size (chunk);
    13a0:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    13a4:	20740323 	rsbscs	r0, r4, r3, lsr #6
    13a8:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    13ac:	01062705 	tsteq	r6, r5, lsl #14
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	05280205 	streq	r0, [r8, #-517]!	; 0xfffffdfb
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13b4:	20780327 	rsbscs	r0, r8, r7, lsr #6
		m_size (chunk) |= MALLOC_UMASK;
    13b8:	28060205 	stmdacs	r6, {r0, r2, r9}
			mnfree [MA_NP] = mcfree [MA_NP];
    13bc:	0a03313f 	beq	cd8c0 <__ccfg+0xad918>
}
    13c0:	c003404a 	andgt	r4, r3, sl, asr #32
    13c4:	5959017d 	ldmdbpl	r9, {r0, r2, r3, r4, r5, r6, r8}^
    13c8:	05090459 	streq	r0, [r9, #-1113]	; 0xfffffba7
    13cc:	7eae0305 	cdpvc	3, 10, cr0, cr14, cr5, {0}
    13d0:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    13d4:	d403060d 	strle	r0, [r3], #-1549	; 0xfffff9f3
    13d8:	09040101 	stmdbeq	r4, {r0, r8}
aword __pi_fork (fsmcode func, aword data) {
    13dc:	ac033105 	stfges	f3, [r3], {5}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	01042e7e 	tsteq	r4, lr, ror lr
    13e4:	03060205 	movweq	r0, #25093	; 0x6205
    13e8:	052001d4 	streq	r0, [r0, #-468]!	; 0xfffffe2c
		if ((j = __PCB) == NULL)
    13ec:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
	i->Next = NULL;
    13f0:	03220602 			; <UNDEFINED> instruction: 0x03220602
	i->data = data;
    13f4:	012e02c7 	smlawteq	lr, r7, r2, r0
		if ((j = __PCB) == NULL)
    13f8:	05152e2e 	ldreq	r2, [r5, #-3630]	; 0xfffff1d2
}
    13fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
			for (; j->Next != NULL; j = j->Next);
    1400:	03052e05 	movweq	r2, #24069	; 0x5e05
    1404:	0b043006 	bleq	10d424 <__ccfg+0xed47c>
	return (aword) i;
    1408:	c3030505 	movwgt	r0, #13573	; 0x3505
    140c:	0c040179 	stfeqs	f0, [r4], {121}	; 0x79
	if (mevent [MA_NP] . nwait != 255)
    1410:	05015e03 	streq	r5, [r1, #-3587]	; 0xfffff1fd
    1414:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
    1418:	0605050b 	streq	r0, [r5], -fp, lsl #10
		mevent [MA_NP] . nwait ++;
    141c:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	05010634 	streq	r0, [r1, #-1588]	; 0xfffff9cc
    1424:	044b0605 	strbeq	r0, [fp], #-1541	; 0xfffff9fb
void diag (const char *mess, ...) {
    1428:	03150501 	tsteq	r5, #4194304	; 0x400000
    142c:	054a06d5 	strbeq	r0, [sl, #-1749]	; 0xfffff92b
    1430:	04051303 	streq	r1, [r5], #-771	; 0xfffffcfd
	diag_disable_int (a, is);
    1434:	3a150513 	bcc	542888 <__ccfg+0x5228e0>
    1438:	03190205 	tsteq	r9, #1342177280	; 0x50000000
    143c:	04017ecb 	streq	r7, [r1], #-3787	; 0xfffff135
				d = (bc == 16) ? 10000 : 1000000000;
    1440:	03240506 			; <UNDEFINED> instruction: 0x03240506
	diag_disable_int (a, is);
    1444:	05017ed4 	streq	r7, [r1, #-3796]	; 0xfffff12c
	while (*mess != '\0') {
    1448:	23051705 	movwcs	r1, #22277	; 0x5705
	dgout ('\r');
    144c:	01040106 	tsteq	r4, r6, lsl #2
	dgout ('\n');
    1450:	dd030205 	sfmle	f0, 4, [r3, #-20]	; 0xffffffec
    1454:	06042002 	streq	r2, [r4], -r2
    1458:	a3032305 	movwge	r2, #13061	; 0x3305
	diag_wait (a);
    145c:	0104207d 	tsteq	r4, sp, ror r0
	diag_enable_int (a, is);
    1460:	03060205 	movweq	r0, #25093	; 0x6205
    1464:	4e4a02dd 	mcrmi	2, 2, r0, cr10, cr13, {6}
}
    1468:	13060105 	movwne	r0, #24837	; 0x6105
    146c:	052d0205 	streq	r0, [sp, #-517]!	; 0xfffffdfb
    1470:	5f030603 	svcpl	0x00030603
		if (*mess == '%') {
    1474:	0541412e 	strbeq	r4, [r1, #-302]	; 0xfffffed2
    1478:	05130604 	ldreq	r0, [r3, #-1540]	; 0xfffff9fc
			if (*mess == 'l') {
    147c:	2f021f03 	svccs	0x00021f03
    1480:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				mess++;
    1484:	0205001f 	andeq	r0, r5, #31
				val = va_arg (ap, lword);
    1488:	00000000 	andeq	r0, r0, r0
				bc = 32;
    148c:	0108fd03 	tsteq	r8, r3, lsl #26	; <UNPREDICTABLE>
				bc = 16;
    1490:	16170205 	ldrne	r0, [r7], -r5, lsl #4
			switch (*mess) {
    1494:	01062c05 	tsteq	r6, r5, lsl #24
    1498:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
    149c:	1505202c 	strne	r2, [r5, #-44]	; 0xffffffd4
				dgout ('%');
    14a0:	21120520 	tstcs	r2, r0, lsr #10
    14a4:	4a1f1505 	bmi	7c68c0 <__ccfg+0x7a6918>
				dgout (*mess);
    14a8:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    14ac:	01010003 	tsteq	r1, r3
			switch (*mess) {
    14b0:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
					v = __pi_hex_enc_table [
    14b4:	00000002 	andeq	r0, r0, r2
					i += 4;
    14b8:	0adb0300 	beq	ff6c20c0 <_estack+0xdf6bd0c0>
					(val >> (bc - i)) & 0xf];
    14bc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    14c0:	010f0514 	tsteq	pc, r4, lsl r5	; <UNPREDICTABLE>
					dgout (v);
    14c4:	0e061c05 	cdpeq	12, 0, cr1, cr6, cr5, {0}
    14c8:	05250605 	streq	r0, [r5, #-1541]!	; 0xfffff9fb
				while (i < bc) {
    14cc:	06052007 	streq	r2, [r5], -r7
			mess++;
    14d0:	06030558 			; <UNDEFINED> instruction: 0x06030558
					d /= 10;
    14d4:	0606052e 	streq	r0, [r6], -lr, lsr #10
				if ((val >> (bc - 1)) & 1) {
    14d8:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
    14dc:	010f052d 	tsteq	pc, sp, lsr #10
					dgout ('-');
    14e0:	20060205 	andcs	r0, r6, r5, lsl #4
    14e4:	01054d06 	tsteq	r5, r6, lsl #26
						val |= 0xffff0000;
    14e8:	04021306 	streq	r1, [r2], #-774	; 0xfffffcfa
    14ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    14f0:	02050031 	andeq	r0, r5, #49	; 0x31
				d = (bc == 16) ? 10000 : 1000000000;
    14f4:	00000c04 	andeq	r0, r0, r4, lsl #24
    14f8:	010ae703 	tsteq	sl, r3, lsl #14
    14fc:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
					v = (word) (val / d);
    1500:	03030503 	movweq	r0, #13571	; 0x3503
					if (v || d == 1) break;
    1504:	040177b2 	streq	r7, [r1], #-1970	; 0xfffff84e
    1508:	06310501 	ldrteq	r0, [r1], -r1, lsl #10
					d /= 10;
    150c:	0108cc03 	tsteq	r8, r3, lsl #24
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	03050304 	movweq	r0, #21252	; 0x5304
					dgout (v + '0');
    1514:	3c77b403 	cfldrdcc	mvd11, [r7], #-12
    1518:	31050104 	tstcc	r5, r4, lsl #2
    151c:	2008cc03 	andcs	ip, r8, r3, lsl #24
					d /= 10;
    1520:	03050304 	movweq	r0, #21252	; 0x5304
					val = val - (v * d);
    1524:	2077b403 	rsbscs	fp, r7, r3, lsl #8
					if (d == 0) break;
    1528:	02050104 	andeq	r0, r5, #4, 2
					v = (word) (val / d);
    152c:	08d00306 	ldmeq	r0, {r1, r2, r8, r9}^
    1530:	0204012e 	andeq	r0, r4, #-2147483637	; 0x8000000b
				if (bc == 16)
    1534:	03060505 	movweq	r0, #25861	; 0x6505
				d = (bc == 16) ? 10000 : 1000000000;
    1538:	046676dd 	strbteq	r7, [r6], #-1757	; 0xfffff923
					val &= 0xffff;
    153c:	06020501 	streq	r0, [r2], -r1, lsl #10
					dgout (*s);
    1540:	2009a303 	andcs	sl, r9, r3, lsl #6
					s++;
    1544:	9b030d04 	blls	c495c <__ccfg+0xa49b4>
				while (*s != '\0') {
    1548:	01010175 	tsteq	r1, r5, ror r1
    154c:	044a5b19 	strbeq	r5, [sl], #-2841	; 0xfffff4e7
			dgout (*mess++);
    1550:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    1554:	2e099d03 	cdpcs	13, 0, cr9, cr9, cr3, {0}
    1558:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    155c:	76f90306 	ldrbtvc	r0, [r9], r6, lsl #6
    1560:	01010120 	tsteq	r1, r0, lsr #2
}
    1564:	03040101 	movweq	r0, #16641	; 0x4101
    while(1)
    1568:	36030305 	strcc	r0, [r3], -r5, lsl #6
{
    156c:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
    SetupTrimDevice();
    1570:	204a0302 	subcs	r0, sl, r2, lsl #6
    pui32Src = &_etext;
    1574:	03010482 	movweq	r0, #5250	; 0x1482
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1578:	050108eb 	streq	r0, [r1, #-2283]	; 0xfffff715
    __asm("    ldr     r0, =_bss\n"
    157c:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    1580:	054c0602 	strbeq	r0, [ip, #-1538]	; 0xfffff9fe
    1584:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    1588:	15052002 	strne	r2, [r5, #-2]
    158c:	20020520 	andcs	r0, r2, r0, lsr #10
   main();
    1590:	6a060405 	bvs	1825ac <__ccfg+0x162604>
    FaultISR();
    1594:	050d0421 	streq	r0, [sp, #-1057]	; 0xfffffbdf
        *pui32Dest++ = *pui32Src++;
    1598:	778e0302 	strvc	r0, [lr, r2, lsl #6]
    159c:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    15a0:	012b0303 			; <UNDEFINED> instruction: 0x012b0303
    15a4:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    15a8:	20205503 	eorcs	r5, r0, r3, lsl #10
    15ac:	03010420 	movweq	r0, #5152	; 0x1420
    15b0:	04200ac5 	strteq	r0, [r0], #-2757	; 0xfffff53b
    15b4:	0303050d 	movweq	r0, #13581	; 0x350d
static byte get_byte () {
    15b8:	054a75a6 	strbeq	r7, [sl, #-1446]	; 0xfffffa5a
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15bc:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    15c0:	23052006 	movwcs	r2, #20486	; 0x5006
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c4:	201f0520 	andscs	r0, pc, r0, lsr #10
    15c8:	30060405 	andcc	r0, r6, r5, lsl #8
		if (ee_inp)
    15cc:	01060e05 	tsteq	r6, r5, lsl #28
			b |= 1;
    15d0:	2f060405 	svccs	0x00060405
    15d4:	041c0205 	ldreq	r0, [ip], #-517	; 0xfffffdfb
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15d8:	03040501 	movweq	r0, #17665	; 0x4501
	for (b = 0, i = 0; i < 8; i++) {
    15dc:	052e098f 	streq	r0, [lr, #-2447]!	; 0xfffff671
}
    15e0:	0501062a 	streq	r0, [r1, #-1578]	; 0xfffff9d6
    15e4:	2a052704 	bcs	14b1fc <__ccfg+0x12b254>
    15e8:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
static void put_byte (byte b) {
    15ec:	044e0604 	strbeq	r0, [lr], #-1540	; 0xfffff9fc
    15f0:	7fb20309 	svcvc	0x00b20309
    15f4:	06290501 	strteq	r0, [r9], -r1, lsl #10
    15f8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (b & 0x80)
    15fc:	d1030604 	tstle	r3, r4, lsl #12
    1600:	044d6600 	strbeq	r6, [sp], #-1536	; 0xfffffa00
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1604:	03050502 	movweq	r0, #21762	; 0x5502
	for (i = 0; i < 8; i++) {
    1608:	0401789f 	streq	r7, [r1], #-2207	; 0xfffff761
		b <<= 1;
    160c:	03040501 	movweq	r0, #17665	; 0x4501
	for (i = 0; i < 8; i++) {
    1610:	052007e5 	streq	r0, [r0, #-2021]!	; 0xfffff81b
}
    1614:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1618:	214b0604 	cmpcs	fp, r4, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    161c:	01061a05 	tsteq	r6, r5, lsl #20
    1620:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
	put_byte (cmd);
    1624:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    1628:	01789603 	cmneq	r8, r3, lsl #12
}
    162c:	21060105 	tstcs	r6, r5, lsl #2
    1630:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
static void wwait (word st, word del) {
    1634:	07f10306 	ldrbeq	r0, [r1, r6, lsl #6]!
    1638:	050c0420 	streq	r0, [ip, #-1056]	; 0xfffffbe0
    163c:	78a00305 	stmiavc	r0!, {r0, r2, r8, r9}
	while (dopen && (rdsr () & 1)) {
    1640:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    1644:	d4030631 	strle	r0, [r3], #-1585	; 0xfffff9cf
    1648:	0c040102 	stfeqs	f0, [r4], {2}
    164c:	ac032e05 	stcge	14, cr2, [r3], {5}
	put_byte (CMD_RDSR);
    1650:	0e042e7d 	mcreq	14, 0, r2, cr4, cr13, {3}
	r = get_byte ();
    1654:	88035205 	stmdahi	r3, {r0, r2, r9, ip, lr}
    1658:	0c042e02 	stceq	14, cr2, [r4], {2}
	while (dopen && (rdsr () & 1)) {
    165c:	f8032e05 			; <UNDEFINED> instruction: 0xf8032e05
}
    1660:	01042e7d 	tsteq	r4, sp, ror lr
		if (st == WNONE)
    1664:	03060405 	movweq	r0, #25605	; 0x6405
    1668:	042007e5 	strteq	r0, [r0], #-2021	; 0xfffff81b
			mdelay (1);
    166c:	0331050e 	teqeq	r1, #58720256	; 0x3800000
    1670:	05017aa0 	streq	r7, [r1, #-2720]	; 0xfffff560
			delay (del, st);
    1674:	52051505 	andpl	r1, r5, #20971520	; 0x1400000
    1678:	01040106 	tsteq	r4, r6, lsl #2
			release;
    167c:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
    1680:	0e042005 	cdpeq	0, 0, cr2, cr4, cr5, {0}
    1684:	9b035205 	blls	d5ea0 <__ccfg+0xb5ef8>
static void ready () {
    1688:	01042e7a 	tsteq	r4, sl, ror lr
	if (dopen) {
    168c:	03060405 	movweq	r0, #25605	; 0x6405
		wwait (WNONE, 1);
    1690:	042e05e0 	strteq	r0, [lr], #-1504	; 0xfffffa20
    1694:	03050502 	movweq	r0, #21762	; 0x5502
    1698:	04017886 	streq	r7, [r1], #-2182	; 0xfffff77a
	dstat = 0;
    169c:	03040501 	movweq	r0, #17665	; 0x4501
}
    16a0:	042007fc 	strteq	r0, [r0], #-2044	; 0xfffff804
    16a4:	03050509 	movweq	r0, #21769	; 0x5509
    16a8:	05017aea 	streq	r7, [r1, #-2794]	; 0xfffff516
	udelay (1);
    16ac:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
    16b0:	04b60329 	ldrteq	r0, [r6], #809	; 0x329
	udelay (1);
    16b4:	03310520 	teqeq	r1, #32, 10	; 0x8000000
		dopen = DOPEN_TEMP;
    16b8:	042e7bca 	strteq	r7, [lr], #-3018	; 0xfffff436
    16bc:	06040501 	streq	r0, [r4], -r1, lsl #10
    16c0:	2e059903 	vmlacs.f16	s18, s10, s6	; <UNPREDICTABLE>
    16c4:	01062305 	tsteq	r6, r5, lsl #6
static void cclose () {
    16c8:	06200405 	strteq	r0, [r0], -r5, lsl #8
	if (dopen == DOPEN_TEMP) {
    16cc:	0509046a 	streq	r0, [r9, #-1130]	; 0xfffffb96
    16d0:	799f0305 	ldmibvc	pc, {r0, r2, r8, r9}	; <UNPREDICTABLE>
		wwait (WNONE, 1);
    16d4:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    16d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	cmd_0 (CMD_DP);
    16dc:	06ed0304 	strbteq	r0, [sp], r4, lsl #6
    16e0:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
		dopen = 0;
    16e4:	7993033f 	ldmibvc	r3, {r0, r1, r2, r3, r4, r5, r8, r9}
}
    16e8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
word ee_open () {
    16ec:	ea030604 	b	c2f04 <__ccfg+0xa2f5c>
	ready ();
    16f0:	09042e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, sp}
	dopen = DOPEN_PERM;
    16f4:	017f9003 	cmneq	pc, r3
    16f8:	01062905 	tsteq	r6, r5, lsl #18
}
    16fc:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (dopen) {
    1700:	2e00f303 	cdpcs	3, 0, cr15, cr0, cr3, {0}
    1704:	29050904 	stmdbcs	r5, {r2, r8, fp}
		dopen = DOPEN_TEMP;
    1708:	207f8d03 	rsbscs	r8, pc, r3, lsl #26
		cclose ();
    170c:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
}
    1710:	00f30306 	rscseq	r0, r3, r6, lsl #6
int ser_in (word st, char *buf, int len) {
    1714:	04404d4a 	strbeq	r4, [r0], #-3402	; 0xfffff2b6
    1718:	03050502 	movweq	r0, #21762	; 0x5502
	if (len == 0)
    171c:	040177ea 	streq	r7, [r1], #-2026	; 0xfffff816
	if (__inpline == NULL) {
    1720:	03040501 	movweq	r0, #17665	; 0x4501
		if ((prcs = running (__inserial)) == 0) {
    1724:	05200899 	streq	r0, [r0, #-2201]!	; 0xfffff767
    1728:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
			prcs = runthread (__inserial);
    172c:	214b0604 	cmpcs	fp, r4, lsl #12
    1730:	01061a05 	tsteq	r6, r5, lsl #20
			if (prcs == 0) {
    1734:	05230405 	streq	r0, [r3, #-1029]!	; 0xfffffbfb
				npwait (st);
    1738:	04051d1a 	streq	r1, [r5], #-3354	; 0xfffff2e6
		release;
    173c:	04593f06 	ldrbeq	r3, [r9], #-3846	; 0xfffff0fa
		join (prcs, st);
    1740:	7eee0309 	cdpvc	3, 14, cr0, cr14, cr9, {0}
    1744:	06290501 	strteq	r0, [r9], -r1, lsl #10
	if (*__inpline == NULL) // bin cmd
    1748:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    174c:	7bdb030d 	blvc	ff6c2388 <_estack+0xdf6bd388>
	if (prcs >= len)
    1750:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
		prcs = len-1;
    1754:	04a50329 	strteq	r0, [r5], #809	; 0x329
	memcpy (buf, __inpline, prcs);
    1758:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    175c:	97030604 	strls	r0, [r3, -r4, lsl #12]
    1760:	0e044a01 	vmlaeq.f32	s8, s8, s2
	ufree (__inpline);
    1764:	f3033105 	vrhadd.u8	d3, d3, d5
	__inpline = NULL;
    1768:	05050179 	streq	r0, [r5, #-377]	; 0xfffffe87
	if (*buf) // if it's NULL, it's a bin cmd
    176c:	06520515 			; <UNDEFINED> instruction: 0x06520515
		buf [prcs] = '\0';
    1770:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
}
    1774:	8c03061a 	stchi	6, cr0, [r3], {26}
		prcs = strlen (__inpline);
    1778:	0a052e06 	beq	14cf98 <__ccfg+0x12cff0>
    177c:	050e0411 	streq	r0, [lr, #-1041]	; 0xfffffbef
		return 0;
    1780:	7ac30305 	bvc	ff0c239c <_estack+0xdf0bd39c>
    1784:	060d0501 	streq	r0, [sp], -r1, lsl #10
    1788:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
int ser_outf (word st, const char *m, ...) {
    178c:	05bd030a 	ldreq	r0, [sp, #778]!	; 0x30a
    1790:	06040520 	streq	r0, [r4], -r0, lsr #10
	if ((prcs = running (__outserial)) != 0) {
    1794:	0b055932 	bleq	157c64 <__ccfg+0x137cbc>
    1798:	1a050106 	bne	141bb8 <__ccfg+0x121c10>
		join (prcs, st);
    179c:	0a052106 	beq	149bbc <__ccfg+0x129c14>
    17a0:	060b0511 			; <UNDEFINED> instruction: 0x060b0511
		release;
    17a4:	580a0501 	stmdapl	sl, {r0, r8, sl}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17a8:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    17ac:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    17b0:	017ab803 	cmneq	sl, r3, lsl #16
		umwait (st);
    17b4:	01063105 	tsteq	r6, r5, lsl #2
    17b8:	bc033f05 	stclt	15, cr3, [r3], {5}
	if (runstrand (__outserial, buf) == 0) {
    17bc:	3105207e 	tstcc	r5, lr, ror r0
    17c0:	2001c403 	andcs	ip, r1, r3, lsl #8
    17c4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		ufree (buf);
    17c8:	05cb0306 	strbeq	r0, [fp, #774]	; 0x306
		npwait (st);
    17cc:	05090420 	streq	r0, [r9, #-1056]	; 0xfffffbe0
}
    17d0:	78f10305 	ldmvc	r1!, {r0, r2, r8, r9}^
    17d4:	063f0501 	ldrteq	r0, [pc], -r1, lsl #10
    17d8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    17dc:	92030604 	andls	r0, r3, #4, 12	; 0x400000
int ser_inf (word st, const char *fmt, ...) {
    17e0:	0c042e07 	stceq	14, cr2, [r4], {7}
    17e4:	f5030505 			; <UNDEFINED> instruction: 0xf5030505
	if (fmt == NULL)
    17e8:	2e050177 	mcrcs	1, 0, r0, cr5, cr7, {3}
	if (__inpline == NULL) {
    17ec:	01040106 	tsteq	r4, r6, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    17f0:	03060405 	movweq	r0, #25605	; 0x6405
    17f4:	042e088e 	strteq	r0, [lr], #-2190	; 0xfffff772
			prcs = runthread (__inserial);
    17f8:	03050502 	movweq	r0, #21762	; 0x5502
    17fc:	040177c9 	streq	r7, [r1], #-1993	; 0xfffff837
			if (prcs == 0) {
    1800:	03040501 	movweq	r0, #17665	; 0x4501
				npwait (st);
    1804:	032008ba 			; <UNDEFINED> instruction: 0x032008ba
		release;
    1808:	052f2e09 	streq	r2, [pc, #-3593]!	; a07 <GPIOIntHandler+0x5f>
		join (prcs, st);
    180c:	7db00302 	ldcvc	3, cr0, [r0, #8]!
    1810:	05060401 	streq	r0, [r6, #-1025]	; 0xfffffbff
	va_start (ap, fmt);
    1814:	7ed40324 	cdpvc	3, 13, cr0, cr4, cr4, {1}
	prcs = vscan (__inpline, fmt, ap);
    1818:	17050501 	strne	r0, [r5, -r1, lsl #10]
    181c:	01062305 	tsteq	r6, r5, lsl #6
	ufree (__inpline);
    1820:	01050104 	tsteq	r5, r4, lsl #2
	__inpline = NULL;
    1824:	5801a803 	stmdapl	r1, {r0, r1, fp, sp, pc}
}
    1828:	03060405 	movweq	r0, #25605	; 0x6405
    182c:	5b2002f0 	blpl	8023f4 <__ccfg+0x7e244c>
    1830:	01062c05 	tsteq	r6, r5, lsl #24
		return 0;
    1834:	05273205 	streq	r3, [r7, #-517]!	; 0xfffffdfb
    1838:	2079032c 	rsbscs	r0, r9, ip, lsr #6
    183c:	4c060405 	cfstrsmi	mvf0, [r6], {5}
strand (__outserial, const char*)
    1840:	01062d05 	tsteq	r6, r5, lsl #26
    1844:	5d060405 	cfstrspl	mvf0, [r6, #-20]	; 0xffffffec
    1848:	01063205 	tsteq	r6, r5, lsl #4
    184c:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
endstrand
    1850:	01063205 	tsteq	r6, r5, lsl #4
    1854:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
	ptr = data;
    1858:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
    185c:	01778b03 	cmneq	r7, r3, lsl #22
	if (*ptr)
    1860:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		len = strlen (ptr);
    1864:	2008f803 	andcs	pc, r8, r3, lsl #16
    1868:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    186c:	017a8803 	cmneq	sl, r3, lsl #16
    1870:	01062d05 	tsteq	r6, r5, lsl #26
    1874:	31060505 	tstcc	r6, r5, lsl #10
    1878:	01064d05 	tsteq	r6, r5, lsl #26
    187c:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
	len -= quant;
    1880:	01062e05 	tsteq	r6, r5, lsl #28
    1884:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1888:	05f70306 	ldrbeq	r0, [r7, #774]!	; 0x306
	if (len == 0) {
    188c:	0502043c 	streq	r0, [r2, #-1084]	; 0xfffffbc4
		ufree (data);
    1890:	77850305 	strvc	r0, [r5, r5, lsl #6]
		finish;
    1894:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    1898:	e803060d 	stmda	r3, {r0, r2, r3, r9, sl}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    189c:	01042002 	tsteq	r4, r2
    18a0:	03063905 	movweq	r3, #26885	; 0x6905
    18a4:	05200696 	streq	r0, [r0, #-1686]!	; 0xfffff96a
    18a8:	0e04010a 	adfeqs	f0, f4, #2.0
    18ac:	ea030505 	b	c2cc8 <__ccfg+0xa2d20>
strand (__inserial, address)
    18b0:	0d050179 	stfeqs	f0, [r5, #-484]	; 0xfffffe1c
    18b4:	01040106 	tsteq	r4, r6, lsl #2
    18b8:	96030a05 	strls	r0, [r3], -r5, lsl #20
    18bc:	04052006 	streq	r2, [r5], #-6
    18c0:	09043206 	stmdbeq	r4, {r1, r2, r9, ip, sp}
	if (__inpline != NULL)
    18c4:	ec030505 	cfstr32	mvfx0, [r3], {5}
    18c8:	41050177 	tstmi	r5, r7, ror r1
		finish;
    18cc:	01040106 	tsteq	r4, r6, lsl #2
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    18d0:	97030405 	strls	r0, [r3, -r5, lsl #8]
    18d4:	09042e08 	stmdbeq	r4, {r3, r9, sl, fp, sp}
    18d8:	e9034105 	stmdb	r3, {r0, r2, r8, lr}
    18dc:	01042077 	tsteq	r4, r7, ror r0
		umwait (IM_INIT);
    18e0:	03060405 	movweq	r0, #25605	; 0x6405
		release;
    18e4:	52200897 	eorpl	r0, r0, #9895936	; 0x970000
	savedata (data);
    18e8:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	len = MAX_LINE_LENGTH;
    18ec:	2075d103 	rsbscs	sp, r5, r3, lsl #2
	io (IM_READ, __cport, READ, ptr, 1);
    18f0:	0101014a 	tsteq	r1, sl, asr #2
    18f4:	03050304 	movweq	r0, #21252	; 0x5304
    18f8:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
    18fc:	0302050d 	movweq	r0, #9485	; 0x250d
	if (ptr == (char*) data) { // new line
    1900:	02162055 	andseq	r2, r6, #85	; 0x55
    1904:	01010037 	tsteq	r1, r7, lsr r0
		if (*ptr == '\0') { // bin cmd
    1908:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
			proceed (IM_BIN);
    190c:	00000002 	andeq	r0, r0, r2
    1910:	00e10300 	rsceq	r0, r1, r0, lsl #6
		if (*ptr < 0x20)
    1914:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1918:	1e061205 	cdpne	2, 0, cr1, cr6, cr5, {0}
			proceed (IM_READ);
    191c:	21220205 			; <UNDEFINED> instruction: 0x21220205
    1920:	2f21061f 	svccs	0x0021061f
	if (*ptr == '\n' || *ptr == '\r') {
    1924:	08053f4b 	stmdaeq	r5, {r0, r1, r3, r6, r8, r9, sl, fp, ip, sp}
    1928:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    192c:	08022f06 	stmdaeq	r2, {r1, r2, r8, r9, sl, fp, sp}
		*ptr = '\0';
    1930:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		__inpline = (char*)data;
    1934:	0205003a 	andeq	r0, r5, #58	; 0x3a
		finish;
    1938:	00000000 	andeq	r0, r0, r0
	if (len) {
    193c:	0100f103 	tsteq	r0, r3, lsl #2	; <UNPREDICTABLE>
		ptr++;
    1940:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    1944:	0e063a05 	vmlaeq.f32	s6, s12, s10
		len--;
    1948:	24060520 	strcs	r0, [r6], #-1312	; 0xfffffae0
	proceed (IM_READ);
    194c:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
	io (IM_BIN, __cport, READ, ptr, 1);
    1950:	03052405 	movweq	r2, #21509	; 0x5405
    1954:	06053f06 	streq	r3, [r5], -r6, lsl #30
    1958:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    195c:	12053006 	andne	r3, r5, #6
    1960:	0b050106 	bleq	141d80 <__ccfg+0x121dd8>
	len -= 2;
    1964:	0603052e 	streq	r0, [r3], -lr, lsr #10
	if (len > *ptr + 1) // 1 for 0x04
    1968:	06090525 	streq	r0, [r9], -r5, lsr #10
    196c:	050f0401 	streq	r0, [pc, #-1025]	; 1573 <ResetISR+0x7>
		len = *ptr + 1;
    1970:	2015032f 	andscs	r0, r5, pc, lsr #6
    1974:	09050104 	stmdbeq	r5, {r2, r8}
	ptr++;
    1978:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
	quant = io (IM_BINL, __cport, READ, ptr, len);
    197c:	04210603 	strteq	r0, [r1], #-1539	; 0xfffff9fd
    1980:	0305050f 	movweq	r0, #21775	; 0x550f
    1984:	2f050114 	svccs	0x00050114
    1988:	01040106 	tsteq	r4, r6, lsl #2
    198c:	7a030105 	bvc	c1da8 <__ccfg+0xa1e00>
    1990:	06040520 	streq	r0, [r4], -r0, lsr #10
	len -= quant;
    1994:	04206f03 	strteq	r6, [r0], #-3843	; 0xfffff0fd
		__inpline = (char*)data;
    1998:	0305050f 	movweq	r0, #21775	; 0x550f
		finish;
    199c:	140100c3 	strne	r0, [r1], #-195	; 0xffffff3d
	ptr += quant;
    19a0:	01061805 	tsteq	r6, r5, lsl #16
    19a4:	33060505 	movwcc	r0, #25861	; 0x6505
endstrand
    19a8:	0b050104 	bleq	141dc0 <__ccfg+0x121e18>
    19ac:	7fb60306 	svcvc	0x00b60306
	proceed (IM_BINL);
    19b0:	06030501 	streq	r0, [r3], -r1, lsl #10
endstrand
    19b4:	050f0434 	streq	r0, [pc, #-1076]	; 1588 <zero_loop+0x4>
    19b8:	2f050e05 	svccs	0x00050e05
    19bc:	01040106 	tsteq	r4, r6, lsl #2
    19c0:	41060305 	tstmi	r6, r5, lsl #6
    19c4:	01060605 	tsteq	r6, r5, lsl #12
    19c8:	053f0405 	ldreq	r0, [pc, #-1029]!	; 15cb <get_byte+0x13>
		if (res && (d < n))
    19cc:	04052b06 	streq	r2, [r5], #-2822	; 0xfffff4fa
    19d0:	052f2306 	streq	r2, [pc, #-774]!	; 16d2 <cclose+0xa>
    19d4:	13062203 	movwne	r2, #25091	; 0x6203
    19d8:	051f0905 	ldreq	r0, [pc, #-2309]	; 10db <__pi_trigger+0x27>
			res [d] = (char) c;
    19dc:	2f210603 	svccs	0x00210603
		d++;
    19e0:	01000902 	tsteq	r0, r2, lsl #18
    19e4:	00110501 	andseq	r0, r1, r1, lsl #10
    19e8:	0e5c0205 	cdpeq	2, 5, cr0, cr12, cr5, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19ec:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    19f0:	0305010a 	movweq	r0, #20746	; 0x510a
    19f4:	0f051316 	svceq	0x00051316
				enci (10000);
    19f8:	06110501 	ldreq	r0, [r1], -r1, lsl #10
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19fc:	2505200d 	strcs	r2, [r5, #-13]
    1a00:	1f030526 	svcne	0x00030526
	d = 0;
    1a04:	21060405 	tstcs	r6, r5, lsl #8
		c = *fm++;
    1a08:	01062505 	tsteq	r6, r5, lsl #10
		if (c == '\\') {
    1a0c:	2d063705 	stccs	7, cr3, [r6, #-20]	; 0xffffffec
			if ((c = *fm++) == '\0') {
    1a10:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1a14:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
				outc ('\\');
    1a18:	06320602 	ldrteq	r0, [r2], -r2, lsl #12
			if ((c = *fm++) == '\0') {
    1a1c:	20790319 	rsbscs	r0, r9, r9, lsl r3
				outc ('\\');
    1a20:	5b323106 	blpl	c8de40 <__ccfg+0xc6de98>
    1a24:	061c055b 			; <UNDEFINED> instruction: 0x061c055b
			outc (c);
    1a28:	4a0c0501 	bmi	302e34 <__ccfg+0x2e2e8c>
    1a2c:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
			if (c == '\0')
    1a30:	02051d0c 	andeq	r1, r5, #12, 26	; 0x300
    1a34:	043e2306 	ldrteq	r2, [lr], #-774	; 0xfffffcfa
			outc (c);
    1a38:	03030503 	movweq	r0, #13571	; 0x3503
				outc (val);
    1a3c:	040175c5 	streq	r7, [r1], #-1477	; 0xfffffa3b
				val = (word) va_arg (ap, aword);
    1a40:	03020501 	movweq	r0, #9473	; 0x2501
		if (c == '%') {
    1a44:	02200abd 	eoreq	r0, r0, #774144	; 0xbd000
    1a48:	0101000e 	tsteq	r1, lr
			c = *fm++;
    1a4c:	00000ee0 	andeq	r0, r0, r0, ror #29
			switch (c) {
    1a50:	01900003 	orrseq	r0, r0, r3
    1a54:	01020000 	mrseq	r0, (UNDEF: 2)
    1a58:	000d0efb 	strdeq	r0, [sp], -fp
    1a5c:	01010101 	tsteq	r1, r1, lsl #2
    1a60:	01000000 	mrseq	r0, (UNDEF: 0)
    1a64:	2f010000 	svccs	0x00010000
    1a68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1a6c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
				outc ('%');
    1a70:	2f6e6974 	svccs	0x006e6974
    1a74:	6b736544 	blvs	1cdaf8c <__ccfg+0x1cbafe4>
				outc (c);
    1a78:	2f706f74 	svccs	0x00706f74
    1a7c:	4f534c4f 	svcmi	0x00534c4f
    1a80:	2f54454e 	svccs	0x0054454e
				if (c == '\0')
    1a84:	4f434950 	svcmi	0x00434950
				return d;
    1a88:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
}
    1a8c:	2f534f63 	svccs	0x00534f63
    1a90:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
			switch (c) {
    1a94:	2f006c65 	svccs	0x00006c65
    1a98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1a9c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
				for (i = 12; ; i -= 4) {
    1aa0:	2f6e6974 	svccs	0x006e6974
				val = (word) va_arg (ap, aword);
    1aa4:	6b736544 	blvs	1cdafbc <__ccfg+0x1cbb014>
						[ (val >> i) & 0xf ]);
    1aa8:	2f706f74 	svccs	0x00706f74
    1aac:	4f534c4f 	svcmi	0x00534c4f
    1ab0:	2f54454e 	svccs	0x0054454e
					outc (__pi_hex_enc_table
    1ab4:	4f434950 	svcmi	0x00434950
    1ab8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
					if (i == 0)
    1abc:	2f534f63 	svccs	0x00534f63
    1ac0:	33314343 	teqcc	r1, #201326593	; 0xc000001
				for (i = 12; ; i -= 4) {
    1ac4:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
				val = (word) va_arg (ap, aword);
    1ac8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
				if (c == 'd' && (val & 0x8000) != 0) {
    1acc:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
				val = (word) va_arg (ap, aword);
    1ad0:	72642f45 	rsbvc	r2, r4, #276	; 0x114
				if (c == 'd' && (val & 0x8000) != 0) {
    1ad4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1ad8:	0062696c 	rsbeq	r6, r2, ip, ror #18
					outc ('-');
    1adc:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1ae0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
					val = (~val) + 1;
    1ae4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1ae8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
				for (i = 12; ; i -= 4) {
    1aec:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
				enci (10000);
    1af0:	61652d65 	cmnvs	r5, r5, ror #26
    1af4:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    1af8:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    1afc:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    1b00:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    1b04:	6f682f00 	svcvs	0x00682f00
    1b08:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 195c <__inserial+0xac>
    1b0c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1b10:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1b14:	6f746b73 	svcvs	0x00746b73
    1b18:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1b1c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1b20:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1b24:	2f534f43 	svccs	0x00534f43
    1b28:	4f636950 	svcmi	0x00636950
    1b2c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    1b30:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1b34:	6f682f00 	svcvs	0x00682f00
				if (c == 'd' || c == 'u') {
    1b38:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 198c <__inserial+0xdc>
    1b3c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
					if (c == 'd' &&
    1b40:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
					val = va_arg (ap, lword);
    1b44:	6f746b73 	svcvs	0x00746b73
					fm++;
    1b48:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
					if (c == 'd' &&
    1b4c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1b50:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
						outc ('-');
    1b54:	2f534f43 	svccs	0x00534f43
    1b58:	4f636950 	svcmi	0x00636950
						val = (~val) + 1;
    1b5c:	6b000053 	blvs	1cb0 <vscan+0x44>
				enci (10000);
    1b60:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
					enci (1000000000UL);
    1b64:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    1b68:	75000001 	strvc	r0, [r0, #-1]
    1b6c:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
    1b70:	00020068 	andeq	r0, r2, r8, rrx
    1b74:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1b78:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1b7c:	00030068 	andeq	r0, r3, r8, rrx
    1b80:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1b84:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    1b88:	00030068 	andeq	r0, r3, r8, rrx
    1b8c:	63726100 	cmnvs	r2, #0, 2
    1b90:	00682e68 	rsbeq	r2, r8, r8, ror #28
    1b94:	6d000004 	stcvs	0, cr0, [r0, #-16]
    1b98:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    1b9c:	00040068 	andeq	r0, r4, r8, rrx
    1ba0:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1ba4:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
				} else if (c == 'x') {
    1ba8:	00682e73 	rsbeq	r2, r8, r3, ror lr
					for (i = 28; ; i -= 4) {
    1bac:	62000004 	andvs	r0, r0, #4
					val = va_arg (ap, lword);
    1bb0:	6f747475 	svcvs	0x00747475
							[ (val >> i) & 0xf ]);
    1bb4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    1bb8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
						outc (__pi_hex_enc_table
    1bbc:	00000400 	andeq	r0, r0, r0, lsl #8
    1bc0:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1bc4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
						if (i == 0)
    1bc8:	6b000005 	blvs	1be4 <__pi_vfparse+0x1f8>
    1bcc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
					for (i = 28; ; i -= 4) {
    1bd0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
					outc ('%');
    1bd4:	3c000001 	stccc	0, cr0, [r0], {1}
    1bd8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1bdc:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
					outc ('l');
    1be0:	0000003e 	andeq	r0, r0, lr, lsr r0
    1be4:	26050000 	strcs	r0, [r5], -r0
				val = (word) va_arg (ap, aword);
    1be8:	bc020500 	cfstr32lt	mvfx0, [r2], {-0}
				outc (val);
    1bec:	0300000e 	movweq	r0, #14
    1bf0:	050103c3 	streq	r0, [r1, #-963]	; 0xfffffc3d
				while (*st != '\0') {
    1bf4:	13131602 	tstne	r3, #2097152	; 0x200000
    1bf8:	06260514 			; <UNDEFINED> instruction: 0x06260514
    1bfc:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    1c00:	20090302 	andcs	r0, r9, r2, lsl #6
					outc (*st);
    1c04:	051f0705 	ldreq	r0, [pc, #-1797]	; 1507 <diag+0xdf>
    1c08:	20210602 	eorcs	r0, r1, r2, lsl #12
					st++;
    1c0c:	21061305 	tstcs	r6, r5, lsl #6
		c = *fm++;
    1c10:	053c0a05 	ldreq	r0, [ip, #-2565]!	; 0xfffff5fb
    1c14:	08052013 	stmdaeq	r5, {r0, r1, r4, sp}
    1c18:	060f053e 			; <UNDEFINED> instruction: 0x060f053e
char *vform (char *res, const char *fm, va_list aq) {
    1c1c:	0603052c 	streq	r0, [r3], -ip, lsr #10
    1c20:	06040501 	streq	r0, [r4], -r1, lsl #10
	if (res != NULL) {
    1c24:	0616052f 	ldreq	r0, [r6], -pc, lsr #10
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1c28:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    1c2c:	31060505 	tstcc	r6, r5, lsl #10
    1c30:	0302054b 	movweq	r0, #9547	; 0x254b
}
    1c34:	0105017a 	tsteq	r5, sl, ror r1
    1c38:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
	fml = strlen (fm) + 17;
    1c3c:	01000302 	tsteq	r0, r2, lsl #6
    1c40:	001f0501 	andseq	r0, pc, r1, lsl #10
    1c44:	0ef80205 	cdpeq	2, 15, cr0, cr8, cr5, {0}
	if ((res = (char*) umalloc (fml)) == NULL)
    1c48:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    1c4c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1c50:	14010d03 	strne	r0, [r1], #-3331	; 0xfffff2fd
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1c54:	060d0513 			; <UNDEFINED> instruction: 0x060d0513
    1c58:	031f0501 	tsteq	pc, #4194304	; 0x400000
    1c5c:	0d052070 	stceq	0, cr2, [r5, #-448]	; 0xfffffe40
    1c60:	052e1003 	streq	r1, [lr, #-3]!
		ufree (res);
    1c64:	0520061f 	streq	r0, [r0, #-1567]!	; 0xfffff9e1
		goto Again;
    1c68:	06010602 	streq	r0, [r1], -r2, lsl #12
	if (buf == NULL || fmt == NULL)
    1c6c:	13201103 			; <UNDEFINED> instruction: 0x13201103
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c70:	01060d05 	tsteq	r6, r5, lsl #26
	if (buf == NULL || fmt == NULL)
    1c74:	051f0505 	ldreq	r0, [pc, #-1285]	; 1777 <ser_in+0x63>
    1c78:	0521061f 	streq	r0, [r1, #-1567]!	; 0xfffff9e1
    1c7c:	06010602 	streq	r0, [r1], -r2, lsl #12
		    	    case 'u': scanu (lword); break;
    1c80:	0f052125 	svceq	0x00052125
			while (isspace (*buf)) buf++;
    1c84:	02051506 	andeq	r1, r5, #25165824	; 0x1800000
    1c88:	0523061d 	streq	r0, [r3, #-1565]!	; 0xfffff9e3
	while (*fmt != '\0') {
    1c8c:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
		if (*fmt++ != '%')
    1c90:	03052401 	movweq	r2, #21505	; 0x5401
		switch (*fmt++) {
    1c94:	20620306 	rsbcs	r0, r2, r6, lsl #6
    1c98:	01061e05 	tsteq	r6, r5, lsl #28
    1c9c:	05580605 	ldrbeq	r0, [r8, #-1541]	; 0xfffff9fb
    1ca0:	21300604 	teqcs	r0, r4, lsl #12
    1ca4:	01061305 	tsteq	r6, r5, lsl #6
    1ca8:	91060405 	tstls	r6, r5, lsl #8
    1cac:	050d2e05 	streq	r2, [sp, #-3589]	; 0xfffff1fb
}
    1cb0:	05010636 	streq	r0, [r1, #-1590]	; 0xfffff9ca
		switch (*fmt++) {
    1cb4:	0534060a 	ldreq	r0, [r4, #-1546]!	; 0xfffff9f6
    1cb8:	0501061f 	streq	r0, [r1, #-1567]	; 0xfffff9e1
    1cbc:	0405580d 	streq	r5, [r5], #-2061	; 0xfffff7f3
    1cc0:	052f2206 	streq	r2, [pc, #-518]!	; 1ac2 <__pi_vfparse+0xd6>
			while (isspace (*buf)) buf++;
    1cc4:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    1cc8:	0b030604 	bleq	c34e0 <__ccfg+0xa3538>
    1ccc:	060705ac 	streq	r0, [r7], -ip, lsr #11
    1cd0:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    1cd4:	06090564 	streq	r0, [r9], -r4, ror #10
    1cd8:	00070213 	andeq	r0, r7, r3, lsl r2
			if (*buf == '\0')
    1cdc:	1c050101 	stfnes	f0, [r5], {1}
			if (*buf != ',') {
    1ce0:	78020500 	stmdavc	r2, {r8, sl}
			sap = va_arg (ap, char*);
    1ce4:	0300000f 	movweq	r0, #15
			nc++;
    1ce8:	050108c6 	streq	r0, [r1, #-2246]	; 0xfffff73a
			if (*buf != ',') {
    1cec:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
				while (!isspace (*buf) && *buf != ',' &&
    1cf0:	03060d05 	movweq	r0, #27909	; 0x6d05
    1cf4:	04017cdf 	streq	r7, [r1], #-3295	; 0xfffff321
    1cf8:	060f0501 	streq	r0, [pc], -r1, lsl #10
    1cfc:	2003a103 	andcs	sl, r3, r3, lsl #2
    1d00:	04010205 	streq	r0, [r1], #-517	; 0xfffffdfb
    1d04:	03240502 			; <UNDEFINED> instruction: 0x03240502
    1d08:	05017cda 	streq	r7, [r1, #-3290]	; 0xfffff326
			while (isspace (*buf)) buf++;
    1d0c:	0d051705 	stceq	7, cr1, [r5, #-20]	; 0xffffffec
    1d10:	01040106 	tsteq	r4, r6, lsl #2
    1d14:	a1030205 	tstge	r3, r5, lsl #4
    1d18:	2f062003 	svccs	0x00062003
    1d1c:	3d060105 	stfccs	f0, [r6, #-20]	; 0xffffffec
			if (*buf == ',') buf++;
    1d20:	01000502 	tsteq	r0, r2, lsl #10
    1d24:	00270501 	eoreq	r0, r7, r1, lsl #10
			*sap = '\0';
    1d28:	00000205 	andeq	r0, r0, r5, lsl #4
			break;
    1d2c:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
		    case 'd': scani (word); break;
    1d30:	02050100 	andeq	r0, r5, #0, 2
    1d34:	27051414 	smladcs	r5, r4, r4, r1
    1d38:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    1d3c:	1c270524 	cfstr32ne	mvfx0, [r7], #-144	; 0xffffff70
    1d40:	06240205 	strteq	r0, [r4], -r5, lsl #4
    1d44:	03052320 	movweq	r2, #21280	; 0x5320
    1d48:	06060548 	streq	r0, [r6], -r8, asr #10
    1d4c:	06020501 	streq	r0, [r2], -r1, lsl #10
    1d50:	0601052d 	streq	r0, [r1], -sp, lsr #10
    1d54:	00050232 	andeq	r0, r5, r2, lsr r2
    1d58:	1b050101 	blne	142164 <__ccfg+0x1221bc>
    1d5c:	90020500 	andls	r0, r2, r0, lsl #10
    1d60:	0300000f 	movweq	r0, #15
    1d64:	050100fa 	streq	r0, [r1, #-250]	; 0xffffff06
    1d68:	1b051302 	blne	146978 <__ccfg+0x1269d0>
    1d6c:	02051f06 	andeq	r1, r5, #6, 30
    1d70:	00060221 	andeq	r0, r6, r1, lsr #4
    1d74:	1e050101 	adfnes	f0, f5, f1
    1d78:	00020500 	andeq	r0, r2, r0, lsl #10
    1d7c:	03000000 	movweq	r0, #0
    1d80:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    1d84:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    1d88:	1e05010e 	adfnes	f0, f5, #0.5
    1d8c:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    1d90:	05340905 	ldreq	r0, [r4, #-2309]!	; 0xfffff6fb
    1d94:	207a031e 	rsbscs	r0, sl, lr, lsl r3
    1d98:	27060305 	strcs	r0, [r6, -r5, lsl #6]
    1d9c:	01061205 	tsteq	r6, r5, lsl #4
		    case 'u': scanu (word); break;
    1da0:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    1da4:	051f061f 	ldreq	r0, [pc, #-1567]	; 178d <ser_outf+0x1>
    1da8:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1dac:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1db0:	06010602 	streq	r0, [r1], -r2, lsl #12
    1db4:	13030532 	movwne	r0, #13618	; 0x3532
    1db8:	153b0205 	ldrne	r0, [fp, #-517]!	; 0xfffffdfb
    1dbc:	01061105 	tsteq	r6, r5, lsl #2
    1dc0:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    1dc4:	01010006 	tsteq	r1, r6
    1dc8:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1dcc:	00000002 	andeq	r0, r0, r2
    1dd0:	018e0300 	orreq	r0, lr, r0, lsl #6
    1dd4:	16020501 	strne	r0, [r2], -r1, lsl #10
    1dd8:	010e0514 	tsteq	lr, r4, lsl r5
    1ddc:	20060905 	andcs	r0, r6, r5, lsl #18
    1de0:	7a032105 	bvc	ca1fc <__ccfg+0xaa254>
    1de4:	0603052e 	streq	r0, [r3], -lr, lsr #10
		    case 'x': scanx (word); break;
    1de8:	06120527 	ldreq	r0, [r2], -r7, lsr #10
    1dec:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1df0:	21060405 	tstcs	r6, r5, lsl #8
    1df4:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
    1df8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1dfc:	052b061f 	streq	r0, [fp, #-1567]!	; 0xfffff9e1
    1e00:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    1e04:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    1e08:	06010602 	streq	r0, [r1], -r2, lsl #12
    1e0c:	580b0534 	stmdapl	fp, {r2, r4, r5, r8, sl}
    1e10:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    1e14:	03050108 	movweq	r0, #20744	; 0x5108
    1e18:	061f052f 	ldreq	r0, [pc], -pc, lsr #10
    1e1c:	20210501 	eorcs	r0, r1, r1, lsl #10
    1e20:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    1e24:	052f0603 	streq	r0, [pc, #-1539]!	; 1829 <ser_inf+0x49>
    1e28:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1e2c:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    1e30:	01052e0b 	tsteq	r5, fp, lsl #28
    1e34:	07021306 	streq	r1, [r2, -r6, lsl #6]
    1e38:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e3c:	0205002a 	andeq	r0, r5, #42	; 0x2a
    1e40:	00000000 	andeq	r0, r0, r0
    1e44:	0101a603 	tsteq	r1, r3, lsl #12
    1e48:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1e4c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1e50:	02210602 	eoreq	r0, r1, #2097152	; 0x200000
    1e54:	01010002 	tsteq	r1, r2
    1e58:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    1e5c:	000fa002 	andeq	sl, pc, r2
			switch (*fmt++) {
    1e60:	01ae0300 			; <UNDEFINED> instruction: 0x01ae0300
    1e64:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    1e68:	0e030602 	cfmadd32eq	mvax0, mvfx0, mvfx3, mvfx2
    1e6c:	10031320 	andne	r1, r3, r0, lsr #6
    1e70:	06060501 	streq	r0, [r6], -r1, lsl #10
    1e74:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
		    	    case 'd': scani (lword); break;
    1e78:	03060205 	movweq	r0, #25093	; 0x6205
    1e7c:	06052e09 	streq	r2, [r5], -r9, lsl #28
    1e80:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1e84:	3c060558 	cfstr32cc	mvfx0, [r6], {88}	; 0x58
    1e88:	08060305 	stmdaeq	r6, {r0, r2, r8, r9}
    1e8c:	02052e27 	andeq	r2, r5, #624	; 0x270
    1e90:	05202903 	streq	r2, [r0, #-2307]!	; 0xfffff6fd
    1e94:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    1e98:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    1e9c:	2e590306 	cdpcs	3, 5, cr0, cr9, cr6, {0}
    1ea0:	01060905 	tsteq	r6, r5, lsl #18
    1ea4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    1ea8:	05310604 	ldreq	r0, [r1, #-1540]!	; 0xfffff9fc
    1eac:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    1eb0:	08053c07 	stmdaeq	r5, {r0, r1, r2, sl, fp, ip, sp}
    1eb4:	0605052e 	streq	r0, [r5], -lr, lsr #10
    1eb8:	03053e08 	movweq	r3, #24072	; 0x5e08
    1ebc:	053c7903 	ldreq	r7, [ip, #-2307]!	; 0xfffff6fd
    1ec0:	2e0b0305 	cdpcs	3, 0, cr0, cr11, cr5, {0}
    1ec4:	01061205 	tsteq	r6, r5, lsl #4
    1ec8:	21060505 	tstcs	r6, r5, lsl #10
    1ecc:	11060705 	tstne	r6, r5, lsl #14
    1ed0:	03060305 	movweq	r0, #25349	; 0x6305
		    	    case 'x': scanx (lword); break;
    1ed4:	07056617 	smladeq	r5, r7, r6, r6
    1ed8:	06050106 	streq	r0, [r5], -r6, lsl #2
    1edc:	0602052e 	streq	r0, [r2], -lr, lsr #10
    1ee0:	053c1603 	ldreq	r1, [ip, #-1539]!	; 0xfffff9fd
    1ee4:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    1ee8:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    1eec:	0d030601 	stceq	6, cr0, [r3, #-4]
    1ef0:	03020501 	movweq	r0, #9473	; 0x2501
    1ef4:	01052e73 	tsteq	r5, r3, ror lr
    1ef8:	022e0d03 	eoreq	r0, lr, #3, 26	; 0xc0
    1efc:	0101000a 	tsteq	r1, sl
    1f00:	05001b05 	streq	r1, [r0, #-2821]	; 0xfffff4fb
    1f04:	00106c02 	andseq	r6, r0, r2, lsl #24
    1f08:	02d20300 	sbcseq	r0, r2, #0, 6
    1f0c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1f10:	10061b05 	andne	r1, r6, r5, lsl #22
    1f14:	06220205 	strteq	r0, [r2], -r5, lsl #4
    1f18:	0005024b 	andeq	r0, r5, fp, asr #4
    1f1c:	2a050101 	bcs	142328 <__ccfg+0x122380>
    1f20:	80020500 	andhi	r0, r2, r0, lsl #10
    1f24:	03000010 	movweq	r0, #16
    1f28:	050102d8 	streq	r0, [r1, #-728]	; 0xfffffd28
    1f2c:	2a051602 	bcs	14773c <__ccfg+0x127794>
    1f30:	0b050e06 	bleq	145750 <__ccfg+0x1257a8>
    1f34:	3e050524 	cfsh32cc	mvfx0, mvfx5, #20
    1f38:	4a060205 	bmi	182754 <__ccfg+0x1627ac>
    1f3c:	01060505 	tsteq	r6, r5, lsl #10
    1f40:	21060305 	tstcs	r6, r5, lsl #6
		    	    case 'd': scani (lword); break;
    1f44:	014c0205 	cmpeq	ip, r5, lsl #4
    1f48:	061f3d06 	ldreq	r3, [pc], -r6, lsl #26
    1f4c:	05132020 	ldreq	r2, [r3, #-32]	; 0xffffffe0
    1f50:	02210601 	eoreq	r0, r1, #1048576	; 0x100000
    1f54:	01010006 	tsteq	r1, r6
    1f58:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    1f5c:	0010b402 	andseq	fp, r0, r2, lsl #8
		    	    case 'u': scanu (lword); break;
    1f60:	02e50300 	rsceq	r0, r5, #0, 6
    1f64:	16020501 	strne	r0, [r2], -r1, lsl #10
    1f68:	21051413 	tstcs	r5, r3, lsl r4
    1f6c:	01790306 	cmneq	r9, r6, lsl #6
    1f70:	06270205 	strteq	r0, [r7], -r5, lsl #4
    1f74:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    1f78:	200a0521 	andcs	r0, sl, r1, lsr #10
    1f7c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
    1f80:	054a060f 	strbeq	r0, [sl, #-1551]	; 0xfffff9f1
    1f84:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    1f88:	052f0604 	streq	r0, [pc, #-1540]!	; 198c <__inserial+0xdc>
    1f8c:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    1f90:	4b5a0605 	blmi	16837ac <__ccfg+0x1663804>
    1f94:	050d0205 	streq	r0, [sp, #-517]	; 0xfffffdfb
    1f98:	09030601 	stmdbeq	r3, {r0, r9, sl}
    1f9c:	0003022e 	andeq	r0, r3, lr, lsr #4
    1fa0:	2d050101 	stfcss	f0, [r5, #-4]
    1fa4:	00020500 	andeq	r0, r2, r0, lsl #10
		    	    case 'x': scanx (lword); break;
    1fa8:	03000000 	movweq	r0, #0
    1fac:	050102f7 	streq	r0, [r1, #-759]	; 0xfffffd09
			if ((c = *buf++) == '\0')
    1fb0:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    1fb4:	03062d05 	movweq	r2, #27909	; 0x6d05
			sap = va_arg (ap, char*);
    1fb8:	05200179 	streq	r0, [r0, #-377]!	; 0xfffffe87
			nc++;
    1fbc:	30062702 	andcc	r2, r6, r2, lsl #14
			break;
    1fc0:	01060905 	tsteq	r6, r5, lsl #18
			while (isspace (*buf)) buf++;
    1fc4:	2e060e05 	cdpcs	14, 0, cr0, cr6, cr5, {0}
    1fc8:	01061205 	tsteq	r6, r5, lsl #4
    1fcc:	053c0205 	ldreq	r0, [ip, #-517]!	; 0xfffffdfb
						*sap++ = *buf++;
    1fd0:	03053301 	movweq	r3, #21249	; 0x5301
    1fd4:	06051c06 	streq	r1, [r5], -r6, lsl #24
			while (isspace (*buf)) buf++;
    1fd8:	20050106 	andcs	r0, r5, r6, lsl #2
    1fdc:	2106051f 	tstcs	r6, pc, lsl r5
    1fe0:	21060405 	tstcs	r6, r5, lsl #8
		return 0;
    1fe4:	02641f05 	rsbeq	r1, r4, #5, 30
    1fe8:	01010001 	tsteq	r1, r1
		    case 'x': scanx (word); break;
    1fec:	05002605 	streq	r2, [r0, #-1541]	; 0xfffff9fb
    1ff0:	0010e802 	andseq	lr, r0, r2, lsl #16
		    	    case 'x': scanx (lword); break;
    1ff4:	03870300 	orreq	r0, r7, #0, 6
    1ff8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1ffc:	06260514 			; <UNDEFINED> instruction: 0x06260514
    2000:	0205200e 	andeq	r2, r5, #14
    2004:	052e0624 	streq	r0, [lr, #-1572]!	; 0xfffff9dc
    2008:	05280609 	streq	r0, [r8, #-1545]!	; 0xfffff9f7
    200c:	79030603 	stmdbvc	r3, {r0, r1, r9, sl}
    2010:	0606052e 	streq	r0, [r6], -lr, lsr #10
    2014:	06040501 	streq	r0, [r4], -r1, lsl #10
    2018:	01053d30 	tsteq	r5, r0, lsr sp
    201c:	02051706 	andeq	r1, r5, #1572864	; 0x180000
    2020:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2024:	01000402 	tsteq	r0, r2, lsl #8
    2028:	00210501 	eoreq	r0, r1, r1, lsl #10
    202c:	110c0205 	tstne	ip, r5, lsl #4
    2030:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    2034:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2038:	06210516 			; <UNDEFINED> instruction: 0x06210516
    203c:	0205200e 	andeq	r2, r5, #14
    2040:	3e850624 	cdpcc	6, 8, cr0, cr5, cr4, {1}
    2044:	01061e05 	tsteq	r6, r5, lsl #28
    2048:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    204c:	1305201e 	movwne	r2, #20510	; 0x501e
    2050:	06020520 	streq	r0, [r2], -r0, lsr #10
    2054:	06010522 	streq	r0, [r1], -r2, lsr #10
    2058:	00050259 	andeq	r0, r5, r9, asr r2
    205c:	14050101 	strne	r0, [r5], #-257	; 0xfffffeff
    2060:	00020500 	andeq	r0, r2, r0, lsl #10
    2064:	03000000 	movweq	r0, #0
    2068:	050103a7 	streq	r0, [r1, #-935]	; 0xfffffc59
    206c:	01051602 	tsteq	r5, r2, lsl #12
    2070:	04026706 	streq	r6, [r2], #-1798	; 0xfffff8fa
    2074:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2078:	02050018 	andeq	r0, r5, #24
    207c:	00000000 	andeq	r0, r0, r0
    2080:	0103b203 	tsteq	r3, r3, lsl #4
    2084:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2088:	0e061805 	cdpeq	8, 0, cr1, cr6, cr5, {0}
    208c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2090:	05055a06 	streq	r5, [r5, #-2566]	; 0xfffff5fa
    2094:	03050106 	movweq	r0, #20742	; 0x5106
    2098:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    209c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    20a0:	12053506 	andne	r3, r5, #25165824	; 0x1800000
    20a4:	01050106 	tsteq	r5, r6, lsl #2
    20a8:	06030559 			; <UNDEFINED> instruction: 0x06030559
    20ac:	3d207a03 	vstmdbcc	r0!, {s14-s16}
    20b0:	01060605 	tsteq	r6, r5, lsl #12
    20b4:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    20b8:	08023d0b 	stmdaeq	r2, {r0, r1, r3, r8, sl, fp, ip, sp}
    20bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    20c0:	0205001d 	andeq	r0, r5, #29
    20c4:	00000000 	andeq	r0, r0, r0
    20c8:	01049203 	tsteq	r4, r3, lsl #4
    20cc:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    20d0:	0e061d05 	cdpeq	13, 0, cr1, cr6, cr5, {0}
    20d4:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    20d8:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    20dc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    20e0:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    20e4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    20e8:	022b0603 	eoreq	r0, fp, #3145728	; 0x300000
    20ec:	01010006 	tsteq	r1, r6
    20f0:	05001d05 	streq	r1, [r0, #-3333]	; 0xfffff2fb
    20f4:	00114402 	andseq	r4, r1, r2, lsl #8
    20f8:	049e0300 	ldreq	r0, [lr], #768	; 0x300
    20fc:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2100:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2104:	06030501 	streq	r0, [r3], -r1, lsl #10
    2108:	060a052f 	streq	r0, [sl], -pc, lsr #10
    210c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2110:	01052e3e 	tsteq	r5, lr, lsr lr
    2114:	03052506 	movweq	r2, #21766	; 0x5506
    2118:	06051c06 	streq	r1, [r5], -r6, lsl #24
    211c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2120:	06023b06 	streq	r3, [r2], -r6, lsl #22
    2124:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2128:	0205001d 	andeq	r0, r5, #29
    212c:	00000000 	andeq	r0, r0, r0
    2130:	0104ac03 	tsteq	r4, r3, lsl #24
    2134:	13140205 	tstne	r4, #1342177280	; 0x50000000
    2138:	1d051314 	stcne	3, cr1, [r5, #-80]	; 0xffffffb0
    213c:	017a0306 	cmneq	sl, r6, lsl #6
    2140:	05250405 	streq	r0, [r5, #-1029]!	; 0xfffffbfb
    2144:	2e062102 	adfcss	f2, f6, f2
    2148:	24060105 	strcs	r0, [r6], #-261	; 0xfffffefb
    214c:	1d060305 	stcne	3, cr0, [r6, #-20]	; 0xffffffec
    2150:	01060605 	tsteq	r6, r5, lsl #12
    2154:	051f0205 	ldreq	r0, [pc, #-517]	; 1f57 <vscan+0x2eb>
    2158:	04052106 	streq	r2, [r5], #-262	; 0xfffffefa
    215c:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2160:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2164:	04023a06 	streq	r3, [r2], #-2566	; 0xfffff5fa
    2168:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    216c:	02050021 	andeq	r0, r5, #33	; 0x21
    2170:	00001168 	andeq	r1, r0, r8, ror #2
    2174:	0104b803 	tsteq	r4, r3, lsl #16
    2178:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    217c:	0e062105 	adfeqs	f2, f6, f5
    2180:	05240905 	streq	r0, [r4, #-2309]!	; 0xfffff6fb
    2184:	0520060e 	streq	r0, [r0, #-1550]!	; 0xfffff9f2
    2188:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    218c:	22053101 	andcs	r3, r5, #1073741824	; 0x40000000
    2190:	1e051d06 	cdpne	13, 0, cr1, cr5, cr6, {0}
    2194:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    2198:	00020201 	andeq	r0, r2, r1, lsl #4
    219c:	2b050101 	blcs	1425a8 <__ccfg+0x122600>
    21a0:	00020500 	andeq	r0, r2, r0, lsl #10
    21a4:	03000000 	movweq	r0, #0
    21a8:	050104c1 	streq	r0, [r1, #-1217]	; 0xfffffb3f
    21ac:	20051402 	andcs	r1, r5, r2, lsl #8
    21b0:	01080520 	tsteq	r8, r0, lsr #10
    21b4:	01061a05 	tsteq	r6, r5, lsl #20
    21b8:	052e1805 	streq	r1, [lr, #-2053]!	; 0xfffff7fb
    21bc:	01052e08 	tsteq	r5, r8, lsl #28
    21c0:	0001022f 	andeq	r0, r1, pc, lsr #4
    21c4:	33050101 	movwcc	r0, #20737	; 0x5101
    21c8:	00020500 	andeq	r0, r2, r0, lsl #10
    21cc:	03000000 	movweq	r0, #0
    21d0:	050104c6 	streq	r0, [r1, #-1222]	; 0xfffffb3a
    21d4:	08051402 	stmdaeq	r5, {r1, sl, ip}
    21d8:	3002052e 	andcc	r0, r2, lr, lsr #10
    21dc:	01060505 	tsteq	r6, r5, lsl #10
    21e0:	052f0105 	streq	r0, [pc, #-261]!	; 20e3 <TrimAfterColdResetWakeupFromShutDown+0x8f>
    21e4:	0d051d11 	stceq	13, cr1, [r5, #-68]	; 0xffffffbc
    21e8:	0603052e 	streq	r0, [r3], -lr, lsr #10
    21ec:	0608052f 	streq	r0, [r8], -pc, lsr #10
    21f0:	00030201 	andeq	r0, r3, r1, lsl #4
    21f4:	2b050101 	blcs	142600 <__ccfg+0x122658>
    21f8:	00020500 	andeq	r0, r2, r0, lsl #10
    21fc:	03000000 	movweq	r0, #0
    2200:	050104cd 	streq	r0, [r1, #-1229]	; 0xfffffb33
    2204:	08051402 	stmdaeq	r5, {r1, sl, ip}
    2208:	4b02052e 	blmi	836c8 <__ccfg+0x63720>
    220c:	01000202 	tsteq	r0, r2, lsl #4
    2210:	00330501 	eorseq	r0, r3, r1, lsl #10
    2214:	00000205 	andeq	r0, r0, r5, lsl #4
    2218:	d3030000 	movwle	r0, #12288	; 0x3000
    221c:	02050104 	andeq	r0, r5, #4, 2
    2220:	00030214 	andeq	r0, r3, r4, lsl r2
    2224:	37050101 	strcc	r0, [r5, -r1, lsl #2]
    2228:	76020500 	strvc	r0, [r2], -r0, lsl #10
    222c:	03000011 	movweq	r0, #17
    2230:	050104d8 	streq	r0, [r1, #-1240]	; 0xfffffb28
    2234:	08051402 	stmdaeq	r5, {r1, sl, ip}
    2238:	0601052e 	streq	r0, [r1], -lr, lsr #10
    223c:	06030530 			; <UNDEFINED> instruction: 0x06030530
    2240:	060d051f 			; <UNDEFINED> instruction: 0x060d051f
    2244:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    2248:	01000302 	tsteq	r0, r2, lsl #6
    224c:	002e0501 	eoreq	r0, lr, r1, lsl #10
    2250:	00000205 	andeq	r0, r0, r5, lsl #4
    2254:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    2258:	02050104 	andeq	r0, r5, #4, 2
    225c:	20080514 	andcs	r0, r8, r4, lsl r5
    2260:	30060105 	andcc	r0, r6, r5, lsl #2
    2264:	1f060305 	svcne	0x00060305
    2268:	01060b05 	tsteq	r6, r5, lsl #22
    226c:	01000302 	tsteq	r0, r2, lsl #6
    2270:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2274:	118c0205 	orrne	r0, ip, r5, lsl #4
    2278:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    227c:	02050104 	andeq	r0, r5, #4, 2
    2280:	062b0514 			; <UNDEFINED> instruction: 0x062b0514
    2284:	22050510 	andcs	r0, r5, #16, 10	; 0x4000000
    2288:	21060305 	tstcs	r6, r5, lsl #6
    228c:	02053106 	andeq	r3, r5, #-2147483647	; 0x80000001
    2290:	0c052d06 	stceq	13, cr2, [r5], {6}
    2294:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2298:	06030520 	streq	r0, [r3], -r0, lsr #10
    229c:	3e02052f 	cfsh32cc	mvfx0, mvfx2, #31
    22a0:	01060e05 	tsteq	r6, r5, lsl #28
    22a4:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    22a8:	01010005 	tsteq	r1, r5
    22ac:	05004505 	streq	r4, [r0, #-1285]	; 0xfffffafb
    22b0:	0011b002 	andseq	fp, r1, r2
    22b4:	04f80300 	ldrbteq	r0, [r8], #768	; 0x300
    22b8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22bc:	06450514 			; <UNDEFINED> instruction: 0x06450514
    22c0:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
    22c4:	2022055c 	eorcs	r0, r2, ip, asr r5
    22c8:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    22cc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    22d0:	05054c02 	streq	r4, [r5, #-3074]	; 0xfffff3fe
    22d4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    22d8:	0f054006 	svceq	0x00054006
    22dc:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    22e0:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
    22e4:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    22e8:	05053106 	streq	r3, [r5, #-262]	; 0xfffffefa
    22ec:	03050106 	movweq	r0, #20742	; 0x5106
    22f0:	06054f06 	streq	r4, [r5], -r6, lsl #30
    22f4:	03050106 	movweq	r0, #20742	; 0x5106
    22f8:	05593006 	ldrbeq	r3, [r9, #-6]
    22fc:	010d0304 	tsteq	sp, r4, lsl #6
    2300:	76030205 	strvc	r0, [r3], -r5, lsl #4
    2304:	0605052e 	streq	r0, [r5], -lr, lsr #10
    2308:	06030501 	streq	r0, [r3], -r1, lsl #10
    230c:	06060535 			; <UNDEFINED> instruction: 0x06060535
    2310:	06040501 	streq	r0, [r4], -r1, lsl #10
    2314:	0b05594b 	bleq	158848 <__ccfg+0x1388a0>
    2318:	03050106 	movweq	r0, #20742	; 0x5106
    231c:	0a056906 	beq	15c73c <__ccfg+0x13c794>
    2320:	03050106 	movweq	r0, #20742	; 0x5106
    2324:	0a055906 	beq	158744 <__ccfg+0x13879c>
    2328:	01610306 	cmneq	r1, r6, lsl #6
    232c:	29030105 	stmdbcs	r3, {r0, r2, r8}
    2330:	06020520 	streq	r0, [r2], -r0, lsr #10
    2334:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    2338:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    233c:	752f0603 	strvc	r0, [pc, #-1539]!	; 1d41 <vscan+0xd5>
    2340:	01000502 	tsteq	r0, r2, lsl #10
    2344:	001a0501 	andseq	r0, sl, r1, lsl #10
    2348:	124c0205 	subne	r0, ip, #1342177280	; 0x50000000
    234c:	ef030000 	svc	0x00030000
    2350:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    2354:	01130317 	tsteq	r3, r7, lsl r3
    2358:	01061505 	tsteq	r6, r5, lsl #10
    235c:	68031a05 	stmdavs	r3, {r0, r2, r9, fp, ip}
    2360:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    2364:	0c052018 	stceq	0, cr2, [r5], {24}
    2368:	20050558 	andcs	r0, r5, r8, asr r5
    236c:	31060305 	tstcc	r6, r5, lsl #6
    2370:	05520205 	ldrbeq	r0, [r2, #-517]	; 0xfffffdfb
    2374:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    2378:	053e0602 	ldreq	r0, [lr, #-1538]!	; 0xfffff9fe
    237c:	05150617 	ldreq	r0, [r5, #-1559]	; 0xfffff9e9
    2380:	16052b1d 			; <UNDEFINED> instruction: 0x16052b1d
    2384:	06020520 	streq	r0, [r2], -r0, lsr #10
    2388:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    238c:	06020514 			; <UNDEFINED> instruction: 0x06020514
    2390:	061a0531 			; <UNDEFINED> instruction: 0x061a0531
    2394:	2e0d0501 	cfsh32cs	mvfx0, mvfx13, #1
    2398:	2c030105 	stfcss	f0, [r3], {5}
    239c:	000d022e 	andeq	r0, sp, lr, lsr #4
    23a0:	1c050101 	stfnes	f0, [r5], {1}
    23a4:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    23a8:	03000012 	movweq	r0, #18
    23ac:	050106fb 	streq	r0, [r1, #-1787]	; 0xfffff905
    23b0:	010c0302 	tsteq	ip, r2, lsl #6
    23b4:	03061c05 	movweq	r1, #27653	; 0x6c05
    23b8:	05050174 	streq	r0, [r5, #-372]	; 0xfffffe8c
    23bc:	05200c03 	streq	r0, [r0, #-3075]!	; 0xfffff3fd
    23c0:	05250602 	streq	r0, [r5, #-1538]!	; 0xfffff9fe
    23c4:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    23c8:	03052e05 	movweq	r2, #24069	; 0x5e05
    23cc:	054c2f06 	strbeq	r2, [ip, #-3846]	; 0xfffff0fa
    23d0:	05160611 	ldreq	r0, [r6, #-1553]	; 0xfffff9ef
    23d4:	11051c0f 	tstne	r5, pc, lsl #24
    23d8:	1c0f0532 	cfstr32ne	mvfx0, [pc], {50}	; 0x32
    23dc:	32060205 	andcc	r0, r6, #1342177280	; 0x50000000
    23e0:	01061105 	tsteq	r6, r5, lsl #2
    23e4:	30060205 	andcc	r0, r6, r5, lsl #4
    23e8:	06150530 			; <UNDEFINED> instruction: 0x06150530
    23ec:	20050501 	andcs	r0, r5, r1, lsl #10
    23f0:	2f060305 	svccs	0x00060305
    23f4:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
    23f8:	42010501 	andmi	r0, r1, #4194304	; 0x400000
    23fc:	01000802 	tsteq	r0, r2, lsl #16
    2400:	00170501 	andseq	r0, r7, r1, lsl #10
    2404:	12e40205 	rscne	r0, r4, #1342177280	; 0x50000000
    2408:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    240c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2410:	17051416 	smladne	r5, r6, r4, r1
    2414:	017a0306 	cmneq	sl, r6, lsl #6
    2418:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    241c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2420:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2424:	02052007 	andeq	r2, r5, #7
    2428:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
    242c:	05110604 	ldreq	r0, [r1, #-1540]	; 0xfffff9fc
    2430:	2e062102 	adfcss	f2, f6, f2
    2434:	05200f03 	streq	r0, [r0, #-3843]!	; 0xfffff0fd
    2438:	4a720303 	bmi	1c8304c <__ccfg+0x1c630a4>
    243c:	01060605 	tsteq	r6, r5, lsl #12
    2440:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    2444:	01060705 	tsteq	r6, r5, lsl #14
    2448:	21060505 	tstcs	r6, r5, lsl #10
    244c:	01060b05 	tsteq	r6, r5, lsl #22
    2450:	23060405 	movwcs	r0, #25605	; 0x6405
    2454:	0a052f3d 	beq	14e150 <__ccfg+0x12e1a8>
    2458:	07050106 	streq	r0, [r5, -r6, lsl #2]
    245c:	06050520 	streq	r0, [r5], -r0, lsr #10
    2460:	0d052a3d 	vstreq	s4, [r5, #-244]	; 0xffffff0c
    2464:	01050106 	tsteq	r5, r6, lsl #2
    2468:	02580a03 	subseq	r0, r8, #12288	; 0x3000
    246c:	01010007 	tsteq	r1, r7
    2470:	05001c05 	streq	r1, [r0, #-3077]	; 0xfffff3fb
    2474:	00000002 	andeq	r0, r0, r2
    2478:	03f40300 	mvnseq	r0, #0, 6
    247c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2480:	13131413 	tstne	r3, #318767104	; 0x13000000
    2484:	03061c05 	movweq	r1, #27653	; 0x6c05
    2488:	04050177 	streq	r0, [r5], #-375	; 0xfffffe89
    248c:	1f060536 	svcne	0x00060536
    2490:	05220905 	streq	r0, [r2, #-2309]!	; 0xfffff6fb
    2494:	2077031c 	rsbscs	r0, r7, ip, lsl r3
    2498:	10030a05 	andne	r0, r3, r5, lsl #20
    249c:	03090520 	movweq	r0, #38176	; 0x9520
    24a0:	12052e79 	andne	r2, r5, #1936	; 0x790
    24a4:	02052006 	andeq	r2, r5, #6
    24a8:	03060106 	movweq	r0, #24838	; 0x6106
    24ac:	05052011 	streq	r2, [r5, #-17]	; 0xffffffef
    24b0:	03050106 	movweq	r0, #20742	; 0x5106
    24b4:	6f032106 	svcvs	0x00032106
    24b8:	0606052e 	streq	r0, [r6], -lr, lsr #10
    24bc:	06040501 	streq	r0, [r4], -r1, lsl #10
    24c0:	07051359 	smlsdeq	r5, r9, r3, r1
    24c4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    24c8:	0b052106 	bleq	14a8e8 <__ccfg+0x12a940>
    24cc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    24d0:	07053106 	streq	r3, [r5, -r6, lsl #2]
    24d4:	09050106 	stmdbeq	r5, {r1, r2, r8}
    24d8:	0604052f 	streq	r0, [r4], -pc, lsr #10
    24dc:	052f2f3d 	streq	r2, [pc, #-3901]!	; 15a7 <zero_loop+0x23>
    24e0:	0d054505 	cfstr32eq	mvfx4, [r5, #-20]	; 0xffffffec
    24e4:	01050106 	tsteq	r5, r6, lsl #2
    24e8:	023c0d03 	eorseq	r0, ip, #3, 26	; 0xc0
    24ec:	01010007 	tsteq	r1, r7
    24f0:	05002005 	streq	r2, [r0, #-5]
    24f4:	00133402 	andseq	r3, r3, r2, lsl #8
    24f8:	07a20300 	streq	r0, [r2, r0, lsl #6]!
    24fc:	1a020501 	bne	83908 <__ccfg+0x63960>
    2500:	05051416 	streq	r1, [r5, #-1046]	; 0xfffffbea
    2504:	03050106 	movweq	r0, #20742	; 0x5106
    2508:	09052506 	stmdbeq	r5, {r1, r2, r8, sl, sp}
    250c:	20050f06 	andcs	r0, r5, r6, lsl #30
    2510:	052e7003 	streq	r7, [lr, #-3]!
    2514:	2023030d 	eorcs	r0, r3, sp, lsl #6
    2518:	70031a05 	andvc	r1, r3, r5, lsl #20
    251c:	030d0520 	movweq	r0, #54560	; 0xd520
    2520:	06052e10 			; <UNDEFINED> instruction: 0x06052e10
    2524:	03090523 	movweq	r0, #38179	; 0x9523
    2528:	0205206d 	andeq	r2, r5, #109	; 0x6d
    252c:	2e0f0306 	cdpcs	3, 0, cr0, cr15, cr6, {0}
    2530:	011f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    2534:	01060205 	tsteq	r6, r5, lsl #4
    2538:	20090306 	andcs	r0, r9, r6, lsl #6
    253c:	19030305 	stmdbne	r3, {r0, r2, r8, r9}
    2540:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    2544:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2548:	2f060405 	svccs	0x00060405
    254c:	01061b05 	tsteq	r6, r5, lsl #22
    2550:	03060305 	movweq	r0, #25349	; 0x6305
    2554:	12052e0d 	andne	r2, r5, #13, 28	; 0xd0
    2558:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    255c:	09054006 	stmdbeq	r5, {r1, r2, lr}
    2560:	03050106 	movweq	r0, #20742	; 0x5106
    2564:	204f0306 	subcs	r0, pc, r6, lsl #6
    2568:	01060605 	tsteq	r6, r5, lsl #12
    256c:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    2570:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    2574:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2578:	7a03062e 	bvc	c3e38 <__ccfg+0xa3e90>
    257c:	0609054a 	streq	r0, [r9], -sl, asr #10
    2580:	06020513 			; <UNDEFINED> instruction: 0x06020513
    2584:	14030544 	strne	r0, [r3], #-1348	; 0xfffffabc
    2588:	060e0522 	streq	r0, [lr], -r2, lsr #10
    258c:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    2590:	30060405 	andcc	r0, r6, r5, lsl #8
    2594:	01061305 	tsteq	r6, r5, lsl #6
    2598:	2f060405 	svccs	0x00060405
    259c:	01061705 	tsteq	r6, r5, lsl #14
    25a0:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    25a4:	052f0604 	streq	r0, [pc, #-1540]!	; 1fa8 <vscan+0x33c>
    25a8:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    25ac:	04052010 	streq	r2, [r5], #-16
    25b0:	09053006 	stmdbeq	r5, {r1, r2, ip, sp}
    25b4:	1503052e 	strne	r0, [r3, #-1326]	; 0xfffffad2
    25b8:	01061a05 	tsteq	r6, r5, lsl #20
    25bc:	05301205 	ldreq	r1, [r0, #-517]!	; 0xfffffdfb
    25c0:	03051e1a 	movweq	r1, #24090	; 0x5e1a
    25c4:	15052206 	strne	r2, [r5, #-518]	; 0xfffffdfa
    25c8:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    25cc:	0603052e 	streq	r0, [r3], -lr, lsr #10
    25d0:	060e053d 			; <UNDEFINED> instruction: 0x060e053d
    25d4:	25120501 	ldrcs	r0, [r2, #-1281]	; 0xfffffaff
    25d8:	05290605 	streq	r0, [r9, #-1541]!	; 0xfffff9fb
    25dc:	06052512 			; <UNDEFINED> instruction: 0x06052512
    25e0:	06040529 	streq	r0, [r4], -r9, lsr #10
    25e4:	06130522 	ldreq	r0, [r3], -r2, lsr #10
    25e8:	06030501 	streq	r0, [r3], -r1, lsl #10
    25ec:	06010531 			; <UNDEFINED> instruction: 0x06010531
    25f0:	02011b03 	andeq	r1, r1, #3072	; 0xc00
    25f4:	0101000e 	tsteq	r1, lr
    25f8:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    25fc:	0013dc02 	andseq	sp, r3, r2, lsl #24
    2600:	02ab0300 	adceq	r0, fp, #0, 6
    2604:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    2608:	062c0514 			; <UNDEFINED> instruction: 0x062c0514
    260c:	1905200e 	stmdbne	r5, {r1, r2, r3, sp}
    2610:	1c2c0524 	cfstr32ne	mvfx0, [ip], #-144	; 0xffffff70
    2614:	05241905 	streq	r1, [r4, #-2309]!	; 0xfffff6fb
    2618:	02053c05 	andeq	r3, r5, #1280	; 0x500
    261c:	0a052306 	beq	14b23c <__ccfg+0x12b294>
    2620:	010b0306 	tsteq	fp, r6, lsl #6
    2624:	77030c05 	strvc	r0, [r3, -r5, lsl #24]
    2628:	260a0520 	strcs	r0, [sl], -r0, lsr #10
    262c:	20760323 	rsbscs	r0, r6, r3, lsr #6
    2630:	2f060205 	svccs	0x00060205
    2634:	14030518 	strne	r0, [r3], #-1304	; 0xfffffae8
    2638:	06060513 			; <UNDEFINED> instruction: 0x06060513
    263c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2640:	060a0521 	streq	r0, [sl], -r1, lsr #10
    2644:	03010501 	movweq	r0, #5377	; 0x1501
    2648:	0b05200f 	bleq	14a68c <__ccfg+0x12a6e4>
    264c:	20730306 	rsbscs	r0, r3, r6, lsl #6
    2650:	20060c05 	andcs	r0, r6, r5, lsl #24
    2654:	06200405 	strteq	r0, [r0], -r5, lsl #8
    2658:	060c052f 	streq	r0, [ip], -pc, lsr #10
    265c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2660:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
    2664:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    2668:	01010004 	tsteq	r1, r4
    266c:	05002005 	streq	r2, [r0, #-5]
    2670:	00141002 	andseq	r1, r4, r2
    2674:	08810300 	stmeq	r1, {r8, r9}
    2678:	03020501 	movweq	r0, #9473	; 0x2501
    267c:	15050109 	strne	r0, [r5, #-265]	; 0xfffffef7
    2680:	20050106 	andcs	r0, r5, r6, lsl #2
    2684:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2688:	20090315 	andcs	r0, r9, r5, lsl r3
    268c:	05230205 	streq	r0, [r3, #-517]!	; 0xfffffdfb
    2690:	03051d05 	movweq	r1, #23813	; 0x5d05
    2694:	1a052106 	bne	14aab4 <__ccfg+0x12ab0c>
    2698:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    269c:	04023e06 	streq	r3, [r2], #-3590	; 0xfffff1fa
    26a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26a4:	02050021 	andeq	r0, r5, #33	; 0x21
    26a8:	00000000 	andeq	r0, r0, r0
    26ac:	01089403 	tsteq	r8, r3, lsl #8
    26b0:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26b4:	06210501 	strteq	r0, [r1], -r1, lsl #10
    26b8:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    26bc:	3c090305 	stccc	3, cr0, [r9], {5}
    26c0:	21060305 	tstcs	r6, r5, lsl #6
    26c4:	01060805 	tsteq	r6, r5, lsl #16
    26c8:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    26cc:	12052008 	andne	r2, r5, #8
    26d0:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    26d4:	4c060305 	stcmi	3, cr0, [r6], {5}
    26d8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    26dc:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    26e0:	06025a01 	streq	r5, [r2], -r1, lsl #20
    26e4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26e8:	02050020 	andeq	r0, r5, #32
    26ec:	00000000 	andeq	r0, r0, r0
    26f0:	0108a703 	tsteq	r8, r3, lsl #14
    26f4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26f8:	05141301 	ldreq	r1, [r4, #-769]	; 0xfffffcff
    26fc:	74030620 	strvc	r0, [r3], #-1568	; 0xfffff9e0
    2700:	031d0501 	tsteq	sp, #4194304	; 0x400000
    2704:	1205200c 	andne	r2, r5, #12
    2708:	200b052e 	andcs	r0, fp, lr, lsr #10
    270c:	20062f05 	andcs	r2, r6, r5, lsl #30
    2710:	01060205 	tsteq	r6, r5, lsl #4
    2714:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    2718:	03052e06 	movweq	r2, #24070	; 0x5e06
    271c:	07052106 	streq	r2, [r5, -r6, lsl #2]
    2720:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2724:	09054c06 	stmdbeq	r5, {r1, r2, sl, fp, lr}
    2728:	01050106 	tsteq	r5, r6, lsl #2
    272c:	0603053e 			; <UNDEFINED> instruction: 0x0603053e
    2730:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    2734:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
    2738:	054a0606 	strbeq	r0, [sl, #-1542]	; 0xfffff9fa
    273c:	0201060e 	andeq	r0, r1, #14680064	; 0xe00000
    2740:	01010004 	tsteq	r1, r4
    2744:	05002305 	streq	r2, [r0, #-773]	; 0xfffffcfb
    2748:	00142802 	andseq	r2, r4, r2, lsl #16
    274c:	09810300 	stmibeq	r1, {r8, r9}
    2750:	41020501 	tstmi	r2, r1, lsl #10
    2754:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    2758:	06230514 			; <UNDEFINED> instruction: 0x06230514
    275c:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2760:	3c0c0302 	stccc	3, cr0, [ip], {2}
    2764:	0121061f 			; <UNDEFINED> instruction: 0x0121061f
    2768:	06080501 	streq	r0, [r8], -r1, lsl #10
    276c:	05202803 	streq	r2, [r0, #-2051]!	; 0xfffff7fd
    2770:	20580302 	subscs	r0, r8, r2, lsl #6
    2774:	23031c05 	movwcs	r1, #15365	; 0x3c05
    2778:	03020520 	movweq	r0, #9504	; 0x2520
    277c:	2e062e5d 	mcrcs	14, 0, r2, cr6, cr13, {2}
    2780:	01080514 	tsteq	r8, r4, lsl r5
    2784:	01060905 	tsteq	r6, r5, lsl #18
    2788:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    278c:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    2790:	3d3d2000 	ldccc	0, cr2, [sp, #-0]
    2794:	0d050204 	sfmeq	f0, 4, [r5, #-16]
    2798:	7bcf0306 	blvc	ff3c33b8 <_estack+0xdf3be3b8>
    279c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    27a0:	b103060f 	tstlt	r3, pc, lsl #12
    27a4:	02052004 	andeq	r2, r5, #4
    27a8:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    27ac:	7bca0324 	blvc	ff283444 <_estack+0xdf27e444>
    27b0:	17050501 	strne	r0, [r5, -r1, lsl #10]
    27b4:	01060d05 	tsteq	r6, r5, lsl #26
    27b8:	02050104 	andeq	r0, r5, #4, 2
    27bc:	2004b103 	andcs	fp, r4, r3, lsl #2
    27c0:	01012f06 	tsteq	r1, r6, lsl #30
    27c4:	06010558 			; <UNDEFINED> instruction: 0x06010558
    27c8:	06030513 			; <UNDEFINED> instruction: 0x06030513
    27cc:	587fb603 	ldmdapl	pc!, {r0, r1, r9, sl, ip, sp, pc}^	; <UNPREDICTABLE>
    27d0:	01060605 	tsteq	r6, r5, lsl #12
    27d4:	4b060405 	blmi	1837f0 <__ccfg+0x163848>
    27d8:	06070513 			; <UNDEFINED> instruction: 0x06070513
    27dc:	06050520 	streq	r0, [r5], -r0, lsr #10
    27e0:	0513134b 	ldreq	r1, [r3, #-843]	; 0xfffffcb5
    27e4:	2d010609 	stccs	6, cr0, [r1, #-36]	; 0xffffffdc
    27e8:	05280c05 	streq	r0, [r8, #-3077]!	; 0xfffff3fb
    27ec:	20770308 	rsbscs	r0, r7, r8, lsl #6
    27f0:	32060505 	andcc	r0, r6, #20971520	; 0x1400000
    27f4:	06080515 			; <UNDEFINED> instruction: 0x06080515
    27f8:	0604050f 	streq	r0, [r4], -pc, lsl #10
    27fc:	03050525 	movweq	r0, #21797	; 0x5525
    2800:	053d7431 	ldreq	r7, [sp, #-1073]!	; 0xfffffbcf
    2804:	4e030604 	cfmadd32mi	mvax0, mvfx0, mvfx3, mvfx4
    2808:	411d054a 	tstmi	sp, sl, asr #10
    280c:	2d060605 	stccs	6, cr0, [r6, #-20]	; 0xffffffec
    2810:	01060805 	tsteq	r6, r5, lsl #16
    2814:	21060605 	tstcs	r6, r5, lsl #12
    2818:	060b0514 			; <UNDEFINED> instruction: 0x060b0514
    281c:	3c180511 	cfldr32cc	mvfx0, [r8], {17}
    2820:	052f0605 	streq	r0, [pc, #-1541]!	; 2223 <NOROM_SetupSetVddrLevel+0x57>
    2824:	0546060b 	strbeq	r0, [r6, #-1547]	; 0xfffff9f5
    2828:	2e310304 	cdpcs	3, 3, cr0, cr1, cr4, {0}
    282c:	01060805 	tsteq	r6, r5, lsl #16
    2830:	05206a03 	streq	r6, [r0, #-2563]!	; 0xfffff5fd
    2834:	6e030605 	cfmadd32vs	mvax0, mvfx0, mvfx3, mvfx5
    2838:	1505132e 	strne	r1, [r5, #-814]	; 0xfffffcd2
    283c:	0e050106 	adfeqs	f0, f5, f6
    2840:	2e080520 	cfsh32cs	mvfx0, mvfx8, #16
    2844:	2f060605 	svccs	0x00060605
    2848:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    284c:	06070501 	streq	r0, [r7], -r1, lsl #10
    2850:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2854:	06060501 	streq	r0, [r6], -r1, lsl #10
    2858:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    285c:	06050501 	streq	r0, [r5], -r1, lsl #10
    2860:	061c0523 	ldreq	r0, [ip], -r3, lsr #10
    2864:	06050501 	streq	r0, [r5], -r1, lsl #10
    2868:	14060559 	strne	r0, [r6], #-1369	; 0xfffffaa7
    286c:	01061605 	tsteq	r6, r5, lsl #12
    2870:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2874:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    2878:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    287c:	0605200c 	streq	r2, [r5], -ip
    2880:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2884:	0b050106 	bleq	142ca4 <__ccfg+0x122cfc>
    2888:	08052a06 	stmdaeq	r5, {r1, r2, r9, fp, sp}
    288c:	1c051406 	cfstrsne	mvf1, [r5], {6}
    2890:	0605051d 			; <UNDEFINED> instruction: 0x0605051d
    2894:	13060535 	movwne	r0, #25909	; 0x6535
    2898:	06090559 			; <UNDEFINED> instruction: 0x06090559
    289c:	1f080514 	svcne	0x00080514
    28a0:	052d0a05 	streq	r0, [sp, #-2565]!	; 0xfffff5fb
    28a4:	132f0606 			; <UNDEFINED> instruction: 0x132f0606
    28a8:	01060905 	tsteq	r6, r5, lsl #18
    28ac:	21060605 	tstcs	r6, r5, lsl #12
    28b0:	01061605 	tsteq	r6, r5, lsl #12
    28b4:	222c0805 	eorcs	r0, ip, #327680	; 0x50000
    28b8:	1b060b05 	blne	1854d4 <__ccfg+0x16552c>
    28bc:	13060605 	movwne	r0, #26117	; 0x6605
    28c0:	03060505 	movweq	r0, #25861	; 0x6505
    28c4:	08052009 	stmdaeq	r5, {r0, r3, sp}
    28c8:	06050106 	streq	r0, [r5], -r6, lsl #2
    28cc:	1c052f06 	stcne	15, cr2, [r5], {6}
    28d0:	016e0306 	cmneq	lr, r6, lsl #6
    28d4:	12030a05 	andne	r0, r3, #20480	; 0x5000
    28d8:	0605052e 	streq	r0, [r5], -lr, lsr #10
    28dc:	05206e03 	streq	r6, [r0, #-3587]!	; 0xfffff1fd
    28e0:	20170306 	andscs	r0, r7, r6, lsl #6
    28e4:	0607052f 	streq	r0, [r7], -pc, lsr #10
    28e8:	060b0501 	streq	r0, [fp], -r1, lsl #10
    28ec:	060c051e 			; <UNDEFINED> instruction: 0x060c051e
    28f0:	200b0501 	andcs	r0, fp, r1, lsl #10
    28f4:	03060405 	movweq	r0, #25605	; 0x6405
    28f8:	0b023c0c 	bleq	91930 <__ccfg+0x71988>
    28fc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2900:	0205000f 	andeq	r0, r5, #15
    2904:	00000000 	andeq	r0, r0, r0
    2908:	010aae03 	tsteq	sl, r3, lsl #28
    290c:	05130205 	ldreq	r0, [r3, #-517]	; 0xfffffdfb
    2910:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    2914:	25052e18 	strcs	r2, [r5, #-3608]	; 0xfffff1e8
    2918:	20180520 	andscs	r0, r8, r0, lsr #10
    291c:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2920:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
    2924:	14062106 	strne	r2, [r6], #-262	; 0xfffffefa
    2928:	02310105 	eorseq	r0, r1, #1073741825	; 0x40000001
    292c:	01010008 	tsteq	r1, r8
    2930:	00000cb7 			; <UNDEFINED> instruction: 0x00000cb7
    2934:	01a10003 			; <UNDEFINED> instruction: 0x01a10003
    2938:	01020000 	mrseq	r0, (UNDEF: 2)
    293c:	000d0efb 	strdeq	r0, [sp], -fp
    2940:	01010101 	tsteq	r1, r1, lsl #2
    2944:	01000000 	mrseq	r0, (UNDEF: 0)
    2948:	2f010000 	svccs	0x00010000
    294c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    2950:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    2954:	2f6e6974 	svccs	0x006e6974
    2958:	6b736544 	blvs	1cdbe70 <__ccfg+0x1cbbec8>
    295c:	2f706f74 	svccs	0x00706f74
    2960:	4f534c4f 	svcmi	0x00534c4f
    2964:	2f54454e 	svccs	0x0054454e
    2968:	4f434950 	svcmi	0x00434950
    296c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    2970:	2f534f63 	svccs	0x00534f63
    2974:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    2978:	4e562f73 	mrcmi	15, 2, r2, cr6, cr3, {3}
    297c:	00497465 	subeq	r7, r9, r5, ror #8
    2980:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    2984:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    2988:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    298c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2990:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2994:	61652d65 	cmnvs	r5, r5, ror #26
    2998:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    299c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    29a0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    29a4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    29a8:	6f682f00 	svcvs	0x00682f00
    29ac:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2800 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x5c>
    29b0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    29b4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    29b8:	6f746b73 	svcvs	0x00746b73
    29bc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    29c0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    29c4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    29c8:	2f534f43 	svccs	0x00534f43
    29cc:	4f636950 	svcmi	0x00636950
    29d0:	43432f53 	movtmi	r2, #16211	; 0x3f53
    29d4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    29d8:	6f682f00 	svcvs	0x00682f00
    29dc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8c>
    29e0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    29e4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    29e8:	6f746b73 	svcvs	0x00746b73
    29ec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    29f0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    29f4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    29f8:	2f534f43 	svccs	0x00534f43
    29fc:	4f636950 	svcmi	0x00636950
    2a00:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    2a04:	2f656d6f 	svccs	0x00656d6f
    2a08:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    2a0c:	442f6e69 	strtmi	r6, [pc], #-3689	; 2a14 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    2a10:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    2a14:	4f2f706f 	svcmi	0x002f706f
    2a18:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    2a1c:	502f5445 	eorpl	r5, pc, r5, asr #8
    2a20:	534f4349 	movtpl	r4, #62281	; 0xf349
    2a24:	6369502f 	cmnvs	r9, #47	; 0x2f
    2a28:	6b2f534f 	blvs	bd776c <__ccfg+0xbb77c4>
    2a2c:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2a30:	7400006c 	strvc	r0, [r0], #-108	; 0xffffff94
    2a34:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
    2a38:	00000100 	andeq	r0, r0, r0, lsl #2
    2a3c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2a40:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    2a44:	00000200 	andeq	r0, r0, r0, lsl #4
    2a48:	61647473 	smcvs	18243	; 0x4743
    2a4c:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    2a50:	00000200 	andeq	r0, r0, r0, lsl #4
    2a54:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    2a58:	0300682e 	movweq	r6, #2094	; 0x82e
    2a5c:	616d0000 	cmnvs	sp, r0
    2a60:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    2a64:	00000300 	andeq	r0, r0, r0, lsl #6
    2a68:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    2a6c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2a70:	0300682e 	movweq	r6, #2094	; 0x82e
    2a74:	75620000 	strbvc	r0, [r2, #-0]!
    2a78:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    2a7c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    2a80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2a84:	73000003 	movwvc	r0, #3
    2a88:	6f697379 	svcvs	0x00697379
    2a8c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    2a90:	63740000 	cmnvs	r4, #0
    2a94:	65645f76 	strbvs	r5, [r4, #-3958]!	; 0xfffff08a
    2a98:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    2a9c:	00000100 	andeq	r0, r0, r0, lsl #2
    2aa0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    2aa4:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    2aa8:	00000500 	andeq	r0, r0, r0, lsl #10
    2aac:	70766374 	rsbsvc	r6, r6, r4, ror r3
    2ab0:	2e737968 	vsubcs.f16	s15, s6, s17	; <UNPREDICTABLE>
    2ab4:	00010068 	andeq	r0, r1, r8, rrx
    2ab8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2abc:	646f6e5f 	strbtvs	r6, [pc], #-3679	; 2ac4 <NOROM_ChipInfo_GetHwRevision+0x3c>
    2ac0:	61645f65 	cmnvs	r4, r5, ror #30
    2ac4:	682e6174 	stmdavs	lr!, {r2, r4, r5, r6, r8, sp, lr}
    2ac8:	00000100 	andeq	r0, r0, r0, lsl #2
    2acc:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    2ad0:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    2ad4:	00003e6e 	andeq	r3, r0, lr, ror #28
    2ad8:	05000000 	streq	r0, [r0, #-0]
    2adc:	02050031 	andeq	r0, r5, #49	; 0x31
    2ae0:	00000000 	andeq	r0, r0, r0
    2ae4:	01029303 	tsteq	r2, r3, lsl #6
    2ae8:	13170205 	tstne	r7, #1342177280	; 0x50000000
    2aec:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2af0:	20017803 	andcs	r7, r1, r3, lsl #16
    2af4:	05260705 	streq	r0, [r6, #-1797]!	; 0xfffff8fb
    2af8:	05052216 	streq	r2, [r5, #-534]	; 0xfffffdea
    2afc:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2b00:	061a0526 	ldreq	r0, [sl], -r6, lsr #10
    2b04:	1f0e0513 	svcne	0x000e0513
    2b08:	21060205 	tstcs	r6, r5, lsl #4
    2b0c:	01061a05 	tsteq	r6, r5, lsl #20
    2b10:	03060205 	movweq	r0, #25093	; 0x6205
    2b14:	0105200c 	tsteq	r5, ip
    2b18:	01021606 	tsteq	r2, r6, lsl #12
    2b1c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b20:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2b24:	00000000 	andeq	r0, r0, r0
    2b28:	0100fe03 	tsteq	r0, r3, lsl #28	; <UNPREDICTABLE>
    2b2c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2b30:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2b34:	03052005 	movweq	r2, #20485	; 0x5005
    2b38:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
    2b3c:	1c050106 	stfnes	f0, [r5], {6}
    2b40:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2b44:	06290521 	strteq	r0, [r9], -r1, lsr #10
    2b48:	201c0501 	andscs	r0, ip, r1, lsl #10
    2b4c:	21060305 	tstcs	r6, r5, lsl #6
    2b50:	01061a05 	tsteq	r6, r5, lsl #20
    2b54:	024c0105 	subeq	r0, ip, #1073741825	; 0x40000001
    2b58:	01010001 	tsteq	r1, r1
    2b5c:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    2b60:	00000002 	andeq	r0, r0, r2
    2b64:	02830300 	addeq	r0, r3, #0, 6
    2b68:	16020501 	strne	r0, [r2], -r1, lsl #10
    2b6c:	0e062e05 	cdpeq	14, 0, cr2, cr6, cr5, {0}
    2b70:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2b74:	1301012f 	movwne	r0, #4399	; 0x112f
    2b78:	05140101 	ldreq	r0, [r4, #-257]	; 0xfffffeff
    2b7c:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2b80:	02022d02 	andeq	r2, r2, #2, 26	; 0x80
    2b84:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2b88:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2b8c:	00000000 	andeq	r0, r0, r0
    2b90:	0101a703 	tsteq	r1, r3, lsl #14
    2b94:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    2b98:	051c3a05 	ldreq	r3, [ip, #-2565]	; 0xfffff5fb
    2b9c:	01240602 			; <UNDEFINED> instruction: 0x01240602
    2ba0:	1c063a05 			; <UNDEFINED> instruction: 0x1c063a05
    2ba4:	06240205 	strteq	r0, [r4], -r5, lsl #4
    2ba8:	05134a20 	ldreq	r4, [r3, #-2592]	; 0xfffff5e0
    2bac:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2bb0:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    2bb4:	06052f02 	streq	r2, [r5], -r2, lsl #30
    2bb8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2bbc:	06030520 	streq	r0, [r3], -r0, lsr #10
    2bc0:	06170530 			; <UNDEFINED> instruction: 0x06170530
    2bc4:	21140501 	tstcs	r4, r1, lsl #10
    2bc8:	2f060305 	svccs	0x00060305
    2bcc:	01060405 	tsteq	r6, r5, lsl #8
    2bd0:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    2bd4:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2bd8:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    2bdc:	05280602 	streq	r0, [r8, #-1538]!	; 0xfffff9fe
    2be0:	05010619 	streq	r0, [r1, #-1561]	; 0xfffff9e7
    2be4:	03054b01 	movweq	r4, #23297	; 0x5b01
    2be8:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    2bec:	01061405 	tsteq	r6, r5, lsl #8
    2bf0:	21060305 	tstcs	r6, r5, lsl #6
    2bf4:	01061705 	tsteq	r6, r5, lsl #14
    2bf8:	05201405 	streq	r1, [r0, #-1029]!	; 0xfffffbfb
    2bfc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c00:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2c04:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c08:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    2c0c:	01010005 	tsteq	r1, r5
    2c10:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    2c14:	00000002 	andeq	r0, r0, r2
    2c18:	01df0300 	bicseq	r0, pc, r0, lsl #6
    2c1c:	05200601 	streq	r0, [r0, #-1537]!	; 0xfffff9ff
    2c20:	09030602 	stmdbeq	r3, {r1, r9, sl}
    2c24:	04053020 	streq	r3, [r5], #-32	; 0xffffffe0
    2c28:	061b0584 	ldreq	r0, [fp], -r4, lsl #11
    2c2c:	06040501 	streq	r0, [r4], -r1, lsl #10
    2c30:	5806014c 	stmdapl	r6, {r2, r3, r6, r8}
    2c34:	27064a06 	strcs	r4, [r6, -r6, lsl #20]
    2c38:	3c790306 	ldclcc	3, cr0, [r9], #-24	; 0xffffffe8
    2c3c:	06010513 			; <UNDEFINED> instruction: 0x06010513
    2c40:	05201203 	streq	r1, [r0, #-515]!	; 0xfffffdfd
    2c44:	2e750304 	cdpcs	3, 7, cr0, cr5, cr4, {0}
    2c48:	1b052b06 	blne	14d868 <__ccfg+0x12d8c0>
    2c4c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2c50:	90014c06 	andls	r4, r1, r6, lsl #24
    2c54:	055b132e 	ldrbeq	r1, [fp, #-814]	; 0xfffffcd2
    2c58:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    2c5c:	2e780304 	cdpcs	3, 7, cr0, cr8, cr4, {0}
    2c60:	02360105 	eorseq	r0, r6, #1073741825	; 0x40000001
    2c64:	0101000c 	tsteq	r1, ip
    2c68:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    2c6c:	00000002 	andeq	r0, r0, r2
    2c70:	02ba0300 	adcseq	r0, sl, #0, 6
    2c74:	18020501 	stmdane	r2, {r0, r8, sl}
    2c78:	06310514 			; <UNDEFINED> instruction: 0x06310514
    2c7c:	05017803 	streq	r7, [r1, #-2051]	; 0xfffff7fd
    2c80:	20090306 	andcs	r0, r9, r6, lsl #6
    2c84:	052d0405 	streq	r0, [sp, #-1029]!	; 0xfffffbfb
    2c88:	052f0602 	streq	r0, [pc, #-1538]!	; 268e <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x3a>
    2c8c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2c90:	012f0603 			; <UNDEFINED> instruction: 0x012f0603
    2c94:	4a066606 	bmi	19c4b4 <__ccfg+0x17c50c>
    2c98:	3b062106 	blcc	18b0b8 <__ccfg+0x16b110>
    2c9c:	66060113 			; <UNDEFINED> instruction: 0x66060113
    2ca0:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2ca4:	06010513 			; <UNDEFINED> instruction: 0x06010513
    2ca8:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    2cac:	2e770303 	cdpcs	3, 7, cr0, cr7, cr3, {0}
    2cb0:	01053606 	tsteq	r5, r6, lsl #12
    2cb4:	03052106 	movweq	r2, #20742	; 0x5106
    2cb8:	000b022d 	andeq	r0, fp, sp, lsr #4
    2cbc:	4a050101 	bmi	1430c8 <__ccfg+0x123120>
    2cc0:	00020500 	andeq	r0, r2, r0, lsl #10
    2cc4:	03000000 	movweq	r0, #0
    2cc8:	050103f5 	streq	r0, [r1, #-1013]	; 0xfffffc0b
    2ccc:	13131402 	tstne	r3, #33554432	; 0x2000000
    2cd0:	4a051314 	bmi	147928 <__ccfg+0x127980>
    2cd4:	01790306 	cmneq	r9, r6, lsl #6
    2cd8:	0305053c 	movweq	r0, #21820	; 0x553c
    2cdc:	4a053c0b 	bmi	151d10 <__ccfg+0x131d68>
    2ce0:	05207503 	streq	r7, [r0, #-1283]!	; 0xfffffafd
    2ce4:	24062702 	strcs	r2, [r6], #-1794	; 0xfffff8fe
    2ce8:	01060505 	tsteq	r6, r5, lsl #10
    2cec:	05203005 	streq	r3, [r0, #-5]!
    2cf0:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    2cf4:	3c30053d 	cfldr32cc	mvfx0, [r0], #-244	; 0xffffff0c
    2cf8:	05202505 	streq	r2, [r0, #-1285]!	; 0xfffffafb
    2cfc:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    2d00:	15030603 	strne	r0, [r3, #-1539]	; 0xfffff9fd
    2d04:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2d08:	132e6e03 			; <UNDEFINED> instruction: 0x132e6e03
    2d0c:	12051713 	andne	r1, r5, #4980736	; 0x4c0000
    2d10:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d14:	0f057606 	svceq	0x00057606
    2d18:	060a0501 	streq	r0, [sl], -r1, lsl #10
    2d1c:	06030520 	streq	r0, [r3], -r0, lsr #10
    2d20:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
    2d24:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    2d28:	1f062205 	svcne	0x00062205
    2d2c:	01062405 	tsteq	r6, r5, lsl #8
    2d30:	20060f05 	andcs	r0, r6, r5, lsl #30
    2d34:	01060205 	tsteq	r6, r5, lsl #4
    2d38:	05330a05 	ldreq	r0, [r3, #-2565]!	; 0xfffff5fb
    2d3c:	2e130301 	cdpcs	3, 1, cr0, cr3, cr1, {0}
    2d40:	03060205 	movweq	r0, #25093	; 0x6205
    2d44:	1a056673 	bne	15c718 <__ccfg+0x13c770>
    2d48:	13051506 	movwne	r1, #21766	; 0x5506
    2d4c:	06020539 			; <UNDEFINED> instruction: 0x06020539
    2d50:	061a052f 	ldreq	r0, [sl], -pc, lsr #10
    2d54:	1e020514 	mcrne	5, 0, r0, cr2, cr4, {0}
    2d58:	14132f06 	ldrne	r2, [r3], #-3846	; 0xfffff0fa
    2d5c:	143c4a01 	ldrtne	r4, [ip], #-2561	; 0xfffff5ff
    2d60:	01060605 	tsteq	r6, r5, lsl #12
    2d64:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2d68:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    2d6c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2d70:	052f0602 	streq	r0, [pc, #-1538]!	; 2776 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x122>
    2d74:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2d78:	6d030602 	stcvs	6, cr0, [r3, #-8]
    2d7c:	13051520 	movwne	r1, #21792	; 0x5520
    2d80:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2d84:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    2d88:	03050106 	movweq	r0, #20742	; 0x5106
    2d8c:	10023d06 	andne	r3, r2, r6, lsl #26
    2d90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2d94:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2d98:	00000000 	andeq	r0, r0, r0
    2d9c:	0104a803 	tsteq	r4, r3, lsl #16
    2da0:	13140205 	tstne	r4, #1342177280	; 0x50000000
    2da4:	3a050114 	bcc	1431fc <__ccfg+0x123254>
    2da8:	05201b06 	streq	r1, [r0, #-2822]!	; 0xfffff4fa
    2dac:	06202502 	strteq	r2, [r0], -r2, lsl #10
    2db0:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2db4:	143c7903 	ldrtne	r7, [ip], #-2307	; 0xfffff6fd
    2db8:	06011514 			; <UNDEFINED> instruction: 0x06011514
    2dbc:	2e064a58 			; <UNDEFINED> instruction: 0x2e064a58
    2dc0:	0605142e 	streq	r1, [r5], -lr, lsr #8
    2dc4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2dc8:	300a052e 	andcc	r0, sl, lr, lsr #10
    2dcc:	41060305 	tstmi	r6, r5, lsl #6
    2dd0:	2b080513 	blcs	204224 <__ccfg+0x1e427c>
    2dd4:	01060a05 	tsteq	r6, r5, lsl #20
    2dd8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    2ddc:	3d330602 	ldccc	6, cr0, [r3, #-8]!
    2de0:	01061305 	tsteq	r6, r5, lsl #6
    2de4:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    2de8:	13060105 	movwne	r0, #24837	; 0x6105
    2dec:	01000b02 	tsteq	r0, r2, lsl #22
    2df0:	00430501 	subeq	r0, r3, r1, lsl #10
    2df4:	00000205 	andeq	r0, r0, r5, lsl #4
    2df8:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    2dfc:	02050104 	andeq	r0, r5, #4, 2
    2e00:	06050516 			; <UNDEFINED> instruction: 0x06050516
    2e04:	2f0f0501 	svccs	0x000f0501
    2e08:	053b2605 	ldreq	r2, [fp, #-1541]!	; 0xfffff9fb
    2e0c:	0205211d 	andeq	r2, r5, #1073741831	; 0x40000007
    2e10:	10053106 	andne	r3, r5, r6, lsl #2
    2e14:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2e18:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2e1c:	0a050106 	beq	14323c <__ccfg+0x123294>
    2e20:	3201052b 	andcc	r0, r1, #180355072	; 0xac00000
    2e24:	01000402 	tsteq	r0, r2, lsl #8
    2e28:	003c0501 	eorseq	r0, ip, r1, lsl #10
    2e2c:	00000205 	andeq	r0, r0, r5, lsl #4
    2e30:	d5030000 	strle	r0, [r3, #-0]
    2e34:	02050104 	andeq	r0, r5, #4, 2
    2e38:	14131319 	ldrne	r1, [r3], #-793	; 0xfffffce7
    2e3c:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    2e40:	20207503 	eorcs	r7, r0, r3, lsl #10
    2e44:	0b030205 	bleq	c3660 <__ccfg+0xa36b8>
    2e48:	4a062020 	bmi	18aed0 <__ccfg+0x16af28>
    2e4c:	20130306 	andscs	r0, r3, r6, lsl #6
    2e50:	3c6d0306 	stclcc	3, cr0, [sp], #-24	; 0xffffffe8
    2e54:	04051314 	streq	r1, [r5], #-788	; 0xfffffcec
    2e58:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2e5c:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2e60:	03050106 	movweq	r0, #20742	; 0x5106
    2e64:	06053006 	streq	r3, [r5], -r6
    2e68:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    2e6c:	053d4b06 	ldreq	r4, [sp, #-2822]!	; 0xfffff4fa
    2e70:	013d3302 	teqeq	sp, r2, lsl #6
    2e74:	14061501 	strne	r1, [r6], #-1281	; 0xfffffaff
    2e78:	051e0405 	ldreq	r0, [lr, #-1029]	; 0xfffffbfb
    2e7c:	01300602 	teqeq	r0, r2, lsl #12
    2e80:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    2e84:	3e132e2e 	cdpcc	14, 1, cr2, cr3, cr14, {1}
    2e88:	13062205 	movwne	r2, #25093	; 0x6205
    2e8c:	05571505 	ldrbeq	r1, [r7, #-1285]	; 0xfffffafb
    2e90:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    2e94:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
    2e98:	2e70030a 	cdpcs	3, 7, cr0, cr0, cr10, {0}
    2e9c:	01000b02 	tsteq	r0, r2, lsl #22
    2ea0:	00380501 	eorseq	r0, r8, r1, lsl #10
    2ea4:	00000205 	andeq	r0, r0, r5, lsl #4
    2ea8:	fc030000 	stc2	0, cr0, [r3], {-0}
    2eac:	02050104 	andeq	r0, r5, #4, 2
    2eb0:	13131316 	tstne	r3, #1476395008	; 0x58000000
    2eb4:	38050114 	stmdacc	r5, {r2, r4, r8}
    2eb8:	20770306 	rsbscs	r0, r7, r6, lsl #6
    2ebc:	09030205 	stmdbeq	r3, {r0, r2, r9}
    2ec0:	4a062020 	bmi	18af48 <__ccfg+0x16afa0>
    2ec4:	03060305 	movweq	r0, #25349	; 0x6305
    2ec8:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
    2ecc:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    2ed0:	1a051414 	bne	147f28 <__ccfg+0x127f80>
    2ed4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2ed8:	06030520 	streq	r0, [r3], -r0, lsr #10
    2edc:	1902052f 	stmdbne	r2, {r0, r1, r2, r3, r5, r8, sl}
    2ee0:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    2ee4:	20050501 	andcs	r0, r5, r1, lsl #10
    2ee8:	03060305 	movweq	r0, #25349	; 0x6305
    2eec:	0505200a 	streq	r2, [r5, #-10]
    2ef0:	01750306 	cmneq	r5, r6, lsl #6
    2ef4:	0b030a05 	bleq	c5710 <__ccfg+0xa5768>
    2ef8:	061a0520 	ldreq	r0, [sl], -r0, lsr #10
    2efc:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f00:	06040501 	streq	r0, [r4], -r1, lsl #10
    2f04:	062c052f 	strteq	r0, [ip], -pc, lsr #10
    2f08:	21060511 	tstcs	r6, r1, lsl r5
    2f0c:	1f062a05 	svcne	0x00062a05
    2f10:	6f030905 	svcvs	0x00030905
    2f14:	06210520 	strteq	r0, [r1], -r0, lsr #10
    2f18:	200c0501 	andcs	r0, ip, r1, lsl #10
    2f1c:	2f060305 	svccs	0x00060305
    2f20:	01062005 	tsteq	r6, r5
    2f24:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    2f28:	06052020 	streq	r2, [r5], -r0, lsr #32
    2f2c:	06020520 	streq	r0, [r2], -r0, lsr #10
    2f30:	05051333 	streq	r1, [r5, #-819]	; 0xfffffccd
    2f34:	03050106 	movweq	r0, #20742	; 0x5106
    2f38:	05422a06 	strbeq	r2, [r2, #-2566]	; 0xfffff5fa
    2f3c:	050f0605 	streq	r0, [pc, #-1541]	; 293f <NOROM_SysCtrlSetRechargeBeforePowerDown+0x19b>
    2f40:	1a05230a 	bne	14bb70 <__ccfg+0x12bbc8>
    2f44:	03052006 	movweq	r2, #20486	; 0x5006
    2f48:	01050106 	tsteq	r5, r6, lsl #2
    2f4c:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    2f50:	74030604 	strvc	r0, [r3], #-1540	; 0xfffff9fc
    2f54:	06080520 	streq	r0, [r8], -r0, lsr #10
    2f58:	20070501 	andcs	r0, r7, r1, lsl #10
    2f5c:	2f060505 	svccs	0x00060505
    2f60:	10062c05 	andne	r2, r6, r5, lsl #24
    2f64:	05220705 	streq	r0, [r2, #-1797]!	; 0xfffff8fb
    2f68:	021e062a 	andseq	r0, lr, #44040192	; 0x2a00000
    2f6c:	0101000a 	tsteq	r1, sl
    2f70:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2f74:	00000002 	andeq	r0, r0, r2
    2f78:	05a30300 	streq	r0, [r3, #768]!	; 0x300
    2f7c:	16020501 	strne	r0, [r2], -r1, lsl #10
    2f80:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2f84:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2f88:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2f8c:	20090302 	andcs	r0, r9, r2, lsl #6
    2f90:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2f94:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2f98:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2f9c:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2fa0:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2fa4:	20050501 	andcs	r0, r5, r1, lsl #10
    2fa8:	2f060305 	svccs	0x00060305
    2fac:	05190205 	ldreq	r0, [r9, #-517]	; 0xfffffdfb
    2fb0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2fb4:	3805201b 	stmdacc	r5, {r0, r1, r3, r4, sp}
    2fb8:	05206b03 	streq	r6, [r0, #-2819]!	; 0xfffff4fd
    2fbc:	b3030603 	movwlt	r0, #13827	; 0x3603
    2fc0:	0505207c 	streq	r2, [r5, #-124]	; 0xffffff84
    2fc4:	03050106 	movweq	r0, #20742	; 0x5106
    2fc8:	06052106 	streq	r2, [r5], -r6, lsl #2
    2fcc:	03050106 	movweq	r0, #20742	; 0x5106
    2fd0:	11053106 	tstne	r5, r6, lsl #2
    2fd4:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    2fd8:	060f0501 	streq	r0, [pc], -r1, lsl #10
    2fdc:	06050520 	streq	r0, [r5], -r0, lsr #10
    2fe0:	06090513 			; <UNDEFINED> instruction: 0x06090513
    2fe4:	2003dc03 	andcs	sp, r3, r3, lsl #24
    2fe8:	01062105 	tsteq	r6, r5, lsl #2
    2fec:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2ff0:	052f0603 	streq	r0, [pc, #-1539]!	; 29f5 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x31>
    2ff4:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2ff8:	20052006 	andcs	r2, r5, r6
    2ffc:	20060520 	andcs	r0, r6, r0, lsr #10
    3000:	33060205 	movwcc	r0, #25093	; 0x6205
    3004:	01061b05 	tsteq	r6, r5, lsl #22
    3008:	2b060305 	blcs	183c24 <__ccfg+0x163c7c>
    300c:	03060105 	movweq	r0, #24837	; 0x6105
    3010:	02053c0a 	andeq	r3, r5, #2560	; 0xa00
    3014:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    3018:	19050106 	stmdbne	r5, {r1, r2, r8}
    301c:	02052006 	andeq	r2, r5, #6
    3020:	01050106 	tsteq	r5, r6, lsl #2
    3024:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
    3028:	77030603 	strvc	r0, [r3, -r3, lsl #12]
    302c:	061e052e 	ldreq	r0, [lr], -lr, lsr #10
    3030:	20060501 	andcs	r0, r6, r1, lsl #10
    3034:	30060405 	andcc	r0, r6, r5, lsl #8
    3038:	0606052f 	streq	r0, [r6], -pc, lsr #10
    303c:	06040501 	streq	r0, [r4], -r1, lsl #10
    3040:	1b290521 	blne	a444cc <__ccfg+0xa24524>
    3044:	01062b05 	tsteq	r6, r5, lsl #22
    3048:	01000a02 	tsteq	r0, r2, lsl #20
    304c:	00160501 	andseq	r0, r6, r1, lsl #10
    3050:	00000205 	andeq	r0, r0, r5, lsl #4
    3054:	cd030000 	stcgt	0, cr0, [r3, #-0]
    3058:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
    305c:	13131313 	tstne	r3, #1275068416	; 0x4c000000
    3060:	16050114 			; <UNDEFINED> instruction: 0x16050114
    3064:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    3068:	42020520 	andmi	r0, r2, #32, 10	; 0x8000000
    306c:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    3070:	14380624 	ldrtne	r0, [r8], #-1572	; 0xfffff9dc
    3074:	58060114 	stmdapl	r6, {r2, r4, r8}
    3078:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    307c:	060e0516 			; <UNDEFINED> instruction: 0x060e0516
    3080:	06020501 	streq	r0, [r2], -r1, lsl #10
    3084:	060d052f 	streq	r0, [sp], -pc, lsr #10
    3088:	1e0e0514 	mcrne	5, 0, r0, cr14, cr4, {0}
    308c:	30060205 	andcc	r0, r6, r5, lsl #4
    3090:	01060d05 	tsteq	r6, r5, lsl #26
    3094:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3098:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    309c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    30a0:	01054e0a 	tsteq	r5, sl, lsl #28
    30a4:	05202103 	streq	r2, [r0, #-259]!	; 0xfffffefd
    30a8:	5c030604 	stcpl	6, cr0, [r3], {4}
    30ac:	17033d2e 	strne	r3, [r3, -lr, lsr #26]
    30b0:	03020501 	movweq	r0, #9473	; 0x2501
    30b4:	3c012e6e 	stccc	14, cr2, [r1], {110}	; 0x6e
    30b8:	010b032e 	tsteq	fp, lr, lsr #6
    30bc:	01060b05 	tsteq	r6, r5, lsl #22
    30c0:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    30c4:	0505200b 	streq	r2, [r5, #-11]
    30c8:	06030558 			; <UNDEFINED> instruction: 0x06030558
    30cc:	06060522 	streq	r0, [r6], -r2, lsr #10
    30d0:	06040501 	streq	r0, [r4], -r1, lsl #10
    30d4:	5002054e 	andpl	r0, r2, lr, asr #10
    30d8:	01061005 	tsteq	r6, r5
    30dc:	2f060205 	svccs	0x00060205
    30e0:	01060505 	tsteq	r6, r5, lsl #10
    30e4:	21060305 	tstcs	r6, r5, lsl #6
    30e8:	01061a05 	tsteq	r6, r5, lsl #20
    30ec:	4b060205 	blmi	183908 <__ccfg+0x163960>
    30f0:	01061b05 	tsteq	r6, r5, lsl #22
    30f4:	1f2f1505 	svcne	0x002f1505
    30f8:	21060205 	tstcs	r6, r5, lsl #4
    30fc:	06090514 			; <UNDEFINED> instruction: 0x06090514
    3100:	000c0201 	andeq	r0, ip, r1, lsl #4
    3104:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    3108:	00020500 	andeq	r0, r2, r0, lsl #10
    310c:	03000000 	movweq	r0, #0
    3110:	05010687 	streq	r0, [r1, #-1671]	; 0xfffff979
    3114:	44051602 	strmi	r1, [r5], #-1538	; 0xfffff9fe
    3118:	05200e06 	streq	r0, [r0, #-3590]!	; 0xfffff1fa
    311c:	05260602 	streq	r0, [r6, #-1538]!	; 0xfffff9fe
    3120:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3124:	2e7a0344 	cdpcs	3, 7, cr0, cr10, cr4, {2}
    3128:	03060205 	movweq	r0, #25093	; 0x6205
    312c:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    3130:	03050106 	movweq	r0, #20742	; 0x5106
    3134:	05672f06 	strbeq	r2, [r7, #-3846]!	; 0xfffff0fa
    3138:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    313c:	05670603 	strbeq	r0, [r7, #-1539]!	; 0xfffff9fd
    3140:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    3144:	055b0602 	ldrbeq	r0, [fp, #-1538]	; 0xfffff9fe
    3148:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    314c:	01010002 	tsteq	r1, r2
    3150:	05004b05 	streq	r4, [r0, #-2821]	; 0xfffff4fb
    3154:	00000002 	andeq	r0, r0, r2
    3158:	06990300 	ldreq	r0, [r9], r0, lsl #6
    315c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3160:	064b0514 			; <UNDEFINED> instruction: 0x064b0514
    3164:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    3168:	4b05261a 	blmi	14c9d8 <__ccfg+0x12ca30>
    316c:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3170:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3174:	0605054a 	streq	r0, [r5], -sl, asr #10
    3178:	06030501 	streq	r0, [r3], -r1, lsl #10
    317c:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3180:	03050106 	movweq	r0, #20742	; 0x5106
    3184:	16056706 	strne	r6, [r5], -r6, lsl #14
    3188:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    318c:	01055a06 	tsteq	r5, r6, lsl #20
    3190:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3194:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3198:	02050031 	andeq	r0, r5, #49	; 0x31
    319c:	00000000 	andeq	r0, r0, r0
    31a0:	0106aa03 	tsteq	r6, r3, lsl #20
    31a4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    31a8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    31ac:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    31b0:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    31b4:	01010001 	tsteq	r1, r1
    31b8:	05004805 	streq	r4, [r0, #-2053]	; 0xfffff7fb
    31bc:	00000002 	andeq	r0, r0, r2
    31c0:	06d10300 	ldrbeq	r0, [r1], r0, lsl #6
    31c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    31c8:	1c480524 	cfstr64ne	mvdx0, [r8], {36}	; 0x24
    31cc:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    31d0:	06480501 	strbeq	r0, [r8], -r1, lsl #10
    31d4:	0205200e 	andeq	r2, r5, #14
    31d8:	4a062024 	bmi	18b270 <__ccfg+0x16b2c8>
    31dc:	0105134a 	tsteq	r5, sl, asr #6
    31e0:	13051306 	movwne	r1, #21254	; 0x5306
    31e4:	0006022d 	andeq	r0, r6, sp, lsr #4
    31e8:	46050101 	strmi	r0, [r5], -r1, lsl #2
    31ec:	00020500 	andeq	r0, r2, r0, lsl #10
    31f0:	03000000 	movweq	r0, #0
    31f4:	050106b2 	streq	r0, [r1, #-1714]	; 0xfffff94e
    31f8:	46051702 	strmi	r1, [r5], -r2, lsl #14
    31fc:	05050d06 	streq	r0, [r5, #-3334]	; 0xfffff2fa
    3200:	06030525 	streq	r0, [r3], -r5, lsr #10
    3204:	0606052f 	streq	r0, [r6], -pc, lsr #10
    3208:	06030501 	streq	r0, [r3], -r1, lsl #10
    320c:	06060530 			; <UNDEFINED> instruction: 0x06060530
    3210:	06040501 	streq	r0, [r4], -r1, lsl #10
    3214:	0705132f 	streq	r1, [r5, -pc, lsr #6]
    3218:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    321c:	0b053006 	bleq	14f23c <__ccfg+0x12f294>
    3220:	07050106 	streq	r0, [r5, -r6, lsl #2]
    3224:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
    3228:	060c0522 	streq	r0, [ip], -r2, lsr #10
    322c:	03010501 	movweq	r0, #5377	; 0x1501
    3230:	03052009 	movweq	r2, #20489	; 0x5009
    3234:	207a0306 	rsbscs	r0, sl, r6, lsl #6
    3238:	01060605 	tsteq	r6, r5, lsl #12
    323c:	30060305 	andcc	r0, r6, r5, lsl #6
    3240:	01061305 	tsteq	r6, r5, lsl #6
    3244:	4c060205 	sfmmi	f0, 4, [r6], {5}
    3248:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    324c:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    3250:	05010637 	streq	r0, [r1, #-1591]	; 0xfffff9c9
    3254:	09052101 	stmdbeq	r5, {r0, r8, sp}
    3258:	030b052d 	movweq	r0, #46381	; 0xb52d
    325c:	0b023c71 	bleq	92428 <__ccfg+0x72480>
    3260:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3264:	0205003d 	andeq	r0, r5, #61	; 0x3d
    3268:	00000000 	andeq	r0, r0, r0
    326c:	0106d903 	tsteq	r6, r3, lsl #18
    3270:	01160205 	tsteq	r6, r5, lsl #4
    3274:	1c063d05 	stcne	13, cr3, [r6], {5}
    3278:	20240205 	eorcs	r0, r4, r5, lsl #4
    327c:	134a4a06 	movtne	r4, #43526	; 0xaa06
    3280:	01062505 	tsteq	r6, r5, lsl #10
    3284:	67060205 	strvs	r0, [r6, -r5, lsl #4]
    3288:	01064305 	tsteq	r6, r5, lsl #6
    328c:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
    3290:	22052e43 	andcs	r2, r5, #1072	; 0x430
    3294:	4b01052e 	blmi	44754 <__ccfg+0x247ac>
    3298:	01000502 	tsteq	r0, r2, lsl #10
    329c:	003d0501 	eorseq	r0, sp, r1, lsl #10
    32a0:	00000205 	andeq	r0, r0, r5, lsl #4
    32a4:	e2030000 	and	r0, r3, #0
    32a8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    32ac:	3d050116 	stfccs	f0, [r5, #-88]	; 0xffffffa8
    32b0:	02051c06 	andeq	r1, r5, #1536	; 0x600
    32b4:	4a062024 	bmi	18b34c <__ccfg+0x16b3a4>
    32b8:	2205134a 	andcs	r1, r5, #671088641	; 0x28000001
    32bc:	01050106 	tsteq	r5, r6, lsl #2
    32c0:	00050267 	andeq	r0, r5, r7, ror #4
    32c4:	40050101 	andmi	r0, r5, r1, lsl #2
    32c8:	00020500 	andeq	r0, r2, r0, lsl #10
    32cc:	03000000 	movweq	r0, #0
    32d0:	050106ea 	streq	r0, [r1, #-1770]	; 0xfffff916
    32d4:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    32d8:	7a030640 	bvc	c4be0 <__ccfg+0xa4c38>
    32dc:	0c052001 	stceq	0, cr2, [r5], {1}
    32e0:	03400526 	movteq	r0, #1318	; 0x526
    32e4:	0c052e7a 	stceq	14, cr2, [r5], {122}	; 0x7a
    32e8:	2e050526 	cfsh32cs	mvfx0, mvfx5, #22
    32ec:	33060205 	movwcc	r0, #25093	; 0x6205
    32f0:	06110584 	ldreq	r0, [r1], -r4, lsl #11
    32f4:	31020501 	tstcc	r2, r1, lsl #10
    32f8:	051d1105 	ldreq	r1, [sp, #-261]	; 0xfffffefb
    32fc:	13210602 			; <UNDEFINED> instruction: 0x13210602
    3300:	11061a05 	tstne	r6, r5, lsl #20
    3304:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    3308:	0609053d 			; <UNDEFINED> instruction: 0x0609053d
    330c:	21010501 	tstcs	r1, r1, lsl #10
    3310:	01000202 	tsteq	r0, r2, lsl #4
    3314:	003e0501 	eorseq	r0, lr, r1, lsl #10
    3318:	00000205 	andeq	r0, r0, r5, lsl #4
    331c:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    3320:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3324:	00030216 	andeq	r0, r3, r6, lsl r2
    3328:	45050101 	strmi	r0, [r5, #-257]	; 0xfffffeff
    332c:	00020500 	andeq	r0, r2, r0, lsl #10
    3330:	03000000 	movweq	r0, #0
    3334:	05010785 	streq	r0, [r1, #-1925]	; 0xfffff87b
    3338:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    333c:	7a030645 	bvc	c4c58 <__ccfg+0xa4cb0>
    3340:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    3344:	06030526 	streq	r0, [r3], -r6, lsr #10
    3348:	06060531 			; <UNDEFINED> instruction: 0x06060531
    334c:	06040501 	streq	r0, [r4], -r1, lsl #10
    3350:	0603052f 	streq	r0, [r3], -pc, lsr #10
    3354:	012e062f 			; <UNDEFINED> instruction: 0x012e062f
    3358:	4a062e06 	bmi	18eb78 <__ccfg+0x16ebd0>
    335c:	011d033c 	tsteq	sp, ip, lsr r3
    3360:	01060c05 	tsteq	r6, r5, lsl #24
    3364:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    3368:	0105350a 	tsteq	r5, sl, lsl #10
    336c:	06040527 	streq	r0, [r4], -r7, lsr #10
    3370:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    3374:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    3378:	12053104 	andne	r3, r5, #4, 2
    337c:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    3380:	061d0530 			; <UNDEFINED> instruction: 0x061d0530
    3384:	06040501 	streq	r0, [r4], -r1, lsl #10
    3388:	0b052f3d 	bleq	14f084 <__ccfg+0x12f0dc>
    338c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3390:	0b054106 	bleq	1537b0 <__ccfg+0x133808>
    3394:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3398:	0603052e 	streq	r0, [r3], -lr, lsr #10
    339c:	060a052f 	streq	r0, [sl], -pc, lsr #10
    33a0:	00090201 	andeq	r0, r9, r1, lsl #4
    33a4:	48050101 	stmdami	r5, {r0, r8}
    33a8:	00020500 	andeq	r0, r2, r0, lsl #10
    33ac:	03000000 	movweq	r0, #0
    33b0:	05010986 	streq	r0, [r1, #-2438]	; 0xfffff67a
    33b4:	05141802 	ldreq	r1, [r4, #-2050]	; 0xfffff7fe
    33b8:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    33bc:	20780348 	rsbscs	r0, r8, r8, asr #6
    33c0:	28050520 	stmdacs	r5, {r5, r8, sl}
    33c4:	05203105 	streq	r3, [r0, #-261]!	; 0xfffffefb
    33c8:	03052025 	movweq	r2, #20517	; 0x5025
    33cc:	35063d06 	strcc	r3, [r6, #-3334]	; 0xfffff2fa
    33d0:	29060205 	stmdbcs	r6, {r0, r2, r9}
    33d4:	01061105 	tsteq	r6, r5, lsl #2
    33d8:	2f060205 	svccs	0x00060205
    33dc:	01061105 	tsteq	r6, r5, lsl #2
    33e0:	05222105 	streq	r2, [r2, #-261]!	; 0xfffffefb
    33e4:	02051e11 	andeq	r1, r5, #272	; 0x110
    33e8:	21053006 	tstcs	r5, r6
    33ec:	10050106 	andne	r0, r5, r6, lsl #2
    33f0:	0602052e 	streq	r0, [r2], -lr, lsr #10
    33f4:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    33f8:	06030501 	streq	r0, [r3], -r1, lsl #10
    33fc:	3d020521 	cfstr32cc	mvfx0, [r2, #-132]	; 0xffffff7c
    3400:	06010534 			; <UNDEFINED> instruction: 0x06010534
    3404:	000b0213 	andeq	r0, fp, r3, lsl r2
    3408:	44050101 	strmi	r0, [r5], #-257	; 0xfffffeff
    340c:	00020500 	andeq	r0, r2, r0, lsl #10
    3410:	03000000 	movweq	r0, #0
    3414:	050109a0 	streq	r0, [r1, #-2464]	; 0xfffff660
    3418:	13131702 	tstne	r3, #524288	; 0x80000
    341c:	44050114 	strmi	r0, [r5], #-276	; 0xfffffeec
    3420:	01770306 	cmneq	r7, r6, lsl #6
    3424:	09030205 	stmdbeq	r3, {r0, r2, r9}
    3428:	0344052e 	movteq	r0, #17710	; 0x452e
    342c:	02052077 	andeq	r2, r5, #119	; 0x77
    3430:	204a0903 	subcs	r0, sl, r3, lsl #18
    3434:	03054a06 	movweq	r4, #23046	; 0x5a06
    3438:	200d0306 	andcs	r0, sp, r6, lsl #6
    343c:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    3440:	05470603 	strbeq	r0, [r7, #-1539]	; 0xfffff9fd
    3444:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3448:	28053c06 	stmdacs	r5, {r1, r2, sl, fp, ip, sp}
    344c:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3450:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
    3454:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    3458:	2e16030a 	cdpcs	3, 1, cr0, cr6, cr10, {0}
    345c:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
    3460:	06030520 	streq	r0, [r3], -r0, lsr #10
    3464:	013c6703 	teqeq	ip, r3, lsl #14
    3468:	05132e58 	ldreq	r2, [r3, #-3672]	; 0xfffff1a8
    346c:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3470:	02057406 	andeq	r7, r5, #100663296	; 0x6000000
    3474:	05054206 	streq	r4, [r5, #-518]	; 0xfffffdfa
    3478:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    347c:	0c053606 	stceq	6, cr3, [r5], {6}
    3480:	16050106 	strne	r0, [r5], -r6, lsl #2
    3484:	2e12052e 	cfmul64cs	mvdx0, mvdx2, mvdx14
    3488:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    348c:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3490:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    3494:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    3498:	05683206 	strbeq	r3, [r8, #-518]!	; 0xfffffdfa
    349c:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    34a0:	0101000a 	tsteq	r1, sl
    34a4:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    34a8:	00000002 	andeq	r0, r0, r2
    34ac:	09d10300 	ldmibeq	r1, {r8, r9}^
    34b0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    34b4:	05011413 	streq	r1, [r1, #-1043]	; 0xfffffbed
    34b8:	7803063e 	stmdavc	r3, {r1, r2, r3, r4, r5, r9, sl}
    34bc:	28020520 	stmdacs	r2, {r5, r8, sl}
    34c0:	4a4a0620 	bmi	1284d48 <__ccfg+0x1264da0>
    34c4:	06050514 			; <UNDEFINED> instruction: 0x06050514
    34c8:	06020501 	streq	r0, [r2], -r1, lsl #10
    34cc:	0604053d 			; <UNDEFINED> instruction: 0x0604053d
    34d0:	06020501 	streq	r0, [r2], -r1, lsl #10
    34d4:	06050521 	streq	r0, [r5], -r1, lsr #10
    34d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    34dc:	060a0533 			; <UNDEFINED> instruction: 0x060a0533
    34e0:	06020501 	streq	r0, [r2], -r1, lsl #10
    34e4:	01012f2f 	tsteq	r1, pc, lsr #30
    34e8:	06090513 			; <UNDEFINED> instruction: 0x06090513
    34ec:	21010501 	tstcs	r1, r1, lsl #10
    34f0:	79030a05 	stmdbvc	r3, {r0, r2, r9, fp}
    34f4:	00090220 	andeq	r0, r9, r0, lsr #4
    34f8:	34050101 	strcc	r0, [r5], #-257	; 0xfffffeff
    34fc:	00020500 	andeq	r0, r2, r0, lsl #10
    3500:	03000000 	movweq	r0, #0
    3504:	050109e8 	streq	r0, [r1, #-2536]	; 0xfffff618
    3508:	14131602 	ldrne	r1, [r3], #-1538	; 0xfffff9fe
    350c:	06340501 	ldrteq	r0, [r4], -r1, lsl #10
    3510:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
    3514:	06202702 	strteq	r2, [r0], -r2, lsl #14
    3518:	05144a4a 	ldreq	r4, [r4, #-2634]	; 0xfffff5b6
    351c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3520:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    3524:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    3528:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    352c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3530:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
    3534:	0510060a 	ldreq	r0, [r0, #-1546]	; 0xfffff9f6
    3538:	01053009 	tsteq	r5, r9
    353c:	00070221 	andeq	r0, r7, r1, lsr #4
    3540:	35050101 	strcc	r0, [r5, #-257]	; 0xfffffeff
    3544:	00020500 	andeq	r0, r2, r0, lsl #10
    3548:	03000000 	movweq	r0, #0
    354c:	050109f9 	streq	r0, [r1, #-2553]	; 0xfffff607
    3550:	35051602 	strcc	r1, [r5, #-1538]	; 0xfffff9fe
    3554:	02050e06 	andeq	r0, r5, #6, 28	; 0x60
    3558:	2c0c0526 	cfstr32cs	mvfx0, [ip], {38}	; 0x26
    355c:	30060205 	andcc	r0, r6, r5, lsl #4
    3560:	4a4a0601 	bmi	1284d6c <__ccfg+0x1264dc4>
    3564:	134a2e06 	movtne	r2, #44550	; 0xae06
    3568:	3e060105 	adfccs	f0, f6, f5
    356c:	022c0205 	eoreq	r0, ip, #1342177280	; 0x50000000
    3570:	01010006 	tsteq	r1, r6
    3574:	05003205 	streq	r3, [r0, #-517]	; 0xfffffdfb
    3578:	00000002 	andeq	r0, r0, r2
    357c:	0a840300 	beq	fe104184 <_estack+0xde0ff184>
    3580:	16020501 	strne	r0, [r2], -r1, lsl #10
    3584:	06320501 	ldrteq	r0, [r2], -r1, lsl #10
    3588:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    358c:	4a4a0620 	bmi	1284e14 <__ccfg+0x1264e6c>
    3590:	060a0513 			; <UNDEFINED> instruction: 0x060a0513
    3594:	0177cc03 	cmneq	r7, r3, lsl #24
    3598:	b4030905 	strlt	r0, [r3], #-2309	; 0xfffff6fb
    359c:	02052008 	andeq	r2, r5, #8
    35a0:	77c90306 	strbvc	r0, [r9, r6, lsl #6]
    35a4:	0514133c 	ldreq	r1, [r4, #-828]	; 0xfffffcc4
    35a8:	05051303 	streq	r1, [r5, #-771]	; 0xfffffcfd
    35ac:	03050106 	movweq	r0, #20742	; 0x5106
    35b0:	06052106 	streq	r2, [r5], -r6, lsl #2
    35b4:	03050106 	movweq	r0, #20742	; 0x5106
    35b8:	11053106 	tstne	r5, r6, lsl #2
    35bc:	06130529 	ldreq	r0, [r3], -r9, lsr #10
    35c0:	060f0501 	streq	r0, [pc], -r1, lsl #10
    35c4:	06050520 	streq	r0, [r5], -r0, lsr #10
    35c8:	03010513 	movweq	r0, #5395	; 0x1513
    35cc:	022008b4 	eoreq	r0, r0, #180, 16	; 0xb40000
    35d0:	01010008 	tsteq	r1, r8
    35d4:	05002805 	streq	r2, [r0, #-2053]	; 0xfffff7fb
    35d8:	00156402 	andseq	r6, r5, r2, lsl #8
    35dc:	0a8c0300 	beq	fe3041e4 <_estack+0xde2ff1e4>
    35e0:	03010501 	movweq	r0, #5377	; 0x1501
    35e4:	0102011a 	tsteq	r2, sl, lsl r1
    35e8:	23010100 	movwcs	r0, #4352	; 0x1100
    35ec:	03000001 	movweq	r0, #1
    35f0:	00008900 	andeq	r8, r0, r0, lsl #18
    35f4:	fb010200 	blx	43dfe <__ccfg+0x23e56>
    35f8:	01000d0e 	tsteq	r0, lr, lsl #26
    35fc:	00010101 	andeq	r0, r1, r1, lsl #2
    3600:	00010000 	andeq	r0, r1, r0
    3604:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3608:	2f656d6f 	svccs	0x00656d6f
    360c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3610:	442f6e69 	strtmi	r6, [pc], #-3689	; 3618 <__exidx_end+0x820>
    3614:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3618:	4f2f706f 	svcmi	0x002f706f
    361c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3620:	502f5445 	eorpl	r5, pc, r5, asr #8
    3624:	534f4349 	movtpl	r4, #62281	; 0xf349
    3628:	6369502f 	cmnvs	r9, #47	; 0x2f
    362c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3630:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3634:	752f0058 	strvc	r0, [pc, #-88]!	; 35e4 <__exidx_end+0x7ec>
    3638:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3474 <__exidx_end+0x67c>
    363c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3640:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3644:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3648:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    364c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3650:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3654:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3658:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    365c:	00006564 	andeq	r6, r0, r4, ror #10
    3660:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    3664:	5f707574 	svcpl	0x00707574
    3668:	2e636367 	cdpcs	3, 6, cr6, cr3, cr7, {3}
    366c:	00010063 	andeq	r0, r1, r3, rrx
    3670:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3674:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3678:	00020068 	andeq	r0, r2, r8, rrx
    367c:	01050000 	mrseq	r0, (UNDEF: 5)
    3680:	66020500 	strvs	r0, [r2], -r0, lsl #10
    3684:	03000015 	movweq	r0, #21
    3688:	05010284 	streq	r0, [r1, #-644]	; 0xfffffd7c
    368c:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    3690:	0102100a 	tsteq	r2, sl
    3694:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3698:	02050001 	andeq	r0, r5, #1
    369c:	00001568 	andeq	r1, r0, r8, ror #10
    36a0:	01029603 	tsteq	r2, r3, lsl #12
    36a4:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    36a8:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    36ac:	01010001 	tsteq	r1, r1
    36b0:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    36b4:	00156a02 	andseq	r6, r5, r2, lsl #20
    36b8:	02a80300 	adceq	r0, r8, #0, 6
    36bc:	16050501 	strne	r0, [r5], -r1, lsl #10
    36c0:	100a0514 	andne	r0, sl, r4, lsl r5
    36c4:	01000102 	tsteq	r0, r2, lsl #2
    36c8:	00010501 	andeq	r0, r1, r1, lsl #10
    36cc:	156c0205 	strbne	r0, [ip, #-517]!	; 0xfffffdfb
    36d0:	d2030000 	andle	r0, r3, #0
    36d4:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    36d8:	01051713 	tsteq	r5, r3, lsl r7
    36dc:	017a0306 	cmneq	sl, r6, lsl #6
    36e0:	06260505 	strteq	r0, [r6], -r5, lsl #10
    36e4:	0e051333 	mcreq	3, 0, r1, cr5, cr3, {1}
    36e8:	05051f06 	streq	r1, [r5, #-3846]	; 0xfffff0fa
    36ec:	061d0521 	ldreq	r0, [sp], -r1, lsr #10
    36f0:	06050520 	streq	r0, [r5], -r0, lsr #10
    36f4:	05360601 	ldreq	r0, [r6, #-1537]!	; 0xfffff9ff
    36f8:	900d0304 	andls	r0, sp, r4, lsl #6
    36fc:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    3700:	052f0601 	streq	r0, [pc, #-1537]!	; 3107 <__exidx_end+0x30f>
    3704:	67030609 	strvs	r0, [r3, -r9, lsl #12]
    3708:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    370c:	00100201 	andseq	r0, r0, r1, lsl #4
    3710:	01850101 	orreq	r0, r5, r1, lsl #2
    3714:	00030000 	andeq	r0, r3, r0
    3718:	0000017f 	andeq	r0, r0, pc, ror r1
    371c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3720:	0101000d 	tsteq	r1, sp
    3724:	00000101 	andeq	r0, r0, r1, lsl #2
    3728:	00000100 	andeq	r0, r0, r0, lsl #2
    372c:	73752f01 	cmnvc	r5, #1, 30
    3730:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3734:	63672f62 	cmnvs	r7, #392	; 0x188
    3738:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    373c:	6f6e2d6d 	svcvs	0x006e2d6d
    3740:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3744:	2f696261 	svccs	0x00696261
    3748:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    374c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3750:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3754:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3758:	2f656d6f 	svccs	0x00656d6f
    375c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3760:	442f6e69 	strtmi	r6, [pc], #-3689	; 3768 <__exidx_end+0x970>
    3764:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3768:	4f2f706f 	svcmi	0x002f706f
    376c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3770:	502f5445 	eorpl	r5, pc, r5, asr #8
    3774:	534f4349 	movtpl	r4, #62281	; 0xf349
    3778:	6369502f 	cmnvs	r9, #47	; 0x2f
    377c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3780:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3784:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3788:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    378c:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3790:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    3794:	6f682f00 	svcvs	0x00682f00
    3798:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 35ec <__exidx_end+0x7f4>
    379c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37a0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37a4:	6f746b73 	svcvs	0x00746b73
    37a8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37ac:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37b0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37b4:	2f534f43 	svccs	0x00534f43
    37b8:	4f636950 	svcmi	0x00636950
    37bc:	43432f53 	movtmi	r2, #16211	; 0x3f53
    37c0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37c4:	6f682f00 	svcvs	0x00682f00
    37c8:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 361c <__exidx_end+0x824>
    37cc:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37d0:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37d4:	6f746b73 	svcvs	0x00746b73
    37d8:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37dc:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37e0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37e4:	2f534f43 	svccs	0x00534f43
    37e8:	4f636950 	svcmi	0x00636950
    37ec:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
    37f0:	2f656d6f 	svccs	0x00656d6f
    37f4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    37f8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3800 <__exidx_end+0xa08>
    37fc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3800:	4f2f706f 	svcmi	0x002f706f
    3804:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3808:	502f5445 	eorpl	r5, pc, r5, asr #8
    380c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3810:	6369502f 	cmnvs	r9, #47	; 0x2f
    3814:	6b2f534f 	blvs	bd8558 <__ccfg+0xbb85b0>
    3818:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    381c:	7300006c 	movwvc	r0, #108	; 0x6c
    3820:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3824:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3828:	68000001 	stmdavs	r0, {r0}
    382c:	63635f77 	cmnvs	r3, #476	; 0x1dc
    3830:	735f6766 	cmpvc	pc, #26738688	; 0x1980000
    3834:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
    3838:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
    383c:	74637572 	strbtvc	r7, [r3], #-1394	; 0xfffffa8e
    3840:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3844:	72610000 	rsbvc	r0, r1, #0
    3848:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    384c:	00000300 	andeq	r0, r0, r0, lsl #6
    3850:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3854:	0300682e 	movweq	r6, #2094	; 0x82e
    3858:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    385c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3860:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3864:	00000300 	andeq	r0, r0, r0, lsl #6
    3868:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    386c:	5f736e6f 	svcpl	0x00736e6f
    3870:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3874:	00030068 	andeq	r0, r3, r8, rrx
    3878:	73797300 	cmnvc	r9, #0, 6
    387c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3880:	00000400 	andeq	r0, r0, r0, lsl #8
    3884:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3888:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    388c:	00000500 	andeq	r0, r0, r0, lsl #10
    3890:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    3894:	0300632e 	movweq	r6, #814	; 0x32e
    3898:	99000000 	stmdbls	r0, {}	; <UNPREDICTABLE>
    389c:	03000002 	movweq	r0, #2
    38a0:	0001c000 	andeq	ip, r1, r0
    38a4:	fb010200 	blx	440ae <__ccfg+0x24106>
    38a8:	01000d0e 	tsteq	r0, lr, lsl #26
    38ac:	00010101 	andeq	r0, r1, r1, lsl #2
    38b0:	00010000 	andeq	r0, r1, r0
    38b4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    38b8:	2f656d6f 	svccs	0x00656d6f
    38bc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    38c0:	442f6e69 	strtmi	r6, [pc], #-3689	; 38c8 <__exidx_end+0xad0>
    38c4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    38c8:	4f2f706f 	svcmi	0x002f706f
    38cc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    38d0:	502f5445 	eorpl	r5, pc, r5, asr #8
    38d4:	534f4349 	movtpl	r4, #62281	; 0xf349
    38d8:	6369502f 	cmnvs	r9, #47	; 0x2f
    38dc:	502f534f 	eorpl	r5, pc, pc, asr #6
    38e0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    38e4:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    38e8:	73726f73 	cmnvc	r2, #460	; 0x1cc
    38ec:	6f682f00 	svcvs	0x00682f00
    38f0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3744 <__exidx_end+0x94c>
    38f4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    38f8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    38fc:	6f746b73 	svcvs	0x00746b73
    3900:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3904:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3908:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    390c:	2f534f43 	svccs	0x00534f43
    3910:	4f636950 	svcmi	0x00636950
    3914:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3918:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    391c:	6f682f00 	svcvs	0x00682f00
    3920:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3774 <__exidx_end+0x97c>
    3924:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3928:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    392c:	6f746b73 	svcvs	0x00746b73
    3930:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3934:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3938:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    393c:	2f534f43 	svccs	0x00534f43
    3940:	4f636950 	svcmi	0x00636950
    3944:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3948:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    394c:	3143432f 	cmpcc	r3, pc, lsr #6
    3950:	57585833 	smmlarpl	r8, r3, r8, r5
    3954:	2f455241 	svccs	0x00455241
    3958:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    395c:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3960:	752f0062 	strvc	r0, [pc, #-98]!	; 3906 <__exidx_end+0xb0e>
    3964:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 37a0 <__exidx_end+0x9a8>
    3968:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    396c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3970:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3974:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3978:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    397c:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3980:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3984:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3988:	2f006564 	svccs	0x00006564
    398c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3990:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3994:	2f6e6974 	svccs	0x006e6974
    3998:	6b736544 	blvs	1cdceb0 <__ccfg+0x1cbcf08>
    399c:	2f706f74 	svccs	0x00706f74
    39a0:	4f534c4f 	svcmi	0x00534c4f
    39a4:	2f54454e 	svccs	0x0054454e
    39a8:	4f434950 	svcmi	0x00434950
    39ac:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    39b0:	00534f63 	subseq	r4, r3, r3, ror #30
    39b4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3900 <__exidx_end+0xb08>
    39b8:	616d2f65 	cmnvs	sp, r5, ror #30
    39bc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    39c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    39c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
    39c8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    39cc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    39d0:	4349502f 	movtmi	r5, #36911	; 0x902f
    39d4:	502f534f 	eorpl	r5, pc, pc, asr #6
    39d8:	534f6369 	movtpl	r6, #62313	; 0xf369
    39dc:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    39e0:	006c656e 	rsbeq	r6, ip, lr, ror #10
    39e4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    39e8:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
    39ec:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
    39f0:	00010063 	andeq	r0, r1, r3, rrx
    39f4:	736d6300 	cmnvc	sp, #0, 6
    39f8:	675f7369 	ldrbvs	r7, [pc, -r9, ror #6]
    39fc:	682e6363 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, sp, lr}
    3a00:	00000200 	andeq	r0, r0, r0, lsl #4
    3a04:	6f697067 	svcvs	0x00697067
    3a08:	0300682e 	movweq	r6, #2094	; 0x82e
    3a0c:	74730000 	ldrbtvc	r0, [r3], #-0
    3a10:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3a14:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3a18:	72610000 	rsbvc	r0, r1, #0
    3a1c:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3a20:	00000200 	andeq	r0, r0, r0, lsl #4
    3a24:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    3a28:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    3a2c:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    3a30:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3a34:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3a38:	00000200 	andeq	r0, r0, r0, lsl #4
    3a3c:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3a40:	5f736e6f 	svcpl	0x00736e6f
    3a44:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3a48:	00020068 	andeq	r0, r2, r8, rrx
    3a4c:	73797300 	cmnvc	r9, #0, 6
    3a50:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3a54:	00000500 	andeq	r0, r0, r0, lsl #10
    3a58:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3a5c:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    3a60:	00000600 	andeq	r0, r0, r0, lsl #12
    3a64:	00190500 	andseq	r0, r9, r0, lsl #10
    3a68:	00000205 	andeq	r0, r0, r5, lsl #4
    3a6c:	0e030000 	cdpeq	0, 0, cr0, cr3, cr0, {0}
    3a70:	011b0501 	tsteq	fp, r1, lsl #10
    3a74:	01050101 	tsteq	r5, r1, lsl #2
    3a78:	01020106 	tsteq	r2, r6, lsl #2
    3a7c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3a80:	0205003f 	andeq	r0, r5, #63	; 0x3f
    3a84:	00000000 	andeq	r0, r0, r0
    3a88:	05011003 	streq	r1, [r1, #-3]
    3a8c:	13131402 	tstne	r3, #33554432	; 0x2000000
    3a90:	063f0514 			; <UNDEFINED> instruction: 0x063f0514
    3a94:	20017a03 	andcs	r7, r1, r3, lsl #20
    3a98:	05260505 	streq	r0, [r6, #-1285]!	; 0xfffffafb
    3a9c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
    3aa0:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3aa4:	044d0603 	strbeq	r0, [sp], #-1539	; 0xfffff9fd
    3aa8:	00c10302 	sbceq	r0, r1, r2, lsl #6
    3aac:	03010401 	movweq	r0, #5121	; 0x1401
    3ab0:	4b3d2040 	blmi	f4bbb8 <__ccfg+0xf2bc10>
    3ab4:	33030204 	movwcc	r0, #12804	; 0x3204
    3ab8:	03010401 	movweq	r0, #5121	; 0x1401
    3abc:	0205204e 	andeq	r2, r5, #78	; 0x4e
    3ac0:	06070531 			; <UNDEFINED> instruction: 0x06070531
    3ac4:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    3ac8:	018b030f 	orreq	r0, fp, pc, lsl #6
    3acc:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3ad0:	7ef50307 	cdpvc	3, 15, cr0, cr5, cr7, {0}
    3ad4:	06020520 	streq	r0, [r2], -r0, lsr #10
    3ad8:	130b0521 	movwne	r0, #46369	; 0xb521
    3adc:	04130305 	ldreq	r0, [r3], #-773	; 0xfffffcfb
    3ae0:	03290503 			; <UNDEFINED> instruction: 0x03290503
    3ae4:	05010183 	streq	r0, [r1, #-387]	; 0xfffffe7d
    3ae8:	01041705 	tsteq	r4, r5, lsl #14
    3aec:	03060b05 	movweq	r0, #27397	; 0x6b05
    3af0:	04017ef8 	streq	r7, [r1], #-3832	; 0xfffff108
    3af4:	030f0503 	movweq	r0, #62723	; 0xf503
    3af8:	04200188 	strteq	r0, [r0], #-392	; 0xfffffe78
    3afc:	030b0501 	movweq	r0, #46337	; 0xb501
    3b00:	04207ef8 	strteq	r7, [r0], #-3832	; 0xfffff108
    3b04:	03330503 	teqeq	r3, #12582912	; 0xc00000
    3b08:	052e0188 	streq	r0, [lr, #-392]!	; 0xfffffe78
    3b0c:	01042042 	tsteq	r4, r2, asr #32
    3b10:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b14:	08052e7e 	stmdaeq	r5, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp}
    3b18:	201f052e 	andscs	r0, pc, lr, lsr #10
    3b1c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3b20:	08051e02 	stmdaeq	r5, {r1, r9, sl, fp, ip}
    3b24:	063a0522 	ldrteq	r0, [sl], -r2, lsr #10
    3b28:	010b051f 	tsteq	fp, pc, lsl r5
    3b2c:	11060205 	tstne	r6, r5, lsl #4
    3b30:	02230105 	eoreq	r0, r3, #1073741825	; 0x40000001
    3b34:	01010006 	tsteq	r1, r6
    3b38:	0000033c 	andeq	r0, r0, ip, lsr r3
    3b3c:	01a90003 			; <UNDEFINED> instruction: 0x01a90003
    3b40:	01020000 	mrseq	r0, (UNDEF: 2)
    3b44:	000d0efb 	strdeq	r0, [sp], -fp
    3b48:	01010101 	tsteq	r1, r1, lsl #2
    3b4c:	01000000 	mrseq	r0, (UNDEF: 0)
    3b50:	2f010000 	svccs	0x00010000
    3b54:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3b58:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3b5c:	2f6e6974 	svccs	0x006e6974
    3b60:	6b736544 	blvs	1cdd078 <__ccfg+0x1cbd0d0>
    3b64:	2f706f74 	svccs	0x00706f74
    3b68:	4f534c4f 	svcmi	0x00534c4f
    3b6c:	2f54454e 	svccs	0x0054454e
    3b70:	4f434950 	svcmi	0x00434950
    3b74:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3b78:	2f534f63 	svccs	0x00534f63
    3b7c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3b80:	4f492f73 	svcmi	0x00492f73
    3b84:	6f682f00 	svcvs	0x00682f00
    3b88:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 39dc <__exidx_end+0xbe4>
    3b8c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3b90:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3b94:	6f746b73 	svcvs	0x00746b73
    3b98:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3b9c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3ba0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3ba4:	2f534f43 	svccs	0x00534f43
    3ba8:	4f636950 	svcmi	0x00636950
    3bac:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3bb0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3bb4:	3143432f 	cmpcc	r3, pc, lsr #6
    3bb8:	57585833 	smmlarpl	r8, r3, r8, r5
    3bbc:	2f455241 	svccs	0x00455241
    3bc0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3bc4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3bc8:	752f0062 	strvc	r0, [pc, #-98]!	; 3b6e <__exidx_end+0xd76>
    3bcc:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3a08 <__exidx_end+0xc10>
    3bd0:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3bd4:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3bd8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3bdc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3be0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3be4:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3be8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3bec:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3bf0:	2f006564 	svccs	0x00006564
    3bf4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3bf8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3bfc:	2f6e6974 	svccs	0x006e6974
    3c00:	6b736544 	blvs	1cdd118 <__ccfg+0x1cbd170>
    3c04:	2f706f74 	svccs	0x00706f74
    3c08:	4f534c4f 	svcmi	0x00534c4f
    3c0c:	2f54454e 	svccs	0x0054454e
    3c10:	4f434950 	svcmi	0x00434950
    3c14:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c18:	2f534f63 	svccs	0x00534f63
    3c1c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3c20:	2f005858 	svccs	0x00005858
    3c24:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c28:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3c2c:	2f6e6974 	svccs	0x006e6974
    3c30:	6b736544 	blvs	1cdd148 <__ccfg+0x1cbd1a0>
    3c34:	2f706f74 	svccs	0x00706f74
    3c38:	4f534c4f 	svcmi	0x00534c4f
    3c3c:	2f54454e 	svccs	0x0054454e
    3c40:	4f434950 	svcmi	0x00434950
    3c44:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3c48:	00534f63 	subseq	r4, r3, r3, ror #30
    3c4c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b98 <__exidx_end+0xda0>
    3c50:	616d2f65 	cmnvs	sp, r5, ror #30
    3c54:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3c58:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3c5c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3c60:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3c64:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3c68:	4349502f 	movtmi	r5, #36911	; 0x902f
    3c6c:	502f534f 	eorpl	r5, pc, pc, asr #6
    3c70:	534f6369 	movtpl	r6, #62313	; 0xf369
    3c74:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    3c78:	006c656e 	rsbeq	r6, ip, lr, ror #10
    3c7c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3c80:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3c84:	0100632e 	tsteq	r0, lr, lsr #6
    3c88:	70670000 	rsbvc	r0, r7, r0
    3c8c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    3c90:	00000200 	andeq	r0, r0, r0, lsl #4
    3c94:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    3c98:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    3c9c:	00000300 	andeq	r0, r0, r0, lsl #6
    3ca0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    3ca4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3ca8:	616d0000 	cmnvs	sp, r0
    3cac:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    3cb0:	00000400 	andeq	r0, r0, r0, lsl #8
    3cb4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    3cb8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3cbc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3cc0:	75620000 	strbvc	r0, [r2, #-0]!
    3cc4:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    3cc8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3ccc:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3cd0:	73000004 	movwvc	r0, #4
    3cd4:	6f697379 	svcvs	0x00697379
    3cd8:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    3cdc:	656b0000 	strbvs	r0, [fp, #-0]!
    3ce0:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3ce4:	0600682e 	streq	r6, [r0], -lr, lsr #16
    3ce8:	05000000 	streq	r0, [r0, #-0]
    3cec:	02050001 	andeq	r0, r5, #1
    3cf0:	00000000 	andeq	r0, r0, r0
    3cf4:	01011b03 	tsteq	r1, r3, lsl #22
    3cf8:	02052e06 	andeq	r2, r5, #6, 28	; 0x60
    3cfc:	0e056a06 	vmlaeq.f32	s12, s10, s12
    3d00:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    3d04:	06030520 	streq	r0, [r3], -r0, lsr #10
    3d08:	40020531 	andmi	r0, r2, r1, lsr r5
    3d0c:	01060f05 	tsteq	r6, r5, lsl #30
    3d10:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    3d14:	01042e01 	tsteq	r4, r1, lsl #28
    3d18:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3d1c:	0f05207e 	svceq	0x0005207e
    3d20:	0614051c 			; <UNDEFINED> instruction: 0x0614051c
    3d24:	061c0520 	ldreq	r0, [ip], -r0, lsr #10
    3d28:	20020501 	andcs	r0, r2, r1, lsl #10
    3d2c:	2e110306 	cdpcs	3, 1, cr0, cr1, cr6, {0}
    3d30:	03053d4b 	movweq	r3, #23883	; 0x5d4b
    3d34:	042e7103 	strteq	r7, [lr], #-259	; 0xfffffefd
    3d38:	03290502 			; <UNDEFINED> instruction: 0x03290502
    3d3c:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    3d40:	01041705 	tsteq	r4, r5, lsl #14
    3d44:	03060705 	movweq	r0, #26373	; 0x6705
    3d48:	04017efd 	streq	r7, [r1], #-3837	; 0xfffff103
    3d4c:	030f0502 	movweq	r0, #62722	; 0xf502
    3d50:	042e0183 	strteq	r0, [lr], #-387	; 0xfffffe7d
    3d54:	03070501 	movweq	r0, #29953	; 0x7501
    3d58:	04207efd 	strteq	r7, [r0], #-3837	; 0xfffff103
    3d5c:	03330502 	teqeq	r3, #8388608	; 0x800000
    3d60:	04200183 	strteq	r0, [r0], #-387	; 0xfffffe7d
    3d64:	03060501 	movweq	r0, #25857	; 0x6501
    3d68:	05207efd 	streq	r7, [r0, #-3837]!	; 0xfffff103
    3d6c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    3d70:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3d74:	05400604 	strbeq	r0, [r0, #-1540]	; 0xfffff9fc
    3d78:	12030603 	andne	r0, r3, #3145728	; 0x300000
    3d7c:	052f062e 	streq	r0, [pc, #-1582]!	; 3756 <__exidx_end+0x95e>
    3d80:	20640306 	rsbcs	r0, r4, r6, lsl #6
    3d84:	01060d05 	tsteq	r6, r5, lsl #26
    3d88:	03060205 	movweq	r0, #25093	; 0x6205
    3d8c:	07053c16 	smladeq	r5, r6, ip, r3
    3d90:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
    3d94:	03062905 	movweq	r2, #26885	; 0x6905
    3d98:	055800eb 	ldrbeq	r0, [r8, #-235]	; 0xffffff15
    3d9c:	0f051705 	svceq	0x00051705
    3da0:	01040106 	tsteq	r4, r6, lsl #2
    3da4:	90030705 	andls	r0, r3, r5, lsl #14
    3da8:	0204207f 	andeq	r2, r4, #127	; 0x7f
    3dac:	f0030f05 			; <UNDEFINED> instruction: 0xf0030f05
    3db0:	33052000 	movwcc	r2, #20480	; 0x5000
    3db4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3db8:	7f900305 	svcvc	0x00900305
    3dbc:	06020520 	streq	r0, [r2], -r0, lsr #10
    3dc0:	06050531 			; <UNDEFINED> instruction: 0x06050531
    3dc4:	06030501 	streq	r0, [r3], -r1, lsl #10
    3dc8:	5102053e 	tstpl	r2, lr, lsr r5
    3dcc:	01060705 	tsteq	r6, r5, lsl #14
    3dd0:	29050204 	stmdbcs	r5, {r2, r9}
    3dd4:	00df0306 	sbcseq	r0, pc, r6, lsl #6
    3dd8:	1705053c 	smladxne	r5, ip, r5, r0
    3ddc:	01060f05 	tsteq	r6, r5, lsl #30
    3de0:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3de4:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3de8:	0f050204 	svceq	0x00050204
    3dec:	2e00e403 	cdpcs	4, 0, cr14, cr0, cr3, {0}
    3df0:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3df4:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3df8:	33050204 	movwcc	r0, #20996	; 0x5204
    3dfc:	2000e403 	andcs	lr, r0, r3, lsl #8
    3e00:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3e04:	207f9c03 	rsbscs	r9, pc, r3, lsl #24
    3e08:	31060205 	tstcc	r6, r5, lsl #4
    3e0c:	01060e05 	tsteq	r6, r5, lsl #28
    3e10:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3e14:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e18:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
    3e1c:	05220602 	streq	r0, [r2, #-1538]!	; 0xfffff9fe
    3e20:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    3e24:	01052c02 	tsteq	r5, r2, lsl #24
    3e28:	0c024c06 	stceq	12, cr4, [r2], {6}
    3e2c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3e30:	02050029 	andeq	r0, r5, #41	; 0x29
    3e34:	00000000 	andeq	r0, r0, r0
    3e38:	0100d703 	tsteq	r0, r3, lsl #14
    3e3c:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    3e40:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    3e44:	0f051c29 	svceq	0x00051c29
    3e48:	20050524 	andcs	r0, r5, r4, lsr #10
    3e4c:	21060305 	tstcs	r6, r5, lsl #6
    3e50:	1a060105 	bne	18426c <__ccfg+0x1642c4>
    3e54:	78030305 	stmdavc	r3, {r0, r2, r8, r9}
    3e58:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3e5c:	06070540 	streq	r0, [r7], -r0, asr #10
    3e60:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    3e64:	2f060305 	svccs	0x00060305
    3e68:	0601052f 	streq	r0, [r1], -pc, lsr #10
    3e6c:	2c030522 	cfstr32cs	mvfx0, [r3], {34}	; 0x22
    3e70:	023e0105 	eorseq	r0, lr, #1073741825	; 0x40000001
    3e74:	01010006 	tsteq	r1, r6
    3e78:	00000931 	andeq	r0, r0, r1, lsr r9
    3e7c:	01cc0003 	biceq	r0, ip, r3
    3e80:	01020000 	mrseq	r0, (UNDEF: 2)
    3e84:	000d0efb 	strdeq	r0, [sp], -fp
    3e88:	01010101 	tsteq	r1, r1, lsl #2
    3e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    3e90:	2f010000 	svccs	0x00010000
    3e94:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3e98:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3e9c:	2f6e6974 	svccs	0x006e6974
    3ea0:	6b736544 	blvs	1cdd3b8 <__ccfg+0x1cbd410>
    3ea4:	2f706f74 	svccs	0x00706f74
    3ea8:	4f534c4f 	svcmi	0x00534c4f
    3eac:	2f54454e 	svccs	0x0054454e
    3eb0:	4f434950 	svcmi	0x00434950
    3eb4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3eb8:	2f534f63 	svccs	0x00534f63
    3ebc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    3ec0:	74532f73 	ldrbvc	r2, [r3], #-3955	; 0xfffff08d
    3ec4:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3ec8:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3ecc:	2f656d6f 	svccs	0x00656d6f
    3ed0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3ed4:	442f6e69 	strtmi	r6, [pc], #-3689	; 3edc <__exidx_end+0x10e4>
    3ed8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3edc:	4f2f706f 	svcmi	0x002f706f
    3ee0:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3ee4:	502f5445 	eorpl	r5, pc, r5, asr #8
    3ee8:	534f4349 	movtpl	r4, #62281	; 0xf349
    3eec:	6369502f 	cmnvs	r9, #47	; 0x2f
    3ef0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3ef4:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3ef8:	43432f58 	movtmi	r2, #16216	; 0x3f58
    3efc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f00:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
    3f04:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    3f08:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    3f0c:	2f006269 	svccs	0x00006269
    3f10:	2f727375 	svccs	0x00727375
    3f14:	2f62696c 	svccs	0x0062696c
    3f18:	2f636367 	svccs	0x00636367
    3f1c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    3f20:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    3f24:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    3f28:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    3f2c:	2f312e32 	svccs	0x00312e32
    3f30:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    3f34:	00656475 	rsbeq	r6, r5, r5, ror r4
    3f38:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3e84 <__exidx_end+0x108c>
    3f3c:	616d2f65 	cmnvs	sp, r5, ror #30
    3f40:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f44:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f48:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f4c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f50:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f54:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f58:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f5c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3f60:	3143432f 	cmpcc	r3, pc, lsr #6
    3f64:	00585833 	subseq	r5, r8, r3, lsr r8
    3f68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3eb4 <__exidx_end+0x10bc>
    3f6c:	616d2f65 	cmnvs	sp, r5, ror #30
    3f70:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3f74:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3f78:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3f7c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3f80:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3f84:	4349502f 	movtmi	r5, #36911	; 0x902f
    3f88:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f8c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3f90:	6f682f00 	svcvs	0x00682f00
    3f94:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3de8 <__exidx_end+0xff0>
    3f98:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3f9c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3fa0:	6f746b73 	svcvs	0x00746b73
    3fa4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3fa8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3fac:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3fb0:	2f534f43 	svccs	0x00534f43
    3fb4:	4f636950 	svcmi	0x00636950
    3fb8:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3fbc:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3fc0:	74730000 	ldrbtvc	r0, [r3], #-0
    3fc4:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    3fc8:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3fcc:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    3fd0:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
    3fd4:	00010063 	andeq	r0, r1, r3, rrx
    3fd8:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3fdc:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3fe0:	73000002 	movwvc	r0, #2
    3fe4:	61726f74 	cmnvs	r2, r4, ror pc
    3fe8:	655f6567 	ldrbvs	r6, [pc, #-1383]	; 3a89 <__exidx_end+0xc91>
    3fec:	6f727065 	svcvs	0x00727065
    3ff0:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    3ff4:	73000001 	movwvc	r0, #1
    3ff8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3ffc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4000:	61000003 	tstvs	r0, r3
    4004:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4008:	00040068 	andeq	r0, r4, r8, rrx
    400c:	63616d00 	cmnvs	r1, #0, 26
    4010:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4014:	70000004 	andvc	r0, r0, r4
    4018:	5f736e69 	svcpl	0x00736e69
    401c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4020:	00040068 	andeq	r0, r4, r8, rrx
    4024:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4028:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    402c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4030:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4034:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4038:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    403c:	00050068 	andeq	r0, r5, r8, rrx
    4040:	72656b00 	rsbvc	r6, r5, #0, 22
    4044:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    4048:	00060068 	andeq	r0, r6, r8, rrx
    404c:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
    4050:	b8020500 	stmdalt	r2, {r8, sl}
    4054:	03000015 	movweq	r0, #21
    4058:	02050118 	andeq	r0, r5, #24, 2
    405c:	05141314 	ldreq	r1, [r4, #-788]	; 0xfffffcec
    4060:	19050115 	stmdbne	r5, {r0, r2, r4, r8}
    4064:	09050d06 	stmdbeq	r5, {r1, r2, r8, sl, fp}
    4068:	05020425 	streq	r0, [r2, #-1061]	; 0xfffffbdb
    406c:	028a032d 	addeq	r0, sl, #-1275068416	; 0xb4000000
    4070:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4074:	7df10319 	ldclvc	3, cr0, [r1, #100]!	; 0x64
    4078:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    407c:	02c5032d 	sbceq	r0, r5, #-1275068416	; 0xb4000000
    4080:	030f0520 	movweq	r0, #62752	; 0xf520
    4084:	05207ed0 	streq	r7, [r0, #-3792]!	; 0xfffff130
    4088:	00fa032d 	rscseq	r0, sl, sp, lsr #6
    408c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4090:	f7030603 			; <UNDEFINED> instruction: 0xf7030603
    4094:	0204207d 	andeq	r2, r4, #125	; 0x7d
    4098:	03060f05 	movweq	r0, #28421	; 0x6f05
    409c:	0401018f 	streq	r0, [r1], #-399	; 0xfffffe71
    40a0:	03050501 	movweq	r0, #21761	; 0x5501
    40a4:	05207ef1 	streq	r7, [r0, #-3825]!	; 0xfffff10f
    40a8:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    40ac:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    40b0:	05020421 	streq	r0, [r2, #-1057]	; 0xfffffbdf
    40b4:	01890329 	orreq	r0, r9, r9, lsr #6
    40b8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    40bc:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    40c0:	017ef303 	cmneq	lr, r3, lsl #6	; <UNPREDICTABLE>
    40c4:	01060605 	tsteq	r6, r5, lsl #12
    40c8:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    40cc:	29050204 	stmdbcs	r5, {r2, r9}
    40d0:	01028103 	tsteq	r2, r3, lsl #2
    40d4:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    40d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    40dc:	017df603 	cmneq	sp, r3, lsl #12	; <UNPREDICTABLE>
    40e0:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40e4:	20028a03 	andcs	r8, r2, r3, lsl #20
    40e8:	03050104 	movweq	r0, #20740	; 0x5104
    40ec:	7dfb0306 	ldclvc	3, cr0, [fp, #24]!
    40f0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    40f4:	02b60329 	adcseq	r0, r6, #-1543503872	; 0xa4000000
    40f8:	17050501 	strne	r0, [r5, -r1, lsl #10]
    40fc:	01062d05 	tsteq	r6, r5, lsl #26
    4100:	1c050104 	stfnes	f0, [r5], {4}
    4104:	7dc00306 	stclvc	3, cr0, [r0, #24]
    4108:	01150520 	tsteq	r5, r0, lsr #10
    410c:	01060205 	tsteq	r6, r5, lsl #4
    4110:	09030105 	stmdbeq	r3, {r0, r2, r8}
    4114:	00070220 	andeq	r0, r7, r0, lsr #4
    4118:	1f050101 	svcne	0x00050101
    411c:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    4120:	03000015 	movweq	r0, #21
    4124:	02050128 	andeq	r0, r5, #40, 2
    4128:	0e051414 	cfmvdlreq	mvd5, r1
    412c:	061f0501 	ldreq	r0, [pc], -r1, lsl #10
    4130:	0204200e 	andeq	r2, r4, #14
    4134:	ff032d05 			; <UNDEFINED> instruction: 0xff032d05
    4138:	01043c01 	tsteq	r4, r1, lsl #24
    413c:	03060305 	movweq	r0, #25349	; 0x6305
    4140:	054a7e86 	strbeq	r7, [sl, #-3718]	; 0xfffff17a
    4144:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4148:	042f0604 	strteq	r0, [pc], #-1540	; 4150 <__exidx_end+0x1358>
    414c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4150:	050101f4 	streq	r0, [r1, #-500]	; 0xfffffe0c
    4154:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4158:	01040106 	tsteq	r4, r6, lsl #2
    415c:	03060405 	movweq	r0, #25605	; 0x6405
    4160:	042e7e89 	strteq	r7, [lr], #-3721	; 0xfffff177
    4164:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4168:	050102a8 	streq	r0, [r1, #-680]	; 0xfffffd58
    416c:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    4170:	01040106 	tsteq	r4, r6, lsl #2
    4174:	03060305 	movweq	r0, #25349	; 0x6305
    4178:	04207dd4 	strteq	r7, [r0], #-3540	; 0xfffff22c
    417c:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4180:	050101f1 	streq	r0, [r1, #-497]	; 0xfffffe0f
    4184:	01041705 	tsteq	r4, r5, lsl #14
    4188:	7e8c0306 	cdpvc	3, 8, cr0, cr12, cr6, {0}
    418c:	03020501 	movweq	r0, #9473	; 0x2501
    4190:	02042079 	andeq	r2, r4, #121	; 0x79
    4194:	fb032d05 	blx	cf5b2 <__ccfg+0xaf60a>
    4198:	01042001 	tsteq	r4, r1
    419c:	03060305 	movweq	r0, #25349	; 0x6305
    41a0:	04207e8b 	strteq	r7, [r0], #-3723	; 0xfffff175
    41a4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41a8:	050102a6 	streq	r0, [r1, #-678]	; 0xfffffd5a
    41ac:	01041705 	tsteq	r4, r5, lsl #14
    41b0:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    41b4:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    41b8:	02aa032d 	adceq	r0, sl, #-1275068416	; 0xb4000000
    41bc:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41c0:	d6030603 	strle	r0, [r3], -r3, lsl #12
    41c4:	1505207d 	strne	r2, [r5, #-125]	; 0xffffff83
    41c8:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    41cc:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
    41d0:	01050106 	tsteq	r5, r6, lsl #2
    41d4:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    41d8:	01010005 	tsteq	r1, r5
    41dc:	05001e05 	streq	r1, [r0, #-3589]	; 0xfffff1fb
    41e0:	00161c02 	andseq	r1, r6, r2, lsl #24
    41e4:	01390300 	teqeq	r9, r0, lsl #6
    41e8:	04140205 	ldreq	r0, [r4], #-517	; 0xfffffdfb
    41ec:	03290502 			; <UNDEFINED> instruction: 0x03290502
    41f0:	050103cf 	streq	r0, [r1, #-975]	; 0xfffffc31
    41f4:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    41f8:	06380517 			; <UNDEFINED> instruction: 0x06380517
    41fc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4200:	7ca8031e 	stcvc	3, cr0, [r8], #120	; 0x78
    4204:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4208:	03d80338 	bicseq	r0, r8, #56, 6	; 0xe0000000
    420c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4210:	ab030602 	blge	c5a20 <__ccfg+0xa5a78>
    4214:	042f2e7c 	strteq	r2, [pc], #-3708	; 421c <__exidx_end+0x1424>
    4218:	03290502 			; <UNDEFINED> instruction: 0x03290502
    421c:	050103cd 	streq	r0, [r1, #-973]	; 0xfffffc33
    4220:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4224:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4228:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    422c:	7cad0301 	stcvc	3, cr0, [sp], #4
    4230:	0004022e 	andeq	r0, r4, lr, lsr #4
    4234:	27050101 	strcs	r0, [r5, -r1, lsl #2]
    4238:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
    423c:	03000016 	movweq	r0, #22
    4240:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    4244:	27051602 	strcs	r1, [r5, -r2, lsl #12]
    4248:	042e0e06 	strteq	r0, [lr], #-3590	; 0xfffff1fa
    424c:	03380502 	teqeq	r8, #8388608	; 0x800000
    4250:	042e03ba 	strteq	r0, [lr], #-954	; 0xfffffc46
    4254:	03090501 	movweq	r0, #38145	; 0x9501
    4258:	04207cca 	strteq	r7, [r0], #-3274	; 0xfffff336
    425c:	03380502 	teqeq	r8, #8388608	; 0x800000
    4260:	042e03b6 	strteq	r0, [lr], #-950	; 0xfffffc4a
    4264:	06080501 	streq	r0, [r8], -r1, lsl #10
    4268:	207cca03 	rsbscs	ip, ip, r3, lsl #20
    426c:	73030205 	movwvc	r0, #12805	; 0x3205
    4270:	0204143c 	andeq	r1, r4, #60, 8	; 0x3c000000
    4274:	ba032905 	blt	ce690 <__ccfg+0xae6e8>
    4278:	3d050103 	stfccs	f0, [r5, #-12]
    427c:	17050514 	smladne	r5, r4, r5, r0
    4280:	02050104 	andeq	r0, r5, #4, 2
    4284:	7cc00306 	stclvc	3, cr0, [r0], {6}
    4288:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    428c:	03c00338 	biceq	r0, r0, #56, 6	; 0xe0000000
    4290:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    4294:	c0030602 	andgt	r0, r3, r2, lsl #12
    4298:	052f207c 	streq	r2, [pc, #-124]!	; 4224 <__exidx_end+0x142c>
    429c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    42a0:	042f0602 	strteq	r0, [pc], #-1538	; 42a8 <__exidx_end+0x14b0>
    42a4:	03290502 			; <UNDEFINED> instruction: 0x03290502
    42a8:	050103b7 	streq	r0, [r1, #-951]	; 0xfffffc49
    42ac:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    42b0:	06380517 			; <UNDEFINED> instruction: 0x06380517
    42b4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    42b8:	c3030602 	movwgt	r0, #13826	; 0x3602
    42bc:	0f052e7c 	svceq	0x00052e7c
    42c0:	01051906 	tsteq	r5, r6, lsl #18
    42c4:	06030536 			; <UNDEFINED> instruction: 0x06030536
    42c8:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    42cc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    42d0:	4c4b0604 	mcrrmi	6, 0, r0, fp, cr4
    42d4:	0007024b 	andeq	r0, r7, fp, asr #4
    42d8:	16050101 	strne	r0, [r5], -r1, lsl #2
    42dc:	88020500 	stmdahi	r2, {r8, sl}
    42e0:	03000016 	movweq	r0, #22
    42e4:	05010181 	streq	r0, [r1, #-385]	; 0xfffffe7f
    42e8:	16051602 	strne	r1, [r5], -r2, lsl #12
    42ec:	06050e06 	streq	r0, [r5], -r6, lsl #28
    42f0:	20050524 	andcs	r0, r5, r4, lsr #10
    42f4:	30060305 	andcc	r0, r6, r5, lsl #6
    42f8:	055e0205 	ldrbeq	r0, [lr, #-517]	; 0xfffffdfb
    42fc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4300:	03053d01 	movweq	r3, #23809	; 0x5d01
    4304:	02051b06 	andeq	r1, r5, #6144	; 0x1800
    4308:	01016603 	tsteq	r1, r3, lsl #12
    430c:	02041401 	andeq	r1, r4, #16777216	; 0x1000000
    4310:	99032905 	stmdbls	r3, {r0, r2, r8, fp, sp}
    4314:	3d050103 	stfccs	f0, [r5, #-12]
    4318:	17050514 	smladne	r5, r4, r5, r0
    431c:	01063805 	tsteq	r6, r5, lsl #16
    4320:	02050104 	andeq	r0, r5, #4, 2
    4324:	2e7ce103 	expcse	f6, f3
    4328:	38050204 	stmdacc	r5, {r2, r9}
    432c:	20039f03 	andcs	r9, r3, r3, lsl #30
    4330:	02050104 	andeq	r0, r5, #4, 2
    4334:	7ce10306 	stclvc	3, cr0, [r1], #24
    4338:	02042f20 	andeq	r2, r4, #32, 30	; 0x80
    433c:	97032905 	strls	r2, [r3, -r5, lsl #18]
    4340:	3d050103 	stfccs	f0, [r5, #-12]
    4344:	17050514 	smladne	r5, r4, r5, r0
    4348:	02050104 	andeq	r0, r5, #4, 2
    434c:	7ce30306 	stclvc	3, cr0, [r3], #24
    4350:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    4354:	039d0338 	orrseq	r0, sp, #56, 6	; 0xe0000000
    4358:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    435c:	e3030602 	movw	r0, #13826	; 0x3602
    4360:	0305207c 	movweq	r2, #20604	; 0x507c
    4364:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    4368:	02010609 	andeq	r0, r1, #9437184	; 0x900000
    436c:	01010009 	tsteq	r1, r9
    4370:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    4374:	0016c802 	andseq	ip, r6, r2, lsl #16
    4378:	00f70300 	rscseq	r0, r7, r0, lsl #6
    437c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4380:	10061705 	andne	r1, r6, r5, lsl #14
    4384:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    4388:	03052005 	movweq	r2, #20485	; 0x5005
    438c:	05593d06 	ldrbeq	r3, [r9, #-3334]	; 0xfffff2fa
    4390:	016e0302 	cmneq	lr, r2, lsl #6
    4394:	13030305 	movwne	r0, #13061	; 0x3305
    4398:	0609053c 			; <UNDEFINED> instruction: 0x0609053c
    439c:	06030501 	streq	r0, [r3], -r1, lsl #10
    43a0:	0501012f 	streq	r0, [r1, #-303]	; 0xfffffed1
    43a4:	02140601 	andseq	r0, r4, #1048576	; 0x100000
    43a8:	01010003 	tsteq	r1, r3
    43ac:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
    43b0:	0016ec02 	andseq	lr, r6, r2, lsl #24
    43b4:	01920300 	orrseq	r0, r2, r0, lsl #6
    43b8:	16020501 	strne	r0, [r2], -r1, lsl #10
    43bc:	0e061105 	adfeqs	f1, f6, f5
    43c0:	06240205 	strteq	r0, [r4], -r5, lsl #4
    43c4:	0608052f 	streq	r0, [r8], -pc, lsr #10
    43c8:	03010501 	movweq	r0, #5377	; 0x1501
    43cc:	08052e0e 	stmdaeq	r5, {r1, r2, r3, r9, sl, fp, sp}
    43d0:	05207203 	streq	r7, [r0, #-515]!	; 0xfffffdfd
    43d4:	0d030602 	stceq	6, cr0, [r3, #-8]
    43d8:	06010520 	streq	r0, [r1], -r0, lsr #10
    43dc:	00030213 	andeq	r0, r3, r3, lsl r2
    43e0:	12050101 	andne	r0, r5, #1073741824	; 0x40000000
    43e4:	00020500 	andeq	r0, r2, r0, lsl #10
    43e8:	03000017 	movweq	r0, #23
    43ec:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    43f0:	06051402 	streq	r1, [r5], -r2, lsl #8
    43f4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    43f8:	06030520 	streq	r0, [r3], -r0, lsr #10
    43fc:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4400:	06030501 	streq	r0, [r3], -r1, lsl #10
    4404:	0601052f 	streq	r0, [r1], -pc, lsr #10
    4408:	00030230 	andeq	r0, r3, r0, lsr r2
    440c:	2b050101 	blcs	144818 <__ccfg+0x124870>
    4410:	00020500 	andeq	r0, r2, r0, lsl #10
    4414:	03000000 	movweq	r0, #0
    4418:	060101af 	streq	r0, [r1], -pc, lsr #3
    441c:	06020520 	streq	r0, [r2], -r0, lsr #10
    4420:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4424:	06020501 	streq	r0, [r2], -r1, lsl #10
    4428:	06050531 			; <UNDEFINED> instruction: 0x06050531
    442c:	3c180501 	cfldr32cc	mvfx0, [r8], {1}
    4430:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    4434:	303f0602 	eorscc	r0, pc, r2, lsl #12
    4438:	29050204 	stmdbcs	r5, {r2, r9}
    443c:	0102d103 	tsteq	r2, r3, lsl #2
    4440:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    4444:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    4448:	01040106 	tsteq	r4, r6, lsl #2
    444c:	aa030205 	bge	c4c68 <__ccfg+0xa4cc0>
    4450:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    4454:	d6033805 	strle	r3, [r3], -r5, lsl #16
    4458:	01042002 	tsteq	r4, r2
    445c:	03060205 	movweq	r0, #25093	; 0x6205
    4460:	2f207daa 	svccs	0x00207daa
    4464:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4468:	02052008 	andeq	r2, r5, #8
    446c:	05020431 	streq	r0, [r2, #-1073]	; 0xfffffbcf
    4470:	02c70329 	sbceq	r0, r7, #-1543503872	; 0xa4000000
    4474:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4478:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    447c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    4480:	06020501 	streq	r0, [r2], -r1, lsl #10
    4484:	2e7db403 	cdpcs	4, 7, cr11, cr13, cr3, {0}
    4488:	06010530 			; <UNDEFINED> instruction: 0x06010530
    448c:	06030513 			; <UNDEFINED> instruction: 0x06030513
    4490:	052e7903 	streq	r7, [lr, #-2307]!	; 0xfffff6fd
    4494:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4498:	0a052e08 	beq	14fcc0 <__ccfg+0x12fd18>
    449c:	023c7403 	eorseq	r7, ip, #50331648	; 0x3000000
    44a0:	01010005 	tsteq	r1, r5
    44a4:	05003105 	streq	r3, [r0, #-261]	; 0xfffffefb
    44a8:	00000002 	andeq	r0, r0, r2
    44ac:	01ca0300 	biceq	r0, sl, r0, lsl #6
    44b0:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    44b4:	10063105 	andne	r3, r6, r5, lsl #2
    44b8:	05220c05 	streq	r0, [r2, #-3077]!	; 0xfffff3fb
    44bc:	05051e31 	streq	r1, [r5, #-3633]	; 0xfffff1cf
    44c0:	1e310522 	cdpne	5, 3, cr0, cr1, cr2, {1}
    44c4:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    44c8:	05320603 	ldreq	r0, [r2, #-1539]!	; 0xfffff9fd
    44cc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    44d0:	06052017 			; <UNDEFINED> instruction: 0x06052017
    44d4:	06030520 	streq	r0, [r3], -r0, lsr #10
    44d8:	06060530 			; <UNDEFINED> instruction: 0x06060530
    44dc:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
    44e0:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    44e4:	03040530 	movweq	r0, #17712	; 0x4530
    44e8:	1005010a 	andne	r0, r5, sl, lsl #2
    44ec:	09050106 	stmdbeq	r5, {r1, r2, r8}
    44f0:	20100520 	andscs	r0, r0, r0, lsr #10
    44f4:	05200905 	streq	r0, [r0, #-2309]!	; 0xfffff6fb
    44f8:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    44fc:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    4500:	1f052009 	svcne	0x00052009
    4504:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
    4508:	24060405 	strcs	r0, [r6], #-1029	; 0xfffffbfb
    450c:	01060d05 	tsteq	r6, r5, lsl #26
    4510:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    4514:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
    4518:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    451c:	2f2f0605 	svccs	0x002f0605
    4520:	01060c05 	tsteq	r6, r5, lsl #24
    4524:	31030105 	tstcc	r3, r5, lsl #2
    4528:	06040520 	streq	r0, [r4], -r0, lsr #10
    452c:	05205203 	streq	r5, [r0, #-515]!	; 0xfffffdfd
    4530:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4534:	25052007 	strcs	r2, [r5, #-7]
    4538:	201d0520 	andscs	r0, sp, r0, lsr #10
    453c:	3e060505 	cfsh32cc	mvfx0, mvfx6, #5
    4540:	01060b05 	tsteq	r6, r5, lsl #22
    4544:	05280405 	streq	r0, [r8, #-1029]!	; 0xfffffbfb
    4548:	04051e0b 	streq	r1, [r5], #-3595	; 0xfffff1f5
    454c:	042f2206 	strteq	r2, [pc], #-518	; 4554 <__exidx_end+0x175c>
    4550:	06380502 	ldrteq	r0, [r8], -r2, lsl #10
    4554:	01029603 	tsteq	r2, r3, lsl #12
    4558:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    455c:	2e7dea03 	vaddcs.f32	s29, s26, s6
    4560:	03060205 	movweq	r0, #25093	; 0x6205
    4564:	04207ec7 	strteq	r7, [r0], #-3783	; 0xfffff139
    4568:	03290502 			; <UNDEFINED> instruction: 0x03290502
    456c:	050103c8 	streq	r0, [r1, #-968]	; 0xfffffc38
    4570:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4574:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4578:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    457c:	b2030602 	andlt	r0, r3, #2097152	; 0x200000
    4580:	4b2f207c 	blmi	bcc778 <__ccfg+0xbac7d0>
    4584:	02043d4b 	andeq	r3, r4, #4800	; 0x12c0
    4588:	c3032905 	movwgt	r2, #14597	; 0x3905
    458c:	3d050103 	stfccs	f0, [r5, #-12]
    4590:	17050514 	smladne	r5, r4, r5, r0
    4594:	01063805 	tsteq	r6, r5, lsl #16
    4598:	02050104 	andeq	r0, r5, #4, 2
    459c:	7dee0306 	stclvc	3, cr0, [lr, #24]!
    45a0:	060b052e 	streq	r0, [fp], -lr, lsr #10
    45a4:	05825503 	streq	r5, [r2, #1283]	; 0x503
    45a8:	1f030609 	svcne	0x00030609
    45ac:	0613052e 	ldreq	r0, [r3], -lr, lsr #10
    45b0:	2e0c0501 	cfsh32cs	mvfx0, mvfx12, #1
    45b4:	05202a05 	streq	r2, [r0, #-2565]!	; 0xfffff5fb
    45b8:	05052022 	streq	r2, [r5, #-34]	; 0xffffffde
    45bc:	0b053e06 	bleq	153ddc <__ccfg+0x133e34>
    45c0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    45c4:	0b053106 	bleq	1509e4 <__ccfg+0x130a3c>
    45c8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    45cc:	06040535 			; <UNDEFINED> instruction: 0x06040535
    45d0:	592e0a03 	stmdbpl	lr!, {r0, r1, r9, fp}
    45d4:	01060905 	tsteq	r6, r5, lsl #18
    45d8:	054a0e03 	strbeq	r0, [sl, #-3587]	; 0xfffff1fd
    45dc:	03210604 			; <UNDEFINED> instruction: 0x03210604
    45e0:	0359206b 	cmpeq	r9, #107	; 0x6b
    45e4:	054b200b 	strbeq	r2, [fp, #-11]
    45e8:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    45ec:	4b5e0604 	blmi	1785e04 <__ccfg+0x1765e5c>
    45f0:	01060905 	tsteq	r6, r5, lsl #18
    45f4:	03060305 	movweq	r0, #25349	; 0x6305
    45f8:	05587fba 	ldrbeq	r7, [r8, #-4026]	; 0xfffff046
    45fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4600:	00083b09 	andeq	r3, r8, r9, lsl #22
    4604:	3b050101 	blcc	144a10 <__ccfg+0x124a68>
    4608:	00020500 	andeq	r0, r2, r0, lsl #10
    460c:	03000000 	movweq	r0, #0
    4610:	050102a0 	streq	r0, [r1, #-672]	; 0xfffffd60
    4614:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    4618:	050e063b 	streq	r0, [lr, #-1595]	; 0xfffff9c5
    461c:	3b05320c 	blcc	150e54 <__ccfg+0x130eac>
    4620:	2405051c 	strcs	r0, [r5], #-1308	; 0xfffffae4
    4624:	051c3b05 	ldreq	r3, [ip, #-2821]	; 0xfffff4fb
    4628:	03053205 	movweq	r3, #20997	; 0x5205
    462c:	06053206 	streq	r3, [r5], -r6, lsl #4
    4630:	1a050106 	bne	144a50 <__ccfg+0x124aa8>
    4634:	2e14053c 	mrccs	5, 0, r0, cr4, cr12, {1}
    4638:	3f060305 	svccc	0x00060305
    463c:	01060805 	tsteq	r6, r5, lsl #16
    4640:	2f060305 	svccs	0x00060305
    4644:	01060805 	tsteq	r6, r5, lsl #16
    4648:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    464c:	01060805 	tsteq	r6, r5, lsl #16
    4650:	30060305 	andcc	r0, r6, r5, lsl #6
    4654:	0609052f 	streq	r0, [r9], -pc, lsr #10
    4658:	06030501 	streq	r0, [r3], -r1, lsl #10
    465c:	060c0530 			; <UNDEFINED> instruction: 0x060c0530
    4660:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    4664:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    4668:	01060a05 	tsteq	r6, r5, lsl #20
    466c:	21060405 	tstcs	r6, r5, lsl #8
    4670:	0601052f 	streq	r0, [r1], -pc, lsr #10
    4674:	05012203 	streq	r2, [r1, #-515]	; 0xfffffdfd
    4678:	62030603 	andvs	r0, r3, #3145728	; 0x300000
    467c:	0611053c 			; <UNDEFINED> instruction: 0x0611053c
    4680:	20060501 	andcs	r0, r6, r1, lsl #10
    4684:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    4688:	4a062406 	bmi	18d6a8 <__ccfg+0x16d700>
    468c:	05020430 	streq	r0, [r2, #-1072]	; 0xfffffbd0
    4690:	01c80329 	biceq	r0, r8, r9, lsr #6
    4694:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4698:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    469c:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    46a0:	03030501 	movweq	r0, #13569	; 0x3501
    46a4:	043c7eb3 	ldrteq	r7, [ip], #-3763	; 0xfffff14d
    46a8:	03380502 	teqeq	r8, #8388608	; 0x800000
    46ac:	042001cd 	strteq	r0, [r0], #-461	; 0xfffffe33
    46b0:	06030501 	streq	r0, [r3], -r1, lsl #10
    46b4:	2e7eb303 	cdpcs	3, 7, cr11, cr14, cr3, {0}
    46b8:	0619052f 	ldreq	r0, [r9], -pc, lsr #10
    46bc:	2e030501 	cfsh32cs	mvfx0, mvfx3, #1
    46c0:	3e4b4b06 	vmlacc.f64	d20, d11, d6
    46c4:	31060805 	tstcc	r6, r5, lsl #16
    46c8:	052b0c05 	streq	r0, [fp, #-3077]!	; 0xfffff3fb
    46cc:	08052e09 	stmdaeq	r5, {r0, r3, r9, sl, fp, sp}
    46d0:	06090523 	streq	r0, [r9], -r3, lsr #10
    46d4:	2603051d 			; <UNDEFINED> instruction: 0x2603051d
    46d8:	29050204 	stmdbcs	r5, {r2, r9}
    46dc:	0101bb03 	tsteq	r1, r3, lsl #22
    46e0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    46e4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    46e8:	01040106 	tsteq	r4, r6, lsl #2
    46ec:	03060205 	movweq	r0, #25093	; 0x6205
    46f0:	053c7ec1 	ldreq	r7, [ip, #-3777]!	; 0xfffff13f
    46f4:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    46f8:	4b400602 	blmi	1005f08 <__ccfg+0xfe5f60>
    46fc:	73030405 	movwvc	r0, #13317	; 0x3405
    4700:	06130520 	ldreq	r0, [r3], -r0, lsr #10
    4704:	3c040501 	cfstr32cc	mvfx0, [r4], {1}
    4708:	08053d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, ip, sp}
    470c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4710:	08055906 	stmdaeq	r5, {r1, r2, r8, fp, ip, lr}
    4714:	0b050106 	bleq	144b34 <__ccfg+0x124b8c>
    4718:	024a5d03 	subeq	r5, sl, #3, 26	; 0xc0
    471c:	0101000d 	tsteq	r1, sp
    4720:	05001205 	streq	r1, [r0, #-517]	; 0xfffffdfb
    4724:	00000002 	andeq	r0, r0, r2
    4728:	02da0300 	sbcseq	r0, sl, #0, 6
    472c:	15010501 	strne	r0, [r1, #-1281]	; 0xfffffaff
    4730:	01000102 	tsteq	r0, r2, lsl #2
    4734:	00180501 	andseq	r0, r8, r1, lsl #10
    4738:	00000205 	andeq	r0, r0, r5, lsl #4
    473c:	df030000 	svcle	0x00030000
    4740:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4744:	06010515 			; <UNDEFINED> instruction: 0x06010515
    4748:	00020213 	andeq	r0, r2, r3, lsl r2
    474c:	03040101 	movweq	r0, #16641	; 0x4101
    4750:	05002905 	streq	r2, [r0, #-2309]	; 0xfffff6fb
    4754:	00000002 	andeq	r0, r0, r2
    4758:	02051900 	andeq	r1, r5, #0, 18
    475c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    4760:	06030501 	streq	r0, [r3], -r1, lsl #10
    4764:	06070521 	streq	r0, [r7], -r1, lsr #10
    4768:	06020501 	streq	r0, [r2], -r1, lsl #10
    476c:	06050530 			; <UNDEFINED> instruction: 0x06050530
    4770:	06030501 	streq	r0, [r3], -r1, lsl #10
    4774:	06080521 	streq	r0, [r8], -r1, lsr #10
    4778:	06020501 	streq	r0, [r2], -r1, lsl #10
    477c:	0601053e 			; <UNDEFINED> instruction: 0x0601053e
    4780:	00030213 	andeq	r0, r3, r3, lsl r2
    4784:	03040101 	movweq	r0, #16641	; 0x4101
    4788:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    478c:	00000002 	andeq	r0, r0, r2
    4790:	01120300 	tsteq	r2, r0, lsl #6
    4794:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4798:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    479c:	2f062202 	svccs	0x00062202
    47a0:	06010567 	streq	r0, [r1], -r7, ror #10
    47a4:	2d020513 	cfstr32cs	mvfx0, [r2, #-76]	; 0xffffffb4
    47a8:	01000202 	tsteq	r0, r2, lsl #4
    47ac:	0001c101 	andeq	ip, r1, r1, lsl #2
    47b0:	21000300 	mrscs	r0, LR_irq
    47b4:	02000001 	andeq	r0, r0, #1
    47b8:	0d0efb01 	vstreq	d15, [lr, #-4]
    47bc:	01010100 	mrseq	r0, (UNDEF: 17)
    47c0:	00000001 	andeq	r0, r0, r1
    47c4:	01000001 	tsteq	r0, r1
    47c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4714 <__exidx_end+0x191c>
    47cc:	616d2f65 	cmnvs	sp, r5, ror #30
    47d0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    47d4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    47d8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    47dc:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    47e0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    47e4:	4349502f 	movtmi	r5, #36911	; 0x902f
    47e8:	502f534f 	eorpl	r5, pc, pc, asr #6
    47ec:	534f6369 	movtpl	r6, #62313	; 0xf369
    47f0:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    47f4:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    47f8:	61697265 	cmnvs	r9, r5, ror #4
    47fc:	752f006c 	strvc	r0, [pc, #-108]!	; 4798 <__exidx_end+0x19a0>
    4800:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 463c <__exidx_end+0x1844>
    4804:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4808:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    480c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4810:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4814:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4818:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    481c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4820:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4824:	2f006564 	svccs	0x00006564
    4828:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    482c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4830:	2f6e6974 	svccs	0x006e6974
    4834:	6b736544 	blvs	1cddd4c <__ccfg+0x1cbdda4>
    4838:	2f706f74 	svccs	0x00706f74
    483c:	4f534c4f 	svcmi	0x00534c4f
    4840:	2f54454e 	svccs	0x0054454e
    4844:	4f434950 	svcmi	0x00434950
    4848:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    484c:	2f534f63 	svccs	0x00534f63
    4850:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4854:	2f005858 	svccs	0x00005858
    4858:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    485c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4860:	2f6e6974 	svccs	0x006e6974
    4864:	6b736544 	blvs	1cddd7c <__ccfg+0x1cbddd4>
    4868:	2f706f74 	svccs	0x00706f74
    486c:	4f534c4f 	svcmi	0x00534c4f
    4870:	2f54454e 	svccs	0x0054454e
    4874:	4f434950 	svcmi	0x00434950
    4878:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    487c:	00534f63 	subseq	r4, r3, r3, ror #30
    4880:	72657300 	rsbvc	r7, r5, #0, 6
    4884:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    4888:	00010063 	andeq	r0, r1, r3, rrx
    488c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4890:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4894:	00020068 	andeq	r0, r2, r8, rrx
    4898:	63726100 	cmnvs	r2, #0, 2
    489c:	00682e68 	rsbeq	r2, r8, r8, ror #28
    48a0:	6d000003 	stcvs	0, cr0, [r0, #-12]
    48a4:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    48a8:	00030068 	andeq	r0, r3, r8, rrx
    48ac:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    48b0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    48b4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    48b8:	62000003 	andvs	r0, r0, #3
    48bc:	6f747475 	svcvs	0x00747475
    48c0:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    48c4:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    48c8:	00000300 	andeq	r0, r0, r0, lsl #6
    48cc:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    48d0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    48d4:	00000004 	andeq	r0, r0, r4
    48d8:	05002a05 	streq	r2, [r0, #-2565]	; 0xfffff5fb
    48dc:	00171402 	andseq	r1, r7, r2, lsl #8
    48e0:	010c0300 	mrseq	r0, LR_mon
    48e4:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    48e8:	03062a05 	movweq	r2, #27141	; 0x6a05
    48ec:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    48f0:	02053405 	andeq	r3, r5, #83886080	; 0x5000000
    48f4:	10053206 	andne	r3, r5, r6, lsl #4
    48f8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    48fc:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4900:	060f0521 	streq	r0, [pc], -r1, lsr #10
    4904:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    4908:	21060405 	tstcs	r6, r5, lsl #8
    490c:	01060b05 	tsteq	r6, r5, lsl #22
    4910:	4b060405 	blmi	18592c <__ccfg+0x165984>
    4914:	01060705 	tsteq	r6, r5, lsl #14
    4918:	21060505 	tstcs	r6, r5, lsl #10
    491c:	1603053d 			; <UNDEFINED> instruction: 0x1603053d
    4920:	4f02052d 	svcmi	0x0002052d
    4924:	01060505 	tsteq	r6, r5, lsl #10
    4928:	2f060305 	svccs	0x00060305
    492c:	01061305 	tsteq	r6, r5, lsl #6
    4930:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    4934:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    4938:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    493c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    4940:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4944:	593e0602 	ldmdbpl	lr!, {r1, r9, sl}
    4948:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    494c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4950:	0605052f 	streq	r0, [r5], -pc, lsr #10
    4954:	06030501 	streq	r0, [r3], -r1, lsl #10
    4958:	060e052f 	streq	r0, [lr], -pc, lsr #10
    495c:	22010501 	andcs	r0, r1, #4194304	; 0x400000
    4960:	03060305 	movweq	r0, #25349	; 0x6305
    4964:	0a052e75 	beq	150340 <__ccfg+0x130398>
    4968:	6e030106 	adfvss	f0, f3, f6
    496c:	0007024a 	andeq	r0, r7, sl, asr #4
    4970:	019e0101 	orrseq	r0, lr, r1, lsl #2
    4974:	00030000 	andeq	r0, r3, r0
    4978:	0000013d 	andeq	r0, r0, sp, lsr r1
    497c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4980:	0101000d 	tsteq	r1, sp
    4984:	00000101 	andeq	r0, r0, r1, lsl #2
    4988:	00000100 	andeq	r0, r0, r0, lsl #2
    498c:	6f682f01 	svcvs	0x00682f01
    4990:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 47e4 <__exidx_end+0x19ec>
    4994:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4998:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    499c:	6f746b73 	svcvs	0x00746b73
    49a0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    49a4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    49a8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    49ac:	2f534f43 	svccs	0x00534f43
    49b0:	4f636950 	svcmi	0x00636950
    49b4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    49b8:	2f736269 	svccs	0x00736269
    49bc:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    49c0:	2f006c61 	svccs	0x00006c61
    49c4:	2f727375 	svccs	0x00727375
    49c8:	2f62696c 	svccs	0x0062696c
    49cc:	2f636367 	svccs	0x00636367
    49d0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    49d4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    49d8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    49dc:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    49e0:	2f312e32 	svccs	0x00312e32
    49e4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    49e8:	00656475 	rsbeq	r6, r5, r5, ror r4
    49ec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4938 <__exidx_end+0x1b40>
    49f0:	616d2f65 	cmnvs	sp, r5, ror #30
    49f4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    49f8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    49fc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a00:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a04:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a08:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a0c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a10:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a14:	3143432f 	cmpcc	r3, pc, lsr #6
    4a18:	00585833 	subseq	r5, r8, r3, lsr r8
    4a1c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4968 <__exidx_end+0x1b70>
    4a20:	616d2f65 	cmnvs	sp, r5, ror #30
    4a24:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4a28:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4a2c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4a30:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4a34:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4a38:	4349502f 	movtmi	r5, #36911	; 0x902f
    4a3c:	502f534f 	eorpl	r5, pc, pc, asr #6
    4a40:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a44:	65730000 	ldrbvs	r0, [r3, #-0]!
    4a48:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 3ade <__exidx_end+0xce6>
    4a4c:	632e6674 			; <UNDEFINED> instruction: 0x632e6674
    4a50:	00000100 	andeq	r0, r0, r0, lsl #2
    4a54:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4a58:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4a5c:	00000200 	andeq	r0, r0, r0, lsl #4
    4a60:	61647473 	smcvs	18243	; 0x4743
    4a64:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4a68:	00000200 	andeq	r0, r0, r0, lsl #4
    4a6c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4a70:	0300682e 	movweq	r6, #2094	; 0x82e
    4a74:	616d0000 	cmnvs	sp, r0
    4a78:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4a7c:	00000300 	andeq	r0, r0, r0, lsl #6
    4a80:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4a84:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4a88:	0300682e 	movweq	r6, #2094	; 0x82e
    4a8c:	75620000 	strbvc	r0, [r2, #-0]!
    4a90:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4a94:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4a98:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4a9c:	73000003 	movwvc	r0, #3
    4aa0:	6f697379 	svcvs	0x00697379
    4aa4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4aa8:	623c0000 	eorsvs	r0, ip, #0
    4aac:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4ab0:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4ab4:	00000000 	andeq	r0, r0, r0
    4ab8:	002c0500 	eoreq	r0, ip, r0, lsl #10
    4abc:	178c0205 	strne	r0, [ip, r5, lsl #4]
    4ac0:	0b030000 	bleq	c4ac8 <__ccfg+0xa4b20>
    4ac4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4ac8:	05141313 	ldreq	r1, [r4, #-787]	; 0xfffffced
    4acc:	7a03062c 	bvc	c6384 <__ccfg+0xa63dc>
    4ad0:	0e052e01 	cdpeq	14, 0, cr2, cr5, cr1, {0}
    4ad4:	3c050526 	cfstr32cc	mvfx0, [r5], {38}	; 0x26
    4ad8:	30060305 	andcc	r0, r6, r5, lsl #6
    4adc:	010a033d 	tsteq	sl, sp, lsr r3
    4ae0:	79030205 	stmdbvc	r3, {r0, r2, r9}
    4ae4:	060d052e 	streq	r0, [sp], -lr, lsr #10
    4ae8:	1e020522 	cfsh32ne	mvfx0, mvfx2, #18
    4aec:	0d052206 	sfmeq	f2, 4, [r5, #-24]	; 0xffffffe8
    4af0:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4af4:	0603052e 	streq	r0, [r3], -lr, lsr #10
    4af8:	4e020532 	mcrmi	5, 0, r0, cr2, cr2, {1}
    4afc:	01060605 	tsteq	r6, r5, lsl #12
    4b00:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    4b04:	3d210603 	stccc	6, cr0, [r1, #-12]!
    4b08:	05240205 	streq	r0, [r4, #-517]!	; 0xfffffdfb
    4b0c:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    4b10:	01010009 	tsteq	r1, r9
    4b14:	000001af 	andeq	r0, r0, pc, lsr #3
    4b18:	013c0003 	teqeq	ip, r3
    4b1c:	01020000 	mrseq	r0, (UNDEF: 2)
    4b20:	000d0efb 	strdeq	r0, [sp], -fp
    4b24:	01010101 	tsteq	r1, r1, lsl #2
    4b28:	01000000 	mrseq	r0, (UNDEF: 0)
    4b2c:	2f010000 	svccs	0x00010000
    4b30:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4b34:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4b38:	2f6e6974 	svccs	0x006e6974
    4b3c:	6b736544 	blvs	1cde054 <__ccfg+0x1cbe0ac>
    4b40:	2f706f74 	svccs	0x00706f74
    4b44:	4f534c4f 	svcmi	0x00534c4f
    4b48:	2f54454e 	svccs	0x0054454e
    4b4c:	4f434950 	svcmi	0x00434950
    4b50:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4b54:	2f534f63 	svccs	0x00534f63
    4b58:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4b5c:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4b60:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4b64:	73752f00 	cmnvc	r5, #0, 30
    4b68:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4b6c:	63672f62 	cmnvs	r7, #392	; 0x188
    4b70:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4b74:	6f6e2d6d 	svcvs	0x006e2d6d
    4b78:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4b7c:	2f696261 	svccs	0x00696261
    4b80:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4b84:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4b88:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4b8c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4b90:	2f656d6f 	svccs	0x00656d6f
    4b94:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4b98:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ba0 <__exidx_end+0x1da8>
    4b9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ba0:	4f2f706f 	svcmi	0x002f706f
    4ba4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4ba8:	502f5445 	eorpl	r5, pc, r5, asr #8
    4bac:	534f4349 	movtpl	r4, #62281	; 0xf349
    4bb0:	6369502f 	cmnvs	r9, #47	; 0x2f
    4bb4:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4bb8:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4bbc:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4bc0:	2f656d6f 	svccs	0x00656d6f
    4bc4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4bc8:	442f6e69 	strtmi	r6, [pc], #-3689	; 4bd0 <__exidx_end+0x1dd8>
    4bcc:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4bd0:	4f2f706f 	svcmi	0x002f706f
    4bd4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4bd8:	502f5445 	eorpl	r5, pc, r5, asr #8
    4bdc:	534f4349 	movtpl	r4, #62281	; 0xf349
    4be0:	6369502f 	cmnvs	r9, #47	; 0x2f
    4be4:	0000534f 	andeq	r5, r0, pc, asr #6
    4be8:	5f726573 	svcpl	0x00726573
    4bec:	2e666e69 	cdpcs	14, 6, cr6, cr6, cr9, {3}
    4bf0:	00010063 	andeq	r0, r1, r3, rrx
    4bf4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4bf8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    4bfc:	00020068 	andeq	r0, r2, r8, rrx
    4c00:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4c04:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    4c08:	00020068 	andeq	r0, r2, r8, rrx
    4c0c:	63726100 	cmnvs	r2, #0, 2
    4c10:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4c14:	6d000003 	stcvs	0, cr0, [r0, #-12]
    4c18:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    4c1c:	00030068 	andeq	r0, r3, r8, rrx
    4c20:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    4c24:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c28:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c2c:	62000003 	andvs	r0, r0, #3
    4c30:	6f747475 	svcvs	0x00747475
    4c34:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4c38:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    4c3c:	00000300 	andeq	r0, r0, r0, lsl #6
    4c40:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    4c44:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    4c48:	3c000004 	stccc	0, cr0, [r0], {4}
    4c4c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    4c50:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    4c54:	0000003e 	andeq	r0, r0, lr, lsr r0
    4c58:	2d050000 	stccs	0, cr0, [r5, #-0]
    4c5c:	e0020500 	and	r0, r2, r0, lsl #10
    4c60:	03000017 	movweq	r0, #23
    4c64:	0205010d 	andeq	r0, r5, #1073741827	; 0x40000003
    4c68:	05141317 	ldreq	r1, [r4, #-791]	; 0xfffffce9
    4c6c:	7803062d 	stmdavc	r3, {r0, r2, r3, r5, r9, sl}
    4c70:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    4c74:	06020536 			; <UNDEFINED> instruction: 0x06020536
    4c78:	06100523 	ldreq	r0, [r0], -r3, lsr #10
    4c7c:	20050501 	andcs	r0, r5, r1, lsl #10
    4c80:	2f060305 	svccs	0x00060305
    4c84:	01060f05 	tsteq	r6, r5, lsl #30
    4c88:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4c8c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4c90:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4c94:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4c98:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4c9c:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4ca0:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    4ca4:	304f0205 	subcc	r0, pc, r5, lsl #4
    4ca8:	01060905 	tsteq	r6, r5, lsl #18
    4cac:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    4cb0:	060c053d 			; <UNDEFINED> instruction: 0x060c053d
    4cb4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4cb8:	06010530 			; <UNDEFINED> instruction: 0x06010530
    4cbc:	030a0513 	movweq	r0, #42259	; 0xa513
    4cc0:	06026669 	streq	r6, [r2], -r9, ror #12
    4cc4:	a1010100 	mrsge	r0, (UNDEF: 17)
    4cc8:	03000001 	movweq	r0, #1
    4ccc:	00012600 	andeq	r2, r1, r0, lsl #12
    4cd0:	fb010200 	blx	454da <__ccfg+0x25532>
    4cd4:	01000d0e 	tsteq	r0, lr, lsl #26
    4cd8:	00010101 	andeq	r0, r1, r1, lsl #2
    4cdc:	00010000 	andeq	r0, r1, r0
    4ce0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4ce4:	2f656d6f 	svccs	0x00656d6f
    4ce8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4cec:	442f6e69 	strtmi	r6, [pc], #-3689	; 4cf4 <__exidx_end+0x1efc>
    4cf0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4cf4:	4f2f706f 	svcmi	0x002f706f
    4cf8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4cfc:	502f5445 	eorpl	r5, pc, r5, asr #8
    4d00:	534f4349 	movtpl	r4, #62281	; 0xf349
    4d04:	6369502f 	cmnvs	r9, #47	; 0x2f
    4d08:	502f534f 	eorpl	r5, pc, pc, asr #6
    4d0c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4d10:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4d14:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4d18:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4d1c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4d20:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4d24:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4d28:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4d2c:	61652d65 	cmnvs	r5, r5, ror #26
    4d30:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4d34:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4d38:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4d3c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4d40:	6f682f00 	svcvs	0x00682f00
    4d44:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b98 <__exidx_end+0x1da0>
    4d48:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d4c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d50:	6f746b73 	svcvs	0x00746b73
    4d54:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d58:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d5c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d60:	2f534f43 	svccs	0x00534f43
    4d64:	4f636950 	svcmi	0x00636950
    4d68:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4d6c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4d70:	6f682f00 	svcvs	0x00682f00
    4d74:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4bc8 <__exidx_end+0x1dd0>
    4d78:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d7c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d80:	6f746b73 	svcvs	0x00746b73
    4d84:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d88:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d8c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d90:	2f534f43 	svccs	0x00534f43
    4d94:	4f636950 	svcmi	0x00636950
    4d98:	5f000053 	svcpl	0x00000053
    4d9c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4da0:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4da4:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    4da8:	00000100 	andeq	r0, r0, r0, lsl #2
    4dac:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4db0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4db4:	00000200 	andeq	r0, r0, r0, lsl #4
    4db8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4dbc:	0300682e 	movweq	r6, #2094	; 0x82e
    4dc0:	616d0000 	cmnvs	sp, r0
    4dc4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4dc8:	00000300 	andeq	r0, r0, r0, lsl #6
    4dcc:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4dd0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4dd4:	0300682e 	movweq	r6, #2094	; 0x82e
    4dd8:	75620000 	strbvc	r0, [r2, #-0]!
    4ddc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4de0:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4de4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4de8:	73000003 	movwvc	r0, #3
    4dec:	6f697379 	svcvs	0x00697379
    4df0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4df4:	05000000 	streq	r0, [r0, #-0]
    4df8:	02050001 	andeq	r0, r5, #1
    4dfc:	00001840 	andeq	r1, r0, r0, asr #16
    4e00:	01011c03 	tsteq	r1, r3, lsl #24
    4e04:	3c062006 	stccc	0, cr2, [r6], {6}
    4e08:	013c2603 	teqeq	ip, r3, lsl #12
    4e0c:	5f030205 	svcpl	0x00030205
    4e10:	15131358 	ldrne	r1, [r3, #-856]	; 0xfffffca8
    4e14:	05130101 	ldreq	r0, [r3, #-257]	; 0xfffffeff
    4e18:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4e1c:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    4e20:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4e24:	052f0603 	streq	r0, [pc, #-1539]!	; 4829 <__exidx_end+0x1a31>
    4e28:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4e2c:	0a053c07 	beq	153e50 <__ccfg+0x133ea8>
    4e30:	06020528 	streq	r0, [r2], -r8, lsr #10
    4e34:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4e38:	06020501 	streq	r0, [r2], -r1, lsl #10
    4e3c:	06060583 	streq	r0, [r6], -r3, lsl #11
    4e40:	211f2101 	tstcs	pc, r1, lsl #2
    4e44:	0602051f 			; <UNDEFINED> instruction: 0x0602051f
    4e48:	06060521 	streq	r0, [r6], -r1, lsr #10
    4e4c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4e50:	06050521 	streq	r0, [r5], -r1, lsr #10
    4e54:	06030501 	streq	r0, [r3], -r1, lsl #10
    4e58:	74033d30 	strvc	r3, [r3], #-3376	; 0xfffff2d0
    4e5c:	060d054a 	streq	r0, [sp], -sl, asr #10
    4e60:	20110501 	andscs	r0, r1, r1, lsl #10
    4e64:	02200705 	eoreq	r0, r0, #1310720	; 0x140000
    4e68:	01010008 	tsteq	r1, r8
    4e6c:	0000024b 	andeq	r0, r0, fp, asr #4
    4e70:	01250003 			; <UNDEFINED> instruction: 0x01250003
    4e74:	01020000 	mrseq	r0, (UNDEF: 2)
    4e78:	000d0efb 	strdeq	r0, [sp], -fp
    4e7c:	01010101 	tsteq	r1, r1, lsl #2
    4e80:	01000000 	mrseq	r0, (UNDEF: 0)
    4e84:	2f010000 	svccs	0x00010000
    4e88:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4e8c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4e90:	2f6e6974 	svccs	0x006e6974
    4e94:	6b736544 	blvs	1cde3ac <__ccfg+0x1cbe404>
    4e98:	2f706f74 	svccs	0x00706f74
    4e9c:	4f534c4f 	svcmi	0x00534c4f
    4ea0:	2f54454e 	svccs	0x0054454e
    4ea4:	4f434950 	svcmi	0x00434950
    4ea8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4eac:	2f534f63 	svccs	0x00534f63
    4eb0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4eb4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4eb8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4ebc:	73752f00 	cmnvc	r5, #0, 30
    4ec0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4ec4:	63672f62 	cmnvs	r7, #392	; 0x188
    4ec8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4ecc:	6f6e2d6d 	svcvs	0x006e2d6d
    4ed0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4ed4:	2f696261 	svccs	0x00696261
    4ed8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4edc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4ee0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4ee4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4ee8:	2f656d6f 	svccs	0x00656d6f
    4eec:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4ef0:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ef8 <__exidx_end+0x2100>
    4ef4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ef8:	4f2f706f 	svcmi	0x002f706f
    4efc:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4f00:	502f5445 	eorpl	r5, pc, r5, asr #8
    4f04:	534f4349 	movtpl	r4, #62281	; 0xf349
    4f08:	6369502f 	cmnvs	r9, #47	; 0x2f
    4f0c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    4f10:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    4f14:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    4f18:	2f656d6f 	svccs	0x00656d6f
    4f1c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4f20:	442f6e69 	strtmi	r6, [pc], #-3689	; 4f28 <__exidx_end+0x2130>
    4f24:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4f28:	4f2f706f 	svcmi	0x002f706f
    4f2c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4f30:	502f5445 	eorpl	r5, pc, r5, asr #8
    4f34:	534f4349 	movtpl	r4, #62281	; 0xf349
    4f38:	6369502f 	cmnvs	r9, #47	; 0x2f
    4f3c:	0000534f 	andeq	r5, r0, pc, asr #6
    4f40:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    4f44:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    4f48:	632e6c61 			; <UNDEFINED> instruction: 0x632e6c61
    4f4c:	00000100 	andeq	r0, r0, r0, lsl #2
    4f50:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4f54:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4f58:	00000200 	andeq	r0, r0, r0, lsl #4
    4f5c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4f60:	0300682e 	movweq	r6, #2094	; 0x82e
    4f64:	616d0000 	cmnvs	sp, r0
    4f68:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4f6c:	00000300 	andeq	r0, r0, r0, lsl #6
    4f70:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4f74:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4f78:	0300682e 	movweq	r6, #2094	; 0x82e
    4f7c:	75620000 	strbvc	r0, [r2, #-0]!
    4f80:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4f84:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4f88:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4f8c:	73000003 	movwvc	r0, #3
    4f90:	6f697379 	svcvs	0x00697379
    4f94:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4f98:	05000000 	streq	r0, [r0, #-0]
    4f9c:	02050001 	andeq	r0, r5, #1
    4fa0:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
    4fa4:	01012203 	tsteq	r1, r3, lsl #4
    4fa8:	3c062006 	stccc	0, cr2, [r6], {6}
    4fac:	136b0205 	cmnne	fp, #1342177280	; 0x50000000
    4fb0:	10051613 	andne	r1, r5, r3, lsl r6
    4fb4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4fb8:	06030520 	streq	r0, [r3], -r0, lsr #10
    4fbc:	3f020530 	svccc	0x00020530
    4fc0:	01061d05 	tsteq	r6, r5, lsl #26
    4fc4:	053c0b05 	ldreq	r0, [ip, #-2821]!	; 0xfffff4fb
    4fc8:	0b05201d 	bleq	14d044 <__ccfg+0x12d09c>
    4fcc:	20050520 	andcs	r0, r5, r0, lsr #10
    4fd0:	24060305 	strcs	r0, [r6], #-773	; 0xfffffcfb
    4fd4:	3002052f 	andcc	r0, r2, pc, lsr #10
    4fd8:	13060605 	movwne	r0, #26117	; 0x6605
    4fdc:	061f0205 	ldreq	r0, [pc], -r5, lsl #4
    4fe0:	0606052f 	streq	r0, [r6], -pc, lsr #10
    4fe4:	06020501 	streq	r0, [r2], -r1, lsl #10
    4fe8:	16010130 			; <UNDEFINED> instruction: 0x16010130
    4fec:	06050583 	streq	r0, [r5], -r3, lsl #11
    4ff0:	06030501 	streq	r0, [r3], -r1, lsl #10
    4ff4:	0606053d 			; <UNDEFINED> instruction: 0x0606053d
    4ff8:	06040501 	streq	r0, [r4], -r1, lsl #10
    4ffc:	0607052f 	streq	r0, [r7], -pc, lsr #10
    5000:	21040501 	tstcs	r4, r1, lsl #10
    5004:	051f0705 	ldreq	r0, [pc, #-1797]	; 4907 <__exidx_end+0x1b0f>
    5008:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    500c:	07053103 	streq	r3, [r5, -r3, lsl #2]
    5010:	06050106 	streq	r0, [r5], -r6, lsl #2
    5014:	06040520 	streq	r0, [r4], -r0, lsr #10
    5018:	3e02053e 	mcrcc	5, 0, r0, cr2, cr14, {1}
    501c:	01060605 	tsteq	r6, r5, lsl #12
    5020:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5024:	03052e13 	movweq	r2, #24083	; 0x5e13
    5028:	08052f06 	stmdaeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    502c:	03050106 	movweq	r0, #20742	; 0x5106
    5030:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    5034:	03050106 	movweq	r0, #20742	; 0x5106
    5038:	02052f06 	andeq	r2, r5, #6, 30
    503c:	06060531 			; <UNDEFINED> instruction: 0x06060531
    5040:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    5044:	21060305 	tstcs	r6, r5, lsl #6
    5048:	01060605 	tsteq	r6, r5, lsl #12
    504c:	03051f21 	movweq	r1, #24353	; 0x5f21
    5050:	06052f06 	streq	r2, [r5], -r6, lsl #30
    5054:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5058:	91402306 	cmpls	r0, r6, lsl #6
    505c:	01060605 	tsteq	r6, r5, lsl #12
    5060:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    5064:	01060c05 	tsteq	r6, r5, lsl #24
    5068:	053c1105 	ldreq	r1, [ip, #-261]!	; 0xfffffefb
    506c:	02052107 	andeq	r2, r5, #-1073741823	; 0xc0000001
    5070:	05054b06 	streq	r4, [r5, #-2822]	; 0xfffff4fa
    5074:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5078:	0a052406 	beq	14e098 <__ccfg+0x12e0f0>
    507c:	06050106 	streq	r0, [r5], -r6, lsl #2
    5080:	1f0a059f 	svcne	0x000a059f
    5084:	21060205 	tstcs	r6, r5, lsl #4
    5088:	01060605 	tsteq	r6, r5, lsl #12
    508c:	2f060205 	svccs	0x00060205
    5090:	01060505 	tsteq	r6, r5, lsl #10
    5094:	21060305 	tstcs	r6, r5, lsl #6
    5098:	01060d05 	tsteq	r6, r5, lsl #26
    509c:	2f060305 	svccs	0x00060305
    50a0:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    50a4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50a8:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    50ac:	05220601 	streq	r0, [r2, #-1537]!	; 0xfffff9ff
    50b0:	01053a02 	tsteq	r5, r2, lsl #20
    50b4:	0d023006 	stceq	0, cr3, [r2, #-24]	; 0xffffffe8
    50b8:	bd010100 	stflts	f0, [r1, #-0]
    50bc:	03000003 	movweq	r0, #3
    50c0:	00013a00 	andeq	r3, r1, r0, lsl #20
    50c4:	fb010200 	blx	458ce <__ccfg+0x25926>
    50c8:	01000d0e 	tsteq	r0, lr, lsl #26
    50cc:	00010101 	andeq	r0, r1, r1, lsl #2
    50d0:	00010000 	andeq	r0, r1, r0
    50d4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    50d8:	2f656d6f 	svccs	0x00656d6f
    50dc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    50e0:	442f6e69 	strtmi	r6, [pc], #-3689	; 50e8 <__exidx_end+0x22f0>
    50e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    50e8:	4f2f706f 	svcmi	0x002f706f
    50ec:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    50f0:	502f5445 	eorpl	r5, pc, r5, asr #8
    50f4:	534f4349 	movtpl	r4, #62281	; 0xf349
    50f8:	6369502f 	cmnvs	r9, #47	; 0x2f
    50fc:	502f534f 	eorpl	r5, pc, pc, asr #6
    5100:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5104:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    5108:	006c6169 	rsbeq	r6, ip, r9, ror #2
    510c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    5110:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5114:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5118:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    511c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5120:	61652d65 	cmnvs	r5, r5, ror #26
    5124:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5128:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    512c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    5130:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5134:	6f682f00 	svcvs	0x00682f00
    5138:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4f8c <__exidx_end+0x2194>
    513c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5140:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5144:	6f746b73 	svcvs	0x00746b73
    5148:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    514c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5150:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5154:	2f534f43 	svccs	0x00534f43
    5158:	4f636950 	svcmi	0x00636950
    515c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    5160:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5164:	6f682f00 	svcvs	0x00682f00
    5168:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4fbc <__exidx_end+0x21c4>
    516c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    5170:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5174:	6f746b73 	svcvs	0x00746b73
    5178:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    517c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    5180:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5184:	2f534f43 	svccs	0x00534f43
    5188:	4f636950 	svcmi	0x00636950
    518c:	76000053 			; <UNDEFINED> instruction: 0x76000053
    5190:	6d726f66 	ldclvs	15, cr6, [r2, #-408]!	; 0xfffffe68
    5194:	0100632e 	tsteq	r0, lr, lsr #6
    5198:	74730000 	ldrbtvc	r0, [r3], #-0
    519c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    51a0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    51a4:	74730000 	ldrbtvc	r0, [r3], #-0
    51a8:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    51ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    51b0:	72610000 	rsbvc	r0, r1, #0
    51b4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    51b8:	00000300 	andeq	r0, r0, r0, lsl #6
    51bc:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    51c0:	0300682e 	movweq	r6, #2094	; 0x82e
    51c4:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    51c8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    51cc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    51d0:	00000300 	andeq	r0, r0, r0, lsl #6
    51d4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    51d8:	5f736e6f 	svcpl	0x00736e6f
    51dc:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    51e0:	00030068 	andeq	r0, r3, r8, rrx
    51e4:	73797300 	cmnvc	r9, #0, 6
    51e8:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    51ec:	00000400 	andeq	r0, r0, r0, lsl #8
    51f0:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    51f4:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    51f8:	00003e6e 	andeq	r3, r0, lr, ror #28
    51fc:	05000000 	streq	r0, [r0, #-0]
    5200:	02050015 	andeq	r0, r5, #21
    5204:	000019cc 	andeq	r1, r0, ip, asr #19
    5208:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    520c:	06051303 	streq	r1, [r5], -r3, lsl #6
    5210:	0b050106 	bleq	145630 <__ccfg+0x125688>
    5214:	06040558 			; <UNDEFINED> instruction: 0x06040558
    5218:	060e053e 			; <UNDEFINED> instruction: 0x060e053e
    521c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5220:	06040530 			; <UNDEFINED> instruction: 0x06040530
    5224:	59020501 	stmdbpl	r2, {r0, r8, sl}
    5228:	01000102 	tsteq	r0, r2, lsl #2
    522c:	00430501 	subeq	r0, r3, r1, lsl #10
    5230:	19ec0205 	stmibne	ip!, {r0, r2, r9}^
    5234:	06190000 	ldreq	r0, [r9], -r0
    5238:	2006052e 	andcs	r0, r6, lr, lsr #10
    523c:	1d030405 	cfstrsne	mvf0, [r3, #-20]	; 0xffffffec
    5240:	0305052e 	movweq	r0, #21806	; 0x552e
    5244:	07052028 	streq	r2, [r5, -r8, lsr #32]
    5248:	05207103 	streq	r7, [r0, #-259]!	; 0xfffffefd
    524c:	204a0306 	subcs	r0, sl, r6, lsl #6
    5250:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    5254:	03051413 	movweq	r1, #21523	; 0x5413
    5258:	03020518 	movweq	r0, #9496	; 0x2518
    525c:	04050112 	streq	r0, [r5], #-274	; 0xfffffeee
    5260:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    5264:	03053006 	movweq	r3, #20486	; 0x5006
    5268:	06050514 			; <UNDEFINED> instruction: 0x06050514
    526c:	06030501 	streq	r0, [r3], -r1, lsl #10
    5270:	06060530 			; <UNDEFINED> instruction: 0x06060530
    5274:	06040501 	streq	r0, [r4], -r1, lsl #10
    5278:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    527c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    5280:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
    5284:	05052d07 	streq	r2, [r5, #-3335]	; 0xfffff2f9
    5288:	053d3d06 	ldreq	r3, [sp, #-3334]!	; 0xfffff2fa
    528c:	00da0304 	sbcseq	r0, sl, r4, lsl #6
    5290:	07055901 	streq	r5, [r5, -r1, lsl #18]
    5294:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    5298:	7fa70306 	svcvc	0x00a70306
    529c:	0605054a 	streq	r0, [r5], -sl, asr #10
    52a0:	2000c203 	andcs	ip, r0, r3, lsl #4
    52a4:	12052f06 	andne	r2, r5, #6, 30
    52a8:	03051006 	movweq	r1, #20486	; 0x5006
    52ac:	2e430306 	cdpcs	3, 4, cr0, cr3, cr6, {0}
    52b0:	01060605 	tsteq	r6, r5, lsl #12
    52b4:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    52b8:	01060605 	tsteq	r6, r5, lsl #12
    52bc:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    52c0:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    52c4:	00c90305 	sbceq	r0, r9, r5, lsl #6
    52c8:	055959e4 	ldrbeq	r5, [r9, #-2532]	; 0xfffff61c
    52cc:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    52d0:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    52d4:	060c053c 			; <UNDEFINED> instruction: 0x060c053c
    52d8:	31010501 	tstcc	r1, r1, lsl #10
    52dc:	a9030405 	stmdbge	r3, {r0, r2, sl}
    52e0:	05053c7f 	streq	r3, [r5, #-3199]	; 0xfffff381
    52e4:	0f056806 	svceq	0x00056806
    52e8:	13050501 	movwne	r0, #21761	; 0x5501
    52ec:	13060c05 	movwne	r0, #27653	; 0x6c05
    52f0:	052d1205 	streq	r1, [sp, #-517]!	; 0xfffffdfb
    52f4:	052f0605 	streq	r0, [pc, #-1541]!	; 4cf7 <__exidx_end+0x1eff>
    52f8:	0514060e 	ldreq	r0, [r4, #-1550]	; 0xfffff9f2
    52fc:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    5300:	0513060e 	ldreq	r0, [r3, #-1550]	; 0xfffff9f2
    5304:	06052e14 			; <UNDEFINED> instruction: 0x06052e14
    5308:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    530c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5310:	05390614 	ldreq	r0, [r9, #-1556]!	; 0xfffff9ec
    5314:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    5318:	052e0612 	streq	r0, [lr, #-1554]!	; 0xfffff9ee
    531c:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5320:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    5324:	12051320 	andne	r1, r5, #32, 6	; 0x80000000
    5328:	08050106 	stmdaeq	r5, {r1, r2, r8}
    532c:	2d09052f 	cfstr32cs	mvfx0, [r9, #-188]	; 0xffffff44
    5330:	2f060505 	svccs	0x00060505
    5334:	01060805 	tsteq	r6, r5, lsl #16
    5338:	05201205 	streq	r1, [r0, #-517]!	; 0xfffffdfb
    533c:	59300606 	ldmdbpl	r0!, {r1, r2, r9, sl}
    5340:	01060a05 	tsteq	r6, r5, lsl #20
    5344:	4c060505 	cfstr32mi	mvfx0, [r6], {5}
    5348:	03060c05 	movweq	r0, #27653	; 0x6c05
    534c:	0505016f 	streq	r0, [r5, #-367]	; 0xfffffe91
    5350:	06201103 	strteq	r1, [r0], -r3, lsl #2
    5354:	062e012e 	strteq	r0, [lr], -lr, lsr #2
    5358:	014a063c 	cmpeq	sl, ip, lsr r6
    535c:	20208274 	eorcs	r8, r0, r4, ror r2
    5360:	252e204a 	strcs	r2, [lr, #-74]!	; 0xffffffb6
    5364:	01060705 	tsteq	r6, r5, lsl #14
    5368:	21060505 	tstcs	r6, r5, lsl #10
    536c:	01060805 	tsteq	r6, r5, lsl #16
    5370:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    5374:	13300606 	teqne	r0, #6291456	; 0x600000
    5378:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    537c:	051f0a05 	ldreq	r0, [pc, #-2565]	; 497f <__exidx_end+0x1b87>
    5380:	06052d08 	streq	r2, [r5], -r8, lsl #26
    5384:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    5388:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    538c:	07052013 	smladeq	r5, r3, r0, r2
    5390:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
    5394:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5398:	05300606 	ldreq	r0, [r0, #-1542]!	; 0xfffff9fa
    539c:	6f030605 	svcvs	0x00030605
    53a0:	03060501 	movweq	r0, #25857	; 0x6501
    53a4:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    53a8:	3c062e01 	stccc	14, cr2, [r6], {1}
    53ac:	66014a06 	strvs	r4, [r1], -r6, lsl #20
    53b0:	582e0166 	stmdapl	lr!, {r1, r2, r5, r6, r8}
    53b4:	0c052e20 	stceq	14, cr2, [r5], {32}
    53b8:	060f0521 	streq	r0, [pc], -r1, lsr #10
    53bc:	06060501 	streq	r0, [r6], -r1, lsl #10
    53c0:	0513132f 	ldreq	r1, [r3, #-815]	; 0xfffffcd1
    53c4:	0514060d 	ldreq	r0, [r4, #-1549]	; 0xfffff9f3
    53c8:	08052d0a 	stmdaeq	r5, {r1, r3, r8, sl, fp, sp}
    53cc:	0606052d 	streq	r0, [r6], -sp, lsr #10
    53d0:	14070521 	strne	r0, [r7], #-1313	; 0xfffffadf
    53d4:	13060f05 	movwne	r0, #28421	; 0x6f05
    53d8:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
    53dc:	5a062d07 	bpl	190800 <__ccfg+0x170858>
    53e0:	01060a05 	tsteq	r6, r5, lsl #20
    53e4:	47061505 	strmi	r1, [r6, -r5, lsl #10]
    53e8:	01061705 	tsteq	r6, r5, lsl #14
    53ec:	2e061305 	cdpcs	3, 0, cr1, cr6, cr5, {0}
    53f0:	13060705 	movwne	r0, #26373	; 0x6705
    53f4:	26060605 	strcs	r0, [r6], -r5, lsl #12
    53f8:	4f050559 	svcmi	0x00050559
    53fc:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    5400:	05051106 	streq	r1, [r5, #-262]	; 0xfffffefa
    5404:	134f062f 	movtne	r0, #63023	; 0xf62f
    5408:	4a0b0513 	bmi	2c685c <__ccfg+0x2a68b4>
    540c:	01060c05 	tsteq	r6, r5, lsl #24
    5410:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    5414:	4b3d0606 	blmi	f46c34 <__ccfg+0xf26c8c>
    5418:	03060a05 	movweq	r0, #27141	; 0x6a05
    541c:	02207fad 	eoreq	r7, r0, #692	; 0x2b4
    5420:	01010007 	tsteq	r1, r7
    5424:	05003505 	streq	r3, [r0, #-1285]	; 0xfffffafb
    5428:	001c1c02 	andseq	r1, ip, r2, lsl #24
    542c:	01900300 	orrseq	r0, r0, r0, lsl #6
    5430:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    5434:	06350514 			; <UNDEFINED> instruction: 0x06350514
    5438:	05052e0e 	streq	r2, [r5, #-3598]	; 0xfffff1f2
    543c:	06030532 			; <UNDEFINED> instruction: 0x06030532
    5440:	01056730 	tsteq	r5, r0, lsr r7
    5444:	01120306 	tsteq	r2, r6, lsl #6
    5448:	03060205 	movweq	r0, #25093	; 0x6205
    544c:	08053c72 	stmdaeq	r5, {r1, r4, r5, r6, sl, fp, ip, sp}
    5450:	06050106 	streq	r0, [r5], -r6, lsl #2
    5454:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    5458:	0615053f 			; <UNDEFINED> instruction: 0x0615053f
    545c:	3c050501 	cfstr32cc	mvfx0, [r5], {1}
    5460:	40060205 	andmi	r0, r6, r5, lsl #4
    5464:	01060b05 	tsteq	r6, r5, lsl #22
    5468:	05580505 	ldrbeq	r0, [r8, #-1285]	; 0xfffffafb
    546c:	0505200b 	streq	r2, [r5, #-11]
    5470:	06030520 	streq	r0, [r3], -r0, lsr #10
    5474:	02133d22 	andseq	r3, r3, #2176	; 0x880
    5478:	01010002 	tsteq	r1, r2
    547c:	000002c6 	andeq	r0, r0, r6, asr #5
    5480:	013a0003 	teqeq	sl, r3
    5484:	01020000 	mrseq	r0, (UNDEF: 2)
    5488:	000d0efb 	strdeq	r0, [sp], -fp
    548c:	01010101 	tsteq	r1, r1, lsl #2
    5490:	01000000 	mrseq	r0, (UNDEF: 0)
    5494:	2f010000 	svccs	0x00010000
    5498:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    549c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    54a0:	2f6e6974 	svccs	0x006e6974
    54a4:	6b736544 	blvs	1cde9bc <__ccfg+0x1cbea14>
    54a8:	2f706f74 	svccs	0x00706f74
    54ac:	4f534c4f 	svcmi	0x00534c4f
    54b0:	2f54454e 	svccs	0x0054454e
    54b4:	4f434950 	svcmi	0x00434950
    54b8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    54bc:	2f534f63 	svccs	0x00534f63
    54c0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    54c4:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    54c8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    54cc:	73752f00 	cmnvc	r5, #0, 30
    54d0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    54d4:	63672f62 	cmnvs	r7, #392	; 0x188
    54d8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    54dc:	6f6e2d6d 	svcvs	0x006e2d6d
    54e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    54e4:	2f696261 	svccs	0x00696261
    54e8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    54ec:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    54f0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    54f4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    54f8:	2f656d6f 	svccs	0x00656d6f
    54fc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5500:	442f6e69 	strtmi	r6, [pc], #-3689	; 5508 <__exidx_end+0x2710>
    5504:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5508:	4f2f706f 	svcmi	0x002f706f
    550c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5510:	502f5445 	eorpl	r5, pc, r5, asr #8
    5514:	534f4349 	movtpl	r4, #62281	; 0xf349
    5518:	6369502f 	cmnvs	r9, #47	; 0x2f
    551c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    5520:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    5524:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    5528:	2f656d6f 	svccs	0x00656d6f
    552c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    5530:	442f6e69 	strtmi	r6, [pc], #-3689	; 5538 <__exidx_end+0x2740>
    5534:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    5538:	4f2f706f 	svcmi	0x002f706f
    553c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    5540:	502f5445 	eorpl	r5, pc, r5, asr #8
    5544:	534f4349 	movtpl	r4, #62281	; 0xf349
    5548:	6369502f 	cmnvs	r9, #47	; 0x2f
    554c:	0000534f 	andeq	r5, r0, pc, asr #6
    5550:	61637376 	smcvs	14134	; 0x3736
    5554:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    5558:	73000001 	movwvc	r0, #1
    555c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5560:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5564:	73000002 	movwvc	r0, #2
    5568:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    556c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    5570:	61000002 	tstvs	r0, r2
    5574:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    5578:	00030068 	andeq	r0, r3, r8, rrx
    557c:	63616d00 	cmnvs	r1, #0, 26
    5580:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5584:	70000003 	andvc	r0, r0, r3
    5588:	5f736e69 	svcpl	0x00736e69
    558c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    5590:	00030068 	andeq	r0, r3, r8, rrx
    5594:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    5598:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    559c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    55a0:	0300682e 	movweq	r6, #2094	; 0x82e
    55a4:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    55a8:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    55ac:	00040068 	andeq	r0, r4, r8, rrx
    55b0:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    55b4:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    55b8:	003e6e69 	eorseq	r6, lr, r9, ror #28
    55bc:	00000000 	andeq	r0, r0, r0
    55c0:	05003a05 	streq	r3, [r0, #-2565]	; 0xfffff5fb
    55c4:	001c6c02 	andseq	r6, ip, r2, lsl #24
    55c8:	02051900 	andeq	r1, r5, #0, 18
    55cc:	013a0314 	teqeq	sl, r4, lsl r3
    55d0:	01060505 	tsteq	r6, r5, lsl #10
    55d4:	44033a05 	strmi	r3, [r3], #-2565	; 0xfffff5fb
    55d8:	03050520 	movweq	r0, #21792	; 0x5520
    55dc:	12052e3c 	andne	r2, r5, #60, 28	; 0x3c0
    55e0:	4005053c 	andmi	r0, r5, ip, lsr r5
    55e4:	0e031605 	cfmadd32eq	mvax0, mvfx1, mvfx3, mvfx5
    55e8:	030b0520 	movweq	r0, #46368	; 0xb520
    55ec:	08052e11 	stmdaeq	r5, {r0, r4, r9, sl, fp, sp}
    55f0:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    55f4:	01060905 	tsteq	r6, r5, lsl #18
    55f8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    55fc:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5600:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5604:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    5608:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    560c:	0305200f 	movweq	r2, #20495	; 0x500f
    5610:	03010520 	movweq	r0, #5408	; 0x1520
    5614:	0305ac2e 	movweq	sl, #23598	; 0x5c2e
    5618:	053c5203 	ldreq	r5, [ip, #-515]!	; 0xfffffdfd
    561c:	741b030b 	ldrvc	r0, [fp], #-779	; 0xfffffcf5
    5620:	2e060a05 	vmlacs.f32	s0, s12, s10
    5624:	01060b05 	tsteq	r6, r5, lsl #22
    5628:	ad060405 	cfstrsge	mvf0, [r6, #-20]	; 0xffffffec
    562c:	01060705 	tsteq	r6, r5, lsl #14
    5630:	30060405 	andcc	r0, r6, r5, lsl #8
    5634:	15060705 	strne	r0, [r6, #-1797]	; 0xfffff8fb
    5638:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    563c:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    5640:	05142f06 	ldreq	r2, [r4, #-3846]	; 0xfffff0fa
    5644:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    5648:	052f060b 	streq	r0, [pc, #-1547]!	; 5045 <__exidx_end+0x224d>
    564c:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    5650:	1c05660c 	stcne	6, cr6, [r5], {12}
    5654:	2e2b052e 	cfsh64cs	mvdx0, mvdx11, #30
    5658:	054e0b05 	strbeq	r0, [lr, #-2821]	; 0xfffff4fb
    565c:	053c060a 	ldreq	r0, [ip, #-1546]!	; 0xfffff9f6
    5660:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5664:	05830604 	streq	r0, [r3, #1540]	; 0x604
    5668:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
    566c:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    5670:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5674:	052f0604 	streq	r0, [pc, #-1540]!	; 5078 <__exidx_end+0x2280>
    5678:	20590311 	subscs	r0, r9, r1, lsl r3
    567c:	2e66063c 	mcrcs	6, 3, r0, cr6, cr12, {1}
    5680:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    5684:	3c66063c 	stclcc	6, cr0, [r6], #-240	; 0xffffff10
    5688:	01062001 	tsteq	r6, r1
    568c:	3c743c06 	ldclcc	12, cr3, [r4], #-24	; 0xffffffe8
    5690:	3c064a06 			; <UNDEFINED> instruction: 0x3c064a06
    5694:	902e2174 	eorls	r2, lr, r4, ror r1
    5698:	062e013c 			; <UNDEFINED> instruction: 0x062e013c
    569c:	822e0601 	eorhi	r0, lr, #1048576	; 0x100000
    56a0:	064a2190 			; <UNDEFINED> instruction: 0x064a2190
    56a4:	3c580690 	mrrccc	6, 9, r0, r8, cr0
    56a8:	06012e01 	streq	r2, [r1], -r1, lsl #28
    56ac:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    56b0:	3c066682 	stccc	6, cr6, [r6], {130}	; 0x82
    56b4:	053c3c3c 	ldreq	r3, [ip, #-3132]!	; 0xfffff3c4
    56b8:	0c057704 	stceq	7, cr7, [r5], {4}
    56bc:	10050106 	andne	r0, r5, r6, lsl #2
    56c0:	06160520 	ldreq	r0, [r6], -r0, lsr #10
    56c4:	2e6606ae 	cdpcs	6, 6, cr0, cr6, cr14, {5}
    56c8:	062e2e06 	strteq	r2, [lr], -r6, lsl #28
    56cc:	3c3c063c 	ldccc	6, cr0, [ip], #-240	; 0xffffff10
    56d0:	01062e01 	tsteq	r6, r1, lsl #28
    56d4:	3c823c06 	stccc	12, cr3, [r2], {6}
    56d8:	06900692 			; <UNDEFINED> instruction: 0x06900692
    56dc:	2e013c58 	mcrcs	12, 0, r3, cr1, cr8, {2}
    56e0:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    56e4:	6674063c 			; <UNDEFINED> instruction: 0x6674063c
    56e8:	3c3c3c06 	ldccc	12, cr3, [ip], #-24	; 0xffffffe8
    56ec:	3c06723c 	sfmcc	f7, 4, [r6], {60}	; 0x3c
    56f0:	21742e06 	cmncs	r4, r6, lsl #28
    56f4:	013c903c 	teqeq	ip, ip, lsr r0
    56f8:	0601062e 	streq	r0, [r1], -lr, lsr #12
    56fc:	2174902e 	cmncs	r4, lr, lsr #32
    5700:	144f0405 	strbne	r0, [pc], #-1029	; 5708 <__exidx_end+0x2910>
    5704:	01060b05 	tsteq	r6, r5, lsl #22
    5708:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    570c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    5710:	05130608 	ldreq	r0, [r3, #-1544]	; 0xfffff9f8
    5714:	04052d06 	streq	r2, [r5], #-3334	; 0xfffff2fa
    5718:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    571c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5720:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    5724:	0524060b 	streq	r0, [r4, #-1547]!	; 0xfffff9f5
    5728:	09030607 	stmdbeq	r3, {r0, r1, r2, r9, sl}
    572c:	060e0574 			; <UNDEFINED> instruction: 0x060e0574
    5730:	3e0b0501 	cfsh32cc	mvfx0, mvfx11, #1
    5734:	54030a05 	strpl	r0, [r3], #-2565	; 0xfffff5fb
    5738:	03110566 	tsteq	r1, #427819008	; 0x19800000
    573c:	16054a0a 	strne	r4, [r5], -sl, lsl #20
    5740:	00050251 	andeq	r0, r5, r1, asr r2
    5744:	01670101 	cmneq	r7, r1, lsl #2
    5748:	00020000 	andeq	r0, r2, r0
    574c:	00000147 	andeq	r0, r0, r7, asr #2
    5750:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5754:	0101000d 	tsteq	r1, sp
    5758:	00000101 	andeq	r0, r0, r1, lsl #2
    575c:	00000100 	andeq	r0, r0, r0, lsl #2
    5760:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5764:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5768:	2f2e2e2f 	svccs	0x002e2e2f
    576c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5770:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5774:	3a630062 	bcc	18c5904 <__ccfg+0x18a595c>
    5778:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    577c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5780:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5784:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5788:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    578c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5790:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5794:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5798:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    579c:	6f6f745c 	svcvs	0x006f745c
    57a0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    57a4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    57a8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    57ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    57b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    57b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    57b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    57bc:	5f342d69 	svcpl	0x00342d69
    57c0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    57c4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    57c8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    57cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    57d0:	61652d65 	cmnvs	r5, r5, ror #26
    57d4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    57d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    57dc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    57e0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    57e4:	6300656e 	movwvs	r6, #1390	; 0x56e
    57e8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    57ec:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    57f0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    57f4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    57f8:	5f393130 	svcpl	0x00393130
    57fc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5800:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5804:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5808:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    580c:	6f745c36 	svcvs	0x00745c36
    5810:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5814:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5818:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    581c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5820:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5824:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5828:	61652d65 	cmnvs	r5, r5, ror #26
    582c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5830:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5834:	71353130 	teqvc	r5, r0, lsr r1
    5838:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    583c:	6f6e2d6d 	svcvs	0x006e2d6d
    5840:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5844:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5848:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    584c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5850:	00737973 	rsbseq	r7, r3, r3, ror r9
    5854:	6e6f6100 	powvse	f6, f7, f0
    5858:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    585c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    5860:	00010063 	andeq	r0, r1, r3, rrx
    5864:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5868:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    586c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5870:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5874:	00020068 	andeq	r0, r2, r8, rrx
    5878:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    587c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5880:	0300682e 	movweq	r6, #2094	; 0x82e
    5884:	6f610000 	svcvs	0x00610000
    5888:	61625f6e 	cmnvs	r2, lr, ror #30
    588c:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    5890:	0100682e 	tsteq	r0, lr, lsr #16
    5894:	00000000 	andeq	r0, r0, r0
    5898:	1ffc0205 	svcne	0x00fc0205
    589c:	3c030000 	stccc	0, cr0, [r3], {-0}
    58a0:	2f361a01 	svccs	0x00361a01
    58a4:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    58a8:	3d4c2e09 	stclcc	14, cr2, [ip, #-36]	; 0xffffffdc
    58ac:	01000902 	tsteq	r0, r2, lsl #18
    58b0:	0001a901 	andeq	sl, r1, r1, lsl #18
    58b4:	41000200 	mrsmi	r0, R8_usr
    58b8:	02000001 	andeq	r0, r0, #1
    58bc:	0d0efb01 	vstreq	d15, [lr, #-4]
    58c0:	01010100 	mrseq	r0, (UNDEF: 17)
    58c4:	00000001 	andeq	r0, r0, r1
    58c8:	01000001 	tsteq	r0, r1
    58cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    58d0:	2f2e2e2f 	svccs	0x002e2e2f
    58d4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 58dc <__exidx_end+0x2ae4>
    58d8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    58dc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    58e0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    58e4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    58e8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    58ec:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    58f0:	31303030 	teqcc	r0, r0, lsr r0
    58f4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    58f8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    58fc:	61746562 	cmnvs	r4, r2, ror #10
    5900:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5904:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5908:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5740 <__exidx_end+0x2948>
    590c:	6f635c73 	svcvs	0x00635c73
    5910:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5914:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5918:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    591c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5920:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5924:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5928:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    592c:	3130322d 	teqcc	r0, sp, lsr #4
    5930:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5934:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5938:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    593c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5940:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5944:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5948:	616d5c65 	cmnvs	sp, r5, ror #24
    594c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5950:	3a630065 	bcc	18c5aec <__ccfg+0x18a5b44>
    5954:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5958:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    595c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5960:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5964:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5968:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    596c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5970:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5974:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5978:	6f6f745c 	svcvs	0x006f745c
    597c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5980:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5984:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5988:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    598c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5990:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5994:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5998:	5f342d69 	svcpl	0x00342d69
    599c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    59a0:	33713531 	cmncc	r1, #205520896	; 0xc400000
    59a4:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    59a8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    59ac:	61652d65 	cmnvs	r5, r5, ror #26
    59b0:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    59b4:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    59b8:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    59bc:	00007379 	andeq	r7, r0, r9, ror r3
    59c0:	5f6e6f61 	svcpl	0x006e6f61
    59c4:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    59c8:	00010063 	andeq	r0, r1, r3, rrx
    59cc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    59d0:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    59d4:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    59d8:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    59dc:	00020068 	andeq	r0, r2, r8, rrx
    59e0:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    59e4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    59e8:	0300682e 	movweq	r6, #2094	; 0x82e
    59ec:	6f610000 	svcvs	0x00610000
    59f0:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    59f4:	00682e63 	rsbeq	r2, r8, r3, ror #28
    59f8:	00000001 	andeq	r0, r0, r1
    59fc:	00020500 	andeq	r0, r2, r0, lsl #10
    5a00:	03000000 	movweq	r0, #0
    5a04:	0200013e 	andeq	r0, r0, #-2147483633	; 0x8000000f
    5a08:	0a030104 	beq	c5e20 <__ccfg+0xa5e78>
    5a0c:	04020001 	streq	r0, [r2], #-1
    5a10:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5a14:	001f0104 	andseq	r0, pc, r4, lsl #2
    5a18:	21010402 	tstcs	r1, r2, lsl #8
    5a1c:	01040200 	mrseq	r0, R12_usr
    5a20:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a24:	21302101 	teqcs	r0, r1, lsl #2
    5a28:	01000802 	tsteq	r0, r2, lsl #16
    5a2c:	02050001 	andeq	r0, r5, #1
    5a30:	0000202c 	andeq	r2, r0, ip, lsr #32
    5a34:	0100d703 	tsteq	r0, r3, lsl #14
    5a38:	01040200 	mrseq	r0, R12_usr
    5a3c:	00010c03 	andeq	r0, r1, r3, lsl #24
    5a40:	21010402 	tstcs	r1, r2, lsl #8
    5a44:	01040200 	mrseq	r0, R12_usr
    5a48:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    5a4c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5a50:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a54:	21010402 	tstcs	r1, r2, lsl #8
    5a58:	00050231 	andeq	r0, r5, r1, lsr r2
    5a5c:	019c0101 	orrseq	r0, ip, r1, lsl #2
    5a60:	00020000 	andeq	r0, r2, r0
    5a64:	00000139 	andeq	r0, r0, r9, lsr r1
    5a68:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5a6c:	0101000d 	tsteq	r1, sp
    5a70:	00000101 	andeq	r0, r0, r1, lsl #2
    5a74:	00000100 	andeq	r0, r0, r0, lsl #2
    5a78:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5a7c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5a80:	2f2e2e2f 	svccs	0x002e2e2f
    5a84:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5a88:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5a8c:	3a630062 	bcc	18c5c1c <__ccfg+0x18a5c74>
    5a90:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5a94:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5a98:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5a9c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5aa0:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5aa4:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5aa8:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5aac:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5ab0:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5ab4:	6f6f745c 	svcvs	0x006f745c
    5ab8:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5abc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5ac0:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5ac4:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5ac8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5acc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ad0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5ad4:	5f342d69 	svcpl	0x00342d69
    5ad8:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5adc:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5ae0:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ae4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ae8:	61652d65 	cmnvs	r5, r5, ror #26
    5aec:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5af0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5af4:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5af8:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5afc:	6300656e 	movwvs	r6, #1390	; 0x56e
    5b00:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5b04:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5b08:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5b0c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5b10:	5f393130 	svcpl	0x00393130
    5b14:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5b18:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5b1c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5b20:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5b24:	6f745c36 	svcvs	0x00745c36
    5b28:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5b2c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5b30:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5b34:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5b38:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5b3c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5b40:	61652d65 	cmnvs	r5, r5, ror #26
    5b44:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5b48:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5b4c:	71353130 	teqvc	r5, r0, lsr r1
    5b50:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5b54:	6f6e2d6d 	svcvs	0x006e2d6d
    5b58:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5b5c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5b60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5b64:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5b68:	00737973 	rsbseq	r7, r3, r3, ror r9
    5b6c:	75706300 	ldrbvc	r6, [r0, #-768]!	; 0xfffffd00
    5b70:	0100632e 	tsteq	r0, lr, lsr #6
    5b74:	645f0000 	ldrbvs	r0, [pc], #-0	; 5b7c <__exidx_end+0x2d84>
    5b78:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5b7c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5b84 <__exidx_end+0x2d8c>
    5b80:	73657079 	cmnvc	r5, #121	; 0x79
    5b84:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5b88:	735f0000 	cmpvc	pc, #0
    5b8c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5b90:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5b94:	63000003 	movwvs	r0, #3
    5b98:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    5b9c:	00000100 	andeq	r0, r0, r0, lsl #2
    5ba0:	02050000 	andeq	r0, r5, #0
    5ba4:	00002044 	andeq	r2, r0, r4, asr #32
    5ba8:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
    5bac:	02011203 	andeq	r1, r1, #805306368	; 0x30000000
    5bb0:	01010004 	tsteq	r1, r4
    5bb4:	00020500 	andeq	r0, r2, r0, lsl #10
    5bb8:	03000000 	movweq	r0, #0
    5bbc:	030101c0 	movweq	r0, #4544	; 0x11c0
    5bc0:	03020111 	movweq	r0, #8465	; 0x2111
    5bc4:	00010100 	andeq	r0, r1, r0, lsl #2
    5bc8:	204c0205 	subcs	r0, ip, r5, lsl #4
    5bcc:	8d030000 	stchi	0, cr0, [r3, #-0]
    5bd0:	12030102 	andne	r0, r3, #-2147483648	; 0x80000000
    5bd4:	00040201 	andeq	r0, r4, r1, lsl #4
    5bd8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5bdc:	00000002 	andeq	r0, r0, r2
    5be0:	02d80300 	sbcseq	r0, r8, #0, 6
    5be4:	01110301 	tsteq	r1, r1, lsl #6
    5be8:	01000302 	tsteq	r0, r2, lsl #6
    5bec:	02050001 	andeq	r0, r5, #1
    5bf0:	00000000 	andeq	r0, r0, r0
    5bf4:	01039e03 	tsteq	r3, r3, lsl #28
    5bf8:	00040216 	andeq	r0, r4, r6, lsl r2
    5bfc:	01e90101 	mvneq	r0, r1, lsl #2
    5c00:	00020000 	andeq	r0, r2, r0
    5c04:	00000167 	andeq	r0, r0, r7, ror #2
    5c08:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5c0c:	0101000d 	tsteq	r1, sp
    5c10:	00000101 	andeq	r0, r0, r1, lsl #2
    5c14:	00000100 	andeq	r0, r0, r0, lsl #2
    5c18:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5c1c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c20:	2f2e2e2f 	svccs	0x002e2e2f
    5c24:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5c28:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5c2c:	3a630062 	bcc	18c5dbc <__ccfg+0x18a5e14>
    5c30:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5c34:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5c38:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5c3c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5c40:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5c44:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5c48:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5c4c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5c50:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5c54:	6f6f745c 	svcvs	0x006f745c
    5c58:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5c5c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5c60:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5c64:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5c68:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5c6c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5c70:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5c74:	5f342d69 	svcpl	0x00342d69
    5c78:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5c7c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5c80:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5c84:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5c88:	61652d65 	cmnvs	r5, r5, ror #26
    5c8c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5c90:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5c94:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5c98:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5c9c:	6300656e 	movwvs	r6, #1390	; 0x56e
    5ca0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5ca4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5ca8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5cac:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5cb0:	5f393130 	svcpl	0x00393130
    5cb4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5cb8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5cbc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5cc0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5cc4:	6f745c36 	svcvs	0x00745c36
    5cc8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5ccc:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5cd0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5cd4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5cd8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5cdc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ce0:	61652d65 	cmnvs	r5, r5, ror #26
    5ce4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5ce8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5cec:	71353130 	teqvc	r5, r0, lsr r1
    5cf0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5cf4:	6f6e2d6d 	svcvs	0x006e2d6d
    5cf8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5cfc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5d00:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5d04:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5d08:	00737973 	rsbseq	r7, r3, r3, ror r9
    5d0c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5d10:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
    5d14:	00000100 	andeq	r0, r0, r0, lsl #2
    5d18:	5f6e6f61 	svcpl	0x006e6f61
    5d1c:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
    5d20:	00010068 	andeq	r0, r1, r8, rrx
    5d24:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5d28:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5d2c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5d30:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5d34:	00020068 	andeq	r0, r2, r8, rrx
    5d38:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5d3c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5d40:	0300682e 	movweq	r6, #2094	; 0x82e
    5d44:	65730000 	ldrbvs	r0, [r3, #-0]!
    5d48:	5f707574 	svcpl	0x00707574
    5d4c:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    5d50:	00010068 	andeq	r0, r1, r8, rrx
    5d54:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    5d58:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    5d5c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5d60:	73000001 	movwvc	r0, #1
    5d64:	70757465 	rsbsvc	r7, r5, r5, ror #8
    5d68:	0100682e 	tsteq	r0, lr, lsr #16
    5d6c:	00000000 	andeq	r0, r0, r0
    5d70:	20540205 	subscs	r0, r4, r5, lsl #4
    5d74:	8d030000 	stchi	0, cr0, [r3, #-0]
    5d78:	03200102 			; <UNDEFINED> instruction: 0x03200102
    5d7c:	0200200a 	andeq	r2, r0, #10
    5d80:	4f410104 	svcmi	0x00410104
    5d84:	212d4342 			; <UNDEFINED> instruction: 0x212d4342
    5d88:	0302041f 	movweq	r0, #9247	; 0x241f
    5d8c:	04660487 	strbteq	r0, [r6], #-1159	; 0xfffffb79
    5d90:	7c860301 	stcvc	3, cr0, [r6], {1}
    5d94:	0342363c 	movteq	r3, #9788	; 0x263c
    5d98:	3d2d4a09 	vpushcc	{s8-s16}
    5d9c:	2f1f2f2f 	svccs	0x001f2f2f
    5da0:	3123212f 			; <UNDEFINED> instruction: 0x3123212f
    5da4:	0a032548 	beq	cf2cc <__ccfg+0xaf324>
    5da8:	3f5d4158 	svccc	0x005d4158
    5dac:	01001e02 	tsteq	r0, r2, lsl #28
    5db0:	02050001 	andeq	r0, r5, #1
    5db4:	00002128 	andeq	r2, r0, r8, lsr #2
    5db8:	0100f003 	tsteq	r0, r3	; <UNPREDICTABLE>
    5dbc:	33433028 	movtcc	r3, #12328	; 0x3028
    5dc0:	3c090341 	stccc	3, cr0, [r9], {65}	; 0x41
    5dc4:	2e0b0333 	mcrcs	3, 0, r0, cr11, cr3, {1}
    5dc8:	273c0e03 	ldrcs	r0, [ip, -r3, lsl #28]!
    5dcc:	03207903 			; <UNDEFINED> instruction: 0x03207903
    5dd0:	09032015 	stmdbeq	r3, {r0, r2, r4, sp}
    5dd4:	4967422e 	stmdbmi	r7!, {r1, r2, r3, r5, r9, lr}^
    5dd8:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
    5ddc:	4b69242d 	blmi	1a4ee98 <__ccfg+0x1a2eef0>
    5de0:	01040200 	mrseq	r0, R12_usr
    5de4:	13024d27 	movwne	r4, #11559	; 0x2d27
    5de8:	57010100 	strpl	r0, [r1, -r0, lsl #2]
    5dec:	02000004 	andeq	r0, r0, #4
    5df0:	00016500 	andeq	r6, r1, r0, lsl #10
    5df4:	fb010200 	blx	465fe <__ccfg+0x26656>
    5df8:	01000d0e 	tsteq	r0, lr, lsl #26
    5dfc:	00010101 	andeq	r0, r1, r1, lsl #2
    5e00:	00010000 	andeq	r0, r1, r0
    5e04:	2f2e0100 	svccs	0x002e0100
    5e08:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5e0c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e10:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    5e14:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    5e18:	63006269 	movwvs	r6, #617	; 0x269
    5e1c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5e20:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5e24:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5e28:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5e2c:	5f393130 	svcpl	0x00393130
    5e30:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5e34:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5e38:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5e3c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5e40:	6f745c36 	svcvs	0x00745c36
    5e44:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5e48:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5e4c:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5e50:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5e54:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5e58:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5e5c:	61652d65 	cmnvs	r5, r5, ror #26
    5e60:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5e64:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5e68:	71353130 	teqvc	r5, r0, lsr r1
    5e6c:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5e70:	6f6e2d6d 	svcvs	0x006e2d6d
    5e74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5e78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5e7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5e80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5e84:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    5e88:	00656e69 	rsbeq	r6, r5, r9, ror #28
    5e8c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5e90:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5e94:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5e98:	302e302e 	eorcc	r3, lr, lr, lsr #32
    5e9c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5ea0:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5ea4:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5ea8:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    5eac:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5eb0:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5eb4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5eb8:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 5d50 <__exidx_end+0x2f58>
    5ebc:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5ec0:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5ec4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5ec8:	6f6e2d6d 	svcvs	0x006e2d6d
    5ecc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5ed0:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5ed4:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5ed8:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    5edc:	615c3371 	cmpvs	ip, r1, ror r3
    5ee0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5ee4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5ee8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5eec:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5ef0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5ef4:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    5ef8:	65730000 	ldrbvs	r0, [r3, #-0]!
    5efc:	5f707574 	svcpl	0x00707574
    5f00:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    5f04:	00010063 	andeq	r0, r1, r3, rrx
    5f08:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5f0c:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5f10:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5f14:	00000100 	andeq	r0, r0, r0, lsl #2
    5f18:	5f737973 	svcpl	0x00737973
    5f1c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    5f20:	0100682e 	tsteq	r0, lr, lsr #16
    5f24:	645f0000 	ldrbvs	r0, [pc], #-0	; 5f2c <__exidx_end+0x3134>
    5f28:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    5f2c:	745f746c 	ldrbvc	r7, [pc], #-1132	; 5f34 <__exidx_end+0x313c>
    5f30:	73657079 	cmnvc	r5, #121	; 0x79
    5f34:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    5f38:	735f0000 	cmpvc	pc, #0
    5f3c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    5f40:	00682e74 	rsbeq	r2, r8, r4, ror lr
    5f44:	64000003 	strvs	r0, [r0], #-3
    5f48:	682e6964 	stmdavs	lr!, {r2, r5, r6, r8, fp, sp, lr}
    5f4c:	00000100 	andeq	r0, r0, r0, lsl #2
    5f50:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    5f54:	00010068 	andeq	r0, r1, r8, rrx
    5f58:	05000000 	streq	r0, [r0, #-0]
    5f5c:	0021cc02 	eoreq	ip, r1, r2, lsl #24
    5f60:	00ff0300 	rscseq	r0, pc, r0, lsl #6
    5f64:	200b0301 	andcs	r0, fp, r1, lsl #6
    5f68:	032e0e03 			; <UNDEFINED> instruction: 0x032e0e03
    5f6c:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
    5f70:	0302042e 	movweq	r0, #9262	; 0x242e
    5f74:	042000d7 	strteq	r0, [r0], #-215	; 0xffffff29
    5f78:	7fa80301 	svcvc	0x00a80301
    5f7c:	03020420 	movweq	r0, #9248	; 0x2420
    5f80:	2d2e00d9 	stccs	0, cr0, [lr, #-868]!	; 0xfffffc9c
    5f84:	03010421 	movweq	r0, #5153	; 0x1421
    5f88:	302e7fac 	eorcc	r7, lr, ip, lsr #31
    5f8c:	652f214d 	strvs	r2, [pc, #-333]!	; 5e47 <__exidx_end+0x304f>
    5f90:	1e222222 	cdpne	2, 2, cr2, cr2, cr2, {1}
    5f94:	58780322 	ldmdapl	r8!, {r1, r5, r8, r9}^
    5f98:	03200d03 			; <UNDEFINED> instruction: 0x03200d03
    5f9c:	10033c73 	andne	r3, r3, r3, ror ip
    5fa0:	21212120 			; <UNDEFINED> instruction: 0x21212120
    5fa4:	000d0221 	andeq	r0, sp, r1, lsr #4
    5fa8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5fac:	00224802 	eoreq	r4, r2, r2, lsl #16
    5fb0:	01bf0300 			; <UNDEFINED> instruction: 0x01bf0300
    5fb4:	78031a01 	stmdavc	r3, {r0, r9, fp, ip}
    5fb8:	0328204a 			; <UNDEFINED> instruction: 0x0328204a
    5fbc:	7a03200e 	bvc	cdffc <__ccfg+0xae054>
    5fc0:	0e03422e 	cdpeq	2, 0, cr4, cr3, cr14, {1}
    5fc4:	2d31302e 	ldccs	0, cr3, [r1, #-184]!	; 0xffffff48
    5fc8:	02042d43 	andeq	r2, r4, #4288	; 0x10c0
    5fcc:	01042130 	tsteq	r4, r0, lsr r1
    5fd0:	3d2e0b03 	fstmdbxcc	lr!, {d0}	;@ Deprecated
    5fd4:	0323652f 			; <UNDEFINED> instruction: 0x0323652f
    5fd8:	2c4d660c 	mcrrcs	6, 0, r6, sp, cr12
    5fdc:	522d2830 	eorpl	r2, sp, #48, 16	; 0x300000
    5fe0:	0015022d 	andseq	r0, r5, sp, lsr #4
    5fe4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5fe8:	0022f402 	eoreq	pc, r2, r2, lsl #8
    5fec:	049f0300 	ldreq	r0, [pc], #768	; 5ff4 <__exidx_end+0x31fc>
    5ff0:	010c0301 	tsteq	ip, r1, lsl #6
    5ff4:	03200903 			; <UNDEFINED> instruction: 0x03200903
    5ff8:	31212077 			; <UNDEFINED> instruction: 0x31212077
    5ffc:	30302733 	eorscc	r2, r0, r3, lsr r7
    6000:	1d2d2231 	sfmne	f2, 4, [sp, #-196]!	; 0xffffff3c
    6004:	3e3d3135 	mrccc	1, 1, r3, cr13, cr5, {1}
    6008:	1d3b223d 	lfmne	f2, 4, [fp, #-244]!	; 0xffffff0c
    600c:	20760327 	rsbscs	r0, r6, r7, lsr #6
    6010:	022e1203 	eoreq	r1, lr, #805306368	; 0x30000000
    6014:	01010006 	tsteq	r1, r6
    6018:	50020500 	andpl	r0, r2, r0, lsl #10
    601c:	03000023 	movweq	r0, #35	; 0x23
    6020:	180104e5 	stmdane	r1, {r0, r2, r5, r6, r7, sl}
    6024:	20790334 	rsbscs	r0, r9, r4, lsr r3
    6028:	05023336 	streq	r3, [r2, #-822]	; 0xfffffcca
    602c:	00010100 	andeq	r0, r1, r0, lsl #2
    6030:	00000205 	andeq	r0, r0, r5, lsl #4
    6034:	81030000 	mrshi	r0, (UNDEF: 3)
    6038:	33180105 	tstcc	r8, #1073741825	; 0x40000001
    603c:	01000602 	tsteq	r0, r2, lsl #12
    6040:	02050001 	andeq	r0, r5, #1
    6044:	00002368 	andeq	r2, r0, r8, ror #6
    6048:	01059503 	tsteq	r5, r3, lsl #10
    604c:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    6050:	01000602 	tsteq	r0, r2, lsl #12
    6054:	02050001 	andeq	r0, r5, #1
    6058:	00002378 	andeq	r2, r0, r8, ror r3
    605c:	0105b803 	tsteq	r5, r3, lsl #16
    6060:	2e130319 	mrccs	3, 0, r0, cr3, cr9, {0}
    6064:	01000802 	tsteq	r0, r2, lsl #16
    6068:	02050001 	andeq	r0, r5, #1
    606c:	0000238c 	andeq	r2, r0, ip, lsl #7
    6070:	0105db03 	tsteq	r5, r3, lsl #22
    6074:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    6078:	77032009 	strvc	r2, [r3, -r9]
    607c:	20090320 	andcs	r0, r9, r0, lsr #6
    6080:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    6084:	3122322a 			; <UNDEFINED> instruction: 0x3122322a
    6088:	27473230 	smlaldxcs	r3, r7, r0, r2
    608c:	03473230 	movteq	r3, #29232	; 0x7230
    6090:	36372e17 			; <UNDEFINED> instruction: 0x36372e17
    6094:	0802273a 	stmdaeq	r2, {r1, r3, r4, r5, r8, r9, sl, sp}
    6098:	00010100 	andeq	r0, r1, r0, lsl #2
    609c:	23f00205 	mvnscs	r0, #1342177280	; 0x50000000
    60a0:	a9030000 	stmdbge	r3, {}	; <UNPREDICTABLE>
    60a4:	21150106 	tstcs	r5, r6, lsl #2
    60a8:	20090355 	andcs	r0, r9, r5, asr r3
    60ac:	01000302 	tsteq	r0, r2, lsl #6
    60b0:	02050001 	andeq	r0, r5, #1
    60b4:	00002404 	andeq	r2, r0, r4, lsl #8
    60b8:	0106bc03 	tsteq	r6, r3, lsl #24
    60bc:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    60c0:	03022009 	movweq	r2, #8201	; 0x2009
    60c4:	00010100 	andeq	r0, r1, r0, lsl #2
    60c8:	24180205 	ldrcs	r0, [r8], #-517	; 0xfffffdfb
    60cc:	cf030000 	svcgt	0x00030000
    60d0:	21150106 	tstcs	r5, r6, lsl #2
    60d4:	20090355 	andcs	r0, r9, r5, asr r3
    60d8:	01000302 	tsteq	r0, r2, lsl #6
    60dc:	02050001 	andeq	r0, r5, #1
    60e0:	0000242c 	andeq	r2, r0, ip, lsr #8
    60e4:	0106e203 	tsteq	r6, r3, lsl #4
    60e8:	2f432116 	svccs	0x00432116
    60ec:	40207a03 	eormi	r7, r0, r3, lsl #20
    60f0:	71032c35 	tstvc	r3, r5, lsr ip
    60f4:	2e160320 	cdpcs	3, 1, cr0, cr6, cr0, {1}
    60f8:	01000302 	tsteq	r0, r2, lsl #6
    60fc:	02050001 	andeq	r0, r5, #1
    6100:	00002454 	andeq	r2, r0, r4, asr r4
    6104:	01078203 	tsteq	r7, r3, lsl #4
    6108:	06023316 			; <UNDEFINED> instruction: 0x06023316
    610c:	00010100 	andeq	r0, r1, r0, lsl #2
    6110:	24640205 	strbtcs	r0, [r4], #-517	; 0xfffffdfb
    6114:	94030000 	strls	r0, [r3], #-0
    6118:	21160107 	tstcs	r6, r7, lsl #2
    611c:	33342943 	teqcc	r4, #1097728	; 0x10c000
    6120:	35207903 	strcc	r7, [r0, #-2307]!	; 0xfffff6fd
    6124:	2e71031e 	mrccs	3, 3, r0, cr1, cr14, {0}
    6128:	02201603 	eoreq	r1, r0, #3145728	; 0x300000
    612c:	01010005 	tsteq	r1, r5
    6130:	90020500 	andls	r0, r2, r0, lsl #10
    6134:	03000024 	movweq	r0, #36	; 0x24
    6138:	150107b4 	strne	r0, [r1, #-1972]	; 0xfffff84c
    613c:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    6140:	00030220 	andeq	r0, r3, r0, lsr #4
    6144:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6148:	0024a402 	eoreq	sl, r4, r2, lsl #8
    614c:	07c80300 	strbeq	r0, [r8, r0, lsl #6]
    6150:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6154:	02200a03 	eoreq	r0, r0, #12288	; 0x3000
    6158:	01010003 	tsteq	r1, r3
    615c:	b8020500 	stmdalt	r2, {r8, sl}
    6160:	03000024 	movweq	r0, #36	; 0x24
    6164:	200102a7 	andcs	r0, r1, r7, lsr #5
    6168:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
    616c:	2f4e211f 	svccs	0x004e211f
    6170:	ac02d103 	stfged	f5, [r2], {3}
    6174:	207db903 	rsbscs	fp, sp, r3, lsl #18
    6178:	2002c703 	andcs	ip, r2, r3, lsl #14
    617c:	207db903 	rsbscs	fp, sp, r3, lsl #18
    6180:	211f2f5c 	tstcs	pc, ip, asr pc	; <UNPREDICTABLE>
    6184:	211f2f3d 	tstcs	pc, sp, lsr pc	; <UNPREDICTABLE>
    6188:	211f3d3d 	tstcs	pc, sp, lsr sp	; <UNPREDICTABLE>
    618c:	3d6e3d43 	stclcc	13, cr3, [lr, #-268]!	; 0xfffffef4
    6190:	211f3d52 	tstcs	pc, r2, asr sp	; <UNPREDICTABLE>
    6194:	3d3c0903 			; <UNDEFINED> instruction: 0x3d3c0903
    6198:	3d660a03 	vstmdbcc	r6!, {s1-s3}
    619c:	3d660b03 	fstmdbxcc	r6!, {d16}	;@ Deprecated
    61a0:	211f3d7c 	tstcs	pc, ip, ror sp	; <UNPREDICTABLE>
    61a4:	12024b40 	andne	r4, r2, #64, 22	; 0x10000
    61a8:	00010100 	andeq	r0, r1, r0, lsl #2
    61ac:	25c80205 	strbcs	r0, [r8, #517]	; 0x205
    61b0:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    61b4:	02000107 	andeq	r0, r0, #-1073741823	; 0xc0000001
    61b8:	0e030104 	adfeqs	f0, f3, f4
    61bc:	1d235220 	sfmne	f5, 4, [r3, #-128]!	; 0xffffff80
    61c0:	684d1d23 	stmdavs	sp, {r0, r1, r5, r8, sl, fp, ip}^
    61c4:	207a034b 	rsbscs	r0, sl, fp, asr #6
    61c8:	02004134 	andeq	r4, r0, #52, 2
    61cc:	5b3d0104 	blpl	f465e4 <__ccfg+0xf2663c>
    61d0:	000b0231 	andeq	r0, fp, r1, lsr r2
    61d4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    61d8:	00262c02 	eoreq	r2, r6, r2, lsl #24
    61dc:	08930300 	ldmeq	r3, {r8, r9}
    61e0:	01090301 	tsteq	r9, r1, lsl #6
    61e4:	22212d2f 	eorcs	r2, r1, #3008	; 0xbc0
    61e8:	01040200 	mrseq	r0, R12_usr
    61ec:	07024b3d 	smladxeq	r2, sp, fp, r4
    61f0:	00010100 	andeq	r0, r1, r0, lsl #2
    61f4:	26540205 	ldrbcs	r0, [r4], -r5, lsl #4
    61f8:	9b030000 	blls	c6200 <__ccfg+0xa6258>
    61fc:	09030103 	stmdbeq	r3, {r0, r1, r8}
    6200:	3c770301 	ldclcc	3, cr0, [r7], #-4
    6204:	20090320 	andcs	r0, r9, r0, lsr #6
    6208:	03313052 	teqeq	r1, #82	; 0x52
    620c:	2b234a0a 	blcs	8d8a3c <__ccfg+0x8b8a94>
    6210:	2f24484c 	svccs	0x0024484c
    6214:	2933762d 	ldmdbcs	r3!, {r0, r2, r3, r5, r9, sl, ip, sp, lr}
    6218:	26501c32 			; <UNDEFINED> instruction: 0x26501c32
    621c:	4d4f3d52 	stclmi	13, cr3, [pc, #-328]	; 60dc <__exidx_end+0x32e4>
    6220:	4b845d2f 	blmi	fe11d6e4 <_estack+0xde1186e4>
    6224:	003d243d 	eorseq	r2, sp, sp, lsr r4
    6228:	4b010402 	blmi	47238 <__ccfg+0x27290>
    622c:	864b2f5b 			; <UNDEFINED> instruction: 0x864b2f5b
    6230:	09033f4d 	stmdbeq	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp}
    6234:	1e221e4a 	cdpne	14, 2, cr1, cr2, cr10, {2}
    6238:	043c0b03 	ldrteq	r0, [ip], #-2819	; 0xfffff4fd
    623c:	7db90303 	ldcvc	3, cr0, [r9, #12]!
    6240:	001f024a 	andseq	r0, pc, sl, asr #4
    6244:	03650101 	cmneq	r5, #1073741824	; 0x40000000
    6248:	00020000 	andeq	r0, r2, r0
    624c:	000001a8 	andeq	r0, r0, r8, lsr #3
    6250:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6254:	0101000d 	tsteq	r1, sp
    6258:	00000101 	andeq	r0, r0, r1, lsl #2
    625c:	00000100 	andeq	r0, r0, r0, lsl #2
    6260:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6264:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6268:	2f2e2e2f 	svccs	0x002e2e2f
    626c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6270:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6274:	3a630062 	bcc	18c6404 <__ccfg+0x18a645c>
    6278:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    627c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6280:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6284:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6288:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    628c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6290:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6294:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6298:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    629c:	6f6f745c 	svcvs	0x006f745c
    62a0:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    62a4:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    62a8:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    62ac:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    62b0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    62b4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    62b8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    62bc:	5f342d69 	svcpl	0x00342d69
    62c0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    62c4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    62c8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    62cc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    62d0:	61652d65 	cmnvs	r5, r5, ror #26
    62d4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    62d8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    62dc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    62e0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    62e4:	6300656e 	movwvs	r6, #1390	; 0x56e
    62e8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    62ec:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    62f0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    62f4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    62f8:	5f393130 	svcpl	0x00393130
    62fc:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6300:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6304:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6308:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    630c:	6f745c36 	svcvs	0x00745c36
    6310:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6314:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6318:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    631c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6320:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6324:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6328:	61652d65 	cmnvs	r5, r5, ror #26
    632c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6330:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6334:	71353130 	teqvc	r5, r0, lsr r1
    6338:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    633c:	6f6e2d6d 	svcvs	0x006e2d6d
    6340:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6344:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6348:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    634c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6350:	00737973 	rsbseq	r7, r3, r3, ror r9
    6354:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6358:	2f2e2e2f 	svccs	0x002e2e2f
    635c:	692f2e2e 	stmdbvs	pc!, {r1, r2, r3, r5, r9, sl, fp, sp}	; <UNPREDICTABLE>
    6360:	0000636e 	andeq	r6, r0, lr, ror #6
    6364:	5f737973 	svcpl	0x00737973
    6368:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    636c:	0100632e 	tsteq	r0, lr, lsr #6
    6370:	6f610000 	svcvs	0x00610000
    6374:	75775f6e 	ldrbvc	r5, [r7, #-3950]!	; 0xfffff092
    6378:	00682e63 	rsbeq	r2, r8, r3, ror #28
    637c:	6f000001 	svcvs	0x00000001
    6380:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    6384:	00000100 	andeq	r0, r0, r0, lsl #2
    6388:	6d637270 	sfmvs	f7, 2, [r3, #-448]!	; 0xfffffe40
    638c:	0100682e 	tsteq	r0, lr, lsr #16
    6390:	65730000 	ldrbvs	r0, [r3, #-0]!
    6394:	5f707574 	svcpl	0x00707574
    6398:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    639c:	00010068 	andeq	r0, r1, r8, rrx
    63a0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    63a4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    63a8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    63ac:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    63b0:	00020068 	andeq	r0, r2, r8, rrx
    63b4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    63b8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    63bc:	0300682e 	movweq	r6, #2094	; 0x82e
    63c0:	77680000 	strbvc	r0, [r8, -r0]!
    63c4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    63c8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    63cc:	00000400 	andeq	r0, r0, r0, lsl #8
    63d0:	2e6d6f72 	mcrcs	15, 3, r6, cr13, cr2, {3}
    63d4:	00010068 	andeq	r0, r1, r8, rrx
    63d8:	73797300 	cmnvc	r9, #0, 6
    63dc:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
    63e0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    63e4:	61000001 	tstvs	r0, r1
    63e8:	625f6e6f 	subsvs	r6, pc, #1776	; 0x6f0
    63ec:	6f6d7461 	svcvs	0x006d7461
    63f0:	00682e6e 	rsbeq	r2, r8, lr, ror #28
    63f4:	00000001 	andeq	r0, r0, r1
    63f8:	00020500 	andeq	r0, r2, r0, lsl #10
    63fc:	03000000 	movweq	r0, #0
    6400:	040100f9 	streq	r0, [r1], #-249	; 0xffffff07
    6404:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    6408:	03010401 	movweq	r0, #5121	; 0x1401
    640c:	042e7d97 	strteq	r7, [lr], #-3479	; 0xfffff269
    6410:	02e90302 	rsceq	r0, r9, #134217728	; 0x8000000
    6414:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6418:	00ce0301 	sbceq	r0, lr, r1, lsl #6
    641c:	00010420 	andeq	r0, r1, r0, lsr #8
    6420:	03010402 	movweq	r0, #5122	; 0x1402
    6424:	032e7cd1 			; <UNDEFINED> instruction: 0x032e7cd1
    6428:	02002e0c 	andeq	r2, r0, #12, 28	; 0xc0
    642c:	89670104 	stmdbhi	r7!, {r2, r8}^
    6430:	4a09034b 	bmi	247164 <__ccfg+0x2271bc>
    6434:	a5030304 	strge	r0, [r3, #-772]	; 0xfffffcfc
    6438:	01045801 	tsteq	r4, r1, lsl #16
    643c:	4a7ee403 	bmi	1fbf450 <__ccfg+0x1f9f4a8>
    6440:	01040200 	mrseq	r0, R12_usr
    6444:	0304045d 	movweq	r0, #17501	; 0x445d
    6448:	00740381 	rsbseq	r0, r4, r1, lsl #7
    644c:	03010402 	movweq	r0, #5122	; 0x1402
    6450:	01043c14 	tsteq	r4, r4, lsl ip
    6454:	01040200 	mrseq	r0, R12_usr
    6458:	2e7cef03 	cdpcs	15, 7, cr14, cr12, cr3, {0}
    645c:	b7030404 	strlt	r0, [r3, -r4, lsl #8]
    6460:	1c322e03 	ldcne	14, cr2, [r2], #-12
    6464:	20420324 	subcs	r0, r2, r4, lsr #6
    6468:	01040200 	mrseq	r0, R12_usr
    646c:	042e1403 	strteq	r1, [lr], #-1027	; 0xfffffbfd
    6470:	04020001 	streq	r0, [r2], #-1
    6474:	7cf70301 	ldclvc	3, cr0, [r7], #4
    6478:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    647c:	83281b41 			; <UNDEFINED> instruction: 0x83281b41
    6480:	1b24384b 	blne	9145b4 <__ccfg+0x8f460c>
    6484:	e7030404 	str	r0, [r3, -r4, lsl #8]
    6488:	02002e02 	andeq	r2, r0, #2, 28
    648c:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    6490:	0001043c 	andeq	r0, r1, ip, lsr r4
    6494:	03010402 	movweq	r0, #5122	; 0x1402
    6498:	30207d8d 	eorcc	r7, r0, sp, lsl #27
    649c:	01001702 	tsteq	r0, r2, lsl #14
    64a0:	02050001 	andeq	r0, r5, #1
    64a4:	000027a4 	andeq	r2, r0, r4, lsr #15
    64a8:	0101da03 	tsteq	r1, r3, lsl #20
    64ac:	032e1d03 			; <UNDEFINED> instruction: 0x032e1d03
    64b0:	1d032063 	stcne	0, cr2, [r3, #-396]	; 0xfffffe74
    64b4:	412f5920 			; <UNDEFINED> instruction: 0x412f5920
    64b8:	1c223232 	sfmne	f3, 4, [r2], #-200	; 0xffffff38
    64bc:	5c942132 	ldfpls	f2, [r4], {50}	; 0x32
    64c0:	05041b32 	streq	r1, [r4, #-2866]	; 0xfffff4ce
    64c4:	212e5f03 			; <UNDEFINED> instruction: 0x212e5f03
    64c8:	24030104 	strcs	r0, [r3], #-260	; 0xfffffefc
    64cc:	1b32432e 	blne	c9718c <__ccfg+0xc771e4>
    64d0:	03050433 	movweq	r0, #21555	; 0x5433
    64d4:	04212050 	strteq	r2, [r1], #-80	; 0xffffffb0
    64d8:	2e2e0301 	cdpcs	3, 2, cr0, cr14, cr1, {0}
    64dc:	51030504 	tstpl	r3, r4, lsl #10
    64e0:	0301042e 	movweq	r0, #5166	; 0x142e
    64e4:	05042034 	streq	r2, [r4, #-52]	; 0xffffffcc
    64e8:	04204d03 	strteq	r4, [r0], #-3331	; 0xfffff2fd
    64ec:	2e340301 	cdpcs	3, 3, cr0, cr4, cr1, {0}
    64f0:	6923652f 	stmdbvs	r3!, {r0, r1, r2, r3, r5, r8, sl, sp, lr}
    64f4:	3e214d2f 	cdpcc	13, 2, cr4, cr1, cr15, {1}
    64f8:	02003221 	andeq	r3, r0, #268435458	; 0x10000002
    64fc:	58060104 	stmdapl	r6, {r2, r8}
    6500:	4a0f0306 	bmi	3c7120 <__ccfg+0x3a7178>
    6504:	2a2f3fca 	bcs	bd6434 <__ccfg+0xbb648c>
    6508:	322b2424 	eorcc	r2, fp, #36, 8	; 0x24000000
    650c:	3d319340 	ldccc	3, cr9, [r1, #-256]!	; 0xffffff00
    6510:	213e3d3e 	teqcs	lr, lr, lsr sp
    6514:	2d3c6303 	ldccs	3, cr6, [ip, #-12]!
    6518:	31202603 			; <UNDEFINED> instruction: 0x31202603
    651c:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    6520:	0b03213e 	bleq	cea20 <__ccfg+0xaea78>
    6524:	7803212e 	stmdavc	r3, {r1, r2, r3, r5, r8, sp}
    6528:	2009033c 	andcs	r0, r9, ip, lsr r3
    652c:	032e7703 			; <UNDEFINED> instruction: 0x032e7703
    6530:	03213c0e 			; <UNDEFINED> instruction: 0x03213c0e
    6534:	0f032071 	svceq	0x00032071
    6538:	231d7b3c 	tstcs	sp, #60, 22	; 0xf000
    653c:	21226521 			; <UNDEFINED> instruction: 0x21226521
    6540:	78032823 	stmdavc	r3, {r0, r1, r5, fp, sp}
    6544:	22213420 	eorcs	r3, r1, #32, 8	; 0x20000000
    6548:	3e213d4c 	cdpcc	13, 2, cr3, cr1, cr12, {2}
    654c:	3d322c40 	ldccc	12, cr2, [r2, #-256]!	; 0xffffff00
    6550:	01002102 	tsteq	r0, r2, lsl #2
    6554:	02050001 	andeq	r0, r5, #1
    6558:	000029c4 	andeq	r2, r0, r4, asr #19
    655c:	0103b603 	tsteq	r3, r3, lsl #12
    6560:	2f224027 	svccs	0x00224027
    6564:	404e24a2 	submi	r2, lr, r2, lsr #9
    6568:	02864e2a 	addeq	r4, r6, #672	; 0x2a0
    656c:	01010009 	tsteq	r1, r9
    6570:	00020500 	andeq	r0, r2, r0, lsl #10
    6574:	03000000 	movweq	r0, #0
    6578:	030103e5 	movweq	r0, #5093	; 0x13e5
    657c:	282f200c 	stmdacs	pc!, {r2, r3, sp}	; <UNPREDICTABLE>
    6580:	302d5a30 	eorcc	r5, sp, r0, lsr sl
    6584:	211f322d 	tstcs	pc, sp, lsr #4
    6588:	2c2f2b24 			; <UNDEFINED> instruction: 0x2c2f2b24
    658c:	302f2432 	eorcc	r2, pc, r2, lsr r4	; <UNPREDICTABLE>
    6590:	224b2f34 	subcs	r2, fp, #52, 30	; 0xd0
    6594:	0c023e1e 	stceq	14, cr3, [r2], {30}
    6598:	00010100 	andeq	r0, r1, r0, lsl #2
    659c:	2a240205 	bcs	906db8 <__ccfg+0x8e6e10>
    65a0:	a6030000 	strge	r0, [r3], -r0
    65a4:	3f130104 	svccc	0x00130104
    65a8:	04022648 	streq	r2, [r2], #-1608	; 0xfffff9b8
    65ac:	2b010100 	blcs	469b4 <__ccfg+0x26a0c>
    65b0:	02000002 	andeq	r0, r0, #2
    65b4:	00014300 	andeq	r4, r1, r0, lsl #6
    65b8:	fb010200 	blx	46dc2 <__ccfg+0x26e1a>
    65bc:	01000d0e 	tsteq	r0, lr, lsl #26
    65c0:	00010101 	andeq	r0, r1, r1, lsl #2
    65c4:	00010000 	andeq	r0, r1, r0
    65c8:	2f2e0100 	svccs	0x002e0100
    65cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    65d0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    65d4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    65d8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    65dc:	63006269 	movwvs	r6, #617	; 0x269
    65e0:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    65e4:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    65e8:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    65ec:	30302e30 	eorscc	r2, r0, r0, lsr lr
    65f0:	5f393130 	svcpl	0x00393130
    65f4:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    65f8:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    65fc:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6600:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6604:	6f745c36 	svcvs	0x00745c36
    6608:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    660c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6610:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6614:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6618:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    661c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6620:	61652d65 	cmnvs	r5, r5, ror #26
    6624:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6628:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    662c:	71353130 	teqvc	r5, r0, lsr r1
    6630:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6634:	6f6e2d6d 	svcvs	0x006e2d6d
    6638:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    663c:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6640:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6644:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6648:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    664c:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6650:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6654:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6658:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    665c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6660:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6664:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6668:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    666c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6670:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6674:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6678:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    667c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 6514 <__exidx_end+0x371c>
    6680:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6684:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6688:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    668c:	6f6e2d6d 	svcvs	0x006e2d6d
    6690:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6694:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6698:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    669c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    66a0:	615c3371 	cmpvs	ip, r1, ror r3
    66a4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    66a8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    66ac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    66b0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    66b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    66b8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    66bc:	68630000 	stmdavs	r3!, {}^	; <UNPREDICTABLE>
    66c0:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    66c4:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    66c8:	00000100 	andeq	r0, r0, r0, lsl #2
    66cc:	70696863 	rsbvc	r6, r9, r3, ror #16
    66d0:	6f666e69 	svcvs	0x00666e69
    66d4:	0100682e 	tsteq	r0, lr, lsr #16
    66d8:	645f0000 	ldrbvs	r0, [pc], #-0	; 66e0 <__exidx_end+0x38e8>
    66dc:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    66e0:	745f746c 	ldrbvc	r7, [pc], #-1132	; 66e8 <__exidx_end+0x38f0>
    66e4:	73657079 	cmnvc	r5, #121	; 0x79
    66e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    66ec:	735f0000 	cmpvc	pc, #0
    66f0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    66f4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    66f8:	00000003 	andeq	r0, r0, r3
    66fc:	00020500 	andeq	r0, r2, r0, lsl #10
    6700:	03000000 	movweq	r0, #0
    6704:	130100c4 	movwne	r0, #4292	; 0x10c4
    6708:	0006022f 	andeq	r0, r6, pc, lsr #4
    670c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6710:	00000002 	andeq	r0, r0, r2
    6714:	00d00300 	sbcseq	r0, r0, r0, lsl #6
    6718:	032f1401 			; <UNDEFINED> instruction: 0x032f1401
    671c:	08022e0a 	stmdaeq	r2, {r1, r3, r9, sl, fp, sp}
    6720:	00010100 	andeq	r0, r1, r0, lsl #2
    6724:	2a3c0205 	bcs	f06f40 <__ccfg+0xee6f98>
    6728:	e6030000 	str	r0, [r3], -r0
    672c:	2a1a0100 	bcs	686b34 <__ccfg+0x666b8c>
    6730:	0302044e 	movweq	r0, #9294	; 0x244e
    6734:	042e019b 	strteq	r0, [lr], #-411	; 0xfffffe65
    6738:	7ee60301 	cdpvc	3, 14, cr0, cr6, cr1, {0}
    673c:	4b4c232e 	blmi	130f3fc <__ccfg+0x12ef454>
    6740:	242f724b 	strtcs	r7, [pc], #-587	; 6748 <__exidx_end+0x3950>
    6744:	01000502 	tsteq	r0, r2, lsl #10
    6748:	02050001 	andeq	r0, r5, #1
    674c:	00000000 	andeq	r0, r0, r0
    6750:	01018303 	tsteq	r1, r3, lsl #6
    6754:	b0030204 	andlt	r0, r3, r4, lsl #4
    6758:	01042001 	tsteq	r4, r1
    675c:	2e7ed603 	cdpcs	6, 7, cr13, cr14, cr3, {0}
    6760:	03233139 			; <UNDEFINED> instruction: 0x03233139
    6764:	0a033c78 	beq	d594c <__ccfg+0xb59a4>
    6768:	2e09034a 	cdpcs	3, 0, cr0, cr9, cr10, {2}
    676c:	00050225 	andeq	r0, r5, r5, lsr #4
    6770:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6774:	002a8802 	eoreq	r8, sl, r2, lsl #16
    6778:	01a60300 			; <UNDEFINED> instruction: 0x01a60300
    677c:	03020401 	movweq	r0, #9217	; 0x2401
    6780:	032000e3 			; <UNDEFINED> instruction: 0x032000e3
    6784:	6f032e11 	svcvs	0x00032e11
    6788:	2011033c 	andscs	r0, r1, ip, lsr r3
    678c:	03010425 	movweq	r0, #5157	; 0x1425
    6790:	923c7f8c 	eorsls	r7, ip, #140, 30	; 0x230
    6794:	21222195 			; <UNDEFINED> instruction: 0x21222195
    6798:	39414122 	stmdbcc	r1, {r1, r5, r8, lr}^
    679c:	272e0903 	strcs	r0, [lr, -r3, lsl #18]!
    67a0:	212e7303 			; <UNDEFINED> instruction: 0x212e7303
    67a4:	03206403 			; <UNDEFINED> instruction: 0x03206403
    67a8:	04022030 	streq	r2, [r2], #-48	; 0xffffffd0
    67ac:	00010100 	andeq	r0, r1, r0, lsl #2
    67b0:	2af40205 	bcs	ffd06fcc <_estack+0xdfd01fcc>
    67b4:	e0030000 	and	r0, r3, r0
    67b8:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    67bc:	2001a403 	andcs	sl, r1, r3, lsl #8
    67c0:	dd030104 	stfles	f0, [r3, #-16]
    67c4:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    67c8:	2e029003 	cdpcs	0, 0, cr9, cr2, cr3, {0}
    67cc:	f0030104 			; <UNDEFINED> instruction: 0xf0030104
    67d0:	02002e7d 	andeq	r2, r0, #2000	; 0x7d0
    67d4:	09030104 	stmdbeq	r3, {r2, r8}
    67d8:	0002022e 	andeq	r0, r2, lr, lsr #4
    67dc:	021e0101 	andseq	r0, lr, #1073741824	; 0x40000000
    67e0:	00020000 	andeq	r0, r2, r0
    67e4:	00000142 	andeq	r0, r0, r2, asr #2
    67e8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    67ec:	0101000d 	tsteq	r1, sp
    67f0:	00000101 	andeq	r0, r0, r1, lsl #2
    67f4:	00000100 	andeq	r0, r0, r0, lsl #2
    67f8:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    67fc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6800:	2f2e2e2f 	svccs	0x002e2e2f
    6804:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6808:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    680c:	3a630062 	bcc	18c699c <__ccfg+0x18a69f4>
    6810:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6814:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6818:	302e322e 	eorcc	r3, lr, lr, lsr #4
    681c:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6820:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6824:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6828:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    682c:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6830:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6834:	6f6f745c 	svcvs	0x006f745c
    6838:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    683c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6840:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6844:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6848:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    684c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6850:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6854:	5f342d69 	svcpl	0x00342d69
    6858:	30322d39 	eorscc	r2, r2, r9, lsr sp
    685c:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6860:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6864:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6868:	61652d65 	cmnvs	r5, r5, ror #26
    686c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6870:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6874:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6878:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    687c:	6300656e 	movwvs	r6, #1390	; 0x56e
    6880:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6884:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6888:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    688c:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6890:	5f393130 	svcpl	0x00393130
    6894:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6898:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    689c:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    68a0:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    68a4:	6f745c36 	svcvs	0x00745c36
    68a8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    68ac:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    68b0:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    68b4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    68b8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    68bc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    68c0:	61652d65 	cmnvs	r5, r5, ror #26
    68c4:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    68c8:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    68cc:	71353130 	teqvc	r5, r0, lsr r1
    68d0:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    68d4:	6f6e2d6d 	svcvs	0x006e2d6d
    68d8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    68dc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    68e0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    68e4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    68e8:	00737973 	rsbseq	r7, r3, r3, ror r9
    68ec:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    68f0:	0100682e 	tsteq	r0, lr, lsr #16
    68f4:	64640000 	strbtvs	r0, [r4], #-0
    68f8:	00632e69 	rsbeq	r2, r3, r9, ror #28
    68fc:	5f000001 	svcpl	0x00000001
    6900:	61666564 	cmnvs	r6, r4, ror #10
    6904:	5f746c75 	svcpl	0x00746c75
    6908:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    690c:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6910:	5f000002 	svcpl	0x00000002
    6914:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6918:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    691c:	00000300 	andeq	r0, r0, r0, lsl #6
    6920:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    6924:	00010068 	andeq	r0, r1, r8, rrx
    6928:	05000000 	streq	r0, [r0, #-0]
    692c:	002b0c02 	eoreq	r0, fp, r2, lsl #24
    6930:	01880300 	orreq	r0, r8, r0, lsl #6
    6934:	30312001 	eorscc	r2, r1, r1
    6938:	22221e50 	eorcs	r1, r2, #80, 28	; 0x500
    693c:	05022c23 	streq	r2, [r2, #-3107]	; 0xfffff3dd
    6940:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    6944:	02050002 	andeq	r0, r5, #2
    6948:	00002b34 	andeq	r2, r0, r4, lsr fp
    694c:	0100c303 	tsteq	r0, r3, lsl #6
    6950:	02010a03 	andeq	r0, r1, #12288	; 0x3000
    6954:	01010004 	tsteq	r1, r4
    6958:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    695c:	00000002 	andeq	r0, r0, r2
    6960:	00d80300 	sbcseq	r0, r8, r0, lsl #6
    6964:	010e0301 	tsteq	lr, r1, lsl #6
    6968:	78032333 	stmdavc	r3, {r0, r1, r4, r5, r8, r9, sp}
    696c:	4f35352e 	svcmi	0x0035352e
    6970:	01000402 	tsteq	r0, r2, lsl #8
    6974:	00020401 	andeq	r0, r2, r1, lsl #8
    6978:	00000205 	andeq	r0, r0, r5, lsl #4
    697c:	85030000 	strhi	r0, [r3, #-0]
    6980:	11030101 	tstne	r3, r1, lsl #2
    6984:	206f0320 	rsbcs	r0, pc, r0, lsr #6
    6988:	032e1303 			; <UNDEFINED> instruction: 0x032e1303
    698c:	09032e79 	stmdbeq	r3, {r0, r3, r4, r5, r6, r9, sl, fp, sp}
    6990:	7103342e 	tstvc	r3, lr, lsr #8
    6994:	0c03442e 	cfstrseq	mvf4, [r3], {46}	; 0x2e
    6998:	022d2f2e 	eoreq	r2, sp, #46, 30	; 0xb8
    699c:	01010002 	tsteq	r1, r2
    69a0:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69a4:	00000002 	andeq	r0, r0, r2
    69a8:	01af0300 			; <UNDEFINED> instruction: 0x01af0300
    69ac:	20110301 	andscs	r0, r1, r1, lsl #6
    69b0:	2e74031b 	mrccs	3, 3, r0, cr4, cr11, {0}
    69b4:	2f201303 	svccs	0x00201303
    69b8:	69030104 	stmdbvs	r3, {r2, r8}
    69bc:	234d3020 	movtcs	r3, #53280	; 0xd020
    69c0:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    69c4:	1d030204 	sfmne	f0, 4, [r3, #-16]
    69c8:	0005022e 	andeq	r0, r5, lr, lsr #4
    69cc:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    69d0:	00020500 	andeq	r0, r2, r0, lsl #10
    69d4:	03000000 	movweq	r0, #0
    69d8:	030101de 	movweq	r0, #4574	; 0x11de
    69dc:	031b2011 	tsteq	fp, #17
    69e0:	14032e74 	strne	r2, [r3], #-3700	; 0xfffff18c
    69e4:	04302d2e 	ldrteq	r2, [r0], #-3374	; 0xfffff2d2
    69e8:	7fb90301 	svcvc	0x00b90301
    69ec:	234d3020 	movtcs	r3, #53280	; 0xd020
    69f0:	2122231d 			; <UNDEFINED> instruction: 0x2122231d
    69f4:	c8030204 	stmdagt	r3, {r2, r9}
    69f8:	02422e00 	subeq	r2, r2, #0, 28
    69fc:	01010005 	tsteq	r1, r5
    6a00:	000002d6 	ldrdeq	r0, [r0], -r6
    6a04:	017c0002 	cmneq	ip, r2
    6a08:	01020000 	mrseq	r0, (UNDEF: 2)
    6a0c:	000d0efb 	strdeq	r0, [sp], -fp
    6a10:	01010101 	tsteq	r1, r1, lsl #2
    6a14:	01000000 	mrseq	r0, (UNDEF: 0)
    6a18:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    6a1c:	2f2e2e2f 	svccs	0x002e2e2f
    6a20:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a24:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    6a28:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    6a2c:	0062696c 	rsbeq	r6, r2, ip, ror #18
    6a30:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6a34:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6a38:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6a3c:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6a40:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6a44:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6a48:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6a4c:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6a50:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a54:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6a58:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6a5c:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 68f4 <__exidx_end+0x3afc>
    6a60:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6a64:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6a68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6a6c:	6f6e2d6d 	svcvs	0x006e2d6d
    6a70:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6a74:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6a78:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6a7c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6a80:	615c3371 	cmpvs	ip, r1, ror r3
    6a84:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6a88:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6a8c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6a90:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6a94:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6a98:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    6a9c:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    6aa0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    6aa4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6aa8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6aac:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6ab0:	31303030 	teqcc	r0, r0, lsr r0
    6ab4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6ab8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6abc:	61746562 	cmnvs	r4, r2, ror #10
    6ac0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    6ac4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6ac8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6900 <__exidx_end+0x3b08>
    6acc:	6f635c73 	svcvs	0x00635c73
    6ad0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    6ad4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6ad8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6adc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6ae0:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6ae4:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6ae8:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    6aec:	3130322d 	teqcc	r0, sp, lsr #4
    6af0:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6af4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6af8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6afc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6b00:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6b04:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6b08:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    6b0c:	2f2e0073 	svccs	0x002e0073
    6b10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6b14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b18:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    6b1c:	736f0000 	cmnvc	pc, #0
    6b20:	00632e63 	rsbeq	r2, r3, r3, ror #28
    6b24:	6f000001 	svcvs	0x00000001
    6b28:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    6b2c:	00000100 	andeq	r0, r0, r0, lsl #2
    6b30:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    6b34:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    6b38:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    6b3c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    6b40:	00000200 	andeq	r0, r0, r0, lsl #4
    6b44:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6b48:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6b4c:	00030068 	andeq	r0, r3, r8, rrx
    6b50:	5f776800 	svcpl	0x00776800
    6b54:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b58:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b5c:	72000004 	andvc	r0, r0, #4
    6b60:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6b64:	00000100 	andeq	r0, r0, r0, lsl #2
    6b68:	5f6e6f61 	svcpl	0x006e6f61
    6b6c:	2e637472 	mcrcs	4, 3, r7, cr3, cr2, {3}
    6b70:	00010068 	andeq	r0, r1, r8, rrx
    6b74:	6e6f6100 	powvse	f6, f7, f0
    6b78:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    6b7c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    6b80:	00010068 	andeq	r0, r1, r8, rrx
    6b84:	05000000 	streq	r0, [r0, #-0]
    6b88:	002b3c02 	eoreq	r3, fp, r2, lsl #24
    6b8c:	00e50300 	rsceq	r0, r5, r0, lsl #6
    6b90:	0f032001 	svceq	0x00032001
    6b94:	20710320 	rsbscs	r0, r1, r0, lsr #6
    6b98:	25200f03 	strcs	r0, [r0, #-3843]!	; 0xfffff0fd
    6b9c:	309e0903 	addscc	r0, lr, r3, lsl #18
    6ba0:	339e0903 	orrscc	r0, lr, #49152	; 0xc000
    6ba4:	000702a3 	andeq	r0, r7, r3, lsr #5
    6ba8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6bac:	002b9802 	eoreq	r9, fp, r2, lsl #16
    6bb0:	01a00300 	lsleq	r0, r0, #6
    6bb4:	2e0c0301 	cdpcs	3, 0, cr0, cr12, cr1, {0}
    6bb8:	7a038822 	bvc	e8c48 <__ccfg+0xc8ca0>
    6bbc:	0225263c 	eoreq	r2, r5, #60, 12	; 0x3c00000
    6bc0:	01010006 	tsteq	r1, r6
    6bc4:	00020500 	andeq	r0, r2, r0, lsl #10
    6bc8:	03000000 	movweq	r0, #0
    6bcc:	200101c2 	andcs	r0, r1, r2, asr #3
    6bd0:	03349125 	teqeq	r4, #1073741833	; 0x40000009
    6bd4:	03272e79 			; <UNDEFINED> instruction: 0x03272e79
    6bd8:	00262e7a 	eoreq	r2, r6, sl, ror lr
    6bdc:	03010402 	movweq	r0, #5122	; 0x1402
    6be0:	0200207a 	andeq	r2, r0, #122	; 0x7a
    6be4:	30500104 	subscc	r0, r0, r4, lsl #2
    6be8:	241f302d 	ldrcs	r3, [pc], #-45	; 6bf0 <__exidx_end+0x3df8>
    6bec:	341f3d4b 	ldrcc	r3, [pc], #-3403	; 6bf4 <__exidx_end+0x3dfc>
    6bf0:	03326c3d 	teqeq	r2, #15616	; 0x3d00
    6bf4:	1003666d 	andne	r6, r3, sp, ror #12
    6bf8:	0902263c 	stmdbeq	r2, {r2, r3, r4, r5, r9, sl, sp}
    6bfc:	00010100 	andeq	r0, r1, r0, lsl #2
    6c00:	00000205 	andeq	r0, r0, r5, lsl #4
    6c04:	f3030000 	vhadd.u8	d0, d3, d0
    6c08:	4b210101 	blmi	847014 <__ccfg+0x82706c>
    6c0c:	01000702 	tsteq	r0, r2, lsl #14
    6c10:	02050001 	andeq	r0, r5, #1
    6c14:	00000000 	andeq	r0, r0, r0
    6c18:	01028003 	tsteq	r2, r3
    6c1c:	03020424 	movweq	r0, #9252	; 0x2424
    6c20:	01045822 	tsteq	r4, r2, lsr #16
    6c24:	04826203 	streq	r6, [r2], #515	; 0x203
    6c28:	203c0302 	eorscs	r0, ip, r2, lsl #6
    6c2c:	4a030104 	bmi	c7044 <__ccfg+0xa709c>
    6c30:	211f3d4a 	tstcs	pc, sl, asr #26
    6c34:	30221f3d 	eorcc	r1, r2, sp, lsr pc
    6c38:	2322301f 			; <UNDEFINED> instruction: 0x2322301f
    6c3c:	01000c02 	tsteq	r0, r2, lsl #24
    6c40:	02050001 	andeq	r0, r5, #1
    6c44:	00000000 	andeq	r0, r0, r0
    6c48:	0102a303 	tsteq	r2, r3, lsl #6
    6c4c:	02044f25 	andeq	r4, r4, #37, 30	; 0x94
    6c50:	044a1703 	strbeq	r1, [sl], #-1795	; 0xfffff8fd
    6c54:	4a6d0301 	bmi	1b47860 <__ccfg+0x1b278b8>
    6c58:	0009024b 	andeq	r0, r9, fp, asr #4
    6c5c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6c60:	00000002 	andeq	r0, r0, r2
    6c64:	02bc0300 	adcseq	r0, ip, #0, 6
    6c68:	17032201 	strne	r2, [r3, -r1, lsl #4]
    6c6c:	20690320 	rsbcs	r0, r9, r0, lsr #6
    6c70:	3c100328 	ldccc	3, cr0, [r0], {40}	; 0x28
    6c74:	032e6c03 			; <UNDEFINED> instruction: 0x032e6c03
    6c78:	6d032e15 	stcvs	14, cr2, [r3, #-84]	; 0xffffffac
    6c7c:	20130358 	andscs	r0, r3, r8, asr r3
    6c80:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    6c84:	023f2011 	eorseq	r2, pc, #17
    6c88:	01010006 	tsteq	r1, r6
    6c8c:	00020500 	andeq	r0, r2, r0, lsl #10
    6c90:	03000000 	movweq	r0, #0
    6c94:	030102e3 	movweq	r0, #4835	; 0x12e3
    6c98:	024d0121 	subeq	r0, sp, #1073741832	; 0x40000008
    6c9c:	01010002 	tsteq	r1, r2
    6ca0:	00020500 	andeq	r0, r2, r0, lsl #10
    6ca4:	03000000 	movweq	r0, #0
    6ca8:	03010390 	movweq	r0, #5008	; 0x1390
    6cac:	1f212010 	svcne	0x00212010
    6cb0:	02002121 	andeq	r2, r0, #1073741832	; 0x40000008
    6cb4:	003e0104 	eorseq	r0, lr, r4, lsl #2
    6cb8:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6cbc:	341d313d 	ldrcc	r3, [sp], #-317	; 0xfffffec3
    6cc0:	01000702 	tsteq	r0, r2, lsl #14
    6cc4:	02050001 	andeq	r0, r5, #1
    6cc8:	00000000 	andeq	r0, r0, r0
    6ccc:	0103b503 	tsteq	r3, r3, lsl #10
    6cd0:	332c3117 			; <UNDEFINED> instruction: 0x332c3117
    6cd4:	0005023d 	andeq	r0, r5, sp, lsr r2
    6cd8:	Address 0x0000000000006cd8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
      34:	5f5f0065 	svcpl	0x005f0065
      38:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6d0 <_estack+0xdfffa6d0>
      3c:	00747261 	rsbseq	r7, r4, r1, ror #4
			i = k;
      40:	70716572 	rsbsvc	r6, r1, r2, ror r5
				j->Next = k;
      44:	72006d64 	andvc	r6, r0, #100, 26	; 0x1900
      48:	654c6465 	strbvs	r6, [ip, #-1125]	; 0xfffffb9b
}
      4c:	5f5f0064 	svcpl	0x005f0064
      50:	616c7473 	smcvs	51011	; 0xc743
      54:	65475f62 	strbvs	r5, [r7, #-3938]	; 0xfffff09e
		release;
      58:	614e5f74 	hvcvs	58868	; 0xe5f4
      5c:	7300656d 	movwvc	r6, #1389	; 0x56d
      60:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
      64:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
      68:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
      6c:	66666500 	strbtvs	r6, [r6], -r0, lsl #10
      70:	006d6470 	rsbeq	r6, sp, r0, ror r4
      74:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      78:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
      7c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
      80:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
      84:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
      88:	6e00746e 	cdpvs	4, 0, cr7, cr0, cr14, {3}
      8c:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
	descriptors [fd] = s;
      90:	6e497372 	mcrvs	3, 2, r7, cr9, cr2, {3}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00786564 	rsbseq	r6, r8, r4, ror #10
      98:	746e7665 	strbtvc	r7, [lr], #-1637	; 0xfffff99b
	if (s == NULL)
      9c:	6c006e70 	stcvs	14, cr6, [r0], {112}	; 0x70
		syserror (EMALLOC, "tcv05");
      a0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
      a4:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
      a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
      ac:	735f5f00 	cmpvc	pc, #0, 30
      b0:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
      b4:	6f68535f 	svcvs	0x0068535f
      b8:	654d5f77 	strbvs	r5, [sp, #-3959]	; 0xfffff089
      bc:	5f00756e 	svcpl	0x0000756e
      c0:	5f69705f 	svcpl	0x0069705f
      c4:	5f007473 	svcpl	0x00007473
      c8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      cc:	525f6261 	subspl	r6, pc, #268435462	; 0x10000006
      d0:	425f6e75 	subsmi	r6, pc, #1872	; 0x750
      d4:	6b6e696c 	blvs	1b9a68c <__ccfg+0x1b7a6e4>
      d8:	5f007265 	svcpl	0x00007265
      dc:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
      e0:	4f5f6261 	svcmi	0x005f6261
      e4:	505f4646 	subspl	r4, pc, r6, asr #12
      e8:	4f495245 	svcmi	0x00495245
      ec:	5f5f0044 	svcpl	0x005f0044
      f0:	616c7473 	smcvs	51011	; 0xc743
			wwait (st, 50);
      f4:	6e495f62 	cdpvs	15, 4, cr5, cr9, cr2, {3}
			curr += 0x1000;
      f8:	61697469 	cmnvs	r9, r9, ror #8
      fc:	7973006c 	ldmdbvc	r3!, {r2, r3, r5, r6}^
		if (from >= EE_SIZE || upto < from)
     100:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
     104:	6576655f 	ldrbvs	r6, [r6, #-1375]!	; 0xfffffaa1
			upto = EE_SIZE - 1;
     108:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
     10c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     110:	735f5f00 	cmpvc	pc, #0, 30
     114:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     118:	6f74535f 	svcvs	0x0074535f
     11c:	6e6f0070 	mcrvs	0, 3, r0, cr15, cr0, {3}
     120:	736e6d64 	cmnvc	lr, #100, 26	; 0x1900
     124:	6f696400 	svcvs	0x00696400
            ch = redCharacter;
     128:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
            onTime = redOn;
     12c:	47007265 	strmi	r7, [r0, -r5, ror #4]
            offTime = redOff;
     130:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     134:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
            ledFlag = 0;
     138:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
        if(On)
     13c:	31303220 	teqcc	r0, r0, lsr #4
     140:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
     144:	72282035 	eorvc	r2, r8, #53	; 0x35
            leds(led,1);
     148:	61656c65 	cmnvs	r5, r5, ror #24
            leds(led,0);
     14c:	20296573 	eorcs	r6, r9, r3, ror r5
     150:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
     154:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     158:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
     15c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
        if (displayCycle)
     160:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     164:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     168:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     16c:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
     170:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
        if(onTime > 0)
     174:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
            delay(onTime, OFF_PERIOD);
     178:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
        when(&On, Check_PERIOD);
     17c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     180:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
        release;
     184:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
            led = greenLed;
     188:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
     18c:	6f6c666d 	svcvs	0x006c666d
            ch = greenCharacter;
     190:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
            onTime = greenOn;
     194:	733d6962 	teqvc	sp, #1605632	; 0x188000
     198:	2074666f 	rsbscs	r6, r4, pc, ror #12
            offTime = greenOff;
     19c:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     1a0:	613d6863 	teqvs	sp, r3, ror #16
            leds(led,0);
     1a4:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
     1a8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1ac:	672d2067 	strvs	r2, [sp, -r7, rrx]!
     1b0:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     1b4:	20332d66 	eorscs	r2, r3, r6, ror #26
        leds(led,0);
     1b8:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
     1bc:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     1c0:	6177642d 	cmnvs	r7, sp, lsr #8
     1c4:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
     1c8:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
            proceed Check_PERIOD;
     1cc:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
}
     1d0:	20393963 	eorscs	r3, r9, r3, ror #18
     1d4:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
     1d8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     1dc:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     1e0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     1e4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     1e8:	6164662d 	cmnvs	r4, sp, lsr #12
     1ec:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     1f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     1f4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     1f8:	6f6e662d 	svcvs	0x006e662d
     1fc:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     200:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     204:	61696c61 	cmnvs	r9, r1, ror #24
     208:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     20c:	61662d20 	cmnvs	r6, r0, lsr #26
     210:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
     214:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     218:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
     21c:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
     220:	5f003031 	svcpl	0x00003031
    word number = 0;
     224:	5f69705f 	svcpl	0x0069705f
    int numbersIndex = 0;
     228:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
     22c:	00745f74 	rsbseq	r5, r4, r4, ror pc
        if(settingsInput[i] == ' ') {
     230:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     234:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
            numbers[numbersIndex] = number;
     238:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     23c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
            number = 0;
     240:	7000746e 	andvc	r7, r0, lr, ror #8
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	6f696e69 	svcvs	0x00696e69
    redOn = numbers[0];
     248:	00745f64 	rsbseq	r5, r4, r4, ror #30
     24c:	62747366 	rsbsvs	r7, r4, #-1744830463	; 0x98000001
    redOff = numbers[1];
     250:	6e006b6c 	vmlsvs.f64	d6, d0, d28
     254:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
    greenOn = numbers[2];
     258:	72670072 	rsbvc	r0, r7, #114	; 0x72
     25c:	4c6e6565 	cfstr64mi	mvdx6, [lr], #-404	; 0xfffffe6c
    greenOff = numbers[3];
     260:	61006465 	tstvs	r0, r5, ror #8
     264:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
}
     268:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0xfffffb00
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	6d616e72 	stclvs	14, cr6, [r1, #-456]!	; 0xfffffe38
     270:	5f5f0065 	svcpl	0x005f0065
            number = number * 10;
     274:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
            number += settingsInput[i] - 48;
     278:	61747379 	cmnvs	r4, r9, ror r3
     27c:	64700074 	ldrbtvs	r0, [r0], #-116	; 0xffffff8c
     280:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
     284:	73616200 	cmnvc	r1, #0, 4
     288:	654e0065 	strbvs	r0, [lr, #-101]	; 0xffffff9b
     28c:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
fsm root {
     290:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     294:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
     298:	6e4f6e65 	cdpvs	14, 4, cr6, cr15, cr5, {3}
     29c:	4d544b00 	vldrmi	d20, [r4, #-0]
     2a0:	70612f50 	rsbvc	r2, r1, r0, asr pc
     2a4:	00632e70 	rsbeq	r2, r3, r0, ror lr
     2a8:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
        ser_outf(Initial, "Enter your name: ");
     2ac:	5f747570 	svcpl	0x00747570
     2b0:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
        ser_in(Get_Name, username, NAME_LENGTH);
     2b4:	735f5f00 	cmpvc	pc, #0, 30
     2b8:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
        runfsm blinker;
     2bc:	6177415f 	cmnvs	r7, pc, asr r1
     2c0:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	00706f74 	rsbseq	r6, r0, r4, ror pc
     2c8:	43646572 	cmnmi	r4, #478150656	; 0x1c800000
     2cc:	61726168 	cmnvs	r2, r8, ror #2
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	72657463 	rsbvc	r7, r5, #1660944384	; 0x63000000
     2d4:	65726700 	ldrbvs	r6, [r2, #-1792]!	; 0xfffff900
        if (choice == 'A' || choice == 'a'){
     2d8:	664f6e65 	strbvs	r6, [pc], -r5, ror #28
     2dc:	5f5f0066 	svcpl	0x005f0066
     2e0:	5f737362 	svcpl	0x00737362
            proceed Adjust_Intervals;
     2e4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
            proceed Monitor;
     2e8:	005f5f74 	subseq	r5, pc, r4, ror pc	; <UNPREDICTABLE>
        proceed Show_Menu;
     2ec:	73625f5f 	cmnvc	r2, #380	; 0x17c
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	6e655f73 	mcrvs	15, 3, r5, cr5, cr3, {3}
     2f4:	005f5f64 	subseq	r5, pc, r4, ror #30
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	636f7270 	cmnvs	pc, #112, 4
     2fc:	53737365 	cmnpl	r3, #-1811939327	; 0x94000001
     300:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
        processSettingsInput(settings);
     304:	4973676e 	ldmdbmi	r3!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
        On = YES;
     308:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
     30c:	696c6200 	stmdbvs	ip!, {r9, sp, lr}^
        trigger(&On);
     310:	72656b6e 	rsbvc	r6, r5, #112640	; 0x1b800
        proceed Show_Menu;
     314:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     31c:	666f0073 			; <UNDEFINED> instruction: 0x666f0073
     320:	6d695466 	cfstrdvs	mvd5, [r9, #-408]!	; 0xfffffe68
     324:	5f5f0065 	svcpl	0x005f0065
     328:	616c7473 	smcvs	51011	; 0xc743
     32c:	65535f62 	ldrbvs	r5, [r3, #-3938]	; 0xfffff09e
     330:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
        proceed Show_Menu;
     334:	76726574 			; <UNDEFINED> instruction: 0x76726574
     338:	00736c61 	rsbseq	r6, r3, r1, ror #24
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     340:	5f62616c 	svcpl	0x0062616c
        displayCycle = YES;
     344:	77656956 			; <UNDEFINED> instruction: 0x77656956
        ser_inf(Await_Stop, "%c", &ch);
     348:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
     34c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     350:	5f5f0073 	svcpl	0x005f0073
        if(ch == 'S' || ch == 's'){
     354:	635f6970 	cmpvs	pc, #112, 18	; 0x1c0000
     358:	00727275 	rsbseq	r7, r2, r5, ror r2
     35c:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
            displayCycle = NO;
     360:	0064695f 	rsbeq	r6, r4, pc, asr r9
     364:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
            proceed Show_Menu;
     368:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
        proceed Monitor;
     36c:	73696c5f 	cmnvc	r9, #24320	; 0x5f00
        On = NO;
     370:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
     374:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     378:	63206465 			; <UNDEFINED> instruction: 0x63206465
        leds(1, 0);
     37c:	00726168 	rsbseq	r6, r2, r8, ror #2
     380:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2cc <root+0x3c>
     384:	616d2f65 	cmnvs	sp, r5, ror #30
     388:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     38c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
     390:	706f746b 	rsbvc	r7, pc, fp, ror #8
        leds(0, 0);
     394:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     398:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
     39c:	4349502f 	movtmi	r5, #36911	; 0x902f
        proceed Show_Menu;
     3a0:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     3a4:	3454504d 	ldrbcc	r5, [r4], #-77	; 0xffffffb3
     3a8:	4c5f3436 	cfldrdmi	mvd3, [pc], {54}	; 0x36
     3ac:	00366261 	eorseq	r6, r6, r1, ror #4
        } else if (choice == 'S' || choice == 's') {
     3b0:	69546e6f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
            proceed Stop;
     3b4:	5f00656d 	svcpl	0x0000656d
        } else if (choice == 'V' || choice == 'v') {
     3b8:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
            proceed View_Settings;
     3bc:	415f6261 	cmpmi	pc, r1, ror #4
        } else if (choice == 'M' || choice == 'm') {
     3c0:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
            proceed Monitor;
     3c4:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     3c8:	76726574 			; <UNDEFINED> instruction: 0x76726574
     3cc:	00736c61 	rsbseq	r6, r3, r1, ror #24
     3d0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     3d4:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
     3d8:	65720074 	ldrbvs	r0, [r2, #-116]!	; 0xffffff8c
     3dc:	66664f64 	strbtvs	r4, [r6], -r4, ror #30
     3e0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     3e4:	73726562 	cmnvc	r2, #411041792	; 0x18800000
     3e8:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
     3ec:	00636c62 	rsbeq	r6, r3, r2, ror #24
     3f0:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 2f0 <root+0x60>
     3f4:	006e6165 	rsbeq	r6, lr, r5, ror #2
     3f8:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
     3fc:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
     400:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
     404:	6175006b 	cmnvs	r5, fp, rrx
     408:	745f7472 	ldrbvc	r7, [pc], #-1138	; 410 <devinit_uart+0x4>
static void devinit_uart (int devnum) {
     40c:	735f5f00 	cmpvc	pc, #0, 30
	adddevfunc (ioreq_uart_a, devnum);
     410:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     414:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
void udelay (volatile word n) {
     418:	6f68435f 	svcvs	0x0068435f
     41c:	00656369 	rsbeq	r6, r5, r9, ror #6
	while (n) {
     420:	4664656c 	strbtmi	r6, [r4], -ip, ror #10
     424:	0067616c 	rsbeq	r6, r7, ip, ror #2
}
     428:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
	while (n--);
     42c:	745f7461 	ldrbvc	r7, [pc], #-1121	; 434 <udelay+0x1c>
     430:	65764500 	ldrbvs	r4, [r6, #-1280]!	; 0xfffffb00
     434:	0073746e 	rsbseq	r7, r3, lr, ror #8
		n--;
     438:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     43c:	7865685f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, fp, sp, lr}^
     440:	636e655f 	cmnvs	lr, #398458880	; 0x17c00000
void mdelay (volatile word n) {
     444:	6261745f 	rsbvs	r7, r1, #1593835520	; 0x5f000000
     448:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
	while (n) {
     44c:	6e4f6465 	cdpvs	4, 4, cr6, cr15, cr5, {3}
     450:	73696400 	cmnvc	r9, #0, 8
}
     454:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
		udelay (999);
     458:	6c637943 			; <UNDEFINED> instruction: 0x6c637943
     45c:	6e700065 	cdpvs	0, 7, cr0, cr0, cr5, {3}
		n--;
     460:	65006d75 	strvs	r6, [r0, #-3445]	; 0xfffff28b
     464:	6f72746e 	svcvs	0x0072746e
     468:	66007970 			; <UNDEFINED> instruction: 0x66007970
     46c:	7367616c 	cmnvc	r7, #108, 2
void __pi_ondomain (lword d) {
     470:	6f686300 	svcvs	0x00686300
     474:	00656369 	rsbeq	r6, r5, r9, ror #6
		if (__pi_systat.effpdm > 1)
     478:	636d7366 	cmnvs	sp, #-1744830463	; 0x98000001
     47c:	0065646f 	rsbeq	r6, r5, pc, ror #8
			__pi_systat.effpdm = 1;
     480:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
	PRCMPowerDomainOn (d);
     484:	47007375 	smlsdxmi	r0, r5, r3, r7
     488:	5f4f4950 	svcpl	0x004f4950
     48c:	61656c63 	cmnvs	r5, r3, ror #24
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	6f694472 	svcvs	0x00694472
     494:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     498:	63705f69 	cmnvs	r0, #420	; 0x1a4
	__pi_systat.ondmns |= d;
     49c:	00735f62 	rsbseq	r5, r3, r2, ror #30
     4a0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
}
     4a4:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     4a8:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
void __pi_syserror (word ec, const char *m) {
     4ac:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	72616843 	rsbvc	r6, r1, #4390912	; 0x430000
     4b4:	65746361 	ldrbvs	r6, [r4, #-865]!	; 0xfffffc9f
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	6f720072 	svcvs	0x00720072
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4bc:	5f00746f 	svcpl	0x0000746f
     4c0:	5f69705f 	svcpl	0x0069705f
     4c4:	746e696d 	strbtvc	r6, [lr], #-2413	; 0xfffff693
		all_leds_blink;
     4c8:	6572006b 	ldrbvs	r0, [r2, #-107]!	; 0xffffff95
     4cc:	00746573 	rsbseq	r6, r4, r3, ror r5
     4d0:	4f495047 	svcmi	0x00495047
     4d4:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	7074754f 	rsbsvc	r7, r4, pc, asr #10
     4dc:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
     4e0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     4e4:	006f6944 	rsbeq	r6, pc, r4, asr #18
     4e8:	424e4f41 	submi	r4, lr, #260	; 0x104
     4ec:	6f4d7461 	svcvs	0x004d7461
	while (1) {
     4f0:	616e456e 	cmnvs	lr, lr, ror #10
     4f4:	00656c62 	rsbeq	r6, r5, r2, ror #24
     4f8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     4fc:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
void tci_run_delay_timer () {
     500:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	setdel = __pi_mintk - __pi_old;
     504:	666f5f69 	strbtvs	r5, [pc], -r9, ror #30
     508:	6d6f6466 	cfstrdvs	mvd6, [pc, #-408]!	; 378 <root+0xe8>
     50c:	006e6961 	rsbeq	r6, lr, r1, ror #18
     510:	74746567 	ldrbtvc	r6, [r4], #-1383	; 0xfffffa99
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	75007661 	strvc	r7, [r0, #-1633]	; 0xfffff99f
     518:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     51c:	5f5f0073 	svcpl	0x005f0073
     520:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
	sti_tim;
     528:	77007172 	smlsdxvc	r0, r2, r1, r7
}
     52c:	65726568 	ldrbvs	r6, [r2, #-1384]!	; 0xfffffa98
     530:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     534:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     538:	5f6e7566 	svcpl	0x006e7566
     53c:	4f410074 	svcmi	0x00410074
	cli_aux;
     540:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
     544:	57787541 	ldrbpl	r7, [r8, -r1, asr #10]!
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
     54c:	65764570 	ldrbvs	r4, [r6, #-1392]!	; 0xfffffa90
     550:	4100746e 	tstmi	r0, lr, ror #8
     554:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
	sti_aux;
     558:	776f5043 	strbvc	r5, [pc, -r3, asr #32]!
}
     55c:	74537265 	ldrbvc	r7, [r3], #-613	; 0xfffffd9b
     560:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     564:	00746547 	rsbseq	r6, r4, r7, asr #10
void AONRTCIntHandler () {
     568:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	43746e49 	cmnmi	r4, #1168	; 0x490
     570:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	73797300 	cmnvc	r9, #0, 6
		if (__pi_utims [0] == 0)
     578:	5f6d6574 	svcpl	0x006d6574
     57c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		if (*(__pi_utims [0])) {
     580:	4e4f4100 	dvfmie	f4, f7, f0
     584:	53435557 	movtpl	r5, #13655	; 0x3557
			(*(__pi_utims [0]))--;
     588:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
		if (__pi_utims [1] == 0)
     58c:	456e776f 	strbmi	r7, [lr, #-1903]!	; 0xfffff891
		if (*(__pi_utims [1])) {
     590:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
			aux_timer_inactive = 0;
     594:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
			(*(__pi_utims [1]))--;
     598:	6c656474 	cfstrdvs	mvd6, [r5], #-464	; 0xfffffe30
		if (__pi_utims [2] == 0)
     59c:	43525000 	cmpmi	r2, #0
		if (*(__pi_utims [2])) {
     5a0:	75634d4d 	strbvc	r4, [r3, #-3405]!	; 0xfffff2b3
			(*(__pi_utims [2]))--;
     5a4:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
		if (__pi_utims [3] != 0) {
     5a8:	66664f72 	uqsub16vs	r4, r6, r2
			if (*(__pi_utims [3])) {
     5ac:	735f5f00 	cmpvc	pc, #0, 30
				aux_timer_inactive = 0;
     5b0:	4d5f7465 	cfldrdmi	mvd7, [pc, #-404]	; 424 <udelay+0xc>
				(*(__pi_utims [3]))--;
     5b4:	64005053 	strvs	r5, [r0], #-83	; 0xffffffad
	if (__pi_systat.ledsts) {
     5b8:	6e697665 	cdpvs	6, 6, cr7, cr9, cr5, {3}
     5bc:	745f7469 	ldrbvc	r7, [pc], #-1129	; 5c4 <AONRTCIntHandler+0x5c>
		if (__pi_systat.ledblc++ == 0) {
     5c0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     5c4:	6e6f5f69 	cdpvs	15, 6, cr5, cr15, cr9, {3}
			if (__pi_systat.ledblk) {
     5c8:	616d6f64 	cmnvs	sp, r4, ror #30
     5cc:	55006e69 	strpl	r6, [r0, #-3689]	; 0xfffff197
     5d0:	48545241 	ldmdami	r4, {r0, r6, r9, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	6f6c4677 	svcvs	0x006c4677
     5d8:	6e6f4377 	mcrvs	3, 3, r4, cr15, cr7, {3}
				if (__pi_systat.ledsts & 0x2)
     5dc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 414 <devinit_uart+0x8>
     5e0:	61736944 	cmnvs	r3, r4, asr #18
     5e4:	00656c62 	rsbeq	r6, r5, r2, ror #24
				if (__pi_systat.ledsts & 0x4)
     5e8:	43505f5f 	cmpmi	r0, #380	; 0x17c
				__pi_systat.ledblk = 0;
     5ec:	5f5f0042 	svcpl	0x005f0042
     5f0:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffffc88 <_estack+0xdfffac88>
			if (__pi_systat.fstblk)
     5f4:	5f747261 	svcpl	0x00747261
     5f8:	72746567 	rsbsvc	r6, r4, #432013312	; 0x19c00000
				__pi_systat.ledblc = 200;
     5fc:	00657461 	rsbeq	r7, r5, r1, ror #8
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	494e4f41 	stmdbmi	lr, {r0, r6, r8, r9, sl, fp, lr}^
		cli_tim;
     604:	7246434f 	subvc	r4, r6, #1006632961	; 0x3c000001
		__pi_new += setdel;
     608:	657a6565 	ldrbvs	r6, [sl, #-1381]!	; 0xfffffa9b
     60c:	61736944 	cmnvs	r3, r4, asr #18
		setdel = 0;
     610:	00656c62 	rsbeq	r6, r5, r2, ror #24
		RISE_N_SHINE;
     614:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		__pi_new += setdel;
     618:	654c7852 	strbvs	r7, [ip, #-2130]	; 0xfffff7ae
		RISE_N_SHINE;
     61c:	006c6576 	rsbeq	r6, ip, r6, ror r5
     620:	6f646552 	svcvs	0x00646552
		aux_timer_inactive = 1;
     624:	0078725f 	rsbseq	r7, r8, pc, asr r2
     628:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
				if (__pi_systat.ledsts & 0x1)
     62c:	654c7854 	strbvs	r7, [ip, #-2132]	; 0xfffff7ac
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	006c6576 	rsbeq	r6, ip, r6, ror r5
     634:	43737953 	cmnmi	r3, #1359872	; 0x14c000
				if (__pi_systat.ledsts & 0x2)
     638:	436c7274 	cmnmi	ip, #116, 4	; 0x40000007
     63c:	6b636f6c 	blvs	18dc3f4 <__ccfg+0x18bc44c>
     640:	00746547 	rsbseq	r6, r4, r7, asr #10
				if (__pi_systat.ledsts & 0x8)
     644:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
				__pi_systat.ledblk = 1;
     648:	68636143 	stmdavs	r3!, {r0, r1, r6, r8, sp, lr}^
     64c:	74655265 	strbtvc	r5, [r5], #-613	; 0xfffffd9b
		if (aux_timer_inactive) {
     650:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
			cli_aux;
     654:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
     658:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     65c:	43525000 	cmpmi	r2, #0
     660:	616f4c4d 	cmnvs	pc, sp, asr #24
     664:	74655364 	strbtvc	r5, [r5], #-868	; 0xfffffc9c
     668:	33697500 	cmncc	r9, #0, 10
     66c:	616e4532 	cmnvs	lr, r2, lsr r5
     670:	00656c62 	rsbeq	r6, r5, r2, ror #24
     674:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
     678:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 114 <_Min_Stack_Size+0x14>
word tci_update_delay_ticks (Boolean force) {
     67c:	5f747261 	svcpl	0x00747261
	cli_tim;
     680:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     684:	70757272 	rsbsvc	r7, r5, r2, ror r2
	if (setdel) {
     688:	55007374 	strpl	r7, [r0, #-884]	; 0xfffffc8c
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	454f4649 	strbmi	r4, [pc, #-1609]	; 4f <g_pfnVectors+0x4f>
     694:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     698:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69c:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
				AON_RTC_O_CH0CMP)) - gettav ());
     6a0:	616c4674 	smcvs	50276	; 0xc464
	return NO;
     6a4:	5f007367 	svcpl	0x00007367
			setdel = 0;
     6a8:	5f69705f 	svcpl	0x0069705f
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     6b0:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
}
     6b4:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
		sti_tim;
     6b8:	776f5000 	strbvc	r5, [pc, -r0]!
		return YES;
     6bc:	74437265 	strbvc	r7, [r3], #-613	; 0xfffffd9b
     6c0:	4f496c72 	svcmi	0x00496c72
     6c4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     6c8:	6944657a 	stmdbvs	r4, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
	UARTDisable (UART0_BASE);
     6d0:	52500065 	subspl	r0, r0, #101	; 0x65
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	61434d43 	cmpvs	r3, r3, asr #26
	UARTDisable (UART0_BASE);
     6d8:	52656863 	rsbpl	r6, r5, #6488064	; 0x630000
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	6e657465 	cdpvs	4, 6, cr7, cr5, cr5, {3}
     6e0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     6e4:	61736944 	cmnvs	r3, r4, asr #18
     6e8:	00656c62 	rsbeq	r6, r5, r2, ror #24
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	70746573 	rsbsvc	r6, r4, r3, ror r5
     6f0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
     6f4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	65706f00 	ldrbvs	r6, [r0, #-3840]!	; 0xfffff100
     6fc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     700:	61006e6f 	tstvs	r0, pc, ror #28
	urates [0] = rate;
     704:	745f7875 	ldrbvc	r7, [pc], #-2165	; 70c <__pi_uart_setrate+0x40>
}
     708:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     70c:	616e695f 	cmnvs	lr, pc, asr r9
     710:	76697463 	strbtvc	r7, [r9], -r3, ror #8
     714:	6f700065 	svcvs	0x00700065
     718:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
     71c:	73666e6f 	cmnvc	r6, #1776	; 0x6f0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
     724:	78745f6f 	ldmdavc	r4!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     728:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	6c6f5f69 	stclvs	15, cr5, [pc], #-420	; 590 <AONRTCIntHandler+0x28>
     730:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	6e493233 	mcrvs	2, 2, r3, cr9, cr3, {1}
     738:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	75006575 	strvc	r6, [r0, #-1397]	; 0xfffffa8b
     740:	42323369 	eorsmi	r3, r2, #-1543503871	; 0xa4000001
     744:	00657361 	rsbeq	r7, r5, r1, ror #6
     748:	6f645f5f 	svcvs	0x00645f5f
     74c:	6966775f 	stmdbvs	r6!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     750:	5f73615f 	svcpl	0x0073615f
     754:	6465656e 	strbtvs	r6, [r5], #-1390	; 0xfffffa92
	switch (operation) {
     758:	41006465 	tstmi	r0, r5, ror #8
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
     760:	636e4943 	cmnvs	lr, #1097728	; 0x10c000
     764:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     768:	32684365 	rsbcc	r4, r8, #-1811939327	; 0x94000001
     76c:	00746553 	rsbseq	r6, r4, r3, asr r5
				*buf++ = uart_a_read;
     770:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
     774:	00737365 	rsbseq	r7, r3, r5, ror #6
			while (len && uart_a_char_available) {
     778:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     77c:	5f74696e 	svcpl	0x0074696e
     780:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
			if (len != operation) {
     784:	4e4f4100 	dvfmie	f4, f7, f0
}
     788:	49435452 	stmdbmi	r3, {r1, r4, r6, sl, ip, lr}^
     78c:	6148746e 	cmpvs	r8, lr, ror #8
			uart_a_disable_int;
     790:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
			if (uart_a_char_available) {
     794:	61700072 	cmnvs	r0, r2, ror r0
				*buf++ = uart_a_read;
     798:	006d6172 	rsbeq	r6, sp, r2, ror r1
			uart_a_disable_int;
     79c:	5f696374 	svcpl	0x00696374
     7a0:	5f6e7572 	svcpl	0x006e7572
			if (uart_a_char_available) {
     7a4:	616c6564 	cmnvs	ip, r4, ror #10
     7a8:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
				uart_a_enable_int;
     7ac:	0072656d 	rsbseq	r6, r2, sp, ror #10
     7b0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
				goto Redo_rx;
     7b4:	6c65725f 	sfmvs	f7, 2, [r5], #-380	; 0xfffffe84
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
     7bc:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
			return -2;
     7c0:	7270006f 	rsbsvc	r0, r0, #111	; 0x6f
     7c4:	696e6965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, sp, lr}^
				uart_a_write (*buf);
     7c8:	61755f74 	cmnvs	r5, r4, ror pc
     7cc:	66007472 			; <UNDEFINED> instruction: 0x66007472
			while (len && uart_a_room_in_tx) {
     7d0:	6563726f 	strbvs	r7, [r3, #-623]!	; 0xfffffd91
     7d4:	52415500 	subpl	r5, r1, #0, 10
     7d8:	616e4554 	cmnvs	lr, r4, asr r5
			if (len != operation) {
     7dc:	00656c62 	rsbeq	r6, r5, r2, ror #24
			uart_a_disable_int;
     7e0:	4f495047 	svcmi	0x00495047
     7e4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
			if (uart_a_room_in_tx) {
     7e8:	76457261 	strbvc	r7, [r5], -r1, ror #4
     7ec:	44746e65 	ldrbtmi	r6, [r4], #-3685	; 0xfffff19b
				uart_a_enable_int;
     7f0:	5f006f69 	svcpl	0x00006f69
     7f4:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
				*buf++ = uart_a_read;
     7f8:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
			if (uart_a_room_in_tx) {
     7fc:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
				uart_a_write (*buf);
     800:	00717269 	rsbseq	r7, r1, r9, ror #4
     804:	6c65646d 	cfstrdvs	mvd6, [r5], #-436	; 0xfffffe4c
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	5f007961 	svcpl	0x00007961
     80c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
			uart_a_enable_int;
     810:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     814:	7172695f 	cmnvc	r2, pc, asr r9
     818:	73795300 	cmnvc	r9, #0, 6
			return 0;
     81c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
			if (len == UART_CNTRL_SETRATE) {
     820:	536e6f41 	cmnpl	lr, #260	; 0x104
				if (__pi_uart_setrate (*((word*)buf),
     824:	00636e79 	rsbeq	r6, r3, r9, ror lr
     828:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     82c:	6174735f 	cmnvs	r4, pc, asr r3
				syserror (EREQPAR, "uar");
     830:	72666b63 	rsbvc	r6, r6, #101376	; 0x18c00
			syserror (ENOOPER, "uai");
     834:	74006565 	strvc	r6, [r0], #-1381	; 0xfffffa9b
			if (len == UART_CNTRL_GETRATE) {
     838:	725f6963 	subsvc	r6, pc, #1622016	; 0x18c000
				return 1;
     83c:	615f6e75 	cmpvs	pc, r5, ror lr	; <UNPREDICTABLE>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	6c697875 	stclvs	8, cr7, [r9], #-468	; 0xfffffe2c
			syserror (ENOOPER, "uai");
     844:	79726169 	ldmdbvc	r2!, {r0, r3, r5, r6, r8, sp, lr}^
     848:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
     84c:	5f007265 	svcpl	0x00007265
     850:	6e69705f 	mcrvs	0, 3, r7, cr9, cr15, {2}
     854:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     858:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
     85c:	00717269 	rsbseq	r7, r1, r9, ror #4
     860:	4f495047 	svcmi	0x00495047
     864:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
void UART0IntHandler () {
     86c:	55007265 	strpl	r7, [r0, #-613]	; 0xfffffd9b
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	46545241 	ldrbmi	r5, [r4], -r1, asr #4
     874:	4c4f4649 	mcrrmi	6, 4, r4, pc, cr9
     878:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
     87c:	00746553 	rsbseq	r6, r4, r3, asr r5
     880:	43737953 	cmnmi	r3, #1359872	; 0x14c000
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
     888:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
		RISE_N_SHINE;
     88c:	7365526d 	cmnvc	r5, #-805306362	; 0xd0000006
     890:	73007465 	movwvc	r7, #1125	; 0x465
		i_trigger (devevent (UART_A, READ));
     894:	61747465 	cmnvs	r4, r5, ror #8
     898:	76650076 			; <UNDEFINED> instruction: 0x76650076
     89c:	73746e65 	cmnvc	r4, #1616	; 0x650
     8a0:	65647500 	strbvs	r7, [r4, #-1280]!	; 0xfffffb00
     8a4:	0079616c 	rsbseq	r6, r9, ip, ror #2
     8a8:	424e4f41 	submi	r4, lr, #260	; 0x104
     8ac:	6f4d7461 	svcvs	0x004d7461
     8b0:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
     8b4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     8b8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     8bc:	656e5f69 	strbvs	r5, [lr, #-3945]!	; 0xfffff097
     8c0:	5f5f0077 	svcpl	0x005f0077
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	625f6970 	subsvs	r6, pc, #112, 18	; 0x1c0000
     8c8:	6f6d7461 	svcvs	0x006d7461
     8cc:	4f41006e 	svcmi	0x0041006e
		i_trigger (devevent (UART_A, WRITE));
     8d0:	434f494e 	movtmi	r4, #63822	; 0xf94e
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     8d8:	6e45657a 	mcrvs	5, 2, r6, cr5, cr10, {3}
		RISE_N_SHINE;
     8dc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     8e0:	4e4f4100 	dvfmie	f4, f7, f0
     8e4:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
		i_trigger (devevent (UART_A, WRITE));
     8e8:	61426e6f 	cmpvs	r2, pc, ror #28
     8ec:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     8f0:	6c6f5679 	stclvs	6, cr5, [pc], #-484	; 714 <__pi_uart_setrate+0x48>
     8f4:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
     8f8:	00746547 	rsbseq	r6, r4, r7, asr #10
     8fc:	65726f69 	ldrbvs	r6, [r2, #-3945]!	; 0xfffff097
     900:	61755f71 	cmnvs	r5, r1, ror pc
     904:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
     908:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     90c:	74755f69 	ldrbtvc	r5, [r5], #-3945	; 0xfffff097
     910:	00736d69 	rsbseq	r6, r3, r9, ror #26
}
     914:	746e6973 	strbtvc	r6, [lr], #-2419	; 0xfffff68d
     918:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
     91c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     920:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     924:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
void __buttons_setirq (int val) {
     928:	72726573 	rsbsvc	r6, r2, #482344960	; 0x1cc00000
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	6400726f 	strvs	r7, [r0], #-623	; 0xfffffd91
     930:	756e7665 	strbvc	r7, [lr, #-1637]!	; 0xfffff99b
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	682f006d 	stmdavs	pc!, {r0, r2, r3, r5, r6}	; <UNPREDICTABLE>
     938:	2f656d6f 	svccs	0x00656d6f
     93c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
		bn = BUTTON_GPIO (__button_list [i]);
     940:	442f6e69 	strtmi	r6, [pc], #-3689	; 948 <__buttons_setirq+0x20>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     948:	4f2f706f 	svcmi	0x002f706f
     94c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     950:	502f5445 	eorpl	r5, pc, r5, asr #8
     954:	534f4349 	movtpl	r4, #62281	; 0xf349
     958:	6369502f 	cmnvs	r9, #47	; 0x2f
}
     95c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     960:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     964:	616d2f58 	cmnvs	sp, r8, asr pc
     968:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
void __pinlist_setirq (int val) {
     96c:	33697500 	cmncc	r9, #0, 10
	for (i = 0; i < N_PINLIST; i++) {
     970:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	74746142 	ldrbtvc	r6, [r4], #-322	; 0xfffffebe
	for (i = 0; i < N_PINLIST; i++) {
     97c:	00797265 	rsbseq	r7, r9, r5, ror #4
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     984:	45746e49 	ldrbmi	r6, [r4, #-3657]!	; 0xfffff1b7
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     988:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     98c:	52500065 	subspl	r0, r0, #101	; 0x65
     990:	634d4d43 	movtvs	r4, #56643	; 0xdd43
	for (i = 0; i < N_PINLIST; i++) {
     994:	646c5575 	strbtvs	r5, [ip], #-1397	; 0xfffffa8b
}
     998:	6e6f436f 	cdpvs	3, 6, cr4, cr15, cr15, {3}
     99c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
     9a0:	6f006572 	svcvs	0x00006572
     9a4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
void GPIOIntHandler () {
     9a8:	616e4574 	smcvs	58452	; 0xe454
if (buttons_int) {
     9ac:	56656c62 	strbtpl	r6, [r5], -r2, ror #24
     9b0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	buttons_disable ();
     9b4:	6c616800 	stclvs	8, cr6, [r1], #-0
     9b8:	6f740074 	svcvs	0x00740074
	i_trigger ((aword)&__button_list);
     9bc:	4d664f70 	stclmi	15, cr4, [r6, #-448]!	; 0xfffffe40
     9c0:	536e6961 	cmnpl	lr, #1589248	; 0x184000
     9c4:	6b636174 	blvs	18d8f9c <__ccfg+0x18b8ff4>
     9c8:	64675f00 	strbtvs	r5, [r7], #-3840	; 0xfffff100
     9cc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     9d0:	52415500 	subpl	r5, r1, #0, 10
     9d4:	6e493054 	mcrvs	0, 2, r3, cr9, cr4, {2}
     9d8:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     9dc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     9e0:	65654400 	strbvs	r4, [r5, #-1024]!	; 0xfffffc00
     9e4:	656c5370 	strbvs	r5, [ip, #-880]!	; 0xfffffc90
	RISE_N_SHINE;
     9e8:	70007065 	andvc	r7, r0, r5, rrx
     9ec:	5f74726f 	svcpl	0x0074726f
     9f0:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
if (pin_sensor_int) {
     9f4:	74006769 	strvc	r6, [r0], #-1897	; 0xfffff897
     9f8:	755f6963 	ldrbvc	r6, [pc, #-2403]	; 9d <g_pfnVectors+0x9d>
	i_trigger ((aword)(&__input_pins));
     9fc:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     a00:	65645f65 	strbvs	r5, [r4, #-3941]!	; 0xfffff09b
     a04:	5f79616c 	svcpl	0x0079616c
     a08:	6b636974 	blvs	18dafe0 <__ccfg+0x18bb038>
     a0c:	654d0073 	strbvs	r0, [sp, #-115]	; 0xffffff8d
     a10:	72757361 	rsbsvc	r7, r5, #-2080374783	; 0x84000001
     a14:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
     a18:	71657276 	smcvc	22310	; 0x5726
     a1c:	5f6e7566 	svcpl	0x006e7566
     a20:	696b0074 	stmdbvs	fp!, {r2, r4, r5, r6}^
     a24:	76656c6c 	strbtvc	r6, [r5], -ip, ror #24
	__pinsen_disable_and_clear;
     a28:	705f5f00 	subsvc	r5, pc, r0, lsl #30
	RISE_N_SHINE;
     a2c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     a30:	79706372 	ldmdbvc	r0!, {r1, r4, r5, r6, r8, r9, sp, lr}^
     a34:	705f5f00 	subsvc	r5, pc, r0, lsl #30
}
     a38:	616d5f69 	cmnvs	sp, r9, ror #30
     a3c:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     a40:	776e7500 	strbvc	r7, [lr, -r0, lsl #10]!
     a44:	00746961 	rsbseq	r6, r4, r1, ror #18
     a48:	65726671 	ldrbvs	r6, [r2, #-1649]!	; 0xfffff98f
void system_init () {
     a4c:	6f690065 	svcvs	0x00690065
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	00716572 	rsbseq	r6, r1, r2, ror r5
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a54:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
     a5c:	696b006b 	stmdbvs	fp!, {r0, r1, r3, r5, r6}^
     a60:	6d006c6c 	stcvs	12, cr6, [r0, #-432]	; 0xfffffe50
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a64:	6c6f6f70 	stclvs	15, cr6, [pc], #-448	; 8ac <UART0IntHandler+0x44>
     a68:	5f5f0073 	svcpl	0x005f0073
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a6c:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
     a70:	00747369 	rsbseq	r7, r4, r9, ror #6
     a74:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	615f7265 	cmpvs	pc, r5, ror #4
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a7c:	55006464 	strpl	r6, [r0, #-1124]	; 0xfffffb9c
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a80:	42545241 	subsmi	r5, r4, #268435460	; 0x10000004
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a84:	00797375 	rsbseq	r7, r9, r5, ror r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8c:	6c616d5f 	stclvs	13, cr6, [r1], #-380	; 0xfffffe84
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	5f636f6c 	svcpl	0x00636f6c
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		pin = (port_confs [i] >> 19) & 0x1f;
     a98:	6f682f00 	svcvs	0x00682f00
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 8f0 <UART0IntHandler+0x88>
     aa0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
     aa4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     aa8:	6f746b73 	svcvs	0x00746b73
		if (port_confs [i] & 0x80)
     aac:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     ab4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		if (port_confs [i] & 0x40)
     ab8:	2f534f43 	svccs	0x00534f43
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	4f636950 	svcmi	0x00636950
     ac0:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
	all_leds_blink;
     ad0:	5f5f0063 	svcpl	0x005f0063
     ad4:	745f6970 	ldrbvc	r6, [pc], #-2416	; adc <system_init+0x90>
     ad8:	67676972 			; <UNDEFINED> instruction: 0x67676972
     adc:	5f007265 	svcpl	0x00007265
     ae0:	5f69705f 	svcpl	0x0069705f
     ae4:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
     ae8:	5f006e65 	svcpl	0x00006e65
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aec:	5f69705f 	svcpl	0x0069705f
     af0:	6678616d 	ldrbtvs	r6, [r8], -sp, ror #2
     af4:	00656572 	rsbeq	r6, r5, r2, ror r5
     af8:	6e757263 	cdpvs	2, 7, cr7, cr5, cr3, {3}
     afc:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	68636e00 	stmdavs	r3!, {r9, sl, fp, sp, lr}^
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	6e6d006b 	cdpvs	0, 6, cr0, cr13, cr11, {3}
     b08:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
	IntEnable (INT_AON_RTC_COMB);
     b0c:	6f727000 	svcvs	0x00727000
     b10:	64656563 	strbtvs	r6, [r5], #-1379	; 0xfffffa9d
     b14:	656c6d00 	strbvs	r6, [ip, #-3328]!	; 0xfffff300
	__pi_malloc_init ();
     b18:	5f5f006e 	svcpl	0x005f006e
	IntEnable (INT_AON_GPIO_EDGE);
     b1c:	705f6970 	subsvc	r6, pc, r0, ror r9	; <UNPREDICTABLE>
     b20:	67697274 			; <UNDEFINED> instruction: 0x67697274
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	00726567 	rsbseq	r6, r2, r7, ror #10
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b28:	64646461 	strbtvs	r6, [r4], #-1121	; 0xfffffb9f
     b2c:	75667665 	strbvc	r7, [r6, #-1637]!	; 0xfffff99b
     b30:	7000636e 	andvc	r6, r0, lr, ror #6
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	65766469 	ldrbvs	r6, [r6, #-1129]!	; 0xfffffb97
     b38:	69640072 	stmdbvs	r4!, {r1, r4, r5, r6}^
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	5f006761 	svcpl	0x00006761
     b40:	5f69705f 	svcpl	0x0069705f
     b44:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
	urates [0] = UART_RATE / 100;
     b48:	6d007461 	cfstrsvs	mvf7, [r0, #-388]	; 0xfffffe7c
     b4c:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
	reinit_uart ();
     b50:	00745f74 	rsbseq	r5, r4, r4, ror pc
	EXTRA_INITIALIZERS;
     b54:	6e675f5f 	mcrvs	15, 3, r5, cr7, cr15, {2}
     b58:	765f6375 			; <UNDEFINED> instruction: 0x765f6375
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b5c:	696c5f61 	stmdbvs	ip!, {r0, r5, r6, r8, r9, sl, fp, ip, lr}^
     b60:	6d007473 	cfstrsvs	mvf7, [r0, #-460]	; 0xfffffe34
     b64:	65726663 	ldrbvs	r6, [r2, #-1635]!	; 0xfffff99d
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b68:	61770065 	cmnvs	r7, r5, rrx
     b6c:	00657473 	rsbeq	r7, r5, r3, ror r4
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b70:	72746572 	rsbsvc	r6, r4, #478150656	; 0x1c800000
     b74:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
			devinit [i] . init (devinit [i] . param);
     b78:	6d007473 	cfstrsvs	mvf7, [r0, #-460]	; 0xfffffe34
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	00737365 	rsbseq	r7, r3, r5, ror #6
     b80:	6576656d 	ldrbvs	r6, [r6, #-1389]!	; 0xfffffa93
     b84:	5f00746e 	svcpl	0x0000746e
	IntEnable (INT_UART0_COMB);
     b88:	5f69705f 	svcpl	0x0069705f
     b8c:	73646162 	cmnvc	r4, #-2147483624	; 0x80000018
}
     b90:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
	tci_run_auxiliary_timer ();
     b94:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		diag ("");
     b98:	61775f69 	cmnvs	r7, r9, ror #30
     b9c:	5f007469 	svcpl	0x00007469
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     ba0:	5f69705f 	svcpl	0x0069705f
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
		diag ("Leftover RAM: %d bytes",
     ba8:	006d656d 	rsbeq	r6, sp, sp, ror #10
     bac:	646e726c 	strbtvs	r7, [lr], #-620	; 0xfffffd94
     bb0:	6c696b00 			; <UNDEFINED> instruction: 0x6c696b00
     bb4:	6c6c616c 	stfvse	f6, [ip], #-432	; 0xfffffe50
     bb8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     bbc:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
     bc0:	6572666d 	ldrbvs	r6, [r2, #-1645]!	; 0xfffff993
     bc4:	425f0065 	subsmi	r0, pc, #101	; 0x65
     bc8:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     bcc:	6e756863 	cdpvs	8, 7, cr6, cr5, cr3, {3}
     bd0:	7075006b 	rsbsvc	r0, r5, fp, rrx
     bd4:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
     bd8:	775f6e5f 			; <UNDEFINED> instruction: 0x775f6e5f
     bdc:	00656b61 	rsbeq	r6, r5, r1, ror #22
     be0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     be4:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
     be8:	65670064 	strbvs	r0, [r7, #-100]!	; 0xffffff9c
     bec:	646f6374 	strbtvs	r6, [pc], #-884	; bf4 <system_init+0x1a8>
     bf0:	6c640065 	stclvs	0, cr0, [r4], #-404	; 0xfffffe6c
     bf4:	00746665 	rsbseq	r6, r4, r5, ror #12
     bf8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     bfc:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
     c00:	00797063 	rsbseq	r7, r9, r3, rrx
__attribute__ ((noreturn)) void __pi_release () {
     c04:	756f6764 	strbvc	r6, [pc, #-1892]!	; 4a8 <__pi_ondomain+0x38>
     c08:	5f5f0074 	svcpl	0x005f0074
     c0c:	5f007061 	svcpl	0x00007061
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c10:	5f69705f 	svcpl	0x0069705f
	check_stack_overflow;
     c14:	6d697475 	cfstrdvs	mvd7, [r9, #-468]!	; 0xfffffe2c
     c18:	735f7265 	cmpvc	pc, #1342177286	; 0x50000006
     c1c:	77007465 	strvc	r7, [r0, -r5, ror #8]
	update_n_wake (MAX_WORD, NO);
     c20:	006e7566 	rsbeq	r7, lr, r6, ror #10
     c24:	6961666e 	stmdbvs	r1!, {r1, r2, r3, r5, r6, r9, sl, sp, lr}^
     c28:	5f5f006c 	svcpl	0x005f006c
	for_all_tasks (__pi_curr) {
     c2c:	665f6970 			; <UNDEFINED> instruction: 0x665f6970
     c30:	00656572 	rsbeq	r6, r5, r2, ror r5
     c34:	535f4944 	cmppl	pc, #68, 18	; 0x110000
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	5f004749 	svcpl	0x00004749
	__SLEEP;
     c3c:	5f69705f 	svcpl	0x0069705f
     c40:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
     c44:	5f007465 	svcpl	0x00007465
     c48:	5f69705f 	svcpl	0x0069705f
	system_event_count ++;
     c4c:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
     c50:	00797063 	rsbseq	r7, r9, r3, rrx
	switch (__pi_systat.effpdm) {
     c54:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c58:	696f6a5f 	stmdbvs	pc!, {r0, r1, r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
     c5c:	7475006e 	ldrbtvc	r0, [r5], #-110	; 0xffffff92
     c60:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
			__WFI ();
     c64:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     c68:	00657465 	rsbeq	r7, r5, r5, ror #8
     c6c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
	check_stack_overflow;
     c70:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     c74:	7461636e 	strbtvc	r6, [r1], #-878	; 0xfffffc92
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c78:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     c7c:	6973715f 	ldmdbvs	r3!, {r0, r1, r2, r3, r4, r6, r8, ip, sp, lr}^
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	7000657a 	andvc	r6, r0, sl, ror r5
			goto Redo;
     c84:	00766572 	rsbseq	r6, r6, r2, ror r5
	for_all_tasks (__pi_curr) {
     c88:	63745f5f 	cmnvs	r4, #380	; 0x17c
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	61625f76 	smcvs	9718	; 0x25f6
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	5f727474 	svcpl	0x00727474
     c94:	63740074 	cmnvs	r4, #116	; 0x74
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     c9c:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
     ca0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
     ca8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; ae0 <system_init+0x94>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	6f682f00 	svcvs	0x00682f00
     cb0:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; b04 <system_init+0xb8>
			__WFI ();
     cb4:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb8:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     cbc:	6f746b73 	svcvs	0x00746b73
}
     cc0:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cc4:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc8:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	2f534f43 	svccs	0x00534f43
     cd0:	4f636950 	svcmi	0x00636950
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd4:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
     cd8:	2f736269 	svccs	0x00736269
     cdc:	74654e56 	strbtvc	r4, [r5], #-3670	; 0xfffff1aa
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	63742f49 	cmnvs	r4, #292	; 0x124
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	00632e76 	rsbeq	r2, r3, r6, ror lr
     ce8:	70766374 	rsbsvc	r6, r6, r4, ror r3
     cec:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
     cf0:	65736f70 	ldrbvs	r6, [r3, #-3952]!	; 0xfffff090
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     cf8:	5f796870 	svcpl	0x00796870
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	00676572 	rsbeq	r6, r7, r2, ror r5
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d00:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
     d04:	72746300 	rsbsvc	r6, r4, #0, 6
     d08:	6e75666c 	cdpvs	6, 7, cr6, cr5, cr12, {3}
     d0c:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
     d10:	6c707663 	ldclvs	6, cr7, [r0], #-396	; 0xfffffe74
			SysCtrlSetRechargeBeforePowerDown
     d14:	745f6775 	ldrbvc	r6, [pc], #-1909	; d1c <__pi_release+0x118>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d18:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	5f796870 	svcpl	0x00796870
     d20:	00746567 	rsbseq	r6, r4, r7, ror #10
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	5f766374 	svcpl	0x00766374
     d28:	6f666e69 	svcvs	0x00666e69
     d2c:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	65706f5f 	ldrbvs	r6, [r0, #-3935]!	; 0xfffff0a1
     d34:	6374006e 	cmnvs	r4, #110	; 0x6e
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	72645f76 	rsbvc	r5, r4, #472	; 0x1d8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	7000706f 	andvc	r7, r0, pc, rrx
     d40:	69737968 	ldmdbvs	r3!, {r3, r5, r6, r8, fp, ip, sp, lr}^
     d44:	006f666e 	rsbeq	r6, pc, lr, ror #12
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d48:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xfffff29b
			while (!(AONWUCPowerStatusGet () &
     d4c:	63740079 	cmnvs	r4, #121	; 0x79
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     d54:	6172655f 	cmnvs	r2, pc, asr r5
     d58:	74006573 	strvc	r6, [r0], #-1395	; 0xfffffa8d
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	5f707663 	svcpl	0x00707663
     d60:	61747461 	cmnvs	r4, r1, ror #8
     d64:	6f006863 	svcvs	0x00006863
     d68:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	5f007365 	svcpl	0x00007365
     d70:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	7469715f 	strbtvc	r7, [r9], #-351	; 0xfffffea1
     d78:	735f6d65 	cmpvc	pc, #6464	; 0x1940
			SysCtrlAdjustRechargeAfterPowerDown ();
     d7c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; d84 <__pi_release+0x180>
			reinit_uart ();
     d80:	715f7663 	cmpvc	pc, r3, ror #12
     d84:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
     d88:	5f00745f 	svcpl	0x0000745f
}
     d8c:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d90:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
     d94:	5f6b636f 	svcpl	0x006b636f
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	74610074 	strbtvc	r0, [r1], #-116	; 0xffffff8c
     d9c:	75007074 	strvc	r7, [r0, #-116]	; 0xffffff8c
     da0:	6e656772 	mcrvs	7, 3, r6, cr5, cr2, {3}
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	61760074 	cmnvs	r6, r4, ror r0
     da8:	0065756c 	rsbeq	r7, r5, ip, ror #10
     dac:	725f7245 	subsvc	r7, pc, #1342177284	; 0x50000004
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     db0:	63740074 	cmnvs	r4, #116	; 0x74
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dbc:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     dc0:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	63740073 	cmnvs	r4, #115	; 0x73
     dc8:	72655f76 	rsbvc	r5, r5, #472	; 0x1d8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	00657361 	rsbeq	r7, r5, r1, ror #6
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd0:	5f766374 	svcpl	0x00766374
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd4:	70646e65 	rsbvc	r6, r4, r5, ror #28
     dd8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
			PRCMPowerDomainOff (
     ddc:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
     de0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	__SLEEP;
     de4:	656e5f70 	strbvs	r5, [lr, #-3952]!	; 0xfffff090
     de8:	71720077 	cmnvc	r2, r7, ror r0
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
	goto Redo;
     df0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     df4:	746d745f 	strbtvc	r7, [sp], #-1119	; 0xfffffba1
     df8:	72747000 	rsbsvc	r7, r4, #0
     dfc:	6f700073 	svcvs	0x00700073
     e00:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
     e04:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
     e08:	775f7663 	ldrbvc	r7, [pc, -r3, ror #12]
     e0c:	0073706e 	rsbseq	r7, r3, lr, rrx
     e10:	5f766374 	svcpl	0x00766374
     e14:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
     e18:	63740065 	cmnvs	r4, #101	; 0x65
     e1c:	63725f76 	cmnvs	r2, #472	; 0x1d8
     e20:	63740076 	cmnvs	r4, #118	; 0x76
     e24:	6c635f76 	stclvs	15, cr5, [r3], #-472	; 0xfffffe28
     e28:	0065736f 	rsbeq	r7, r5, pc, ror #6
     e2c:	63745f5f 	cmnvs	r4, #380	; 0x17c
     e30:	65735f76 	ldrbvs	r5, [r3, #-3958]!	; 0xfffff08a
     e34:	73656473 	cmnvc	r5, #1929379840	; 0x73000000
     e38:	00745f63 	rsbseq	r5, r4, r3, ror #30
     e3c:	73796870 	cmnvc	r9, #112, 16	; 0x700000
     e40:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
     e44:	61636973 	smcvs	13971	; 0x3693
     e48:	6174006c 	cmnvs	r4, ip, rrx
     e4c:	71006c69 	tstvc	r0, r9, ror #24
     e50:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     e54:	63740064 	cmnvs	r4, #100	; 0x64
     e58:	65725f76 	ldrbvs	r5, [r2, #-3958]!	; 0xfffff08a
int main (void) {
     e5c:	74006461 	strvc	r6, [r0], #-1121	; 0xfffffb9f
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	695f7663 	ldmdbvs	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     e64:	0074696e 	rsbseq	r6, r4, lr, ror #18
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	5f766374 	svcpl	0x00766374
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	006d7266 	rsbeq	r7, sp, r6, ror #4
	system_init ();
     e70:	73736573 	cmnvc	r3, #482344960	; 0x1cc00000
	tcv_init ();
     e74:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e78:	70766374 	rsbsvc	r6, r6, r4, ror r3
     e7c:	6f6c635f 	svcvs	0x006c635f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	7400656e 	strvc	r6, [r0], #-1390	; 0xfffffa92
     e84:	5f707663 	svcpl	0x00707663
     e88:	69737361 	ldmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	70006e67 	andvc	r6, r0, r7, ror #28
     e90:	0064696c 	rsbeq	r6, r4, ip, ror #18
	delay (16, 0);
     e94:	70766374 	rsbsvc	r6, r6, r4, ror r3
     e98:	655f7968 	ldrbvs	r7, [pc, #-2408]	; 538 <tci_run_delay_timer+0x38>
     e9c:	6100646e 	tstvs	r0, lr, ror #8
	__pi_release ();
     ea0:	61707474 	cmnvs	r0, r4, ror r4
     ea4:	72657474 	rsbvc	r7, r5, #116, 8	; 0x74000000
     ea8:	6374006e 	cmnvs	r4, #110	; 0x6e
     eac:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
     eb0:	63740065 	cmnvs	r4, #101	; 0x65
     eb4:	6d785f76 	ldclvs	15, cr5, [r8, #-472]!	; 0xfffffe28
     eb8:	63740074 	cmnvs	r4, #116	; 0x74
static void killev (__pi_pcb_t *pid) {
     ebc:	70646176 	rsbvc	r6, r4, r6, ror r1
	wfun = (aword)(pid->code);
     ec0:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
	for_all_tasks (i) {
     ec4:	705f7663 	subsvc	r7, pc, r3, ror #12
		for (j = 0; j < nevents (i); j++) {
     ec8:	0067756c 	rsbeq	r7, r7, ip, ror #10
     ecc:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     ed0:	74746100 	ldrbtvc	r6, [r4], #-256	; 0xffffff00
			    || i->Events [j] . Event == wfun
     ed4:	75626972 	strbvc	r6, [r2, #-2418]!	; 0xfffff68e
		for (j = 0; j < nevents (i); j++) {
     ed8:	00736574 	rsbseq	r6, r3, r4, ror r5
			if (i->Events [j] . Event == (aword)pid
     edc:	63745f5f 	cmnvs	r4, #380	; 0x17c
     ee0:	68715f76 	ldmdavs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     ee4:	5f646165 	svcpl	0x00646165
				wakeupev (i, j);
     ee8:	6c700074 	ldclvs	0, cr0, [r0], #-464	; 0xfffffe30
     eec:	6e696775 	mcrvs	7, 3, r6, cr9, cr5, {3}
	for_all_tasks (i) {
     ef0:	6e656c00 	cdpvs	12, 6, cr6, cr5, cr0, {0}
}
     ef4:	00687467 	rsbeq	r7, r8, r7, ror #8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	70736964 	rsbsvc	r6, r3, r4, ror #18
static void qfree (aword *ch) {
     efc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f00:	706e725f 	rsbvc	r7, lr, pc, asr r2
	cc = (aword*)(mpools + MA_NP);
     f04:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
	m_setnextp (ch, chunk);
     f08:	5f796870 	svcpl	0x00796870
	m_setnextp (cc, ch);
     f0c:	00766372 	rsbseq	r6, r6, r2, ror r3
}
     f10:	65757162 	ldrbvs	r7, [r5, #-354]!	; 0xfffffe9e
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	70006575 	andvc	r6, r0, r5, ror r5
     f18:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     f1c:	5f00736e 	svcpl	0x0000736e
			m_setnextp (cc, m_nextp (chunk));
     f20:	7663745f 			; <UNDEFINED> instruction: 0x7663745f
			m_size (chunk) += m_hdrlen + m_size (ch);
     f24:	6c62685f 	stclvs	8, cr6, [r2], #-380	; 0xfffffe84
     f28:	5f6b636f 	svcpl	0x006b636f
     f2c:	756f0073 	strbvc	r0, [pc, #-115]!	; ec1 <killev+0x5>
     f30:	696f6774 	stmdbvs	pc!, {r2, r4, r5, r6, r8, r9, sl, sp, lr}^	; <UNPREDICTABLE>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	7400676e 	strvc	r6, [r0], #-1902	; 0xfffff892
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	5f707663 	svcpl	0x00707663
     f3c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
     f40:	006c6f72 	rsbeq	r6, ip, r2, ror pc
			m_setnextp (cc, m_nextp (chunk));
     f44:	7473655f 	ldrbtvc	r6, [r3], #-1375	; 0xfffffaa1
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	006b6361 	rsbeq	r6, fp, r1, ror #6
     f4c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
     f50:	75700061 	ldrbvc	r0, [r0, #-97]!	; 0xffffff9f
     f54:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
     f58:	46006372 			; <UNDEFINED> instruction: 0x46006372
     f5c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
			if (m_size (chunk) >= m_size (ch))
     f60:	48525349 	ldmdami	r2, {r0, r3, r6, r8, r9, ip, lr}^
     f64:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
     f68:	4e007265 	cdpmi	2, 0, cr7, cr0, cr5, {3}
		chunk = m_nextp (chunk))
     f6c:	5253696d 	subspl	r6, r3, #1785856	; 0x1b4000
     f70:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     f74:	0072656c 	rsbseq	r6, r2, ip, ror #10
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	6574655f 	ldrbvs	r6, [r4, #-1375]!	; 0xfffffaa1
	diag_wait (a);
     f7c:	5f007478 	svcpl	0x00007478
	diag_wchar (c, a);
     f80:	73736265 	cmnvc	r3, #1342177286	; 0x50000006
     f84:	6f682f00 	svcvs	0x00682f00
}
     f88:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ddc <__pi_release+0x1d8>
     f8c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	syserror (ESTATE, "state");
     f90:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     f94:	6f746b73 	svcvs	0x00746b73
     f98:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     f9c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
void update_n_wake (word min, Boolean force) {
     fa0:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	2f534f43 	svccs	0x00534f43
     fa8:	4f636950 	svcmi	0x00636950
     fac:	43432f53 	movtmi	r2, #16211	; 0x3f53
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
     fb4:	6174732f 	cmnvs	r4, pc, lsr #6
     fb8:	70757472 	rsbsvc	r7, r5, r2, ror r4
     fbc:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
     fc0:	5f00632e 	svcpl	0x0000632e
     fc4:	00737362 	rsbseq	r7, r3, r2, ror #6
     fc8:	6164655f 	cmnvs	r4, pc, asr r5
     fcc:	49006174 	stmdbmi	r0, {r2, r4, r5, r6, r8, sp, lr}
     fd0:	6544746e 	strbvs	r7, [r4, #-1134]	; 0xfffffb92
     fd4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
     fd8:	6e614874 	mcrvs	8, 3, r4, cr1, cr4, {3}
     fdc:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
     fe0:	705f6700 	subsvc	r6, pc, r0, lsl #14
		for_all_tasks (i) {
     fe4:	65566e66 	ldrbvs	r6, [r6, #-3686]	; 0xfffff19a
	__pi_mintk = znew + min;
     fe8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
     fec:	75700073 	ldrbvc	r0, [r0, #-115]!	; 0xffffff8d
			if (!twaiting (i))
     ff0:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
     ff4:	00747365 	rsbseq	r7, r4, r5, ror #6
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
     ffc:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
    1000:	46434300 	strbmi	r4, [r3], -r0, lsl #6
    1004:	4f565f47 	svcmi	0x00565f47
    1008:	4c5f544c 	cfldrdmi	mvd5, [pc], {76}	; 0x4c
    100c:	5f44414f 	svcpl	0x0044414f
    1010:	43430030 	movtmi	r0, #12336	; 0x3030
    1014:	565f4746 	ldrbpl	r4, [pc], -r6, asr #14
    1018:	5f544c4f 	svcpl	0x00544c4f
    101c:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
    1020:	4300315f 	movwmi	r3, #351	; 0x15f
    1024:	5f474643 	svcpl	0x00474643
				wakeuptm (i);
    1028:	435f4c42 	cmpmi	pc, #16896	; 0x4200
    102c:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
		for_all_tasks (i) {
    1030:	43430047 	movtmi	r0, #12359	; 0x3047
				d = i->Timer - znew;
    1034:	525f4746 	subspl	r4, pc, #18350080	; 0x1180000
    1038:	4f5f4354 	svcmi	0x005f4354
    103c:	45534646 	ldrbmi	r4, [r3, #-1606]	; 0xfffff9ba
		if ((word)(__pi_mintk - znew) < min) 
    1040:	43430054 	movtmi	r0, #12372	; 0x3054
    1044:	4d5f4746 	ldclmi	7, cr4, [pc, #-280]	; f34 <qfree+0x3c>
    1048:	5f45444f 	svcpl	0x0045444f
	__pi_old = znew;
    104c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
}
    1050:	635f5f00 	cmpvs	pc, #0, 30
	TCI_RUN_DELAY_TIMER;
    1054:	00676663 	rsbeq	r6, r7, r3, ror #12
}
    1058:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; fa4 <update_n_wake+0x4>
    105c:	616d2f65 	cmnvs	sp, r5, ror #30
    1060:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1064:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1068:	706f746b 	rsbvc	r7, pc, fp, ror #8
void proceed (word state) {
    106c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
	prcdstate (__pi_curr, state);
    1070:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1074:	4349502f 	movtmi	r5, #36911	; 0x902f
	release;
    1078:	502f534f 	eorpl	r5, pc, pc, asr #6
    107c:	534f6369 	movtpl	r6, #62313	; 0xf369
void __pi_wait (aword event, word state) {
    1080:	3143432f 	cmpcc	r3, pc, lsr #6
	sint j = nevents (__pi_curr);
    1084:	2f585833 	svccs	0x00585833
	if (j >= MAX_EVENTS_PER_TASK)
    1088:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    108c:	4300632e 	movwmi	r6, #814	; 0x32e
    1090:	5f474643 	svcpl	0x00474643
		syserror (ENEVENTS, "sw");
    1094:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    1098:	444e415f 	strbmi	r4, [lr], #-351	; 0xfffffea1
	setestate (__pi_curr->Events [j], state, event);
    109c:	5349445f 	movtpl	r4, #37983	; 0x945f
	incwait (__pi_curr);
    10a0:	414c465f 	cmpmi	ip, pc, asr r6
	setestate (__pi_curr->Events [j], state, event);
    10a4:	43005347 	movwmi	r5, #839	; 0x347
}
    10a8:	5f474643 	svcpl	0x00474643
    10ac:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    10b0:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
void __pi_trigger (aword event) {
    10b4:	4300305f 	movwmi	r3, #95	; 0x5f
	for_all_tasks (i) {
    10b8:	5f474643 	svcpl	0x00474643
		for (j = 0; j < nevents (i); j++) {
    10bc:	45454549 	strbmi	r4, [r5, #-1353]	; 0xfffffab7
    10c0:	43414d5f 	movtmi	r4, #7519	; 0x1d5f
    10c4:	4300315f 	movwmi	r3, #351	; 0x15f
    10c8:	5f474643 	svcpl	0x00474643
			if (i->Events [j] . Event == event) {
    10cc:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
    10d0:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    10d4:	00315f46 	eorseq	r5, r1, r6, asr #30
				wakeupev (i, j);
    10d8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    10dc:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	for_all_tasks (i) {
    10e0:	41545f47 	cmpmi	r4, r7, asr #30
}
    10e4:	41445f50 	cmpmi	r4, r0, asr pc
aword __pi_join (aword pid, word st) {
    10e8:	00305f50 	eorseq	r5, r0, r0, asr pc
	for_all_tasks (i) {
    10ec:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    10f0:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
	return 0;
    10f4:	41545f47 	cmpmi	r4, r7, asr #30
		if ((aword)i == pid) {
    10f8:	41445f50 	cmpmi	r4, r0, asr pc
			__pi_wait (pid, st);
    10fc:	00315f50 	eorseq	r5, r1, r0, asr pc
}
    1100:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
	for_all_tasks (i) {
    1104:	4300745f 	movwmi	r7, #1119	; 0x45f
    1108:	5f474643 	svcpl	0x00474643
void delay (word d, word state) {
    110c:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	settstate (__pi_curr, state);
    1110:	4f52505f 	svcmi	0x0052505f
    1114:	32315f54 	eorscc	r5, r1, #84, 30	; 0x150
    1118:	36395f37 	shasxcc	r5, r9, r7
    111c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	update_n_wake (d, YES);
    1120:	52455f47 	subpl	r5, r5, #284	; 0x11c
    1124:	5f455341 	svcpl	0x00455341
	__pi_curr->Timer = __pi_old + d;
    1128:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    112c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	inctimer (__pi_curr);
    1130:	43435f47 	movtmi	r5, #16199	; 0x3f47
    1134:	505f4746 	subspl	r4, pc, r6, asr #14
    1138:	5f544f52 	svcpl	0x00544f52
}
    113c:	305f3133 	subscc	r3, pc, r3, lsr r1	; <UNPREDICTABLE>
    1140:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (fun == NULL)
    1144:	4d495f47 	stclmi	15, cr5, [r9, #-284]	; 0xfffffee4
		return (int) __pi_curr;
    1148:	5f454741 	svcpl	0x00454741
    114c:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
	for_all_tasks (i)
    1150:	4f435f44 	svcmi	0x00435f44
}
    1154:	4300464e 	movwmi	r4, #1614	; 0x64e
		if (i->code == fun)
    1158:	5f474643 	svcpl	0x00474643
	for_all_tasks (i)
    115c:	51455246 	cmppl	r5, r6, asr #4
    1160:	46464f5f 			; <UNDEFINED> instruction: 0x46464f5f
    1164:	00544553 	subseq	r4, r4, r3, asr r5
int __pi_strlen (const char *s) {
    1168:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	for (i = 0; *(s+i) != '\0'; i++);
    116c:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
}
    1170:	52505f47 	subspl	r5, r0, #284	; 0x11c
	for (i = 0; *(s+i) != '\0'; i++);
    1174:	365f544f 	ldrbcc	r5, [pc], -pc, asr #8
	while (n--)
    1178:	32335f33 	eorscc	r5, r3, #51, 30	; 0xcc
    117c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		*dest++ = *src++;
    1180:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
    1184:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
    1188:	305f454c 	subscc	r4, pc, ip, asr #10
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		syserror (EREQPAR, "addv");
    1190:	45495f47 	strbmi	r5, [r9, #-3911]	; 0xfffff0b9
		syserror (ERESOURCE, "addv");
    1194:	425f4545 	subsmi	r4, pc, #289406976	; 0x11400000
	if (ioreq [loc] != NULL)
    1198:	315f454c 	cmpcc	pc, ip, asr #10
    119c:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		syserror (ERESOURCE, "addv");
    11a0:	43435f47 	movtmi	r5, #16199	; 0x3f47
	ioreq [loc] = rf;
    11a4:	505f4746 	subspl	r4, pc, r6, asr #14
}
    11a8:	5f544f52 	svcpl	0x00544f52
    11ac:	365f3539 			; <UNDEFINED> instruction: 0x365f3539
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	43430034 	movtmi	r0, #12340	; 0x3034
    11b4:	455f4746 	ldrbmi	r4, [pc, #-1862]	; a76 <system_init+0x2a>
    11b8:	4c5f5458 	cfldrdmi	mvd5, [pc], {88}	; 0x58
    11bc:	4c435f46 	mcrrmi	15, 4, r5, r3, cr6
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11c0:	4343004b 	movtmi	r0, #12363	; 0x304b
    11c4:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    11c8:	5f474643 	svcpl	0x00474643
		syserror (ENODEVICE, "io");
    11cc:	4f5f4954 	svcmi	0x005f4954
    11d0:	4f495450 	svcmi	0x00495450
	if (len == 0)
    11d4:	4700534e 	strmi	r5, [r0, -lr, asr #6]
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	5f4f4950 	svcpl	0x004f4950
    11dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
	if (ret >= 0)
    11e0:	006f6944 	rsbeq	r6, pc, r4, asr #18
	if (ret == -1) {
    11e4:	6b6e756a 	blvs	1b9e794 <__ccfg+0x1b7e7ec>
    11e8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
		if (retry == WNONE)
    11ec:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
		iowait (dev, operation, retry);
    11f0:	5f726f73 	svcpl	0x00726f73
    11f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    11f8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
			release;
    11fc:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
	if (ret == -2) {
    1200:	5f726f73 	svcpl	0x00726f73
		if (retry != WNONE) {
    1204:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
    1208:	6f682f00 	svcvs	0x00682f00
			iowait (dev, operation, retry);
    120c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 1060 <update_n_wake+0xc0>
    1210:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			(ioreq [dev]) (NONE, buf, len);
    1214:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1218:	6f746b73 	svcvs	0x00746b73
    121c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		(ioreq [dev]) (NONE, buf, len);
    1220:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1224:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    1228:	2f534f43 	svccs	0x00534f43
}
    122c:	4f636950 	svcmi	0x00636950
	if (retry != WNONE) {
    1230:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
		delay (-ret - 2, retry);
    1234:	2f736269 	svccs	0x00736269
    1238:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    123c:	2f73726f 	svccs	0x0073726f
    1240:	5f6e6970 	svcpl	0x006e6970
		release;
    1244:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    1248:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    124c:	72655400 	rsbvc	r5, r5, #0, 8
    1250:	6162006d 	cmnvs	r2, sp, rrx
    1254:	6f697463 	svcvs	0x00697463
    1258:	6544006e 	strbvs	r0, [r4, #-110]	; 0xffffff92
    125c:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
		syserror (ERESOURCE, "mal1");
    1260:	2f006563 	svccs	0x00006563
    1264:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1268:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    126c:	2f6e6974 	svccs	0x006e6974
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1270:	6b736544 	blvs	1cda788 <__ccfg+0x1cba7e0>
	m_size (mpools [0]) = mlen - m_hdrlen;
    1274:	2f706f74 	svccs	0x00706f74
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1278:	4f534c4f 	svcmi	0x00534c4f
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    127c:	2f54454e 	svccs	0x0054454e
    1280:	4f434950 	svcmi	0x00434950
}
    1284:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1288:	2f534f63 	svccs	0x00534f63
    128c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1290:	4f492f73 	svcmi	0x00492f73
    1294:	7475622f 	ldrbtvc	r6, [r5], #-559	; 0xfffffdd1
    1298:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
void __pi_free (aword *ch) {
    129c:	7000632e 	andvc	r6, r0, lr, lsr #6
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12a0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    12a4:	5f006e6f 	svcpl	0x00006e6f
		syserror (EMALLOC, "malg");
    12a8:	5f69705f 	svcpl	0x0069705f
    12ac:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
	mcfree [MA_NP] += m_size (ch);
    12b0:	00736e6f 	rsbseq	r6, r3, pc, ror #28
		m_size (ch) ^= MALLOC_UMASK;
    12b4:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    12b8:	5f736e6f 	svcpl	0x00736e6f
	mcfree [MA_NP] += m_size (ch);
    12bc:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
	QFREE;
    12c0:	45006e6f 	strmi	r6, [r0, #-3695]	; 0xfffff191
	if (mevent [MA_NP] . nwait) {
    12c4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
    12c8:	5f656500 	svcpl	0x00656500
		trigger ((aword)(&(mevent [MA_NP])));
    12cc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		mevent [MA_NP] . nwait --;
    12d0:	6172655f 	cmnvs	r2, pc, asr r5
}
    12d4:	75006573 	strvc	r6, [r0, #-1395]	; 0xfffffa8d
    12d8:	006f7470 	rsbeq	r7, pc, r0, ror r4	; <UNPREDICTABLE>
    12dc:	5f646d63 	svcpl	0x00646d63
    12e0:	65650030 	strbvs	r0, [r5, #-48]!	; 0xffffffd0
void kill (aword pid) {
    12e4:	6f6c635f 	svcvs	0x006c635f
		pid = (aword) __pi_curr;
    12e8:	65006573 	strvs	r6, [r0, #-1395]	; 0xfffffa8d
	j = NULL;
    12ec:	72655f65 	rsbvc	r5, r5, #404	; 0x194
	for_all_tasks (i) {
    12f0:	00657361 	rsbeq	r7, r5, r1, ror #6
	syserror (EREQPAR, "kpi");
    12f4:	775f6565 	ldrbvc	r6, [pc, -r5, ror #10]
    12f8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
		if ((aword)i == pid) {
    12fc:	706f6400 	rsbvc	r6, pc, r0, lsl #8
    1300:	65006e65 	strvs	r6, [r0, #-3685]	; 0xfffff19b
				__PCB = i->Next;
    1304:	706f5f65 	rsbvc	r5, pc, r5, ror #30
			killev (i);
    1308:	57006e65 	strpl	r6, [r0, -r5, ror #28]
			ufree (i);
    130c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
			if (i == __pi_curr)
    1310:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
    1314:	6c00335f 	stcvs	3, cr3, [r0], {95}	; 0x5f
				release;
    1318:	00747361 	rsbseq	r7, r4, r1, ror #6
				j->Next = i->Next;
    131c:	705f6565 	subsvc	r6, pc, r5, ror #10
    1320:	63696e61 	cmnvs	r9, #1552	; 0x610
    1324:	5f656500 	svcpl	0x00656500
}
    1328:	636e7973 	cmnvs	lr, #1884160	; 0x1cc000
    132c:	6f726600 	svcvs	0x00726600
    1330:	6565006d 	strbvs	r0, [r5, #-109]!	; 0xffffff93
	if (size < 8)
    1334:	6165725f 	cmnvs	r5, pc, asr r2
		_size = 2;
    1338:	64720064 	ldrbtvs	r0, [r2], #-100	; 0xffffff9c
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    133c:	2f007273 	svccs	0x00007273
		_size = (((aword)size) + 3) >> 2;
    1340:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
		_size = (((aword)size) + 3) >> 2;
    1348:	2f6e6974 	svccs	0x006e6974
		if (mevent [MA_NP] . nfail != 255)
    134c:	6b736544 	blvs	1cda864 <__ccfg+0x1cba8bc>
    1350:	2f706f74 	svccs	0x00706f74
			mevent [MA_NP] . nfail ++;
    1354:	4f534c4f 	svcmi	0x00534c4f
		mnfree [MA_NP] = 0;
    1358:	2f54454e 	svccs	0x0054454e
    135c:	4f434950 	svcmi	0x00434950
		if (m_magic (chunk) != MALLOC_MAGIC)
    1360:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1364:	2f534f63 	svccs	0x00534f63
			syserror (EMALLOC, "malc");
    1368:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    136c:	74532f73 	ldrbvc	r2, [r3], #-3955	; 0xfffff08d
		if (m_size (chunk) >= _size)
    1370:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    1374:	74732f65 	ldrbtvc	r2, [r3], #-3941	; 0xfffff09b
		chunk = m_nextp (chunk)) {
    1378:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
		m_setnextp (cc, m_nextp (chunk));
    137c:	786d5f65 	stmdavc	sp!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1380:	38723532 	ldmdacc	r2!, {r1, r4, r5, r8, sl, ip, sp}^
    1384:	2e353330 	mrccs	3, 1, r3, cr5, cr0, {1}
			m_size (chunk) = _size;
    1388:	63630063 	cmnvs	r3, #99	; 0x63
			cc = chunk + _size + m_hdrlen;
    138c:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    1390:	74736400 	ldrbtvc	r6, [r3], #-1024	; 0xfffffc00
			m_size (cc) = waste - m_hdrlen;
    1394:	63007461 	movwvs	r7, #1121	; 0x461
			QFREE;
    1398:	6e65706f 	cdpvs	0, 6, cr7, cr5, cr15, {3}
		mevent [MA_NP] . nfail = 0;
    139c:	74706300 	ldrbtvc	r6, [r0], #-768	; 0xfffffd00
		mcfree [MA_NP] -= m_size (chunk);
    13a0:	65650072 	strbvs	r0, [r5, #-114]!	; 0xffffff8e
    13a4:	7a69735f 	bvc	1a5e128 <__ccfg+0x1a3e180>
    13a8:	65720065 	ldrbvs	r0, [r2, #-101]!	; 0xffffff9b
    13ac:	00796461 	rsbseq	r6, r9, r1, ror #8
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	6e6f4445 	cdpvs	4, 6, cr4, cr15, cr5, {2}
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13b4:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
		m_size (chunk) |= MALLOC_UMASK;
    13b8:	006e776f 	rsbeq	r7, lr, pc, ror #14
			mnfree [MA_NP] = mcfree [MA_NP];
    13bc:	69617777 	stmdbvs	r1!, {r0, r1, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
}
    13c0:	65670074 	strbvs	r0, [r7, #-116]!	; 0xffffff8c
    13c4:	79625f74 	stmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    13c8:	70006574 	andvc	r6, r0, r4, ror r5
    13cc:	625f7475 	subsvs	r7, pc, #1962934272	; 0x75000000
    13d0:	00657479 	rsbeq	r7, r5, r9, ror r4
    13d4:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    13d8:	6e696c70 	mcrvs	12, 3, r6, cr9, cr0, {3}
aword __pi_fork (fsmcode func, aword data) {
    13dc:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	2f656d6f 	svccs	0x00656d6f
    13e4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    13e8:	442f6e69 	strtmi	r6, [pc], #-3689	; 13f0 <__pi_fork+0x14>
		if ((j = __PCB) == NULL)
    13ec:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	i->Next = NULL;
    13f0:	4f2f706f 	svcmi	0x002f706f
	i->data = data;
    13f4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		if ((j = __PCB) == NULL)
    13f8:	502f5445 	eorpl	r5, pc, r5, asr #8
}
    13fc:	534f4349 	movtpl	r4, #62281	; 0xf349
			for (; j->Next != NULL; j = j->Next);
    1400:	6369502f 	cmnvs	r9, #47	; 0x2f
    1404:	502f534f 	eorpl	r5, pc, pc, asr #6
	return (aword) i;
    1408:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    140c:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
	if (mevent [MA_NP] . nwait != 255)
    1410:	2f6c6169 	svccs	0x006c6169
    1414:	5f726573 	svcpl	0x00726573
    1418:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
		mevent [MA_NP] . nwait ++;
    141c:	72657300 	rsbvc	r7, r5, #0, 6
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	006e695f 	rsbeq	r6, lr, pc, asr r9
    1424:	73637270 	cmnvc	r3, #112, 4
void diag (const char *mess, ...) {
    1428:	72657300 	rsbvc	r7, r5, #0, 6
    142c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    1430:	682f0066 	stmdavs	pc!, {r1, r2, r5, r6}	; <UNPREDICTABLE>
	diag_disable_int (a, is);
    1434:	2f656d6f 	svccs	0x00656d6f
    1438:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    143c:	442f6e69 	strtmi	r6, [pc], #-3689	; 1444 <diag+0x1c>
				d = (bc == 16) ? 10000 : 1000000000;
    1440:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	diag_disable_int (a, is);
    1444:	4f2f706f 	svcmi	0x002f706f
	while (*mess != '\0') {
    1448:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	dgout ('\r');
    144c:	502f5445 	eorpl	r5, pc, r5, asr #8
	dgout ('\n');
    1450:	534f4349 	movtpl	r4, #62281	; 0xf349
    1454:	6369502f 	cmnvs	r9, #47	; 0x2f
    1458:	502f534f 	eorpl	r5, pc, pc, asr #6
	diag_wait (a);
    145c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
	diag_enable_int (a, is);
    1460:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    1464:	2f6c6169 	svccs	0x006c6169
}
    1468:	5f726573 	svcpl	0x00726573
    146c:	6674756f 	ldrbtvs	r7, [r4], -pc, ror #10
    1470:	2f00632e 	svccs	0x0000632e
		if (*mess == '%') {
    1474:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1478:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
			if (*mess == 'l') {
    147c:	2f6e6974 	svccs	0x006e6974
    1480:	6b736544 	blvs	1cda998 <__ccfg+0x1cba9f0>
				mess++;
    1484:	2f706f74 	svccs	0x00706f74
				val = va_arg (ap, lword);
    1488:	4f534c4f 	svcmi	0x00534c4f
				bc = 32;
    148c:	2f54454e 	svccs	0x0054454e
				bc = 16;
    1490:	4f434950 	svcmi	0x00434950
			switch (*mess) {
    1494:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1498:	2f534f63 	svccs	0x00534f63
    149c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
				dgout ('%');
    14a0:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    14a4:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
				dgout (*mess);
    14a8:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    14ac:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
			switch (*mess) {
    14b0:	7300632e 	movwvc	r6, #814	; 0x32e
					v = __pi_hex_enc_table [
    14b4:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
					i += 4;
    14b8:	2f00666e 	svccs	0x0000666e
					(val >> (bc - i)) & 0xf];
    14bc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    14c0:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
					dgout (v);
    14c4:	2f6e6974 	svccs	0x006e6974
    14c8:	6b736544 	blvs	1cda9e0 <__ccfg+0x1cbaa38>
				while (i < bc) {
    14cc:	2f706f74 	svccs	0x00706f74
			mess++;
    14d0:	4f534c4f 	svcmi	0x00534c4f
					d /= 10;
    14d4:	2f54454e 	svccs	0x0054454e
				if ((val >> (bc - 1)) & 1) {
    14d8:	4f434950 	svcmi	0x00434950
    14dc:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
					dgout ('-');
    14e0:	2f534f63 	svccs	0x00534f63
    14e4:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
						val |= 0xffff0000;
    14e8:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    14ec:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    14f0:	6f5f5f2f 	svcvs	0x005f5f2f
				d = (bc == 16) ? 10000 : 1000000000;
    14f4:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
    14f8:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    14fc:	7100632e 	tstvc	r0, lr, lsr #6
					v = (word) (val / d);
    1500:	746e6175 	strbtvc	r6, [lr], #-373	; 0xfffffe8b
					if (v || d == 1) break;
    1504:	6f5f5f00 	svcvs	0x005f5f00
    1508:	65737475 	ldrbvs	r7, [r3, #-1141]!	; 0xfffffb8b
					d /= 10;
    150c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
				d = (bc == 16) ? 10000 : 1000000000;
    1510:	4f5f5f00 	svcmi	0x005f5f00
					dgout (v + '0');
    1514:	52575f4d 	subspl	r5, r7, #308	; 0x134
    1518:	00455449 	subeq	r5, r5, r9, asr #8
    151c:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
					d /= 10;
    1520:	69726573 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
					val = val - (v * d);
    1524:	2f006c61 	svccs	0x00006c61
					if (d == 0) break;
    1528:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
					v = (word) (val / d);
    152c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    1530:	2f6e6974 	svccs	0x006e6974
				if (bc == 16)
    1534:	6b736544 	blvs	1cdaa4c <__ccfg+0x1cbaaa4>
				d = (bc == 16) ? 10000 : 1000000000;
    1538:	2f706f74 	svccs	0x00706f74
					val &= 0xffff;
    153c:	4f534c4f 	svcmi	0x00534c4f
					dgout (*s);
    1540:	2f54454e 	svccs	0x0054454e
					s++;
    1544:	4f434950 	svcmi	0x00434950
				while (*s != '\0') {
    1548:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    154c:	2f534f63 	svccs	0x00534f63
			dgout (*mess++);
    1550:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1554:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    1558:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    155c:	695f5f2f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    1560:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
}
    1564:	2e6c6169 	powcsez	f6, f4, #1.0
    while(1)
    1568:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
{
    156c:	2f656d6f 	svccs	0x00656d6f
    SetupTrimDevice();
    1570:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    pui32Src = &_etext;
    1574:	442f6e69 	strtmi	r6, [pc], #-3689	; 157c <ResetISR+0x10>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1578:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    __asm("    ldr     r0, =_bss\n"
    157c:	4f2f706f 	svcmi	0x002f706f
    1580:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1584:	502f5445 	eorpl	r5, pc, r5, asr #8
    1588:	534f4349 	movtpl	r4, #62281	; 0xf349
    158c:	6369502f 	cmnvs	r9, #47	; 0x2f
   main();
    1590:	502f534f 	eorpl	r5, pc, pc, asr #6
    FaultISR();
    1594:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
        *pui32Dest++ = *pui32Src++;
    1598:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    159c:	2f6c6169 	svccs	0x006c6169
    15a0:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    15a4:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    15a8:	69616741 	stmdbvs	r1!, {r0, r6, r8, r9, sl, sp, lr}^
    15ac:	756f006e 	strbvc	r0, [pc, #-110]!	; 1546 <diag+0x11e>
    15b0:	5f006374 	svcpl	0x00006374
    15b4:	5f69705f 	svcpl	0x0069705f
static byte get_byte () {
    15b8:	61706676 	cmnvs	r0, r6, ror r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15bc:	00657372 	rsbeq	r7, r5, r2, ror r3
    15c0:	726f6676 	rsbvc	r6, pc, #123731968	; 0x7600000
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    15c4:	6552006d 	ldrbvs	r0, [r2, #-109]	; 0xffffff93
    15c8:	5f797274 	svcpl	0x00797274
		if (ee_inp)
    15cc:	6f775f64 	svcvs	0x00775f64
			b |= 1;
    15d0:	2f006472 	svccs	0x00006472
    15d4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    15d8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	for (b = 0, i = 0; i < 8; i++) {
    15dc:	2f6e6974 	svccs	0x006e6974
}
    15e0:	6b736544 	blvs	1cdaaf8 <__ccfg+0x1cbab50>
    15e4:	2f706f74 	svccs	0x00706f74
    15e8:	4f534c4f 	svcmi	0x00534c4f
static void put_byte (byte b) {
    15ec:	2f54454e 	svccs	0x0054454e
    15f0:	4f434950 	svcmi	0x00434950
    15f4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    15f8:	2f534f63 	svccs	0x00534f63
		if (b & 0x80)
    15fc:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1600:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1604:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
	for (i = 0; i < 8; i++) {
    1608:	6373762f 	cmnvs	r3, #49283072	; 0x2f00000
		b <<= 1;
    160c:	632e6e61 			; <UNDEFINED> instruction: 0x632e6e61
	for (i = 0; i < 8; i++) {
    1610:	63737600 	cmnvs	r3, #0, 12
}
    1614:	52006e61 	andpl	r6, r0, #1552	; 0x610
    1618:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    161c:	6c5f645f 	cfldrdvs	mvd6, [pc], {95}	; 0x5f
    1620:	64726f77 	ldrbtvs	r6, [r2], #-3959	; 0xfffff089
	put_byte (cmd);
    1624:	524f4e00 	subpl	r4, pc, #0, 28
    1628:	415f4d4f 	cmpmi	pc, pc, asr #26
}
    162c:	61424e4f 	cmpvs	r2, pc, asr #28
    1630:	6e6f4d74 	mcrvs	13, 3, r4, cr15, cr4, {3}
static void wwait (word st, word del) {
    1634:	706d6554 	rsbvc	r6, sp, r4, asr r5
    1638:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    163c:	47657275 			; <UNDEFINED> instruction: 0x47657275
	while (dopen && (rdsr () & 1)) {
    1640:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    1644:	76004367 	strvc	r4, [r0], -r7, ror #6
    1648:	61746c6f 	cmnvs	r4, pc, ror #24
    164c:	6c536567 	cfldr64vs	mvdx6, [r3], {103}	; 0x67
	put_byte (CMD_RDSR);
    1650:	0065706f 	rsbeq	r7, r5, pc, rrx
	r = get_byte ();
    1654:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
    1658:	5f323374 	svcpl	0x00323374
	while (dopen && (rdsr () & 1)) {
    165c:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
}
    1660:	20432055 	subcs	r2, r3, r5, asr r0
		if (st == WNONE)
    1664:	2e392e34 	mrccs	14, 1, r2, cr9, cr4, {1}
    1668:	30322033 	eorscc	r2, r2, r3, lsr r0
			mdelay (1);
    166c:	35303531 	ldrcc	r3, [r0, #-1329]!	; 0xfffffacf
    1670:	28203932 	stmdacs	r0!, {r1, r4, r5, r8, fp, ip, sp}
			delay (del, st);
    1674:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    1678:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
			release;
    167c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
    1680:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
    1684:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
static void ready () {
    1688:	342d6465 	strtcc	r6, [sp], #-1125	; 0xfffffb9b
	if (dopen) {
    168c:	622d395f 	eorvs	r3, sp, #1556480	; 0x17c000
		wwait (WNONE, 1);
    1690:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
    1694:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
    1698:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
	dstat = 0;
    169c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
}
    16a0:	37393732 			; <UNDEFINED> instruction: 0x37393732
    16a4:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
    16a8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
	udelay (1);
    16ac:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
    16b0:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
	udelay (1);
    16b4:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
		dopen = DOPEN_TEMP;
    16b8:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    16bc:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
    16c0:	4f2d2067 	svcmi	0x002d2067
    16c4:	732d2073 			; <UNDEFINED> instruction: 0x732d2073
static void cclose () {
    16c8:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
	if (dopen == DOPEN_TEMP) {
    16cc:	2d203939 			; <UNDEFINED> instruction: 0x2d203939
    16d0:	2d6f6e66 	stclcs	14, cr6, [pc, #-408]!	; 1540 <diag+0x118>
		wwait (WNONE, 1);
    16d4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    16d8:	612d7463 			; <UNDEFINED> instruction: 0x612d7463
	cmd_0 (CMD_DP);
    16dc:	7361696c 	cmnvc	r1, #108, 18	; 0x1b0000
    16e0:	20676e69 	rsbcs	r6, r7, r9, ror #28
		dopen = 0;
    16e4:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
}
    16e8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
word ee_open () {
    16ec:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
	ready ();
    16f0:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
	dopen = DOPEN_PERM;
    16f4:	20736e6f 	rsbscs	r6, r3, pc, ror #28
    16f8:	6164662d 	cmnvs	r4, sp, lsr #12
}
    16fc:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
	if (dopen) {
    1700:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
    1704:	20736e6f 	rsbscs	r6, r3, pc, ror #28
		dopen = DOPEN_TEMP;
    1708:	7361662d 	cmnvc	r1, #47185920	; 0x2d00000
		cclose ();
    170c:	5f5f006d 	svcpl	0x005f006d
}
    1710:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
int ser_in (word st, char *buf, int len) {
    1714:	2e00745f 	cfmvsrcs	mvf0, r7
    1718:	2f2e2e2f 	svccs	0x002e2e2f
	if (len == 0)
    171c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	if (__inpline == NULL) {
    1720:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
		if ((prcs = running (__inserial)) == 0) {
    1724:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1728:	2f62696c 	svccs	0x0062696c
			prcs = runthread (__inserial);
    172c:	5f6e6f61 	svcpl	0x006e6f61
    1730:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
			if (prcs == 0) {
    1734:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
				npwait (st);
    1738:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
		release;
    173c:	726f4370 	rsbvc	r4, pc, #112, 6	; 0xc0000001
		join (prcs, st);
    1740:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
    1744:	006e6f69 	rsbeq	r6, lr, r9, ror #30
	if (*__inpline == NULL) // bin cmd
    1748:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    174c:	65546465 	ldrbvs	r6, [r4, #-1125]	; 0xfffffb9b
	if (prcs >= len)
    1750:	4300706d 	movwmi	r7, #109	; 0x6d
		prcs = len-1;
    1754:	654a5c3a 	strbvs	r5, [sl, #-3130]	; 0xfffff3c6
	memcpy (buf, __inpline, prcs);
    1758:	6e696b6e 	vnmulvs.f64	d22, d9, d30
    175c:	6f6a5c73 	svcvs	0x006a5c73
    1760:	465c7362 	ldrbmi	r7, [ip], -r2, ror #6
	ufree (__inpline);
    1764:	6f724757 	svcvs	0x00724757
	__inpline = NULL;
    1768:	442d7075 	strtmi	r7, [sp], #-117	; 0xffffff8b
	if (*buf) // if it's NULL, it's a bin cmd
    176c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		buf [prcs] = '\0';
    1770:	62694c72 	rsbvs	r4, r9, #29184	; 0x7200
}
    1774:	726f775c 	rsbvc	r7, pc, #92, 14	; 0x1700000
		prcs = strlen (__inpline);
    1778:	6170736b 	cmnvs	r0, fp, ror #6
    177c:	6d5c6563 	cfldr64vs	mvdx6, [ip, #-396]	; 0xfffffe74
		return 0;
    1780:	6c75646f 	cfldrdvs	mvd6, [r5], #-444	; 0xfffffe44
    1784:	6f5c7365 	svcvs	0x005c7365
    1788:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
int ser_outf (word st, const char *m, ...) {
    178c:	63635c74 	cmnvs	r3, #116, 24	; 0x7400
    1790:	78783331 	ldmdavc	r8!, {r0, r4, r5, r8, r9, ip, sp}^
	if ((prcs = running (__outserial)) != 0) {
    1794:	6168635f 	cmnvs	r8, pc, asr r3
    1798:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
		join (prcs, st);
    179c:	7478655f 	ldrbtvc	r6, [r8], #-1375	; 0xfffffaa1
    17a0:	6972645c 	ldmdbvs	r2!, {r2, r3, r4, r6, sl, sp, lr}^
		release;
    17a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
	if ((buf = vform (NULL, m, ap)) == NULL) {
    17a8:	625c6269 	subsvs	r6, ip, #-1879048186	; 0x90000006
    17ac:	675c6e69 	ldrbvs	r6, [ip, -r9, ror #28]
    17b0:	72006363 	andvc	r6, r0, #-1946157055	; 0x8c000001
		umwait (st);
    17b4:	72757465 	rsbsvc	r7, r5, #1694498816	; 0x65000000
    17b8:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
	if (runstrand (__outserial, buf) == 0) {
    17bc:	5f006575 	svcpl	0x00006575
    17c0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    17c4:	5f323374 	svcpl	0x00323374
		ufree (buf);
    17c8:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
		npwait (st);
    17cc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
}
    17d0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    17d4:	63655374 	cmnvs	r5, #116, 6	; 0xd0000001
    17d8:	524f4e00 	subpl	r4, pc, #0, 28
    17dc:	415f4d4f 	cmpmi	pc, pc, asr #26
int ser_inf (word st, const char *fmt, ...) {
    17e0:	54524e4f 	ldrbpl	r4, [r2], #-3663	; 0xfffff1b1
    17e4:	72754343 	rsbsvc	r4, r5, #201326593	; 0xc000001
	if (fmt == NULL)
    17e8:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	if (__inpline == NULL) {
    17ec:	706d6f43 	rsbvc	r6, sp, r3, asr #30
		if ((prcs = running (__inserial)) == 0) {
    17f0:	56657261 	strbtpl	r7, [r5], -r1, ror #4
    17f4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
			prcs = runthread (__inserial);
    17f8:	00746547 	rsbseq	r6, r4, r7, asr #10
    17fc:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			if (prcs == 0) {
    1800:	6f636553 	svcvs	0x00636553
				npwait (st);
    1804:	6553646e 	ldrbvs	r6, [r3, #-1134]	; 0xfffffb92
		release;
    1808:	61655263 	cmnvs	r5, r3, ror #4
		join (prcs, st);
    180c:	5f5f0064 	svcpl	0x005f0064
    1810:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
	va_start (ap, fmt);
    1814:	745f3436 	ldrbvc	r3, [pc], #-1078	; 181c <ser_inf+0x3c>
	prcs = vscan (__inpline, fmt, ap);
    1818:	33697500 	cmncc	r9, #0, 10
    181c:	72754332 	rsbsvc	r4, r5, #-939524096	; 0xc8000000
	ufree (__inpline);
    1820:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
	__inpline = NULL;
    1824:	53627553 	cmnpl	r2, #348127232	; 0x14c00000
}
    1828:	4e006365 	cdpmi	3, 0, cr6, cr0, cr5, {3}
    182c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 16f8 <ee_open+0xc>
    1830:	4e4f415f 	mcrmi	1, 2, r4, cr15, cr15, {2}
		return 0;
    1834:	43435452 	movtmi	r5, #13394	; 0x3452
    1838:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    183c:	3436746e 	ldrtcc	r7, [r6], #-1134	; 0xfffffb92
strand (__outserial, const char*)
    1840:	56746942 	ldrbtpl	r6, [r4], -r2, asr #18
    1844:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1848:	00746547 	rsbseq	r6, r4, r7, asr #10
    184c:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
endstrand
    1850:	52746e65 	rsbspl	r6, r4, #1616	; 0x650
    1854:	73006374 	movwvc	r6, #884	; 0x374
	ptr = data;
    1858:	6e416365 	cdpvs	3, 4, cr6, cr1, cr5, {3}
    185c:	62755364 	rsbsvs	r5, r5, #100, 6	; 0x90000001
	if (*ptr)
    1860:	00636553 	rsbeq	r6, r3, r3, asr r5
		len = strlen (ptr);
    1864:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1868:	2f2e2e2f 	svccs	0x002e2e2f
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    186c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 1874 <__outserial+0x34>
    1870:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1874:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    1878:	6e6f612f 	powvsep	f6, f7, #10.0
    187c:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
	len -= quant;
    1880:	7300632e 	movwvc	r6, #814	; 0x32e
    1884:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
    1888:	00657079 	rsbeq	r7, r5, r9, ror r0
	if (len == 0) {
    188c:	4f524f4e 	svcmi	0x00524f4e
		ufree (data);
    1890:	50435f4d 	subpl	r5, r3, sp, asr #30
		finish;
    1894:	73616255 	cmnvc	r1, #1342177285	; 0x50000005
    1898:	69727065 	ldmdbvs	r2!, {r0, r2, r5, r6, ip, sp, lr}^
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    189c:	00746547 	rsbseq	r6, r4, r7, asr #10
    18a0:	4f524f4e 	svcmi	0x00524f4e
    18a4:	50435f4d 	subpl	r5, r3, sp, asr #30
    18a8:	6c656455 	cfstrdvs	mvd6, [r5], #-340	; 0xfffffeac
    18ac:	75007961 	strvc	r7, [r0, #-2401]	; 0xfffff69f
strand (__inserial, address)
    18b0:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    18b4:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    18b8:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
    18bc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
    18c0:	524f4e00 	subpl	r4, pc, #0, 28
	if (__inpline != NULL)
    18c4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    18c8:	70635550 	rsbvc	r5, r3, r0, asr r5
		finish;
    18cc:	00646973 	rsbeq	r6, r4, r3, ror r9
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    18d0:	4f524f4e 	svcmi	0x00524f4e
    18d4:	50435f4d 	subpl	r5, r3, sp, asr #30
    18d8:	73706355 	cmnvc	r0, #1409286145	; 0x54000001
    18dc:	2e006569 	cfsh32cs	mvfx6, mvfx0, #57
		umwait (IM_INIT);
    18e0:	2f2e2e2f 	svccs	0x002e2e2f
		release;
    18e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
	savedata (data);
    18e8:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
	len = MAX_LINE_LENGTH;
    18ec:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
	io (IM_READ, __cport, READ, ptr, 1);
    18f0:	2f62696c 	svccs	0x0062696c
    18f4:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    18f8:	4f4e0063 	svcmi	0x004e0063
    18fc:	5f4d4f52 	svcpl	0x004d4f52
	if (ptr == (char*) data) { // new line
    1900:	70555043 	subsvc	r5, r5, r3, asr #32
    1904:	616d6972 	smcvs	54930	; 0xd692
		if (*ptr == '\0') { // bin cmd
    1908:	6d006b73 	vstrvs	d6, [r0, #-460]	; 0xfffffe34
			proceed (IM_BIN);
    190c:	65723170 	ldrbvs	r3, [r2, #-368]!	; 0xfffffe90
    1910:	72540076 	subsvc	r0, r4, #118	; 0x76
		if (*ptr < 0x20)
    1914:	66416d69 	strbvs	r6, [r1], -r9, ror #26
    1918:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
			proceed (IM_READ);
    191c:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    1920:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	if (*ptr == '\n' || *ptr == '\r') {
    1924:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1928:	72467075 	subvc	r7, r6, #117	; 0x75
    192c:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
		*ptr = '\0';
    1930:	6f447475 	svcvs	0x00447475
		__inpline = (char*)data;
    1934:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
		finish;
    1938:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1804 <ser_inf+0x24>
	if (len) {
    193c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		ptr++;
    1940:	66417075 			; <UNDEFINED> instruction: 0x66417075
    1944:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
		len--;
    1948:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
	proceed (IM_READ);
    194c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	io (IM_BIN, __cport, READ, ptr, 1);
    1950:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1954:	72467075 	subvc	r7, r6, #117	; 0x75
    1958:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    195c:	6f447475 	svcvs	0x00447475
    1960:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
	len -= 2;
    1964:	4e003167 	adfmisz	f3, f0, f7
	if (len > *ptr + 1) // 1 for 0x04
    1968:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1834 <ser_inf+0x54>
    196c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
		len = *ptr + 1;
    1970:	66417075 			; <UNDEFINED> instruction: 0x66417075
    1974:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
	ptr++;
    1978:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
	quant = io (IM_BINL, __cport, READ, ptr, len);
    197c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1980:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    1984:	72467075 	subvc	r7, r6, #117	; 0x75
    1988:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    198c:	6f447475 	svcvs	0x00447475
    1990:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
	len -= quant;
    1994:	4e003267 	cdpmi	2, 0, cr3, cr0, cr7, {3}
		__inpline = (char*)data;
    1998:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1864 <__outserial+0x24>
		finish;
    199c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
	ptr += quant;
    19a0:	66417075 			; <UNDEFINED> instruction: 0x66417075
    19a4:	43726574 	cmnmi	r2, #116, 10	; 0x1d000000
endstrand
    19a8:	52646c6f 	rsbpl	r6, r4, #28416	; 0x6f00
    19ac:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
	proceed (IM_BINL);
    19b0:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
endstrand
    19b4:	72467075 	subvc	r7, r6, #117	; 0x75
    19b8:	68536d6f 	ldmdavs	r3, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    19bc:	6f447475 	svcvs	0x00447475
    19c0:	66436e77 			; <UNDEFINED> instruction: 0x66436e77
    19c4:	2e003367 	cdpcs	3, 0, cr3, cr0, cr7, {3}
    19c8:	2f2e2e2f 	svccs	0x002e2e2f
		if (res && (d < n))
    19cc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    19d0:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    19d4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    19d8:	2f62696c 	svccs	0x0062696c
			res [d] = (char) c;
    19dc:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
		d++;
    19e0:	00632e70 	rsbeq	r2, r3, r0, ror lr
    19e4:	4f524f4e 	svcmi	0x00524f4e
    19e8:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19ec:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    19f0:	61437465 	cmpvs	r3, r5, ror #8
    19f4:	4d656863 	stclmi	8, cr6, [r5, #-396]!	; 0xfffffe74
				enci (10000);
    19f8:	4165646f 	cmnmi	r5, pc, ror #8
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    19fc:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
    1a00:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
	d = 0;
    1a04:	63436f54 	movtvs	r6, #16212	; 0x3f54
		c = *fm++;
    1a08:	65536766 	ldrbvs	r6, [r3, #-1894]	; 0xfffff89a
		if (c == '\\') {
    1a0c:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
			if ((c = *fm++) == '\0') {
    1a10:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    1a14:	63463233 	movtvs	r3, #25139	; 0x6233
				outc ('\\');
    1a18:	52316766 	eorspl	r6, r1, #26738688	; 0x1980000
			if ((c = *fm++) == '\0') {
    1a1c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
				outc ('\\');
    1a20:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1a24:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
			outc (c);
    1a28:	744a4355 	strbvc	r4, [sl], #-853	; 0xfffffcab
    1a2c:	6f506761 	svcvs	0x00506761
			if (c == '\0')
    1a30:	4f726577 	svcmi	0x00726577
    1a34:	54006666 	strpl	r6, [r0], #-1638	; 0xfffff99a
			outc (c);
    1a38:	416d6972 	smcmi	54930	; 0xd692
				outc (val);
    1a3c:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
				val = (word) va_arg (ap, aword);
    1a40:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
		if (c == '%') {
    1a44:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1a48:	4f4e0074 	svcmi	0x004e0074
			c = *fm++;
    1a4c:	5f4d4f52 	svcpl	0x004d4f52
			switch (c) {
    1a50:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1a54:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    1a58:	7665446d 	strbtvc	r4, [r5], -sp, ror #8
    1a5c:	00656369 	rsbeq	r6, r5, r9, ror #6
    1a60:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    1a64:	64755f6d 	ldrbtvs	r5, [r5], #-3949	; 0xfffff093
    1a68:	75006769 	strvc	r6, [r0, #-1897]	; 0xfffff897
    1a6c:	41323369 	teqmi	r2, r9, ror #6
				outc ('%');
    1a70:	79536e6f 	ldmdbvc	r3, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1a74:	73655273 	cmnvc	r5, #805306375	; 0x30000007
				outc (c);
    1a78:	74637465 	strbtvc	r7, [r3], #-1125	; 0xfffffb9b
    1a7c:	6363006c 	cmnvs	r3, #108	; 0x6c
    1a80:	4d5f6766 	ldclmi	7, cr6, [pc, #-408]	; 18f0 <__inserial+0x40>
				if (c == '\0')
    1a84:	4365646f 	cmnmi	r5, #1862270976	; 0x6f000000
				return d;
    1a88:	52666e6f 	rsbpl	r6, r6, #1776	; 0x6f0
}
    1a8c:	54006765 	strpl	r6, [r0], #-1893	; 0xfffff89b
    1a90:	416d6972 	smcmi	54930	; 0xd692
			switch (c) {
    1a94:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    1a98:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    1a9c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
				for (i = 12; ; i -= 4) {
    1aa0:	6b615774 	blvs	1857878 <__ccfg+0x18378d0>
				val = (word) va_arg (ap, aword);
    1aa4:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
						[ (val >> i) & 0xf ]);
    1aa8:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    1aac:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    1ab0:	576e776f 	strbpl	r7, [lr, -pc, ror #14]!
					outc (__pi_hex_enc_table
    1ab4:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    1ab8:	6f724670 	svcvs	0x00724670
					if (i == 0)
    1abc:	776f506d 	strbvc	r5, [pc, -sp, rrx]!
    1ac0:	6f447265 	svcvs	0x00447265
				for (i = 12; ; i -= 4) {
    1ac4:	4e006e77 	mcrmi	14, 0, r6, cr0, cr7, {3}
				val = (word) va_arg (ap, aword);
    1ac8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1994 <__inserial+0xe4>
				if (c == 'd' && (val & 0x8000) != 0) {
    1acc:	6968545f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, sl, ip, lr}^
				val = (word) va_arg (ap, aword);
    1ad0:	646f4373 	strbtvs	r4, [pc], #-883	; 1ad8 <__pi_vfparse+0xec>
				if (c == 'd' && (val & 0x8000) != 0) {
    1ad4:	42734965 	rsbsmi	r4, r3, #1654784	; 0x194000
    1ad8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
					outc ('-');
    1adc:	43726f46 	cmnmi	r2, #280	; 0x118
    1ae0:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
					val = (~val) + 1;
    1ae4:	52774878 	rsbspl	r4, r7, #120, 16	; 0x780000
    1ae8:	30327665 	eorscc	r7, r2, r5, ror #12
				for (i = 12; ; i -= 4) {
    1aec:	4c646e41 	stclmi	14, cr6, [r4], #-260	; 0xfffffefc
				enci (10000);
    1af0:	72657461 	rsbvc	r7, r5, #1627389952	; 0x61000000
    1af4:	6c61485f 	stclvs	8, cr4, [r1], #-380	; 0xfffffe84
    1af8:	56664974 			; <UNDEFINED> instruction: 0x56664974
    1afc:	616c6f69 	cmnvs	ip, r9, ror #30
    1b00:	00646574 	rsbeq	r6, r4, r4, ror r5
    1b04:	69727476 	ldmdbvs	r2!, {r1, r2, r4, r5, r6, sl, ip, sp, lr}^
    1b08:	6f625f6d 	svcvs	0x00625f6d
    1b0c:	63630064 	cmnvs	r3, #100	; 0x64
    1b10:	78456766 	stmdavc	r5, {r1, r2, r5, r6, r8, r9, sl, sp, lr}^
    1b14:	43664c74 	cmnmi	r6, #116, 24	; 0x7400
    1b18:	4e006b6c 	vmlsmi.f64	d6, d0, d28
    1b1c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 19e8 <outc.5724+0x1c>
    1b20:	43534f5f 	cmpmi	r3, #380	; 0x17c
    1b24:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1b28:	756f536b 	strbvc	r5, [pc, #-875]!	; 17c5 <ser_outf+0x39>
    1b2c:	53656372 	cmnpl	r5, #-939524095	; 0xc8000001
    1b30:	63007465 	movwvs	r7, #1125	; 0x465
    1b34:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
				if (c == 'd' || c == 'u') {
    1b38:	6648746e 	strbvs	r7, [r8], -lr, ror #8
    1b3c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
					if (c == 'd' &&
    1b40:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
					val = va_arg (ap, lword);
    1b44:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
					fm++;
    1b48:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
					if (c == 'd' &&
    1b4c:	61566d69 	cmpvs	r6, r9, ror #26
    1b50:	4f4e006c 	svcmi	0x004e006c
						outc ('-');
    1b54:	5f4d4f52 	svcpl	0x004d4f52
    1b58:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
						val = (~val) + 1;
    1b5c:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
				enci (10000);
    1b60:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
					enci (1000000000UL);
    1b64:	41726f46 	cmnmi	r2, r6, asr #30
    1b68:	7962616e 	stmdbvc	r2!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1b6c:	73736170 	cmnvc	r3, #112, 2
    1b70:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1b74:	4e003165 	adfmisz	f3, f0, f5
    1b78:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1a44 <__pi_vfparse+0x58>
    1b7c:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1b80:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1b84:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1b88:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1b8c:	726c6244 	rsbvc	r6, ip, #68, 4	; 0x40000004
    1b90:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    1b94:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    1b98:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    1b9c:	56746573 			; <UNDEFINED> instruction: 0x56746573
    1ba0:	61746c6f 	cmnvs	r4, pc, ror #24
    1ba4:	63006567 	movwvs	r6, #1383	; 0x567
				} else if (c == 'x') {
    1ba8:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
					for (i = 28; ; i -= 4) {
    1bac:	7254746e 	subsvc	r7, r4, #1845493760	; 0x6e000000
					val = va_arg (ap, lword);
    1bb0:	76006d69 	strvc	r6, [r0], -r9, ror #26
							[ (val >> i) & 0xf ]);
    1bb4:	43736d69 	cmnmi	r3, #6720	; 0x1a40
    1bb8:	6f4d6c74 	svcvs	0x004d6c74
						outc (__pi_hex_enc_table
    1bbc:	00306564 	eorseq	r6, r0, r4, ror #10
    1bc0:	61696269 	cmnvs	r9, r9, ror #4
    1bc4:	66664f73 	uqsub16vs	r4, r6, r3
						if (i == 0)
    1bc8:	00746573 	rsbseq	r6, r4, r3, ror r5
    1bcc:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
					for (i = 28; ; i -= 4) {
    1bd0:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
					outc ('%');
    1bd4:	6f58726f 	svcvs	0x0058726f
    1bd8:	66686373 			; <UNDEFINED> instruction: 0x66686373
    1bdc:	566c7443 	strbtpl	r7, [ip], -r3, asr #8
					outc ('l');
    1be0:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1be4:	524f4e00 	subpl	r4, pc, #0, 28
				val = (word) va_arg (ap, aword);
    1be8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
				outc (val);
    1bec:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1bf0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
				while (*st != '\0') {
    1bf4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1bf8:	6f58726f 	svcvs	0x0058726f
    1bfc:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1c00:	74736146 	ldrbtvc	r6, [r3], #-326	; 0xfffffeba
					outc (*st);
    1c04:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    1c08:	4f4e0074 	svcmi	0x004e0074
					st++;
    1c0c:	5f4d4f52 	svcpl	0x004d4f52
		c = *fm++;
    1c10:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1c14:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1c18:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
char *vform (char *res, const char *fm, va_list aq) {
    1c1c:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    1c20:	63734f63 	cmnvs	r3, #396	; 0x18c
	if (res != NULL) {
    1c24:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1c28:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    1c2c:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1c30:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
}
    1c34:	6a644161 	bvs	19121c0 <__ccfg+0x18f2218>
    1c38:	00747375 	rsbseq	r7, r4, r5, ror r3
	fml = strlen (fm) + 17;
    1c3c:	4f524f4e 	svcmi	0x00524f4e
    1c40:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1c44:	47707574 			; <UNDEFINED> instruction: 0x47707574
	if ((res = (char*) umalloc (fml)) == NULL)
    1c48:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1c4c:	6f466d69 	svcvs	0x00466d69
    1c50:	736f5872 	cmnvc	pc, #7471104	; 0x720000
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1c54:	43664863 	cmnmi	r6, #6488064	; 0x630000
    1c58:	67006c74 	smlsdxvs	r0, r4, ip, r6
    1c5c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1c60:	6f466d69 	svcvs	0x00466d69
		ufree (res);
    1c64:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
		goto Again;
    1c68:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
	if (buf == NULL || fmt == NULL)
    1c6c:	56676643 	strbtpl	r6, [r7], -r3, asr #12
int vscan (const char *buf, const char *fmt, va_list ap) {
    1c70:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	if (buf == NULL || fmt == NULL)
    1c74:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1c78:	72546174 	subsvc	r6, r4, #116, 2
    1c7c:	75006d69 	strvc	r6, [r0, #-3433]	; 0xfffff297
		    	    case 'u': scanu (lword); break;
    1c80:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
			while (isspace (*buf)) buf++;
    1c84:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1c88:	73614666 	cmnvc	r1, #106954752	; 0x6600000
	while (*fmt != '\0') {
    1c8c:	61745374 	cmnvs	r4, r4, ror r3
		if (*fmt++ != '%')
    1c90:	61567472 	cmpvs	r6, r2, ror r4
		switch (*fmt++) {
    1c94:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1c98:	4f524f4e 	svcmi	0x00524f4e
    1c9c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1ca0:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1ca4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1ca8:	6f466d69 	svcvs	0x00466d69
    1cac:	706d4172 	rsbvc	r4, sp, r2, ror r1
}
    1cb0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
		switch (*fmt++) {
    1cb4:	00316854 	eorseq	r6, r1, r4, asr r8
    1cb8:	4f524f4e 	svcmi	0x00524f4e
    1cbc:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1cc0:	47707574 			; <UNDEFINED> instruction: 0x47707574
			while (isspace (*buf)) buf++;
    1cc4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1cc8:	6f466d69 	svcvs	0x00466d69
    1ccc:	706d4172 	rsbvc	r4, sp, r2, ror r1
    1cd0:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    1cd4:	00326854 	eorseq	r6, r2, r4, asr r8
    1cd8:	4f524f4e 	svcmi	0x00524f4e
			if (*buf == '\0')
    1cdc:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
			if (*buf != ',') {
    1ce0:	47707574 			; <UNDEFINED> instruction: 0x47707574
			sap = va_arg (ap, char*);
    1ce4:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
			nc++;
    1ce8:	6f466d69 	svcvs	0x00466d69
			if (*buf != ',') {
    1cec:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
				while (!isspace (*buf) && *buf != ',' &&
    1cf0:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    1cf4:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    1cf8:	524f4e00 	subpl	r4, pc, #0, 28
    1cfc:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 1d04 <vscan+0x98>
    1d00:	32334944 	eorscc	r4, r3, #68, 18	; 0x110000
    1d04:	57676552 			; <UNDEFINED> instruction: 0x57676552
    1d08:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
			while (isspace (*buf)) buf++;
    1d0c:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    1d10:	61443167 	cmpvs	r4, r7, ror #2
    1d14:	74006174 	strvc	r6, [r0], #-372	; 0xfffffe8c
    1d18:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1d1c:	6352726f 	cmpvs	r2, #-268435450	; 0xf0000006
			if (*buf == ',') buf++;
    1d20:	4c63734f 	stclmi	3, cr7, [r3], #-316	; 0xfffffec4
    1d24:	69424966 	stmdbvs	r2, {r1, r2, r5, r6, r8, fp, lr}^
			*sap = '\0';
    1d28:	72547361 	subsvc	r7, r4, #-2080374783	; 0x84000001
			break;
    1d2c:	61566d69 	cmpvs	r6, r9, ror #26
		    case 'd': scani (word); break;
    1d30:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1d34:	67726174 			; <UNDEFINED> instruction: 0x67726174
    1d38:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1d3c:	4e006d69 	cdpmi	13, 0, cr6, cr0, cr9, {3}
    1d40:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1c0c <__pi_vfparse+0x220>
    1d44:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1d48:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1d4c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1d50:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d54:	63646152 	cmnvs	r4, #-2147483628	; 0x80000014
    1d58:	43747845 	cmnmi	r4, #4521984	; 0x450000
    1d5c:	2e006766 	cdpcs	7, 0, cr6, cr0, cr6, {3}
    1d60:	2f2e2e2f 	svccs	0x002e2e2f
    1d64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1d68:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    1d6c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1d70:	2f62696c 	svccs	0x0062696c
    1d74:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    1d78:	6f725f70 	svcvs	0x00725f70
    1d7c:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    1d80:	53627573 	cmnpl	r2, #482344960	; 0x1cc00000
    1d84:	6e496365 	cdpvs	3, 4, cr6, cr9, cr5, {3}
    1d88:	4f4e0063 	svcmi	0x004e0063
    1d8c:	5f4d4f52 	svcpl	0x004d4f52
    1d90:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1d94:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1d98:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1d9c:	52726f46 	rsbspl	r6, r2, #280	; 0x118
		    case 'u': scanu (word); break;
    1da0:	63734f63 	cmnvs	r3, #396	; 0x18c
    1da4:	7452664c 	ldrbvc	r6, [r2], #-1612	; 0xfffff9b4
    1da8:	43656e75 	cmnmi	r5, #1872	; 0x750
    1dac:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    1db0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1db4:	524f4e00 	subpl	r4, pc, #0, 28
    1db8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1dbc:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1dc0:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1dc4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1dc8:	6f58726f 	svcvs	0x0058726f
    1dcc:	664c6373 			; <UNDEFINED> instruction: 0x664c6373
    1dd0:	75676552 	strbvc	r6, [r7, #-1362]!	; 0xfffffaae
    1dd4:	6f74616c 	svcvs	0x0074616c
    1dd8:	646e4172 	strbtvs	r4, [lr], #-370	; 0xfffffe8e
    1ddc:	72696d43 	rsbvc	r6, r9, #4288	; 0x10c0
    1de0:	52727772 	rsbspl	r7, r2, #29884416	; 0x1c80000
    1de4:	6f697461 	svcvs	0x00697461
		    case 'x': scanx (word); break;
    1de8:	33697500 	cmncc	r9, #0, 10
    1dec:	69725432 	ldmdbvs	r2!, {r1, r4, r5, sl, ip, lr}^
    1df0:	6553006d 	ldrbvs	r0, [r3, #-109]	; 0xffffff93
    1df4:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
    1df8:	456e6769 	strbmi	r6, [lr, #-1897]!	; 0xfffff897
    1dfc:	6e657478 	mcrvs	4, 3, r7, cr5, cr8, {3}
    1e00:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    1e04:	69725472 	ldmdbvs	r2!, {r1, r4, r5, r6, sl, ip, lr}^
    1e08:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
    1e0c:	67006575 	smlsdxvs	r0, r5, r5, r6
    1e10:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1e14:	6f466d69 	svcvs	0x00466d69
    1e18:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1e1c:	62566853 	subsvs	r6, r6, #5439488	; 0x530000
    1e20:	6e456675 	mcrvs	6, 2, r6, cr5, cr5, {3}
    1e24:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1e28:	4f4e0065 	svcmi	0x004e0065
    1e2c:	5f4d4f52 	svcpl	0x004d4f52
    1e30:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1e34:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1e38:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e3c:	41726f46 	cmnmi	r2, r6, asr #30
    1e40:	68536364 	ldmdavs	r3, {r2, r5, r6, r8, r9, sp, lr}^
    1e44:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1e48:	69006e45 	stmdbvs	r0, {r0, r2, r6, r9, sl, fp, sp, lr}
    1e4c:	69533233 	ldmdbvs	r3, {r0, r1, r4, r5, r9, ip, sp}^
    1e50:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1e54:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1e58:	006c6156 	rsbeq	r6, ip, r6, asr r1
    1e5c:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
			switch (*fmt++) {
    1e60:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1e64:	69750031 	ldmdbvs	r5!, {r0, r4, r5}^
    1e68:	63463233 	movtvs	r3, #25139	; 0x6233
    1e6c:	56316766 	ldrtpl	r6, [r1], -r6, ror #14
    1e70:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1e74:	524f4e00 	subpl	r4, pc, #0, 28
		    	    case 'd': scani (lword); break;
    1e78:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1e7c:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1e80:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1e84:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1e88:	6f58726f 	svcvs	0x0058726f
    1e8c:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1e90:	61696249 	cmnvs	r9, r9, asr #4
    1e94:	65687473 	strbvs	r7, [r8, #-1139]!	; 0xfffffb8d
    1e98:	67006d72 	smlsdxvs	r0, r2, sp, r6
    1e9c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1ea0:	6f466d69 	svcvs	0x00466d69
    1ea4:	63644172 	cmnvs	r4, #-2147483620	; 0x8000001c
    1ea8:	6f4d6853 	svcvs	0x004d6853
    1eac:	6e456564 	cdpvs	5, 4, cr6, cr5, cr4, {3}
    1eb0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1eb4:	4f4e0065 	svcmi	0x004e0065
    1eb8:	5f4d4f52 	svcpl	0x004d4f52
    1ebc:	4343534f 	movtmi	r5, #13135	; 0x334f
    1ec0:	6b636f6c 	blvs	18ddc78 <__ccfg+0x18bdcd0>
    1ec4:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1ec8:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    1ecc:	33690074 	cmncc	r9, #116	; 0x74
    1ed0:	64645632 	strbtvs	r5, [r4], #-1586	; 0xfffff9ce
		    	    case 'x': scanx (lword); break;
    1ed4:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    1ed8:	72547065 	subsvc	r7, r4, #101	; 0x65
    1edc:	66006d69 	strvs	r6, [r0], -r9, ror #26
    1ee0:	31676663 	cmncc	r7, r3, ror #12
    1ee4:	4363734f 	cmnmi	r3, #1006632961	; 0x3c000001
    1ee8:	00666e6f 	rsbeq	r6, r6, pc, ror #28
    1eec:	726c6264 	rsbvc	r6, ip, #100, 4	; 0x40000006
    1ef0:	706f6f4c 	rsbvc	r6, pc, ip, asr #30
    1ef4:	746c6946 	strbtvc	r6, [ip], #-2374	; 0xfffff6ba
    1ef8:	65527265 	ldrbvs	r7, [r2, #-613]	; 0xfffffd9b
    1efc:	56746573 			; <UNDEFINED> instruction: 0x56746573
    1f00:	61746c6f 	cmnvs	r4, pc, ror #24
    1f04:	61566567 	cmpvs	r6, r7, ror #10
    1f08:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1f0c:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    1f10:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1f14:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    1f18:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    1f1c:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    1f20:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    1f24:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    1f28:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    1f2c:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    1f30:	6c61566f 	stclvs	6, cr5, [r1], #-444	; 0xfffffe44
    1f34:	69006575 	stmdbvs	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
    1f38:	73616962 	cmnvc	r1, #1605632	; 0x188000
    1f3c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1f40:	524f4e00 	subpl	r4, pc, #0, 28
		    	    case 'd': scani (lword); break;
    1f44:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f48:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f4c:	41746553 	cmnmi	r4, r3, asr r5
    1f50:	74526e6f 	ldrbvc	r6, [r2], #-3695	; 0xfffff191
    1f54:	62755363 	rsbsvs	r5, r5, #-1946157055	; 0x8c000001
    1f58:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1f5c:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
		    	    case 'u': scanu (lword); break;
    1f60:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1e2c <vscan+0x1c0>
    1f64:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1f68:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1f6c:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1f70:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1f74:	63706d41 	cmnvs	r0, #4160	; 0x1040
    1f78:	43706d6f 	cmnmi	r0, #7104	; 0x1bc0
    1f7c:	006c7274 	rsbeq	r7, ip, r4, ror r2
    1f80:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1f84:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1f88:	6f526648 	svcvs	0x00526648
    1f8c:	69750077 	ldmdbvs	r5!, {r0, r1, r2, r4, r5, r6}^
    1f90:	6f583233 	svcvs	0x00583233
    1f94:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1f98:	006c6f43 	rsbeq	r6, ip, r3, asr #30
    1f9c:	4f524f4e 	svcmi	0x00524f4e
    1fa0:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1fa4:	53707574 	cmnpl	r0, #116, 10	; 0x1d000000
		    	    case 'x': scanx (lword); break;
    1fa8:	64567465 	ldrbvs	r7, [r6], #-1125	; 0xfffffb9b
    1fac:	654c7264 	strbvs	r7, [ip, #-612]	; 0xfffffd9c
			if ((c = *buf++) == '\0')
    1fb0:	006c6576 	rsbeq	r6, ip, r6, ror r5
    1fb4:	5477656e 	ldrbtpl	r6, [r7], #-1390	; 0xfffffa92
			sap = va_arg (ap, char*);
    1fb8:	526d6972 	rsbpl	r6, sp, #1867776	; 0x1c8000
			nc++;
    1fbc:	75007761 	strvc	r7, [r0, #-1889]	; 0xfffff89f
			break;
    1fc0:	54323369 	ldrtpl	r3, [r2], #-873	; 0xfffffc97
			while (isspace (*buf)) buf++;
    1fc4:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1fc8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1fcc:	32336900 	eorscc	r6, r3, #0, 18
						*sap++ = *buf++;
    1fd0:	74737543 	ldrbtvc	r7, [r3], #-1347	; 0xfffffabd
    1fd4:	72656d6f 	rsbvc	r6, r5, #7104	; 0x1bc0
			while (isspace (*buf)) buf++;
    1fd8:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    1fdc:	6a644161 	bvs	1912568 <__ccfg+0x18f25c0>
    1fe0:	00747375 	rsbseq	r7, r4, r5, ror r3
		return 0;
    1fe4:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1fe8:	53726464 	cmnpl	r2, #100, 8	; 0x64000000
		    case 'x': scanx (word); break;
    1fec:	7065656c 	rsbvc	r6, r5, ip, ror #10
    1ff0:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
		    	    case 'x': scanx (lword); break;
    1ff4:	64760061 	ldrbtvs	r0, [r6], #-97	; 0xffffff9f
    1ff8:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    1ffc:	63416d69 	movtvs	r6, #7529	; 0x1d69
    2000:	00657674 	rsbeq	r7, r5, r4, ror r6
    2004:	52545046 	subspl	r5, r4, #70	; 0x46
    2008:	454c465f 	strbmi	r4, [ip, #-1631]	; 0xfffff9a1
    200c:	45484354 	strbmi	r4, [r8, #-852]	; 0xfffffcac
    2010:	5f323352 	svcpl	0x00323352
    2014:	50460054 	subpl	r0, r6, r4, asr r0
    2018:	535f5254 	cmppl	pc, #84, 4	; 0x40000005
    201c:	56444454 			; <UNDEFINED> instruction: 0x56444454
    2020:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 2028 <NOROM_AONBatMonTemperatureGetDegC+0x2c>
    2024:	72756300 	rsbsvc	r6, r5, #0, 6
    2028:	706d6554 	rsbvc	r6, sp, r4, asr r5
    202c:	6c655300 	stclvs	3, cr5, [r5], #-0
    2030:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    2034:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
    2038:	00666552 	rsbeq	r6, r6, r2, asr r5
    203c:	52545046 	subspl	r5, r4, #70	; 0x46
    2040:	5345525f 	movtpl	r5, #21087	; 0x525f
    2044:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    2048:	545f3444 	ldrbpl	r3, [pc], #-1092	; 2050 <NOROM_CPUcpsie+0x4>
    204c:	66696400 	strbtvs	r6, [r9], -r0, lsl #8
    2050:	64645666 	strbtvs	r5, [r4], #-1638	; 0xfffff99a
    2054:	74634172 	strbtvc	r4, [r3], #-370	; 0xfffffe8e
    2058:	53657669 	cmnpl	r5, #110100480	; 0x6900000
    205c:	7065656c 	rsbvc	r6, r5, ip, ror #10
    2060:	63727000 	cmnvs	r2, #0
    2064:	6d61526d 	sfmvs	f5, 2, [r1, #-436]!	; 0xfffffe4c
    2068:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
    206c:	6f69746e 	svcvs	0x0069746e
    2070:	6f6c006e 	svcvs	0x006c006e
    2074:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    2078:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1f44 <vscan+0x2d8>
    207c:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    2080:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2084:	756a6441 	strbvc	r6, [sl, #-1089]!	; 0xfffffbbf
    2088:	65527473 	ldrbvs	r7, [r2, #-1139]	; 0xfffffb8d
    208c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2090:	66416567 	strbvs	r6, [r1], -r7, ror #10
    2094:	50726574 	rsbspl	r6, r2, r4, ror r5
    2098:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    209c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    20a0:	524f4e00 	subpl	r4, pc, #0, 28
    20a4:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    20a8:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    20ac:	65536c72 	ldrbvs	r6, [r3, #-3186]	; 0xfffff38e
    20b0:	63655274 	cmnvs	r5, #116, 4	; 0x40000007
    20b4:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    20b8:	66654265 	strbtvs	r4, [r5], -r5, ror #4
    20bc:	5065726f 	rsbpl	r7, r5, pc, ror #4
    20c0:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    20c4:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    20c8:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    20cc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20d0:	2f2e2e2f 	svccs	0x002e2e2f
    20d4:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    20d8:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    20dc:	79732f62 	ldmdbvc	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    20e0:	74635f73 	strbtvc	r5, [r3], #-3955	; 0xfffff08d
    20e4:	632e6c72 			; <UNDEFINED> instruction: 0x632e6c72
    20e8:	66615300 	strbtvs	r5, [r1], -r0, lsl #6
    20ec:	70614865 	rsbvc	r4, r1, r5, ror #16
    20f0:	696f5669 	stmdbvs	pc!, {r0, r3, r5, r6, r9, sl, ip, lr}^	; <UNPREDICTABLE>
    20f4:	5f5f0064 	svcpl	0x005f0064
    20f8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
    20fc:	745f3631 	ldrbvc	r3, [pc], #-1585	; 2104 <TrimAfterColdResetWakeupFromShutDown+0xb0>
    2100:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2104:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2108:	56524553 			; <UNDEFINED> instruction: 0x56524553
    210c:	5f334445 	svcpl	0x00334445
    2110:	4f4e0054 	svcmi	0x004e0054
    2114:	5f4d4f52 	svcpl	0x004d4f52
    2118:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    211c:	526c7274 	rsbpl	r7, ip, #116, 4	; 0x40000007
    2120:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    2124:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2128:	65476563 	strbvs	r6, [r7, #-1379]	; 0xfffffa9d
    212c:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2130:	6f443233 	svcvs	0x00443233
    2134:	6e69616d 	powvsez	f6, f1, #5.0
    2138:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
    213c:	70004572 	andvc	r4, r0, r2, ror r5
    2140:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    2144:	69750070 	ldmdbvs	r5!, {r4, r5, r6}^
    2148:	75413233 	strbvc	r3, [r1, #-563]	; 0xfffffdcd
    214c:	6f6c4378 	svcvs	0x006c4378
    2150:	00736b63 	rsbseq	r6, r3, r3, ror #22
    2154:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2158:	76654474 			; <UNDEFINED> instruction: 0x76654474
    215c:	00656369 	rsbeq	r6, r5, r9, ror #6
    2160:	4d435250 	sfmmi	f5, 2, [r3, #-320]	; 0xfffffec0
    2164:	616d6f44 	cmnvs	sp, r4, asr #30
    2168:	6e456e69 	cdpvs	14, 4, cr6, cr5, cr9, {3}
    216c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2170:	72657000 	rsbvc	r7, r5, #0
    2174:	656e004d 	strbvs	r0, [lr, #-77]!	; 0xffffffb3
    2178:	63655277 	cmnvs	r5, #1879048199	; 0x70000007
    217c:	67726168 	ldrbvs	r6, [r2, -r8, ror #2]!
    2180:	72655065 	rsbvc	r5, r5, #101	; 0x65
    2184:	00646f69 	rsbeq	r6, r4, r9, ror #30
    2188:	52545046 	subspl	r5, r4, #70	; 0x46
    218c:	5345525f 	movtpl	r5, #21087	; 0x525f
    2190:	45445445 	strbmi	r5, [r4, #-1093]	; 0xfffffbbb
    2194:	00545f56 	subseq	r5, r4, r6, asr pc
    2198:	52545046 	subspl	r5, r4, #70	; 0x46
    219c:	5345525f 	movtpl	r5, #21087	; 0x525f
    21a0:	45565245 	ldrbmi	r5, [r6, #-581]	; 0xfffffdbb
    21a4:	545f3244 	ldrbpl	r3, [pc], #-580	; 21ac <NOROM_SetupTrimDevice+0x84>
    21a8:	73655200 	cmnvc	r5, #0, 4
    21ac:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    21b0:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    21b4:	6f697461 	svcvs	0x00697461
    21b8:	4600346e 	strmi	r3, [r0], -lr, ror #8
    21bc:	5f525450 	svcpl	0x00525450
    21c0:	5658414d 	ldrbpl	r4, [r8], -sp, asr #2
    21c4:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 21cc <NOROM_SetupSetVddrLevel>
    21c8:	64647600 	strbtvs	r7, [r4], #-1536	; 0xfffffa00
    21cc:	70614372 	rsbvc	r4, r1, r2, ror r3
    21d0:	6c655300 	stclvs	3, cr5, [r5], #-0
    21d4:	41746365 	cmnmi	r4, r5, ror #6
    21d8:	6f434344 	svcvs	0x00434344
    21dc:	4942706d 	stmdbmi	r2, {r0, r2, r3, r5, r6, ip, sp, lr}^
    21e0:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    21e4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    21e8:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
    21ec:	7500656d 	strvc	r6, [r0, #-1389]	; 0xfffffa93
    21f0:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    21f4:	4d007864 	stcmi	8, cr7, [r0, #-400]	; 0xfffffe70
    21f8:	61567861 	cmpvs	r6, r1, ror #16
    21fc:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2200:	74536470 	ldrbvc	r6, [r3], #-1136	; 0xfffffb90
    2204:	00657461 	rsbeq	r7, r5, r1, ror #8
    2208:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    220c:	5f38746e 	svcpl	0x0038746e
    2210:	654d0074 	strbvs	r0, [sp, #-116]	; 0xffffff8c
    2214:	61566e61 	cmpvs	r6, r1, ror #28
    2218:	0065756c 	rsbeq	r7, r5, ip, ror #10
    221c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
    2220:	52747365 	rsbspl	r7, r4, #-1811939327	; 0x94000001
    2224:	61686365 	cmnvs	r8, r5, ror #6
    2228:	50656772 	rsbpl	r6, r5, r2, ror r7
    222c:	6f697265 	svcvs	0x00697265
    2230:	50460064 	subpl	r0, r6, r4, rrx
    2234:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    2238:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    223c:	31444556 	cmpcc	r4, r6, asr r5
    2240:	6400545f 	strvs	r5, [r0], #-1119	; 0xfffffba1
    2244:	61746c65 	cmnvs	r4, r5, ror #24
    2248:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    224c:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    2250:	69725470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, lr}^
    2254:	7243006d 	subvc	r0, r3, #109	; 0x6d
    2258:	00323363 	eorseq	r3, r2, r3, ror #6
    225c:	6f534648 	svcvs	0x00534648
    2260:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2264:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    2268:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    226c:	46006863 	strmi	r6, [r0], -r3, ror #16
    2270:	6374656c 	cmnvs	r4, #108, 10	; 0x1b000000
    2274:	33726568 	cmncc	r2, #104, 10	; 0x1a000000
    2278:	65470032 	strbvs	r0, [r7, #-50]	; 0xffffffce
    227c:	69684374 	stmdbvs	r8!, {r2, r4, r5, r6, r8, r9, lr}^
    2280:	00644970 	rsbeq	r4, r4, r0, ror r9
    2284:	52545046 	subspl	r5, r4, #70	; 0x46
    2288:	41454d5f 	cmpmi	r5, pc, asr sp
    228c:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    2290:	6200545f 	andvs	r5, r0, #1593835520	; 0x5f000000
    2294:	68547461 	ldmdavs	r4, {r0, r5, r6, sl, ip, sp, lr}^
    2298:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    229c:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    22a0:	52545046 	subspl	r5, r4, #70	; 0x46
    22a4:	4344415f 	movtmi	r4, #16735	; 0x415f
    22a8:	504d4f43 	subpl	r4, sp, r3, asr #30
    22ac:	5f4e4942 	svcpl	0x004e4942
    22b0:	50460054 	subpl	r0, r6, r4, asr r0
    22b4:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    22b8:	42504d4f 	subsmi	r4, r0, #5056	; 0x13c0
    22bc:	5f464552 	svcpl	0x00464552
    22c0:	6f780054 	svcvs	0x00780054
    22c4:	6f506373 	svcvs	0x00506373
    22c8:	4d726577 	cfldr64mi	mvdx6, [r2, #-476]!	; 0xfffffe24
    22cc:	0065646f 	rsbeq	r6, r5, pc, ror #8
    22d0:	656c6553 	strbvs	r6, [ip, #-1363]!	; 0xfffffaad
    22d4:	6f437463 	svcvs	0x00437463
    22d8:	4941706d 	stmdbmi	r1, {r0, r2, r3, r5, r6, ip, sp, lr}^
    22dc:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
    22e0:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    22e4:	4f565f52 	svcmi	0x00565f52
    22e8:	565f4449 	ldrbpl	r4, [pc], -r9, asr #8
    22ec:	5f44494f 	svcpl	0x0044494f
    22f0:	50460054 	subpl	r0, r6, r4, asr r0
    22f4:	435f5254 	cmpmi	pc, #84, 4	; 0x40000005
    22f8:	41504d4f 	cmpmi	r0, pc, asr #26
    22fc:	545f4e49 	ldrbpl	r4, [pc], #-3657	; 2304 <NOROM_SetupGetTrimForAnabypassValue1+0x10>
    2300:	43525000 	cmpmi	r2, #0
    2304:	616f4c4d 	cmnvs	pc, sp, asr #24
    2308:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
    230c:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
    2310:	64657466 	strbtvs	r7, [r5], #-1126	; 0xfffffb9a
    2314:	706d6554 	rsbvc	r6, sp, r4, asr r5
    2318:	44637400 	strbtmi	r7, [r3], #-1024	; 0xfffffc00
    231c:	61746c65 	cmnvs	r4, r5, ror #24
    2320:	705f6700 	subsvc	r6, pc, r0, lsl #14
    2324:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2328:	75646f4d 	strbvc	r6, [r4, #-3917]!	; 0xfffff0b3
    232c:	4743656c 	strbmi	r6, [r3, -ip, ror #10]
    2330:	52414800 	subpl	r4, r1, #0, 16
    2334:	50415f44 	subpl	r5, r1, r4, asr #30
    2338:	00545f49 	subseq	r5, r4, r9, asr #30
    233c:	53727563 	cmnpl	r2, #415236096	; 0x18c00000
    2340:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    2344:	43534f00 	cmpmi	r3, #0, 30
    2348:	6f536648 	svcvs	0x00536648
    234c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2350:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2354:	46006863 	strmi	r6, [r0], -r3, ror #16
    2358:	5f525450 	svcpl	0x00525450
    235c:	33435243 	movtcc	r5, #12867	; 0x3243
    2360:	00545f32 	subseq	r5, r4, r2, lsr pc
    2364:	536e6f61 	cmnpl	lr, #388	; 0x184
    2368:	74637379 	strbtvc	r7, [r3], #-889	; 0xfffffc87
    236c:	7277506c 	rsbsvc	r5, r7, #108	; 0x6c
    2370:	006c7463 	rsbeq	r7, ip, r3, ror #8
    2374:	69546470 	ldmdbvs	r4, {r4, r5, r6, sl, sp, lr}^
    2378:	4600656d 	strmi	r6, [r0], -sp, ror #10
    237c:	5f525450 	svcpl	0x00525450
    2380:	564e494d 	strbpl	r4, [lr], -sp, asr #18
    2384:	545f4c41 	ldrbpl	r4, [pc], #-3137	; 238c <NOROM_SetupGetTrimForAmpcompCtrl>
    2388:	524f4e00 	subpl	r4, pc, #0, 28
    238c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2390:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    2394:	6f506c72 	svcvs	0x00506c72
    2398:	45726577 	ldrbmi	r6, [r2, #-1399]!	; 0xfffffa89
    239c:	79726576 	ldmdbvc	r2!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
    23a0:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
    23a4:	50460067 	subpl	r0, r6, r7, rrx
    23a8:	485f5254 	ldmdami	pc, {r2, r4, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    23ac:	554f5346 	strbpl	r5, [pc, #-838]	; 206e <TrimAfterColdResetWakeupFromShutDown+0x1a>
    23b0:	53454352 	movtpl	r4, #21330	; 0x5352
    23b4:	53454641 	movtpl	r4, #22081	; 0x5641
    23b8:	43544957 	cmpmi	r4, #1425408	; 0x15c000
    23bc:	00545f48 	subseq	r5, r4, r8, asr #30
    23c0:	566e694d 	strbtpl	r6, [lr], -sp, asr #18
    23c4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    23c8:	6f4c7000 	svcvs	0x004c7000
    23cc:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
    23d0:	6c626154 	stfvse	f6, [r2], #-336	; 0xfffffeb0
    23d4:	65530065 	ldrbvs	r0, [r3, #-101]	; 0xffffff9b
    23d8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    23dc:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    23e0:	66655241 	strbtvs	r5, [r5], -r1, asr #4
    23e4:	73655200 	cmnvc	r5, #0, 4
    23e8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    23ec:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    23f0:	6f697461 	svcvs	0x00697461
    23f4:	5200316e 	andpl	r3, r0, #-2147483621	; 0x8000001b
    23f8:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    23fc:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2400:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2404:	326e6f69 	rsbcc	r6, lr, #420	; 0x1a4
    2408:	73655200 	cmnvc	r5, #0, 4
    240c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    2410:	636f4c64 	cmnvs	pc, #100, 24	; 0x6400
    2414:	6f697461 	svcvs	0x00697461
    2418:	5200336e 	andpl	r3, r0, #-1207959551	; 0xb8000001
    241c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    2420:	4c646576 	cfstr64mi	mvdx6, [r4], #-472	; 0xfffffe28
    2424:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    2428:	356e6f69 	strbcc	r6, [lr, #-3945]!	; 0xfffff097
    242c:	61745300 	cmnvs	r4, r0, lsl #6
    2430:	6544646e 	strbvs	r6, [r4, #-1134]	; 0xfffffb92
    2434:	74616976 	strbtvc	r6, [r1], #-2422	; 0xfffff68a
    2438:	566e6f69 	strbtpl	r6, [lr], -r9, ror #30
    243c:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    2440:	52647000 	rsbpl	r7, r4, #0
    2444:	61686365 	cmnvs	r8, r5, ror #6
    2448:	50656772 	rsbpl	r6, r5, r2, ror r7
    244c:	6f697265 	svcvs	0x00697265
    2450:	6f610064 	svcvs	0x00610064
    2454:	7461426e 	strbtvc	r4, [r1], #-622	; 0xfffffd92
    2458:	426e6f6d 	rsbmi	r6, lr, #436	; 0x1b4
    245c:	76007461 	strvc	r7, [r0], -r1, ror #8
    2460:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    2464:	536d6972 	cmnpl	sp, #1867776	; 0x1c8000
    2468:	7065656c 	rsbvc	r6, r5, ip, ror #10
    246c:	776f5000 	strbvc	r5, [pc, -r0]!
    2470:	75517265 	ldrbvc	r7, [r1, #-613]	; 0xfffffd9b
    2474:	6c476c61 	mcrrvs	12, 6, r6, r7, cr1
    2478:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
    247c:	00745f73 	rsbseq	r5, r4, r3, ror pc
    2480:	52545046 	subspl	r5, r4, #70	; 0x46
    2484:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    2488:	49534c46 	ldmdbmi	r3, {r1, r2, r6, sl, fp, lr}^
    248c:	545f455a 	ldrbpl	r4, [pc], #-1370	; 2494 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x4>
    2490:	524f4e00 	subpl	r4, pc, #0, 28
    2494:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    2498:	74437379 	strbvc	r7, [r3], #-889	; 0xfffffc87
    249c:	445f6c72 	ldrbmi	r6, [pc], #-3186	; 24a4 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    24a0:	5f434443 	svcpl	0x00434443
    24a4:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    24a8:	43656761 	cmnmi	r5, #25427968	; 0x1840000
    24ac:	69646e6f 	stmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    24b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    24b4:	6f436c61 	svcvs	0x00436c61
    24b8:	6f72746e 	svcvs	0x0072746e
    24bc:	6c46006c 	mcrrvs	0, 6, r0, r6, cr12
    24c0:	47687361 	strbmi	r7, [r8, -r1, ror #6]!
    24c4:	69537465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    24c8:	4600657a 			; <UNDEFINED> instruction: 0x4600657a
    24cc:	5f525450 	svcpl	0x00525450
    24d0:	504d4f43 	subpl	r4, sp, r3, asr #30
    24d4:	46455241 	strbmi	r5, [r5], -r1, asr #4
    24d8:	7000545f 	andvc	r5, r0, pc, asr r4
    24dc:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    24e0:	6c617551 	cfstr64vs	mvdx7, [r1], #-324	; 0xfffffebc
    24e4:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    24e8:	00736c61 	rsbseq	r6, r3, r1, ror #24
    24ec:	52545046 	subspl	r5, r4, #70	; 0x46
    24f0:	5445475f 	strbpl	r4, [r5], #-1887	; 0xfffff8a1
    24f4:	50494843 	subpl	r4, r9, r3, asr #16
    24f8:	545f4449 	ldrbpl	r4, [pc], #-1097	; 2500 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x48>
    24fc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2500:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2504:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2508:	5f354445 	svcpl	0x00354445
    250c:	52500054 	subspl	r0, r0, #84	; 0x54
    2510:	434f544f 	movtmi	r5, #62543	; 0xf44f
    2514:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    2518:	72505f54 	subsvc	r5, r0, #84, 30	; 0x150
    251c:	6972706f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, r6, ip, sp, lr}^
    2520:	72617465 	rsbvc	r7, r1, #1694498816	; 0x65000000
    2524:	41500079 	cmpmi	r0, r9, ror r0
    2528:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    252c:	78345f45 	ldmdavc	r4!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    2530:	48430034 	stmdami	r3, {r2, r4, r5}^
    2534:	545f5049 	ldrbpl	r5, [pc], #-73	; 253c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x84>
    2538:	5f455059 	svcpl	0x00455059
    253c:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2540:	77003034 	smladxvc	r0, r4, r0, r3
    2544:	72656661 	rsbvc	r6, r5, #101711872	; 0x6100000
    2548:	46006449 	strmi	r6, [r0], -r9, asr #8
    254c:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2550:	43435f59 	movtmi	r5, #16217	; 0x3f59
    2554:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    2558:	7a694c5f 	bvc	1a556dc <__ccfg+0x1a35734>
    255c:	524f4e00 	subpl	r4, pc, #0, 28
    2560:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2564:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2568:	5f6f666e 	svcpl	0x006f666e
    256c:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2570:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    2574:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    2578:	4f4e0079 	svcmi	0x004e0079
    257c:	5f4d4f52 	svcpl	0x004d4f52
    2580:	70696843 	rsbvc	r6, r9, r3, asr #16
    2584:	6f666e49 	svcvs	0x00666e49
    2588:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    258c:	6b636150 	blvs	18daad4 <__ccfg+0x18bab2c>
    2590:	54656761 	strbtpl	r6, [r5], #-1889	; 0xfffff89f
    2594:	00657079 	rsbeq	r7, r5, r9, ror r0
    2598:	4f524f4e 	svcmi	0x00524f4e
    259c:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    25a0:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    25a4:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    25a8:	77487465 	strbvc	r7, [r8, -r5, ror #8]
    25ac:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    25b0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    25b4:	63617000 	cmnvs	r1, #0
    25b8:	7079546b 	rsbsvc	r5, r9, fp, ror #8
    25bc:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    25c0:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    25c4:	745f6570 	ldrbvc	r6, [pc], #-1392	; 25cc <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4>
    25c8:	52774800 	rsbspl	r4, r7, #0, 16
    25cc:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    25d0:	5f6e6f69 	svcpl	0x006e6f69
    25d4:	48430074 	stmdami	r3, {r2, r4, r5, r6}^
    25d8:	545f5049 	ldrbpl	r5, [pc], #-73	; 25e0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x18>
    25dc:	5f455059 	svcpl	0x00455059
    25e0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    25e4:	43003031 	movwmi	r3, #49	; 0x31
    25e8:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    25ec:	6c696d61 	stclvs	13, cr6, [r9], #-388	; 0xfffffe7c
    25f0:	00745f79 	rsbseq	r5, r4, r9, ror pc
    25f4:	65527768 	ldrbvs	r7, [r2, #-1896]	; 0xfffff898
    25f8:	48430076 	stmdami	r3, {r1, r2, r4, r5, r6}^
    25fc:	545f5049 	ldrbpl	r5, [pc], #-73	; 2604 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x3c>
    2600:	5f455059 	svcpl	0x00455059
    2604:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2608:	50003035 	andpl	r3, r0, r5, lsr r0
    260c:	414b4341 	cmpmi	fp, r1, asr #6
    2610:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    2614:	00505343 	subseq	r5, r0, r3, asr #6
    2618:	6f6e696d 	svcvs	0x006e696d
    261c:	76655272 			; <UNDEFINED> instruction: 0x76655272
    2620:	4d414600 	stclmi	6, cr4, [r1, #-0]
    2624:	5f594c49 	svcpl	0x00594c49
    2628:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    262c:	525f7878 	subspl	r7, pc, #120, 16	; 0x780000
    2630:	48430032 	stmdami	r3, {r1, r4, r5}^
    2634:	545f5049 	ldrbpl	r5, [pc], #-73	; 263c <NOROM_SetupSetAonRtcSubSecInc+0x10>
    2638:	5f455059 	svcpl	0x00455059
    263c:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2640:	43003035 	movwmi	r3, #53	; 0x35
    2644:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2648:	5f6f666e 	svcpl	0x006f666e
    264c:	70696843 	rsbvc	r6, r9, r3, asr #16
    2650:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    2654:	7349796c 	movtvc	r7, #39276	; 0x996c
    2658:	33314343 	teqcc	r1, #201326593	; 0xc000001
    265c:	46007878 			; <UNDEFINED> instruction: 0x46007878
    2660:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2664:	6e555f59 	mrcvs	15, 2, r5, cr5, cr9, {2}
    2668:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    266c:	4843006e 	stmdami	r3, {r1, r2, r3, r5, r6}^
    2670:	545f5049 	ldrbpl	r5, [pc], #-73	; 2678 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x24>
    2674:	5f455059 	svcpl	0x00455059
    2678:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    267c:	66003032 			; <UNDEFINED> instruction: 0x66003032
    2680:	31676663 	cmncc	r7, r3, ror #12
    2684:	00766552 	rsbseq	r6, r6, r2, asr r5
    2688:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    268c:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    2690:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    2694:	68630078 	stmdavs	r3!, {r3, r4, r5, r6}^
    2698:	61467069 	cmpvs	r6, r9, rrx
    269c:	5748006d 	strbpl	r0, [r8, -sp, rrx]
    26a0:	5f564552 	svcpl	0x00564552
    26a4:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    26a8:	006e776f 	rsbeq	r7, lr, pc, ror #14
    26ac:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    26b0:	6f725031 	svcvs	0x00725031
    26b4:	6f636f74 	svcvs	0x00636f74
    26b8:	7250006c 	subsvc	r0, r0, #108	; 0x6c
    26bc:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    26c0:	69426c6f 	stmdbvs	r2, {r0, r1, r2, r3, r5, r6, sl, fp, sp, lr}^
    26c4:	63655674 	cmnvs	r5, #116, 12	; 0x7400000
    26c8:	5f726f74 	svcpl	0x00726f74
    26cc:	52500074 	subspl	r0, r0, #116	; 0x74
    26d0:	434f544f 	movtmi	r5, #62543	; 0xf44f
    26d4:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    26d8:	45495f54 	strbmi	r5, [r9, #-3924]	; 0xfffff0ac
    26dc:	385f4545 	ldmdacc	pc, {r0, r2, r6, r8, sl, lr}^	; <UNPREDICTABLE>
    26e0:	315f3230 	cmpcc	pc, r0, lsr r2	; <UNPREDICTABLE>
    26e4:	00345f35 	eorseq	r5, r4, r5, lsr pc
    26e8:	50494843 	subpl	r4, r9, r3, asr #16
    26ec:	5059545f 	subspl	r5, r9, pc, asr r4
    26f0:	6e555f45 	cdpvs	15, 5, cr5, cr5, cr5, {2}
    26f4:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
    26f8:	5748006e 	strbpl	r0, [r8, -lr, rrx]
    26fc:	5f564552 	svcpl	0x00564552
    2700:	00325f32 	eorseq	r5, r2, r2, lsr pc
    2704:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    2708:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    270c:	78333143 	ldmdavc	r3!, {r0, r1, r6, r8, ip, sp}
    2710:	41500078 	cmpmi	r0, r8, ror r0
    2714:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    2718:	78375f45 	ldmdavc	r7!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    271c:	52500037 	subspl	r0, r0, #55	; 0x37
    2720:	434f544f 	movtmi	r5, #62543	; 0xf44f
    2724:	555f4c4f 	ldrbpl	r4, [pc, #-3151]	; 1add <__pi_vfparse+0xf1>
    2728:	6f6e6b6e 	svcvs	0x006e6b6e
    272c:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    2730:	56455257 			; <UNDEFINED> instruction: 0x56455257
    2734:	305f325f 	subscc	r3, pc, pc, asr r2	; <UNPREDICTABLE>
    2738:	524f4e00 	subpl	r4, pc, #0, 28
    273c:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2740:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2744:	5f6f666e 	svcpl	0x006f666e
    2748:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    274c:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    2750:	00657079 	rsbeq	r7, r5, r9, ror r0
    2754:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2758:	5f325f56 	svcpl	0x00325f56
    275c:	52500031 	subspl	r0, r0, #49	; 0x31
    2760:	434f544f 	movtmi	r5, #62543	; 0xf44f
    2764:	49424c4f 	stmdbmi	r2, {r0, r1, r2, r3, r6, sl, fp, lr}^
    2768:	4c425f54 	mcrrmi	15, 5, r5, r2, cr4
    276c:	41460045 	cmpmi	r6, r5, asr #32
    2770:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    2774:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    2778:	5f787836 	svcpl	0x00787836
    277c:	00616741 	rsbeq	r6, r1, r1, asr #14
    2780:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2784:	5f325f56 	svcpl	0x00325f56
    2788:	68630033 	stmdavs	r3!, {r0, r1, r4, r5}^
    278c:	79547069 	ldmdbvc	r4, {r0, r3, r5, r6, ip, sp, lr}^
    2790:	43006570 	movwmi	r6, #1392	; 0x570
    2794:	5f504948 	svcpl	0x00504948
    2798:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    279c:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    27a0:	5f4d4f54 	svcpl	0x004d4f54
    27a4:	48430030 	stmdami	r3, {r4, r5}^
    27a8:	545f5049 	ldrbpl	r5, [pc], #-73	; 27b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc>
    27ac:	5f455059 	svcpl	0x00455059
    27b0:	54535543 	ldrbpl	r5, [r3], #-1347	; 0xfffffabd
    27b4:	315f4d4f 	cmpcc	pc, pc, asr #26
    27b8:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    27bc:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    27c0:	435f4550 	cmpmi	pc, #80, 10	; 0x14000000
    27c4:	33363243 	teqcc	r6, #805306372	; 0x30000004
    27c8:	57480030 	smlaldxpl	r0, r8, r0, r0
    27cc:	5f564552 	svcpl	0x00564552
    27d0:	00305f31 	eorseq	r5, r0, r1, lsr pc
    27d4:	4b434150 	blmi	10d2d1c <__ccfg+0x10b2d74>
    27d8:	5f454741 	svcpl	0x00454741
    27dc:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    27e0:	006e776f 	rsbeq	r7, lr, pc, ror #14
    27e4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    27e8:	2f2e2e2f 	svccs	0x002e2e2f
    27ec:	642f2e2e 	strtvs	r2, [pc], #-3630	; 27f4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x50>
    27f0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    27f4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    27f8:	6968632f 	stmdbvs	r8!, {r0, r1, r2, r3, r5, r8, r9, sp, lr}^
    27fc:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    2800:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    2804:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    2808:	65735531 	ldrbvs	r5, [r3, #-1329]!	; 0xfffffacf
    280c:	00644972 	rsbeq	r4, r4, r2, ror r9
    2810:	70696843 	rsbvc	r6, r9, r3, asr #16
    2814:	6f666e49 	svcvs	0x00666e49
    2818:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    281c:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    2820:	64496563 	strbvs	r6, [r9], #-1379	; 0xfffffa9d
    2824:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2828:	646f4376 	strbtvs	r4, [pc], #-886	; 2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8c>
    282c:	68430065 	stmdavs	r3, {r0, r2, r5, r6}^
    2830:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    2834:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    2838:	694d7465 	stmdbvs	sp, {r0, r2, r5, r6, sl, ip, sp, lr}^
    283c:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2840:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2844:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    2848:	7748726f 	strbvc	r7, [r8, -pc, ror #4]
    284c:	00766552 	rsbseq	r6, r6, r2, asr r5
    2850:	4f524f4e 	svcmi	0x00524f4e
    2854:	68435f4d 	stmdavs	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2858:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    285c:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    2860:	75537465 	ldrbvc	r7, [r3, #-1125]	; 0xfffffb9b
    2864:	726f7070 	rsbvc	r7, pc, #112	; 0x70
    2868:	50646574 	rsbpl	r6, r4, r4, ror r5
    286c:	6f746f72 	svcvs	0x00746f72
    2870:	5f6c6f63 	svcpl	0x006c6f63
    2874:	50005642 	andpl	r5, r0, r2, asr #12
    2878:	414b4341 	cmpmi	fp, r1, asr #6
    287c:	575f4547 	ldrbpl	r4, [pc, -r7, asr #10]
    2880:	52454641 	subpl	r4, r5, #68157440	; 0x4100000
    2884:	43415000 	movtmi	r5, #4096	; 0x1000
    2888:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    288c:	3578355f 	ldrbcc	r3, [r8, #-1375]!	; 0xfffffaa1
    2890:	63615000 	cmnvs	r1, #0
    2894:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    2898:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    289c:	4300745f 	movwmi	r7, #1119	; 0x45f
    28a0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    28a4:	5f6f666e 	svcpl	0x006f666e
    28a8:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    28ac:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
    28b0:	73496e6f 	movtvc	r6, #40559	; 0x9e6f
    28b4:	4554475f 	ldrbmi	r4, [r4, #-1887]	; 0xfffff8a1
    28b8:	5f325f51 	svcpl	0x00325f51
    28bc:	68430030 	stmdavs	r3, {r4, r5}^
    28c0:	6e497069 	cdpvs	0, 4, cr7, cr9, cr9, {3}
    28c4:	475f6f66 	ldrbmi	r6, [pc, -r6, ror #30]
    28c8:	73557465 	cmpvc	r5, #1694498816	; 0x65000000
    28cc:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    28d0:	33697500 	cmncc	r9, #0, 10
    28d4:	67655232 			; <UNDEFINED> instruction: 0x67655232
    28d8:	524f4e00 	subpl	r4, pc, #0, 28
    28dc:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 28e4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x140>
    28e0:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    28e4:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    28e8:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    28ec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    28f0:	64416e00 	strbvs	r6, [r1], #-3584	; 0xfffff200
    28f4:	4e007264 	cdpmi	2, 0, cr7, cr0, cr4, {3}
    28f8:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 27c4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20>
    28fc:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    2900:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2904:	61655274 	smcvs	21796	; 0x5524
    2908:	526e0064 	rsbpl	r0, lr, #100	; 0x64
    290c:	41007465 	tstmi	r0, r5, ror #8
    2910:	64417875 	strbvs	r7, [r1], #-2165	; 0xfffff78b
    2914:	69644469 	stmdbvs	r4!, {r0, r3, r5, r6, sl, lr}^
    2918:	65666153 	strbvs	r6, [r6, #-339]!	; 0xfffffead
    291c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    2920:	69750065 	ldmdbvs	r5!, {r0, r2, r5, r6}^
    2924:	61443631 	cmpvs	r4, r1, lsr r6
    2928:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    292c:	57323369 	ldrpl	r3, [r2, -r9, ror #6]!
    2930:	74614472 	strbtvc	r4, [r1], #-1138	; 0xfffffb8e
    2934:	69750061 	ldmdbvs	r5!, {r0, r5, r6}^
    2938:	61443233 	cmpvs	r4, r3, lsr r2
    293c:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    2940:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    2944:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
    2948:	524f4e00 	subpl	r4, pc, #0, 28
    294c:	445f4d4f 	ldrbmi	r4, [pc], #-3407	; 2954 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1b0>
    2950:	36314944 	ldrtcc	r4, [r1], -r4, asr #18
    2954:	66746942 	ldrbtvs	r6, [r4], -r2, asr #18
    2958:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
    295c:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    2960:	446e0065 	strbtmi	r0, [lr], #-101	; 0xffffff9b
    2964:	00617461 	rsbeq	r7, r1, r1, ror #8
    2968:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    296c:	006c6156 	rsbeq	r6, ip, r6, asr r1
    2970:	41787541 	cmnmi	r8, r1, asr #10
    2974:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    2978:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    297c:	61655265 	cmnvs	r5, r5, ror #4
    2980:	4f4e0064 	svcmi	0x004e0064
    2984:	5f4d4f52 	svcpl	0x004d4f52
    2988:	31494444 	cmpcc	r9, r4, asr #8
    298c:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    2990:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
    2994:	2f2e0065 	svccs	0x002e0065
    2998:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    299c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    29a0:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    29a4:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    29a8:	642f6269 	strtvs	r6, [pc], #-617	; 29b0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>
    29ac:	632e6964 			; <UNDEFINED> instruction: 0x632e6964
    29b0:	33697500 	cmncc	r9, #0, 10
    29b4:	73614d32 	cmnvc	r1, #3200	; 0xc80
    29b8:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
    29bc:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    29c0:	64644167 	strbtvs	r4, [r4], #-359	; 0xfffffe99
    29c4:	49620072 	stmdbmi	r2!, {r1, r4, r5, r6}^
    29c8:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    29cc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    29d0:	536e0064 	cmnpl	lr, #100	; 0x64
    29d4:	00657a69 	rsbeq	r7, r5, r9, ror #20
    29d8:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    29dc:	0063734f 	rsbeq	r7, r3, pc, asr #6
    29e0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    29e4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    29e8:	435f6e4f 	cmpmi	pc, #1264	; 0x4f0
    29ec:	4f4e0056 	svcmi	0x004e0056
    29f0:	5f4d4f52 	svcpl	0x004d4f52
    29f4:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    29f8:	74415f46 	strbvc	r5, [r1], #-3910	; 0xfffff0ba
    29fc:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2a00:	536f5474 	cmnpl	pc, #116, 8	; 0x74000000
    2a04:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2a08:	586f5468 	stmdapl	pc!, {r3, r5, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    2a0c:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2a10:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2a14:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2a18:	0066664f 	rsbeq	r6, r6, pc, asr #12
    2a1c:	5377656e 	cmnpl	r7, #461373440	; 0x1b800000
    2a20:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2a24:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2a28:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    2a2c:	70007355 	andvc	r7, r0, r5, asr r3
    2a30:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2a34:	70003150 	andvc	r3, r0, r0, asr r1
    2a38:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2a3c:	70003250 	andvc	r3, r0, r0, asr r2
    2a40:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2a44:	70003350 	andvc	r3, r0, r0, asr r3
    2a48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2a4c:	5373756f 	cmnpl	r3, #465567744	; 0x1bc00000
    2a50:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2a54:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2a58:	6e49656d 	cdpvs	5, 4, cr6, cr9, cr13, {3}
    2a5c:	2e007355 	mcrcs	3, 0, r7, cr0, cr5, {2}
    2a60:	2f2e2e2f 	svccs	0x002e2e2f
    2a64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2a68:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2a6c:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2a70:	2f62696c 	svccs	0x0062696c
    2a74:	2e63736f 	cdpcs	3, 6, cr7, cr3, cr15, {3}
    2a78:	69740063 	ldmdbvs	r4!, {r0, r1, r5, r6}^
    2a7c:	6f58656d 	svcvs	0x0058656d
    2a80:	74536373 	ldrbvc	r6, [r3], #-883	; 0xfffffc8d
    2a84:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    2a88:	0056435f 	subseq	r4, r6, pc, asr r3
    2a8c:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2a90:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    2a94:	6f6c0061 	svcvs	0x006c0061
    2a98:	72685477 	rsbvc	r5, r8, #1996488704	; 0x77000000
    2a9c:	6f687365 	svcvs	0x00687365
    2aa0:	4e00646c 	cdpmi	4, 0, cr6, cr0, cr12, {3}
    2aa4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2970 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1cc>
    2aa8:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2aac:	545f4648 	ldrbpl	r4, [pc], #-1608	; 2ab4 <NOROM_ChipInfo_GetHwRevision+0x2c>
    2ab0:	4f6e7275 	svcmi	0x006e7275
    2ab4:	736f586e 	cmnvc	pc, #7208960	; 0x6e0000
    2ab8:	6d610063 	stclvs	0, cr0, [r1, #-396]!	; 0xfffffe74
    2abc:	6c615670 	stclvs	6, cr5, [r1], #-448	; 0xfffffe40
    2ac0:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    2ac4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2990 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>
    2ac8:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2acc:	535f4648 	cmppl	pc, #72, 12	; 0x4800000
    2ad0:	63746977 	cmnvs	r4, #1949696	; 0x1dc000
    2ad4:	526f5468 	rsbpl	r5, pc, #104, 8	; 0x68000000
    2ad8:	63734f63 	cmnvs	r3, #396	; 0x18c
    2adc:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    2ae0:	5866664f 	stmdapl	r6!, {r0, r1, r2, r3, r6, r9, sl, sp, lr}^
    2ae4:	0063736f 	rsbeq	r7, r3, pc, ror #6
    2ae8:	4f524f4e 	svcmi	0x00524f4e
    2aec:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2af0:	50485f43 	subpl	r5, r8, r3, asr #30
    2af4:	5243534f 	subpl	r5, r3, #1006632961	; 0x3c000001
    2af8:	74616c65 	strbtvc	r6, [r1], #-3173	; 0xfffff39b
    2afc:	46657669 	strbtmi	r7, [r5], -r9, ror #12
    2b00:	75716572 	ldrbvc	r6, [r1, #-1394]!	; 0xfffffa8e
    2b04:	79636e65 	stmdbvc	r3!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2b08:	7366664f 	cmnvc	r6, #82837504	; 0x4f00000
    2b0c:	65477465 	strbvs	r7, [r7, #-1125]	; 0xfffffb9b
    2b10:	4f4e0074 	svcmi	0x004e0074
    2b14:	5f4d4f52 	svcpl	0x004d4f52
    2b18:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2b1c:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
    2b20:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    2b24:	72437465 	subvc	r7, r3, #1694498816	; 0x65000000
    2b28:	61747379 	cmnvs	r4, r9, ror r3
    2b2c:	706d416c 	rsbvc	r4, sp, ip, ror #2
    2b30:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
    2b34:	74006564 	strvc	r6, [r0], #-1380	; 0xfffffa9c
    2b38:	44706d65 	ldrbtmi	r6, [r0], #-3429	; 0xfffff29b
    2b3c:	61746c65 	cmnvs	r4, r5, ror #24
    2b40:	6f003258 	svcvs	0x00003258
    2b44:	66486373 			; <UNDEFINED> instruction: 0x66486373
    2b48:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    2b4c:	00736c61 	rsbseq	r6, r3, r1, ror #24
    2b50:	534f5048 	movtpl	r5, #61512	; 0xf048
    2b54:	65525f43 	ldrbvs	r5, [r2, #-3907]	; 0xfffff0bd
    2b58:	6572466c 	ldrbvs	r4, [r2, #-1644]!	; 0xfffff994
    2b5c:	66664f71 	uqsub16vs	r4, r6, r1
    2b60:	00746573 	rsbseq	r6, r4, r3, ror r5
    2b64:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2b68:	6d695461 	cfstrdvs	mvd5, [r9, #-388]!	; 0xfffffe7c
    2b6c:	6e695365 	cdpvs	3, 6, cr5, cr9, cr5, {3}
    2b70:	6f586563 	svcvs	0x00586563
    2b74:	6e4f6373 	mcrvs	3, 2, r6, cr15, cr3, {3}
    2b78:	734d6e49 	movtvc	r6, #56905	; 0xde49
    2b7c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2b80:	65546174 	ldrbvs	r6, [r4, #-372]	; 0xfffffe8c
    2b84:	6953706d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, ip, sp, lr}^
    2b88:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2b8c:	4f63736f 	svcmi	0x0063736f
    2b90:	6966006e 	stmdbvs	r6!, {r1, r2, r3, r5, r6}^
    2b94:	72615074 	rsbvc	r5, r1, #116	; 0x74
    2b98:	00736d61 	rsbseq	r6, r3, r1, ror #26
    2b9c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
    2ba0:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    2ba4:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2ba8:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2bac:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    2bb0:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2bb4:	5f66664f 	svcpl	0x0066664f
    2bb8:	4f005643 	svcmi	0x00005643
    2bbc:	66484353 			; <UNDEFINED> instruction: 0x66484353
    2bc0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    2bc4:	65526563 	ldrbvs	r6, [r2, #-1379]	; 0xfffffa9d
    2bc8:	00796461 	rsbseq	r6, r9, r1, ror #8
    2bcc:	43706d61 	cmnmi	r0, #6208	; 0x1840
    2bd0:	54706d6f 	ldrbtpl	r6, [r0], #-3439	; 0xfffff291
    2bd4:	4f003168 	svcmi	0x00003168
    2bd8:	66486373 			; <UNDEFINED> instruction: 0x66486373
    2bdc:	626f6c47 	rsbvs	r6, pc, #18176	; 0x4700
    2be0:	5f736c61 	svcpl	0x00736c61
    2be4:	69740074 	ldmdbvs	r4!, {r2, r4, r5, r6}^
    2be8:	6e55656d 	cdpvs	5, 5, cr6, cr5, cr13, {3}
    2bec:	576c6974 			; <UNDEFINED> instruction: 0x576c6974
    2bf0:	75656b61 	strbvc	r6, [r5, #-2913]!	; 0xfffff49f
    2bf4:	4d6e4970 			; <UNDEFINED> instruction: 0x4d6e4970
    2bf8:	69750073 	ldmdbvs	r5!, {r0, r1, r4, r5, r6}^
    2bfc:	72533233 	subsvc	r3, r3, #805306371	; 0x30000003
    2c00:	6b6c4363 	blvs	1b13994 <__ccfg+0x1af39ec>
    2c04:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2c08:	67654470 			; <UNDEFINED> instruction: 0x67654470
    2c0c:	74730043 	ldrbtvc	r0, [r3], #-67	; 0xffffffbd
    2c10:	54747261 	ldrbtpl	r7, [r4], #-609	; 0xfffffd9f
    2c14:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2c18:	76657270 			; <UNDEFINED> instruction: 0x76657270
    2c1c:	6d6d694c 			; <UNDEFINED> instruction: 0x6d6d694c
    2c20:	35327469 	ldrcc	r7, [r2, #-1129]!	; 0xfffffb97
    2c24:	73556e49 	cmpvc	r5, #1168	; 0x490
    2c28:	524f4e00 	subpl	r4, pc, #0, 28
    2c2c:	4f5f4d4f 	svcmi	0x005f4d4f
    2c30:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2c34:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2c38:	616c6552 	cmnvs	ip, r2, asr r5
    2c3c:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    2c40:	71657246 	cmnvc	r5, r6, asr #4
    2c44:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2c48:	66664f79 	uqsub16vs	r4, r6, r9
    2c4c:	54746573 	ldrbtpl	r6, [r4], #-1395	; 0xfffffa8d
    2c50:	4346526f 	movtmi	r5, #25199	; 0x626f
    2c54:	4665726f 	strbtmi	r7, [r5], -pc, ror #4
    2c58:	616d726f 	cmnvs	sp, pc, ror #4
    2c5c:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
    2c60:	74726576 	ldrbtvc	r6, [r2], #-1398	; 0xfffffa8a
    2c64:	33697500 	cmncc	r9, #0, 10
    2c68:	6f6c4332 	svcvs	0x006c4332
    2c6c:	6f536b63 	svcvs	0x00536b63
    2c70:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    2c74:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    2c78:	3631746e 	ldrtcc	r7, [r1], -lr, ror #8
    2c7c:	7200745f 	andvc	r7, r0, #1593835520	; 0x5f000000
    2c80:	726f4366 	rsbvc	r4, pc, #-1744830463	; 0x98000001
    2c84:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2c88:	66664f71 	uqsub16vs	r4, r6, r1
    2c8c:	00746573 	rsbseq	r6, r4, r3, ror r5
    2c90:	68676968 	stmdavs	r7!, {r3, r5, r6, r8, fp, sp, lr}^
    2c94:	65726854 	ldrbvs	r6, [r2, #-2132]!	; 0xfffff7ac
    2c98:	6c6f6873 	stclvs	8, cr6, [pc], #-460	; 2ad4 <NOROM_ChipInfo_GetHwRevision+0x4c>
    2c9c:	4f4e0064 	svcmi	0x004e0064
    2ca0:	5f4d4f52 	svcpl	0x004d4f52
    2ca4:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2ca8:	65445f46 	strbvs	r5, [r4, #-3910]	; 0xfffff0ba
    2cac:	47677562 	strbmi	r7, [r7, -r2, ror #10]!
    2cb0:	78457465 	stmdavc	r5, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2cb4:	74636570 	strbtvc	r6, [r3], #-1392	; 0xfffffa90
    2cb8:	76416465 	strbvc	r6, [r1], -r5, ror #8
    2cbc:	67617265 	strbvs	r7, [r1, -r5, ror #4]!
    2cc0:	79724365 	ldmdbvc	r2!, {r0, r2, r5, r6, r8, r9, lr}^
    2cc4:	6c617473 	cfstrdvs	mvd7, [r1], #-460	; 0xfffffe34
    2cc8:	6c706d41 	ldclvs	13, cr6, [r0], #-260	; 0xfffffefc
    2ccc:	64757469 	ldrbtvs	r7, [r5], #-1129	; 0xfffffb97
    2cd0:	736f0065 	cmnvc	pc, #101	; 0x65
    2cd4:	67664363 	strbvs	r4, [r6, -r3, ror #6]!
    2cd8:	43676552 	cmnmi	r7, #343932928	; 0x14800000
    2cdc:	0079706f 	rsbseq	r7, r9, pc, rrx
    2ce0:	4f524f4e 	svcmi	0x00524f4e
    2ce4:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2ce8:	5f464843 	svcpl	0x00464843
    2cec:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2cf0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2cf4:	69547075 	ldmdbvs	r4, {r0, r2, r4, r5, r6, ip, sp, lr}^
    2cf8:	7000656d 	andvc	r6, r0, sp, ror #10
    2cfc:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    2d00:	Address 0x0000000000002d00 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000020 	andeq	r0, r0, r0, lsr #32
      14:	00000000 	andeq	r0, r0, r0
      18:	000000c8 	andeq	r0, r0, r8, asr #1
      1c:	0000015c 	andeq	r0, r0, ip, asr r1
      20:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
      24:	86038504 	strhi	r8, [r3], -r4, lsl #10
      28:	02018e02 	andeq	r8, r1, #2, 28
      2c:	c5c6ce85 	strbgt	ip, [r6, #3717]	; 0xe85
      30:	00000ec4 	andeq	r0, r0, r4, asr #29
      34:	0000001c 	andeq	r0, r0, ip, lsl r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	00000224 	andeq	r0, r0, r4, lsr #4
			i = k;
      40:	0000006c 	andeq	r0, r0, ip, rrx
				j->Next = k;
      44:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
      48:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
}
      4c:	0e0a6101 	adfeqe	f6, f2, f1
      50:	000b410c 	andeq	r4, fp, ip, lsl #2
      54:	0000001c 	andeq	r0, r0, ip, lsl r0
      58:	00000000 	andeq	r0, r0, r0
      5c:	00000290 	muleq	r0, r0, r2
      60:	0000017c 	andeq	r0, r0, ip, ror r1
      64:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
      68:	480e4101 	stmdami	lr, {r0, r8, lr}
      6c:	0e0a8b02 	vmlaeq.f64	d8, d10, d2
      70:	000b4204 	andeq	r4, fp, r4, lsl #4
      74:	0000000c 	andeq	r0, r0, ip
      78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      7c:	7c020001 	stcvc	0, cr0, [r2], {1}
      80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      84:	0000000c 	andeq	r0, r0, ip
      88:	00000074 	andeq	r0, r0, r4, ror r0
      8c:	0000040c 	andeq	r0, r0, ip, lsl #8
	descriptors [fd] = s;
      90:	0000000c 	andeq	r0, r0, ip
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00000018 	andeq	r0, r0, r8, lsl r0
      98:	00000074 	andeq	r0, r0, r4, ror r0
	if (s == NULL)
      9c:	00000418 	andeq	r0, r0, r8, lsl r4
		syserror (EMALLOC, "tcv05");
      a0:	0000002c 	andeq	r0, r0, ip, lsr #32
      a4:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      a8:	41000e0a 	tstmi	r0, sl, lsl #28
      ac:	0000000b 	andeq	r0, r0, fp
      b0:	00000018 	andeq	r0, r0, r8, lsl r0
      b4:	00000074 	andeq	r0, r0, r4, ror r0
      b8:	00000444 	andeq	r0, r0, r4, asr #8
      bc:	0000002a 	andeq	r0, r0, sl, lsr #32
      c0:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      c4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      c8:	000b4204 	andeq	r4, fp, r4, lsl #4
      cc:	00000018 	andeq	r0, r0, r8, lsl r0
      d0:	00000074 	andeq	r0, r0, r4, ror r0
      d4:	00000470 	andeq	r0, r0, r0, ror r4
      d8:	0000003c 	andeq	r0, r0, ip, lsr r0
      dc:	83100e41 	tsthi	r0, #1040	; 0x410
      e0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      e4:	00018e02 	andeq	r8, r1, r2, lsl #28
      e8:	00000018 	andeq	r0, r0, r8, lsl r0
      ec:	00000074 	andeq	r0, r0, r4, ror r0
      f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
      f4:	00000040 	andeq	r0, r0, r0, asr #32
			curr += 0x1000;
      f8:	83100e41 	tsthi	r0, #1040	; 0x410
      fc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (from >= EE_SIZE || upto < from)
     100:	00018e02 	andeq	r8, r1, r2, lsl #28
     104:	00000014 	andeq	r0, r0, r4, lsl r0
			upto = EE_SIZE - 1;
     108:	00000074 	andeq	r0, r0, r4, ror r0
     10c:	00000000 	andeq	r0, r0, r0
     110:	00000020 	andeq	r0, r0, r0, lsr #32
     114:	83080e42 	movwhi	r0, #36418	; 0x8e42
     118:	00018e02 	andeq	r8, r1, r2, lsl #28
     11c:	00000014 	andeq	r0, r0, r4, lsl r0
     120:	00000074 	andeq	r0, r0, r4, ror r0
     124:	000004ac 	andeq	r0, r0, ip, lsr #9
            ch = redCharacter;
     128:	00000054 	andeq	r0, r0, r4, asr r0
            onTime = redOn;
     12c:	87080e42 	strhi	r0, [r8, -r2, asr #28]
            offTime = redOff;
     130:	00018e02 	andeq	r8, r1, r2, lsl #28
     134:	00000014 	andeq	r0, r0, r4, lsl r0
            ledFlag = 0;
     138:	00000074 	andeq	r0, r0, r4, ror r0
        if(On)
     13c:	00000500 	andeq	r0, r0, r0, lsl #10
     140:	00000040 	andeq	r0, r0, r0, asr #32
     144:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
            leds(led,1);
     148:	00018e02 	andeq	r8, r1, r2, lsl #28
            leds(led,0);
     14c:	00000014 	andeq	r0, r0, r4, lsl r0
     150:	00000074 	andeq	r0, r0, r4, ror r0
     154:	00000540 	andeq	r0, r0, r0, asr #10
     158:	00000028 	andeq	r0, r0, r8, lsr #32
     15c:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
        if (displayCycle)
     160:	00018e02 	andeq	r8, r1, r2, lsl #28
     164:	00000014 	andeq	r0, r0, r4, lsl r0
            ser_outf(Check_PERIOD, "%c %d ", ch, onTime);
     168:	00000074 	andeq	r0, r0, r4, ror r0
     16c:	00000568 	andeq	r0, r0, r8, ror #10
     170:	00000114 	andeq	r0, r0, r4, lsl r1
        if(onTime > 0)
     174:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
            delay(onTime, OFF_PERIOD);
     178:	00018e02 	andeq	r8, r1, r2, lsl #28
        when(&On, Check_PERIOD);
     17c:	0000001c 	andeq	r0, r0, ip, lsl r0
     180:	00000074 	andeq	r0, r0, r4, ror r0
        release;
     184:	0000067c 	andeq	r0, r0, ip, ror r6
            led = greenLed;
     188:	00000050 	andeq	r0, r0, r0, asr r0
     18c:	83180e41 	tsthi	r8, #1040	; 0x410
            ch = greenCharacter;
     190:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
            onTime = greenOn;
     194:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     198:	00018e02 	andeq	r8, r1, r2, lsl #28
            offTime = greenOff;
     19c:	00000018 	andeq	r0, r0, r8, lsl r0
     1a0:	00000074 	andeq	r0, r0, r4, ror r0
            leds(led,0);
     1a4:	000006cc 	andeq	r0, r0, ip, asr #13
     1a8:	00000054 	andeq	r0, r0, r4, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     1ac:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     1b0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
        leds(led,0);
     1b8:	0000000c 	andeq	r0, r0, ip
     1bc:	00000074 	andeq	r0, r0, r4, ror r0
     1c0:	00000720 	andeq	r0, r0, r0, lsr #14
     1c4:	00000038 	andeq	r0, r0, r8, lsr r0
     1c8:	00000020 	andeq	r0, r0, r0, lsr #32
            proceed Check_PERIOD;
     1cc:	00000074 	andeq	r0, r0, r4, ror r0
}
     1d0:	00000758 	andeq	r0, r0, r8, asr r7
     1d4:	00000110 	andeq	r0, r0, r0, lsl r1
     1d8:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
     1dc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1e0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     1e4:	89038804 	stmdbhi	r3, {r2, fp, pc}
     1e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     1ec:	0000000c 	andeq	r0, r0, ip
     1f0:	00000074 	andeq	r0, r0, r4, ror r0
     1f4:	00000000 	andeq	r0, r0, r0
     1f8:	0000000c 	andeq	r0, r0, ip
     1fc:	00000018 	andeq	r0, r0, r8, lsl r0
     200:	00000074 	andeq	r0, r0, r4, ror r0
     204:	00000868 	andeq	r0, r0, r8, ror #16
     208:	000000c0 	andeq	r0, r0, r0, asr #1
     20c:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     210:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     214:	00000001 	andeq	r0, r0, r1
     218:	00000018 	andeq	r0, r0, r8, lsl r0
     21c:	00000074 	andeq	r0, r0, r4, ror r0
     220:	00000928 	andeq	r0, r0, r8, lsr #18
    word number = 0;
     224:	00000044 	andeq	r0, r0, r4, asr #32
    int numbersIndex = 0;
     228:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     22c:	86038504 	strhi	r8, [r3], -r4, lsl #10
        if(settingsInput[i] == ' ') {
     230:	00018e02 	andeq	r8, r1, r2, lsl #28
     234:	0000001c 	andeq	r0, r0, ip, lsl r0
            numbers[numbersIndex] = number;
     238:	00000074 	andeq	r0, r0, r4, ror r0
     23c:	0000096c 	andeq	r0, r0, ip, ror #18
            number = 0;
     240:	0000003c 	andeq	r0, r0, ip, lsr r0
    for (int i = 0; i < SETTINGS_LENGTH; i++) {
     244:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
    redOn = numbers[0];
     248:	86048505 	strhi	r8, [r4], -r5, lsl #10
     24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    redOff = numbers[1];
     250:	00000001 	andeq	r0, r0, r1
     254:	00000018 	andeq	r0, r0, r8, lsl r0
    greenOn = numbers[2];
     258:	00000074 	andeq	r0, r0, r4, ror r0
     25c:	000009a8 	andeq	r0, r0, r8, lsr #19
    greenOff = numbers[3];
     260:	000000a4 	andeq	r0, r0, r4, lsr #1
     264:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
}
     268:	86038504 	strhi	r8, [r3], -r4, lsl #10
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     26c:	00018e02 	andeq	r8, r1, r2, lsl #28
     270:	00000030 	andeq	r0, r0, r0, lsr r0
            number = number * 10;
     274:	00000074 	andeq	r0, r0, r4, ror r0
            number += settingsInput[i] - 48;
     278:	00000a4c 	andeq	r0, r0, ip, asr #20
     27c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     280:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     284:	86078508 	strhi	r8, [r7], -r8, lsl #10
     288:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     28c:	8a038904 	bhi	e26a4 <__ccfg+0xc26fc>
fsm root {
     290:	02018e02 	andeq	r8, r1, #2, 28
     294:	cace0aa2 	bgt	ff382d24 <_estack+0xdf37dd24>
     298:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
     29c:	000ec4c5 	andeq	ip, lr, r5, asr #9
     2a0:	00000b42 	andeq	r0, r0, r2, asr #22
     2a4:	0000000c 	andeq	r0, r0, ip
     2a8:	00000074 	andeq	r0, r0, r4, ror r0
        ser_outf(Initial, "Enter your name: ");
     2ac:	00000000 	andeq	r0, r0, r0
     2b0:	00000024 	andeq	r0, r0, r4, lsr #32
        ser_in(Get_Name, username, NAME_LENGTH);
     2b4:	0000000c 	andeq	r0, r0, ip
     2b8:	00000074 	andeq	r0, r0, r4, ror r0
        runfsm blinker;
     2bc:	00000000 	andeq	r0, r0, r0
     2c0:	00000028 	andeq	r0, r0, r8, lsr #32
        ser_outf(Show_Menu, "Welcome %s\n\r"
     2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c8:	00000074 	andeq	r0, r0, r4, ror r0
     2cc:	00000c04 	andeq	r0, r0, r4, lsl #24
        ser_inf(Get_Choice, "%c", &choice);
     2d0:	00000258 	andeq	r0, r0, r8, asr r2
     2d4:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
        if (choice == 'A' || choice == 'a'){
     2d8:	8e028b03 	vmlahi.f64	d8, d2, d3
     2dc:	180e4101 	stmdane	lr, {r0, r8, lr}
     2e0:	00070d42 	andeq	r0, r7, r2, asr #26
            proceed Adjust_Intervals;
     2e4:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed Monitor;
     2e8:	00000074 	andeq	r0, r0, r4, ror r0
        proceed Show_Menu;
     2ec:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     2f0:	00000030 	andeq	r0, r0, r0, lsr r0
     2f4:	83080e42 	movwhi	r0, #36418	; 0x8e42
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     2f8:	00018e02 	andeq	r8, r1, r2, lsl #28
     2fc:	00000018 	andeq	r0, r0, r8, lsl r0
     300:	00000074 	andeq	r0, r0, r4, ror r0
        processSettingsInput(settings);
     304:	00000000 	andeq	r0, r0, r0
        On = YES;
     308:	0000005c 	andeq	r0, r0, ip, asr r0
     30c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        trigger(&On);
     310:	86038504 	strhi	r8, [r3], -r4, lsl #10
        proceed Show_Menu;
     314:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     318:	00000014 	andeq	r0, r0, r4, lsl r0
     31c:	00000074 	andeq	r0, r0, r4, ror r0
     320:	00000e5c 	andeq	r0, r0, ip, asr lr
     324:	00000060 	andeq	r0, r0, r0, rrx
     328:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     32c:	00018e02 	andeq	r8, r1, r2, lsl #28
     330:	0000000c 	andeq	r0, r0, ip
        proceed Show_Menu;
     334:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     338:	7c020001 	stcvc	0, cr0, [r2], {1}
        ser_outf(Monitor, "Monitor (press S to stop): ");
     33c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     340:	00000018 	andeq	r0, r0, r8, lsl r0
        displayCycle = YES;
     344:	00000330 	andeq	r0, r0, r0, lsr r3
        ser_inf(Await_Stop, "%c", &ch);
     348:	00000ebc 			; <UNDEFINED> instruction: 0x00000ebc
     34c:	0000003c 	andeq	r0, r0, ip, lsr r0
     350:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        if(ch == 'S' || ch == 's'){
     354:	86038504 	strhi	r8, [r3], -r4, lsl #10
     358:	00018e02 	andeq	r8, r1, r2, lsl #28
     35c:	00000018 	andeq	r0, r0, r8, lsl r0
            displayCycle = NO;
     360:	00000330 	andeq	r0, r0, r0, lsr r3
     364:	00000ef8 	strdeq	r0, [r0], -r8
            proceed Show_Menu;
     368:	00000080 	andeq	r0, r0, r0, lsl #1
        proceed Monitor;
     36c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
        On = NO;
     370:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     374:	00000001 	andeq	r0, r0, r1
     378:	0000000c 	andeq	r0, r0, ip
        leds(1, 0);
     37c:	00000330 	andeq	r0, r0, r0, lsr r3
     380:	00000f78 	andeq	r0, r0, r8, ror pc
     384:	00000018 	andeq	r0, r0, r8, lsl r0
     388:	00000014 	andeq	r0, r0, r4, lsl r0
     38c:	00000330 	andeq	r0, r0, r0, lsr r3
     390:	00000000 	andeq	r0, r0, r0
        leds(0, 0);
     394:	00000024 	andeq	r0, r0, r4, lsr #32
     398:	83080e41 	movwhi	r0, #36417	; 0x8e41
     39c:	00018e02 	andeq	r8, r1, r2, lsl #28
        proceed Show_Menu;
     3a0:	00000014 	andeq	r0, r0, r4, lsl r0
     3a4:	00000330 	andeq	r0, r0, r0, lsr r3
     3a8:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     3ac:	00000010 	andeq	r0, r0, r0, lsl r0
        } else if (choice == 'S' || choice == 's') {
     3b0:	83080e42 	movwhi	r0, #36418	; 0x8e42
            proceed Stop;
     3b4:	00018e02 	andeq	r8, r1, r2, lsl #28
        } else if (choice == 'V' || choice == 'v') {
     3b8:	00000014 	andeq	r0, r0, r4, lsl r0
            proceed View_Settings;
     3bc:	00000330 	andeq	r0, r0, r0, lsr r3
        } else if (choice == 'M' || choice == 'm') {
     3c0:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
     3c4:	0000002c 	andeq	r0, r0, ip, lsr #32
     3c8:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
     3cc:	00018e02 	andeq	r8, r1, r2, lsl #28
     3d0:	00000014 	andeq	r0, r0, r4, lsl r0
     3d4:	00000330 	andeq	r0, r0, r0, lsr r3
     3d8:	00000000 	andeq	r0, r0, r0
     3dc:	0000004c 	andeq	r0, r0, ip, asr #32
     3e0:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     3e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     3e8:	0000000c 	andeq	r0, r0, ip
     3ec:	00000330 	andeq	r0, r0, r0, lsr r3
     3f0:	00000000 	andeq	r0, r0, r0
     3f4:	00000006 	andeq	r0, r0, r6
     3f8:	00000028 	andeq	r0, r0, r8, lsr #32
     3fc:	00000330 	andeq	r0, r0, r0, lsr r3
     400:	00000fa0 	andeq	r0, r0, r0, lsr #31
     404:	000000cc 	andeq	r0, r0, ip, asr #1
     408:	83180e41 	tsthi	r8, #1040	; 0x410
static void devinit_uart (int devnum) {
     40c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
	adddevfunc (ioreq_uart_a, devnum);
     410:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     414:	02018e02 	andeq	r8, r1, #2, 28
void udelay (volatile word n) {
     418:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
     41c:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
	while (n) {
     420:	0b42000e 	bleq	1080460 <__ccfg+0x10604b8>
     424:	00000014 	andeq	r0, r0, r4, lsl r0
}
     428:	00000330 	andeq	r0, r0, r0, lsr r3
	while (n--);
     42c:	0000106c 	andeq	r1, r0, ip, rrx
     430:	00000014 	andeq	r0, r0, r4, lsl r0
     434:	83080e41 	movwhi	r0, #36417	; 0x8e41
		n--;
     438:	00018e02 	andeq	r8, r1, r2, lsl #28
     43c:	00000014 	andeq	r0, r0, r4, lsl r0
     440:	00000330 	andeq	r0, r0, r0, lsr r3
void mdelay (volatile word n) {
     444:	00001080 	andeq	r1, r0, r0, lsl #1
     448:	00000034 	andeq	r0, r0, r4, lsr r0
	while (n) {
     44c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     450:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     454:	00000018 	andeq	r0, r0, r8, lsl r0
		udelay (999);
     458:	00000330 	andeq	r0, r0, r0, lsr r3
     45c:	000010b4 	strheq	r1, [r0], -r4
		n--;
     460:	00000034 	andeq	r0, r0, r4, lsr r0
     464:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     468:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     46c:	00000001 	andeq	r0, r0, r1
void __pi_ondomain (lword d) {
     470:	00000018 	andeq	r0, r0, r8, lsl r0
     474:	00000330 	andeq	r0, r0, r0, lsr r3
		if (__pi_systat.effpdm > 1)
     478:	00000000 	andeq	r0, r0, r0
     47c:	0000002c 	andeq	r0, r0, ip, lsr #32
			__pi_systat.effpdm = 1;
     480:	83100e41 	tsthi	r0, #1040	; 0x410
	PRCMPowerDomainOn (d);
     484:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     488:	00018e02 	andeq	r8, r1, r2, lsl #28
     48c:	00000014 	andeq	r0, r0, r4, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     490:	00000330 	andeq	r0, r0, r0, lsr r3
     494:	000010e8 	andeq	r1, r0, r8, ror #1
     498:	00000024 	andeq	r0, r0, r4, lsr #32
	__pi_systat.ondmns |= d;
     49c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4a0:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     4a4:	00000018 	andeq	r0, r0, r8, lsl r0
     4a8:	00000330 	andeq	r0, r0, r0, lsr r3
void __pi_syserror (word ec, const char *m) {
     4ac:	0000110c 	andeq	r1, r0, ip, lsl #2
	diag ("SYSERR: %x, %s", ec, m);
     4b0:	00000038 	andeq	r0, r0, r8, lsr r0
     4b4:	83100e41 	tsthi	r0, #1040	; 0x410
  __ASM volatile ("cpsid i" : : : "memory");
     4b8:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	0000000c 	andeq	r0, r0, ip
     4c4:	00000330 	andeq	r0, r0, r0, lsr r3
		all_leds_blink;
     4c8:	00000000 	andeq	r0, r0, r0
     4cc:	00000014 	andeq	r0, r0, r4, lsl r0
     4d0:	00000014 	andeq	r0, r0, r4, lsl r0
     4d4:	00000330 	andeq	r0, r0, r0, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4d8:	00000000 	andeq	r0, r0, r0
     4dc:	00000040 	andeq	r0, r0, r0, asr #32
     4e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     4e4:	00018e02 	andeq	r8, r1, r2, lsl #28
     4e8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ec:	00000330 	andeq	r0, r0, r0, lsr r3
	while (1) {
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00000018 	andeq	r0, r0, r8, lsl r0
     4f8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     4fc:	00018e02 	andeq	r8, r1, r2, lsl #28
void tci_run_delay_timer () {
     500:	0000000c 	andeq	r0, r0, ip
	setdel = __pi_mintk - __pi_old;
     504:	00000330 	andeq	r0, r0, r0, lsr r3
     508:	00001144 	andeq	r1, r0, r4, asr #2
     50c:	00000024 	andeq	r0, r0, r4, lsr #32
     510:	0000000c 	andeq	r0, r0, ip
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     514:	00000330 	andeq	r0, r0, r0, lsr r3
     518:	00000000 	andeq	r0, r0, r0
     51c:	00000020 	andeq	r0, r0, r0, lsr #32
     520:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     524:	00000330 	andeq	r0, r0, r0, lsr r3
	sti_tim;
     528:	00001168 	andeq	r1, r0, r8, ror #2
}
     52c:	0000000e 	andeq	r0, r0, lr
     530:	0000000c 	andeq	r0, r0, ip
     534:	00000330 	andeq	r0, r0, r0, lsr r3
     538:	00000000 	andeq	r0, r0, r0
     53c:	00000010 	andeq	r0, r0, r0, lsl r0
	cli_aux;
     540:	0000000c 	andeq	r0, r0, ip
     544:	00000330 	andeq	r0, r0, r0, lsr r3
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     548:	00000000 	andeq	r0, r0, r0
     54c:	0000001c 	andeq	r0, r0, ip, lsl r0
     550:	0000000c 	andeq	r0, r0, ip
     554:	00000330 	andeq	r0, r0, r0, lsr r3
	sti_aux;
     558:	00000000 	andeq	r0, r0, r0
}
     55c:	00000010 	andeq	r0, r0, r0, lsl r0
     560:	0000000c 	andeq	r0, r0, ip
     564:	00000330 	andeq	r0, r0, r0, lsr r3
void AONRTCIntHandler () {
     568:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     56c:	00000006 	andeq	r0, r0, r6
     570:	0000000c 	andeq	r0, r0, ip
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     574:	00000330 	andeq	r0, r0, r0, lsr r3
		if (__pi_utims [0] == 0)
     578:	00001176 	andeq	r1, r0, r6, ror r1
     57c:	00000014 	andeq	r0, r0, r4, lsl r0
		if (*(__pi_utims [0])) {
     580:	0000000c 	andeq	r0, r0, ip
     584:	00000330 	andeq	r0, r0, r0, lsr r3
			(*(__pi_utims [0]))--;
     588:	00000000 	andeq	r0, r0, r0
		if (__pi_utims [1] == 0)
     58c:	0000000e 	andeq	r0, r0, lr
		if (*(__pi_utims [1])) {
     590:	00000014 	andeq	r0, r0, r4, lsl r0
			aux_timer_inactive = 0;
     594:	00000330 	andeq	r0, r0, r0, lsr r3
			(*(__pi_utims [1]))--;
     598:	0000118c 	andeq	r1, r0, ip, lsl #3
		if (__pi_utims [2] == 0)
     59c:	00000024 	andeq	r0, r0, r4, lsr #32
		if (*(__pi_utims [2])) {
     5a0:	83080e41 	movwhi	r0, #36417	; 0x8e41
			(*(__pi_utims [2]))--;
     5a4:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [3] != 0) {
     5a8:	00000020 	andeq	r0, r0, r0, lsr #32
			if (*(__pi_utims [3])) {
     5ac:	00000330 	andeq	r0, r0, r0, lsr r3
				aux_timer_inactive = 0;
     5b0:	000011b0 			; <UNDEFINED> instruction: 0x000011b0
				(*(__pi_utims [3]))--;
     5b4:	0000009c 	muleq	r0, ip, r0
	if (__pi_systat.ledsts) {
     5b8:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     5bc:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
		if (__pi_systat.ledblc++ == 0) {
     5c0:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     5c4:	89038804 	stmdbhi	r3, {r2, fp, pc}
			if (__pi_systat.ledblk) {
     5c8:	00018e02 	andeq	r8, r1, r2, lsl #28
     5cc:	00000014 	andeq	r0, r0, r4, lsl r0
     5d0:	00000330 	andeq	r0, r0, r0, lsr r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     5d4:	0000124c 	andeq	r1, r0, ip, asr #4
     5d8:	00000050 	andeq	r0, r0, r0, asr r0
				if (__pi_systat.ledsts & 0x2)
     5dc:	83080e42 	movwhi	r0, #36418	; 0x8e42
     5e0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5e4:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x4)
     5e8:	00000330 	andeq	r0, r0, r0, lsr r3
				__pi_systat.ledblk = 0;
     5ec:	0000129c 	muleq	r0, ip, r2
     5f0:	00000048 	andeq	r0, r0, r8, asr #32
			if (__pi_systat.fstblk)
     5f4:	83080e41 	movwhi	r0, #36417	; 0x8e41
     5f8:	00018e02 	andeq	r8, r1, r2, lsl #28
				__pi_systat.ledblc = 200;
     5fc:	00000014 	andeq	r0, r0, r4, lsl r0
	if (events & AON_RTC_EVFLAGS_CH0) {
     600:	00000330 	andeq	r0, r0, r0, lsr r3
		cli_tim;
     604:	000012e4 	andeq	r1, r0, r4, ror #5
		__pi_new += setdel;
     608:	00000050 	andeq	r0, r0, r0, asr r0
     60c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		setdel = 0;
     610:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     614:	00000020 	andeq	r0, r0, r0, lsr #32
		__pi_new += setdel;
     618:	00000330 	andeq	r0, r0, r0, lsr r3
		RISE_N_SHINE;
     61c:	00000000 	andeq	r0, r0, r0
     620:	00000058 	andeq	r0, r0, r8, asr r0
		aux_timer_inactive = 1;
     624:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     628:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
				if (__pi_systat.ledsts & 0x1)
     62c:	87058606 	strhi	r8, [r5, -r6, lsl #12]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     630:	89038804 	stmdbhi	r3, {r2, fp, pc}
     634:	00018e02 	andeq	r8, r1, r2, lsl #28
				if (__pi_systat.ledsts & 0x2)
     638:	00000018 	andeq	r0, r0, r8, lsl r0
     63c:	00000330 	andeq	r0, r0, r0, lsr r3
     640:	00001334 	andeq	r1, r0, r4, lsr r3
				if (__pi_systat.ledsts & 0x8)
     644:	000000a8 	andeq	r0, r0, r8, lsr #1
				__pi_systat.ledblk = 1;
     648:	83100e44 	tsthi	r0, #68, 28	; 0x440
     64c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (aux_timer_inactive) {
     650:	00018e02 	andeq	r8, r1, r2, lsl #28
			cli_aux;
     654:	00000018 	andeq	r0, r0, r8, lsl r0
     658:	00000330 	andeq	r0, r0, r0, lsr r3
     65c:	000013dc 	ldrdeq	r1, [r0], -ip
     660:	00000034 	andeq	r0, r0, r4, lsr r0
     664:	83100e41 	tsthi	r0, #1040	; 0x410
     668:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     66c:	00018e02 	andeq	r8, r1, r2, lsl #28
     670:	0000000c 	andeq	r0, r0, ip
     674:	00000330 	andeq	r0, r0, r0, lsr r3
     678:	00001410 	andeq	r1, r0, r0, lsl r4
word tci_update_delay_ticks (Boolean force) {
     67c:	00000018 	andeq	r0, r0, r8, lsl r0
	cli_tim;
     680:	00000014 	andeq	r0, r0, r4, lsl r0
     684:	00000330 	andeq	r0, r0, r0, lsr r3
	if (setdel) {
     688:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     68c:	00000030 	andeq	r0, r0, r0, lsr r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     690:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     694:	00018e02 	andeq	r8, r1, r2, lsl #28
     698:	00000014 	andeq	r0, r0, r4, lsl r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     69c:	00000330 	andeq	r0, r0, r0, lsr r3
				AON_RTC_O_CH0CMP)) - gettav ());
     6a0:	00000000 	andeq	r0, r0, r0
	return NO;
     6a4:	00000038 	andeq	r0, r0, r8, lsr r0
			setdel = 0;
     6a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     6ac:	00018e02 	andeq	r8, r1, r2, lsl #28
     6b0:	00000040 	andeq	r0, r0, r0, asr #32
}
     6b4:	00000330 	andeq	r0, r0, r0, lsr r3
		sti_tim;
     6b8:	00001428 	andeq	r1, r0, r8, lsr #8
		return YES;
     6bc:	0000013c 	andeq	r0, r0, ip, lsr r1
     6c0:	80100e41 	andshi	r0, r0, r1, asr #28
     6c4:	82038104 	andhi	r8, r3, #4, 2
     6c8:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6cc:	0b84380e 	bleq	fe10e70c <_estack+0xde10970c>
	UARTDisable (UART0_BASE);
     6d0:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     6d4:	07880887 	streq	r0, [r8, r7, lsl #17]
	UARTDisable (UART0_BASE);
     6d8:	058e0689 	streq	r0, [lr, #1673]	; 0x689
	UARTConfigSetExpClk (UART0_BASE,
     6dc:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
     6e0:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     6e4:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     6e8:	c341100e 	movtgt	r1, #4110	; 0x100e
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     6ec:	0ec0c1c2 	acseqdm	f4, f2
     6f0:	000b4100 	andeq	r4, fp, r0, lsl #2
     6f4:	0000000c 	andeq	r0, r0, ip
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     6f8:	00000330 	andeq	r0, r0, r0, lsr r3
     6fc:	00000000 	andeq	r0, r0, r0
     700:	00000024 	andeq	r0, r0, r4, lsr #32
	urates [0] = rate;
     704:	0000000c 	andeq	r0, r0, ip
}
     708:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     70c:	7c020001 	stcvc	0, cr0, [r2], {1}
     710:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     714:	00000014 	andeq	r0, r0, r4, lsl r0
     718:	00000704 	andeq	r0, r0, r4, lsl #14
     71c:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     720:	00000016 	andeq	r0, r0, r6, lsl r0
     724:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     728:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     72c:	0000000c 	andeq	r0, r0, ip
     730:	00000704 	andeq	r0, r0, r4, lsl #14
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     734:	00000000 	andeq	r0, r0, r0
     738:	0000001a 	andeq	r0, r0, sl, lsl r0
	__pi_uart_setrate (urates [0], __pi_uart);
     73c:	00000018 	andeq	r0, r0, r8, lsl r0
     740:	00000704 	andeq	r0, r0, r4, lsl #14
     744:	00000000 	andeq	r0, r0, r0
     748:	0000000e 	andeq	r0, r0, lr
     74c:	83080e41 	movwhi	r0, #36417	; 0x8e41
     750:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     754:	000ec3ce 	andeq	ip, lr, lr, asr #7
	switch (operation) {
     758:	00000018 	andeq	r0, r0, r8, lsl r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     75c:	00000704 	andeq	r0, r0, r4, lsl #14
     760:	00000000 	andeq	r0, r0, r0
     764:	0000004c 	andeq	r0, r0, ip, asr #32
     768:	83100e41 	tsthi	r0, #1040	; 0x410
     76c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				*buf++ = uart_a_read;
     770:	00018e02 	andeq	r8, r1, r2, lsl #28
     774:	00000020 	andeq	r0, r0, r0, lsr #32
			while (len && uart_a_char_available) {
     778:	00000704 	andeq	r0, r0, r4, lsl #14
     77c:	00000000 	andeq	r0, r0, r0
     780:	0000008c 	andeq	r0, r0, ip, lsl #1
			if (len != operation) {
     784:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
}
     788:	5f018e02 	svcpl	0x00018e02
     78c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
			uart_a_disable_int;
     790:	560b4200 	strpl	r4, [fp], -r0, lsl #4
			if (uart_a_char_available) {
     794:	000ec4ce 	andeq	ip, lr, lr, asr #9
				*buf++ = uart_a_read;
     798:	00000020 	andeq	r0, r0, r0, lsr #32
			uart_a_disable_int;
     79c:	00000704 	andeq	r0, r0, r4, lsl #14
     7a0:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
     7a4:	00000070 	andeq	r0, r0, r0, ror r0
     7a8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				uart_a_enable_int;
     7ac:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
     7b0:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
				goto Redo_rx;
     7b4:	430b4200 	movwmi	r4, #45568	; 0xb200
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     7b8:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7bc:	0000003c 	andeq	r0, r0, ip, lsr r0
			return -2;
     7c0:	00000704 	andeq	r0, r0, r4, lsl #14
     7c4:	00000000 	andeq	r0, r0, r0
				uart_a_write (*buf);
     7c8:	000000c0 	andeq	r0, r0, r0, asr #1
     7cc:	82080e41 	andhi	r0, r8, #1040	; 0x410
			while (len && uart_a_room_in_tx) {
     7d0:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7d4:	0a84300e 	beq	fe10c814 <_estack+0xde107814>
     7d8:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
			if (len != operation) {
     7dc:	06880787 	streq	r0, [r8], r7, lsl #15
			uart_a_disable_int;
     7e0:	048a0589 	streq	r0, [sl], #1417	; 0x589
     7e4:	0a6b038e 	beq	1ac1624 <__ccfg+0x1aa167c>
			if (uart_a_room_in_tx) {
     7e8:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
     7ec:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
				uart_a_enable_int;
     7f0:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     7f4:	c2c34108 	sbcgt	r4, r3, #8, 2
				*buf++ = uart_a_read;
     7f8:	0b41000e 	bleq	1040838 <__ccfg+0x1020890>
			if (uart_a_room_in_tx) {
     7fc:	0000001c 	andeq	r0, r0, ip, lsl r0
				uart_a_write (*buf);
     800:	00000704 	andeq	r0, r0, r4, lsl #14
     804:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     808:	0000006c 	andeq	r0, r0, ip, rrx
     80c:	83180e42 	tsthi	r8, #1056	; 0x420
			uart_a_enable_int;
     810:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     814:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     818:	00018e02 	andeq	r8, r1, r2, lsl #28
			return 0;
     81c:	0000000c 	andeq	r0, r0, ip
			if (len == UART_CNTRL_SETRATE) {
     820:	00000704 	andeq	r0, r0, r4, lsl #14
				if (__pi_uart_setrate (*((word*)buf),
     824:	00000000 	andeq	r0, r0, r0
     828:	00000024 	andeq	r0, r0, r4, lsr #32
     82c:	00000018 	andeq	r0, r0, r8, lsl r0
				syserror (EREQPAR, "uar");
     830:	00000704 	andeq	r0, r0, r4, lsl #14
			syserror (ENOOPER, "uai");
     834:	00000000 	andeq	r0, r0, r0
			if (len == UART_CNTRL_GETRATE) {
     838:	00000080 	andeq	r0, r0, r0, lsl #1
				return 1;
     83c:	83100e42 	tsthi	r0, #1056	; 0x420
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     840:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			syserror (ENOOPER, "uai");
     844:	00018e02 	andeq	r8, r1, r2, lsl #28
     848:	00000014 	andeq	r0, r0, r4, lsl r0
     84c:	00000704 	andeq	r0, r0, r4, lsl #14
     850:	00000000 	andeq	r0, r0, r0
     854:	00000070 	andeq	r0, r0, r0, ror r0
     858:	83080e42 	movwhi	r0, #36418	; 0x8e42
     85c:	00018e02 	andeq	r8, r1, r2, lsl #28
     860:	00000018 	andeq	r0, r0, r8, lsl r0
     864:	00000704 	andeq	r0, r0, r4, lsl #14
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     868:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     86c:	00000078 	andeq	r0, r0, r8, ror r0
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     870:	83100e42 	tsthi	r0, #1056	; 0x420
     874:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     878:	00018e02 	andeq	r8, r1, r2, lsl #28
     87c:	00000020 	andeq	r0, r0, r0, lsr #32
     880:	00000704 	andeq	r0, r0, r4, lsl #14
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     884:	00000000 	andeq	r0, r0, r0
     888:	000000bc 	strheq	r0, [r0], -ip
		RISE_N_SHINE;
     88c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     890:	86048505 	strhi	r8, [r4], -r5, lsl #10
		i_trigger (devevent (UART_A, READ));
     894:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     898:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
     89c:	000b4114 	andeq	r4, fp, r4, lsl r1
     8a0:	00000018 	andeq	r0, r0, r8, lsl r0
     8a4:	00000704 	andeq	r0, r0, r4, lsl #14
     8a8:	00000000 	andeq	r0, r0, r0
     8ac:	0000003a 	andeq	r0, r0, sl, lsr r0
     8b0:	83100e41 	tsthi	r0, #1040	; 0x410
     8b4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     8bc:	00000018 	andeq	r0, r0, r8, lsl r0
     8c0:	00000704 	andeq	r0, r0, r4, lsl #14
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     8c4:	00000000 	andeq	r0, r0, r0
     8c8:	00000038 	andeq	r0, r0, r8, lsr r0
     8cc:	83100e41 	tsthi	r0, #1040	; 0x410
		i_trigger (devevent (UART_A, WRITE));
     8d0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     8d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     8d8:	0000000c 	andeq	r0, r0, ip
		RISE_N_SHINE;
     8dc:	00000704 	andeq	r0, r0, r4, lsl #14
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	0000000a 	andeq	r0, r0, sl
		i_trigger (devevent (UART_A, WRITE));
     8e8:	00000018 	andeq	r0, r0, r8, lsl r0
     8ec:	00000704 	andeq	r0, r0, r4, lsl #14
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	0000002c 	andeq	r0, r0, ip, lsr #32
     8f8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
     8fc:	4c018e02 	stcmi	14, cr8, [r1], {2}
     900:	000ec4ce 	andeq	ip, lr, lr, asr #9
     904:	0000001c 	andeq	r0, r0, ip, lsl r0
     908:	00000704 	andeq	r0, r0, r4, lsl #14
     90c:	00000000 	andeq	r0, r0, r0
     910:	00000060 	andeq	r0, r0, r0, rrx
}
     914:	83080e41 	movwhi	r0, #36417	; 0x8e41
     918:	61018e02 	tstvs	r1, r2, lsl #28
     91c:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
     920:	000b4300 	andeq	r4, fp, r0, lsl #6
     924:	00000014 	andeq	r0, r0, r4, lsl r0
void __buttons_setirq (int val) {
     928:	00000704 	andeq	r0, r0, r4, lsl #14
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     92c:	00000000 	andeq	r0, r0, r0
     930:	00000040 	andeq	r0, r0, r0, asr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     934:	83080e42 	movwhi	r0, #36418	; 0x8e42
     938:	00018e02 	andeq	r8, r1, r2, lsl #28
     93c:	00000014 	andeq	r0, r0, r4, lsl r0
		bn = BUTTON_GPIO (__button_list [i]);
     940:	00000704 	andeq	r0, r0, r4, lsl #14
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     944:	00000000 	andeq	r0, r0, r0
     948:	0000002c 	andeq	r0, r0, ip, lsr #32
     94c:	83080e42 	movwhi	r0, #36418	; 0x8e42
     950:	00018e02 	andeq	r8, r1, r2, lsl #28
     954:	0000001c 	andeq	r0, r0, ip, lsl r0
     958:	00000704 	andeq	r0, r0, r4, lsl #14
}
     95c:	00000000 	andeq	r0, r0, r0
     960:	0000003c 	andeq	r0, r0, ip, lsr r0
     964:	83180e41 	tsthi	r8, #1040	; 0x410
     968:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
void __pinlist_setirq (int val) {
     96c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	for (i = 0; i < N_PINLIST; i++) {
     970:	00018e02 	andeq	r8, r1, r2, lsl #28
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     974:	0000000c 	andeq	r0, r0, ip
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     978:	00000704 	andeq	r0, r0, r4, lsl #14
	for (i = 0; i < N_PINLIST; i++) {
     97c:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     980:	00000006 	andeq	r0, r0, r6
     984:	0000001c 	andeq	r0, r0, ip, lsl r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     988:	00000704 	andeq	r0, r0, r4, lsl #14
     98c:	00000000 	andeq	r0, r0, r0
     990:	00000068 	andeq	r0, r0, r8, rrx
	for (i = 0; i < N_PINLIST; i++) {
     994:	83180e41 	tsthi	r8, #1040	; 0x410
}
     998:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     99c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9a0:	00018e02 	andeq	r8, r1, r2, lsl #28
     9a4:	00000014 	andeq	r0, r0, r4, lsl r0
void GPIOIntHandler () {
     9a8:	00000704 	andeq	r0, r0, r4, lsl #14
if (buttons_int) {
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	00000050 	andeq	r0, r0, r0, asr r0
	buttons_disable ();
     9b4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     9b8:	00018e02 	andeq	r8, r1, r2, lsl #28
	i_trigger ((aword)&__button_list);
     9bc:	0000002c 	andeq	r0, r0, ip, lsr #32
     9c0:	00000704 	andeq	r0, r0, r4, lsl #14
     9c4:	00000000 	andeq	r0, r0, r0
     9c8:	0000009c 	muleq	r0, ip, r0
     9cc:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9d0:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9d4:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
     9d8:	8a048905 	bhi	122df4 <__ccfg+0x102e4c>
     9dc:	8e028b03 	vmlahi.f64	d8, d2, d3
     9e0:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     9e4:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
	RISE_N_SHINE;
     9e8:	00000b42 	andeq	r0, r0, r2, asr #22
     9ec:	00000014 	andeq	r0, r0, r4, lsl r0
     9f0:	00000704 	andeq	r0, r0, r4, lsl #14
if (pin_sensor_int) {
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	00000040 	andeq	r0, r0, r0, asr #32
	i_trigger ((aword)(&__input_pins));
     9fc:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a00:	00018e02 	andeq	r8, r1, r2, lsl #28
     a04:	00000014 	andeq	r0, r0, r4, lsl r0
     a08:	00000704 	andeq	r0, r0, r4, lsl #14
     a0c:	00000000 	andeq	r0, r0, r0
     a10:	00000034 	andeq	r0, r0, r4, lsr r0
     a14:	83080e42 	movwhi	r0, #36418	; 0x8e42
     a18:	00018e02 	andeq	r8, r1, r2, lsl #28
     a1c:	00000018 	andeq	r0, r0, r8, lsl r0
     a20:	00000704 	andeq	r0, r0, r4, lsl #14
     a24:	00000000 	andeq	r0, r0, r0
	__pinsen_disable_and_clear;
     a28:	0000003c 	andeq	r0, r0, ip, lsr r0
	RISE_N_SHINE;
     a2c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a30:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a34:	000ec4ce 	andeq	ip, lr, lr, asr #9
}
     a38:	00000018 	andeq	r0, r0, r8, lsl r0
     a3c:	00000704 	andeq	r0, r0, r4, lsl #14
     a40:	00000000 	andeq	r0, r0, r0
     a44:	0000003c 	andeq	r0, r0, ip, lsr r0
     a48:	83100e42 	tsthi	r0, #1056	; 0x420
void system_init () {
     a4c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a50:	00018e02 	andeq	r8, r1, r2, lsl #28
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     a54:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     a58:	00000704 	andeq	r0, r0, r4, lsl #14
     a5c:	00001564 	andeq	r1, r0, r4, ror #10
     a60:	00000002 	andeq	r0, r0, r2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     a64:	0000000c 	andeq	r0, r0, ip
     a68:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     a6c:	7c020001 	stcvc	0, cr0, [r2], {1}
     a70:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a74:	0000000c 	andeq	r0, r0, ip
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a78:	00000a64 	andeq	r0, r0, r4, ror #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     a7c:	00001566 	andeq	r1, r0, r6, ror #10
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a80:	00000002 	andeq	r0, r0, r2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     a84:	0000000c 	andeq	r0, r0, ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     a88:	00000a64 	andeq	r0, r0, r4, ror #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     a8c:	00001568 	andeq	r1, r0, r8, ror #10
		pin = (port_confs [i] >> 19) & 0x1f;
     a90:	00000002 	andeq	r0, r0, r2
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     a94:	0000000c 	andeq	r0, r0, ip
		pin = (port_confs [i] >> 19) & 0x1f;
     a98:	00000a64 	andeq	r0, r0, r4, ror #20
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     a9c:	0000156a 	andeq	r1, r0, sl, ror #10
     aa0:	00000002 	andeq	r0, r0, r2
     aa4:	00000014 	andeq	r0, r0, r4, lsl r0
     aa8:	00000a64 	andeq	r0, r0, r4, ror #20
		if (port_confs [i] & 0x80)
     aac:	0000156c 	andeq	r1, r0, ip, ror #10
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     ab0:	00000044 	andeq	r0, r0, r4, asr #32
     ab4:	83080e41 	movwhi	r0, #36417	; 0x8e41
		if (port_confs [i] & 0x40)
     ab8:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     abc:	0000000c 	andeq	r0, r0, ip
     ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     ac4:	7c020001 	stcvc	0, cr0, [r2], {1}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     ac8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     acc:	0000000c 	andeq	r0, r0, ip
	all_leds_blink;
     ad0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     ad4:	00000000 	andeq	r0, r0, r0
     ad8:	00000002 	andeq	r0, r0, r2
     adc:	00000018 	andeq	r0, r0, r8, lsl r0
     ae0:	00000abc 			; <UNDEFINED> instruction: 0x00000abc
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	00000058 	andeq	r0, r0, r8, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     aec:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     af0:	86038504 	strhi	r8, [r3], -r4, lsl #10
     af4:	00018e02 	andeq	r8, r1, r2, lsl #28
     af8:	0000000c 	andeq	r0, r0, ip
     afc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     b00:	7c020001 	stcvc	0, cr0, [r2], {1}
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     b04:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b08:	0000002c 	andeq	r0, r0, ip, lsr #32
	IntEnable (INT_AON_RTC_COMB);
     b0c:	00000af8 	strdeq	r0, [r0], -r8
     b10:	00000000 	andeq	r0, r0, r0
     b14:	000000cc 	andeq	r0, r0, ip, asr #1
	__pi_malloc_init ();
     b18:	83100e42 	tsthi	r0, #1056	; 0x420
	IntEnable (INT_AON_GPIO_EDGE);
     b1c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b20:	02018e02 	andeq	r8, r1, #2, 28
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     b24:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     b28:	000ec3c4 	andeq	ip, lr, r4, asr #7
     b2c:	ce420b44 	vmlsgt.f64	d16, d2, d4
     b30:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     b34:	00000000 	andeq	r0, r0, r0
     b38:	00000024 	andeq	r0, r0, r4, lsr #32
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     b3c:	00000af8 	strdeq	r0, [r0], -r8
     b40:	00000000 	andeq	r0, r0, r0
     b44:	00000038 	andeq	r0, r0, r8, lsr r0
	urates [0] = UART_RATE / 100;
     b48:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     b4c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
	reinit_uart ();
     b50:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	EXTRA_INITIALIZERS;
     b54:	4a0b4300 	bmi	2d175c <__ccfg+0x2b17b4>
     b58:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     b5c:	000b4300 	andeq	r4, fp, r0, lsl #6
     b60:	0000000c 	andeq	r0, r0, ip
     b64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     b68:	7c020001 	stcvc	0, cr0, [r2], {1}
     b6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b70:	00000018 	andeq	r0, r0, r8, lsl r0
     b74:	00000b60 	andeq	r0, r0, r0, ror #22
			devinit [i] . init (devinit [i] . param);
     b78:	000015b8 			; <UNDEFINED> instruction: 0x000015b8
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     b7c:	00000034 	andeq	r0, r0, r4, lsr r0
     b80:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
     b84:	86038504 	strhi	r8, [r3], -r4, lsl #10
	IntEnable (INT_UART0_COMB);
     b88:	00018e02 	andeq	r8, r1, r2, lsl #28
     b8c:	00000018 	andeq	r0, r0, r8, lsl r0
}
     b90:	00000b60 	andeq	r0, r0, r0, ror #22
	tci_run_auxiliary_timer ();
     b94:	000015ec 	andeq	r1, r0, ip, ror #11
		diag ("");
     b98:	00000030 	andeq	r0, r0, r0, lsr r0
     b9c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     ba0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     ba4:	00000001 	andeq	r0, r0, r1
		diag ("Leftover RAM: %d bytes",
     ba8:	00000014 	andeq	r0, r0, r4, lsl r0
     bac:	00000b60 	andeq	r0, r0, r0, ror #22
     bb0:	0000161c 	andeq	r1, r0, ip, lsl r6
     bb4:	00000018 	andeq	r0, r0, r8, lsl r0
     bb8:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     bbc:	00018e02 	andeq	r8, r1, r2, lsl #28
     bc0:	0000001c 	andeq	r0, r0, ip, lsl r0
     bc4:	00000b60 	andeq	r0, r0, r0, ror #22
     bc8:	00001634 	andeq	r1, r0, r4, lsr r6
     bcc:	00000054 	andeq	r0, r0, r4, asr r0
     bd0:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     bd4:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bd8:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     bdc:	00018e02 	andeq	r8, r1, r2, lsl #28
     be0:	0000001c 	andeq	r0, r0, ip, lsl r0
     be4:	00000b60 	andeq	r0, r0, r0, ror #22
     be8:	00001688 	andeq	r1, r0, r8, lsl #13
     bec:	00000040 	andeq	r0, r0, r0, asr #32
     bf0:	83180e41 	tsthi	r8, #1040	; 0x410
     bf4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     bf8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     bfc:	00018e02 	andeq	r8, r1, r2, lsl #28
     c00:	00000014 	andeq	r0, r0, r4, lsl r0
__attribute__ ((noreturn)) void __pi_release () {
     c04:	00000b60 	andeq	r0, r0, r0, ror #22
     c08:	000016c8 	andeq	r1, r0, r8, asr #13
     c0c:	00000024 	andeq	r0, r0, r4, lsr #32
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     c10:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	check_stack_overflow;
     c14:	00018e02 	andeq	r8, r1, r2, lsl #28
     c18:	00000014 	andeq	r0, r0, r4, lsl r0
     c1c:	00000b60 	andeq	r0, r0, r0, ror #22
	update_n_wake (MAX_WORD, NO);
     c20:	000016ec 	andeq	r1, r0, ip, ror #13
     c24:	00000014 	andeq	r0, r0, r4, lsl r0
     c28:	83080e41 	movwhi	r0, #36417	; 0x8e41
	for_all_tasks (__pi_curr) {
     c2c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c30:	0000000c 	andeq	r0, r0, ip
     c34:	00000b60 	andeq	r0, r0, r0, ror #22
  __ASM volatile ("cpsid i" : : : "memory");
     c38:	00001700 	andeq	r1, r0, r0, lsl #14
	__SLEEP;
     c3c:	00000014 	andeq	r0, r0, r4, lsl r0
     c40:	0000001c 	andeq	r0, r0, ip, lsl r0
     c44:	00000b60 	andeq	r0, r0, r0, ror #22
     c48:	00000000 	andeq	r0, r0, r0
	system_event_count ++;
     c4c:	00000064 	andeq	r0, r0, r4, rrx
     c50:	83180e41 	tsthi	r8, #1040	; 0x410
	switch (__pi_systat.effpdm) {
     c54:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c58:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c5c:	00018e02 	andeq	r8, r1, r2, lsl #28
     c60:	0000001c 	andeq	r0, r0, ip, lsl r0
			__WFI ();
     c64:	00000b60 	andeq	r0, r0, r0, ror #22
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	00000128 	andeq	r0, r0, r8, lsr #2
	check_stack_overflow;
     c70:	83180e41 	tsthi	r8, #1040	; 0x410
     c74:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     c78:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c7c:	00018e02 	andeq	r8, r1, r2, lsl #28
			(__pi_curr->code) (tstate (__pi_curr));
     c80:	00000024 	andeq	r0, r0, r4, lsr #32
			goto Redo;
     c84:	00000b60 	andeq	r0, r0, r0, ror #22
	for_all_tasks (__pi_curr) {
     c88:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     c8c:	000000ec 	andeq	r0, r0, ip, ror #1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     c90:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     c94:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     c98:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     c9c:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     ca0:	8b038a04 	blhi	e34b8 <__ccfg+0xc3510>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     ca4:	00018e02 	andeq	r8, r1, r2, lsl #28
     ca8:	0000000c 	andeq	r0, r0, ip
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     cac:	00000b60 	andeq	r0, r0, r0, ror #22
     cb0:	00000000 	andeq	r0, r0, r0
			__WFI ();
     cb4:	00000002 	andeq	r0, r0, r2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     cb8:	0000000c 	andeq	r0, r0, ip
     cbc:	00000b60 	andeq	r0, r0, r0, ror #22
}
     cc0:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     cc4:	00000004 	andeq	r0, r0, r4
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     cc8:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     ccc:	00000b60 	andeq	r0, r0, r0, ror #22
     cd0:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     cd4:	00000014 	andeq	r0, r0, r4, lsl r0
     cd8:	00000018 	andeq	r0, r0, r8, lsl r0
     cdc:	00000b60 	andeq	r0, r0, r0, ror #22
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     ce0:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     ce4:	0000001a 	andeq	r0, r0, sl, lsl r0
     ce8:	83080e41 	movwhi	r0, #36417	; 0x8e41
     cec:	4a018e02 	bmi	644fc <__ccfg+0x44554>
     cf0:	000ec3ce 	andeq	ip, lr, lr, asr #7
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     cf4:	0000000c 	andeq	r0, r0, ip
     cf8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     cfc:	7c020001 	stcvc	0, cr0, [r2], {1}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     d00:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d04:	0000001c 	andeq	r0, r0, ip, lsl r0
     d08:	00000cf4 	strdeq	r0, [r0], -r4
     d0c:	00001714 	andeq	r1, r0, r4, lsl r7
     d10:	00000078 	andeq	r0, r0, r8, ror r0
			SysCtrlSetRechargeBeforePowerDown
     d14:	83180e41 	tsthi	r8, #1040	; 0x410
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     d18:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     d1c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d20:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     d24:	0000000c 	andeq	r0, r0, ip
     d28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d2c:	7c020001 	stcvc	0, cr0, [r2], {1}
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     d30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d34:	00000030 	andeq	r0, r0, r0, lsr r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     d38:	00000d24 	andeq	r0, r0, r4, lsr #26
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     d3c:	0000178c 	andeq	r1, r0, ip, lsl #15
     d40:	00000054 	andeq	r0, r0, r4, asr r0
     d44:	810c0e41 	tsthi	ip, r1, asr #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     d48:	83028203 	movwhi	r8, #8707	; 0x2203
			while (!(AONWUCPowerStatusGet () &
     d4c:	280e4101 	stmdacs	lr, {r0, r8, lr}
			PRCMPowerDomainOn (__pi_systat.ondmns);
     d50:	06850784 	streq	r0, [r5], r4, lsl #15
     d54:	048e0586 	streq	r0, [lr], #1414	; 0x586
     d58:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     d5c:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
     d60:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
     d64:	000ec1c2 	andeq	ip, lr, r2, asr #3
     d68:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     d6c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d70:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     d74:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d78:	00000030 	andeq	r0, r0, r0, lsr r0
			SysCtrlAdjustRechargeAfterPowerDown ();
     d7c:	00000d68 	andeq	r0, r0, r8, ror #26
			reinit_uart ();
     d80:	000017e0 	andeq	r1, r0, r0, ror #15
     d84:	00000060 	andeq	r0, r0, r0, rrx
     d88:	810c0e41 	tsthi	ip, r1, asr #28
}
     d8c:	83028203 	movwhi	r8, #8707	; 0x2203
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     d90:	200e4101 	andcs	r4, lr, r1, lsl #2
     d94:	05850684 	streq	r0, [r5, #1668]	; 0x684
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     d98:	0a64048e 	beq	1901fd8 <__ccfg+0x18e2030>
     d9c:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     da0:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     da4:	c1c2c341 	bicgt	ip, r2, r1, asr #6
     da8:	0b41000e 	bleq	1040de8 <__ccfg+0x1020e40>
     dac:	0000000c 	andeq	r0, r0, ip
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     db0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     db4:	7c020001 	stcvc	0, cr0, [r2], {1}
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     db8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     dbc:	00000028 	andeq	r0, r0, r8, lsr #32
     dc0:	00000dac 	andeq	r0, r0, ip, lsr #27
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     dc4:	00001840 	andeq	r1, r0, r0, asr #16
     dc8:	00000070 	andeq	r0, r0, r0, ror r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     dcc:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     dd0:	86048505 	strhi	r8, [r4], -r5, lsl #10
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     dd4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     dd8:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
			PRCMPowerDomainOff (
     ddc:	c7ce4214 	bfigt	r4, r4, #4, #11
     de0:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
	__SLEEP;
     de4:	000b4200 	andeq	r4, fp, r0, lsl #4
     de8:	0000000c 	andeq	r0, r0, ip
  __ASM volatile ("cpsie i" : : : "memory");
     dec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	goto Redo;
     df0:	7c020001 	stcvc	0, cr0, [r2], {1}
     df4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     df8:	00000028 	andeq	r0, r0, r8, lsr #32
     dfc:	00000de8 	andeq	r0, r0, r8, ror #27
     e00:	000018b0 			; <UNDEFINED> instruction: 0x000018b0
     e04:	0000011c 	andeq	r0, r0, ip, lsl r1
     e08:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     e0c:	86048505 	strhi	r8, [r4], -r5, lsl #10
     e10:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     e14:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
     e18:	c7ce4214 	bfigt	r4, r4, #4, #11
     e1c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e20:	00000000 	andeq	r0, r0, r0
     e24:	0000000c 	andeq	r0, r0, ip
     e28:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e2c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e30:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e34:	0000000c 	andeq	r0, r0, ip
     e38:	00000e24 	andeq	r0, r0, r4, lsr #28
     e3c:	000019cc 	andeq	r1, r0, ip, asr #19
     e40:	00000020 	andeq	r0, r0, r0, lsr #32
     e44:	00000028 	andeq	r0, r0, r8, lsr #32
     e48:	00000e24 	andeq	r0, r0, r4, lsr #28
     e4c:	000019ec 	andeq	r1, r0, ip, ror #19
     e50:	00000230 	andeq	r0, r0, r0, lsr r2
     e54:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
     e58:	86078508 	strhi	r8, [r7], -r8, lsl #10
int main (void) {
     e5c:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     e60:	8a038904 	bhi	e3278 <__ccfg+0xc32d0>
     e64:	02018e02 	andeq	r8, r1, #2, 28
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     e68:	200e0a4f 	andcs	r0, lr, pc, asr #20
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e6c:	00000b42 	andeq	r0, r0, r2, asr #22
	system_init ();
     e70:	0000001c 	andeq	r0, r0, ip, lsl r0
	tcv_init ();
     e74:	00000e24 	andeq	r0, r0, r4, lsr #28
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     e78:	00001c1c 	andeq	r1, r0, ip, lsl ip
     e7c:	00000050 	andeq	r0, r0, r0, asr r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     e80:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     e84:	86058506 	strhi	r8, [r5], -r6, lsl #10
     e88:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     e8c:	00018e02 	andeq	r8, r1, r2, lsl #28
     e90:	0000000c 	andeq	r0, r0, ip
	delay (16, 0);
     e94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e98:	7c020001 	stcvc	0, cr0, [r2], {1}
     e9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	__pi_release ();
     ea0:	00000020 	andeq	r0, r0, r0, lsr #32
     ea4:	00000e90 	muleq	r0, r0, lr
     ea8:	00001c6c 	andeq	r1, r0, ip, ror #24
     eac:	00000390 	muleq	r0, r0, r3
     eb0:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     eb4:	86068507 	strhi	r8, [r6], -r7, lsl #10
     eb8:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
static void killev (__pi_pcb_t *pid) {
     ebc:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
	wfun = (aword)(pid->code);
     ec0:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
     ec4:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
     ec8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ecc:	7c020001 	stcvc	0, cr0, [r2], {1}
     ed0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ed4:	0000000c 	andeq	r0, r0, ip
     ed8:	00000ec4 	andeq	r0, r0, r4, asr #29
			if (i->Events [j] . Event == (aword)pid
     edc:	00001ffc 	strdeq	r1, [r0], -ip
     ee0:	00000030 	andeq	r0, r0, r0, lsr r0
     ee4:	0000000c 	andeq	r0, r0, ip
				wakeupev (i, j);
     ee8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     eec:	7c020001 	stcvc	0, cr0, [r2], {1}
	for_all_tasks (i) {
     ef0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ef4:	0000000c 	andeq	r0, r0, ip
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     ef8:	00000ee4 	andeq	r0, r0, r4, ror #29
static void qfree (aword *ch) {
     efc:	00000000 	andeq	r0, r0, r0
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f00:	00000020 	andeq	r0, r0, r0, lsr #32
	cc = (aword*)(mpools + MA_NP);
     f04:	0000000c 	andeq	r0, r0, ip
	m_setnextp (ch, chunk);
     f08:	00000ee4 	andeq	r0, r0, r4, ror #29
	m_setnextp (cc, ch);
     f0c:	0000202c 	andeq	r2, r0, ip, lsr #32
}
     f10:	00000018 	andeq	r0, r0, r8, lsl r0
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     f14:	0000000c 	andeq	r0, r0, ip
     f18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f1c:	7c020001 	stcvc	0, cr0, [r2], {1}
			m_setnextp (cc, m_nextp (chunk));
     f20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f24:	0000000c 	andeq	r0, r0, ip
			m_size (chunk) += m_hdrlen + m_size (ch);
     f28:	00000f14 	andeq	r0, r0, r4, lsl pc
     f2c:	00002044 	andeq	r2, r0, r4, asr #32
     f30:	00000008 	andeq	r0, r0, r8
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     f34:	0000000c 	andeq	r0, r0, ip
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     f38:	00000f14 	andeq	r0, r0, r4, lsl pc
     f3c:	00000000 	andeq	r0, r0, r0
     f40:	00000006 	andeq	r0, r0, r6
			m_setnextp (cc, m_nextp (chunk));
     f44:	0000000c 	andeq	r0, r0, ip
			m_size (ch) += m_hdrlen + m_size (chunk);
     f48:	00000f14 	andeq	r0, r0, r4, lsl pc
     f4c:	0000204c 	andeq	r2, r0, ip, asr #32
     f50:	00000008 	andeq	r0, r0, r8
     f54:	0000000c 	andeq	r0, r0, ip
     f58:	00000f14 	andeq	r0, r0, r4, lsl pc
     f5c:	00000000 	andeq	r0, r0, r0
			if (m_size (chunk) >= m_size (ch))
     f60:	00000006 	andeq	r0, r0, r6
     f64:	0000000c 	andeq	r0, r0, ip
     f68:	00000f14 	andeq	r0, r0, r4, lsl pc
		chunk = m_nextp (chunk))
     f6c:	00000000 	andeq	r0, r0, r0
     f70:	00000008 	andeq	r0, r0, r8
     f74:	0000000c 	andeq	r0, r0, ip
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     f78:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	diag_wait (a);
     f7c:	7c020001 	stcvc	0, cr0, [r2], {1}
	diag_wchar (c, a);
     f80:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f84:	00000018 	andeq	r0, r0, r8, lsl r0
}
     f88:	00000f74 	andeq	r0, r0, r4, ror pc
     f8c:	00002054 	andeq	r2, r0, r4, asr r0
	syserror (ESTATE, "state");
     f90:	000000d4 	ldrdeq	r0, [r0], -r4
     f94:	83100e41 	tsthi	r0, #1040	; 0x410
     f98:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     f9c:	00018e02 	andeq	r8, r1, r2, lsl #28
void update_n_wake (word min, Boolean force) {
     fa0:	00000014 	andeq	r0, r0, r4, lsl r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     fa4:	00000f74 	andeq	r0, r0, r4, ror pc
     fa8:	00002128 	andeq	r2, r0, r8, lsr #2
     fac:	000000a4 	andeq	r0, r0, r4, lsr #1
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     fb0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     fb4:	00018e02 	andeq	r8, r1, r2, lsl #28
     fb8:	0000000c 	andeq	r0, r0, ip
     fbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     fc0:	7c020001 	stcvc	0, cr0, [r2], {1}
     fc4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fc8:	00000018 	andeq	r0, r0, r8, lsl r0
     fcc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
     fd0:	000021cc 	andeq	r2, r0, ip, asr #3
     fd4:	0000007c 	andeq	r0, r0, ip, ror r0
     fd8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     fdc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     fe0:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
     fe4:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_mintk = znew + min;
     fe8:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
     fec:	00002248 	andeq	r2, r0, r8, asr #4
			if (!twaiting (i))
     ff0:	000000ac 	andeq	r0, r0, ip, lsr #1
     ff4:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
			if (twakecnd (__pi_old, znew, i->Timer)) {
     ff8:	00018e02 	andeq	r8, r1, r2, lsl #28
     ffc:	0000000c 	andeq	r0, r0, ip
    1000:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1004:	000022f4 	strdeq	r2, [r0], -r4
    1008:	0000005c 	andeq	r0, r0, ip, asr r0
    100c:	0000000c 	andeq	r0, r0, ip
    1010:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1014:	00002350 	andeq	r2, r0, r0, asr r3
    1018:	00000018 	andeq	r0, r0, r8, lsl r0
    101c:	0000000c 	andeq	r0, r0, ip
    1020:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1024:	00000000 	andeq	r0, r0, r0
				wakeuptm (i);
    1028:	00000010 	andeq	r0, r0, r0, lsl r0
    102c:	0000000c 	andeq	r0, r0, ip
		for_all_tasks (i) {
    1030:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
				d = i->Timer - znew;
    1034:	00002368 	andeq	r2, r0, r8, ror #6
    1038:	00000010 	andeq	r0, r0, r0, lsl r0
    103c:	0000000c 	andeq	r0, r0, ip
		if ((word)(__pi_mintk - znew) < min) 
    1040:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1044:	00002378 	andeq	r2, r0, r8, ror r3
    1048:	00000014 	andeq	r0, r0, r4, lsl r0
	__pi_old = znew;
    104c:	00000018 	andeq	r0, r0, r8, lsl r0
}
    1050:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
	TCI_RUN_DELAY_TIMER;
    1054:	0000238c 	andeq	r2, r0, ip, lsl #7
}
    1058:	00000064 	andeq	r0, r0, r4, rrx
    105c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1060:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1064:	00018e02 	andeq	r8, r1, r2, lsl #28
    1068:	0000000c 	andeq	r0, r0, ip
void proceed (word state) {
    106c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
	prcdstate (__pi_curr, state);
    1070:	000023f0 	strdeq	r2, [r0], -r0
    1074:	00000014 	andeq	r0, r0, r4, lsl r0
	release;
    1078:	0000000c 	andeq	r0, r0, ip
    107c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
void __pi_wait (aword event, word state) {
    1080:	00002404 	andeq	r2, r0, r4, lsl #8
	sint j = nevents (__pi_curr);
    1084:	00000014 	andeq	r0, r0, r4, lsl r0
	if (j >= MAX_EVENTS_PER_TASK)
    1088:	0000000c 	andeq	r0, r0, ip
    108c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    1090:	00002418 	andeq	r2, r0, r8, lsl r4
		syserror (ENEVENTS, "sw");
    1094:	00000014 	andeq	r0, r0, r4, lsl r0
    1098:	0000000c 	andeq	r0, r0, ip
	setestate (__pi_curr->Events [j], state, event);
    109c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
	incwait (__pi_curr);
    10a0:	0000242c 	andeq	r2, r0, ip, lsr #8
	setestate (__pi_curr->Events [j], state, event);
    10a4:	00000028 	andeq	r0, r0, r8, lsr #32
}
    10a8:	0000000c 	andeq	r0, r0, ip
    10ac:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    10b0:	00002454 	andeq	r2, r0, r4, asr r4
void __pi_trigger (aword event) {
    10b4:	00000010 	andeq	r0, r0, r0, lsl r0
	for_all_tasks (i) {
    10b8:	0000000c 	andeq	r0, r0, ip
		for (j = 0; j < nevents (i); j++) {
    10bc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    10c0:	00002464 	andeq	r2, r0, r4, ror #8
    10c4:	0000002c 	andeq	r0, r0, ip, lsr #32
    10c8:	0000000c 	andeq	r0, r0, ip
			if (i->Events [j] . Event == event) {
    10cc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    10d0:	00002490 	muleq	r0, r0, r4
    10d4:	00000014 	andeq	r0, r0, r4, lsl r0
				wakeupev (i, j);
    10d8:	0000000c 	andeq	r0, r0, ip
    10dc:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
	for_all_tasks (i) {
    10e0:	000024a4 	andeq	r2, r0, r4, lsr #9
}
    10e4:	00000014 	andeq	r0, r0, r4, lsl r0
aword __pi_join (aword pid, word st) {
    10e8:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i) {
    10ec:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    10f0:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
	return 0;
    10f4:	00000110 	andeq	r0, r0, r0, lsl r1
		if ((aword)i == pid) {
    10f8:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
			__pi_wait (pid, st);
    10fc:	86038504 	strhi	r8, [r3], -r4, lsl #10
}
    1100:	02018e02 	andeq	r8, r1, #2, 28
	for_all_tasks (i) {
    1104:	00100e76 	andseq	r0, r0, r6, ror lr
    1108:	00000018 	andeq	r0, r0, r8, lsl r0
void delay (word d, word state) {
    110c:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
	settstate (__pi_curr, state);
    1110:	000025c8 	andeq	r2, r0, r8, asr #11
    1114:	00000064 	andeq	r0, r0, r4, rrx
    1118:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    111c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	update_n_wake (d, YES);
    1120:	00000001 	andeq	r0, r0, r1
    1124:	0000000c 	andeq	r0, r0, ip
	__pi_curr->Timer = __pi_old + d;
    1128:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
    112c:	0000262c 	andeq	r2, r0, ip, lsr #12
	inctimer (__pi_curr);
    1130:	00000028 	andeq	r0, r0, r8, lsr #32
    1134:	00000014 	andeq	r0, r0, r4, lsl r0
    1138:	00000fb8 			; <UNDEFINED> instruction: 0x00000fb8
}
    113c:	00002654 	andeq	r2, r0, r4, asr r6
    1140:	00000150 	andeq	r0, r0, r0, asr r1
	if (fun == NULL)
    1144:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
		return (int) __pi_curr;
    1148:	00018e02 	andeq	r8, r1, r2, lsl #28
    114c:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i)
    1150:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    1154:	7c020001 	stcvc	0, cr0, [r2], {1}
		if (i->code == fun)
    1158:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    115c:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i)
    1160:	0000114c 	andeq	r1, r0, ip, asr #2
    1164:	00000000 	andeq	r0, r0, r0
int __pi_strlen (const char *s) {
    1168:	000000f4 	strdeq	r0, [r0], -r4
	for (i = 0; *(s+i) != '\0'; i++);
    116c:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
}
    1170:	86058506 	strhi	r8, [r5], -r6, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
    1174:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
	while (n--)
    1178:	00018e02 	andeq	r8, r1, r2, lsl #28
    117c:	00000028 	andeq	r0, r0, r8, lsr #32
		*dest++ = *src++;
    1180:	0000114c 	andeq	r1, r0, ip, asr #2
    1184:	000027a4 	andeq	r2, r0, r4, lsr #15
    1188:	00000220 	andeq	r0, r0, r0, lsr #4
void adddevfunc (devreqfun_t rf, int loc) {
    118c:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
		syserror (EREQPAR, "addv");
    1190:	86088509 	strhi	r8, [r8], -r9, lsl #10
		syserror (ERESOURCE, "addv");
    1194:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
	if (ioreq [loc] != NULL)
    1198:	8a048905 	bhi	1235b4 <__ccfg+0x10360c>
    119c:	8e028b03 	vmlahi.f64	d8, d2, d3
		syserror (ERESOURCE, "addv");
    11a0:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	ioreq [loc] = rf;
    11a4:	00000024 	andeq	r0, r0, r4, lsr #32
}
    11a8:	00000014 	andeq	r0, r0, r4, lsl r0
    11ac:	0000114c 	andeq	r1, r0, ip, asr #2
sint io (word retry, word dev, word operation, char *buf, word len) {
    11b0:	000029c4 	andeq	r2, r0, r4, asr #19
    11b4:	00000060 	andeq	r0, r0, r0, rrx
    11b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11bc:	00018e02 	andeq	r8, r1, r2, lsl #28
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    11c0:	00000014 	andeq	r0, r0, r4, lsl r0
    11c4:	0000114c 	andeq	r1, r0, ip, asr #2
    11c8:	00000000 	andeq	r0, r0, r0
		syserror (ENODEVICE, "io");
    11cc:	00000078 	andeq	r0, r0, r8, ror r0
    11d0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (len == 0)
    11d4:	00018e02 	andeq	r8, r1, r2, lsl #28
	ret = (ioreq [dev]) (operation, buf, len);
    11d8:	0000000c 	andeq	r0, r0, ip
    11dc:	0000114c 	andeq	r1, r0, ip, asr #2
	if (ret >= 0)
    11e0:	00002a24 	andeq	r2, r0, r4, lsr #20
	if (ret == -1) {
    11e4:	00000018 	andeq	r0, r0, r8, lsl r0
    11e8:	0000000c 	andeq	r0, r0, ip
		if (retry == WNONE)
    11ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		iowait (dev, operation, retry);
    11f0:	7c020001 	stcvc	0, cr0, [r2], {1}
    11f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    11f8:	0000000c 	andeq	r0, r0, ip
			release;
    11fc:	000011e8 	andeq	r1, r0, r8, ror #3
	if (ret == -2) {
    1200:	00000000 	andeq	r0, r0, r0
		if (retry != WNONE) {
    1204:	00000010 	andeq	r0, r0, r0, lsl r0
    1208:	0000000c 	andeq	r0, r0, ip
			iowait (dev, operation, retry);
    120c:	000011e8 	andeq	r1, r0, r8, ror #3
    1210:	00000000 	andeq	r0, r0, r0
			(ioreq [dev]) (NONE, buf, len);
    1214:	00000018 	andeq	r0, r0, r8, lsl r0
    1218:	0000000c 	andeq	r0, r0, ip
    121c:	000011e8 	andeq	r1, r0, r8, ror #3
		(ioreq [dev]) (NONE, buf, len);
    1220:	00002a3c 	andeq	r2, r0, ip, lsr sl
    1224:	0000004c 	andeq	r0, r0, ip, asr #32
    1228:	00000014 	andeq	r0, r0, r4, lsl r0
}
    122c:	000011e8 	andeq	r1, r0, r8, ror #3
	if (retry != WNONE) {
    1230:	00000000 	andeq	r0, r0, r0
		delay (-ret - 2, retry);
    1234:	00000030 	andeq	r0, r0, r0, lsr r0
    1238:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    123c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1240:	00000018 	andeq	r0, r0, r8, lsl r0
		release;
    1244:	000011e8 	andeq	r1, r0, r8, ror #3
    1248:	00002a88 	andeq	r2, r0, r8, lsl #21
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    124c:	0000006c 	andeq	r0, r0, ip, rrx
    1250:	83100e41 	tsthi	r0, #1040	; 0x410
    1254:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1258:	00018e02 	andeq	r8, r1, r2, lsl #28
    125c:	00000014 	andeq	r0, r0, r4, lsl r0
		syserror (ERESOURCE, "mal1");
    1260:	000011e8 	andeq	r1, r0, r8, ror #3
    1264:	00002af4 	strdeq	r2, [r0], -r4
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    1268:	00000016 	andeq	r0, r0, r6, lsl r0
    126c:	83080e41 	movwhi	r0, #36417	; 0x8e41
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1270:	00018e02 	andeq	r8, r1, r2, lsl #28
	m_size (mpools [0]) = mlen - m_hdrlen;
    1274:	0000000c 	andeq	r0, r0, ip
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1278:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    127c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1280:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1284:	00000024 	andeq	r0, r0, r4, lsr #32
}
    1288:	00001274 	andeq	r1, r0, r4, ror r2
    128c:	00002b0c 	andeq	r2, r0, ip, lsl #22
    1290:	00000028 	andeq	r0, r0, r8, lsr #32
    1294:	83100e41 	tsthi	r0, #1040	; 0x410
    1298:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
void __pi_free (aword *ch) {
    129c:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    12a0:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
    12a4:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
		syserror (EMALLOC, "malg");
    12a8:	0000000b 	andeq	r0, r0, fp
    12ac:	0000000c 	andeq	r0, r0, ip
	mcfree [MA_NP] += m_size (ch);
    12b0:	00001274 	andeq	r1, r0, r4, ror r2
		m_size (ch) ^= MALLOC_UMASK;
    12b4:	00002b34 	andeq	r2, r0, r4, lsr fp
    12b8:	00000008 	andeq	r0, r0, r8
	mcfree [MA_NP] += m_size (ch);
    12bc:	0000000c 	andeq	r0, r0, ip
	QFREE;
    12c0:	00001274 	andeq	r1, r0, r4, ror r2
	if (mevent [MA_NP] . nwait) {
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	00000022 	andeq	r0, r0, r2, lsr #32
		trigger ((aword)(&(mevent [MA_NP])));
    12cc:	00000018 	andeq	r0, r0, r8, lsl r0
		mevent [MA_NP] . nwait --;
    12d0:	00001274 	andeq	r1, r0, r4, ror r2
}
    12d4:	00000000 	andeq	r0, r0, r0
    12d8:	0000002e 	andeq	r0, r0, lr, lsr #32
    12dc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    12e0:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
void kill (aword pid) {
    12e4:	000ec4ce 	andeq	ip, lr, lr, asr #9
		pid = (aword) __pi_curr;
    12e8:	00000018 	andeq	r0, r0, r8, lsl r0
	j = NULL;
    12ec:	00001274 	andeq	r1, r0, r4, ror r2
	for_all_tasks (i) {
    12f0:	00000000 	andeq	r0, r0, r0
	syserror (EREQPAR, "kpi");
    12f4:	00000034 	andeq	r0, r0, r4, lsr r0
    12f8:	83100e41 	tsthi	r0, #1040	; 0x410
		if ((aword)i == pid) {
    12fc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1300:	00018e02 	andeq	r8, r1, r2, lsl #28
				__PCB = i->Next;
    1304:	00000018 	andeq	r0, r0, r8, lsl r0
			killev (i);
    1308:	00001274 	andeq	r1, r0, r4, ror r2
			ufree (i);
    130c:	00000000 	andeq	r0, r0, r0
			if (i == __pi_curr)
    1310:	00000040 	andeq	r0, r0, r0, asr #32
    1314:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				release;
    1318:	86038504 	strhi	r8, [r3], -r4, lsl #10
				j->Next = i->Next;
    131c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1320:	0000000c 	andeq	r0, r0, ip
    1324:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
}
    1328:	7c020001 	stcvc	0, cr0, [r2], {1}
    132c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1330:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (size < 8)
    1334:	00001320 	andeq	r1, r0, r0, lsr #6
		_size = 2;
    1338:	00002b3c 	andeq	r2, r0, ip, lsr fp
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    133c:	0000005c 	andeq	r0, r0, ip, asr r0
		_size = (((aword)size) + 3) >> 2;
    1340:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
		if (m_magic (chunk) != MALLOC_MAGIC)
    1344:	86038504 	strhi	r8, [r3], -r4, lsl #10
		_size = (((aword)size) + 3) >> 2;
    1348:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		if (mevent [MA_NP] . nfail != 255)
    134c:	0000100e 	andeq	r1, r0, lr
    1350:	00000014 	andeq	r0, r0, r4, lsl r0
			mevent [MA_NP] . nfail ++;
    1354:	00001320 	andeq	r1, r0, r0, lsr #6
		mnfree [MA_NP] = 0;
    1358:	00002b98 	muleq	r0, r8, fp
    135c:	0000002c 	andeq	r0, r0, ip, lsr #32
		if (m_magic (chunk) != MALLOC_MAGIC)
    1360:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1364:	00018e02 	andeq	r8, r1, r2, lsl #28
			syserror (EMALLOC, "malc");
    1368:	00000018 	andeq	r0, r0, r8, lsl r0
    136c:	00001320 	andeq	r1, r0, r0, lsr #6
		if (m_size (chunk) >= _size)
    1370:	00000000 	andeq	r0, r0, r0
    1374:	00000090 	muleq	r0, r0, r0
		chunk = m_nextp (chunk)) {
    1378:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		m_setnextp (cc, m_nextp (chunk));
    137c:	86038504 	strhi	r8, [r3], -r4, lsl #10
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    1380:	00018e02 	andeq	r8, r1, r2, lsl #28
    1384:	00000014 	andeq	r0, r0, r4, lsl r0
			m_size (chunk) = _size;
    1388:	00001320 	andeq	r1, r0, r0, lsr #6
			cc = chunk + _size + m_hdrlen;
    138c:	00000000 	andeq	r0, r0, r0
    1390:	00000018 	andeq	r0, r0, r8, lsl r0
			m_size (cc) = waste - m_hdrlen;
    1394:	83080e41 	movwhi	r0, #36417	; 0x8e41
			QFREE;
    1398:	00018e02 	andeq	r8, r1, r2, lsl #28
		mevent [MA_NP] . nfail = 0;
    139c:	00000014 	andeq	r0, r0, r4, lsl r0
		mcfree [MA_NP] -= m_size (chunk);
    13a0:	00001320 	andeq	r1, r0, r0, lsr #6
    13a4:	00000000 	andeq	r0, r0, r0
    13a8:	00000060 	andeq	r0, r0, r0, rrx
    13ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		m_size (chunk) |= MALLOC_UMASK;
    13b0:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (mnfree [MA_NP] > mcfree [MA_NP])
    13b4:	00000014 	andeq	r0, r0, r4, lsl r0
		m_size (chunk) |= MALLOC_UMASK;
    13b8:	00001320 	andeq	r1, r0, r0, lsr #6
			mnfree [MA_NP] = mcfree [MA_NP];
    13bc:	00000000 	andeq	r0, r0, r0
}
    13c0:	00000034 	andeq	r0, r0, r4, lsr r0
    13c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13c8:	00018e02 	andeq	r8, r1, r2, lsl #28
    13cc:	00000018 	andeq	r0, r0, r8, lsl r0
    13d0:	00001320 	andeq	r1, r0, r0, lsr #6
    13d4:	00000000 	andeq	r0, r0, r0
    13d8:	00000038 	andeq	r0, r0, r8, lsr r0
aword __pi_fork (fsmcode func, aword data) {
    13dc:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    13e0:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    13e4:	00000001 	andeq	r0, r0, r1
    13e8:	0000000c 	andeq	r0, r0, ip
		if ((j = __PCB) == NULL)
    13ec:	00001320 	andeq	r1, r0, r0, lsr #6
	i->Next = NULL;
    13f0:	00000000 	andeq	r0, r0, r0
	i->data = data;
    13f4:	0000000c 	andeq	r0, r0, ip
		if ((j = __PCB) == NULL)
    13f8:	00000018 	andeq	r0, r0, r8, lsl r0
}
    13fc:	00001320 	andeq	r1, r0, r0, lsr #6
			for (; j->Next != NULL; j = j->Next);
    1400:	00000000 	andeq	r0, r0, r0
    1404:	00000034 	andeq	r0, r0, r4, lsr r0
	return (aword) i;
    1408:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    140c:	86038504 	strhi	r8, [r3], -r4, lsl #10
	if (mevent [MA_NP] . nwait != 255)
    1410:	00018e02 	andeq	r8, r1, r2, lsl #28
    1414:	0000000c 	andeq	r0, r0, ip
    1418:	00001320 	andeq	r1, r0, r0, lsr #6
		mevent [MA_NP] . nwait ++;
    141c:	00000000 	andeq	r0, r0, r0
	wait ((aword)(&(mevent [MA_NP])), state);
    1420:	0000001c 	andeq	r0, r0, ip, lsl r0
