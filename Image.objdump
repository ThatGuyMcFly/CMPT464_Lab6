
Image.out:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:

const piniod_t __input_pins [] = INPUT_PIN_LIST;

void pin_sensor_init () { __pinsen_setedge_irq; }

void pin_sensor_read (word st, const byte *junk, address val) {
       0:	20005000 	andcs	r5, r0, r0

	const piniod_t *p;
	word i;
	byte v;

	if (val == NULL) {
       4:	000013f9 	strdeq	r1, [r0], -r9
		// Called to issue a wait request
		if (st == WNONE)
       8:	000013f3 	strdeq	r1, [r0], -r3
       c:	000013f5 	strdeq	r1, [r0], -r5
			// Make sure this is not WNONE
			return;
		cli;
		__pinsen_clear_and_enable;
      10:	000013f7 	strdeq	r1, [r0], -r7
      14:	000013f7 	strdeq	r1, [r0], -r7
		when (&__input_pins, st);
      18:	000013f7 	strdeq	r1, [r0], -r7
	...
	}

	*val = 0;
	for (i = 0, p = __input_pins;
	    	    i < sizeof (__input_pins) / sizeof (piniod_t); i++, p++)
		*val |= __port_in_value (p) << i;
      2c:	000013f7 	strdeq	r1, [r0], -r7
      30:	000013f7 	strdeq	r1, [r0], -r7
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Return the input value from the specified DIO.
    //
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
      34:	00000000 	andeq	r0, r0, r0
      38:	000013f7 	strdeq	r1, [r0], -r7
      3c:	000013f7 	strdeq	r1, [r0], -r7
      40:	00000835 	andeq	r0, r0, r5, lsr r8
      44:	000013f7 	strdeq	r1, [r0], -r7
      48:	000013f7 	strdeq	r1, [r0], -r7
}
      4c:	000013f7 	strdeq	r1, [r0], -r7
      50:	000003f5 	strdeq	r0, [r0], -r5
      54:	000006f5 	strdeq	r0, [r0], -r5
	if (!button_still_pressed (__button_list [pbutton]))
		goto Done;

	if (BUTTON_REPEAT (__button_list [pbutton])) {
		// Wait for repeat
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      58:	000013f7 	strdeq	r1, [r0], -r7
	    pbutton++) {
      5c:	000013f7 	strdeq	r1, [r0], -r7
      60:	000013f7 	strdeq	r1, [r0], -r7
	if (!button_still_pressed (__button_list [pbutton]))
      64:	000013f7 	strdeq	r1, [r0], -r7
      68:	000013f7 	strdeq	r1, [r0], -r7
      6c:	000013f7 	strdeq	r1, [r0], -r7
      70:	000013f7 	strdeq	r1, [r0], -r7
      74:	000013f7 	strdeq	r1, [r0], -r7
	if (BUTTON_REPEAT (__button_list [pbutton])) {
      78:	000013f7 	strdeq	r1, [r0], -r7
      7c:	000013f7 	strdeq	r1, [r0], -r7
		delay (BUTTON_REPEAT_DELAY, BU_LOOP);
      80:	000013f7 	strdeq	r1, [r0], -r7
      84:	000013f7 	strdeq	r1, [r0], -r7
	} else
		goto Debounce;

  entry (BU_LOOP)

	if (!button_still_pressed (__button_list [pbutton]))
      88:	000013f7 	strdeq	r1, [r0], -r7
      8c:	000013f7 	strdeq	r1, [r0], -r7
      90:	000013f7 	strdeq	r1, [r0], -r7
      94:	000013f7 	strdeq	r1, [r0], -r7
      98:	000013f7 	strdeq	r1, [r0], -r7
		goto Done;

	if (baction == NULL)
      9c:	000013f7 	strdeq	r1, [r0], -r7
      a0:	000013f7 	strdeq	r1, [r0], -r7
		goto Term;

	(*baction) (pbutton);
      a4:	000013f7 	strdeq	r1, [r0], -r7

	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);

endthread
      a8:	000013f7 	strdeq	r1, [r0], -r7
	delay (BUTTON_REPEAT_INTERVAL, BU_LOOP);
      ac:	000013f7 	strdeq	r1, [r0], -r7
      b0:	000013f7 	strdeq	r1, [r0], -r7
endthread
      b4:	000013f7 	strdeq	r1, [r0], -r7
      b8:	000013f7 	strdeq	r1, [r0], -r7
      bc:	000013f7 	strdeq	r1, [r0], -r7
      c0:	000013f7 	strdeq	r1, [r0], -r7
      c4:	000013f7 	strdeq	r1, [r0], -r7

000000c8 <initCycles>:
      c8:	2352      	movs	r3, #82	; 0x52
      ca:	4a0d      	ldr	r2, [pc, #52]	; (100 <_Min_Stack_Size>)
Boolean displayCycle = NO;

fsm blinker {
    state Check_PERIOD:
        if(On)
            leds(cycles[cyclesIndex].led, 1);
      cc:	b530      	push	{r4, r5, lr}
      ce:	7113      	strb	r3, [r2, #4]
      d0:	2301      	movs	r3, #1
      d2:	4c0c      	ldr	r4, [pc, #48]	; (104 <_Min_Stack_Size+0x4>)
      d4:	2500      	movs	r5, #0
            if(displayCycle) {
                ser_outf(Check_PERIOD, "%c ", cycles[cyclesIndex].letter);
            }
        else
            leds(cycles[cyclesIndex].led, 0);
      d6:	6023      	str	r3, [r4, #0]
      d8:	2347      	movs	r3, #71	; 0x47
      da:	7123      	strb	r3, [r4, #4]
      dc:	4b0a      	ldr	r3, [pc, #40]	; (108 <_Min_Stack_Size+0x8>)
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
      de:	6015      	str	r5, [r2, #0]
      e0:	80d5      	strh	r5, [r2, #6]
      e2:	8115      	strh	r5, [r2, #8]
      e4:	ca07      	ldmia	r2, {r0, r1, r2}
      e6:	80e5      	strh	r5, [r4, #6]
      e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      ec:	8125      	strh	r5, [r4, #8]
      ee:	330c      	adds	r3, #12
      f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
      f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      f8:	4b04      	ldr	r3, [pc, #16]	; (10c <_Min_Stack_Size+0xc>)
      fa:	601d      	str	r5, [r3, #0]
      fc:	bd30      	pop	{r4, r5, pc}
      fe:	bf00      	nop
     100:	20000060 	andcs	r0, r0, r0, rrx
     104:	20000054 	andcs	r0, r0, r4, asr r0
        delay(cycles[cyclesIndex].onTime * MS,OFF_PERIOD);
        when(&On, Check_PERIOD);
        release;
    state OFF_PERIOD:
        leds(cycles[cyclesIndex].led, 0);
     108:	2000006c 	andcs	r0, r0, ip, rrx
     10c:	20000084 	andcs	r0, r0, r4, lsl #1

00000110 <processSettingsInput>:
     110:	2300      	movs	r3, #0
     112:	b537      	push	{r0, r1, r2, r4, r5, lr}
     114:	461c      	mov	r4, r3
     116:	1e41      	subs	r1, r0, #1
        cyclesIndex = (cyclesIndex + 1) % 2;
        
        delay(offTime * MS,Check_PERIOD);
        when(&On, Check_PERIOD);
        release;
}
     118:	3031      	adds	r0, #49	; 0x31
     11a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     11e:	2a20      	cmp	r2, #32
     120:	d117      	bne.n	152 <processSettingsInput+0x42>
     122:	aa02      	add	r2, sp, #8
     124:	eb02 0244 	add.w	r2, r2, r4, lsl #1
     128:	f822 3c08 	strh.w	r3, [r2, #-8]
     12c:	2300      	movs	r3, #0
     12e:	3401      	adds	r4, #1
     130:	4281      	cmp	r1, r0
     132:	d1f2      	bne.n	11a <processSettingsInput+0xa>
     134:	4b0c      	ldr	r3, [pc, #48]	; (168 <processSettingsInput+0x58>)
     136:	f8bd 2000 	ldrh.w	r2, [sp]
     13a:	80da      	strh	r2, [r3, #6]
     13c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
            number += settingsInput[i] - 48;
        }
    }

    cycles[0].onTime = numbers[0];
    cycles[0].offTime = numbers[1];
     140:	811a      	strh	r2, [r3, #8]

    cycles[1].onTime = numbers[2];
     142:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     146:	825a      	strh	r2, [r3, #18]
    cycles[1].offTime = numbers[3];
     148:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     14c:	829a      	strh	r2, [r3, #20]
}
     14e:	b003      	add	sp, #12
     150:	bd30      	pop	{r4, r5, pc}
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     152:	3a30      	subs	r2, #48	; 0x30
     154:	b2d5      	uxtb	r5, r2
     156:	2d09      	cmp	r5, #9
            number = number * 10;
     158:	bf9e      	ittt	ls
     15a:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
            number += settingsInput[i] - 48;
     15e:	eb02 0343 	addls.w	r3, r2, r3, lsl #1
     162:	b29b      	uxthls	r3, r3
     164:	e7e4      	b.n	130 <processSettingsInput+0x20>
     166:	bf00      	nop
     168:	2000006c 	andcs	r0, r0, ip, rrx

0000016c <root>:

fsm root {
     16c:	b500      	push	{lr}
     16e:	b091      	sub	sp, #68	; 0x44
     170:	2809      	cmp	r0, #9
     172:	d878      	bhi.n	266 <root+0xfa>
     174:	e8df f000 	tbb	[pc, r0]
     178:	15100b05 	ldrne	r0, [r0, #-2821]	; 0xfffff4fb
     17c:	43352a26 	teqmi	r5, #155648	; 0x26000
     180:	f7ff524a 			; <UNDEFINED> instruction: 0xf7ff524a

    char username[NAME_LENGTH];
        
    state Initial:
        initCycles();
     184:	ffa1 2000 	vaddl.u32	q1, d1, d0

        ser_outf(Initial, "Enter your name: ");
     188:	4938      	ldr	r1, [pc, #224]	; (26c <root+0x100>)
     18a:	f001 fa45 	bl	1618 <ser_outf>

    state Get_Name:
        ser_in(Get_Name, username, NAME_LENGTH);
     18e:	2214      	movs	r2, #20
     190:	2001      	movs	r0, #1
     192:	4937      	ldr	r1, [pc, #220]	; (270 <root+0x104>)
     194:	f001 fa04 	bl	15a0 <ser_in>
        //runfsm blinker;

    state Show_Menu:
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	2002      	movs	r0, #2
     19a:	4a35      	ldr	r2, [pc, #212]	; (270 <root+0x104>)
     19c:	4935      	ldr	r1, [pc, #212]	; (274 <root+0x108>)
     19e:	f001 fa3b 	bl	1618 <ser_outf>
"Choice: ", username);

    state Get_Choice:
        char choice;
        
        ser_inf(Get_Choice, "%c", &choice);
     1a2:	2003      	movs	r0, #3
     1a4:	4934      	ldr	r1, [pc, #208]	; (278 <root+0x10c>)
     1a6:	aa03      	add	r2, sp, #12
     1a8:	f001 fa60 	bl	166c <ser_inf>
        
        if (choice == 'A' || choice == 'a'){
     1ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
     1b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
     1b4:	2b41      	cmp	r3, #65	; 0x41
     1b6:	d14a      	bne.n	24e <root+0xe2>
            proceed Adjust_Intervals;
     1b8:	2004      	movs	r0, #4
        } else if (choice == 'S' || choice == 's') {
            proceed Stop;
        } else if (choice == 'V' || choice == 'v') {
            proceed View_Settings;
        } else if (choice == 'M' || choice == 'm') {
            proceed Monitor;
     1ba:	f000 fe9d 	bl	ef8 <proceed>
        }

        proceed Show_Menu;
     1be:	2002      	movs	r0, #2
     1c0:	f000 fe9a 	bl	ef8 <proceed>

    state Adjust_Intervals:
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	2000      	movs	r0, #0
     1c6:	492d      	ldr	r1, [pc, #180]	; (27c <root+0x110>)
     1c8:	f001 fa26 	bl	1618 <ser_outf>

    state Set_Intervals:
        char settings[SETTINGS_LENGTH];

        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	2232      	movs	r2, #50	; 0x32
     1ce:	a903      	add	r1, sp, #12
     1d0:	2005      	movs	r0, #5
     1d2:	f001 f9e5 	bl	15a0 <ser_in>

        processSettingsInput(settings);
     1d6:	a803      	add	r0, sp, #12
     1d8:	f7ff ff9a 	bl	110 <processSettingsInput>

        proceed Show_Menu;
     1dc:	2002      	movs	r0, #2
     1de:	f000 fe8b 	bl	ef8 <proceed>

    state View_Settings:
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
            cycles[0].onTime,
            cycles[0].offTime,
     1e2:	4a27      	ldr	r2, [pc, #156]	; (280 <root+0x114>)
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	2006      	movs	r0, #6
     1e6:	8a93      	ldrh	r3, [r2, #20]
     1e8:	4926      	ldr	r1, [pc, #152]	; (284 <root+0x118>)
     1ea:	9301      	str	r3, [sp, #4]
     1ec:	8a53      	ldrh	r3, [r2, #18]
     1ee:	9300      	str	r3, [sp, #0]
     1f0:	8913      	ldrh	r3, [r2, #8]
     1f2:	88d2      	ldrh	r2, [r2, #6]
     1f4:	f001 fa10 	bl	1618 <ser_outf>
            cycles[1].onTime,
            cycles[1].offTime
        );

        proceed Show_Menu;
     1f8:	2002      	movs	r0, #2
     1fa:	f000 fe7d 	bl	ef8 <proceed>

    state Monitor:
        ser_outf(Monitor, "Monitor (press S to stop): ");
     1fe:	2007      	movs	r0, #7
     200:	4921      	ldr	r1, [pc, #132]	; (288 <root+0x11c>)
     202:	f001 fa09 	bl	1618 <ser_outf>
        displayCycle = YES;
     206:	2201      	movs	r2, #1
     208:	4b20      	ldr	r3, [pc, #128]	; (28c <root+0x120>)
     20a:	701a      	strb	r2, [r3, #0]

    state Await_Stop:
        char ch;
        ser_inf(Await_Stop, "%c", ch);
     20c:	2200      	movs	r2, #0
     20e:	2008      	movs	r0, #8
     210:	4919      	ldr	r1, [pc, #100]	; (278 <root+0x10c>)
     212:	f001 fa2b 	bl	166c <ser_inf>
        if(ch == 'S' || ch == 's'){
            displayCycle = NO;
            proceed Show_Menu;
        }
        
        proceed Monitor;
     216:	2007      	movs	r0, #7
     218:	f000 fe6e 	bl	ef8 <proceed>
     21c:	2380      	movs	r3, #128	; 0x80
     21e:	481c      	ldr	r0, [pc, #112]	; (290 <root+0x124>)
     220:	6003      	str	r3, [r0, #0]

    state Stop:
        leds(1, 0);
     222:	4b1c      	ldr	r3, [pc, #112]	; (294 <root+0x128>)
     224:	781a      	ldrb	r2, [r3, #0]
     226:	7819      	ldrb	r1, [r3, #0]
     228:	0912      	lsrs	r2, r2, #4
     22a:	f002 020d 	and.w	r2, r2, #13
     22e:	f362 1107 	bfi	r1, r2, #4, #4
     232:	2240      	movs	r2, #64	; 0x40
     234:	7019      	strb	r1, [r3, #0]
     236:	6002      	str	r2, [r0, #0]
        leds(0, 0);
     238:	781a      	ldrb	r2, [r3, #0]
     23a:	7819      	ldrb	r1, [r3, #0]
     23c:	0912      	lsrs	r2, r2, #4
     23e:	f002 020e 	and.w	r2, r2, #14
     242:	f362 1107 	bfi	r1, r2, #4, #4
     246:	7019      	strb	r1, [r3, #0]
     248:	b011      	add	sp, #68	; 0x44
     24a:	f85d fb04 	ldr.w	pc, [sp], #4
        } else if (choice == 'S' || choice == 's') {
     24e:	2b53      	cmp	r3, #83	; 0x53
     250:	d101      	bne.n	256 <root+0xea>
            proceed Stop;
     252:	2009      	movs	r0, #9
     254:	e7b1      	b.n	1ba <root+0x4e>
        } else if (choice == 'V' || choice == 'v') {
     256:	2b56      	cmp	r3, #86	; 0x56
     258:	d101      	bne.n	25e <root+0xf2>
            proceed View_Settings;
     25a:	2006      	movs	r0, #6
     25c:	e7ad      	b.n	1ba <root+0x4e>
        } else if (choice == 'M' || choice == 'm') {
     25e:	2b4d      	cmp	r3, #77	; 0x4d
     260:	d1ad      	bne.n	1be <root+0x52>
            proceed Monitor;
     262:	2007      	movs	r0, #7
     264:	e7a9      	b.n	1ba <root+0x4e>
     266:	f000 fdd9 	bl	e1c <__pi_badstate>
     26a:	e7ed      	b.n	248 <root+0xdc>
     26c:	00002a50 	andeq	r2, r0, r0, asr sl
     270:	20000001 	andcs	r0, r0, r1
     274:	00002a62 	andeq	r2, r0, r2, ror #20
     278:	00002af3 	strdeq	r2, [r0], -r3
     27c:	00002af6 	strdeq	r2, [r0], -r6
     280:	2000006c 	andcs	r0, r0, ip, rrx
     284:	00002b29 	andeq	r2, r0, r9, lsr #22
     288:	00002b64 	andeq	r2, r0, r4, ror #22
     28c:	20000000 	andcs	r0, r0, r0
     290:	400220a0 	andmi	r2, r2, r0, lsr #1
     294:	2000009c 	mulcs	r0, ip, r0

00000298 <devinit_uart>:
			/* No return */
			return 0;
	}
}

static void devinit_uart (int devnum) {
     298:	4601      	mov	r1, r0

	adddevfunc (ioreq_uart_a, devnum);
     29a:	4801      	ldr	r0, [pc, #4]	; (2a0 <devinit_uart+0x8>)
     29c:	f000 bebc 	b.w	1018 <adddevfunc>
     2a0:	000005e5 	andeq	r0, r0, r5, ror #11

000002a4 <udelay>:
void udelay (volatile word n) {
     2a4:	b082      	sub	sp, #8
     2a6:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     2aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2ae:	b29b      	uxth	r3, r3
     2b0:	b90b      	cbnz	r3, 2b6 <udelay+0x12>
}
     2b2:	b002      	add	sp, #8
     2b4:	4770      	bx	lr
		_gdelay (__USEC_DELAY);
     2b6:	2304      	movs	r3, #4
	while (n--);
     2b8:	461a      	mov	r2, r3
     2ba:	3b01      	subs	r3, #1
     2bc:	b29b      	uxth	r3, r3
     2be:	2a00      	cmp	r2, #0
     2c0:	d1fa      	bne.n	2b8 <udelay+0x14>
		n--;
     2c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2c6:	3b01      	subs	r3, #1
     2c8:	b29b      	uxth	r3, r3
     2ca:	f8ad 3006 	strh.w	r3, [sp, #6]
     2ce:	e7ec      	b.n	2aa <udelay+0x6>

000002d0 <mdelay>:
void mdelay (volatile word n) {
     2d0:	b507      	push	{r0, r1, r2, lr}
     2d2:	f8ad 0006 	strh.w	r0, [sp, #6]
	while (n) {
     2d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2da:	b29b      	uxth	r3, r3
     2dc:	b913      	cbnz	r3, 2e4 <mdelay+0x14>
}
     2de:	b003      	add	sp, #12
     2e0:	f85d fb04 	ldr.w	pc, [sp], #4
		udelay (999);
     2e4:	f240 30e7 	movw	r0, #999	; 0x3e7
     2e8:	f7ff ffdc 	bl	2a4 <udelay>
		n--;
     2ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     2f0:	3b01      	subs	r3, #1
     2f2:	b29b      	uxth	r3, r3
     2f4:	f8ad 3006 	strh.w	r3, [sp, #6]
     2f8:	e7ed      	b.n	2d6 <mdelay+0x6>
	...

000002fc <__pi_ondomain>:
void __pi_ondomain (lword d) {
     2fc:	b538      	push	{r3, r4, r5, lr}
	if (d & PRCM_DOMAIN_RFCORE) {
     2fe:	07c3      	lsls	r3, r0, #31
void __pi_ondomain (lword d) {
     300:	4604      	mov	r4, r0
	if (d & PRCM_DOMAIN_RFCORE) {
     302:	d505      	bpl.n	310 <__pi_ondomain+0x14>
		if (__pi_systat.effpdm > 1)
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <__pi_ondomain+0x34>)
     306:	78da      	ldrb	r2, [r3, #3]
     308:	2a01      	cmp	r2, #1
			__pi_systat.effpdm = 1;
     30a:	bf84      	itt	hi
     30c:	2201      	movhi	r2, #1
     30e:	70da      	strbhi	r2, [r3, #3]
	PRCMPowerDomainOn (d);
     310:	4d08      	ldr	r5, [pc, #32]	; (334 <__pi_ondomain+0x38>)
     312:	4620      	mov	r0, r4
     314:	682b      	ldr	r3, [r5, #0]
     316:	695b      	ldr	r3, [r3, #20]
     318:	4798      	blx	r3
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31a:	682b      	ldr	r3, [r5, #0]
     31c:	4620      	mov	r0, r4
     31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     320:	4798      	blx	r3
     322:	2801      	cmp	r0, #1
     324:	d1f9      	bne.n	31a <__pi_ondomain+0x1e>
	__pi_systat.ondmns |= d;
     326:	4b02      	ldr	r3, [pc, #8]	; (330 <__pi_ondomain+0x34>)
     328:	6858      	ldr	r0, [r3, #4]
     32a:	4304      	orrs	r4, r0
     32c:	605c      	str	r4, [r3, #4]
}
     32e:	bd38      	pop	{r3, r4, r5, pc}
     330:	2000009c 	mulcs	r0, ip, r0
     334:	100001b8 			; <UNDEFINED> instruction: 0x100001b8

00000338 <__pi_syserror>:
void __pi_syserror (word ec, const char *m) {
     338:	460a      	mov	r2, r1
     33a:	b580      	push	{r7, lr}
	diag ("SYSERR: %x, %s", ec, m);
     33c:	4601      	mov	r1, r0
     33e:	480f      	ldr	r0, [pc, #60]	; (37c <__pi_syserror+0x44>)
     340:	f000 ffb8 	bl	12b4 <diag>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     344:	b672      	cpsid	i
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     346:	2540      	movs	r5, #64	; 0x40
     348:	462f      	mov	r7, r5
     34a:	4e0d      	ldr	r6, [pc, #52]	; (380 <__pi_syserror+0x48>)
     34c:	2480      	movs	r4, #128	; 0x80
		all_leds_blink;
     34e:	490d      	ldr	r1, [pc, #52]	; (384 <__pi_syserror+0x4c>)
     350:	6037      	str	r7, [r6, #0]
     352:	6034      	str	r4, [r6, #0]
     354:	780b      	ldrb	r3, [r1, #0]
     356:	780b      	ldrb	r3, [r1, #0]
     358:	20c8      	movs	r0, #200	; 0xc8
     35a:	f36f 1307 	bfc	r3, #4, #4
     35e:	700b      	strb	r3, [r1, #0]
     360:	f7ff ffb6 	bl	2d0 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	4b08      	ldr	r3, [pc, #32]	; (388 <__pi_syserror+0x50>)
     366:	20c8      	movs	r0, #200	; 0xc8
     368:	601d      	str	r5, [r3, #0]
     36a:	601c      	str	r4, [r3, #0]
     36c:	780b      	ldrb	r3, [r1, #0]
     36e:	780b      	ldrb	r3, [r1, #0]
     370:	f36f 1307 	bfc	r3, #4, #4
     374:	700b      	strb	r3, [r1, #0]
     376:	f7ff ffab 	bl	2d0 <mdelay>
	while (1) {
     37a:	e7e7      	b.n	34c <__pi_syserror+0x14>
     37c:	00002b80 	andeq	r2, r0, r0, lsl #23
     380:	40022090 	mulmi	r2, r0, r0
     384:	2000009c 	mulcs	r0, ip, r0
     388:	400220a0 	andmi	r2, r2, r0, lsr #1

0000038c <tci_run_delay_timer>:
void tci_run_delay_timer () {
     38c:	b510      	push	{r4, lr}
	setdel = __pi_mintk - __pi_old;
     38e:	4b0a      	ldr	r3, [pc, #40]	; (3b8 <tci_run_delay_timer+0x2c>)
     390:	881c      	ldrh	r4, [r3, #0]
     392:	4b0a      	ldr	r3, [pc, #40]	; (3bc <tci_run_delay_timer+0x30>)
     394:	8818      	ldrh	r0, [r3, #0]
     396:	4b0a      	ldr	r3, [pc, #40]	; (3c0 <tci_run_delay_timer+0x34>)
     398:	1b00      	subs	r0, r0, r4
     39a:	b284      	uxth	r4, r0
     39c:	801c      	strh	r4, [r3, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     39e:	f001 fd8b 	bl	1eb8 <NOROM_AONRTCCurrent64BitValueGet>
	sti_tim;
     3a2:	2201      	movs	r2, #1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a4:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3a6:	4b07      	ldr	r3, [pc, #28]	; (3c4 <tci_run_delay_timer+0x38>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     3ac:	eb00 1084 	add.w	r0, r0, r4, lsl #6
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	6018      	str	r0, [r3, #0]
	sti_tim;
     3b2:	4b05      	ldr	r3, [pc, #20]	; (3c8 <tci_run_delay_timer+0x3c>)
     3b4:	601a      	str	r2, [r3, #0]
}
     3b6:	bd10      	pop	{r4, pc}
     3b8:	2000009a 	mulcs	r0, sl, r0
     3bc:	20000098 	mulcs	r0, r8, r0
     3c0:	20000016 	andcs	r0, r0, r6, lsl r0
     3c4:	40092018 	andmi	r2, r9, r8, lsl r0
     3c8:	43240280 			; <UNDEFINED> instruction: 0x43240280

000003cc <tci_run_auxiliary_timer>:
	cli_aux;
     3cc:	2300      	movs	r3, #0
void tci_run_auxiliary_timer () {
     3ce:	b510      	push	{r4, lr}
	cli_aux;
     3d0:	4c06      	ldr	r4, [pc, #24]	; (3ec <tci_run_auxiliary_timer+0x20>)
     3d2:	6023      	str	r3, [r4, #0]
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	f001 fd70 	bl	1eb8 <NOROM_AONRTCCurrent64BitValueGet>
     3d8:	0c00      	lsrs	r0, r0, #16
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     3da:	4b05      	ldr	r3, [pc, #20]	; (3f0 <tci_run_auxiliary_timer+0x24>)
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     3e0:	3040      	adds	r0, #64	; 0x40
	HWREG (AON_RTC_BASE + AON_RTC_O_CH2CMP) = settav (1);
     3e2:	6018      	str	r0, [r3, #0]
	sti_aux;
     3e4:	2301      	movs	r3, #1
     3e6:	6023      	str	r3, [r4, #0]
}
     3e8:	bd10      	pop	{r4, pc}
     3ea:	bf00      	nop
     3ec:	432402c0 			; <UNDEFINED> instruction: 0x432402c0
     3f0:	40092020 	andmi	r2, r9, r0, lsr #32

000003f4 <AONRTCIntHandler>:
void AONRTCIntHandler () {
     3f4:	b510      	push	{r4, lr}
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f6:	4b3b      	ldr	r3, [pc, #236]	; (4e4 <AONRTCIntHandler+0xf0>)
     3f8:	6818      	ldr	r0, [r3, #0]
     3fa:	f000 1201 	and.w	r2, r0, #65537	; 0x10001
	if (events & AON_RTC_EVFLAGS_CH2) {
     3fe:	03c4      	lsls	r4, r0, #15
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	601a      	str	r2, [r3, #0]
	if (events & AON_RTC_EVFLAGS_CH2) {
     402:	d542      	bpl.n	48a <AONRTCIntHandler+0x96>
		if (__pi_utims [0] == 0)
     404:	4b38      	ldr	r3, [pc, #224]	; (4e8 <AONRTCIntHandler+0xf4>)
     406:	6819      	ldr	r1, [r3, #0]
     408:	2900      	cmp	r1, #0
     40a:	d053      	beq.n	4b4 <AONRTCIntHandler+0xc0>
		if (*(__pi_utims [0])) {
     40c:	880a      	ldrh	r2, [r1, #0]
     40e:	2a00      	cmp	r2, #0
     410:	d04e      	beq.n	4b0 <AONRTCIntHandler+0xbc>
			(*(__pi_utims [0]))--;
     412:	3a01      	subs	r2, #1
     414:	800a      	strh	r2, [r1, #0]
			aux_timer_inactive = 0;
     416:	2200      	movs	r2, #0
		if (__pi_utims [1] == 0)
     418:	685c      	ldr	r4, [r3, #4]
     41a:	b194      	cbz	r4, 442 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [1])) {
     41c:	8821      	ldrh	r1, [r4, #0]
     41e:	b111      	cbz	r1, 426 <AONRTCIntHandler+0x32>
			aux_timer_inactive = 0;
     420:	2200      	movs	r2, #0
			(*(__pi_utims [1]))--;
     422:	3901      	subs	r1, #1
     424:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [2] == 0)
     426:	689c      	ldr	r4, [r3, #8]
     428:	b15c      	cbz	r4, 442 <AONRTCIntHandler+0x4e>
		if (*(__pi_utims [2])) {
     42a:	8821      	ldrh	r1, [r4, #0]
     42c:	b111      	cbz	r1, 434 <AONRTCIntHandler+0x40>
			aux_timer_inactive = 0;
     42e:	2200      	movs	r2, #0
			(*(__pi_utims [2]))--;
     430:	3901      	subs	r1, #1
     432:	8021      	strh	r1, [r4, #0]
		if (__pi_utims [3] != 0) {
     434:	68d9      	ldr	r1, [r3, #12]
     436:	b121      	cbz	r1, 442 <AONRTCIntHandler+0x4e>
			if (*(__pi_utims [3])) {
     438:	880b      	ldrh	r3, [r1, #0]
     43a:	b113      	cbz	r3, 442 <AONRTCIntHandler+0x4e>
				aux_timer_inactive = 0;
     43c:	2200      	movs	r2, #0
				(*(__pi_utims [3]))--;
     43e:	3b01      	subs	r3, #1
     440:	800b      	strh	r3, [r1, #0]
/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

	if (__pi_systat.ledsts) {
     442:	4b2a      	ldr	r3, [pc, #168]	; (4ec <AONRTCIntHandler+0xf8>)
     444:	7819      	ldrb	r1, [r3, #0]
     446:	0909      	lsrs	r1, r1, #4
     448:	d047      	beq.n	4da <AONRTCIntHandler+0xe6>
		// Some leds are supposed to blink
		if (__pi_systat.ledblc++ == 0) {
     44a:	7859      	ldrb	r1, [r3, #1]
     44c:	1c4a      	adds	r2, r1, #1
     44e:	b2d2      	uxtb	r2, r2
     450:	705a      	strb	r2, [r3, #1]
     452:	b9d1      	cbnz	r1, 48a <AONRTCIntHandler+0x96>
			if (__pi_systat.ledblk) {
     454:	781a      	ldrb	r2, [r3, #0]
     456:	f012 0f08 	tst.w	r2, #8
				if (__pi_systat.ledsts & 0x1)
     45a:	781a      	ldrb	r2, [r3, #0]
			if (__pi_systat.ledblk) {
     45c:	d02c      	beq.n	4b8 <AONRTCIntHandler+0xc4>
				if (__pi_systat.ledsts & 0x1)
     45e:	06d1      	lsls	r1, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	bf42      	ittt	mi
     462:	2140      	movmi	r1, #64	; 0x40
     464:	4a22      	ldrmi	r2, [pc, #136]	; (4f0 <AONRTCIntHandler+0xfc>)
     466:	6011      	strmi	r1, [r2, #0]
					LED0_ON;
				if (__pi_systat.ledsts & 0x2)
     468:	781a      	ldrb	r2, [r3, #0]
     46a:	0692      	lsls	r2, r2, #26
     46c:	bf42      	ittt	mi
     46e:	2180      	movmi	r1, #128	; 0x80
     470:	4a1f      	ldrmi	r2, [pc, #124]	; (4f0 <AONRTCIntHandler+0xfc>)
     472:	6011      	strmi	r1, [r2, #0]
					LED1_ON;
				if (__pi_systat.ledsts & 0x4)
     474:	781a      	ldrb	r2, [r3, #0]
					LED2_ON;
				if (__pi_systat.ledsts & 0x8)
     476:	781a      	ldrb	r2, [r3, #0]
					LED3_ON;
				__pi_systat.ledblk = 0;
     478:	781a      	ldrb	r2, [r3, #0]
     47a:	f36f 02c3 	bfc	r2, #3, #1
					LED1_OFF;
				if (__pi_systat.ledsts & 0x4)
					LED2_OFF;
				if (__pi_systat.ledsts & 0x8)
					LED3_OFF;
				__pi_systat.ledblk = 1;
     47e:	701a      	strb	r2, [r3, #0]
			}
			if (__pi_systat.fstblk)
     480:	781a      	ldrb	r2, [r3, #0]
     482:	0752      	lsls	r2, r2, #29
     484:	d501      	bpl.n	48a <AONRTCIntHandler+0x96>
				__pi_systat.ledblc = 200;
     486:	22c8      	movs	r2, #200	; 0xc8
     488:	705a      	strb	r2, [r3, #1]
	if (events & AON_RTC_EVFLAGS_CH0) {
     48a:	07c3      	lsls	r3, r0, #31
     48c:	d50f      	bpl.n	4ae <AONRTCIntHandler+0xba>
		cli_tim;
     48e:	2100      	movs	r1, #0
     490:	4b18      	ldr	r3, [pc, #96]	; (4f4 <AONRTCIntHandler+0x100>)
		__pi_new += setdel;
     492:	4a19      	ldr	r2, [pc, #100]	; (4f8 <AONRTCIntHandler+0x104>)
     494:	4819      	ldr	r0, [pc, #100]	; (4fc <AONRTCIntHandler+0x108>)
		cli_tim;
     496:	6019      	str	r1, [r3, #0]
		__pi_new += setdel;
     498:	8803      	ldrh	r3, [r0, #0]
     49a:	8814      	ldrh	r4, [r2, #0]
		setdel = 0;
     49c:	8011      	strh	r1, [r2, #0]
		__pi_new += setdel;
     49e:	4423      	add	r3, r4
		RISE_N_SHINE;
     4a0:	4a12      	ldr	r2, [pc, #72]	; (4ec <AONRTCIntHandler+0xf8>)
		__pi_new += setdel;
     4a2:	b29b      	uxth	r3, r3
     4a4:	8003      	strh	r3, [r0, #0]
		RISE_N_SHINE;
     4a6:	7813      	ldrb	r3, [r2, #0]
     4a8:	f043 0302 	orr.w	r3, r3, #2
     4ac:	7013      	strb	r3, [r2, #0]
}
     4ae:	bd10      	pop	{r4, pc}
		aux_timer_inactive = 1;
     4b0:	2201      	movs	r2, #1
     4b2:	e7b1      	b.n	418 <AONRTCIntHandler+0x24>
     4b4:	2201      	movs	r2, #1
     4b6:	e7c4      	b.n	442 <AONRTCIntHandler+0x4e>
				if (__pi_systat.ledsts & 0x1)
     4b8:	06d4      	lsls	r4, r2, #27
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4ba:	bf42      	ittt	mi
     4bc:	2140      	movmi	r1, #64	; 0x40
     4be:	4a10      	ldrmi	r2, [pc, #64]	; (500 <AONRTCIntHandler+0x10c>)
     4c0:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x2)
     4c2:	781a      	ldrb	r2, [r3, #0]
     4c4:	0691      	lsls	r1, r2, #26
     4c6:	bf42      	ittt	mi
     4c8:	2180      	movmi	r1, #128	; 0x80
     4ca:	4a0d      	ldrmi	r2, [pc, #52]	; (500 <AONRTCIntHandler+0x10c>)
     4cc:	6011      	strmi	r1, [r2, #0]
				if (__pi_systat.ledsts & 0x4)
     4ce:	781a      	ldrb	r2, [r3, #0]
				if (__pi_systat.ledsts & 0x8)
     4d0:	781a      	ldrb	r2, [r3, #0]
				__pi_systat.ledblk = 1;
     4d2:	781a      	ldrb	r2, [r3, #0]
     4d4:	f042 0208 	orr.w	r2, r2, #8
     4d8:	e7d1      	b.n	47e <AONRTCIntHandler+0x8a>
		if (aux_timer_inactive) {
     4da:	2a00      	cmp	r2, #0
     4dc:	d0d5      	beq.n	48a <AONRTCIntHandler+0x96>
			cli_aux;
     4de:	4b09      	ldr	r3, [pc, #36]	; (504 <AONRTCIntHandler+0x110>)
     4e0:	6019      	str	r1, [r3, #0]
     4e2:	e7d2      	b.n	48a <AONRTCIntHandler+0x96>
     4e4:	40092004 	andmi	r2, r9, r4
     4e8:	200000a8 	andcs	r0, r0, r8, lsr #1
     4ec:	2000009c 	mulcs	r0, ip, r0
     4f0:	40022090 	mulmi	r2, r0, r0
     4f4:	43240280 			; <UNDEFINED> instruction: 0x43240280
     4f8:	20000016 	andcs	r0, r0, r6, lsl r0
     4fc:	200000a4 	andcs	r0, r0, r4, lsr #1
     500:	400220a0 	andmi	r2, r2, r0, lsr #1
     504:	432402c0 			; <UNDEFINED> instruction: 0x432402c0

00000508 <tci_update_delay_ticks>:
word tci_update_delay_ticks (Boolean force) {
     508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cli_tim;
     50a:	2600      	movs	r6, #0
     50c:	4b0e      	ldr	r3, [pc, #56]	; (548 <tci_update_delay_ticks+0x40>)
	if (setdel) {
     50e:	4f0f      	ldr	r7, [pc, #60]	; (54c <tci_update_delay_ticks+0x44>)
	cli_tim;
     510:	601e      	str	r6, [r3, #0]
	if (setdel) {
     512:	883d      	ldrh	r5, [r7, #0]
     514:	b19d      	cbz	r5, 53e <tci_update_delay_ticks+0x36>
		if (force) {
     516:	b1a0      	cbz	r0, 542 <tci_update_delay_ticks+0x3a>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <tci_update_delay_ticks+0x48>)
     51a:	681c      	ldr	r4, [r3, #0]
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	f001 fccc 	bl	1eb8 <NOROM_AONRTCCurrent64BitValueGet>
     520:	0d80      	lsrs	r0, r0, #22
     522:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     526:	f3c4 148f 	ubfx	r4, r4, #6, #16
				AON_RTC_O_CH0CMP)) - gettav ());
     52a:	b280      	uxth	r0, r0
     52c:	1a24      	subs	r4, r4, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     52e:	1b2c      	subs	r4, r5, r4
	return NO;
     530:	4635      	mov	r5, r6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     532:	4b08      	ldr	r3, [pc, #32]	; (554 <tci_update_delay_ticks+0x4c>)
			setdel = 0;
     534:	803e      	strh	r6, [r7, #0]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     536:	881a      	ldrh	r2, [r3, #0]
     538:	4414      	add	r4, r2
     53a:	b2a4      	uxth	r4, r4
     53c:	801c      	strh	r4, [r3, #0]
}
     53e:	4628      	mov	r0, r5
     540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sti_tim;
     542:	2501      	movs	r5, #1
     544:	601d      	str	r5, [r3, #0]
		return YES;
     546:	e7fa      	b.n	53e <tci_update_delay_ticks+0x36>
     548:	43240280 			; <UNDEFINED> instruction: 0x43240280
     54c:	20000016 	andcs	r0, r0, r6, lsl r0
     550:	40092018 	andmi	r2, r9, r8, lsl r0
     554:	200000a4 	andcs	r0, r0, r4, lsr #1

00000558 <__pi_uart_setrate>:
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	b570      	push	{r4, r5, r6, lr}
	UARTDisable (UART0_BASE);
     55a:	4e0f      	ldr	r6, [pc, #60]	; (598 <__pi_uart_setrate+0x40>)
     55c:	4d0f      	ldr	r5, [pc, #60]	; (59c <__pi_uart_setrate+0x44>)
     55e:	6833      	ldr	r3, [r6, #0]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	4604      	mov	r4, r0
	UARTDisable (UART0_BASE);
     562:	68db      	ldr	r3, [r3, #12]
     564:	4628      	mov	r0, r5
     566:	4798      	blx	r3
	UARTConfigSetExpClk (UART0_BASE,
     568:	2264      	movs	r2, #100	; 0x64
     56a:	6833      	ldr	r3, [r6, #0]
     56c:	4628      	mov	r0, r5
     56e:	4362      	muls	r2, r4
     570:	685e      	ldr	r6, [r3, #4]
     572:	490b      	ldr	r1, [pc, #44]	; (5a0 <__pi_uart_setrate+0x48>)
     574:	2360      	movs	r3, #96	; 0x60
     576:	47b0      	blx	r6
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	4a0a      	ldr	r2, [pc, #40]	; (5a4 <__pi_uart_setrate+0x4c>)
}
     57a:	2001      	movs	r0, #1
     57c:	6813      	ldr	r3, [r2, #0]
     57e:	f043 0310 	orr.w	r3, r3, #16
     582:	6013      	str	r3, [r2, #0]

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	6853      	ldr	r3, [r2, #4]
     586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
     58a:	f043 0301 	orr.w	r3, r3, #1
     58e:	6053      	str	r3, [r2, #4]
	urates [0] = rate;
     590:	4b05      	ldr	r3, [pc, #20]	; (5a8 <__pi_uart_setrate+0x50>)
     592:	801c      	strh	r4, [r3, #0]
}
     594:	bd70      	pop	{r4, r5, r6, pc}
     596:	bf00      	nop
     598:	100001d0 	ldrdne	r0, [r0], -r0	; <UNPREDICTABLE>
     59c:	40001000 	andmi	r1, r0, r0
     5a0:	02dc6c00 	sbcseq	r6, ip, #0, 24
     5a4:	4000102c 	andmi	r1, r0, ip, lsr #32
     5a8:	20000018 	andcs	r0, r0, r8, lsl r0

000005ac <reinit_uart>:
    ASSERT(UARTBaseValid(ui32Base));

    //
    // Enable the FIFO.
    //
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	4a08      	ldr	r2, [pc, #32]	; (5d0 <reinit_uart+0x24>)
	__pi_uart_setrate (urates [0], __pi_uart);
     5ae:	4909      	ldr	r1, [pc, #36]	; (5d4 <reinit_uart+0x28>)
     5b0:	6813      	ldr	r3, [r2, #0]
     5b2:	f043 0310 	orr.w	r3, r3, #16
     5b6:	6013      	str	r3, [r2, #0]
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	2212      	movs	r2, #18
     5ba:	4b07      	ldr	r3, [pc, #28]	; (5d8 <reinit_uart+0x2c>)
     5bc:	601a      	str	r2, [r3, #0]
    //
    // Check the arguments.
    //
    ASSERT( UARTBaseValid( ui32Base ));

    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5be:	4a07      	ldr	r2, [pc, #28]	; (5dc <reinit_uart+0x30>)
     5c0:	6813      	ldr	r3, [r2, #0]
     5c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
     5c6:	6013      	str	r3, [r2, #0]
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <reinit_uart+0x34>)
     5ca:	8818      	ldrh	r0, [r3, #0]
     5cc:	f7ff bfc4 	b.w	558 <__pi_uart_setrate>
     5d0:	4000102c 	andmi	r1, r0, ip, lsr #32
     5d4:	20000088 	andcs	r0, r0, r8, lsl #1
     5d8:	40001034 	andmi	r1, r0, r4, lsr r0
     5dc:	40001030 	andmi	r1, r0, r0, lsr r0
     5e0:	20000018 	andcs	r0, r0, r8, lsl r0

000005e4 <ioreq_uart_a>:
	switch (operation) {
     5e4:	3001      	adds	r0, #1
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     5ea:	460d      	mov	r5, r1
     5ec:	4614      	mov	r4, r2
     5ee:	2803      	cmp	r0, #3
     5f0:	d86e      	bhi.n	6d0 <ioreq_uart_a+0xec>
     5f2:	e8df f000 	tbb	[pc, r0]
     5f6:	5a471253 	bpl	11c4f4a <__ccfg+0x11a4fa2>
				*buf++ = uart_a_read;
     5fa:	f8d9 3000 	ldr.w	r3, [r9]
				len--;
     5fe:	3e01      	subs	r6, #1
				*buf++ = uart_a_read;
     600:	f805 3b01 	strb.w	r3, [r5], #1
			while (len && uart_a_char_available) {
     604:	b11e      	cbz	r6, 60e <ioreq_uart_a+0x2a>
     606:	f8d8 3000 	ldr.w	r3, [r8]
     60a:	06d8      	lsls	r0, r3, #27
     60c:	d5f5      	bpl.n	5fa <ioreq_uart_a+0x16>
			if (len != operation) {
     60e:	42a6      	cmp	r6, r4
     610:	d00a      	beq.n	628 <ioreq_uart_a+0x44>
				return operation - len;
     612:	1ba4      	subs	r4, r4, r6
}
     614:	4620      	mov	r0, r4
     616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				*buf++ = uart_a_read;
     61a:	4616      	mov	r6, r2
			uart_a_disable_int;
     61c:	4f2e      	ldr	r7, [pc, #184]	; (6d8 <ioreq_uart_a+0xf4>)
			if (uart_a_char_available) {
     61e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6ec <ioreq_uart_a+0x108>
				*buf++ = uart_a_read;
     622:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 6f0 <ioreq_uart_a+0x10c>
     626:	e7ed      	b.n	604 <ioreq_uart_a+0x20>
			uart_a_disable_int;
     628:	683b      	ldr	r3, [r7, #0]
     62a:	2015      	movs	r0, #21
     62c:	695b      	ldr	r3, [r3, #20]
     62e:	4798      	blx	r3
			if (uart_a_char_available) {
     630:	f8d8 3000 	ldr.w	r3, [r8]
     634:	06d9      	lsls	r1, r3, #27
     636:	d404      	bmi.n	642 <ioreq_uart_a+0x5e>
				uart_a_enable_int;
     638:	683b      	ldr	r3, [r7, #0]
     63a:	2015      	movs	r0, #21
     63c:	691b      	ldr	r3, [r3, #16]
     63e:	4798      	blx	r3
				goto Redo_rx;
     640:	e7e0      	b.n	604 <ioreq_uart_a+0x20>
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     642:	4a26      	ldr	r2, [pc, #152]	; (6dc <ioreq_uart_a+0xf8>)
     644:	7993      	ldrb	r3, [r2, #6]
     646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			return -2;
     64a:	f06f 0401 	mvn.w	r4, #1
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     64e:	7193      	strb	r3, [r2, #6]
			return -2;
     650:	e7e0      	b.n	614 <ioreq_uart_a+0x30>
				uart_a_write (*buf);
     652:	f815 3b01 	ldrb.w	r3, [r5], #1
				len--;
     656:	3e01      	subs	r6, #1
				uart_a_write (*buf);
     658:	f8c9 3000 	str.w	r3, [r9]
			while (len && uart_a_room_in_tx) {
     65c:	b11e      	cbz	r6, 666 <ioreq_uart_a+0x82>
     65e:	f8d8 3000 	ldr.w	r3, [r8]
     662:	069a      	lsls	r2, r3, #26
     664:	d5f5      	bpl.n	652 <ioreq_uart_a+0x6e>
			if (len != operation) {
     666:	42a6      	cmp	r6, r4
     668:	d1d3      	bne.n	612 <ioreq_uart_a+0x2e>
			uart_a_disable_int;
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	2015      	movs	r0, #21
     66e:	695b      	ldr	r3, [r3, #20]
     670:	4798      	blx	r3
			if (uart_a_room_in_tx) {
     672:	f8d8 3000 	ldr.w	r3, [r8]
     676:	069b      	lsls	r3, r3, #26
     678:	d40b      	bmi.n	692 <ioreq_uart_a+0xae>
				uart_a_enable_int;
     67a:	683b      	ldr	r3, [r7, #0]
     67c:	2015      	movs	r0, #21
     67e:	691b      	ldr	r3, [r3, #16]
     680:	4798      	blx	r3
				goto Redo_tx;
     682:	e7eb      	b.n	65c <ioreq_uart_a+0x78>
				*buf++ = uart_a_read;
     684:	4616      	mov	r6, r2
			uart_a_disable_int;
     686:	4f14      	ldr	r7, [pc, #80]	; (6d8 <ioreq_uart_a+0xf4>)
			if (uart_a_room_in_tx) {
     688:	f8df 8060 	ldr.w	r8, [pc, #96]	; 6ec <ioreq_uart_a+0x108>
				uart_a_write (*buf);
     68c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 6f0 <ioreq_uart_a+0x10c>
     690:	e7e4      	b.n	65c <ioreq_uart_a+0x78>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     692:	4a12      	ldr	r2, [pc, #72]	; (6dc <ioreq_uart_a+0xf8>)
     694:	7993      	ldrb	r3, [r2, #6]
     696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     69a:	e7d6      	b.n	64a <ioreq_uart_a+0x66>
			uart_a_enable_int;
     69c:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <ioreq_uart_a+0xf4>)
     69e:	2015      	movs	r0, #21
     6a0:	681b      	ldr	r3, [r3, #0]
			return 0;
     6a2:	2400      	movs	r4, #0
			uart_a_enable_int;
     6a4:	691b      	ldr	r3, [r3, #16]
     6a6:	4798      	blx	r3
			return 0;
     6a8:	e7b4      	b.n	614 <ioreq_uart_a+0x30>
			if (len == UART_CNTRL_SETRATE) {
     6aa:	2a01      	cmp	r2, #1
     6ac:	d109      	bne.n	6c2 <ioreq_uart_a+0xde>
				if (__pi_uart_setrate (*((word*)buf),
     6ae:	490b      	ldr	r1, [pc, #44]	; (6dc <ioreq_uart_a+0xf8>)
     6b0:	8828      	ldrh	r0, [r5, #0]
     6b2:	f7ff ff51 	bl	558 <__pi_uart_setrate>
     6b6:	2800      	cmp	r0, #0
     6b8:	d1ac      	bne.n	614 <ioreq_uart_a+0x30>
				syserror (EREQPAR, "uar");
     6ba:	2003      	movs	r0, #3
     6bc:	4908      	ldr	r1, [pc, #32]	; (6e0 <ioreq_uart_a+0xfc>)
			syserror (ENOOPER, "uai");
     6be:	f7ff fe3b 	bl	338 <__pi_syserror>
			if (len == UART_CNTRL_GETRATE) {
     6c2:	2a02      	cmp	r2, #2
     6c4:	d104      	bne.n	6d0 <ioreq_uart_a+0xec>
	return urates [0];
     6c6:	4b07      	ldr	r3, [pc, #28]	; (6e4 <ioreq_uart_a+0x100>)
				return 1;
     6c8:	2401      	movs	r4, #1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6ca:	881b      	ldrh	r3, [r3, #0]
     6cc:	800b      	strh	r3, [r1, #0]
				return 1;
     6ce:	e7a1      	b.n	614 <ioreq_uart_a+0x30>
			syserror (ENOOPER, "uai");
     6d0:	2002      	movs	r0, #2
     6d2:	4905      	ldr	r1, [pc, #20]	; (6e8 <ioreq_uart_a+0x104>)
     6d4:	e7f3      	b.n	6be <ioreq_uart_a+0xda>
     6d6:	bf00      	nop
     6d8:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     6dc:	20000088 	andcs	r0, r0, r8, lsl #1
     6e0:	00002b8f 	andeq	r2, r0, pc, lsl #23
     6e4:	20000018 	andcs	r0, r0, r8, lsl r0
     6e8:	00002b93 	muleq	r0, r3, fp
     6ec:	40001018 	andmi	r1, r0, r8, lsl r0
     6f0:	40001000 	andmi	r1, r0, r0

000006f4 <UART0IntHandler>:
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	f240 72f2 	movw	r2, #2034	; 0x7f2
}

void UART0IntHandler () {
     6f8:	b530      	push	{r4, r5, lr}
     6fa:	4b29      	ldr	r3, [pc, #164]	; (7a0 <UART0IntHandler+0xac>)

	uart_a_clear_interrupts;

	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	4c29      	ldr	r4, [pc, #164]	; (7a4 <UART0IntHandler+0xb0>)
     6fe:	601a      	str	r2, [r3, #0]
     700:	6822      	ldr	r2, [r4, #0]
     702:	06d5      	lsls	r5, r2, #27
     704:	d423      	bmi.n	74e <UART0IntHandler+0x5a>
     706:	4b28      	ldr	r3, [pc, #160]	; (7a8 <UART0IntHandler+0xb4>)
     708:	799a      	ldrb	r2, [r3, #6]
     70a:	0610      	lsls	r0, r2, #24
     70c:	d51f      	bpl.n	74e <UART0IntHandler+0x5a>
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     70e:	799a      	ldrb	r2, [r3, #6]
     710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     714:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     716:	4a25      	ldr	r2, [pc, #148]	; (7ac <UART0IntHandler+0xb8>)
     718:	7813      	ldrb	r3, [r2, #0]
     71a:	f043 0302 	orr.w	r3, r3, #2
     71e:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, READ));
     720:	4b23      	ldr	r3, [pc, #140]	; (7b0 <UART0IntHandler+0xbc>)
     722:	681a      	ldr	r2, [r3, #0]
     724:	b19a      	cbz	r2, 74e <UART0IntHandler+0x5a>
     726:	4610      	mov	r0, r2
     728:	2300      	movs	r3, #0
     72a:	f830 1b10 	ldrh.w	r1, [r0], #16
     72e:	f001 0107 	and.w	r1, r1, #7
     732:	4299      	cmp	r1, r3
     734:	dd09      	ble.n	74a <UART0IntHandler+0x56>
     736:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     73a:	3301      	adds	r3, #1
     73c:	f515 7f81 	cmn.w	r5, #258	; 0x102
     740:	d1f7      	bne.n	732 <UART0IntHandler+0x3e>
     742:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     746:	889b      	ldrh	r3, [r3, #4]
     748:	8013      	strh	r3, [r2, #0]
     74a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     74c:	e7ea      	b.n	724 <UART0IntHandler+0x30>
	}

	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     74e:	6823      	ldr	r3, [r4, #0]
     750:	0699      	lsls	r1, r3, #26
     752:	d424      	bmi.n	79e <UART0IntHandler+0xaa>
     754:	4b14      	ldr	r3, [pc, #80]	; (7a8 <UART0IntHandler+0xb4>)
     756:	799a      	ldrb	r2, [r3, #6]
     758:	0652      	lsls	r2, r2, #25
     75a:	d520      	bpl.n	79e <UART0IntHandler+0xaa>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
		RISE_N_SHINE;
		i_trigger (devevent (UART_A, WRITE));
     75c:	f46f 7480 	mvn.w	r4, #256	; 0x100
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	799a      	ldrb	r2, [r3, #6]
     762:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
     766:	719a      	strb	r2, [r3, #6]
		RISE_N_SHINE;
     768:	4a10      	ldr	r2, [pc, #64]	; (7ac <UART0IntHandler+0xb8>)
     76a:	7813      	ldrb	r3, [r2, #0]
     76c:	f043 0302 	orr.w	r3, r3, #2
     770:	7013      	strb	r3, [r2, #0]
		i_trigger (devevent (UART_A, WRITE));
     772:	4b0f      	ldr	r3, [pc, #60]	; (7b0 <UART0IntHandler+0xbc>)
     774:	681a      	ldr	r2, [r3, #0]
     776:	b192      	cbz	r2, 79e <UART0IntHandler+0xaa>
     778:	4610      	mov	r0, r2
     77a:	2300      	movs	r3, #0
     77c:	f830 1b10 	ldrh.w	r1, [r0], #16
     780:	f001 0107 	and.w	r1, r1, #7
     784:	4299      	cmp	r1, r3
     786:	dd08      	ble.n	79a <UART0IntHandler+0xa6>
     788:	f850 5033 	ldr.w	r5, [r0, r3, lsl #3]
     78c:	3301      	adds	r3, #1
     78e:	42a5      	cmp	r5, r4
     790:	d1f8      	bne.n	784 <UART0IntHandler+0x90>
     792:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     796:	889b      	ldrh	r3, [r3, #4]
     798:	8013      	strh	r3, [r2, #0]
     79a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     79c:	e7eb      	b.n	776 <UART0IntHandler+0x82>
	}

	RTNI;
}
     79e:	bd30      	pop	{r4, r5, pc}
     7a0:	40001044 	andmi	r1, r0, r4, asr #32
     7a4:	40001018 	andmi	r1, r0, r8, lsl r0
     7a8:	20000088 	andcs	r0, r0, r8, lsl #1
     7ac:	2000009c 	mulcs	r0, ip, r0
     7b0:	2000001c 	andcs	r0, r0, ip, lsl r0

000007b4 <__buttons_setirq>:

// ============================================================================

#ifdef	BUTTON_LIST

void __buttons_setirq (int val) {
     7b4:	b570      	push	{r4, r5, r6, lr}
     7b6:	b672      	cpsid	i
    ASSERT( dioNumberLegal( dioNumber ));

    //
    // Clear the event status for the specified DIO.
    //
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	2101      	movs	r1, #1
	int i;
	lword bn;

	cli;
	for (i = 0; i < N_BUTTONS; i++) {
		bn = BUTTON_GPIO (__button_list [i]);
     7ba:	4e0c      	ldr	r6, [pc, #48]	; (7ec <__buttons_setirq+0x38>)
     7bc:	4d0c      	ldr	r5, [pc, #48]	; (7f0 <__buttons_setirq+0x3c>)
     7be:	8833      	ldrh	r3, [r6, #0]
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	4c0c      	ldr	r4, [pc, #48]	; (7f4 <__buttons_setirq+0x40>)
		bn = BUTTON_GPIO (__button_list [i]);
     7c2:	0a1b      	lsrs	r3, r3, #8
     7c4:	fa01 f203 	lsl.w	r2, r1, r3
     7c8:	602a      	str	r2, [r5, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7ca:	01da      	lsls	r2, r3, #7
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	8873      	ldrh	r3, [r6, #2]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7ce:	f102 7281 	add.w	r2, r2, #16908288	; 0x1020000
		bn = BUTTON_GPIO (__button_list [i]);
     7d2:	0a1b      	lsrs	r3, r3, #8
     7d4:	4099      	lsls	r1, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d6:	01db      	lsls	r3, r3, #7
     7d8:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     7dc:	4322      	orrs	r2, r4
     7de:	4323      	orrs	r3, r4
     7e0:	6010      	str	r0, [r2, #0]
     7e2:	6029      	str	r1, [r5, #0]
     7e4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
     7e6:	b662      	cpsie	i
			val;
	}
	sti;
}
     7e8:	bd70      	pop	{r4, r5, r6, pc}
     7ea:	bf00      	nop
     7ec:	00002c7c 	andeq	r2, r0, ip, ror ip
     7f0:	400220e0 	andmi	r2, r2, r0, ror #1
     7f4:	42000048 	andmi	r0, r0, #72	; 0x48

000007f8 <__pinlist_setirq>:

#endif

#ifdef	INPUT_PIN_LIST

void __pinlist_setirq (int val) {
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
     7fa:	b672      	cpsid	i

	int i;
	lword bn;

	cli;
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	2200      	movs	r2, #0
     7fe:	2601      	movs	r6, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	4f09      	ldr	r7, [pc, #36]	; (828 <__pinlist_setirq+0x30>)
     802:	4c0a      	ldr	r4, [pc, #40]	; (82c <__pinlist_setirq+0x34>)
		GPIO_clearEventDio (bn);
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	490a      	ldr	r1, [pc, #40]	; (830 <__pinlist_setirq+0x38>)
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     806:	5cbb      	ldrb	r3, [r7, r2]
	for (i = 0; i < N_PINLIST; i++) {
     808:	3201      	adds	r2, #1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     80e:	fa06 f503 	lsl.w	r5, r6, r3
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     812:	01db      	lsls	r3, r3, #7
     814:	f103 7381 	add.w	r3, r3, #16908288	; 0x1020000
     818:	430b      	orrs	r3, r1
	for (i = 0; i < N_PINLIST; i++) {
     81a:	2a04      	cmp	r2, #4
     81c:	6025      	str	r5, [r4, #0]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     81e:	6018      	str	r0, [r3, #0]
	for (i = 0; i < N_PINLIST; i++) {
     820:	d1f1      	bne.n	806 <__pinlist_setirq+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
     822:	b662      	cpsie	i
			val;
	}
	sti;
}
     824:	bdf0      	pop	{r4, r5, r6, r7, pc}
     826:	bf00      	nop
     828:	00002c78 	andeq	r2, r0, r8, ror ip
     82c:	400220e0 	andmi	r2, r2, r0, ror #1
     830:	42000048 	andmi	r0, r0, #72	; 0x48

00000834 <GPIOIntHandler>:
void GPIOIntHandler () {
     834:	b570      	push	{r4, r5, r6, lr}
if (buttons_int) {
     836:	4c23      	ldr	r4, [pc, #140]	; (8c4 <GPIOIntHandler+0x90>)
     838:	6822      	ldr	r2, [r4, #0]
     83a:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
     83e:	d01e      	beq.n	87e <GPIOIntHandler+0x4a>
	buttons_disable ();
     840:	2000      	movs	r0, #0
     842:	f7ff ffb7 	bl	7b4 <__buttons_setirq>
	i_trigger ((aword)&__button_list);
     846:	4b20      	ldr	r3, [pc, #128]	; (8c8 <GPIOIntHandler+0x94>)
     848:	4d20      	ldr	r5, [pc, #128]	; (8cc <GPIOIntHandler+0x98>)
     84a:	681a      	ldr	r2, [r3, #0]
     84c:	b192      	cbz	r2, 874 <GPIOIntHandler+0x40>
     84e:	4610      	mov	r0, r2
     850:	2300      	movs	r3, #0
     852:	f830 1b10 	ldrh.w	r1, [r0], #16
     856:	f001 0107 	and.w	r1, r1, #7
     85a:	4299      	cmp	r1, r3
     85c:	dd08      	ble.n	870 <GPIOIntHandler+0x3c>
     85e:	f850 6033 	ldr.w	r6, [r0, r3, lsl #3]
     862:	3301      	adds	r3, #1
     864:	42ae      	cmp	r6, r5
     866:	d1f8      	bne.n	85a <GPIOIntHandler+0x26>
     868:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     86c:	889b      	ldrh	r3, [r3, #4]
     86e:	8013      	strh	r3, [r2, #0]
     870:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     872:	e7eb      	b.n	84c <GPIOIntHandler+0x18>
	RISE_N_SHINE;
     874:	4a16      	ldr	r2, [pc, #88]	; (8d0 <GPIOIntHandler+0x9c>)
     876:	7813      	ldrb	r3, [r2, #0]
     878:	f043 0302 	orr.w	r3, r3, #2
     87c:	7013      	strb	r3, [r2, #0]
if (pin_sensor_int) {
     87e:	6823      	ldr	r3, [r4, #0]
     880:	f013 5ff0 	tst.w	r3, #503316480	; 0x1e000000
     884:	d01d      	beq.n	8c2 <GPIOIntHandler+0x8e>
	i_trigger ((aword)(&__input_pins));
     886:	4b10      	ldr	r3, [pc, #64]	; (8c8 <GPIOIntHandler+0x94>)
     888:	4c12      	ldr	r4, [pc, #72]	; (8d4 <GPIOIntHandler+0xa0>)
     88a:	6818      	ldr	r0, [r3, #0]
     88c:	b190      	cbz	r0, 8b4 <GPIOIntHandler+0x80>
     88e:	4601      	mov	r1, r0
     890:	2300      	movs	r3, #0
     892:	f831 2b10 	ldrh.w	r2, [r1], #16
     896:	f002 0207 	and.w	r2, r2, #7
     89a:	429a      	cmp	r2, r3
     89c:	dd08      	ble.n	8b0 <GPIOIntHandler+0x7c>
     89e:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
     8a2:	3301      	adds	r3, #1
     8a4:	42a5      	cmp	r5, r4
     8a6:	d1f8      	bne.n	89a <GPIOIntHandler+0x66>
     8a8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
     8ac:	889b      	ldrh	r3, [r3, #4]
     8ae:	8003      	strh	r3, [r0, #0]
     8b0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     8b2:	e7eb      	b.n	88c <GPIOIntHandler+0x58>
	__pinsen_disable_and_clear;
     8b4:	f7ff ffa0 	bl	7f8 <__pinlist_setirq>
	RISE_N_SHINE;
     8b8:	4a05      	ldr	r2, [pc, #20]	; (8d0 <GPIOIntHandler+0x9c>)
     8ba:	7813      	ldrb	r3, [r2, #0]
     8bc:	f043 0302 	orr.w	r3, r3, #2
     8c0:	7013      	strb	r3, [r2, #0]
}
     8c2:	bd70      	pop	{r4, r5, r6, pc}
     8c4:	400220e0 	andmi	r2, r2, r0, ror #1
     8c8:	2000001c 	andcs	r0, r0, ip, lsl r0
     8cc:	00002c7c 	andeq	r2, r0, ip, ror ip
     8d0:	2000009c 	mulcs	r0, ip, r0
     8d4:	00002c78 	andeq	r2, r0, r8, ror ip

000008d8 <system_init>:
#endif

// ============================================================================
// ============================================================================

void system_init () {
     8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	__pi_ondomain (PRCM_DOMAIN_PERIPH);

	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	4c58      	ldr	r4, [pc, #352]	; (a40 <system_init+0x168>)
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8de:	2004      	movs	r0, #4
     8e0:	f7ff fd0c 	bl	2fc <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	6823      	ldr	r3, [r4, #0]
     8e6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8ea:	69db      	ldr	r3, [r3, #28]
     8ec:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8ee:	6823      	ldr	r3, [r4, #0]
     8f0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     8f6:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	6823      	ldr	r3, [r4, #0]
     8fa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
     8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     900:	4798      	blx	r3
PRCMLoadSet(void)
{
    //
    // Enable the update of all load related registers.
    //
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     902:	2301      	movs	r3, #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	2600      	movs	r6, #0
     906:	4c4f      	ldr	r4, [pc, #316]	; (a44 <system_init+0x16c>)
     908:	4f4f      	ldr	r7, [pc, #316]	; (a48 <system_init+0x170>)
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90a:	f8df c17c 	ldr.w	ip, [pc, #380]	; a88 <system_init+0x1b0>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     90e:	f8df e17c 	ldr.w	lr, [pc, #380]	; a8c <system_init+0x1b4>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     912:	f8df 8140 	ldr.w	r8, [pc, #320]	; a54 <system_init+0x17c>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     916:	f8df 9134 	ldr.w	r9, [pc, #308]	; a4c <system_init+0x174>
     91a:	6023      	str	r3, [r4, #0]
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	f857 5b04 	ldr.w	r5, [r7], #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	3601      	adds	r6, #1
		pin = (port_confs [i] >> 19) & 0x1f;
     922:	f3c5 42c4 	ubfx	r2, r5, #19, #5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     926:	0091      	lsls	r1, r2, #2
     928:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
     92c:	f500 2001 	add.w	r0, r0, #528384	; 0x81000
     930:	ea05 0a0c 	and.w	sl, r5, ip
     934:	f8c0 a000 	str.w	sl, [r0]
		if (port_confs [i] & 0x80)
     938:	0628      	lsls	r0, r5, #24
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93a:	bf44      	itt	mi
     93c:	ea41 010e 	orrmi.w	r1, r1, lr
     940:	600b      	strmi	r3, [r1, #0]
		if (port_confs [i] & 0x40)
     942:	fa03 f202 	lsl.w	r2, r3, r2
     946:	0669      	lsls	r1, r5, #25
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	bf4c      	ite	mi
     94a:	f8c9 2000 	strmi.w	r2, [r9]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     94e:	f8c8 2000 	strpl.w	r2, [r8]
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     952:	2e11      	cmp	r6, #17
     954:	d1e2      	bne.n	91c <system_init+0x44>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     956:	2540      	movs	r5, #64	; 0x40
     958:	2680      	movs	r6, #128	; 0x80
     95a:	4b3c      	ldr	r3, [pc, #240]	; (a4c <system_init+0x174>)

	// Initialize DIO ports
	port_config ();

#if	LEDS_DRIVER
	all_leds_blink;
     95c:	493c      	ldr	r1, [pc, #240]	; (a50 <system_init+0x178>)
     95e:	601d      	str	r5, [r3, #0]
     960:	601e      	str	r6, [r3, #0]
     962:	780b      	ldrb	r3, [r1, #0]
     964:	780b      	ldrb	r3, [r1, #0]
     966:	20c8      	movs	r0, #200	; 0xc8
     968:	f36f 1307 	bfc	r3, #4, #4
     96c:	700b      	strb	r3, [r1, #0]
     96e:	f7ff fcaf 	bl	2d0 <mdelay>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     972:	4b38      	ldr	r3, [pc, #224]	; (a54 <system_init+0x17c>)
     974:	20c8      	movs	r0, #200	; 0xc8
     976:	601d      	str	r5, [r3, #0]
     978:	601e      	str	r6, [r3, #0]

	// The autoincrement value on channel 2 set to 1 msec
	AONRTCIncValueCh2Set (TCI_TINCR (1));
	// Enable continuous operation of channel 2
	HWREGBITW (AON_RTC_BASE + AON_RTC_O_CHCTL,
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     97a:	2601      	movs	r6, #1
	all_leds_blink;
     97c:	780b      	ldrb	r3, [r1, #0]
     97e:	780b      	ldrb	r3, [r1, #0]
     980:	f36f 1307 	bfc	r3, #4, #4
     984:	700b      	strb	r3, [r1, #0]
     986:	f7ff fca3 	bl	2d0 <mdelay>
//
//*****************************************************************************
__STATIC_INLINE void
AONRTCIncValueCh2Set(uint32_t ui32IncValue)
{
    HWREG(AON_RTC_BASE + AON_RTC_O_CH2CMPINC) = ui32IncValue;
     98a:	4b33      	ldr	r3, [pc, #204]	; (a58 <system_init+0x180>)

	// Define the combined event as consisting of channels 0 and 2 and
	// enable the clock
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	4a33      	ldr	r2, [pc, #204]	; (a5c <system_init+0x184>)
     98e:	601d      	str	r5, [r3, #0]
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	4b33      	ldr	r3, [pc, #204]	; (a60 <system_init+0x188>)
		// For the radio
		AON_RTC_CTL_RTC_UPD_EN |
		AON_RTC_CTL_EN;

	// Enable RTC interrupts
	IntEnable (INT_AON_RTC_COMB);
     992:	4d34      	ldr	r5, [pc, #208]	; (a64 <system_init+0x18c>)
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     994:	601e      	str	r6, [r3, #0]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     996:	4b34      	ldr	r3, [pc, #208]	; (a68 <system_init+0x190>)
	IntEnable (INT_AON_RTC_COMB);
     998:	2014      	movs	r0, #20
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     99a:	601a      	str	r2, [r3, #0]
	IntEnable (INT_AON_RTC_COMB);
     99c:	682b      	ldr	r3, [r5, #0]
     99e:	691b      	ldr	r3, [r3, #16]
     9a0:	4798      	blx	r3

	// Initialize the memory allocator
	__pi_malloc_init ();
     9a2:	f000 fb99 	bl	10d8 <__pi_malloc_init>

	// Enable GPIO interrupts
	IntEnable (INT_AON_GPIO_EDGE);
     9a6:	682b      	ldr	r3, [r5, #0]
     9a8:	2010      	movs	r0, #16
     9aa:	691b      	ldr	r3, [r3, #16]
     9ac:	4798      	blx	r3
		EMERGENCY_STARTUP_ACTION;
	}
#endif

#ifdef	NEED_SERIAL_DOMAIN
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9ae:	2002      	movs	r0, #2
     9b0:	f7ff fca4 	bl	2fc <__pi_ondomain>
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	68ab      	ldr	r3, [r5, #8]
     9b6:	f44f 7000 	mov.w	r0, #512	; 0x200
     9ba:	69db      	ldr	r3, [r3, #28]
     9bc:	4798      	blx	r3
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9be:	68ab      	ldr	r3, [r5, #8]
     9c0:	f44f 7000 	mov.w	r0, #512	; 0x200
     9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     9c6:	4798      	blx	r3
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c8:	68ab      	ldr	r3, [r5, #8]
     9ca:	f44f 7000 	mov.w	r0, #512	; 0x200
     9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     9d0:	4798      	blx	r3
	urates [0] = UART_RATE / 100;
     9d2:	2260      	movs	r2, #96	; 0x60
     9d4:	4b25      	ldr	r3, [pc, #148]	; (a6c <system_init+0x194>)
     9d6:	6026      	str	r6, [r4, #0]
     9d8:	801a      	strh	r2, [r3, #0]
	reinit_uart ();
     9da:	f7ff fde7 	bl	5ac <reinit_uart>
	__pi_init_actuators ();
#endif

#ifdef	EXTRA_INITIALIZERS
	// Extra initialization
	EXTRA_INITIALIZERS;
     9de:	f000 fdcb 	bl	1578 <ee_open>
     9e2:	f000 fdd3 	bl	158c <ee_close>
#endif
	// If waking from shutdown, unfreeze the I/O
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e6:	f001 ff63 	bl	28b0 <NOROM_SysCtrlResetSourceGet>
     9ea:	2808      	cmp	r0, #8
     9ec:	d11a      	bne.n	a24 <system_init+0x14c>
AONIOCFreezeDisable(void)
{
    //
    // Set the AON IOC latches as transparent.
    //
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     9ee:	4b20      	ldr	r3, [pc, #128]	; (a70 <system_init+0x198>)
     9f0:	601e      	str	r6, [r3, #0]
{
    //
    // Open the IO latches at AON_IOC level and in the padring
    //
    AONIOCFreezeDisable();
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
     9f6:	3b04      	subs	r3, #4
     9f8:	601e      	str	r6, [r3, #0]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
     9fe:	3324      	adds	r3, #36	; 0x24
     a00:	681b      	ldr	r3, [r3, #0]
	}

#if	MAX_DEVICES
	for (int i = UART; i < MAX_DEVICES; i++)
		if (devinit [i] . init != NULL)
			devinit [i] . init (devinit [i] . param);
     a02:	2000      	movs	r0, #0
     a04:	f7ff fc48 	bl	298 <devinit_uart>
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	4a1a      	ldr	r2, [pc, #104]	; (a74 <system_init+0x19c>)
#endif

#ifdef	N_UARTS
	// The same for UART_DRIVER and UART_TCV
	enable_uart_interrupts ();
	IntEnable (INT_UART0_COMB);
     a0a:	2015      	movs	r0, #21
     a0c:	6813      	ldr	r3, [r2, #0]
     a0e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     a12:	6013      	str	r3, [r2, #0]
     a14:	4b13      	ldr	r3, [pc, #76]	; (a64 <system_init+0x18c>)
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	691b      	ldr	r3, [r3, #16]
     a1a:	4798      	blx	r3
#endif
	// Kick the auxiliary timer in case something is needed by the
	// drivers
	tci_run_auxiliary_timer ();
}
     a1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tci_run_auxiliary_timer ();
     a20:	f7ff bcd4 	b.w	3cc <tci_run_auxiliary_timer>
		diag ("");
     a24:	4814      	ldr	r0, [pc, #80]	; (a78 <system_init+0x1a0>)
     a26:	f000 fc45 	bl	12b4 <diag>
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2a:	4814      	ldr	r0, [pc, #80]	; (a7c <system_init+0x1a4>)
     a2c:	f000 fc42 	bl	12b4 <diag>
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	4913      	ldr	r1, [pc, #76]	; (a80 <system_init+0x1a8>)
		diag ("Leftover RAM: %d bytes",
     a32:	4814      	ldr	r0, [pc, #80]	; (a84 <system_init+0x1ac>)
     a34:	f5c1 4198 	rsb	r1, r1, #19456	; 0x4c00
     a38:	b289      	uxth	r1, r1
     a3a:	f000 fc3b 	bl	12b4 <diag>
     a3e:	e7e0      	b.n	a02 <system_init+0x12a>
     a40:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     a44:	60082028 	andvs	r2, r8, r8, lsr #32
     a48:	00002c00 	andeq	r2, r0, r0, lsl #24
     a4c:	40022090 	mulmi	r2, r0, r0
     a50:	2000009c 	mulcs	r0, ip, r0
     a54:	400220a0 	andmi	r2, r2, r0, lsr #1
     a58:	40092024 	andmi	r2, r9, r4, lsr #32
     a5c:	00050003 	andeq	r0, r5, r3
     a60:	432402c8 			; <UNDEFINED> instruction: 0x432402c8
     a64:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
     a68:	40092000 	andmi	r2, r9, r0
     a6c:	20000018 	andcs	r0, r0, r8, lsl r0
     a70:	4009400c 	andmi	r4, r9, ip
     a74:	40001038 	andmi	r1, r0, r8, lsr r0
     a78:	00002b63 	andeq	r2, r0, r3, ror #22
     a7c:	00002b97 	muleq	r0, r7, fp
     a80:	200000bc 	strhcs	r0, [r0], -ip
     a84:	00002be3 	andeq	r2, r0, r3, ror #23
     a88:	7f077f3f 	svcvc	0x00077f3f
     a8c:	42441a00 	submi	r1, r4, #0, 20

00000a90 <__pi_release>:
	return sc;
}

#endif

__attribute__ ((noreturn)) void __pi_release () {
     a90:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
     a94:	b083      	sub	sp, #12
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a96:	4b79      	ldr	r3, [pc, #484]	; (c7c <__pi_release+0x1ec>)
     a98:	af00      	add	r7, sp, #0
     a9a:	f383 8808 	msr	MSP, r3

	__set_MSP ((lword)(STACK_START));

	check_stack_overflow;
     a9e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
     aa2:	681a      	ldr	r2, [r3, #0]
     aa4:	4b76      	ldr	r3, [pc, #472]	; (c80 <__pi_release+0x1f0>)
     aa6:	429a      	cmp	r2, r3
     aa8:	d127      	bne.n	afa <__pi_release+0x6a>
SysCtrlAonSync(void)
{
    //
    // Sync the AON interface
    //
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     aaa:	4e76      	ldr	r6, [pc, #472]	; (c84 <__pi_release+0x1f4>)

#ifdef	MONITOR_PIN_SCHED
	_PVS (MONITOR_PIN_SCHED, 1);
#endif
	// Catch up with time
	update_n_wake (MAX_WORD, NO);
     aac:	2100      	movs	r1, #0
     aae:	f64f 70ff 	movw	r0, #65535	; 0xffff
     ab2:	f000 f9bb 	bl	e2c <update_n_wake>

	// Run the first ready process
	for_all_tasks (__pi_curr) {
     ab6:	4a74      	ldr	r2, [pc, #464]	; (c88 <__pi_release+0x1f8>)
     ab8:	4b74      	ldr	r3, [pc, #464]	; (c8c <__pi_release+0x1fc>)
     aba:	6812      	ldr	r2, [r2, #0]
     abc:	601a      	str	r2, [r3, #0]
     abe:	681a      	ldr	r2, [r3, #0]
     ac0:	b9fa      	cbnz	r2, b02 <__pi_release+0x72>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ac2:	4c73      	ldr	r4, [pc, #460]	; (c90 <__pi_release+0x200>)
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	b672      	cpsid	i
	entropy++;
#endif

#else	/* NOT SPIN_WHEN_HALTED */

	__SLEEP;
     ac6:	4d73      	ldr	r5, [pc, #460]	; (c94 <__pi_release+0x204>)
     ac8:	782b      	ldrb	r3, [r5, #0]
     aca:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ace:	0798      	lsls	r0, r3, #30
     ad0:	607a      	str	r2, [r7, #4]
     ad2:	f100 80cd 	bmi.w	c70 <__pi_release+0x1e0>
	system_event_count ++;
     ad6:	4a70      	ldr	r2, [pc, #448]	; (c98 <__pi_release+0x208>)
     ad8:	6813      	ldr	r3, [r2, #0]
     ada:	3301      	adds	r3, #1
     adc:	6013      	str	r3, [r2, #0]
	switch (__pi_systat.effpdm) {
     ade:	78ea      	ldrb	r2, [r5, #3]
     ae0:	2a01      	cmp	r2, #1
     ae2:	b2d3      	uxtb	r3, r2
     ae4:	d017      	beq.n	b16 <__pi_release+0x86>
     ae6:	2b02      	cmp	r3, #2
     ae8:	d031      	beq.n	b4e <__pi_release+0xbe>
     aea:	2b00      	cmp	r3, #0
     aec:	f040 8095 	bne.w	c1a <__pi_release+0x18a>
			__WFI ();
     af0:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
     af2:	b662      	cpsie	i
     af4:	bf00      	nop
     af6:	bf00      	nop
     af8:	e7e4      	b.n	ac4 <__pi_release+0x34>
	check_stack_overflow;
     afa:	200b      	movs	r0, #11
     afc:	4967      	ldr	r1, [pc, #412]	; (c9c <__pi_release+0x20c>)
     afe:	f7ff fc1b 	bl	338 <__pi_syserror>
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b02:	6851      	ldr	r1, [r2, #4]
     b04:	b129      	cbz	r1, b12 <__pi_release+0x82>
     b06:	8810      	ldrh	r0, [r2, #0]
     b08:	0704      	lsls	r4, r0, #28
     b0a:	d102      	bne.n	b12 <__pi_release+0x82>
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	0900      	lsrs	r0, r0, #4
     b0e:	4788      	blx	r1
			goto Redo;
     b10:	e7cc      	b.n	aac <__pi_release+0x1c>
	for_all_tasks (__pi_curr) {
     b12:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     b14:	e7d2      	b.n	abc <__pi_release+0x2c>
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b16:	4a62      	ldr	r2, [pc, #392]	; (ca0 <__pi_release+0x210>)
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	2020      	movs	r0, #32
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1a:	6813      	ldr	r3, [r2, #0]
     b1c:	f043 0301 	orr.w	r3, r3, #1
     b20:	6013      	str	r3, [r2, #0]
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionEnable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b22:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
     b26:	f043 0303 	orr.w	r3, r3, #3
     b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b2e:	4b5d      	ldr	r3, [pc, #372]	; (ca4 <__pi_release+0x214>)
     b30:	681b      	ldr	r3, [r3, #0]
     b32:	699b      	ldr	r3, [r3, #24]
     b34:	4798      	blx	r3
     b36:	6833      	ldr	r3, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b38:	6823      	ldr	r3, [r4, #0]
     b3a:	f043 0304 	orr.w	r3, r3, #4
     b3e:	6023      	str	r3, [r4, #0]
			__WFI ();
     b40:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b42:	6823      	ldr	r3, [r4, #0]
     b44:	f023 0304 	bic.w	r3, r3, #4
     b48:	6023      	str	r3, [r4, #0]
     b4a:	6833      	ldr	r3, [r6, #0]
}
     b4c:	e7d1      	b.n	af2 <__pi_release+0x62>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b4e:	f04f 0801 	mov.w	r8, #1
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b52:	687a      	ldr	r2, [r7, #4]
     b54:	4b54      	ldr	r3, [pc, #336]	; (ca8 <__pi_release+0x218>)
    // Check the arguments.
    ASSERT((ui32Mode == AONWUC_AUX_WAKEUP) ||
           (ui32Mode == AONWUC_AUX_ALLOW_SLEEP));

    // Wake up the AUX domain.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b56:	f8df b188 	ldr.w	fp, [pc, #392]	; ce0 <__pi_release+0x250>
     b5a:	601a      	str	r2, [r3, #0]
     b5c:	687b      	ldr	r3, [r7, #4]
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b5e:	f8df a144 	ldr.w	sl, [pc, #324]	; ca4 <__pi_release+0x214>
     b62:	f8cb 3000 	str.w	r3, [fp]
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     b66:	6833      	ldr	r3, [r6, #0]
     b68:	4b50      	ldr	r3, [pc, #320]	; (cac <__pi_release+0x21c>)
//
//*****************************************************************************
__STATIC_INLINE void
PRCMCacheRetentionDisable( void )
{
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6a:	f8df 9178 	ldr.w	r9, [pc, #376]	; ce4 <__pi_release+0x254>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b6e:	f8c3 8000 	str.w	r8, [r3]
     b72:	6868      	ldr	r0, [r5, #4]
     b74:	f8da 3000 	ldr.w	r3, [sl]
     b78:	f040 0020 	orr.w	r0, r0, #32
     b7c:	699b      	ldr	r3, [r3, #24]
     b7e:	4798      	blx	r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	4b4b      	ldr	r3, [pc, #300]	; (cb0 <__pi_release+0x220>)
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b82:	2103      	movs	r1, #3
     b84:	f8c3 8000 	str.w	r8, [r3]
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	f8d9 3000 	ldr.w	r3, [r9]
     b8c:	4849      	ldr	r0, [pc, #292]	; (cb4 <__pi_release+0x224>)
     b8e:	f023 0303 	bic.w	r3, r3, #3
     b92:	f8c9 3000 	str.w	r3, [r9]
     b96:	4b48      	ldr	r3, [pc, #288]	; (cb8 <__pi_release+0x228>)
     b98:	681a      	ldr	r2, [r3, #0]
     b9a:	6852      	ldr	r2, [r2, #4]
     b9c:	4790      	blx	r2
			SysCtrlSetRechargeBeforePowerDown
     b9e:	6878      	ldr	r0, [r7, #4]
     ba0:	f001 fd46 	bl	2630 <NOROM_SysCtrlSetRechargeBeforePowerDown>
     ba4:	6832      	ldr	r2, [r6, #0]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba6:	6822      	ldr	r2, [r4, #0]
     ba8:	f042 0204 	orr.w	r2, r2, #4
     bac:	6022      	str	r2, [r4, #0]
			__WFI ();
     bae:	bf30      	wfi
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	6822      	ldr	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bb2:	4b41      	ldr	r3, [pc, #260]	; (cb8 <__pi_release+0x228>)
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb4:	f022 0204 	bic.w	r2, r2, #4
     bb8:	6022      	str	r2, [r4, #0]
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bba:	681b      	ldr	r3, [r3, #0]
     bbc:	4641      	mov	r1, r8
     bbe:	685b      	ldr	r3, [r3, #4]
     bc0:	483c      	ldr	r0, [pc, #240]	; (cb4 <__pi_release+0x224>)
     bc2:	4798      	blx	r3
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	f8d9 3000 	ldr.w	r3, [r9]
AONWUCPowerStatusGet(void)
{
    //
    // Return the power status.
    //
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	4a3c      	ldr	r2, [pc, #240]	; (cbc <__pi_release+0x22c>)
     bca:	f043 0303 	orr.w	r3, r3, #3
     bce:	f8c9 3000 	str.w	r3, [r9]
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd2:	f8cb 8000 	str.w	r8, [fp]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bd6:	6813      	ldr	r3, [r2, #0]
			while (!(AONWUCPowerStatusGet () &
     bd8:	0699      	lsls	r1, r3, #26
     bda:	d5fc      	bpl.n	bd6 <__pi_release+0x146>
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	f8da 3000 	ldr.w	r3, [sl]
     be0:	6868      	ldr	r0, [r5, #4]
     be2:	695b      	ldr	r3, [r3, #20]
     be4:	4798      	blx	r3
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be6:	4d2f      	ldr	r5, [pc, #188]	; (ca4 <__pi_release+0x214>)
     be8:	4b2a      	ldr	r3, [pc, #168]	; (c94 <__pi_release+0x204>)
     bea:	6858      	ldr	r0, [r3, #4]
     bec:	682b      	ldr	r3, [r5, #0]
     bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     bf0:	4798      	blx	r3
     bf2:	2801      	cmp	r0, #1
     bf4:	d1f8      	bne.n	be8 <__pi_release+0x158>
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     bf6:	4b2d      	ldr	r3, [pc, #180]	; (cac <__pi_release+0x21c>)
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf8:	4a2d      	ldr	r2, [pc, #180]	; (cb0 <__pi_release+0x220>)
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     bfa:	6018      	str	r0, [r3, #0]
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bfc:	2300      	movs	r3, #0
     bfe:	6013      	str	r3, [r2, #0]
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c00:	4b29      	ldr	r3, [pc, #164]	; (ca8 <__pi_release+0x218>)
     c02:	6018      	str	r0, [r3, #0]
     c04:	6833      	ldr	r3, [r6, #0]
			SysCtrlAdjustRechargeAfterPowerDown ();
     c06:	f001 fe23 	bl	2850 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>
			reinit_uart ();
     c0a:	f7ff fccf 	bl	5ac <reinit_uart>
     c0e:	4a2c      	ldr	r2, [pc, #176]	; (cc0 <__pi_release+0x230>)
     c10:	6813      	ldr	r3, [r2, #0]
     c12:	f043 0370 	orr.w	r3, r3, #112	; 0x70
     c16:	6013      	str	r3, [r2, #0]
}
     c18:	e76b      	b.n	af2 <__pi_release+0x62>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1a:	4b2a      	ldr	r3, [pc, #168]	; (cc4 <__pi_release+0x234>)
     c1c:	2001      	movs	r0, #1
     c1e:	681b      	ldr	r3, [r3, #0]
     c20:	68db      	ldr	r3, [r3, #12]
     c22:	4798      	blx	r3
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	4a28      	ldr	r2, [pc, #160]	; (cc8 <__pi_release+0x238>)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c26:	4929      	ldr	r1, [pc, #164]	; (ccc <__pi_release+0x23c>)
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	6813      	ldr	r3, [r2, #0]
     c2a:	f023 0301 	bic.w	r3, r3, #1
     c2e:	6013      	str	r3, [r2, #0]
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c30:	4b27      	ldr	r3, [pc, #156]	; (cd0 <__pi_release+0x240>)
     c32:	681a      	ldr	r2, [r3, #0]
     c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
     c38:	601a      	str	r2, [r3, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3a:	f04f 323f 	mov.w	r2, #1061109567	; 0x3f3f3f3f
     c3e:	600a      	str	r2, [r1, #0]
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	604a      	str	r2, [r1, #4]
     c42:	6832      	ldr	r2, [r6, #0]
__STATIC_INLINE void
AONWUCShutDownEnable(void)
{
    // Ensure the JTAG domain is turned off;
    // otherwise MCU domain can't be turned off.
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	687a      	ldr	r2, [r7, #4]
     c46:	601a      	str	r2, [r3, #0]

    // Enable shutdown of the device.
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	687a      	ldr	r2, [r7, #4]
     c4a:	4b22      	ldr	r3, [pc, #136]	; (cd4 <__pi_release+0x244>)
     c4c:	601a      	str	r2, [r3, #0]
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c4e:	2201      	movs	r2, #1
     c50:	4b21      	ldr	r3, [pc, #132]	; (cd8 <__pi_release+0x248>)
     c52:	601a      	str	r2, [r3, #0]
     c54:	6833      	ldr	r3, [r6, #0]
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c56:	4a19      	ldr	r2, [pc, #100]	; (cbc <__pi_release+0x22c>)
     c58:	6813      	ldr	r3, [r2, #0]
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5a:	069b      	lsls	r3, r3, #26
     c5c:	d4fc      	bmi.n	c58 <__pi_release+0x1c8>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c5e:	2201      	movs	r2, #1
     c60:	4b1e      	ldr	r3, [pc, #120]	; (cdc <__pi_release+0x24c>)
			PRCMPowerDomainOff (
     c62:	2037      	movs	r0, #55	; 0x37
     c64:	601a      	str	r2, [r3, #0]
     c66:	4b0f      	ldr	r3, [pc, #60]	; (ca4 <__pi_release+0x214>)
     c68:	681b      	ldr	r3, [r3, #0]
     c6a:	699b      	ldr	r3, [r3, #24]
     c6c:	4798      	blx	r3
			goto DeepSleep;
     c6e:	e763      	b.n	b38 <__pi_release+0xa8>
	__SLEEP;
     c70:	782b      	ldrb	r3, [r5, #0]
     c72:	f36f 0341 	bfc	r3, #1, #1
     c76:	702b      	strb	r3, [r5, #0]
     c78:	b662      	cpsie	i

#endif	/* SPIN_WHEN_HALTED */

	goto Redo;
     c7a:	e717      	b.n	aac <__pi_release+0x1c>
     c7c:	20005000 	andcs	r5, r0, r0
     c80:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     c84:	4009202c 	andmi	r2, r9, ip, lsr #32
     c88:	2000001c 	andcs	r0, r0, ip, lsl r0
     c8c:	200000b8 	strhcs	r0, [r0], -r8
     c90:	e000ed10 	and	lr, r0, r0, lsl sp
     c94:	2000009c 	mulcs	r0, ip, r0
     c98:	20000090 	mulcs	r0, r0, r0
     c9c:	00002bfa 	strdeq	r2, [r0], -sl
     ca0:	4008218c 	andmi	r2, r8, ip, lsl #3
     ca4:	100001b8 			; <UNDEFINED> instruction: 0x100001b8
     ca8:	4009400c 	andmi	r4, r9, ip
     cac:	60082028 	andvs	r2, r8, r8, lsr #32
     cb0:	43040180 	movwmi	r0, #16768	; 0x4180
     cb4:	40034000 	andmi	r4, r3, r0
     cb8:	100001d8 	ldrdne	r0, [r0], -r8
     cbc:	40091014 	andmi	r1, r9, r4, lsl r0
     cc0:	40001038 	andmi	r1, r0, r8, lsr r0
     cc4:	100001a0 	andne	r0, r0, r0, lsr #3
     cc8:	40091010 	andmi	r1, r9, r0, lsl r0
     ccc:	40093000 	andmi	r3, r9, r0
     cd0:	40091040 	andmi	r1, r9, r0, asr #32
     cd4:	43220420 			; <UNDEFINED> instruction: 0x43220420
     cd8:	40091018 	andmi	r1, r9, r8, lsl r0
     cdc:	43040188 	movwmi	r0, #16776	; 0x4188
     ce0:	43220200 			; <UNDEFINED> instruction: 0x43220200
     ce4:	40082224 	andmi	r2, r8, r4, lsr #4

00000ce8 <main>:

#include "scheduler.h"

}

int main (void) {
     ce8:	b510      	push	{r4, lr}
     cea:	4b11      	ldr	r3, [pc, #68]	; (d30 <main+0x48>)

#if	STACK_GUARD
	{
		register sint i;
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cec:	4911      	ldr	r1, [pc, #68]	; (d34 <main+0x4c>)
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cee:	4a12      	ldr	r2, [pc, #72]	; (d38 <main+0x50>)
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	f843 1b04 	str.w	r1, [r3], #4
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	4293      	cmp	r3, r2
     cf6:	d1fb      	bne.n	cf0 <main+0x8>
#if	TCV_PRESENT
	tcv_init ();
#endif

	// For standby mode wakeup on timer
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	4c10      	ldr	r4, [pc, #64]	; (d3c <main+0x54>)
	system_init ();
     cfa:	f7ff fded 	bl	8d8 <system_init>
	tcv_init ();
     cfe:	f000 fb77 	bl	13f0 <tcv_init>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d02:	6823      	ldr	r3, [r4, #0]
     d04:	2129      	movs	r1, #41	; 0x29
     d06:	2000      	movs	r0, #0
     d08:	681b      	ldr	r3, [r3, #0]
     d0a:	4798      	blx	r3
	// Edge on any I/O, will it take care of UART? No, of course not!
	// But it does work for buttons.
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d0c:	6823      	ldr	r3, [r4, #0]
     d0e:	2120      	movs	r1, #32
     d10:	681b      	ldr	r3, [r3, #0]
     d12:	2001      	movs	r0, #1
     d14:	4798      	blx	r3

	// Assume root process identity
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d16:	2100      	movs	r1, #0
     d18:	4809      	ldr	r0, [pc, #36]	; (d40 <main+0x58>)
     d1a:	f000 faa5 	bl	1268 <__pi_fork>
     d1e:	4b09      	ldr	r3, [pc, #36]	; (d44 <main+0x5c>)
	// Delay root startup for 16 msec to make sure that the drivers go
	// first
	delay (16, 0);
     d20:	2100      	movs	r1, #0
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d22:	6018      	str	r0, [r3, #0]
	delay (16, 0);
     d24:	2010      	movs	r0, #16
     d26:	f000 f937 	bl	f98 <delay>
     d2a:	b662      	cpsie	i

	sti;

	__pi_release ();
     d2c:	f7ff feb0 	bl	a90 <__pi_release>
     d30:	20004bfc 	strdcs	r4, [r0], -ip
     d34:	a778b779 			; <UNDEFINED> instruction: 0xa778b779
     d38:	20004fbc 			; <UNDEFINED> instruction: 0x20004fbc
     d3c:	10000184 	andne	r0, r0, r4, lsl #3
     d40:	0000016d 	andeq	r0, r0, sp, ror #2
     d44:	200000b8 	strhcs	r0, [r0], -r8

00000d48 <killev>:
	}

	return i->Timer - __pi_old;
}

static void killev (__pi_pcb_t *pid) {
     d48:	b570      	push	{r4, r5, r6, lr}
	aword wfun;
	int j;
	__pi_pcb_t *i;

	wfun = (aword)(pid->code);
	for_all_tasks (i) {
     d4a:	4b0d      	ldr	r3, [pc, #52]	; (d80 <killev+0x38>)
	wfun = (aword)(pid->code);
     d4c:	6846      	ldr	r6, [r0, #4]
	for_all_tasks (i) {
     d4e:	681a      	ldr	r2, [r3, #0]
     d50:	b1aa      	cbz	r2, d7e <killev+0x36>
		for (j = 0; j < nevents (i); j++) {
     d52:	4614      	mov	r4, r2
     d54:	f834 1b10 	ldrh.w	r1, [r4], #16
     d58:	2300      	movs	r3, #0
     d5a:	f001 0107 	and.w	r1, r1, #7
     d5e:	e001      	b.n	d64 <killev+0x1c>
			if (i->Events [j] . Event == (aword)pid
			    || i->Events [j] . Event == wfun
     d60:	42b5      	cmp	r5, r6
     d62:	d006      	beq.n	d72 <killev+0x2a>
		for (j = 0; j < nevents (i); j++) {
     d64:	4299      	cmp	r1, r3
     d66:	dd08      	ble.n	d7a <killev+0x32>
			if (i->Events [j] . Event == (aword)pid
     d68:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     d6c:	3301      	adds	r3, #1
     d6e:	42a8      	cmp	r0, r5
     d70:	d1f6      	bne.n	d60 <killev+0x18>
			    ) {
				wakeupev (i, j);
     d72:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     d76:	889b      	ldrh	r3, [r3, #4]
     d78:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     d7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     d7c:	e7e8      	b.n	d50 <killev+0x8>
				break;
			}
		}
	}
}
     d7e:	bd70      	pop	{r4, r5, r6, pc}
     d80:	2000001c 	andcs	r0, r0, ip, lsl r0

00000d84 <qfree>:
	// volatile
#endif
	aword *chunk, *cc;

	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	4a1d      	ldr	r2, [pc, #116]	; (dfc <qfree+0x78>)
static void qfree (aword *ch) {
     d86:	b530      	push	{r4, r5, lr}
     d88:	4614      	mov	r4, r2
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8a:	6813      	ldr	r3, [r2, #0]
     d8c:	b93b      	cbnz	r3, d9e <qfree+0x1a>
		}
	}

	/* Insert */
	cc = (aword*)(mpools + MA_NP);
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     d8e:	6823      	ldr	r3, [r4, #0]
	cc = (aword*)(mpools + MA_NP);
     d90:	4a1a      	ldr	r2, [pc, #104]	; (dfc <qfree+0x78>)
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
     d92:	bb53      	cbnz	r3, dea <qfree+0x66>
		chunk = m_nextp (chunk))
			if (m_size (chunk) >= m_size (ch))
				break;

	m_setnextp (ch, chunk);
     d94:	6003      	str	r3, [r0, #0]
	m_setnextp (cc, ch);

#if	MALLOC_SAFE
	m_magic (ch) = MALLOC_MAGIC;
     d96:	4b1a      	ldr	r3, [pc, #104]	; (e00 <qfree+0x7c>)
	m_setnextp (cc, ch);
     d98:	6010      	str	r0, [r2, #0]
	m_magic (ch) = MALLOC_MAGIC;
     d9a:	6043      	str	r3, [r0, #4]
#endif

#undef	MA_NP
}
     d9c:	bd30      	pop	{r4, r5, pc}
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     d9e:	e953 1501 	ldrd	r1, r5, [r3, #-4]
     da2:	3101      	adds	r1, #1
     da4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     da8:	4288      	cmp	r0, r1
     daa:	d10b      	bne.n	dc4 <qfree+0x40>
			m_setnextp (cc, m_nextp (chunk));
     dac:	6015      	str	r5, [r2, #0]
			m_size (chunk) += m_hdrlen + m_size (ch);
     dae:	f850 0c04 	ldr.w	r0, [r0, #-4]
     db2:	f853 1c04 	ldr.w	r1, [r3, #-4]
     db6:	4401      	add	r1, r0
     db8:	4618      	mov	r0, r3
     dba:	3101      	adds	r1, #1
     dbc:	f843 1c04 	str.w	r1, [r3, #-4]
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	e7e3      	b.n	d8c <qfree+0x8>
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	f850 1c04 	ldr.w	r1, [r0, #-4]
     dc8:	3101      	adds	r1, #1
     dca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
     dce:	428b      	cmp	r3, r1
			m_setnextp (cc, m_nextp (chunk));
     dd0:	bf03      	ittte	eq
     dd2:	6015      	streq	r5, [r2, #0]
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	f850 1c04 	ldreq.w	r1, [r0, #-4]
     dd8:	f853 5c04 	ldreq.w	r5, [r3, #-4]
     ddc:	461a      	movne	r2, r3
     dde:	bf02      	ittt	eq
     de0:	1949      	addeq	r1, r1, r5
     de2:	3101      	addeq	r1, #1
     de4:	f840 1c04 	streq.w	r1, [r0, #-4]
     de8:	e7ea      	b.n	dc0 <qfree+0x3c>
			if (m_size (chunk) >= m_size (ch))
     dea:	f853 4c04 	ldr.w	r4, [r3, #-4]
     dee:	f850 1c04 	ldr.w	r1, [r0, #-4]
     df2:	428c      	cmp	r4, r1
     df4:	d2ce      	bcs.n	d94 <qfree+0x10>
		chunk = m_nextp (chunk))
     df6:	461a      	mov	r2, r3
     df8:	681b      	ldr	r3, [r3, #0]
     dfa:	e7ca      	b.n	d92 <qfree+0xe>
     dfc:	20000030 	andcs	r0, r0, r0, lsr r0
     e00:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}

00000e04 <dgout>:
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	4a03      	ldr	r2, [pc, #12]	; (e14 <dgout+0x10>)
     e06:	6813      	ldr	r3, [r2, #0]

#if	dbg_level != 0 || DIAG_MESSAGES

static void dgout (word c) {

	diag_wait (a);
     e08:	071b      	lsls	r3, r3, #28
     e0a:	d4fc      	bmi.n	e06 <dgout+0x2>
	diag_wchar (c, a);
     e0c:	4b02      	ldr	r3, [pc, #8]	; (e18 <dgout+0x14>)
     e0e:	b2c0      	uxtb	r0, r0
     e10:	6018      	str	r0, [r3, #0]
}
     e12:	4770      	bx	lr
     e14:	40001018 	andmi	r1, r0, r8, lsl r0
     e18:	40001000 	andmi	r1, r0, r0

00000e1c <__pi_badstate>:
	syserror (ESTATE, "state");
     e1c:	2007      	movs	r0, #7
void __pi_badstate (void) {
     e1e:	b508      	push	{r3, lr}
	syserror (ESTATE, "state");
     e20:	4901      	ldr	r1, [pc, #4]	; (e28 <__pi_badstate+0xc>)
     e22:	f7ff fa89 	bl	338 <__pi_syserror>
     e26:	bf00      	nop
     e28:	00002c44 	andeq	r2, r0, r4, asr #24

00000e2c <update_n_wake>:
void update_n_wake (word min, Boolean force) {
     e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e2e:	4604      	mov	r4, r0
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	4608      	mov	r0, r1
     e32:	f7ff fb69 	bl	508 <tci_update_delay_ticks>
     e36:	2800      	cmp	r0, #0
     e38:	d154      	bne.n	ee4 <update_n_wake+0xb8>
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3a:	4b2b      	ldr	r3, [pc, #172]	; (ee8 <update_n_wake+0xbc>)
     e3c:	4d2b      	ldr	r5, [pc, #172]	; (eec <update_n_wake+0xc0>)
     e3e:	8819      	ldrh	r1, [r3, #0]
     e40:	882a      	ldrh	r2, [r5, #0]
     e42:	b289      	uxth	r1, r1
     e44:	428a      	cmp	r2, r1
     e46:	492a      	ldr	r1, [pc, #168]	; (ef0 <update_n_wake+0xc4>)
     e48:	d803      	bhi.n	e52 <update_n_wake+0x26>
     e4a:	8808      	ldrh	r0, [r1, #0]
     e4c:	b280      	uxth	r0, r0
     e4e:	4282      	cmp	r2, r0
     e50:	d20d      	bcs.n	e6e <update_n_wake+0x42>
     e52:	881e      	ldrh	r6, [r3, #0]
     e54:	8808      	ldrh	r0, [r1, #0]
     e56:	b2b6      	uxth	r6, r6
     e58:	b280      	uxth	r0, r0
     e5a:	4286      	cmp	r6, r0
     e5c:	d236      	bcs.n	ecc <update_n_wake+0xa0>
     e5e:	8818      	ldrh	r0, [r3, #0]
     e60:	b280      	uxth	r0, r0
     e62:	4282      	cmp	r2, r0
     e64:	d903      	bls.n	e6e <update_n_wake+0x42>
     e66:	8808      	ldrh	r0, [r1, #0]
     e68:	b280      	uxth	r0, r0
     e6a:	4282      	cmp	r2, r0
     e6c:	d32e      	bcc.n	ecc <update_n_wake+0xa0>
		for_all_tasks (i) {
     e6e:	4a21      	ldr	r2, [pc, #132]	; (ef4 <update_n_wake+0xc8>)
     e70:	6810      	ldr	r0, [r2, #0]
     e72:	b918      	cbnz	r0, e7c <update_n_wake+0x50>
	__pi_mintk = znew + min;
     e74:	8818      	ldrh	r0, [r3, #0]
     e76:	4404      	add	r4, r0
     e78:	802c      	strh	r4, [r5, #0]
     e7a:	e02c      	b.n	ed6 <update_n_wake+0xaa>
			if (!twaiting (i))
     e7c:	8806      	ldrh	r6, [r0, #0]
     e7e:	0732      	lsls	r2, r6, #28
     e80:	d51b      	bpl.n	eba <update_n_wake+0x8e>
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e82:	881f      	ldrh	r7, [r3, #0]
     e84:	8842      	ldrh	r2, [r0, #2]
     e86:	b2bf      	uxth	r7, r7
     e88:	42ba      	cmp	r2, r7
     e8a:	d803      	bhi.n	e94 <update_n_wake+0x68>
     e8c:	880f      	ldrh	r7, [r1, #0]
     e8e:	b2bf      	uxth	r7, r7
     e90:	42ba      	cmp	r2, r7
     e92:	d20f      	bcs.n	eb4 <update_n_wake+0x88>
     e94:	f8b3 c000 	ldrh.w	ip, [r3]
     e98:	880f      	ldrh	r7, [r1, #0]
     e9a:	fa1f fc8c 	uxth.w	ip, ip
     e9e:	b2bf      	uxth	r7, r7
     ea0:	45bc      	cmp	ip, r7
     ea2:	d20c      	bcs.n	ebe <update_n_wake+0x92>
     ea4:	881f      	ldrh	r7, [r3, #0]
     ea6:	b2bf      	uxth	r7, r7
     ea8:	42ba      	cmp	r2, r7
     eaa:	d903      	bls.n	eb4 <update_n_wake+0x88>
     eac:	880f      	ldrh	r7, [r1, #0]
     eae:	b2bf      	uxth	r7, r7
     eb0:	42ba      	cmp	r2, r7
     eb2:	d304      	bcc.n	ebe <update_n_wake+0x92>
				wakeuptm (i);
     eb4:	f026 060f 	bic.w	r6, r6, #15
     eb8:	8006      	strh	r6, [r0, #0]
		for_all_tasks (i) {
     eba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     ebc:	e7d9      	b.n	e72 <update_n_wake+0x46>
				d = i->Timer - znew;
     ebe:	881e      	ldrh	r6, [r3, #0]
     ec0:	1b92      	subs	r2, r2, r6
     ec2:	b292      	uxth	r2, r2
     ec4:	4294      	cmp	r4, r2
     ec6:	bf28      	it	cs
     ec8:	4614      	movcs	r4, r2
     eca:	e7f6      	b.n	eba <update_n_wake+0x8e>
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	8818      	ldrh	r0, [r3, #0]
     ece:	1a12      	subs	r2, r2, r0
     ed0:	b292      	uxth	r2, r2
     ed2:	4294      	cmp	r4, r2
     ed4:	d9ce      	bls.n	e74 <update_n_wake+0x48>
	__pi_old = znew;
     ed6:	881b      	ldrh	r3, [r3, #0]
     ed8:	b29b      	uxth	r3, r3
     eda:	800b      	strh	r3, [r1, #0]
}
     edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TCI_RUN_DELAY_TIMER;
     ee0:	f7ff ba54 	b.w	38c <tci_run_delay_timer>
}
     ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ee6:	bf00      	nop
     ee8:	200000a4 	andcs	r0, r0, r4, lsr #1
     eec:	20000098 	mulcs	r0, r8, r0
     ef0:	2000009a 	mulcs	r0, sl, r0
     ef4:	2000001c 	andcs	r0, r0, ip, lsl r0

00000ef8 <proceed>:
void proceed (word state) {
     ef8:	b508      	push	{r3, lr}
	prcdstate (__pi_curr, state);
     efa:	4b03      	ldr	r3, [pc, #12]	; (f08 <proceed+0x10>)
     efc:	0100      	lsls	r0, r0, #4
     efe:	681b      	ldr	r3, [r3, #0]
     f00:	8018      	strh	r0, [r3, #0]
	release;
     f02:	f7ff fdc5 	bl	a90 <__pi_release>
     f06:	bf00      	nop
     f08:	200000b8 	strhcs	r0, [r0], -r8

00000f0c <__pi_wait>:
void __pi_wait (aword event, word state) {
     f0c:	b510      	push	{r4, lr}
	sint j = nevents (__pi_curr);
     f0e:	4b0a      	ldr	r3, [pc, #40]	; (f38 <__pi_wait+0x2c>)
     f10:	681c      	ldr	r4, [r3, #0]
     f12:	8823      	ldrh	r3, [r4, #0]
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	f013 0f04 	tst.w	r3, #4
     f18:	f003 0207 	and.w	r2, r3, #7
     f1c:	d003      	beq.n	f26 <__pi_wait+0x1a>
		syserror (ENEVENTS, "sw");
     f1e:	2005      	movs	r0, #5
     f20:	4906      	ldr	r1, [pc, #24]	; (f3c <__pi_wait+0x30>)
     f22:	f7ff fa09 	bl	338 <__pi_syserror>
	setestate (__pi_curr->Events [j], state, event);
     f26:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
     f2a:	0109      	lsls	r1, r1, #4
	incwait (__pi_curr);
     f2c:	3301      	adds	r3, #1
	setestate (__pi_curr->Events [j], state, event);
     f2e:	8191      	strh	r1, [r2, #12]
     f30:	6110      	str	r0, [r2, #16]
	incwait (__pi_curr);
     f32:	8023      	strh	r3, [r4, #0]
}
     f34:	bd10      	pop	{r4, pc}
     f36:	bf00      	nop
     f38:	200000b8 	strhcs	r0, [r0], -r8
     f3c:	00002c4a 	andeq	r2, r0, sl, asr #24

00000f40 <__pi_trigger>:
void __pi_trigger (aword event) {
     f40:	b530      	push	{r4, r5, lr}
	for_all_tasks (i) {
     f42:	4b0b      	ldr	r3, [pc, #44]	; (f70 <__pi_trigger+0x30>)
     f44:	681a      	ldr	r2, [r3, #0]
     f46:	b192      	cbz	r2, f6e <__pi_trigger+0x2e>
		for (j = 0; j < nevents (i); j++) {
     f48:	4614      	mov	r4, r2
     f4a:	2300      	movs	r3, #0
     f4c:	f834 1b10 	ldrh.w	r1, [r4], #16
     f50:	f001 0107 	and.w	r1, r1, #7
     f54:	4299      	cmp	r1, r3
     f56:	dd08      	ble.n	f6a <__pi_trigger+0x2a>
			if (i->Events [j] . Event == event) {
     f58:	f854 5033 	ldr.w	r5, [r4, r3, lsl #3]
     f5c:	3301      	adds	r3, #1
     f5e:	4285      	cmp	r5, r0
     f60:	d1f8      	bne.n	f54 <__pi_trigger+0x14>
				wakeupev (i, j);
     f62:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
     f66:	889b      	ldrh	r3, [r3, #4]
     f68:	8013      	strh	r3, [r2, #0]
	for_all_tasks (i) {
     f6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
     f6c:	e7eb      	b.n	f46 <__pi_trigger+0x6>
}
     f6e:	bd30      	pop	{r4, r5, pc}
     f70:	2000001c 	andcs	r0, r0, ip, lsl r0

00000f74 <__pi_join>:
aword __pi_join (aword pid, word st) {
     f74:	b510      	push	{r4, lr}
     f76:	4604      	mov	r4, r0
	for_all_tasks (i) {
     f78:	4b06      	ldr	r3, [pc, #24]	; (f94 <__pi_join+0x20>)
     f7a:	681b      	ldr	r3, [r3, #0]
     f7c:	b90b      	cbnz	r3, f82 <__pi_join+0xe>
	return 0;
     f7e:	461c      	mov	r4, r3
     f80:	e004      	b.n	f8c <__pi_join+0x18>
		if ((aword)i == pid) {
     f82:	42a3      	cmp	r3, r4
     f84:	d104      	bne.n	f90 <__pi_join+0x1c>
			__pi_wait (pid, st);
     f86:	4620      	mov	r0, r4
     f88:	f7ff ffc0 	bl	f0c <__pi_wait>
}
     f8c:	4620      	mov	r0, r4
     f8e:	bd10      	pop	{r4, pc}
	for_all_tasks (i) {
     f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f92:	e7f3      	b.n	f7c <__pi_join+0x8>
     f94:	2000001c 	andcs	r0, r0, ip, lsl r0

00000f98 <delay>:
void delay (word d, word state) {
     f98:	b538      	push	{r3, r4, r5, lr}
     f9a:	4604      	mov	r4, r0
	settstate (__pi_curr, state);
     f9c:	4d0a      	ldr	r5, [pc, #40]	; (fc8 <delay+0x30>)
     f9e:	682a      	ldr	r2, [r5, #0]
     fa0:	8813      	ldrh	r3, [r2, #0]
     fa2:	f003 0307 	and.w	r3, r3, #7
     fa6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
     faa:	8013      	strh	r3, [r2, #0]
	update_n_wake (d, YES);
     fac:	2101      	movs	r1, #1
     fae:	f7ff ff3d 	bl	e2c <update_n_wake>
	__pi_curr->Timer = __pi_old + d;
     fb2:	4b06      	ldr	r3, [pc, #24]	; (fcc <delay+0x34>)
     fb4:	8818      	ldrh	r0, [r3, #0]
     fb6:	682b      	ldr	r3, [r5, #0]
     fb8:	4404      	add	r4, r0
     fba:	805c      	strh	r4, [r3, #2]
	inctimer (__pi_curr);
     fbc:	682a      	ldr	r2, [r5, #0]
     fbe:	8813      	ldrh	r3, [r2, #0]
     fc0:	f043 0308 	orr.w	r3, r3, #8
     fc4:	8013      	strh	r3, [r2, #0]
}
     fc6:	bd38      	pop	{r3, r4, r5, pc}
     fc8:	200000b8 	strhcs	r0, [r0], -r8
     fcc:	2000009a 	mulcs	r0, sl, r0

00000fd0 <running>:
	if (fun == NULL)
     fd0:	4603      	mov	r3, r0
     fd2:	b910      	cbnz	r0, fda <running+0xa>
		return (int) __pi_curr;
     fd4:	4b05      	ldr	r3, [pc, #20]	; (fec <running+0x1c>)
     fd6:	6818      	ldr	r0, [r3, #0]
     fd8:	4770      	bx	lr
	for_all_tasks (i)
     fda:	4a05      	ldr	r2, [pc, #20]	; (ff0 <running+0x20>)
     fdc:	6810      	ldr	r0, [r2, #0]
     fde:	b900      	cbnz	r0, fe2 <running+0x12>
}
     fe0:	4770      	bx	lr
		if (i->code == fun)
     fe2:	6842      	ldr	r2, [r0, #4]
     fe4:	429a      	cmp	r2, r3
     fe6:	d0fb      	beq.n	fe0 <running+0x10>
	for_all_tasks (i)
     fe8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
     fea:	e7f8      	b.n	fde <running+0xe>
     fec:	200000b8 	strhcs	r0, [r0], -r8
     ff0:	2000001c 	andcs	r0, r0, ip, lsl r0

00000ff4 <__pi_strlen>:
int __pi_strlen (const char *s) {
     ff4:	4603      	mov	r3, r0
	for (i = 0; *(s+i) != '\0'; i++);
     ff6:	2000      	movs	r0, #0
     ff8:	5c1a      	ldrb	r2, [r3, r0]
     ffa:	b902      	cbnz	r2, ffe <__pi_strlen+0xa>
}
     ffc:	4770      	bx	lr
	for (i = 0; *(s+i) != '\0'; i++);
     ffe:	3001      	adds	r0, #1
    1000:	e7fa      	b.n	ff8 <__pi_strlen+0x4>

00001002 <__pi_memcpy>:
	while (n--)
    1002:	3801      	subs	r0, #1
    1004:	440a      	add	r2, r1
    1006:	4291      	cmp	r1, r2
    1008:	d100      	bne.n	100c <__pi_memcpy+0xa>
}
    100a:	4770      	bx	lr
		*dest++ = *src++;
    100c:	f811 3b01 	ldrb.w	r3, [r1], #1
    1010:	f800 3f01 	strb.w	r3, [r0, #1]!
    1014:	e7f7      	b.n	1006 <__pi_memcpy+0x4>
	...

00001018 <adddevfunc>:
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	b508      	push	{r3, lr}
	if (loc < 0 || loc >= MAX_DEVICES)
    101a:	b119      	cbz	r1, 1024 <adddevfunc+0xc>
		syserror (EREQPAR, "addv");
    101c:	2003      	movs	r0, #3
    101e:	4905      	ldr	r1, [pc, #20]	; (1034 <adddevfunc+0x1c>)
		syserror (ERESOURCE, "addv");
    1020:	f7ff f98a 	bl	338 <__pi_syserror>
	if (ioreq [loc] != NULL)
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <adddevfunc+0x20>)
    1026:	681a      	ldr	r2, [r3, #0]
    1028:	b112      	cbz	r2, 1030 <adddevfunc+0x18>
		syserror (ERESOURCE, "addv");
    102a:	2004      	movs	r0, #4
    102c:	4901      	ldr	r1, [pc, #4]	; (1034 <adddevfunc+0x1c>)
    102e:	e7f7      	b.n	1020 <adddevfunc+0x8>
	ioreq [loc] = rf;
    1030:	6018      	str	r0, [r3, #0]
}
    1032:	bd08      	pop	{r3, pc}
    1034:	00002c4d 	andeq	r2, r0, sp, asr #24
    1038:	20000020 	andcs	r0, r0, r0, lsr #32

0000103c <io>:
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1040:	4604      	mov	r4, r0
    1042:	4616      	mov	r6, r2
    1044:	461d      	mov	r5, r3
    1046:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104a:	b921      	cbnz	r1, 1056 <io+0x1a>
    104c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 10d4 <io+0x98>
    1050:	f8d9 3000 	ldr.w	r3, [r9]
    1054:	b91b      	cbnz	r3, 105e <io+0x22>
		syserror (ENODEVICE, "io");
    1056:	2001      	movs	r0, #1
    1058:	491d      	ldr	r1, [pc, #116]	; (10d0 <io+0x94>)
    105a:	f7ff f96d 	bl	338 <__pi_syserror>
	if (len == 0)
    105e:	f1b8 0f00 	cmp.w	r8, #0
    1062:	d028      	beq.n	10b6 <io+0x7a>
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	4642      	mov	r2, r8
    1066:	4629      	mov	r1, r5
    1068:	4630      	mov	r0, r6
    106a:	4798      	blx	r3
	if (ret >= 0)
    106c:	2800      	cmp	r0, #0
    106e:	da23      	bge.n	10b8 <io+0x7c>
	if (ret == -1) {
    1070:	1c41      	adds	r1, r0, #1
    1072:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1076:	d108      	bne.n	108a <io+0x4e>
		if (retry == WNONE)
    1078:	429c      	cmp	r4, r3
    107a:	d01c      	beq.n	10b6 <io+0x7a>
		iowait (dev, operation, retry);
    107c:	4621      	mov	r1, r4
    107e:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    1082:	f7ff ff43 	bl	f0c <__pi_wait>
			release;
    1086:	f7ff fd03 	bl	a90 <__pi_release>
	if (ret == -2) {
    108a:	1c82      	adds	r2, r0, #2
    108c:	d116      	bne.n	10bc <io+0x80>
		if (retry != WNONE) {
    108e:	429c      	cmp	r4, r3
    1090:	f8d9 9000 	ldr.w	r9, [r9]
    1094:	d00a      	beq.n	10ac <io+0x70>
			iowait (dev, operation, retry);
    1096:	4621      	mov	r1, r4
    1098:	f5a6 7081 	sub.w	r0, r6, #258	; 0x102
    109c:	f7ff ff36 	bl	f0c <__pi_wait>
			(ioreq [dev]) (NONE, buf, len);
    10a0:	4642      	mov	r2, r8
    10a2:	4629      	mov	r1, r5
    10a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10a8:	47c8      	blx	r9
    10aa:	e7ec      	b.n	1086 <io+0x4a>
		(ioreq [dev]) (NONE, buf, len);
    10ac:	4642      	mov	r2, r8
    10ae:	4629      	mov	r1, r5
    10b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10b4:	47c8      	blx	r9
		return 0;
    10b6:	2000      	movs	r0, #0
}
    10b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (retry != WNONE) {
    10bc:	429c      	cmp	r4, r3
    10be:	d0fa      	beq.n	10b6 <io+0x7a>
		delay (-ret - 2, retry);
    10c0:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
    10c4:	30fe      	adds	r0, #254	; 0xfe
    10c6:	4621      	mov	r1, r4
    10c8:	b280      	uxth	r0, r0
    10ca:	f7ff ff65 	bl	f98 <delay>
		release;
    10ce:	e7da      	b.n	1086 <io+0x4a>
    10d0:	00002c52 	andeq	r2, r0, r2, asr ip
    10d4:	20000020 	andcs	r0, r0, r0, lsr #32

000010d8 <__pi_malloc_init>:
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	4a0d      	ldr	r2, [pc, #52]	; (1110 <__pi_malloc_init+0x38>)
void __pi_malloc_init () {
    10da:	b508      	push	{r3, lr}
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10dc:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    10e0:	f503 4398 	add.w	r3, r3, #19456	; 0x4c00
    10e4:	089b      	lsrs	r3, r3, #2
    10e6:	1e59      	subs	r1, r3, #1
    10e8:	29ff      	cmp	r1, #255	; 0xff
    10ea:	d803      	bhi.n	10f4 <__pi_malloc_init+0x1c>
		syserror (ERESOURCE, "mal1");
    10ec:	2004      	movs	r0, #4
    10ee:	4909      	ldr	r1, [pc, #36]	; (1114 <__pi_malloc_init+0x3c>)
    10f0:	f7ff f922 	bl	338 <__pi_syserror>
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f4:	4908      	ldr	r1, [pc, #32]	; (1118 <__pi_malloc_init+0x40>)
    10f6:	1d10      	adds	r0, r2, #4
    10f8:	6008      	str	r0, [r1, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fa:	2000      	movs	r0, #0
    10fc:	4907      	ldr	r1, [pc, #28]	; (111c <__pi_malloc_init+0x44>)
	m_size (mpools [0]) = mlen - m_hdrlen;
    10fe:	3b02      	subs	r3, #2
    1100:	6013      	str	r3, [r2, #0]
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1102:	e9c2 0101 	strd	r0, r1, [r2, #4]
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1106:	4a06      	ldr	r2, [pc, #24]	; (1120 <__pi_malloc_init+0x48>)
    1108:	6013      	str	r3, [r2, #0]
    110a:	4a06      	ldr	r2, [pc, #24]	; (1124 <__pi_malloc_init+0x4c>)
    110c:	6013      	str	r3, [r2, #0]
}
    110e:	bd08      	pop	{r3, pc}
    1110:	200000bc 	strhcs	r0, [r0], -ip
    1114:	00002c55 	andeq	r2, r0, r5, asr ip
    1118:	20000030 	andcs	r0, r0, r0, lsr r0
    111c:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1120:	20000024 	andcs	r0, r0, r4, lsr #32
    1124:	2000002c 	andcs	r0, r0, ip, lsr #32

00001128 <__pi_free>:
void __pi_free (aword *ch) {
    1128:	b508      	push	{r3, lr}
	if (ch == NULL)
    112a:	b1c8      	cbz	r0, 1160 <__pi_free+0x38>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    112c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    1130:	2b00      	cmp	r3, #0
    1132:	db03      	blt.n	113c <__pi_free+0x14>
		syserror (EMALLOC, "malg");
    1134:	2006      	movs	r0, #6
    1136:	490b      	ldr	r1, [pc, #44]	; (1164 <__pi_free+0x3c>)
    1138:	f7ff f8fe 	bl	338 <__pi_syserror>
	mcfree [MA_NP] += m_size (ch);
    113c:	490a      	ldr	r1, [pc, #40]	; (1168 <__pi_free+0x40>)
		m_size (ch) ^= MALLOC_UMASK;
    113e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
	mcfree [MA_NP] += m_size (ch);
    1142:	680a      	ldr	r2, [r1, #0]
		m_size (ch) ^= MALLOC_UMASK;
    1144:	f840 3c04 	str.w	r3, [r0, #-4]
	mcfree [MA_NP] += m_size (ch);
    1148:	4413      	add	r3, r2
    114a:	600b      	str	r3, [r1, #0]
	QFREE;
    114c:	f7ff fe1a 	bl	d84 <qfree>
	if (mevent [MA_NP] . nwait) {
    1150:	4806      	ldr	r0, [pc, #24]	; (116c <__pi_free+0x44>)
    1152:	7803      	ldrb	r3, [r0, #0]
    1154:	b123      	cbz	r3, 1160 <__pi_free+0x38>
		trigger ((aword)(&(mevent [MA_NP])));
    1156:	f7ff fef3 	bl	f40 <__pi_trigger>
		mevent [MA_NP] . nwait --;
    115a:	7803      	ldrb	r3, [r0, #0]
    115c:	3b01      	subs	r3, #1
    115e:	7003      	strb	r3, [r0, #0]
}
    1160:	bd08      	pop	{r3, pc}
    1162:	bf00      	nop
    1164:	00002c5a 	andeq	r2, r0, sl, asr ip
    1168:	20000024 	andcs	r0, r0, r4, lsr #32
    116c:	20000028 	andcs	r0, r0, r8, lsr #32

00001170 <kill>:
void kill (aword pid) {
    1170:	b510      	push	{r4, lr}
	if (pid == 0)
    1172:	b908      	cbnz	r0, 1178 <kill+0x8>
		pid = (aword) __pi_curr;
    1174:	4b0f      	ldr	r3, [pc, #60]	; (11b4 <kill+0x44>)
    1176:	6818      	ldr	r0, [r3, #0]
	j = NULL;
    1178:	2200      	movs	r2, #0
	for_all_tasks (i) {
    117a:	4b0f      	ldr	r3, [pc, #60]	; (11b8 <kill+0x48>)
    117c:	681c      	ldr	r4, [r3, #0]
    117e:	b91c      	cbnz	r4, 1188 <kill+0x18>
	syserror (EREQPAR, "kpi");
    1180:	2003      	movs	r0, #3
    1182:	490e      	ldr	r1, [pc, #56]	; (11bc <kill+0x4c>)
    1184:	f7ff f8d8 	bl	338 <__pi_syserror>
		if ((aword)i == pid) {
    1188:	4284      	cmp	r4, r0
    118a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    118c:	d10e      	bne.n	11ac <kill+0x3c>
			if (j == NULL)
    118e:	b95a      	cbnz	r2, 11a8 <kill+0x38>
				__PCB = i->Next;
    1190:	6019      	str	r1, [r3, #0]
			killev (i);
    1192:	4620      	mov	r0, r4
    1194:	f7ff fdd8 	bl	d48 <killev>
			ufree (i);
    1198:	f7ff ffc6 	bl	1128 <__pi_free>
			if (i == __pi_curr)
    119c:	4b05      	ldr	r3, [pc, #20]	; (11b4 <kill+0x44>)
    119e:	681b      	ldr	r3, [r3, #0]
    11a0:	42a3      	cmp	r3, r4
    11a2:	d106      	bne.n	11b2 <kill+0x42>
				release;
    11a4:	f7ff fc74 	bl	a90 <__pi_release>
				j->Next = i->Next;
    11a8:	62d1      	str	r1, [r2, #44]	; 0x2c
    11aa:	e7f2      	b.n	1192 <kill+0x22>
    11ac:	4622      	mov	r2, r4
    11ae:	460c      	mov	r4, r1
    11b0:	e7e5      	b.n	117e <kill+0xe>
}
    11b2:	bd10      	pop	{r4, pc}
    11b4:	200000b8 	strhcs	r0, [r0], -r8
    11b8:	2000001c 	andcs	r0, r0, ip, lsl r0
    11bc:	00002c5f 	andeq	r2, r0, pc, asr ip

000011c0 <__pi_malloc>:
	if (size < 8)
    11c0:	2807      	cmp	r0, #7
		_size = 2;
    11c2:	bf98      	it	ls
    11c4:	2002      	movls	r0, #2
aword *__pi_malloc (word size) {
    11c6:	b538      	push	{r3, r4, r5, lr}
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c8:	4b21      	ldr	r3, [pc, #132]	; (1250 <__pi_malloc+0x90>)
		_size = (((aword)size) + 3) >> 2;
    11ca:	bf88      	it	hi
    11cc:	3003      	addhi	r0, #3
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11ce:	681c      	ldr	r4, [r3, #0]
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d0:	4920      	ldr	r1, [pc, #128]	; (1254 <__pi_malloc+0x94>)
		_size = (((aword)size) + 3) >> 2;
    11d2:	bf88      	it	hi
    11d4:	0880      	lsrhi	r0, r0, #2
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11d6:	b94c      	cbnz	r4, 11ec <__pi_malloc+0x2c>
		if (mevent [MA_NP] . nfail != 255)
    11d8:	4a1f      	ldr	r2, [pc, #124]	; (1258 <__pi_malloc+0x98>)
    11da:	7853      	ldrb	r3, [r2, #1]
    11dc:	2bff      	cmp	r3, #255	; 0xff
    11de:	d001      	beq.n	11e4 <__pi_malloc+0x24>
			mevent [MA_NP] . nfail ++;
    11e0:	3301      	adds	r3, #1
    11e2:	7053      	strb	r3, [r2, #1]
		mnfree [MA_NP] = 0;
    11e4:	2200      	movs	r2, #0
    11e6:	4b1d      	ldr	r3, [pc, #116]	; (125c <__pi_malloc+0x9c>)
    11e8:	601a      	str	r2, [r3, #0]
	return chunk;
    11ea:	e02f      	b.n	124c <__pi_malloc+0x8c>
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	6862      	ldr	r2, [r4, #4]
    11ee:	428a      	cmp	r2, r1
    11f0:	d003      	beq.n	11fa <__pi_malloc+0x3a>
			syserror (EMALLOC, "malc");
    11f2:	2006      	movs	r0, #6
    11f4:	491a      	ldr	r1, [pc, #104]	; (1260 <__pi_malloc+0xa0>)
    11f6:	f7ff f89f 	bl	338 <__pi_syserror>
		if (m_size (chunk) >= _size)
    11fa:	e954 5201 	ldrd	r5, r2, [r4, #-4]
    11fe:	4285      	cmp	r5, r0
    1200:	d202      	bcs.n	1208 <__pi_malloc+0x48>
		chunk = m_nextp (chunk)) {
    1202:	4623      	mov	r3, r4
    1204:	4614      	mov	r4, r2
    1206:	e7e6      	b.n	11d6 <__pi_malloc+0x16>
		m_setnextp (cc, m_nextp (chunk));
    1208:	601a      	str	r2, [r3, #0]
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    120e:	1a1b      	subs	r3, r3, r0
    1210:	2b08      	cmp	r3, #8
    1212:	d909      	bls.n	1228 <__pi_malloc+0x68>
			m_size (chunk) = _size;
    1214:	f844 0c04 	str.w	r0, [r4, #-4]
			cc = chunk + _size + m_hdrlen;
    1218:	3001      	adds	r0, #1
    121a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
			m_size (cc) = waste - m_hdrlen;
    121e:	3b01      	subs	r3, #1
    1220:	f840 3c04 	str.w	r3, [r0, #-4]
			QFREE;
    1224:	f7ff fdae 	bl	d84 <qfree>
		mevent [MA_NP] . nfail = 0;
    1228:	2200      	movs	r2, #0
    122a:	4b0b      	ldr	r3, [pc, #44]	; (1258 <__pi_malloc+0x98>)
		mcfree [MA_NP] -= m_size (chunk);
    122c:	490d      	ldr	r1, [pc, #52]	; (1264 <__pi_malloc+0xa4>)
		mevent [MA_NP] . nfail = 0;
    122e:	705a      	strb	r2, [r3, #1]
		mcfree [MA_NP] -= m_size (chunk);
    1230:	f854 2c04 	ldr.w	r2, [r4, #-4]
    1234:	680b      	ldr	r3, [r1, #0]
    1236:	1a9b      	subs	r3, r3, r2
    1238:	600b      	str	r3, [r1, #0]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    123a:	4908      	ldr	r1, [pc, #32]	; (125c <__pi_malloc+0x9c>)
		m_size (chunk) |= MALLOC_UMASK;
    123c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1240:	6808      	ldr	r0, [r1, #0]
		m_size (chunk) |= MALLOC_UMASK;
    1242:	f844 2c04 	str.w	r2, [r4, #-4]
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1246:	4283      	cmp	r3, r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	bf38      	it	cc
    124a:	600b      	strcc	r3, [r1, #0]
}
    124c:	4620      	mov	r0, r4
    124e:	bd38      	pop	{r3, r4, r5, pc}
    1250:	20000030 	andcs	r0, r0, r0, lsr r0
    1254:	deafdeaf 	cdple	14, 10, cr13, cr15, cr15, {5}
    1258:	20000028 	andcs	r0, r0, r8, lsr #32
    125c:	2000002c 	andcs	r0, r0, ip, lsr #32
    1260:	00002c63 	andeq	r2, r0, r3, ror #24
    1264:	20000024 	andcs	r0, r0, r4, lsr #32

00001268 <__pi_fork>:
aword __pi_fork (fsmcode func, aword data) {
    1268:	b538      	push	{r3, r4, r5, lr}
    126a:	4605      	mov	r5, r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	2030      	movs	r0, #48	; 0x30
aword __pi_fork (fsmcode func, aword data) {
    126e:	460c      	mov	r4, r1
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    1270:	f7ff ffa6 	bl	11c0 <__pi_malloc>
    1274:	2300      	movs	r3, #0
    1276:	b138      	cbz	r0, 1288 <__pi_fork+0x20>
		if ((j = __PCB) == NULL)
    1278:	4a07      	ldr	r2, [pc, #28]	; (1298 <__pi_fork+0x30>)
	i->Status = 0;
    127a:	8003      	strh	r3, [r0, #0]
	i->Next = NULL;
    127c:	62c3      	str	r3, [r0, #44]	; 0x2c
		if ((j = __PCB) == NULL)
    127e:	6813      	ldr	r3, [r2, #0]
	i->data = data;
    1280:	e9c0 5401 	strd	r5, r4, [r0, #4]
		if ((j = __PCB) == NULL)
    1284:	b90b      	cbnz	r3, 128a <__pi_fork+0x22>
			__PCB = i;
    1286:	6010      	str	r0, [r2, #0]
}
    1288:	bd38      	pop	{r3, r4, r5, pc}
			for (; j->Next != NULL; j = j->Next);
    128a:	461a      	mov	r2, r3
    128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    128e:	2b00      	cmp	r3, #0
    1290:	d1fb      	bne.n	128a <__pi_fork+0x22>
			j->Next = i;
    1292:	62d0      	str	r0, [r2, #44]	; 0x2c
	return (aword) i;
    1294:	e7f8      	b.n	1288 <__pi_fork+0x20>
    1296:	bf00      	nop
    1298:	2000001c 	andcs	r0, r0, ip, lsl r0

0000129c <__pi_waitmem>:
	if (mevent [MA_NP] . nwait != 255)
    129c:	4a04      	ldr	r2, [pc, #16]	; (12b0 <__pi_waitmem+0x14>)
void __pi_waitmem (word state) {
    129e:	4601      	mov	r1, r0
	if (mevent [MA_NP] . nwait != 255)
    12a0:	7813      	ldrb	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    12a2:	4803      	ldr	r0, [pc, #12]	; (12b0 <__pi_waitmem+0x14>)
	if (mevent [MA_NP] . nwait != 255)
    12a4:	2bff      	cmp	r3, #255	; 0xff
		mevent [MA_NP] . nwait ++;
    12a6:	bf1c      	itt	ne
    12a8:	3301      	addne	r3, #1
    12aa:	7013      	strbne	r3, [r2, #0]
	wait ((aword)(&(mevent [MA_NP])), state);
    12ac:	f7ff be2e 	b.w	f0c <__pi_wait>
    12b0:	20000028 	andcs	r0, r0, r8, lsr #32

000012b4 <diag>:

#endif	/* dbg_level */

#if	DIAG_MESSAGES

void diag (const char *mess, ...) {
    12b4:	b40f      	push	{r0, r1, r2, r3}
    12b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    12ba:	ab0a      	add	r3, sp, #40	; 0x28
    12bc:	f853 4b04 	ldr.w	r4, [r3], #4
	sint bc;
	word v;
	byte is;

	va_start (ap, mess);
	diag_disable_int (a, is);
    12c0:	2015      	movs	r0, #21
	va_start (ap, mess);
    12c2:	9301      	str	r3, [sp, #4]
	diag_disable_int (a, is);
    12c4:	4b46      	ldr	r3, [pc, #280]	; (13e0 <diag+0x12c>)
				d = (bc == 16) ? 10000 : 1000000000;
				while (1) {
					// Strip initial zeros
					v = (word) (val / d);
					if (v || d == 1) break;
					d /= 10;
    12c6:	270a      	movs	r7, #10
	diag_disable_int (a, is);
    12c8:	681b      	ldr	r3, [r3, #0]
				d = (bc == 16) ? 10000 : 1000000000;
    12ca:	f8df 811c 	ldr.w	r8, [pc, #284]	; 13e8 <diag+0x134>
	diag_disable_int (a, is);
    12ce:	695b      	ldr	r3, [r3, #20]
    12d0:	4798      	blx	r3
	while (*mess != '\0') {
    12d2:	7820      	ldrb	r0, [r4, #0]
    12d4:	b998      	cbnz	r0, 12fe <diag+0x4a>
		} else {
			dgout (*mess++);
		}
	}

	dgout ('\r');
    12d6:	200d      	movs	r0, #13
    12d8:	f7ff fd94 	bl	e04 <dgout>
	dgout ('\n');
    12dc:	200a      	movs	r0, #10
    12de:	f7ff fd91 	bl	e04 <dgout>
    12e2:	4a40      	ldr	r2, [pc, #256]	; (13e4 <diag+0x130>)
    12e4:	6813      	ldr	r3, [r2, #0]
	diag_wait (a);
    12e6:	071b      	lsls	r3, r3, #28
    12e8:	d4fc      	bmi.n	12e4 <diag+0x30>
	diag_enable_int (a, is);
    12ea:	4b3d      	ldr	r3, [pc, #244]	; (13e0 <diag+0x12c>)
    12ec:	2015      	movs	r0, #21
    12ee:	681b      	ldr	r3, [r3, #0]
    12f0:	691b      	ldr	r3, [r3, #16]
    12f2:	4798      	blx	r3
}
    12f4:	b003      	add	sp, #12
    12f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12fa:	b004      	add	sp, #16
    12fc:	4770      	bx	lr
		if (*mess == '%') {
    12fe:	2825      	cmp	r0, #37	; 0x25
    1300:	f104 0601 	add.w	r6, r4, #1
    1304:	d169      	bne.n	13da <diag+0x126>
			if (*mess == 'l') {
    1306:	9b01      	ldr	r3, [sp, #4]
    1308:	7862      	ldrb	r2, [r4, #1]
    130a:	f853 1b04 	ldr.w	r1, [r3], #4
    130e:	2a6c      	cmp	r2, #108	; 0x6c
				mess++;
    1310:	bf08      	it	eq
    1312:	1ca6      	addeq	r6, r4, #2
				val = va_arg (ap, lword);
    1314:	9301      	str	r3, [sp, #4]
			switch (*mess) {
    1316:	7833      	ldrb	r3, [r6, #0]
				bc = 32;
    1318:	bf0c      	ite	eq
    131a:	2520      	moveq	r5, #32
				bc = 16;
    131c:	2510      	movne	r5, #16
			switch (*mess) {
    131e:	2b75      	cmp	r3, #117	; 0x75
    1320:	d04e      	beq.n	13c0 <diag+0x10c>
    1322:	d80a      	bhi.n	133a <diag+0x86>
    1324:	2b64      	cmp	r3, #100	; 0x64
    1326:	d01c      	beq.n	1362 <diag+0xae>
    1328:	2b73      	cmp	r3, #115	; 0x73
    132a:	d052      	beq.n	13d2 <diag+0x11e>
				dgout ('%');
    132c:	2025      	movs	r0, #37	; 0x25
    132e:	f7ff fd69 	bl	e04 <dgout>
				dgout (*mess);
    1332:	7830      	ldrb	r0, [r6, #0]
    1334:	f7ff fd66 	bl	e04 <dgout>
    1338:	e010      	b.n	135c <diag+0xa8>
			switch (*mess) {
    133a:	2b78      	cmp	r3, #120	; 0x78
    133c:	d1f6      	bne.n	132c <diag+0x78>
    133e:	2400      	movs	r4, #0
					v = __pi_hex_enc_table [
    1340:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 13ec <diag+0x138>
					i += 4;
    1344:	3404      	adds	r4, #4
					(val >> (bc - i)) & 0xf];
    1346:	1b2b      	subs	r3, r5, r4
    1348:	fa21 f303 	lsr.w	r3, r1, r3
    134c:	f003 030f 	and.w	r3, r3, #15
					dgout (v);
    1350:	f819 0003 	ldrb.w	r0, [r9, r3]
    1354:	f7ff fd56 	bl	e04 <dgout>
				while (i < bc) {
    1358:	42a5      	cmp	r5, r4
    135a:	dcf3      	bgt.n	1344 <diag+0x90>
			mess++;
    135c:	3601      	adds	r6, #1
					d /= 10;
    135e:	4634      	mov	r4, r6
    1360:	e7b7      	b.n	12d2 <diag+0x1e>
				if ((val >> (bc - 1)) & 1) {
    1362:	1e6b      	subs	r3, r5, #1
    1364:	fa21 f303 	lsr.w	r3, r1, r3
    1368:	07da      	lsls	r2, r3, #31
    136a:	d509      	bpl.n	1380 <diag+0xcc>
					dgout ('-');
    136c:	202d      	movs	r0, #45	; 0x2d
    136e:	f7ff fd49 	bl	e04 <dgout>
					if (bc == 16)
    1372:	2d10      	cmp	r5, #16
						val |= 0xffff0000;
    1374:	bf04      	itt	eq
    1376:	ea6f 4101 	mvneq.w	r1, r1, lsl #16
    137a:	ea6f 4111 	mvneq.w	r1, r1, lsr #16
					val = ~val + 1;
    137e:	4249      	negs	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    1380:	f242 7410 	movw	r4, #10000	; 0x2710
    1384:	2d10      	cmp	r5, #16
    1386:	bf18      	it	ne
    1388:	4644      	movne	r4, r8
					v = (word) (val / d);
    138a:	fbb1 f5f4 	udiv	r5, r1, r4
    138e:	b2ad      	uxth	r5, r5
					if (v || d == 1) break;
    1390:	b935      	cbnz	r5, 13a0 <diag+0xec>
    1392:	2c01      	cmp	r4, #1
    1394:	d004      	beq.n	13a0 <diag+0xec>
					d /= 10;
    1396:	fbb4 f4f7 	udiv	r4, r4, r7
					v = (word) (val / d);
    139a:	e7f6      	b.n	138a <diag+0xd6>
				d = (bc == 16) ? 10000 : 1000000000;
    139c:	4c12      	ldr	r4, [pc, #72]	; (13e8 <diag+0x134>)
    139e:	e7f4      	b.n	138a <diag+0xd6>
					dgout (v + '0');
    13a0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    13a4:	b280      	uxth	r0, r0
    13a6:	f7ff fd2d 	bl	e04 <dgout>
					if (d == 0) break;
    13aa:	2c09      	cmp	r4, #9
					d /= 10;
    13ac:	fbb4 f3f7 	udiv	r3, r4, r7
					val = val - (v * d);
    13b0:	fb04 1115 	mls	r1, r4, r5, r1
					if (d == 0) break;
    13b4:	d9d2      	bls.n	135c <diag+0xa8>
					v = (word) (val / d);
    13b6:	fbb1 f5f3 	udiv	r5, r1, r3
					d /= 10;
    13ba:	461c      	mov	r4, r3
					v = (word) (val / d);
    13bc:	b2ad      	uxth	r5, r5
					dgout (v + '0');
    13be:	e7ef      	b.n	13a0 <diag+0xec>
				if (bc == 16)
    13c0:	2d10      	cmp	r5, #16
    13c2:	d1eb      	bne.n	139c <diag+0xe8>
				d = (bc == 16) ? 10000 : 1000000000;
    13c4:	f242 7410 	movw	r4, #10000	; 0x2710
					val &= 0xffff;
    13c8:	b289      	uxth	r1, r1
				d = (bc == 16) ? 10000 : 1000000000;
    13ca:	e7de      	b.n	138a <diag+0xd6>
					dgout (*s);
    13cc:	f7ff fd1a 	bl	e04 <dgout>
					s++;
    13d0:	3101      	adds	r1, #1
				while (*s != '\0') {
    13d2:	7808      	ldrb	r0, [r1, #0]
    13d4:	2800      	cmp	r0, #0
    13d6:	d1f9      	bne.n	13cc <diag+0x118>
    13d8:	e7c0      	b.n	135c <diag+0xa8>
			dgout (*mess++);
    13da:	f7ff fd13 	bl	e04 <dgout>
    13de:	e7be      	b.n	135e <diag+0xaa>
    13e0:	100001b0 			; <UNDEFINED> instruction: 0x100001b0
    13e4:	40001018 	andmi	r1, r0, r8, lsl r0
    13e8:	3b9aca00 	blcc	fe6b3bf0 <_estack+0xde6aebf0>
    13ec:	00002c68 	andeq	r2, r0, r8, ror #24

000013f0 <tcv_init>:
	tcv_tservice = create TCVTimerService;
	tcv_tservice -> _pp_apid_ ();
#endif	/* __SMURPH__ */

#endif	/* TCV_TIMERS */
}
    13f0:	4770      	bx	lr

000013f2 <NmiSR>:
NmiSRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    13f2:	e7fe      	b.n	13f2 <NmiSR>

000013f4 <FaultISR>:
FaultISRHandler(void)
{
    //
    // Enter an infinite loop.
    //
    while(1)
    13f4:	e7fe      	b.n	13f4 <FaultISR>

000013f6 <AONIntHandler>:
IntDefaultHandler(void)
{
    //
    // Go into an infinite loop.
    //
    while(1)
    13f6:	e7fe      	b.n	13f6 <AONIntHandler>

000013f8 <ResetISR>:
{
    13f8:	b508      	push	{r3, lr}
    SetupTrimDevice();
    13fa:	f000 fddb 	bl	1fb4 <NOROM_SetupTrimDevice>
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    13fe:	4b0c      	ldr	r3, [pc, #48]	; (1430 <zero_loop+0x20>)
    pui32Src = &_etext;
    1400:	4a0c      	ldr	r2, [pc, #48]	; (1434 <zero_loop+0x24>)
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1402:	490d      	ldr	r1, [pc, #52]	; (1438 <zero_loop+0x28>)
    1404:	428b      	cmp	r3, r1
    1406:	d30d      	bcc.n	1424 <zero_loop+0x14>
    __asm("    ldr     r0, =_bss\n"
    1408:	480c      	ldr	r0, [pc, #48]	; (143c <zero_loop+0x2c>)
    140a:	490d      	ldr	r1, [pc, #52]	; (1440 <zero_loop+0x30>)
    140c:	f04f 0200 	mov.w	r2, #0

00001410 <zero_loop>:
    1410:	4288      	cmp	r0, r1
    1412:	bfb8      	it	lt
    1414:	f840 2b04 	strlt.w	r2, [r0], #4
    1418:	dbfa      	blt.n	1410 <zero_loop>
   main();
    141a:	f7ff fc65 	bl	ce8 <main>
    FaultISR();
    141e:	f7ff ffe9 	bl	13f4 <FaultISR>
}
    1422:	bd08      	pop	{r3, pc}
        *pui32Dest++ = *pui32Src++;
    1424:	f852 0b04 	ldr.w	r0, [r2], #4
    1428:	f843 0b04 	str.w	r0, [r3], #4
    142c:	e7ea      	b.n	1404 <ResetISR+0xc>
    142e:	bf00      	nop
    1430:	20000000 	andcs	r0, r0, r0
    1434:	00002c80 	andeq	r2, r0, r0, lsl #25
    1438:	20000000 	andcs	r0, r0, r0
    143c:	20000000 	andcs	r0, r0, r0
    1440:	200000bc 	strhcs	r0, [r0], -ip

00001444 <get_byte>:

static word	left;

// ============================================================================

static byte get_byte () {
    1444:	2308      	movs	r3, #8

	int i;
	byte b;

	for (b = 0, i = 0; i < 8; i++) {
    1446:	2000      	movs	r0, #0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1448:	f44f 6280 	mov.w	r2, #1024	; 0x400
static byte get_byte () {
    144c:	b570      	push	{r4, r5, r6, lr}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    144e:	4907      	ldr	r1, [pc, #28]	; (146c <get_byte+0x28>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1450:	4d07      	ldr	r5, [pc, #28]	; (1470 <get_byte+0x2c>)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1452:	4c08      	ldr	r4, [pc, #32]	; (1474 <get_byte+0x30>)
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	682e      	ldr	r6, [r5, #0]
		b <<= 1;
    1456:	0040      	lsls	r0, r0, #1
		if (ee_inp)
    1458:	05f6      	lsls	r6, r6, #23
		b <<= 1;
    145a:	b2c0      	uxtb	r0, r0
			b |= 1;
    145c:	bf48      	it	mi
    145e:	f040 0001 	orrmi.w	r0, r0, #1
	for (b = 0, i = 0; i < 8; i++) {
    1462:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1464:	6022      	str	r2, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1466:	600a      	str	r2, [r1, #0]
    1468:	d1f4      	bne.n	1454 <get_byte+0x10>
		ee_clkh;
		ee_clkl;
	}

	return b;
}
    146a:	bd70      	pop	{r4, r5, r6, pc}
    146c:	400220a0 	andmi	r2, r2, r0, lsr #1
    1470:	400220c0 	andmi	r2, r2, r0, asr #1
    1474:	40022090 	mulmi	r2, r0, r0

00001478 <put_byte>:

static void put_byte (byte b) {
    1478:	b530      	push	{r4, r5, lr}
    147a:	2308      	movs	r3, #8
    147c:	f44f 7500 	mov.w	r5, #512	; 0x200
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1480:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1484:	4c06      	ldr	r4, [pc, #24]	; (14a0 <put_byte+0x28>)
    1486:	4a07      	ldr	r2, [pc, #28]	; (14a4 <put_byte+0x2c>)

	int i;

	for (i = 0; i < 8; i++) {
		if (b & 0x80)
    1488:	f010 0f80 	tst.w	r0, #128	; 0x80
    148c:	bf14      	ite	ne
    148e:	6025      	strne	r5, [r4, #0]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1490:	6015      	streq	r5, [r2, #0]
			ee_outh;
		else
			ee_outl;
		ee_clkh;
		ee_clkl;
		b <<= 1;
    1492:	0040      	lsls	r0, r0, #1
	for (i = 0; i < 8; i++) {
    1494:	3b01      	subs	r3, #1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1496:	6021      	str	r1, [r4, #0]
		b <<= 1;
    1498:	b2c0      	uxtb	r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    149a:	6011      	str	r1, [r2, #0]
	for (i = 0; i < 8; i++) {
    149c:	d1f4      	bne.n	1488 <put_byte+0x10>
	}
}
    149e:	bd30      	pop	{r4, r5, pc}
    14a0:	40022090 	mulmi	r2, r0, r0
    14a4:	400220a0 	andmi	r2, r2, r0, lsr #1

000014a8 <cmd_0>:
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14a8:	2301      	movs	r3, #1

// ============================================================================

static void cmd_0 (byte cmd) {
    14aa:	b510      	push	{r4, lr}
    14ac:	4c03      	ldr	r4, [pc, #12]	; (14bc <cmd_0+0x14>)
    14ae:	6023      	str	r3, [r4, #0]

	ee_start;
	put_byte (cmd);
    14b0:	f7ff ffe2 	bl	1478 <put_byte>
    14b4:	2300      	movs	r3, #0
    14b6:	6023      	str	r3, [r4, #0]
	ee_stop;
}
    14b8:	bd10      	pop	{r4, pc}
    14ba:	bf00      	nop
    14bc:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

000014c0 <wwait>:
	r = get_byte ();
	ee_stop;
	return r;
}

static void wwait (word st, word del) {
    14c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14c4:	4604      	mov	r4, r0
    14c6:	460d      	mov	r5, r1
    14c8:	2701      	movs	r7, #1
//
// Wait for write to complete
//
	while (dopen && (rdsr () & 1)) {
    14ca:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1510 <wwait+0x50>
    14ce:	4e0f      	ldr	r6, [pc, #60]	; (150c <wwait+0x4c>)
    14d0:	f898 3000 	ldrb.w	r3, [r8]
    14d4:	b14b      	cbz	r3, 14ea <wwait+0x2a>
	put_byte (CMD_RDSR);
    14d6:	2005      	movs	r0, #5
    14d8:	6037      	str	r7, [r6, #0]
    14da:	f7ff ffcd 	bl	1478 <put_byte>
	r = get_byte ();
    14de:	f7ff ffb1 	bl	1444 <get_byte>
    14e2:	2300      	movs	r3, #0
    14e4:	6033      	str	r3, [r6, #0]
	while (dopen && (rdsr () & 1)) {
    14e6:	07c3      	lsls	r3, r0, #31
    14e8:	d401      	bmi.n	14ee <wwait+0x2e>
		else {
			delay (del, st);
			release;
		}
	}
}
    14ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (st == WNONE)
    14ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    14f2:	429c      	cmp	r4, r3
    14f4:	d103      	bne.n	14fe <wwait+0x3e>
			mdelay (1);
    14f6:	2001      	movs	r0, #1
    14f8:	f7fe feea 	bl	2d0 <mdelay>
    14fc:	e7e8      	b.n	14d0 <wwait+0x10>
			delay (del, st);
    14fe:	4621      	mov	r1, r4
    1500:	4628      	mov	r0, r5
    1502:	f7ff fd49 	bl	f98 <delay>
			release;
    1506:	f7ff fac3 	bl	a90 <__pi_release>
    150a:	bf00      	nop
    150c:	42441a50 	submi	r1, r4, #80, 20	; 0x50000
    1510:	20000034 	andcs	r0, r0, r4, lsr r0

00001514 <ready>:
		dopen = 0;
		ee_bring_down;
	}
}

static void ready () {
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//
// Called before a new operation to make sure the chip is ready
//
	if (dopen) {
    1516:	4d0c      	ldr	r5, [pc, #48]	; (1548 <ready+0x34>)
    1518:	782f      	ldrb	r7, [r5, #0]
    151a:	b147      	cbz	r7, 152e <ready+0x1a>
		// The device is open
		wwait (WNONE, 1);
    151c:	2101      	movs	r1, #1
    151e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1522:	f7ff ffcd 	bl	14c0 <wwait>
	} else {
		copen ();
		dopen = DOPEN_TEMP;
	}

	dstat = 0;
    1526:	2200      	movs	r2, #0
    1528:	4b08      	ldr	r3, [pc, #32]	; (154c <ready+0x38>)
    152a:	701a      	strb	r2, [r3, #0]
}
    152c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    152e:	2401      	movs	r4, #1
    1530:	4e07      	ldr	r6, [pc, #28]	; (1550 <ready+0x3c>)
	udelay (1);
    1532:	4620      	mov	r0, r4
    1534:	6034      	str	r4, [r6, #0]
    1536:	f7fe feb5 	bl	2a4 <udelay>
	udelay (1);
    153a:	4620      	mov	r0, r4
    153c:	6037      	str	r7, [r6, #0]
    153e:	f7fe feb1 	bl	2a4 <udelay>
		dopen = DOPEN_TEMP;
    1542:	2302      	movs	r3, #2
    1544:	702b      	strb	r3, [r5, #0]
    1546:	e7ee      	b.n	1526 <ready+0x12>
    1548:	20000034 	andcs	r0, r0, r4, lsr r0
    154c:	20000035 	andcs	r0, r0, r5, lsr r0
    1550:	42441a50 	submi	r1, r4, #80, 20	; 0x50000

00001554 <cclose>:
static void cclose () {
    1554:	b510      	push	{r4, lr}
	if (dopen == DOPEN_TEMP) {
    1556:	4c07      	ldr	r4, [pc, #28]	; (1574 <cclose+0x20>)
    1558:	7823      	ldrb	r3, [r4, #0]
    155a:	2b02      	cmp	r3, #2
    155c:	d109      	bne.n	1572 <cclose+0x1e>
		wwait (WNONE, 1);
    155e:	2101      	movs	r1, #1
    1560:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1564:	f7ff ffac 	bl	14c0 <wwait>
	cmd_0 (CMD_DP);
    1568:	20b9      	movs	r0, #185	; 0xb9
    156a:	f7ff ff9d 	bl	14a8 <cmd_0>
		dopen = 0;
    156e:	2300      	movs	r3, #0
    1570:	7023      	strb	r3, [r4, #0]
}
    1572:	bd10      	pop	{r4, pc}
    1574:	20000034 	andcs	r0, r0, r4, lsr r0

00001578 <ee_open>:

// ============================================================================

word ee_open () {
    1578:	b508      	push	{r3, lr}
//
// Open (for more than one operation)
//
	ready ();
    157a:	f7ff ffcb 	bl	1514 <ready>
	dopen = DOPEN_PERM;
    157e:	2201      	movs	r2, #1
    1580:	4b01      	ldr	r3, [pc, #4]	; (1588 <ee_open+0x10>)
		ee_stop;
		diag ("ID: %x %x %x", r [0], r [1], r [2]);
	}
#endif
	return 0;
}
    1582:	2000      	movs	r0, #0
	dopen = DOPEN_PERM;
    1584:	701a      	strb	r2, [r3, #0]
}
    1586:	bd08      	pop	{r3, pc}
    1588:	20000034 	andcs	r0, r0, r4, lsr r0

0000158c <ee_close>:

void ee_close () {

	if (dopen) {
    158c:	4b03      	ldr	r3, [pc, #12]	; (159c <ee_close+0x10>)
    158e:	781a      	ldrb	r2, [r3, #0]
    1590:	b11a      	cbz	r2, 159a <ee_close+0xe>
		dopen = DOPEN_TEMP;
    1592:	2202      	movs	r2, #2
    1594:	701a      	strb	r2, [r3, #0]
		cclose ();
    1596:	f7ff bfdd 	b.w	1554 <cclose>
	}
}
    159a:	4770      	bx	lr
    159c:	20000034 	andcs	r0, r0, r4, lsr r0

000015a0 <ser_in>:

extern char *__inpline;

procname (__inserial);

int ser_in (word st, char *buf, int len) {
    15a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a2:	4604      	mov	r4, r0
    15a4:	460f      	mov	r7, r1
/* ======= */
/* Direct */
/* ====== */
	int prcs;

	if (len == 0)
    15a6:	4615      	mov	r5, r2
    15a8:	b37a      	cbz	r2, 160a <ser_in+0x6a>
		// Just in case
		return 0;

	if (__inpline == NULL) {
    15aa:	4e19      	ldr	r6, [pc, #100]	; (1610 <ser_in+0x70>)
    15ac:	6830      	ldr	r0, [r6, #0]
    15ae:	b988      	cbnz	r0, 15d4 <ser_in+0x34>
		if ((prcs = running (__inserial)) == 0) {
    15b0:	4818      	ldr	r0, [pc, #96]	; (1614 <ser_in+0x74>)
    15b2:	f7ff fd0d 	bl	fd0 <running>
    15b6:	b948      	cbnz	r0, 15cc <ser_in+0x2c>
			prcs = runthread (__inserial);
    15b8:	4601      	mov	r1, r0
    15ba:	4816      	ldr	r0, [pc, #88]	; (1614 <ser_in+0x74>)
    15bc:	f7ff fe54 	bl	1268 <__pi_fork>
			if (prcs == 0) {
    15c0:	b920      	cbnz	r0, 15cc <ser_in+0x2c>
				npwait (st);
    15c2:	4620      	mov	r0, r4
    15c4:	f7ff fe6a 	bl	129c <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    15c8:	f7ff fa62 	bl	a90 <__pi_release>
		join (prcs, st);
    15cc:	4621      	mov	r1, r4
    15ce:	f7ff fcd1 	bl	f74 <__pi_join>
    15d2:	e7f9      	b.n	15c8 <ser_in+0x28>
	}

	/* Input available */
	if (*__inpline == NULL) // bin cmd
    15d4:	7803      	ldrb	r3, [r0, #0]
    15d6:	b9a3      	cbnz	r3, 1602 <ser_in+0x62>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15d8:	7844      	ldrb	r4, [r0, #1]
    15da:	3403      	adds	r4, #3
	else
		prcs = strlen (__inpline);

	if (prcs >= len)
    15dc:	42ac      	cmp	r4, r5
		prcs = len-1;
    15de:	bfa8      	it	ge
    15e0:	f105 34ff 	addge.w	r4, r5, #4294967295	; 0xffffffff

	memcpy (buf, __inpline, prcs);
    15e4:	4622      	mov	r2, r4
    15e6:	4638      	mov	r0, r7
    15e8:	6831      	ldr	r1, [r6, #0]
    15ea:	f7ff fd0a 	bl	1002 <__pi_memcpy>
	ufree (__inpline);
    15ee:	6830      	ldr	r0, [r6, #0]
    15f0:	f7ff fd9a 	bl	1128 <__pi_free>
	__inpline = NULL;
    15f4:	2300      	movs	r3, #0
    15f6:	6033      	str	r3, [r6, #0]
	if (*buf) // if it's NULL, it's a bin cmd
    15f8:	783a      	ldrb	r2, [r7, #0]
    15fa:	b102      	cbz	r2, 15fe <ser_in+0x5e>
		buf [prcs] = '\0';
    15fc:	553b      	strb	r3, [r7, r4]
	return prcs;
}
    15fe:	4620      	mov	r0, r4
    1600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prcs = strlen (__inpline);
    1602:	f7ff fcf7 	bl	ff4 <__pi_strlen>
    1606:	4604      	mov	r4, r0
    1608:	e7e8      	b.n	15dc <ser_in+0x3c>
		return 0;
    160a:	4614      	mov	r4, r2
    160c:	e7f7      	b.n	15fe <ser_in+0x5e>
    160e:	bf00      	nop
    1610:	20000040 	andcs	r0, r0, r0, asr #32
    1614:	0000173d 	andeq	r1, r0, sp, lsr r7

00001618 <ser_outf>:

//+++ "__outserial.c"

procname (__outserial);

int ser_outf (word st, const char *m, ...) {
    1618:	b40e      	push	{r1, r2, r3}
    161a:	b577      	push	{r0, r1, r2, r4, r5, r6, lr}
    161c:	4604      	mov	r4, r0

	int prcs;
	char *buf;
	va_list ap;

	if ((prcs = running (__outserial)) != 0) {
    161e:	4812      	ldr	r0, [pc, #72]	; (1668 <ser_outf+0x50>)
    1620:	f7ff fcd6 	bl	fd0 <running>
    1624:	4606      	mov	r6, r0
    1626:	b120      	cbz	r0, 1632 <ser_outf+0x1a>
		/* We have to wait */
		join (prcs, st);
    1628:	4621      	mov	r1, r4
    162a:	f7ff fca3 	bl	f74 <__pi_join>
	if ((buf = vform (NULL, m, ap)) == NULL) {
		/*
		 * This means that we are out of memory
		 */
		umwait (st);
		release;
    162e:	f7ff fa2f 	bl	a90 <__pi_release>
	va_start (ap, m);
    1632:	aa08      	add	r2, sp, #32
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1634:	9907      	ldr	r1, [sp, #28]
	va_start (ap, m);
    1636:	9201      	str	r2, [sp, #4]
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1638:	f000 fa36 	bl	1aa8 <vform>
    163c:	4605      	mov	r5, r0
    163e:	b918      	cbnz	r0, 1648 <ser_outf+0x30>
		umwait (st);
    1640:	4620      	mov	r0, r4
    1642:	f7ff fe2b 	bl	129c <__pi_waitmem>
    1646:	e7f2      	b.n	162e <ser_outf+0x16>
	}

	if (runstrand (__outserial, buf) == 0) {
    1648:	4601      	mov	r1, r0
    164a:	4807      	ldr	r0, [pc, #28]	; (1668 <ser_outf+0x50>)
    164c:	f7ff fe0c 	bl	1268 <__pi_fork>
    1650:	b918      	cbnz	r0, 165a <ser_outf+0x42>
		ufree (buf);
    1652:	4628      	mov	r0, r5
    1654:	f7ff fd68 	bl	1128 <__pi_free>
		npwait (st);
    1658:	e7f2      	b.n	1640 <ser_outf+0x28>
		release;
	}

	return 0;
}
    165a:	4630      	mov	r0, r6
    165c:	b003      	add	sp, #12
    165e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1662:	b003      	add	sp, #12
    1664:	4770      	bx	lr
    1666:	bf00      	nop
    1668:	000016cd 	andeq	r1, r0, sp, asr #13

0000166c <ser_inf>:

extern char *__inpline;

procname (__inserial);

int ser_inf (word st, const char *fmt, ...) {
    166c:	b40e      	push	{r1, r2, r3}
    166e:	b533      	push	{r0, r1, r4, r5, lr}
    1670:	9905      	ldr	r1, [sp, #20]
    1672:	4604      	mov	r4, r0
/* ========= */

	int prcs;
	va_list	ap;

	if (fmt == NULL)
    1674:	b321      	cbz	r1, 16c0 <ser_inf+0x54>
		return 0;

	if (__inpline == NULL) {
    1676:	4d13      	ldr	r5, [pc, #76]	; (16c4 <ser_inf+0x58>)
    1678:	6828      	ldr	r0, [r5, #0]
    167a:	b988      	cbnz	r0, 16a0 <ser_inf+0x34>
		if ((prcs = running (__inserial)) == 0) {
    167c:	4812      	ldr	r0, [pc, #72]	; (16c8 <ser_inf+0x5c>)
    167e:	f7ff fca7 	bl	fd0 <running>
    1682:	b948      	cbnz	r0, 1698 <ser_inf+0x2c>
			prcs = runthread (__inserial);
    1684:	4601      	mov	r1, r0
    1686:	4810      	ldr	r0, [pc, #64]	; (16c8 <ser_inf+0x5c>)
    1688:	f7ff fdee 	bl	1268 <__pi_fork>
			if (prcs == 0) {
    168c:	b920      	cbnz	r0, 1698 <ser_inf+0x2c>
				npwait (st);
    168e:	4620      	mov	r0, r4
    1690:	f7ff fe04 	bl	129c <__pi_waitmem>
				release;
			}
		}
		join (prcs, st);
		release;
    1694:	f7ff f9fc 	bl	a90 <__pi_release>
		join (prcs, st);
    1698:	4621      	mov	r1, r4
    169a:	f7ff fc6b 	bl	f74 <__pi_join>
    169e:	e7f9      	b.n	1694 <ser_inf+0x28>
	}

	/* Input available */
	va_start (ap, fmt);
    16a0:	aa06      	add	r2, sp, #24
    16a2:	9201      	str	r2, [sp, #4]

	prcs = vscan (__inpline, fmt, ap);
    16a4:	f000 fa28 	bl	1af8 <vscan>
    16a8:	4604      	mov	r4, r0

	ufree (__inpline);
    16aa:	6828      	ldr	r0, [r5, #0]
    16ac:	f7ff fd3c 	bl	1128 <__pi_free>
	__inpline = NULL;
    16b0:	2300      	movs	r3, #0
    16b2:	602b      	str	r3, [r5, #0]

	return prcs;
}
    16b4:	4620      	mov	r0, r4
    16b6:	b002      	add	sp, #8
    16b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    16bc:	b003      	add	sp, #12
    16be:	4770      	bx	lr
		return 0;
    16c0:	460c      	mov	r4, r1
    16c2:	e7f7      	b.n	16b4 <ser_inf+0x48>
    16c4:	20000040 	andcs	r0, r0, r0, asr #32
    16c8:	0000173d 	andeq	r1, r0, sp, lsr r7

000016cc <__outserial>:
#define	__cport		UART_A
#define	set_cport	CNOP

#endif	/* UART_DRIVER > 1 */

strand (__outserial, const char*)
    16cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16ce:	4b18      	ldr	r3, [pc, #96]	; (1730 <__outserial+0x64>)
    16d0:	681b      	ldr	r3, [r3, #0]
    16d2:	689d      	ldr	r5, [r3, #8]
    16d4:	b130      	cbz	r0, 16e4 <__outserial+0x18>
    16d6:	280a      	cmp	r0, #10
    16d8:	d00d      	beq.n	16f6 <__outserial+0x2a>
	// prone
	goto __OM_WRITE;

	// proceed (OM_WRITE);

endstrand
    16da:	b003      	add	sp, #12
    16dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16e0:	f7ff bb9c 	b.w	e1c <__pi_badstate>
	ptr = data;
    16e4:	4b13      	ldr	r3, [pc, #76]	; (1734 <__outserial+0x68>)
    16e6:	4c14      	ldr	r4, [pc, #80]	; (1738 <__outserial+0x6c>)
    16e8:	601d      	str	r5, [r3, #0]
	if (*ptr)
    16ea:	782b      	ldrb	r3, [r5, #0]
    16ec:	b1e3      	cbz	r3, 1728 <__outserial+0x5c>
		len = strlen (ptr);
    16ee:	4628      	mov	r0, r5
    16f0:	f7ff fc80 	bl	ff4 <__pi_strlen>
    16f4:	6020      	str	r0, [r4, #0]
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16f6:	4e0f      	ldr	r6, [pc, #60]	; (1734 <__outserial+0x68>)
    16f8:	4f0f      	ldr	r7, [pc, #60]	; (1738 <__outserial+0x6c>)
    16fa:	883b      	ldrh	r3, [r7, #0]
    16fc:	2201      	movs	r2, #1
    16fe:	9300      	str	r3, [sp, #0]
    1700:	2100      	movs	r1, #0
    1702:	6833      	ldr	r3, [r6, #0]
    1704:	200a      	movs	r0, #10
    1706:	f7ff fc99 	bl	103c <io>
	ptr += quant;
    170a:	6833      	ldr	r3, [r6, #0]
	len -= quant;
    170c:	683c      	ldr	r4, [r7, #0]
	ptr += quant;
    170e:	4403      	add	r3, r0
	len -= quant;
    1710:	1a24      	subs	r4, r4, r0
	ptr += quant;
    1712:	6033      	str	r3, [r6, #0]
	len -= quant;
    1714:	603c      	str	r4, [r7, #0]
	if (len == 0) {
    1716:	2c00      	cmp	r4, #0
    1718:	d1ef      	bne.n	16fa <__outserial+0x2e>
		ufree (data);
    171a:	4628      	mov	r0, r5
    171c:	f7ff fd04 	bl	1128 <__pi_free>
		finish;
    1720:	4620      	mov	r0, r4
    1722:	f7ff fd25 	bl	1170 <kill>
    1726:	e7e8      	b.n	16fa <__outserial+0x2e>
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1728:	786b      	ldrb	r3, [r5, #1]
    172a:	3303      	adds	r3, #3
    172c:	6023      	str	r3, [r4, #0]
    172e:	e7e2      	b.n	16f6 <__outserial+0x2a>
    1730:	200000b8 	strhcs	r0, [r0], -r8
    1734:	2000003c 	andcs	r0, r0, ip, lsr r0
    1738:	20000038 	andcs	r0, r0, r8, lsr r0

0000173c <__inserial>:
#define	IM_INIT		0
#define	IM_READ		1
#define IM_BIN		2
#define IM_BINL		3

strand (__inserial, address)
    173c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    173e:	4d42      	ldr	r5, [pc, #264]	; (1848 <__inserial+0x10c>)
    1740:	682a      	ldr	r2, [r5, #0]
    1742:	6894      	ldr	r4, [r2, #8]
    1744:	2803      	cmp	r0, #3
    1746:	d87a      	bhi.n	183e <__inserial+0x102>
    1748:	e8df f000 	tbb	[pc, r0]
    174c:	5d481802 	stclpl	8, cr1, [r8, #-8]
	static int len;
	int quant;

  entry (IM_INIT)

	if (__inpline != NULL)
    1750:	4b3e      	ldr	r3, [pc, #248]	; (184c <__inserial+0x110>)
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	b113      	cbz	r3, 175c <__inserial+0x20>
		/* Never overwrite previous unclaimed stuff */
		finish;
    1756:	2000      	movs	r0, #0
    1758:	f7ff fd0a 	bl	1170 <kill>

	// On eCOG char* is non-trivially upgraded from 'address'
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    175c:	2040      	movs	r0, #64	; 0x40
    175e:	f7ff fd2f 	bl	11c0 <__pi_malloc>
    1762:	4b3b      	ldr	r3, [pc, #236]	; (1850 <__inserial+0x114>)
    1764:	4604      	mov	r4, r0
    1766:	6018      	str	r0, [r3, #0]
    1768:	b918      	cbnz	r0, 1772 <__inserial+0x36>
		/*
		 * We have to wait for memory
		 */
		umwait (IM_INIT);
    176a:	f7ff fd97 	bl	129c <__pi_waitmem>
		release;
    176e:	f7ff f98f 	bl	a90 <__pi_release>
	}
	savedata (data);
	len = MAX_LINE_LENGTH;
    1772:	223f      	movs	r2, #63	; 0x3f
	savedata (data);
    1774:	682b      	ldr	r3, [r5, #0]
    1776:	6098      	str	r0, [r3, #8]
	len = MAX_LINE_LENGTH;
    1778:	4b36      	ldr	r3, [pc, #216]	; (1854 <__inserial+0x118>)
    177a:	601a      	str	r2, [r3, #0]
	/* Make sure this doesn't change while we are reading */
	set_cport;

  entry (IM_READ)

	io (IM_READ, __cport, READ, ptr, 1);
    177c:	2001      	movs	r0, #1
    177e:	2200      	movs	r2, #0
    1780:	4d33      	ldr	r5, [pc, #204]	; (1850 <__inserial+0x114>)
    1782:	9000      	str	r0, [sp, #0]
    1784:	682b      	ldr	r3, [r5, #0]
    1786:	4611      	mov	r1, r2
    1788:	f7ff fc58 	bl	103c <io>
	if (ptr == (char*) data) { // new line
    178c:	682b      	ldr	r3, [r5, #0]
    178e:	42a3      	cmp	r3, r4
    1790:	d10d      	bne.n	17ae <__inserial+0x72>
		if (*ptr == '\0') { // bin cmd
    1792:	7823      	ldrb	r3, [r4, #0]
    1794:	b923      	cbnz	r3, 17a0 <__inserial+0x64>
			ptr++;
    1796:	1c63      	adds	r3, r4, #1
			proceed (IM_BIN);
    1798:	2002      	movs	r0, #2
			ptr++;
    179a:	602b      	str	r3, [r5, #0]
			proceed (IM_BIN);
    179c:	f7ff fbac 	bl	ef8 <proceed>
		}

		if (*ptr < 0x20)
    17a0:	682b      	ldr	r3, [r5, #0]
    17a2:	781b      	ldrb	r3, [r3, #0]
    17a4:	2b1f      	cmp	r3, #31
    17a6:	d802      	bhi.n	17ae <__inserial+0x72>
			/* Ignore codes below space at the beginning of line */
			proceed (IM_READ);
    17a8:	2001      	movs	r0, #1
    17aa:	f7ff fba5 	bl	ef8 <proceed>
	}
	if (*ptr == '\n' || *ptr == '\r') {
    17ae:	682b      	ldr	r3, [r5, #0]
    17b0:	781a      	ldrb	r2, [r3, #0]
    17b2:	2a0a      	cmp	r2, #10
    17b4:	d001      	beq.n	17ba <__inserial+0x7e>
    17b6:	2a0d      	cmp	r2, #13
    17b8:	d105      	bne.n	17c6 <__inserial+0x8a>
		*ptr = '\0';
    17ba:	2000      	movs	r0, #0
    17bc:	7018      	strb	r0, [r3, #0]
		__inpline = (char*)data;
    17be:	4b23      	ldr	r3, [pc, #140]	; (184c <__inserial+0x110>)
    17c0:	601c      	str	r4, [r3, #0]
		finish;
    17c2:	f7ff fcd5 	bl	1170 <kill>
	}

	if (len) {
    17c6:	4923      	ldr	r1, [pc, #140]	; (1854 <__inserial+0x118>)
    17c8:	680b      	ldr	r3, [r1, #0]
    17ca:	b123      	cbz	r3, 17d6 <__inserial+0x9a>
		ptr++;
    17cc:	682a      	ldr	r2, [r5, #0]
		len--;
    17ce:	3b01      	subs	r3, #1
		ptr++;
    17d0:	3201      	adds	r2, #1
    17d2:	602a      	str	r2, [r5, #0]
		len--;
    17d4:	600b      	str	r3, [r1, #0]
	}

	proceed (IM_READ);
    17d6:	2001      	movs	r0, #1
    17d8:	f7ff fb8e 	bl	ef8 <proceed>

  entry (IM_BIN)

	io (IM_BIN, __cport, READ, ptr, 1);
    17dc:	2301      	movs	r3, #1
    17de:	2200      	movs	r2, #0
    17e0:	4d1b      	ldr	r5, [pc, #108]	; (1850 <__inserial+0x114>)
    17e2:	9300      	str	r3, [sp, #0]
    17e4:	4611      	mov	r1, r2
    17e6:	682b      	ldr	r3, [r5, #0]
    17e8:	2002      	movs	r0, #2
    17ea:	f7ff fc27 	bl	103c <io>
	len -= 2;
    17ee:	4819      	ldr	r0, [pc, #100]	; (1854 <__inserial+0x118>)
    17f0:	6803      	ldr	r3, [r0, #0]
    17f2:	1e9a      	subs	r2, r3, #2
	if (len > *ptr + 1) // 1 for 0x04
    17f4:	682b      	ldr	r3, [r5, #0]
    17f6:	f813 1b01 	ldrb.w	r1, [r3], #1
    17fa:	3101      	adds	r1, #1
		len = *ptr + 1;
    17fc:	4291      	cmp	r1, r2
    17fe:	bfd4      	ite	le
    1800:	6001      	strle	r1, [r0, #0]
    1802:	6002      	strgt	r2, [r0, #0]
	ptr++;
    1804:	602b      	str	r3, [r5, #0]

  entry (IM_BINL)

	quant = io (IM_BINL, __cport, READ, ptr, len);
    1806:	2200      	movs	r2, #0
    1808:	4f12      	ldr	r7, [pc, #72]	; (1854 <__inserial+0x118>)
    180a:	4d11      	ldr	r5, [pc, #68]	; (1850 <__inserial+0x114>)
    180c:	883b      	ldrh	r3, [r7, #0]
    180e:	4611      	mov	r1, r2
    1810:	9300      	str	r3, [sp, #0]
    1812:	682b      	ldr	r3, [r5, #0]
    1814:	2003      	movs	r0, #3
    1816:	f7ff fc11 	bl	103c <io>
	len -= quant;
    181a:	683b      	ldr	r3, [r7, #0]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    181c:	4606      	mov	r6, r0
	len -= quant;
    181e:	1a18      	subs	r0, r3, r0
    1820:	6038      	str	r0, [r7, #0]
	if (len == 0) {
    1822:	b918      	cbnz	r0, 182c <__inserial+0xf0>
		__inpline = (char*)data;
    1824:	4b09      	ldr	r3, [pc, #36]	; (184c <__inserial+0x110>)
    1826:	601c      	str	r4, [r3, #0]
		finish;
    1828:	f7ff fca2 	bl	1170 <kill>
	}
	ptr += quant;
    182c:	6828      	ldr	r0, [r5, #0]
    182e:	4430      	add	r0, r6
    1830:	6028      	str	r0, [r5, #0]
	proceed (IM_BINL);
    1832:	2003      	movs	r0, #3

endstrand
    1834:	b003      	add	sp, #12
    1836:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	proceed (IM_BINL);
    183a:	f7ff bb5d 	b.w	ef8 <proceed>
endstrand
    183e:	b003      	add	sp, #12
    1840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1844:	f7ff baea 	b.w	e1c <__pi_badstate>
    1848:	200000b8 	strhcs	r0, [r0], -r8
    184c:	20000040 	andcs	r0, r0, r0, asr #32
    1850:	20000048 	andcs	r0, r0, r8, asr #32
    1854:	20000044 	andcs	r0, r0, r4, asr #32

00001858 <outc.5724>:

	char c;
	word d;

	void outc (word c) {
		if (res && (d < n))
    1858:	f8dc 2000 	ldr.w	r2, [ip]
    185c:	b132      	cbz	r2, 186c <outc.5724+0x14>
    185e:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1862:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    1866:	4299      	cmp	r1, r3
			// Store if there is a buffer ...
			res [d] = (char) c;
    1868:	bf88      	it	hi
    186a:	54d0      	strbhi	r0, [r2, r3]
		// ... otherwise just count
		d++;
    186c:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    1870:	3301      	adds	r3, #1
    1872:	f8ac 3006 	strh.w	r3, [ip, #6]
	};
    1876:	4770      	bx	lr

00001878 <__pi_vfparse>:
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    187c:	461c      	mov	r4, r3
    187e:	ab0c      	add	r3, sp, #48	; 0x30
    1880:	9303      	str	r3, [sp, #12]
			if (i == 0) \
				break; \
			c = (char) (val / i); \
		}

	d = 0;
    1882:	2300      	movs	r3, #0
				if (c == 'd' && (val & 0x8000) != 0) {
					/* Minus */
					outc ('-');
					val = (~val) + 1;
				}
				enci (10000);
    1884:	260a      	movs	r6, #10
						[ (val >> i) & 0xf ]);
    1886:	4f86      	ldr	r7, [pc, #536]	; (1aa0 <__pi_vfparse+0x228>)
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1888:	9001      	str	r0, [sp, #4]
    188a:	f8ad 1008 	strh.w	r1, [sp, #8]
	d = 0;
    188e:	f8ad 300a 	strh.w	r3, [sp, #10]
		c = *fm++;
    1892:	f892 9000 	ldrb.w	r9, [r2]
		if (c == '\\') {
    1896:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
    189a:	d118      	bne.n	18ce <__pi_vfparse+0x56>
			if ((c = *fm++) == '\0') {
    189c:	f892 9001 	ldrb.w	r9, [r2, #1]
    18a0:	1c95      	adds	r5, r2, #2
				outc ('\\');
    18a2:	f10d 0c04 	add.w	ip, sp, #4
			if ((c = *fm++) == '\0') {
    18a6:	f1b9 0f00 	cmp.w	r9, #0
    18aa:	d10b      	bne.n	18c4 <__pi_vfparse+0x4c>
				outc ('\\');
    18ac:	205c      	movs	r0, #92	; 0x5c
    18ae:	f7ff ffd3 	bl	1858 <outc.5724>
					goto Ret;
			}
		} else {
			// Regular character
Eol:
			outc (c);
    18b2:	4648      	mov	r0, r9
    18b4:	f10d 0c04 	add.w	ip, sp, #4
    18b8:	f7ff ffce 	bl	1858 <outc.5724>
			if (c == '\0')
    18bc:	f1b9 0f00 	cmp.w	r9, #0
    18c0:	d103      	bne.n	18ca <__pi_vfparse+0x52>
    18c2:	e027      	b.n	1914 <__pi_vfparse+0x9c>
			outc (c);
    18c4:	4648      	mov	r0, r9
				outc (val);
    18c6:	f7ff ffc7 	bl	1858 <outc.5724>
				val = (word) va_arg (ap, aword);
    18ca:	462a      	mov	r2, r5
    18cc:	e7e1      	b.n	1892 <__pi_vfparse+0x1a>
		if (c == '%') {
    18ce:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    18d2:	f040 80e2 	bne.w	1a9a <__pi_vfparse+0x222>
			c = *fm++;
    18d6:	f892 8001 	ldrb.w	r8, [r2, #1]
    18da:	1c95      	adds	r5, r2, #2
			switch (c) {
    18dc:	f1b8 0f73 	cmp.w	r8, #115	; 0x73
    18e0:	f000 80cd 	beq.w	1a7e <__pi_vfparse+0x206>
    18e4:	d81b      	bhi.n	191e <__pi_vfparse+0xa6>
    18e6:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    18ea:	d033      	beq.n	1954 <__pi_vfparse+0xdc>
    18ec:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    18f0:	d067      	beq.n	19c2 <__pi_vfparse+0x14a>
    18f2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
    18f6:	f000 80bc 	beq.w	1a72 <__pi_vfparse+0x1fa>
				outc ('%');
    18fa:	2025      	movs	r0, #37	; 0x25
    18fc:	f10d 0c04 	add.w	ip, sp, #4
    1900:	f7ff ffaa 	bl	1858 <outc.5724>
				outc (c);
    1904:	4640      	mov	r0, r8
    1906:	f10d 0c04 	add.w	ip, sp, #4
    190a:	f7ff ffa5 	bl	1858 <outc.5724>
				if (c == '\0')
    190e:	f1b8 0f00 	cmp.w	r8, #0
    1912:	d1da      	bne.n	18ca <__pi_vfparse+0x52>
Ret:
				return d;
    1914:	f8bd 000a 	ldrh.w	r0, [sp, #10]
		}
	}
}
    1918:	b004      	add	sp, #16
    191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch (c) {
    191e:	f1b8 0f75 	cmp.w	r8, #117	; 0x75
    1922:	d017      	beq.n	1954 <__pi_vfparse+0xdc>
    1924:	f1b8 0f78 	cmp.w	r8, #120	; 0x78
    1928:	d1e7      	bne.n	18fa <__pi_vfparse+0x82>
				for (i = 12; ; i -= 4) {
    192a:	f04f 080c 	mov.w	r8, #12
				val = (word) va_arg (ap, aword);
    192e:	f854 3b04 	ldr.w	r3, [r4], #4
						[ (val >> i) & 0xf ]);
    1932:	fa1f f983 	uxth.w	r9, r3
    1936:	fa49 f308 	asr.w	r3, r9, r8
    193a:	f003 030f 	and.w	r3, r3, #15
					outc (__pi_hex_enc_table
    193e:	5cf8      	ldrb	r0, [r7, r3]
    1940:	f10d 0c04 	add.w	ip, sp, #4
    1944:	f7ff ff88 	bl	1858 <outc.5724>
					if (i == 0)
    1948:	f1b8 0f00 	cmp.w	r8, #0
    194c:	d0bd      	beq.n	18ca <__pi_vfparse+0x52>
				for (i = 12; ; i -= 4) {
    194e:	f1a8 0804 	sub.w	r8, r8, #4
					outc (__pi_hex_enc_table
    1952:	e7f0      	b.n	1936 <__pi_vfparse+0xbe>
				val = (word) va_arg (ap, aword);
    1954:	f854 3b04 	ldr.w	r3, [r4], #4
				if (c == 'd' && (val & 0x8000) != 0) {
    1958:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
				val = (word) va_arg (ap, aword);
    195c:	fa1f f983 	uxth.w	r9, r3
				if (c == 'd' && (val & 0x8000) != 0) {
    1960:	d10a      	bne.n	1978 <__pi_vfparse+0x100>
    1962:	041b      	lsls	r3, r3, #16
    1964:	d508      	bpl.n	1978 <__pi_vfparse+0x100>
					outc ('-');
    1966:	202d      	movs	r0, #45	; 0x2d
    1968:	f10d 0c04 	add.w	ip, sp, #4
    196c:	f7ff ff74 	bl	1858 <outc.5724>
					val = (~val) + 1;
    1970:	f1c9 0900 	rsb	r9, r9, #0
    1974:	fa1f f989 	uxth.w	r9, r9
				for (i = 12; ; i -= 4) {
    1978:	2305      	movs	r3, #5
				enci (10000);
    197a:	f242 7810 	movw	r8, #10000	; 0x2710
    197e:	fbb9 f0f8 	udiv	r0, r9, r8
    1982:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1986:	d103      	bne.n	1990 <__pi_vfparse+0x118>
    1988:	3b01      	subs	r3, #1
    198a:	d117      	bne.n	19bc <__pi_vfparse+0x144>
    198c:	f04f 0801 	mov.w	r8, #1
    1990:	fa1f fa80 	uxth.w	sl, r0
    1994:	f10d 0c04 	add.w	ip, sp, #4
    1998:	3030      	adds	r0, #48	; 0x30
    199a:	f7ff ff5d 	bl	1858 <outc.5724>
    199e:	fbb8 f3f6 	udiv	r3, r8, r6
    19a2:	fb08 991a 	mls	r9, r8, sl, r9
    19a6:	f1b8 0f09 	cmp.w	r8, #9
    19aa:	fa1f f989 	uxth.w	r9, r9
    19ae:	b29b      	uxth	r3, r3
    19b0:	d98b      	bls.n	18ca <__pi_vfparse+0x52>
    19b2:	fbb9 f0f3 	udiv	r0, r9, r3
    19b6:	4698      	mov	r8, r3
    19b8:	b2c0      	uxtb	r0, r0
    19ba:	e7e9      	b.n	1990 <__pi_vfparse+0x118>
    19bc:	fbb8 f8f6 	udiv	r8, r8, r6
    19c0:	e7dd      	b.n	197e <__pi_vfparse+0x106>
				c = *fm;
    19c2:	7893      	ldrb	r3, [r2, #2]
				if (c == 'd' || c == 'u') {
    19c4:	2b64      	cmp	r3, #100	; 0x64
    19c6:	d001      	beq.n	19cc <__pi_vfparse+0x154>
    19c8:	2b75      	cmp	r3, #117	; 0x75
    19ca:	d132      	bne.n	1a32 <__pi_vfparse+0x1ba>
					if (c == 'd' &&
    19cc:	2b64      	cmp	r3, #100	; 0x64
					val = va_arg (ap, lword);
    19ce:	f854 ab04 	ldr.w	sl, [r4], #4
					fm++;
    19d2:	f102 0503 	add.w	r5, r2, #3
					if (c == 'd' &&
    19d6:	d109      	bne.n	19ec <__pi_vfparse+0x174>
    19d8:	f1ba 0f00 	cmp.w	sl, #0
    19dc:	da06      	bge.n	19ec <__pi_vfparse+0x174>
						outc ('-');
    19de:	202d      	movs	r0, #45	; 0x2d
    19e0:	f10d 0c04 	add.w	ip, sp, #4
    19e4:	f7ff ff38 	bl	1858 <outc.5724>
						val = (~val) + 1;
    19e8:	f1ca 0a00 	rsb	sl, sl, #0
				enci (10000);
    19ec:	230a      	movs	r3, #10
					enci (1000000000UL);
    19ee:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1aa4 <__pi_vfparse+0x22c>
    19f2:	fbba f9f8 	udiv	r9, sl, r8
    19f6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    19fa:	d103      	bne.n	1a04 <__pi_vfparse+0x18c>
    19fc:	3b01      	subs	r3, #1
    19fe:	d115      	bne.n	1a2c <__pi_vfparse+0x1b4>
    1a00:	f04f 0801 	mov.w	r8, #1
    1a04:	f10d 0c04 	add.w	ip, sp, #4
    1a08:	f109 0030 	add.w	r0, r9, #48	; 0x30
    1a0c:	f7ff ff24 	bl	1858 <outc.5724>
    1a10:	f1b8 0f09 	cmp.w	r8, #9
    1a14:	fbb8 f3f6 	udiv	r3, r8, r6
    1a18:	fb08 aa19 	mls	sl, r8, r9, sl
    1a1c:	f67f af55 	bls.w	18ca <__pi_vfparse+0x52>
    1a20:	fbba f9f3 	udiv	r9, sl, r3
    1a24:	4698      	mov	r8, r3
    1a26:	fa5f f989 	uxtb.w	r9, r9
    1a2a:	e7eb      	b.n	1a04 <__pi_vfparse+0x18c>
    1a2c:	fbb8 f8f6 	udiv	r8, r8, r6
    1a30:	e7df      	b.n	19f2 <__pi_vfparse+0x17a>
				} else if (c == 'x') {
    1a32:	2b78      	cmp	r3, #120	; 0x78
    1a34:	d114      	bne.n	1a60 <__pi_vfparse+0x1e8>
					for (i = 28; ; i -= 4) {
    1a36:	f04f 081c 	mov.w	r8, #28
					val = va_arg (ap, lword);
    1a3a:	f854 9b04 	ldr.w	r9, [r4], #4
					fm++;
    1a3e:	1cd5      	adds	r5, r2, #3
							[ (val >> i) & 0xf ]);
    1a40:	fa29 f308 	lsr.w	r3, r9, r8
    1a44:	f003 030f 	and.w	r3, r3, #15
						outc (__pi_hex_enc_table
    1a48:	5cf8      	ldrb	r0, [r7, r3]
    1a4a:	f10d 0c04 	add.w	ip, sp, #4
    1a4e:	f7ff ff03 	bl	1858 <outc.5724>
						if (i == 0)
    1a52:	f1b8 0f00 	cmp.w	r8, #0
    1a56:	f43f af38 	beq.w	18ca <__pi_vfparse+0x52>
					for (i = 28; ; i -= 4) {
    1a5a:	f1a8 0804 	sub.w	r8, r8, #4
						outc (__pi_hex_enc_table
    1a5e:	e7ef      	b.n	1a40 <__pi_vfparse+0x1c8>
					outc ('%');
    1a60:	4648      	mov	r0, r9
    1a62:	f10d 0c04 	add.w	ip, sp, #4
    1a66:	f7ff fef7 	bl	1858 <outc.5724>
					outc ('l');
    1a6a:	4640      	mov	r0, r8
    1a6c:	f10d 0c04 	add.w	ip, sp, #4
    1a70:	e729      	b.n	18c6 <__pi_vfparse+0x4e>
				val = (word) va_arg (ap, aword);
    1a72:	f854 0b04 	ldr.w	r0, [r4], #4
				outc (val);
    1a76:	f10d 0c04 	add.w	ip, sp, #4
    1a7a:	b280      	uxth	r0, r0
    1a7c:	e723      	b.n	18c6 <__pi_vfparse+0x4e>
				while (*st != '\0') {
    1a7e:	f854 3b04 	ldr.w	r3, [r4], #4
    1a82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1a86:	f818 0f01 	ldrb.w	r0, [r8, #1]!
    1a8a:	2800      	cmp	r0, #0
    1a8c:	f43f af1d 	beq.w	18ca <__pi_vfparse+0x52>
					outc (*st);
    1a90:	f10d 0c04 	add.w	ip, sp, #4
    1a94:	f7ff fee0 	bl	1858 <outc.5724>
					st++;
    1a98:	e7f5      	b.n	1a86 <__pi_vfparse+0x20e>
		c = *fm++;
    1a9a:	1c55      	adds	r5, r2, #1
    1a9c:	e709      	b.n	18b2 <__pi_vfparse+0x3a>
    1a9e:	bf00      	nop
    1aa0:	00002c68 	andeq	r2, r0, r8, ror #24
    1aa4:	3b9aca00 	blcc	fe6b42ac <_estack+0xde6af2ac>

00001aa8 <vform>:

char *vform (char *res, const char *fm, va_list aq) {
    1aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1aac:	460e      	mov	r6, r1
    1aae:	4617      	mov	r7, r2

	word fml, d;

	if (res != NULL) {
    1ab0:	4604      	mov	r4, r0
    1ab2:	b140      	cbz	r0, 1ac6 <vform+0x1e>
		// We trust the caller
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab4:	4613      	mov	r3, r2
    1ab6:	460a      	mov	r2, r1
    1ab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1abc:	f7ff fedc 	bl	1878 <__pi_vfparse>
		ufree (res);
		fml = d;
		goto Again;
	}
	return res;
}
    1ac0:	4620      	mov	r0, r4
    1ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fml = strlen (fm) + 17;
    1ac6:	4608      	mov	r0, r1
    1ac8:	f7ff fa94 	bl	ff4 <__pi_strlen>
    1acc:	f100 0511 	add.w	r5, r0, #17
    1ad0:	b2ad      	uxth	r5, r5
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad2:	4628      	mov	r0, r5
    1ad4:	f7ff fb74 	bl	11c0 <__pi_malloc>
    1ad8:	4604      	mov	r4, r0
    1ada:	2800      	cmp	r0, #0
    1adc:	d0f0      	beq.n	1ac0 <vform+0x18>
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ade:	463b      	mov	r3, r7
    1ae0:	4632      	mov	r2, r6
    1ae2:	4629      	mov	r1, r5
    1ae4:	f7ff fec8 	bl	1878 <__pi_vfparse>
    1ae8:	4285      	cmp	r5, r0
    1aea:	4680      	mov	r8, r0
    1aec:	d2e8      	bcs.n	1ac0 <vform+0x18>
		ufree (res);
    1aee:	4620      	mov	r0, r4
    1af0:	f7ff fb1a 	bl	1128 <__pi_free>
		goto Again;
    1af4:	4645      	mov	r5, r8
    1af6:	e7ec      	b.n	1ad2 <vform+0x2a>

00001af8 <vscan>:
					c -= (char) ('A' - 10); \
				*vap = ((*vap) << 4) | (at) c; \
			} \
			}

	if (buf == NULL || fmt == NULL)
    1af8:	4603      	mov	r3, r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf == NULL || fmt == NULL)
    1afe:	2800      	cmp	r0, #0
    1b00:	f000 81b5 	beq.w	1e6e <vscan+0x376>
    1b04:	2900      	cmp	r1, #0
    1b06:	f000 81b4 	beq.w	1e72 <vscan+0x37a>
		// A safety hatch
		return 0;

	nc = 0;
    1b0a:	2400      	movs	r4, #0
#if	CODE_LONG_INTS
		    case 'l':
			switch (*fmt++) {
			    case '\0':	return nc;
		    	    case 'd': scani (lword); break;
		    	    case 'u': scanu (lword); break;
    1b0c:	270a      	movs	r7, #10
    1b0e:	4625      	mov	r5, r4
			*sap = c;
			break;
		    }
		    case 's': {
			char *sap;
			while (isspace (*buf)) buf++;
    1b10:	f8df c370 	ldr.w	ip, [pc, #880]	; 1e84 <vscan+0x38c>
    1b14:	460e      	mov	r6, r1
	while (*fmt != '\0') {
    1b16:	f811 0b01 	ldrb.w	r0, [r1], #1
    1b1a:	b170      	cbz	r0, 1b3a <vscan+0x42>
		if (*fmt++ != '%')
    1b1c:	2825      	cmp	r0, #37	; 0x25
    1b1e:	d1f9      	bne.n	1b14 <vscan+0x1c>
		switch (*fmt++) {
    1b20:	7870      	ldrb	r0, [r6, #1]
    1b22:	1cb1      	adds	r1, r6, #2
    1b24:	286c      	cmp	r0, #108	; 0x6c
    1b26:	f000 80e1 	beq.w	1cec <vscan+0x1f4>
    1b2a:	d809      	bhi.n	1b40 <vscan+0x48>
    1b2c:	2863      	cmp	r0, #99	; 0x63
    1b2e:	f000 8184 	beq.w	1e3a <vscan+0x342>
    1b32:	2864      	cmp	r0, #100	; 0x64
    1b34:	d043      	beq.n	1bbe <vscan+0xc6>
    1b36:	2800      	cmp	r0, #0
    1b38:	d1ec      	bne.n	1b14 <vscan+0x1c>
			break;
		    }
		}
	}
	return nc;
}
    1b3a:	4620      	mov	r0, r4
    1b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		switch (*fmt++) {
    1b40:	2875      	cmp	r0, #117	; 0x75
    1b42:	d074      	beq.n	1c2e <vscan+0x136>
    1b44:	2878      	cmp	r0, #120	; 0x78
    1b46:	f000 8098 	beq.w	1c7a <vscan+0x182>
    1b4a:	2873      	cmp	r0, #115	; 0x73
    1b4c:	d1e2      	bne.n	1b14 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1b4e:	7818      	ldrb	r0, [r3, #0]
    1b50:	461e      	mov	r6, r3
    1b52:	f1a0 0e09 	sub.w	lr, r0, #9
    1b56:	fa5f fe8e 	uxtb.w	lr, lr
    1b5a:	f1be 0f17 	cmp.w	lr, #23
    1b5e:	4698      	mov	r8, r3
    1b60:	f103 0301 	add.w	r3, r3, #1
    1b64:	f240 8173 	bls.w	1e4e <vscan+0x356>
			if (*buf == '\0')
    1b68:	2800      	cmp	r0, #0
    1b6a:	d0e6      	beq.n	1b3a <vscan+0x42>
			if (*buf != ',') {
    1b6c:	282c      	cmp	r0, #44	; 0x2c
			sap = va_arg (ap, char*);
    1b6e:	f852 eb04 	ldr.w	lr, [r2], #4
			nc++;
    1b72:	f104 0401 	add.w	r4, r4, #1
			if (*buf != ',') {
    1b76:	d00e      	beq.n	1b96 <vscan+0x9e>
    1b78:	4646      	mov	r6, r8
				while (!isspace (*buf) && *buf != ',' &&
    1b7a:	f818 3b01 	ldrb.w	r3, [r8], #1
    1b7e:	f1a3 0009 	sub.w	r0, r3, #9
    1b82:	2801      	cmp	r0, #1
    1b84:	d907      	bls.n	1b96 <vscan+0x9e>
    1b86:	2b0d      	cmp	r3, #13
    1b88:	d005      	beq.n	1b96 <vscan+0x9e>
    1b8a:	2b2c      	cmp	r3, #44	; 0x2c
    1b8c:	d003      	beq.n	1b96 <vscan+0x9e>
    1b8e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
    1b92:	f040 8163 	bne.w	1e5c <vscan+0x364>
			while (isspace (*buf)) buf++;
    1b96:	f896 8000 	ldrb.w	r8, [r6]
    1b9a:	4633      	mov	r3, r6
    1b9c:	f1a8 0009 	sub.w	r0, r8, #9
    1ba0:	b2c0      	uxtb	r0, r0
    1ba2:	2817      	cmp	r0, #23
    1ba4:	f106 0601 	add.w	r6, r6, #1
    1ba8:	f240 815b 	bls.w	1e62 <vscan+0x36a>
			if (*buf == ',') buf++;
    1bac:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
    1bb0:	bf08      	it	eq
    1bb2:	4633      	moveq	r3, r6
			*sap = '\0';
    1bb4:	f88e 5000 	strb.w	r5, [lr]
			break;
    1bb8:	e7ac      	b.n	1b14 <vscan+0x1c>
		    case 'd': scani (word); break;
    1bba:	2e00      	cmp	r6, #0
    1bbc:	d0bd      	beq.n	1b3a <vscan+0x42>
    1bbe:	469e      	mov	lr, r3
    1bc0:	f813 6b01 	ldrb.w	r6, [r3], #1
    1bc4:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1bc8:	2809      	cmp	r0, #9
    1bca:	d923      	bls.n	1c14 <vscan+0x11c>
    1bcc:	2e2d      	cmp	r6, #45	; 0x2d
    1bce:	d001      	beq.n	1bd4 <vscan+0xdc>
    1bd0:	2e2b      	cmp	r6, #43	; 0x2b
    1bd2:	d1f2      	bne.n	1bba <vscan+0xc2>
    1bd4:	7818      	ldrb	r0, [r3, #0]
    1bd6:	469e      	mov	lr, r3
    1bd8:	3830      	subs	r0, #48	; 0x30
    1bda:	2809      	cmp	r0, #9
    1bdc:	d8ef      	bhi.n	1bbe <vscan+0xc6>
    1bde:	f1a6 092d 	sub.w	r9, r6, #45	; 0x2d
    1be2:	f1d9 0800 	rsbs	r8, r9, #0
    1be6:	eb48 0809 	adc.w	r8, r8, r9
    1bea:	f852 6b04 	ldr.w	r6, [r2], #4
    1bee:	3401      	adds	r4, #1
    1bf0:	8035      	strh	r5, [r6, #0]
    1bf2:	f89e 0000 	ldrb.w	r0, [lr]
    1bf6:	4673      	mov	r3, lr
    1bf8:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
    1bfc:	f1b9 0f09 	cmp.w	r9, #9
    1c00:	f10e 0e01 	add.w	lr, lr, #1
    1c04:	d909      	bls.n	1c1a <vscan+0x122>
    1c06:	f1b8 0f00 	cmp.w	r8, #0
    1c0a:	d183      	bne.n	1b14 <vscan+0x1c>
    1c0c:	8830      	ldrh	r0, [r6, #0]
    1c0e:	4240      	negs	r0, r0
    1c10:	8030      	strh	r0, [r6, #0]
    1c12:	e77f      	b.n	1b14 <vscan+0x1c>
    1c14:	f04f 0800 	mov.w	r8, #0
    1c18:	e7e7      	b.n	1bea <vscan+0xf2>
    1c1a:	8833      	ldrh	r3, [r6, #0]
    1c1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c20:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
    1c24:	3030      	adds	r0, #48	; 0x30
    1c26:	8030      	strh	r0, [r6, #0]
    1c28:	e7e3      	b.n	1bf2 <vscan+0xfa>
		    case 'u': scanu (word); break;
    1c2a:	2800      	cmp	r0, #0
    1c2c:	d085      	beq.n	1b3a <vscan+0x42>
    1c2e:	7818      	ldrb	r0, [r3, #0]
    1c30:	461e      	mov	r6, r3
    1c32:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1c36:	f1be 0f09 	cmp.w	lr, #9
    1c3a:	f103 0301 	add.w	r3, r3, #1
    1c3e:	d8f4      	bhi.n	1c2a <vscan+0x132>
    1c40:	f852 eb04 	ldr.w	lr, [r2], #4
    1c44:	3401      	adds	r4, #1
    1c46:	f8ae 5000 	strh.w	r5, [lr]
    1c4a:	7830      	ldrb	r0, [r6, #0]
    1c4c:	4633      	mov	r3, r6
    1c4e:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
    1c52:	f1b8 0f09 	cmp.w	r8, #9
    1c56:	f106 0601 	add.w	r6, r6, #1
    1c5a:	f63f af5b 	bhi.w	1b14 <vscan+0x1c>
    1c5e:	f8be 3000 	ldrh.w	r3, [lr]
    1c62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c66:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    1c6a:	3830      	subs	r0, #48	; 0x30
    1c6c:	f8ae 0000 	strh.w	r0, [lr]
    1c70:	e7eb      	b.n	1c4a <vscan+0x152>
		    case 'x': scanx (word); break;
    1c72:	f1be 0f00 	cmp.w	lr, #0
    1c76:	f43f af60 	beq.w	1b3a <vscan+0x42>
    1c7a:	f893 e000 	ldrb.w	lr, [r3]
    1c7e:	461e      	mov	r6, r3
    1c80:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1c84:	2809      	cmp	r0, #9
    1c86:	f103 0301 	add.w	r3, r3, #1
    1c8a:	d904      	bls.n	1c96 <vscan+0x19e>
    1c8c:	f02e 0020 	bic.w	r0, lr, #32
    1c90:	3841      	subs	r0, #65	; 0x41
    1c92:	2805      	cmp	r0, #5
    1c94:	d8ed      	bhi.n	1c72 <vscan+0x17a>
    1c96:	f852 eb04 	ldr.w	lr, [r2], #4
    1c9a:	3401      	adds	r4, #1
    1c9c:	f8ae 5000 	strh.w	r5, [lr]
    1ca0:	f106 0805 	add.w	r8, r6, #5
    1ca4:	f896 9000 	ldrb.w	r9, [r6]
    1ca8:	4633      	mov	r3, r6
    1caa:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1cae:	b2c0      	uxtb	r0, r0
    1cb0:	2809      	cmp	r0, #9
    1cb2:	f106 0601 	add.w	r6, r6, #1
    1cb6:	f240 80de 	bls.w	1e76 <vscan+0x37e>
    1cba:	f029 0020 	bic.w	r0, r9, #32
    1cbe:	3841      	subs	r0, #65	; 0x41
    1cc0:	2805      	cmp	r0, #5
    1cc2:	f63f af27 	bhi.w	1b14 <vscan+0x1c>
    1cc6:	4546      	cmp	r6, r8
    1cc8:	f43f af24 	beq.w	1b14 <vscan+0x1c>
    1ccc:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1cd0:	2b05      	cmp	r3, #5
    1cd2:	bf94      	ite	ls
    1cd4:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1cd8:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1cdc:	b2c0      	uxtb	r0, r0
    1cde:	f8be 3000 	ldrh.w	r3, [lr]
    1ce2:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1ce6:	f8ae 0000 	strh.w	r0, [lr]
    1cea:	e7db      	b.n	1ca4 <vscan+0x1ac>
			switch (*fmt++) {
    1cec:	78b0      	ldrb	r0, [r6, #2]
    1cee:	1cf1      	adds	r1, r6, #3
    1cf0:	2875      	cmp	r0, #117	; 0x75
    1cf2:	d07d      	beq.n	1df0 <vscan+0x2f8>
    1cf4:	d831      	bhi.n	1d5a <vscan+0x262>
    1cf6:	2800      	cmp	r0, #0
    1cf8:	f43f af1f 	beq.w	1b3a <vscan+0x42>
    1cfc:	2864      	cmp	r0, #100	; 0x64
    1cfe:	f47f af09 	bne.w	1b14 <vscan+0x1c>
    1d02:	4698      	mov	r8, r3
		    	    case 'd': scani (lword); break;
    1d04:	f813 6b01 	ldrb.w	r6, [r3], #1
    1d08:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
    1d0c:	2809      	cmp	r0, #9
    1d0e:	d962      	bls.n	1dd6 <vscan+0x2de>
    1d10:	2e2d      	cmp	r6, #45	; 0x2d
    1d12:	d001      	beq.n	1d18 <vscan+0x220>
    1d14:	2e2b      	cmp	r6, #43	; 0x2b
    1d16:	d15b      	bne.n	1dd0 <vscan+0x2d8>
    1d18:	7818      	ldrb	r0, [r3, #0]
    1d1a:	4698      	mov	r8, r3
    1d1c:	3830      	subs	r0, #48	; 0x30
    1d1e:	2809      	cmp	r0, #9
    1d20:	d8ef      	bhi.n	1d02 <vscan+0x20a>
    1d22:	3e2d      	subs	r6, #45	; 0x2d
    1d24:	4270      	negs	r0, r6
    1d26:	4170      	adcs	r0, r6
    1d28:	f852 eb04 	ldr.w	lr, [r2], #4
    1d2c:	3401      	adds	r4, #1
    1d2e:	f8ce 5000 	str.w	r5, [lr]
    1d32:	f898 6000 	ldrb.w	r6, [r8]
    1d36:	4643      	mov	r3, r8
    1d38:	3e30      	subs	r6, #48	; 0x30
    1d3a:	fa5f f986 	uxtb.w	r9, r6
    1d3e:	f1b9 0f09 	cmp.w	r9, #9
    1d42:	f108 0801 	add.w	r8, r8, #1
    1d46:	d948      	bls.n	1dda <vscan+0x2e2>
    1d48:	2800      	cmp	r0, #0
    1d4a:	f47f aee3 	bne.w	1b14 <vscan+0x1c>
    1d4e:	f8de 0000 	ldr.w	r0, [lr]
    1d52:	4240      	negs	r0, r0
    1d54:	f8ce 0000 	str.w	r0, [lr]
    1d58:	e6dc      	b.n	1b14 <vscan+0x1c>
    1d5a:	2878      	cmp	r0, #120	; 0x78
    1d5c:	f47f aeda 	bne.w	1b14 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1d60:	f893 e000 	ldrb.w	lr, [r3]
    1d64:	461e      	mov	r6, r3
    1d66:	f1ae 0030 	sub.w	r0, lr, #48	; 0x30
    1d6a:	2809      	cmp	r0, #9
    1d6c:	f103 0301 	add.w	r3, r3, #1
    1d70:	d904      	bls.n	1d7c <vscan+0x284>
    1d72:	f02e 0020 	bic.w	r0, lr, #32
    1d76:	3841      	subs	r0, #65	; 0x41
    1d78:	2805      	cmp	r0, #5
    1d7a:	d85a      	bhi.n	1e32 <vscan+0x33a>
    1d7c:	f852 eb04 	ldr.w	lr, [r2], #4
    1d80:	3401      	adds	r4, #1
    1d82:	f8ce 5000 	str.w	r5, [lr]
    1d86:	f106 0809 	add.w	r8, r6, #9
    1d8a:	f896 9000 	ldrb.w	r9, [r6]
    1d8e:	4633      	mov	r3, r6
    1d90:	f1a9 0030 	sub.w	r0, r9, #48	; 0x30
    1d94:	b2c0      	uxtb	r0, r0
    1d96:	2809      	cmp	r0, #9
    1d98:	f106 0601 	add.w	r6, r6, #1
    1d9c:	d96f      	bls.n	1e7e <vscan+0x386>
    1d9e:	f029 0020 	bic.w	r0, r9, #32
    1da2:	3841      	subs	r0, #65	; 0x41
    1da4:	2805      	cmp	r0, #5
    1da6:	f63f aeb5 	bhi.w	1b14 <vscan+0x1c>
    1daa:	4546      	cmp	r6, r8
    1dac:	f43f aeb2 	beq.w	1b14 <vscan+0x1c>
    1db0:	f1a9 0361 	sub.w	r3, r9, #97	; 0x61
    1db4:	2b05      	cmp	r3, #5
    1db6:	bf94      	ite	ls
    1db8:	f1a9 0057 	subls.w	r0, r9, #87	; 0x57
    1dbc:	f1a9 0037 	subhi.w	r0, r9, #55	; 0x37
    1dc0:	b2c0      	uxtb	r0, r0
    1dc2:	f8de 3000 	ldr.w	r3, [lr]
    1dc6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
    1dca:	f8ce 0000 	str.w	r0, [lr]
    1dce:	e7dc      	b.n	1d8a <vscan+0x292>
		    	    case 'd': scani (lword); break;
    1dd0:	2e00      	cmp	r6, #0
    1dd2:	d196      	bne.n	1d02 <vscan+0x20a>
    1dd4:	e6b1      	b.n	1b3a <vscan+0x42>
    1dd6:	2000      	movs	r0, #0
    1dd8:	e7a6      	b.n	1d28 <vscan+0x230>
    1dda:	f8de 3000 	ldr.w	r3, [lr]
    1dde:	b2b6      	uxth	r6, r6
    1de0:	437b      	muls	r3, r7
    1de2:	1b9e      	subs	r6, r3, r6
    1de4:	f8ce 6000 	str.w	r6, [lr]
    1de8:	e7a3      	b.n	1d32 <vscan+0x23a>
		    	    case 'u': scanu (lword); break;
    1dea:	2800      	cmp	r0, #0
    1dec:	f43f aea5 	beq.w	1b3a <vscan+0x42>
    1df0:	7818      	ldrb	r0, [r3, #0]
    1df2:	461e      	mov	r6, r3
    1df4:	f1a0 0e30 	sub.w	lr, r0, #48	; 0x30
    1df8:	f1be 0f09 	cmp.w	lr, #9
    1dfc:	f103 0301 	add.w	r3, r3, #1
    1e00:	d8f3      	bhi.n	1dea <vscan+0x2f2>
    1e02:	f852 eb04 	ldr.w	lr, [r2], #4
    1e06:	3401      	adds	r4, #1
    1e08:	f8ce 5000 	str.w	r5, [lr]
    1e0c:	7830      	ldrb	r0, [r6, #0]
    1e0e:	4633      	mov	r3, r6
    1e10:	3830      	subs	r0, #48	; 0x30
    1e12:	fa5f f880 	uxtb.w	r8, r0
    1e16:	f1b8 0f09 	cmp.w	r8, #9
    1e1a:	f106 0601 	add.w	r6, r6, #1
    1e1e:	f63f ae79 	bhi.w	1b14 <vscan+0x1c>
    1e22:	f8de 3000 	ldr.w	r3, [lr]
    1e26:	b280      	uxth	r0, r0
    1e28:	fb07 0003 	mla	r0, r7, r3, r0
    1e2c:	f8ce 0000 	str.w	r0, [lr]
    1e30:	e7ec      	b.n	1e0c <vscan+0x314>
		    	    case 'x': scanx (lword); break;
    1e32:	f1be 0f00 	cmp.w	lr, #0
    1e36:	d193      	bne.n	1d60 <vscan+0x268>
    1e38:	e67f      	b.n	1b3a <vscan+0x42>
			if ((c = *buf++) == '\0')
    1e3a:	f813 0b01 	ldrb.w	r0, [r3], #1
    1e3e:	2800      	cmp	r0, #0
    1e40:	f43f ae7b 	beq.w	1b3a <vscan+0x42>
			sap = va_arg (ap, char*);
    1e44:	f852 6b04 	ldr.w	r6, [r2], #4
			nc++;
    1e48:	3401      	adds	r4, #1
			*sap = c;
    1e4a:	7030      	strb	r0, [r6, #0]
			break;
    1e4c:	e662      	b.n	1b14 <vscan+0x1c>
			while (isspace (*buf)) buf++;
    1e4e:	fa2c fe0e 	lsr.w	lr, ip, lr
    1e52:	f01e 0f01 	tst.w	lr, #1
    1e56:	f47f ae7a 	bne.w	1b4e <vscan+0x56>
    1e5a:	e687      	b.n	1b6c <vscan+0x74>
						*sap++ = *buf++;
    1e5c:	f80e 3b01 	strb.w	r3, [lr], #1
    1e60:	e68a      	b.n	1b78 <vscan+0x80>
			while (isspace (*buf)) buf++;
    1e62:	fa2c f000 	lsr.w	r0, ip, r0
    1e66:	07c0      	lsls	r0, r0, #31
    1e68:	f53f ae95 	bmi.w	1b96 <vscan+0x9e>
    1e6c:	e6a2      	b.n	1bb4 <vscan+0xbc>
		return 0;
    1e6e:	4604      	mov	r4, r0
    1e70:	e663      	b.n	1b3a <vscan+0x42>
    1e72:	460c      	mov	r4, r1
    1e74:	e661      	b.n	1b3a <vscan+0x42>
		    case 'x': scanx (word); break;
    1e76:	4546      	cmp	r6, r8
    1e78:	f47f af31 	bne.w	1cde <vscan+0x1e6>
    1e7c:	e64a      	b.n	1b14 <vscan+0x1c>
		    	    case 'x': scanx (lword); break;
    1e7e:	4546      	cmp	r6, r8
    1e80:	d19f      	bne.n	1dc2 <vscan+0x2ca>
    1e82:	e647      	b.n	1b14 <vscan+0x1c>
    1e84:	00800013 	addeq	r0, r0, r3, lsl r0

00001e88 <NOROM_AONBatMonTemperatureGetDegC>:
    1e88:	4b08      	ldr	r3, [pc, #32]	; (1eac <NOROM_AONBatMonTemperatureGetDegC+0x24>)
    1e8a:	6818      	ldr	r0, [r3, #0]
    1e8c:	4b08      	ldr	r3, [pc, #32]	; (1eb0 <NOROM_AONBatMonTemperatureGetDegC+0x28>)
    1e8e:	7819      	ldrb	r1, [r3, #0]
    1e90:	4b08      	ldr	r3, [pc, #32]	; (1eb4 <NOROM_AONBatMonTemperatureGetDegC+0x2c>)
    1e92:	681a      	ldr	r2, [r3, #0]
    1e94:	f340 0310 	sbfx	r3, r0, #0, #17
    1e98:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
    1e9c:	b248      	sxtb	r0, r1
    1e9e:	4350      	muls	r0, r2
    1ea0:	eba3 1020 	sub.w	r0, r3, r0, asr #4
    1ea4:	3080      	adds	r0, #128	; 0x80
    1ea6:	1200      	asrs	r0, r0, #8
    1ea8:	4770      	bx	lr
    1eaa:	bf00      	nop
    1eac:	40095030 	andmi	r5, r9, r0, lsr r0
    1eb0:	5000130c 	andpl	r1, r0, ip, lsl #6
    1eb4:	40095028 	andmi	r5, r9, r8, lsr #32

00001eb8 <NOROM_AONRTCCurrent64BitValueGet>:
    1eb8:	4b03      	ldr	r3, [pc, #12]	; (1ec8 <NOROM_AONRTCCurrent64BitValueGet+0x10>)
    1eba:	4904      	ldr	r1, [pc, #16]	; (1ecc <NOROM_AONRTCCurrent64BitValueGet+0x14>)
    1ebc:	681a      	ldr	r2, [r3, #0]
    1ebe:	6808      	ldr	r0, [r1, #0]
    1ec0:	6819      	ldr	r1, [r3, #0]
    1ec2:	4291      	cmp	r1, r2
    1ec4:	d1f8      	bne.n	1eb8 <NOROM_AONRTCCurrent64BitValueGet>
    1ec6:	4770      	bx	lr
    1ec8:	40092008 	andmi	r2, r9, r8
    1ecc:	4009200c 	andmi	r2, r9, ip

00001ed0 <NOROM_CPUcpsid>:
    1ed0:	f3ef 8010 	mrs	r0, PRIMASK
    1ed4:	b672      	cpsid	i
    1ed6:	4770      	bx	lr

00001ed8 <NOROM_CPUcpsie>:
    1ed8:	f3ef 8010 	mrs	r0, PRIMASK
    1edc:	b662      	cpsie	i
    1ede:	4770      	bx	lr

00001ee0 <TrimAfterColdResetWakeupFromShutDown>:
    1ee0:	b538      	push	{r3, r4, r5, lr}
    1ee2:	4605      	mov	r5, r0
    1ee4:	4b26      	ldr	r3, [pc, #152]	; (1f80 <TrimAfterColdResetWakeupFromShutDown+0xa0>)
    1ee6:	2201      	movs	r2, #1
    1ee8:	601a      	str	r2, [r3, #0]
    1eea:	4b26      	ldr	r3, [pc, #152]	; (1f84 <TrimAfterColdResetWakeupFromShutDown+0xa4>)
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	2b00      	cmp	r3, #0
    1ef0:	d0fb      	beq.n	1eea <TrimAfterColdResetWakeupFromShutDown+0xa>
    1ef2:	4b25      	ldr	r3, [pc, #148]	; (1f88 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1ef4:	22c0      	movs	r2, #192	; 0xc0
    1ef6:	601a      	str	r2, [r3, #0]
    1ef8:	4b24      	ldr	r3, [pc, #144]	; (1f8c <TrimAfterColdResetWakeupFromShutDown+0xac>)
    1efa:	681b      	ldr	r3, [r3, #0]
    1efc:	079b      	lsls	r3, r3, #30
    1efe:	bf5f      	itttt	pl
    1f00:	4b23      	ldrpl	r3, [pc, #140]	; (1f90 <TrimAfterColdResetWakeupFromShutDown+0xb0>)
    1f02:	4a24      	ldrpl	r2, [pc, #144]	; (1f94 <TrimAfterColdResetWakeupFromShutDown+0xb4>)
    1f04:	681b      	ldrpl	r3, [r3, #0]
    1f06:	f3c3 4303 	ubfxpl	r3, r3, #16, #4
    1f0a:	bf5c      	itt	pl
    1f0c:	f043 03f0 	orrpl.w	r3, r3, #240	; 0xf0
    1f10:	7013      	strbpl	r3, [r2, #0]
    1f12:	4b21      	ldr	r3, [pc, #132]	; (1f98 <TrimAfterColdResetWakeupFromShutDown+0xb8>)
    1f14:	2200      	movs	r2, #0
    1f16:	601a      	str	r2, [r3, #0]
    1f18:	4b20      	ldr	r3, [pc, #128]	; (1f9c <TrimAfterColdResetWakeupFromShutDown+0xbc>)
    1f1a:	681c      	ldr	r4, [r3, #0]
    1f1c:	4620      	mov	r0, r4
    1f1e:	f000 f8d9 	bl	20d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>
    1f22:	4628      	mov	r0, r5
    1f24:	4621      	mov	r1, r4
    1f26:	f000 fa0d 	bl	2344 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>
    1f2a:	f240 221d 	movw	r2, #541	; 0x21d
    1f2e:	4b1c      	ldr	r3, [pc, #112]	; (1fa0 <TrimAfterColdResetWakeupFromShutDown+0xc0>)
    1f30:	681b      	ldr	r3, [r3, #0]
    1f32:	b29b      	uxth	r3, r3
    1f34:	4293      	cmp	r3, r2
    1f36:	d814      	bhi.n	1f62 <TrimAfterColdResetWakeupFromShutDown+0x82>
    1f38:	4a1a      	ldr	r2, [pc, #104]	; (1fa4 <TrimAfterColdResetWakeupFromShutDown+0xc4>)
    1f3a:	6813      	ldr	r3, [r2, #0]
    1f3c:	6812      	ldr	r2, [r2, #0]
    1f3e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1f42:	f3c2 4203 	ubfx	r2, r2, #16, #4
    1f46:	b103      	cbz	r3, 1f4a <TrimAfterColdResetWakeupFromShutDown+0x6a>
    1f48:	3b01      	subs	r3, #1
    1f4a:	1f91      	subs	r1, r2, #6
    1f4c:	2901      	cmp	r1, #1
    1f4e:	bf86      	itte	hi
    1f50:	3202      	addhi	r2, #2
    1f52:	f002 020f 	andhi.w	r2, r2, #15
    1f56:	2207      	movls	r2, #7
    1f58:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    1f5c:	4a12      	ldr	r2, [pc, #72]	; (1fa8 <TrimAfterColdResetWakeupFromShutDown+0xc8>)
    1f5e:	b2db      	uxtb	r3, r3
    1f60:	7013      	strb	r3, [r2, #0]
    1f62:	4620      	mov	r0, r4
    1f64:	f000 fabc 	bl	24e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>
    1f68:	4b10      	ldr	r3, [pc, #64]	; (1fac <TrimAfterColdResetWakeupFromShutDown+0xcc>)
    1f6a:	2002      	movs	r0, #2
    1f6c:	681b      	ldr	r3, [r3, #0]
    1f6e:	68db      	ldr	r3, [r3, #12]
    1f70:	4798      	blx	r3
    1f72:	4b05      	ldr	r3, [pc, #20]	; (1f88 <TrimAfterColdResetWakeupFromShutDown+0xa8>)
    1f74:	2240      	movs	r2, #64	; 0x40
    1f76:	601a      	str	r2, [r3, #0]
    1f78:	4b0d      	ldr	r3, [pc, #52]	; (1fb0 <TrimAfterColdResetWakeupFromShutDown+0xd0>)
    1f7a:	2201      	movs	r2, #1
    1f7c:	601a      	str	r2, [r3, #0]
    1f7e:	bd38      	pop	{r3, r4, r5, pc}
    1f80:	40091010 	andmi	r1, r9, r0, lsl r0
    1f84:	43220294 			; <UNDEFINED> instruction: 0x43220294
    1f88:	400c6000 	andmi	r6, ip, r0
    1f8c:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    1f90:	50003fac 	andpl	r3, r0, ip, lsr #31
    1f94:	40086256 	andmi	r6, r8, r6, asr r2
    1f98:	40091040 	andmi	r1, r9, r0, asr #32
    1f9c:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    1fa0:	50001314 	andpl	r1, r0, r4, lsl r3
    1fa4:	500012bc 			; <UNDEFINED> instruction: 0x500012bc
    1fa8:	40086002 	andmi	r6, r8, r2
    1fac:	100001a0 	andne	r0, r0, r0, lsr #3
    1fb0:	42600494 	rsbmi	r0, r0, #148, 8	; 0x94000000

00001fb4 <NOROM_SetupTrimDevice>:
    1fb4:	b510      	push	{r4, lr}
    1fb6:	4b1f      	ldr	r3, [pc, #124]	; (2034 <NOROM_SetupTrimDevice+0x80>)
    1fb8:	681c      	ldr	r4, [r3, #0]
    1fba:	1c63      	adds	r3, r4, #1
    1fbc:	bf08      	it	eq
    1fbe:	2400      	moveq	r4, #0
    1fc0:	f000 fcde 	bl	2980 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>
    1fc4:	4b1c      	ldr	r3, [pc, #112]	; (2038 <NOROM_SetupTrimDevice+0x84>)
    1fc6:	2200      	movs	r2, #0
    1fc8:	601a      	str	r2, [r3, #0]
    1fca:	4a1c      	ldr	r2, [pc, #112]	; (203c <NOROM_SetupTrimDevice+0x88>)
    1fcc:	2301      	movs	r3, #1
    1fce:	6013      	str	r3, [r2, #0]
    1fd0:	4a1b      	ldr	r2, [pc, #108]	; (2040 <NOROM_SetupTrimDevice+0x8c>)
    1fd2:	6013      	str	r3, [r2, #0]
    1fd4:	f000 fa3e 	bl	2454 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>
    1fd8:	4b1a      	ldr	r3, [pc, #104]	; (2044 <NOROM_SetupTrimDevice+0x90>)
    1fda:	681b      	ldr	r3, [r3, #0]
    1fdc:	b123      	cbz	r3, 1fe8 <NOROM_SetupTrimDevice+0x34>
    1fde:	4b1a      	ldr	r3, [pc, #104]	; (2048 <NOROM_SetupTrimDevice+0x94>)
    1fe0:	4620      	mov	r0, r4
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	f7ff ff7c 	bl	1ee0 <TrimAfterColdResetWakeupFromShutDown>
    1fe8:	4b18      	ldr	r3, [pc, #96]	; (204c <NOROM_SetupTrimDevice+0x98>)
    1fea:	2200      	movs	r2, #0
    1fec:	601a      	str	r2, [r3, #0]
    1fee:	4a18      	ldr	r2, [pc, #96]	; (2050 <NOROM_SetupTrimDevice+0x9c>)
    1ff0:	6813      	ldr	r3, [r2, #0]
    1ff2:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
    1ff6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    1ffa:	f043 739c 	orr.w	r3, r3, #20447232	; 0x1380000
    1ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    2002:	6013      	str	r3, [r2, #0]
    2004:	f502 22bb 	add.w	r2, r2, #382976	; 0x5d800
    2008:	f202 72bc 	addw	r2, r2, #1980	; 0x7bc
    200c:	6813      	ldr	r3, [r2, #0]
    200e:	f3c3 3301 	ubfx	r3, r3, #12, #2
    2012:	2b01      	cmp	r3, #1
    2014:	bf01      	itttt	eq
    2016:	6813      	ldreq	r3, [r2, #0]
    2018:	f023 7340 	biceq.w	r3, r3, #50331648	; 0x3000000
    201c:	f423 3340 	biceq.w	r3, r3, #196608	; 0x30000
    2020:	f443 3100 	orreq.w	r1, r3, #131072	; 0x20000
    2024:	bf04      	itt	eq
    2026:	6011      	streq	r1, [r2, #0]
    2028:	6013      	streq	r3, [r2, #0]
    202a:	4b0a      	ldr	r3, [pc, #40]	; (2054 <NOROM_SetupTrimDevice+0xa0>)
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d1fb      	bne.n	202a <NOROM_SetupTrimDevice+0x76>
    2032:	bd10      	pop	{r4, pc}
    2034:	5000131c 	andpl	r1, r0, ip, lsl r3
    2038:	42600484 	rsbmi	r0, r0, #132, 8	; 0x84000000
    203c:	400c605c 	andmi	r6, ip, ip, asr r0
    2040:	43042208 	movwmi	r2, #16904	; 0x4208
    2044:	43280180 			; <UNDEFINED> instruction: 0x43280180
    2048:	43200100 	nopmi	{0}	; <UNPREDICTABLE>
    204c:	4008218c 	andmi	r2, r8, ip, lsl #3
    2050:	40032048 	andmi	r2, r3, r8, asr #32
    2054:	4268000c 	rsbmi	r0, r8, #12

00002058 <NOROM_SetupSetVddrLevel>:
    2058:	b530      	push	{r4, r5, lr}
    205a:	4b19      	ldr	r3, [pc, #100]	; (20c0 <NOROM_SetupSetVddrLevel+0x68>)
    205c:	681a      	ldr	r2, [r3, #0]
    205e:	4b19      	ldr	r3, [pc, #100]	; (20c4 <NOROM_SetupSetVddrLevel+0x6c>)
    2060:	f3c2 6204 	ubfx	r2, r2, #24, #5
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2a15      	cmp	r2, #21
    2068:	f003 031f 	and.w	r3, r3, #31
    206c:	bf88      	it	hi
    206e:	3a20      	subhi	r2, #32
    2070:	2b15      	cmp	r3, #21
    2072:	bf88      	it	hi
    2074:	3b20      	subhi	r3, #32
    2076:	4293      	cmp	r3, r2
    2078:	d020      	beq.n	20bc <NOROM_SetupSetVddrLevel+0x64>
    207a:	4913      	ldr	r1, [pc, #76]	; (20c8 <NOROM_SetupSetVddrLevel+0x70>)
    207c:	2000      	movs	r0, #0
    207e:	6008      	str	r0, [r1, #0]
    2080:	4608      	mov	r0, r1
    2082:	1ad1      	subs	r1, r2, r3
    2084:	2902      	cmp	r1, #2
    2086:	dc05      	bgt.n	2094 <NOROM_SetupSetVddrLevel+0x3c>
    2088:	f06f 0401 	mvn.w	r4, #1
    208c:	42a1      	cmp	r1, r4
    208e:	bfb8      	it	lt
    2090:	4621      	movlt	r1, r4
    2092:	e000      	b.n	2096 <NOROM_SetupSetVddrLevel+0x3e>
    2094:	2102      	movs	r1, #2
    2096:	440b      	add	r3, r1
    2098:	490c      	ldr	r1, [pc, #48]	; (20cc <NOROM_SetupSetVddrLevel+0x74>)
    209a:	4d0d      	ldr	r5, [pc, #52]	; (20d0 <NOROM_SetupSetVddrLevel+0x78>)
    209c:	680c      	ldr	r4, [r1, #0]
    209e:	f003 041f 	and.w	r4, r3, #31
    20a2:	f444 54f8 	orr.w	r4, r4, #7936	; 0x1f00
    20a6:	802c      	strh	r4, [r5, #0]
    20a8:	4293      	cmp	r3, r2
    20aa:	f04f 0401 	mov.w	r4, #1
    20ae:	600c      	str	r4, [r1, #0]
    20b0:	d1e7      	bne.n	2082 <NOROM_SetupSetVddrLevel+0x2a>
    20b2:	680b      	ldr	r3, [r1, #0]
    20b4:	600c      	str	r4, [r1, #0]
    20b6:	680b      	ldr	r3, [r1, #0]
    20b8:	6004      	str	r4, [r0, #0]
    20ba:	680b      	ldr	r3, [r1, #0]
    20bc:	bd30      	pop	{r4, r5, pc}
    20be:	bf00      	nop
    20c0:	50001388 	andpl	r1, r0, r8, lsl #7
    20c4:	40086206 	andmi	r6, r8, r6, lsl #4
    20c8:	43200098 			; <UNDEFINED> instruction: 0x43200098
    20cc:	4009202c 	andmi	r2, r9, ip, lsr #32
    20d0:	4008626c 	andmi	r6, r8, ip, ror #4

000020d4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1>:
    20d4:	f000 7340 	and.w	r3, r0, #50331648	; 0x3000000
    20d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    20dc:	b510      	push	{r4, lr}
    20de:	4604      	mov	r4, r0
    20e0:	d10f      	bne.n	2102 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x2e>
    20e2:	f64f 01d8 	movw	r1, #63704	; 0xf8d8
    20e6:	4a1e      	ldr	r2, [pc, #120]	; (2160 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x8c>)
    20e8:	2380      	movs	r3, #128	; 0x80
    20ea:	7013      	strb	r3, [r2, #0]
    20ec:	f8a2 1041 	strh.w	r1, [r2, #65]	; 0x41
    20f0:	f802 3c10 	strb.w	r3, [r2, #-16]
    20f4:	f7ff ffb0 	bl	2058 <NOROM_SetupSetVddrLevel>
    20f8:	4b1a      	ldr	r3, [pc, #104]	; (2164 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x90>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2100:	e003      	b.n	210a <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x36>
    2102:	4b19      	ldr	r3, [pc, #100]	; (2168 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x94>)
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	f3c3 6304 	ubfx	r3, r3, #24, #5
    210a:	2b15      	cmp	r3, #21
    210c:	bf88      	it	hi
    210e:	3b20      	subhi	r3, #32
    2110:	eb03 7324 	add.w	r3, r3, r4, asr #28
    2114:	3301      	adds	r3, #1
    2116:	2b15      	cmp	r3, #21
    2118:	dc05      	bgt.n	2126 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x52>
    211a:	f06f 0209 	mvn.w	r2, #9
    211e:	4293      	cmp	r3, r2
    2120:	bfb8      	it	lt
    2122:	4613      	movlt	r3, r2
    2124:	e000      	b.n	2128 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x54>
    2126:	2315      	movs	r3, #21
    2128:	4a10      	ldr	r2, [pc, #64]	; (216c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>)
    212a:	f003 031f 	and.w	r3, r3, #31
    212e:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
    2132:	8013      	strh	r3, [r2, #0]
    2134:	4b0e      	ldr	r3, [pc, #56]	; (2170 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x9c>)
    2136:	681b      	ldr	r3, [r3, #0]
    2138:	f013 0302 	ands.w	r3, r3, #2
    213c:	bf0a      	itet	eq
    213e:	4a0d      	ldreq	r2, [pc, #52]	; (2174 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa0>)
    2140:	f044 6440 	orrne.w	r4, r4, #201326592	; 0xc000000
    2144:	6013      	streq	r3, [r2, #0]
    2146:	f3c4 63c0 	ubfx	r3, r4, #27, #1
    214a:	4a0b      	ldr	r2, [pc, #44]	; (2178 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa4>)
    214c:	f083 0301 	eor.w	r3, r3, #1
    2150:	6013      	str	r3, [r2, #0]
    2152:	f3c4 6480 	ubfx	r4, r4, #26, #1
    2156:	4b09      	ldr	r3, [pc, #36]	; (217c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>)
    2158:	f084 0401 	eor.w	r4, r4, #1
    215c:	601c      	str	r4, [r3, #0]
    215e:	bd10      	pop	{r4, pc}
    2160:	40086225 	andmi	r6, r8, r5, lsr #4
    2164:	50001388 	andpl	r1, r0, r8, lsl #7
    2168:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    216c:	4008626e 	andmi	r6, r8, lr, ror #4
    2170:	40090000 	andmi	r0, r9, r0
    2174:	432a0494 			; <UNDEFINED> instruction: 0x432a0494
    2178:	43200000 	nopmi	{0}	; <UNPREDICTABLE>
    217c:	43200008 			; <UNDEFINED> instruction: 0x43200008

00002180 <NOROM_SetupGetTrimForAnabypassValue1>:
    2180:	4b15      	ldr	r3, [pc, #84]	; (21d8 <NOROM_SetupGetTrimForAnabypassValue1+0x58>)
    2182:	0381      	lsls	r1, r0, #14
    2184:	681b      	ldr	r3, [r3, #0]
    2186:	f3c3 6283 	ubfx	r2, r3, #26, #4
    218a:	f3c3 238f 	ubfx	r3, r3, #10, #16
    218e:	d41f      	bmi.n	21d0 <NOROM_SetupGetTrimForAnabypassValue1+0x50>
    2190:	f340 2007 	sbfx	r0, r0, #8, #8
    2194:	2800      	cmp	r0, #0
    2196:	da19      	bge.n	21cc <NOROM_SetupGetTrimForAnabypassValue1+0x4c>
    2198:	085b      	lsrs	r3, r3, #1
    219a:	d105      	bne.n	21a8 <NOROM_SetupGetTrimForAnabypassValue1+0x28>
    219c:	0852      	lsrs	r2, r2, #1
    219e:	bf06      	itte	eq
    21a0:	2301      	moveq	r3, #1
    21a2:	461a      	moveq	r2, r3
    21a4:	f64f 73ff 	movwne	r3, #65535	; 0xffff
    21a8:	3001      	adds	r0, #1
    21aa:	e7f3      	b.n	2194 <NOROM_SetupGetTrimForAnabypassValue1+0x14>
    21ac:	005b      	lsls	r3, r3, #1
    21ae:	f043 0301 	orr.w	r3, r3, #1
    21b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    21b6:	d308      	bcc.n	21ca <NOROM_SetupGetTrimForAnabypassValue1+0x4a>
    21b8:	0052      	lsls	r2, r2, #1
    21ba:	f042 0201 	orr.w	r2, r2, #1
    21be:	2a0f      	cmp	r2, #15
    21c0:	bf86      	itte	hi
    21c2:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
    21c6:	220f      	movhi	r2, #15
    21c8:	2301      	movls	r3, #1
    21ca:	3801      	subs	r0, #1
    21cc:	2800      	cmp	r0, #0
    21ce:	d1ed      	bne.n	21ac <NOROM_SetupGetTrimForAnabypassValue1+0x2c>
    21d0:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop
    21d8:	50001350 	andpl	r1, r0, r0, asr r3

000021dc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>:
    21dc:	4a04      	ldr	r2, [pc, #16]	; (21f0 <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim+0x14>)
    21de:	6813      	ldr	r3, [r2, #0]
    21e0:	6810      	ldr	r0, [r2, #0]
    21e2:	f3c3 0387 	ubfx	r3, r3, #2, #8
    21e6:	f000 0003 	and.w	r0, r0, #3
    21ea:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    21ee:	4770      	bx	lr
    21f0:	50001350 	andpl	r1, r0, r0, asr r3

000021f4 <NOROM_SetupGetTrimForAmpcompTh2>:
    21f4:	4b02      	ldr	r3, [pc, #8]	; (2200 <NOROM_SetupGetTrimForAmpcompTh2+0xc>)
    21f6:	6818      	ldr	r0, [r3, #0]
    21f8:	f000 30fc 	and.w	r0, r0, #4244438268	; 0xfcfcfcfc
    21fc:	4770      	bx	lr
    21fe:	bf00      	nop
    2200:	50001374 	andpl	r1, r0, r4, ror r3

00002204 <NOROM_SetupGetTrimForAmpcompTh1>:
    2204:	4b03      	ldr	r3, [pc, #12]	; (2214 <NOROM_SetupGetTrimForAmpcompTh1+0x10>)
    2206:	6818      	ldr	r0, [r3, #0]
    2208:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    220c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    2210:	4770      	bx	lr
    2212:	bf00      	nop
    2214:	50001370 	andpl	r1, r0, r0, ror r3

00002218 <NOROM_SetupGetTrimForAmpcompCtrl>:
    2218:	b570      	push	{r4, r5, r6, lr}
    221a:	4b15      	ldr	r3, [pc, #84]	; (2270 <NOROM_SetupGetTrimForAmpcompCtrl+0x58>)
    221c:	4915      	ldr	r1, [pc, #84]	; (2274 <NOROM_SetupGetTrimForAmpcompCtrl+0x5c>)
    221e:	681c      	ldr	r4, [r3, #0]
    2220:	6809      	ldr	r1, [r1, #0]
    2222:	f3c4 5203 	ubfx	r2, r4, #20, #4
    2226:	f011 0501 	ands.w	r5, r1, #1
    222a:	f3c4 4303 	ubfx	r3, r4, #16, #4
    222e:	d113      	bne.n	2258 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2230:	4911      	ldr	r1, [pc, #68]	; (2278 <NOROM_SetupGetTrimForAmpcompCtrl+0x60>)
    2232:	6809      	ldr	r1, [r1, #0]
    2234:	f341 2603 	sbfx	r6, r1, #8, #4
    2238:	18b2      	adds	r2, r6, r2
    223a:	d403      	bmi.n	2244 <NOROM_SetupGetTrimForAmpcompCtrl+0x2c>
    223c:	2a0f      	cmp	r2, #15
    223e:	bfa8      	it	ge
    2240:	220f      	movge	r2, #15
    2242:	e000      	b.n	2246 <NOROM_SetupGetTrimForAmpcompCtrl+0x2e>
    2244:	462a      	mov	r2, r5
    2246:	f341 3103 	sbfx	r1, r1, #12, #4
    224a:	18cb      	adds	r3, r1, r3
    224c:	d403      	bmi.n	2256 <NOROM_SetupGetTrimForAmpcompCtrl+0x3e>
    224e:	2b0f      	cmp	r3, #15
    2250:	bfa8      	it	ge
    2252:	230f      	movge	r3, #15
    2254:	e000      	b.n	2258 <NOROM_SetupGetTrimForAmpcompCtrl+0x40>
    2256:	2300      	movs	r3, #0
    2258:	b2a1      	uxth	r1, r4
    225a:	2821      	cmp	r0, #33	; 0x21
    225c:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    2260:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2264:	bf84      	itt	hi
    2266:	f004 4480 	andhi.w	r4, r4, #1073741824	; 0x40000000
    226a:	4323      	orrhi	r3, r4
    226c:	4618      	mov	r0, r3
    226e:	bd70      	pop	{r4, r5, r6, pc}
    2270:	50001378 	andpl	r1, r0, r8, ror r3
    2274:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    2278:	50003fac 	andpl	r3, r0, ip, lsr #31

0000227c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>:
    227c:	281f      	cmp	r0, #31
    227e:	bf83      	ittte	hi
    2280:	4b02      	ldrhi	r3, [pc, #8]	; (228c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0x10>)
    2282:	6818      	ldrhi	r0, [r3, #0]
    2284:	f3c0 5001 	ubfxhi	r0, r0, #20, #2
    2288:	2000      	movls	r0, #0
    228a:	4770      	bx	lr
    228c:	50001398 	mulpl	r0, r8, r3

00002290 <NOROM_SetupGetTrimForAdcShModeEn>:
    2290:	2821      	cmp	r0, #33	; 0x21
    2292:	bf83      	ittte	hi
    2294:	4b02      	ldrhi	r3, [pc, #8]	; (22a0 <NOROM_SetupGetTrimForAdcShModeEn+0x10>)
    2296:	6818      	ldrhi	r0, [r3, #0]
    2298:	f3c0 7000 	ubfxhi	r0, r0, #28, #1
    229c:	2001      	movls	r0, #1
    229e:	4770      	bx	lr
    22a0:	5000138c 	andpl	r1, r0, ip, lsl #7

000022a4 <NOROM_SetupGetTrimForAdcShVbufEn>:
    22a4:	2821      	cmp	r0, #33	; 0x21
    22a6:	bf83      	ittte	hi
    22a8:	4b02      	ldrhi	r3, [pc, #8]	; (22b4 <NOROM_SetupGetTrimForAdcShVbufEn+0x10>)
    22aa:	6818      	ldrhi	r0, [r3, #0]
    22ac:	f3c0 7040 	ubfxhi	r0, r0, #29, #1
    22b0:	2001      	movls	r0, #1
    22b2:	4770      	bx	lr
    22b4:	5000138c 	andpl	r1, r0, ip, lsl #7

000022b8 <NOROM_SetupGetTrimForXoscHfCtl>:
    22b8:	281f      	cmp	r0, #31
    22ba:	bf81      	itttt	hi
    22bc:	4b07      	ldrhi	r3, [pc, #28]	; (22dc <NOROM_SetupGetTrimForXoscHfCtl+0x24>)
    22be:	681b      	ldrhi	r3, [r3, #0]
    22c0:	f3c3 6002 	ubfxhi	r0, r3, #24, #3
    22c4:	0080      	lslhi	r0, r0, #2
    22c6:	bf81      	itttt	hi
    22c8:	f3c3 62c1 	ubfxhi	r2, r3, #27, #2
    22cc:	ea40 2002 	orrhi.w	r0, r0, r2, lsl #8
    22d0:	f3c3 5381 	ubfxhi	r3, r3, #22, #2
    22d4:	4318      	orrhi	r0, r3
    22d6:	bf98      	it	ls
    22d8:	2000      	movls	r0, #0
    22da:	4770      	bx	lr
    22dc:	50001398 	mulpl	r0, r8, r3

000022e0 <NOROM_SetupGetTrimForXoscHfFastStart>:
    22e0:	4b02      	ldr	r3, [pc, #8]	; (22ec <NOROM_SetupGetTrimForXoscHfFastStart+0xc>)
    22e2:	6818      	ldr	r0, [r3, #0]
    22e4:	f3c0 40c1 	ubfx	r0, r0, #19, #2
    22e8:	4770      	bx	lr
    22ea:	bf00      	nop
    22ec:	5000138c 	andpl	r1, r0, ip, lsl #7

000022f0 <NOROM_SetupGetTrimForRadcExtCfg>:
    22f0:	281f      	cmp	r0, #31
    22f2:	bf81      	itttt	hi
    22f4:	4b07      	ldrhi	r3, [pc, #28]	; (2314 <NOROM_SetupGetTrimForRadcExtCfg+0x24>)
    22f6:	681b      	ldrhi	r3, [r3, #0]
    22f8:	f3c3 1005 	ubfxhi	r0, r3, #4, #6
    22fc:	f3c3 2289 	ubfxhi	r2, r3, #10, #10
    2300:	bf81      	itttt	hi
    2302:	0400      	lslhi	r0, r0, #16
    2304:	031b      	lslhi	r3, r3, #12
    2306:	ea40 5082 	orrhi.w	r0, r0, r2, lsl #22
    230a:	b29b      	uxthhi	r3, r3
    230c:	bf8c      	ite	hi
    230e:	4318      	orrhi	r0, r3
    2310:	4801      	ldrls	r0, [pc, #4]	; (2318 <NOROM_SetupGetTrimForRadcExtCfg+0x28>)
    2312:	4770      	bx	lr
    2314:	50001398 	mulpl	r0, r8, r3
    2318:	403f8000 	eorsmi	r8, pc, r0

0000231c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>:
    231c:	2821      	cmp	r0, #33	; 0x21
    231e:	bf83      	ittte	hi
    2320:	4b02      	ldrhi	r3, [pc, #8]	; (232c <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x10>)
    2322:	6818      	ldrhi	r0, [r3, #0]
    2324:	f3c0 60c0 	ubfxhi	r0, r0, #27, #1
    2328:	2000      	movls	r0, #0
    232a:	4770      	bx	lr
    232c:	5000138c 	andpl	r1, r0, ip, lsl #7

00002330 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>:
    2330:	2821      	cmp	r0, #33	; 0x21
    2332:	bf83      	ittte	hi
    2334:	4b02      	ldrhi	r3, [pc, #8]	; (2340 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x10>)
    2336:	6818      	ldrhi	r0, [r3, #0]
    2338:	f3c0 5045 	ubfxhi	r0, r0, #21, #6
    233c:	2000      	movls	r0, #0
    233e:	4770      	bx	lr
    2340:	5000138c 	andpl	r1, r0, ip, lsl #7

00002344 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2>:
    2344:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2346:	4605      	mov	r5, r0
    2348:	4608      	mov	r0, r1
    234a:	f7ff ff19 	bl	2180 <NOROM_SetupGetTrimForAnabypassValue1>
    234e:	4c39      	ldr	r4, [pc, #228]	; (2434 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf0>)
    2350:	4602      	mov	r2, r0
    2352:	2118      	movs	r1, #24
    2354:	4620      	mov	r0, r4
    2356:	f000 fb33 	bl	29c0 <NOROM_DDI32RegWrite>
    235a:	f7ff ff3f 	bl	21dc <NOROM_SetupGetTrimForRcOscLfRtuneCtuneTrim>
    235e:	4b36      	ldr	r3, [pc, #216]	; (2438 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf4>)
    2360:	b280      	uxth	r0, r0
    2362:	681b      	ldr	r3, [r3, #0]
    2364:	9000      	str	r0, [sp, #0]
    2366:	685e      	ldr	r6, [r3, #4]
    2368:	4620      	mov	r0, r4
    236a:	212c      	movs	r1, #44	; 0x2c
    236c:	f240 32ff 	movw	r2, #1023	; 0x3ff
    2370:	2300      	movs	r3, #0
    2372:	47b0      	blx	r6
    2374:	4b31      	ldr	r3, [pc, #196]	; (243c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xf8>)
    2376:	4620      	mov	r0, r4
    2378:	681a      	ldr	r2, [r3, #0]
    237a:	211c      	movs	r1, #28
    237c:	f3c2 020d 	ubfx	r2, r2, #0, #14
    2380:	f000 fb1e 	bl	29c0 <NOROM_DDI32RegWrite>
    2384:	f7ff ff36 	bl	21f4 <NOROM_SetupGetTrimForAmpcompTh2>
    2388:	2114      	movs	r1, #20
    238a:	4602      	mov	r2, r0
    238c:	4620      	mov	r0, r4
    238e:	f000 fb17 	bl	29c0 <NOROM_DDI32RegWrite>
    2392:	f7ff ff37 	bl	2204 <NOROM_SetupGetTrimForAmpcompTh1>
    2396:	2110      	movs	r1, #16
    2398:	4602      	mov	r2, r0
    239a:	4620      	mov	r0, r4
    239c:	f000 fb10 	bl	29c0 <NOROM_DDI32RegWrite>
    23a0:	4628      	mov	r0, r5
    23a2:	f7ff ff39 	bl	2218 <NOROM_SetupGetTrimForAmpcompCtrl>
    23a6:	210c      	movs	r1, #12
    23a8:	4602      	mov	r2, r0
    23aa:	4620      	mov	r0, r4
    23ac:	f000 fb08 	bl	29c0 <NOROM_DDI32RegWrite>
    23b0:	4628      	mov	r0, r5
    23b2:	f7ff ff6d 	bl	2290 <NOROM_SetupGetTrimForAdcShModeEn>
    23b6:	0040      	lsls	r0, r0, #1
    23b8:	4e21      	ldr	r6, [pc, #132]	; (2440 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>)
    23ba:	f040 0020 	orr.w	r0, r0, #32
    23be:	b2c0      	uxtb	r0, r0
    23c0:	7030      	strb	r0, [r6, #0]
    23c2:	4628      	mov	r0, r5
    23c4:	f7ff ff6e 	bl	22a4 <NOROM_SetupGetTrimForAdcShVbufEn>
    23c8:	f040 0010 	orr.w	r0, r0, #16
    23cc:	b2c0      	uxtb	r0, r0
    23ce:	7030      	strb	r0, [r6, #0]
    23d0:	4628      	mov	r0, r5
    23d2:	f7ff ff71 	bl	22b8 <NOROM_SetupGetTrimForXoscHfCtl>
    23d6:	2128      	movs	r1, #40	; 0x28
    23d8:	4602      	mov	r2, r0
    23da:	4620      	mov	r0, r4
    23dc:	f000 faf0 	bl	29c0 <NOROM_DDI32RegWrite>
    23e0:	4628      	mov	r0, r5
    23e2:	f7ff ff4b 	bl	227c <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage>
    23e6:	0040      	lsls	r0, r0, #1
    23e8:	4b16      	ldr	r3, [pc, #88]	; (2444 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x100>)
    23ea:	f040 0060 	orr.w	r0, r0, #96	; 0x60
    23ee:	b2c0      	uxtb	r0, r0
    23f0:	7018      	strb	r0, [r3, #0]
    23f2:	4628      	mov	r0, r5
    23f4:	f7ff ff92 	bl	231c <NOROM_SetupGetTrimForRcOscLfIBiasTrim>
    23f8:	00c0      	lsls	r0, r0, #3
    23fa:	4b13      	ldr	r3, [pc, #76]	; (2448 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x104>)
    23fc:	f060 007f 	orn	r0, r0, #127	; 0x7f
    2400:	b2c0      	uxtb	r0, r0
    2402:	7018      	strb	r0, [r3, #0]
    2404:	4628      	mov	r0, r5
    2406:	f7ff ff93 	bl	2330 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio>
    240a:	ea6f 6000 	mvn.w	r0, r0, lsl #24
    240e:	ea6f 5090 	mvn.w	r0, r0, lsr #22
    2412:	4b0e      	ldr	r3, [pc, #56]	; (244c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x108>)
    2414:	b280      	uxth	r0, r0
    2416:	8018      	strh	r0, [r3, #0]
    2418:	4628      	mov	r0, r5
    241a:	f7ff ff69 	bl	22f0 <NOROM_SetupGetTrimForRadcExtCfg>
    241e:	2108      	movs	r1, #8
    2420:	4602      	mov	r2, r0
    2422:	4620      	mov	r0, r4
    2424:	f000 facc 	bl	29c0 <NOROM_DDI32RegWrite>
    2428:	4b09      	ldr	r3, [pc, #36]	; (2450 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x10c>)
    242a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    242e:	601a      	str	r2, [r3, #0]
    2430:	b002      	add	sp, #8
    2432:	bd70      	pop	{r4, r5, r6, pc}
    2434:	400ca000 	andmi	sl, ip, r0
    2438:	100001a4 	andne	r0, r0, r4, lsr #3
    243c:	5000137c 	andpl	r1, r0, ip, ror r3
    2440:	400ca149 	andmi	sl, ip, r9, asr #2
    2444:	400ca14c 	andmi	sl, ip, ip, asr #2
    2448:	400ca141 	andmi	sl, ip, r1, asr #2
    244c:	400ca1dc 	ldrdmi	sl, [ip], -ip
    2450:	400ca040 	andmi	sl, ip, r0, asr #32

00002454 <NOROM_SetupSetCacheModeAccordingToCcfgSetting>:
    2454:	b530      	push	{r4, r5, lr}
    2456:	4b14      	ldr	r3, [pc, #80]	; (24a8 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x54>)
    2458:	681b      	ldr	r3, [r3, #0]
    245a:	2b00      	cmp	r3, #0
    245c:	d1fb      	bne.n	2456 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2>
    245e:	4a13      	ldr	r2, [pc, #76]	; (24ac <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x58>)
    2460:	4913      	ldr	r1, [pc, #76]	; (24b0 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x5c>)
    2462:	6813      	ldr	r3, [r2, #0]
    2464:	6809      	ldr	r1, [r1, #0]
    2466:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    246a:	f023 0307 	bic.w	r3, r3, #7
    246e:	f011 0f04 	tst.w	r1, #4
    2472:	4614      	mov	r4, r2
    2474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    2478:	d003      	beq.n	2482 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x2e>
    247a:	f043 0305 	orr.w	r3, r3, #5
    247e:	6013      	str	r3, [r2, #0]
    2480:	bd30      	pop	{r4, r5, pc}
    2482:	490c      	ldr	r1, [pc, #48]	; (24b4 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x60>)
    2484:	f043 0004 	orr.w	r0, r3, #4
    2488:	680d      	ldr	r5, [r1, #0]
    248a:	07ad      	lsls	r5, r5, #30
    248c:	d009      	beq.n	24a2 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x4e>
    248e:	f043 0307 	orr.w	r3, r3, #7
    2492:	6013      	str	r3, [r2, #0]
    2494:	680b      	ldr	r3, [r1, #0]
    2496:	f003 0303 	and.w	r3, r3, #3
    249a:	2b03      	cmp	r3, #3
    249c:	d1fa      	bne.n	2494 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x40>
    249e:	6020      	str	r0, [r4, #0]
    24a0:	bd30      	pop	{r4, r5, pc}
    24a2:	6010      	str	r0, [r2, #0]
    24a4:	bd30      	pop	{r4, r5, pc}
    24a6:	bf00      	nop
    24a8:	4268000c 	rsbmi	r0, r8, #12
    24ac:	40034004 	andmi	r4, r3, r4
    24b0:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    24b4:	40034000 	andmi	r4, r3, r0

000024b8 <NOROM_SetupSetAonRtcSubSecInc>:
    24b8:	4b07      	ldr	r3, [pc, #28]	; (24d8 <NOROM_SetupSetAonRtcSubSecInc+0x20>)
    24ba:	b282      	uxth	r2, r0
    24bc:	f3c0 4007 	ubfx	r0, r0, #16, #8
    24c0:	601a      	str	r2, [r3, #0]
    24c2:	6058      	str	r0, [r3, #4]
    24c4:	2201      	movs	r2, #1
    24c6:	3308      	adds	r3, #8
    24c8:	601a      	str	r2, [r3, #0]
    24ca:	4a04      	ldr	r2, [pc, #16]	; (24dc <NOROM_SetupSetAonRtcSubSecInc+0x24>)
    24cc:	6812      	ldr	r2, [r2, #0]
    24ce:	2a00      	cmp	r2, #0
    24d0:	d0fb      	beq.n	24ca <NOROM_SetupSetAonRtcSubSecInc+0x12>
    24d2:	2200      	movs	r2, #0
    24d4:	601a      	str	r2, [r3, #0]
    24d6:	4770      	bx	lr
    24d8:	400c603c 	andmi	r6, ip, ip, lsr r0
    24dc:	438c0884 	orrmi	r0, ip, #132, 16	; 0x840000

000024e0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3>:
    24e0:	f3c0 4381 	ubfx	r3, r0, #18, #2
    24e4:	2b01      	cmp	r3, #1
    24e6:	b510      	push	{r4, lr}
    24e8:	4604      	mov	r4, r0
    24ea:	d002      	beq.n	24f2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12>
    24ec:	2b02      	cmp	r3, #2
    24ee:	d02f      	beq.n	2550 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    24f0:	e02a      	b.n	2548 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24f2:	4b42      	ldr	r3, [pc, #264]	; (25fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x11c>)
    24f4:	681b      	ldr	r3, [r3, #0]
    24f6:	039a      	lsls	r2, r3, #14
    24f8:	d426      	bmi.n	2548 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x68>
    24fa:	4a41      	ldr	r2, [pc, #260]	; (2600 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    24fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    2500:	6011      	str	r1, [r2, #0]
    2502:	4940      	ldr	r1, [pc, #256]	; (2604 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x124>)
    2504:	f3c3 3003 	ubfx	r0, r3, #12, #4
    2508:	680a      	ldr	r2, [r1, #0]
    250a:	f022 028f 	bic.w	r2, r2, #143	; 0x8f
    250e:	4302      	orrs	r2, r0
    2510:	f3c3 4000 	ubfx	r0, r3, #16, #1
    2514:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
    2518:	600a      	str	r2, [r1, #0]
    251a:	f851 2c01 	ldr.w	r2, [r1, #-1]
    251e:	f3c3 2003 	ubfx	r0, r3, #8, #4
    2522:	f022 020f 	bic.w	r2, r2, #15
    2526:	4302      	orrs	r2, r0
    2528:	f851 0c01 	ldr.w	r0, [r1, #-1]
    252c:	f841 2c01 	str.w	r2, [r1, #-1]
    2530:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2534:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    2538:	f022 02e7 	bic.w	r2, r2, #231	; 0xe7
    253c:	4313      	orrs	r3, r2
    253e:	f851 2c02 	ldr.w	r2, [r1, #-2]
    2542:	f841 3c02 	str.w	r3, [r1, #-2]
    2546:	e003      	b.n	2550 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x70>
    2548:	4b2d      	ldr	r3, [pc, #180]	; (2600 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    254a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    254e:	601a      	str	r2, [r3, #0]
    2550:	4b2d      	ldr	r3, [pc, #180]	; (2608 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x128>)
    2552:	681b      	ldr	r3, [r3, #0]
    2554:	071b      	lsls	r3, r3, #28
    2556:	bf5e      	ittt	pl
    2558:	4b2c      	ldrpl	r3, [pc, #176]	; (260c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x12c>)
    255a:	2240      	movpl	r2, #64	; 0x40
    255c:	601a      	strpl	r2, [r3, #0]
    255e:	4b2c      	ldr	r3, [pc, #176]	; (2610 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x130>)
    2560:	f44f 7200 	mov.w	r2, #512	; 0x200
    2564:	601a      	str	r2, [r3, #0]
    2566:	f7ff febb 	bl	22e0 <NOROM_SetupGetTrimForXoscHfFastStart>
    256a:	4b2a      	ldr	r3, [pc, #168]	; (2614 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x134>)
    256c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
    2570:	b2c0      	uxtb	r0, r0
    2572:	7018      	strb	r0, [r3, #0]
    2574:	f3c4 5081 	ubfx	r0, r4, #22, #2
    2578:	2801      	cmp	r0, #1
    257a:	d00b      	beq.n	2594 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xb4>
    257c:	d302      	bcc.n	2584 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    257e:	2802      	cmp	r0, #2
    2580:	d026      	beq.n	25d0 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf0>
    2582:	e028      	b.n	25d6 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf6>
    2584:	2004      	movs	r0, #4
    2586:	2101      	movs	r1, #1
    2588:	f000 fa1e 	bl	29c8 <NOROM_OSCClockSourceSet>
    258c:	4822      	ldr	r0, [pc, #136]	; (2618 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x138>)
    258e:	f7ff ff93 	bl	24b8 <NOROM_SetupSetAonRtcSubSecInc>
    2592:	e024      	b.n	25de <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfe>
    2594:	f000 fa46 	bl	2a24 <NOROM_OSCClockSourceGet>
    2598:	4604      	mov	r4, r0
    259a:	2004      	movs	r0, #4
    259c:	4621      	mov	r1, r4
    259e:	f000 fa13 	bl	29c8 <NOROM_OSCClockSourceSet>
    25a2:	2004      	movs	r0, #4
    25a4:	f000 fa3e 	bl	2a24 <NOROM_OSCClockSourceGet>
    25a8:	42a0      	cmp	r0, r4
    25aa:	d1fa      	bne.n	25a2 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xc2>
    25ac:	4b1b      	ldr	r3, [pc, #108]	; (261c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x13c>)
    25ae:	681c      	ldr	r4, [r3, #0]
    25b0:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    25b4:	f7ff ff80 	bl	24b8 <NOROM_SetupSetAonRtcSubSecInc>
    25b8:	4b19      	ldr	r3, [pc, #100]	; (2620 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x140>)
    25ba:	f04f 2260 	mov.w	r2, #1610637312	; 0x60006000
    25be:	681b      	ldr	r3, [r3, #0]
    25c0:	0e20      	lsrs	r0, r4, #24
    25c2:	681b      	ldr	r3, [r3, #0]
    25c4:	2107      	movs	r1, #7
    25c6:	4798      	blx	r3
    25c8:	4b0d      	ldr	r3, [pc, #52]	; (2600 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x120>)
    25ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    25ce:	601a      	str	r2, [r3, #0]
    25d0:	2004      	movs	r0, #4
    25d2:	2103      	movs	r1, #3
    25d4:	e001      	b.n	25da <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xfa>
    25d6:	2004      	movs	r0, #4
    25d8:	2102      	movs	r1, #2
    25da:	f000 f9f5 	bl	29c8 <NOROM_OSCClockSourceSet>
    25de:	4b11      	ldr	r3, [pc, #68]	; (2624 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x144>)
    25e0:	4a11      	ldr	r2, [pc, #68]	; (2628 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x148>)
    25e2:	681b      	ldr	r3, [r3, #0]
    25e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    25e8:	7013      	strb	r3, [r2, #0]
    25ea:	f647 0218 	movw	r2, #30744	; 0x7818
    25ee:	4b0f      	ldr	r3, [pc, #60]	; (262c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x14c>)
    25f0:	801a      	strh	r2, [r3, #0]
    25f2:	f5a3 3364 	sub.w	r3, r3, #233472	; 0x39000
    25f6:	3b44      	subs	r3, #68	; 0x44
    25f8:	681b      	ldr	r3, [r3, #0]
    25fa:	bd10      	pop	{r4, pc}
    25fc:	5000138c 	andpl	r1, r0, ip, lsl #7
    2600:	400ca040 	andmi	sl, ip, r0, asr #32
    2604:	4008600c 	andmi	r6, r8, ip
    2608:	50003fb0 			; <UNDEFINED> instruction: 0x50003fb0
    260c:	400ca068 	andmi	sl, ip, r8, rrx
    2610:	400ca080 	andmi	sl, ip, r0, lsl #1
    2614:	400ca108 	andmi	sl, ip, r8, lsl #2
    2618:	008637bd 			; <UNDEFINED> instruction: 0x008637bd
    261c:	50003fa8 	andpl	r3, r0, r8, lsr #31
    2620:	100001b4 			; <UNDEFINED> instruction: 0x100001b4
    2624:	5000136c 	andpl	r1, r0, ip, ror #6
    2628:	400cb00b 	andmi	fp, ip, fp
    262c:	400cb070 	andmi	fp, ip, r0, ror r0

00002630 <NOROM_SysCtrlSetRechargeBeforePowerDown>:
    2630:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2634:	4b77      	ldr	r3, [pc, #476]	; (2814 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e4>)
    2636:	4607      	mov	r7, r0
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	4e77      	ldr	r6, [pc, #476]	; (2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    263c:	f013 0f02 	tst.w	r3, #2
    2640:	d004      	beq.n	264c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c>
    2642:	2308      	movs	r3, #8
    2644:	71b3      	strb	r3, [r6, #6]
    2646:	4a75      	ldr	r2, [pc, #468]	; (281c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1ec>)
    2648:	4b75      	ldr	r3, [pc, #468]	; (2820 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    264a:	e0df      	b.n	280c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1dc>
    264c:	f7ff fc1c 	bl	1e88 <NOROM_AONBatMonTemperatureGetDegC>
    2650:	4b74      	ldr	r3, [pc, #464]	; (2824 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f4>)
    2652:	681d      	ldr	r5, [r3, #0]
    2654:	172a      	asrs	r2, r5, #28
    2656:	02ac      	lsls	r4, r5, #10
    2658:	f102 0101 	add.w	r1, r2, #1
    265c:	d408      	bmi.n	2670 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x40>
    265e:	f1c0 033e 	rsb	r3, r0, #62	; 0x3e
    2662:	10db      	asrs	r3, r3, #3
    2664:	2b08      	cmp	r3, #8
    2666:	bfa8      	it	ge
    2668:	2308      	movge	r3, #8
    266a:	4299      	cmp	r1, r3
    266c:	bfb8      	it	lt
    266e:	4619      	movlt	r1, r3
    2670:	f005 7340 	and.w	r3, r5, #50331648	; 0x3000000
    2674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    2678:	d10a      	bne.n	2690 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x60>
    267a:	4b6b      	ldr	r3, [pc, #428]	; (2828 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f8>)
    267c:	681a      	ldr	r2, [r3, #0]
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	f3c2 2204 	ubfx	r2, r2, #8, #5
    2684:	2a15      	cmp	r2, #21
    2686:	bf88      	it	hi
    2688:	3a20      	subhi	r2, #32
    268a:	f3c3 6304 	ubfx	r3, r3, #24, #5
    268e:	e00a      	b.n	26a6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x76>
    2690:	4b66      	ldr	r3, [pc, #408]	; (282c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1fc>)
    2692:	681a      	ldr	r2, [r3, #0]
    2694:	4b66      	ldr	r3, [pc, #408]	; (2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>)
    2696:	f3c2 6204 	ubfx	r2, r2, #24, #5
    269a:	681b      	ldr	r3, [r3, #0]
    269c:	2a15      	cmp	r2, #21
    269e:	bf88      	it	hi
    26a0:	3a20      	subhi	r2, #32
    26a2:	f3c3 4304 	ubfx	r3, r3, #16, #5
    26a6:	2b15      	cmp	r3, #21
    26a8:	440a      	add	r2, r1
    26aa:	bf88      	it	hi
    26ac:	3b20      	subhi	r3, #32
    26ae:	2a15      	cmp	r2, #21
    26b0:	dc05      	bgt.n	26be <NOROM_SysCtrlSetRechargeBeforePowerDown+0x8e>
    26b2:	f06f 0109 	mvn.w	r1, #9
    26b6:	428a      	cmp	r2, r1
    26b8:	bfb8      	it	lt
    26ba:	460a      	movlt	r2, r1
    26bc:	e000      	b.n	26c0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x90>
    26be:	2215      	movs	r2, #21
    26c0:	4c5c      	ldr	r4, [pc, #368]	; (2834 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x204>)
    26c2:	f002 011f 	and.w	r1, r2, #31
    26c6:	f441 51f8 	orr.w	r1, r1, #7936	; 0x1f00
    26ca:	8021      	strh	r1, [r4, #0]
    26cc:	495a      	ldr	r1, [pc, #360]	; (2838 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x208>)
    26ce:	6809      	ldr	r1, [r1, #0]
    26d0:	f011 0403 	ands.w	r4, r1, #3
    26d4:	bf18      	it	ne
    26d6:	2401      	movne	r4, #1
    26d8:	0749      	lsls	r1, r1, #29
    26da:	bf48      	it	mi
    26dc:	f044 0402 	orrmi.w	r4, r4, #2
    26e0:	b10f      	cbz	r7, 26e6 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xb6>
    26e2:	f044 0404 	orr.w	r4, r4, #4
    26e6:	f996 1007 	ldrsb.w	r1, [r6, #7]
    26ea:	1a41      	subs	r1, r0, r1
    26ec:	2904      	cmp	r1, #4
    26ee:	dc03      	bgt.n	26f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc8>
    26f0:	4949      	ldr	r1, [pc, #292]	; (2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    26f2:	7989      	ldrb	r1, [r1, #6]
    26f4:	428c      	cmp	r4, r1
    26f6:	d06f      	beq.n	27d8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a8>
    26f8:	f1b0 010f 	subs.w	r1, r0, #15
    26fc:	9101      	str	r1, [sp, #4]
    26fe:	f004 0101 	and.w	r1, r4, #1
    2702:	f8df a144 	ldr.w	sl, [pc, #324]	; 2848 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x218>
    2706:	f004 0904 	and.w	r9, r4, #4
    270a:	f004 0802 	and.w	r8, r4, #2
    270e:	460f      	mov	r7, r1
    2710:	d42a      	bmi.n	2768 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2712:	9901      	ldr	r1, [sp, #4]
    2714:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    2718:	ea4f 2e21 	mov.w	lr, r1, asr #8
    271c:	f1be 0f07 	cmp.w	lr, #7
    2720:	9101      	str	r1, [sp, #4]
    2722:	d801      	bhi.n	2728 <NOROM_SysCtrlSetRechargeBeforePowerDown+0xf8>
    2724:	d104      	bne.n	2730 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x100>
    2726:	e001      	b.n	272c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xfc>
    2728:	f04f 0e07 	mov.w	lr, #7
    272c:	2106      	movs	r1, #6
    272e:	e000      	b.n	2732 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x102>
    2730:	4671      	mov	r1, lr
    2732:	f8df b118 	ldr.w	fp, [pc, #280]	; 284c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x21c>
    2736:	3101      	adds	r1, #1
    2738:	f85a c021 	ldr.w	ip, [sl, r1, lsl #2]
    273c:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
    2740:	ebc1 0c0c 	rsb	ip, r1, ip
    2744:	fa5f f18c 	uxtb.w	r1, ip
    2748:	f1b9 0f00 	cmp.w	r9, #0
    274c:	d002      	beq.n	2754 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    274e:	f3cc 2b07 	ubfx	fp, ip, #8, #8
    2752:	4459      	add	r1, fp
    2754:	f1b8 0f00 	cmp.w	r8, #0
    2758:	d002      	beq.n	2760 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x130>
    275a:	f3cc 4b07 	ubfx	fp, ip, #16, #8
    275e:	4459      	add	r1, fp
    2760:	b12f      	cbz	r7, 276e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2762:	eb01 611c 	add.w	r1, r1, ip, lsr #24
    2766:	e002      	b.n	276e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x13e>
    2768:	f04f 0e00 	mov.w	lr, #0
    276c:	4671      	mov	r1, lr
    276e:	f85a a02e 	ldr.w	sl, [sl, lr, lsl #2]
    2772:	fa5f fc8a 	uxtb.w	ip, sl
    2776:	f1b9 0f00 	cmp.w	r9, #0
    277a:	d002      	beq.n	2782 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x152>
    277c:	f3ca 2907 	ubfx	r9, sl, #8, #8
    2780:	44cc      	add	ip, r9
    2782:	f1b8 0f00 	cmp.w	r8, #0
    2786:	d002      	beq.n	278e <NOROM_SysCtrlSetRechargeBeforePowerDown+0x15e>
    2788:	f3ca 4807 	ubfx	r8, sl, #16, #8
    278c:	44c4      	add	ip, r8
    278e:	b10f      	cbz	r7, 2794 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x164>
    2790:	eb0c 6c1a 	add.w	ip, ip, sl, lsr #24
    2794:	1a9b      	subs	r3, r3, r2
    2796:	2b01      	cmp	r3, #1
    2798:	bfb8      	it	lt
    279a:	2301      	movlt	r3, #1
    279c:	9f01      	ldr	r7, [sp, #4]
    279e:	2234      	movs	r2, #52	; 0x34
    27a0:	4353      	muls	r3, r2
    27a2:	eba7 270e 	sub.w	r7, r7, lr, lsl #8
    27a6:	4379      	muls	r1, r7
    27a8:	b2ed      	uxtb	r5, r5
    27aa:	436b      	muls	r3, r5
    27ac:	3180      	adds	r1, #128	; 0x80
    27ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
    27b2:	fbb3 f1f1 	udiv	r1, r3, r1
    27b6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    27ba:	4561      	cmp	r1, ip
    27bc:	bf28      	it	cs
    27be:	4661      	movcs	r1, ip
    27c0:	287f      	cmp	r0, #127	; 0x7f
    27c2:	80b1      	strh	r1, [r6, #4]
    27c4:	dc05      	bgt.n	27d2 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a2>
    27c6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    27ca:	4298      	cmp	r0, r3
    27cc:	bfb8      	it	lt
    27ce:	4618      	movlt	r0, r3
    27d0:	e000      	b.n	27d4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1a4>
    27d2:	207f      	movs	r0, #127	; 0x7f
    27d4:	71f0      	strb	r0, [r6, #7]
    27d6:	71b4      	strb	r4, [r6, #6]
    27d8:	4b18      	ldr	r3, [pc, #96]	; (283c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x20c>)
    27da:	2100      	movs	r1, #0
    27dc:	681b      	ldr	r3, [r3, #0]
    27de:	6033      	str	r3, [r6, #0]
    27e0:	88b3      	ldrh	r3, [r6, #4]
    27e2:	2b1e      	cmp	r3, #30
    27e4:	bf9e      	ittt	ls
    27e6:	4a0c      	ldrls	r2, [pc, #48]	; (2818 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1e8>)
    27e8:	231f      	movls	r3, #31
    27ea:	8093      	strhls	r3, [r2, #4]
    27ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    27f0:	d302      	bcc.n	27f8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1c8>
    27f2:	085b      	lsrs	r3, r3, #1
    27f4:	3101      	adds	r1, #1
    27f6:	e7f9      	b.n	27ec <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1bc>
    27f8:	4a11      	ldr	r2, [pc, #68]	; (2840 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x210>)
    27fa:	3b0f      	subs	r3, #15
    27fc:	430a      	orrs	r2, r1
    27fe:	091b      	lsrs	r3, r3, #4
    2800:	ea42 03c3 	orr.w	r3, r2, r3, lsl #3
    2804:	4a06      	ldr	r2, [pc, #24]	; (2820 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1f0>)
    2806:	6013      	str	r3, [r2, #0]
    2808:	4b0e      	ldr	r3, [pc, #56]	; (2844 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x214>)
    280a:	2200      	movs	r2, #0
    280c:	601a      	str	r2, [r3, #0]
    280e:	b003      	add	sp, #12
    2810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2814:	40090000 	andmi	r0, r9, r0
    2818:	2000004c 	andcs	r0, r0, ip, asr #32
    281c:	00a4fdfd 	strdeq	pc, [r4], sp	; <UNPREDICTABLE>
    2820:	40091030 	andmi	r1, r9, r0, lsr r0
    2824:	50003fb4 			; <UNDEFINED> instruction: 0x50003fb4
    2828:	50001388 	andpl	r1, r0, r8, lsl #7
    282c:	500012b8 			; <UNDEFINED> instruction: 0x500012b8
    2830:	5000113c 	andpl	r1, r0, ip, lsr r1
    2834:	4008626e 	andmi	r6, r8, lr, ror #4
    2838:	40082224 	andmi	r2, r8, r4, lsr #4
    283c:	40092008 	andmi	r2, r9, r8
    2840:	80a4e700 	adchi	lr, r4, r0, lsl #14
    2844:	40091034 	andmi	r1, r9, r4, lsr r0
    2848:	5000139c 	mulpl	r0, ip, r3
    284c:	50001398 	mulpl	r0, r8, r3

00002850 <NOROM_SysCtrlAdjustRechargeAfterPowerDown>:
    2850:	b510      	push	{r4, lr}
    2852:	4b14      	ldr	r3, [pc, #80]	; (28a4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>)
    2854:	681c      	ldr	r4, [r3, #0]
    2856:	b2a4      	uxth	r4, r4
    2858:	b314      	cbz	r4, 28a0 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x50>
    285a:	f7ff fb15 	bl	1e88 <NOROM_AONBatMonTemperatureGetDegC>
    285e:	4b12      	ldr	r3, [pc, #72]	; (28a8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2860:	f993 2007 	ldrsb.w	r2, [r3, #7]
    2864:	4290      	cmp	r0, r2
    2866:	da05      	bge.n	2874 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x24>
    2868:	f06f 027f 	mvn.w	r2, #127	; 0x7f
    286c:	4290      	cmp	r0, r2
    286e:	bfb8      	it	lt
    2870:	4610      	movlt	r0, r2
    2872:	71d8      	strb	r0, [r3, #7]
    2874:	889a      	ldrh	r2, [r3, #4]
    2876:	490c      	ldr	r1, [pc, #48]	; (28a8 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x58>)
    2878:	4294      	cmp	r4, r2
    287a:	d310      	bcc.n	289e <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4e>
    287c:	4b0b      	ldr	r3, [pc, #44]	; (28ac <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x5c>)
    287e:	6808      	ldr	r0, [r1, #0]
    2880:	681b      	ldr	r3, [r3, #0]
    2882:	1aa4      	subs	r4, r4, r2
    2884:	3302      	adds	r3, #2
    2886:	1a1b      	subs	r3, r3, r0
    2888:	2b1f      	cmp	r3, #31
    288a:	bf28      	it	cs
    288c:	231f      	movcs	r3, #31
    288e:	085b      	lsrs	r3, r3, #1
    2890:	40dc      	lsrs	r4, r3
    2892:	4414      	add	r4, r2
    2894:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2898:	4294      	cmp	r4, r2
    289a:	bf28      	it	cs
    289c:	4614      	movcs	r4, r2
    289e:	808c      	strh	r4, [r1, #4]
    28a0:	bd10      	pop	{r4, pc}
    28a2:	bf00      	nop
    28a4:	40091034 	andmi	r1, r9, r4, lsr r0
    28a8:	2000004c 	andcs	r0, r0, ip, asr #32
    28ac:	40092008 	andmi	r2, r9, r8

000028b0 <NOROM_SysCtrlResetSourceGet>:
    28b0:	4b04      	ldr	r3, [pc, #16]	; (28c4 <NOROM_SysCtrlResetSourceGet+0x14>)
    28b2:	681a      	ldr	r2, [r3, #0]
    28b4:	0412      	lsls	r2, r2, #16
    28b6:	bf5a      	itte	pl
    28b8:	6818      	ldrpl	r0, [r3, #0]
    28ba:	f3c0 0042 	ubfxpl	r0, r0, #1, #3
    28be:	2008      	movmi	r0, #8
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop
    28c4:	40090004 	andmi	r0, r9, r4

000028c8 <NOROM_ChipInfo_GetChipFamily>:
    28c8:	f64b 129a 	movw	r2, #47514	; 0xb99a
    28cc:	4b10      	ldr	r3, [pc, #64]	; (2910 <NOROM_ChipInfo_GetChipFamily+0x48>)
    28ce:	6818      	ldr	r0, [r3, #0]
    28d0:	f3c0 300f 	ubfx	r0, r0, #12, #16
    28d4:	4290      	cmp	r0, r2
    28d6:	d106      	bne.n	28e6 <NOROM_ChipInfo_GetChipFamily+0x1e>
    28d8:	681b      	ldr	r3, [r3, #0]
    28da:	0f1b      	lsrs	r3, r3, #28
    28dc:	2b0b      	cmp	r3, #11
    28de:	bf0c      	ite	eq
    28e0:	2004      	moveq	r0, #4
    28e2:	2000      	movne	r0, #0
    28e4:	e011      	b.n	290a <NOROM_ChipInfo_GetChipFamily+0x42>
    28e6:	f64b 13be 	movw	r3, #47550	; 0xb9be
    28ea:	4298      	cmp	r0, r3
    28ec:	d00a      	beq.n	2904 <NOROM_ChipInfo_GetChipFamily+0x3c>
    28ee:	f64b 3341 	movw	r3, #47937	; 0xbb41
    28f2:	4298      	cmp	r0, r3
    28f4:	d008      	beq.n	2908 <NOROM_ChipInfo_GetChipFamily+0x40>
    28f6:	f64b 3320 	movw	r3, #47904	; 0xbb20
    28fa:	4298      	cmp	r0, r3
    28fc:	bf14      	ite	ne
    28fe:	20ff      	movne	r0, #255	; 0xff
    2900:	2002      	moveq	r0, #2
    2902:	e002      	b.n	290a <NOROM_ChipInfo_GetChipFamily+0x42>
    2904:	2001      	movs	r0, #1
    2906:	e000      	b.n	290a <NOROM_ChipInfo_GetChipFamily+0x42>
    2908:	2003      	movs	r0, #3
    290a:	b240      	sxtb	r0, r0
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	50001318 	andpl	r1, r0, r8, lsl r3

00002914 <NOROM_ChipInfo_GetHwRevision>:
    2914:	b538      	push	{r3, r4, r5, lr}
    2916:	4b19      	ldr	r3, [pc, #100]	; (297c <NOROM_ChipInfo_GetHwRevision+0x68>)
    2918:	681d      	ldr	r5, [r3, #0]
    291a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
    291e:	6818      	ldr	r0, [r3, #0]
    2920:	0f2d      	lsrs	r5, r5, #28
    2922:	b2c4      	uxtb	r4, r0
    2924:	2c80      	cmp	r4, #128	; 0x80
    2926:	bf28      	it	cs
    2928:	2400      	movcs	r4, #0
    292a:	f7ff ffcd 	bl	28c8 <NOROM_ChipInfo_GetChipFamily>
    292e:	2804      	cmp	r0, #4
    2930:	d821      	bhi.n	2976 <NOROM_ChipInfo_GetHwRevision+0x62>
    2932:	e8df f000 	tbb	[pc, r0]
    2936:	1b1b1303 	blne	6c754a <__ccfg+0x6a75a2>
    293a:	3d01001c 	stccc	0, cr0, [r1, #-112]	; 0xffffff90
    293e:	2d07      	cmp	r5, #7
    2940:	d819      	bhi.n	2976 <NOROM_ChipInfo_GetHwRevision+0x62>
    2942:	e8df f005 	tbb	[pc, r5]
    2946:	18041811 	stmdane	r4, {r0, r4, fp, ip}
    294a:	08061818 	stmdaeq	r6, {r3, r4, fp, ip}
    294e:	2014      	movs	r0, #20
    2950:	e012      	b.n	2978 <NOROM_ChipInfo_GetHwRevision+0x64>
    2952:	2015      	movs	r0, #21
    2954:	e010      	b.n	2978 <NOROM_ChipInfo_GetHwRevision+0x64>
    2956:	f104 0016 	add.w	r0, r4, #22
    295a:	e00a      	b.n	2972 <NOROM_ChipInfo_GetHwRevision+0x5e>
    295c:	b125      	cbz	r5, 2968 <NOROM_ChipInfo_GetHwRevision+0x54>
    295e:	2d02      	cmp	r5, #2
    2960:	d109      	bne.n	2976 <NOROM_ChipInfo_GetHwRevision+0x62>
    2962:	f104 0014 	add.w	r0, r4, #20
    2966:	e004      	b.n	2972 <NOROM_ChipInfo_GetHwRevision+0x5e>
    2968:	200a      	movs	r0, #10
    296a:	e005      	b.n	2978 <NOROM_ChipInfo_GetHwRevision+0x64>
    296c:	b91d      	cbnz	r5, 2976 <NOROM_ChipInfo_GetHwRevision+0x62>
    296e:	f104 000a 	add.w	r0, r4, #10
    2972:	b2c0      	uxtb	r0, r0
    2974:	e000      	b.n	2978 <NOROM_ChipInfo_GetHwRevision+0x64>
    2976:	20ff      	movs	r0, #255	; 0xff
    2978:	b240      	sxtb	r0, r0
    297a:	bd38      	pop	{r3, r4, r5, pc}
    297c:	50001318 	andpl	r1, r0, r8, lsl r3

00002980 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated>:
    2980:	b508      	push	{r3, lr}
    2982:	f7ff ffa1 	bl	28c8 <NOROM_ChipInfo_GetChipFamily>
    2986:	2801      	cmp	r0, #1
    2988:	d103      	bne.n	2992 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    298a:	f7ff ffc3 	bl	2914 <NOROM_ChipInfo_GetHwRevision>
    298e:	2813      	cmp	r0, #19
    2990:	dc00      	bgt.n	2994 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x14>
    2992:	e7fe      	b.n	2992 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x12>
    2994:	bd08      	pop	{r3, pc}
	...

00002998 <AuxAdiDdiSafeWrite.constprop.1>:
    2998:	b538      	push	{r3, r4, r5, lr}
    299a:	4604      	mov	r4, r0
    299c:	460d      	mov	r5, r1
    299e:	f7ff fa97 	bl	1ed0 <NOROM_CPUcpsid>
    29a2:	4b06      	ldr	r3, [pc, #24]	; (29bc <AuxAdiDdiSafeWrite.constprop.1+0x24>)
    29a4:	681a      	ldr	r2, [r3, #0]
    29a6:	2a00      	cmp	r2, #0
    29a8:	d0fb      	beq.n	29a2 <AuxAdiDdiSafeWrite.constprop.1+0xa>
    29aa:	2201      	movs	r2, #1
    29ac:	6025      	str	r5, [r4, #0]
    29ae:	601a      	str	r2, [r3, #0]
    29b0:	b918      	cbnz	r0, 29ba <AuxAdiDdiSafeWrite.constprop.1+0x22>
    29b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    29b6:	f7ff ba8f 	b.w	1ed8 <NOROM_CPUcpsie>
    29ba:	bd38      	pop	{r3, r4, r5, pc}
    29bc:	400c8000 	andmi	r8, ip, r0

000029c0 <NOROM_DDI32RegWrite>:
    29c0:	4408      	add	r0, r1
    29c2:	4611      	mov	r1, r2
    29c4:	f7ff bfe8 	b.w	2998 <AuxAdiDdiSafeWrite.constprop.1>

000029c8 <NOROM_OSCClockSourceSet>:
    29c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    29ca:	460c      	mov	r4, r1
    29cc:	07c1      	lsls	r1, r0, #31
    29ce:	4605      	mov	r5, r0
    29d0:	d509      	bpl.n	29e6 <NOROM_OSCClockSourceSet+0x1e>
    29d2:	4b12      	ldr	r3, [pc, #72]	; (2a1c <NOROM_OSCClockSourceSet+0x54>)
    29d4:	b2a2      	uxth	r2, r4
    29d6:	681b      	ldr	r3, [r3, #0]
    29d8:	2100      	movs	r1, #0
    29da:	9200      	str	r2, [sp, #0]
    29dc:	685e      	ldr	r6, [r3, #4]
    29de:	4810      	ldr	r0, [pc, #64]	; (2a20 <NOROM_OSCClockSourceSet+0x58>)
    29e0:	2201      	movs	r2, #1
    29e2:	460b      	mov	r3, r1
    29e4:	47b0      	blx	r6
    29e6:	07aa      	lsls	r2, r5, #30
    29e8:	d509      	bpl.n	29fe <NOROM_OSCClockSourceSet+0x36>
    29ea:	4b0c      	ldr	r3, [pc, #48]	; (2a1c <NOROM_OSCClockSourceSet+0x54>)
    29ec:	b2a2      	uxth	r2, r4
    29ee:	681b      	ldr	r3, [r3, #0]
    29f0:	9200      	str	r2, [sp, #0]
    29f2:	685e      	ldr	r6, [r3, #4]
    29f4:	480a      	ldr	r0, [pc, #40]	; (2a20 <NOROM_OSCClockSourceSet+0x58>)
    29f6:	2100      	movs	r1, #0
    29f8:	2202      	movs	r2, #2
    29fa:	2301      	movs	r3, #1
    29fc:	47b0      	blx	r6
    29fe:	076b      	lsls	r3, r5, #29
    2a00:	d509      	bpl.n	2a16 <NOROM_OSCClockSourceSet+0x4e>
    2a02:	4b06      	ldr	r3, [pc, #24]	; (2a1c <NOROM_OSCClockSourceSet+0x54>)
    2a04:	b2a4      	uxth	r4, r4
    2a06:	681b      	ldr	r3, [r3, #0]
    2a08:	9400      	str	r4, [sp, #0]
    2a0a:	685c      	ldr	r4, [r3, #4]
    2a0c:	4804      	ldr	r0, [pc, #16]	; (2a20 <NOROM_OSCClockSourceSet+0x58>)
    2a0e:	2100      	movs	r1, #0
    2a10:	220c      	movs	r2, #12
    2a12:	2302      	movs	r3, #2
    2a14:	47a0      	blx	r4
    2a16:	b002      	add	sp, #8
    2a18:	bd70      	pop	{r4, r5, r6, pc}
    2a1a:	bf00      	nop
    2a1c:	100001a4 	andne	r0, r0, r4, lsr #3
    2a20:	400ca000 	andmi	sl, ip, r0

00002a24 <NOROM_OSCClockSourceGet>:
    2a24:	b510      	push	{r4, lr}
    2a26:	4b08      	ldr	r3, [pc, #32]	; (2a48 <NOROM_OSCClockSourceGet+0x24>)
    2a28:	2804      	cmp	r0, #4
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	f04f 0134 	mov.w	r1, #52	; 0x34
    2a30:	68dc      	ldr	r4, [r3, #12]
    2a32:	bf07      	ittee	eq
    2a34:	f04f 42c0 	moveq.w	r2, #1610612736	; 0x60000000
    2a38:	231d      	moveq	r3, #29
    2a3a:	f04f 5280 	movne.w	r2, #268435456	; 0x10000000
    2a3e:	231c      	movne	r3, #28
    2a40:	4802      	ldr	r0, [pc, #8]	; (2a4c <NOROM_OSCClockSourceGet+0x28>)
    2a42:	47a0      	blx	r4
    2a44:	bd10      	pop	{r4, pc}
    2a46:	bf00      	nop
    2a48:	100001a4 	andne	r0, r0, r4, lsr #3
    2a4c:	400ca000 	andmi	sl, ip, r0
    2a50:	65746e45 	ldrbvs	r6, [r4, #-3653]!	; 0xfffff1bb
    2a54:	6f792072 	svcvs	0x00792072
    2a58:	6e207275 	mcrvs	2, 1, r7, cr0, cr5, {3}
    2a5c:	3a656d61 	bcc	195dfe8 <__ccfg+0x193e040>
    2a60:	65570020 	ldrbvs	r0, [r7, #-32]	; 0xffffffe0
    2a64:	6d6f636c 	stclvs	3, cr6, [pc, #-432]!	; 28bc <NOROM_SysCtrlResetSourceGet+0xc>
    2a68:	73252065 			; <UNDEFINED> instruction: 0x73252065
    2a6c:	65530d0a 	ldrbvs	r0, [r3, #-3338]	; 0xfffff2f6
    2a70:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2a74:	656e6f20 	strbvs	r6, [lr, #-3872]!	; 0xfffff0e0
    2a78:	20666f20 	rsbcs	r6, r6, r0, lsr #30
    2a7c:	20656874 	rsbcs	r6, r5, r4, ror r8
    2a80:	6c6c6f66 	stclvs	15, cr6, [ip], #-408	; 0xfffffe68
    2a84:	6e69776f 	cdpvs	7, 6, cr7, cr9, cr15, {3}
    2a88:	706f2067 	rsbvc	r2, pc, r7, rrx
    2a8c:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
    2a90:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    2a94:	280d0a3a 	stmdacs	sp, {r1, r3, r4, r5, r9, fp}
    2a98:	6a642941 	bvs	190cfa4 <__ccfg+0x18ecffc>
    2a9c:	20747375 	rsbscs	r7, r4, r5, ror r3
    2aa0:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    2aa4:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2aa8:	6e612073 	mcrvs	0, 3, r2, cr1, cr3, {3}
    2aac:	74732064 	ldrbtvc	r2, [r3], #-100	; 0xffffff9c
    2ab0:	0a747261 	beq	1d1f43c <__ccfg+0x1cff494>
    2ab4:	2953280d 	ldmdbcs	r3, {r0, r2, r3, fp, sp}^
    2ab8:	20706f74 	rsbscs	r6, r0, r4, ror pc
    2abc:	7265706f 	rsbvc	r7, r5, #111	; 0x6f
    2ac0:	6f697461 	svcvs	0x00697461
    2ac4:	280d0a6e 	stmdacs	sp, {r1, r2, r3, r5, r6, r9, fp}
    2ac8:	65692956 	strbvs	r2, [r9, #-2390]!	; 0xfffff6aa
    2acc:	75632077 	strbvc	r2, [r3, #-119]!	; 0xffffff89
    2ad0:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    2ad4:	65732074 	ldrbvs	r2, [r3, #-116]!	; 0xffffff8c
    2ad8:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
    2adc:	280d0a67 	stmdacs	sp, {r0, r1, r2, r5, r6, r9, fp}
    2ae0:	6e6f294d 	vnmulvs.f16	s5, s30, s26	; <UNPREDICTABLE>
    2ae4:	726f7469 	rsbvc	r7, pc, #1761607680	; 0x69000000
    2ae8:	68430d0a 	stmdavs	r3, {r1, r3, r8, sl, fp}^
    2aec:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
    2af0:	2500203a 	strcs	r2, [r0, #-58]	; 0xffffffc6
    2af4:	6e450063 	cdpvs	0, 4, cr0, cr5, cr3, {3}
    2af8:	20726574 	rsbscs	r6, r2, r4, ror r5
    2afc:	20656874 	rsbcs	r6, r5, r4, ror r8
    2b00:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
    2b04:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
    2b08:	52282073 	eorpl	r2, r8, #115	; 0x73
    2b0c:	4f206465 	svcmi	0x00206465
    2b10:	4f202c4e 	svcmi	0x00202c4e
    2b14:	202c4646 	eorcs	r4, ip, r6, asr #12
    2b18:	65657247 	strbvs	r7, [r5, #-583]!	; 0xfffffdb9
    2b1c:	4e4f206e 	cdpmi	0, 4, cr2, cr15, cr14, {3}
    2b20:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2b24:	203a2946 	eorscs	r2, sl, r6, asr #18
    2b28:	65522800 	ldrbvs	r2, [r2, #-2048]	; 0xfffff800
    2b2c:	4e4f2064 	cdpmi	0, 4, cr2, cr15, cr4, {3}
    2b30:	464f202c 	strbmi	r2, [pc], -ip, lsr #32
    2b34:	47202c46 	strmi	r2, [r0, -r6, asr #24]!
    2b38:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
    2b3c:	2c4e4f20 	mcrrcs	15, 2, r4, lr, cr0
    2b40:	46464f20 	strbmi	r4, [r6], -r0, lsr #30
    2b44:	6e692029 	cdpvs	0, 6, cr2, cr9, cr9, {1}
    2b48:	76726574 			; <UNDEFINED> instruction: 0x76726574
    2b4c:	3a736c61 	bcc	1cddcd8 <__ccfg+0x1cbdd30>
    2b50:	64252820 	strtvs	r2, [r5], #-2080	; 0xfffff7e0
    2b54:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b58:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b5c:	6425202c 	strtvs	r2, [r5], #-44	; 0xffffffd4
    2b60:	000d0a29 	andeq	r0, sp, r9, lsr #20
    2b64:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
    2b68:	20726f74 	rsbscs	r6, r2, r4, ror pc
    2b6c:	65727028 	ldrbvs	r7, [r2, #-40]!	; 0xffffffd8
    2b70:	53207373 			; <UNDEFINED> instruction: 0x53207373
    2b74:	206f7420 	rsbcs	r7, pc, r0, lsr #8
    2b78:	706f7473 	rsbvc	r7, pc, r3, ror r4	; <UNPREDICTABLE>
    2b7c:	00203a29 	eoreq	r3, r0, r9, lsr #20
    2b80:	45535953 	ldrbmi	r5, [r3, #-2387]	; 0xfffff6ad
    2b84:	203a5252 	eorscs	r5, sl, r2, asr r2
    2b88:	202c7825 	eorcs	r7, ip, r5, lsr #16
    2b8c:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
    2b90:	75007261 	strvc	r7, [r0, #-609]	; 0xfffffd9f
    2b94:	50006961 	andpl	r6, r0, r1, ror #18
    2b98:	534f6369 	movtpl	r6, #62313	; 0xf369
    2b9c:	2e357620 	cfmsuba32cs	mvax1, mvax7, mvfx5, mvfx0
    2ba0:	47502f34 	smmlarmi	r0, r4, pc, r2	; <UNPREDICTABLE>
    2ba4:	32303831 	eorscc	r3, r0, #3211264	; 0x310000
    2ba8:	2d413232 	sfmcs	f3, 2, [r1, #-200]	; 0xffffff38
    2bac:	33314343 	teqcc	r1, #201326593	; 0xc000001
    2bb0:	4c5f3035 	mrrcmi	0, 3, r3, pc, cr5	; <UNPREDICTABLE>
    2bb4:	434e5541 	movtmi	r5, #58689	; 0xe541
    2bb8:	2c4c5848 	mcrrcs	8, 4, r5, ip, cr8
    2bbc:	29432820 	stmdbcs	r3, {r5, fp, sp}^
    2bc0:	736c4f20 	cmnvc	ip, #32, 30	; 0x80
    2bc4:	74656e6f 	strbtvc	r6, [r5], #-3695	; 0xfffff191
    2bc8:	6d6f4320 	stclvs	3, cr4, [pc, #-128]!	; 2b50 <NOROM_OSCClockSourceGet+0x12c>
    2bcc:	696e756d 	stmdbvs	lr!, {r0, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
    2bd0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2bd4:	2c736e6f 	ldclcs	14, cr6, [r3], #-444	; 0xfffffe44
    2bd8:	30303220 	eorscc	r3, r0, r0, lsr #4
    2bdc:	30322d32 	eorscc	r2, r2, r2, lsr sp
    2be0:	4c003831 	stcmi	8, cr3, [r0], {49}	; 0x31
    2be4:	6f746665 	svcvs	0x00746665
    2be8:	20726576 	rsbscs	r6, r2, r6, ror r5
    2bec:	3a4d4152 	bcc	135313c <__ccfg+0x1333194>
    2bf0:	20642520 	rsbcs	r2, r4, r0, lsr #10
    2bf4:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
    2bf8:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
    2bfc:	00000000 	andeq	r0, r0, r0

00002c00 <port_confs>:
    2c00:	00306080 	eorseq	r6, r0, r0, lsl #1
    2c04:	00386080 	eorseq	r6, r8, r0, lsl #1
    2c08:	00186010 	andseq	r6, r8, r0, lsl r0
    2c0c:	2010400f 	andscs	r4, r0, pc
    2c10:	30694000 	rsbcc	r4, r9, r0
    2c14:	30714000 	rsbscc	r4, r1, r0
    2c18:	00b86008 	adcseq	r6, r8, r8
    2c1c:	60c94000 	sbcvs	r4, r9, r0
    2c20:	60d14000 	sbcsvs	r4, r1, r0
    2c24:	60d94000 	sbcsvs	r4, r9, r0
    2c28:	60e14000 	rscvs	r4, r1, r0
    2c2c:	00096380 	andeq	r6, r9, r0, lsl #7
    2c30:	00f16b80 	rscseq	r6, r1, r0, lsl #23
    2c34:	20402000 	subcs	r2, r0, r0
    2c38:	00486080 	subeq	r6, r8, r0, lsl #1
    2c3c:	00506080 	subseq	r6, r0, r0, lsl #1
    2c40:	00a06000 	adceq	r6, r0, r0
    2c44:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
    2c48:	77730065 	ldrbvc	r0, [r3, -r5, rrx]!
    2c4c:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
    2c50:	6f690076 	svcvs	0x00690076
    2c54:	6c616d00 	stclvs	13, cr6, [r1], #-0
    2c58:	616d0031 	cmnvs	sp, r1, lsr r0
    2c5c:	6b00676c 	blvs	1ca14 <__exidx_end+0x19d94>
    2c60:	6d006970 	vstrvs.16	s12, [r0, #-224]	; 0xffffff20	; <UNPREDICTABLE>
    2c64:	00636c61 	rsbeq	r6, r3, r1, ror #24

00002c68 <__pi_hex_enc_table>:
    2c68:	33323130 	teqcc	r2, #48, 2
    2c6c:	37363534 			; <UNDEFINED> instruction: 0x37363534
    2c70:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
    2c74:	46454443 	strbmi	r4, [r5], -r3, asr #8

00002c78 <__input_pins>:
    2c78:	9c9b9a99 	vldmials	fp, {s18-s170}

00002c7c <__button_list>:
    2c7c:	0e000d00 	cdpeq	13, 0, cr0, cr0, cr0, {0}

Disassembly of section .bss:

20000000 <displayCycle>:
	...

20000001 <username.5767>:
	...

20000016 <setdel>:
	...

20000018 <urates>:
static word urates [N_UARTS];
20000018:	00000000 	andeq	r0, r0, r0

2000001c <__PCB>:
2000001c:	00000000 	andeq	r0, r0, r0

20000020 <ioreq>:
static devreqfun_t ioreq [MAX_DEVICES];
20000020:	00000000 	andeq	r0, r0, r0

20000024 <mcfree>:
static	aword	mnfree [MALLOC_NPOOLS], mcfree [MALLOC_NPOOLS];
20000024:	00000000 	andeq	r0, r0, r0

20000028 <mevent>:
20000028:	00000000 	andeq	r0, r0, r0

2000002c <mnfree>:
2000002c:	00000000 	andeq	r0, r0, r0

20000030 <mpools>:
static	aword	*mpools [MALLOC_NPOOLS];
20000030:	00000000 	andeq	r0, r0, r0

20000034 <dopen>:
	...

20000035 <dstat>:
20000035:	 	andeq	r0, r0, r0

20000038 <len.5699>:
20000038:	00000000 	andeq	r0, r0, r0

2000003c <ptr.5698>:
2000003c:	00000000 	andeq	r0, r0, r0

20000040 <__inpline>:
char *__inpline = NULL;
20000040:	00000000 	andeq	r0, r0, r0

20000044 <len.5700>:
20000044:	00000000 	andeq	r0, r0, r0

20000048 <ptr.5699>:
20000048:	00000000 	andeq	r0, r0, r0

2000004c <powerQualGlobals>:
	...

20000054 <greenCycle>:
	...

20000060 <redCycle>:
	...

2000006c <cycles>:
	...

20000084 <cyclesIndex>:
int cyclesIndex;
20000084:	00000000 	andeq	r0, r0, r0

20000088 <__pi_uart>:
	...

20000090 <system_event_count>:
20000090:	00000000 	andeq	r0, r0, r0

20000094 <entropy>:
20000094:	00000000 	andeq	r0, r0, r0

20000098 <__pi_mintk>:
	...

2000009a <__pi_old>:
	...

2000009c <__pi_systat>:
	...

200000a4 <__pi_new>:
200000a4:	00000000 	andeq	r0, r0, r0

200000a8 <__pi_utims>:
	...

200000b8 <__pi_curr>:
200000b8:	00000000 	andeq	r0, r0, r0

Disassembly of section .ccfg:

0001ffa8 <__ccfg>:
   1ffa8:	01800000 	orreq	r0, r0, r0
   1ffac:	ff880010 			; <UNDEFINED> instruction: 0xff880010
   1ffb0:	0058fffd 	ldrsheq	pc, [r8], #-253	; 0xffffff03	; <UNPREDICTABLE>
   1ffb4:	f3bfff3a 	vcvt.u32.f32	d15, d26, #1
   1ffb8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffbc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffc8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffd8:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
   1ffdc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1ffe0:	ffffff00 			; <UNDEFINED> instruction: 0xffffff00
   1ffe4:	ffc500c5 			; <UNDEFINED> instruction: 0xffc500c5
   1ffe8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
   1ffec:	00000000 	andeq	r0, r0, r0
   1fff0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fff8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   1fffc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

Disassembly of section ._user_heap_stack:

200000bc <._user_heap_stack>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000078d 	andeq	r0, r0, sp, lsl #15
       4:	00000003 	andeq	r0, r0, r3
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	0000015f 	andeq	r0, r0, pc, asr r1
      10:	0002d10c 	andeq	sp, r2, ip, lsl #2
      14:	0000c000 	andeq	ip, r0, r0
      18:	00008800 	andeq	r8, r0, r0, lsl #16
	...
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	00000392 	muleq	r0, r2, r3
      2c:	cc050202 	sfmgt	f0, 4, [r5], {2}
      30:	02000003 	andeq	r0, r0, #3
      34:	009d0504 	addseq	r0, sp, r4, lsl #10
      38:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      3c:	00009805 	andeq	r9, r0, r5, lsl #16
			i = k;
      40:	21eb0300 	mvncs	r0, r0, lsl #6
				j->Next = k;
      44:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
      48:	00004d17 	andeq	r4, r0, r7, lsl sp
}
      4c:	08010200 	stmdaeq	r1, {r9}
      50:	00000390 	muleq	r0, r0, r3
      54:	0020d903 	eoreq	sp, r0, r3, lsl #18
		release;
      58:	1c310300 	ldcne	3, cr0, [r1], #-0
      5c:	00000060 	andeq	r0, r0, r0, rrx
      60:	60070202 	andvs	r0, r7, r2, lsl #4
      64:	03000002 	movweq	r0, #2
      68:	000017a2 	andeq	r1, r0, r2, lsr #15
      6c:	731b3403 	tstvc	fp, #50331648	; 0x3000000
      70:	02000000 	andeq	r0, r0, #0
      74:	00720704 	rsbseq	r0, r2, r4, lsl #14
      78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      7c:	00006d07 	andeq	r6, r0, r7, lsl #26
      80:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      84:	00746e69 	rsbseq	r6, r4, r9, ror #28
      88:	77070402 	strvc	r0, [r7, -r2, lsl #8]
      8c:	03000000 	movweq	r0, #0
	descriptors [fd] = s;
      90:	000003ec 	andeq	r0, r0, ip, ror #7
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	41112604 	tstmi	r1, r4, lsl #12
      98:	03000000 	movweq	r0, #0
	if (s == NULL)
      9c:	000015af 	andeq	r1, r0, pc, lsr #11
		syserror (EMALLOC, "tcv05");
      a0:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
      a4:	05000000 	streq	r0, [r0, #-0]
      a8:	0000009b 	muleq	r0, fp, r0
      ac:	0013a703 	andseq	sl, r3, r3, lsl #14
      b0:	112b0400 			; <UNDEFINED> instruction: 0x112b0400
      b4:	00000041 	andeq	r0, r0, r1, asr #32
      b8:	0000ac06 	andeq	sl, r0, r6, lsl #24
      bc:	16000300 	strne	r0, [r0], -r0, lsl #6
      c0:	2c040000 	stccs	0, cr0, [r4], {-0}
      c4:	00006712 	andeq	r6, r0, r2, lsl r7
      c8:	00bd0500 	adcseq	r0, sp, r0, lsl #10
      cc:	96030000 	strls	r0, [r3], -r0
      d0:	04000002 	streq	r0, [r0], #-2
      d4:	0067122d 	rsbeq	r1, r7, sp, lsr #4
      d8:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
      dc:	68093204 	stmdavs	r9, {r2, r9, ip, sp}
      e0:	08000001 	stmdaeq	r0, {r0}
      e4:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
      e8:	ac073404 	cfstrsge	mvf3, [r7], {4}
      ec:	01000000 	mrseq	r0, (UNDEF: 0)
      f0:	08000701 	stmdaeq	r0, {r0, r8, r9, sl}
			// Continue
			goto ECont;

		case CMD_SE:

			wwait (st, 50);
      f4:	00000091 	muleq	r0, r1, r0
			curr += 0x1000;
      f8:	ac033504 	cfstr32ge	mvfx3, [r3], {4}
      fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (from >= EE_SIZE || upto < from)
     100:	08000601 	stmdaeq	r0, {r0, r9, sl}
     104:	00000288 	andeq	r0, r0, r8, lsl #5
			upto = EE_SIZE - 1;
     108:	ac033604 	stcge	6, cr3, [r3], {4}
     10c:	01000000 	mrseq	r0, (UNDEF: 0)
     110:	08000501 	stmdaeq	r0, {r0, r8, sl}
     114:	000003fb 	strdeq	r0, [r0], -fp
     118:	ac033704 	stcge	7, cr3, [r3], {4}
     11c:	01000000 	mrseq	r0, (UNDEF: 0)
     120:	08000401 	stmdaeq	r0, {r0, sl}
     124:	000003f4 	strdeq	r0, [r0], -r4
}
     128:	ac033804 	stcge	8, cr3, [r3], {4}
     12c:	01000000 	mrseq	r0, (UNDEF: 0)
     130:	09000004 	stmdbeq	r0, {r2}
     134:	000003e5 	andeq	r0, r0, r5, ror #7
     138:	ac073a04 			; <UNDEFINED> instruction: 0xac073a04
     13c:	01000000 	mrseq	r0, (UNDEF: 0)
    cycles[0].offTime = numbers[1];
     140:	00004009 	andeq	r4, r0, r9
    cycles[1].onTime = numbers[2];
     144:	033c0400 	teqeq	ip, #0, 8
    cycles[1].offTime = numbers[3];
     148:	000000ac 	andeq	r0, r0, ip, lsr #1
     14c:	00660902 	rsbeq	r0, r6, r2, lsl #18
}
     150:	3d040000 	stccc	0, cr0, [r4, #-0]
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	0000ac03 	andeq	sl, r0, r3, lsl #24
            number = number * 10;
     158:	43090300 	movwmi	r0, #37632	; 0x9300
     15c:	04000001 	streq	r0, [r0], #-1
            number += settingsInput[i] - 48;
     160:	00bd083f 	adcseq	r0, sp, pc, lsr r8
     164:	00040000 	andeq	r0, r4, r0
     168:	00042303 	andeq	r2, r4, r3, lsl #6
fsm root {
     16c:	03410400 	movteq	r0, #5120	; 0x1400
     170:	000000da 	ldrdeq	r0, [r0], -sl
     174:	00016806 	andeq	r6, r1, r6, lsl #16
     178:	02a50a00 	adceq	r0, r5, #0, 20
     17c:	43040000 	movwmi	r0, #16384	; 0x4000
     180:	0001741a 	andeq	r7, r1, sl, lsl r4
        initCycles();
     184:	0a010100 	beq	4058c <__ccfg+0x205e4>
        ser_outf(Initial, "Enter your name: ");
     188:	000002fc 	strdeq	r0, [r0], -ip
     18c:	950e4504 	strls	r4, [lr, #-1284]	; 0xfffffafc
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	01000001 	tsteq	r0, r1
     194:	9b040b01 	blls	102da0 <__ccfg+0xe2df8>
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	02000001 	andeq	r0, r0, #1
     19c:	03990801 	orrseq	r0, r9, #65536	; 0x10000
     1a0:	9b050000 	blls	1401a8 <__ccfg+0x120200>
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	0a000001 	beq	1b0 <root+0x44>
     1a8:	0000030a 	andeq	r0, r0, sl, lsl #6
        if (choice == 'A' || choice == 'a'){
     1ac:	951e4504 	ldrls	r4, [lr, #-1284]	; 0xfffffafc
     1b0:	01000001 	tsteq	r0, r1
     1b4:	05080701 	streq	r0, [r8, #-1793]	; 0xfffff8ff
            proceed Adjust_Intervals;
     1b8:	01e6098f 	mvneq	r0, pc, lsl #19
            proceed Monitor;
     1bc:	c1090000 	mrsgt	r0, (UNDEF: 9)
        proceed Show_Menu;
     1c0:	05000002 	streq	r0, [r0, #-2]
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	00670b90 	mlseq	r7, r0, fp, r0
     1c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	000005dc 	ldrdeq	r0, [r0], -ip
     1d0:	9b079105 	blls	1e45ec <__ccfg+0x1c4644>
     1d4:	04000000 	streq	r0, [r0], #-0
        processSettingsInput(settings);
     1d8:	00046009 	andeq	r6, r4, r9
        proceed Show_Menu;
     1dc:	10920500 	addsne	r0, r2, r0, lsl #10
     1e0:	000000b8 	strheq	r0, [r0], -r8
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	02030006 	andeq	r0, r3, #6
     1e8:	05000004 	streq	r0, [r0, #-4]
     1ec:	01b50393 			; <UNDEFINED> instruction: 0x01b50393
     1f0:	e60c0000 	str	r0, [ip], -r0
     1f4:	fd000001 	stc2	0, cr0, [r0, #-4]
        proceed Show_Menu;
     1f8:	0d000001 	stceq	0, cr0, [r0, #-4]
     1fc:	00360a00 	eorseq	r0, r6, r0, lsl #20
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	99050000 	stmdbls	r5, {}	; <UNPREDICTABLE>
     204:	0001f20f 	andeq	pc, r1, pc, lsl #4
        displayCycle = YES;
     208:	0c010100 	stfeqs	f0, [r1], {-0}
        ser_inf(Await_Stop, "%c", ch);
     20c:	0000009b 	muleq	r0, fp, r0
     210:	0000021b 	andeq	r0, r0, fp, lsl r2
     214:	0000880e 	andeq	r8, r0, lr, lsl #16
        proceed Monitor;
     218:	07000300 	streq	r0, [r0, -r0, lsl #6]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     21c:	09910601 	ldmibeq	r1, {r0, r9, sl}
     220:	00000245 	andeq	r0, r0, r5, asr #4
        leds(1, 0);
     224:	00045308 	andeq	r5, r4, r8, lsl #6
     228:	07930600 	ldreq	r0, [r3, r0, lsl #12]
     22c:	000000ac 	andeq	r0, r0, ip, lsr #1
     230:	00010701 	andeq	r0, r1, r1, lsl #14
     234:	00003108 	andeq	r3, r0, r8, lsl #2
        leds(0, 0);
     238:	03940600 	orrseq	r0, r4, #0, 12
     23c:	000000ac 	andeq	r0, r0, ip, lsr #1
     240:	00000101 	andeq	r0, r0, r1, lsl #2
     244:	02730300 	rsbseq	r0, r3, #0, 6
     248:	96060000 	strls	r0, [r6], -r0
     24c:	00021b03 	andeq	r1, r2, r3, lsl #22
        } else if (choice == 'S' || choice == 's') {
     250:	02450500 	subeq	r0, r5, #0, 10
            proceed Stop;
     254:	510c0000 	mrspl	r0, (UNDEF: 12)
        } else if (choice == 'V' || choice == 'v') {
     258:	61000002 	tstvs	r0, r2
            proceed View_Settings;
     25c:	0d000002 	stceq	0, cr0, [r0, #-8]
        } else if (choice == 'M' || choice == 'm') {
     260:	02560500 	subseq	r0, r6, #0, 10
            proceed Monitor;
     264:	dc0a0000 	stcle	0, cr0, [sl], {-0}
     268:	06000002 	streq	r0, [r0], -r2
     26c:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
     270:	01010000 	mrseq	r0, (UNDEF: 1)
     274:	0000a70c 	andeq	sl, r0, ip, lsl #14
     278:	00027f00 	andeq	r7, r2, r0, lsl #30
     27c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     280:	00000274 	andeq	r0, r0, r4, ror r2
     284:	0003820a 	andeq	r8, r3, sl, lsl #4
     288:	13060700 	movwne	r0, #26368	; 0x6700
     28c:	0000027f 	andeq	r0, r0, pc, ror r2
     290:	230a0101 	movwcs	r0, #41217	; 0xa101
     294:	05000001 	streq	r0, [r0, #-1]
static void devinit_uart (int devnum) {
     298:	00bd0ec3 	adcseq	r0, sp, r3, asr #29
	adddevfunc (ioreq_uart_a, devnum);
     29c:	01010000 	mrseq	r0, (UNDEF: 1)
     2a0:	00046d0f 	andeq	r6, r4, pc, lsl #26
void udelay (volatile word n) {
     2a4:	016e0800 	cmneq	lr, r0, lsl #16
     2a8:	0002ad10 	andeq	sl, r2, r0, lsl sp
	while (n) {
     2ac:	b3040b00 	movwlt	r0, #19200	; 0x4b00
     2b0:	10000002 	andne	r0, r0, r2
}
     2b4:	0002bf01 	andeq	fp, r2, r1, lsl #30
	while (n--);
     2b8:	009b1100 	addseq	r1, fp, r0, lsl #2
     2bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     2c0:	000001a2 	andeq	r0, r0, r2, lsr #3
		n--;
     2c4:	000002ca 	andeq	r0, r0, sl, asr #5
     2c8:	bf05000d 	svclt	0x0005000d
     2cc:	12000002 	andne	r0, r0, #2
void mdelay (volatile word n) {
     2d0:	00000433 	andeq	r0, r0, r3, lsr r4
     2d4:	13017f08 	movwne	r7, #7944	; 0x1f08
	while (n) {
     2d8:	000002ca 	andeq	r0, r0, sl, asr #5
     2dc:	7a120101 	bvc	4806e8 <__ccfg+0x460740>
}
     2e0:	08000003 	stmdaeq	r0, {r0, r1}
		udelay (999);
     2e4:	c9140182 	ldmdbgt	r4, {r1, r7, r8}
     2e8:	01000000 	mrseq	r0, (UNDEF: 0)
		n--;
     2ec:	04581201 	ldrbeq	r1, [r8], #-513	; 0xfffffdff
     2f0:	d8080000 	stmdale	r8, {}	; <UNPREDICTABLE>
     2f4:	00bd0e02 	adcseq	r0, sp, r2, lsl #28
     2f8:	01010000 	mrseq	r0, (UNDEF: 1)
void __pi_ondomain (lword d) {
     2fc:	03080813 	movweq	r0, #34835	; 0x8813
     300:	03230903 			; <UNDEFINED> instruction: 0x03230903
		if (__pi_systat.effpdm > 1)
     304:	e3140000 	tst	r4, #0
     308:	08000021 	stmdaeq	r0, {r0, r5}
			__pi_systat.effpdm = 1;
     30c:	9b070307 	blls	1c0f30 <__ccfg+0x1a0f88>
	PRCMPowerDomainOn (d);
     310:	00000000 	andeq	r0, r0, r0
     314:	00052e14 	andeq	r2, r5, r4, lsl lr
     318:	03080800 	movweq	r0, #34816	; 0x8800
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	0000ce08 	andeq	ip, r0, r8, lsl #28
     320:	0f000400 	svceq	0x00000400
     324:	00000253 	andeq	r0, r0, r3, asr r2
	__pi_systat.ondmns |= d;
     328:	03030908 	movweq	r0, #14600	; 0x3908
     32c:	000002fc 	strdeq	r0, [r0], -ip
}
     330:	00047c15 	andeq	r7, r4, r5, lsl ip
     334:	0b083000 	bleq	20c33c <__ccfg+0x1ec394>
void __pi_syserror (word ec, const char *m) {
     338:	03930803 	orrseq	r0, r3, #196608	; 0x30000
	diag ("SYSERR: %x, %s", ec, m);
     33c:	75140000 	ldrvc	r0, [r4, #-0]
     340:	08000004 	stmdaeq	r0, {r2}
  __ASM volatile ("cpsid i" : : : "memory");
     344:	9b070314 	blls	1c0f9c <__ccfg+0x1a0ff4>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	00000000 	andeq	r0, r0, r0
     34c:	0002cb14 	andeq	ip, r2, r4, lsl fp
     350:	03150800 	tsteq	r5, #0, 16
		all_leds_blink;
     354:	00009b07 	andeq	r9, r0, r7, lsl #22
     358:	70140200 	andsvc	r0, r4, r0, lsl #4
     35c:	08000004 	stmdaeq	r0, {r2}
     360:	a00a0316 	andge	r0, sl, r6, lsl r3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	04000002 	streq	r0, [r0], #-2
     368:	000f2e14 	andeq	r2, pc, r4, lsl lr	; <UNPREDICTABLE>
     36c:	03170800 	tsteq	r7, #0, 16
     370:	0000ce08 	andeq	ip, r0, r8, lsl #28
     374:	2c140800 	ldccs	8, cr0, [r4], {-0}
     378:	08000004 	stmdaeq	r0, {r2}
	while (1) {
     37c:	930f0318 	movwls	r0, #62232	; 0xf318
     380:	0c000003 	stceq	0, cr0, [r0], {3}
     384:	0002c614 	andeq	ip, r2, r4, lsl r6
     388:	03190800 	tsteq	r9, #0, 16
void tci_run_delay_timer () {
     38c:	0003a315 	andeq	sl, r3, r5, lsl r3
	setdel = __pi_mintk - __pi_old;
     390:	0c002c00 	stceq	12, cr2, [r0], {-0}
     394:	00000323 	andeq	r0, r0, r3, lsr #6
     398:	000003a3 	andeq	r0, r0, r3, lsr #7
     39c:	0000880e 	andeq	r8, r0, lr, lsl #16
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a0:	0b000300 	bleq	fa8 <delay+0x10>
     3a4:	00033004 	andeq	r3, r3, r4
     3a8:	04870f00 	streq	r0, [r7], #3840	; 0xf00
     3ac:	1c080000 	stcne	0, cr0, [r8], {-0}
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	03301b03 	teqeq	r0, #3072	; 0xc00
	sti_tim;
     3b4:	70120000 	andsvc	r0, r2, r0
}
     3b8:	08000003 	stmdaeq	r0, {r0, r1}
     3bc:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
     3c0:	01000003 	tsteq	r0, r3
     3c4:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
     3c8:	07000003 	streq	r0, [r0, -r3]
	cli_aux;
     3cc:	090c010c 	stmdbeq	ip, {r2, r3, r8}
     3d0:	00000409 	andeq	r0, r0, r9, lsl #8
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	64656c16 	strbtvs	r6, [r5], #-3094	; 0xfffff3ea
     3d8:	090d0100 	stmdbeq	sp, {r8}
     3dc:	00000081 	andeq	r0, r0, r1, lsl #1
     3e0:	041c0900 	ldreq	r0, [ip], #-2304	; 0xfffff700
	sti_aux;
     3e4:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
}
     3e8:	00019b0a 	andeq	r9, r1, sl, lsl #22
     3ec:	ac090400 	cfstrsge	mvf0, [r9], {-0}
     3f0:	01000003 	tsteq	r0, r3
void AONRTCIntHandler () {
     3f4:	009b0a0f 	addseq	r0, fp, pc, lsl #20
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f8:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
     3fc:	0000033c 	andeq	r0, r0, ip, lsr r3
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	9b0a1001 	blls	28440c <__ccfg+0x264464>
		if (__pi_utims [0] == 0)
     404:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     408:	04920300 	ldreq	r0, [r2], #768	; 0x300
		if (*(__pi_utims [0])) {
     40c:	11010000 	mrsne	r0, (UNDEF: 1)
     410:	0003cb03 	andeq	ip, r3, r3, lsl #22
			(*(__pi_utims [0]))--;
     414:	014a1700 	cmpeq	sl, r0, lsl #14
		if (__pi_utims [1] == 0)
     418:	13010000 	movwne	r0, #4096	; 0x1000
		if (*(__pi_utims [1])) {
     41c:	0004090a 	andeq	r0, r4, sl, lsl #18
			aux_timer_inactive = 0;
     420:	03050100 	movweq	r0, #20736	; 0x5100
			(*(__pi_utims [1]))--;
     424:	20000054 	andcs	r0, r0, r4, asr r0
		if (__pi_utims [2] == 0)
     428:	0002b817 	andeq	fp, r2, r7, lsl r8
		if (*(__pi_utims [2])) {
     42c:	0a140100 	beq	500834 <__ccfg+0x4e088c>
			(*(__pi_utims [2]))--;
     430:	00000409 	andeq	r0, r0, r9, lsl #8
		if (__pi_utims [3] != 0) {
     434:	60030501 	andvs	r0, r3, r1, lsl #10
			if (*(__pi_utims [3])) {
     438:	0c200000 	stceq	0, cr0, [r0], #-0
				aux_timer_inactive = 0;
     43c:	00000409 	andeq	r0, r0, r9, lsl #8
				(*(__pi_utims [3]))--;
     440:	0000044b 	andeq	r0, r0, fp, asr #8
	if (__pi_systat.ledsts) {
     444:	0000880e 	andeq	r8, r0, lr, lsl #16
     448:	17000100 	strne	r0, [r0, -r0, lsl #2]
		if (__pi_systat.ledblc++ == 0) {
     44c:	000003d6 	ldrdeq	r0, [r0], -r6
     450:	3b0a1601 	blcc	285c5c <__ccfg+0x265cb4>
			if (__pi_systat.ledblk) {
     454:	01000004 	tsteq	r0, r4
     458:	006c0305 	rsbeq	r0, ip, r5, lsl #6
     45c:	7c172000 	ldcvc	0, cr2, [r7], {-0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	01000002 	tsteq	r0, r2
     464:	00810518 	addeq	r0, r1, r8, lsl r5
				if (__pi_systat.ledsts & 0x2)
     468:	05010000 	streq	r0, [r1, #-0]
     46c:	00008403 	andeq	r8, r0, r3, lsl #8
     470:	6e4f1820 	cdpvs	8, 4, cr1, cr15, cr0, {1}
				if (__pi_systat.ledsts & 0x4)
     474:	091a0100 	ldmdbeq	sl, {r8}
				__pi_systat.ledblk = 0;
     478:	0000008f 	andeq	r0, r0, pc, lsl #1
     47c:	00030501 	andeq	r0, r3, r1, lsl #10
			if (__pi_systat.fstblk)
     480:	17000000 	strne	r0, [r0, -r0]
     484:	00000446 	andeq	r0, r0, r6, asr #8
				__pi_systat.ledblc = 200;
     488:	8f091b01 	svchi	0x00091b01
	if (events & AON_RTC_EVFLAGS_CH0) {
     48c:	01000000 	mrseq	r0, (UNDEF: 0)
		cli_tim;
     490:	00000305 	andeq	r0, r0, r5, lsl #6
		__pi_new += setdel;
     494:	01192000 	tsteq	r9, r0
     498:	0000049b 	muleq	r0, fp, r4
		setdel = 0;
     49c:	01065e01 	tsteq	r6, r1, lsl #28
		RISE_N_SHINE;
     4a0:	0000016c 	andeq	r0, r0, ip, ror #2
		__pi_new += setdel;
     4a4:	00000298 	muleq	r0, r8, r2
		RISE_N_SHINE;
     4a8:	05ce9c01 	strbeq	r9, [lr, #3073]	; 0xc01
     4ac:	b81a0000 	ldmdalt	sl, {}	; <UNPREDICTABLE>
		aux_timer_inactive = 1;
     4b0:	01000000 	mrseq	r0, (UNDEF: 0)
     4b4:	009b115e 	addseq	r1, fp, lr, asr r1
				if (__pi_systat.ledsts & 0x1)
     4b8:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	131b0000 	tstne	fp, #0
     4c0:	01000001 	tsteq	r0, r1
				if (__pi_systat.ledsts & 0x2)
     4c4:	01821462 	orreq	r1, r2, r2, ror #8
     4c8:	471b0000 	ldrmi	r0, [fp, -r0]
     4cc:	01000000 	mrseq	r0, (UNDEF: 0)
				if (__pi_systat.ledsts & 0x8)
     4d0:	018e1767 	orreq	r1, lr, r7, ror #14
				__pi_systat.ledblk = 1;
     4d4:	a61b0000 	ldrge	r0, [fp], -r0
     4d8:	01000000 	mrseq	r0, (UNDEF: 0)
		if (aux_timer_inactive) {
     4dc:	0198186b 	orrseq	r1, r8, fp, ror #16
			cli_aux;
     4e0:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
     4e4:	01000004 	tsteq	r0, r4
     4e8:	01a21974 			; <UNDEFINED> instruction: 0x01a21974
     4ec:	b31b0000 	tstlt	fp, #0
     4f0:	01000003 	tsteq	r0, r3
     4f4:	01c41f85 	biceq	r1, r4, r5, lsl #31
     4f8:	441b0000 	ldrmi	r0, [fp], #-0
     4fc:	01000003 	tsteq	r0, r3
     500:	01cc1c88 	biceq	r1, ip, r8, lsl #25
     504:	5a1b0000 	bpl	6c050c <__ccfg+0x6a0564>
word tci_update_delay_ticks (Boolean force) {
     508:	01000003 	tsteq	r0, r3
	cli_tim;
     50c:	01e21c91 			; <UNDEFINED> instruction: 0x01e21c91
     510:	001b0000 	andseq	r0, fp, r0
	if (setdel) {
     514:	01000000 	mrseq	r0, (UNDEF: 0)
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	01fe169b 			; <UNDEFINED> instruction: 0x01fe169b
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	e91b0000 	ldmdb	fp, {}	; <UNPREDICTABLE>
     520:	01000002 	tsteq	r0, r2
     524:	020c199f 	andeq	r1, ip, #2605056	; 0x27c000
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	361b0000 	ldrcc	r0, [fp], -r0
				AON_RTC_O_CH0CMP)) - gettav ());
     52c:	01000001 	tsteq	r0, r1
	return NO;
     530:	021c13aa 	andseq	r1, ip, #-1476395006	; 0xa8000002
			setdel = 0;
     534:	401c0000 	andsmi	r0, ip, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     538:	1d000000 	stcne	0, cr0, [r0, #-0]
     53c:	0000029c 	muleq	r0, ip, r2
}
     540:	ce116001 	cdpgt	0, 1, cr6, cr1, cr1, {0}
		sti_tim;
     544:	05000005 	streq	r0, [r0, #-5]
		return YES;
     548:	00000103 	andeq	r0, r0, r3, lsl #2
     54c:	00581e20 	subseq	r1, r8, r0, lsr #28
     550:	05660000 	strbeq	r0, [r6, #-0]!
     554:	661d0000 	ldrvs	r0, [sp], -r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	01000004 	tsteq	r0, r4
	UARTDisable (UART0_BASE);
     55c:	019b0e75 	orrseq	r0, fp, r5, ror lr
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	91020000 	mrsls	r0, (UNDEF: 2)
	UARTDisable (UART0_BASE);
     564:	cc1f0044 	ldcgt	0, cr0, [pc], {68}	; 0x44
	UARTConfigSetExpClk (UART0_BASE,
     568:	e2000001 	and	r0, r0, #1
     56c:	83000001 	movwhi	r0, #1
     570:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
     574:	00000333 	andeq	r0, r0, r3, lsr r3
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	de0e8901 	vmlale.f16	s16, s28, s2	; <UNPREDICTABLE>
     57c:	02000005 	andeq	r0, r0, #5
     580:	1f004491 	svcne	0x00004491
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	0000020c 	andeq	r0, r0, ip, lsl #4
     588:	0000021c 	andeq	r0, r0, ip, lsl r2
     58c:	0000059c 	muleq	r0, ip, r5
	urates [0] = rate;
     590:	00686320 	rsbeq	r6, r8, r0, lsr #6
}
     594:	9b0ea001 	blls	3a85a0 <__ccfg+0x3885f8>
     598:	00000001 	andeq	r0, r0, r1
     59c:	00075a21 	andeq	r5, r7, r1, lsr #20
     5a0:	00021c00 	andeq	r1, r2, r0, lsl #24
     5a4:	00022200 	andeq	r2, r2, r0, lsl #4
     5a8:	8dab0100 	stfhis	f0, [fp]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	000005b6 			; <UNDEFINED> instruction: 0x000005b6
     5b0:	00076922 	andeq	r6, r7, r2, lsr #18
     5b4:	5a230000 	bpl	8c05bc <__ccfg+0x8a0614>
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	32000007 	andcc	r0, r0, #7
     5bc:	70000002 	andvc	r0, r0, r2
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c0:	01000000 	mrseq	r0, (UNDEF: 0)
     5c4:	692233ac 	stmdbvs	r2!, {r2, r3, r5, r7, r8, r9, ip, sp}
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	00000007 	andeq	r0, r0, r7
     5cc:	9b0c0000 	blls	3005d4 <__ccfg+0x2e062c>
     5d0:	de000001 	cdple	0, 0, cr0, cr0, cr1, {0}
     5d4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
     5d8:	00000088 	andeq	r0, r0, r8, lsl #1
     5dc:	9b0c0013 	blls	300630 <__ccfg+0x2e0688>
     5e0:	ee000001 	cdp	0, 0, cr0, cr0, cr1, {0}
	switch (operation) {
     5e4:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e8:	00000088 	andeq	r0, r0, r8, lsl #1
     5ec:	01190031 	tsteq	r9, r1, lsr r0
     5f0:	00000316 	andeq	r0, r0, r6, lsl r3
     5f4:	01064601 	tsteq	r6, r1, lsl #12
     5f8:	00000110 	andeq	r0, r0, r0, lsl r1
				*buf++ = uart_a_read;
     5fc:	0000016c 	andeq	r0, r0, ip, ror #2
     600:	06569c01 	ldrbeq	r9, [r6], -r1, lsl #24
			while (len && uart_a_char_available) {
     604:	581a0000 	ldmdapl	sl, {}	; <UNPREDICTABLE>
     608:	01000000 	mrseq	r0, (UNDEF: 0)
     60c:	01952246 	orrseq	r2, r5, r6, asr #4
			if (len != operation) {
     610:	001e0000 	andseq	r0, lr, r0
}
     614:	dd1d0000 	ldcle	0, cr0, [sp, #-0]
     618:	01000003 	tsteq	r0, r3
			uart_a_disable_int;
     61c:	020b0a47 	andeq	r0, fp, #290816	; 0x47000
			if (uart_a_char_available) {
     620:	91020000 	mrsls	r0, (UNDEF: 2)
				*buf++ = uart_a_read;
     624:	00842468 	addeq	r2, r4, r8, ror #8
			uart_a_disable_int;
     628:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
     62c:	00008109 	andeq	r8, r0, r9, lsl #2
			if (uart_a_char_available) {
     630:	00003100 	andeq	r3, r0, r0, lsl #2
     634:	028f2400 	addeq	r2, pc, #0, 8
				uart_a_enable_int;
     638:	4a010000 	bmi	40640 <__ccfg+0x20698>
     63c:	00009b0a 	andeq	r9, r0, sl, lsl #22
				goto Redo_rx;
     640:	00004400 	andeq	r4, r0, r0, lsl #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     644:	00201c00 	eoreq	r1, r0, r0, lsl #24
     648:	69200000 	stmdbvs	r0!, {}	; <UNPREDICTABLE>
			return -2;
     64c:	0e4c0100 	dvfeqe	f0, f4, f0
     650:	00000081 	andeq	r0, r0, r1, lsl #1
				uart_a_write (*buf);
     654:	01250000 			; <UNDEFINED> instruction: 0x01250000
     658:	000000f5 	strdeq	r0, [r0], -r5
			while (len && uart_a_room_in_tx) {
     65c:	c8063501 	stmdagt	r6, {r0, r8, sl, ip, sp}
     660:	10000000 	andne	r0, r0, r0
     664:	01000001 	tsteq	r0, r1
			if (len != operation) {
     668:	2b01199c 	blcs	46ce0 <__ccfg+0x26d38>
			uart_a_disable_int;
     66c:	01000003 	tsteq	r0, r3
     670:	0001061d 	andeq	r0, r1, sp, lsl r6
			if (uart_a_room_in_tx) {
     674:	00000000 	andeq	r0, r0, r0
     678:	01000000 	mrseq	r0, (UNDEF: 0)
				uart_a_enable_int;
     67c:	00075a9c 	muleq	r7, ip, sl
     680:	00b81a00 	adcseq	r1, r8, r0, lsl #20
				*buf++ = uart_a_read;
     684:	1d010000 	stcne	0, cr0, [r1, #-0]
			if (uart_a_room_in_tx) {
     688:	00009b14 	andeq	r9, r0, r4, lsl fp
				uart_a_write (*buf);
     68c:	00007800 	andeq	r7, r0, r0, lsl #16
     690:	00101b00 	andseq	r1, r0, r0, lsl #22
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
     698:	00000019 	andeq	r0, r0, r9, lsl r0
			uart_a_enable_int;
     69c:	01001b00 	tsteq	r0, r0, lsl #22
     6a0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     6a4:	00000019 	andeq	r0, r0, r9, lsl r0
			return 0;
     6a8:	00001e00 	andeq	r1, r0, r0, lsl #28
			if (len == UART_CNTRL_SETRATE) {
     6ac:	06f30000 	ldrbteq	r0, [r3], r0
				if (__pi_uart_setrate (*((word*)buf),
     6b0:	3c240000 	stccc	0, cr0, [r4], #-0
     6b4:	01000003 	tsteq	r0, r3
     6b8:	009b0e2c 	addseq	r0, fp, ip, lsr #28
				syserror (EREQPAR, "uar");
     6bc:	00ac0000 	adceq	r0, ip, r0
			syserror (ENOOPER, "uai");
     6c0:	5a210000 	bpl	8406c8 <__ccfg+0x820720>
			if (len == UART_CNTRL_GETRATE) {
     6c4:	00000007 	andeq	r0, r0, r7
				return 1;
     6c8:	00000000 	andeq	r0, r0, r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	01000000 	mrseq	r0, (UNDEF: 0)
			syserror (ENOOPER, "uai");
     6d0:	06dc492a 	ldrbeq	r4, [ip], sl, lsr #18
     6d4:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
     6d8:	00000007 	andeq	r0, r0, r7
     6dc:	00075a26 	andeq	r5, r7, r6, lsr #20
	...
     6e8:	b92a0100 	stmdblt	sl!, {r8}
     6ec:	00076922 	andeq	r6, r7, r2, lsr #18
     6f0:	27000000 	strcs	r0, [r0, -r0]
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	00000777 	andeq	r0, r0, r7, ror r7
	...
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     700:	01bd2001 			; <UNDEFINED> instruction: 0x01bd2001
     704:	0000070e 	andeq	r0, r0, lr, lsl #14
     708:	00078222 	andeq	r8, r7, r2, lsr #4
     70c:	77270000 	strvc	r0, [r7, -r0]!
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	00000007 	andeq	r0, r0, r7
     714:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     718:	01000000 	mrseq	r0, (UNDEF: 0)
     71c:	29022c20 	stmdbcs	r2, {r5, sl, fp, sp}
		i_trigger (devevent (UART_A, READ));
     720:	22000007 	andcs	r0, r0, #7
     724:	00000782 	andeq	r0, r0, r2, lsl #15
     728:	075a2100 	ldrbeq	r2, [sl, -r0, lsl #2]
	...
     734:	25010000 	strcs	r0, [r1, #-0]
     738:	0007434d 	andeq	r4, r7, sp, asr #6
     73c:	07692200 	strbeq	r2, [r9, -r0, lsl #4]!
     740:	26000000 	strcs	r0, [r0], -r0
     744:	0000075a 	andeq	r0, r0, sl, asr r7
	...
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	22bd2501 	adcscs	r2, sp, #4194304	; 0x400000
     754:	00000769 	andeq	r0, r0, r9, ror #14
     758:	9e280000 	cdpls	0, 2, cr0, cr8, cr0, {0}
		i_trigger (devevent (UART_A, WRITE));
     75c:	02000003 	andeq	r0, r0, #3
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	01010154 	tsteq	r1, r4, asr r1
     764:	00077703 	andeq	r7, r7, r3, lsl #14
		RISE_N_SHINE;
     768:	01552900 	cmpeq	r5, r0, lsl #18
     76c:	54020000 	strpl	r0, [r2], #-0
     770:	00671901 	rsbeq	r1, r7, r1, lsl #18
		i_trigger (devevent (UART_A, WRITE));
     774:	2a000000 	bcs	77c <UART0IntHandler+0x88>
     778:	00000025 	andeq	r0, r0, r5, lsr #32
     77c:	01011e02 	tsteq	r1, r2, lsl #28
     780:	55290301 	strpl	r0, [r9, #-769]!	; 0xfffffcff
     784:	02000001 	andeq	r0, r0, #1
     788:	6717011e 			; <UNDEFINED> instruction: 0x6717011e
     78c:	00000000 	andeq	r0, r0, r0
     790:	00148c00 	andseq	r8, r4, r0, lsl #24
     794:	67000300 	strvs	r0, [r0, -r0, lsl #6]
     798:	04000002 	streq	r0, [r0], #-2
     79c:	00015f01 	andeq	r5, r1, r1, lsl #30
}
     7a0:	09170c00 	ldmdbeq	r7, {sl, fp}
     7a4:	00c00000 	sbceq	r0, r0, r0
     7a8:	05180000 	ldreq	r0, [r8, #-0]
     7ac:	00000000 	andeq	r0, r0, r0
     7b0:	05370000 	ldreq	r0, [r7, #-0]!
void __buttons_setirq (int val) {
     7b4:	01020000 	mrseq	r0, (UNDEF: 2)
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	00039206 	andeq	r9, r3, r6, lsl #4
     7bc:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	000003cc 	andeq	r0, r0, ip, asr #7
     7c4:	00163703 	andseq	r3, r6, r3, lsl #14
     7c8:	18281000 	stmdane	r8!, {ip}
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	0000003f 	andeq	r0, r0, pc, lsr r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d0:	9d050402 	cfstrsls	mvf0, [r5, #-8]
     7d4:	02000000 	andeq	r0, r0, #0
     7d8:	00980508 	addseq	r0, r8, r8, lsl #10
     7dc:	eb030000 	bl	c07e4 <__ccfg+0xa083c>
     7e0:	10000021 	andne	r0, r0, r1, lsr #32
     7e4:	0059182e 	subseq	r1, r9, lr, lsr #16
}
     7e8:	01020000 	mrseq	r0, (UNDEF: 2)
     7ec:	00039008 	andeq	r9, r3, r8
     7f0:	20d90300 	sbcscs	r0, r9, r0, lsl #6
     7f4:	31100000 	tstcc	r0, r0
void __pinlist_setirq (int val) {
     7f8:	00006c19 	andeq	r6, r0, r9, lsl ip
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	07020200 	streq	r0, [r2, -r0, lsl #4]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	00000260 	andeq	r0, r0, r0, ror #4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	0017a203 	andseq	sl, r7, r3, lsl #4
	for (i = 0; i < N_PINLIST; i++) {
     808:	19341000 	ldmdbne	r4!, {ip}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80c:	0000007f 	andeq	r0, r0, pc, ror r0
     810:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     814:	02000000 	andeq	r0, r0, #0
     818:	006d0708 	rsbeq	r0, sp, r8, lsl #14
     81c:	04040000 	streq	r0, [r4], #-0
	for (i = 0; i < N_PINLIST; i++) {
     820:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
}
     824:	07040200 	streq	r0, [r4, -r0, lsl #4]
     828:	00000077 	andeq	r0, r0, r7, ror r0
     82c:	0003ec03 	andeq	lr, r3, r3, lsl #24
     830:	12261100 	eorne	r1, r6, #0, 2
void GPIOIntHandler () {
     834:	0000004d 	andeq	r0, r0, sp, asr #32
if (buttons_int) {
     838:	0015af03 	andseq	sl, r5, r3, lsl #30
     83c:	12271100 	eorne	r1, r7, #0, 2
	buttons_disable ();
     840:	00000060 	andeq	r0, r0, r0, rrx
     844:	0000a705 	andeq	sl, r0, r5, lsl #14
	i_trigger ((aword)&__button_list);
     848:	00a70600 	adceq	r0, r7, r0, lsl #12
     84c:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
     850:	11000008 	tstne	r0, r8
     854:	00331228 	eorseq	r1, r3, r8, lsr #4
     858:	a7030000 	strge	r0, [r3, -r0]
     85c:	11000013 	tstne	r0, r3, lsl r0
     860:	004d122b 	subeq	r1, sp, fp, lsr #4
     864:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
     868:	05000000 	streq	r0, [r0, #-0]
     86c:	000000c9 	andeq	r0, r0, r9, asr #1
     870:	00160003 	andseq	r0, r6, r3
	RISE_N_SHINE;
     874:	122c1100 	eorne	r1, ip, #0, 2
     878:	00000073 	andeq	r0, r0, r3, ror r0
     87c:	0000df05 	andeq	sp, r0, r5, lsl #30
if (pin_sensor_int) {
     880:	02960300 	addseq	r0, r6, #0, 6
     884:	2d110000 	ldccs	0, cr0, [r1, #-0]
	i_trigger ((aword)(&__input_pins));
     888:	00007312 	andeq	r7, r0, r2, lsl r3
     88c:	07510300 	ldrbeq	r0, [r1, -r0, lsl #6]
     890:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     894:	00010810 	andeq	r0, r1, r0, lsl r8
     898:	a7040700 	strge	r0, [r4, -r0, lsl #14]
     89c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8a0:	09321108 	ldmdbeq	r2!, {r3, r8, ip}
     8a4:	0000019c 	muleq	r0, ip, r1
     8a8:	0002b109 	andeq	fp, r2, r9, lsl #2
     8ac:	07341100 	ldreq	r1, [r4, -r0, lsl #2]!
     8b0:	000000c9 	andeq	r0, r0, r9, asr #1
	__pinsen_disable_and_clear;
     8b4:	00070101 	andeq	r0, r7, r1, lsl #2
	RISE_N_SHINE;
     8b8:	00009109 	andeq	r9, r0, r9, lsl #2
     8bc:	03351100 	teqeq	r5, #0, 2
     8c0:	000000c9 	andeq	r0, r0, r9, asr #1
}
     8c4:	00060101 	andeq	r0, r6, r1, lsl #2
     8c8:	00028809 	andeq	r8, r2, r9, lsl #16
     8cc:	03361100 	teqeq	r6, #0, 2
     8d0:	000000c9 	andeq	r0, r0, r9, asr #1
     8d4:	00050101 	andeq	r0, r5, r1, lsl #2
void system_init () {
     8d8:	0003fb09 	andeq	pc, r3, r9, lsl #22
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	03371100 	teqeq	r7, #0, 2
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e0:	000000c9 	andeq	r0, r0, r9, asr #1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	00040101 	andeq	r0, r4, r1, lsl #2
     8e8:	0003f409 	andeq	pc, r3, r9, lsl #8
     8ec:	03381100 	teqeq	r8, #0, 2
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	000000c9 	andeq	r0, r0, r9, asr #1
     8f4:	00000401 	andeq	r0, r0, r1, lsl #8
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	0003e50a 	andeq	lr, r3, sl, lsl #10
     8fc:	073a1100 	ldreq	r1, [sl, -r0, lsl #2]!
     900:	000000c9 	andeq	r0, r0, r9, asr #1
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	00400a01 	subeq	r0, r0, r1, lsl #20
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	3c110000 	ldccc	0, cr0, [r1], {-0}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	0000c903 	andeq	ip, r0, r3, lsl #18
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	660a0200 	strvs	r0, [sl], -r0, lsl #4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	11000000 	mrsne	r0, (UNDEF: 0)
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	00c9033d 	sbceq	r0, r9, sp, lsr r3
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	0a030000 	beq	c0924 <__ccfg+0xa097c>
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	00000143 	andeq	r0, r0, r3, asr #2
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	df083f11 	svcle	0x00083f11
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     928:	04000000 	streq	r0, [r0], #-0
     92c:	04230300 	strteq	r0, [r3], #-768	; 0xfffffd00
     930:	41110000 	tstmi	r1, r0
     934:	00010e03 	andeq	r0, r1, r3, lsl #28
		if (port_confs [i] & 0x80)
     938:	019c0600 	orrseq	r0, ip, r0, lsl #12
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	a50b0000 	strge	r0, [fp, #-0]
     940:	11000002 	tstne	r0, r2
		if (port_confs [i] & 0x40)
     944:	01a81a43 			; <UNDEFINED> instruction: 0x01a81a43
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	01010000 	mrseq	r0, (UNDEF: 1)
     94c:	0002fc0b 	andeq	pc, r2, fp, lsl #24
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     950:	0e451100 	dvfeqs	f1, f5, f0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     954:	000001c9 	andeq	r0, r0, r9, asr #3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     958:	04070101 	streq	r0, [r7], #-257	; 0xfffffeff
	all_leds_blink;
     95c:	000001cf 	andeq	r0, r0, pc, asr #3
     960:	99080102 	stmdbls	r8, {r1, r8}
     964:	05000003 	streq	r0, [r0, #-3]
     968:	000001cf 	andeq	r0, r0, pc, asr #3
     96c:	00030a0b 	andeq	r0, r3, fp, lsl #20
     970:	1e451100 	dvfnes	f1, f5, f0
     974:	000001c9 	andeq	r0, r0, r9, asr #3
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	08080101 	stmdaeq	r8, {r0, r8}
     97c:	1a098f12 	bne	2645cc <__ccfg+0x244624>
     980:	0a000002 	beq	990 <system_init+0xb8>
     984:	000002c1 	andeq	r0, r0, r1, asr #5
     988:	730b9012 	movwvc	r9, #45074	; 0xb012
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	00000000 	andeq	r0, r0, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	0005dc0a 	andeq	sp, r5, sl, lsl #24
     994:	08911200 	ldmeq	r1, {r9, ip}
	IntEnable (INT_AON_RTC_COMB);
     998:	000000a7 	andeq	r0, r0, r7, lsr #1
     99c:	04600a04 	strbteq	r0, [r0], #-2564	; 0xfffff5fc
     9a0:	92120000 	andsls	r0, r2, #0
	__pi_malloc_init ();
     9a4:	0000d510 	andeq	sp, r0, r0, lsl r5
	IntEnable (INT_AON_GPIO_EDGE);
     9a8:	03000600 	movweq	r0, #1536	; 0x600
     9ac:	00000402 	andeq	r0, r0, r2, lsl #8
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	e9039312 	stmdb	r3, {r1, r4, r8, r9, ip, pc}
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	05000001 	streq	r0, [r0, #-1]
     9b8:	0000021a 	andeq	r0, r0, sl, lsl r2
     9bc:	00021a0c 	andeq	r1, r2, ip, lsl #20
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c0:	00023600 	andeq	r3, r2, r0, lsl #12
     9c4:	0b000d00 	bleq	3dcc <__exidx_end+0x114c>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c8:	00000036 	andeq	r0, r0, r6, lsr r0
     9cc:	2b0f9912 	blcs	3e6e1c <__ccfg+0x3c6e74>
     9d0:	01000002 	tsteq	r0, r2
	urates [0] = UART_RATE / 100;
     9d4:	da040701 	ble	1025e0 <__ccfg+0xe2638>
     9d8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	reinit_uart ();
     9dc:	09911301 	ldmibeq	r1, {r0, r8, r9, ip}
	EXTRA_INITIALIZERS;
     9e0:	00000274 	andeq	r0, r0, r4, ror r2
     9e4:	00045309 	andeq	r5, r4, r9, lsl #6
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e8:	07931300 	ldreq	r1, [r3, r0, lsl #6]
     9ec:	000000c9 	andeq	r0, r0, r9, asr #1
     9f0:	00010701 	andeq	r0, r1, r1, lsl #14
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	00003109 	andeq	r3, r0, r9, lsl #2
     9f8:	03941300 	orrseq	r1, r4, #0, 6
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	000000c9 	andeq	r0, r0, r9, asr #1
     a00:	00000101 	andeq	r0, r0, r1, lsl #2
			devinit [i] . init (devinit [i] . param);
     a04:	02730300 	rsbseq	r0, r3, #0, 6
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	96130000 	ldrls	r0, [r3], -r0
     a0c:	00024a03 	andeq	r4, r2, r3, lsl #20
     a10:	02740500 	rsbseq	r0, r4, #0, 10
	IntEnable (INT_UART0_COMB);
     a14:	800c0000 	andhi	r0, ip, r0
     a18:	90000002 	andls	r0, r0, r2
}
     a1c:	0d000002 	stceq	0, cr0, [r0, #-8]
	tci_run_auxiliary_timer ();
     a20:	02850500 	addeq	r0, r5, #0, 10
		diag ("");
     a24:	dc0b0000 	stcle	0, cr0, [fp], {-0}
     a28:	13000002 	movwne	r0, #2
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2c:	0290179c 	addseq	r1, r0, #156, 14	; 0x2700000
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	01010000 	mrseq	r0, (UNDEF: 1)
		diag ("Leftover RAM: %d bytes",
     a34:	0000b30c 	andeq	fp, r0, ip, lsl #6
     a38:	0002ae00 	andeq	sl, r2, r0, lsl #28
     a3c:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
     a40:	000002a3 	andeq	r0, r0, r3, lsr #5
     a44:	0003820b 	andeq	r8, r3, fp, lsl #4
     a48:	13061400 	movwne	r1, #25600	; 0x6400
     a4c:	000002ae 	andeq	r0, r0, lr, lsr #5
     a50:	230b0101 	movwcs	r0, #45313	; 0xb101
     a54:	12000001 	andne	r0, r0, #1
     a58:	00df0ec3 	sbcseq	r0, pc, r3, asr #29
     a5c:	01010000 	mrseq	r0, (UNDEF: 1)
     a60:	00046d0e 	andeq	r6, r4, lr, lsl #26
     a64:	016e1500 	cmneq	lr, r0, lsl #10
     a68:	0002dc10 	andeq	sp, r2, r0, lsl ip
     a6c:	e2040700 	and	r0, r4, #0, 14
     a70:	0f000002 	svceq	0x00000002
     a74:	0002ee01 	andeq	lr, r2, r1, lsl #28
     a78:	00a71000 	adceq	r1, r7, r0
     a7c:	0c000000 	stceq	0, cr0, [r0], {-0}
     a80:	000001d6 	ldrdeq	r0, [r0], -r6
     a84:	000002f9 	strdeq	r0, [r0], -r9
     a88:	ee05000d 	cdp	0, 0, cr0, cr5, cr13, {0}
     a8c:	11000002 	tstne	r0, r2
__attribute__ ((noreturn)) void __pi_release () {
     a90:	00000433 	andeq	r0, r0, r3, lsr r4
     a94:	16017f15 			; <UNDEFINED> instruction: 0x16017f15
     a98:	000002f9 	strdeq	r0, [r0], -r9
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	7a110101 	bvc	440ea8 <__ccfg+0x420f00>
	check_stack_overflow;
     aa0:	15000003 	strne	r0, [r0, #-3]
     aa4:	eb140182 	bl	5010b4 <__ccfg+0x4e110c>
     aa8:	01000000 	mrseq	r0, (UNDEF: 0)
	update_n_wake (MAX_WORD, NO);
     aac:	04581101 	ldrbeq	r1, [r8], #-257	; 0xfffffeff
     ab0:	d8150000 	ldmdale	r5, {}	; <UNPREDICTABLE>
     ab4:	00df0e02 	sbcseq	r0, pc, r2, lsl #28
	for_all_tasks (__pi_curr) {
     ab8:	01010000 	mrseq	r0, (UNDEF: 1)
     abc:	03150812 	tsteq	r5, #1179648	; 0x120000
     ac0:	03520903 	cmpeq	r2, #49152	; 0xc000
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	e3130000 	tst	r3, #0
	__SLEEP;
     ac8:	15000021 	strne	r0, [r0, #-33]	; 0xffffffdf
     acc:	a7070307 	strge	r0, [r7, -r7, lsl #6]
     ad0:	00000000 	andeq	r0, r0, r0
     ad4:	00052e13 	andeq	r2, r5, r3, lsl lr
	system_event_count ++;
     ad8:	03081500 	movweq	r1, #34048	; 0x8500
     adc:	0000f008 	andeq	pc, r0, r8
	switch (__pi_systat.effpdm) {
     ae0:	0e000400 	cfcpyseq	mvf0, mvf0
     ae4:	00000253 	andeq	r0, r0, r3, asr r2
     ae8:	03030915 	movweq	r0, #14613	; 0x3915
     aec:	0000032b 	andeq	r0, r0, fp, lsr #6
			__WFI ();
     af0:	00047c14 	andeq	r7, r4, r4, lsl ip
     af4:	0b153000 	bleq	54cafc <__ccfg+0x52cb54>
     af8:	03c20803 	biceq	r0, r2, #196608	; 0x30000
	check_stack_overflow;
     afc:	75130000 	ldrvc	r0, [r3, #-0]
     b00:	15000004 	strne	r0, [r0, #-4]
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	a7080314 	smladge	r8, r4, r3, r0
     b08:	00000000 	andeq	r0, r0, r0
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	0002cb13 	andeq	ip, r2, r3, lsl fp
			goto Redo;
     b10:	03151500 	tsteq	r5, #0, 10
	for_all_tasks (__pi_curr) {
     b14:	0000a708 	andeq	sl, r0, r8, lsl #14
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	70130200 	andsvc	r0, r3, r0, lsl #4
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1c:	15000004 	strne	r0, [r0, #-4]
     b20:	cf0b0316 	svcgt	0x000b0316
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b24:	04000002 	streq	r0, [r0], #-2
     b28:	000f2e13 	andeq	r2, pc, r3, lsl lr	; <UNPREDICTABLE>
     b2c:	03171500 	tsteq	r7, #0, 10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b30:	0000f009 	andeq	pc, r0, r9
     b34:	2c130800 	ldccs	8, cr0, [r3], {-0}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b38:	15000004 	strne	r0, [r0, #-4]
     b3c:	c20f0318 	andgt	r0, pc, #24, 6	; 0x60000000
			__WFI ();
     b40:	0c000003 	stceq	0, cr0, [r0], {3}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	0002c613 	andeq	ip, r2, r3, lsl r6
     b48:	03191500 	tsteq	r9, #0, 10
}
     b4c:	0003d215 	andeq	sp, r3, r5, lsl r2
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b50:	0c002c00 	stceq	12, cr2, [r0], {-0}
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b54:	00000352 	andeq	r0, r0, r2, asr r3
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b58:	000003d2 	ldrdeq	r0, [r0], -r2
     b5c:	00009415 	andeq	r9, r0, r5, lsl r4
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	07000300 	streq	r0, [r0, -r0, lsl #6]
     b64:	00035f04 	andeq	r5, r3, r4, lsl #30
     b68:	04870e00 	streq	r0, [r7], #3584	; 0xe00
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6c:	1c150000 	ldcne	0, cr0, [r5], {-0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	035f1b03 	cmpeq	pc, #3072	; 0xc00
     b74:	70110000 	andsvc	r0, r1, r0
     b78:	15000003 	strne	r0, [r0, #-3]
     b7c:	f414031e 			; <UNDEFINED> instruction: 0xf414031e
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	01000003 	tsteq	r0, r3
     b84:	d8040701 	stmdale	r4, {r0, r8, r9, sl}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	0b000003 	bleq	b9c <__pi_release+0x10c>
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	000004a0 	andeq	r0, r0, r0, lsr #9
     b90:	a7131d16 			; <UNDEFINED> instruction: 0xa7131d16
     b94:	01000000 	mrseq	r0, (UNDEF: 0)
     b98:	070a0b01 	streq	r0, [sl, -r1, lsl #22]
     b9c:	1e160000 	cdpne	0, 1, cr0, cr6, cr0, {0}
			SysCtrlSetRechargeBeforePowerDown
     ba0:	0000b81a 	andeq	fp, r0, sl, lsl r8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	0b010100 	bleq	40fac <__ccfg+0x21004>
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba8:	0000089a 	muleq	r0, sl, r8
     bac:	b8241e16 	stmdalt	r4!, {r1, r2, r4, r9, sl, fp, ip}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	01000000 	mrseq	r0, (UNDEF: 0)
     bb4:	05c90b01 	strbeq	r0, [r9, #2817]	; 0xb01
     bb8:	22160000 	andscs	r0, r6, #0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	0003f414 	andeq	pc, r3, r4, lsl r4	; <UNPREDICTABLE>
     bc0:	03010100 	movweq	r0, #4352	; 0x1100
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	00000512 	andeq	r0, r0, r2, lsl r5
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	3e104316 	mrccc	3, 0, r4, cr0, cr6, {0}
     bcc:	07000004 	streq	r0, [r0, -r4]
     bd0:	00044404 	andeq	r4, r4, r4, lsl #8
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd4:	50010f00 	andpl	r0, r1, r0, lsl #30
			while (!(AONWUCPowerStatusGet () &
     bd8:	10000004 	andne	r0, r0, r4
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	0000008d 	andeq	r0, r0, sp, lsl #1
     be0:	16080800 	strne	r0, [r8], -r0, lsl #16
     be4:	04740946 	ldrbteq	r0, [r4], #-2374	; 0xfffff6ba
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be8:	750a0000 	strvc	r0, [sl, #-0]
     bec:	1600000a 	strne	r0, [r0], -sl
     bf0:	04320f4a 	ldrteq	r0, [r2], #-3914	; 0xfffff0b6
     bf4:	0a000000 	beq	bfc <__pi_release+0x16c>
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf8:	00000777 	andeq	r0, r0, r7, ror r7
     bfc:	8d074b16 	vstrhi	d4, [r7, #-88]	; 0xffffffa8
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c00:	04000000 	streq	r0, [r0], #-0
     c04:	05980300 	ldreq	r0, [r8, #768]	; 0x300
			SysCtrlAdjustRechargeAfterPowerDown ();
     c08:	4c160000 	ldcmi	0, cr0, [r6], {-0}
			reinit_uart ();
     c0c:	00045003 	andeq	r5, r4, r3
     c10:	04740500 	ldrbteq	r0, [r4], #-1280	; 0xfffffb00
     c14:	fc0c0000 	stc2	0, cr0, [ip], {-0}
}
     c18:	95000000 	strls	r0, [r0, #-0]
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1c:	15000004 	strne	r0, [r0, #-4]
     c20:	00000094 	muleq	r0, r4, r0
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	ea0b0003 	b	2c0c38 <__ccfg+0x2a0c90>
     c28:	01000008 	tsteq	r0, r8
     c2c:	0485120d 	streq	r1, [r5], #525	; 0x20d
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c30:	01010000 	mrseq	r0, (UNDEF: 1)
     c34:	0004800c 	andeq	r8, r4, ip
     c38:	0004b300 	andeq	fp, r4, r0, lsl #6
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	00941500 	addseq	r1, r4, r0, lsl #10
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	00010000 	andeq	r0, r1, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	0004a305 	andeq	sl, r4, r5, lsl #6
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	08fa1600 	ldmeq	sl!, {r9, sl, ip}^
     c4c:	cf010000 	svcgt	0x00010000
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c50:	0004b318 	andeq	fp, r4, r8, lsl r3
     c54:	00eb0c00 	rsceq	r0, fp, r0, lsl #24
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	04d40000 	ldrbeq	r0, [r4], #0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5c:	94150000 	ldrls	r0, [r5], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c60:	10000000 	andne	r0, r0, r0
     c64:	04c40500 	strbeq	r0, [r4], #1280	; 0x500
			PRCMPowerDomainOff (
     c68:	f7170000 			; <UNDEFINED> instruction: 0xf7170000
     c6c:	01000006 	tsteq	r0, r6
	__SLEEP;
     c70:	04d40dec 	ldrbeq	r0, [r4], #3564	; 0xdec
     c74:	05010000 	streq	r0, [r1, #-0]
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	002c0003 	eoreq	r0, ip, r3
	goto Redo;
     c7c:	05771800 	ldrbeq	r1, [r7, #-2048]!	; 0xfffff800
     c80:	0c010000 	stceq	0, cr0, [r1], {-0}
     c84:	00a70d01 	adceq	r0, r7, r1, lsl #26
     c88:	03050000 	movweq	r0, #20480	; 0x5000
     c8c:	20000016 	andcs	r0, r0, r6, lsl r0
     c90:	00023619 	andeq	r3, r2, r9, lsl r6
     c94:	02d00100 	sbcseq	r0, r0, #0, 2
     c98:	88030508 	stmdahi	r3, {r3, r8, sl}
     c9c:	0c200000 	stceq	0, cr0, [r0], #-0
     ca0:	000000a7 	andeq	r0, r0, r7, lsr #1
     ca4:	0000051e 	andeq	r0, r0, lr, lsl r5
     ca8:	00009415 	andeq	r9, r0, r5, lsl r4
     cac:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     cb0:	000004f8 	strdeq	r0, [r0], -r8
     cb4:	0d02d201 	sfmeq	f5, 1, [r2, #-4]
     cb8:	0000050e 	andeq	r0, r0, lr, lsl #10
     cbc:	00180305 	andseq	r0, r8, r5, lsl #6
     cc0:	c1192000 	tstgt	r9, r0
     cc4:	01000002 	tsteq	r0, r2
     cc8:	0507048c 	streq	r0, [r7, #-1164]	; 0xfffffb74
     ccc:	00009003 	andeq	r9, r0, r3
     cd0:	ec011a20 			; <UNDEFINED> instruction: 0xec011a20
     cd4:	01000004 	tsteq	r0, r4
     cd8:	01050572 	tsteq	r5, r2, ror r5
     cdc:	0000008d 	andeq	r0, r0, sp, lsl #1
     ce0:	00000ce8 	andeq	r0, r0, r8, ror #25
     ce4:	00000d48 	andeq	r0, r0, r8, asr #26
int main (void) {
     ce8:	05849c01 	streq	r9, [r4, #3073]	; 0xc01
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cec:	001b0000 	andseq	r0, fp, r0
     cf0:	72000005 	andvc	r0, r0, #5
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	1c000005 	stcne	0, cr0, [r0], {5}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	76010069 	strvc	r0, [r1], -r9, rrx
	system_init ();
     cfc:	00bd1105 	adcseq	r1, sp, r5, lsl #2
	tcv_init ();
     d00:	1d000000 	stcne	0, cr0, [r0, #-0]
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	000011f7 	strdeq	r1, [r0], -r7
     d08:	00000d2a 	andeq	r0, r0, sl, lsr #26
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d0c:	00000d2c 	andeq	r0, r0, ip, lsr #26
     d10:	02058d01 	andeq	r8, r5, #1, 26	; 0x40
     d14:	91011e00 	tstls	r1, r0, lsl #28
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	01000007 	tsteq	r0, r7
     d1c:	90210568 	eorls	r0, r1, r8, ror #10
	delay (16, 0);
     d20:	e800000a 	stmda	r0, {r1, r3}
     d24:	0100000c 	tsteq	r0, ip
     d28:	0007e49c 	muleq	r7, ip, r4
	__pi_release ();
     d2c:	079e1f00 	ldreq	r1, [lr, r0, lsl #30]
     d30:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
     d34:	11d02001 	bicsne	r2, r0, r1
     d38:	0a900000 	beq	fe400d40 <_estack+0xde3fbd40>
     d3c:	03600000 	cmneq	r0, #0
     d40:	6a010000 	bvs	40d48 <__ccfg+0x20da0>
     d44:	05bf0205 	ldreq	r0, [pc, #517]!	; f51 <__pi_trigger+0x11>
static void killev (__pi_pcb_t *pid) {
     d48:	df210000 	svcle	0x00210000
	wfun = (aword)(pid->code);
     d4c:	00000011 	andeq	r0, r0, r1, lsl r0
	for_all_tasks (i) {
     d50:	00081222 	andeq	r1, r8, r2, lsr #4
		for (j = 0; j < nevents (i); j++) {
     d54:	000aaa00 	andeq	sl, sl, r0, lsl #20
     d58:	00038000 	andeq	r8, r3, r0
     d5c:	02270d00 	eoreq	r0, r7, #0, 26
			    || i->Events [j] . Event == wfun
     d60:	000007b3 			; <UNDEFINED> instruction: 0x000007b3
		for (j = 0; j < nevents (i); j++) {
     d64:	00038023 	andeq	r8, r3, r3, lsr #32
			if (i->Events [j] . Event == (aword)pid
     d68:	08202400 	stmdaeq	r0!, {sl, sp}
     d6c:	0b380000 	bleq	e00d74 <__ccfg+0xde0dcc>
     d70:	5c250000 	stcpl	0, cr0, [r5], #-0
				wakeupev (i, j);
     d74:	aa000012 	bge	dc4 <qfree+0x40>
     d78:	a800000a 	stmdage	r0, {r1, r3}
	for_all_tasks (i) {
     d7c:	01000003 	tsteq	r0, r3
}
     d80:	1d0404b3 	cfstrsne	mvf0, [r4, #-716]	; 0xfffffd34
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	00001438 	andeq	r1, r0, r8, lsr r4
static void qfree (aword *ch) {
     d88:	00000b22 	andeq	r0, r0, r2, lsr #22
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	00000b2e 	andeq	r0, r0, lr, lsr #22
	cc = (aword*)(mpools + MA_NP);
     d90:	0404a401 	streq	sl, [r4], #-1025	; 0xfffffbff
	m_setnextp (ch, chunk);
     d94:	00125c1d 	andseq	r5, r2, sp, lsl ip
	m_setnextp (cc, ch);
     d98:	000b3600 	andeq	r3, fp, r0, lsl #12
}
     d9c:	000b3800 	andeq	r3, fp, r0, lsl #16
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da0:	04aa0100 	strteq	r0, [sl], #256	; 0x100
     da4:	12c02504 	sbcne	r2, r0, #4, 10	; 0x1000000
     da8:	0b4e0000 	bleq	1380db0 <__ccfg+0x1360e08>
			m_setnextp (cc, m_nextp (chunk));
     dac:	03c00000 	biceq	r0, r0, #0
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	bb010000 	bllt	40db8 <__ccfg+0x20e10>
     db4:	43250404 			; <UNDEFINED> instruction: 0x43250404
     db8:	4e000014 	mcrmi	0, 0, r0, cr0, cr4, {0}
     dbc:	e000000b 	and	r0, r0, fp
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	01000003 	tsteq	r0, r3
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	200404c5 	andcs	r0, r4, r5, asr #9
     dc8:	0000128e 	andeq	r1, r0, lr, lsl #5
     dcc:	00000b56 	andeq	r0, r0, r6, asr fp
			m_setnextp (cc, m_nextp (chunk));
     dd0:	00000400 	andeq	r0, r0, r0, lsl #8
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	0404c001 	streq	ip, [r4], #-1
     dd8:	00000651 	andeq	r0, r0, r1, asr r6
     ddc:	00129d21 	andseq	r9, r2, r1, lsr #26
     de0:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
     de4:	66000012 			; <UNDEFINED> instruction: 0x66000012
     de8:	6800000b 	stmdavs	r0, {r0, r1, r3}
			if (m_size (chunk) >= m_size (ch))
     dec:	0100000b 	tsteq	r0, fp
     df0:	250404c3 	strcs	r0, [r4, #-1219]	; 0xfffffb3d
     df4:	0000142d 	andeq	r1, r0, sp, lsr #8
		chunk = m_nextp (chunk))
     df8:	00000b6a 	andeq	r0, r0, sl, ror #22
     dfc:	00000420 	andeq	r0, r0, r0, lsr #8
     e00:	0404d501 	streq	sp, [r4], #-1281	; 0xfffffaff
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	00144e20 	andseq	r4, r4, r0, lsr #28
	diag_wait (a);
     e08:	000b8000 	andeq	r8, fp, r0
	diag_wchar (c, a);
     e0c:	00044000 	andeq	r4, r4, r0
     e10:	04cc0100 	strbeq	r0, [ip], #256	; 0x100
}
     e14:	00068e04 	andeq	r8, r6, r4, lsl #28
     e18:	145d2100 	ldrbne	r2, [sp], #-256	; 0xffffff00
	syserror (ESTATE, "state");
     e1c:	1d000000 	stcne	0, cr0, [r0, #-0]
     e20:	0000125c 	andeq	r1, r0, ip, asr r2
     e24:	00000ba4 	andeq	r0, r0, r4, lsr #23
     e28:	00000ba6 	andeq	r0, r0, r6, lsr #23
void update_n_wake (word min, Boolean force) {
     e2c:	0404df01 	streq	sp, [r4], #-3841	; 0xfffff0ff
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	00143825 	andseq	r3, r4, r5, lsr #16
     e34:	000bc400 	andeq	ip, fp, r0, lsl #8
     e38:	00045800 	andeq	r5, r4, r0, lsl #16
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	04e80100 	strbteq	r0, [r8], #256	; 0x100
     e40:	127f2504 	rsbsne	r2, pc, #4, 10	; 0x1000000
     e44:	0bc80000 	bleq	ff200e4c <_estack+0xdf1fbe4c>
     e48:	04700000 	ldrbteq	r0, [r0], #-0
     e4c:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
     e50:	8e260d04 	cdphi	13, 2, cr0, cr6, cr4, {0}
     e54:	d2000012 	andle	r0, r0, #18
     e58:	d600000b 	strle	r0, [r0], -fp
     e5c:	0100000b 	tsteq	r0, fp
     e60:	dc0404ed 	cfstrsle	mvf0, [r4], {237}	; 0xed
     e64:	21000006 	tstcs	r0, r6
     e68:	0000129d 	muleq	r0, sp, r2
     e6c:	14432500 	strbne	r2, [r3], #-1280	; 0xfffffb00
		for_all_tasks (i) {
     e70:	0bf60000 	bleq	ffd80e78 <_estack+0xdfd7be78>
	__pi_mintk = znew + min;
     e74:	04880000 	streq	r0, [r8], #0
     e78:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
			if (!twaiting (i))
     e7c:	4e200404 	cdpmi	4, 2, cr0, cr0, cr4, {0}
     e80:	f8000014 			; <UNDEFINED> instruction: 0xf8000014
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	a000000b 	andge	r0, r0, fp
     e88:	01000004 	tsteq	r0, r4
     e8c:	080404fa 	stmdaeq	r4, {r1, r3, r4, r5, r6, r7, sl}
     e90:	21000007 	tstcs	r0, r7
     e94:	0000145d 	andeq	r1, r0, sp, asr r4
     e98:	12b61d00 	adcsne	r1, r6, #0, 26
     e9c:	0c000000 	stceq	0, cr0, [r0], {-0}
     ea0:	0c040000 	stceq	0, cr0, [r4], {-0}
     ea4:	fd010000 	stc2	0, cr0, [r1, #-0]
     ea8:	5c1d0404 	cfldrspl	mvf0, [sp], {4}
     eac:	04000012 	streq	r0, [r0], #-18	; 0xffffffee
     eb0:	0600000c 	streq	r0, [r0], -ip
				wakeuptm (i);
     eb4:	0100000c 	tsteq	r0, ip
     eb8:	26040500 	strcs	r0, [r4], -r0, lsl #10
		for_all_tasks (i) {
     ebc:	00000b95 	muleq	r0, r5, fp
				d = i->Timer - znew;
     ec0:	00000c0e 	andeq	r0, r0, lr, lsl #24
     ec4:	00000c1a 	andeq	r0, r0, sl, lsl ip
     ec8:	04050d01 	streq	r0, [r5], #-3329	; 0xfffff2ff
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	0000075c 	andeq	r0, r0, ip, asr r7
     ed0:	00131127 	andseq	r1, r3, r7, lsr #2
     ed4:	000c0e00 	andeq	r0, ip, r0, lsl #28
	__pi_old = znew;
     ed8:	000c1800 	andeq	r1, ip, r0, lsl #16
}
     edc:	03bd0100 			; <UNDEFINED> instruction: 0x03bd0100
	TCI_RUN_DELAY_TIMER;
     ee0:	132d2102 			; <UNDEFINED> instruction: 0x132d2102
}
     ee4:	20210000 	eorcs	r0, r1, r0
     ee8:	00000013 	andeq	r0, r0, r3, lsl r0
     eec:	125c1d00 	subsne	r1, ip, #0, 26
     ef0:	0c420000 	mareq	acc0, r0, r2
     ef4:	0c440000 	mareq	acc0, r0, r4
void proceed (word state) {
     ef8:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
	prcdstate (__pi_curr, state);
     efc:	741d0405 	ldrvc	r0, [sp], #-1029	; 0xfffffbfb
     f00:	44000012 	strmi	r0, [r0], #-18	; 0xffffffee
	release;
     f04:	5400000c 	strpl	r0, [r0], #-12
     f08:	0100000c 	tsteq	r0, ip
void __pi_wait (aword event, word state) {
     f0c:	1d040541 	cfstr32ne	mvfx0, [r4, #-260]	; 0xfffffefc
	sint j = nevents (__pi_curr);
     f10:	0000125c 	andeq	r1, r0, ip, asr r2
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	00000c54 	andeq	r0, r0, r4, asr ip
     f18:	00000c56 	andeq	r0, r0, r6, asr ip
     f1c:	04054401 	streq	r4, [r5], #-1025	; 0xfffffbff
		syserror (ENEVENTS, "sw");
     f20:	00127f25 	andseq	r7, r2, r5, lsr #30
     f24:	000c5600 	andeq	r5, ip, r0, lsl #12
	setestate (__pi_curr->Events [j], state, event);
     f28:	0004b800 	andeq	fp, r4, r0, lsl #16
	incwait (__pi_curr);
     f2c:	05470100 	strbeq	r0, [r7, #-256]	; 0xffffff00
	setestate (__pi_curr->Events [j], state, event);
     f30:	146b250b 	strbtne	r2, [fp], #-1291	; 0xfffffaf5
}
     f34:	0c5e0000 	mraeq	r0, lr, acc0
     f38:	04d00000 	ldrbeq	r0, [r0], #0
     f3c:	4b010000 	blmi	40f44 <__ccfg+0x20f9c>
void __pi_trigger (aword event) {
     f40:	00000405 	andeq	r0, r0, r5, lsl #8
	for_all_tasks (i) {
     f44:	0011ed28 	andseq	lr, r1, r8, lsr #26
		for (j = 0; j < nevents (i); j++) {
     f48:	000ac400 	andeq	ip, sl, r0, lsl #8
     f4c:	000ac600 	andeq	ip, sl, r0, lsl #12
     f50:	02270d00 	eoreq	r0, r7, #0, 26
     f54:	0011f728 	andseq	pc, r1, r8, lsr #14
			if (i->Events [j] . Event == event) {
     f58:	000af200 	andeq	pc, sl, r0, lsl #4
     f5c:	000af400 	andeq	pc, sl, r0, lsl #8
     f60:	02270d00 	eoreq	r0, r7, #0, 26
				wakeupev (i, j);
     f64:	0011f728 	andseq	pc, r1, r8, lsr #14
     f68:	000c7800 	andeq	r7, ip, r0, lsl #16
	for_all_tasks (i) {
     f6c:	000c7a00 	andeq	r7, ip, r0, lsl #20
}
     f70:	02270d00 	eoreq	r0, r7, #0, 26
aword __pi_join (aword pid, word st) {
     f74:	09011a00 	stmdbeq	r1, {r9, fp, ip}
	for_all_tasks (i) {
     f78:	01000008 	tsteq	r0, r8
     f7c:	0106055c 	tsteq	r6, ip, asr r5
	return 0;
     f80:	000000a7 	andeq	r0, r0, r7, lsr #1
	...
}
     f8c:	08129c01 	ldmdaeq	r2, {r0, sl, fp, ip, pc}
	for_all_tasks (i) {
     f90:	73290000 			; <UNDEFINED> instruction: 0x73290000
     f94:	5e010063 	cdppl	0, 0, cr0, cr1, cr3, {3}
void delay (word d, word state) {
     f98:	00a70705 	adceq	r0, r7, r5, lsl #14
	settstate (__pi_curr, state);
     f9c:	00f00000 	rscseq	r0, r0, r0
     fa0:	2a000000 	bcs	fa8 <delay+0x10>
     fa4:	00000729 	andeq	r0, r0, r9, lsr #14
     fa8:	14048e01 	strne	r8, [r4], #-3585	; 0xfffff1ff
	update_n_wake (d, YES);
     fac:	00082a03 	andeq	r2, r8, r3, lsl #20
     fb0:	09c22b00 	stmibeq	r2, {r8, r9, fp, sp}^
	__pi_curr->Timer = __pi_old + d;
     fb4:	ad010000 	stcge	0, cr0, [r1, #-0]
     fb8:	2c000104 	stfcss	f0, [r0], {4}
	inctimer (__pi_curr);
     fbc:	0006cd01 	andeq	ip, r6, r1, lsl #26
     fc0:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
     fc4:	00000106 	andeq	r0, r0, r6, lsl #2
}
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	9c010000 	stcls	0, cr0, [r1], {-0}
	if (fun == NULL)
     fd0:	00000855 	andeq	r0, r0, r5, asr r8
		return (int) __pi_curr;
     fd4:	0002b32d 	andeq	fp, r2, sp, lsr #6
     fd8:	047e0100 	ldrbteq	r0, [lr], #-256	; 0xffffff00
	for_all_tasks (i)
     fdc:	0000a719 	andeq	sl, r0, r9, lsl r7
}
     fe0:	00010300 	andeq	r0, r1, r0, lsl #6
		if (i->code == fun)
     fe4:	011e0000 	tsteq	lr, r0
	for_all_tasks (i)
     fe8:	00000556 	andeq	r0, r0, r6, asr r5
     fec:	06040101 	streq	r0, [r4], -r1, lsl #2
     ff0:	000008d8 	ldrdeq	r0, [r0], -r8
int __pi_strlen (const char *s) {
     ff4:	00000a90 	muleq	r0, r0, sl
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	0a1e9c01 	beq	7a8004 <__ccfg+0x78805c>
}
     ffc:	022e0000 	eoreq	r0, lr, #0
	for (i = 0; *(s+i) != '\0'; i++);
    1000:	0800000a 	stmdaeq	r0, {r1, r3}
	while (n--)
    1004:	8600000a 	strhi	r0, [r0], -sl
    1008:	1c000008 	stcne	0, cr0, [r0], {8}
		*dest++ = *src++;
    100c:	6b010069 	blvs	411b8 <__ccfg+0x21210>
    1010:	008d0b04 	addeq	r0, sp, r4, lsl #22
    1014:	25000000 	strcs	r0, [r0, #-0]
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	00001443 	andeq	r1, r0, r3, asr #8
		syserror (EREQPAR, "addv");
    101c:	00000902 	andeq	r0, r0, r2, lsl #18
		syserror (ERESOURCE, "addv");
    1020:	00000240 	andeq	r0, r0, r0, asr #4
	if (ioreq [loc] != NULL)
    1024:	02040801 	andeq	r0, r4, #65536	; 0x10000
    1028:	000f5420 	andeq	r5, pc, r0, lsr #8
		syserror (ERESOURCE, "addv");
    102c:	00090400 	andeq	r0, r9, r0, lsl #8
	ioreq [loc] = rf;
    1030:	00026000 	andeq	r6, r2, r0
}
    1034:	040b0100 	streq	r0, [fp], #-256	; 0xffffff00
    1038:	00091a02 	andeq	r1, r9, r2, lsl #20
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	02602300 	rsbeq	r2, r0, #0, 6
    1040:	612f0000 			; <UNDEFINED> instruction: 0x612f0000
    1044:	3000000f 	andcc	r0, r0, pc
    1048:	00000f6d 	andeq	r0, r0, sp, ror #30
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	00000260 	andeq	r0, r0, r0, ror #4
    1050:	000f6e31 	andeq	r6, pc, r1, lsr lr	; <UNPREDICTABLE>
    1054:	00011600 	andeq	r1, r1, r0, lsl #12
		syserror (ENODEVICE, "io");
    1058:	13c92200 	bicne	r2, r9, #0, 4
    105c:	090e0000 	stmdbeq	lr, {}	; <UNPREDICTABLE>
	if (len == 0)
    1060:	02800000 	addeq	r0, r0, #0
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	fa010000 	blx	4106c <__ccfg+0x210c4>
    1068:	0008e704 	andeq	lr, r8, r4, lsl #14
	if (ret >= 0)
    106c:	13e52100 	mvnne	r2, #0, 2
	if (ret == -1) {
    1070:	d8210000 	stmdale	r1!, {}	; <UNPREDICTABLE>
    1074:	00000013 	andeq	r0, r0, r3, lsl r0
		if (retry == WNONE)
    1078:	0013f322 	andseq	pc, r3, r2, lsr #6
		iowait (dev, operation, retry);
    107c:	00091200 	andeq	r1, r9, r0, lsl #4
    1080:	00029800 	andeq	r9, r2, r0, lsl #16
    1084:	04fe0100 	ldrbteq	r0, [lr], #256	; 0x100
			release;
    1088:	00000901 	andeq	r0, r0, r1, lsl #18
	if (ret == -2) {
    108c:	00140221 	andseq	r0, r4, r1, lsr #4
		if (retry != WNONE) {
    1090:	10320000 	eorsne	r0, r2, r0
    1094:	16000014 			; <UNDEFINED> instruction: 0x16000014
			iowait (dev, operation, retry);
    1098:	b0000009 	andlt	r0, r0, r9
    109c:	01000002 	tsteq	r0, r2
			(ioreq [dev]) (NONE, buf, len);
    10a0:	1f2104fc 	svcne	0x002104fc
    10a4:	00000014 	andeq	r0, r0, r4, lsl r0
    10a8:	20000000 	andcs	r0, r0, r0
		(ioreq [dev]) (NONE, buf, len);
    10ac:	00001410 	andeq	r1, r0, r0, lsl r4
    10b0:	00000956 	andeq	r0, r0, r6, asr r9
    10b4:	000002c8 	andeq	r0, r0, r8, asr #5
}
    10b8:	02040e01 	andeq	r0, r4, #1, 28
	if (retry != WNONE) {
    10bc:	00000935 	andeq	r0, r0, r5, lsr r9
		delay (-ret - 2, retry);
    10c0:	00141f21 	andseq	r1, r4, r1, lsr #30
    10c4:	10200000 	eorne	r0, r0, r0
    10c8:	58000014 	stmdapl	r0, {r2, r4}
    10cc:	e8000009 	stmda	r0, {r0, r3}
		release;
    10d0:	01000002 	tsteq	r0, r2
    10d4:	5002040e 	andpl	r0, r2, lr, lsl #8
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	21000009 	tstcs	r0, r9
    10dc:	0000141f 	andeq	r1, r0, pc, lsl r4
    10e0:	13f32000 	mvnsne	r2, #0
    10e4:	09720000 	ldmdbeq	r2!, {}^	; <UNPREDICTABLE>
    10e8:	03000000 	movweq	r0, #0
		syserror (ERESOURCE, "mal1");
    10ec:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    10f0:	096b0204 	stmdbeq	fp!, {r2, r9}^
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f4:	02210000 	eoreq	r0, r1, #0
    10f8:	00000014 	andeq	r0, r0, r4, lsl r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fc:	0013f326 	andseq	pc, r3, r6, lsr #6
	m_size (mpools [0]) = mlen - m_hdrlen;
    1100:	00097800 	andeq	r7, r9, r0, lsl #16
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1104:	00097a00 	andeq	r7, r9, r0, lsl #20
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1108:	040e0100 	streq	r0, [lr], #-256	; 0xffffff00
    110c:	00098602 	andeq	r8, r9, r2, lsl #12
}
    1110:	14022100 	strne	r2, [r2], #-256	; 0xffffff00
    1114:	20000000 	andcs	r0, r0, r0
    1118:	00001234 	andeq	r1, r0, r4, lsr r2
    111c:	0000098a 	andeq	r0, r0, sl, lsl #19
    1120:	00000318 	andeq	r0, r0, r8, lsl r3
    1124:	02041b01 	andeq	r1, r4, #1024	; 0x400
void __pi_free (aword *ch) {
    1128:	000009a1 	andeq	r0, r0, r1, lsr #19
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    112c:	00124321 	andseq	r4, r2, r1, lsr #6
    1130:	cb260000 	blgt	981138 <__ccfg+0x961190>
		syserror (EMALLOC, "malg");
    1134:	b400000c 	strlt	r0, [r0], #-12
    1138:	de000009 	cdple	0, 0, cr0, cr0, cr9, {0}
	mcfree [MA_NP] += m_size (ch);
    113c:	01000009 	tsteq	r0, r9
		m_size (ch) ^= MALLOC_UMASK;
    1140:	c802043e 	stmdagt	r2, {r1, r2, r3, r4, r5, sl}
    1144:	25000009 	strcs	r0, [r0, #-9]
	mcfree [MA_NP] += m_size (ch);
    1148:	00001443 	andeq	r1, r0, r3, asr #8
	QFREE;
    114c:	000009d2 	ldrdeq	r0, [r0], -r2
	if (mevent [MA_NP] . nwait) {
    1150:	00000330 	andeq	r0, r0, r0, lsr r3
    1154:	02030101 	andeq	r0, r3, #1073741824	; 0x40000000
		trigger ((aword)(&(mevent [MA_NP])));
    1158:	12ab2600 	adcne	r2, fp, #0, 12
		mevent [MA_NP] . nwait --;
    115c:	09ee0000 	stmibeq	lr!, {}^	; <UNPREDICTABLE>
}
    1160:	0a020000 	beq	81168 <__ccfg+0x611c0>
    1164:	51010000 	mrspl	r0, (UNDEF: 1)
    1168:	09ef0304 	stmibeq	pc!, {r2, r8, r9}^	; <UNPREDICTABLE>
    116c:	b61d0000 	ldrlt	r0, [sp], -r0
void kill (aword pid) {
    1170:	ee000012 	mcr	0, 0, r0, cr0, cr2, {0}
		pid = (aword) __pi_curr;
    1174:	f2000009 	vhadd.s8	d0, d0, d9
	j = NULL;
    1178:	0b000009 	bleq	11a4 <kill+0x34>
	for_all_tasks (i) {
    117c:	00050114 	andeq	r0, r5, r4, lsl r1
	syserror (EREQPAR, "kpi");
    1180:	000b9533 	andeq	r9, fp, r3, lsr r5
    1184:	000a0800 	andeq	r0, sl, r0, lsl #16
		if ((aword)i == pid) {
    1188:	00034800 	andeq	r4, r3, r0, lsl #16
    118c:	04720100 	ldrbteq	r0, [r2], #-256	; 0xffffff00
				__PCB = i->Next;
    1190:	13113302 	tstne	r1, #134217728	; 0x8000000
			killev (i);
    1194:	0a080000 	beq	20119c <__ccfg+0x1e11f4>
			ufree (i);
    1198:	03480000 	movteq	r0, #32768	; 0x8000
			if (i == __pi_curr)
    119c:	bd010000 	stclt	0, cr0, [r1, #-0]
    11a0:	2d210203 	sfmcs	f0, 4, [r1, #-12]!
				release;
    11a4:	21000013 	tstcs	r0, r3, lsl r0
				j->Next = i->Next;
    11a8:	00001320 	andeq	r1, r0, r0, lsr #6
    11ac:	2c000000 	stccs	0, cr0, [r0], {-0}
    11b0:	00083001 	andeq	r3, r8, r1
}
    11b4:	03ed0100 	mvneq	r0, #0, 2
    11b8:	07f80106 	ldrbeq	r0, [r8, r6, lsl #2]!
    11bc:	08340000 	ldmdaeq	r4!, {}	; <UNPREDICTABLE>
	if (size < 8)
    11c0:	9c010000 	stcls	0, cr0, [r1], {-0}
		_size = 2;
    11c4:	00000aa7 	andeq	r0, r0, r7, lsr #21
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c8:	6c617634 	stclvs	6, cr7, [r1], #-208	; 0xffffff30
		_size = (((aword)size) + 3) >> 2;
    11cc:	03ed0100 	mvneq	r0, #0, 2
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d0:	00008d1c 	andeq	r8, r0, ip, lsl sp
		_size = (((aword)size) + 3) >> 2;
    11d4:	29500100 	ldmdbcs	r0, {r8}^
		if (mevent [MA_NP] . nfail != 255)
    11d8:	ef010069 	svc	0x00010069
    11dc:	008d0603 	addeq	r0, sp, r3, lsl #12
			mevent [MA_NP] . nfail ++;
    11e0:	01340000 	teqeq	r4, r0
		mnfree [MA_NP] = 0;
    11e4:	62290000 	eorvs	r0, r9, #0
    11e8:	f001006e 			; <UNDEFINED> instruction: 0xf001006e
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	00df0803 	sbcseq	r0, pc, r3, lsl #16
    11f0:	01520000 	cmpeq	r2, r0
			syserror (EMALLOC, "malc");
    11f4:	ed250000 	stc	0, cr0, [r5, #-0]
    11f8:	f8000011 			; <UNDEFINED> instruction: 0xf8000011
		if (m_size (chunk) >= _size)
    11fc:	00000007 	andeq	r0, r0, r7
    1200:	01000002 	tsteq	r0, r2
		chunk = m_nextp (chunk)) {
    1204:	200203f2 	strdcs	r0, [r2], -r2
		m_setnextp (cc, m_nextp (chunk));
    1208:	000013ac 	andeq	r1, r0, ip, lsr #7
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120c:	000007fe 	strdeq	r0, [r0], -lr
    1210:	00000218 	andeq	r0, r0, r8, lsl r2
			m_size (chunk) = _size;
    1214:	0303f501 	movweq	pc, #13569	; 0x3501	; <UNPREDICTABLE>
			cc = chunk + _size + m_hdrlen;
    1218:	00000a95 	muleq	r0, r5, sl
    121c:	0013bb35 	andseq	fp, r3, r5, lsr fp
			m_size (cc) = waste - m_hdrlen;
    1220:	00015200 	andeq	r5, r1, r0, lsl #4
			QFREE;
    1224:	f71d0000 			; <UNDEFINED> instruction: 0xf71d0000
		mevent [MA_NP] . nfail = 0;
    1228:	22000011 	andcs	r0, r0, #17
		mcfree [MA_NP] -= m_size (chunk);
    122c:	24000008 	strcs	r0, [r0], #-8
    1230:	01000008 	tsteq	r0, r8
    1234:	000203f9 	strdeq	r0, [r2], -r9
    1238:	07d4012c 	ldrbeq	r0, [r4, ip, lsr #2]
		m_size (chunk) |= MALLOC_UMASK;
    123c:	da010000 	ble	41244 <__ccfg+0x2129c>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1240:	b4010603 	strlt	r0, [r1], #-1539	; 0xfffff9fd
		m_size (chunk) |= MALLOC_UMASK;
    1244:	f8000007 			; <UNDEFINED> instruction: 0xf8000007
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	01000007 	tsteq	r0, r7
}
    124c:	000b2c9c 	muleq	fp, ip, ip
    1250:	61763400 	cmnvs	r6, r0, lsl #8
    1254:	da01006c 	ble	4140c <__ccfg+0x21464>
    1258:	008d1c03 	addeq	r1, sp, r3, lsl #24
    125c:	50010000 	andpl	r0, r1, r0
    1260:	0100691c 	tsteq	r0, ip, lsl r9
    1264:	8d0603dc 	stchi	3, cr0, [r6, #-880]	; 0xfffffc90
aword __pi_fork (fsmcode func, aword data) {
    1268:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	01006e62 	tsteq	r0, r2, ror #28
    1270:	df0803dd 	svcle	0x000803dd
    1274:	65000000 	strvs	r0, [r0, #-0]
		if ((j = __PCB) == NULL)
    1278:	25000001 	strcs	r0, [r0, #-1]
	i->Next = NULL;
    127c:	000011ed 	andeq	r1, r0, sp, ror #3
	i->data = data;
    1280:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
		if ((j = __PCB) == NULL)
    1284:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
}
    1288:	0203df01 	andeq	sp, r3, #1, 30
			for (; j->Next != NULL; j = j->Next);
    128c:	0013ac20 	andseq	sl, r3, r0, lsr #24
    1290:	0007b800 	andeq	fp, r7, r0, lsl #16
	return (aword) i;
    1294:	0001d000 	andeq	sp, r1, r0
    1298:	03e20100 	mvneq	r0, #0, 2
	if (mevent [MA_NP] . nwait != 255)
    129c:	000b1a03 	andeq	r1, fp, r3, lsl #20
    12a0:	13bb3500 			; <UNDEFINED> instruction: 0x13bb3500
    12a4:	01780000 	cmneq	r8, r0
		mevent [MA_NP] . nwait ++;
    12a8:	1d000000 	stcne	0, cr0, [r0, #-0]
	wait ((aword)(&(mevent [MA_NP])), state);
    12ac:	000011f7 	strdeq	r1, [r0], -r7
    12b0:	000007e6 	andeq	r0, r0, r6, ror #15
void diag (const char *mess, ...) {
    12b4:	000007e8 	andeq	r0, r0, r8, ror #15
    12b8:	0203e601 	andeq	lr, r3, #1048576	; 0x100000
    12bc:	41011e00 	tstmi	r1, r0, lsl #28
	diag_disable_int (a, is);
    12c0:	01000008 	tsteq	r0, r8
    12c4:	340603c6 	strcc	r0, [r6], #-966	; 0xfffffc3a
    12c8:	d8000008 	stmdale	r0, {r3}
				d = (bc == 16) ? 10000 : 1000000000;
    12cc:	01000008 	tsteq	r0, r8
	diag_disable_int (a, is);
    12d0:	000b959c 	muleq	fp, ip, r5
	while (*mess != '\0') {
    12d4:	08462e00 	stmdaeq	r6, {r9, sl, fp, sp}^
	dgout ('\r');
    12d8:	08740000 	ldmdaeq	r4!, {}^	; <UNPREDICTABLE>
	dgout ('\n');
    12dc:	0b6e0000 	bleq	1b812e4 <__ccfg+0x1b6133c>
    12e0:	6a360000 	bvs	d812e8 <__ccfg+0xd61340>
    12e4:	02030700 	andeq	r0, r3, #0, 14
	diag_wait (a);
    12e8:	0000008d 	andeq	r0, r0, sp, lsl #1
	diag_enable_int (a, is);
    12ec:	0000018b 	andeq	r0, r0, fp, lsl #3
    12f0:	07006936 	smladxeq	r0, r6, r9, r6
}
    12f4:	03f40203 	mvnseq	r0, #805306368	; 0x30000000
    12f8:	019e0000 	orrseq	r0, lr, r0
    12fc:	37000000 	strcc	r0, [r0, -r0]
		if (*mess == '%') {
    1300:	00000886 	andeq	r0, r0, r6, lsl #17
    1304:	000008b4 			; <UNDEFINED> instruction: 0x000008b4
			if (*mess == 'l') {
    1308:	08006a36 	stmdaeq	r0, {r1, r2, r4, r5, r9, fp, sp, lr}
    130c:	008d0202 	addeq	r0, sp, r2, lsl #4
				mess++;
    1310:	01b10000 			; <UNDEFINED> instruction: 0x01b10000
				val = va_arg (ap, lword);
    1314:	69360000 	ldmdbvs	r6!, {}	; <UNPREDICTABLE>
				bc = 32;
    1318:	02020800 	andeq	r0, r2, #0, 16
				bc = 16;
    131c:	000003f4 	strdeq	r0, [r0], -r4
			switch (*mess) {
    1320:	000001c4 	andeq	r0, r0, r4, asr #3
    1324:	55380000 	ldrpl	r0, [r8, #-0]!
    1328:	01000006 	tsteq	r0, r6
				dgout ('%');
    132c:	031403bb 	tsteq	r4, #-335544318	; 0xec000002
    1330:	09b2011e 	ldmibeq	r2!, {r1, r2, r3, r4, r8}
				dgout (*mess);
    1334:	82010000 	andhi	r0, r1, #0
    1338:	06f40603 	ldrbteq	r0, [r4], r3, lsl #12
			switch (*mess) {
    133c:	07b40000 	ldreq	r0, [r4, r0]!
					v = __pi_hex_enc_table [
    1340:	9c010000 	stcls	0, cr0, [r1], {-0}
					i += 4;
    1344:	00000c28 	andeq	r0, r0, r8, lsr #24
					(val >> (bc - i)) & 0xf];
    1348:	0007202e 	andeq	r2, r7, lr, lsr #32
    134c:	00074e00 	andeq	r4, r7, r0, lsl #28
					dgout (v);
    1350:	000be300 	andeq	lr, fp, r0, lsl #6
    1354:	006a2900 	rsbeq	r2, sl, r0, lsl #18
				while (i < bc) {
    1358:	03038901 	movweq	r8, #14593	; 0x3901
			mess++;
    135c:	0000008d 	andeq	r0, r0, sp, lsl #1
					d /= 10;
    1360:	000001d7 	ldrdeq	r0, [r0], -r7
				if ((val >> (bc - 1)) & 1) {
    1364:	01006929 	tsteq	r0, r9, lsr #18
    1368:	f4030389 	vst2.32	{d0-d3}, [r3], r9
					dgout ('-');
    136c:	ea000003 	b	1380 <diag+0xcc>
    1370:	00000001 	andeq	r0, r0, r1
						val |= 0xffff0000;
    1374:	0001a01b 	andeq	sl, r1, fp, lsl r0
    1378:	000c0b00 	andeq	r0, ip, r0, lsl #22
    137c:	006a2900 	rsbeq	r2, sl, r0, lsl #18
				d = (bc == 16) ? 10000 : 1000000000;
    1380:	03038f01 	movweq	r8, #16129	; 0x3f01
    1384:	0000008d 	andeq	r0, r0, sp, lsl #1
    1388:	000001fd 	strdeq	r0, [r0], -sp
					v = (word) (val / d);
    138c:	01006929 	tsteq	r0, r9, lsr #18
					if (v || d == 1) break;
    1390:	f403038f 	vst2.32	{d0-d3}, [r3]
    1394:	10000003 	andne	r0, r0, r3
					d /= 10;
    1398:	00000002 	andeq	r0, r0, r2
				d = (bc == 16) ? 10000 : 1000000000;
    139c:	0012e733 	andseq	lr, r2, r3, lsr r7
					dgout (v + '0');
    13a0:	0006f400 	andeq	pc, r6, r0, lsl #8
    13a4:	00018000 	andeq	r8, r1, r0
    13a8:	03840100 	orreq	r0, r4, #0, 2
					d /= 10;
    13ac:	13032102 	movwne	r2, #12546	; 0x3102
					val = val - (v * d);
    13b0:	f6210000 			; <UNDEFINED> instruction: 0xf6210000
					if (d == 0) break;
    13b4:	00000012 	andeq	r0, r0, r2, lsl r0
					v = (word) (val / d);
    13b8:	07593900 	ldrbeq	r3, [r9, -r0, lsl #18]
    13bc:	7d010000 	stcvc	0, cr0, [r1, #-0]
				if (bc == 16)
    13c0:	98010d03 	stmdals	r1, {r0, r1, r8, sl, fp}
				d = (bc == 16) ? 10000 : 1000000000;
    13c4:	a4000002 	strge	r0, [r0], #-2
					val &= 0xffff;
    13c8:	01000002 	tsteq	r0, r2
					dgout (*s);
    13cc:	000c529c 	muleq	ip, ip, r2
					s++;
    13d0:	09102d00 	ldmdbeq	r0, {r8, sl, fp, sp}
				while (*s != '\0') {
    13d4:	7d010000 	stcvc	0, cr0, [r1, #-0]
    13d8:	008d1f03 	addeq	r1, sp, r3, lsl #30
			dgout (*mess++);
    13dc:	02230000 	eoreq	r0, r3, #0
    13e0:	3a000000 	bcc	13e8 <diag+0x134>
    13e4:	000008dd 	ldrdeq	r0, [r0], -sp
    13e8:	0c031001 	stceq	0, cr1, [r3], {1}
    13ec:	00008d01 	andeq	r8, r0, r1, lsl #26
}
    13f0:	0005e400 	andeq	lr, r5, r0, lsl #8
    while(1)
    13f4:	0006f400 	andeq	pc, r6, r0, lsl #8
{
    13f8:	cb9c0100 	blgt	fe701800 <_estack+0xde6fc800>
    SetupTrimDevice();
    13fc:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    pui32Src = &_etext;
    1400:	000006da 	ldrdeq	r0, [r0], -sl
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1404:	1e031001 	cdpne	0, 0, cr1, cr3, cr1, {0}
    __asm("    ldr     r0, =_bss\n"
    1408:	0000008d 	andeq	r0, r0, sp, lsl #1
    140c:	00000241 	andeq	r0, r0, r1, asr #4
    1410:	6675623b 			; <UNDEFINED> instruction: 0x6675623b
    1414:	03100100 	tsteq	r0, #0, 2
    1418:	0001c92f 	andeq	ip, r1, pc, lsr #18
   main();
    141c:	00025400 	andeq	r5, r2, r0, lsl #8
    FaultISR();
    1420:	656c3b00 	strbvs	r3, [ip, #-2816]!	; 0xfffff500
        *pui32Dest++ = *pui32Src++;
    1424:	1001006e 	andne	r0, r1, lr, rrx
    1428:	008d3803 	addeq	r3, sp, r3, lsl #16
    142c:	02f60000 	rscseq	r0, r6, #0
    1430:	012b0000 			; <UNDEFINED> instruction: 0x012b0000
    1434:	01000006 	tsteq	r0, r6
    1438:	2b010318 	blcs	420a0 <__ccfg+0x220f8>
    143c:	00000702 	andeq	r0, r0, r2, lsl #14
    1440:	01033d01 	tsteq	r3, r1, lsl #26
static byte get_byte () {
    1444:	000d4427 	andeq	r4, sp, r7, lsr #8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1448:	0006c600 	andeq	ip, r6, r0, lsl #12
    144c:	0006c800 	andeq	ip, r6, r0, lsl #16
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1450:	03650100 	cmneq	r5, #0, 2
    1454:	0d582115 	ldfeqe	f2, [r8, #-84]	; 0xffffffac
		if (ee_inp)
    1458:	00000000 	andeq	r0, r0, r0
			b |= 1;
    145c:	0007a338 	andeq	sl, r7, r8, lsr r3
    1460:	02fc0100 	rscseq	r0, ip, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1464:	a43c010d 	ldrtge	r0, [ip], #-269	; 0xfffffef3
	for (b = 0, i = 0; i < 8; i++) {
    1468:	01000007 	tsteq	r0, r7
}
    146c:	ac0d02f0 	sfmge	f0, 4, [sp], {240}	; 0xf0
    1470:	e4000005 	str	r0, [r0], #-5
    1474:	01000005 	tsteq	r0, r5
static void put_byte (byte b) {
    1478:	000d449c 	muleq	sp, ip, r4
    147c:	133b2000 	teqne	fp, #0
    1480:	05ac0000 	streq	r0, [ip, #0]!
    1484:	01680000 	cmneq	r8, r0
		if (b & 0x80)
    1488:	f5010000 			; <UNDEFINED> instruction: 0xf5010000
    148c:	0d070202 	sfmeq	f0, 4, [r7, #-8]
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1490:	4a210000 	bmi	841498 <__ccfg+0x8214f0>
	for (i = 0; i < 8; i++) {
    1494:	00000013 	andeq	r0, r0, r3, lsl r0
		b <<= 1;
    1498:	00137526 	andseq	r7, r3, r6, lsr #10
	for (i = 0; i < 8; i++) {
    149c:	0005b800 	andeq	fp, r5, r0, lsl #16
}
    14a0:	0005be00 	andeq	fp, r5, r0, lsl #28
    14a4:	02f60100 	rscseq	r0, r6, #0, 2
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14a8:	000d2c02 	andeq	r2, sp, r2, lsl #24
    14ac:	139e2100 	orrsne	r2, lr, #0, 2
	put_byte (cmd);
    14b0:	91210000 			; <UNDEFINED> instruction: 0x91210000
    14b4:	21000013 	tstcs	r0, r3, lsl r0
}
    14b8:	00001384 	andeq	r1, r0, r4, lsl #7
    14bc:	12ca2700 	sbcne	r2, sl, #0, 14
static void wwait (word st, word del) {
    14c0:	05be0000 	ldreq	r0, [lr, #0]!
    14c4:	05c80000 	strbeq	r0, [r8]
    14c8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
	while (dopen && (rdsr () & 1)) {
    14cc:	d9210202 	stmdble	r1!, {r1, r9}
    14d0:	00000012 	andeq	r0, r0, r2, lsl r0
    14d4:	cf013d00 	svcgt	0x00013d00
    14d8:	01000005 	tsteq	r0, r5
	put_byte (CMD_RDSR);
    14dc:	010602eb 	smlatteq	r6, fp, r2, r0
	r = get_byte ();
    14e0:	000000a7 	andeq	r0, r0, r7, lsr #1
    14e4:	000d6501 	andeq	r6, sp, r1, lsl #10
	while (dopen && (rdsr () & 1)) {
    14e8:	61753e00 	cmnvs	r5, r0, lsl #28
}
    14ec:	02eb0100 	rsceq	r0, fp, #0, 2
		if (st == WNONE)
    14f0:	000d6527 	andeq	r6, sp, r7, lsr #10
    14f4:	04070000 	streq	r0, [r7], #-0
			mdelay (1);
    14f8:	00000226 	andeq	r0, r0, r6, lsr #4
    14fc:	0688011a 	pkhbteq	r0, r8, sl, lsl #2
			delay (del, st);
    1500:	d4010000 	strle	r0, [r1], #-0
    1504:	9b010902 	blls	43914 <__ccfg+0x2396c>
			release;
    1508:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    150c:	ac000005 	stcge	0, cr0, [r0], {5}
    1510:	01000005 	tsteq	r0, r5
static void ready () {
    1514:	000dc19c 	muleq	sp, ip, r1
	if (dopen) {
    1518:	05dc2d00 	ldrbeq	r2, [ip, #3328]	; 0xd00
		wwait (WNONE, 1);
    151c:	d4010000 	strle	r0, [r1], #-0
    1520:	00a72102 	adceq	r2, r7, r2, lsl #2
    1524:	03820000 	orreq	r0, r2, #0
	dstat = 0;
    1528:	753b0000 	ldrvc	r0, [fp, #-0]!
}
    152c:	d4010061 	strle	r0, [r1], #-97	; 0xffffff9f
    1530:	0dc12f02 	stcleq	15, cr2, [r1, #8]
    1534:	03950000 	orrseq	r0, r5, #0
	udelay (1);
    1538:	58330000 	ldmdapl	r3!, {}	; <UNPREDICTABLE>
    153c:	78000013 	stmdavc	r0, {r0, r1, r4}
	udelay (1);
    1540:	50000005 	andpl	r0, r0, r5
		dopen = DOPEN_TEMP;
    1544:	01000001 	tsteq	r0, r1
    1548:	210202e6 	smlattcs	r2, r6, r2, r0
    154c:	00001367 	andeq	r1, r0, r7, ror #6
    1550:	04070000 	streq	r0, [r7], #-0
static void cclose () {
    1554:	0000021a 	andeq	r0, r0, sl, lsl r2
	if (dopen == DOPEN_TEMP) {
    1558:	09d8011a 	ldmibeq	r8, {r1, r3, r4, r8}^
    155c:	8a010000 	bhi	41564 <__ccfg+0x215bc>
		wwait (WNONE, 1);
    1560:	a7010601 	strge	r0, [r1, -r1, lsl #12]
    1564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
	cmd_0 (CMD_DP);
    1568:	58000005 	stmdapl	r0, {r0, r2}
    156c:	01000005 	tsteq	r0, r5
		dopen = 0;
    1570:	000e0f9c 	muleq	lr, ip, pc	; <UNPREDICTABLE>
}
    1574:	07b02d00 	ldreq	r2, [r0, r0, lsl #26]!
word ee_open () {
    1578:	8a010000 	bhi	41580 <__ccfg+0x215d8>
	ready ();
    157c:	009b2601 	addseq	r2, fp, r1, lsl #12
	dopen = DOPEN_PERM;
    1580:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
    1584:	453f0000 	ldrmi	r0, [pc, #-0]!	; 158c <ee_close>
}
    1588:	a4010058 	strge	r0, [r1], #-88	; 0xffffffa8
	if (dopen) {
    158c:	461d0101 	ldrmi	r0, [sp], -r1, lsl #2
    1590:	1c00000f 	stcne	0, cr0, [r0], {15}
		dopen = DOPEN_TEMP;
    1594:	26000005 	strcs	r0, [r0], -r5
		cclose ();
    1598:	01000005 	tsteq	r0, r5
}
    159c:	001a019c 	mulseq	sl, ip, r1
int ser_in (word st, char *buf, int len) {
    15a0:	0766011e 			; <UNDEFINED> instruction: 0x0766011e
    15a4:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
	if (len == 0)
    15a8:	03f40601 	mvnseq	r0, #1048576	; 0x100000
	if (__inpline == NULL) {
    15ac:	05080000 	streq	r0, [r8, #-0]
		if ((prcs = running (__inserial)) == 0) {
    15b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15b4:	00000ec1 	andeq	r0, r0, r1, asr #29
			prcs = runthread (__inserial);
    15b8:	00087b40 	andeq	r7, r8, r0, asr #22
    15bc:	013a0100 	teqeq	sl, r0, lsl #2
			if (prcs == 0) {
    15c0:	0000df08 	andeq	sp, r0, r8, lsl #30
				npwait (st);
    15c4:	0003c600 	andeq	ip, r3, r0, lsl #12
		release;
    15c8:	55454100 	strbpl	r4, [r5, #-256]	; 0xffffff00
		join (prcs, st);
    15cc:	68010054 	stmdavs	r1, {r2, r4, r6}
    15d0:	04420101 	strbeq	r0, [r2], #-257	; 0xfffffeff
	if (*__inpline == NULL) // bin cmd
    15d4:	38230000 	stmdacc	r3!, {}	; <UNPREDICTABLE>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15d8:	40000001 	andmi	r0, r0, r1
	if (prcs >= len)
    15dc:	000006e4 	andeq	r0, r0, r4, ror #13
		prcs = len-1;
    15e0:	0b014701 	bleq	531ec <__ccfg+0x33244>
	memcpy (buf, __inpline, prcs);
    15e4:	0000009b 	muleq	r0, fp, r0
    15e8:	00000411 	andeq	r0, r0, r1, lsl r4
    15ec:	00141042 	andseq	r1, r4, r2, asr #32
	ufree (__inpline);
    15f0:	00046000 	andeq	r6, r4, r0
	__inpline = NULL;
    15f4:	00046800 	andeq	r6, r4, r0, lsl #16
	if (*buf) // if it's NULL, it's a bin cmd
    15f8:	060d0500 	streq	r0, [sp], -r0, lsl #10
		buf [prcs] = '\0';
    15fc:	00000e75 	andeq	r0, r0, r5, ror lr
}
    1600:	00141f21 	andseq	r1, r4, r1, lsr #30
		prcs = strlen (__inpline);
    1604:	10420000 	subne	r0, r2, r0
    1608:	6c000014 	stcvs	0, cr0, [r0], {20}
		return 0;
    160c:	74000004 	strvc	r0, [r0], #-4
    1610:	05000004 	streq	r0, [r0, #-4]
    1614:	0e8f060f 	cdpeq	6, 8, cr0, cr15, cr15, {0}
int ser_outf (word st, const char *m, ...) {
    1618:	1f210000 	svcne	0x00210000
    161c:	00000014 	andeq	r0, r0, r4, lsl r0
	if ((prcs = running (__outserial)) != 0) {
    1620:	0013f342 	andseq	pc, r3, r2, asr #6
    1624:	0004ba00 	andeq	fp, r4, r0, lsl #20
		join (prcs, st);
    1628:	0004c200 	andeq	ip, r4, r0, lsl #4
    162c:	06170500 	ldreq	r0, [r7], -r0, lsl #10
		release;
    1630:	00000ea9 	andeq	r0, r0, r9, lsr #29
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1634:	00140221 	andseq	r0, r4, r1, lsr #4
    1638:	f3430000 	vhadd.u8	d16, d3, d0
    163c:	c6000013 			; <UNDEFINED> instruction: 0xc6000013
		umwait (st);
    1640:	ce000004 	cdpgt	0, 0, cr0, cr0, cr4, {0}
    1644:	05000004 	streq	r0, [r0, #-4]
	if (runstrand (__outserial, buf) == 0) {
    1648:	02210619 	eoreq	r0, r1, #26214400	; 0x1900000
    164c:	00000014 	andeq	r0, r0, r4, lsl r0
    1650:	011e0000 	tsteq	lr, r0
		ufree (buf);
    1654:	00000818 	andeq	r0, r0, r8, lsl r8
		npwait (st);
    1658:	06012b01 	streq	r2, [r1], -r1, lsl #22
}
    165c:	000003cc 	andeq	r0, r0, ip, asr #7
    1660:	000003f4 	strdeq	r0, [r0], -r4
    1664:	0ef19c01 	cdpeq	12, 15, cr9, cr1, cr1, {0}
    1668:	25330000 	ldrcs	r0, [r3, #-0]!
int ser_inf (word st, const char *fmt, ...) {
    166c:	d400000f 	strle	r0, [r0], #-15
    1670:	20000003 	andcs	r0, r0, r3
	if (fmt == NULL)
    1674:	01000001 	tsteq	r0, r1
	if (__inpline == NULL) {
    1678:	212c0132 			; <UNDEFINED> instruction: 0x212c0132
		if ((prcs = running (__inserial)) == 0) {
    167c:	00000f38 	andeq	r0, r0, r8, lsr pc
    1680:	011e0000 	tsteq	lr, r0
			prcs = runthread (__inserial);
    1684:	0000077d 	andeq	r0, r0, sp, ror r7
    1688:	06011e01 	streq	r1, [r1], -r1, lsl #28
			if (prcs == 0) {
    168c:	0000038c 	andeq	r0, r0, ip, lsl #7
				npwait (st);
    1690:	000003cc 	andeq	r0, r0, ip, asr #7
		release;
    1694:	0f259c01 	svceq	0x00259c01
		join (prcs, st);
    1698:	25330000 	ldrcs	r0, [r3, #-0]!
    169c:	9e00000f 	cdpls	0, 0, cr0, cr0, cr15, {0}
	va_start (ap, fmt);
    16a0:	00000003 	andeq	r0, r0, r3
	prcs = vscan (__inpline, fmt, ap);
    16a4:	01000001 	tsteq	r0, r1
    16a8:	352c0125 	strcc	r0, [ip, #-293]!	; 0xfffffedb
	ufree (__inpline);
    16ac:	00000f38 	andeq	r0, r0, r8, lsr pc
	__inpline = NULL;
    16b0:	00000450 	andeq	r0, r0, r0, asr r4
}
    16b4:	74440000 	strbvc	r0, [r4], #-0
    16b8:	01000008 	tsteq	r0, r8
    16bc:	01150117 	tsteq	r5, r7, lsl r1
		return 0;
    16c0:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16c4:	000f4603 	andeq	r4, pc, r3, lsl #12
    16c8:	65643e00 	strbvs	r3, [r4, #-3584]!	; 0xfffff200
strand (__outserial, const char*)
    16cc:	1701006c 	strne	r0, [r1, -ip, rrx]
    16d0:	00a72201 	adceq	r2, r7, r1, lsl #4
    16d4:	45000000 	strmi	r0, [r0, #-0]
    16d8:	000004f1 	strdeq	r0, [r0], -r1
endstrand
    16dc:	14010e01 	strne	r0, [r1], #-3585	; 0xfffff1ff
    16e0:	000000a7 	andeq	r0, r0, r7, lsr #1
	ptr = data;
    16e4:	09cc4603 	stmibeq	ip, {r0, r1, r9, sl, lr}^
    16e8:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
	if (*ptr)
    16ec:	0f7a0314 	svceq	0x007a0314
		len = strlen (ptr);
    16f0:	70470000 	subvc	r0, r7, r0
    16f4:	01006e69 	tsteq	r0, r9, ror #28
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16f8:	008d06f2 	strdeq	r0, [sp], r2
    16fc:	47480000 	strbmi	r0, [r8, -r0]
    1700:	f4010069 	vst4.16	{d0-d3}, [r1 :128], r9
    1704:	00008d0b 	andeq	r8, r0, fp, lsl #26
    1708:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
	len -= quant;
    170c:	00090201 	andeq	r0, r9, r1, lsl #4
    1710:	06980100 	ldreq	r0, [r8], r0, lsl #2
    1714:	00033801 	andeq	r3, r3, r1, lsl #16
	if (len == 0) {
    1718:	00038c00 	andeq	r8, r3, r0, lsl #24
		ufree (data);
    171c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
		finish;
    1720:	4a000010 	bmi	1768 <__inserial+0x2c>
    1724:	01006365 	tsteq	r0, r5, ror #6
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1728:	00a71a98 	umlaleq	r1, r7, r8, sl
    172c:	04630000 	strbteq	r0, [r3], #-0
    1730:	6d4a0000 	stclvs	0, cr0, [sl, #-0]
    1734:	2a980100 	bcs	fe601b3c <_estack+0xde5fcb3c>
    1738:	00001024 	andeq	r1, r0, r4, lsr #32
strand (__inserial, address)
    173c:	00000476 	andeq	r0, r0, r6, ror r4
    1740:	0011ed28 	andseq	lr, r1, r8, lsr #26
    1744:	00034400 	andeq	r4, r3, r0, lsl #8
    1748:	00034600 	andeq	r4, r3, r0, lsl #12
    174c:	02a80100 	adceq	r0, r8, #0, 2
	if (__inpline != NULL)
    1750:	00141022 	andseq	r1, r4, r2, lsr #32
    1754:	00034600 	andeq	r4, r3, r0, lsl #12
		finish;
    1758:	0000b000 	andeq	fp, r0, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    175c:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
    1760:	00000fd9 	ldrdeq	r0, [r0], -r9
    1764:	00141f21 	andseq	r1, r4, r1, lsr #30
    1768:	10220000 	eorne	r0, r2, r0
		umwait (IM_INIT);
    176c:	4c000014 	stcmi	0, cr0, [r0], {20}
		release;
    1770:	d0000003 	andle	r0, r0, r3
	savedata (data);
    1774:	01000000 	mrseq	r0, (UNDEF: 0)
	len = MAX_LINE_LENGTH;
    1778:	0ff303b8 	svceq	0x00f303b8
	io (IM_READ, __cport, READ, ptr, 1);
    177c:	1f210000 	svcne	0x00210000
    1780:	00000014 	andeq	r0, r0, r4, lsl r0
    1784:	0013f322 	andseq	pc, r3, r2, lsr #6
    1788:	00036400 	andeq	r6, r3, r0, lsl #8
	if (ptr == (char*) data) { // new line
    178c:	0000e800 	andeq	lr, r0, r0, lsl #16
    1790:	03b80100 			; <UNDEFINED> instruction: 0x03b80100
		if (*ptr == '\0') { // bin cmd
    1794:	0000100d 	andeq	r1, r0, sp
			proceed (IM_BIN);
    1798:	00140221 	andseq	r0, r4, r1, lsr #4
    179c:	f3430000 	vhadd.u8	d16, d3, d0
		if (*ptr < 0x20)
    17a0:	6a000013 	bvs	17f4 <__inserial+0xb8>
    17a4:	6c000003 	stcvs	0, cr0, [r0], {3}
			proceed (IM_READ);
    17a8:	01000003 	tsteq	r0, r3
    17ac:	022103b8 	eoreq	r0, r1, #184, 6	; 0xe0000002
	if (*ptr == '\n' || *ptr == '\r') {
    17b0:	00000014 	andeq	r0, r0, r4, lsl r0
    17b4:	d6040700 	strle	r0, [r4], -r0, lsl #14
    17b8:	49000001 	stmdbmi	r0, {r0}
		*ptr = '\0';
    17bc:	0008a301 	andeq	sl, r8, r1, lsl #6
		__inpline = (char*)data;
    17c0:	06720100 	ldrbteq	r0, [r2], -r0, lsl #2
		finish;
    17c4:	00000001 	andeq	r0, r0, r1
	if (len) {
    17c8:	00000000 	andeq	r0, r0, r0
		ptr++;
    17cc:	ca9c0100 	bgt	fe701bd4 <_estack+0xde6fcbd4>
    17d0:	4a000010 	bmi	1818 <__inserial+0xdc>
		len--;
    17d4:	01007473 	tsteq	r0, r3, ror r4
	proceed (IM_READ);
    17d8:	00a71872 	adceq	r1, r7, r2, ror r8
	io (IM_BIN, __cport, READ, ptr, 1);
    17dc:	04940000 	ldreq	r0, [r4], #0
    17e0:	734a0000 	movtvc	r0, #40960	; 0xa000
    17e4:	01006e65 	tsteq	r0, r5, ror #28
    17e8:	02442872 	subeq	r2, r4, #7471104	; 0x720000
    17ec:	04a70000 	strteq	r0, [r7], #0
	len -= 2;
    17f0:	764a0000 	strbvc	r0, [sl], -r0
	if (len > *ptr + 1) // 1 for 0x04
    17f4:	01006c61 	tsteq	r0, r1, ror #24
    17f8:	00fc3572 	rscseq	r3, ip, r2, ror r5
		len = *ptr + 1;
    17fc:	04c50000 	strbeq	r0, [r5], #0
    1800:	0c4b0000 	mareq	acc0, r0, fp
	ptr++;
    1804:	01000005 	tsteq	r0, r5
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1808:	00c90e74 	sbceq	r0, r9, r4, ror lr
    180c:	03050000 	movweq	r0, #20480	; 0x5000
    1810:	00000000 	andeq	r0, r0, r0
    1814:	0009ef4c 	andeq	lr, r9, ip, asr #30
    1818:	01780100 	cmneq	r8, r0, lsl #2
    181c:	00000000 	andeq	r0, r0, r0
	len -= quant;
    1820:	0012204d 	andseq	r2, r2, sp, asr #32
		__inpline = (char*)data;
    1824:	00000000 	andeq	r0, r0, r0
		finish;
    1828:	0004e800 	andeq	lr, r4, r0, lsl #16
	ptr += quant;
    182c:	03810100 	orreq	r0, r1, #0, 2
    1830:	00120142 	andseq	r0, r2, r2, asr #2
	...
	proceed (IM_BINL);
    183c:	127e0100 	rsbsne	r0, lr, #0, 2
endstrand
    1840:	000010b9 	strheq	r1, [r0], -r9
    1844:	0012132f 	andseq	r1, r2, pc, lsr #6
    1848:	2a280000 	bcs	a01850 <__ccfg+0x9e18a8>
    184c:	00000012 	andeq	r0, r0, r2, lsl r0
    1850:	00000000 	andeq	r0, r0, r0
    1854:	01000000 	mrseq	r0, (UNDEF: 0)
		if (res && (d < n))
    1858:	4e000384 	cdpmi	3, 0, cr0, cr0, cr4, {4}
    185c:	00099601 	andeq	r9, r9, r1, lsl #12
    1860:	06620100 	strbteq	r0, [r2], -r0, lsl #2
    1864:	00000001 	andeq	r0, r0, r1
			res [d] = (char) c;
    1868:	00000000 	andeq	r0, r0, r0
		d++;
    186c:	499c0100 	ldmibmi	ip, {r8}
    1870:	0004ab01 	andeq	sl, r4, r1, lsl #22
    1874:	064f0100 	strbeq	r0, [pc], -r0, lsl #2
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1878:	00000001 	andeq	r0, r0, r1
    187c:	00000000 	andeq	r0, r0, r0
    1880:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
				enci (10000);
    1884:	28000011 	stmdacs	r0, {r0, r4}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1888:	00001251 	andeq	r1, r0, r1, asr r2
	...
		c = *fm++;
    1894:	00035f01 	andeq	r5, r3, r1, lsl #30
		if (c == '\\') {
    1898:	04e20149 	strbteq	r0, [r2], #329	; 0x149
			if ((c = *fm++) == '\0') {
    189c:	3b010000 	blcc	418a4 <__ccfg+0x218fc>
    18a0:	00000106 	andeq	r0, r0, r6, lsl #2
				outc ('\\');
    18a4:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    18a8:	9c010000 	stcls	0, cr0, [r1], {-0}
				outc ('\\');
    18ac:	0000112e 	andeq	r1, r0, lr, lsr #2
    18b0:	0100644a 	tsteq	r0, sl, asr #8
			outc (c);
    18b4:	00df1c3b 	sbcseq	r1, pc, fp, lsr ip	; <UNPREDICTABLE>
    18b8:	04e30000 	strbteq	r0, [r3], #0
			if (c == '\0')
    18bc:	49000000 	stmdbmi	r0, {}	; <UNPREDICTABLE>
    18c0:	0005a201 	andeq	sl, r5, r1, lsl #4
			outc (c);
    18c4:	062b0100 	strteq	r0, [fp], -r0, lsl #2
				outc (val);
    18c8:	0002fc01 	andeq	pc, r2, r1, lsl #24
				val = (word) va_arg (ap, aword);
    18cc:	00033800 	andeq	r3, r3, r0, lsl #16
		if (c == '%') {
    18d0:	559c0100 	ldrpl	r0, [ip, #256]	; 0x100
    18d4:	4a000011 	bmi	1920 <__pi_vfparse+0xa8>
			c = *fm++;
    18d8:	2b010064 	blcs	41a70 <__ccfg+0x21ac8>
			switch (c) {
    18dc:	0000df1b 	andeq	sp, r0, fp, lsl pc
    18e0:	00050100 	andeq	r0, r5, r0, lsl #2
    18e4:	01490000 	mrseq	r0, (UNDEF: 73)
    18e8:	000007e5 	andeq	r0, r0, r5, ror #15
    18ec:	01062001 	tsteq	r6, r1
    18f0:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    18f4:	000002fa 	strdeq	r0, [r0], -sl
    18f8:	117c9c01 	cmnne	ip, r1, lsl #24
				outc ('%');
    18fc:	6e4a0000 	cdpvs	0, 4, cr0, cr10, cr0, {0}
    1900:	1c200100 	stfnes	f0, [r0], #-0
				outc (c);
    1904:	000000b8 	strheq	r0, [r0], -r8
    1908:	0000051f 	andeq	r0, r0, pc, lsl r5
    190c:	82014900 	andhi	r4, r1, #0, 18
				if (c == '\0')
    1910:	01000008 	tsteq	r0, r8
				return d;
    1914:	a4010619 	strge	r0, [r1], #-1561	; 0xfffff9e7
}
    1918:	d0000002 	andle	r0, r0, r2
    191c:	01000002 	tsteq	r0, r2
			switch (c) {
    1920:	0011b79c 	mulseq	r1, ip, r7
    1924:	006e4f00 	rsbeq	r4, lr, r0, lsl #30
    1928:	b81c1901 	ldmdalt	ip, {r0, r8, fp, ip}
				for (i = 12; ; i -= 4) {
    192c:	01000000 	mrseq	r0, (UNDEF: 0)
				val = (word) va_arg (ap, aword);
    1930:	11b74350 			; <UNDEFINED> instruction: 0x11b74350
						[ (val >> i) & 0xf ]);
    1934:	02b80000 	adcseq	r0, r8, #0
    1938:	02c20000 	sbceq	r0, r2, #0
    193c:	1b010000 	blne	41944 <__ccfg+0x2199c>
					outc (__pi_hex_enc_table
    1940:	11c52103 	bicne	r2, r5, r3, lsl #2
    1944:	00000000 	andeq	r0, r0, r0
					if (i == 0)
    1948:	0009aa50 	andeq	sl, r9, r0, asr sl
    194c:	14150100 	ldrne	r0, [r5], #-256	; 0xffffff00
				for (i = 12; ; i -= 4) {
    1950:	11d00301 	bicsne	r0, r0, r1, lsl #6
				val = (word) va_arg (ap, aword);
    1954:	6e510000 	cdpvs	0, 5, cr0, cr1, cr0, {0}
				if (c == 'd' && (val & 0x8000) != 0) {
    1958:	2b150100 	blcs	541d60 <__ccfg+0x521db8>
				val = (word) va_arg (ap, aword);
    195c:	000000b8 	strheq	r0, [r0], -r8
				if (c == 'd' && (val & 0x8000) != 0) {
    1960:	058e5200 	streq	r5, [lr, #512]	; 0x200
    1964:	1a030000 	bne	c196c <__ccfg+0xa19c4>
					outc ('-');
    1968:	03013501 	movweq	r3, #5377	; 0x1501
    196c:	000011ed 	andeq	r1, r0, sp, ror #3
					val = (~val) + 1;
    1970:	00099b53 	andeq	r9, r9, r3, asr fp
    1974:	011a0300 	tsteq	sl, r0, lsl #6
				for (i = 12; ; i -= 4) {
    1978:	00007348 	andeq	r7, r0, r8, asr #6
				enci (10000);
    197c:	ec540000 	mra	r0, r4, acc0
    1980:	03000007 	movweq	r0, #7
    1984:	0301355b 	movweq	r3, #5467	; 0x155b
    1988:	0004ff54 	andeq	pc, r4, r4, asr pc	; <UNPREDICTABLE>
    198c:	35500300 	ldrbcc	r0, [r0, #-768]	; 0xfffffd00
    1990:	c2550301 	subsgt	r0, r5, #67108864	; 0x4000000
    1994:	0f000008 	svceq	0x00000008
    1998:	730101bf 	movwvc	r0, #4543	; 0x11bf
    199c:	03000000 	movweq	r0, #0
    19a0:	00001220 	andeq	r1, r0, r0, lsr #4
    19a4:	00094e16 	andeq	r4, r9, r6, lsl lr
    19a8:	0ec10f00 	cdpeq	15, 12, cr0, cr1, cr0, {0}
    19ac:	00000073 	andeq	r0, r0, r3, ror r0
    19b0:	08895400 	stmeq	r9, {sl, ip, lr}
    19b4:	900f0000 	andls	r0, pc, r0
    19b8:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
    19bc:	000004c9 	andeq	r0, r0, r9, asr #9
    19c0:	01017b0f 	tsteq	r1, pc, lsl #22
				if (c == 'd' || c == 'u') {
    19c4:	073c5203 	ldreq	r5, [ip, -r3, lsl #4]!
    19c8:	660a0000 	strvs	r0, [sl], -r0
					if (c == 'd' &&
    19cc:	03010103 	movweq	r0, #4355	; 0x1103
					val = va_arg (ap, lword);
    19d0:	00001251 	andeq	r1, r0, r1, asr r2
					fm++;
    19d4:	00071353 	andeq	r1, r7, r3, asr r3
					if (c == 'd' &&
    19d8:	03660a00 	cmneq	r6, #0, 20
    19dc:	0000731f 	andeq	r7, r0, pc, lsl r3
						outc ('-');
    19e0:	61560000 	cmpvs	r6, r0
    19e4:	02000008 	andeq	r0, r0, #8
						val = (~val) + 1;
    19e8:	0101014c 	tsteq	r1, ip, asr #2
				enci (10000);
    19ec:	07fa5403 	ldrbeq	r5, [sl, r3, lsl #8]!
					enci (1000000000UL);
    19f0:	c4020000 	strgt	r0, [r2], #-0
    19f4:	57030101 	strpl	r0, [r3, -r1, lsl #2]
    19f8:	00000615 	andeq	r0, r0, r5, lsl r6
    19fc:	0101ad02 	tsteq	r1, r2, lsl #26
    1a00:	00000073 	andeq	r0, r0, r3, ror r0
    1a04:	05625603 	strbeq	r5, [r2, #-1539]!	; 0xfffff9fd
    1a08:	450e0000 	strmi	r0, [lr, #-0]
    1a0c:	03010102 	movweq	r0, #4354	; 0x1102
    1a10:	00053458 	andeq	r3, r5, r8, asr r4
    1a14:	022c0e00 	eoreq	r0, ip, #0, 28
    1a18:	00730101 	rsbseq	r0, r3, r1, lsl #2
    1a1c:	52030000 	andpl	r0, r3, #0
    1a20:	0000051f 	andeq	r0, r0, pc, lsl r5
    1a24:	0101dc0e 	tsteq	r1, lr, lsl #24
    1a28:	12ab0301 	adcne	r0, fp, #67108864	; 0x4000000
    1a2c:	d9530000 	ldmdble	r3, {}^	; <UNPREDICTABLE>
    1a30:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
				} else if (c == 'x') {
    1a34:	731f01dc 	tstvc	pc, #220, 2	; 0x37
					for (i = 28; ; i -= 4) {
    1a38:	00000000 	andeq	r0, r0, r0
					val = va_arg (ap, lword);
    1a3c:	00069a56 	andeq	r9, r6, r6, asr sl
							[ (val >> i) & 0xf ]);
    1a40:	010f0b00 	tsteq	pc, r0, lsl #22
    1a44:	54030101 	strpl	r0, [r3], #-257	; 0xfffffeff
						outc (__pi_hex_enc_table
    1a48:	000005e1 	andeq	r0, r0, r1, ror #11
    1a4c:	0101ed0c 	tsteq	r1, ip, lsl #26
    1a50:	08af5403 	stmiaeq	pc!, {r0, r1, sl, ip, lr}	; <UNPREDICTABLE>
						if (i == 0)
    1a54:	d60c0000 	strle	r0, [ip], -r0
    1a58:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
					for (i = 28; ; i -= 4) {
    1a5c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
					outc ('%');
    1a60:	01044006 	tsteq	r4, r6
    1a64:	12e70301 	rscne	r0, r7, #67108864	; 0x4000000
    1a68:	20530000 	subscs	r0, r3, r0
					outc ('l');
    1a6c:	06000007 	streq	r0, [r0], -r7
    1a70:	73240440 			; <UNDEFINED> instruction: 0x73240440
				val = (word) va_arg (ap, aword);
    1a74:	00000000 	andeq	r0, r0, r0
				outc (val);
    1a78:	00054952 	andeq	r4, r5, r2, asr r9
    1a7c:	03910600 	orrseq	r0, r1, #0, 12
				while (*st != '\0') {
    1a80:	11030101 	tstne	r3, r1, lsl #2
    1a84:	53000013 	movwpl	r0, #19
    1a88:	00000720 	andeq	r0, r0, r0, lsr #14
    1a8c:	17039106 	strne	r9, [r3, -r6, lsl #2]
					outc (*st);
    1a90:	00000073 	andeq	r0, r0, r3, ror r0
    1a94:	00067b53 	andeq	r7, r6, r3, asr fp
					st++;
    1a98:	03910600 	orrseq	r0, r1, #0, 12
		c = *fm++;
    1a9c:	0000732a 	andeq	r7, r0, sl, lsr #6
    1aa0:	61520000 	cmpvs	r2, r0
    1aa4:	06000009 	streq	r0, [r0], -r9
char *vform (char *res, const char *fm, va_list aq) {
    1aa8:	0101030c 	tsteq	r1, ip, lsl #6
    1aac:	00133b03 	andseq	r3, r3, r3, lsl #22
	if (res != NULL) {
    1ab0:	07205300 	streq	r5, [r0, -r0, lsl #6]!
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab4:	0c060000 	stceq	0, cr0, [r6], {-0}
    1ab8:	00731803 	rsbseq	r1, r3, r3, lsl #16
    1abc:	7b530000 	blvc	14c1ac4 <__ccfg+0x14a1b1c>
}
    1ac0:	06000006 	streq	r0, [r0], -r6
    1ac4:	732b030c 			; <UNDEFINED> instruction: 0x732b030c
	fml = strlen (fm) + 17;
    1ac8:	00000000 	andeq	r0, r0, r0
    1acc:	00066c52 	andeq	r6, r6, r2, asr ip
    1ad0:	01e70600 	mvneq	r0, r0, lsl #12
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad4:	58030101 	stmdapl	r3, {r0, r8}
    1ad8:	53000013 	movwpl	r0, #19
    1adc:	00000720 	andeq	r0, r0, r0, lsr #14
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae0:	1901e706 	stmdbne	r1, {r1, r2, r8, r9, sl, sp, lr, pc}
    1ae4:	00000073 	andeq	r0, r0, r3, ror r0
    1ae8:	07b65200 	ldreq	r5, [r6, r0, lsl #4]!
    1aec:	ba060000 	blt	181af4 <__ccfg+0x161b4c>
		ufree (res);
    1af0:	03010101 	movweq	r0, #4353	; 0x1101
		goto Again;
    1af4:	00001375 	andeq	r1, r0, r5, ror r3
	if (buf == NULL || fmt == NULL)
    1af8:	00072053 	andeq	r2, r7, r3, asr r0
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afc:	01ba0600 			; <UNDEFINED> instruction: 0x01ba0600
	if (buf == NULL || fmt == NULL)
    1b00:	00007315 	andeq	r7, r0, r5, lsl r3
    1b04:	50520000 	subspl	r0, r2, r0
    1b08:	06000008 	streq	r0, [r0], -r8
		    	    case 'u': scanu (lword); break;
    1b0c:	01010139 	tsteq	r1, r9, lsr r1
			while (isspace (*buf)) buf++;
    1b10:	0013ac03 	andseq	sl, r3, r3, lsl #24
    1b14:	07205300 	streq	r5, [r0, -r0, lsl #6]!
	while (*fmt != '\0') {
    1b18:	39060000 	stmdbcc	r6, {}	; <UNPREDICTABLE>
		if (*fmt++ != '%')
    1b1c:	00731b01 	rsbseq	r1, r3, r1, lsl #22
		switch (*fmt++) {
    1b20:	09530000 	ldmdbeq	r3, {}^	; <UNPREDICTABLE>
    1b24:	06000006 	streq	r0, [r0], -r6
    1b28:	732e0139 			; <UNDEFINED> instruction: 0x732e0139
    1b2c:	53000000 	movwpl	r0, #0
    1b30:	000005f5 	strdeq	r0, [r0], -r5
    1b34:	1b013a06 	blne	50354 <__ccfg+0x303ac>
    1b38:	00000073 	andeq	r0, r0, r3, ror r0
}
    1b3c:	07c15200 	strbeq	r5, [r1, r0, lsl #4]
		switch (*fmt++) {
    1b40:	84040000 	strhi	r0, [r4], #-0
    1b44:	03010102 	movweq	r0, #4354	; 0x1102
    1b48:	000013c9 	andeq	r1, r0, r9, asr #7
    1b4c:	00015553 	andeq	r5, r1, r3, asr r5
			while (isspace (*buf)) buf++;
    1b50:	02840400 	addeq	r0, r4, #0, 8
    1b54:	0000731e 	andeq	r7, r0, lr, lsl r3
    1b58:	b1520000 	cmplt	r2, r0
    1b5c:	04000004 	streq	r0, [r0], #-4
    1b60:	01010206 	tsteq	r1, r6, lsl #4
    1b64:	0013f303 	andseq	pc, r3, r3, lsl #6
			if (*buf == '\0')
    1b68:	01555300 	cmpeq	r5, r0, lsl #6
			if (*buf != ',') {
    1b6c:	06040000 	streq	r0, [r4], -r0
			sap = va_arg (ap, char*);
    1b70:	00732302 	rsbseq	r2, r3, r2, lsl #6
			nc++;
    1b74:	84530000 	ldrbhi	r0, [r3], #-0
			if (*buf != ',') {
    1b78:	04000009 	streq	r0, [r0], #-9
				while (!isspace (*buf) && *buf != ',' &&
    1b7c:	73370206 	teqvc	r7, #1610612736	; 0x60000000
    1b80:	00000000 	andeq	r0, r0, r0
    1b84:	00039e52 	andeq	r9, r3, r2, asr lr
    1b88:	01540400 	cmpeq	r4, r0, lsl #8
    1b8c:	10030101 	andne	r0, r3, r1, lsl #2
    1b90:	53000014 	movwpl	r0, #20
    1b94:	00000155 	andeq	r0, r0, r5, asr r1
			while (isspace (*buf)) buf++;
    1b98:	19015404 	stmdbne	r1, {r2, sl, ip, lr}
    1b9c:	00000073 	andeq	r0, r0, r3, ror r0
    1ba0:	00255200 	eoreq	r5, r5, r0, lsl #4
    1ba4:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    1ba8:	03010101 	movweq	r0, #4353	; 0x1101
			if (*buf == ',') buf++;
    1bac:	0000142d 	andeq	r1, r0, sp, lsr #8
    1bb0:	00015553 	andeq	r5, r1, r3, asr r5
			*sap = '\0';
    1bb4:	011e0400 	tsteq	lr, r0, lsl #8
			break;
    1bb8:	00007317 	andeq	r7, r0, r7, lsl r3
		    case 'd': scani (word); break;
    1bbc:	b3560000 	cmplt	r6, #0
    1bc0:	09000006 	stmdbeq	r0, {r1, r2}
    1bc4:	01010463 	tsteq	r1, r3, ror #8
    1bc8:	06255603 	strteq	r5, [r5], -r3, lsl #12
    1bcc:	54090000 	strpl	r0, [r9], #-0
    1bd0:	03010104 	movweq	r0, #4356	; 0x1104
    1bd4:	00063e56 	andeq	r3, r6, r6, asr lr
    1bd8:	022a0900 	eoreq	r0, sl, #0, 18
    1bdc:	52030101 	andpl	r0, r3, #1073741824	; 0x40000000
    1be0:	0000096f 	andeq	r0, r0, pc, ror #18
    1be4:	01016809 	tsteq	r1, r9, lsl #16
    1be8:	146b0301 	strbtne	r0, [fp], #-769	; 0xfffffcff
    1bec:	4a530000 	bmi	14c1bf4 <__ccfg+0x14a1c4c>
    1bf0:	09000006 	stmdbeq	r0, {r1, r2}
    1bf4:	731f0168 	tstvc	pc, #104, 2
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	00057e56 	andeq	r7, r5, r6, asr lr
    1c00:	01320900 	teqeq	r2, r0, lsl #18
    1c04:	59030101 	stmdbpl	r3, {r0, r8}
    1c08:	00000d44 	andeq	r0, r0, r4, asr #26
	...
    1c14:	58359c01 	ldmdapl	r5!, {r0, sl, fp, ip, pc}
    1c18:	3200000d 	andcc	r0, r0, #13
    1c1c:	00000005 	andeq	r0, r0, r5
    1c20:	00121f00 	andseq	r1, r2, r0, lsl #30
    1c24:	d3000300 	movwle	r0, #768	; 0x300
    1c28:	04000007 	streq	r0, [r0], #-7
		    case 'u': scanu (word); break;
    1c2c:	00015f01 	andeq	r5, r1, r1, lsl #30
    1c30:	0a7a0c00 	beq	1e84c38 <__ccfg+0x1e64c90>
    1c34:	00c00000 	sbceq	r0, r0, r0
    1c38:	06900000 	ldreq	r0, [r0], r0
    1c3c:	00000000 	andeq	r0, r0, r0
    1c40:	1a970000 	bne	fe5c1c48 <_estack+0xde5bcc48>
    1c44:	01020000 	mrseq	r0, (UNDEF: 2)
    1c48:	00039206 	andeq	r9, r3, r6, lsl #4
    1c4c:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1c50:	000003cc 	andeq	r0, r0, ip, asr #7
    1c54:	00163703 	andseq	r3, r6, r3, lsl #14
    1c58:	18280300 	stmdane	r8!, {r8, r9}
    1c5c:	0000003f 	andeq	r0, r0, pc, lsr r0
    1c60:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    1c64:	02000000 	andeq	r0, r0, #0
    1c68:	00980508 	addseq	r0, r8, r8, lsl #10
    1c6c:	eb030000 	bl	c1c74 <__ccfg+0xa1ccc>
    1c70:	03000021 	movweq	r0, #33	; 0x21
		    case 'x': scanx (word); break;
    1c74:	0059182e 	subseq	r1, r9, lr, lsr #16
    1c78:	01020000 	mrseq	r0, (UNDEF: 2)
    1c7c:	00039008 	andeq	r9, r3, r8
    1c80:	20d90300 	sbcscs	r0, r9, r0, lsl #6
    1c84:	31030000 	mrscc	r0, (UNDEF: 3)
    1c88:	00006c19 	andeq	r6, r0, r9, lsl ip
    1c8c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1c90:	00000260 	andeq	r0, r0, r0, ror #4
    1c94:	0017a203 	andseq	sl, r7, r3, lsl #4
    1c98:	19340300 	ldmdbne	r4!, {r8, r9}
    1c9c:	0000007f 	andeq	r0, r0, pc, ror r0
    1ca0:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    1ca4:	02000000 	andeq	r0, r0, #0
    1ca8:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    1cac:	04040000 	streq	r0, [r4], #-0
    1cb0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1cb4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1cb8:	00000077 	andeq	r0, r0, r7, ror r0
    1cbc:	000b3503 	andeq	r3, fp, r3, lsl #10
    1cc0:	1b280400 	blne	a02cc8 <__ccfg+0x9e2d20>
    1cc4:	000000a7 	andeq	r0, r0, r7, lsr #1
    1cc8:	000a4b05 	andeq	r4, sl, r5, lsl #22
    1ccc:	000b0400 	andeq	r0, fp, r0, lsl #8
    1cd0:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1cd4:	000beb06 	andeq	lr, fp, r6, lsl #22
    1cd8:	0000bf00 	andeq	fp, r0, r0, lsl #30
    1cdc:	00010000 	andeq	r0, r1, r0
    1ce0:	4d030407 	cfstrsmi	mvf0, [r3, #-28]	; 0xffffffe4
    1ce4:	0400000a 	streq	r0, [r0], #-10
    1ce8:	009b1863 	addseq	r1, fp, r3, ror #16
			switch (*fmt++) {
    1cec:	ec030000 	stc	0, cr0, [r3], {-0}
    1cf0:	05000003 	streq	r0, [r0, #-3]
    1cf4:	004d1226 	subeq	r1, sp, r6, lsr #4
    1cf8:	af030000 	svcge	0x00030000
    1cfc:	05000015 	streq	r0, [r0, #-21]	; 0xffffffeb
    1d00:	00601227 	rsbeq	r1, r0, r7, lsr #4
		    	    case 'd': scani (lword); break;
    1d04:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    1d08:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d0c:	000000d9 	ldrdeq	r0, [r0], -r9
    1d10:	0008f503 	andeq	pc, r8, r3, lsl #10
    1d14:	12280500 	eorne	r0, r8, #0, 10
    1d18:	00000033 	andeq	r0, r0, r3, lsr r0
    1d1c:	0013a703 	andseq	sl, r3, r3, lsl #14
    1d20:	122b0500 	eorne	r0, fp, #0, 10
    1d24:	0000004d 	andeq	r0, r0, sp, asr #32
    1d28:	0000fb09 	andeq	pc, r0, r9, lsl #22
    1d2c:	16000300 	strne	r0, [r0], -r0, lsl #6
    1d30:	2c050000 	stccs	0, cr0, [r5], {-0}
    1d34:	00007312 	andeq	r7, r0, r2, lsl r3
    1d38:	010c0800 	tsteq	ip, r0, lsl #16
    1d3c:	96030000 	strls	r0, [r3], -r0
    1d40:	05000002 	streq	r0, [r0, #-2]
    1d44:	0073122d 	rsbseq	r1, r3, sp, lsr #4
    1d48:	51030000 	mrspl	r0, (UNDEF: 3)
    1d4c:	05000007 	streq	r0, [r0, #-7]
    1d50:	0135102e 	teqeq	r5, lr, lsr #32
    1d54:	040a0000 	streq	r0, [sl], #-0
    1d58:	000000d9 	ldrdeq	r0, [r0], -r9
    1d5c:	3205080b 	andcc	r0, r5, #720896	; 0xb0000
		    	    case 'x': scanx (lword); break;
    1d60:	0001c909 	andeq	ip, r1, r9, lsl #18
    1d64:	02b10c00 	adcseq	r0, r1, #0, 24
    1d68:	34050000 	strcc	r0, [r5], #-0
    1d6c:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1d70:	07010100 	streq	r0, [r1, -r0, lsl #2]
    1d74:	00910c00 	addseq	r0, r1, r0, lsl #24
    1d78:	35050000 	strcc	r0, [r5, #-0]
    1d7c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1d80:	06010100 	streq	r0, [r1], -r0, lsl #2
    1d84:	02880c00 	addeq	r0, r8, #0, 24
    1d88:	36050000 	strcc	r0, [r5], -r0
    1d8c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1d90:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1d94:	03fb0c00 	mvnseq	r0, #0, 24
    1d98:	37050000 	strcc	r0, [r5, -r0]
    1d9c:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1da0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    1da4:	03f40c00 	mvnseq	r0, #0, 24
    1da8:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    1dac:	0000fb03 	andeq	pc, r0, r3, lsl #22
    1db0:	00040100 	andeq	r0, r4, r0, lsl #2
    1db4:	03e50d00 	mvneq	r0, #0, 26
    1db8:	3a050000 	bcc	141dc0 <__ccfg+0x121e18>
    1dbc:	0000fb07 	andeq	pc, r0, r7, lsl #22
    1dc0:	400d0100 	andmi	r0, sp, r0, lsl #2
    1dc4:	05000000 	streq	r0, [r0, #-0]
    1dc8:	00fb033c 	rscseq	r0, fp, ip, lsr r3
    1dcc:	0d020000 	stceq	0, cr0, [r2, #-0]
		    	    case 'd': scani (lword); break;
    1dd0:	00000066 	andeq	r0, r0, r6, rrx
    1dd4:	fb033d05 	blx	d11f2 <__ccfg+0xb124a>
    1dd8:	03000000 	movweq	r0, #0
    1ddc:	0001430d 	andeq	r4, r1, sp, lsl #6
    1de0:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    1de4:	0000010c 	andeq	r0, r0, ip, lsl #2
    1de8:	23030004 	movwcs	r0, #12292	; 0x3004
		    	    case 'u': scanu (lword); break;
    1dec:	05000004 	streq	r0, [r0, #-4]
    1df0:	013b0341 	teqeq	fp, r1, asr #6
    1df4:	c9090000 	stmdbgt	r9, {}	; <UNPREDICTABLE>
    1df8:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    1dfc:	000002a5 	andeq	r0, r0, r5, lsr #5
    1e00:	d51a4305 	ldrle	r4, [sl, #-773]	; 0xfffffcfb
    1e04:	01000001 	tsteq	r0, r1
    1e08:	02fc0e01 	rscseq	r0, ip, #1, 28
    1e0c:	45050000 	strmi	r0, [r5, #-0]
    1e10:	0001f60e 	andeq	pc, r1, lr, lsl #12
    1e14:	0a010100 	beq	4221c <__ccfg+0x22274>
    1e18:	0001fc04 	andeq	pc, r1, r4, lsl #24
    1e1c:	08010200 	stmdaeq	r1, {r9}
    1e20:	00000399 	muleq	r0, r9, r3
    1e24:	0001fc08 	andeq	pc, r1, r8, lsl #24
    1e28:	030a0e00 	movweq	r0, #44544	; 0xae00
    1e2c:	45050000 	strmi	r0, [r5, #-0]
    1e30:	0001f61e 	andeq	pc, r1, lr, lsl r6	; <UNPREDICTABLE>
		    	    case 'x': scanx (lword); break;
    1e34:	0b010100 	bleq	4223c <__ccfg+0x22294>
    1e38:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
			if ((c = *buf++) == '\0')
    1e3c:	00000247 	andeq	r0, r0, r7, asr #4
    1e40:	0002c10d 	andeq	ip, r2, sp, lsl #2
			sap = va_arg (ap, char*);
    1e44:	0b900600 	bleq	fe40364c <_estack+0xde3fe64c>
			nc++;
    1e48:	00000073 	andeq	r0, r0, r3, ror r0
			break;
    1e4c:	05dc0d00 	ldrbeq	r0, [ip, #3328]	; 0xd00
			while (isspace (*buf)) buf++;
    1e50:	91060000 	mrsls	r0, (UNDEF: 6)
    1e54:	0000d908 	andeq	sp, r0, r8, lsl #18
    1e58:	600d0400 	andvs	r0, sp, r0, lsl #8
						*sap++ = *buf++;
    1e5c:	06000004 	streq	r0, [r0], -r4
    1e60:	01071092 	swpeq	r1, r2, [r7]
			while (isspace (*buf)) buf++;
    1e64:	00060000 	andeq	r0, r6, r0
    1e68:	00040203 	andeq	r0, r4, r3, lsl #4
    1e6c:	03930600 	orrseq	r0, r3, #0, 12
		return 0;
    1e70:	00000216 	andeq	r0, r0, r6, lsl r2
    1e74:	0002470f 	andeq	r4, r2, pc, lsl #14
		    case 'x': scanx (word); break;
    1e78:	00025e00 	andeq	r5, r2, r0, lsl #28
    1e7c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
		    	    case 'x': scanx (lword); break;
    1e80:	00000036 	andeq	r0, r0, r6, lsr r0
    1e84:	530f9906 	movwpl	r9, #63750	; 0xf906
    1e88:	01000002 	tsteq	r0, r2
    1e8c:	07010b01 	streq	r0, [r1, -r1, lsl #22]
    1e90:	02960991 	addseq	r0, r6, #2375680	; 0x244000
    1e94:	530c0000 	movwpl	r0, #49152	; 0xc000
    1e98:	07000004 	streq	r0, [r0, -r4]
    1e9c:	00fb0793 	smlalseq	r0, fp, r3, r7
    1ea0:	07010000 	streq	r0, [r1, -r0]
    1ea4:	310c0001 	tstcc	ip, r1
    1ea8:	07000000 	streq	r0, [r0, -r0]
    1eac:	00fb0394 	smlalseq	r0, fp, r4, r3
    1eb0:	01010000 	mrseq	r0, (UNDEF: 1)
    1eb4:	03000000 	movweq	r0, #0
    1eb8:	00000273 	andeq	r0, r0, r3, ror r2
    1ebc:	6c039607 	stcvs	6, cr9, [r3], {7}
    1ec0:	08000002 	stmdaeq	r0, {r1}
    1ec4:	00000296 	muleq	r0, r6, r2
    1ec8:	0002a20f 	andeq	sl, r2, pc, lsl #4
    1ecc:	0002b200 	andeq	fp, r2, r0, lsl #4
    1ed0:	08001000 	stmdaeq	r0, {ip}
    1ed4:	000002a7 	andeq	r0, r0, r7, lsr #5
    1ed8:	0002dc0e 	andeq	sp, r2, lr, lsl #24
    1edc:	179c0700 	ldrne	r0, [ip, r0, lsl #14]
    1ee0:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
    1ee4:	e50f0101 	str	r0, [pc, #-257]	; 1deb <vscan+0x2f3>
    1ee8:	d0000000 	andle	r0, r0, r0
    1eec:	10000002 	andne	r0, r0, r2
    1ef0:	02c50800 	sbceq	r0, r5, #0, 16
    1ef4:	820e0000 	andhi	r0, lr, #0
    1ef8:	08000003 	stmdaeq	r0, {r0, r1}
    1efc:	02d01306 	sbcseq	r1, r0, #402653184	; 0x18000000
    1f00:	01010000 	mrseq	r0, (UNDEF: 1)
    1f04:	0001230e 	andeq	r2, r1, lr, lsl #6
    1f08:	0ec30600 	cdpeq	6, 12, cr0, cr3, cr0, {0}
    1f0c:	0000010c 	andeq	r0, r0, ip, lsl #2
    1f10:	6d110101 	ldfvss	f0, [r1, #-4]
    1f14:	09000004 	stmdbeq	r0, {r2}
    1f18:	fe10016e 	cdp2	1, 1, cr0, cr0, cr14, {3}
    1f1c:	0a000002 	beq	1f2c <TrimAfterColdResetWakeupFromShutDown+0x4c>
    1f20:	00030404 	andeq	r0, r3, r4, lsl #8
    1f24:	10011200 	andne	r1, r1, r0, lsl #4
    1f28:	13000003 	movwne	r0, #3
    1f2c:	000000d9 	ldrdeq	r0, [r0], -r9
    1f30:	02030f00 	andeq	r0, r3, #0, 30
    1f34:	031b0000 	tsteq	fp, #0
    1f38:	00100000 	andseq	r0, r0, r0
    1f3c:	00031008 	andeq	r1, r3, r8
    1f40:	04331400 	ldrteq	r1, [r3], #-1024	; 0xfffffc00
    1f44:	7f090000 	svcvc	0x00090000
    1f48:	031b1601 	tsteq	fp, #1048576	; 0x100000
    1f4c:	01010000 	mrseq	r0, (UNDEF: 1)
    1f50:	00037a14 	andeq	r7, r3, r4, lsl sl
    1f54:	01820900 	orreq	r0, r2, r0, lsl #18
    1f58:	00011814 	andeq	r1, r1, r4, lsl r8
    1f5c:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    1f60:	00000458 	andeq	r0, r0, r8, asr r4
    1f64:	0e02d809 	cdpeq	8, 0, cr13, cr2, cr9, {0}
    1f68:	0000010c 	andeq	r0, r0, ip, lsl #2
    1f6c:	08150101 	ldmdaeq	r5, {r0, r8}
    1f70:	09030309 	stmdbeq	r3, {r0, r3, r8, r9}
    1f74:	00000374 	andeq	r0, r0, r4, ror r3
    1f78:	0021e316 	eoreq	lr, r1, r6, lsl r3
    1f7c:	03070900 	movweq	r0, #30976	; 0x7900
    1f80:	0000d907 	andeq	sp, r0, r7, lsl #18
    1f84:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    1f88:	09000005 	stmdbeq	r0, {r0, r2}
    1f8c:	1d080308 	stcne	3, cr0, [r8, #-32]	; 0xffffffe0
    1f90:	04000001 	streq	r0, [r0], #-1
    1f94:	02531100 	subseq	r1, r3, #0, 2
    1f98:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1f9c:	034d0303 	movteq	r0, #54019	; 0xd303
    1fa0:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    1fa4:	30000004 	andcc	r0, r0, r4
    1fa8:	08030b09 	stmdaeq	r3, {r0, r3, r8, r9, fp}
    1fac:	000003e4 	andeq	r0, r0, r4, ror #7
    1fb0:	00047516 	andeq	r7, r4, r6, lsl r5
    1fb4:	03140900 	tsteq	r4, #0, 18
    1fb8:	0000d908 	andeq	sp, r0, r8, lsl #18
    1fbc:	cb160000 	blgt	581fc4 <__ccfg+0x56201c>
    1fc0:	09000002 	stmdbeq	r0, {r1}
    1fc4:	d9080315 	stmdble	r8, {r0, r2, r4, r8, r9}
    1fc8:	02000000 	andeq	r0, r0, #0
    1fcc:	00047016 	andeq	r7, r4, r6, lsl r0
    1fd0:	03160900 	tsteq	r6, #0, 18
    1fd4:	0002f10b 	andeq	pc, r2, fp, lsl #2
    1fd8:	2e160400 	cfmulscs	mvf0, mvf6, mvf0
    1fdc:	0900000f 	stmdbeq	r0, {r0, r1, r2, r3}
    1fe0:	1d090317 	stcne	3, cr0, [r9, #-92]	; 0xffffffa4
    1fe4:	08000001 	stmdaeq	r0, {r0}
    1fe8:	00042c16 	andeq	r2, r4, r6, lsl ip
    1fec:	03180900 	tsteq	r8, #0, 18
    1ff0:	0003e40f 	andeq	lr, r3, pc, lsl #8
    1ff4:	c6160c00 	ldrgt	r0, [r6], -r0, lsl #24
    1ff8:	09000002 	stmdbeq	r0, {r1}
    1ffc:	f4150319 			; <UNDEFINED> instruction: 0xf4150319
    2000:	2c000003 	stccs	0, cr0, [r0], {3}
    2004:	03740f00 	cmneq	r4, #0, 30
    2008:	03f40000 	mvnseq	r0, #0
    200c:	94180000 	ldrls	r0, [r8], #-0
    2010:	03000000 	movweq	r0, #0
    2014:	81040a00 	tsthi	r4, r0, lsl #20
    2018:	11000003 	tstne	r0, r3
    201c:	00000487 	andeq	r0, r0, r7, lsl #9
    2020:	1b031c09 	blne	c904c <__ccfg+0xa90a4>
    2024:	00000381 	andeq	r0, r0, r1, lsl #7
    2028:	00037014 	andeq	r7, r3, r4, lsl r0
    202c:	031e0900 	tsteq	lr, #0, 18
    2030:	00041614 	andeq	r1, r4, r4, lsl r6
    2034:	0a010100 	beq	4243c <__ccfg+0x22494>
    2038:	0003fa04 	andeq	pc, r3, r4, lsl #20
    203c:	04a00e00 	strteq	r0, [r0], #3584	; 0xe00
    2040:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    2044:	0000d913 	andeq	sp, r0, r3, lsl r9
    2048:	0e010100 	adfeqs	f0, f1, f0
    204c:	0000070a 	andeq	r0, r0, sl, lsl #14
    2050:	ea1a1e0a 	b	689880 <__ccfg+0x6698d8>
    2054:	01000000 	mrseq	r0, (UNDEF: 0)
    2058:	089a0e01 	ldmeq	sl, {r0, r9, sl, fp}
    205c:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    2060:	0000ea24 	andeq	lr, r0, r4, lsr #20
    2064:	0e010100 	adfeqs	f0, f1, f0
    2068:	000005c9 	andeq	r0, r0, r9, asr #11
    206c:	1614220a 	ldrne	r2, [r4], -sl, lsl #4
    2070:	01000004 	tsteq	r0, r4
    2074:	09f70301 	ldmibeq	r7!, {r0, r8, r9}^
    2078:	440a0000 	strmi	r0, [sl], #-0
    207c:	0004600f 	andeq	r6, r4, pc
    2080:	66040a00 	strvs	r0, [r4], -r0, lsl #20
    2084:	19000004 	stmdbne	r0, {r2}
    2088:	00008d01 	andeq	r8, r0, r1, lsl #26
    208c:	00048000 	andeq	r8, r4, r0
    2090:	008d1300 	addeq	r1, sp, r0, lsl #6
    2094:	f6130000 			; <UNDEFINED> instruction: 0xf6130000
    2098:	13000001 	movwne	r0, #1
    209c:	0000008d 	andeq	r0, r0, sp, lsl #1
    20a0:	033e1a00 	teqeq	lr, #0, 20
    20a4:	0c010000 	stceq	0, cr0, [r1], {-0}
    20a8:	94030507 	strls	r0, [r3], #-1287	; 0xfffffaf9
    20ac:	1b200000 	blne	8020b4 <__ccfg+0x7e210c>
    20b0:	00000bc1 	andeq	r0, r0, r1, asr #23
    20b4:	0c071001 	stceq	0, cr1, [r7], {1}
    20b8:	01000001 	tsteq	r0, r1
    20bc:	00000305 	andeq	r0, r0, r5, lsl #6
    20c0:	461a0000 	ldrmi	r0, [sl], -r0
    20c4:	01000004 	tsteq	r0, r4
    20c8:	03050d1a 	movweq	r0, #23834	; 0x5d1a
    20cc:	2000001c 	andcs	r0, r0, ip, lsl r0
    20d0:	0004540f 	andeq	r5, r4, pc, lsl #8
    20d4:	0004bf00 	andeq	fp, r4, r0, lsl #30
    20d8:	00941800 	addseq	r1, r4, r0, lsl #16
    20dc:	00000000 	andeq	r0, r0, r0
    20e0:	000a2f1c 	andeq	r2, sl, ip, lsl pc
    20e4:	141e0100 	ldrne	r0, [lr], #-256	; 0xffffff00
    20e8:	000004af 	andeq	r0, r0, pc, lsr #9
    20ec:	00200305 	eoreq	r0, r0, r5, lsl #6
    20f0:	da1a2000 	ble	68a0f8 <__ccfg+0x66a150>
    20f4:	01000001 	tsteq	r0, r1
    20f8:	03051322 	movweq	r1, #21282	; 0x5322
    20fc:	2000009c 	mulcs	r0, ip, r0
    2100:	0004071a 	andeq	r0, r4, sl, lsl r7
    2104:	0d270100 	stfeqs	f0, [r7, #-0]
    2108:	00b80305 	adcseq	r0, r8, r5, lsl #6
    210c:	1c1a2000 	ldcne	0, cr2, [sl], {-0}
    2110:	01000004 	tsteq	r0, r4
    2114:	03050730 	movweq	r0, #22320	; 0x5730
    2118:	20000098 	mulcs	r0, r8, r0
    211c:	00042a1a 	andeq	r2, r4, sl, lsl sl
    2120:	0f310100 	svceq	0x00310100
    2124:	009a0305 	addseq	r0, sl, r5, lsl #6
    2128:	381a2000 	ldmdacc	sl, {sp}
    212c:	01000004 	tsteq	r0, r4
    2130:	03051931 	movweq	r1, #22833	; 0x5931
    2134:	200000a4 	andcs	r0, r0, r4, lsr #1
    2138:	0001290f 	andeq	r2, r1, pc, lsl #18
    213c:	00052700 	andeq	r2, r5, r0, lsl #14
    2140:	00941800 	addseq	r1, r4, r0, lsl #16
    2144:	00030000 	andeq	r0, r3, r0
    2148:	0008ea1b 	andeq	lr, r8, fp, lsl sl
    214c:	0a360100 	beq	d82554 <__ccfg+0xd625ac>
    2150:	00000517 	andeq	r0, r0, r7, lsl r5
    2154:	a8030501 	stmdage	r3, {r0, r8, sl}
    2158:	1a200000 	bne	802160 <__ccfg+0x7e21b8>
    215c:	00000320 	andeq	r0, r0, r0, lsr #6
    2160:	050c3f01 	streq	r3, [ip, #-3841]	; 0xfffff0ff
    2164:	002c6803 	eoreq	r6, ip, r3, lsl #16
    2168:	032f1a00 			; <UNDEFINED> instruction: 0x032f1a00
    216c:	45010000 	strmi	r0, [r1, #-0]
    2170:	0003050d 	andeq	r0, r3, sp, lsl #10
    2174:	0b000000 	bleq	217c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>
    2178:	09490102 	stmdbeq	r9, {r1, r8}^
    217c:	0000057a 	andeq	r0, r0, sl, ror r5
    2180:	000a230d 	andeq	r2, sl, sp, lsl #6
    2184:	074a0100 	strbeq	r0, [sl, -r0, lsl #2]
    2188:	000000fb 	strdeq	r0, [r0], -fp
    218c:	0c050d00 	stceq	13, cr0, [r5], {-0}
    2190:	4b010000 	blmi	42198 <__ccfg+0x221f0>
    2194:	0000fb07 	andeq	pc, r0, r7, lsl #22
    2198:	03000100 	movweq	r0, #256	; 0x100
    219c:	00000b2c 	andeq	r0, r0, ip, lsr #22
    21a0:	56034c01 	strpl	r4, [r3], -r1, lsl #24
    21a4:	0f000005 	svceq	0x00000005
    21a8:	0000057a 	andeq	r0, r0, sl, ror r5
    21ac:	00000596 	muleq	r0, r6, r5
    21b0:	00009418 	andeq	r9, r0, r8, lsl r4
    21b4:	1c000000 	stcne	0, cr0, [r0], {-0}
    21b8:	00000b61 	andeq	r0, r0, r1, ror #22
    21bc:	86114e01 	ldrhi	r4, [r1], -r1, lsl #28
    21c0:	05000005 	streq	r0, [r0, #-5]
    21c4:	00002803 	andeq	r2, r0, r3, lsl #16
    21c8:	05b80f20 	ldreq	r0, [r8, #3872]!	; 0xf20
    21cc:	05b80000 	ldreq	r0, [r8, #0]!
    21d0:	94180000 	ldrls	r0, [r8], #-0
    21d4:	00000000 	andeq	r0, r0, r0
    21d8:	1d040a00 	vstrne	s0, [r4, #-0]
    21dc:	1d000001 	stcne	0, cr0, [r0, #-4]
    21e0:	00000a44 	andeq	r0, r0, r4, asr #20
    21e4:	0f02bd01 	svceq	0x0002bd01
    21e8:	000005a8 	andeq	r0, r0, r8, lsr #11
    21ec:	00300305 	eorseq	r0, r0, r5, lsl #6
    21f0:	1d0f2000 	stcne	0, cr2, [pc, #-0]	; 21f8 <NOROM_SetupGetTrimForAmpcompTh2+0x4>
    21f4:	e1000001 	tst	r0, r1
    21f8:	18000005 	stmdane	r0, {r0, r2}
    21fc:	00000094 	muleq	r0, r4, r0
    2200:	e71d0000 	ldr	r0, [sp, -r0]
    2204:	0100000a 	tsteq	r0, sl
    2208:	d10e02c2 	smlabtle	lr, r2, r2, r0
    220c:	05000005 	streq	r0, [r0, #-5]
    2210:	00002c03 	andeq	r2, r0, r3, lsl #24
    2214:	0b441d20 	bleq	110969c <__ccfg+0x10e96f4>
    2218:	c2010000 	andgt	r0, r1, #0
    221c:	05d12602 	ldrbeq	r2, [r1, #1538]	; 0x602
    2220:	03050000 	movweq	r0, #20480	; 0x5000
    2224:	20000024 	andcs	r0, r0, r4, lsr #32
    2228:	0b8d011e 	bleq	fe3426a8 <_estack+0xde33d6a8>
    222c:	2f010000 	svccs	0x00010000
    2230:	0c010705 	stceq	7, cr0, [r1], {5}
    2234:	00000001 	andeq	r0, r0, r1
    2238:	00000000 	andeq	r0, r0, r0
    223c:	01000000 	mrseq	r0, (UNDEF: 0)
    2240:	1b011f9c 	blne	4a0b8 <__ccfg+0x2a110>
    2244:	0100000b 	tsteq	r0, fp
    2248:	01060482 	smlabbeq	r6, r2, r4, r0
    224c:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    2250:	000013f0 	strdeq	r1, [r0], -r0
    2254:	070e9c01 	streq	r9, [lr, -r1, lsl #24]
    2258:	5c200000 	stcpl	0, cr0, [r0], #-0
    225c:	0100000b 	tsteq	r0, fp
    2260:	0e180482 	cdpeq	4, 1, cr0, cr8, cr2, {4}
    2264:	45000007 	strmi	r0, [r0, #-7]
    2268:	21000005 	tstcs	r0, r5
    226c:	6c617622 	stclvs	6, cr7, [r1], #-136	; 0xffffff78
    2270:	04870100 	streq	r0, [r7], #256	; 0x100
    2274:	00010c08 	andeq	r0, r1, r8, lsl #24
    2278:	00058500 	andeq	r8, r5, r0, lsl #10
    227c:	70612300 	rsbvc	r2, r1, r0, lsl #6
    2280:	04880100 	streq	r0, [r8], #256	; 0x100
    2284:	0000c10a 	andeq	ip, r0, sl, lsl #2
    2288:	4c910200 	lfmmi	f0, 4, [r1], {0}
    228c:	00636222 	rsbeq	r6, r3, r2, lsr #4
    2290:	07048901 	streq	r8, [r4, -r1, lsl #18]
    2294:	000000ef 	andeq	r0, r0, pc, ror #1
    2298:	000005c4 	andeq	r0, r0, r4, asr #11
    229c:	01007622 	tsteq	r0, r2, lsr #12
    22a0:	d907048a 	stmdble	r7, {r1, r3, r7, sl}
    22a4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    22a8:	24000005 	strcs	r0, [r0], #-5
    22ac:	01007369 	tsteq	r0, r9, ror #6
    22b0:	fb07048b 	blx	1c34e6 <__ccfg+0x1a353e>
    22b4:	25000000 	strcs	r0, [r0, #-0]
    22b8:	00000c15 	andeq	r0, r0, r5, lsl ip
    22bc:	0104b001 	tsteq	r4, r1
    22c0:	00001380 	andeq	r1, r0, r0, lsl #7
    22c4:	00134026 	andseq	r4, r3, r6, lsr #32
    22c8:	00135c00 	andseq	r5, r3, r0, lsl #24
    22cc:	0006c000 	andeq	ip, r6, r0
    22d0:	00692200 	rsbeq	r2, r9, r0, lsl #4
    22d4:	0a049f01 	beq	129ee0 <__ccfg+0x109f38>
    22d8:	000000ef 	andeq	r0, r0, pc, ror #1
    22dc:	00000621 	andeq	r0, r0, r1, lsr #12
    22e0:	06482700 	strbeq	r2, [r8], -r0, lsl #14
    22e4:	06d90000 	ldrbeq	r0, [r9], r0
    22e8:	64220000 	strtvs	r0, [r2], #-0
    22ec:	04a90100 	strteq	r0, [r9], #256	; 0x100
    22f0:	00010c0b 	andeq	r0, r1, fp, lsl #24
    22f4:	00063400 	andeq	r3, r6, r0, lsl #8
    22f8:	cc260000 	stcgt	0, cr0, [r6], #-0
    22fc:	da000013 	ble	2350 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc>
    2300:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
    2304:	22000006 	andcs	r0, r0, #6
    2308:	c6010073 			; <UNDEFINED> instruction: 0xc6010073
    230c:	01f60b04 	mvnseq	r0, r4, lsl #22
    2310:	065d0000 	ldrbeq	r0, [sp], -r0
    2314:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2318:	000010c1 	andeq	r1, r0, r1, asr #1
    231c:	000012e2 	andeq	r1, r0, r2, ror #5
    2320:	00000678 	andeq	r0, r0, r8, ror r6
    2324:	0204d901 	andeq	sp, r4, #16384	; 0x4000
    2328:	0010d429 	andseq	sp, r0, r9, lsr #8
    232c:	0a000000 	beq	2334 <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0x4>
    2330:	00020304 	andeq	r0, r2, r4, lsl #6
    2334:	0be52a00 	bleq	ff94cb3c <_estack+0xdf947b3c>
    2338:	47010000 	strmi	r0, [r1, -r0]
    233c:	04010d04 	streq	r0, [r1], #-3332	; 0xfffff2fc
    2340:	1c00000e 	stcne	0, cr0, [r0], {14}
    2344:	0100000e 	tsteq	r0, lr
    2348:	0007539c 	muleq	r7, ip, r3
    234c:	00632b00 	rsbeq	r2, r3, r0, lsl #22
    2350:	19044701 	stmdbne	r4, {r0, r8, r9, sl, lr}
    2354:	000000d9 	ldrdeq	r0, [r0], -r9
    2358:	00000670 	andeq	r0, r0, r0, ror r6
    235c:	0010c128 	andseq	ip, r0, r8, lsr #2
    2360:	000e0400 	andeq	r0, lr, r0, lsl #8
    2364:	0005f000 	andeq	pc, r5, r0
    2368:	04490100 	strbeq	r0, [r9], #-256	; 0xffffff00
    236c:	10d42902 	sbcsne	r2, r4, r2, lsl #18
    2370:	00000000 	andeq	r0, r0, r0
    2374:	0acc012c 	beq	ff30282c <_estack+0xdf2fd82c>
    2378:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    237c:	d9010604 	stmdble	r1, {r2, r9, sl}
	...
    2388:	01000000 	mrseq	r0, (UNDEF: 0)
    238c:	0007b49c 	muleq	r7, ip, r4
    2390:	636e2b00 	cmnvs	lr, #0, 22
    2394:	04280100 	strteq	r0, [r8], #-256	; 0xffffff00
    2398:	0001291c 	andeq	r2, r1, ip, lsl r9
    239c:	00068300 	andeq	r8, r6, r0, lsl #6
    23a0:	0bad2d00 	bleq	feb4d7a8 <_estack+0xdeb487a8>
    23a4:	31010000 	mrscc	r0, (UNDEF: 1)
    23a8:	05b80904 	ldreq	r0, [r8, #2308]!	; 0x904
    23ac:	06a10000 	strteq	r0, [r1], r0
    23b0:	6d220000 	stcvs	0, cr0, [r2, #-0]
    23b4:	01007861 	tsteq	r0, r1, ror #16
    23b8:	1d080432 	cfstrsne	mvf0, [r8, #-200]	; 0xffffff38
    23bc:	bf000001 	svclt	0x00000001
    23c0:	2d000006 	stccs	0, cr0, [r0, #-24]	; 0xffffffe8
    23c4:	00000ae2 	andeq	r0, r0, r2, ror #21
    23c8:	0d043201 	sfmeq	f3, 4, [r4, #-4]
    23cc:	0000011d 	andeq	r0, r0, sp, lsl r1
    23d0:	000006dd 	ldrdeq	r0, [r0], -sp
    23d4:	9a012c00 	bls	4d3dc <__ccfg+0x2d434>
    23d8:	0100000b 	tsteq	r0, fp
    23dc:	01060415 	tsteq	r6, r5, lsl r4
    23e0:	000000d9 	ldrdeq	r0, [r0], -r9
	...
    23ec:	07e39c01 	strbeq	r9, [r3, r1, lsl #24]!
    23f0:	6d2b0000 	stcvs	0, cr0, [fp, #-0]
    23f4:	01006e69 	tsteq	r0, r9, ror #28
    23f8:	291c0415 	ldmdbcs	ip, {r0, r2, r4, sl}
    23fc:	06000001 	streq	r0, [r0], -r1
    2400:	00000007 	andeq	r0, r0, r7
    2404:	0b80011f 	bleq	fe002888 <_estack+0xddffd888>
    2408:	02010000 	andeq	r0, r1, #0
    240c:	9c010604 	stcls	6, cr0, [r1], {4}
    2410:	b4000012 	strlt	r0, [r0], #-18	; 0xffffffee
    2414:	01000012 	tsteq	r0, r2, lsl r0
    2418:	00080e9c 	muleq	r8, ip, lr
    241c:	0b702000 	bleq	1c0a424 <__ccfg+0x1bea47c>
    2420:	02010000 	andeq	r0, r1, #0
    2424:	00d91904 	sbcseq	r1, r9, r4, lsl #18
    2428:	07190000 	ldreq	r0, [r9, -r0]
    242c:	2c000000 	stccs	0, cr0, [r0], {-0}
    2430:	000a1601 	andeq	r1, sl, r1, lsl #12
    2434:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    2438:	05b80108 	ldreq	r0, [r8, #264]!	; 0x108
    243c:	11c00000 	bicne	r0, r0, r0
    2440:	12680000 	rsbne	r0, r8, #0
    2444:	9c010000 	stcls	0, cr0, [r1], {-0}
    2448:	00000880 	andeq	r0, r0, r0, lsl #17
    244c:	00138620 	andseq	r8, r3, r0, lsr #12
    2450:	03a30100 			; <UNDEFINED> instruction: 0x03a30100
    2454:	0000d91a 	andeq	sp, r0, sl, lsl r9
    2458:	00072c00 	andeq	r2, r7, r0, lsl #24
    245c:	0bad2d00 	bleq	feb4d864 <_estack+0xdeb48864>
    2460:	ab010000 	blge	42468 <__ccfg+0x224c0>
    2464:	05b80903 	ldreq	r0, [r8, #2307]!	; 0x903
    2468:	073f0000 	ldreq	r0, [pc, -r0]!
    246c:	63220000 			; <UNDEFINED> instruction: 0x63220000
    2470:	ab010063 	blge	42604 <__ccfg+0x2265c>
    2474:	05b81103 	ldreq	r1, [r8, #259]!	; 0x103
    2478:	07730000 	ldrbeq	r0, [r3, -r0]!
    247c:	4b2d0000 	blmi	b42484 <__ccfg+0xb224dc>
    2480:	0100000b 	tsteq	r0, fp
    2484:	1d1503ab 	ldcne	3, cr0, [r5, #-684]	; 0xfffffd54
    2488:	9c000001 	stcls	0, cr0, [r0], {1}
    248c:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    2490:	00001385 	andeq	r1, r0, r5, lsl #7
    2494:	0803af01 	stmdaeq	r3, {r0, r8, r9, sl, fp, sp, pc}
    2498:	0000011d 	andeq	r0, r0, sp, lsl r1
    249c:	000007af 	andeq	r0, r0, pc, lsr #15
    24a0:	0b012e00 	bleq	4dca8 <__ccfg+0x2dd00>
    24a4:	0100000c 	tsteq	r0, ip
    24a8:	0106037c 	tsteq	r6, ip, ror r3
    24ac:	00089d01 	andeq	r9, r8, r1, lsl #26
    24b0:	68632f00 	stmdavs	r3!, {r8, r9, sl, fp, sp}^
    24b4:	037c0100 	cmneq	ip, #0, 2
    24b8:	0005b818 	andeq	fp, r5, r8, lsl r8
    24bc:	292a0000 	stmdbcs	sl!, {}	; <UNPREDICTABLE>
    24c0:	0100000a 	tsteq	r0, sl
    24c4:	010d034a 	tsteq	sp, sl, asr #6
    24c8:	00000d84 	andeq	r0, r0, r4, lsl #27
    24cc:	00000e04 	andeq	r0, r0, r4, lsl #28
    24d0:	08e79c01 	stmiaeq	r7!, {r0, sl, fp, ip, pc}^
    24d4:	632b0000 			; <UNDEFINED> instruction: 0x632b0000
    24d8:	4a010068 	bmi	42680 <__ccfg+0x226d8>
    24dc:	05b81b03 	ldreq	r1, [r8, #2819]!	; 0xb03
    24e0:	07d90000 	ldrbeq	r0, [r9, r0]
    24e4:	ad2d0000 	stcge	0, cr0, [sp, #-0]
    24e8:	0100000b 	tsteq	r0, fp
    24ec:	b8090357 	stmdalt	r9, {r0, r1, r2, r4, r6, r8, r9}
    24f0:	f7000005 			; <UNDEFINED> instruction: 0xf7000005
    24f4:	22000007 	andcs	r0, r0, #7
    24f8:	01006363 	tsteq	r0, r3, ror #6
    24fc:	b8110357 	ldmdalt	r1, {r0, r1, r2, r4, r6, r8, r9}
    2500:	38000005 	stmdacc	r0, {r0, r2}
    2504:	00000008 	andeq	r0, r0, r8
    2508:	0a690130 	beq	1a429d0 <__ccfg+0x1a22a28>
    250c:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    2510:	10d80602 	sbcsne	r0, r8, r2, lsl #12
    2514:	11280000 			; <UNDEFINED> instruction: 0x11280000
    2518:	9c010000 	stcls	0, cr0, [r1], {-0}
    251c:	00000911 	andeq	r0, r0, r1, lsl r9
    2520:	000af62d 	andeq	pc, sl, sp, lsr #12
    2524:	02f50100 	rscseq	r0, r5, #0, 2
    2528:	00011d08 	andeq	r1, r1, r8, lsl #26
    252c:	00086c00 	andeq	r6, r8, r0, lsl #24
    2530:	01310000 	teqeq	r1, r0
    2534:	01006f69 	tsteq	r0, r9, ror #30
    2538:	01060279 	tsteq	r6, r9, ror r2
    253c:	000000ef 	andeq	r0, r0, pc, ror #1
    2540:	0000103c 	andeq	r1, r0, ip, lsr r0
    2544:	000010d8 	ldrdeq	r1, [r0], -r8
    2548:	09949c01 	ldmibeq	r4, {r0, sl, fp, ip, pc}
    254c:	51200000 			; <UNDEFINED> instruction: 0x51200000
    2550:	0100000b 	tsteq	r0, fp
    2554:	d90f0279 	stmdble	pc, {r0, r3, r4, r5, r6, r9}	; <UNPREDICTABLE>
    2558:	8a000000 	bhi	2560 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x80>
    255c:	2b000008 	blcs	2584 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xa4>
    2560:	00766564 	rsbseq	r6, r6, r4, ror #10
    2564:	1b027901 	blne	a0970 <__ccfg+0x809c8>
    2568:	000000d9 	ldrdeq	r0, [r0], -r9
    256c:	000008a8 	andeq	r0, r0, r8, lsr #17
    2570:	0006da20 	andeq	sp, r6, r0, lsr #20
    2574:	02790100 	rsbseq	r0, r9, #0, 2
    2578:	0000d925 	andeq	sp, r0, r5, lsr #18
    257c:	0008c600 	andeq	ip, r8, r0, lsl #12
    2580:	75622b00 	strbvc	r2, [r2, #-2816]!	; 0xfffff500
    2584:	79010066 	stmdbvc	r1, {r1, r2, r5, r6}
    2588:	01f63602 	mvnseq	r3, r2, lsl #12
    258c:	08e40000 	stmiaeq	r4!, {}^	; <UNPREDICTABLE>
    2590:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    2594:	01006e65 	tsteq	r0, r5, ror #28
    2598:	d9400279 	stmdble	r0, {r0, r3, r4, r5, r6, r9}^
    259c:	02000000 	andeq	r0, r0, #0
    25a0:	22000009 	andcs	r0, r0, #9
    25a4:	00746572 	rsbseq	r6, r4, r2, ror r5
    25a8:	07027b01 	streq	r7, [r2, -r1, lsl #22]
    25ac:	000000ef 	andeq	r0, r0, pc, ror #1
    25b0:	00000922 	andeq	r0, r0, r2, lsr #18
    25b4:	09011f00 	stmdbeq	r1, {r8, r9, sl, fp, ip}
    25b8:	0100000b 	tsteq	r0, fp
    25bc:	01060269 	tsteq	r6, r9, ror #4
    25c0:	00001018 	andeq	r1, r0, r8, lsl r0
    25c4:	0000103c 	andeq	r1, r0, ip, lsr r0
    25c8:	09cf9c01 	stmibeq	pc, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    25cc:	722b0000 	eorvc	r0, fp, #0
    25d0:	69010066 	stmdbvs	r1, {r1, r2, r5, r6}
    25d4:	04541e02 	ldrbeq	r1, [r4], #-3586	; 0xfffff1fe
    25d8:	09560000 	ldmdbeq	r6, {}^	; <UNPREDICTABLE>
    25dc:	6c2b0000 	stcvs	0, cr0, [fp], #-0
    25e0:	0100636f 	tsteq	r0, pc, ror #6
    25e4:	8d260269 	sfmhi	f0, 4, [r6, #-420]!	; 0xfffffe5c
    25e8:	7f000000 	svcvc	0x00000000
    25ec:	00000009 	andeq	r0, r0, r9
    25f0:	0c1c011f 	ldfeqs	f0, [ip], {31}
    25f4:	5f010000 	svcpl	0x00010000
    25f8:	00010602 	andeq	r0, r1, r2, lsl #12
    25fc:	00000000 	andeq	r0, r0, r0
    2600:	01000000 	mrseq	r0, (UNDEF: 0)
    2604:	000a169c 	muleq	sl, ip, r6
    2608:	0b572000 	bleq	15ca610 <__ccfg+0x15aa668>
    260c:	5f010000 	svcpl	0x00010000
    2610:	01f61902 	mvnseq	r1, r2, lsl #18
    2614:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
    2618:	63320000 	teqvs	r2, #0
    261c:	025f0100 	subseq	r0, pc, #0, 2
    2620:	0001fc24 	andeq	pc, r1, r4, lsr #24
    2624:	2b510100 	blcs	1442a2c <__ccfg+0x1422a84>
    2628:	5f01006e 	svcpl	0x0001006e
    262c:	008d2b02 	addeq	r2, sp, r2, lsl #22
    2630:	09c60000 	stmibeq	r6, {}^	; <UNPREDICTABLE>
    2634:	1f000000 	svcne	0x00000000
    2638:	000bd901 	andeq	sp, fp, r1, lsl #18
    263c:	02590100 	subseq	r0, r9, #0, 2
    2640:	10020106 	andne	r0, r2, r6, lsl #2
    2644:	10160000 	andsne	r0, r6, r0
    2648:	9c010000 	stcls	0, cr0, [r1], {-0}
    264c:	00000a61 	andeq	r0, r0, r1, ror #20
    2650:	000b5720 	andeq	r5, fp, r0, lsr #14
    2654:	02590100 	subseq	r0, r9, #0, 2
    2658:	0001f619 	andeq	pc, r1, r9, lsl r6	; <UNPREDICTABLE>
    265c:	0009d900 	andeq	sp, r9, r0, lsl #18
    2660:	72732b00 	rsbsvc	r2, r3, #0, 22
    2664:	59010063 	stmdbpl	r1, {r0, r1, r5, r6}
    2668:	070e2b02 	streq	r2, [lr, -r2, lsl #22]
    266c:	09ec0000 	stmibeq	ip!, {}^	; <UNPREDICTABLE>
    2670:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    2674:	02590100 	subseq	r0, r9, #0, 2
    2678:	00008d34 	andeq	r8, r0, r4, lsr sp
    267c:	000a0a00 	andeq	r0, sl, r0, lsl #20
    2680:	011f0000 	tsteq	pc, r0
    2684:	00000c4d 	andeq	r0, r0, sp, asr #24
    2688:	06025401 	streq	r5, [r2], -r1, lsl #8
    268c:	00000001 	andeq	r0, r0, r1
    2690:	00000000 	andeq	r0, r0, r0
    2694:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    2698:	2b00000a 	blcs	26c8 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x98>
    269c:	54010064 	strpl	r0, [r1], #-100	; 0xffffff9c
    26a0:	01f61a02 	mvnseq	r1, r2, lsl #20
    26a4:	0a1d0000 	beq	7426ac <__ccfg+0x722704>
    26a8:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    26ac:	02540100 	subseq	r0, r4, #0, 2
    26b0:	00070e29 	andeq	r0, r7, r9, lsr #28
    26b4:	000a3000 	andeq	r3, sl, r0
    26b8:	006e3200 	rsbeq	r3, lr, r0, lsl #4
    26bc:	30025401 	andcc	r5, r2, r1, lsl #8
    26c0:	0000008d 	andeq	r0, r0, sp, lsl #1
    26c4:	1f005201 	svcne	0x00005201
    26c8:	000b2001 	andeq	r2, fp, r1
    26cc:	024e0100 	subeq	r0, lr, #0, 2
    26d0:	00000106 	andeq	r0, r0, r6, lsl #2
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    26dc:	00000ade 	ldrdeq	r0, [r0], -lr
    26e0:	0100642b 	tsteq	r0, fp, lsr #8
    26e4:	f619024e 			; <UNDEFINED> instruction: 0xf619024e
    26e8:	43000001 	movwmi	r0, #1
    26ec:	2b00000a 	blcs	271c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xec>
    26f0:	4e010073 	mcrmi	0, 0, r0, cr1, cr3, {3}
    26f4:	070e2802 	streq	r2, [lr, -r2, lsl #16]
    26f8:	0a610000 	beq	1842700 <__ccfg+0x1822758>
    26fc:	1f000000 	svcne	0x00000000
    2700:	000c2801 	andeq	r2, ip, r1, lsl #16
    2704:	02470100 	subeq	r0, r7, #0, 2
    2708:	00000106 	andeq	r0, r0, r6, lsl #2
    270c:	00000000 	andeq	r0, r0, r0
    2710:	9c010000 	stcls	0, cr0, [r1], {-0}
    2714:	00000b25 	andeq	r0, r0, r5, lsr #22
    2718:	0100642b 	tsteq	r0, fp, lsr #8
    271c:	f61a0247 			; <UNDEFINED> instruction: 0xf61a0247
    2720:	74000001 	strvc	r0, [r0], #-1
    2724:	2b00000a 	blcs	2754 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x124>
    2728:	47010073 	smlsdxmi	r1, r3, r0, r0
    272c:	070e2902 	streq	r2, [lr, -r2, lsl #18]
    2730:	0a920000 	beq	fe482738 <_estack+0xde47d738>
    2734:	6e2b0000 	cdpvs	0, 2, cr0, cr11, cr0, {0}
    2738:	02470100 	subeq	r0, r7, #0, 2
    273c:	00008d30 	andeq	r8, r0, r0, lsr sp
    2740:	000aa500 	andeq	sl, sl, r0, lsl #10
    2744:	011f0000 	tsteq	pc, r0
    2748:	00000a0a 	andeq	r0, r0, sl, lsl #20
    274c:	06024201 	streq	r4, [r2], -r1, lsl #4
    2750:	00000001 	andeq	r0, r0, r1
    2754:	00000000 	andeq	r0, r0, r0
    2758:	5d9c0100 	ldfpls	f0, [ip]
    275c:	2b00000b 	blcs	2790 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x160>
    2760:	42010064 	andmi	r0, r1, #100	; 0x64
    2764:	01f61902 	mvnseq	r1, r2, lsl #18
    2768:	0ab80000 	beq	fee02770 <_estack+0xdedfd770>
    276c:	732b0000 			; <UNDEFINED> instruction: 0x732b0000
    2770:	02420100 	subeq	r0, r2, #0, 2
    2774:	00070e28 	andeq	r0, r7, r8, lsr #28
    2778:	000acb00 	andeq	ip, sl, r0, lsl #22
    277c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    2780:	00000ac0 	andeq	r0, r0, r0, asr #21
    2784:	05023901 	streq	r3, [r2, #-2305]	; 0xfffff6ff
    2788:	00008d01 	andeq	r8, r0, r1, lsl #26
    278c:	000ff400 	andeq	pc, pc, r0, lsl #8
    2790:	00100200 	andseq	r0, r0, r0, lsl #4
    2794:	999c0100 	ldmibls	ip, {r8}
    2798:	2b00000b 	blcs	27cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x19c>
    279c:	39010073 	stmdbcc	r1, {r0, r1, r4, r5, r6}
    27a0:	070e1e02 	streq	r1, [lr, -r2, lsl #28]
    27a4:	0ae90000 	beq	ffa427ac <_estack+0xdfa3d7ac>
    27a8:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    27ac:	023b0100 	eorseq	r0, fp, #0, 2
    27b0:	00008d06 	andeq	r8, r0, r6, lsl #26
    27b4:	000b0700 	andeq	r0, fp, r0, lsl #14
    27b8:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    27bc:	00000ad9 	ldrdeq	r0, [r0], -r9
    27c0:	06022d01 	streq	r2, [r2], -r1, lsl #26
    27c4:	0000d901 	andeq	sp, r0, r1, lsl #18
	...
    27d0:	e69c0100 	ldr	r0, [ip], r0, lsl #2
    27d4:	2b00000b 	blcs	2808 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x1d8>
    27d8:	006e7566 	rsbeq	r7, lr, r6, ror #10
    27dc:	18022d01 	stmdane	r2, {r0, r8, sl, fp, sp}
    27e0:	000002f1 	strdeq	r0, [r0], -r1
    27e4:	00000b1a 	andeq	r0, r0, sl, lsl fp
    27e8:	01006922 	tsteq	r0, r2, lsr #18
    27ec:	160e022f 	strne	r0, [lr], -pc, lsr #4
    27f0:	38000004 	stmdacc	r0, {r2}
    27f4:	2200000b 	andcs	r0, r0, #11
    27f8:	30010063 	andcc	r0, r1, r3, rrx
    27fc:	00d90702 	sbcseq	r0, r9, r2, lsl #14
    2800:	0b560000 	bleq	1582808 <__ccfg+0x1562860>
    2804:	2c000000 	stccs	0, cr0, [r0], {-0}
    2808:	000ada01 	andeq	sp, sl, r1, lsl #20
    280c:	021f0100 	andseq	r0, pc, #0, 2
    2810:	011d0107 	tsteq	sp, r7, lsl #2
    2814:	0fd00000 	svceq	0x00d00000
    2818:	0ff40000 	svceq	0x00f40000
    281c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2820:	00000c22 	andeq	r0, r0, r2, lsr #24
    2824:	6e75662b 	cdpvs	6, 7, cr6, cr5, cr11, {1}
    2828:	021f0100 	andseq	r0, pc, #0, 2
    282c:	0002f118 	andeq	pc, r2, r8, lsl r1	; <UNPREDICTABLE>
    2830:	000b6900 	andeq	r6, fp, r0, lsl #18
    2834:	00692300 	rsbeq	r2, r9, r0, lsl #6
    2838:	0e022101 	adfeqs	f2, f2, f1
    283c:	00000416 	andeq	r0, r0, r6, lsl r4
    2840:	2c005001 	stccs	0, cr5, [r0], {1}
    2844:	000bcb01 	andeq	ip, fp, r1, lsl #22
    2848:	02130100 	andseq	r0, r3, #0, 2
    284c:	02f10109 	rscseq	r0, r1, #1073741826	; 0x40000002
	...
    2858:	9c010000 	stcls	0, cr0, [r1], {-0}
    285c:	00000c60 	andeq	r0, r0, r0, ror #24
    2860:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2864:	02130100 	andseq	r0, r3, #0, 2
    2868:	00011d18 	andeq	r1, r1, r8, lsl sp
    286c:	000b9200 	andeq	r9, fp, r0, lsl #4
    2870:	00692200 	rsbeq	r2, r9, r0, lsl #4
    2874:	0e021501 	cfsh32eq	mvfx1, mvfx2, #1
    2878:	00000416 	andeq	r0, r0, r6, lsl r4
    287c:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
    2880:	92011f00 	andls	r1, r1, #0, 30
    2884:	0100000b 	tsteq	r0, fp
    2888:	010601f5 	strdeq	r0, [r6, -r5]
	...
    2894:	0cc99c01 	stcleq	12, cr9, [r9], {1}
    2898:	662b0000 	strtvs	r0, [fp], -r0
    289c:	01006e75 	tsteq	r0, r5, ror lr
    28a0:	f11701f5 			; <UNDEFINED> instruction: 0xf11701f5
    28a4:	ce000002 	cdpgt	0, 0, cr0, cr0, cr2, {0}
    28a8:	2200000b 	andcs	r0, r0, #11
    28ac:	006c6572 	rsbeq	r6, ip, r2, ror r5
    28b0:	0a01f901 	beq	80cbc <__ccfg+0x60d14>
    28b4:	000000cd 	andeq	r0, r0, sp, asr #1
    28b8:	00000bec 	andeq	r0, r0, ip, ror #23
    28bc:	01006922 	tsteq	r0, r2, lsr #18
    28c0:	160e01fa 			; <UNDEFINED> instruction: 0x160e01fa
    28c4:	ff000004 			; <UNDEFINED> instruction: 0xff000004
    28c8:	2200000b 	andcs	r0, r0, #11
    28cc:	fa01006a 	blx	42a7c <__ccfg+0x22ad4>
    28d0:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    28d4:	0c330000 	ldceq	0, cr0, [r3], #-0
    28d8:	6b220000 	blvs	8828e0 <__ccfg+0x862938>
    28dc:	01fa0100 	mvnseq	r0, r0, lsl #2
    28e0:	00041616 	andeq	r1, r4, r6, lsl r6
    28e4:	000c5100 	andeq	r5, ip, r0, lsl #2
    28e8:	011f0000 	tsteq	pc, r0
    28ec:	00000a3f 	andeq	r0, r0, pc, lsr sl
    28f0:	0601d901 	streq	sp, [r1], -r1, lsl #18
    28f4:	00117001 	andseq	r7, r1, r1
    28f8:	0011c000 	andseq	ip, r1, r0
    28fc:	0e9c0100 	fmleqe	f0, f4, f0
    2900:	2b00000d 	blcs	293c <NOROM_ChipInfo_GetHwRevision+0x28>
    2904:	00646970 	rsbeq	r6, r4, r0, ror r9
    2908:	1201d901 	andne	sp, r1, #16384	; 0x4000
    290c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2910:	00000c6f 	andeq	r0, r0, pc, ror #24
    2914:	01006922 	tsteq	r0, r2, lsr #18
    2918:	160e01dd 			; <UNDEFINED> instruction: 0x160e01dd
    291c:	a3000004 	movwge	r0, #4
    2920:	2400000c 	strcs	r0, [r0], #-12
    2924:	dd01006a 	stcle	0, cr0, [r1, #-424]	; 0xfffffe58
    2928:	04161201 	ldreq	r1, [r6], #-513	; 0xfffffdff
    292c:	2a000000 	bcs	2934 <NOROM_ChipInfo_GetHwRevision+0x20>
    2930:	00000a03 	andeq	r0, r0, r3, lsl #20
    2934:	0d01c401 	cfstrseq	mvf12, [r1, #-4]
    2938:	000d4801 	andeq	r4, sp, r1, lsl #16
    293c:	000d8400 	andeq	r8, sp, r0, lsl #8
    2940:	639c0100 	orrsvs	r0, ip, #0, 2
    2944:	3200000d 	andcc	r0, r0, #13
    2948:	00646970 	rsbeq	r6, r4, r0, ror r9
    294c:	2101c401 	tstcs	r1, r1, lsl #8
    2950:	00000416 	andeq	r0, r0, r6, lsl r4
    2954:	002d5001 	eoreq	r5, sp, r1
    2958:	0100000c 	tsteq	r0, ip
    295c:	1d0801c8 	stfnes	f0, [r8, #-800]	; 0xfffffce0
    2960:	cc000001 	stcgt	0, cr0, [r0], {1}
    2964:	2200000c 	andcs	r0, r0, #12
    2968:	c901006a 	stmdbgt	r1, {r1, r3, r5, r6}
    296c:	008d0601 	addeq	r0, sp, r1, lsl #12
    2970:	0cdf0000 	ldcleq	0, cr0, [pc], {0}
    2974:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2978:	01ca0100 	biceq	r0, sl, r0, lsl #2
    297c:	0004160e 	andeq	r1, r4, lr, lsl #12
    2980:	00520100 	subseq	r0, r2, r0, lsl #2
    2984:	0bd3012c 	bleq	ff4c2e3c <_estack+0xdf4bde3c>
    2988:	b3010000 	movwlt	r0, #4096	; 0x1000
    298c:	d9010601 	stmdble	r1, {r0, r9, sl}
	...
    2998:	01000000 	mrseq	r0, (UNDEF: 0)
    299c:	000da19c 	muleq	sp, ip, r1
    29a0:	69702b00 	ldmdbvs	r0!, {r8, r9, fp, sp}^
    29a4:	b3010064 	movwlt	r0, #4196	; 0x1064
    29a8:	011d1301 	tsteq	sp, r1, lsl #6
    29ac:	0cf20000 	ldcleq	0, cr0, [r2]
    29b0:	69220000 	stmdbvs	r2!, {}	; <UNPREDICTABLE>
    29b4:	01b50100 			; <UNDEFINED> instruction: 0x01b50100
    29b8:	0004160e 	andeq	r1, r4, lr, lsl #12
    29bc:	000d1000 	andeq	r1, sp, r0
    29c0:	01330000 	teqeq	r3, r0
    29c4:	00000a22 	andeq	r0, r0, r2, lsr #20
    29c8:	0601a801 	streq	sl, [r1], -r1, lsl #16
    29cc:	00000001 	andeq	r0, r0, r1
    29d0:	00000000 	andeq	r0, r0, r0
    29d4:	1f9c0100 	svcne	0x009c0100
    29d8:	00188a01 	andseq	r8, r8, r1, lsl #20
    29dc:	019a0100 	orrseq	r0, sl, r0, lsl #2
    29e0:	0f980106 	svceq	0x00980106
    29e4:	0fd00000 	svceq	0x00d00000
    29e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29ec:	00000df0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    29f0:	0100642b 	tsteq	r0, fp, lsr #8
    29f4:	d912019a 	ldmdble	r2, {r1, r3, r4, r7, r8}
    29f8:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    29fc:	2000000d 	andcs	r0, r0, sp
    2a00:	00000b70 	andeq	r0, r0, r0, ror fp
    2a04:	1a019a01 	bne	69210 <__ccfg+0x49268>
    2a08:	000000d9 	ldrdeq	r0, [r0], -r9
    2a0c:	00000d41 	andeq	r0, r0, r1, asr #26
    2a10:	35012c00 	strcc	r2, [r1, #-3072]	; 0xfffff400
    2a14:	0100000c 	tsteq	r0, ip
    2a18:	01070188 	smlabbeq	r7, r8, r1, r0
    2a1c:	0000011d 	andeq	r0, r0, sp, lsl r1
    2a20:	00000f74 	andeq	r0, r0, r4, ror pc
    2a24:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
    2a28:	0e3e9c01 	cdpeq	12, 3, cr9, cr14, cr1, {0}
    2a2c:	702b0000 	eorvc	r0, fp, r0
    2a30:	01006469 	tsteq	r0, r9, ror #8
    2a34:	1d180188 	ldfnes	f0, [r8, #-544]	; 0xfffffde0
    2a38:	54000001 	strpl	r0, [r0], #-1
    2a3c:	2b00000d 	blcs	2a78 <NOROM_OSCClockSourceGet+0x54>
    2a40:	01007473 	tsteq	r0, r3, ror r4
    2a44:	d9220188 	stmdble	r2!, {r3, r7, r8}
    2a48:	7d000000 	stcvc	0, cr0, [r0, #-0]
    2a4c:	2200000d 	andcs	r0, r0, #13
    2a50:	8a010069 	bhi	42bfc <__ccfg+0x22c54>
    2a54:	04160e01 	ldreq	r0, [r6], #-3585	; 0xfffff1ff
    2a58:	0d9b0000 	ldceq	0, cr0, [fp]
    2a5c:	1f000000 	svcne	0x00000000
    2a60:	000afb01 	andeq	pc, sl, r1, lsl #22
    2a64:	01780100 	cmneq	r8, r0, lsl #2
    2a68:	00000106 	andeq	r0, r0, r6, lsl #2
    2a6c:	00000000 	andeq	r0, r0, r0
    2a70:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a74:	00000e96 	muleq	r0, r6, lr
    2a78:	6469702b 	strbtvs	r7, [r9], #-43	; 0xffffffd5
    2a7c:	01780100 	cmneq	r8, r0, lsl #2
    2a80:	00011d1b 	andeq	r1, r1, fp, lsl sp
    2a84:	000db900 	andeq	fp, sp, r0, lsl #18
    2a88:	0b622000 	bleq	188aa90 <__ccfg+0x186aae8>
    2a8c:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2a90:	011d2601 	tsteq	sp, r1, lsl #12
    2a94:	0dcc0000 	stcleq	0, cr0, [ip]
    2a98:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2a9c:	017c0100 	cmneq	ip, r0, lsl #2
    2aa0:	0004160e 	andeq	r1, r4, lr, lsl #12
    2aa4:	22500100 	subscs	r0, r0, #0, 2
    2aa8:	7d01006a 	stcvc	0, cr0, [r1, #-424]	; 0xfffffe58
    2aac:	008d0701 	addeq	r0, sp, r1, lsl #14
    2ab0:	0dea0000 	stcleq	0, cr0, [sl]
    2ab4:	1f000000 	svcne	0x00000000
    2ab8:	000ab301 	andeq	fp, sl, r1, lsl #6
    2abc:	01660100 	cmneq	r6, r0, lsl #2
    2ac0:	0f400106 	svceq	0x00400106
    2ac4:	0f740000 	svceq	0x00740000
    2ac8:	9c010000 	stcls	0, cr0, [r1], {-0}
    2acc:	00000edb 	ldrdeq	r0, [r0], -fp
    2ad0:	000b6234 	andeq	r6, fp, r4, lsr r2
    2ad4:	01660100 	cmneq	r6, r0, lsl #2
    2ad8:	00011d1a 	andeq	r1, r1, sl, lsl sp
    2adc:	22500100 	subscs	r0, r0, #0, 2
    2ae0:	6a01006a 	bvs	42c90 <__ccfg+0x22ce8>
    2ae4:	008d0601 	addeq	r0, sp, r1, lsl #12
    2ae8:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
    2aec:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
    2af0:	016b0100 	cmneq	fp, r0, lsl #2
    2af4:	0004160e 	andeq	r1, r4, lr, lsl #12
    2af8:	00520100 	subseq	r0, r2, r0, lsl #2
    2afc:	0b76012e 	bleq	1d82fbc <__ccfg+0x1d63014>
    2b00:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2b04:	01010601 	tsteq	r1, r1, lsl #12
    2b08:	00000f11 	andeq	r0, r0, r1, lsl pc
    2b0c:	000b6235 	andeq	r6, fp, r5, lsr r2
    2b10:	01590100 	cmpeq	r9, r0, lsl #2
    2b14:	00011d17 	andeq	r1, r1, r7, lsl sp
    2b18:	0b703500 	bleq	1c0ff20 <__ccfg+0x1beff78>
    2b1c:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2b20:	00d92301 	sbcseq	r2, r9, r1, lsl #6
    2b24:	6a240000 	bvs	902b2c <__ccfg+0x8e2b84>
    2b28:	015d0100 	cmpeq	sp, r0, lsl #2
    2b2c:	0000ef07 	andeq	lr, r0, r7, lsl #30
    2b30:	011f0000 	tsteq	pc, r0
    2b34:	00000aee 	andeq	r0, r0, lr, ror #21
    2b38:	06015301 	streq	r5, [r1], -r1, lsl #6
    2b3c:	000ef801 	andeq	pc, lr, r1, lsl #16
    2b40:	000f0c00 	andeq	r0, pc, r0, lsl #24
    2b44:	3c9c0100 	ldfccs	f0, [ip], {0}
    2b48:	2000000f 	andcs	r0, r0, pc
    2b4c:	00000b70 	andeq	r0, r0, r0, ror fp
    2b50:	14015301 	strne	r5, [r1], #-769	; 0xfffffcff
    2b54:	000000d9 	ldrdeq	r0, [r0], -r9
    2b58:	00000e1b 	andeq	r0, r0, fp, lsl lr
    2b5c:	35012c00 	strcc	r2, [r1, #-3072]	; 0xfffff400
    2b60:	0100000a 	tsteq	r0, sl
    2b64:	0107012c 	tsteq	r7, ip, lsr #2
    2b68:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b6c:	00001268 	andeq	r1, r0, r8, ror #4
    2b70:	0000129c 	muleq	r0, ip, r2
    2b74:	0f9e9c01 	svceq	0x009e9c01
    2b78:	0f200000 	svceq	0x00200000
    2b7c:	0100000b 	tsteq	r0, fp
    2b80:	f11a012c 			; <UNDEFINED> instruction: 0xf11a012c
    2b84:	2e000002 	cdpcs	0, 0, cr0, cr0, cr2, {0}
    2b88:	2000000e 	andcs	r0, r0, lr
    2b8c:	00000f2e 	andeq	r0, r0, lr, lsr #30
    2b90:	26012c01 	strcs	r2, [r1], -r1, lsl #24
    2b94:	0000011d 	andeq	r0, r0, sp, lsl r1
    2b98:	00000e4c 	andeq	r0, r0, ip, asr #28
    2b9c:	01006923 	tsteq	r0, r3, lsr #18
    2ba0:	160e012e 	strne	r0, [lr], -lr, lsr #2
    2ba4:	01000004 	tsteq	r0, r4
    2ba8:	06203650 			; <UNDEFINED> instruction: 0x06203650
    2bac:	6a220000 	bvs	882bb4 <__ccfg+0x862c0c>
    2bb0:	013d0100 	teqeq	sp, r0, lsl #2
    2bb4:	0004160f 	andeq	r1, r4, pc, lsl #12
    2bb8:	000e6a00 	andeq	r6, lr, r0, lsl #20
    2bbc:	37000000 	strcc	r0, [r0, -r0]
    2bc0:	000bb301 	andeq	fp, fp, r1, lsl #6
    2bc4:	06af0100 	strteq	r0, [pc], r0, lsl #2
    2bc8:	0fe30101 	svceq	0x00e30101
    2bcc:	6d380000 	ldcvs	0, cr0, [r8, #-0]
    2bd0:	01006e69 	tsteq	r0, r9, ror #28
    2bd4:	00d91aaf 	sbcseq	r1, r9, pc, lsr #21
    2bd8:	b0390000 	eorslt	r0, r9, r0
    2bdc:	01000007 	tsteq	r0, r7
    2be0:	00cd27af 	sbceq	r2, sp, pc, lsr #15
    2be4:	693a0000 	ldmdbvs	sl!, {}	; <UNPREDICTABLE>
    2be8:	0ebd0100 	frdeqe	f0, f5, f0
    2bec:	00000416 	andeq	r0, r0, r6, lsl r4
    2bf0:	0100643a 	tsteq	r0, sl, lsr r4
    2bf4:	00d907be 	ldrheq	r0, [r9], #126	; 0x7e
    2bf8:	4d3b0000 	ldcmi	0, cr0, [fp, #-0]
    2bfc:	01004b4f 	tsteq	r0, pc, asr #22
    2c00:	00010109 	andeq	r0, r1, r9, lsl #2
    2c04:	0bf0013c 	bleq	ffc030fc <_estack+0xdfbfe0fc>
    2c08:	a7010000 	strge	r0, [r1, -r0]
    2c0c:	00000106 	andeq	r0, r0, r6, lsl #2
    2c10:	00000000 	andeq	r0, r0, r0
    2c14:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c18:	00001018 	andeq	r1, r0, r8, lsl r0
    2c1c:	0100743d 	tsteq	r0, sp, lsr r4
    2c20:	01291fa7 			; <UNDEFINED> instruction: 0x01291fa7
    2c24:	0e930000 	cdpeq	0, 9, cr0, cr3, cr0, {0}
    2c28:	763d0000 	ldrtvc	r0, [sp], -r0
    2c2c:	27a70100 	strcs	r0, [r7, r0, lsl #2]!
    2c30:	000000d9 	ldrdeq	r0, [r0], -r9
    2c34:	00000ea6 	andeq	r0, r0, r6, lsr #29
    2c38:	3f013c00 	svccc	0x00013c00
    2c3c:	0100000c 	tsteq	r0, ip
    2c40:	0001068f 	andeq	r0, r1, pc, lsl #13
    2c44:	00000000 	andeq	r0, r0, r0
    2c48:	01000000 	mrseq	r0, (UNDEF: 0)
    2c4c:	00104e9c 	mulseq	r0, ip, lr
    2c50:	74753d00 	ldrbtvc	r3, [r5], #-3328	; 0xfffff300
    2c54:	1d8f0100 	stfnes	f0, [pc]	; 2c5c <port_confs+0x5c>
    2c58:	00000129 	andeq	r0, r0, r9, lsr #2
    2c5c:	00000eb9 			; <UNDEFINED> instruction: 0x00000eb9
    2c60:	0100693e 	tsteq	r0, lr, lsr r9
    2c64:	008d0693 	umulleq	r0, sp, r3, r6
    2c68:	0ed70000 	cdpeq	0, 13, cr0, cr7, cr0, {0}
    2c6c:	3c000000 	stccc	0, cr0, [r0], {-0}
    2c70:	000a5501 	andeq	r5, sl, r1, lsl #10
    2c74:	067f0100 	ldrbteq	r0, [pc], -r0, lsl #2
    2c78:	00000001 	andeq	r0, r0, r1
    2c7c:	00000000 	andeq	r0, r0, r0
    2c80:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    2c84:	3d000010 	stccc	0, cr0, [r0, #-64]	; 0xffffffc0
    2c88:	01007475 	tsteq	r0, r5, ror r4
    2c8c:	01291a7f 			; <UNDEFINED> instruction: 0x01291a7f
    2c90:	0ef50000 	cdpeq	0, 15, cr0, cr5, cr0, {0}
    2c94:	693e0000 	ldmdbvs	lr!, {}	; <UNPREDICTABLE>
    2c98:	06830100 	streq	r0, [r3], r0, lsl #2
    2c9c:	0000008d 	andeq	r0, r0, sp, lsl #1
    2ca0:	00000f1e 	andeq	r0, r0, lr, lsl pc
    2ca4:	68013f00 	stmdavs	r1, {r8, r9, sl, fp, ip, sp}
    2ca8:	0100000b 	tsteq	r0, fp
    2cac:	1c01067b 	stcne	6, cr0, [r1], {123}	; 0x7b
    2cb0:	2c00000e 	stccs	0, cr0, [r0], {14}
    2cb4:	0100000e 	tsteq	r0, lr
    2cb8:	0b14409c 	bleq	512f30 <__ccfg+0x4f2f88>
    2cbc:	5f010000 	svcpl	0x00010000
    2cc0:	04160114 	ldreq	r0, [r6], #-276	; 0xfffffeec
    2cc4:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2cc8:	38000010 	stmdacc	r0, {r4}
    2ccc:	00646970 	rsbeq	r6, r4, r0, ror r9
    2cd0:	1d225f01 	stcne	15, cr5, [r2, #-4]!
    2cd4:	3a000001 	bcc	2ce0 <__exidx_end+0x60>
    2cd8:	61010069 	tstvs	r1, r9, rrx
    2cdc:	00041617 	andeq	r1, r4, r7, lsl r6
    2ce0:	60410000 	subvs	r0, r1, r0
    2ce4:	0200000a 	andeq	r0, r0, #10
    2ce8:	0101029e 			; <UNDEFINED> instruction: 0x0101029e
    2cec:	000010e2 	andeq	r1, r0, r2, ror #1
    2cf0:	0010e203 	andseq	lr, r0, r3, lsl #4
    2cf4:	07203500 	streq	r3, [r0, -r0, lsl #10]!
    2cf8:	9e020000 	cdpls	0, 0, cr0, cr2, cr0, {0}
    2cfc:	00731302 	rsbseq	r1, r3, r2, lsl #6
    2d00:	02000000 	andeq	r0, r0, #0
    2d04:	0ba70201 	bleq	fe9c3510 <_estack+0xde9be510>
    2d08:	98420000 	stmdals	r2, {}^	; <UNPREDICTABLE>
    2d0c:	00000010 	andeq	r0, r0, r0, lsl r0
    2d10:	00000000 	andeq	r0, r0, r0
    2d14:	01000000 	mrseq	r0, (UNDEF: 0)
    2d18:	00112e9c 	mulseq	r1, ip, lr
    2d1c:	10aa4300 	adcne	r4, sl, r0, lsl #6
    2d20:	0f3c0000 	svceq	0x003c0000
    2d24:	b6440000 	strblt	r0, [r4], -r0
    2d28:	65000010 	strvs	r0, [r0, #-16]
    2d2c:	4500000f 	strmi	r0, [r0, #-15]
    2d30:	00001098 	muleq	r0, r8, r0
	...
    2d3c:	43145f01 	tstmi	r4, #1, 30
    2d40:	000010aa 	andeq	r1, r0, sl, lsr #1
    2d44:	00000f83 	andeq	r0, r0, r3, lsl #31
    2d48:	0010b646 	andseq	fp, r0, r6, asr #12
    2d4c:	42000000 	andmi	r0, r0, #0
    2d50:	00000f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    2d54:	00000e2c 	andeq	r0, r0, ip, lsr #28
    2d58:	00000ef8 	strdeq	r0, [r0], -r8
    2d5c:	119a9c01 	orrsne	r9, sl, r1, lsl #24
    2d60:	ad430000 	stclge	0, cr0, [r3, #-0]
    2d64:	9600000f 	strls	r0, [r0], -pc
    2d68:	4300000f 	movwmi	r0, #15
    2d6c:	00000fb9 			; <UNDEFINED> instruction: 0x00000fb9
    2d70:	00000fa9 	andeq	r0, r0, r9, lsr #31
    2d74:	000fc546 	andeq	ip, pc, r6, asr #10
    2d78:	0fcf4600 	svceq	0x00cf4600
    2d7c:	9e470000 	cdpls	0, 4, cr0, cr7, cr0, {0}
    2d80:	3a00000f 	bcc	2dc4 <__exidx_end+0x144>
    2d84:	0800000e 	stmdaeq	r0, {r1, r2, r3}
    2d88:	01000006 	tsteq	r0, r6
    2d8c:	b92906af 	stmdblt	r9!, {r0, r1, r2, r3, r5, r7, r9, sl}
    2d90:	4300000f 	movwmi	r0, #15
    2d94:	00000fad 	andeq	r0, r0, sp, lsr #31
    2d98:	00000fbc 			; <UNDEFINED> instruction: 0x00000fbc
    2d9c:	00060836 	andeq	r0, r6, r6, lsr r8
    2da0:	0fc54400 	svceq	0x00c54400
    2da4:	0fe50000 	svceq	0x00e50000
    2da8:	cf460000 	svcgt	0x00460000
    2dac:	4800000f 	stmdami	r0, {r0, r1, r2, r3}
    2db0:	00000fd9 	ldrdeq	r0, [r0], -r9
    2db4:	00000ed6 	ldrdeq	r0, [r0], -r6
    2db8:	42000000 	andmi	r0, r0, #0
    2dbc:	00000edb 	ldrdeq	r0, [r0], -fp
    2dc0:	00000f0c 	andeq	r0, r0, ip, lsl #30
    2dc4:	00000f40 	andeq	r0, r0, r0, asr #30
    2dc8:	11ee9c01 	mvnne	r9, r1, lsl #24
    2dcc:	eb430000 	bl	10c2dd4 <__ccfg+0x10a2e2c>
    2dd0:	0300000e 	movweq	r0, #14
    2dd4:	43000010 	movwmi	r0, #16
    2dd8:	00000ef8 	strdeq	r0, [r0], -r8
    2ddc:	00001021 	andeq	r1, r0, r1, lsr #32
    2de0:	000f0546 	andeq	r0, pc, r6, asr #10
    2de4:	0edb4900 	vfnmseq.f16	s9, s22, s0	; <UNPREDICTABLE>
    2de8:	0f1e0000 	svceq	0x001e0000
    2dec:	0f260000 	svceq	0x00260000
    2df0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    2df4:	eb430601 	bl	10c4600 <__ccfg+0x10a4658>
    2df8:	3f00000e 	svccc	0x0000000e
    2dfc:	43000010 	movwmi	r0, #16
    2e00:	00000ef8 	strdeq	r0, [r0], -r8
    2e04:	00001052 	andeq	r1, r0, r2, asr r0
    2e08:	000f0546 	andeq	r0, pc, r6, asr #10
    2e0c:	4a000000 	bmi	2e14 <__exidx_end+0x194>
    2e10:	00000880 	andeq	r0, r0, r0, lsl #17
    2e14:	00001128 	andeq	r1, r0, r8, lsr #2
    2e18:	00001170 	andeq	r1, r0, r0, ror r1
    2e1c:	90439c01 	subls	r9, r3, r1, lsl #24
    2e20:	65000008 	strvs	r0, [r0, #-8]
    2e24:	49000010 	stmdbmi	r0, {r4}
    2e28:	00000880 	andeq	r0, r0, r0, lsl #17
    2e2c:	00001134 	andeq	r1, r0, r4, lsr r1
    2e30:	0000113c 	andeq	r1, r0, ip, lsr r1
    2e34:	06037c01 	streq	r7, [r3], -r1, lsl #24
    2e38:	00089043 	andeq	r9, r8, r3, asr #32
    2e3c:	00108300 	andseq	r8, r0, r0, lsl #6
    2e40:	00000000 	andeq	r0, r0, r0
    2e44:	00001333 	andeq	r1, r0, r3, lsr r3
    2e48:	0c420003 	mcrreq	0, 0, r0, r2, cr3
    2e4c:	01040000 	mrseq	r0, (UNDEF: 4)
    2e50:	0000015f 	andeq	r0, r0, pc, asr r1
    2e54:	000c8e0c 	andeq	r8, ip, ip, lsl #28
    2e58:	0000c000 	andeq	ip, r0, r0
    2e5c:	00081000 	andeq	r1, r8, r0
    2e60:	00000000 	andeq	r0, r0, r0
    2e64:	00297b00 	eoreq	r7, r9, r0, lsl #22
    2e68:	06010200 	streq	r0, [r1], -r0, lsl #4
    2e6c:	00000392 	muleq	r0, r2, r3
    2e70:	cc050202 	sfmgt	f0, 4, [r5], {2}
    2e74:	02000003 	andeq	r0, r0, #3
    2e78:	009d0504 	addseq	r0, sp, r4, lsl #10
    2e7c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2e80:	00009805 	andeq	r9, r0, r5, lsl #16
    2e84:	21eb0300 	mvncs	r0, r0, lsl #6
    2e88:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    2e8c:	00004d18 	andeq	r4, r0, r8, lsl sp
    2e90:	08010200 	stmdaeq	r1, {r9}
    2e94:	00000390 	muleq	r0, r0, r3
    2e98:	0020d903 	eoreq	sp, r0, r3, lsl #18
    2e9c:	19310200 	ldmdbne	r1!, {r9}
    2ea0:	00000060 	andeq	r0, r0, r0, rrx
    2ea4:	60070202 	andvs	r0, r7, r2, lsl #4
    2ea8:	03000002 	movweq	r0, #2
    2eac:	000017a2 	andeq	r1, r0, r2, lsr #15
    2eb0:	73193402 	tstvc	r9, #33554432	; 0x2000000
    2eb4:	02000000 	andeq	r0, r0, #0
    2eb8:	00720704 	rsbseq	r0, r2, r4, lsl #14
    2ebc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    2ec0:	00006d07 	andeq	r6, r0, r7, lsl #26
    2ec4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    2ec8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2ecc:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    2ed0:	03000000 	movweq	r0, #0
    2ed4:	00000b35 	andeq	r0, r0, r5, lsr fp
    2ed8:	9b1b2803 	blls	6cceec <__ccfg+0x6acf44>
    2edc:	05000000 	streq	r0, [r0, #-0]
    2ee0:	00000a4b 	andeq	r0, r0, fp, asr #20
    2ee4:	b3000d04 	movwlt	r0, #3332	; 0xd04
    2ee8:	06000000 	streq	r0, [r0], -r0
    2eec:	00000beb 	andeq	r0, r0, fp, ror #23
    2ef0:	000000b3 	strheq	r0, [r0], -r3
    2ef4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    2ef8:	0a4d0304 	beq	1343b10 <__ccfg+0x1323b68>
    2efc:	63030000 	movwvs	r0, #12288	; 0x3000
    2f00:	00008f18 	andeq	r8, r0, r8, lsl pc
    2f04:	03ec0300 	mvneq	r0, #0, 6
    2f08:	26040000 	strcs	r0, [r4], -r0
    2f0c:	00004112 	andeq	r4, r0, r2, lsl r1
    2f10:	15af0300 	strne	r0, [pc, #768]!	; 3218 <__exidx_end+0x598>
    2f14:	27040000 	strcs	r0, [r4, -r0]
    2f18:	00005412 	andeq	r5, r0, r2, lsl r4
    2f1c:	00cd0800 	sbceq	r0, sp, r0, lsl #16
    2f20:	cd090000 	stcgt	0, cr0, [r9, #-0]
    2f24:	03000000 	movweq	r0, #0
    2f28:	000013a7 	andeq	r1, r0, r7, lsr #7
    2f2c:	41122b04 	tstmi	r2, r4, lsl #22
    2f30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2f34:	000000e3 	andeq	r0, r0, r3, ror #1
    2f38:	0000e308 	andeq	lr, r0, r8, lsl #6
    2f3c:	16000300 	strne	r0, [r0], -r0, lsl #6
    2f40:	2c040000 	stccs	0, cr0, [r4], {-0}
    2f44:	00006712 	andeq	r6, r0, r2, lsl r7
    2f48:	00f90800 	rscseq	r0, r9, r0, lsl #16
    2f4c:	96030000 	strls	r0, [r3], -r0
    2f50:	04000002 	streq	r0, [r0], #-2
    2f54:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    2f58:	51030000 	mrspl	r0, (UNDEF: 3)
    2f5c:	04000007 	streq	r0, [r0], #-7
    2f60:	0122102e 			; <UNDEFINED> instruction: 0x0122102e
    2f64:	040a0000 	streq	r0, [sl], #-0
    2f68:	000000cd 	andeq	r0, r0, sp, asr #1
    2f6c:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    2f70:	0001b609 	andeq	fp, r1, r9, lsl #12
    2f74:	02b10c00 	adcseq	r0, r1, #0, 24
    2f78:	34040000 	strcc	r0, [r4], #-0
    2f7c:	0000e307 	andeq	lr, r0, r7, lsl #6
    2f80:	07010100 	streq	r0, [r1, -r0, lsl #2]
    2f84:	00910c00 	addseq	r0, r1, r0, lsl #24
    2f88:	35040000 	strcc	r0, [r4, #-0]
    2f8c:	0000e303 	andeq	lr, r0, r3, lsl #6
    2f90:	06010100 	streq	r0, [r1], -r0, lsl #2
    2f94:	02880c00 	addeq	r0, r8, #0, 24
    2f98:	36040000 	strcc	r0, [r4], -r0
    2f9c:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fa0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fa4:	03fb0c00 	mvnseq	r0, #0, 24
    2fa8:	37040000 	strcc	r0, [r4, -r0]
    2fac:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fb0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    2fb4:	03f40c00 	mvnseq	r0, #0, 24
    2fb8:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    2fbc:	0000e303 	andeq	lr, r0, r3, lsl #6
    2fc0:	00040100 	andeq	r0, r4, r0, lsl #2
    2fc4:	03e50d00 	mvneq	r0, #0, 26
    2fc8:	3a040000 	bcc	102fd0 <__ccfg+0xe3028>
    2fcc:	0000e307 	andeq	lr, r0, r7, lsl #6
    2fd0:	400d0100 	andmi	r0, sp, r0, lsl #2
    2fd4:	04000000 	streq	r0, [r0], #-0
    2fd8:	00e3033c 	rsceq	r0, r3, ip, lsr r3
    2fdc:	0d020000 	stceq	0, cr0, [r2, #-0]
    2fe0:	00000066 	andeq	r0, r0, r6, rrx
    2fe4:	e3033d04 	movw	r3, #15620	; 0x3d04
    2fe8:	03000000 	movweq	r0, #0
    2fec:	0001430d 	andeq	r4, r1, sp, lsl #6
    2ff0:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    2ff4:	000000f9 	strdeq	r0, [r0], -r9
    2ff8:	23030004 	movwcs	r0, #12292	; 0x3004
    2ffc:	04000004 	streq	r0, [r0], #-4
    3000:	01280341 			; <UNDEFINED> instruction: 0x01280341
    3004:	b6090000 	strlt	r0, [r9], -r0
    3008:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    300c:	000002a5 	andeq	r0, r0, r5, lsr #5
    3010:	c21a4304 	andsgt	r4, sl, #4, 6	; 0x10000000
    3014:	01000001 	tsteq	r0, r1
    3018:	02fc0e01 	rscseq	r0, ip, #1, 28
    301c:	45040000 	strmi	r0, [r4, #-0]
    3020:	0001e30e 	andeq	lr, r1, lr, lsl #6
    3024:	0a010100 	beq	4342c <__ccfg+0x23484>
    3028:	0001e904 	andeq	lr, r1, r4, lsl #18
    302c:	08010200 	stmdaeq	r1, {r9}
    3030:	00000399 	muleq	r0, r9, r3
    3034:	0001e908 	andeq	lr, r1, r8, lsl #18
    3038:	030a0e00 	movweq	r0, #44544	; 0xae00
    303c:	45040000 	strmi	r0, [r4, #-0]
    3040:	0001e31e 	andeq	lr, r1, lr, lsl r3
    3044:	0b010100 	bleq	4344c <__ccfg+0x234a4>
    3048:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    304c:	00000234 	andeq	r0, r0, r4, lsr r2
    3050:	0002c10d 	andeq	ip, r2, sp, lsl #2
    3054:	0b900500 	bleq	fe40445c <_estack+0xde3ff45c>
    3058:	00000067 	andeq	r0, r0, r7, rrx
    305c:	05dc0d00 	ldrbeq	r0, [ip, #3328]	; 0xd00
    3060:	91050000 	mrsls	r0, (UNDEF: 5)
    3064:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3068:	600d0400 	andvs	r0, sp, r0, lsl #8
    306c:	05000004 	streq	r0, [r0, #-4]
    3070:	00ef1092 	smlaleq	r1, pc, r2, r0	; <UNPREDICTABLE>
    3074:	00060000 	andeq	r0, r6, r0
    3078:	00040203 	andeq	r0, r4, r3, lsl #4
    307c:	03930500 	orrseq	r0, r3, #0, 10
    3080:	00000203 	andeq	r0, r0, r3, lsl #4
    3084:	0002340f 	andeq	r3, r2, pc, lsl #8
    3088:	00024b00 	andeq	r4, r2, r0, lsl #22
    308c:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    3090:	00000036 	andeq	r0, r0, r6, lsr r0
    3094:	400f9905 	andmi	r9, pc, r5, lsl #18
    3098:	01000002 	tsteq	r0, r2
    309c:	f4040a01 	vst1.8	{d0-d1}, [r4], r1
    30a0:	0b000000 	bleq	30a8 <__exidx_end+0x428>
    30a4:	09910601 	ldmibeq	r1, {r0, r9, sl}
    30a8:	00000289 	andeq	r0, r0, r9, lsl #5
    30ac:	0004530c 	andeq	r5, r4, ip, lsl #6
    30b0:	07930600 	ldreq	r0, [r3, r0, lsl #12]
    30b4:	000000e3 	andeq	r0, r0, r3, ror #1
    30b8:	00010701 	andeq	r0, r1, r1, lsl #14
    30bc:	0000310c 	andeq	r3, r0, ip, lsl #2
    30c0:	03940600 	orrseq	r0, r4, #0, 12
    30c4:	000000e3 	andeq	r0, r0, r3, ror #1
    30c8:	00000101 	andeq	r0, r0, r1, lsl #2
    30cc:	02730300 	rsbseq	r0, r3, #0, 6
    30d0:	96060000 	strls	r0, [r6], -r0
    30d4:	00025f03 	andeq	r5, r2, r3, lsl #30
    30d8:	02890800 	addeq	r0, r9, #0, 16
    30dc:	950f0000 	strls	r0, [pc, #-0]	; 30e4 <__exidx_end+0x464>
    30e0:	a5000002 	strge	r0, [r0, #-2]
    30e4:	10000002 	andne	r0, r0, r2
    30e8:	029a0800 	addseq	r0, sl, #0, 16
    30ec:	dc0e0000 	stcle	0, cr0, [lr], {-0}
    30f0:	06000002 	streq	r0, [r0], -r2
    30f4:	02a5179c 	adceq	r1, r5, #156, 14	; 0x2700000
    30f8:	01010000 	mrseq	r0, (UNDEF: 1)
    30fc:	0000d90f 	andeq	sp, r0, pc, lsl #18
    3100:	0002c300 	andeq	ip, r2, r0, lsl #6
    3104:	08001000 	stmdaeq	r0, {ip}
    3108:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    310c:	0003820e 	andeq	r8, r3, lr, lsl #4
    3110:	13060700 	movwne	r0, #26368	; 0x6700
    3114:	000002c3 	andeq	r0, r0, r3, asr #5
    3118:	230e0101 	movwcs	r0, #57601	; 0xe101
    311c:	05000001 	streq	r0, [r0, #-1]
    3120:	00f90ec3 	rscseq	r0, r9, r3, asr #29
    3124:	01010000 	mrseq	r0, (UNDEF: 1)
    3128:	00046d11 	andeq	r6, r4, r1, lsl sp
    312c:	016e0800 	cmneq	lr, r0, lsl #16
    3130:	0002f110 	andeq	pc, r2, r0, lsl r1	; <UNPREDICTABLE>
    3134:	f7040a00 			; <UNDEFINED> instruction: 0xf7040a00
    3138:	12000002 	andne	r0, r0, #2
    313c:	00030301 	andeq	r0, r3, r1, lsl #6
    3140:	00cd1300 	sbceq	r1, sp, r0, lsl #6
    3144:	0f000000 	svceq	0x00000000
    3148:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    314c:	0000030e 	andeq	r0, r0, lr, lsl #6
    3150:	03080010 	movweq	r0, #32784	; 0x8010
    3154:	14000003 	strne	r0, [r0], #-3
    3158:	00000433 	andeq	r0, r0, r3, lsr r4
    315c:	16017f08 	strne	r7, [r1], -r8, lsl #30
    3160:	0000030e 	andeq	r0, r0, lr, lsl #6
    3164:	7a140101 	bvc	503570 <__ccfg+0x4e35c8>
    3168:	08000003 	stmdaeq	r0, {r0, r1}
    316c:	05140182 	ldreq	r0, [r4, #-386]	; 0xfffffe7e
    3170:	01000001 	tsteq	r0, r1
    3174:	09040b01 	stmdbeq	r4, {r0, r8, r9, fp}
    3178:	03550908 	cmpeq	r5, #8, 18	; 0x20000
    317c:	ad0d0000 	stcge	0, cr0, [sp, #-0]
    3180:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    3184:	00cd070f 	sbceq	r0, sp, pc, lsl #14
    3188:	0d000000 	stceq	0, cr0, [r0, #-0]
    318c:	00000e2b 	andeq	r0, r0, fp, lsr #28
    3190:	cd031009 	stcgt	0, cr1, [r3, #-36]	; 0xffffffdc
    3194:	02000000 	andeq	r0, r0, #0
    3198:	0e9b0300 	cdpeq	3, 9, cr0, cr11, cr0, {0}
    319c:	11090000 	mrsne	r0, (UNDEF: 9)
    31a0:	00033103 	andeq	r3, r3, r3, lsl #2
    31a4:	09200b00 	stmdbeq	r0!, {r8, r9, fp}
    31a8:	03d30916 	bicseq	r0, r3, #360448	; 0x58000
    31ac:	8b0d0000 	blhi	3431b4 <__ccfg+0x32320c>
    31b0:	0900000e 	stmdbeq	r0, {r1, r2, r3}
    31b4:	03ed0817 	mvneq	r0, #1507328	; 0x170000
    31b8:	0d000000 	stceq	0, cr0, [r0, #-0]
    31bc:	00000d93 	muleq	r0, r3, sp
    31c0:	08081809 	stmdaeq	r8, {r0, r3, fp, ip}
    31c4:	04000004 	streq	r0, [r0], #-4
    31c8:	000dfb0d 	andeq	pc, sp, sp, lsl #22
    31cc:	08190900 	ldmdaeq	r9, {r8, fp}
    31d0:	0000043e 	andeq	r0, r0, lr, lsr r4
    31d4:	0e490d08 	cdpeq	13, 4, cr0, cr9, cr8, {0}
    31d8:	1a090000 	bne	2431e0 <__ccfg+0x223238>
    31dc:	00045908 	andeq	r5, r4, r8, lsl #18
    31e0:	ba0d0c00 	blt	3461e8 <__ccfg+0x326240>
    31e4:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    31e8:	046f081b 	strbteq	r0, [pc], #-2075	; 31f0 <__exidx_end+0x570>
    31ec:	0d100000 	ldceq	0, cr0, [r0, #-0]
    31f0:	00000e93 	muleq	r0, r3, lr
    31f4:	6f081c09 	svcvs	0x00081c09
    31f8:	14000004 	strne	r0, [r0], #-4
    31fc:	000dd20d 	andeq	sp, sp, sp, lsl #4
    3200:	081d0900 	ldmdaeq	sp, {r8, fp}
    3204:	0000046f 	andeq	r0, r0, pc, ror #8
    3208:	0d050d18 	stceq	13, cr0, [r5, #-96]	; 0xffffffa0
    320c:	1e090000 	cdpne	0, 0, cr0, cr9, cr0, {0}
    3210:	00008106 	andeq	r8, r0, r6, lsl #2
    3214:	15001c00 	strne	r1, [r0, #-3072]	; 0xfffff400
    3218:	00008101 	andeq	r8, r0, r1, lsl #2
    321c:	0003ed00 	andeq	lr, r3, r0, lsl #26
    3220:	00811300 	addeq	r1, r1, r0, lsl #6
    3224:	81130000 	tsthi	r3, r0
    3228:	13000000 	movwne	r0, #0
    322c:	000000b5 	strheq	r0, [r0], -r5
    3230:	d3040a00 	movwle	r0, #18944	; 0x4a00
    3234:	15000003 	strne	r0, [r0, #-3]
    3238:	00008101 	andeq	r8, r0, r1, lsl #2
    323c:	00040800 	andeq	r0, r4, r0, lsl #16
    3240:	00811300 	addeq	r1, r1, r0, lsl #6
    3244:	81130000 	tsthi	r3, r0
    3248:	00000000 	andeq	r0, r0, r0
    324c:	03f3040a 	mvnseq	r0, #167772160	; 0xa000000
    3250:	01150000 	tsteq	r5, r0
    3254:	00000081 	andeq	r0, r0, r1, lsl #1
    3258:	00000432 	andeq	r0, r0, r2, lsr r4
    325c:	00008113 	andeq	r8, r0, r3, lsl r1
    3260:	01161300 	tsteq	r6, r0, lsl #6
    3264:	81130000 	tsthi	r3, r0
    3268:	13000000 	movwne	r0, #0
    326c:	00000432 	andeq	r0, r0, r2, lsr r4
    3270:	00043813 	andeq	r3, r4, r3, lsl r8
    3274:	040a0000 	streq	r0, [sl], #-0
    3278:	00000081 	andeq	r0, r0, r1, lsl #1
    327c:	0355040a 	cmpeq	r5, #167772160	; 0xa000000
    3280:	040a0000 	streq	r0, [sl], #-0
    3284:	0000040e 	andeq	r0, r0, lr, lsl #8
    3288:	00810115 	addeq	r0, r1, r5, lsl r1
    328c:	04590000 	ldrbeq	r0, [r9], #-0
    3290:	16130000 	ldrne	r0, [r3], -r0
    3294:	13000001 	movwne	r0, #1
    3298:	00000438 	andeq	r0, r0, r8, lsr r4
    329c:	44040a00 	strmi	r0, [r4], #-2560	; 0xfffff600
    32a0:	15000004 	strne	r0, [r0, #-4]
    32a4:	00008101 	andeq	r8, r0, r1, lsl #2
    32a8:	00046f00 	andeq	r6, r4, r0, lsl #30
    32ac:	01161300 	tsteq	r6, r0, lsl #6
    32b0:	0a000000 	beq	32b8 <__exidx_end+0x638>
    32b4:	00045f04 	andeq	r5, r4, r4, lsl #30
    32b8:	0cf00300 	ldcleq	3, cr0, [r0]
    32bc:	1f090000 	svcne	0x00090000
    32c0:	00036103 	andeq	r6, r3, r3, lsl #2
    32c4:	04750800 	ldrbteq	r0, [r5], #-2048	; 0xfffff800
    32c8:	50160000 	andspl	r0, r6, r0
    32cc:	0800000d 	stmdaeq	r0, {r0, r2, r3}
    32d0:	ae082409 	cdpge	4, 0, cr2, cr8, cr9, {0}
    32d4:	0d000004 	stceq	0, cr0, [r0, #-16]
    32d8:	00000ce1 	andeq	r0, r0, r1, ror #25
    32dc:	ae182509 	cfmul32ge	mvfx2, mvfx8, mvfx9
    32e0:	00000004 	andeq	r0, r0, r4
    32e4:	000c640d 	andeq	r6, ip, sp, lsl #8
    32e8:	06260900 	strteq	r0, [r6], -r0, lsl #18
    32ec:	000004ae 	andeq	r0, r0, lr, lsr #9
    32f0:	040a0004 	streq	r0, [sl], #-4
    32f4:	00000486 	andeq	r0, r0, r6, lsl #9
    32f8:	000d5e03 	andeq	r5, sp, r3, lsl #28
    32fc:	1e290900 	vmulne.f16	s0, s18, s0	; <UNPREDICTABLE>
    3300:	00000486 	andeq	r0, r0, r6, lsl #9
    3304:	000ebd03 	andeq	fp, lr, r3, lsl #26
    3308:	1e2a0900 	vmulne.f16	s0, s20, s0	; <UNPREDICTABLE>
    330c:	00000486 	andeq	r0, r0, r6, lsl #9
    3310:	3f09020b 	svccc	0x0009020b
    3314:	00053602 	andeq	r3, r5, r2, lsl #12
    3318:	0e300c00 	cdpeq	12, 3, cr0, cr0, cr0, {0}
    331c:	40090000 	andmi	r0, r9, r0
    3320:	0000cd09 	andeq	ip, r0, r9, lsl #26
    3324:	0f010200 	svceq	0x00010200
    3328:	0f0f0c00 	svceq	0x000f0c00
    332c:	41090000 	mrsmi	r0, (UNDEF: 9)
    3330:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3334:	0e010200 	cdpeq	2, 0, cr0, cr1, cr0, {0}
    3338:	0d800c00 	stceq	12, cr0, [r0]
    333c:	42090000 	andmi	r0, r9, #0
    3340:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3344:	0d010200 	sfmeq	f0, 4, [r1, #-0]
    3348:	0e510c00 	cdpeq	12, 5, cr0, cr1, cr0, {0}
    334c:	43090000 	movwmi	r0, #36864	; 0x9000
    3350:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3354:	06070200 	streq	r0, [r7], -r0, lsl #4
    3358:	0ecb0c00 	cdpeq	12, 12, cr0, cr11, cr0, {0}
    335c:	44090000 	strmi	r0, [r9], #-0
    3360:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3364:	03030200 	movweq	r0, #12800	; 0x3200
    3368:	0e1d0c00 	cdpeq	12, 1, cr0, cr13, cr0, {0}
    336c:	45090000 	strmi	r0, [r9, #-0]
    3370:	0000cd04 	andeq	ip, r0, r4, lsl #26
    3374:	00030200 	andeq	r0, r3, r0, lsl #4
    3378:	02170000 	andseq	r0, r7, #0
    337c:	56093d09 	strpl	r3, [r9], -r9, lsl #26
    3380:	18000005 	stmdane	r0, {r0, r2}
    3384:	00000d87 	andeq	r0, r0, r7, lsl #27
    3388:	cd073e09 	stcgt	14, cr3, [r7, #-36]	; 0xffffffdc
    338c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    3390:	46090062 	strmi	r0, [r9], -r2, rrx
    3394:	0004cc04 	andeq	ip, r4, r4, lsl #24
    3398:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    339c:	0900000c 	stmdbeq	r0, {r2, r3}
    33a0:	05360347 	ldreq	r0, [r6, #-839]!	; 0xfffffcb9
    33a4:	08170000 	ldmdaeq	r7, {}	; <UNPREDICTABLE>
    33a8:	84055009 	strhi	r5, [r5], #-9
    33ac:	18000005 	stmdane	r0, {r0, r2}
    33b0:	00000ef1 	strdeq	r0, [r0], -r1
    33b4:	b4105109 	ldrlt	r5, [r0], #-265	; 0xfffffef7
    33b8:	18000004 	stmdane	r0, {r2}
    33bc:	00000ddf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    33c0:	550b5209 	strpl	r5, [fp, #-521]	; 0xfffffdf7
    33c4:	00000003 	andeq	r0, r0, r3
    33c8:	000f0016 	andeq	r0, pc, r6, lsl r0	; <UNPREDICTABLE>
    33cc:	4c090c00 	stcmi	12, cr0, [r9], {-0}
    33d0:	0005b708 	andeq	fp, r5, r8, lsl #14
    33d4:	00751a00 	rsbseq	r1, r5, r0, lsl #20
    33d8:	62075809 	andvs	r5, r7, #589824	; 0x90000
    33dc:	00000005 	andeq	r0, r0, r5
    33e0:	000ed20d 	andeq	sp, lr, sp, lsl #4
    33e4:	07630900 	strbeq	r0, [r3, -r0, lsl #18]!
    33e8:	000000cd 	andeq	r0, r0, sp, asr #1
    33ec:	0eb20d08 	cdpeq	13, 11, cr0, cr2, cr8, {0}
    33f0:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    33f4:	00055610 	andeq	r5, r5, r0, lsl r6
    33f8:	03000a00 	movweq	r0, #2560	; 0xa00
    33fc:	00000d6c 	andeq	r0, r0, ip, ror #26
    3400:	841f7909 	ldrhi	r7, [pc], #-2313	; 3408 <__exidx_end+0x788>
    3404:	0b000005 	bleq	3420 <__exidx_end+0x7a0>
    3408:	097b090c 	ldmdbeq	fp!, {r2, r3, r8, fp}^
    340c:	000005e7 	andeq	r0, r0, r7, ror #11
    3410:	000dcb0d 	andeq	ip, sp, sp, lsl #22
    3414:	117f0900 	cmnne	pc, r0, lsl #18
    3418:	000004c0 	andeq	r0, r0, r0, asr #9
    341c:	0e800d00 	cdpeq	13, 8, cr0, cr0, cr0, {0}
    3420:	83090000 	movwhi	r0, #36864	; 0x9000
    3424:	00055611 	andeq	r5, r5, r1, lsl r6
    3428:	03000800 	movweq	r0, #2048	; 0x800
    342c:	00000e0d 	andeq	r0, r0, sp, lsl #28
    3430:	c3039209 	movwgt	r9, #12809	; 0x3209
    3434:	14000005 	strne	r0, [r0], #-5
    3438:	00000458 	andeq	r0, r0, r8, asr r4
    343c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    3440:	000000f9 	strdeq	r0, [r0], -r9
    3444:	081b0101 	ldmdaeq	fp, {r0, r8}
    3448:	09030308 	stmdbeq	r3, {r3, r8, r9}
    344c:	00000629 	andeq	r0, r0, r9, lsr #12
    3450:	0021e31c 	eoreq	lr, r1, ip, lsl r3
    3454:	03070800 	movweq	r0, #30720	; 0x7800
    3458:	0000cd07 	andeq	ip, r0, r7, lsl #26
    345c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
    3460:	08000005 	stmdaeq	r0, {r0, r2}
    3464:	0a080308 	beq	20408c <__ccfg+0x1e40e4>
    3468:	04000001 	streq	r0, [r0], #-1
    346c:	02531100 	subseq	r1, r3, #0, 2
    3470:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3474:	06020303 	streq	r0, [r2], -r3, lsl #6
    3478:	7c1d0000 	ldcvc	0, cr0, [sp], {-0}
    347c:	30000004 	andcc	r0, r0, r4
    3480:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    3484:	00000699 	muleq	r0, r9, r6
    3488:	0004751c 	andeq	r7, r4, ip, lsl r5
    348c:	03140800 	tsteq	r4, #0, 16
    3490:	0000cd08 	andeq	ip, r0, r8, lsl #26
    3494:	cb1c0000 	blgt	70349c <__ccfg+0x6e34f4>
    3498:	08000002 	stmdaeq	r0, {r1}
    349c:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    34a0:	02000000 	andeq	r0, r0, #0
    34a4:	0004701c 	andeq	r7, r4, ip, lsl r0
    34a8:	03160800 	tsteq	r6, #0, 16
    34ac:	0002e40b 	andeq	lr, r2, fp, lsl #8
    34b0:	2e1c0400 	cfmulscs	mvf0, mvf12, mvf0
    34b4:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    34b8:	0a090317 	beq	24411c <__ccfg+0x224174>
    34bc:	08000001 	stmdaeq	r0, {r0}
    34c0:	00042c1c 	andeq	r2, r4, ip, lsl ip
    34c4:	03180800 	tsteq	r8, #0, 16
    34c8:	0006990f 	andeq	r9, r6, pc, lsl #18
    34cc:	c61c0c00 	ldrgt	r0, [ip], -r0, lsl #24
    34d0:	08000002 	stmdaeq	r0, {r1}
    34d4:	a9150319 	ldmdbge	r5, {r0, r3, r4, r8, r9}
    34d8:	2c000006 	stccs	0, cr0, [r0], {6}
    34dc:	06290f00 	strteq	r0, [r9], -r0, lsl #30
    34e0:	06a90000 	strteq	r0, [r9], r0
    34e4:	881e0000 	ldmdahi	lr, {}	; <UNPREDICTABLE>
    34e8:	03000000 	movweq	r0, #0
    34ec:	36040a00 	strcc	r0, [r4], -r0, lsl #20
    34f0:	11000006 	tstne	r0, r6
    34f4:	00000487 	andeq	r0, r0, r7, lsl #9
    34f8:	1b031c08 	blne	ca520 <__ccfg+0xaa578>
    34fc:	00000636 	andeq	r0, r0, r6, lsr r6
    3500:	00037014 	andeq	r7, r3, r4, lsl r0
    3504:	031e0800 	tsteq	lr, #0, 16
    3508:	0006cb14 	andeq	ip, r6, r4, lsl fp
    350c:	0a010100 	beq	43914 <__ccfg+0x2396c>
    3510:	0006af04 	andeq	sl, r6, r4, lsl #30
    3514:	04a00e00 	strteq	r0, [r0], #3584	; 0xe00
    3518:	1d0a0000 	stcne	0, cr0, [sl, #-0]
    351c:	0000cd13 	andeq	ip, r0, r3, lsl sp
    3520:	0e010100 	adfeqs	f0, f1, f0
    3524:	0000070a 	andeq	r0, r0, sl, lsl #14
    3528:	de1a1e0a 	cdple	14, 1, cr1, cr10, cr10, {0}
    352c:	01000000 	mrseq	r0, (UNDEF: 0)
    3530:	089a0e01 	ldmeq	sl, {r0, r9, sl, fp}
    3534:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    3538:	0000de24 	andeq	sp, r0, r4, lsr #28
    353c:	0e010100 	adfeqs	f0, f1, f0
    3540:	000005c9 	andeq	r0, r0, r9, asr #11
    3544:	cb14220a 	blgt	50bd74 <__ccfg+0x4ebdcc>
    3548:	01000006 	tsteq	r0, r6
    354c:	0ce60301 	stcleq	3, cr0, [r6], #4
    3550:	0e0b0000 	cdpeq	0, 0, cr0, cr11, cr0, {0}
    3554:	0007150f 	andeq	r1, r7, pc, lsl #10
    3558:	1b040a00 	blne	105d60 <__ccfg+0xe5db8>
    355c:	15000007 	strne	r0, [r0, #-7]
    3560:	00008101 	andeq	r8, r0, r1, lsl #2
    3564:	00073000 	andeq	r3, r7, r0
    3568:	00811300 	addeq	r1, r1, r0, lsl #6
    356c:	16130000 	ldrne	r0, [r3], -r0
    3570:	00000001 	andeq	r0, r0, r1
    3574:	0007400f 	andeq	r4, r7, pc
    3578:	00074000 	andeq	r4, r7, r0
    357c:	00881e00 	addeq	r1, r8, r0, lsl #28
    3580:	00070000 	andeq	r0, r7, r0
    3584:	05e7040a 	strbeq	r0, [r7, #1034]!	; 0x40a
    3588:	9b1f0000 	blls	7c3590 <__ccfg+0x7a35e8>
    358c:	0c00000d 	stceq	0, cr0, [r0], {13}
    3590:	0730150d 	ldreq	r1, [r0, -sp, lsl #10]!
    3594:	03050000 	movweq	r0, #20480	; 0x5000
    3598:	00000000 	andeq	r0, r0, r0
    359c:	0007090f 	andeq	r0, r7, pc, lsl #18
    35a0:	00076800 	andeq	r6, r7, r0, lsl #16
    35a4:	00881e00 	addeq	r1, r8, r0, lsl #28
    35a8:	00020000 	andeq	r0, r2, r0
    35ac:	000e221f 	andeq	r2, lr, pc, lsl r2
    35b0:	14130c00 	ldrne	r0, [r3], #-3072	; 0xfffff400
    35b4:	00000758 	andeq	r0, r0, r8, asr r7
    35b8:	00000305 	andeq	r0, r0, r5, lsl #6
    35bc:	8a0f0000 	bhi	3c35c4 <__ccfg+0x3a361c>
    35c0:	8a000007 	bhi	35e4 <__exidx_end+0x964>
    35c4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    35c8:	00000088 	andeq	r0, r0, r8, lsl #1
    35cc:	040a0002 	streq	r0, [sl], #-2
    35d0:	000004c0 	andeq	r0, r0, r0, asr #9
    35d4:	000d481f 	andeq	r4, sp, pc, lsl r8
    35d8:	13190c00 	tstne	r9, #0, 24
    35dc:	0000077a 	andeq	r0, r0, sl, ror r7
    35e0:	00000305 	andeq	r0, r0, r5, lsl #6
    35e4:	810f0000 	mrshi	r0, CPSR
    35e8:	b2000000 	andlt	r0, r0, #0
    35ec:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    35f0:	00000088 	andeq	r0, r0, r8, lsl #1
    35f4:	201f0002 	andscs	r0, pc, r2
    35f8:	0c00000d 	stceq	0, cr0, [r0], {13}
    35fc:	07a20f1e 			; <UNDEFINED> instruction: 0x07a20f1e
    3600:	03050000 	movweq	r0, #20480	; 0x5000
    3604:	00000000 	andeq	r0, r0, r0
    3608:	0007d40f 	andeq	sp, r7, pc, lsl #8
    360c:	0007d400 	andeq	sp, r7, r0, lsl #8
    3610:	00881e00 	addeq	r1, r8, r0, lsl #28
    3614:	00020000 	andeq	r0, r2, r0
    3618:	0481040a 	streq	r0, [r1], #1034	; 0x40a
    361c:	f81f0000 			; <UNDEFINED> instruction: 0xf81f0000
    3620:	0c00000e 	stceq	0, cr0, [r0], {14}
    3624:	07c41b23 	strbeq	r1, [r4, r3, lsr #22]
    3628:	03050000 	movweq	r0, #20480	; 0x5000
    362c:	00000000 	andeq	r0, r0, r0
    3630:	0e400120 	dvfeqsp	f0, f0, f0
    3634:	0d010000 	stceq	0, cr0, [r1, #-0]
    3638:	f0010105 			; <UNDEFINED> instruction: 0xf0010105
    363c:	f2000013 	vqadd.s8	d0, d0, d3
    3640:	01000013 	tsteq	r0, r3, lsl r0
    3644:	2f01219c 	svccs	0x0001219c
    3648:	0100000d 	tsteq	r0, sp
    364c:	01010505 	tsteq	r1, r5, lsl #10
    3650:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    365c:	08639c01 	stmdaeq	r3!, {r0, sl, fp, ip, pc}^
    3660:	70220000 	eorvc	r0, r2, r0
    3664:	01007968 	tsteq	r0, r8, ror #18
    3668:	812d0505 			; <UNDEFINED> instruction: 0x812d0505
    366c:	96000000 	strls	r0, [r0], -r0
    3670:	23000010 	movwcs	r0, #16
    3674:	0000114e 	andeq	r1, r0, lr, asr #2
    3678:	00000000 	andeq	r0, r0, r0
    367c:	000007f8 	strdeq	r0, [r0], -r8
    3680:	09050a01 	stmdbeq	r5, {r0, r9, fp}
    3684:	00116024 	andseq	r6, r1, r4, lsr #32
    3688:	0010b400 	andseq	fp, r0, r0, lsl #8
    368c:	07f82500 	ldrbeq	r2, [r8, r0, lsl #10]!
    3690:	6b260000 	blvs	983698 <__ccfg+0x9636f0>
    3694:	c7000011 	smladgt	r0, r1, r0, r0
    3698:	26000010 			; <UNDEFINED> instruction: 0x26000010
    369c:	00001176 	andeq	r1, r0, r6, ror r1
    36a0:	000010e5 	andeq	r1, r0, r5, ror #1
    36a4:	27000000 	strcs	r0, [r0, -r0]
    36a8:	000e7501 	andeq	r7, lr, r1, lsl #10
    36ac:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    36b0:	00000101 	andeq	r0, r0, r1, lsl #2
    36b4:	00000000 	andeq	r0, r0, r0
    36b8:	9c010000 	stcls	0, cr0, [r1], {-0}
    36bc:	0000089d 	muleq	r0, sp, r8
    36c0:	746b7022 	strbtvc	r7, [fp], #-34	; 0xffffffde
    36c4:	04fa0100 	ldrbteq	r0, [sl], #256	; 0x100
    36c8:	00011630 	andeq	r1, r1, r0, lsr r6
    36cc:	00110f00 	andseq	r0, r1, r0, lsl #30
    36d0:	00622800 	rsbeq	r2, r2, r0, lsl #16
    36d4:	0c04fe01 	stceq	14, cr15, [r4], {1}
    36d8:	0000089d 	muleq	r0, sp, r8
    36dc:	0000112d 	andeq	r1, r0, sp, lsr #2
    36e0:	b7040a00 	strlt	r0, [r4, -r0, lsl #20]
    36e4:	21000005 	tstcs	r0, r5
    36e8:	000c7701 	andeq	r7, ip, r1, lsl #14
    36ec:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    36f0:	01160101 	tsteq	r6, r1, lsl #2
	...
    36fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    3700:	000008f1 	strdeq	r0, [r0], -r1
    3704:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3708:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    370c:	0000812f 	andeq	r8, r0, pc, lsr #2
    3710:	00114b00 	andseq	r4, r1, r0, lsl #22
    3714:	716f2800 	cmnvc	pc, r0, lsl #16
    3718:	04ed0100 	strbteq	r0, [sp], #256	; 0x100
    371c:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3720:	00116900 	andseq	r6, r1, r0, lsl #18
    3724:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3728:	0c04ee01 	stceq	14, cr14, [r4], {1}
    372c:	0000089d 	muleq	r0, sp, r8
    3730:	0000117c 	andeq	r1, r0, ip, ror r1
    3734:	fa012100 	blx	4bb3c <__ccfg+0x2bb94>
    3738:	0100000c 	tsteq	r0, ip
    373c:	010104d2 	ldrdeq	r0, [r1, -r2]
    3740:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    374c:	09509c01 	ldmdbeq	r0, {r0, sl, fp, ip, pc}^
    3750:	70220000 	eorvc	r0, r2, r0
    3754:	01007968 	tsteq	r0, r8, ror #18
    3758:	812f04d2 	ldrdhi	r0, [pc, -r2]!
    375c:	9b000000 	blls	3764 <__exidx_end+0xae4>
    3760:	22000011 	andcs	r0, r0, #17
    3764:	006e656c 	rsbeq	r6, lr, ip, ror #10
    3768:	3904d201 	stmdbcc	r4, {r0, r9, ip, lr, pc}
    376c:	00000432 	andeq	r0, r0, r2, lsr r4
    3770:	000011b9 			; <UNDEFINED> instruction: 0x000011b9
    3774:	00716f28 	rsbseq	r6, r1, r8, lsr #30
    3778:	0b04d701 	bleq	139384 <__ccfg+0x1193dc>
    377c:	0000078a 	andeq	r0, r0, sl, lsl #15
    3780:	000011d7 	ldrdeq	r1, [r0], -r7
    3784:	01006228 	tsteq	r0, r8, lsr #4
    3788:	9d0c04d8 	cfstrsls	mvf0, [ip, #-864]	; 0xfffffca0
    378c:	f5000008 			; <UNDEFINED> instruction: 0xf5000008
    3790:	00000011 	andeq	r0, r0, r1, lsl r0
    3794:	0ee60121 	cdpeq	1, 14, cr0, cr6, cr1, {1}
    3798:	a1010000 	mrsge	r0, (UNDEF: 1)
    379c:	81010104 	tsthi	r1, r4, lsl #2
	...
    37a8:	01000000 	mrseq	r0, (UNDEF: 0)
    37ac:	0009eb9c 	muleq	r9, ip, fp
    37b0:	68702200 	ldmdavs	r0!, {r9, sp}^
    37b4:	a1010079 	tstge	r1, r9, ror r0
    37b8:	00812b04 	addeq	r2, r1, r4, lsl #22
    37bc:	121f0000 	andsne	r0, pc, #0
    37c0:	70220000 	eorvc	r0, r2, r0
    37c4:	04a10100 	strteq	r0, [r1], #256	; 0x100
    37c8:	00011638 	andeq	r1, r1, r8, lsr r6
    37cc:	00125300 	andseq	r5, r2, r0, lsl #6
    37d0:	656c2200 	strbvs	r2, [ip, #-512]!	; 0xfffffe00
    37d4:	a101006e 	tstge	r1, lr, rrx
    37d8:	00813f04 	addeq	r3, r1, r4, lsl #30
    37dc:	12870000 	addne	r0, r7, #0
    37e0:	70290000 	eorvc	r0, r9, r0
    37e4:	0100676c 	tsteq	r0, ip, ror #14
    37e8:	810604a6 	smlatbhi	r6, r6, r4, r0
    37ec:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    37f0:	00707364 	rsbseq	r7, r0, r4, ror #6
    37f4:	0b04a601 	bleq	12d000 <__ccfg+0x10d058>
    37f8:	00000081 	andeq	r0, r0, r1, lsl #1
    37fc:	000012bb 			; <UNDEFINED> instruction: 0x000012bb
    3800:	7365732a 	cmnvc	r5, #-1476395008	; 0xa8000000
    3804:	04a60100 	strteq	r0, [r6], #256	; 0x100
    3808:	00008110 	andeq	r8, r0, r0, lsl r1
    380c:	50910200 	addspl	r0, r1, r0, lsl #4
    3810:	0070612a 	rsbseq	r6, r0, sl, lsr #2
    3814:	0b04a701 	bleq	12d420 <__ccfg+0x10d478>
    3818:	00000355 	andeq	r0, r0, r5, asr r3
    381c:	28549102 	ldmdacs	r4, {r1, r8, ip, pc}^
    3820:	a8010063 	stmdage	r1, {r0, r1, r5, r6}
    3824:	01160a04 	tsteq	r6, r4, lsl #20
    3828:	12d90000 	sbcsne	r0, r9, #0
    382c:	21000000 	mrscs	r0, (UNDEF: 0)
    3830:	000cd601 	andeq	sp, ip, r1, lsl #12
    3834:	04870100 	streq	r0, [r7], #256	; 0x100
    3838:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3844:	9c010000 	stcls	0, cr0, [r1], {-0}
    3848:	00000a4a 	andeq	r0, r0, sl, asr #20
    384c:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3850:	04870100 	streq	r0, [r7], #256	; 0x100
    3854:	0000812b 	andeq	r8, r0, fp, lsr #2
    3858:	0012ec00 	andseq	lr, r2, r0, lsl #24
    385c:	73702200 	cmnvc	r0, #0, 4
    3860:	04870100 	streq	r0, [r7], #256	; 0x100
    3864:	0007093a 	andeq	r0, r7, sl, lsr r9
    3868:	00130a00 	andseq	r0, r3, r0, lsl #20
    386c:	0d092b00 	vstreq	d2, [r9, #-0]
    3870:	87010000 	strhi	r0, [r1, -r0]
    3874:	00814204 	addeq	r4, r1, r4, lsl #4
    3878:	13280000 			; <UNDEFINED> instruction: 0x13280000
    387c:	71280000 			; <UNDEFINED> instruction: 0x71280000
    3880:	048d0100 	streq	r0, [sp], #256	; 0x100
    3884:	00078a0b 	andeq	r8, r7, fp, lsl #20
    3888:	00134600 	andseq	r4, r3, r0, lsl #12
    388c:	012c0000 			; <UNDEFINED> instruction: 0x012c0000
    3890:	00000dc2 	andeq	r0, r0, r2, asr #27
    3894:	01038601 	tsteq	r3, r1, lsl #12
    3898:	00011601 	andeq	r1, r1, r1, lsl #12
    389c:	0a910100 	beq	fe443ca4 <_estack+0xde43eca4>
    38a0:	862d0000 	strthi	r0, [sp], -r0
    38a4:	01000013 	tsteq	r0, r3, lsl r0
    38a8:	812d0386 	smlawbhi	sp, r6, r3, r0
    38ac:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    38b0:	00707364 	rsbseq	r7, r0, r4, ror #6
    38b4:	37038601 	strcc	r8, [r3, -r1, lsl #12]
    38b8:	00000081 	andeq	r0, r0, r1, lsl #1
    38bc:	7365732e 	cmnvc	r5, #-1207959552	; 0xb8000000
    38c0:	03860100 	orreq	r0, r6, #0, 2
    38c4:	00008140 	andeq	r8, r0, r0, asr #2
    38c8:	00702900 	rsbseq	r2, r0, r0, lsl #18
    38cc:	0c038a01 			; <UNDEFINED> instruction: 0x0c038a01
    38d0:	0000089d 	muleq	r0, sp, r8
    38d4:	c9012700 	stmdbgt	r1, {r8, r9, sl, sp}
    38d8:	0100000c 	tsteq	r0, ip
    38dc:	0101037f 	tsteq	r1, pc, ror r3
	...
    38e8:	0acb9c01 	beq	ff2ea8f4 <_estack+0xdf2e58f4>
    38ec:	70220000 	eorvc	r0, r2, r0
    38f0:	037f0100 	cmneq	pc, #0, 2
    38f4:	00011632 	andeq	r1, r1, r2, lsr r6
    38f8:	00137500 	andseq	r7, r3, r0, lsl #10
    38fc:	73642200 	cmnvc	r4, #0, 4
    3900:	7f010070 	svcvc	0x00010070
    3904:	00813903 	addeq	r3, r1, r3, lsl #18
    3908:	13880000 	orrne	r0, r8, #0
    390c:	21000000 	mrscs	r0, (UNDEF: 0)
    3910:	000e5901 	andeq	r5, lr, r1, lsl #18
    3914:	036b0100 	cmneq	fp, #0, 2
    3918:	01160101 	tsteq	r6, r1, lsl #2
	...
    3924:	9c010000 	stcls	0, cr0, [r1], {-0}
    3928:	00000b25 	andeq	r0, r0, r5, lsr #22
    392c:	01007022 	tsteq	r0, r2, lsr #32
    3930:	1633036b 	ldrtne	r0, [r3], -fp, ror #6
    3934:	9b000001 	blls	3940 <__exidx_end+0xcc0>
    3938:	2b000013 	blcs	398c <__exidx_end+0xd0c>
    393c:	00000ed9 	ldrdeq	r0, [r0], -r9
    3940:	3a036b01 	bcc	de54c <__ccfg+0xbe5a4>
    3944:	00000081 	andeq	r0, r0, r1, lsl #1
    3948:	000013b9 			; <UNDEFINED> instruction: 0x000013b9
    394c:	00637028 	rsbeq	r7, r3, r8, lsr #32
    3950:	0c036f01 	stceq	15, cr6, [r3], {1}
    3954:	0000089d 	muleq	r0, sp, r8
    3958:	000013d7 	ldrdeq	r1, [r0], -r7
    395c:	00707029 	rsbseq	r7, r0, r9, lsr #32
    3960:	11036f01 	tstne	r3, r1, lsl #30
    3964:	0000089d 	muleq	r0, sp, r8
    3968:	3c012700 	stccc	7, cr2, [r1], {-0}
    396c:	0100000d 	tsteq	r0, sp
    3970:	01010363 	tsteq	r1, r3, ror #6
	...
    397c:	0b5f9c01 	bleq	17ea988 <__ccfg+0x17ca9e0>
    3980:	70220000 	eorvc	r0, r2, r0
    3984:	03630100 	cmneq	r3, #0, 2
    3988:	00011631 	andeq	r1, r1, r1, lsr r6
    398c:	0013f500 	andseq	pc, r3, r0, lsl #10
    3990:	68702200 	ldmdavs	r0!, {r9, sp}^
    3994:	63010079 	movwvs	r0, #4217	; 0x1079
    3998:	00813803 	addeq	r3, r1, r3, lsl #16
    399c:	14130000 	ldrne	r0, [r3], #-0
    39a0:	27000000 	strcs	r0, [r0, -r0]
    39a4:	000e6401 	andeq	r6, lr, r1, lsl #8
    39a8:	035a0100 	cmpeq	sl, #0, 2
    39ac:	00000101 	andeq	r0, r0, r1, lsl #2
    39b0:	00000000 	andeq	r0, r0, r0
    39b4:	9c010000 	stcls	0, cr0, [r1], {-0}
    39b8:	00000b99 	muleq	r0, r9, fp
    39bc:	01007022 	tsteq	r0, r2, lsr #32
    39c0:	1631035a 			; <UNDEFINED> instruction: 0x1631035a
    39c4:	31000001 	tstcc	r0, r1
    39c8:	22000014 	andcs	r0, r0, #20
    39cc:	00736573 	rsbseq	r6, r3, r3, ror r5
    39d0:	38035a01 	stmdacc	r3, {r0, r9, fp, ip, lr}
    39d4:	00000081 	andeq	r0, r0, r1, lsl #1
    39d8:	0000144f 	andeq	r1, r0, pc, asr #8
    39dc:	18012c00 	stmdane	r1, {sl, fp, sp}
    39e0:	0100000f 	tsteq	r0, pc
    39e4:	01010352 	tsteq	r1, r2, asr r3
    39e8:	00000081 	andeq	r0, r0, r1, lsl #1
    39ec:	000bd501 	andeq	sp, fp, r1, lsl #10
    39f0:	68702e00 	ldmdavs	r0!, {r9, sl, fp, sp}^
    39f4:	52010079 	andpl	r0, r1, #121	; 0x79
    39f8:	00812d03 	addeq	r2, r1, r3, lsl #26
    39fc:	6f2e0000 	svcvs	0x002e0000
    3a00:	01007470 	tsteq	r0, r0, ror r4
    3a04:	81360352 	teqhi	r6, r2, asr r3
    3a08:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3a0c:	00677261 	rsbeq	r7, r7, r1, ror #4
    3a10:	43035201 	movwmi	r5, #12801	; 0x3201
    3a14:	00000116 	andeq	r0, r0, r6, lsl r1
    3a18:	82012100 	andhi	r2, r1, #0, 2
    3a1c:	0100000c 	tsteq	r0, ip
    3a20:	01010333 	tsteq	r1, r3, lsr r3
    3a24:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3a30:	0c3e9c01 	ldceq	12, cr9, [lr], #-4
    3a34:	66220000 	strtvs	r0, [r2], -r0
    3a38:	33010064 	movwcc	r0, #4196	; 0x1064
    3a3c:	00812c03 	addeq	r2, r1, r3, lsl #24
    3a40:	146d0000 	strbtne	r0, [sp], #-0
    3a44:	6f220000 	svcvs	0x00220000
    3a48:	01007470 	tsteq	r0, r0, ror r4
    3a4c:	81340333 	teqhi	r4, r3, lsr r3
    3a50:	ac000000 	stcge	0, cr0, [r0], {-0}
    3a54:	22000014 	andcs	r0, r0, #20
    3a58:	00677261 	rsbeq	r7, r7, r1, ror #4
    3a5c:	41033301 	tstmi	r3, r1, lsl #6
    3a60:	00000116 	andeq	r0, r0, r6, lsl r1
    3a64:	000014d5 	ldrdeq	r1, [r0], -r5
    3a68:	0000002f 	andeq	r0, r0, pc, lsr #32
    3a6c:	00000000 	andeq	r0, r0, r0
    3a70:	00702800 	rsbseq	r2, r0, r0, lsl #16
    3a74:	15033c01 	strne	r3, [r3, #-3073]	; 0xfffff3ff
    3a78:	000007d4 	ldrdeq	r0, [r0], -r4
    3a7c:	000014fe 	strdeq	r1, [r0], -lr
    3a80:	01270000 			; <UNDEFINED> instruction: 0x01270000
    3a84:	00000d17 	andeq	r0, r0, r7, lsl sp
    3a88:	01032b01 	tsteq	r3, r1, lsl #22
    3a8c:	00000001 	andeq	r0, r0, r1
    3a90:	00000000 	andeq	r0, r0, r0
    3a94:	679c0100 	ldrvs	r0, [ip, r0, lsl #2]
    3a98:	2200000c 	andcs	r0, r0, #12
    3a9c:	2b010070 	blcs	43c64 <__ccfg+0x23cbc>
    3aa0:	01162e03 	tsteq	r6, r3, lsl #28
    3aa4:	15110000 	ldrne	r0, [r1, #-0]
    3aa8:	21000000 	mrscs	r0, (UNDEF: 0)
    3aac:	000df101 	andeq	pc, sp, r1, lsl #2
    3ab0:	031a0100 	tsteq	sl, #0, 2
    3ab4:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3ac0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ac4:	00000cc1 	andeq	r0, r0, r1, asr #25
    3ac8:	01007022 	tsteq	r0, r2, lsr #32
    3acc:	162e031a 			; <UNDEFINED> instruction: 0x162e031a
    3ad0:	2f000001 	svccs	0x00000001
    3ad4:	22000015 	andcs	r0, r0, #21
    3ad8:	00667562 	rsbeq	r7, r6, r2, ror #10
    3adc:	3d031a01 	vstrcc	s2, [r3, #-4]
    3ae0:	00000259 	andeq	r0, r0, r9, asr r2
    3ae4:	0000154d 	andeq	r1, r0, sp, asr #10
    3ae8:	6e656c22 	cdpvs	12, 6, cr6, cr5, cr2, {1}
    3aec:	031a0100 	tsteq	sl, #0, 2
    3af0:	00008146 	andeq	r8, r0, r6, asr #2
    3af4:	00156000 	andseq	r6, r5, r0
    3af8:	00622900 	rsbeq	r2, r2, r0, lsl #18
    3afc:	0c031e01 	stceq	14, cr1, [r3], {1}
    3b00:	0000089d 	muleq	r0, sp, r8
    3b04:	37012100 	strcc	r2, [r1, -r0, lsl #2]
    3b08:	0100000e 	tsteq	r0, lr
    3b0c:	01010308 	tsteq	r1, r8, lsl #6
    3b10:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3b1c:	0d1b9c01 	ldceq	12, cr9, [fp, #-4]
    3b20:	70220000 	eorvc	r0, r2, r0
    3b24:	03080100 	movweq	r0, #33024	; 0x8100
    3b28:	0001162d 	andeq	r1, r1, sp, lsr #12
    3b2c:	00157e00 	andseq	r7, r5, r0, lsl #28
    3b30:	75622200 	strbvc	r2, [r2, #-512]!	; 0xfffffe00
    3b34:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    3b38:	0d1b3603 	ldceq	6, cr3, [fp, #-12]
    3b3c:	159c0000 	ldrne	r0, [ip]
    3b40:	6c220000 	stcvs	0, cr0, [r2], #-0
    3b44:	01006e65 	tsteq	r0, r5, ror #28
    3b48:	813f0308 	teqhi	pc, r8, lsl #6
    3b4c:	ba000000 	blt	3b54 <__exidx_end+0xed4>
    3b50:	29000015 	stmdbcs	r0, {r0, r2, r4}
    3b54:	0c010062 	stceq	0, cr0, [r1], {98}	; 0x62
    3b58:	089d0c03 	ldmeq	sp, {r0, r1, sl, fp}
    3b5c:	0a000000 	beq	3b64 <__exidx_end+0xee4>
    3b60:	0000e304 	andeq	lr, r0, r4, lsl #6
    3b64:	e8012100 	stmda	r1, {r8, sp}
    3b68:	0100000d 	tsteq	r0, sp
    3b6c:	010102cd 	smlabteq	r1, sp, r2, r0
    3b70:	00000116 	andeq	r0, r0, r6, lsl r1
	...
    3b7c:	0dbf9c01 	ldceq	12, cr9, [pc, #4]!	; 3b88 <__exidx_end+0xf08>
    3b80:	702b0000 	eorvc	r0, fp, r0
    3b84:	0100000b 	tsteq	r0, fp
    3b88:	cd2e02cd 	sfmgt	f0, 4, [lr, #-820]!	; 0xfffffccc
    3b8c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    3b90:	22000015 	andcs	r0, r0, #21
    3b94:	01006466 	tsteq	r0, r6, ror #8
    3b98:	813902cd 	teqhi	r9, sp, asr #5
    3b9c:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    3ba0:	2b000015 	blcs	3bfc <__exidx_end+0xf7c>
    3ba4:	00000ed2 	ldrdeq	r0, [r0], -r2
    3ba8:	4102cd01 	tstmi	r2, r1, lsl #26
    3bac:	00000081 	andeq	r0, r0, r1, lsl #1
    3bb0:	0000161f 	andeq	r1, r0, pc, lsl r6
    3bb4:	67727522 	ldrbvs	r7, [r2, -r2, lsr #10]!
    3bb8:	02ce0100 	sbceq	r0, lr, #0, 2
    3bbc:	0000c111 	andeq	ip, r0, r1, lsl r1
    3bc0:	00166900 	andseq	r6, r6, r0, lsl #18
    3bc4:	00622800 	rsbeq	r2, r2, r0, lsl #16
    3bc8:	0c02cf01 	stceq	15, cr12, [r2], {1}
    3bcc:	0000089d 	muleq	r0, sp, r8
    3bd0:	0000167c 	andeq	r1, r0, ip, ror r6
    3bd4:	000dda30 	andeq	sp, sp, r0, lsr sl
    3bd8:	02d00100 	sbcseq	r0, r0, #0, 2
    3bdc:	0003550b 	andeq	r5, r3, fp, lsl #10
    3be0:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3be4:	0100732a 	tsteq	r0, sl, lsr #6
    3be8:	400d02d1 	ldrdmi	r0, [sp], -r1
    3bec:	01000007 	tsteq	r0, r7
    3bf0:	69652857 	stmdbvs	r5!, {r0, r1, r2, r4, r6, fp, sp}^
    3bf4:	d2010064 	andle	r0, r1, #100	; 0x64
    3bf8:	00810602 	addeq	r0, r1, r2, lsl #12
    3bfc:	169a0000 	ldrne	r0, [sl], r0
    3c00:	21000000 	mrscs	r0, (UNDEF: 0)
    3c04:	000da701 	andeq	sl, sp, r1, lsl #14
    3c08:	02a40100 	adceq	r0, r4, #0, 2
    3c0c:	00810101 	addeq	r0, r1, r1, lsl #2
	...
    3c18:	9c010000 	stcls	0, cr0, [r1], {-0}
    3c1c:	00000e72 	andeq	r0, r0, r2, ror lr
    3c20:	00646622 	rsbeq	r6, r4, r2, lsr #12
    3c24:	2a02a401 	bcs	acc30 <__ccfg+0x8cc88>
    3c28:	00000081 	andeq	r0, r0, r1, lsl #1
    3c2c:	000016c3 	andeq	r1, r0, r3, asr #13
    3c30:	000ed92b 	andeq	sp, lr, fp, lsr #18
    3c34:	02a40100 	adceq	r0, r4, #0, 2
    3c38:	00008132 	andeq	r8, r0, r2, lsr r1
    3c3c:	0016f700 	andseq	pc, r6, r0, lsl #14
    3c40:	00732800 	rsbseq	r2, r3, r0, lsl #16
    3c44:	0d02a801 	stceq	8, cr10, [r2, #-4]
    3c48:	00000740 	andeq	r0, r0, r0, asr #14
    3c4c:	0000172b 	andeq	r1, r0, fp, lsr #14
    3c50:	00716e28 	rsbseq	r6, r1, r8, lsr #28
    3c54:	0602a901 	streq	sl, [r2], -r1, lsl #18
    3c58:	00000081 	andeq	r0, r0, r1, lsl #1
    3c5c:	00001790 	muleq	r0, r0, r7
    3c60:	00717228 	rsbseq	r7, r1, r8, lsr #4
    3c64:	0b02aa01 	bleq	ae470 <__ccfg+0x8e4c8>
    3c68:	0000078a 	andeq	r0, r0, sl, lsl #15
    3c6c:	000017ae 	andeq	r1, r0, lr, lsr #15
    3c70:	01006228 	tsteq	r0, r8, lsr #4
    3c74:	9d0c02ab 	sfmls	f0, 4, [ip, #-684]	; 0xfffffd54
    3c78:	cc000008 	stcgt	0, cr0, [r0], {8}
    3c7c:	31000017 	tstcc	r0, r7, lsl r0
    3c80:	00000d8d 	andeq	r0, r0, sp, lsl #27
    3c84:	0102c001 	tsteq	r2, r1
    3c88:	00000000 	andeq	r0, r0, r0
    3c8c:	00114e32 	andseq	r4, r1, r2, lsr lr
	...
    3c98:	02bb0100 	adcseq	r0, fp, #0, 2
    3c9c:	1160330a 	cmnne	r0, sl, lsl #6
    3ca0:	6b260000 	blvs	983ca8 <__ccfg+0x963d00>
    3ca4:	f5000011 			; <UNDEFINED> instruction: 0xf5000011
    3ca8:	26000017 			; <UNDEFINED> instruction: 0x26000017
    3cac:	00001176 	andeq	r1, r0, r6, ror r1
    3cb0:	00001808 	andeq	r1, r0, r8, lsl #16
    3cb4:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3cb8:	00000c5a 	andeq	r0, r0, sl, asr ip
    3cbc:	01027d01 	tsteq	r2, r1, lsl #26
    3cc0:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3ccc:	ef9c0100 	svc	0x009c0100
    3cd0:	2200000e 	andcs	r0, r0, #14
    3cd4:	01006466 	tsteq	r0, r6, ror #8
    3cd8:	812a027d 			; <UNDEFINED> instruction: 0x812a027d
    3cdc:	1b000000 	blne	3ce4 <__exidx_end+0x1064>
    3ce0:	2b000018 	blcs	3d48 <__exidx_end+0x10c8>
    3ce4:	00000ed9 	ldrdeq	r0, [r0], -r9
    3ce8:	32027d01 	andcc	r7, r2, #1, 26	; 0x40
    3cec:	00000081 	andeq	r0, r0, r1, lsl #1
    3cf0:	0000184f 	andeq	r1, r0, pc, asr #16
    3cf4:	01007328 	tsteq	r0, r8, lsr #6
    3cf8:	400d0281 	andmi	r0, sp, r1, lsl #5
    3cfc:	78000007 	stmdavc	r0, {r0, r1, r2}
    3d00:	28000018 	stmdacs	r0, {r3, r4}
    3d04:	0100716e 	tsteq	r0, lr, ror #2
    3d08:	81060282 	smlabbhi	r6, r2, r2, r0
    3d0c:	dd000000 	stcle	0, cr0, [r0, #-0]
    3d10:	28000018 	stmdacs	r0, {r3, r4}
    3d14:	01007172 	tsteq	r0, r2, ror r1
    3d18:	8a0b0283 	bhi	2c472c <__ccfg+0x2a4784>
    3d1c:	fb000007 	blx	3d42 <__exidx_end+0x10c2>
    3d20:	28000018 	stmdacs	r0, {r3, r4}
    3d24:	84010062 	strhi	r0, [r1], #-98	; 0xffffff9e
    3d28:	089d0c02 	ldmeq	sp, {r1, sl, fp}
    3d2c:	19240000 	stmdbne	r4!, {}	; <UNPREDICTABLE>
    3d30:	21000000 	mrscs	r0, (UNDEF: 0)
    3d34:	000ede01 	andeq	sp, lr, r1, lsl #28
    3d38:	02560100 	subseq	r0, r6, #0, 2
    3d3c:	01160101 	tsteq	r6, r1, lsl #2
	...
    3d48:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d4c:	00000f5c 	andeq	r0, r0, ip, asr pc
    3d50:	000b702b 	andeq	r7, fp, fp, lsr #32
    3d54:	02560100 	subseq	r0, r6, #0, 2
    3d58:	0000cd2d 	andeq	ip, r0, sp, lsr #26
    3d5c:	00195800 	andseq	r5, r9, r0, lsl #16
    3d60:	64662200 	strbtvs	r2, [r6], #-512	; 0xfffffe00
    3d64:	02560100 	subseq	r0, r6, #0, 2
    3d68:	00008138 	andeq	r8, r0, r8, lsr r1
    3d6c:	00196b00 	andseq	r6, r9, r0, lsl #22
    3d70:	00702800 	rsbseq	r2, r0, r0, lsl #16
    3d74:	0a025d01 	beq	9b180 <__ccfg+0x7b1d8>
    3d78:	00000116 	andeq	r0, r0, r6, lsl r1
    3d7c:	000019aa 	andeq	r1, r0, sl, lsr #19
    3d80:	01006228 	tsteq	r0, r8, lsr #4
    3d84:	9d0c025e 	sfmls	f0, 4, [ip, #-376]	; 0xfffffe88
    3d88:	bd000008 	stclt	0, cr0, [r0, #-32]	; 0xffffffe0
    3d8c:	28000019 	stmdacs	r0, {r0, r3, r4}
    3d90:	01007172 	tsteq	r0, r2, ror r1
    3d94:	8a0b025f 	bhi	2c4718 <__ccfg+0x2a4770>
    3d98:	e6000007 	str	r0, [r0], -r7
    3d9c:	00000019 	andeq	r0, r0, r9, lsl r0
    3da0:	0ea40121 	fdveqsp	f0, f4, f1
    3da4:	4a010000 	bmi	43dac <__ccfg+0x23e04>
    3da8:	81010102 	tsthi	r1, r2, lsl #2
	...
    3db4:	01000000 	mrseq	r0, (UNDEF: 0)
    3db8:	000f999c 	muleq	pc, ip, r9	; <UNPREDICTABLE>
    3dbc:	726f2200 	rsbvc	r2, pc, #0, 4
    3dc0:	4a010064 	bmi	43f58 <__ccfg+0x23fb0>
    3dc4:	00812902 	addeq	r2, r1, r2, lsl #18
    3dc8:	1a200000 	bne	803dd0 <__ccfg+0x7e3e28>
    3dcc:	70340000 	eorsvc	r0, r4, r0
    3dd0:	4a01006c 	bmi	43f88 <__ccfg+0x23fe0>
    3dd4:	07d43f02 	ldrbeq	r3, [r4, r2, lsl #30]
    3dd8:	51010000 	mrspl	r0, (UNDEF: 1)
    3ddc:	03012100 	movweq	r2, #4352	; 0x1100
    3de0:	0100000e 	tsteq	r0, lr
    3de4:	01010229 	tsteq	r1, r9, lsr #4
    3de8:	00000081 	andeq	r0, r0, r1, lsl #1
	...
    3df4:	0ff69c01 	svceq	0x00f69c01
    3df8:	702b0000 	eorvc	r0, fp, r0
    3dfc:	0100000b 	tsteq	r0, fp
    3e00:	cd2b0229 	sfmgt	f0, 4, [fp, #-164]!	; 0xffffff5c
    3e04:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    3e08:	2200001a 	andcs	r0, r0, #26
    3e0c:	01006466 	tsteq	r0, r6, ror #8
    3e10:	81360229 	teqhi	r6, r9, lsr #4
    3e14:	5c000000 	stcpl	0, cr0, [r0], {-0}
    3e18:	2800001a 	stmdacs	r0, {r1, r3, r4}
    3e1c:	2b010073 	blcs	43ff0 <__ccfg+0x24048>
    3e20:	07400d02 	strbeq	r0, [r0, -r2, lsl #26]
    3e24:	1aa60000 	bne	fe983e2c <_estack+0xde97ee2c>
    3e28:	62280000 	eorvs	r0, r8, #0
    3e2c:	022c0100 	eoreq	r0, ip, #0, 2
    3e30:	00089d0c 	andeq	r9, r8, ip, lsl #26
    3e34:	001ab900 	andseq	fp, sl, r0, lsl #18
    3e38:	01210000 			; <UNDEFINED> instruction: 0x01210000
    3e3c:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3e40:	0101f601 	tsteq	r1, r1, lsl #12	; <UNPREDICTABLE>
    3e44:	00008101 	andeq	r8, r0, r1, lsl #2
	...
    3e50:	839c0100 	orrshi	r0, ip, #0, 2
    3e54:	2b000010 	blcs	3e9c <__exidx_end+0x121c>
    3e58:	00000b70 	andeq	r0, r0, r0, ror fp
    3e5c:	2a01f601 	bcs	81668 <__ccfg+0x616c0>
    3e60:	000000cd 	andeq	r0, r0, sp, asr #1
    3e64:	00001acc 	andeq	r1, r0, ip, asr #21
    3e68:	79687022 	stmdbvc	r8!, {r1, r5, ip, sp, lr}^
    3e6c:	01f60100 	mvnseq	r0, r0, lsl #2
    3e70:	00008135 	andeq	r8, r0, r5, lsr r1
    3e74:	001af500 	andseq	pc, sl, r0, lsl #10
    3e78:	0e702b00 	vaddeq.f64	d18, d0, d0
    3e7c:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    3e80:	00813e01 	addeq	r3, r1, r1, lsl #28
    3e84:	1b4a0000 	blne	1283e8c <__ccfg+0x1263ee4>
    3e88:	28350000 	ldmdacs	r5!, {}	; <UNPREDICTABLE>
    3e8c:	01006466 	tsteq	r0, r6, ror #8
    3e90:	810601f8 	strdhi	r0, [r6, -r8]
    3e94:	82000000 	andhi	r0, r0, #0
    3e98:	3600001b 			; <UNDEFINED> instruction: 0x3600001b
    3e9c:	00000d7b 	andeq	r0, r0, fp, ror sp
    3ea0:	0a01f901 	beq	822ac <__ccfg+0x62304>
    3ea4:	00000556 	andeq	r0, r0, r6, asr r5
    3ea8:	01007328 	tsteq	r0, r8, lsr #6
    3eac:	400d01fa 	strdmi	r0, [sp], -sl
    3eb0:	a0000007 	andge	r0, r0, r7
    3eb4:	2a00001b 	bcs	3f28 <__exidx_end+0x12a8>
    3eb8:	01007061 	tsteq	r0, r1, rrx
    3ebc:	b50b01fc 	strlt	r0, [fp, #-508]	; 0xfffffe04
    3ec0:	02000000 	andeq	r0, r0, #0
    3ec4:	27005491 			; <UNDEFINED> instruction: 0x27005491
    3ec8:	000db101 	andeq	fp, sp, r1, lsl #2
    3ecc:	013b0100 	teqeq	fp, r0, lsl #2
    3ed0:	00000101 	andeq	r0, r0, r1, lsl #2
    3ed4:	00000000 	andeq	r0, r0, r0
    3ed8:	9c010000 	stcls	0, cr0, [r1], {-0}
    3edc:	000010bb 	strheq	r1, [r0], -fp
    3ee0:	01007022 	tsteq	r0, r2, lsr #32
    3ee4:	162e013b 			; <UNDEFINED> instruction: 0x162e013b
    3ee8:	ea000001 	b	3ef4 <__exidx_end+0x1274>
    3eec:	2800001b 	stmdacs	r0, {r0, r1, r3, r4}
    3ef0:	41010062 	tstmi	r1, r2, rrx
    3ef4:	089d0c01 	ldmeq	sp, {r0, sl, fp}
    3ef8:	1c130000 	ldcne	0, cr0, [r3], {-0}
    3efc:	37000000 	strcc	r0, [r0, -r0]
    3f00:	00627061 	rsbeq	r7, r2, r1, rrx
    3f04:	01011401 	tsteq	r1, r1, lsl #8
    3f08:	00089d01 	andeq	r9, r8, r1, lsl #26
	...
    3f14:	029c0100 	addseq	r0, ip, #0, 2
    3f18:	2b000011 	blcs	3f64 <__exidx_end+0x12e4>
    3f1c:	00001386 	andeq	r1, r0, r6, lsl #7
    3f20:	2b011401 	blcs	48f2c <__ccfg+0x28f84>
    3f24:	000000cd 	andeq	r0, r0, sp, asr #1
    3f28:	00001c47 	andeq	r1, r0, r7, asr #24
    3f2c:	0100702a 	tsteq	r0, sl, lsr #32
    3f30:	9d0c0119 	stflss	f0, [ip, #-100]	; 0xffffff9c
    3f34:	01000008 	tsteq	r0, r8
    3f38:	73632950 	cmnvc	r3, #80, 18	; 0x140000
    3f3c:	011a0100 	tsteq	sl, r0, lsl #2
    3f40:	0000cd07 	andeq	ip, r0, r7, lsl #26
    3f44:	72380000 	eorsvc	r0, r8, #0
    3f48:	0100706c 	tsteq	r0, ip, rrx
    3f4c:	01010104 	tsteq	r1, r4, lsl #2
	...
    3f58:	112a9c01 			; <UNDEFINED> instruction: 0x112a9c01
    3f5c:	70220000 	eorvc	r0, r2, r0
    3f60:	01040100 	mrseq	r0, (UNDEF: 20)
    3f64:	00089d2b 	andeq	r9, r8, fp, lsr #26
    3f68:	001c5a00 	andseq	r5, ip, r0, lsl #20
    3f6c:	ce390000 	cdpgt	0, 3, cr0, cr9, cr0, {0}
    3f70:	0100000c 	tsteq	r0, ip
    3f74:	010101e0 	smlatteq	r1, r0, r1, r0
    3f78:	0000114e 	andeq	r1, r0, lr, asr #2
    3f7c:	0100703a 	tsteq	r0, sl, lsr r0
    3f80:	089d2fe0 	ldmeq	sp, {r5, r6, r7, r8, r9, sl, fp, sp}
    3f84:	643a0000 	ldrtvs	r0, [sl], #-0
    3f88:	e0010076 	and	r0, r1, r6, ror r0
    3f8c:	00008136 	andeq	r8, r0, r6, lsr r1
    3f90:	293b0000 	ldmdbcs	fp!, {}	; <UNPREDICTABLE>
    3f94:	0100000d 	tsteq	r0, sp
    3f98:	810101cf 	smlabthi	r1, pc, r1, r0	; <UNPREDICTABLE>
    3f9c:	01000000 	mrseq	r0, (UNDEF: 0)
    3fa0:	00001181 	andeq	r1, r0, r1, lsl #3
    3fa4:	00716f3a 	rsbseq	r6, r1, sl, lsr pc
    3fa8:	8a2bcf01 	bhi	af7bb4 <__ccfg+0xad7c0c>
    3fac:	3c000007 	stccc	0, cr0, [r0], {7}
    3fb0:	0100716e 	tsteq	r0, lr, ror #2
    3fb4:	008106d3 	ldrdeq	r0, [r1], r3
    3fb8:	623c0000 	eorsvs	r0, ip, #0
    3fbc:	0cd40100 	ldfeqe	f0, [r4], {0}
    3fc0:	0000089d 	muleq	r0, sp, r8
    3fc4:	6e653d00 	cdpvs	13, 6, cr3, cr5, cr0, {0}
    3fc8:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    3fcc:	a4010101 	strge	r0, [r1], #-257	; 0xfffffeff
    3fd0:	3a000011 	bcc	401c <__exidx_end+0x139c>
    3fd4:	a8010071 	stmdage	r1, {r0, r4, r5, r6}
    3fd8:	00078a2a 	andeq	r8, r7, sl, lsr #20
    3fdc:	00703a00 	rsbseq	r3, r0, r0, lsl #20
    3fe0:	9d37a801 	ldcls	8, cr10, [r7, #-4]!
    3fe4:	00000008 	andeq	r0, r0, r8
    3fe8:	7165643d 	cmnvc	r5, sp, lsr r4
    3fec:	017f0100 	cmneq	pc, r0, lsl #2
    3ff0:	11bd0101 			; <UNDEFINED> instruction: 0x11bd0101
    3ff4:	703a0000 	eorsvc	r0, sl, r0
    3ff8:	2b7f0100 	blcs	1fc4400 <__ccfg+0x1fa4458>
    3ffc:	0000089d 	muleq	r0, sp, r8
    4000:	11a43e00 			; <UNDEFINED> instruction: 0x11a43e00
	...
    400c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4010:	000011f2 	strdeq	r1, [r0], -r2
    4014:	0011b23f 	andseq	fp, r1, pc, lsr r2
    4018:	40500100 	subsmi	r0, r0, r0, lsl #2
    401c:	000011a4 	andeq	r1, r0, r4, lsr #3
	...
    4028:	24017f01 	strcs	r7, [r1], #-3841	; 0xfffff0ff
    402c:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
    4030:	00001c6d 	andeq	r1, r0, sp, ror #24
    4034:	813e0000 	teqhi	lr, r0
    4038:	00000011 	andeq	r0, r0, r1, lsl r0
    403c:	00000000 	andeq	r0, r0, r0
    4040:	01000000 	mrseq	r0, (UNDEF: 0)
    4044:	00123b9c 	mulseq	r2, ip, fp
    4048:	118f2400 	orrne	r2, pc, r0, lsl #8
    404c:	1c800000 	stcne	0, cr0, [r0], {0}
    4050:	99240000 	stmdbls	r4!, {}	; <UNPREDICTABLE>
    4054:	b4000011 	strlt	r0, [r0], #-17	; 0xffffffef
    4058:	4000001c 	andmi	r0, r0, ip, lsl r0
    405c:	00001181 	andeq	r1, r0, r1, lsl #3
	...
    4068:	2401a801 	strcs	sl, [r1], #-2049	; 0xfffff7ff
    406c:	0000118f 	andeq	r1, r0, pc, lsl #3
    4070:	00001ce8 	andeq	r1, r0, r8, ror #25
    4074:	00119924 	andseq	r9, r1, r4, lsr #18
    4078:	001d0600 	andseq	r0, sp, r0, lsl #12
    407c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    4080:	0000112a 	andeq	r1, r0, sl, lsr #2
	...
    408c:	12809c01 	addne	r9, r0, #256	; 0x100
    4090:	38240000 	stmdacc	r4!, {}	; <UNPREDICTABLE>
    4094:	24000011 	strcs	r0, [r0], #-17	; 0xffffffef
    4098:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
    409c:	00001142 	andeq	r1, r0, r2, asr #2
    40a0:	00001d79 	andeq	r1, r0, r9, ror sp
    40a4:	00112a41 	andseq	r2, r1, r1, asr #20
    40a8:	00000000 	andeq	r0, r0, r0
    40ac:	0007d800 	andeq	sp, r7, r0, lsl #16
    40b0:	01e00100 	mvneq	r0, r0, lsl #2
    40b4:	00114233 	andseq	r4, r1, r3, lsr r2
    40b8:	11382400 	teqne	r8, r0, lsl #8
    40bc:	1d8c0000 	stcne	0, cr0, [ip]
    40c0:	00000000 	andeq	r0, r0, r0
    40c4:	000b993e 	andeq	r9, fp, lr, lsr r9
	...
    40d0:	d89c0100 	ldmle	ip, {r8}
    40d4:	24000012 	strcs	r0, [r0], #-18	; 0xffffffee
    40d8:	00000bad 	andeq	r0, r0, sp, lsr #23
    40dc:	00001daa 	andeq	r1, r0, sl, lsr #27
    40e0:	000bba24 	andeq	fp, fp, r4, lsr #20
    40e4:	001dc800 	andseq	ip, sp, r0, lsl #16
    40e8:	0bc72400 	bleq	ff1cd0f0 <_estack+0xdf1c80f0>
    40ec:	1df10000 	ldclne	0, cr0, [r1]
    40f0:	99320000 	ldmdbls	r2!, {}	; <UNPREDICTABLE>
    40f4:	0000000b 	andeq	r0, r0, fp
    40f8:	00000000 	andeq	r0, r0, r0
    40fc:	01000000 	mrseq	r0, (UNDEF: 0)
    4100:	33010352 	movwcc	r0, #4946	; 0x1352
    4104:	00000bad 	andeq	r0, r0, sp, lsr #23
    4108:	000bba24 	andeq	fp, fp, r4, lsr #20
    410c:	001e1a00 	andseq	r1, lr, r0, lsl #20
    4110:	0bc72400 	bleq	ff1cd118 <_estack+0xdf1c8118>
    4114:	1e2d0000 	cdpne	0, 2, cr0, cr13, cr0, {0}
    4118:	00000000 	andeq	r0, r0, r0
    411c:	000a4a42 	andeq	r4, sl, r2, asr #20
	...
    4128:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
    412c:	00000a5e 	andeq	r0, r0, lr, asr sl
    4130:	00001e40 	andeq	r1, r0, r0, asr #28
    4134:	000a6b24 	andeq	r6, sl, r4, lsr #22
    4138:	001e5300 	andseq	r5, lr, r0, lsl #6
    413c:	0a782400 	beq	1e0d144 <__ccfg+0x1ded19c>
    4140:	1eb30000 	cdpne	0, 11, cr0, cr3, cr0, {0}
    4144:	85260000 	strhi	r0, [r6, #-0]!
    4148:	fd00000a 	stc2	0, cr0, [r0, #-40]	; 0xffffffd8
    414c:	3200001e 	andcc	r0, r0, #30
    4150:	00000a4a 	andeq	r0, r0, sl, asr #20
	...
    415c:	01038601 	tsteq	r3, r1, lsl #12
    4160:	000a5e33 	andeq	r5, sl, r3, lsr lr
    4164:	0a6b2400 	beq	1acd16c <__ccfg+0x1aad1c4>
    4168:	1f310000 	svcne	0x00310000
    416c:	78330000 	ldmdavc	r3!, {}	; <UNPREDICTABLE>
    4170:	4300000a 	movwmi	r0, #10
    4174:	00000a85 	andeq	r0, r0, r5, lsl #21
    4178:	74000000 	strvc	r0, [r0], #-0
    417c:	03000001 	movweq	r0, #1
    4180:	00101e00 	andseq	r1, r0, r0, lsl #28
    4184:	5f010400 	svcpl	0x00010400
    4188:	0c000001 	stceq	0, cr0, [r0], {1}
    418c:	00000f66 	andeq	r0, r0, r6, ror #30
    4190:	000000c0 	andeq	r0, r0, r0, asr #1
    4194:	00000908 	andeq	r0, r0, r8, lsl #18
    4198:	00000000 	andeq	r0, r0, r0
    419c:	00003636 	andeq	r3, r0, r6, lsr r6
    41a0:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    41a4:	02000003 	andeq	r0, r0, #3
    41a8:	03cc0502 	biceq	r0, ip, #8388608	; 0x800000
    41ac:	04020000 	streq	r0, [r2], #-0
    41b0:	00009d05 	andeq	r9, r0, r5, lsl #26
    41b4:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    41b8:	00000098 	muleq	r0, r8, r0
    41bc:	90080102 	andls	r0, r8, r2, lsl #2
    41c0:	02000003 	andeq	r0, r0, #3
    41c4:	02600702 	rsbeq	r0, r0, #524288	; 0x80000
    41c8:	a2030000 	andge	r0, r3, #0
    41cc:	02000017 	andeq	r0, r0, #23
    41d0:	005b1934 	subseq	r1, fp, r4, lsr r9
    41d4:	04020000 	streq	r0, [r2], #-0
    41d8:	00007207 	andeq	r7, r0, r7, lsl #4
    41dc:	07080200 	streq	r0, [r8, -r0, lsl #4]
    41e0:	0000006d 	andeq	r0, r0, sp, rrx
    41e4:	69050404 	stmdbvs	r5, {r2, sl}
    41e8:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    41ec:	00770704 	rsbseq	r0, r7, r4, lsl #14
    41f0:	04050000 	streq	r0, [r5], #-0
    41f4:	00000082 	andeq	r0, r0, r2, lsl #1
    41f8:	00007706 	andeq	r7, r0, r6, lsl #14
    41fc:	05010700 	streq	r0, [r1, #-1792]	; 0xfffff900
    4200:	00004f04 	andeq	r4, r0, r4, lsl #30
    4204:	0f590800 	svceq	0x00590800
    4208:	7f010000 	svcvc	0x00010000
    420c:	00004f11 	andeq	r4, r0, r1, lsl pc
    4210:	08010100 	stmdaeq	r1, {r8}
    4214:	00000f2d 	andeq	r0, r0, sp, lsr #30
    4218:	4f118001 	svcmi	0x00118001
    421c:	01000000 	mrseq	r0, (UNDEF: 0)
    4220:	0fa90801 	svceq	0x00a90801
    4224:	81010000 	mrshi	r0, (UNDEF: 1)
    4228:	00004f11 	andeq	r4, r0, r1, lsl pc
    422c:	08010100 	stmdaeq	r1, {r8}
    4230:	00000fa4 	andeq	r0, r0, r4, lsr #31
    4234:	4f118201 	svcmi	0x00118201
    4238:	01000000 	mrseq	r0, (UNDEF: 0)
    423c:	0f600801 	svceq	0x00600801
    4240:	83010000 	movwhi	r0, #4096	; 0x1000
    4244:	00004f11 	andeq	r4, r0, r1, lsl pc
    4248:	08010100 	stmdaeq	r1, {r8}
    424c:	00000f25 	andeq	r0, r0, r5, lsr #30
    4250:	4f118401 	svcmi	0x00118401
    4254:	01000000 	mrseq	r0, (UNDEF: 0)
    4258:	007d0901 	rsbseq	r0, sp, r1, lsl #18
    425c:	00ee0000 	rsceq	r0, lr, r0
    4260:	700a0000 	andvc	r0, sl, r0
    4264:	31000000 	mrscc	r0, (UNDEF: 0)
    4268:	00de0600 	sbcseq	r0, lr, r0, lsl #12
    426c:	c20b0000 	andgt	r0, fp, #0
    4270:	0100000f 	tsteq	r0, pc
    4274:	00ee0f8e 	rsceq	r0, lr, lr, lsl #31
    4278:	05010000 	streq	r0, [r1, #-0]
    427c:	00000003 	andeq	r0, r0, r3
    4280:	0fb00c00 	svceq	0x00b00c00
    4284:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    4288:	f6010101 			; <UNDEFINED> instruction: 0xf6010101
    428c:	f8000013 			; <UNDEFINED> instruction: 0xf8000013
    4290:	01000013 	tsteq	r0, r3, lsl r0
    4294:	0f3c0c9c 	svceq	0x003c0c9c
    4298:	16010000 	strne	r0, [r1], -r0
    429c:	f4010101 	vst4.8	{d0,d2,d4,d6}, [r1], r1
    42a0:	f6000013 			; <UNDEFINED> instruction: 0xf6000013
    42a4:	01000013 	tsteq	r0, r3, lsl r0
    42a8:	0f4c0c9c 	svceq	0x004c0c9c
    42ac:	04010000 	streq	r0, [r1], #-0
    42b0:	f2010101 	vrhadd.s8	d0, d1, d1
    42b4:	f4000013 	vst4.8	{d0-d3}, [r0 :64], r3
    42b8:	01000013 	tsteq	r0, r3, lsl r0
    42bc:	d9010d9c 	stmdble	r1, {r2, r3, r4, r7, r8, sl, fp}
    42c0:	0100000f 	tsteq	r0, pc
    42c4:	f80101d2 			; <UNDEFINED> instruction: 0xf80101d2
    42c8:	3c000013 	stccc	0, cr0, [r0], {19}
    42cc:	01000014 	tsteq	r0, r4, lsl r0
    42d0:	0f330e9c 	svceq	0x00330e9c
    42d4:	d4010000 	strle	r0, [r1], #-0
    42d8:	0000840f 	andeq	r8, r0, pc, lsl #8
    42dc:	001f4400 	andseq	r4, pc, r0, lsl #8
    42e0:	0fcf0e00 	svceq	0x00cf0e00
    42e4:	d4010000 	strle	r0, [r1], #-0
    42e8:	0000841a 	andeq	r8, r0, sl, lsl r4
    42ec:	001f6200 	andseq	r6, pc, r0, lsl #4
    42f0:	37000000 	strcc	r0, [r0, -r0]
    42f4:	03000005 	movweq	r0, #5
    42f8:	0010e300 	andseq	lr, r0, r0, lsl #6
    42fc:	5f010400 	svcpl	0x00010400
    4300:	0c000001 	stceq	0, cr0, [r0], {1}
    4304:	00001039 	andeq	r1, r0, r9, lsr r0
    4308:	000000c0 	andeq	r0, r0, r0, asr #1
    430c:	0000375d 	andeq	r3, r0, sp, asr r7
    4310:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    4314:	02000003 	andeq	r0, r0, #3
    4318:	03cc0502 	biceq	r0, ip, #8388608	; 0x800000
    431c:	04020000 	streq	r0, [r2], #-0
    4320:	00009d05 	andeq	r9, r0, r5, lsl #26
    4324:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    4328:	00000098 	muleq	r0, r8, r0
    432c:	0021eb03 	eoreq	lr, r1, r3, lsl #22
    4330:	182e0100 	stmdane	lr!, {r8}
    4334:	00000045 	andeq	r0, r0, r5, asr #32
    4338:	90080102 	andls	r0, r8, r2, lsl #2
    433c:	03000003 	movweq	r0, #3
    4340:	000020d9 	ldrdeq	r2, [r0], -r9
    4344:	58193101 	ldmdapl	r9, {r0, r8, ip, sp}
    4348:	02000000 	andeq	r0, r0, #0
    434c:	02600702 	rsbeq	r0, r0, #524288	; 0x80000
    4350:	a2030000 	andge	r0, r3, #0
    4354:	01000017 	tsteq	r0, r7, lsl r0
    4358:	006b1934 	rsbeq	r1, fp, r4, lsr r9
    435c:	04020000 	streq	r0, [r2], #-0
    4360:	00007207 	andeq	r7, r0, r7, lsl #4
    4364:	07080200 	streq	r0, [r8, -r0, lsl #4]
    4368:	0000006d 	andeq	r0, r0, sp, rrx
    436c:	69050404 	stmdbvs	r5, {r2, sl}
    4370:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    4374:	00770704 	rsbseq	r0, r7, r4, lsl #14
    4378:	58050000 	stmdapl	r5, {}	; <UNPREDICTABLE>
    437c:	af092f02 	svcge	0x00092f02
    4380:	06000001 	streq	r0, [r0], -r1
    4384:	00001193 	muleq	r0, r3, r1
    4388:	5f103102 	svcpl	0x00103102
    438c:	00000000 	andeq	r0, r0, r0
    4390:	0010a806 	andseq	sl, r0, r6, lsl #16
    4394:	10320200 	eorsne	r0, r2, r0, lsl #4
    4398:	0000005f 	andeq	r0, r0, pc, asr r0
    439c:	10700604 	rsbsne	r0, r0, r4, lsl #12
    43a0:	33020000 	movwcc	r0, #8192	; 0x2000
    43a4:	00005f10 	andeq	r5, r0, r0, lsl pc
    43a8:	23060800 	movwcs	r0, #26624	; 0x6800
    43ac:	02000010 	andeq	r0, r0, #16
    43b0:	005f1034 	subseq	r1, pc, r4, lsr r0	; <UNPREDICTABLE>
    43b4:	060c0000 	streq	r0, [ip], -r0
    43b8:	00000fe2 	andeq	r0, r0, r2, ror #31
    43bc:	5f103502 	svcpl	0x00103502
    43c0:	10000000 	andne	r0, r0, r0
    43c4:	000ff306 	andeq	pc, pc, r6, lsl #6
    43c8:	10360200 	eorsne	r0, r6, r0, lsl #4
    43cc:	0000005f 	andeq	r0, r0, pc, asr r0
    43d0:	10130614 	andsne	r0, r3, r4, lsl r6
    43d4:	37020000 	strcc	r0, [r2, -r0]
    43d8:	00005f10 	andeq	r5, r0, r0, lsl pc
    43dc:	38061800 	stmdacc	r6, {fp, ip}
    43e0:	02000011 	andeq	r0, r0, #17
    43e4:	005f1038 	subseq	r1, pc, r8, lsr r0	; <UNPREDICTABLE>
    43e8:	061c0000 	ldreq	r0, [ip], -r0
    43ec:	00001088 	andeq	r1, r0, r8, lsl #1
    43f0:	5f103902 	svcpl	0x00103902
    43f4:	20000000 	andcs	r0, r0, r0
    43f8:	00109806 	andseq	r9, r0, r6, lsl #16
    43fc:	103a0200 	eorsne	r0, sl, r0, lsl #4
    4400:	0000005f 	andeq	r0, r0, pc, asr r0
    4404:	115e0624 	cmpne	lr, r4, lsr #12
    4408:	3b020000 	blcc	84410 <__ccfg+0x64468>
    440c:	00005f10 	andeq	r5, r0, r0, lsl pc
    4410:	6e062800 	cdpvs	8, 0, cr2, cr6, cr0, {0}
    4414:	02000011 	andeq	r0, r0, #17
    4418:	005f103c 	subseq	r1, pc, ip, lsr r0	; <UNPREDICTABLE>
    441c:	062c0000 	strteq	r0, [ip], -r0
    4420:	00001004 	andeq	r1, r0, r4
    4424:	5f103d02 	svcpl	0x00103d02
    4428:	30000000 	andcc	r0, r0, r0
    442c:	0010fe06 	andseq	pc, r0, r6, lsl #28
    4430:	103e0200 	eorsne	r0, lr, r0, lsl #4
    4434:	0000005f 	andeq	r0, r0, pc, asr r0
    4438:	11a30634 			; <UNDEFINED> instruction: 0x11a30634
    443c:	3f020000 	svccc	0x00020000
    4440:	00005f10 	andeq	r5, r0, r0, lsl pc
    4444:	b9063800 	stmdblt	r6, {fp, ip, sp}
    4448:	02000010 	andeq	r0, r0, #16
    444c:	005f1040 	subseq	r1, pc, r0, asr #32
    4450:	063c0000 	ldrteq	r0, [ip], -r0
    4454:	000010cd 	andeq	r1, r0, sp, asr #1
    4458:	5f104102 	svcpl	0x00104102
    445c:	40000000 	andmi	r0, r0, r0
    4460:	00112206 	andseq	r2, r1, r6, lsl #4
    4464:	10420200 	subne	r0, r2, r0, lsl #4
    4468:	0000005f 	andeq	r0, r0, pc, asr r0
    446c:	110e0644 	tstne	lr, r4, asr #12
    4470:	43020000 	movwmi	r0, #8192	; 0x2000
    4474:	00005f10 	andeq	r5, r0, r0, lsl pc
    4478:	49064800 	stmdbmi	r6, {fp, lr}
    447c:	02000011 	andeq	r0, r0, #17
    4480:	005f1044 	subseq	r1, pc, r4, asr #32
    4484:	064c0000 	strbeq	r0, [ip], -r0
    4488:	0000117e 	andeq	r1, r0, lr, ror r1
    448c:	5f104502 	svcpl	0x00104502
    4490:	50000000 	andpl	r0, r0, r0
    4494:	0010e806 	andseq	lr, r0, r6, lsl #16
    4498:	10460200 	subne	r0, r6, r0, lsl #4
    449c:	0000005f 	andeq	r0, r0, pc, asr r0
    44a0:	e1030054 	qadd	r0, r4, r3
    44a4:	02000010 	andeq	r0, r0, #16
    44a8:	00870347 	addeq	r0, r7, r7, asr #6
    44ac:	af070000 	svcge	0x00070000
    44b0:	08000001 	stmdaeq	r0, {r0}
    44b4:	00001032 	andeq	r1, r0, r2, lsr r0
    44b8:	bb154e02 	bllt	557cc8 <__ccfg+0x537d20>
    44bc:	01000001 	tsteq	r0, r1
    44c0:	15af0301 	strne	r0, [pc, #769]!	; 47c9 <__exidx_end+0x1b49>
    44c4:	27030000 	strcs	r0, [r3, -r0]
    44c8:	00004c12 	andeq	r4, r0, r2, lsl ip
    44cc:	01ce0700 	biceq	r0, lr, r0, lsl #14
    44d0:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    44d4:	03000001 	movweq	r0, #1
    44d8:	000013a7 	andeq	r1, r0, r7, lsr #7
    44dc:	39122b03 	ldmdbcc	r2, {r0, r1, r8, r9, fp, sp}
    44e0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    44e4:	000001e4 	andeq	r0, r0, r4, ror #3
    44e8:	00160003 	andseq	r0, r6, r3
    44ec:	122c0300 	eorne	r0, ip, #0, 6
    44f0:	0000005f 	andeq	r0, r0, pc, asr r0
    44f4:	0001f507 	andeq	pc, r1, r7, lsl #10
    44f8:	02960300 	addseq	r0, r6, #0, 6
    44fc:	2d030000 	stccs	0, cr0, [r3, #-0]
    4500:	00005f12 	andeq	r5, r0, r2, lsl pc
    4504:	03080500 	movweq	r0, #34048	; 0x8500
    4508:	02a00932 	adceq	r0, r0, #819200	; 0xc8000
    450c:	b10a0000 	mrslt	r0, (UNDEF: 10)
    4510:	03000002 	movweq	r0, #2
    4514:	01e40734 	mvneq	r0, r4, lsr r7
    4518:	01010000 	mrseq	r0, (UNDEF: 1)
    451c:	910a0007 	tstls	sl, r7
    4520:	03000000 	movweq	r0, #0
    4524:	01e40335 	mvneq	r0, r5, lsr r3
    4528:	01010000 	mrseq	r0, (UNDEF: 1)
    452c:	880a0006 	stmdahi	sl, {r1, r2}
    4530:	03000002 	movweq	r0, #2
    4534:	01e40336 	mvneq	r0, r6, lsr r3
    4538:	01010000 	mrseq	r0, (UNDEF: 1)
    453c:	fb0a0005 	blx	28455a <__ccfg+0x2645b2>
    4540:	03000003 	movweq	r0, #3
    4544:	01e40337 	mvneq	r0, r7, lsr r3
    4548:	01010000 	mrseq	r0, (UNDEF: 1)
    454c:	f40a0004 	vst4.8	{d0-d3}, [sl], r4
    4550:	03000003 	movweq	r0, #3
    4554:	01e40338 	mvneq	r0, r8, lsr r3
    4558:	04010000 	streq	r0, [r1], #-0
    455c:	e5060000 	str	r0, [r6, #-0]
    4560:	03000003 	movweq	r0, #3
    4564:	01e4073a 	mvneq	r0, sl, lsr r7
    4568:	06010000 	streq	r0, [r1], -r0
    456c:	00000040 	andeq	r0, r0, r0, asr #32
    4570:	e4033c03 	str	r3, [r3], #-3075	; 0xfffff3fd
    4574:	02000001 	andeq	r0, r0, #1
    4578:	00006606 	andeq	r6, r0, r6, lsl #12
    457c:	033d0300 	teqeq	sp, #0, 6
    4580:	000001e4 	andeq	r0, r0, r4, ror #3
    4584:	01430603 	cmpeq	r3, r3, lsl #12
    4588:	3f030000 	svccc	0x00030000
    458c:	0001f508 	andeq	pc, r1, r8, lsl #10
    4590:	03000400 	movweq	r0, #1024	; 0x400
    4594:	00000423 	andeq	r0, r0, r3, lsr #8
    4598:	12034103 	andne	r4, r3, #-1073741824	; 0xc0000000
    459c:	09000002 	stmdbeq	r0, {r1}
    45a0:	000002a0 	andeq	r0, r0, r0, lsr #5
    45a4:	0002a508 	andeq	sl, r2, r8, lsl #10
    45a8:	1a430300 	bne	10c51b0 <__ccfg+0x10a5208>
    45ac:	000002ac 	andeq	r0, r0, ip, lsr #5
    45b0:	fc080101 	stc2	1, cr0, [r8], {1}
    45b4:	03000002 	movweq	r0, #2
    45b8:	02cd0e45 	sbceq	r0, sp, #1104	; 0x450
    45bc:	01010000 	mrseq	r0, (UNDEF: 1)
    45c0:	02d3040b 	sbcseq	r0, r3, #184549376	; 0xb000000
    45c4:	01020000 	mrseq	r0, (UNDEF: 2)
    45c8:	00039908 	andeq	r9, r3, r8, lsl #18
    45cc:	02d30700 	sbcseq	r0, r3, #0, 14
    45d0:	0a080000 	beq	2045d8 <__ccfg+0x1e4630>
    45d4:	03000003 	movweq	r0, #3
    45d8:	02cd1e45 	sbceq	r1, sp, #1104	; 0x450
    45dc:	01010000 	mrseq	r0, (UNDEF: 1)
    45e0:	8f040805 	svchi	0x00040805
    45e4:	00031e09 	andeq	r1, r3, r9, lsl #28
    45e8:	02c10600 	sbceq	r0, r1, #0, 12
    45ec:	90040000 	andls	r0, r4, r0
    45f0:	00005f0b 	andeq	r5, r0, fp, lsl #30
    45f4:	dc060000 	stcle	0, cr0, [r6], {-0}
    45f8:	04000005 	streq	r0, [r0], #-5
    45fc:	01ce0891 			; <UNDEFINED> instruction: 0x01ce0891
    4600:	06040000 	streq	r0, [r4], -r0
    4604:	00000460 	andeq	r0, r0, r0, ror #8
    4608:	f0109204 			; <UNDEFINED> instruction: 0xf0109204
    460c:	06000001 	streq	r0, [r0], -r1
    4610:	04020300 	streq	r0, [r2], #-768	; 0xfffffd00
    4614:	93040000 	movwls	r0, #16384	; 0x4000
    4618:	0002ed03 	andeq	lr, r2, r3, lsl #26
    461c:	031e0c00 	tsteq	lr, #0, 24
    4620:	03350000 	teqeq	r5, #0
    4624:	000d0000 	andeq	r0, sp, r0
    4628:	00003608 	andeq	r3, r0, r8, lsl #12
    462c:	0f990400 	svceq	0x00990400
    4630:	0000032a 	andeq	r0, r0, sl, lsr #6
    4634:	01050101 	tsteq	r5, r1, lsl #2
    4638:	6d099105 	stfvsd	f1, [r9, #-20]	; 0xffffffec
    463c:	0a000003 	beq	4650 <__exidx_end+0x19d0>
    4640:	00000453 	andeq	r0, r0, r3, asr r4
    4644:	e4079305 	str	r9, [r7], #-773	; 0xfffffcfb
    4648:	01000001 	tsteq	r0, r1
    464c:	0a000107 	beq	4a70 <__exidx_end+0x1df0>
    4650:	00000031 	andeq	r0, r0, r1, lsr r0
    4654:	e4039405 	str	r9, [r3], #-1029	; 0xfffffbfb
    4658:	01000001 	tsteq	r0, r1
    465c:	00000001 	andeq	r0, r0, r1
    4660:	00027303 	andeq	r7, r2, r3, lsl #6
    4664:	03960500 	orrseq	r0, r6, #0, 10
    4668:	00000343 	andeq	r0, r0, r3, asr #6
    466c:	00036d07 	andeq	r6, r3, r7, lsl #26
    4670:	03790c00 	cmneq	r9, #0, 24
    4674:	03890000 	orreq	r0, r9, #0
    4678:	000d0000 	andeq	r0, sp, r0
    467c:	00037e07 	andeq	r7, r3, r7, lsl #28
    4680:	02dc0800 	sbcseq	r0, ip, #0, 16
    4684:	9c050000 	stcls	0, cr0, [r5], {-0}
    4688:	00038917 	andeq	r8, r3, r7, lsl r9
    468c:	0c010100 	stfeqs	f0, [r1], {-0}
    4690:	000001da 	ldrdeq	r0, [r0], -sl
    4694:	000003a7 	andeq	r0, r0, r7, lsr #7
    4698:	9c07000d 	stcls	0, cr0, [r7], {13}
    469c:	08000003 	stmdaeq	r0, {r0, r1}
    46a0:	00000382 	andeq	r0, r0, r2, lsl #7
    46a4:	a7130606 	ldrge	r0, [r3, -r6, lsl #12]
    46a8:	01000003 	tsteq	r0, r3
    46ac:	01230801 			; <UNDEFINED> instruction: 0x01230801
    46b0:	c3040000 	movwgt	r0, #16384	; 0x4000
    46b4:	0001f50e 	andeq	pc, r1, lr, lsl #10
    46b8:	0e010100 	adfeqs	f0, f1, f0
    46bc:	0000046d 	andeq	r0, r0, sp, ror #8
    46c0:	10016e07 	andne	r6, r1, r7, lsl #28
    46c4:	000003d5 	ldrdeq	r0, [r0], -r5
    46c8:	03db040b 	bicseq	r0, fp, #184549376	; 0xb000000
    46cc:	010f0000 	mrseq	r0, CPSR
    46d0:	000003e7 	andeq	r0, r0, r7, ror #7
    46d4:	0001ce10 	andeq	ip, r1, r0, lsl lr
    46d8:	da0c0000 	ble	3046e0 <__ccfg+0x2e4738>
    46dc:	f2000002 	vhadd.s8	d0, d0, d2
    46e0:	0d000003 	stceq	0, cr0, [r0, #-12]
    46e4:	03e70700 	mvneq	r0, #0, 14
    46e8:	33110000 	tstcc	r1, #0
    46ec:	07000004 	streq	r0, [r0, -r4]
    46f0:	f216017f 	vbic	q0, q3, <illegal reg q15.5>
    46f4:	01000003 	tsteq	r0, r3
    46f8:	037a1101 	cmneq	sl, #1073741824	; 0x40000000
    46fc:	82070000 	andhi	r0, r7, #0
    4700:	02011401 	andeq	r1, r1, #16777216	; 0x1000000
    4704:	01010000 	mrseq	r0, (UNDEF: 1)
    4708:	00045811 	andeq	r5, r4, r1, lsl r8
    470c:	02d80700 	sbcseq	r0, r8, #0, 14
    4710:	0001f50e 	andeq	pc, r1, lr, lsl #10
    4714:	12010100 	andne	r0, r1, #0, 2
    4718:	03030708 	movweq	r0, #14088	; 0x3708
    471c:	00044b09 	andeq	r4, r4, r9, lsl #22
    4720:	21e31300 	mvncs	r1, r0, lsl #6
    4724:	07070000 	streq	r0, [r7, -r0]
    4728:	01ce0703 	biceq	r0, lr, r3, lsl #14
    472c:	13000000 	movwne	r0, #0
    4730:	0000052e 	andeq	r0, r0, lr, lsr #10
    4734:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    4738:	00000206 	andeq	r0, r0, r6, lsl #4
    473c:	530e0004 	movwpl	r0, #57348	; 0xe004
    4740:	07000002 	streq	r0, [r0, -r2]
    4744:	24030309 	strcs	r0, [r3], #-777	; 0xfffffcf7
    4748:	14000004 	strne	r0, [r0], #-4
    474c:	0000047c 	andeq	r0, r0, ip, ror r4
    4750:	030b0730 	movweq	r0, #46896	; 0xb730
    4754:	0004bb08 	andeq	fp, r4, r8, lsl #22
    4758:	04751300 	ldrbteq	r1, [r5], #-768	; 0xfffffd00
    475c:	14070000 	strne	r0, [r7], #-0
    4760:	01ce0803 	biceq	r0, lr, r3, lsl #16
    4764:	13000000 	movwne	r0, #0
    4768:	000002cb 	andeq	r0, r0, fp, asr #5
    476c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    4770:	000001ce 	andeq	r0, r0, lr, asr #3
    4774:	04701302 	ldrbteq	r1, [r0], #-770	; 0xfffffcfe
    4778:	16070000 	strne	r0, [r7], -r0
    477c:	03c80b03 	biceq	r0, r8, #3072	; 0xc00
    4780:	13040000 	movwne	r0, #16384	; 0x4000
    4784:	00000f2e 	andeq	r0, r0, lr, lsr #30
    4788:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    478c:	00000206 	andeq	r0, r0, r6, lsl #4
    4790:	042c1308 	strteq	r1, [ip], #-776	; 0xfffffcf8
    4794:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    4798:	04bb0f03 	ldrteq	r0, [fp], #3843	; 0xf03
    479c:	130c0000 	movwne	r0, #49152	; 0xc000
    47a0:	000002c6 	andeq	r0, r0, r6, asr #5
    47a4:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    47a8:	000004cb 	andeq	r0, r0, fp, asr #9
    47ac:	4b0c002c 	blmi	304864 <__ccfg+0x2e48bc>
    47b0:	cb000004 	blgt	47c8 <__exidx_end+0x1b48>
    47b4:	15000004 	strne	r0, [r0, #-4]
    47b8:	00000080 	andeq	r0, r0, r0, lsl #1
    47bc:	040b0003 	streq	r0, [fp], #-3
    47c0:	00000458 	andeq	r0, r0, r8, asr r4
    47c4:	0004870e 	andeq	r8, r4, lr, lsl #14
    47c8:	031c0700 	tsteq	ip, #0, 14
    47cc:	0004581b 	andeq	r5, r4, fp, lsl r8
    47d0:	03701100 	cmneq	r0, #0, 2
    47d4:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    47d8:	04ed1403 	strbteq	r1, [sp], #1027	; 0x403
    47dc:	01010000 	mrseq	r0, (UNDEF: 1)
    47e0:	04d1040b 	ldrbeq	r0, [r1], #1035	; 0x40b
    47e4:	a0080000 	andge	r0, r8, r0
    47e8:	08000004 	stmdaeq	r0, {r2}
    47ec:	01ce131d 	biceq	r1, lr, sp, lsl r3
    47f0:	01010000 	mrseq	r0, (UNDEF: 1)
    47f4:	00070a08 	andeq	r0, r7, r8, lsl #20
    47f8:	1a1e0800 	bne	786800 <__ccfg+0x766858>
    47fc:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4800:	9a080101 	bls	204c0c <__ccfg+0x1e4c64>
    4804:	08000008 	stmdaeq	r0, {r3}
    4808:	01df241e 	bicseq	r2, pc, lr, lsl r4	; <UNPREDICTABLE>
    480c:	01010000 	mrseq	r0, (UNDEF: 1)
    4810:	0005c908 	andeq	ip, r5, r8, lsl #18
    4814:	14220800 	strtne	r0, [r2], #-2048	; 0xfffff800
    4818:	000004ed 	andeq	r0, r0, sp, ror #9
    481c:	c0160101 	andsgt	r0, r6, r1, lsl #2
    4820:	09000001 	stmdbeq	r0, {r0}
    4824:	050e0217 	streq	r0, [lr, #-535]	; 0xfffffde9
    4828:	01ffa803 	mvnseq	sl, r3, lsl #16
    482c:	05000000 	streq	r0, [r0, #-0]
    4830:	00030000 	andeq	r0, r3, r0
    4834:	00001202 	andeq	r1, r0, r2, lsl #4
    4838:	015f0104 	cmpeq	pc, r4, lsl #2
    483c:	ea0c0000 	b	304844 <__ccfg+0x2e489c>
    4840:	c0000011 	andgt	r0, r0, r1, lsl r0
    4844:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    4848:	00000009 	andeq	r0, r0, r9
    484c:	e6000000 	str	r0, [r0], -r0
    4850:	02000038 	andeq	r0, r0, #56	; 0x38
    4854:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    4858:	02020000 	andeq	r0, r2, #0
    485c:	0003cc05 	andeq	ip, r3, r5, lsl #24
    4860:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4864:	0000009d 	muleq	r0, sp, r0
    4868:	98050802 	stmdals	r5, {r1, fp}
    486c:	03000000 	movweq	r0, #0
    4870:	000021eb 	andeq	r2, r0, fp, ror #3
    4874:	4d182e04 	ldcmi	14, cr2, [r8, #-16]
    4878:	02000000 	andeq	r0, r0, #0
    487c:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    4880:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    4884:	04000020 	streq	r0, [r0], #-32	; 0xffffffe0
    4888:	00601931 	rsbeq	r1, r0, r1, lsr r9
    488c:	02020000 	andeq	r0, r2, #0
    4890:	00026007 	andeq	r6, r2, r7
    4894:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    4898:	34040000 	strcc	r0, [r4], #-0
    489c:	00007319 	andeq	r7, r0, r9, lsl r3
    48a0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    48a4:	00000072 	andeq	r0, r0, r2, ror r0
    48a8:	6d070802 	stcvs	8, cr0, [r7, #-8]
    48ac:	04000000 	streq	r0, [r0], #-0
    48b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    48b4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    48b8:	00007707 	andeq	r7, r0, r7, lsl #14
    48bc:	15af0300 	strne	r0, [pc, #768]!	; 4bc4 <__exidx_end+0x1f44>
    48c0:	27050000 	strcs	r0, [r5, -r0]
    48c4:	00005412 	andeq	r5, r0, r2, lsl r4
    48c8:	008f0500 	addeq	r0, pc, r0, lsl #10
    48cc:	8f060000 	svchi	0x00060000
    48d0:	03000000 	movweq	r0, #0
    48d4:	000013a7 	andeq	r1, r0, r7, lsr #7
    48d8:	41122b05 	tstmi	r2, r5, lsl #22
    48dc:	06000000 	streq	r0, [r0], -r0
    48e0:	000000a5 	andeq	r0, r0, r5, lsr #1
    48e4:	0000a505 	andeq	sl, r0, r5, lsl #10
    48e8:	16000300 	strne	r0, [r0], -r0, lsl #6
    48ec:	2c050000 	stccs	0, cr0, [r5], {-0}
    48f0:	00006712 	andeq	r6, r0, r2, lsl r7
    48f4:	00bb0500 	adcseq	r0, fp, r0, lsl #10
    48f8:	96030000 	strls	r0, [r3], -r0
    48fc:	05000002 	streq	r0, [r0, #-2]
    4900:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    4904:	51030000 	mrspl	r0, (UNDEF: 3)
    4908:	05000007 	streq	r0, [r0, #-7]
    490c:	00e4102e 	rsceq	r1, r4, lr, lsr #32
    4910:	04070000 	streq	r0, [r7], #-0
    4914:	0000008f 	andeq	r0, r0, pc, lsl #1
    4918:	32050808 	andcc	r0, r5, #8, 16	; 0x80000
    491c:	00017809 	andeq	r7, r1, r9, lsl #16
    4920:	02b10900 	adcseq	r0, r1, #0, 18
    4924:	34050000 	strcc	r0, [r5], #-0
    4928:	0000a507 	andeq	sl, r0, r7, lsl #10
    492c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    4930:	00910900 	addseq	r0, r1, r0, lsl #18
    4934:	35050000 	strcc	r0, [r5, #-0]
    4938:	0000a503 	andeq	sl, r0, r3, lsl #10
    493c:	06010100 	streq	r0, [r1], -r0, lsl #2
    4940:	02880900 	addeq	r0, r8, #0, 18
    4944:	36050000 	strcc	r0, [r5], -r0
    4948:	0000a503 	andeq	sl, r0, r3, lsl #10
    494c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4950:	03fb0900 	mvnseq	r0, #0, 18
    4954:	37050000 	strcc	r0, [r5, -r0]
    4958:	0000a503 	andeq	sl, r0, r3, lsl #10
    495c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    4960:	03f40900 	mvnseq	r0, #0, 18
    4964:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    4968:	0000a503 	andeq	sl, r0, r3, lsl #10
    496c:	00040100 	andeq	r0, r4, r0, lsl #2
    4970:	03e50a00 	mvneq	r0, #0, 20
    4974:	3a050000 	bcc	14497c <__ccfg+0x1249d4>
    4978:	0000a507 	andeq	sl, r0, r7, lsl #10
    497c:	400a0100 	andmi	r0, sl, r0, lsl #2
    4980:	05000000 	streq	r0, [r0, #-0]
    4984:	00a5033c 	adceq	r0, r5, ip, lsr r3
    4988:	0a020000 	beq	84990 <__ccfg+0x649e8>
    498c:	00000066 	andeq	r0, r0, r6, rrx
    4990:	a5033d05 	strge	r3, [r3, #-3333]	; 0xfffff2fb
    4994:	03000000 	movweq	r0, #0
    4998:	0001430a 	andeq	r4, r1, sl, lsl #6
    499c:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    49a0:	000000bb 	strheq	r0, [r0], -fp
    49a4:	23030004 	movwcs	r0, #12292	; 0x3004
    49a8:	05000004 	streq	r0, [r0, #-4]
    49ac:	00ea0341 	rsceq	r0, sl, r1, asr #6
    49b0:	78060000 	stmdavc	r6, {}	; <UNPREDICTABLE>
    49b4:	0b000001 	bleq	49c0 <__exidx_end+0x1d40>
    49b8:	000002a5 	andeq	r0, r0, r5, lsr #5
    49bc:	841a4305 	ldrhi	r4, [sl], #-773	; 0xfffffcfb
    49c0:	01000001 	tsteq	r0, r1
    49c4:	02fc0b01 	rscseq	r0, ip, #1024	; 0x400
    49c8:	45050000 	strmi	r0, [r5, #-0]
    49cc:	0001a50e 	andeq	sl, r1, lr, lsl #10
    49d0:	07010100 	streq	r0, [r1, -r0, lsl #2]
    49d4:	0001ab04 	andeq	sl, r1, r4, lsl #22
    49d8:	08010200 	stmdaeq	r1, {r9}
    49dc:	00000399 	muleq	r0, r9, r3
    49e0:	0001ab05 	andeq	sl, r1, r5, lsl #22
    49e4:	030a0b00 	movweq	r0, #43776	; 0xab00
    49e8:	45050000 	strmi	r0, [r5, #-0]
    49ec:	0001a51e 	andeq	sl, r1, lr, lsl r5
    49f0:	08010100 	stmdaeq	r1, {r8}
    49f4:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    49f8:	000001f6 	strdeq	r0, [r0], -r6
    49fc:	0002c10a 	andeq	ip, r2, sl, lsl #2
    4a00:	0b900600 	bleq	fe406208 <_estack+0xde401208>
    4a04:	00000067 	andeq	r0, r0, r7, rrx
    4a08:	05dc0a00 	ldrbeq	r0, [ip, #2560]	; 0xa00
    4a0c:	91060000 	mrsls	r0, (UNDEF: 6)
    4a10:	00008f08 	andeq	r8, r0, r8, lsl #30
    4a14:	600a0400 	andvs	r0, sl, r0, lsl #8
    4a18:	06000004 	streq	r0, [r0], -r4
    4a1c:	00b11092 	umlalseq	r1, r1, r2, r0	; <UNPREDICTABLE>
    4a20:	00060000 	andeq	r0, r6, r0
    4a24:	00040203 	andeq	r0, r4, r3, lsl #4
    4a28:	03930600 	orrseq	r0, r3, #0, 12
    4a2c:	000001c5 	andeq	r0, r0, r5, asr #3
    4a30:	0001f60c 	andeq	pc, r1, ip, lsl #12
    4a34:	00020d00 	andeq	r0, r2, r0, lsl #26
    4a38:	0b000d00 	bleq	7e40 <__exidx_end+0x51c0>
    4a3c:	00000036 	andeq	r0, r0, r6, lsr r0
    4a40:	020f9906 	andeq	r9, pc, #98304	; 0x18000
    4a44:	01000002 	tsteq	r0, r2
    4a48:	b6040701 	strlt	r0, [r4], -r1, lsl #14
    4a4c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4a50:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    4a54:	0000024b 	andeq	r0, r0, fp, asr #4
    4a58:	00045309 	andeq	r5, r4, r9, lsl #6
    4a5c:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    4a60:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a64:	00010701 	andeq	r0, r1, r1, lsl #14
    4a68:	00003109 	andeq	r3, r0, r9, lsl #2
    4a6c:	03940700 	orrseq	r0, r4, #0, 14
    4a70:	000000a5 	andeq	r0, r0, r5, lsr #1
    4a74:	00000101 	andeq	r0, r0, r1, lsl #2
    4a78:	02730300 	rsbseq	r0, r3, #0, 6
    4a7c:	96070000 	strls	r0, [r7], -r0
    4a80:	00022103 	andeq	r2, r2, r3, lsl #2
    4a84:	024b0500 	subeq	r0, fp, #0, 10
    4a88:	570c0000 	strpl	r0, [ip, -r0]
    4a8c:	67000002 	strvs	r0, [r0, -r2]
    4a90:	0d000002 	stceq	0, cr0, [r0, #-8]
    4a94:	025c0500 	subseq	r0, ip, #0, 10
    4a98:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    4a9c:	07000002 	streq	r0, [r0, -r2]
    4aa0:	0267179c 	rsbeq	r1, r7, #156, 14	; 0x2700000
    4aa4:	01010000 	mrseq	r0, (UNDEF: 1)
    4aa8:	00009b0c 	andeq	r9, r0, ip, lsl #22
    4aac:	00028500 	andeq	r8, r2, r0, lsl #10
    4ab0:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    4ab4:	0000027a 	andeq	r0, r0, sl, ror r2
    4ab8:	0003820b 	andeq	r8, r3, fp, lsl #4
    4abc:	13060800 	movwne	r0, #26624	; 0x6800
    4ac0:	00000285 	andeq	r0, r0, r5, lsl #5
    4ac4:	230b0101 	movwcs	r0, #45313	; 0xb101
    4ac8:	06000001 	streq	r0, [r0], -r1
    4acc:	00bb0ec3 	adcseq	r0, fp, r3, asr #29
    4ad0:	01010000 	mrseq	r0, (UNDEF: 1)
    4ad4:	00046d0e 	andeq	r6, r4, lr, lsl #26
    4ad8:	016e0900 	cmneq	lr, r0, lsl #18
    4adc:	0002b310 	andeq	fp, r2, r0, lsl r3
    4ae0:	b9040700 	stmdblt	r4, {r8, r9, sl}
    4ae4:	0f000002 	svceq	0x00000002
    4ae8:	0002c501 	andeq	ip, r2, r1, lsl #10
    4aec:	008f1000 	addeq	r1, pc, r0
    4af0:	0c000000 	stceq	0, cr0, [r0], {-0}
    4af4:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    4af8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4afc:	c505000d 	strgt	r0, [r5, #-13]
    4b00:	11000002 	tstne	r0, r2
    4b04:	00000433 	andeq	r0, r0, r3, lsr r4
    4b08:	16017f09 	strne	r7, [r1], -r9, lsl #30
    4b0c:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4b10:	7a110101 	bvc	444f1c <__ccfg+0x424f74>
    4b14:	09000003 	stmdbeq	r0, {r0, r1}
    4b18:	c7140182 	ldrgt	r0, [r4, -r2, lsl #3]
    4b1c:	01000000 	mrseq	r0, (UNDEF: 0)
    4b20:	04581101 	ldrbeq	r1, [r8], #-257	; 0xfffffeff
    4b24:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    4b28:	00bb0e02 	adcseq	r0, fp, r2, lsl #28
    4b2c:	01010000 	mrseq	r0, (UNDEF: 1)
    4b30:	03090812 	movweq	r0, #38930	; 0x9812
    4b34:	03290903 			; <UNDEFINED> instruction: 0x03290903
    4b38:	e3130000 	tst	r3, #0
    4b3c:	09000021 	stmdbeq	r0, {r0, r5}
    4b40:	8f070307 	svchi	0x00070307
    4b44:	00000000 	andeq	r0, r0, r0
    4b48:	00052e13 	andeq	r2, r5, r3, lsl lr
    4b4c:	03080900 	movweq	r0, #35072	; 0x8900
    4b50:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4b54:	0e000400 	cfcpyseq	mvf0, mvf0
    4b58:	00000253 	andeq	r0, r0, r3, asr r2
    4b5c:	03030909 	movweq	r0, #14601	; 0x3909
    4b60:	00000302 	andeq	r0, r0, r2, lsl #6
    4b64:	00047c14 	andeq	r7, r4, r4, lsl ip
    4b68:	0b093000 	bleq	250b70 <__ccfg+0x230bc8>
    4b6c:	03990803 	orrseq	r0, r9, #196608	; 0x30000
    4b70:	75130000 	ldrvc	r0, [r3, #-0]
    4b74:	09000004 	stmdbeq	r0, {r2}
    4b78:	8f080314 	svchi	0x00080314
    4b7c:	00000000 	andeq	r0, r0, r0
    4b80:	0002cb13 	andeq	ip, r2, r3, lsl fp
    4b84:	03150900 	tsteq	r5, #0, 18
    4b88:	00008f08 	andeq	r8, r0, r8, lsl #30
    4b8c:	70130200 	andsvc	r0, r3, r0, lsl #4
    4b90:	09000004 	stmdbeq	r0, {r2}
    4b94:	a60b0316 			; <UNDEFINED> instruction: 0xa60b0316
    4b98:	04000002 	streq	r0, [r0], #-2
    4b9c:	000f2e13 	andeq	r2, pc, r3, lsl lr	; <UNPREDICTABLE>
    4ba0:	03170900 	tsteq	r7, #0, 18
    4ba4:	0000cc09 	andeq	ip, r0, r9, lsl #24
    4ba8:	2c130800 	ldccs	8, cr0, [r3], {-0}
    4bac:	09000004 	stmdbeq	r0, {r2}
    4bb0:	990f0318 	stmdbls	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    4bb4:	0c000003 	stceq	0, cr0, [r0], {3}
    4bb8:	0002c613 	andeq	ip, r2, r3, lsl r6
    4bbc:	03190900 	tsteq	r9, #0, 18
    4bc0:	0003a915 	andeq	sl, r3, r5, lsl r9
    4bc4:	0c002c00 	stceq	12, cr2, [r0], {-0}
    4bc8:	00000329 	andeq	r0, r0, r9, lsr #6
    4bcc:	000003a9 	andeq	r0, r0, r9, lsr #7
    4bd0:	00008815 	andeq	r8, r0, r5, lsl r8
    4bd4:	07000300 	streq	r0, [r0, -r0, lsl #6]
    4bd8:	00033604 	andeq	r3, r3, r4, lsl #12
    4bdc:	04870e00 	streq	r0, [r7], #3584	; 0xe00
    4be0:	1c090000 	stcne	0, cr0, [r9], {-0}
    4be4:	03361b03 	teqeq	r6, #3072	; 0xc00
    4be8:	70110000 	andsvc	r0, r1, r0
    4bec:	09000003 	stmdbeq	r0, {r0, r1}
    4bf0:	cb14031e 	blgt	505870 <__ccfg+0x4e58c8>
    4bf4:	01000003 	tsteq	r0, r3
    4bf8:	af040701 	svcge	0x00040701
    4bfc:	0b000003 	bleq	4c10 <__exidx_end+0x1f90>
    4c00:	000004a0 	andeq	r0, r0, r0, lsr #9
    4c04:	8f131d0a 	svchi	0x00131d0a
    4c08:	01000000 	mrseq	r0, (UNDEF: 0)
    4c0c:	070a0b01 	streq	r0, [sl, -r1, lsl #22]
    4c10:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    4c14:	0000a01a 	andeq	sl, r0, sl, lsl r0
    4c18:	0b010100 	bleq	45020 <__ccfg+0x25078>
    4c1c:	0000089a 	muleq	r0, sl, r8
    4c20:	a0241e0a 	eorge	r1, r4, sl, lsl #28
    4c24:	01000000 	mrseq	r0, (UNDEF: 0)
    4c28:	05c90b01 	strbeq	r0, [r9, #2817]	; 0xb01
    4c2c:	220a0000 	andcs	r0, sl, #0
    4c30:	0003cb14 	andeq	ip, r3, r4, lsl fp
    4c34:	16010100 	strne	r0, [r1], -r0, lsl #2
    4c38:	0000026c 	andeq	r0, r0, ip, ror #4
    4c3c:	05100d01 	ldreq	r0, [r0, #-3329]	; 0xfffff2ff
    4c40:	002c7803 	eoreq	r7, ip, r3, lsl #16
    4c44:	ca011700 	bgt	4a84c <__ccfg+0x2a8a4>
    4c48:	01000011 	tsteq	r0, r1, lsl r0
    4c4c:	00010611 	andeq	r0, r1, r1, lsl r6
    4c50:	00000000 	andeq	r0, r0, r0
    4c54:	01000000 	mrseq	r0, (UNDEF: 0)
    4c58:	0004bb9c 	muleq	r4, ip, fp
    4c5c:	74731800 	ldrbtvc	r1, [r3], #-2048	; 0xfffff800
    4c60:	1c110100 	ldfnes	f0, [r1], {-0}
    4c64:	0000008f 	andeq	r0, r0, pc, lsl #1
    4c68:	00001f80 	andeq	r1, r0, r0, lsl #31
    4c6c:	0011c519 	andseq	ip, r1, r9, lsl r5
    4c70:	2c110100 	ldfcss	f0, [r1], {-0}
    4c74:	0000021b 	andeq	r0, r0, fp, lsl r2
    4c78:	00001f9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
    4c7c:	6c617618 	stclvs	6, cr7, [r1], #-96	; 0xffffffa0
    4c80:	3a110100 	bcc	445088 <__ccfg+0x4250e0>
    4c84:	000000d8 	ldrdeq	r0, [r0], -r8
    4c88:	00001fbc 			; <UNDEFINED> instruction: 0x00001fbc
    4c8c:	0100701a 	tsteq	r0, sl, lsl r0
    4c90:	04bb1213 	ldrteq	r1, [fp], #531	; 0x213
    4c94:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
    4c98:	07140100 	ldreq	r0, [r4, -r0, lsl #2]
    4c9c:	0000008f 	andeq	r0, r0, pc, lsl #1
    4ca0:	00001fda 	ldrdeq	r1, [r0], -sl
    4ca4:	0100761a 	tsteq	r0, sl, lsl r6
    4ca8:	00a50715 	adceq	r0, r5, r5, lsl r7
    4cac:	d41c0000 	ldrle	r0, [ip], #-0
    4cb0:	00000004 	andeq	r0, r0, r4
    4cb4:	00000000 	andeq	r0, r0, r0
    4cb8:	01000000 	mrseq	r0, (UNDEF: 0)
    4cbc:	de1c031c 	mrcle	3, 0, r0, cr12, cr12, {0}
    4cc0:	00000004 	andeq	r0, r0, r4
    4cc4:	00000000 	andeq	r0, r0, r0
    4cc8:	01000000 	mrseq	r0, (UNDEF: 0)
    4ccc:	e81d031f 	ldmda	sp, {r0, r1, r2, r3, r4, r8, r9}
    4cd0:	00000004 	andeq	r0, r0, r4
    4cd4:	30000000 	andcc	r0, r0, r0
    4cd8:	01000009 	tsteq	r0, r9
    4cdc:	f61e0b26 			; <UNDEFINED> instruction: 0xf61e0b26
    4ce0:	ed000004 	stc	0, cr0, [r0, #-16]
    4ce4:	0000001f 	andeq	r0, r0, pc, lsl r0
    4ce8:	57040700 	strpl	r0, [r4, -r0, lsl #14]
    4cec:	1f000002 	svcne	0x00000002
    4cf0:	0011da01 	andseq	sp, r1, r1, lsl #20
    4cf4:	060f0100 	streq	r0, [pc], -r0, lsl #2
	...
    4d00:	ec209c01 	stc	12, cr9, [r0], #-4
    4d04:	02000007 	andeq	r0, r0, #7
    4d08:	0301355b 	movweq	r3, #5467	; 0x155b
    4d0c:	0004ff20 	andeq	pc, r4, r0, lsr #30
    4d10:	35500200 	ldrbcc	r0, [r0, #-512]	; 0xfffffe00
    4d14:	b8210301 	stmdalt	r1!, {r0, r8, r9}
    4d18:	03000011 	movweq	r0, #17
    4d1c:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    4d20:	03000000 	movweq	r0, #0
    4d24:	00015522 	andeq	r5, r1, r2, lsr #10
    4d28:	18a40300 	stmiane	r4!, {r8, r9}
    4d2c:	00000067 	andeq	r0, r0, r7, rrx
    4d30:	04f60000 	ldrbteq	r0, [r6], #0
    4d34:	00030000 	andeq	r0, r3, r0
    4d38:	000013f3 	strdeq	r1, [r0], -r3
    4d3c:	015f0104 	cmpeq	pc, r4, lsl #2
    4d40:	440c0000 	strmi	r0, [ip], #-0
    4d44:	c0000012 	andgt	r0, r0, r2, lsl r0
    4d48:	d0000000 	andle	r0, r0, r0
    4d4c:	00000009 	andeq	r0, r0, r9
    4d50:	83000000 	movwhi	r0, #0
    4d54:	0200003b 	andeq	r0, r0, #59	; 0x3b
    4d58:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    4d5c:	02020000 	andeq	r0, r2, #0
    4d60:	0003cc05 	andeq	ip, r3, r5, lsl #24
    4d64:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4d68:	0000009d 	muleq	r0, sp, r0
    4d6c:	98050802 	stmdals	r5, {r1, fp}
    4d70:	03000000 	movweq	r0, #0
    4d74:	000021eb 	andeq	r2, r0, fp, ror #3
    4d78:	4d182e03 	ldcmi	14, cr2, [r8, #-12]
    4d7c:	02000000 	andeq	r0, r0, #0
    4d80:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    4d84:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    4d88:	03000020 	movweq	r0, #32
    4d8c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    4d90:	02020000 	andeq	r0, r2, #0
    4d94:	00026007 	andeq	r6, r2, r7
    4d98:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    4d9c:	34030000 	strcc	r0, [r3], #-0
    4da0:	00007319 	andeq	r7, r0, r9, lsl r3
    4da4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4da8:	00000072 	andeq	r0, r0, r2, ror r0
    4dac:	6d070802 	stcvs	8, cr0, [r7, #-8]
    4db0:	04000000 	streq	r0, [r0], #-0
    4db4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4db8:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4dbc:	00007707 	andeq	r7, r0, r7, lsl #14
    4dc0:	15af0300 	strne	r0, [pc, #768]!	; 50c8 <__exidx_end+0x2448>
    4dc4:	27040000 	strcs	r0, [r4, -r0]
    4dc8:	00005412 	andeq	r5, r0, r2, lsl r4
    4dcc:	008f0500 	addeq	r0, pc, r0, lsl #10
    4dd0:	8f060000 	svchi	0x00060000
    4dd4:	03000000 	movweq	r0, #0
    4dd8:	000013a7 	andeq	r1, r0, r7, lsr #7
    4ddc:	41122b04 	tstmi	r2, r4, lsl #22
    4de0:	06000000 	streq	r0, [r0], -r0
    4de4:	000000a5 	andeq	r0, r0, r5, lsr #1
    4de8:	00160003 	andseq	r0, r6, r3
    4dec:	122c0400 	eorne	r0, ip, #0, 8
    4df0:	00000067 	andeq	r0, r0, r7, rrx
    4df4:	0000b605 	andeq	fp, r0, r5, lsl #12
    4df8:	02960300 	addseq	r0, r6, #0, 6
    4dfc:	2d040000 	stccs	0, cr0, [r4, #-0]
    4e00:	00006712 	andeq	r6, r0, r2, lsl r7
    4e04:	04080700 	streq	r0, [r8], #-1792	; 0xfffff900
    4e08:	01610932 	cmneq	r1, r2, lsr r9
    4e0c:	b1080000 	mrslt	r0, (UNDEF: 8)
    4e10:	04000002 	streq	r0, [r0], #-2
    4e14:	00a50734 	adceq	r0, r5, r4, lsr r7
    4e18:	01010000 	mrseq	r0, (UNDEF: 1)
    4e1c:	91080007 	tstls	r8, r7
    4e20:	04000000 	streq	r0, [r0], #-0
    4e24:	00a50335 	adceq	r0, r5, r5, lsr r3
    4e28:	01010000 	mrseq	r0, (UNDEF: 1)
    4e2c:	88080006 	stmdahi	r8, {r1, r2}
    4e30:	04000002 	streq	r0, [r0], #-2
    4e34:	00a50336 	adceq	r0, r5, r6, lsr r3
    4e38:	01010000 	mrseq	r0, (UNDEF: 1)
    4e3c:	fb080005 	blx	204e5a <__ccfg+0x1e4eb2>
    4e40:	04000003 	streq	r0, [r0], #-3
    4e44:	00a50337 	adceq	r0, r5, r7, lsr r3
    4e48:	01010000 	mrseq	r0, (UNDEF: 1)
    4e4c:	f4080004 	vst4.8	{d0-d3}, [r8], r4
    4e50:	04000003 	streq	r0, [r0], #-3
    4e54:	00a50338 	adceq	r0, r5, r8, lsr r3
    4e58:	04010000 	streq	r0, [r1], #-0
    4e5c:	e5090000 	str	r0, [r9, #-0]
    4e60:	04000003 	streq	r0, [r0], #-3
    4e64:	00a5073a 	adceq	r0, r5, sl, lsr r7
    4e68:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    4e6c:	00000040 	andeq	r0, r0, r0, asr #32
    4e70:	a5033c04 	strge	r3, [r3, #-3076]	; 0xfffff3fc
    4e74:	02000000 	andeq	r0, r0, #0
    4e78:	00006609 	andeq	r6, r0, r9, lsl #12
    4e7c:	033d0400 	teqeq	sp, #0, 8
    4e80:	000000a5 	andeq	r0, r0, r5, lsr #1
    4e84:	01430903 	cmpeq	r3, r3, lsl #18
    4e88:	3f040000 	svccc	0x00040000
    4e8c:	0000b608 	andeq	fp, r0, r8, lsl #12
    4e90:	03000400 	movweq	r0, #1024	; 0x400
    4e94:	00000423 	andeq	r0, r0, r3, lsr #8
    4e98:	d3034104 	movwle	r4, #12548	; 0x3104
    4e9c:	06000000 	streq	r0, [r0], -r0
    4ea0:	00000161 	andeq	r0, r0, r1, ror #2
    4ea4:	0002a50a 	andeq	sl, r2, sl, lsl #10
    4ea8:	1a430400 	bne	10c5eb0 <__ccfg+0x10a5f08>
    4eac:	0000016d 	andeq	r0, r0, sp, ror #2
    4eb0:	fc0a0101 	stc2	1, cr0, [sl], {1}
    4eb4:	04000002 	streq	r0, [r0], #-2
    4eb8:	018e0e45 	orreq	r0, lr, r5, asr #28
    4ebc:	01010000 	mrseq	r0, (UNDEF: 1)
    4ec0:	0194040b 	orrseq	r0, r4, fp, lsl #8
    4ec4:	01020000 	mrseq	r0, (UNDEF: 2)
    4ec8:	00039908 	andeq	r9, r3, r8, lsl #18
    4ecc:	01940500 	orrseq	r0, r4, r0, lsl #10
    4ed0:	0a0a0000 	beq	284ed8 <__ccfg+0x264f30>
    4ed4:	04000003 	streq	r0, [r0], #-3
    4ed8:	018e1e45 	orreq	r1, lr, r5, asr #28
    4edc:	01010000 	mrseq	r0, (UNDEF: 1)
    4ee0:	8f050807 	svchi	0x00050807
    4ee4:	0001df09 	andeq	sp, r1, r9, lsl #30
    4ee8:	02c10900 	sbceq	r0, r1, #0, 18
    4eec:	90050000 	andls	r0, r5, r0
    4ef0:	0000670b 	andeq	r6, r0, fp, lsl #14
    4ef4:	dc090000 	stcle	0, cr0, [r9], {-0}
    4ef8:	05000005 	streq	r0, [r0, #-5]
    4efc:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    4f00:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    4f04:	00000460 	andeq	r0, r0, r0, ror #8
    4f08:	b1109205 	tstlt	r0, r5, lsl #4
    4f0c:	06000000 	streq	r0, [r0], -r0
    4f10:	04020300 	streq	r0, [r2], #-768	; 0xfffffd00
    4f14:	93050000 	movwls	r0, #20480	; 0x5000
    4f18:	0001ae03 	andeq	sl, r1, r3, lsl #28
    4f1c:	01df0c00 	bicseq	r0, pc, r0, lsl #24
    4f20:	01f60000 	mvnseq	r0, r0
    4f24:	000d0000 	andeq	r0, sp, r0
    4f28:	0000360a 	andeq	r3, r0, sl, lsl #12
    4f2c:	0f990500 	svceq	0x00990500
    4f30:	000001eb 	andeq	r0, r0, fp, ror #3
    4f34:	01070101 	tsteq	r7, r1, lsl #2
    4f38:	2e099106 	mvfcse	f1, f6
    4f3c:	08000002 	stmdaeq	r0, {r1}
    4f40:	00000453 	andeq	r0, r0, r3, asr r4
    4f44:	a5079306 	strge	r9, [r7, #-774]	; 0xfffffcfa
    4f48:	01000000 	mrseq	r0, (UNDEF: 0)
    4f4c:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    4f50:	00000031 	andeq	r0, r0, r1, lsr r0
    4f54:	a5039406 	strge	r9, [r3, #-1030]	; 0xfffffbfa
    4f58:	01000000 	mrseq	r0, (UNDEF: 0)
    4f5c:	00000001 	andeq	r0, r0, r1
    4f60:	00027303 	andeq	r7, r2, r3, lsl #6
    4f64:	03960600 	orrseq	r0, r6, #0, 12
    4f68:	00000204 	andeq	r0, r0, r4, lsl #4
    4f6c:	00022e05 	andeq	r2, r2, r5, lsl #28
    4f70:	023a0c00 	eorseq	r0, sl, #0, 24
    4f74:	024a0000 	subeq	r0, sl, #0
    4f78:	000d0000 	andeq	r0, sp, r0
    4f7c:	00023f05 	andeq	r3, r2, r5, lsl #30
    4f80:	02dc0a00 	sbcseq	r0, ip, #0, 20
    4f84:	9c060000 	stcls	0, cr0, [r6], {-0}
    4f88:	00024a17 	andeq	r4, r2, r7, lsl sl
    4f8c:	0c010100 	stfeqs	f0, [r1], {-0}
    4f90:	0000009b 	muleq	r0, fp, r0
    4f94:	00000268 	andeq	r0, r0, r8, ror #4
    4f98:	5d05000d 	stcpl	0, cr0, [r5, #-52]	; 0xffffffcc
    4f9c:	0a000002 	beq	4fac <__exidx_end+0x232c>
    4fa0:	00000382 	andeq	r0, r0, r2, lsl #7
    4fa4:	68130607 	ldmdavs	r3, {r0, r1, r2, r9, sl}
    4fa8:	01000002 	tsteq	r0, r2
    4fac:	01230a01 			; <UNDEFINED> instruction: 0x01230a01
    4fb0:	c3050000 	movwgt	r0, #20480	; 0x5000
    4fb4:	0000b60e 	andeq	fp, r0, lr, lsl #12
    4fb8:	0e010100 	adfeqs	f0, f1, f0
    4fbc:	0000046d 	andeq	r0, r0, sp, ror #8
    4fc0:	10016e08 	andne	r6, r1, r8, lsl #28
    4fc4:	00000296 	muleq	r0, r6, r2
    4fc8:	029c040b 	addseq	r0, ip, #184549376	; 0xb000000
    4fcc:	010f0000 	mrseq	r0, CPSR
    4fd0:	000002a8 	andeq	r0, r0, r8, lsr #5
    4fd4:	00008f10 	andeq	r8, r0, r0, lsl pc
    4fd8:	9b0c0000 	blls	304fe0 <__ccfg+0x2e5038>
    4fdc:	b3000001 	movwlt	r0, #1
    4fe0:	0d000002 	stceq	0, cr0, [r0, #-8]
    4fe4:	02a80500 	adceq	r0, r8, #0, 10
    4fe8:	33110000 	tstcc	r1, #0
    4fec:	08000004 	stmdaeq	r0, {r2}
    4ff0:	b316017f 	tstlt	r6, #-1073741793	; 0xc000001f
    4ff4:	01000002 	tsteq	r0, r2
    4ff8:	037a1101 	cmneq	sl, #1073741824	; 0x40000000
    4ffc:	82080000 	andhi	r0, r8, #0
    5000:	00c21401 	sbceq	r1, r2, r1, lsl #8
    5004:	01010000 	mrseq	r0, (UNDEF: 1)
    5008:	00045811 	andeq	r5, r4, r1, lsl r8
    500c:	02d80800 	sbcseq	r0, r8, #0, 16
    5010:	0000b60e 	andeq	fp, r0, lr, lsl #12
    5014:	12010100 	andne	r0, r1, #0, 2
    5018:	03030808 	movweq	r0, #14344	; 0x3808
    501c:	00030c09 	andeq	r0, r3, r9, lsl #24
    5020:	21e31300 	mvncs	r1, r0, lsl #6
    5024:	07080000 	streq	r0, [r8, -r0]
    5028:	008f0703 	addeq	r0, pc, r3, lsl #14
    502c:	13000000 	movwne	r0, #0
    5030:	0000052e 	andeq	r0, r0, lr, lsr #10
    5034:	08030808 	stmdaeq	r3, {r3, fp}
    5038:	000000c7 	andeq	r0, r0, r7, asr #1
    503c:	530e0004 	movwpl	r0, #57348	; 0xe004
    5040:	08000002 	stmdaeq	r0, {r1}
    5044:	e5030309 	str	r0, [r3, #-777]	; 0xfffffcf7
    5048:	14000002 	strne	r0, [r0], #-2
    504c:	0000047c 	andeq	r0, r0, ip, ror r4
    5050:	030b0830 	movweq	r0, #47152	; 0xb830
    5054:	00037c08 	andeq	r7, r3, r8, lsl #24
    5058:	04751300 	ldrbteq	r1, [r5], #-768	; 0xfffffd00
    505c:	14080000 	strne	r0, [r8], #-0
    5060:	008f0803 	addeq	r0, pc, r3, lsl #16
    5064:	13000000 	movwne	r0, #0
    5068:	000002cb 	andeq	r0, r0, fp, asr #5
    506c:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    5070:	0000008f 	andeq	r0, r0, pc, lsl #1
    5074:	04701302 	ldrbteq	r1, [r0], #-770	; 0xfffffcfe
    5078:	16080000 	strne	r0, [r8], -r0
    507c:	02890b03 	addeq	r0, r9, #3072	; 0xc00
    5080:	13040000 	movwne	r0, #16384	; 0x4000
    5084:	00000f2e 	andeq	r0, r0, lr, lsr #30
    5088:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    508c:	000000c7 	andeq	r0, r0, r7, asr #1
    5090:	042c1308 	strteq	r1, [ip], #-776	; 0xfffffcf8
    5094:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    5098:	037c0f03 	cmneq	ip, #3, 30
    509c:	130c0000 	movwne	r0, #49152	; 0xc000
    50a0:	000002c6 	andeq	r0, r0, r6, asr #5
    50a4:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    50a8:	0000038c 	andeq	r0, r0, ip, lsl #7
    50ac:	0c0c002c 	stceq	0, cr0, [ip], {44}	; 0x2c
    50b0:	8c000003 	stchi	0, cr0, [r0], {3}
    50b4:	15000003 	strne	r0, [r0, #-3]
    50b8:	00000088 	andeq	r0, r0, r8, lsl #1
    50bc:	040b0003 	streq	r0, [fp], #-3
    50c0:	00000319 	andeq	r0, r0, r9, lsl r3
    50c4:	0004870e 	andeq	r8, r4, lr, lsl #14
    50c8:	031c0800 	tsteq	ip, #0, 16
    50cc:	0003191b 	andeq	r1, r3, fp, lsl r9
    50d0:	03701100 	cmneq	r0, #0, 2
    50d4:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    50d8:	03ae1403 			; <UNDEFINED> instruction: 0x03ae1403
    50dc:	01010000 	mrseq	r0, (UNDEF: 1)
    50e0:	0392040b 	orrseq	r0, r2, #184549376	; 0xb000000
    50e4:	a00a0000 	andge	r0, sl, r0
    50e8:	09000004 	stmdbeq	r0, {r2}
    50ec:	008f131d 	addeq	r1, pc, sp, lsl r3	; <UNPREDICTABLE>
    50f0:	01010000 	mrseq	r0, (UNDEF: 1)
    50f4:	00070a0a 	andeq	r0, r7, sl, lsl #20
    50f8:	1a1e0900 	bne	787500 <__ccfg+0x767558>
    50fc:	000000a0 	andeq	r0, r0, r0, lsr #1
    5100:	9a0a0101 	bls	28550c <__ccfg+0x265564>
    5104:	09000008 	stmdbeq	r0, {r3}
    5108:	00a0241e 	adceq	r2, r0, lr, lsl r4
    510c:	01010000 	mrseq	r0, (UNDEF: 1)
    5110:	0005c90a 	andeq	ip, r5, sl, lsl #18
    5114:	14220900 	strtne	r0, [r2], #-2304	; 0xfffff700
    5118:	000003ae 	andeq	r0, r0, lr, lsr #7
    511c:	33160101 	tstcc	r6, #1073741824	; 0x40000000
    5120:	01000012 	tsteq	r0, r2, lsl r0
    5124:	02960f08 	addseq	r0, r6, #8, 30
    5128:	03050000 	movweq	r0, #20480	; 0x5000
    512c:	00000000 	andeq	r0, r0, r0
    5130:	00128016 	andseq	r8, r2, r6, lsl r0
    5134:	0d090100 	stfeqs	f0, [r9, #-0]
    5138:	0000008f 	andeq	r0, r0, pc, lsl #1
    513c:	00000305 	andeq	r0, r0, r5, lsl #6
    5140:	6d170000 	ldcvs	0, cr0, [r7, #-0]
    5144:	01000002 	tsteq	r0, r2
    5148:	03050c0a 	movweq	r0, #23562	; 0x5c0a
    514c:	00002c7c 	andeq	r2, r0, ip, ror ip
    5150:	12950118 	addsne	r0, r5, #24, 2
    5154:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    5158:	00000106 	andeq	r0, r0, r6, lsl #2
    515c:	00000000 	andeq	r0, r0, r0
    5160:	9c010000 	stcls	0, cr0, [r1], {-0}
    5164:	00000447 	andeq	r0, r0, r7, asr #8
    5168:	74636119 	strbtvc	r6, [r3], #-281	; 0xfffffee7
    516c:	1d580100 	ldfnee	f0, [r8, #-0]
    5170:	00000296 	muleq	r0, r6, r2
    5174:	00002000 	andeq	r2, r0, r0
    5178:	88011800 	stmdahi	r1, {fp, ip}
    517c:	01000012 	tsteq	r0, r2, lsl r0
    5180:	0001011c 	andeq	r0, r1, ip, lsl r1
    5184:	00000000 	andeq	r0, r0, r0
    5188:	01000000 	mrseq	r0, (UNDEF: 0)
    518c:	0004de9c 	muleq	r4, ip, lr
    5190:	00b81a00 	adcseq	r1, r8, r0, lsl #20
    5194:	1c010000 	stcne	0, cr0, [r1], {-0}
    5198:	00008f01 	andeq	r8, r0, r1, lsl #30
    519c:	00203c00 	eoreq	r3, r0, r0, lsl #24
    51a0:	122e1b00 	eorne	r1, lr, #0, 22
    51a4:	21010000 	mrscs	r0, (UNDEF: 1)
    51a8:	00000001 	andeq	r0, r0, r1
    51ac:	123b1b00 	eorsne	r1, fp, #0, 22
    51b0:	30010000 	andcc	r0, r1, r0
    51b4:	00000001 	andeq	r0, r0, r1
    51b8:	13921b00 	orrsne	r1, r2, #0, 22
    51bc:	37010000 	strcc	r0, [r1, -r0]
    51c0:	00000001 	andeq	r0, r0, r1
    51c4:	04de1c00 	ldrbeq	r1, [lr], #3072	; 0xc00
    51c8:	00000000 	andeq	r0, r0, r0
    51cc:	09700000 	ldmdbeq	r0!, {}^	; <UNPREDICTABLE>
    51d0:	2b010000 	blcs	451d8 <__ccfg+0x25230>
    51d4:	0004ad07 	andeq	sl, r4, r7, lsl #26
    51d8:	04ec1d00 	strbteq	r1, [ip], #3328	; 0xd00
    51dc:	1c000000 	stcne	0, cr0, [r0], {-0}
    51e0:	000004de 	ldrdeq	r0, [r0], -lr
    51e4:	00000000 	andeq	r0, r0, r0
    51e8:	00000998 	muleq	r0, r8, r9
    51ec:	c7073e01 	strgt	r3, [r7, -r1, lsl #28]
    51f0:	1d000004 	stcne	0, cr0, [r0, #-16]
    51f4:	000004ec 	andeq	r0, r0, ip, ror #9
    51f8:	04de1e00 	ldrbeq	r1, [lr], #3584	; 0xe00
    51fc:	00000000 	andeq	r0, r0, r0
    5200:	09b00000 	ldmibeq	r0!, {}	; <UNPREDICTABLE>
    5204:	4a010000 	bmi	4520c <__ccfg+0x25264>
    5208:	04ec1d07 	strbteq	r1, [ip], #3335	; 0xd07
    520c:	00000000 	andeq	r0, r0, r0
    5210:	0011b81f 	andseq	fp, r1, pc, lsl r8
    5214:	01a40200 			; <UNDEFINED> instruction: 0x01a40200
    5218:	00006701 	andeq	r6, r0, r1, lsl #14
    521c:	55200300 	strpl	r0, [r0, #-768]!	; 0xfffffd00
    5220:	02000001 	andeq	r0, r0, #1
    5224:	006718a4 	rsbeq	r1, r7, r4, lsr #17
    5228:	00000000 	andeq	r0, r0, r0
    522c:	00000aa7 	andeq	r0, r0, r7, lsr #21
    5230:	15be0003 	ldrne	r0, [lr, #3]!
    5234:	01040000 	mrseq	r0, (UNDEF: 4)
    5238:	0000015f 	andeq	r0, r0, pc, asr r1
    523c:	0013200c 	andseq	r2, r3, ip
    5240:	0000c000 	andeq	ip, r0, r0
    5244:	000b7000 	andeq	r7, fp, r0
    5248:	00000000 	andeq	r0, r0, r0
    524c:	003ec300 	eorseq	ip, lr, r0, lsl #6
    5250:	06010200 	streq	r0, [r1], -r0, lsl #4
    5254:	00000392 	muleq	r0, r2, r3
    5258:	cc050202 	sfmgt	f0, 4, [r5], {2}
    525c:	02000003 	andeq	r0, r0, #3
    5260:	009d0504 	addseq	r0, sp, r4, lsl #10
    5264:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5268:	00009805 	andeq	r9, r0, r5, lsl #16
    526c:	21eb0300 	mvncs	r0, r0, lsl #6
    5270:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
    5274:	00004d18 	andeq	r4, r0, r8, lsl sp
    5278:	08010200 	stmdaeq	r1, {r9}
    527c:	00000390 	muleq	r0, r0, r3
    5280:	0020d903 	eoreq	sp, r0, r3, lsl #18
    5284:	19310400 	ldmdbne	r1!, {sl}
    5288:	00000060 	andeq	r0, r0, r0, rrx
    528c:	60070202 	andvs	r0, r7, r2, lsl #4
    5290:	03000002 	movweq	r0, #2
    5294:	000017a2 	andeq	r1, r0, r2, lsr #15
    5298:	73193404 	tstvc	r9, #4, 8	; 0x4000000
    529c:	02000000 	andeq	r0, r0, #0
    52a0:	00720704 	rsbseq	r0, r2, r4, lsl #14
    52a4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    52a8:	00006d07 	andeq	r6, r0, r7, lsl #26
    52ac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    52b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    52b4:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    52b8:	03000000 	movweq	r0, #0
    52bc:	000003ec 	andeq	r0, r0, ip, ror #7
    52c0:	41122605 	tstmi	r2, r5, lsl #12
    52c4:	03000000 	movweq	r0, #0
    52c8:	000015af 	andeq	r1, r0, pc, lsr #11
    52cc:	54122705 	ldrpl	r2, [r2], #-1797	; 0xfffff8fb
    52d0:	05000000 	streq	r0, [r0, #-0]
    52d4:	0000009b 	muleq	r0, fp, r0
    52d8:	00009b06 	andeq	r9, r0, r6, lsl #22
    52dc:	13a70300 			; <UNDEFINED> instruction: 0x13a70300
    52e0:	2b050000 	blcs	1452e8 <__ccfg+0x125340>
    52e4:	00004112 	andeq	r4, r0, r2, lsl r1
    52e8:	00b10600 	adcseq	r0, r1, r0, lsl #12
    52ec:	b1050000 	mrslt	r0, (UNDEF: 5)
    52f0:	03000000 	movweq	r0, #0
    52f4:	00001600 	andeq	r1, r0, r0, lsl #12
    52f8:	67122c05 	ldrvs	r2, [r2, -r5, lsl #24]
    52fc:	05000000 	streq	r0, [r0, #-0]
    5300:	000000c7 	andeq	r0, r0, r7, asr #1
    5304:	00029603 	andeq	r9, r2, r3, lsl #12
    5308:	122d0500 	eorne	r0, sp, #0, 10
    530c:	00000067 	andeq	r0, r0, r7, rrx
    5310:	32050807 	andcc	r0, r5, #458752	; 0x70000
    5314:	00017209 	andeq	r7, r1, r9, lsl #4
    5318:	02b10800 	adcseq	r0, r1, #0, 16
    531c:	34050000 	strcc	r0, [r5], #-0
    5320:	0000b107 	andeq	fp, r0, r7, lsl #2
    5324:	07010100 	streq	r0, [r1, -r0, lsl #2]
    5328:	00910800 	addseq	r0, r1, r0, lsl #16
    532c:	35050000 	strcc	r0, [r5, #-0]
    5330:	0000b103 	andeq	fp, r0, r3, lsl #2
    5334:	06010100 	streq	r0, [r1], -r0, lsl #2
    5338:	02880800 	addeq	r0, r8, #0, 16
    533c:	36050000 	strcc	r0, [r5], -r0
    5340:	0000b103 	andeq	fp, r0, r3, lsl #2
    5344:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5348:	03fb0800 	mvnseq	r0, #0, 16
    534c:	37050000 	strcc	r0, [r5, -r0]
    5350:	0000b103 	andeq	fp, r0, r3, lsl #2
    5354:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    5358:	03f40800 	mvnseq	r0, #0, 16
    535c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
    5360:	0000b103 	andeq	fp, r0, r3, lsl #2
    5364:	00040100 	andeq	r0, r4, r0, lsl #2
    5368:	03e50900 	mvneq	r0, #0, 18
    536c:	3a050000 	bcc	145374 <__ccfg+0x1253cc>
    5370:	0000b107 	andeq	fp, r0, r7, lsl #2
    5374:	40090100 	andmi	r0, r9, r0, lsl #2
    5378:	05000000 	streq	r0, [r0, #-0]
    537c:	00b1033c 	adcseq	r0, r1, ip, lsr r3
    5380:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    5384:	00000066 	andeq	r0, r0, r6, rrx
    5388:	b1033d05 	tstlt	r3, r5, lsl #26
    538c:	03000000 	movweq	r0, #0
    5390:	00014309 	andeq	r4, r1, r9, lsl #6
    5394:	083f0500 	ldmdaeq	pc!, {r8, sl}	; <UNPREDICTABLE>
    5398:	000000c7 	andeq	r0, r0, r7, asr #1
    539c:	23030004 	movwcs	r0, #12292	; 0x3004
    53a0:	05000004 	streq	r0, [r0, #-4]
    53a4:	00e40341 	rsceq	r0, r4, r1, asr #6
    53a8:	72060000 	andvc	r0, r6, #0
    53ac:	0a000001 	beq	53b8 <__exidx_end+0x2738>
    53b0:	000002a5 	andeq	r0, r0, r5, lsr #5
    53b4:	7e1a4305 	cdpvc	3, 1, cr4, cr10, cr5, {0}
    53b8:	01000001 	tsteq	r0, r1
    53bc:	02fc0a01 	rscseq	r0, ip, #4096	; 0x1000
    53c0:	45050000 	strmi	r0, [r5, #-0]
    53c4:	00019f0e 	andeq	r9, r1, lr, lsl #30
    53c8:	0b010100 	bleq	457d0 <__ccfg+0x25828>
    53cc:	0001a504 	andeq	sl, r1, r4, lsl #10
    53d0:	08010200 	stmdaeq	r1, {r9}
    53d4:	00000399 	muleq	r0, r9, r3
    53d8:	0001a505 	andeq	sl, r1, r5, lsl #10
    53dc:	030a0a00 	movweq	r0, #43520	; 0xaa00
    53e0:	45050000 	strmi	r0, [r5, #-0]
    53e4:	00019f1e 	andeq	r9, r1, lr, lsl pc
    53e8:	07010100 	streq	r0, [r1, -r0, lsl #2]
    53ec:	098f0608 	stmibeq	pc, {r3, r9, sl}	; <UNPREDICTABLE>
    53f0:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    53f4:	0002c109 	andeq	ip, r2, r9, lsl #2
    53f8:	0b900600 	bleq	fe406c00 <_estack+0xde401c00>
    53fc:	00000067 	andeq	r0, r0, r7, rrx
    5400:	05dc0900 	ldrbeq	r0, [ip, #2304]	; 0x900
    5404:	91060000 	mrsls	r0, (UNDEF: 6)
    5408:	00009b08 	andeq	r9, r0, r8, lsl #22
    540c:	60090400 	andvs	r0, r9, r0, lsl #8
    5410:	06000004 	streq	r0, [r0], -r4
    5414:	00bd1092 	umlalseq	r1, sp, r2, r0
    5418:	00060000 	andeq	r0, r6, r0
    541c:	00040203 	andeq	r0, r4, r3, lsl #4
    5420:	03930600 	orrseq	r0, r3, #0, 12
    5424:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    5428:	0001f00c 	andeq	pc, r1, ip
    542c:	00020700 	andeq	r0, r2, r0, lsl #14
    5430:	0a000d00 	beq	8838 <__exidx_end+0x5bb8>
    5434:	00000036 	andeq	r0, r0, r6, lsr r0
    5438:	fc0f9906 	stc2	9, cr9, [pc], {6}	; <UNPREDICTABLE>
    543c:	01000001 	tsteq	r0, r1
    5440:	c2040b01 	andgt	r0, r4, #1024	; 0x400
    5444:	07000000 	streq	r0, [r0, -r0]
    5448:	09910701 	ldmibeq	r1, {r0, r8, r9, sl}
    544c:	00000245 	andeq	r0, r0, r5, asr #4
    5450:	00045308 	andeq	r5, r4, r8, lsl #6
    5454:	07930700 	ldreq	r0, [r3, r0, lsl #14]
    5458:	000000b1 	strheq	r0, [r0], -r1
    545c:	00010701 	andeq	r0, r1, r1, lsl #14
    5460:	00003108 	andeq	r3, r0, r8, lsl #2
    5464:	03940700 	orrseq	r0, r4, #0, 14
    5468:	000000b1 	strheq	r0, [r0], -r1
    546c:	00000101 	andeq	r0, r0, r1, lsl #2
    5470:	02730300 	rsbseq	r0, r3, #0, 6
    5474:	96070000 	strls	r0, [r7], -r0
    5478:	00021b03 	andeq	r1, r2, r3, lsl #22
    547c:	02450500 	subeq	r0, r5, #0, 10
    5480:	510c0000 	mrspl	r0, (UNDEF: 12)
    5484:	61000002 	tstvs	r0, r2
    5488:	0d000002 	stceq	0, cr0, [r0, #-8]
    548c:	02560500 	subseq	r0, r6, #0, 10
    5490:	dc0a0000 	stcle	0, cr0, [sl], {-0}
    5494:	07000002 	streq	r0, [r0, -r2]
    5498:	0261179c 	rsbeq	r1, r1, #156, 14	; 0x2700000
    549c:	01010000 	mrseq	r0, (UNDEF: 1)
    54a0:	0000a70c 	andeq	sl, r0, ip, lsl #14
    54a4:	00027f00 	andeq	r7, r2, r0, lsl #30
    54a8:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    54ac:	00000274 	andeq	r0, r0, r4, ror r2
    54b0:	0003820a 	andeq	r8, r3, sl, lsl #4
    54b4:	13060800 	movwne	r0, #26624	; 0x6800
    54b8:	0000027f 	andeq	r0, r0, pc, ror r2
    54bc:	230a0101 	movwcs	r0, #41217	; 0xa101
    54c0:	06000001 	streq	r0, [r0], -r1
    54c4:	00c70ec3 	sbceq	r0, r7, r3, asr #29
    54c8:	01010000 	mrseq	r0, (UNDEF: 1)
    54cc:	00046d0e 	andeq	r6, r4, lr, lsl #26
    54d0:	016e0900 	cmneq	lr, r0, lsl #18
    54d4:	0002ad10 	andeq	sl, r2, r0, lsl sp
    54d8:	b3040b00 	movwlt	r0, #19200	; 0x4b00
    54dc:	0f000002 	svceq	0x00000002
    54e0:	0002bf01 	andeq	fp, r2, r1, lsl #30
    54e4:	009b1000 	addseq	r1, fp, r0
    54e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    54ec:	000001ac 	andeq	r0, r0, ip, lsr #3
    54f0:	000002ca 	andeq	r0, r0, sl, asr #5
    54f4:	bf05000d 	svclt	0x0005000d
    54f8:	11000002 	tstne	r0, r2
    54fc:	00000433 	andeq	r0, r0, r3, lsr r4
    5500:	16017f09 	strne	r7, [r1], -r9, lsl #30
    5504:	000002ca 	andeq	r0, r0, sl, asr #5
    5508:	7a110101 	bvc	445914 <__ccfg+0x42596c>
    550c:	09000003 	stmdbeq	r0, {r0, r1}
    5510:	d3140182 	tstle	r4, #-2147483616	; 0x80000020
    5514:	01000000 	mrseq	r0, (UNDEF: 0)
    5518:	04581101 	ldrbeq	r1, [r8], #-257	; 0xfffffeff
    551c:	d8090000 	stmdale	r9, {}	; <UNPREDICTABLE>
    5520:	00c70e02 	sbceq	r0, r7, r2, lsl #28
    5524:	01010000 	mrseq	r0, (UNDEF: 1)
    5528:	03090812 	movweq	r0, #38930	; 0x9812
    552c:	03230903 			; <UNDEFINED> instruction: 0x03230903
    5530:	e3130000 	tst	r3, #0
    5534:	09000021 	stmdbeq	r0, {r0, r5}
    5538:	9b070307 	blls	1c615c <__ccfg+0x1a61b4>
    553c:	00000000 	andeq	r0, r0, r0
    5540:	00052e13 	andeq	r2, r5, r3, lsl lr
    5544:	03080900 	movweq	r0, #35072	; 0x8900
    5548:	0000d808 	andeq	sp, r0, r8, lsl #16
    554c:	0e000400 	cfcpyseq	mvf0, mvf0
    5550:	00000253 	andeq	r0, r0, r3, asr r2
    5554:	03030909 	movweq	r0, #14601	; 0x3909
    5558:	000002fc 	strdeq	r0, [r0], -ip
    555c:	00047c14 	andeq	r7, r4, r4, lsl ip
    5560:	0b093000 	bleq	251568 <__ccfg+0x2315c0>
    5564:	03930803 	orrseq	r0, r3, #196608	; 0x30000
    5568:	75130000 	ldrvc	r0, [r3, #-0]
    556c:	09000004 	stmdbeq	r0, {r2}
    5570:	9b080314 	blls	2061c8 <__ccfg+0x1e6220>
    5574:	00000000 	andeq	r0, r0, r0
    5578:	0002cb13 	andeq	ip, r2, r3, lsl fp
    557c:	03150900 	tsteq	r5, #0, 18
    5580:	00009b08 	andeq	r9, r0, r8, lsl #22
    5584:	70130200 	andsvc	r0, r3, r0, lsl #4
    5588:	09000004 	stmdbeq	r0, {r2}
    558c:	a00b0316 	andge	r0, fp, r6, lsl r3
    5590:	04000002 	streq	r0, [r0], #-2
    5594:	000f2e13 	andeq	r2, pc, r3, lsl lr	; <UNPREDICTABLE>
    5598:	03170900 	tsteq	r7, #0, 18
    559c:	0000d809 	andeq	sp, r0, r9, lsl #16
    55a0:	2c130800 	ldccs	8, cr0, [r3], {-0}
    55a4:	09000004 	stmdbeq	r0, {r2}
    55a8:	930f0318 	movwls	r0, #62232	; 0xf318
    55ac:	0c000003 	stceq	0, cr0, [r0], {3}
    55b0:	0002c613 	andeq	ip, r2, r3, lsl r6
    55b4:	03190900 	tsteq	r9, #0, 18
    55b8:	0003a315 	andeq	sl, r3, r5, lsl r3
    55bc:	0c002c00 	stceq	12, cr2, [r0], {-0}
    55c0:	00000323 	andeq	r0, r0, r3, lsr #6
    55c4:	000003a3 	andeq	r0, r0, r3, lsr #7
    55c8:	00008815 	andeq	r8, r0, r5, lsl r8
    55cc:	0b000300 	bleq	61d4 <__exidx_end+0x3554>
    55d0:	00033004 	andeq	r3, r3, r4
    55d4:	04870e00 	streq	r0, [r7], #3584	; 0xe00
    55d8:	1c090000 	stcne	0, cr0, [r9], {-0}
    55dc:	03301b03 	teqeq	r0, #3072	; 0xc00
    55e0:	70110000 	andsvc	r0, r1, r0
    55e4:	09000003 	stmdbeq	r0, {r0, r1}
    55e8:	c514031e 	ldrgt	r0, [r4, #-798]	; 0xfffffce2
    55ec:	01000003 	tsteq	r0, r3
    55f0:	a9040b01 	stmdbge	r4, {r0, r8, r9, fp}
    55f4:	0a000003 	beq	5608 <__exidx_end+0x2988>
    55f8:	000004a0 	andeq	r0, r0, r0, lsr #9
    55fc:	9b131d0a 	blls	4cca2c <__ccfg+0x4aca84>
    5600:	01000000 	mrseq	r0, (UNDEF: 0)
    5604:	070a0a01 	streq	r0, [sl, -r1, lsl #20]
    5608:	1e0a0000 	cdpne	0, 0, cr0, cr10, cr0, {0}
    560c:	0000ac1a 	andeq	sl, r0, sl, lsl ip
    5610:	0a010100 	beq	45a18 <__ccfg+0x25a70>
    5614:	0000089a 	muleq	r0, sl, r8
    5618:	ac241e0a 	stcge	14, cr1, [r4], #-40	; 0xffffffd8
    561c:	01000000 	mrseq	r0, (UNDEF: 0)
    5620:	05c90a01 	strbeq	r0, [r9, #2561]	; 0xa01
    5624:	220a0000 	andcs	r0, sl, #0
    5628:	0003c514 	andeq	ip, r3, r4, lsl r5
    562c:	16010100 	strne	r0, [r1], -r0, lsl #2
    5630:	00000375 	andeq	r0, r0, r5, ror r3
    5634:	c70f0f01 	strgt	r0, [pc, -r1, lsl #30]
    5638:	05000000 	streq	r0, [r0, #-0]
    563c:	00000003 	andeq	r0, r0, r3
    5640:	12f81600 	rscsne	r1, r8, #0, 12
    5644:	0f010000 	svceq	0x00010000
    5648:	0000c715 	andeq	ip, r0, r5, lsl r7
    564c:	00030500 	andeq	r0, r3, r0, lsl #10
    5650:	16000000 	strne	r0, [r0], -r0
    5654:	0000137e 	andeq	r1, r0, lr, ror r3
    5658:	15141001 	ldrne	r1, [r4, #-1]
    565c:	05000002 	streq	r0, [r0, #-2]
    5660:	00000003 	andeq	r0, r0, r3
    5664:	12de1600 	sbcsne	r1, lr, #0, 12
    5668:	12010000 	andne	r0, r1, #0
    566c:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5670:	34030500 	strcc	r0, [r3], #-1280	; 0xfffffb00
    5674:	16200000 	strtne	r0, [r0], -r0
    5678:	00001372 	andeq	r1, r0, r2, ror r3
    567c:	b1031301 	tstlt	r3, r1, lsl #6
    5680:	05000000 	streq	r0, [r0, #-0]
    5684:	00003503 	andeq	r3, r0, r3, lsl #10
    5688:	0bd41620 	bleq	ff50af10 <_estack+0xdf505f10>
    568c:	15010000 	strne	r0, [r1, #-0]
    5690:	00009b0d 	andeq	r9, r0, sp, lsl #22
    5694:	00030500 	andeq	r0, r3, r0, lsl #10
    5698:	17000000 	strne	r0, [r0, -r0]
    569c:	0012aa01 	andseq	sl, r2, r1, lsl #20
    56a0:	06130300 	ldreq	r0, [r3], -r0, lsl #6
	...
    56ac:	01189c01 	tsteq	r8, r1, lsl #24
    56b0:	00001383 	andeq	r1, r0, r3, lsl #7
    56b4:	01070803 	tsteq	r7, r3, lsl #16
    56b8:	000000c7 	andeq	r0, r0, r7, asr #1
	...
    56c4:	04bc9c01 	ldrteq	r9, [ip], #3073	; 0xc01
    56c8:	65190000 	ldrvs	r0, [r9, #-0]
    56cc:	08030072 	stmdaeq	r3, {r1, r4, r5, r6}
    56d0:	0004bc19 	andeq	fp, r4, r9, lsl ip
    56d4:	00207000 	eoreq	r7, r0, r0
    56d8:	72651a00 	rsbvc	r1, r5, #0, 20
    56dc:	08030075 	stmdaeq	r3, {r0, r2, r4, r5, r6}
    56e0:	0004c224 	andeq	ip, r4, r4, lsr #4
    56e4:	00510100 	subseq	r0, r1, r0, lsl #2
    56e8:	008f040b 	addeq	r0, pc, fp, lsl #8
    56ec:	040b0000 	streq	r0, [fp], #-0
    56f0:	000000c7 	andeq	r0, r0, r7, asr #1
    56f4:	1306011b 	movwne	r0, #24859	; 0x611b
    56f8:	60010000 	andvs	r0, r1, r0
    56fc:	9b010601 	blls	46f08 <__ccfg+0x26f60>
	...
    5708:	01000000 	mrseq	r0, (UNDEF: 0)
    570c:	0004f69c 	muleq	r4, ip, r6
    5710:	74731c00 	ldrbtvc	r1, [r3], #-3072	; 0xfffff400
    5714:	01600100 	cmneq	r0, r0, lsl #2
    5718:	00009b14 	andeq	r9, r0, r4, lsl fp
    571c:	00208300 	eoreq	r8, r0, r0, lsl #6
    5720:	011d0000 	tsteq	sp, r0
    5724:	000012fd 	strdeq	r1, [r0], -sp
    5728:	06015b01 	streq	r5, [r1], -r1, lsl #22
	...
    5734:	011b9c01 	tsteq	fp, r1, lsl #24
    5738:	000012d5 	ldrdeq	r1, [r0], -r5
    573c:	06012101 	streq	r2, [r1], -r1, lsl #2
    5740:	00009b01 	andeq	r9, r0, r1, lsl #22
	...
    574c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    5750:	1c000005 	stcne	0, cr0, [r0], {5}
    5754:	01007473 	tsteq	r0, r3, ror r4
    5758:	9b150121 	blls	545be4 <__ccfg+0x525c3c>
    575c:	96000000 	strls	r0, [r0], -r0
    5760:	1c000020 	stcne	0, cr0, [r0], {32}
    5764:	21010061 	tstcs	r1, r1, rrx
    5768:	00c71f01 	sbceq	r1, r7, r1, lsl #30
    576c:	20a90000 	adccs	r0, r9, r0
    5770:	731c0000 	tstvc	ip, #0
    5774:	01210100 			; <UNDEFINED> instruction: 0x01210100
    5778:	0002152e 	andeq	r1, r2, lr, lsr #10
    577c:	0020c700 	eoreq	ip, r0, r0, lsl #14
    5780:	656c1c00 	strbvs	r1, [ip, #-3072]!	; 0xfffff400
    5784:	2101006e 	tstcs	r1, lr, rrx
    5788:	009b3601 	addseq	r3, fp, r1, lsl #12
    578c:	20da0000 	sbcscs	r0, sl, r0
    5790:	621e0000 	andsvs	r0, lr, #0
    5794:	2301006c 	movwcs	r0, #4204	; 0x106c
    5798:	009b0701 	addseq	r0, fp, r1, lsl #14
    579c:	20ed0000 	rsccs	r0, sp, r0
    57a0:	ec1f0000 	ldc	0, cr0, [pc], {-0}
    57a4:	01000012 	tsteq	r0, r2, lsl r0
    57a8:	00010132 	andeq	r0, r1, r2, lsr r1
    57ac:	20000000 	andcs	r0, r0, r0
    57b0:	000009f6 	strdeq	r0, [r0], -r6
    57b4:	00000000 	andeq	r0, r0, r0
    57b8:	00000b58 	andeq	r0, r0, r8, asr fp
    57bc:	03014301 	movweq	r4, #4865	; 0x1301
    57c0:	000005a3 	andeq	r0, r0, r3, lsr #11
    57c4:	000a1221 	andeq	r1, sl, r1, lsr #4
    57c8:	0a052100 	beq	14dbd0 <__ccfg+0x12dc28>
    57cc:	22000000 	andcs	r0, r0, #0
    57d0:	000009f6 	strdeq	r0, [r0], -r6
	...
    57dc:	03015001 	movweq	r5, #4097	; 0x1001
    57e0:	000a1221 	andeq	r1, sl, r1, lsr #4
    57e4:	0a052100 	beq	14dbec <__ccfg+0x12dc44>
    57e8:	00000000 	andeq	r0, r0, r0
    57ec:	12cc0118 	sbcne	r0, ip, #24, 2
    57f0:	cb010000 	blgt	457f8 <__ccfg+0x25850>
    57f4:	009b0106 	addseq	r0, fp, r6, lsl #2
	...
    5800:	9c010000 	stcls	0, cr0, [r1], {-0}
    5804:	00000681 	andeq	r0, r0, r1, lsl #13
    5808:	00747319 	rsbseq	r7, r4, r9, lsl r3
    580c:	9b15cb01 	blls	578418 <__ccfg+0x558470>
    5810:	16000000 	strne	r0, [r0], -r0
    5814:	23000021 	movwcs	r0, #33	; 0x21
    5818:	0000130e 	andeq	r1, r0, lr, lsl #6
    581c:	c71fcb01 	ldrgt	ip, [pc, -r1, lsl #22]
    5820:	34000000 	strcc	r0, [r0], #-0
    5824:	23000021 	movwcs	r0, #33	; 0x21
    5828:	000012b8 			; <UNDEFINED> instruction: 0x000012b8
    582c:	c72bcb01 	strgt	ip, [fp, -r1, lsl #22]!
    5830:	5d000000 	stcpl	0, cr0, [r0, #-0]
    5834:	24000021 	strcs	r0, [r0], #-33	; 0xffffffdf
    5838:	000012a4 	andeq	r1, r0, r4, lsr #5
    583c:	0001e601 	andeq	lr, r1, r1, lsl #12
    5840:	24000000 	strcs	r0, [r0], #-0
    5844:	00001391 	muleq	r0, r1, r3
    5848:	0001ea01 	andeq	lr, r1, r1, lsl #20
    584c:	25000000 	strcs	r0, [r0, #-0]
    5850:	0000085e 	andeq	r0, r0, lr, asr r8
    5854:	00000000 	andeq	r0, r0, r0
    5858:	00000b28 	andeq	r0, r0, r8, lsr #22
    585c:	2604fc01 	strcs	pc, [r4], -r1, lsl #24
    5860:	00000878 	andeq	r0, r0, r8, ror r8
    5864:	0000217b 	andeq	r2, r0, fp, ror r1
    5868:	00086c26 	andeq	r6, r8, r6, lsr #24
    586c:	00218e00 	eoreq	r8, r1, r0, lsl #28
    5870:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5874:	00000000 	andeq	r0, r0, r0
    5878:	0b400000 	bleq	1005880 <__ccfg+0xfe58d8>
    587c:	43010000 	movwmi	r0, #4096	; 0x1000
    5880:	00066402 	andeq	r6, r6, r2, lsl #8
    5884:	0a122100 	beq	48dc8c <__ccfg+0x46dce4>
    5888:	05210000 	streq	r0, [r1, #-0]!
    588c:	0000000a 	andeq	r0, r0, sl
    5890:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    589c:	02480100 	subeq	r0, r8, #0, 2
    58a0:	000a1221 	andeq	r1, sl, r1, lsr #4
    58a4:	0a052100 	beq	14dcac <__ccfg+0x12dd04>
    58a8:	00000000 	andeq	r0, r0, r0
    58ac:	13011800 	movwne	r1, #6144	; 0x1800
    58b0:	01000013 	tsteq	r0, r3, lsl r0
    58b4:	9b0106b0 	blls	4737c <__ccfg+0x273d4>
	...
    58c0:	01000000 	mrseq	r0, (UNDEF: 0)
    58c4:	0007049c 	muleq	r7, ip, r4
    58c8:	00611900 	rsbeq	r1, r1, r0, lsl #18
    58cc:	c715b001 	ldrgt	fp, [r5, -r1]
    58d0:	a1000000 	mrsge	r0, (UNDEF: 0)
    58d4:	19000021 	stmdbne	r0, {r0, r5}
    58d8:	b0010073 	andlt	r0, r1, r3, ror r0
    58dc:	0007041e 	andeq	r0, r7, lr, lsl r4
    58e0:	0021ca00 	eoreq	ip, r1, r0, lsl #20
    58e4:	656c1900 	strbvs	r1, [ip, #-2304]!	; 0xfffff700
    58e8:	b001006e 	andlt	r0, r1, lr, rrx
    58ec:	00009b26 	andeq	r9, r0, r6, lsr #22
    58f0:	0021fe00 	eoreq	pc, r1, r0, lsl #28
    58f4:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    58f8:	00000000 	andeq	r0, r0, r0
    58fc:	0b100000 	bleq	405904 <__ccfg+0x3e595c>
    5900:	ba010000 	blt	45908 <__ccfg+0x25960>
    5904:	0006e802 	andeq	lr, r6, r2, lsl #16
    5908:	0a122100 	beq	48dd10 <__ccfg+0x46dd68>
    590c:	05210000 	streq	r0, [r1, #-0]!
    5910:	0000000a 	andeq	r0, r0, sl
    5914:	0009f628 	andeq	pc, r9, r8, lsr #12
	...
    5920:	02c40100 	sbceq	r0, r4, #0, 2
    5924:	000a1221 	andeq	r1, sl, r1, lsr #4
    5928:	0a052100 	beq	14dd30 <__ccfg+0x12dd88>
    592c:	00000000 	andeq	r0, r0, r0
    5930:	00b1040b 	adcseq	r0, r1, fp, lsl #8
    5934:	01170000 	tsteq	r7, r0
    5938:	000012c3 	andeq	r1, r0, r3, asr #5
    593c:	8c06a801 	stchi	8, cr10, [r6], {1}
    5940:	a0000015 	andge	r0, r0, r5, lsl r0
    5944:	01000015 	tsteq	r0, r5, lsl r0
    5948:	e401299c 	str	r2, [r1], #-2460	; 0xfffff664
    594c:	01000012 	tsteq	r0, r2, lsl r0
    5950:	009b0693 	umullseq	r0, fp, r3, r6
    5954:	15780000 	ldrbne	r0, [r8, #-0]!
    5958:	158c0000 	strne	r0, [ip]
    595c:	9c010000 	stcls	0, cr0, [r1], {-0}
    5960:	00138b2a 	andseq	r8, r3, sl, lsr #22
    5964:	0d820100 	stfeqs	f0, [r2]
    5968:	00001514 	andeq	r1, r0, r4, lsl r5
    596c:	00001554 	andeq	r1, r0, r4, asr r5
    5970:	07969c01 	ldreq	r9, [r6, r1, lsl #24]
    5974:	9f280000 	svcls	0x00280000
    5978:	2e000007 	cdpcs	0, 0, cr0, cr0, cr7, {0}
    597c:	42000015 	andmi	r0, r0, #21
    5980:	01000015 	tsteq	r0, r5, lsl r0
    5984:	f627038a 			; <UNDEFINED> instruction: 0xf627038a
    5988:	2e000009 	cdpcs	0, 0, cr0, cr0, cr9, {0}
    598c:	e0000015 	and	r0, r0, r5, lsl r0
    5990:	0100000a 	tsteq	r0, sl
    5994:	07790272 			; <UNDEFINED> instruction: 0x07790272
    5998:	12210000 	eorne	r0, r1, #0
    599c:	2100000a 	tstcs	r0, sl
    59a0:	00000a05 	andeq	r0, r0, r5, lsl #20
    59a4:	09f62500 	ldmibeq	r6!, {r8, sl, sp}^
    59a8:	153a0000 	ldrne	r0, [sl, #-0]!
    59ac:	0af80000 	beq	ffe059b4 <_estack+0xdfe009b4>
    59b0:	74010000 	strvc	r0, [r1], #-0
    59b4:	0a122102 	beq	48ddc4 <__ccfg+0x46de1c>
    59b8:	05210000 	streq	r0, [r1, #-0]!
    59bc:	0000000a 	andeq	r0, r0, sl
    59c0:	6b2b0000 	blvs	ac59c8 <__ccfg+0xaa5a20>
    59c4:	01000013 	tsteq	r0, r3, lsl r0
    59c8:	2b010d78 	blcs	48fb0 <__ccfg+0x29008>
    59cc:	00001378 	andeq	r1, r0, r8, ror r3
    59d0:	010d6d01 	tsteq	sp, r1, lsl #26
    59d4:	0013972b 	andseq	r9, r3, fp, lsr #14
    59d8:	0d660100 	stfeqe	f0, [r6, #-0]
    59dc:	139d2c01 	orrsne	r2, sp, #256	; 0x100
    59e0:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    59e4:	14c0010d 	strbne	r0, [r0], #269	; 0x10d
    59e8:	15140000 	ldrne	r0, [r4, #-0]
    59ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    59f0:	00000842 	andeq	r0, r0, r2, asr #16
    59f4:	00747319 	rsbseq	r7, r4, r9, lsl r3
    59f8:	9b195801 	blls	65ba04 <__ccfg+0x63ba5c>
    59fc:	1c000000 	stcne	0, cr0, [r0], {-0}
    5a00:	19000022 	stmdbne	r0, {r1, r5}
    5a04:	006c6564 	rsbeq	r6, ip, r4, ror #10
    5a08:	9b225801 	blls	89ba14 <__ccfg+0x87ba6c>
    5a0c:	2f000000 	svccs	0x00000000
    5a10:	25000022 	strcs	r0, [r0, #-34]	; 0xffffffde
    5a14:	00000842 	andeq	r0, r0, r2, asr #16
    5a18:	000014c8 	andeq	r1, r0, r8, asr #9
    5a1c:	00000a98 	muleq	r0, r8, sl
    5a20:	2d135c01 	ldccs	12, cr5, [r3, #-4]
    5a24:	00000a98 	muleq	r0, r8, sl
    5a28:	0008532e 	andeq	r5, r8, lr, lsr #6
    5a2c:	00224200 	eoreq	r4, r2, r0, lsl #4
    5a30:	09f62700 	ldmibeq	r6!, {r8, r9, sl, sp}^
    5a34:	14c80000 	strbne	r0, [r8], #0
    5a38:	0ab80000 	beq	fee05a40 <_estack+0xdee00a40>
    5a3c:	51010000 	mrspl	r0, (UNDEF: 1)
    5a40:	00082402 	andeq	r2, r8, r2, lsl #8
    5a44:	0a122100 	beq	48de4c <__ccfg+0x46dea4>
    5a48:	05210000 	streq	r0, [r1, #-0]!
    5a4c:	0000000a 	andeq	r0, r0, sl
    5a50:	0009f628 	andeq	pc, r9, r8, lsr #12
    5a54:	0014e200 	andseq	lr, r4, r0, lsl #4
    5a58:	0014e600 	andseq	lr, r4, r0, lsl #12
    5a5c:	02540100 	subseq	r0, r4, #0, 2
    5a60:	000a1221 	andeq	r1, sl, r1, lsr #4
    5a64:	0a052100 	beq	14de6c <__ccfg+0x12dec4>
    5a68:	00000000 	andeq	r0, r0, r0
    5a6c:	1b2f0000 	blne	bc5a74 <__ccfg+0xba5acc>
    5a70:	01000013 	tsteq	r0, r3, lsl r0
    5a74:	00b10d4b 	adcseq	r0, r1, fp, asr #26
    5a78:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    5a7c:	30000008 	andcc	r0, r0, r8
    5a80:	4f010072 	svcmi	0x00010072
    5a84:	0000b107 	andeq	fp, r0, r7, lsl #2
    5a88:	f2310000 	vhadd.s<illegal width 64>	d0, d1, d0
    5a8c:	01000012 	tsteq	r0, r2, lsl r0
    5a90:	01010d41 	tsteq	r1, r1, asr #26
    5a94:	00000883 	andeq	r0, r0, r3, lsl #17
    5a98:	646d6332 	strbtvs	r6, [sp], #-818	; 0xfffffcce
    5a9c:	19410100 	stmdbne	r1, {r8}^
    5aa0:	000000b1 	strheq	r0, [r0], -r1
    5aa4:	01006132 	tsteq	r0, r2, lsr r1
    5aa8:	00c72441 	sbceq	r2, r7, r1, asr #8
    5aac:	2c000000 	stccs	0, cr0, [r0], {-0}
    5ab0:	000012bd 			; <UNDEFINED> instruction: 0x000012bd
    5ab4:	010d3a01 	tsteq	sp, r1, lsl #20
    5ab8:	000014a8 	andeq	r1, r0, r8, lsr #9
    5abc:	000014c0 	andeq	r1, r0, r0, asr #9
    5ac0:	08e59c01 	stmiaeq	r5!, {r0, sl, fp, ip, pc}^
    5ac4:	63190000 	tstvs	r9, #0
    5ac8:	0100646d 	tsteq	r0, sp, ror #8
    5acc:	00b1193a 	adcseq	r1, r1, sl, lsr r9
    5ad0:	22550000 	subscs	r0, r5, #0
    5ad4:	f6270000 			; <UNDEFINED> instruction: 0xf6270000
    5ad8:	a8000009 	stmdage	r0, {r0, r3}
    5adc:	80000014 	andhi	r0, r0, r4, lsl r0
    5ae0:	0100000a 	tsteq	r0, sl
    5ae4:	08c9023c 	stmiaeq	r9, {r2, r3, r4, r5, r9}^
    5ae8:	12210000 	eorne	r0, r1, #0
    5aec:	2100000a 	tstcs	r0, sl
    5af0:	00000a05 	andeq	r0, r0, r5, lsl #20
    5af4:	09f62800 	ldmibeq	r6!, {fp, sp}^
    5af8:	14b40000 	ldrtne	r0, [r4], #0
    5afc:	14b80000 	ldrtne	r0, [r8], #0
    5b00:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5b04:	0a122102 	beq	48df14 <__ccfg+0x46df6c>
    5b08:	05210000 	streq	r0, [r1, #-0]!
    5b0c:	0000000a 	andeq	r0, r0, sl
    5b10:	13ac2c00 			; <UNDEFINED> instruction: 0x13ac2c00
    5b14:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    5b18:	1478010d 	ldrbtne	r0, [r8], #-269	; 0xfffffef3
    5b1c:	14a80000 	strtne	r0, [r8], #0
    5b20:	9c010000 	stcls	0, cr0, [r1], {-0}
    5b24:	00000979 	andeq	r0, r0, r9, ror r9
    5b28:	01006219 	tsteq	r0, r9, lsl r2
    5b2c:	00b11c29 	adcseq	r1, r1, r9, lsr #24
    5b30:	22680000 	rsbcs	r0, r8, #0
    5b34:	69300000 	ldmdbvs	r0!, {}	; <UNPREDICTABLE>
    5b38:	062b0100 	strteq	r0, [fp], -r0, lsl #2
    5b3c:	00000081 	andeq	r0, r0, r1, lsl #1
    5b40:	000a3d27 	andeq	r3, sl, r7, lsr #26
    5b44:	00148000 	andseq	r8, r4, r0
    5b48:	000a4800 	andeq	r4, sl, r0, lsl #16
    5b4c:	03320100 	teqeq	r2, #0, 2
    5b50:	0000092e 	andeq	r0, r0, lr, lsr #18
    5b54:	000a4c21 	andeq	r4, sl, r1, lsr #24
    5b58:	3d330000 	ldccc	0, cr0, [r3, #-0]
    5b5c:	8c00000a 	stchi	0, cr0, [r0], {10}
    5b60:	90000014 	andls	r0, r0, r4, lsl r0
    5b64:	01000014 	tsteq	r0, r4, lsl r0
    5b68:	0948042f 	stmdbeq	r8, {r0, r1, r2, r3, r5, sl}^
    5b6c:	4c210000 	stcmi	0, cr0, [r1], #-0
    5b70:	0000000a 	andeq	r0, r0, sl
    5b74:	000a2033 	andeq	r2, sl, r3, lsr r0
    5b78:	00149000 	andseq	r9, r4, r0
    5b7c:	00149200 	andseq	r9, r4, r0, lsl #4
    5b80:	04310100 	ldrteq	r0, [r1], #-256	; 0xffffff00
    5b84:	00000962 	andeq	r0, r0, r2, ror #18
    5b88:	000a2f21 	andeq	r2, sl, r1, lsr #30
    5b8c:	20250000 	eorcs	r0, r5, r0
    5b90:	9800000a 	stmdals	r0, {r1, r3}
    5b94:	68000014 	stmdavs	r0, {r2, r4}
    5b98:	0100000a 	tsteq	r0, sl
    5b9c:	2f210333 	svccs	0x00210333
    5ba0:	0000000a 	andeq	r0, r0, sl
    5ba4:	13a33400 			; <UNDEFINED> instruction: 0x13a33400
    5ba8:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    5bac:	0000b10d 	andeq	fp, r0, sp, lsl #2
    5bb0:	00144400 	andseq	r4, r4, r0, lsl #8
    5bb4:	00147800 	andseq	r7, r4, r0, lsl #16
    5bb8:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    5bbc:	30000009 	andcc	r0, r0, r9
    5bc0:	1b010069 	blne	45d6c <__ccfg+0x25dc4>
    5bc4:	00008106 	andeq	r8, r0, r6, lsl #2
    5bc8:	00623500 	rsbeq	r3, r2, r0, lsl #10
    5bcc:	b1071c01 	tstlt	r7, r1, lsl #24
    5bd0:	86000000 	strhi	r0, [r0], -r0
    5bd4:	27000022 	strcs	r0, [r0, -r2, lsr #32]
    5bd8:	00000a3d 	andeq	r0, r0, sp, lsr sl
    5bdc:	00001448 	andeq	r1, r0, r8, asr #8
    5be0:	000009e8 	andeq	r0, r0, r8, ror #19
    5be4:	c5032201 	strgt	r2, [r3, #-513]	; 0xfffffdff
    5be8:	21000009 	tstcs	r0, r9
    5bec:	00000a4c 	andeq	r0, r0, ip, asr #20
    5bf0:	0a202700 	beq	80f7f8 <__ccfg+0x7ef850>
    5bf4:	144e0000 	strbne	r0, [lr], #-0
    5bf8:	0a100000 	beq	405c00 <__ccfg+0x3e5c58>
    5bfc:	23010000 	movwcs	r0, #4096	; 0x1000
    5c00:	0009df03 	andeq	sp, r9, r3, lsl #30
    5c04:	0a2f2100 	beq	bce00c <__ccfg+0xbae064>
    5c08:	25000000 	strcs	r0, [r0, #-0]
    5c0c:	00000a5a 	andeq	r0, r0, sl, asr sl
    5c10:	00001450 	andeq	r1, r0, r0, asr r4
    5c14:	00000a28 	andeq	r0, r0, r8, lsr #20
    5c18:	21072001 	tstcs	r7, r1
    5c1c:	00000a6c 	andeq	r0, r0, ip, ror #20
    5c20:	b1360000 	teqlt	r6, r0
    5c24:	02000004 	andeq	r0, r0, #4
    5c28:	01010206 	tsteq	r1, r6, lsl #4
    5c2c:	000a2003 	andeq	r2, sl, r3
    5c30:	01553700 	cmpeq	r5, r0, lsl #14
    5c34:	06020000 	streq	r0, [r2], -r0
    5c38:	00672302 	rsbeq	r2, r7, r2, lsl #6
    5c3c:	84370000 	ldrthi	r0, [r7], #-0
    5c40:	02000009 	andeq	r0, r0, #9
    5c44:	67370206 	ldrvs	r0, [r7, -r6, lsl #4]!
    5c48:	00000000 	andeq	r0, r0, r0
    5c4c:	00039e36 	andeq	r9, r3, r6, lsr lr
    5c50:	01540200 	cmpeq	r4, r0, lsl #4
    5c54:	3d030101 	stfccs	f0, [r3, #-4]
    5c58:	3700000a 	strcc	r0, [r0, -sl]
    5c5c:	00000155 	andeq	r0, r0, r5, asr r1
    5c60:	19015402 	stmdbne	r1, {r1, sl, ip, lr}
    5c64:	00000067 	andeq	r0, r0, r7, rrx
    5c68:	00253600 	eoreq	r3, r5, r0, lsl #12
    5c6c:	1e020000 	cdpne	0, 0, cr0, cr2, cr0, {0}
    5c70:	03010101 	movweq	r0, #4353	; 0x1101
    5c74:	00000a5a 	andeq	r0, r0, sl, asr sl
    5c78:	00015537 	andeq	r5, r1, r7, lsr r5
    5c7c:	011e0200 	tsteq	lr, r0, lsl #4
    5c80:	00006717 	andeq	r6, r0, r7, lsl r7
    5c84:	b8380000 	ldmdalt	r8!, {}	; <UNPREDICTABLE>
    5c88:	02000011 	andeq	r0, r0, #17
    5c8c:	670101a4 	strvs	r0, [r1, -r4, lsr #3]
    5c90:	03000000 	movweq	r0, #0
    5c94:	00000a79 	andeq	r0, r0, r9, ror sl
    5c98:	00015539 	andeq	r5, r1, r9, lsr r5
    5c9c:	18a40200 	stmiane	r4!, {r9}
    5ca0:	00000067 	andeq	r0, r0, r7, rrx
    5ca4:	07963a00 	ldreq	r3, [r6, r0, lsl #20]
    5ca8:	15540000 	ldrbne	r0, [r4, #-0]
    5cac:	15780000 	ldrbne	r0, [r8, #-0]!
    5cb0:	9c010000 	stcls	0, cr0, [r1], {-0}
    5cb4:	00079628 	andeq	r9, r7, r8, lsr #12
    5cb8:	00155e00 	andseq	r5, r5, r0, lsl #28
    5cbc:	00157200 	andseq	r7, r5, r0, lsl #4
    5cc0:	0d780100 	ldfeqe	f0, [r8, #-0]
    5cc4:	0007a83b 	andeq	sl, r7, fp, lsr r8
    5cc8:	00156800 	andseq	r6, r5, r0, lsl #16
    5ccc:	00156e00 	andseq	r6, r5, r0, lsl #28
    5cd0:	037c0100 	cmneq	ip, #0, 2
    5cd4:	12000000 	andne	r0, r0, #0
    5cd8:	03000004 	movweq	r0, #4
    5cdc:	00196400 	andseq	r6, r9, r0, lsl #8
    5ce0:	5f010400 	svcpl	0x00010400
    5ce4:	0c000001 	stceq	0, cr0, [r0], {1}
    5ce8:	000013bf 			; <UNDEFINED> instruction: 0x000013bf
    5cec:	000000c0 	andeq	r0, r0, r0, asr #1
    5cf0:	00000bf0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    5cf4:	00000000 	andeq	r0, r0, r0
    5cf8:	000047f8 	strdeq	r4, [r0], -r8
    5cfc:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    5d00:	02000003 	andeq	r0, r0, #3
    5d04:	03cc0502 	biceq	r0, ip, #8388608	; 0x800000
    5d08:	04020000 	streq	r0, [r2], #-0
    5d0c:	00009d05 	andeq	r9, r0, r5, lsl #26
    5d10:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5d14:	00000098 	muleq	r0, r8, r0
    5d18:	0021eb03 	eoreq	lr, r1, r3, lsl #22
    5d1c:	182e0200 	stmdane	lr!, {r9}
    5d20:	0000004d 	andeq	r0, r0, sp, asr #32
    5d24:	90080102 	andls	r0, r8, r2, lsl #2
    5d28:	03000003 	movweq	r0, #3
    5d2c:	000020d9 	ldrdeq	r2, [r0], -r9
    5d30:	60193102 	andsvs	r3, r9, r2, lsl #2
    5d34:	02000000 	andeq	r0, r0, #0
    5d38:	02600702 	rsbeq	r0, r0, #524288	; 0x80000
    5d3c:	a2030000 	andge	r0, r3, #0
    5d40:	02000017 	andeq	r0, r0, #23
    5d44:	00731934 	rsbseq	r1, r3, r4, lsr r9
    5d48:	04020000 	streq	r0, [r2], #-0
    5d4c:	00007207 	andeq	r7, r0, r7, lsl #4
    5d50:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5d54:	0000006d 	andeq	r0, r0, sp, rrx
    5d58:	69050404 	stmdbvs	r5, {r2, sl}
    5d5c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5d60:	00770704 	rsbseq	r0, r7, r4, lsl #14
    5d64:	af030000 	svcge	0x00030000
    5d68:	03000015 	movweq	r0, #21
    5d6c:	00541227 	subseq	r1, r4, r7, lsr #4
    5d70:	8f050000 	svchi	0x00050000
    5d74:	03000000 	movweq	r0, #0
    5d78:	000013a7 	andeq	r1, r0, r7, lsr #7
    5d7c:	41122b03 	tstmi	r2, r3, lsl #22
    5d80:	06000000 	streq	r0, [r0], -r0
    5d84:	000000a0 	andeq	r0, r0, r0, lsr #1
    5d88:	00160003 	andseq	r0, r6, r3
    5d8c:	122c0300 	eorne	r0, ip, #0, 6
    5d90:	00000067 	andeq	r0, r0, r7, rrx
    5d94:	0000b105 	andeq	fp, r0, r5, lsl #2
    5d98:	02960300 	addseq	r0, r6, #0, 6
    5d9c:	2d030000 	stccs	0, cr0, [r3, #-0]
    5da0:	00006712 	andeq	r6, r0, r2, lsl r7
    5da4:	03080700 	movweq	r0, #34560	; 0x8700
    5da8:	015c0932 	cmpeq	ip, r2, lsr r9
    5dac:	b1080000 	mrslt	r0, (UNDEF: 8)
    5db0:	03000002 	movweq	r0, #2
    5db4:	00a00734 	adceq	r0, r0, r4, lsr r7
    5db8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dbc:	91080007 	tstls	r8, r7
    5dc0:	03000000 	movweq	r0, #0
    5dc4:	00a00335 	adceq	r0, r0, r5, lsr r3
    5dc8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dcc:	88080006 	stmdahi	r8, {r1, r2}
    5dd0:	03000002 	movweq	r0, #2
    5dd4:	00a00336 	adceq	r0, r0, r6, lsr r3
    5dd8:	01010000 	mrseq	r0, (UNDEF: 1)
    5ddc:	fb080005 	blx	205dfa <__ccfg+0x1e5e52>
    5de0:	03000003 	movweq	r0, #3
    5de4:	00a00337 	adceq	r0, r0, r7, lsr r3
    5de8:	01010000 	mrseq	r0, (UNDEF: 1)
    5dec:	f4080004 	vst4.8	{d0-d3}, [r8], r4
    5df0:	03000003 	movweq	r0, #3
    5df4:	00a00338 	adceq	r0, r0, r8, lsr r3
    5df8:	04010000 	streq	r0, [r1], #-0
    5dfc:	e5090000 	str	r0, [r9, #-0]
    5e00:	03000003 	movweq	r0, #3
    5e04:	00a0073a 	adceq	r0, r0, sl, lsr r7
    5e08:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    5e0c:	00000040 	andeq	r0, r0, r0, asr #32
    5e10:	a0033c03 	andge	r3, r3, r3, lsl #24
    5e14:	02000000 	andeq	r0, r0, #0
    5e18:	00006609 	andeq	r6, r0, r9, lsl #12
    5e1c:	033d0300 	teqeq	sp, #0, 6
    5e20:	000000a0 	andeq	r0, r0, r0, lsr #1
    5e24:	01430903 	cmpeq	r3, r3, lsl #18
    5e28:	3f030000 	svccc	0x00030000
    5e2c:	0000b108 	andeq	fp, r0, r8, lsl #2
    5e30:	03000400 	movweq	r0, #1024	; 0x400
    5e34:	00000423 	andeq	r0, r0, r3, lsr #8
    5e38:	ce034103 	adfgts	f4, f3, f3
    5e3c:	06000000 	streq	r0, [r0], -r0
    5e40:	0000015c 	andeq	r0, r0, ip, asr r1
    5e44:	0002a50a 	andeq	sl, r2, sl, lsl #10
    5e48:	1a430300 	bne	10c6a50 <__ccfg+0x10a6aa8>
    5e4c:	00000168 	andeq	r0, r0, r8, ror #2
    5e50:	fc0a0101 	stc2	1, cr0, [sl], {1}
    5e54:	03000002 	movweq	r0, #2
    5e58:	01890e45 	orreq	r0, r9, r5, asr #28
    5e5c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e60:	018f040b 	orreq	r0, pc, fp, lsl #8
    5e64:	01020000 	mrseq	r0, (UNDEF: 2)
    5e68:	00039908 	andeq	r9, r3, r8, lsl #18
    5e6c:	018f0500 	orreq	r0, pc, r0, lsl #10
    5e70:	0a0a0000 	beq	285e78 <__ccfg+0x265ed0>
    5e74:	03000003 	movweq	r0, #3
    5e78:	01891e45 	orreq	r1, r9, r5, asr #28
    5e7c:	01010000 	mrseq	r0, (UNDEF: 1)
    5e80:	8f040807 	svchi	0x00040807
    5e84:	0001da09 	andeq	sp, r1, r9, lsl #20
    5e88:	02c10900 	sbceq	r0, r1, #0, 18
    5e8c:	90040000 	andls	r0, r4, r0
    5e90:	0000670b 	andeq	r6, r0, fp, lsl #14
    5e94:	dc090000 	stcle	0, cr0, [r9], {-0}
    5e98:	04000005 	streq	r0, [r0], #-5
    5e9c:	008f0891 	umulleq	r0, pc, r1, r8	; <UNPREDICTABLE>
    5ea0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    5ea4:	00000460 	andeq	r0, r0, r0, ror #8
    5ea8:	ac109204 	lfmge	f1, 1, [r0], {4}
    5eac:	06000000 	streq	r0, [r0], -r0
    5eb0:	04020300 	streq	r0, [r2], #-768	; 0xfffffd00
    5eb4:	93040000 	movwls	r0, #16384	; 0x4000
    5eb8:	0001a903 	andeq	sl, r1, r3, lsl #18
    5ebc:	01da0c00 	bicseq	r0, sl, r0, lsl #24
    5ec0:	01f10000 	mvnseq	r0, r0
    5ec4:	000d0000 	andeq	r0, sp, r0
    5ec8:	0000360a 	andeq	r3, r0, sl, lsl #12
    5ecc:	0f990400 	svceq	0x00990400
    5ed0:	000001e6 	andeq	r0, r0, r6, ror #3
    5ed4:	01070101 	tsteq	r7, r1, lsl #2
    5ed8:	29099105 	stmdbcs	r9, {r0, r2, r8, ip, pc}
    5edc:	08000002 	stmdaeq	r0, {r1}
    5ee0:	00000453 	andeq	r0, r0, r3, asr r4
    5ee4:	a0079305 	andge	r9, r7, r5, lsl #6
    5ee8:	01000000 	mrseq	r0, (UNDEF: 0)
    5eec:	08000107 	stmdaeq	r0, {r0, r1, r2, r8}
    5ef0:	00000031 	andeq	r0, r0, r1, lsr r0
    5ef4:	a0039405 	andge	r9, r3, r5, lsl #8
    5ef8:	01000000 	mrseq	r0, (UNDEF: 0)
    5efc:	00000001 	andeq	r0, r0, r1
    5f00:	00027303 	andeq	r7, r2, r3, lsl #6
    5f04:	03960500 	orrseq	r0, r6, #0, 10
    5f08:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    5f0c:	00022905 	andeq	r2, r2, r5, lsl #18
    5f10:	02350c00 	eorseq	r0, r5, #0, 24
    5f14:	02450000 	subeq	r0, r5, #0
    5f18:	000d0000 	andeq	r0, sp, r0
    5f1c:	00023a05 	andeq	r3, r2, r5, lsl #20
    5f20:	02dc0a00 	sbcseq	r0, ip, #0, 20
    5f24:	9c050000 	stcls	0, cr0, [r5], {-0}
    5f28:	00024517 	andeq	r4, r2, r7, lsl r5
    5f2c:	0c010100 	stfeqs	f0, [r1], {-0}
    5f30:	0000009b 	muleq	r0, fp, r0
    5f34:	00000263 	andeq	r0, r0, r3, ror #4
    5f38:	5805000d 	stmdapl	r5, {r0, r2, r3}
    5f3c:	0a000002 	beq	5f4c <__exidx_end+0x32cc>
    5f40:	00000382 	andeq	r0, r0, r2, lsl #7
    5f44:	63130606 	tstvs	r3, #6291456	; 0x600000
    5f48:	01000002 	tsteq	r0, r2
    5f4c:	01230a01 			; <UNDEFINED> instruction: 0x01230a01
    5f50:	c3040000 	movwgt	r0, #16384	; 0x4000
    5f54:	0000b10e 	andeq	fp, r0, lr, lsl #2
    5f58:	0e010100 	adfeqs	f0, f1, f0
    5f5c:	0000046d 	andeq	r0, r0, sp, ror #8
    5f60:	10016e07 	andne	r6, r1, r7, lsl #28
    5f64:	00000291 	muleq	r0, r1, r2
    5f68:	0297040b 	addseq	r0, r7, #184549376	; 0xb000000
    5f6c:	010f0000 	mrseq	r0, CPSR
    5f70:	000002a3 	andeq	r0, r0, r3, lsr #5
    5f74:	00008f10 	andeq	r8, r0, r0, lsl pc
    5f78:	960c0000 	strls	r0, [ip], -r0
    5f7c:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
    5f80:	0d000002 	stceq	0, cr0, [r0, #-8]
    5f84:	02a30500 	adceq	r0, r3, #0, 10
    5f88:	33110000 	tstcc	r1, #0
    5f8c:	07000004 	streq	r0, [r0, -r4]
    5f90:	ae16017f 	mrcge	1, 0, r0, cr6, cr15, {3}
    5f94:	01000002 	tsteq	r0, r2
    5f98:	037a1101 	cmneq	sl, #1073741824	; 0x40000000
    5f9c:	82070000 	andhi	r0, r7, #0
    5fa0:	00bd1401 	adcseq	r1, sp, r1, lsl #8
    5fa4:	01010000 	mrseq	r0, (UNDEF: 1)
    5fa8:	00045811 	andeq	r5, r4, r1, lsl r8
    5fac:	02d80700 	sbcseq	r0, r8, #0, 14
    5fb0:	0000b10e 	andeq	fp, r0, lr, lsl #2
    5fb4:	12010100 	andne	r0, r1, #0, 2
    5fb8:	03030708 	movweq	r0, #14088	; 0x3708
    5fbc:	00030709 	andeq	r0, r3, r9, lsl #14
    5fc0:	21e31300 	mvncs	r1, r0, lsl #6
    5fc4:	07070000 	streq	r0, [r7, -r0]
    5fc8:	008f0703 	addeq	r0, pc, r3, lsl #14
    5fcc:	13000000 	movwne	r0, #0
    5fd0:	0000052e 	andeq	r0, r0, lr, lsr #10
    5fd4:	08030807 	stmdaeq	r3, {r0, r1, r2, fp}
    5fd8:	000000c2 	andeq	r0, r0, r2, asr #1
    5fdc:	530e0004 	movwpl	r0, #57348	; 0xe004
    5fe0:	07000002 	streq	r0, [r0, -r2]
    5fe4:	e0030309 	and	r0, r3, r9, lsl #6
    5fe8:	14000002 	strne	r0, [r0], #-2
    5fec:	0000047c 	andeq	r0, r0, ip, ror r4
    5ff0:	030b0730 	movweq	r0, #46896	; 0xb730
    5ff4:	00037708 	andeq	r7, r3, r8, lsl #14
    5ff8:	04751300 	ldrbteq	r1, [r5], #-768	; 0xfffffd00
    5ffc:	14070000 	strne	r0, [r7], #-0
    6000:	008f0803 	addeq	r0, pc, r3, lsl #16
    6004:	13000000 	movwne	r0, #0
    6008:	000002cb 	andeq	r0, r0, fp, asr #5
    600c:	08031507 	stmdaeq	r3, {r0, r1, r2, r8, sl, ip}
    6010:	0000008f 	andeq	r0, r0, pc, lsl #1
    6014:	04701302 	ldrbteq	r1, [r0], #-770	; 0xfffffcfe
    6018:	16070000 	strne	r0, [r7], -r0
    601c:	02840b03 	addeq	r0, r4, #3072	; 0xc00
    6020:	13040000 	movwne	r0, #16384	; 0x4000
    6024:	00000f2e 	andeq	r0, r0, lr, lsr #30
    6028:	09031707 	stmdbeq	r3, {r0, r1, r2, r8, r9, sl, ip}
    602c:	000000c2 	andeq	r0, r0, r2, asr #1
    6030:	042c1308 	strteq	r1, [ip], #-776	; 0xfffffcf8
    6034:	18070000 	stmdane	r7, {}	; <UNPREDICTABLE>
    6038:	03770f03 	cmneq	r7, #3, 30
    603c:	130c0000 	movwne	r0, #49152	; 0xc000
    6040:	000002c6 	andeq	r0, r0, r6, asr #5
    6044:	15031907 	strne	r1, [r3, #-2311]	; 0xfffff6f9
    6048:	00000387 	andeq	r0, r0, r7, lsl #7
    604c:	070c002c 	streq	r0, [ip, -ip, lsr #32]
    6050:	87000003 	strhi	r0, [r0, -r3]
    6054:	15000003 	strne	r0, [r0, #-3]
    6058:	00000088 	andeq	r0, r0, r8, lsl #1
    605c:	040b0003 	streq	r0, [fp], #-3
    6060:	00000314 	andeq	r0, r0, r4, lsl r3
    6064:	0004870e 	andeq	r8, r4, lr, lsl #14
    6068:	031c0700 	tsteq	ip, #0, 14
    606c:	0003141b 	andeq	r1, r3, fp, lsl r4
    6070:	03701100 	cmneq	r0, #0, 2
    6074:	1e070000 	cdpne	0, 0, cr0, cr7, cr0, {0}
    6078:	03a91403 			; <UNDEFINED> instruction: 0x03a91403
    607c:	01010000 	mrseq	r0, (UNDEF: 1)
    6080:	038d040b 	orreq	r0, sp, #184549376	; 0xb000000
    6084:	b50a0000 	strlt	r0, [sl, #-0]
    6088:	01000013 	tsteq	r0, r3, lsl r0
    608c:	01890e09 	orreq	r0, r9, r9, lsl #28
    6090:	01010000 	mrseq	r0, (UNDEF: 1)
    6094:	13fe0116 	mvnsne	r0, #-2147483643	; 0x80000005
    6098:	0d010000 	stceq	0, cr0, [r1, #-0]
    609c:	00810105 	addeq	r0, r1, r5, lsl #2
    60a0:	15a00000 	strne	r0, [r0, #0]!
    60a4:	16180000 	ldrne	r0, [r8], -r0
    60a8:	9c010000 	stcls	0, cr0, [r1], {-0}
    60ac:	00747317 	rsbseq	r7, r4, r7, lsl r3
    60b0:	8f120d01 	svchi	0x00120d01
    60b4:	a4000000 	strge	r0, [r0], #-0
    60b8:	17000022 	strne	r0, [r0, -r2, lsr #32]
    60bc:	00667562 	rsbeq	r7, r6, r2, ror #10
    60c0:	891c0d01 	ldmdbhi	ip, {r0, r8, sl, fp}
    60c4:	c2000001 	andgt	r0, r0, #1
    60c8:	17000022 	strne	r0, [r0, -r2, lsr #32]
    60cc:	006e656c 	rsbeq	r6, lr, ip, ror #10
    60d0:	81250d01 			; <UNDEFINED> instruction: 0x81250d01
    60d4:	17000000 	strne	r0, [r0, -r0]
    60d8:	18000023 	stmdane	r0, {r0, r1, r5}
    60dc:	00001405 	andeq	r1, r0, r5, lsl #8
    60e0:	81061101 	tsthi	r6, r1, lsl #2
    60e4:	6c000000 	stcvs	0, cr0, [r0], {-0}
    60e8:	00000023 	andeq	r0, r0, r3, lsr #32
    60ec:	00044c00 	andeq	r4, r4, r0, lsl #24
    60f0:	b3000300 	movwlt	r0, #768	; 0x300
    60f4:	0400001a 	streq	r0, [r0], #-26	; 0xffffffe6
    60f8:	00015f01 	andeq	r5, r1, r1, lsl #30
    60fc:	14130c00 	ldrne	r0, [r3], #-3072	; 0xfffff400
    6100:	00c00000 	sbceq	r0, r0, r0
    6104:	0c000000 	stceq	0, cr0, [r0], {-0}
    6108:	00000000 	andeq	r0, r0, r0
    610c:	49bd0000 	ldmibmi	sp!, {}	; <UNPREDICTABLE>
    6110:	01020000 	mrseq	r0, (UNDEF: 2)
    6114:	00039206 	andeq	r9, r3, r6, lsl #4
    6118:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    611c:	000003cc 	andeq	r0, r0, ip, asr #7
    6120:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    6124:	02000000 	andeq	r0, r0, #0
    6128:	00980508 	addseq	r0, r8, r8, lsl #10
    612c:	eb030000 	bl	c6134 <__ccfg+0xa618c>
    6130:	02000021 	andeq	r0, r0, #33	; 0x21
    6134:	004d182e 	subeq	r1, sp, lr, lsr #16
    6138:	01020000 	mrseq	r0, (UNDEF: 2)
    613c:	00039008 	andeq	r9, r3, r8
    6140:	20d90300 	sbcscs	r0, r9, r0, lsl #6
    6144:	31020000 	mrscc	r0, (UNDEF: 2)
    6148:	00006019 	andeq	r6, r0, r9, lsl r0
    614c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    6150:	00000260 	andeq	r0, r0, r0, ror #4
    6154:	0017a203 	andseq	sl, r7, r3, lsl #4
    6158:	19340200 	ldmdbne	r4!, {r9}
    615c:	00000073 	andeq	r0, r0, r3, ror r0
    6160:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    6164:	02000000 	andeq	r0, r0, #0
    6168:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    616c:	04040000 	streq	r0, [r4], #-0
    6170:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6174:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6178:	00000077 	andeq	r0, r0, r7, ror r0
    617c:	000b3503 	andeq	r3, fp, r3, lsl #10
    6180:	1b280300 	blne	a06d88 <__ccfg+0x9e6de0>
    6184:	0000009b 	muleq	r0, fp, r0
    6188:	000a4b05 	andeq	r4, sl, r5, lsl #22
    618c:	00090400 	andeq	r0, r9, r0, lsl #8
    6190:	000000b3 	strheq	r0, [r0], -r3
    6194:	000beb06 	andeq	lr, fp, r6, lsl #22
    6198:	0000b300 	andeq	fp, r0, r0, lsl #6
    619c:	00010000 	andeq	r0, r1, r0
    61a0:	4d030407 	cfstrsmi	mvf0, [r3, #-28]	; 0xffffffe4
    61a4:	0300000a 	movweq	r0, #10
    61a8:	008f1863 	addeq	r1, pc, r3, ror #16
    61ac:	af030000 	svcge	0x00030000
    61b0:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    61b4:	00541227 	subseq	r1, r4, r7, lsr #4
    61b8:	c1080000 	mrsgt	r0, (UNDEF: 8)
    61bc:	03000000 	movweq	r0, #0
    61c0:	000013a7 	andeq	r1, r0, r7, lsr #7
    61c4:	41122b04 	tstmi	r2, r4, lsl #22
    61c8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    61cc:	000000d2 	ldrdeq	r0, [r0], -r2
    61d0:	00160003 	andseq	r0, r6, r3
    61d4:	122c0400 	eorne	r0, ip, #0, 8
    61d8:	00000067 	andeq	r0, r0, r7, rrx
    61dc:	0000e308 	andeq	lr, r0, r8, lsl #6
    61e0:	02960300 	addseq	r0, r6, #0, 6
    61e4:	2d040000 	stccs	0, cr0, [r4, #-0]
    61e8:	00006712 	andeq	r6, r0, r2, lsl r7
    61ec:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    61f0:	018e0932 	orreq	r0, lr, r2, lsr r9
    61f4:	b10b0000 	mrslt	r0, (UNDEF: 11)
    61f8:	04000002 	streq	r0, [r0], #-2
    61fc:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6200:	01010000 	mrseq	r0, (UNDEF: 1)
    6204:	910b0007 	tstls	fp, r7
    6208:	04000000 	streq	r0, [r0], #-0
    620c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6210:	01010000 	mrseq	r0, (UNDEF: 1)
    6214:	880b0006 	stmdahi	fp, {r1, r2}
    6218:	04000002 	streq	r0, [r0], #-2
    621c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6220:	01010000 	mrseq	r0, (UNDEF: 1)
    6224:	fb0b0005 	blx	2c6242 <__ccfg+0x2a629a>
    6228:	04000003 	streq	r0, [r0], #-3
    622c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6230:	01010000 	mrseq	r0, (UNDEF: 1)
    6234:	f40b0004 	vst4.8	{d0-d3}, [fp], r4
    6238:	04000003 	streq	r0, [r0], #-3
    623c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    6240:	04010000 	streq	r0, [r1], #-0
    6244:	e50c0000 	str	r0, [ip, #-0]
    6248:	04000003 	streq	r0, [r0], #-3
    624c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    6250:	0c010000 	stceq	0, cr0, [r1], {-0}
    6254:	00000040 	andeq	r0, r0, r0, asr #32
    6258:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    625c:	02000000 	andeq	r0, r0, #0
    6260:	0000660c 	andeq	r6, r0, ip, lsl #12
    6264:	033d0400 	teqeq	sp, #0, 8
    6268:	000000d2 	ldrdeq	r0, [r0], -r2
    626c:	01430c03 	cmpeq	r3, r3, lsl #24
    6270:	3f040000 	svccc	0x00040000
    6274:	0000e308 	andeq	lr, r0, r8, lsl #6
    6278:	03000400 	movweq	r0, #1024	; 0x400
    627c:	00000423 	andeq	r0, r0, r3, lsr #8
    6280:	00034104 	andeq	r4, r3, r4, lsl #2
    6284:	09000001 	stmdbeq	r0, {r0}
    6288:	0000018e 	andeq	r0, r0, lr, lsl #3
    628c:	0002a50d 	andeq	sl, r2, sp, lsl #10
    6290:	1a430400 	bne	10c7298 <__ccfg+0x10a72f0>
    6294:	0000019a 	muleq	r0, sl, r1
    6298:	fc0d0101 	stc2	1, cr0, [sp], {1}
    629c:	04000002 	streq	r0, [r0], #-2
    62a0:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    62a4:	01010000 	mrseq	r0, (UNDEF: 1)
    62a8:	01c1040e 	biceq	r0, r1, lr, lsl #8
    62ac:	01020000 	mrseq	r0, (UNDEF: 2)
    62b0:	00039908 	andeq	r9, r3, r8, lsl #18
    62b4:	01c10800 	biceq	r0, r1, r0, lsl #16
    62b8:	0a0d0000 	beq	3462c0 <__ccfg+0x326318>
    62bc:	04000003 	streq	r0, [r0], #-3
    62c0:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    62c4:	01010000 	mrseq	r0, (UNDEF: 1)
    62c8:	8f05080a 	svchi	0x0005080a
    62cc:	00020c09 	andeq	r0, r2, r9, lsl #24
    62d0:	02c10c00 	sbceq	r0, r1, #0, 24
    62d4:	90050000 	andls	r0, r5, r0
    62d8:	0000670b 	andeq	r6, r0, fp, lsl #14
    62dc:	dc0c0000 	stcle	0, cr0, [ip], {-0}
    62e0:	05000005 	streq	r0, [r0, #-5]
    62e4:	00c10891 	smulleq	r0, r1, r1, r8
    62e8:	0c040000 	stceq	0, cr0, [r4], {-0}
    62ec:	00000460 	andeq	r0, r0, r0, ror #8
    62f0:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    62f4:	06000000 	streq	r0, [r0], -r0
    62f8:	04020300 	streq	r0, [r2], #-768	; 0xfffffd00
    62fc:	93050000 	movwls	r0, #20480	; 0x5000
    6300:	0001db03 	andeq	sp, r1, r3, lsl #22
    6304:	020c0f00 	andeq	r0, ip, #0, 30
    6308:	02230000 	eoreq	r0, r3, #0
    630c:	00100000 	andseq	r0, r0, r0
    6310:	0000360d 	andeq	r3, r0, sp, lsl #12
    6314:	0f990500 	svceq	0x00990500
    6318:	00000218 	andeq	r0, r0, r8, lsl r2
    631c:	010a0101 	tsteq	sl, r1, lsl #2
    6320:	5b099106 	blpl	26a740 <__ccfg+0x24a798>
    6324:	0b000002 	bleq	6334 <__exidx_end+0x36b4>
    6328:	00000453 	andeq	r0, r0, r3, asr r4
    632c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6330:	01000000 	mrseq	r0, (UNDEF: 0)
    6334:	0b000107 	bleq	6758 <__exidx_end+0x3ad8>
    6338:	00000031 	andeq	r0, r0, r1, lsr r0
    633c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    6340:	01000000 	mrseq	r0, (UNDEF: 0)
    6344:	00000001 	andeq	r0, r0, r1
    6348:	00027303 	andeq	r7, r2, r3, lsl #6
    634c:	03960600 	orrseq	r0, r6, #0, 12
    6350:	00000231 	andeq	r0, r0, r1, lsr r2
    6354:	00025b08 	andeq	r5, r2, r8, lsl #22
    6358:	02670f00 	rsbeq	r0, r7, #0, 30
    635c:	02770000 	rsbseq	r0, r7, #0
    6360:	00100000 	andseq	r0, r0, r0
    6364:	00026c08 	andeq	r6, r2, r8, lsl #24
    6368:	02dc0d00 	sbcseq	r0, ip, #0, 26
    636c:	9c060000 	stcls	0, cr0, [r6], {-0}
    6370:	00027717 	andeq	r7, r2, r7, lsl r7
    6374:	0f010100 	svceq	0x00010100
    6378:	000000cd 	andeq	r0, r0, sp, asr #1
    637c:	00000295 	muleq	r0, r5, r2
    6380:	8a080010 	bhi	2063c8 <__ccfg+0x1e6420>
    6384:	0d000002 	stceq	0, cr0, [r0, #-8]
    6388:	00000382 	andeq	r0, r0, r2, lsl #7
    638c:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    6390:	01000002 	tsteq	r0, r2
    6394:	01230d01 			; <UNDEFINED> instruction: 0x01230d01
    6398:	c3050000 	movwgt	r0, #20480	; 0x5000
    639c:	0000e30e 	andeq	lr, r0, lr, lsl #6
    63a0:	11010100 	mrsne	r0, (UNDEF: 17)
    63a4:	0000046d 	andeq	r0, r0, sp, ror #8
    63a8:	10016e08 	andne	r6, r1, r8, lsl #28
    63ac:	000002c3 	andeq	r0, r0, r3, asr #5
    63b0:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    63b4:	01120000 	tsteq	r2, r0
    63b8:	000002d5 	ldrdeq	r0, [r0], -r5
    63bc:	0000c113 	andeq	ip, r0, r3, lsl r1
    63c0:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    63c4:	e0000001 	and	r0, r0, r1
    63c8:	10000002 	andne	r0, r0, r2
    63cc:	02d50800 	sbcseq	r0, r5, #0, 16
    63d0:	33140000 	tstcc	r4, #0
    63d4:	08000004 	stmdaeq	r0, {r2}
    63d8:	e016017f 	ands	r0, r6, pc, ror r1
    63dc:	01000002 	tsteq	r0, r2
    63e0:	037a1401 	cmneq	sl, #16777216	; 0x1000000
    63e4:	82080000 	andhi	r0, r8, #0
    63e8:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    63ec:	01010000 	mrseq	r0, (UNDEF: 1)
    63f0:	00045814 	andeq	r5, r4, r4, lsl r8
    63f4:	02d80800 	sbcseq	r0, r8, #0, 16
    63f8:	0000e30e 	andeq	lr, r0, lr, lsl #6
    63fc:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6400:	03030808 	movweq	r0, #14344	; 0x3808
    6404:	00033909 	andeq	r3, r3, r9, lsl #18
    6408:	21e31600 	mvncs	r1, r0, lsl #12
    640c:	07080000 	streq	r0, [r8, -r0]
    6410:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6414:	16000000 	strne	r0, [r0], -r0
    6418:	0000052e 	andeq	r0, r0, lr, lsr #10
    641c:	08030808 	stmdaeq	r3, {r3, fp}
    6420:	000000f4 	strdeq	r0, [r0], -r4
    6424:	53110004 	tstpl	r1, #4
    6428:	08000002 	stmdaeq	r0, {r1}
    642c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6430:	17000003 	strne	r0, [r0, -r3]
    6434:	0000047c 	andeq	r0, r0, ip, ror r4
    6438:	030b0830 	movweq	r0, #47152	; 0xb830
    643c:	0003a908 	andeq	sl, r3, r8, lsl #18
    6440:	04751600 	ldrbteq	r1, [r5], #-1536	; 0xfffffa00
    6444:	14080000 	strne	r0, [r8], #-0
    6448:	00c10803 	sbceq	r0, r1, r3, lsl #16
    644c:	16000000 	strne	r0, [r0], -r0
    6450:	000002cb 	andeq	r0, r0, fp, asr #5
    6454:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    6458:	000000c1 	andeq	r0, r0, r1, asr #1
    645c:	04701602 	ldrbteq	r1, [r0], #-1538	; 0xfffff9fe
    6460:	16080000 	strne	r0, [r8], -r0
    6464:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    6468:	16040000 	strne	r0, [r4], -r0
    646c:	00000f2e 	andeq	r0, r0, lr, lsr #30
    6470:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    6474:	000000f4 	strdeq	r0, [r0], -r4
    6478:	042c1608 	strteq	r1, [ip], #-1544	; 0xfffff9f8
    647c:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    6480:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    6484:	160c0000 	strne	r0, [ip], -r0
    6488:	000002c6 	andeq	r0, r0, r6, asr #5
    648c:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    6490:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    6494:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    6498:	b9000003 	stmdblt	r0, {r0, r1}
    649c:	18000003 	stmdane	r0, {r0, r1}
    64a0:	00000088 	andeq	r0, r0, r8, lsl #1
    64a4:	040e0003 	streq	r0, [lr], #-3
    64a8:	00000346 	andeq	r0, r0, r6, asr #6
    64ac:	00048711 	andeq	r8, r4, r1, lsl r7
    64b0:	031c0800 	tsteq	ip, #0, 16
    64b4:	0003461b 	andeq	r4, r3, fp, lsl r6
    64b8:	03701400 	cmneq	r0, #0, 8
    64bc:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    64c0:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    64c4:	01010000 	mrseq	r0, (UNDEF: 1)
    64c8:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    64cc:	01190000 	tsteq	r9, r0
    64d0:	0000140a 	andeq	r1, r0, sl, lsl #8
    64d4:	01050c01 	tsteq	r5, r1, lsl #24
    64d8:	00000081 	andeq	r0, r0, r1, lsl #1
    64dc:	00001618 	andeq	r1, r0, r8, lsl r6
    64e0:	0000166c 	andeq	r1, r0, ip, ror #12
    64e4:	04499c01 	strbeq	r9, [r9], #-3073	; 0xfffff3ff
    64e8:	731a0000 	tstvc	sl, #0
    64ec:	0c010074 	stceq	0, cr0, [r1], {116}	; 0x74
    64f0:	0000c114 	andeq	ip, r0, r4, lsl r1
    64f4:	0023b600 	eoreq	fp, r3, r0, lsl #12
    64f8:	006d1b00 	rsbeq	r1, sp, r0, lsl #22
    64fc:	49240c01 	stmdbmi	r4!, {r0, sl, fp}
    6500:	02000004 	andeq	r0, r0, #4
    6504:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6508:	00001405 	andeq	r1, r0, r5, lsl #8
    650c:	81060e01 	tsthi	r6, r1, lsl #28
    6510:	c9000000 	stmdbgt	r0, {}	; <UNPREDICTABLE>
    6514:	1e000023 	cdpne	0, 0, cr0, cr0, cr3, {1}
    6518:	00667562 	rsbeq	r7, r6, r2, ror #10
    651c:	bb080f01 	bllt	20a128 <__ccfg+0x1ea180>
    6520:	08000001 	stmdaeq	r0, {r0}
    6524:	1f000024 	svcne	0x00000024
    6528:	01007061 	tsteq	r0, r1, rrx
    652c:	00b50a10 	adcseq	r0, r5, r0, lsl sl
    6530:	91020000 	mrsls	r0, (UNDEF: 2)
    6534:	040e005c 	streq	r0, [lr], #-92	; 0xffffffa4
    6538:	000001c8 	andeq	r0, r0, r8, asr #3
    653c:	00044c00 	andeq	r4, r4, r0, lsl #24
    6540:	5f000300 	svcpl	0x00000300
    6544:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    6548:	00015f01 	andeq	r5, r1, r1, lsl #30
    654c:	14540c00 	ldrbne	r0, [r4], #-3072	; 0xfffff400
    6550:	00c00000 	sbceq	r0, r0, r0
    6554:	0c100000 	ldceq	0, cr0, [r0], {-0}
    6558:	00000000 	andeq	r0, r0, r0
    655c:	4b5f0000 	blmi	17c6564 <__ccfg+0x17a65bc>
    6560:	01020000 	mrseq	r0, (UNDEF: 2)
    6564:	00039206 	andeq	r9, r3, r6, lsl #4
    6568:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    656c:	000003cc 	andeq	r0, r0, ip, asr #7
    6570:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    6574:	02000000 	andeq	r0, r0, #0
    6578:	00980508 	addseq	r0, r8, r8, lsl #10
    657c:	eb030000 	bl	c6584 <__ccfg+0xa65dc>
    6580:	02000021 	andeq	r0, r0, #33	; 0x21
    6584:	004d182e 	subeq	r1, sp, lr, lsr #16
    6588:	01020000 	mrseq	r0, (UNDEF: 2)
    658c:	00039008 	andeq	r9, r3, r8
    6590:	20d90300 	sbcscs	r0, r9, r0, lsl #6
    6594:	31020000 	mrscc	r0, (UNDEF: 2)
    6598:	00006019 	andeq	r6, r0, r9, lsl r0
    659c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    65a0:	00000260 	andeq	r0, r0, r0, ror #4
    65a4:	0017a203 	andseq	sl, r7, r3, lsl #4
    65a8:	19340200 	ldmdbne	r4!, {r9}
    65ac:	00000073 	andeq	r0, r0, r3, ror r0
    65b0:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    65b4:	02000000 	andeq	r0, r0, #0
    65b8:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    65bc:	04040000 	streq	r0, [r4], #-0
    65c0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    65c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    65c8:	00000077 	andeq	r0, r0, r7, ror r0
    65cc:	000b3503 	andeq	r3, fp, r3, lsl #10
    65d0:	1b280300 	blne	a071d8 <__ccfg+0x9e7230>
    65d4:	0000009b 	muleq	r0, fp, r0
    65d8:	000a4b05 	andeq	r4, sl, r5, lsl #22
    65dc:	00090400 	andeq	r0, r9, r0, lsl #8
    65e0:	000000b3 	strheq	r0, [r0], -r3
    65e4:	000beb06 	andeq	lr, fp, r6, lsl #22
    65e8:	0000b300 	andeq	fp, r0, r0, lsl #6
    65ec:	00010000 	andeq	r0, r1, r0
    65f0:	4d030407 	cfstrsmi	mvf0, [r3, #-28]	; 0xffffffe4
    65f4:	0300000a 	movweq	r0, #10
    65f8:	008f1863 	addeq	r1, pc, r3, ror #16
    65fc:	af030000 	svcge	0x00030000
    6600:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    6604:	00541227 	subseq	r1, r4, r7, lsr #4
    6608:	c1080000 	mrsgt	r0, (UNDEF: 8)
    660c:	03000000 	movweq	r0, #0
    6610:	000013a7 	andeq	r1, r0, r7, lsr #7
    6614:	41122b04 	tstmi	r2, r4, lsl #22
    6618:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    661c:	000000d2 	ldrdeq	r0, [r0], -r2
    6620:	00160003 	andseq	r0, r6, r3
    6624:	122c0400 	eorne	r0, ip, #0, 8
    6628:	00000067 	andeq	r0, r0, r7, rrx
    662c:	0000e308 	andeq	lr, r0, r8, lsl #6
    6630:	02960300 	addseq	r0, r6, #0, 6
    6634:	2d040000 	stccs	0, cr0, [r4, #-0]
    6638:	00006712 	andeq	r6, r0, r2, lsl r7
    663c:	04080a00 	streq	r0, [r8], #-2560	; 0xfffff600
    6640:	018e0932 	orreq	r0, lr, r2, lsr r9
    6644:	b10b0000 	mrslt	r0, (UNDEF: 11)
    6648:	04000002 	streq	r0, [r0], #-2
    664c:	00d20734 	sbcseq	r0, r2, r4, lsr r7
    6650:	01010000 	mrseq	r0, (UNDEF: 1)
    6654:	910b0007 	tstls	fp, r7
    6658:	04000000 	streq	r0, [r0], #-0
    665c:	00d20335 	sbcseq	r0, r2, r5, lsr r3
    6660:	01010000 	mrseq	r0, (UNDEF: 1)
    6664:	880b0006 	stmdahi	fp, {r1, r2}
    6668:	04000002 	streq	r0, [r0], #-2
    666c:	00d20336 	sbcseq	r0, r2, r6, lsr r3
    6670:	01010000 	mrseq	r0, (UNDEF: 1)
    6674:	fb0b0005 	blx	2c6692 <__ccfg+0x2a66ea>
    6678:	04000003 	streq	r0, [r0], #-3
    667c:	00d20337 	sbcseq	r0, r2, r7, lsr r3
    6680:	01010000 	mrseq	r0, (UNDEF: 1)
    6684:	f40b0004 	vst4.8	{d0-d3}, [fp], r4
    6688:	04000003 	streq	r0, [r0], #-3
    668c:	00d20338 	sbcseq	r0, r2, r8, lsr r3
    6690:	04010000 	streq	r0, [r1], #-0
    6694:	e50c0000 	str	r0, [ip, #-0]
    6698:	04000003 	streq	r0, [r0], #-3
    669c:	00d2073a 	sbcseq	r0, r2, sl, lsr r7
    66a0:	0c010000 	stceq	0, cr0, [r1], {-0}
    66a4:	00000040 	andeq	r0, r0, r0, asr #32
    66a8:	d2033c04 	andle	r3, r3, #4, 24	; 0x400
    66ac:	02000000 	andeq	r0, r0, #0
    66b0:	0000660c 	andeq	r6, r0, ip, lsl #12
    66b4:	033d0400 	teqeq	sp, #0, 8
    66b8:	000000d2 	ldrdeq	r0, [r0], -r2
    66bc:	01430c03 	cmpeq	r3, r3, lsl #24
    66c0:	3f040000 	svccc	0x00040000
    66c4:	0000e308 	andeq	lr, r0, r8, lsl #6
    66c8:	03000400 	movweq	r0, #1024	; 0x400
    66cc:	00000423 	andeq	r0, r0, r3, lsr #8
    66d0:	00034104 	andeq	r4, r3, r4, lsl #2
    66d4:	09000001 	stmdbeq	r0, {r0}
    66d8:	0000018e 	andeq	r0, r0, lr, lsl #3
    66dc:	0002a50d 	andeq	sl, r2, sp, lsl #10
    66e0:	1a430400 	bne	10c76e8 <__ccfg+0x10a7740>
    66e4:	0000019a 	muleq	r0, sl, r1
    66e8:	fc0d0101 	stc2	1, cr0, [sp], {1}
    66ec:	04000002 	streq	r0, [r0], #-2
    66f0:	01bb0e45 			; <UNDEFINED> instruction: 0x01bb0e45
    66f4:	01010000 	mrseq	r0, (UNDEF: 1)
    66f8:	01c1040e 	biceq	r0, r1, lr, lsl #8
    66fc:	01020000 	mrseq	r0, (UNDEF: 2)
    6700:	00039908 	andeq	r9, r3, r8, lsl #18
    6704:	01c10800 	biceq	r0, r1, r0, lsl #16
    6708:	0a0d0000 	beq	346710 <__ccfg+0x326768>
    670c:	04000003 	streq	r0, [r0], #-3
    6710:	01bb1e45 			; <UNDEFINED> instruction: 0x01bb1e45
    6714:	01010000 	mrseq	r0, (UNDEF: 1)
    6718:	8f05080a 	svchi	0x0005080a
    671c:	00020c09 	andeq	r0, r2, r9, lsl #24
    6720:	02c10c00 	sbceq	r0, r1, #0, 24
    6724:	90050000 	andls	r0, r5, r0
    6728:	0000670b 	andeq	r6, r0, fp, lsl #14
    672c:	dc0c0000 	stcle	0, cr0, [ip], {-0}
    6730:	05000005 	streq	r0, [r0, #-5]
    6734:	00c10891 	smulleq	r0, r1, r1, r8
    6738:	0c040000 	stceq	0, cr0, [r4], {-0}
    673c:	00000460 	andeq	r0, r0, r0, ror #8
    6740:	de109205 	cdple	2, 1, cr9, cr0, cr5, {0}
    6744:	06000000 	streq	r0, [r0], -r0
    6748:	04020300 	streq	r0, [r2], #-768	; 0xfffffd00
    674c:	93050000 	movwls	r0, #20480	; 0x5000
    6750:	0001db03 	andeq	sp, r1, r3, lsl #22
    6754:	020c0f00 	andeq	r0, ip, #0, 30
    6758:	02230000 	eoreq	r0, r3, #0
    675c:	00100000 	andseq	r0, r0, r0
    6760:	0000360d 	andeq	r3, r0, sp, lsl #12
    6764:	0f990500 	svceq	0x00990500
    6768:	00000218 	andeq	r0, r0, r8, lsl r2
    676c:	010a0101 	tsteq	sl, r1, lsl #2
    6770:	5b099106 	blpl	26ab90 <__ccfg+0x24abe8>
    6774:	0b000002 	bleq	6784 <__exidx_end+0x3b04>
    6778:	00000453 	andeq	r0, r0, r3, asr r4
    677c:	d2079306 	andle	r9, r7, #402653184	; 0x18000000
    6780:	01000000 	mrseq	r0, (UNDEF: 0)
    6784:	0b000107 	bleq	6ba8 <__exidx_end+0x3f28>
    6788:	00000031 	andeq	r0, r0, r1, lsr r0
    678c:	d2039406 	andle	r9, r3, #100663296	; 0x6000000
    6790:	01000000 	mrseq	r0, (UNDEF: 0)
    6794:	00000001 	andeq	r0, r0, r1
    6798:	00027303 	andeq	r7, r2, r3, lsl #6
    679c:	03960600 	orrseq	r0, r6, #0, 12
    67a0:	00000231 	andeq	r0, r0, r1, lsr r2
    67a4:	00025b08 	andeq	r5, r2, r8, lsl #22
    67a8:	02670f00 	rsbeq	r0, r7, #0, 30
    67ac:	02770000 	rsbseq	r0, r7, #0
    67b0:	00100000 	andseq	r0, r0, r0
    67b4:	00026c08 	andeq	r6, r2, r8, lsl #24
    67b8:	02dc0d00 	sbcseq	r0, ip, #0, 26
    67bc:	9c060000 	stcls	0, cr0, [r6], {-0}
    67c0:	00027717 	andeq	r7, r2, r7, lsl r7
    67c4:	0f010100 	svceq	0x00010100
    67c8:	000000cd 	andeq	r0, r0, sp, asr #1
    67cc:	00000295 	muleq	r0, r5, r2
    67d0:	8a080010 	bhi	206818 <__ccfg+0x1e6870>
    67d4:	0d000002 	stceq	0, cr0, [r0, #-8]
    67d8:	00000382 	andeq	r0, r0, r2, lsl #7
    67dc:	95130607 	ldrls	r0, [r3, #-1543]	; 0xfffff9f9
    67e0:	01000002 	tsteq	r0, r2
    67e4:	01230d01 			; <UNDEFINED> instruction: 0x01230d01
    67e8:	c3050000 	movwgt	r0, #20480	; 0x5000
    67ec:	0000e30e 	andeq	lr, r0, lr, lsl #6
    67f0:	11010100 	mrsne	r0, (UNDEF: 17)
    67f4:	0000046d 	andeq	r0, r0, sp, ror #8
    67f8:	10016e08 	andne	r6, r1, r8, lsl #28
    67fc:	000002c3 	andeq	r0, r0, r3, asr #5
    6800:	02c9040e 	sbceq	r0, r9, #234881024	; 0xe000000
    6804:	01120000 	tsteq	r2, r0
    6808:	000002d5 	ldrdeq	r0, [r0], -r5
    680c:	0000c113 	andeq	ip, r0, r3, lsl r1
    6810:	c80f0000 	stmdagt	pc, {}	; <UNPREDICTABLE>
    6814:	e0000001 	and	r0, r0, r1
    6818:	10000002 	andne	r0, r0, r2
    681c:	02d50800 	sbcseq	r0, r5, #0, 16
    6820:	33140000 	tstcc	r4, #0
    6824:	08000004 	stmdaeq	r0, {r2}
    6828:	e016017f 	ands	r0, r6, pc, ror r1
    682c:	01000002 	tsteq	r0, r2
    6830:	037a1401 	cmneq	sl, #16777216	; 0x1000000
    6834:	82080000 	andhi	r0, r8, #0
    6838:	00ef1401 	rsceq	r1, pc, r1, lsl #8
    683c:	01010000 	mrseq	r0, (UNDEF: 1)
    6840:	00045814 	andeq	r5, r4, r4, lsl r8
    6844:	02d80800 	sbcseq	r0, r8, #0, 16
    6848:	0000e30e 	andeq	lr, r0, lr, lsl #6
    684c:	15010100 	strne	r0, [r1, #-256]	; 0xffffff00
    6850:	03030808 	movweq	r0, #14344	; 0x3808
    6854:	00033909 	andeq	r3, r3, r9, lsl #18
    6858:	21e31600 	mvncs	r1, r0, lsl #12
    685c:	07080000 	streq	r0, [r8, -r0]
    6860:	00c10703 	sbceq	r0, r1, r3, lsl #14
    6864:	16000000 	strne	r0, [r0], -r0
    6868:	0000052e 	andeq	r0, r0, lr, lsr #10
    686c:	08030808 	stmdaeq	r3, {r3, fp}
    6870:	000000f4 	strdeq	r0, [r0], -r4
    6874:	53110004 	tstpl	r1, #4
    6878:	08000002 	stmdaeq	r0, {r1}
    687c:	12030309 	andne	r0, r3, #603979776	; 0x24000000
    6880:	17000003 	strne	r0, [r0, -r3]
    6884:	0000047c 	andeq	r0, r0, ip, ror r4
    6888:	030b0830 	movweq	r0, #47152	; 0xb830
    688c:	0003a908 	andeq	sl, r3, r8, lsl #18
    6890:	04751600 	ldrbteq	r1, [r5], #-1536	; 0xfffffa00
    6894:	14080000 	strne	r0, [r8], #-0
    6898:	00c10803 	sbceq	r0, r1, r3, lsl #16
    689c:	16000000 	strne	r0, [r0], -r0
    68a0:	000002cb 	andeq	r0, r0, fp, asr #5
    68a4:	08031508 	stmdaeq	r3, {r3, r8, sl, ip}
    68a8:	000000c1 	andeq	r0, r0, r1, asr #1
    68ac:	04701602 	ldrbteq	r1, [r0], #-1538	; 0xfffff9fe
    68b0:	16080000 	strne	r0, [r8], -r0
    68b4:	02b60b03 	adcseq	r0, r6, #3072	; 0xc00
    68b8:	16040000 	strne	r0, [r4], -r0
    68bc:	00000f2e 	andeq	r0, r0, lr, lsr #30
    68c0:	09031708 	stmdbeq	r3, {r3, r8, r9, sl, ip}
    68c4:	000000f4 	strdeq	r0, [r0], -r4
    68c8:	042c1608 	strteq	r1, [ip], #-1544	; 0xfffff9f8
    68cc:	18080000 	stmdane	r8, {}	; <UNPREDICTABLE>
    68d0:	03a90f03 			; <UNDEFINED> instruction: 0x03a90f03
    68d4:	160c0000 	strne	r0, [ip], -r0
    68d8:	000002c6 	andeq	r0, r0, r6, asr #5
    68dc:	15031908 	strne	r1, [r3, #-2312]	; 0xfffff6f8
    68e0:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    68e4:	390f002c 	stmdbcc	pc, {r2, r3, r5}	; <UNPREDICTABLE>
    68e8:	b9000003 	stmdblt	r0, {r0, r1}
    68ec:	18000003 	stmdane	r0, {r0, r1}
    68f0:	00000088 	andeq	r0, r0, r8, lsl #1
    68f4:	040e0003 	streq	r0, [lr], #-3
    68f8:	00000346 	andeq	r0, r0, r6, asr #6
    68fc:	00048711 	andeq	r8, r4, r1, lsl r7
    6900:	031c0800 	tsteq	ip, #0, 16
    6904:	0003461b 	andeq	r4, r3, fp, lsl r6
    6908:	03701400 	cmneq	r0, #0, 8
    690c:	1e080000 	cdpne	0, 0, cr0, cr8, cr0, {0}
    6910:	03db1403 	bicseq	r1, fp, #50331648	; 0x3000000
    6914:	01010000 	mrseq	r0, (UNDEF: 1)
    6918:	03bf040e 			; <UNDEFINED> instruction: 0x03bf040e
    691c:	b50d0000 	strlt	r0, [sp, #-0]
    6920:	01000013 	tsteq	r0, r3, lsl r0
    6924:	01bb0e0a 			; <UNDEFINED> instruction: 0x01bb0e0a
    6928:	01010000 	mrseq	r0, (UNDEF: 1)
    692c:	14940119 	ldrne	r0, [r4], #281	; 0x119
    6930:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    6934:	00810105 	addeq	r0, r1, r5, lsl #2
    6938:	166c0000 	strbtne	r0, [ip], -r0
    693c:	16cc0000 	strbne	r0, [ip], r0
    6940:	9c010000 	stcls	0, cr0, [r1], {-0}
    6944:	00000449 	andeq	r0, r0, r9, asr #8
    6948:	0074731a 	rsbseq	r7, r4, sl, lsl r3
    694c:	c1130e01 	tstgt	r3, r1, lsl #28
    6950:	3c000000 	stccc	0, cr0, [r0], {-0}
    6954:	1b000024 	blne	69ec <__exidx_end+0x3d6c>
    6958:	00746d66 	rsbseq	r6, r4, r6, ror #26
    695c:	49230e01 	stmdbmi	r3!, {r0, r9, sl, fp}
    6960:	02000004 	andeq	r0, r0, #4
    6964:	1d1c7491 	cfldrsne	mvf7, [ip, #-580]	; 0xfffffdbc
    6968:	00001405 	andeq	r1, r0, r5, lsl #8
    696c:	81061301 	tsthi	r6, r1, lsl #6
    6970:	5a000000 	bpl	6978 <__exidx_end+0x3cf8>
    6974:	1e000024 	cdpne	0, 0, cr0, cr0, cr4, {1}
    6978:	01007061 	tsteq	r0, r1, rrx
    697c:	00b50a14 	adcseq	r0, r5, r4, lsl sl
    6980:	91020000 	mrsls	r0, (UNDEF: 2)
    6984:	040e0064 	streq	r0, [lr], #-100	; 0xffffff9c
    6988:	000001c8 	andeq	r0, r0, r8, asr #3
    698c:	00042d00 	andeq	r2, r4, r0, lsl #26
    6990:	fa000300 	blx	7598 <__exidx_end+0x4918>
    6994:	0400001d 	streq	r0, [r0], #-29	; 0xffffffe3
    6998:	00015f01 	andeq	r5, r1, r1, lsl #30
    699c:	149c0c00 	ldrne	r0, [ip], #3072	; 0xc00
    69a0:	00c00000 	sbceq	r0, r0, r0
    69a4:	0c380000 	ldceq	0, cr0, [r8], #-0
    69a8:	00000000 	andeq	r0, r0, r0
    69ac:	4d120000 	ldcmi	0, cr0, [r2, #-0]
    69b0:	01020000 	mrseq	r0, (UNDEF: 2)
    69b4:	00039206 	andeq	r9, r3, r6, lsl #4
    69b8:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    69bc:	000003cc 	andeq	r0, r0, ip, asr #7
    69c0:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    69c4:	02000000 	andeq	r0, r0, #0
    69c8:	00980508 	addseq	r0, r8, r8, lsl #10
    69cc:	eb030000 	bl	c69d4 <__ccfg+0xa6a2c>
    69d0:	02000021 	andeq	r0, r0, #33	; 0x21
    69d4:	004d182e 	subeq	r1, sp, lr, lsr #16
    69d8:	01020000 	mrseq	r0, (UNDEF: 2)
    69dc:	00039008 	andeq	r9, r3, r8
    69e0:	20d90300 	sbcscs	r0, r9, r0, lsl #6
    69e4:	31020000 	mrscc	r0, (UNDEF: 2)
    69e8:	00006019 	andeq	r6, r0, r9, lsl r0
    69ec:	07020200 	streq	r0, [r2, -r0, lsl #4]
    69f0:	00000260 	andeq	r0, r0, r0, ror #4
    69f4:	0017a203 	andseq	sl, r7, r3, lsl #4
    69f8:	19340200 	ldmdbne	r4!, {r9}
    69fc:	00000073 	andeq	r0, r0, r3, ror r0
    6a00:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    6a04:	02000000 	andeq	r0, r0, #0
    6a08:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    6a0c:	04040000 	streq	r0, [r4], #-0
    6a10:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    6a14:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6a18:	00000077 	andeq	r0, r0, r7, ror r0
    6a1c:	0015af03 	andseq	sl, r5, r3, lsl #30
    6a20:	12270300 	eorne	r0, r7, #0, 6
    6a24:	00000054 	andeq	r0, r0, r4, asr r0
    6a28:	00008f05 	andeq	r8, r0, r5, lsl #30
    6a2c:	13a70300 			; <UNDEFINED> instruction: 0x13a70300
    6a30:	2b030000 	blcs	c6a38 <__ccfg+0xa6a90>
    6a34:	00004112 	andeq	r4, r0, r2, lsl r1
    6a38:	00a00600 	adceq	r0, r0, r0, lsl #12
    6a3c:	00030000 	andeq	r0, r3, r0
    6a40:	03000016 	movweq	r0, #22
    6a44:	0067122c 	rsbeq	r1, r7, ip, lsr #4
    6a48:	b1050000 	mrslt	r0, (UNDEF: 5)
    6a4c:	03000000 	movweq	r0, #0
    6a50:	00000296 	muleq	r0, r6, r2
    6a54:	67122d03 	ldrvs	r2, [r2, -r3, lsl #26]
    6a58:	07000000 	streq	r0, [r0, -r0]
    6a5c:	09320308 	ldmdbeq	r2!, {r3, r8, r9}
    6a60:	0000015c 	andeq	r0, r0, ip, asr r1
    6a64:	0002b108 	andeq	fp, r2, r8, lsl #2
    6a68:	07340300 	ldreq	r0, [r4, -r0, lsl #6]!
    6a6c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a70:	00070101 	andeq	r0, r7, r1, lsl #2
    6a74:	00009108 	andeq	r9, r0, r8, lsl #2
    6a78:	03350300 	teqeq	r5, #0, 6
    6a7c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a80:	00060101 	andeq	r0, r6, r1, lsl #2
    6a84:	00028808 	andeq	r8, r2, r8, lsl #16
    6a88:	03360300 	teqeq	r6, #0, 6
    6a8c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6a90:	00050101 	andeq	r0, r5, r1, lsl #2
    6a94:	0003fb08 	andeq	pc, r3, r8, lsl #22
    6a98:	03370300 	teqeq	r7, #0, 6
    6a9c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6aa0:	00040101 	andeq	r0, r4, r1, lsl #2
    6aa4:	0003f408 	andeq	pc, r3, r8, lsl #8
    6aa8:	03380300 	teqeq	r8, #0, 6
    6aac:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ab0:	00000401 	andeq	r0, r0, r1, lsl #8
    6ab4:	0003e509 	andeq	lr, r3, r9, lsl #10
    6ab8:	073a0300 	ldreq	r0, [sl, -r0, lsl #6]!
    6abc:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ac0:	00400901 	subeq	r0, r0, r1, lsl #18
    6ac4:	3c030000 	stccc	0, cr0, [r3], {-0}
    6ac8:	0000a003 	andeq	sl, r0, r3
    6acc:	66090200 	strvs	r0, [r9], -r0, lsl #4
    6ad0:	03000000 	movweq	r0, #0
    6ad4:	00a0033d 	adceq	r0, r0, sp, lsr r3
    6ad8:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    6adc:	00000143 	andeq	r0, r0, r3, asr #2
    6ae0:	b1083f03 	tstlt	r8, r3, lsl #30
    6ae4:	04000000 	streq	r0, [r0], #-0
    6ae8:	04230300 	strteq	r0, [r3], #-768	; 0xfffffd00
    6aec:	41030000 	mrsmi	r0, (UNDEF: 3)
    6af0:	0000ce03 	andeq	ip, r0, r3, lsl #28
    6af4:	015c0600 	cmpeq	ip, r0, lsl #12
    6af8:	a50a0000 	strge	r0, [sl, #-0]
    6afc:	03000002 	movweq	r0, #2
    6b00:	01681a43 	cmneq	r8, r3, asr #20
    6b04:	01010000 	mrseq	r0, (UNDEF: 1)
    6b08:	0002fc0a 	andeq	pc, r2, sl, lsl #24
    6b0c:	0e450300 	cdpeq	3, 4, cr0, cr5, cr0, {0}
    6b10:	00000189 	andeq	r0, r0, r9, lsl #3
    6b14:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6b18:	0000018f 	andeq	r0, r0, pc, lsl #3
    6b1c:	99080102 	stmdbls	r8, {r1, r8}
    6b20:	05000003 	streq	r0, [r0, #-3]
    6b24:	0000018f 	andeq	r0, r0, pc, lsl #3
    6b28:	00030a0a 	andeq	r0, r3, sl, lsl #20
    6b2c:	1e450300 	cdpne	3, 4, cr0, cr5, cr0, {0}
    6b30:	00000189 	andeq	r0, r0, r9, lsl #3
    6b34:	08070101 	stmdaeq	r7, {r0, r8}
    6b38:	da098f04 	ble	26a750 <__ccfg+0x24a7a8>
    6b3c:	09000001 	stmdbeq	r0, {r0}
    6b40:	000002c1 	andeq	r0, r0, r1, asr #5
    6b44:	670b9004 	strvs	r9, [fp, -r4]
    6b48:	00000000 	andeq	r0, r0, r0
    6b4c:	0005dc09 	andeq	sp, r5, r9, lsl #24
    6b50:	08910400 	ldmeq	r1, {sl}
    6b54:	0000008f 	andeq	r0, r0, pc, lsl #1
    6b58:	04600904 	strbteq	r0, [r0], #-2308	; 0xfffff6fc
    6b5c:	92040000 	andls	r0, r4, #0
    6b60:	0000ac10 	andeq	sl, r0, r0, lsl ip
    6b64:	03000600 	movweq	r0, #1536	; 0x600
    6b68:	00000402 	andeq	r0, r0, r2, lsl #8
    6b6c:	a9039304 	stmdbge	r3, {r2, r8, r9, ip, pc}
    6b70:	0c000001 	stceq	0, cr0, [r0], {1}
    6b74:	000001da 	ldrdeq	r0, [r0], -sl
    6b78:	000001f1 	strdeq	r0, [r0], -r1
    6b7c:	360a000d 	strcc	r0, [sl], -sp
    6b80:	04000000 	streq	r0, [r0], #-0
    6b84:	01e60f99 	strexheq	r0, r9, [r6]
    6b88:	01010000 	mrseq	r0, (UNDEF: 1)
    6b8c:	91050107 	tstls	r5, r7, lsl #2
    6b90:	00022909 	andeq	r2, r2, r9, lsl #18
    6b94:	04530800 	ldrbeq	r0, [r3], #-2048	; 0xfffff800
    6b98:	93050000 	movwls	r0, #20480	; 0x5000
    6b9c:	0000a007 	andeq	sl, r0, r7
    6ba0:	01070100 	mrseq	r0, (UNDEF: 23)
    6ba4:	00310800 	eorseq	r0, r1, r0, lsl #16
    6ba8:	94050000 	strls	r0, [r5], #-0
    6bac:	0000a003 	andeq	sl, r0, r3
    6bb0:	00010100 	andeq	r0, r1, r0, lsl #2
    6bb4:	73030000 	movwvc	r0, #12288	; 0x3000
    6bb8:	05000002 	streq	r0, [r0, #-2]
    6bbc:	01ff0396 			; <UNDEFINED> instruction: 0x01ff0396
    6bc0:	29050000 	stmdbcs	r5, {}	; <UNPREDICTABLE>
    6bc4:	0c000002 	stceq	0, cr0, [r0], {2}
    6bc8:	00000235 	andeq	r0, r0, r5, lsr r2
    6bcc:	00000245 	andeq	r0, r0, r5, asr #4
    6bd0:	3a05000d 	bcc	146c0c <__ccfg+0x126c64>
    6bd4:	0a000002 	beq	6be4 <__exidx_end+0x3f64>
    6bd8:	000002dc 	ldrdeq	r0, [r0], -ip
    6bdc:	45179c05 	ldrmi	r9, [r7, #-3077]	; 0xfffff3fb
    6be0:	01000002 	tsteq	r0, r2
    6be4:	009b0c01 	addseq	r0, fp, r1, lsl #24
    6be8:	02630000 	rsbeq	r0, r3, #0
    6bec:	000d0000 	andeq	r0, sp, r0
    6bf0:	00025805 	andeq	r5, r2, r5, lsl #16
    6bf4:	03820a00 	orreq	r0, r2, #0, 20
    6bf8:	06060000 	streq	r0, [r6], -r0
    6bfc:	00026313 	andeq	r6, r2, r3, lsl r3
    6c00:	0a010100 	beq	47008 <__ccfg+0x27060>
    6c04:	00000123 	andeq	r0, r0, r3, lsr #2
    6c08:	b10ec304 	tstlt	lr, r4, lsl #6
    6c0c:	01000000 	mrseq	r0, (UNDEF: 0)
    6c10:	046d0e01 	strbteq	r0, [sp], #-3585	; 0xfffff1ff
    6c14:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    6c18:	02911001 	addseq	r1, r1, #1
    6c1c:	040b0000 	streq	r0, [fp], #-0
    6c20:	00000297 	muleq	r0, r7, r2
    6c24:	02a3010f 	adceq	r0, r3, #-1073741821	; 0xc0000003
    6c28:	8f100000 	svchi	0x00100000
    6c2c:	00000000 	andeq	r0, r0, r0
    6c30:	0001960c 	andeq	r9, r1, ip, lsl #12
    6c34:	0002ae00 	andeq	sl, r2, r0, lsl #28
    6c38:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    6c3c:	000002a3 	andeq	r0, r0, r3, lsr #5
    6c40:	00043311 	andeq	r3, r4, r1, lsl r3
    6c44:	017f0700 	cmneq	pc, r0, lsl #14
    6c48:	0002ae16 	andeq	sl, r2, r6, lsl lr
    6c4c:	11010100 	mrsne	r0, (UNDEF: 17)
    6c50:	0000037a 	andeq	r0, r0, sl, ror r3
    6c54:	14018207 	strne	r8, [r1], #-519	; 0xfffffdf9
    6c58:	000000bd 	strheq	r0, [r0], -sp
    6c5c:	58110101 	ldmdapl	r1, {r0, r8}
    6c60:	07000004 	streq	r0, [r0, -r4]
    6c64:	b10e02d8 	ldrdlt	r0, [lr, -r8]
    6c68:	01000000 	mrseq	r0, (UNDEF: 0)
    6c6c:	07081201 	streq	r1, [r8, -r1, lsl #4]
    6c70:	07090303 	streq	r0, [r9, -r3, lsl #6]
    6c74:	13000003 	movwne	r0, #3
    6c78:	000021e3 	andeq	r2, r0, r3, ror #3
    6c7c:	07030707 	streq	r0, [r3, -r7, lsl #14]
    6c80:	0000008f 	andeq	r0, r0, pc, lsl #1
    6c84:	052e1300 	streq	r1, [lr, #-768]!	; 0xfffffd00
    6c88:	08070000 	stmdaeq	r7, {}	; <UNPREDICTABLE>
    6c8c:	00c20803 	sbceq	r0, r2, r3, lsl #16
    6c90:	00040000 	andeq	r0, r4, r0
    6c94:	0002530e 	andeq	r5, r2, lr, lsl #6
    6c98:	03090700 	movweq	r0, #38656	; 0x9700
    6c9c:	0002e003 	andeq	lr, r2, r3
    6ca0:	047c1400 	ldrbteq	r1, [ip], #-1024	; 0xfffffc00
    6ca4:	07300000 	ldreq	r0, [r0, -r0]!
    6ca8:	7708030b 	strvc	r0, [r8, -fp, lsl #6]
    6cac:	13000003 	movwne	r0, #3
    6cb0:	00000475 	andeq	r0, r0, r5, ror r4
    6cb4:	08031407 	stmdaeq	r3, {r0, r1, r2, sl, ip}
    6cb8:	0000008f 	andeq	r0, r0, pc, lsl #1
    6cbc:	02cb1300 	sbceq	r1, fp, #0, 6
    6cc0:	15070000 	strne	r0, [r7, #-0]
    6cc4:	008f0803 	addeq	r0, pc, r3, lsl #16
    6cc8:	13020000 	movwne	r0, #8192	; 0x2000
    6ccc:	00000470 	andeq	r0, r0, r0, ror r4
    6cd0:	0b031607 	bleq	cc4f4 <__ccfg+0xac54c>
    6cd4:	00000284 	andeq	r0, r0, r4, lsl #5
    6cd8:	0f2e1304 	svceq	0x002e1304
    6cdc:	17070000 	strne	r0, [r7, -r0]
    6ce0:	00c20903 	sbceq	r0, r2, r3, lsl #18
    6ce4:	13080000 	movwne	r0, #32768	; 0x8000
    6ce8:	0000042c 	andeq	r0, r0, ip, lsr #8
    6cec:	0f031807 	svceq	0x00031807
    6cf0:	00000377 	andeq	r0, r0, r7, ror r3
    6cf4:	02c6130c 	sbceq	r1, r6, #12, 6	; 0x30000000
    6cf8:	19070000 	stmdbne	r7, {}	; <UNPREDICTABLE>
    6cfc:	03871503 	orreq	r1, r7, #12582912	; 0xc00000
    6d00:	002c0000 	eoreq	r0, ip, r0
    6d04:	0003070c 	andeq	r0, r3, ip, lsl #14
    6d08:	00038700 	andeq	r8, r3, r0, lsl #14
    6d0c:	00881500 	addeq	r1, r8, r0, lsl #10
    6d10:	00030000 	andeq	r0, r3, r0
    6d14:	0314040b 	tsteq	r4, #184549376	; 0xb000000
    6d18:	870e0000 	strhi	r0, [lr, -r0]
    6d1c:	07000004 	streq	r0, [r0, -r4]
    6d20:	141b031c 	ldrne	r0, [fp], #-796	; 0xfffffce4
    6d24:	11000003 	tstne	r0, r3
    6d28:	00000370 	andeq	r0, r0, r0, ror r3
    6d2c:	14031e07 	strne	r1, [r3], #-3591	; 0xfffff1f9
    6d30:	000003a9 	andeq	r0, r0, r9, lsr #7
    6d34:	040b0101 	streq	r0, [fp], #-257	; 0xfffffeff
    6d38:	0000038d 	andeq	r0, r0, sp, lsl #7
    6d3c:	14e60116 	strbtne	r0, [r6], #278	; 0x116
    6d40:	1d010000 	stcne	0, cr0, [r1, #-0]
    6d44:	16cc0101 	strbne	r0, [ip], r1, lsl #2
    6d48:	173c0000 	ldrne	r0, [ip, -r0]!
    6d4c:	9c010000 	stcls	0, cr0, [r1], {-0}
    6d50:	0000042a 	andeq	r0, r0, sl, lsr #8
    6d54:	0000b817 	andeq	fp, r0, r7, lsl r8
    6d58:	011d0100 	tsteq	sp, r0, lsl #2
    6d5c:	0000008f 	andeq	r0, r0, pc, lsl #1
    6d60:	000024a4 	andeq	r2, r0, r4, lsr #9
    6d64:	000f2e18 	andeq	r2, pc, r8, lsl lr	; <UNPREDICTABLE>
    6d68:	011d0100 	tsteq	sp, r0, lsl #2
    6d6c:	0000042a 	andeq	r0, r0, sl, lsr #8
    6d70:	000024cd 	andeq	r2, r0, sp, asr #9
    6d74:	0014f219 	andseq	pc, r4, r9, lsl r2	; <UNPREDICTABLE>
    6d78:	01300100 	teqeq	r0, r0, lsl #2
    6d7c:	000c201a 	andeq	r2, ip, sl, lsl r0
    6d80:	74701b00 	ldrbtvc	r1, [r0], #-2816	; 0xfffff500
    6d84:	22010072 	andcs	r0, r1, #114	; 0x72
    6d88:	00042a15 	andeq	r2, r4, r5, lsl sl
    6d8c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    6d90:	1b200000 	blne	806d98 <__ccfg+0x7e6df0>
    6d94:	006e656c 	rsbeq	r6, lr, ip, ror #10
    6d98:	810d2301 	tsthi	sp, r1, lsl #6
    6d9c:	05000000 	streq	r0, [r0, #-0]
    6da0:	00003803 	andeq	r3, r0, r3, lsl #16
    6da4:	14e01820 	strbtne	r1, [r0], #2080	; 0x820
    6da8:	24010000 	strcs	r0, [r1], #-0
    6dac:	00008106 	andeq	r8, r0, r6, lsl #2
    6db0:	0024f700 	eoreq	pc, r4, r0, lsl #14
    6db4:	0b000000 	bleq	6dbc <__exidx_end+0x413c>
    6db8:	00019604 	andeq	r9, r1, r4, lsl #12
    6dbc:	04400000 	strbeq	r0, [r0], #-0
    6dc0:	00030000 	andeq	r0, r3, r0
    6dc4:	00001f6e 	andeq	r1, r0, lr, ror #30
    6dc8:	015f0104 	cmpeq	pc, r4, lsl #2
    6dcc:	080c0000 	stmdaeq	ip, {}	; <UNPREDICTABLE>
    6dd0:	c0000015 	andgt	r0, r0, r5, lsl r0
    6dd4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    6dd8:	0000000c 	andeq	r0, r0, ip
    6ddc:	b7000000 	strlt	r0, [r0, -r0]
    6de0:	0200004e 	andeq	r0, r0, #78	; 0x4e
    6de4:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    6de8:	02020000 	andeq	r0, r2, #0
    6dec:	0003cc05 	andeq	ip, r3, r5, lsl #24
    6df0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    6df4:	0000009d 	muleq	r0, sp, r0
    6df8:	98050802 	stmdals	r5, {r1, fp}
    6dfc:	03000000 	movweq	r0, #0
    6e00:	000021eb 	andeq	r2, r0, fp, ror #3
    6e04:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    6e08:	02000000 	andeq	r0, r0, #0
    6e0c:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    6e10:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    6e14:	02000020 	andeq	r0, r0, #32
    6e18:	00601931 	rsbeq	r1, r0, r1, lsr r9
    6e1c:	02020000 	andeq	r0, r2, #0
    6e20:	00026007 	andeq	r6, r2, r7
    6e24:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    6e28:	34020000 	strcc	r0, [r2], #-0
    6e2c:	00007319 	andeq	r7, r0, r9, lsl r3
    6e30:	07040200 	streq	r0, [r4, -r0, lsl #4]
    6e34:	00000072 	andeq	r0, r0, r2, ror r0
    6e38:	6d070802 	stcvs	8, cr0, [r7, #-8]
    6e3c:	04000000 	streq	r0, [r0], #-0
    6e40:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    6e44:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    6e48:	00007707 	andeq	r7, r0, r7, lsl #14
    6e4c:	15af0300 	strne	r0, [pc, #768]!	; 7154 <__exidx_end+0x44d4>
    6e50:	27030000 	strcs	r0, [r3, -r0]
    6e54:	00005412 	andeq	r5, r0, r2, lsl r4
    6e58:	008f0500 	addeq	r0, pc, r0, lsl #10
    6e5c:	a7030000 	strge	r0, [r3, -r0]
    6e60:	03000013 	movweq	r0, #19
    6e64:	0041122b 	subeq	r1, r1, fp, lsr #4
    6e68:	a0060000 	andge	r0, r6, r0
    6e6c:	03000000 	movweq	r0, #0
    6e70:	00001600 	andeq	r1, r0, r0, lsl #12
    6e74:	67122c03 	ldrvs	r2, [r2, -r3, lsl #24]
    6e78:	05000000 	streq	r0, [r0, #-0]
    6e7c:	000000b1 	strheq	r0, [r0], -r1
    6e80:	00029603 	andeq	r9, r2, r3, lsl #12
    6e84:	122d0300 	eorne	r0, sp, #0, 6
    6e88:	00000067 	andeq	r0, r0, r7, rrx
    6e8c:	00075103 	andeq	r5, r7, r3, lsl #2
    6e90:	102e0300 	eorne	r0, lr, r0, lsl #6
    6e94:	000000da 	ldrdeq	r0, [r0], -sl
    6e98:	008f0407 	addeq	r0, pc, r7, lsl #8
    6e9c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    6ea0:	6e093203 	cdpvs	2, 0, cr3, cr9, cr3, {0}
    6ea4:	09000001 	stmdbeq	r0, {r0}
    6ea8:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    6eac:	a0073403 	andge	r3, r7, r3, lsl #8
    6eb0:	01000000 	mrseq	r0, (UNDEF: 0)
    6eb4:	09000701 	stmdbeq	r0, {r0, r8, r9, sl}
    6eb8:	00000091 	muleq	r0, r1, r0
    6ebc:	a0033503 	andge	r3, r3, r3, lsl #10
    6ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ec4:	09000601 	stmdbeq	r0, {r0, r9, sl}
    6ec8:	00000288 	andeq	r0, r0, r8, lsl #5
    6ecc:	a0033603 	andge	r3, r3, r3, lsl #12
    6ed0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ed4:	09000501 	stmdbeq	r0, {r0, r8, sl}
    6ed8:	000003fb 	strdeq	r0, [r0], -fp
    6edc:	a0033703 	andge	r3, r3, r3, lsl #14
    6ee0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ee4:	09000401 	stmdbeq	r0, {r0, sl}
    6ee8:	000003f4 	strdeq	r0, [r0], -r4
    6eec:	a0033803 	andge	r3, r3, r3, lsl #16
    6ef0:	01000000 	mrseq	r0, (UNDEF: 0)
    6ef4:	0a000004 	beq	6f0c <__exidx_end+0x428c>
    6ef8:	000003e5 	andeq	r0, r0, r5, ror #7
    6efc:	a0073a03 	andge	r3, r7, r3, lsl #20
    6f00:	01000000 	mrseq	r0, (UNDEF: 0)
    6f04:	0000400a 	andeq	r4, r0, sl
    6f08:	033c0300 	teqeq	ip, #0, 6
    6f0c:	000000a0 	andeq	r0, r0, r0, lsr #1
    6f10:	00660a02 	rsbeq	r0, r6, r2, lsl #20
    6f14:	3d030000 	stccc	0, cr0, [r3, #-0]
    6f18:	0000a003 	andeq	sl, r0, r3
    6f1c:	430a0300 	movwmi	r0, #41728	; 0xa300
    6f20:	03000001 	movweq	r0, #1
    6f24:	00b1083f 	adcseq	r0, r1, pc, lsr r8
    6f28:	00040000 	andeq	r0, r4, r0
    6f2c:	00042303 	andeq	r2, r4, r3, lsl #6
    6f30:	03410300 	movteq	r0, #4864	; 0x1300
    6f34:	000000e0 	andeq	r0, r0, r0, ror #1
    6f38:	00016e06 	andeq	r6, r1, r6, lsl #28
    6f3c:	02a50b00 	adceq	r0, r5, #0, 22
    6f40:	43030000 	movwmi	r0, #12288	; 0x3000
    6f44:	00017a1a 	andeq	r7, r1, sl, lsl sl
    6f48:	0b010100 	bleq	47350 <__ccfg+0x273a8>
    6f4c:	000002fc 	strdeq	r0, [r0], -ip
    6f50:	9b0e4503 	blls	398364 <__ccfg+0x3783bc>
    6f54:	01000001 	tsteq	r0, r1
    6f58:	a1040701 	tstge	r4, r1, lsl #14
    6f5c:	02000001 	andeq	r0, r0, #1
    6f60:	03990801 	orrseq	r0, r9, #65536	; 0x10000
    6f64:	a1050000 	mrsge	r0, (UNDEF: 5)
    6f68:	0b000001 	bleq	6f74 <__exidx_end+0x42f4>
    6f6c:	0000030a 	andeq	r0, r0, sl, lsl #6
    6f70:	9b1e4503 	blls	798384 <__ccfg+0x7783dc>
    6f74:	01000001 	tsteq	r0, r1
    6f78:	04080801 	streq	r0, [r8], #-2049	; 0xfffff7ff
    6f7c:	01ec098f 	mvneq	r0, pc, lsl #19
    6f80:	c10a0000 	mrsgt	r0, (UNDEF: 10)
    6f84:	04000002 	streq	r0, [r0], #-2
    6f88:	00670b90 	mlseq	r7, r0, fp, r0
    6f8c:	0a000000 	beq	6f94 <__exidx_end+0x4314>
    6f90:	000005dc 	ldrdeq	r0, [r0], -ip
    6f94:	8f089104 	svchi	0x00089104
    6f98:	04000000 	streq	r0, [r0], #-0
    6f9c:	0004600a 	andeq	r6, r4, sl
    6fa0:	10920400 	addsne	r0, r2, r0, lsl #8
    6fa4:	000000ac 	andeq	r0, r0, ip, lsr #1
    6fa8:	02030006 	andeq	r0, r3, #6
    6fac:	04000004 	streq	r0, [r0], #-4
    6fb0:	01bb0393 			; <UNDEFINED> instruction: 0x01bb0393
    6fb4:	ec0c0000 	stc	0, cr0, [ip], {-0}
    6fb8:	03000001 	movweq	r0, #1
    6fbc:	0d000002 	stceq	0, cr0, [r0, #-8]
    6fc0:	00360b00 	eorseq	r0, r6, r0, lsl #22
    6fc4:	99040000 	stmdbls	r4, {}	; <UNPREDICTABLE>
    6fc8:	0001f80f 	andeq	pc, r1, pc, lsl #16
    6fcc:	08010100 	stmdaeq	r1, {r8}
    6fd0:	09910501 	ldmibeq	r1, {r0, r8, sl}
    6fd4:	0000023b 	andeq	r0, r0, fp, lsr r2
    6fd8:	00045309 	andeq	r5, r4, r9, lsl #6
    6fdc:	07930500 	ldreq	r0, [r3, r0, lsl #10]
    6fe0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6fe4:	00010701 	andeq	r0, r1, r1, lsl #14
    6fe8:	00003109 	andeq	r3, r0, r9, lsl #2
    6fec:	03940500 	orrseq	r0, r4, #0, 10
    6ff0:	000000a0 	andeq	r0, r0, r0, lsr #1
    6ff4:	00000101 	andeq	r0, r0, r1, lsl #2
    6ff8:	02730300 	rsbseq	r0, r3, #0, 6
    6ffc:	96050000 	strls	r0, [r5], -r0
    7000:	00021103 	andeq	r1, r2, r3, lsl #2
    7004:	023b0500 	eorseq	r0, fp, #0, 10
    7008:	470c0000 	strmi	r0, [ip, -r0]
    700c:	57000002 	strpl	r0, [r0, -r2]
    7010:	0d000002 	stceq	0, cr0, [r0, #-8]
    7014:	024c0500 	subeq	r0, ip, #0, 10
    7018:	dc0b0000 	stcle	0, cr0, [fp], {-0}
    701c:	05000002 	streq	r0, [r0, #-2]
    7020:	0257179c 	subseq	r1, r7, #156, 14	; 0x2700000
    7024:	01010000 	mrseq	r0, (UNDEF: 1)
    7028:	00009b0c 	andeq	r9, r0, ip, lsl #22
    702c:	00027500 	andeq	r7, r2, r0, lsl #10
    7030:	05000d00 	streq	r0, [r0, #-3328]	; 0xfffff300
    7034:	0000026a 	andeq	r0, r0, sl, ror #4
    7038:	0003820b 	andeq	r8, r3, fp, lsl #4
    703c:	13060600 	movwne	r0, #26112	; 0x6600
    7040:	00000275 	andeq	r0, r0, r5, ror r2
    7044:	230b0101 	movwcs	r0, #45313	; 0xb101
    7048:	04000001 	streq	r0, [r0], #-1
    704c:	00b10ec3 	adcseq	r0, r1, r3, asr #29
    7050:	01010000 	mrseq	r0, (UNDEF: 1)
    7054:	00046d0e 	andeq	r6, r4, lr, lsl #26
    7058:	016e0700 	cmneq	lr, r0, lsl #14
    705c:	0002a310 	andeq	sl, r2, r0, lsl r3
    7060:	a9040700 	stmdbge	r4, {r8, r9, sl}
    7064:	0f000002 	svceq	0x00000002
    7068:	0002b501 	andeq	fp, r2, r1, lsl #10
    706c:	008f1000 	addeq	r1, pc, r0
    7070:	0c000000 	stceq	0, cr0, [r0], {-0}
    7074:	000001a8 	andeq	r0, r0, r8, lsr #3
    7078:	000002c0 	andeq	r0, r0, r0, asr #5
    707c:	b505000d 	strlt	r0, [r5, #-13]
    7080:	11000002 	tstne	r0, r2
    7084:	00000433 	andeq	r0, r0, r3, lsr r4
    7088:	16017f07 	strne	r7, [r1], -r7, lsl #30
    708c:	000002c0 	andeq	r0, r0, r0, asr #5
    7090:	7a110101 	bvc	44749c <__ccfg+0x4274f4>
    7094:	07000003 	streq	r0, [r0, -r3]
    7098:	bd140182 	ldflts	f0, [r4, #-520]	; 0xfffffdf8
    709c:	01000000 	mrseq	r0, (UNDEF: 0)
    70a0:	04581101 	ldrbeq	r1, [r8], #-257	; 0xfffffeff
    70a4:	d8070000 	stmdale	r7, {}	; <UNPREDICTABLE>
    70a8:	00b10e02 	adcseq	r0, r1, r2, lsl #28
    70ac:	01010000 	mrseq	r0, (UNDEF: 1)
    70b0:	03070812 	movweq	r0, #30738	; 0x7812
    70b4:	03190903 	tsteq	r9, #49152	; 0xc000
    70b8:	e3130000 	tst	r3, #0
    70bc:	07000021 	streq	r0, [r0, -r1, lsr #32]
    70c0:	8f070307 	svchi	0x00070307
    70c4:	00000000 	andeq	r0, r0, r0
    70c8:	00052e13 	andeq	r2, r5, r3, lsl lr
    70cc:	03080700 	movweq	r0, #34560	; 0x8700
    70d0:	0000c208 	andeq	ip, r0, r8, lsl #4
    70d4:	0e000400 	cfcpyseq	mvf0, mvf0
    70d8:	00000253 	andeq	r0, r0, r3, asr r2
    70dc:	03030907 	movweq	r0, #14599	; 0x3907
    70e0:	000002f2 	strdeq	r0, [r0], -r2
    70e4:	00047c14 	andeq	r7, r4, r4, lsl ip
    70e8:	0b073000 	bleq	1d30f0 <__ccfg+0x1b3148>
    70ec:	03890803 	orreq	r0, r9, #196608	; 0x30000
    70f0:	75130000 	ldrvc	r0, [r3, #-0]
    70f4:	07000004 	streq	r0, [r0, -r4]
    70f8:	8f080314 	svchi	0x00080314
    70fc:	00000000 	andeq	r0, r0, r0
    7100:	0002cb13 	andeq	ip, r2, r3, lsl fp
    7104:	03150700 	tsteq	r5, #0, 14
    7108:	00008f08 	andeq	r8, r0, r8, lsl #30
    710c:	70130200 	andsvc	r0, r3, r0, lsl #4
    7110:	07000004 	streq	r0, [r0, -r4]
    7114:	960b0316 			; <UNDEFINED> instruction: 0x960b0316
    7118:	04000002 	streq	r0, [r0], #-2
    711c:	000f2e13 	andeq	r2, pc, r3, lsl lr	; <UNPREDICTABLE>
    7120:	03170700 	tsteq	r7, #0, 14
    7124:	0000c209 	andeq	ip, r0, r9, lsl #4
    7128:	2c130800 	ldccs	8, cr0, [r3], {-0}
    712c:	07000004 	streq	r0, [r0, -r4]
    7130:	890f0318 	stmdbhi	pc, {r3, r4, r8, r9}	; <UNPREDICTABLE>
    7134:	0c000003 	stceq	0, cr0, [r0], {3}
    7138:	0002c613 	andeq	ip, r2, r3, lsl r6
    713c:	03190700 	tsteq	r9, #0, 14
    7140:	00039915 	andeq	r9, r3, r5, lsl r9
    7144:	0c002c00 	stceq	12, cr2, [r0], {-0}
    7148:	00000319 	andeq	r0, r0, r9, lsl r3
    714c:	00000399 	muleq	r0, r9, r3
    7150:	00008815 	andeq	r8, r0, r5, lsl r8
    7154:	07000300 	streq	r0, [r0, -r0, lsl #6]
    7158:	00032604 	andeq	r2, r3, r4, lsl #12
    715c:	04870e00 	streq	r0, [r7], #3584	; 0xe00
    7160:	1c070000 	stcne	0, cr0, [r7], {-0}
    7164:	03261b03 			; <UNDEFINED> instruction: 0x03261b03
    7168:	70110000 	andsvc	r0, r1, r0
    716c:	07000003 	streq	r0, [r0, -r3]
    7170:	bb14031e 	bllt	507df0 <__ccfg+0x4e7e48>
    7174:	01000003 	tsteq	r0, r3
    7178:	9f040701 	svcls	0x00040701
    717c:	16000003 	strne	r0, [r0], -r3
    7180:	000013b5 			; <UNDEFINED> instruction: 0x000013b5
    7184:	9b070d01 	blls	1ca590 <__ccfg+0x1aa5e8>
    7188:	01000001 	tsteq	r0, r1
    718c:	00400305 	subeq	r0, r0, r5, lsl #6
    7190:	01172000 	tsteq	r7, r0
    7194:	000014fd 	strdeq	r1, [r0], -sp
    7198:	01012301 	tsteq	r1, r1, lsl #6
    719c:	0000173c 	andeq	r1, r0, ip, lsr r7
    71a0:	00001858 	andeq	r1, r0, r8, asr r8
    71a4:	b8189c01 	ldmdalt	r8, {r0, sl, fp, ip, pc}
    71a8:	01000000 	mrseq	r0, (UNDEF: 0)
    71ac:	008f0123 	addeq	r0, pc, r3, lsr #2
    71b0:	250a0000 	strcs	r0, [sl, #-0]
    71b4:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    71b8:	0100000f 	tsteq	r0, pc
    71bc:	00ce0123 	sbceq	r0, lr, r3, lsr #2
    71c0:	25280000 	strcs	r0, [r8, #-0]!
    71c4:	481a0000 	ldmdami	sl, {}	; <UNPREDICTABLE>
    71c8:	1b00000c 	blne	7200 <__exidx_end+0x4580>
    71cc:	00727470 	rsbseq	r7, r2, r0, ror r4
    71d0:	9b0f2801 	blls	3d11dc <__ccfg+0x3b1234>
    71d4:	05000001 	streq	r0, [r0, #-1]
    71d8:	00004803 	andeq	r4, r0, r3, lsl #16
    71dc:	656c1b20 	strbvs	r1, [ip, #-2848]!	; 0xfffff4e0
    71e0:	2901006e 	stmdbcs	r1, {r1, r2, r3, r5, r6}
    71e4:	0000810d 	andeq	r8, r0, sp, lsl #2
    71e8:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
    71ec:	19200000 	stmdbne	r0!, {}	; <UNPREDICTABLE>
    71f0:	000014e0 	andeq	r1, r0, r0, ror #9
    71f4:	81062a01 	tsthi	r6, r1, lsl #20
    71f8:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    71fc:	00000025 	andeq	r0, r0, r5, lsr #32
    7200:	05f00000 	ldrbeq	r0, [r0, #0]!
    7204:	00030000 	andeq	r0, r3, r0
    7208:	000020e6 	andeq	r2, r0, r6, ror #1
    720c:	015f0104 	cmpeq	pc, r4, lsl #2
    7210:	4b0c0000 	blmi	307218 <__ccfg+0x2e7270>
    7214:	c0000015 	andgt	r0, r0, r5, lsl r0
    7218:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    721c:	0000000c 	andeq	r0, r0, ip
    7220:	06000000 	streq	r0, [r0], -r0
    7224:	02000051 	andeq	r0, r0, #81	; 0x51
    7228:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    722c:	02020000 	andeq	r0, r2, #0
    7230:	0003cc05 	andeq	ip, r3, r5, lsl #24
    7234:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    7238:	0000009d 	muleq	r0, sp, r0
    723c:	98050802 	stmdals	r5, {r1, fp}
    7240:	03000000 	movweq	r0, #0
    7244:	000021eb 	andeq	r2, r0, fp, ror #3
    7248:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    724c:	02000000 	andeq	r0, r0, #0
    7250:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    7254:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    7258:	02000020 	andeq	r0, r0, #32
    725c:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7260:	02020000 	andeq	r0, r2, #0
    7264:	00026007 	andeq	r6, r2, r7
    7268:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    726c:	34020000 	strcc	r0, [r2], #-0
    7270:	00007319 	andeq	r7, r0, r9, lsl r3
    7274:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7278:	00000072 	andeq	r0, r0, r2, ror r0
    727c:	6d070802 	stcvs	8, cr0, [r7, #-8]
    7280:	04000000 	streq	r0, [r0], #-0
    7284:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    7288:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    728c:	00007707 	andeq	r7, r0, r7, lsl #14
    7290:	0b350300 	bleq	d47e98 <__ccfg+0xd27ef0>
    7294:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    7298:	00009b1b 	andeq	r9, r0, fp, lsl fp
    729c:	0a4b0500 	beq	12c86a4 <__ccfg+0x12a86fc>
    72a0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    72a4:	0000b300 	andeq	fp, r0, r0, lsl #6
    72a8:	0beb0600 	bleq	ffac8ab0 <_estack+0xdfac3ab0>
    72ac:	00b30000 	adcseq	r0, r3, r0
    72b0:	01000000 	mrseq	r0, (UNDEF: 0)
    72b4:	03040700 	movweq	r0, #18176	; 0x4700
    72b8:	00000a4d 	andeq	r0, r0, sp, asr #20
    72bc:	8f186303 	svchi	0x00186303
    72c0:	03000000 	movweq	r0, #0
    72c4:	000015af 	andeq	r1, r0, pc, lsr #11
    72c8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    72cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    72d0:	000000c1 	andeq	r0, r0, r1, asr #1
    72d4:	0013a703 	andseq	sl, r3, r3, lsl #14
    72d8:	122b0400 	eorne	r0, fp, #0, 8
    72dc:	00000041 	andeq	r0, r0, r1, asr #32
    72e0:	0000d209 	andeq	sp, r0, r9, lsl #4
    72e4:	16000300 	strne	r0, [r0], -r0, lsl #6
    72e8:	2c040000 	stccs	0, cr0, [r4], {-0}
    72ec:	00006712 	andeq	r6, r0, r2, lsl r7
    72f0:	00e30800 	rsceq	r0, r3, r0, lsl #16
    72f4:	96030000 	strls	r0, [r3], -r0
    72f8:	04000002 	streq	r0, [r0], #-2
    72fc:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7300:	51030000 	mrspl	r0, (UNDEF: 3)
    7304:	04000007 	streq	r0, [r0], #-7
    7308:	010c102e 	tsteq	ip, lr, lsr #32
    730c:	040a0000 	streq	r0, [sl], #-0
    7310:	000000c1 	andeq	r0, r0, r1, asr #1
    7314:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    7318:	0001a009 	andeq	sl, r1, r9
    731c:	02b10c00 	adcseq	r0, r1, #0, 24
    7320:	34040000 	strcc	r0, [r4], #-0
    7324:	0000d207 	andeq	sp, r0, r7, lsl #4
    7328:	07010100 	streq	r0, [r1, -r0, lsl #2]
    732c:	00910c00 	addseq	r0, r1, r0, lsl #24
    7330:	35040000 	strcc	r0, [r4, #-0]
    7334:	0000d203 	andeq	sp, r0, r3, lsl #4
    7338:	06010100 	streq	r0, [r1], -r0, lsl #2
    733c:	02880c00 	addeq	r0, r8, #0, 24
    7340:	36040000 	strcc	r0, [r4], -r0
    7344:	0000d203 	andeq	sp, r0, r3, lsl #4
    7348:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    734c:	03fb0c00 	mvnseq	r0, #0, 24
    7350:	37040000 	strcc	r0, [r4, -r0]
    7354:	0000d203 	andeq	sp, r0, r3, lsl #4
    7358:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    735c:	03f40c00 	mvnseq	r0, #0, 24
    7360:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7364:	0000d203 	andeq	sp, r0, r3, lsl #4
    7368:	00040100 	andeq	r0, r4, r0, lsl #2
    736c:	03e50d00 	mvneq	r0, #0, 26
    7370:	3a040000 	bcc	107378 <__ccfg+0xe73d0>
    7374:	0000d207 	andeq	sp, r0, r7, lsl #4
    7378:	400d0100 	andmi	r0, sp, r0, lsl #2
    737c:	04000000 	streq	r0, [r0], #-0
    7380:	00d2033c 	sbcseq	r0, r2, ip, lsr r3
    7384:	0d020000 	stceq	0, cr0, [r2, #-0]
    7388:	00000066 	andeq	r0, r0, r6, rrx
    738c:	d2033d04 	andle	r3, r3, #4, 26	; 0x100
    7390:	03000000 	movweq	r0, #0
    7394:	0001430d 	andeq	r4, r1, sp, lsl #6
    7398:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    739c:	000000e3 	andeq	r0, r0, r3, ror #1
    73a0:	23030004 	movwcs	r0, #12292	; 0x3004
    73a4:	04000004 	streq	r0, [r0], #-4
    73a8:	01120341 	tsteq	r2, r1, asr #6
    73ac:	a0090000 	andge	r0, r9, r0
    73b0:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    73b4:	000002a5 	andeq	r0, r0, r5, lsr #5
    73b8:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    73bc:	01000001 	tsteq	r0, r1
    73c0:	02fc0e01 	rscseq	r0, ip, #1, 28
    73c4:	45040000 	strmi	r0, [r4, #-0]
    73c8:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    73cc:	0a010100 	beq	477d4 <__ccfg+0x2782c>
    73d0:	0001d304 	andeq	sp, r1, r4, lsl #6
    73d4:	08010200 	stmdaeq	r1, {r9}
    73d8:	00000399 	muleq	r0, r9, r3
    73dc:	0001d308 	andeq	sp, r1, r8, lsl #6
    73e0:	030a0e00 	movweq	r0, #44544	; 0xae00
    73e4:	45040000 	strmi	r0, [r4, #-0]
    73e8:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    73ec:	0b010100 	bleq	477f4 <__ccfg+0x2784c>
    73f0:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    73f4:	0000021e 	andeq	r0, r0, lr, lsl r2
    73f8:	0002c10d 	andeq	ip, r2, sp, lsl #2
    73fc:	0b900500 	bleq	fe408804 <_estack+0xde403804>
    7400:	00000067 	andeq	r0, r0, r7, rrx
    7404:	05dc0d00 	ldrbeq	r0, [ip, #3328]	; 0xd00
    7408:	91050000 	mrsls	r0, (UNDEF: 5)
    740c:	0000c108 	andeq	ip, r0, r8, lsl #2
    7410:	600d0400 	andvs	r0, sp, r0, lsl #8
    7414:	05000004 	streq	r0, [r0, #-4]
    7418:	00de1092 	smullseq	r1, lr, r2, r0
    741c:	00060000 	andeq	r0, r6, r0
    7420:	00040203 	andeq	r0, r4, r3, lsl #4
    7424:	03930500 	orrseq	r0, r3, #0, 10
    7428:	000001ed 	andeq	r0, r0, sp, ror #3
    742c:	00021e0f 	andeq	r1, r2, pc, lsl #28
    7430:	00023500 	andeq	r3, r2, r0, lsl #10
    7434:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    7438:	00000036 	andeq	r0, r0, r6, lsr r0
    743c:	2a0f9905 	bcs	3ed858 <__ccfg+0x3cd8b0>
    7440:	01000002 	tsteq	r0, r2
    7444:	06010b01 	streq	r0, [r1], -r1, lsl #22
    7448:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    744c:	530c0000 	movwpl	r0, #49152	; 0xc000
    7450:	06000004 	streq	r0, [r0], -r4
    7454:	00d20793 	smullseq	r0, r2, r3, r7
    7458:	07010000 	streq	r0, [r1, -r0]
    745c:	310c0001 	tstcc	ip, r1
    7460:	06000000 	streq	r0, [r0], -r0
    7464:	00d20394 	smullseq	r0, r2, r4, r3
    7468:	01010000 	mrseq	r0, (UNDEF: 1)
    746c:	03000000 	movweq	r0, #0
    7470:	00000273 	andeq	r0, r0, r3, ror r2
    7474:	43039606 	movwmi	r9, #13830	; 0x3606
    7478:	08000002 	stmdaeq	r0, {r1}
    747c:	0000026d 	andeq	r0, r0, sp, ror #4
    7480:	0002790f 	andeq	r7, r2, pc, lsl #18
    7484:	00028900 	andeq	r8, r2, r0, lsl #18
    7488:	08001000 	stmdaeq	r0, {ip}
    748c:	0000027e 	andeq	r0, r0, lr, ror r2
    7490:	0002dc0e 	andeq	sp, r2, lr, lsl #24
    7494:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7498:	00000289 	andeq	r0, r0, r9, lsl #5
    749c:	cd0f0101 	stfgts	f0, [pc, #-4]	; 74a0 <__exidx_end+0x4820>
    74a0:	a7000000 	strge	r0, [r0, -r0]
    74a4:	10000002 	andne	r0, r0, r2
    74a8:	029c0800 	addseq	r0, ip, #0, 16
    74ac:	820e0000 	andhi	r0, lr, #0
    74b0:	07000003 	streq	r0, [r0, -r3]
    74b4:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    74b8:	01010000 	mrseq	r0, (UNDEF: 1)
    74bc:	0001230e 	andeq	r2, r1, lr, lsl #6
    74c0:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    74c4:	000000e3 	andeq	r0, r0, r3, ror #1
    74c8:	6d110101 	ldfvss	f0, [r1, #-4]
    74cc:	08000004 	stmdaeq	r0, {r2}
    74d0:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    74d4:	0a000002 	beq	74e4 <__exidx_end+0x4864>
    74d8:	0002db04 	andeq	sp, r2, r4, lsl #22
    74dc:	e7011200 	str	r1, [r1, -r0, lsl #4]
    74e0:	13000002 	movwne	r0, #2
    74e4:	000000c1 	andeq	r0, r0, r1, asr #1
    74e8:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    74ec:	02f20000 	rscseq	r0, r2, #0
    74f0:	00100000 	andseq	r0, r0, r0
    74f4:	0002e708 	andeq	lr, r2, r8, lsl #14
    74f8:	04331400 	ldrteq	r1, [r3], #-1024	; 0xfffffc00
    74fc:	7f080000 	svcvc	0x00080000
    7500:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    7504:	01010000 	mrseq	r0, (UNDEF: 1)
    7508:	00037a14 	andeq	r7, r3, r4, lsl sl
    750c:	01820800 	orreq	r0, r2, r0, lsl #16
    7510:	0000ef14 	andeq	lr, r0, r4, lsl pc
    7514:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7518:	00000458 	andeq	r0, r0, r8, asr r4
    751c:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7520:	000000e3 	andeq	r0, r0, r3, ror #1
    7524:	08150101 	ldmdaeq	r5, {r0, r8}
    7528:	09030308 	stmdbeq	r3, {r3, r8, r9}
    752c:	0000034b 	andeq	r0, r0, fp, asr #6
    7530:	0021e316 	eoreq	lr, r1, r6, lsl r3
    7534:	03070800 	movweq	r0, #30720	; 0x7800
    7538:	0000c107 	andeq	ip, r0, r7, lsl #2
    753c:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    7540:	08000005 	stmdaeq	r0, {r0, r2}
    7544:	f4080308 	vst2.8	{d0-d3}, [r8], r8
    7548:	04000000 	streq	r0, [r0], #-0
    754c:	02531100 	subseq	r1, r3, #0, 2
    7550:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7554:	03240303 			; <UNDEFINED> instruction: 0x03240303
    7558:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    755c:	30000004 	andcc	r0, r0, r4
    7560:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7564:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7568:	00047516 	andeq	r7, r4, r6, lsl r5
    756c:	03140800 	tsteq	r4, #0, 16
    7570:	0000c108 	andeq	ip, r0, r8, lsl #2
    7574:	cb160000 	blgt	58757c <__ccfg+0x5675d4>
    7578:	08000002 	stmdaeq	r0, {r1}
    757c:	c1080315 	tstgt	r8, r5, lsl r3
    7580:	02000000 	andeq	r0, r0, #0
    7584:	00047016 	andeq	r7, r4, r6, lsl r0
    7588:	03160800 	tsteq	r6, #0, 16
    758c:	0002c80b 	andeq	ip, r2, fp, lsl #16
    7590:	2e160400 	cfmulscs	mvf0, mvf6, mvf0
    7594:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7598:	f4090317 	vst2.8	{d0-d3}, [r9 :64], r7
    759c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    75a0:	00042c16 	andeq	r2, r4, r6, lsl ip
    75a4:	03180800 	tsteq	r8, #0, 16
    75a8:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    75ac:	c6160c00 	ldrgt	r0, [r6], -r0, lsl #24
    75b0:	08000002 	stmdaeq	r0, {r1}
    75b4:	cb150319 	blgt	548220 <__ccfg+0x528278>
    75b8:	2c000003 	stccs	0, cr0, [r0], {3}
    75bc:	034b0f00 	movteq	r0, #48896	; 0xbf00
    75c0:	03cb0000 	biceq	r0, fp, #0
    75c4:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    75c8:	03000000 	movweq	r0, #0
    75cc:	58040a00 	stmdapl	r4, {r9, fp}
    75d0:	11000003 	tstne	r0, r3
    75d4:	00000487 	andeq	r0, r0, r7, lsl #9
    75d8:	1b031c08 	blne	ce600 <__ccfg+0xae658>
    75dc:	00000358 	andeq	r0, r0, r8, asr r3
    75e0:	00037014 	andeq	r7, r3, r4, lsl r0
    75e4:	031e0800 	tsteq	lr, #0, 16
    75e8:	0003ed14 	andeq	lr, r3, r4, lsl sp
    75ec:	0a010100 	beq	479f4 <__ccfg+0x27a4c>
    75f0:	0003d104 	andeq	sp, r3, r4, lsl #2
    75f4:	a1011900 	tstge	r1, r0, lsl #18
    75f8:	01000015 	tsteq	r0, r5, lsl r0
    75fc:	cd010791 	stcgt	7, cr0, [r1, #-580]	; 0xfffffdbc
    7600:	a8000001 	stmdage	r0, {r0}
    7604:	f800001a 			; <UNDEFINED> instruction: 0xf800001a
    7608:	0100001a 	tsteq	r0, sl, lsl r0
    760c:	0004689c 	muleq	r4, ip, r8
    7610:	65721a00 	ldrbvs	r1, [r2, #-2560]!	; 0xfffff600
    7614:	91010073 	tstls	r1, r3, ror r0
    7618:	0001cd14 	andeq	ip, r1, r4, lsl sp
    761c:	00259c00 	eoreq	r9, r5, r0, lsl #24
    7620:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7624:	25910100 	ldrcs	r0, [r1, #256]	; 0x100
    7628:	00000468 	andeq	r0, r0, r8, ror #8
    762c:	000025e6 	andeq	r2, r0, r6, ror #11
    7630:	0071611a 	rsbseq	r6, r1, sl, lsl r1
    7634:	b5319101 	ldrlt	r9, [r1, #-257]!	; 0xfffffeff
    7638:	25000000 	strcs	r0, [r0, #-0]
    763c:	1b000026 	blne	76dc <__exidx_end+0x4a5c>
    7640:	006c6d66 	rsbeq	r6, ip, r6, ror #26
    7644:	c1079301 	tstgt	r7, r1, lsl #6
    7648:	59000000 	stmdbpl	r0, {}	; <UNPREDICTABLE>
    764c:	1b000026 	blne	76ec <__exidx_end+0x4a6c>
    7650:	93010064 	movwls	r0, #4196	; 0x1064
    7654:	0000c10c 	andeq	ip, r0, ip, lsl #2
    7658:	00267700 	eoreq	r7, r6, r0, lsl #14
    765c:	15891c00 	strne	r1, [r9, #3072]	; 0xc00
    7660:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    7664:	001ad201 	andseq	sp, sl, r1, lsl #4
    7668:	040a0000 	streq	r0, [sl], #-0
    766c:	000001da 	ldrdeq	r0, [r0], -sl
    7670:	1594011d 	ldrne	r0, [r4, #285]	; 0x11d
    7674:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    7678:	00c10106 	sbceq	r0, r1, r6, lsl #2
    767c:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    7680:	1aa80000 	bne	fea07688 <_estack+0xdea02688>
    7684:	9c010000 	stcls	0, cr0, [r1], {-0}
    7688:	7365721a 	cmnvc	r5, #-1610612735	; 0xa0000001
    768c:	1a080100 	bne	207a94 <__ccfg+0x1e7aec>
    7690:	000001cd 	andeq	r0, r0, sp, asr #3
    7694:	0000268a 	andeq	r2, r0, sl, lsl #13
    7698:	01006e1a 	tsteq	r0, sl, lsl lr
    769c:	00c12408 	sbceq	r2, r1, r8, lsl #8
    76a0:	269d0000 	ldrcs	r0, [sp], r0
    76a4:	661a0000 	ldrvs	r0, [sl], -r0
    76a8:	0801006d 	stmdaeq	r1, {r0, r2, r3, r5, r6}
    76ac:	00046833 	andeq	r6, r4, r3, lsr r8
    76b0:	0026b000 	eoreq	fp, r6, r0
    76b4:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    76b8:	3f080100 	svccc	0x00080100
    76bc:	000000b5 	strheq	r0, [r0], -r5
    76c0:	000026d9 	ldrdeq	r2, [r0], -r9
    76c4:	0100631b 	tsteq	r0, fp, lsl r3
    76c8:	01d3070a 	bicseq	r0, r3, sl, lsl #14
    76cc:	277b0000 	ldrbcs	r0, [fp, -r0]!
    76d0:	641e0000 	ldrvs	r0, [lr], #-0
    76d4:	070b0100 	streq	r0, [fp, -r0, lsl #2]
    76d8:	000000c1 	andeq	r0, r0, r1, asr #1
    76dc:	23549104 	cmpcs	r4, #4, 2
    76e0:	158f1f06 	strne	r1, [pc, #3846]	; 85ee <__exidx_end+0x596e>
    76e4:	0d010000 	stceq	0, cr0, [r1, #-0]
    76e8:	18580107 	ldmdane	r8, {r0, r1, r2, r8}^
    76ec:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    76f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    76f4:	23007c05 	movwcs	r7, #3077	; 0xc05
    76f8:	05090608 	streq	r0, [r9, #-1544]	; 0xfffff9f8
    76fc:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    7700:	120d0100 	andne	r0, sp, #0, 2
    7704:	000000c1 	andeq	r0, r0, r1, asr #1
    7708:	21005001 	tstcs	r0, r1
    770c:	006c6f45 	rsbeq	r6, ip, r5, asr #30
    7710:	b2018801 	andlt	r8, r1, #65536	; 0x10000
    7714:	21000018 	tstcs	r0, r8, lsl r0
    7718:	00746552 	rsbseq	r6, r4, r2, asr r5
    771c:	14018b01 	strne	r8, [r1], #-2817	; 0xfffff4ff
    7720:	22000019 	andcs	r0, r0, #25
    7724:	00000ca0 	andeq	r0, r0, r0, lsr #25
    7728:	00000545 	andeq	r0, r0, r5, asr #10
    772c:	6c617623 	stclvs	6, cr7, [r1], #-140	; 0xffffff74
    7730:	0a3a0100 	beq	e87b38 <__ccfg+0xe67b90>
    7734:	000000c1 	andeq	r0, r0, r1, asr #1
    7738:	0100691b 	tsteq	r0, fp, lsl r9
    773c:	0081133a 	addeq	r1, r1, sl, lsr r3
    7740:	28610000 	stmdacs	r1!, {}^	; <UNPREDICTABLE>
    7744:	22000000 	andcs	r0, r0, #0
    7748:	00000c78 	andeq	r0, r0, r8, ror ip
    774c:	0000056d 	andeq	r0, r0, sp, ror #10
    7750:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    7754:	0a460100 	beq	1187b5c <__ccfg+0x1167bb4>
    7758:	000000c1 	andeq	r0, r0, r1, asr #1
    775c:	00002874 	andeq	r2, r0, r4, ror r8
    7760:	0100691b 	tsteq	r0, fp, lsl r9
    7764:	00c10f46 	sbceq	r0, r1, r6, asr #30
    7768:	289d0000 	ldmcs	sp, {}	; <UNPREDICTABLE>
    776c:	22000000 	andcs	r0, r0, #0
    7770:	00000cd8 	ldrdeq	r0, [r0], -r8
    7774:	00000595 	muleq	r0, r5, r5
    7778:	6c61761b 	stclvs	6, cr7, [r1], #-108	; 0xffffff94
    777c:	0c550100 	ldfeqe	f0, [r5], {-0}
    7780:	000000e3 	andeq	r0, r0, r3, ror #1
    7784:	000028c6 	andeq	r2, r0, r6, asr #17
    7788:	0100691b 	tsteq	r0, fp, lsl r9
    778c:	00e31155 	rsceq	r1, r3, r5, asr r1
    7790:	28d90000 	ldmcs	r9, {}^	; <UNPREDICTABLE>
    7794:	24000000 	strcs	r0, [r0], #-0
    7798:	00001a36 	andeq	r1, r0, r6, lsr sl
    779c:	00001a60 	andeq	r1, r0, r0, ror #20
    77a0:	000005bf 			; <UNDEFINED> instruction: 0x000005bf
    77a4:	6c61761e 	stclvs	6, cr7, [r1], #-120	; 0xffffff88
    77a8:	0c600100 	stfeqe	f0, [r0], #-0
    77ac:	000000e3 	andeq	r0, r0, r3, ror #1
    77b0:	691b5901 	ldmdbvs	fp, {r0, r8, fp, ip, lr}
    77b4:	0a610100 	beq	1847bbc <__ccfg+0x1827c14>
    77b8:	00000081 	andeq	r0, r0, r1, lsl #1
    77bc:	00002902 	andeq	r2, r0, r2, lsl #18
    77c0:	0cc02200 	sfmeq	f2, 2, [r0], {0}
    77c4:	05d90000 	ldrbeq	r0, [r9]
    77c8:	761b0000 	ldrvc	r0, [fp], -r0
    77cc:	01006c61 	tsteq	r0, r1, ror #24
    77d0:	00c10a71 	sbceq	r0, r1, r1, ror sl
    77d4:	29150000 	ldmdbcs	r5, {}	; <UNPREDICTABLE>
    77d8:	25000000 	strcs	r0, [r0, #-0]
    77dc:	00001a7e 	andeq	r1, r0, lr, ror sl
    77e0:	00001a9a 	muleq	r0, sl, sl
    77e4:	0074731b 	rsbseq	r7, r4, fp, lsl r3
    77e8:	cd0b7801 	stcgt	8, cr7, [fp, #-4]
    77ec:	35000001 	strcc	r0, [r0, #-1]
    77f0:	00000029 	andeq	r0, r0, r9, lsr #32
    77f4:	058f0000 	streq	r0, [pc]	; 77fc <__exidx_end+0x4b7c>
    77f8:	00030000 	andeq	r0, r3, r0
    77fc:	000022f8 	strdeq	r2, [r0], -r8
    7800:	015f0104 	cmpeq	pc, r4, lsl #2
    7804:	b40c0000 	strlt	r0, [ip], #-0
    7808:	c0000015 	andgt	r0, r0, r5, lsl r0
    780c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    7810:	0000000d 	andeq	r0, r0, sp
    7814:	c7000000 	strgt	r0, [r0, -r0]
    7818:	02000054 	andeq	r0, r0, #84	; 0x54
    781c:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    7820:	02020000 	andeq	r0, r2, #0
    7824:	0003cc05 	andeq	ip, r3, r5, lsl #24
    7828:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    782c:	0000009d 	muleq	r0, sp, r0
    7830:	98050802 	stmdals	r5, {r1, fp}
    7834:	03000000 	movweq	r0, #0
    7838:	000021eb 	andeq	r2, r0, fp, ror #3
    783c:	4d182e02 	ldcmi	14, cr2, [r8, #-8]
    7840:	02000000 	andeq	r0, r0, #0
    7844:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    7848:	d9030000 	stmdble	r3, {}	; <UNPREDICTABLE>
    784c:	02000020 	andeq	r0, r0, #32
    7850:	00601931 	rsbeq	r1, r0, r1, lsr r9
    7854:	02020000 	andeq	r0, r2, #0
    7858:	00026007 	andeq	r6, r2, r7
    785c:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    7860:	34020000 	strcc	r0, [r2], #-0
    7864:	00007319 	andeq	r7, r0, r9, lsl r3
    7868:	07040200 	streq	r0, [r4, -r0, lsl #4]
    786c:	00000072 	andeq	r0, r0, r2, ror r0
    7870:	6d070802 	stcvs	8, cr0, [r7, #-8]
    7874:	04000000 	streq	r0, [r0], #-0
    7878:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    787c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    7880:	00007707 	andeq	r7, r0, r7, lsl #14
    7884:	0b350300 	bleq	d4848c <__ccfg+0xd284e4>
    7888:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    788c:	00009b1b 	andeq	r9, r0, fp, lsl fp
    7890:	0a4b0500 	beq	12c8c98 <__ccfg+0x12a8cf0>
    7894:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    7898:	0000b300 	andeq	fp, r0, r0, lsl #6
    789c:	0beb0600 	bleq	ffac90a4 <_estack+0xdfac40a4>
    78a0:	00b30000 	adcseq	r0, r3, r0
    78a4:	01000000 	mrseq	r0, (UNDEF: 0)
    78a8:	03040700 	movweq	r0, #18176	; 0x4700
    78ac:	00000a4d 	andeq	r0, r0, sp, asr #20
    78b0:	8f186303 	svchi	0x00186303
    78b4:	03000000 	movweq	r0, #0
    78b8:	000003ec 	andeq	r0, r0, ip, ror #7
    78bc:	41122604 	tstmi	r2, r4, lsl #12
    78c0:	03000000 	movweq	r0, #0
    78c4:	000015af 	andeq	r1, r0, pc, lsr #11
    78c8:	54122704 	ldrpl	r2, [r2], #-1796	; 0xfffff8fc
    78cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    78d0:	000000cd 	andeq	r0, r0, sp, asr #1
    78d4:	0013a703 	andseq	sl, r3, r3, lsl #14
    78d8:	122b0400 	eorne	r0, fp, #0, 8
    78dc:	00000041 	andeq	r0, r0, r1, asr #32
    78e0:	0000de09 	andeq	sp, r0, r9, lsl #28
    78e4:	16000300 	strne	r0, [r0], -r0, lsl #6
    78e8:	2c040000 	stccs	0, cr0, [r4], {-0}
    78ec:	00006712 	andeq	r6, r0, r2, lsl r7
    78f0:	00ef0800 	rsceq	r0, pc, r0, lsl #16
    78f4:	96030000 	strls	r0, [r3], -r0
    78f8:	04000002 	streq	r0, [r0], #-2
    78fc:	0067122d 	rsbeq	r1, r7, sp, lsr #4
    7900:	040a0000 	streq	r0, [sl], #-0
    7904:	000000cd 	andeq	r0, r0, sp, asr #1
    7908:	3204080b 	andcc	r0, r4, #720896	; 0xb0000
    790c:	0001a009 	andeq	sl, r1, r9
    7910:	02b10c00 	adcseq	r0, r1, #0, 24
    7914:	34040000 	strcc	r0, [r4], #-0
    7918:	0000de07 	andeq	sp, r0, r7, lsl #28
    791c:	07010100 	streq	r0, [r1, -r0, lsl #2]
    7920:	00910c00 	addseq	r0, r1, r0, lsl #24
    7924:	35040000 	strcc	r0, [r4, #-0]
    7928:	0000de03 	andeq	sp, r0, r3, lsl #28
    792c:	06010100 	streq	r0, [r1], -r0, lsl #2
    7930:	02880c00 	addeq	r0, r8, #0, 24
    7934:	36040000 	strcc	r0, [r4], -r0
    7938:	0000de03 	andeq	sp, r0, r3, lsl #28
    793c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    7940:	03fb0c00 	mvnseq	r0, #0, 24
    7944:	37040000 	strcc	r0, [r4, -r0]
    7948:	0000de03 	andeq	sp, r0, r3, lsl #28
    794c:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    7950:	03f40c00 	mvnseq	r0, #0, 24
    7954:	38040000 	stmdacc	r4, {}	; <UNPREDICTABLE>
    7958:	0000de03 	andeq	sp, r0, r3, lsl #28
    795c:	00040100 	andeq	r0, r4, r0, lsl #2
    7960:	03e50d00 	mvneq	r0, #0, 26
    7964:	3a040000 	bcc	10796c <__ccfg+0xe79c4>
    7968:	0000de07 	andeq	sp, r0, r7, lsl #28
    796c:	400d0100 	andmi	r0, sp, r0, lsl #2
    7970:	04000000 	streq	r0, [r0], #-0
    7974:	00de033c 	sbcseq	r0, lr, ip, lsr r3
    7978:	0d020000 	stceq	0, cr0, [r2, #-0]
    797c:	00000066 	andeq	r0, r0, r6, rrx
    7980:	de033d04 	cdple	13, 0, cr3, cr3, cr4, {0}
    7984:	03000000 	movweq	r0, #0
    7988:	0001430d 	andeq	r4, r1, sp, lsl #6
    798c:	083f0400 	ldmdaeq	pc!, {sl}	; <UNPREDICTABLE>
    7990:	000000ef 	andeq	r0, r0, pc, ror #1
    7994:	23030004 	movwcs	r0, #12292	; 0x3004
    7998:	04000004 	streq	r0, [r0], #-4
    799c:	01120341 	tsteq	r2, r1, asr #6
    79a0:	a0090000 	andge	r0, r9, r0
    79a4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    79a8:	000002a5 	andeq	r0, r0, r5, lsr #5
    79ac:	ac1a4304 	ldcge	3, cr4, [sl], {4}
    79b0:	01000001 	tsteq	r0, r1
    79b4:	02fc0e01 	rscseq	r0, ip, #1, 28
    79b8:	45040000 	strmi	r0, [r4, #-0]
    79bc:	0001cd0e 	andeq	ip, r1, lr, lsl #26
    79c0:	0a010100 	beq	47dc8 <__ccfg+0x27e20>
    79c4:	0001d304 	andeq	sp, r1, r4, lsl #6
    79c8:	08010200 	stmdaeq	r1, {r9}
    79cc:	00000399 	muleq	r0, r9, r3
    79d0:	0001d308 	andeq	sp, r1, r8, lsl #6
    79d4:	030a0e00 	movweq	r0, #44544	; 0xae00
    79d8:	45040000 	strmi	r0, [r4, #-0]
    79dc:	0001cd1e 	andeq	ip, r1, lr, lsl sp
    79e0:	0b010100 	bleq	47de8 <__ccfg+0x27e40>
    79e4:	098f0508 	stmibeq	pc, {r3, r8, sl}	; <UNPREDICTABLE>
    79e8:	0000021e 	andeq	r0, r0, lr, lsl r2
    79ec:	0002c10d 	andeq	ip, r2, sp, lsl #2
    79f0:	0b900500 	bleq	fe408df8 <_estack+0xde403df8>
    79f4:	00000067 	andeq	r0, r0, r7, rrx
    79f8:	05dc0d00 	ldrbeq	r0, [ip, #3328]	; 0xd00
    79fc:	91050000 	mrsls	r0, (UNDEF: 5)
    7a00:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7a04:	600d0400 	andvs	r0, sp, r0, lsl #8
    7a08:	05000004 	streq	r0, [r0, #-4]
    7a0c:	00ea1092 	smlaleq	r1, sl, r2, r0
    7a10:	00060000 	andeq	r0, r6, r0
    7a14:	00040203 	andeq	r0, r4, r3, lsl #4
    7a18:	03930500 	orrseq	r0, r3, #0, 10
    7a1c:	000001ed 	andeq	r0, r0, sp, ror #3
    7a20:	00021e0f 	andeq	r1, r2, pc, lsl #28
    7a24:	00023500 	andeq	r3, r2, r0, lsl #10
    7a28:	0e001000 	cdpeq	0, 0, cr1, cr0, cr0, {0}
    7a2c:	00000036 	andeq	r0, r0, r6, lsr r0
    7a30:	2a0f9905 	bcs	3ede4c <__ccfg+0x3cdea4>
    7a34:	01000002 	tsteq	r0, r2
    7a38:	06010b01 	streq	r0, [r1], -r1, lsl #22
    7a3c:	026d0991 	rsbeq	r0, sp, #2375680	; 0x244000
    7a40:	530c0000 	movwpl	r0, #49152	; 0xc000
    7a44:	06000004 	streq	r0, [r0], -r4
    7a48:	00de0793 	smullseq	r0, lr, r3, r7
    7a4c:	07010000 	streq	r0, [r1, -r0]
    7a50:	310c0001 	tstcc	ip, r1
    7a54:	06000000 	streq	r0, [r0], -r0
    7a58:	00de0394 	smullseq	r0, lr, r4, r3
    7a5c:	01010000 	mrseq	r0, (UNDEF: 1)
    7a60:	03000000 	movweq	r0, #0
    7a64:	00000273 	andeq	r0, r0, r3, ror r2
    7a68:	43039606 	movwmi	r9, #13830	; 0x3606
    7a6c:	08000002 	stmdaeq	r0, {r1}
    7a70:	0000026d 	andeq	r0, r0, sp, ror #4
    7a74:	0002790f 	andeq	r7, r2, pc, lsl #18
    7a78:	00028900 	andeq	r8, r2, r0, lsl #18
    7a7c:	08001000 	stmdaeq	r0, {ip}
    7a80:	0000027e 	andeq	r0, r0, lr, ror r2
    7a84:	0002dc0e 	andeq	sp, r2, lr, lsl #24
    7a88:	179c0600 	ldrne	r0, [ip, r0, lsl #12]
    7a8c:	00000289 	andeq	r0, r0, r9, lsl #5
    7a90:	d90f0101 	stmdble	pc, {r0, r8}	; <UNPREDICTABLE>
    7a94:	a7000000 	strge	r0, [r0, -r0]
    7a98:	10000002 	andne	r0, r0, r2
    7a9c:	029c0800 	addseq	r0, ip, #0, 16
    7aa0:	820e0000 	andhi	r0, lr, #0
    7aa4:	07000003 	streq	r0, [r0, -r3]
    7aa8:	02a71306 	adceq	r1, r7, #402653184	; 0x18000000
    7aac:	01010000 	mrseq	r0, (UNDEF: 1)
    7ab0:	0001230e 	andeq	r2, r1, lr, lsl #6
    7ab4:	0ec30500 	cdpeq	5, 12, cr0, cr3, cr0, {0}
    7ab8:	000000ef 	andeq	r0, r0, pc, ror #1
    7abc:	6d110101 	ldfvss	f0, [r1, #-4]
    7ac0:	08000004 	stmdaeq	r0, {r2}
    7ac4:	d510016e 	ldrle	r0, [r0, #-366]	; 0xfffffe92
    7ac8:	0a000002 	beq	7ad8 <__exidx_end+0x4e58>
    7acc:	0002db04 	andeq	sp, r2, r4, lsl #22
    7ad0:	e7011200 	str	r1, [r1, -r0, lsl #4]
    7ad4:	13000002 	movwne	r0, #2
    7ad8:	000000cd 	andeq	r0, r0, sp, asr #1
    7adc:	01da0f00 	bicseq	r0, sl, r0, lsl #30
    7ae0:	02f20000 	rscseq	r0, r2, #0
    7ae4:	00100000 	andseq	r0, r0, r0
    7ae8:	0002e708 	andeq	lr, r2, r8, lsl #14
    7aec:	04331400 	ldrteq	r1, [r3], #-1024	; 0xfffffc00
    7af0:	7f080000 	svcvc	0x00080000
    7af4:	02f21601 	rscseq	r1, r2, #1048576	; 0x100000
    7af8:	01010000 	mrseq	r0, (UNDEF: 1)
    7afc:	00037a14 	andeq	r7, r3, r4, lsl sl
    7b00:	01820800 	orreq	r0, r2, r0, lsl #16
    7b04:	0000fb14 	andeq	pc, r0, r4, lsl fp	; <UNPREDICTABLE>
    7b08:	14010100 	strne	r0, [r1], #-256	; 0xffffff00
    7b0c:	00000458 	andeq	r0, r0, r8, asr r4
    7b10:	0e02d808 	cdpeq	8, 0, cr13, cr2, cr8, {0}
    7b14:	000000ef 	andeq	r0, r0, pc, ror #1
    7b18:	08150101 	ldmdaeq	r5, {r0, r8}
    7b1c:	09030308 	stmdbeq	r3, {r3, r8, r9}
    7b20:	0000034b 	andeq	r0, r0, fp, asr #6
    7b24:	0021e316 	eoreq	lr, r1, r6, lsl r3
    7b28:	03070800 	movweq	r0, #30720	; 0x7800
    7b2c:	0000cd07 	andeq	ip, r0, r7, lsl #26
    7b30:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
    7b34:	08000005 	stmdaeq	r0, {r0, r2}
    7b38:	00080308 	andeq	r0, r8, r8, lsl #6
    7b3c:	04000001 	streq	r0, [r0], #-1
    7b40:	02531100 	subseq	r1, r3, #0, 2
    7b44:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    7b48:	03240303 			; <UNDEFINED> instruction: 0x03240303
    7b4c:	7c170000 	ldcvc	0, cr0, [r7], {-0}
    7b50:	30000004 	andcc	r0, r0, r4
    7b54:	08030b08 	stmdaeq	r3, {r3, r8, r9, fp}
    7b58:	000003bb 			; <UNDEFINED> instruction: 0x000003bb
    7b5c:	00047516 	andeq	r7, r4, r6, lsl r5
    7b60:	03140800 	tsteq	r4, #0, 16
    7b64:	0000cd08 	andeq	ip, r0, r8, lsl #26
    7b68:	cb160000 	blgt	587b70 <__ccfg+0x567bc8>
    7b6c:	08000002 	stmdaeq	r0, {r1}
    7b70:	cd080315 	stcgt	3, cr0, [r8, #-84]	; 0xffffffac
    7b74:	02000000 	andeq	r0, r0, #0
    7b78:	00047016 	andeq	r7, r4, r6, lsl r0
    7b7c:	03160800 	tsteq	r6, #0, 16
    7b80:	0002c80b 	andeq	ip, r2, fp, lsl #16
    7b84:	2e160400 	cfmulscs	mvf0, mvf6, mvf0
    7b88:	0800000f 	stmdaeq	r0, {r0, r1, r2, r3}
    7b8c:	00090317 	andeq	r0, r9, r7, lsl r3
    7b90:	08000001 	stmdaeq	r0, {r0}
    7b94:	00042c16 	andeq	r2, r4, r6, lsl ip
    7b98:	03180800 	tsteq	r8, #0, 16
    7b9c:	0003bb0f 	andeq	fp, r3, pc, lsl #22
    7ba0:	c6160c00 	ldrgt	r0, [r6], -r0, lsl #24
    7ba4:	08000002 	stmdaeq	r0, {r1}
    7ba8:	cb150319 	blgt	548814 <__ccfg+0x52886c>
    7bac:	2c000003 	stccs	0, cr0, [r0], {3}
    7bb0:	034b0f00 	movteq	r0, #48896	; 0xbf00
    7bb4:	03cb0000 	biceq	r0, fp, #0
    7bb8:	88180000 	ldmdahi	r8, {}	; <UNPREDICTABLE>
    7bbc:	03000000 	movweq	r0, #0
    7bc0:	58040a00 	stmdapl	r4, {r9, fp}
    7bc4:	11000003 	tstne	r0, r3
    7bc8:	00000487 	andeq	r0, r0, r7, lsl #9
    7bcc:	1b031c08 	blne	cebf4 <__ccfg+0xaec4c>
    7bd0:	00000358 	andeq	r0, r0, r8, asr r3
    7bd4:	00037014 	andeq	r7, r3, r4, lsl r0
    7bd8:	031e0800 	tsteq	lr, #0, 16
    7bdc:	0003ed14 	andeq	lr, r3, r4, lsl sp
    7be0:	0a010100 	beq	47fe8 <__ccfg+0x28040>
    7be4:	0003d104 	andeq	sp, r3, r4, lsl #2
    7be8:	f2011900 	vmla.i8	d1, d1, d0
    7bec:	01000015 	tsteq	r0, r5, lsl r0
    7bf0:	81010508 	tsthi	r1, r8, lsl #10
    7bf4:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    7bf8:	8800001a 	stmdahi	r0, {r1, r3, r4}
    7bfc:	0100001e 	tsteq	r0, lr, lsl r0
    7c00:	0005869c 	muleq	r5, ip, r6
    7c04:	75621a00 	strbvc	r1, [r2, #-2560]!	; 0xfffff600
    7c08:	08010066 	stmdaeq	r1, {r1, r2, r5, r6}
    7c0c:	00058618 	andeq	r8, r5, r8, lsl r6
    7c10:	00294800 	eoreq	r4, r9, r0, lsl #16
    7c14:	6d661a00 	vstmdbvs	r6!, {s3-s2}
    7c18:	08010074 	stmdaeq	r1, {r2, r4, r5, r6}
    7c1c:	00058629 	andeq	r8, r5, r9, lsr #12
    7c20:	002b3f00 	eoreq	r3, fp, r0, lsl #30
    7c24:	70611a00 	rsbvc	r1, r1, r0, lsl #20
    7c28:	36080100 	strcc	r0, [r8], -r0, lsl #2
    7c2c:	000000b5 	strheq	r0, [r0], -r5
    7c30:	00002b73 	andeq	r2, r0, r3, ror fp
    7c34:	00636e1b 	rsbeq	r6, r3, fp, lsl lr
    7c38:	81060a01 	tsthi	r6, r1, lsl #20
    7c3c:	0c000000 	stceq	0, cr0, [r0], {-0}
    7c40:	1c00002c 	stcne	0, cr0, [r0], {44}	; 0x2c
    7c44:	000015a7 	andeq	r1, r0, r7, lsr #11
    7c48:	1c114e01 	ldcne	14, cr4, [r1], {1}
    7c4c:	000015f8 	strdeq	r1, [r0], -r8
    7c50:	1d165501 	cfldr32ne	mvfx5, [r6, #-4]
    7c54:	00001bba 			; <UNDEFINED> instruction: 0x00001bba
    7c58:	00001c2a 	andeq	r1, r0, sl, lsr #24
    7c5c:	00000488 	andeq	r0, r0, r8, lsl #9
    7c60:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    7c64:	114e0100 	mrsne	r0, (UNDEF: 94)
    7c68:	0000010c 	andeq	r0, r0, ip, lsl #2
    7c6c:	6d1b5601 	ldcvs	6, cr5, [fp, #-4]
    7c70:	4e010066 	cdpmi	0, 0, cr0, cr1, cr6, {3}
    7c74:	0000c111 	andeq	ip, r0, r1, lsl r1
    7c78:	002c8d00 	eoreq	r8, ip, r0, lsl #26
    7c7c:	2a1d0000 	bcs	747c84 <__ccfg+0x727cdc>
    7c80:	7200001c 	andvc	r0, r0, #28
    7c84:	a400001c 	strge	r0, [r0], #-28	; 0xffffffe4
    7c88:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7c8c:	00706176 	rsbseq	r6, r0, r6, ror r1
    7c90:	0c114f01 	ldceq	15, cr4, [r1], {1}
    7c94:	01000001 	tsteq	r0, r1
    7c98:	481f005e 	ldmdami	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    7c9c:	d500000d 	strle	r0, [r0, #-13]
    7ca0:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
    7ca4:	00706176 	rsbseq	r6, r0, r6, ror r1
    7ca8:	0c115001 	ldceq	0, cr5, [r1], {1}
    7cac:	01000001 	tsteq	r0, r1
    7cb0:	6364205e 	cmnvs	r4, #94	; 0x5e
    7cb4:	11500100 	cmpne	r0, r0, lsl #2
    7cb8:	00000081 	andeq	r0, r0, r1, lsl #1
    7cbc:	0100631b 	tsteq	r0, fp, lsl r3
    7cc0:	01d31150 	bicseq	r1, r3, r0, asr r1
    7cc4:	2cab0000 	stccs	0, cr0, [fp]
    7cc8:	1f000000 	svcne	0x00000000
    7ccc:	00000d60 	andeq	r0, r0, r0, ror #26
    7cd0:	000004fc 	strdeq	r0, [r0], -ip
    7cd4:	7061761e 	rsbvc	r7, r1, lr, lsl r6
    7cd8:	16550100 	ldrbne	r0, [r5], -r0, lsl #2
    7cdc:	0000058c 	andeq	r0, r0, ip, lsl #11
    7ce0:	6d1b5e01 	ldcvs	14, cr5, [fp, #-4]
    7ce4:	55010066 	strpl	r0, [r1, #-102]	; 0xffffff9a
    7ce8:	0000c116 	andeq	ip, r0, r6, lsl r1
    7cec:	002cc900 	eoreq	ip, ip, r0, lsl #18
    7cf0:	101f0000 	andsne	r0, pc, r0
    7cf4:	1400000d 	strne	r0, [r0], #-13
    7cf8:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7cfc:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d00:	8c165601 	ldchi	6, cr5, [r6], {1}
    7d04:	01000005 	tsteq	r0, r5
    7d08:	781f005e 	ldmdavc	pc, {r1, r2, r3, r4, r6}	; <UNPREDICTABLE>
    7d0c:	4500000d 	strmi	r0, [r0, #-13]
    7d10:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    7d14:	00706176 	rsbseq	r6, r0, r6, ror r1
    7d18:	8c165701 	ldchi	7, cr5, [r6], {1}
    7d1c:	01000005 	tsteq	r0, r5
    7d20:	6364205e 	cmnvs	r4, #94	; 0x5e
    7d24:	16570100 	ldrbne	r0, [r7], -r0, lsl #2
    7d28:	00000081 	andeq	r0, r0, r1, lsl #1
    7d2c:	0100631b 	tsteq	r0, fp, lsl r3
    7d30:	01d31657 	bicseq	r1, r3, r7, asr r6
    7d34:	2ce70000 	stclcs	0, cr0, [r7]
    7d38:	1d000000 	stcne	0, cr0, [r0, #-0]
    7d3c:	00001e3a 	andeq	r1, r0, sl, lsr lr
    7d40:	00001e4e 	andeq	r1, r0, lr, asr #28
    7d44:	0000056f 	andeq	r0, r0, pc, ror #10
    7d48:	0100631b 	tsteq	r0, fp, lsl r3
    7d4c:	01d3095c 	bicseq	r0, r3, ip, asr r9
    7d50:	2d050000 	stccs	0, cr0, [r5, #-0]
    7d54:	731e0000 	tstvc	lr, #0
    7d58:	01007061 	tsteq	r0, r1, rrx
    7d5c:	01cd0d5c 	biceq	r0, sp, ip, asr sp
    7d60:	56010000 	strpl	r0, [r1], -r0
    7d64:	0d282100 	stfeqs	f2, [r8, #-0]
    7d68:	731b0000 	tstvc	fp, #0
    7d6c:	01007061 	tsteq	r0, r1, rrx
    7d70:	01cd0a66 	biceq	r0, sp, r6, ror #20
    7d74:	2d180000 	ldccs	0, cr0, [r8, #-0]
    7d78:	00000000 	andeq	r0, r0, r0
    7d7c:	01da040a 	bicseq	r0, sl, sl, lsl #8
    7d80:	040a0000 	streq	r0, [sl], #-0
    7d84:	000000ef 	andeq	r0, r0, pc, ror #1
    7d88:	0000d500 	andeq	sp, r0, r0, lsl #10
    7d8c:	b4000400 	strlt	r0, [r0], #-1024	; 0xfffffc00
    7d90:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    7d94:	00163f01 	andseq	r3, r6, r1, lsl #30
    7d98:	16f80100 	ldrbtne	r0, [r8], r0, lsl #2
    7d9c:	17340000 	ldrne	r0, [r4, -r0]!
    7da0:	0da80000 	stceq	0, cr0, [r8]
    7da4:	00000000 	andeq	r0, r0, r0
    7da8:	57910000 	ldrpl	r0, [r1, r0]
    7dac:	ef020000 	svc	0x00020000
    7db0:	02000016 	andeq	r0, r0, #22
    7db4:	0000301b 	andeq	r3, r0, fp, lsl r0
    7db8:	06010300 	streq	r0, [r1], -r0, lsl #6
    7dbc:	00000392 	muleq	r0, r2, r3
    7dc0:	90080103 	andls	r0, r8, r3, lsl #2
    7dc4:	03000003 	movweq	r0, #3
    7dc8:	03cc0502 	biceq	r0, ip, #8388608	; 0x800000
    7dcc:	02030000 	andeq	r0, r3, #0
    7dd0:	00026007 	andeq	r6, r2, r7
    7dd4:	16350200 	ldrtne	r0, [r5], -r0, lsl #4
    7dd8:	3f020000 	svccc	0x00020000
    7ddc:	00000057 	andeq	r0, r0, r7, asr r0
    7de0:	9d050403 	cfstrsls	mvf0, [r5, #-12]
    7de4:	03000000 	movweq	r0, #0
    7de8:	00720704 	rsbseq	r0, r2, r4, lsl #14
    7dec:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    7df0:	00009805 	andeq	r9, r0, r5, lsl #16
    7df4:	07080300 	streq	r0, [r8, -r0, lsl #6]
    7df8:	0000006d 	andeq	r0, r0, sp, rrx
    7dfc:	69050404 	stmdbvs	r5, {r2, sl}
    7e00:	0300746e 	movweq	r7, #1134	; 0x46e
    7e04:	00770704 	rsbseq	r0, r7, r4, lsl #14
    7e08:	f1020000 	cps	#0
    7e0c:	03000016 	movweq	r0, #22
    7e10:	00002513 	andeq	r2, r0, r3, lsl r5
    7e14:	16370200 	ldrtne	r0, [r7], -r0, lsl #4
    7e18:	1f030000 	svcne	0x00030000
    7e1c:	0000004c 	andeq	r0, r0, ip, asr #32
    7e20:	00160605 	andseq	r0, r6, r5, lsl #12
    7e24:	8caa0400 	cfstrshi	mvf0, [sl]
    7e28:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    7e2c:	3000001e 	andcc	r0, r0, lr, lsl r0
    7e30:	01000000 	mrseq	r0, (UNDEF: 0)
    7e34:	1729069c 			; <UNDEFINED> instruction: 0x1729069c
    7e38:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    7e3c:	0000008c 	andeq	r0, r0, ip, lsl #1
    7e40:	00002d36 	andeq	r2, r0, r6, lsr sp
    7e44:	00171a06 	andseq	r1, r7, r6, lsl #20
    7e48:	8c3f0100 	ldfhis	f0, [pc], #-0	; 7e50 <__exidx_end+0x51d0>
    7e4c:	4f000000 	svcmi	0x00000000
    7e50:	0700002d 	streq	r0, [r0, -sp, lsr #32]
    7e54:	00001628 	andeq	r1, r0, r8, lsr #12
    7e58:	00814001 	addeq	r4, r1, r1
    7e5c:	51010000 	mrspl	r0, (UNDEF: 1)
    7e60:	01430000 	mrseq	r0, (UNDEF: 67)
    7e64:	00040000 	andeq	r0, r4, r0
    7e68:	00002523 	andeq	r2, r0, r3, lsr #10
    7e6c:	163f0104 	ldrtne	r0, [pc], -r4, lsl #2
    7e70:	45010000 	strmi	r0, [r1, #-0]
    7e74:	34000018 	strcc	r0, [r0], #-24	; 0xffffffe8
    7e78:	b8000017 	stmdalt	r0, {r0, r1, r2, r4}
    7e7c:	0000000d 	andeq	r0, r0, sp
    7e80:	fc000000 	stc2	0, cr0, [r0], {-0}
    7e84:	02000058 	andeq	r0, r0, #88	; 0x58
    7e88:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    7e8c:	01020000 	mrseq	r0, (UNDEF: 2)
    7e90:	00039008 	andeq	r9, r3, r8
    7e94:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    7e98:	000003cc 	andeq	r0, r0, ip, asr #7
    7e9c:	60070202 	andvs	r0, r7, r2, lsl #4
    7ea0:	02000002 	andeq	r0, r0, #2
    7ea4:	009d0504 	addseq	r0, sp, r4, lsl #10
    7ea8:	a0030000 	andge	r0, r3, r0
    7eac:	02000017 	andeq	r0, r0, #23
    7eb0:	00005341 	andeq	r5, r0, r1, asr #6
    7eb4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7eb8:	00000072 	andeq	r0, r0, r2, ror r0
    7ebc:	98050802 	stmdals	r5, {r1, fp}
    7ec0:	03000000 	movweq	r0, #0
    7ec4:	000017ef 	andeq	r1, r0, pc, ror #15
    7ec8:	006c5b02 	rsbeq	r5, ip, r2, lsl #22
    7ecc:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    7ed0:	00006d07 	andeq	r6, r0, r7, lsl #26
    7ed4:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    7ed8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    7edc:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    7ee0:	03000000 	movweq	r0, #0
    7ee4:	000017a2 	andeq	r1, r0, r2, lsr #15
    7ee8:	00482003 	subeq	r2, r8, r3
    7eec:	f1030000 			; <UNDEFINED> instruction: 0xf1030000
    7ef0:	03000017 	movweq	r0, #23
    7ef4:	00006126 	andeq	r6, r0, r6, lsr #2
    7ef8:	17ba0500 	ldrne	r0, [sl, r0, lsl #10]!
    7efc:	45040000 	strmi	r0, [r4, #-0]
    7f00:	00008103 	andeq	r8, r0, r3, lsl #2
    7f04:	00000000 	andeq	r0, r0, r0
    7f08:	00002000 	andeq	r2, r0, r0
    7f0c:	dd9c0100 	ldfles	f0, [ip]
    7f10:	06000000 	streq	r0, [r0], -r0
    7f14:	000017ab 	andeq	r1, r0, fp, lsr #15
    7f18:	00814001 	addeq	r4, r1, r1
    7f1c:	2d840000 	stccs	0, cr0, [r4]
    7f20:	fa060000 	blx	187f28 <__ccfg+0x167f80>
    7f24:	01000017 	tsteq	r0, r7, lsl r0
    7f28:	00008141 	andeq	r8, r0, r1, asr #2
    7f2c:	002d9700 	eoreq	r9, sp, r0, lsl #14
    7f30:	17dd0700 	ldrbne	r0, [sp, r0, lsl #14]
    7f34:	42010000 	andmi	r0, r1, #0
    7f38:	00000081 	andeq	r0, r0, r1, lsl #1
    7f3c:	05005201 	streq	r5, [r0, #-513]	; 0xfffffdff
    7f40:	0000180c 	andeq	r1, r0, ip, lsl #16
    7f44:	8c035304 	stchi	3, cr5, [r3], {4}
    7f48:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    7f4c:	1800001e 	stmdane	r0, {r1, r2, r3, r4}
    7f50:	01000000 	mrseq	r0, (UNDEF: 0)
    7f54:	00012f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
    7f58:	01080800 	tsteq	r8, r0, lsl #16
    7f5c:	00011659 	andeq	r1, r1, r9, asr r6
    7f60:	17940900 	ldrne	r0, [r4, r0, lsl #18]
    7f64:	5a010000 	bpl	47f6c <__ccfg+0x27fc4>
    7f68:	0000008c 	andeq	r0, r0, ip, lsl #1
    7f6c:	00183809 	andseq	r3, r8, r9, lsl #16
    7f70:	2f5b0100 	svccs	0x005b0100
    7f74:	00000001 	andeq	r0, r0, r1
    7f78:	00182d0a 	andseq	r2, r8, sl, lsl #26
    7f7c:	f75c0100 			; <UNDEFINED> instruction: 0xf75c0100
    7f80:	07000000 	streq	r0, [r0, -r0]
    7f84:	000017dd 	ldrdeq	r1, [r0], -sp
    7f88:	00815d01 	addeq	r5, r1, r1, lsl #26
    7f8c:	51010000 	mrspl	r0, (UNDEF: 1)
    7f90:	00810b00 	addeq	r0, r1, r0, lsl #22
    7f94:	013f0000 	teqeq	pc, r0
    7f98:	3f0c0000 	svccc	0x000c0000
    7f9c:	01000001 	tsteq	r0, r1
    7fa0:	07040200 	streq	r0, [r4, -r0, lsl #4]
    7fa4:	00001864 	andeq	r1, r0, r4, ror #16
    7fa8:	00013600 	andeq	r3, r1, r0, lsl #12
    7fac:	cd000400 	cfstrsgt	mvf0, [r0, #-0]
    7fb0:	04000025 	streq	r0, [r0], #-37	; 0xffffffdb
    7fb4:	00163f01 	andseq	r3, r6, r1, lsl #30
    7fb8:	18c00100 	stmiane	r0, {r8}^
    7fbc:	17340000 	ldrne	r0, [r4, -r0]!
    7fc0:	0dd00000 	ldcleq	0, cr0, [r0]
    7fc4:	00000000 	andeq	r0, r0, r0
    7fc8:	5aa90000 	bpl	fea47fd0 <_estack+0xdea42fd0>
    7fcc:	01020000 	mrseq	r0, (UNDEF: 2)
    7fd0:	00039206 	andeq	r9, r3, r6, lsl #4
    7fd4:	08010200 	stmdaeq	r1, {r9}
    7fd8:	00000390 	muleq	r0, r0, r3
    7fdc:	cc050202 	sfmgt	f0, 4, [r5], {2}
    7fe0:	02000003 	andeq	r0, r0, #3
    7fe4:	02600702 	rsbeq	r0, r0, #524288	; 0x80000
    7fe8:	04020000 	streq	r0, [r2], #-0
    7fec:	00009d05 	andeq	r9, r0, r5, lsl #26
    7ff0:	17a00300 	strne	r0, [r0, r0, lsl #6]!
    7ff4:	41020000 	mrsmi	r0, (UNDEF: 2)
    7ff8:	00000053 	andeq	r0, r0, r3, asr r0
    7ffc:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    8000:	02000000 	andeq	r0, r0, #0
    8004:	00980508 	addseq	r0, r8, r8, lsl #10
    8008:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    800c:	00006d07 	andeq	r6, r0, r7, lsl #26
    8010:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8014:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8018:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    801c:	03000000 	movweq	r0, #0
    8020:	000017a2 	andeq	r1, r0, r2, lsr #15
    8024:	00482003 	subeq	r2, r8, r3
    8028:	a2050000 	andge	r0, r5, #0
    802c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    8030:	0000766a 	andeq	r7, r0, sl, ror #12
    8034:	001ed000 	andseq	sp, lr, r0
    8038:	00000800 	andeq	r0, r0, r0, lsl #16
    803c:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    8040:	06000000 	streq	r0, [r0], -r0
    8044:	00001890 	muleq	r0, r0, r8
    8048:	00767701 	rsbseq	r7, r6, r1, lsl #14
    804c:	05000000 	streq	r0, [r0, #-0]
    8050:	000018db 	ldrdeq	r1, [r0], -fp
    8054:	00767804 	rsbseq	r7, r6, r4, lsl #16
    8058:	00000000 	andeq	r0, r0, r0
    805c:	00060000 	andeq	r0, r6, r0
    8060:	9c010000 	stcls	0, cr0, [r1], {-0}
    8064:	000000cb 	andeq	r0, r0, fp, asr #1
    8068:	00189006 	andseq	r9, r8, r6
    806c:	76c20100 	strbvc	r0, [r2], r0, lsl #2
    8070:	00000000 	andeq	r0, r0, r0
    8074:	0018b105 	andseq	fp, r8, r5, lsl #2
    8078:	76840400 	strvc	r0, [r4], r0, lsl #8
    807c:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    8080:	0800001e 	stmdaeq	r0, {r1, r2, r3, r4}
    8084:	01000000 	mrseq	r0, (UNDEF: 0)
    8088:	0000f19c 	muleq	r0, ip, r1
    808c:	18900700 	ldmne	r0, {r8, r9, sl}
    8090:	0f010000 	svceq	0x00010000
    8094:	00007601 	andeq	r7, r0, r1, lsl #12
    8098:	6d080000 	stcvs	0, cr0, [r8, #-0]
    809c:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    80a0:	0076015b 	rsbseq	r0, r6, fp, asr r1
    80a4:	00000000 	andeq	r0, r0, r0
    80a8:	00060000 	andeq	r0, r6, r0
    80ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    80b0:	00000118 	andeq	r0, r0, r8, lsl r1
    80b4:	00189007 	andseq	r9, r8, r7
    80b8:	015a0100 	cmpeq	sl, r0, lsl #2
    80bc:	00000076 	andeq	r0, r0, r6, ror r0
    80c0:	18810900 	stmne	r1, {r8, fp}
    80c4:	6c040000 	stcvs	0, cr0, [r4], {-0}
    80c8:	00000001 	andeq	r0, r0, r1
    80cc:	00000800 	andeq	r0, r0, r0, lsl #16
    80d0:	0a9c0100 	beq	fe7084d8 <_estack+0xde7034d8>
    80d4:	00001898 	muleq	r0, r8, r8
    80d8:	76019e01 	strvc	r9, [r1], -r1, lsl #28
    80dc:	01000000 	mrseq	r0, (UNDEF: 0)
    80e0:	07000050 	smlsdeq	r0, r0, r0, r0
    80e4:	04000002 	streq	r0, [r0], #-2
    80e8:	00267d00 	eoreq	r7, r6, r0, lsl #26
    80ec:	3f010400 	svccc	0x00010400
    80f0:	01000016 	tsteq	r0, r6, lsl r0
    80f4:	000019a8 	andeq	r1, r0, r8, lsr #19
    80f8:	00001734 	andeq	r1, r0, r4, lsr r7
    80fc:	00000e00 	andeq	r0, r0, r0, lsl #28
    8100:	00000000 	andeq	r0, r0, r0
    8104:	00005c49 	andeq	r5, r0, r9, asr #24
    8108:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    810c:	02000003 	andeq	r0, r0, #3
    8110:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    8114:	02020000 	andeq	r0, r2, #0
    8118:	0003cc05 	andeq	ip, r3, r5, lsl #24
    811c:	07020200 	streq	r0, [r2, -r0, lsl #4]
    8120:	00000260 	andeq	r0, r0, r0, ror #4
    8124:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    8128:	03000000 	movweq	r0, #0
    812c:	000017a0 	andeq	r1, r0, r0, lsr #15
    8130:	00534103 	subseq	r4, r3, r3, lsl #2
    8134:	04020000 	streq	r0, [r2], #-0
    8138:	00007207 	andeq	r7, r0, r7, lsl #4
    813c:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    8140:	00000098 	muleq	r0, r8, r0
    8144:	6d070802 	stcvs	8, cr0, [r7, #-8]
    8148:	04000000 	streq	r0, [r0], #-0
    814c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    8150:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    8154:	00007707 	andeq	r7, r0, r7, lsl #14
    8158:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    815c:	20040000 	andcs	r0, r4, r0
    8160:	00000048 	andeq	r0, r0, r8, asr #32
    8164:	001a0505 	andseq	r0, sl, r5, lsl #10
    8168:	03300200 	teqeq	r0, #0, 4
    816c:	1a700603 	bne	1c09980 <__ccfg+0x1be99d8>
    8170:	fd010000 	stc2	0, cr0, [r1, #-0]
    8174:	1a180501 	bne	609580 <__ccfg+0x5e95d8>
    8178:	82010000 	andhi	r0, r1, #0
    817c:	f3070101 	vrhadd.u8	d0, d7, d1
    8180:	01000018 	tsteq	r0, r8, lsl r0
    8184:	1ee0010d 	cdpne	1, 14, cr0, cr0, cr13, {0}
    8188:	00d40000 	sbcseq	r0, r4, r0
    818c:	9c010000 	stcls	0, cr0, [r1], {-0}
    8190:	0000016d 	andeq	r0, r0, sp, ror #2
    8194:	0019f308 	andseq	pc, r9, r8, lsl #6
    8198:	010d0100 	mrseq	r0, (UNDEF: 29)
    819c:	00000076 	andeq	r0, r0, r6, ror r0
    81a0:	00002daa 	andeq	r2, r0, sl, lsr #27
    81a4:	001a5f09 	andseq	r5, sl, r9, lsl #30
    81a8:	010f0100 	mrseq	r0, (UNDEF: 31)
    81ac:	00000076 	andeq	r0, r0, r6, ror r0
    81b0:	00002dd6 	ldrdeq	r2, [r0], -r6
    81b4:	0018ec09 	andseq	lr, r8, r9, lsl #24
    81b8:	01100100 	tsteq	r0, r0, lsl #2
    81bc:	00000076 	andeq	r0, r0, r6, ror r0
    81c0:	00002de9 	andeq	r2, r0, r9, ror #27
    81c4:	0000810a 	andeq	r8, r0, sl, lsl #2
    81c8:	001f1200 	andseq	r1, pc, r0, lsl #4
    81cc:	00000600 	andeq	r0, r0, r0, lsl #12
    81d0:	01360100 	teqeq	r6, r0, lsl #2
    81d4:	001f380b 	andseq	r3, pc, fp, lsl #16
    81d8:	00002a00 	andeq	r2, r0, r0, lsl #20
    81dc:	00011f00 	andeq	r1, r1, r0, lsl #30
    81e0:	1ae50900 	bne	ff94a5e8 <_estack+0xdf9455e8>
    81e4:	53010000 	movwpl	r0, #4096	; 0x1000
    81e8:	00007601 	andeq	r7, r0, r1, lsl #12
    81ec:	002e0200 	eoreq	r0, lr, r0, lsl #4
    81f0:	1a410900 	bne	104a5f8 <__ccfg+0x102a650>
    81f4:	54010000 	strpl	r0, [r1], #-0
    81f8:	00007601 	andeq	r7, r0, r1, lsl #12
    81fc:	002e1500 	eoreq	r1, lr, r0, lsl #10
    8200:	220c0000 	andcs	r0, ip, #0
    8204:	c300001f 	movwgt	r0, #31
    8208:	33000001 	movwcc	r0, #1
    820c:	0d000001 	stceq	0, cr0, [r0, #-4]
    8210:	74025001 	strvc	r5, [r2], #-1
    8214:	2a0c0000 	bcs	30821c <__ccfg+0x2e8274>
    8218:	d400001f 	strle	r0, [r0], #-31	; 0xffffffe1
    821c:	4d000001 	stcmi	0, cr0, [r0, #-4]
    8220:	0d000001 	stceq	0, cr0, [r0, #-4]
    8224:	74025101 	strvc	r5, [r2], #-257	; 0xfffffeff
    8228:	50010d00 	andpl	r0, r1, r0, lsl #26
    822c:	00007502 	andeq	r7, r0, r2, lsl #10
    8230:	001f680c 	andseq	r6, pc, ip, lsl #16
    8234:	0001ea00 	andeq	lr, r1, r0, lsl #20
    8238:	00016100 	andeq	r6, r1, r0, lsl #2
    823c:	50010d00 	andpl	r0, r1, r0, lsl #26
    8240:	00007402 	andeq	r7, r0, r2, lsl #8
    8244:	001f720e 	andseq	r7, pc, lr, lsl #4
    8248:	50010d00 	andpl	r0, r1, r0, lsl #26
    824c:	00003201 	andeq	r3, r0, r1, lsl #4
    8250:	001a2b0f 	andseq	r2, sl, pc, lsl #22
    8254:	b45f0700 	ldrblt	r0, [pc], #-1792	; 825c <__exidx_end+0x55dc>
    8258:	a400001f 	strge	r0, [r0], #-31	; 0xffffffe1
    825c:	01000000 	mrseq	r0, (UNDEF: 0)
    8260:	0001c39c 	muleq	r1, ip, r3
    8264:	19f31000 	ldmibne	r3!, {ip}^
    8268:	72010000 	andvc	r0, r1, #0
    826c:	00000076 	andeq	r0, r0, r6, ror r0
    8270:	00002e40 	andeq	r2, r0, r0, asr #28
    8274:	001a4c10 	andseq	r4, sl, r0, lsl ip
    8278:	76730100 	ldrbtvc	r0, [r3], -r0, lsl #2
    827c:	53000000 	movwpl	r0, #0
    8280:	1100002e 	tstne	r0, lr, lsr #32
    8284:	00001fc4 	andeq	r1, r0, r4, asr #31
    8288:	000001fb 	strdeq	r0, [r0], -fp
    828c:	001fd811 	andseq	sp, pc, r1, lsl r8	; <UNPREDICTABLE>
    8290:	00020300 	andeq	r0, r2, r0, lsl #6
    8294:	1fe81200 	svcne	0x00e81200
    8298:	009b0000 	addseq	r0, fp, r0
    829c:	010d0000 	mrseq	r0, (UNDEF: 13)
    82a0:	00740250 	rsbseq	r0, r4, r0, asr r2
    82a4:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
    82a8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    82ac:	0001d46c 	andeq	sp, r1, ip, ror #8
    82b0:	00761400 	rsbseq	r1, r6, r0, lsl #8
    82b4:	13000000 	movwne	r0, #0
    82b8:	00001948 	andeq	r1, r0, r8, asr #18
    82bc:	01ea7305 	mvneq	r7, r5, lsl #6
    82c0:	76140000 	ldrvc	r0, [r4], -r0
    82c4:	14000000 	strne	r0, [r0], #-0
    82c8:	00000076 	andeq	r0, r0, r6, ror r0
    82cc:	19781300 	ldmdbne	r8!, {r8, r9, ip}^
    82d0:	7a050000 	bvc	1482d8 <__ccfg+0x128330>
    82d4:	000001fb 	strdeq	r0, [r0], -fp
    82d8:	00007614 	andeq	r7, r0, r4, lsl r6
    82dc:	a8150000 	ldmdage	r5, {}	; <UNPREDICTABLE>
    82e0:	0600001a 			; <UNDEFINED> instruction: 0x0600001a
    82e4:	c5160243 	ldrgt	r0, [r6, #-579]	; 0xfffffdbd
    82e8:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    82ec:	0b1700fd 	bleq	5c86e8 <__ccfg+0x5a8740>
    82f0:	00040000 	andeq	r0, r4, r0
    82f4:	000027bf 			; <UNDEFINED> instruction: 0x000027bf
    82f8:	163f0104 	ldrtne	r0, [pc], -r4, lsl #2
    82fc:	40010000 	andmi	r0, r1, r0
    8300:	3400001d 	strcc	r0, [r0], #-29	; 0xffffffe3
    8304:	48000017 	stmdami	r0, {r0, r1, r2, r4}
    8308:	0000000e 	andeq	r0, r0, lr
    830c:	36000000 	strcc	r0, [r0], -r0
    8310:	0200005e 	andeq	r0, r0, #94	; 0x5e
    8314:	03920601 	orrseq	r0, r2, #1048576	; 0x100000
    8318:	01020000 	mrseq	r0, (UNDEF: 2)
    831c:	00039008 	andeq	r9, r3, r8
    8320:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    8324:	000003cc 	andeq	r0, r0, ip, asr #7
    8328:	60070202 	andvs	r0, r7, r2, lsl #4
    832c:	03000002 	movweq	r0, #2
    8330:	00001635 	andeq	r1, r0, r5, lsr r6
    8334:	004c3f04 	subeq	r3, ip, r4, lsl #30
    8338:	04020000 	streq	r0, [r2], #-0
    833c:	00009d05 	andeq	r9, r0, r5, lsl #26
    8340:	17a00300 	strne	r0, [r0, r0, lsl #6]!
    8344:	41040000 	mrsmi	r0, (UNDEF: 4)
    8348:	0000005e 	andeq	r0, r0, lr, asr r0
    834c:	72070402 	andvc	r0, r7, #33554432	; 0x2000000
    8350:	02000000 	andeq	r0, r0, #0
    8354:	00980508 	addseq	r0, r8, r8, lsl #10
    8358:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    835c:	00006d07 	andeq	r6, r0, r7, lsl #26
    8360:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8364:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8368:	77070402 	strvc	r0, [r7, -r2, lsl #8]
    836c:	03000000 	movweq	r0, #0
    8370:	00001637 	andeq	r1, r0, r7, lsr r6
    8374:	00411f05 	subeq	r1, r1, r5, lsl #30
    8378:	a2030000 	andge	r0, r3, #0
    837c:	05000017 	streq	r0, [r0, #-23]	; 0xffffffe9
    8380:	00005320 	andeq	r5, r0, r0, lsr #6
    8384:	1dd30500 	cfldr64ne	mvdx0, [r3]
    8388:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    838c:	00000081 	andeq	r0, r0, r1, lsl #1
    8390:	0000be03 	andeq	fp, r0, r3, lsl #28
    8394:	1b230600 	blne	8c9b9c <__ccfg+0x8a9bf4>
    8398:	e9020000 	stmdb	r2, {}	; <UNPREDICTABLE>
    839c:	0000008c 	andeq	r0, r0, ip, lsl #1
    83a0:	001e2c07 	andseq	r2, lr, r7, lsl #24
    83a4:	81ef0200 	mvnhi	r0, r0, lsl #4
    83a8:	00000000 	andeq	r0, r0, r0
    83ac:	001b5808 	andseq	r5, fp, r8, lsl #16
    83b0:	8cab0200 	sfmhi	f0, 4, [fp]
    83b4:	01000000 	mrseq	r0, (UNDEF: 0)
    83b8:	000000e7 	andeq	r0, r0, r7, ror #1
    83bc:	0019f309 	andseq	pc, r9, r9, lsl #6
    83c0:	03290100 			; <UNDEFINED> instruction: 0x03290100
    83c4:	0000008c 	andeq	r0, r0, ip, lsl #1
    83c8:	001ecd0a 	andseq	ip, lr, sl, lsl #26
    83cc:	032b0100 			; <UNDEFINED> instruction: 0x032b0100
    83d0:	0000008c 	andeq	r0, r0, ip, lsl #1
    83d4:	1e0b0800 	cdpne	8, 0, cr0, cr11, cr0, {0}
    83d8:	81020000 	mrshi	r0, (UNDEF: 2)
    83dc:	0000008c 	andeq	r0, r0, ip, lsl #1
    83e0:	00011001 	andeq	r1, r1, r1
    83e4:	19f30900 	ldmibne	r3!, {r8, fp}^
    83e8:	3c010000 	stccc	0, cr0, [r1], {-0}
    83ec:	00008c03 	andeq	r8, r0, r3, lsl #24
    83f0:	1e7c0a00 	vaddne.f32	s1, s24, s0
    83f4:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    83f8:	00008c03 	andeq	r8, r0, r3, lsl #24
    83fc:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
    8400:	0200001c 	andeq	r0, r0, #28
    8404:	00008c88 	andeq	r8, r0, r8, lsl #25
    8408:	01390100 	teqeq	r9, r0, lsl #2
    840c:	f3090000 	vhadd.u8	d0, d9, d0
    8410:	01000019 	tsteq	r0, r9, lsl r0
    8414:	008c034f 	addeq	r0, ip, pc, asr #6
    8418:	f00a0000 			; <UNDEFINED> instruction: 0xf00a0000
    841c:	0100001d 	tsteq	r0, sp, lsl r0
    8420:	008c0351 	addeq	r0, ip, r1, asr r3
    8424:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8428:	00001c1d 	andeq	r1, r0, sp, lsl ip
    842c:	008cc802 	addeq	ip, ip, r2, lsl #16
    8430:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    8434:	09000001 	stmdbeq	r0, {r0}
    8438:	000019f3 	strdeq	r1, [r0], -r3
    843c:	8c036201 	sfmhi	f6, 4, [r3], {1}
    8440:	0a000000 	beq	8448 <__exidx_end+0x57c8>
    8444:	00001bad 	andeq	r1, r0, sp, lsr #23
    8448:	8c036401 	cfstrshi	mvf6, [r3], {1}
    844c:	0a000000 	beq	8454 <__exidx_end+0x57d4>
    8450:	00001cee 	andeq	r1, r0, lr, ror #25
    8454:	8c036501 	cfstr32hi	mvfx6, [r3], {1}
    8458:	00000000 	andeq	r0, r0, r0
    845c:	001d2008 	andseq	r2, sp, r8
    8460:	8cb20200 	lfmhi	f0, 4, [r2]
    8464:	01000000 	mrseq	r0, (UNDEF: 0)
    8468:	000001a3 	andeq	r0, r0, r3, lsr #3
    846c:	0019f309 	andseq	pc, r9, r9, lsl #6
    8470:	03940100 	orrseq	r0, r4, #0, 2
    8474:	0000008c 	andeq	r0, r0, ip, lsl #1
    8478:	001c3c0a 	andseq	r3, ip, sl, lsl #24
    847c:	03960100 	orrseq	r0, r6, #0, 2
    8480:	0000008c 	andeq	r0, r0, ip, lsl #1
    8484:	001cee0a 	andseq	lr, ip, sl, lsl #28
    8488:	03970100 	orrseq	r0, r7, #0, 2
    848c:	0000008c 	andeq	r0, r0, ip, lsl #1
    8490:	1beb0800 	blne	ffaca498 <_estack+0xdfac5498>
    8494:	b9020000 	stmdblt	r2, {}	; <UNPREDICTABLE>
    8498:	0000008c 	andeq	r0, r0, ip, lsl #1
    849c:	0001cc01 	andeq	ip, r1, r1, lsl #24
    84a0:	19f30900 	ldmibne	r3!, {r8, fp}^
    84a4:	b4010000 	strlt	r0, [r1], #-0
    84a8:	00008c03 	andeq	r8, r0, r3, lsl #24
    84ac:	1cf80a00 	vldmiane	r8!, {s1-s0}
    84b0:	b6010000 	strlt	r0, [r1], -r0
    84b4:	00008c03 	andeq	r8, r0, r3, lsl #24
    84b8:	96080000 	strls	r0, [r8], -r0
    84bc:	0200001d 	andeq	r0, r0, #29
    84c0:	00008cdf 	ldrdeq	r8, [r0], -pc	; <UNPREDICTABLE>
    84c4:	01f50100 	mvnseq	r0, r0, lsl #2
    84c8:	f3090000 	vhadd.u8	d0, d9, d0
    84cc:	01000019 	tsteq	r0, r9, lsl r0
    84d0:	008c03c8 	addeq	r0, ip, r8, asr #7
    84d4:	ed0a0000 	stc	0, cr0, [sl, #-0]
    84d8:	0100001e 	tsteq	r0, lr, lsl r0
    84dc:	008c03ca 	addeq	r0, ip, sl, asr #7
    84e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    84e4:	00001e56 	andeq	r1, r0, r6, asr lr
    84e8:	008cd702 	addeq	sp, ip, r2, lsl #14
    84ec:	12010000 	andne	r0, r1, #0
    84f0:	0a000002 	beq	8500 <__exidx_end+0x5880>
    84f4:	00001fa0 	andeq	r1, r0, r0, lsr #31
    84f8:	8c028301 	stchi	3, cr8, [r2], {1}
    84fc:	00000000 	andeq	r0, r0, r0
    8500:	0007fa0b 	andeq	pc, r7, fp, lsl #20
    8504:	03c40300 	biceq	r0, r4, #0, 6
    8508:	001f7d0c 	andseq	r7, pc, ip, lsl #26
    850c:	010f0200 	mrseq	r0, (UNDEF: 47)
    8510:	00002058 	andeq	r2, r0, r8, asr r0
    8514:	0000007c 	andeq	r0, r0, ip, ror r0
    8518:	02c49c01 	sbceq	r9, r4, #256	; 0x100
    851c:	5f0d0000 	svcpl	0x000d0000
    8520:	0100001a 	tsteq	r0, sl, lsl r0
    8524:	00008c7f 	andeq	r8, r0, pc, ror ip
    8528:	002e6600 	eoreq	r6, lr, r0, lsl #12
    852c:	1f950700 	svcne	0x00950700
    8530:	81010000 	mrshi	r0, (UNDEF: 1)
    8534:	0000008c 	andeq	r0, r0, ip, lsl #1
    8538:	001d150e 	andseq	r1, sp, lr, lsl #10
    853c:	81820100 	orrhi	r0, r2, r0, lsl #2
    8540:	01000000 	mrseq	r0, (UNDEF: 0)
    8544:	1b880f52 	blne	fe20c294 <_estack+0xde207294>
    8548:	83010000 	movwhi	r0, #4096	; 0x1000
    854c:	00000081 	andeq	r0, r0, r1, lsl #1
    8550:	00002e87 	andeq	r2, r0, r7, lsl #29
    8554:	001c560f 	andseq	r5, ip, pc, lsl #12
    8558:	81840100 	orrhi	r0, r4, r0, lsl #2
    855c:	9a000000 	bls	8564 <__exidx_end+0x58e4>
    8560:	1000002e 	andne	r0, r0, lr, lsr #32
    8564:	00000097 	muleq	r0, r7, r0
    8568:	00002066 	andeq	r2, r0, r6, rrx
    856c:	00000e18 	andeq	r0, r0, r8, lsl lr
    8570:	029b9701 	addseq	r9, fp, #262144	; 0x40000
    8574:	a7110000 	ldrge	r0, [r1, -r0]
    8578:	12000000 	andne	r0, r0, #0
    857c:	00000e18 	andeq	r0, r0, r8, lsl lr
    8580:	0000b213 	andeq	fp, r0, r3, lsl r2
    8584:	00520100 	subseq	r0, r2, r0, lsl #2
    8588:	00971400 	addseq	r1, r7, r0, lsl #8
    858c:	20700000 	rsbscs	r0, r0, r0
    8590:	00060000 	andeq	r0, r6, r0
    8594:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    8598:	0000a711 	andeq	sl, r0, r1, lsl r7
    859c:	20701500 	rsbscs	r1, r0, r0, lsl #10
    85a0:	00060000 	andeq	r0, r6, r0
    85a4:	b2160000 	andslt	r0, r6, #0
    85a8:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    85ac:	0000002e 	andeq	r0, r0, lr, lsr #32
    85b0:	18170000 	ldmdane	r7, {}	; <UNPREDICTABLE>
    85b4:	02000019 	andeq	r0, r0, #25
    85b8:	0020d46c 	eoreq	sp, r0, ip, ror #8
    85bc:	0000ac00 	andeq	sl, r0, r0, lsl #24
    85c0:	439c0100 	orrsmi	r0, ip, #0, 2
    85c4:	0d000003 	stceq	0, cr0, [r0, #-12]
    85c8:	00001a5f 	andeq	r1, r0, pc, asr sl
    85cc:	008cbf01 	addeq	fp, ip, r1, lsl #30
    85d0:	2edb0000 	cdpcs	0, 13, cr0, cr11, cr0, {0}
    85d4:	af0f0000 	svcge	0x000f0000
    85d8:	0100001e 	tsteq	r0, lr, lsl r0
    85dc:	000081c1 	andeq	r8, r0, r1, asr #3
    85e0:	002f0f00 	eoreq	r0, pc, r0, lsl #30
    85e4:	1fc50f00 	svcne	0x00c50f00
    85e8:	c2010000 	andgt	r0, r1, #0
    85ec:	00000081 	andeq	r0, r0, r1, lsl #1
    85f0:	00002f38 	andeq	r2, r0, r8, lsr pc
    85f4:	00009718 	andeq	r9, r0, r8, lsl r7
    85f8:	00210a00 	eoreq	r0, r1, r0, lsl #20
    85fc:	00000600 	andeq	r0, r0, r0, lsl #12
    8600:	32ee0100 	rsccc	r0, lr, #0, 2
    8604:	11000003 	tstne	r0, r3
    8608:	000000a7 	andeq	r0, r0, r7, lsr #1
    860c:	00210a15 	eoreq	r0, r1, r5, lsl sl
    8610:	00000600 	andeq	r0, r0, r0, lsl #12
    8614:	00b21600 	adcseq	r1, r2, r0, lsl #12
    8618:	2f5f0000 	svccs	0x005f0000
    861c:	00000000 	andeq	r0, r0, r0
    8620:	0020f819 	eoreq	pc, r0, r9, lsl r8	; <UNPREDICTABLE>
    8624:	00021a00 	andeq	r1, r2, r0, lsl #20
    8628:	50011a00 	andpl	r1, r1, r0, lsl #20
    862c:	00007402 	andeq	r7, r0, r2, lsl #8
    8630:	1b331b00 	blne	ccf238 <__ccfg+0xcaf290>
    8634:	a4020000 	strge	r0, [r2], #-0
    8638:	0000008c 	andeq	r0, r0, ip, lsl #1
    863c:	00002180 	andeq	r2, r0, r0, lsl #3
    8640:	0000005c 	andeq	r0, r0, ip, asr r0
    8644:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
    8648:	5f1c0000 	svcpl	0x001c0000
    864c:	0100001a 	tsteq	r0, sl, lsl r0
    8650:	008c021f 	addeq	r0, ip, pc, lsl r2
    8654:	2f720000 	svccs	0x00720000
    8658:	471d0000 	ldrmi	r0, [sp, -r0]
    865c:	0100001e 	tsteq	r0, lr, lsl r0
    8660:	008c0221 	addeq	r0, ip, r1, lsr #4
    8664:	2f930000 	svccs	0x00930000
    8668:	611d0000 	tstvs	sp, r0
    866c:	0100001f 	tsteq	r0, pc, lsl r0
    8670:	008c0222 	addeq	r0, ip, r2, lsr #4
    8674:	2fa60000 	svccs	0x00a60000
    8678:	6f1d0000 	svcvs	0x001d0000
    867c:	0100001f 	tsteq	r0, pc, lsl r0
    8680:	008c0223 	addeq	r0, ip, r3, lsr #4
    8684:	2ff40000 	svccs	0x00f40000
    8688:	ae1d0000 	cdpge	0, 1, cr0, cr13, cr0, {0}
    868c:	0100001f 	tsteq	r0, pc, lsl r0
    8690:	00810224 	addeq	r0, r1, r4, lsr #4
    8694:	305c0000 	subscc	r0, ip, r0
    8698:	a01d0000 	andsge	r0, sp, r0
    869c:	0100001f 	tsteq	r0, pc, lsl r0
    86a0:	008c0225 	addeq	r0, ip, r5, lsr #4
    86a4:	307b0000 	rsbscc	r0, fp, r0
    86a8:	1b000000 	blne	86b0 <__exidx_end+0x5a30>
    86ac:	00001d6b 	andeq	r1, r0, fp, ror #26
    86b0:	008cc102 	addeq	ip, ip, r2, lsl #2
    86b4:	21dc0000 	bicscs	r0, ip, r0
    86b8:	00180000 	andseq	r0, r8, r0
    86bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    86c0:	000003e7 	andeq	r0, r0, r7, ror #7
    86c4:	001fa01d 	andseq	sl, pc, sp, lsl r0	; <UNPREDICTABLE>
    86c8:	02670100 	rsbeq	r0, r7, #0, 2
    86cc:	0000008c 	andeq	r0, r0, ip, lsl #1
    86d0:	000030a0 	andeq	r3, r0, r0, lsr #1
    86d4:	01f51e00 	mvnseq	r1, r0, lsl #28
    86d8:	00000000 	andeq	r0, r0, r0
    86dc:	00100000 	andseq	r0, r0, r0
    86e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    86e4:	00000404 	andeq	r0, r0, r4, lsl #8
    86e8:	00020516 	andeq	r0, r2, r6, lsl r5
    86ec:	0030c700 	eorseq	ip, r0, r0, lsl #14
    86f0:	991b0000 	ldmdbls	fp, {}	; <UNPREDICTABLE>
    86f4:	0200001c 	andeq	r0, r0, #28
    86f8:	00008c9d 	muleq	r0, sp, ip
    86fc:	0021f400 	eoreq	pc, r1, r0, lsl #8
    8700:	00001000 	andeq	r1, r0, r0
    8704:	3e9c0100 	fmlcce	f0, f4, f0
    8708:	1d000004 	stcne	0, cr0, [r0, #-16]
    870c:	00001fa0 	andeq	r1, r0, r0, lsr #31
    8710:	8c029701 	stchi	7, cr9, [r2], {1}
    8714:	e0000000 	and	r0, r0, r0
    8718:	1d000030 	stcne	0, cr0, [r0, #-192]	; 0xffffff40
    871c:	00001e47 	andeq	r1, r0, r7, asr #28
    8720:	8c029801 	stchi	8, cr9, [r2], {1}
    8724:	01000000 	mrseq	r0, (UNDEF: 0)
    8728:	00000031 	andeq	r0, r0, r1, lsr r0
    872c:	001c791b 	andseq	r7, ip, fp, lsl r9
    8730:	8c960200 	lfmhi	f0, 4, [r6], {0}
    8734:	04000000 	streq	r0, [r0], #-0
    8738:	14000022 	strne	r0, [r0], #-34	; 0xffffffde
    873c:	01000000 	mrseq	r0, (UNDEF: 0)
    8740:	0004789c 	muleq	r4, ip, r8
    8744:	1fa01d00 	svcne	0x00a01d00
    8748:	ba010000 	blt	48750 <__ccfg+0x287a8>
    874c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8750:	00311400 	eorseq	r1, r1, r0, lsl #8
    8754:	1e471d00 	cdpne	13, 4, cr1, cr7, cr0, {0}
    8758:	bb010000 	bllt	48760 <__ccfg+0x287b8>
    875c:	00008c02 	andeq	r8, r0, r2, lsl #24
    8760:	00313500 	eorseq	r3, r1, r0, lsl #10
    8764:	401b0000 	andsmi	r0, fp, r0
    8768:	0200001f 	andeq	r0, r0, #31
    876c:	00008c8f 	andeq	r8, r0, pc, lsl #25
    8770:	00221800 	eoreq	r1, r2, r0, lsl #16
    8774:	00006400 	andeq	r6, r0, r0, lsl #8
    8778:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    877c:	1c000004 	stcne	0, cr0, [r0], {4}
    8780:	000019f3 	strdeq	r1, [r0], -r3
    8784:	8c02db01 			; <UNDEFINED> instruction: 0x8c02db01
    8788:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    878c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    8790:	00001fa0 	andeq	r1, r0, r0, lsr #31
    8794:	8c02dd01 	stchi	13, cr13, [r2], {1}
    8798:	69000000 	stmdbvs	r0, {}	; <UNPREDICTABLE>
    879c:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87a0:	00001e47 	andeq	r1, r0, r7, asr #28
    87a4:	8c02de01 	stchi	14, cr13, [r2], {1}
    87a8:	9d000000 	stcls	0, cr0, [r0, #-0]
    87ac:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87b0:	00001ba1 	andeq	r1, r0, r1, lsr #23
    87b4:	8c02df01 	stchi	15, cr13, [r2], {1}
    87b8:	b0000000 	andlt	r0, r0, r0
    87bc:	1d000031 	stcne	0, cr0, [r0, #-196]	; 0xffffff3c
    87c0:	00001f18 	andeq	r1, r0, r8, lsl pc
    87c4:	8c02e001 	stchi	0, cr14, [r2], {1}
    87c8:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    87cc:	0a000031 	beq	8898 <__exidx_end+0x5c18>
    87d0:	00001e3d 	andeq	r1, r0, sp, lsr lr
    87d4:	8c02e101 	stfhid	f6, [r2], {1}
    87d8:	1d000000 	stcne	0, cr0, [r0, #-0]
    87dc:	00001c11 	andeq	r1, r0, r1, lsl ip
    87e0:	8102e201 	tsthi	r2, r1, lsl #4
    87e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    87e8:	00000032 	andeq	r0, r0, r2, lsr r0
    87ec:	0000be1e 	andeq	fp, r0, lr, lsl lr
    87f0:	00227c00 	eoreq	r7, r2, r0, lsl #24
    87f4:	00001400 	andeq	r1, r0, r0, lsl #8
    87f8:	4a9c0100 	bmi	fe708c00 <_estack+0xde703c00>
    87fc:	1f000005 	svcne	0x00000005
    8800:	000000ce 	andeq	r0, r0, lr, asr #1
    8804:	00003287 	andeq	r3, r0, r7, lsl #5
    8808:	0000da16 	andeq	sp, r0, r6, lsl sl
    880c:	0032a800 	eorseq	sl, r2, r0, lsl #16
    8810:	227e1500 	rsbscs	r1, lr, #0, 10
    8814:	000a0000 	andeq	r0, sl, r0
    8818:	ce1f0000 	cdpgt	0, 1, cr0, cr15, cr0, {0}
    881c:	c7000000 	strgt	r0, [r0, -r0]
    8820:	15000032 	strne	r0, [r0, #-50]	; 0xffffffce
    8824:	0000227e 	andeq	r2, r0, lr, ror r2
    8828:	0000000a 	andeq	r0, r0, sl
    882c:	0000da16 	andeq	sp, r0, r6, lsl sl
    8830:	0032e800 	eorseq	lr, r2, r0, lsl #16
    8834:	00000000 	andeq	r0, r0, r0
    8838:	0000e71e 	andeq	lr, r0, lr, lsl r7
    883c:	00229000 	eoreq	r9, r2, r0
    8840:	00001400 	andeq	r1, r0, r0, lsl #8
    8844:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    8848:	1f000005 	svcne	0x00000005
    884c:	000000f7 	strdeq	r0, [r0], -r7
    8850:	000032fb 	strdeq	r3, [r0], -fp
    8854:	00010316 	andeq	r0, r1, r6, lsl r3
    8858:	00331c00 	eorseq	r1, r3, r0, lsl #24
    885c:	22921500 	addscs	r1, r2, #0, 10
    8860:	000a0000 	andeq	r0, sl, r0
    8864:	f71f0000 			; <UNDEFINED> instruction: 0xf71f0000
    8868:	3b000000 	blcc	8870 <__exidx_end+0x5bf0>
    886c:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    8870:	00002292 	muleq	r0, r2, r2
    8874:	0000000a 	andeq	r0, r0, sl
    8878:	00010316 	andeq	r0, r1, r6, lsl r3
    887c:	00335c00 	eorseq	r5, r3, r0, lsl #24
    8880:	00000000 	andeq	r0, r0, r0
    8884:	0001101e 	andeq	r1, r1, lr, lsl r0
    8888:	0022a400 	eoreq	sl, r2, r0, lsl #8
    888c:	00001400 	andeq	r1, r0, r0, lsl #8
    8890:	e29c0100 	adds	r0, ip, #0, 2
    8894:	1f000005 	svcne	0x00000005
    8898:	00000120 	andeq	r0, r0, r0, lsr #2
    889c:	0000336f 	andeq	r3, r0, pc, ror #6
    88a0:	00012c16 	andeq	r2, r1, r6, lsl ip
    88a4:	00339000 	eorseq	r9, r3, r0
    88a8:	22a61500 	adccs	r1, r6, #0, 10
    88ac:	000a0000 	andeq	r0, sl, r0
    88b0:	201f0000 	andscs	r0, pc, r0
    88b4:	af000001 	svcge	0x00000001
    88b8:	15000033 	strne	r0, [r0, #-51]	; 0xffffffcd
    88bc:	000022a6 	andeq	r2, r0, r6, lsr #5
    88c0:	0000000a 	andeq	r0, r0, sl
    88c4:	00012c16 	andeq	r2, r1, r6, lsl ip
    88c8:	0033d000 	eorseq	sp, r3, r0
    88cc:	00000000 	andeq	r0, r0, r0
    88d0:	0001391e 	andeq	r3, r1, lr, lsl r9
    88d4:	0022b800 	eoreq	fp, r2, r0, lsl #16
    88d8:	00002800 	andeq	r2, r0, r0, lsl #16
    88dc:	3c9c0100 	ldfccs	f0, [ip], {0}
    88e0:	1f000006 	svcne	0x00000006
    88e4:	00000149 	andeq	r0, r0, r9, asr #2
    88e8:	000033e3 	andeq	r3, r0, r3, ror #7
    88ec:	00015516 	andeq	r5, r1, r6, lsl r5
    88f0:	00340400 	eorseq	r0, r4, r0, lsl #8
    88f4:	01612000 	cmneq	r1, r0
    88f8:	ba150000 	blt	548900 <__ccfg+0x528958>
    88fc:	1c000022 	stcne	0, cr0, [r0], {34}	; 0x22
    8900:	1f000000 	svcne	0x00000000
    8904:	00000149 	andeq	r0, r0, r9, asr #2
    8908:	00003423 	andeq	r3, r0, r3, lsr #8
    890c:	0022ba15 	eoreq	fp, r2, r5, lsl sl
    8910:	00001c00 	andeq	r1, r0, r0, lsl #24
    8914:	01551600 	cmpeq	r5, r0, lsl #12
    8918:	34440000 	strbcc	r0, [r4], #-0
    891c:	61160000 	tstvs	r6, r0
    8920:	71000001 	tstvc	r0, r1
    8924:	00000034 	andeq	r0, r0, r4, lsr r0
    8928:	c61b0000 	ldrgt	r0, [fp], -r0
    892c:	0200001b 	andeq	r0, r0, #27
    8930:	00008ccf 	andeq	r8, r0, pc, asr #25
    8934:	0022e000 	eoreq	lr, r2, r0
    8938:	00001000 	andeq	r1, r0, r0
    893c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
    8940:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    8944:	00001c60 	andeq	r1, r0, r0, ror #24
    8948:	8c038401 	cfstrshi	mvf8, [r3], {1}
    894c:	84000000 	strhi	r0, [r0], #-0
    8950:	00000034 	andeq	r0, r0, r4, lsr r0
    8954:	00016e1e 	andeq	r6, r1, lr, lsl lr
    8958:	0022f000 	eoreq	pc, r2, r0
    895c:	00002c00 	andeq	r2, r0, r0, lsl #24
    8960:	c09c0100 	addsgt	r0, ip, r0, lsl #2
    8964:	1f000006 	svcne	0x00000006
    8968:	0000017e 	andeq	r0, r0, lr, ror r1
    896c:	0000349f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    8970:	00018a16 	andeq	r8, r1, r6, lsl sl
    8974:	0034c000 	eorseq	ip, r4, r0
    8978:	01962000 	orrseq	r2, r6, r0
    897c:	f2150000 	vhadd.s16	d0, d5, d0
    8980:	1e000022 	cdpne	0, 0, cr0, cr0, cr2, {1}
    8984:	1f000000 	svcne	0x00000000
    8988:	0000017e 	andeq	r0, r0, lr, ror r1
    898c:	000034e3 	andeq	r3, r0, r3, ror #9
    8990:	0022f215 	eoreq	pc, r2, r5, lsl r2	; <UNPREDICTABLE>
    8994:	00001e00 	andeq	r1, r0, r0, lsl #28
    8998:	018a1600 	orreq	r1, sl, r0, lsl #12
    899c:	35040000 	strcc	r0, [r4, #-0]
    89a0:	96160000 	ldrls	r0, [r6], -r0
    89a4:	31000001 	tstcc	r0, r1
    89a8:	00000035 	andeq	r0, r0, r5, lsr r0
    89ac:	a31e0000 	tstge	lr, #0
    89b0:	1c000001 	stcne	0, cr0, [r0], {1}
    89b4:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    89b8:	01000000 	mrseq	r0, (UNDEF: 0)
    89bc:	00070c9c 	muleq	r7, ip, ip
    89c0:	01b31f00 			; <UNDEFINED> instruction: 0x01b31f00
    89c4:	35440000 	strbcc	r0, [r4, #-0]
    89c8:	bf160000 	svclt	0x00160000
    89cc:	65000001 	strvs	r0, [r0, #-1]
    89d0:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    89d4:	0000231e 	andeq	r2, r0, lr, lsl r3
    89d8:	0000000a 	andeq	r0, r0, sl
    89dc:	0001b31f 	andeq	fp, r1, pc, lsl r3
    89e0:	00358400 	eorseq	r8, r5, r0, lsl #8
    89e4:	231e1500 	tstcs	lr, #0, 10
    89e8:	000a0000 	andeq	r0, sl, r0
    89ec:	bf160000 	svclt	0x00160000
    89f0:	a5000001 	strge	r0, [r0, #-1]
    89f4:	00000035 	andeq	r0, r0, r5, lsr r0
    89f8:	cc1e0000 	ldcgt	0, cr0, [lr], {-0}
    89fc:	30000001 	andcc	r0, r0, r1
    8a00:	14000023 	strne	r0, [r0], #-35	; 0xffffffdd
    8a04:	01000000 	mrseq	r0, (UNDEF: 0)
    8a08:	0007589c 	muleq	r7, ip, r8
    8a0c:	01dc1f00 	bicseq	r1, ip, r0, lsl #30
    8a10:	35b80000 	ldrcc	r0, [r8, #0]!
    8a14:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    8a18:	d9000001 	stmdble	r0, {r0}
    8a1c:	15000035 	strne	r0, [r0, #-53]	; 0xffffffcb
    8a20:	00002332 	andeq	r2, r0, r2, lsr r3
    8a24:	0000000a 	andeq	r0, r0, sl
    8a28:	0001dc1f 	andeq	sp, r1, pc, lsl ip
    8a2c:	0035f800 	eorseq	pc, r5, r0, lsl #16
    8a30:	23321500 	teqcs	r2, #0, 10
    8a34:	000a0000 	andeq	r0, sl, r0
    8a38:	e8160000 	ldmda	r6, {}	; <UNPREDICTABLE>
    8a3c:	19000001 	stmdbne	r0, {r0}
    8a40:	00000036 	andeq	r0, r0, r6, lsr r0
    8a44:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
    8a48:	02000019 	andeq	r0, r0, #25
    8a4c:	00234473 	eoreq	r4, r3, r3, ror r4
    8a50:	00011000 	andeq	r1, r1, r0
    8a54:	639c0100 	orrsvs	r0, ip, #0, 2
    8a58:	1c000009 	stcne	0, cr0, [r0], {9}
    8a5c:	000019f3 	strdeq	r1, [r0], -r3
    8a60:	8c012701 	stchi	7, cr2, [r1], {1}
    8a64:	2c000000 	stccs	0, cr0, [r0], {-0}
    8a68:	1c000036 	stcne	0, cr0, [r0], {54}	; 0x36
    8a6c:	00001a5f 	andeq	r1, r0, pc, asr sl
    8a70:	8c012701 	stchi	7, cr2, [r1], {1}
    8a74:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    8a78:	1d000036 	stcne	0, cr0, [r0, #-216]	; 0xffffff28
    8a7c:	00001dca 	andeq	r1, r0, sl, asr #27
    8a80:	8c012901 			; <UNDEFINED> instruction: 0x8c012901
    8a84:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    8a88:	21000036 	tstcs	r0, r6, lsr r0
    8a8c:	000001f5 	strdeq	r0, [r0], -r5
    8a90:	00002374 	andeq	r2, r0, r4, ror r3
    8a94:	00000e30 	andeq	r0, r0, r0, lsr lr
    8a98:	c1014001 	tstgt	r1, r1
    8a9c:	12000007 	andne	r0, r0, #7
    8aa0:	00000e30 	andeq	r0, r0, r0, lsr lr
    8aa4:	00020516 	andeq	r0, r2, r6, lsl r5
    8aa8:	00374700 	eorseq	r4, r7, r0, lsl #14
    8aac:	22000000 	andcs	r0, r0, #0
    8ab0:	0000234e 	andeq	r2, r0, lr, asr #6
    8ab4:	00000343 	andeq	r0, r0, r3, asr #6
    8ab8:	000007d6 	ldrdeq	r0, [r0], -r6
    8abc:	0350011a 	cmpeq	r0, #-2147483642	; 0x80000006
    8ac0:	005101f3 	ldrsheq	r0, [r1], #-19	; 0xffffffed
    8ac4:	00235a22 	eoreq	r5, r3, r2, lsr #20
    8ac8:	000ad600 	andeq	sp, sl, r0, lsl #12
    8acc:	0007ef00 	andeq	lr, r7, r0, lsl #30
    8ad0:	51011a00 	tstpl	r1, r0, lsl #20
    8ad4:	011a4801 	tsteq	sl, r1, lsl #16
    8ad8:	00740250 	rsbseq	r0, r4, r0, asr r2
    8adc:	235e2300 	cmpcs	lr, #0, 6
    8ae0:	03bd0000 			; <UNDEFINED> instruction: 0x03bd0000
    8ae4:	74240000 	strtvc	r0, [r4], #-0
    8ae8:	02000023 	andeq	r0, r0, #35	; 0x23
    8aec:	081d0076 	ldmdaeq	sp, {r1, r2, r4, r5, r6}
    8af0:	011a0000 	tsteq	sl, r0
    8af4:	1a300153 	bne	c09048 <__ccfg+0xbe90a0>
    8af8:	0a035201 	beq	dd304 <__ccfg+0xbd35c>
    8afc:	011a03ff 			; <UNDEFINED> instruction: 0x011a03ff
    8b00:	2c080251 	sfmcs	f0, 4, [r8], {81}	; 0x51
    8b04:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8b08:	22000074 	andcs	r0, r0, #116	; 0x74
    8b0c:	00002384 	andeq	r2, r0, r4, lsl #7
    8b10:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b14:	00000836 	andeq	r0, r0, r6, lsr r8
    8b18:	0151011a 	cmpeq	r1, sl, lsl r1
    8b1c:	50011a4c 	andpl	r1, r1, ip, asr #20
    8b20:	00007402 	andeq	r7, r0, r2, lsl #8
    8b24:	00238823 	eoreq	r8, r3, r3, lsr #16
    8b28:	00040400 	andeq	r0, r4, r0, lsl #8
    8b2c:	23922200 	orrscs	r2, r2, #0, 4
    8b30:	0ad60000 	beq	ff588b38 <_estack+0xdf583b38>
    8b34:	08580000 	ldmdaeq	r8, {}^	; <UNPREDICTABLE>
    8b38:	011a0000 	tsteq	sl, r0
    8b3c:	1a440151 	bne	1109088 <__ccfg+0x10e90e0>
    8b40:	74025001 	strvc	r5, [r2], #-1
    8b44:	96230000 	strtls	r0, [r3], -r0
    8b48:	3e000023 	cdpcc	0, 0, cr0, cr0, cr3, {1}
    8b4c:	22000004 	andcs	r0, r0, #4
    8b50:	000023a0 	andeq	r2, r0, r0, lsr #7
    8b54:	00000ad6 	ldrdeq	r0, [r0], -r6
    8b58:	0000087a 	andeq	r0, r0, sl, ror r8
    8b5c:	0151011a 	cmpeq	r1, sl, lsl r1
    8b60:	50011a40 	andpl	r1, r1, r0, asr #20
    8b64:	00007402 	andeq	r7, r0, r2, lsl #8
    8b68:	0023a622 	eoreq	sl, r3, r2, lsr #12
    8b6c:	00047800 	andeq	r7, r4, r0, lsl #16
    8b70:	00088e00 	andeq	r8, r8, r0, lsl #28
    8b74:	50011a00 	andpl	r1, r1, r0, lsl #20
    8b78:	00007502 	andeq	r7, r0, r2, lsl #10
    8b7c:	0023b022 	eoreq	fp, r3, r2, lsr #32
    8b80:	000ad600 	andeq	sp, sl, r0, lsl #12
    8b84:	0008a700 	andeq	sl, r8, r0, lsl #14
    8b88:	51011a00 	tstpl	r1, r0, lsl #20
    8b8c:	011a3c01 	tsteq	sl, r1, lsl #24
    8b90:	00740250 	rsbseq	r0, r4, r0, asr r2
    8b94:	23b62200 			; <UNDEFINED> instruction: 0x23b62200
    8b98:	00e70000 	rsceq	r0, r7, r0
    8b9c:	08bb0000 	ldmeq	fp!, {}	; <UNPREDICTABLE>
    8ba0:	011a0000 	tsteq	sl, r0
    8ba4:	00750250 	rsbseq	r0, r5, r0, asr r2
    8ba8:	23c82200 	biccs	r2, r8, #0, 4
    8bac:	01100000 	tsteq	r0, r0
    8bb0:	08cf0000 	stmiaeq	pc, {}^	; <UNPREDICTABLE>
    8bb4:	011a0000 	tsteq	sl, r0
    8bb8:	00750250 	rsbseq	r0, r5, r0, asr r2
    8bbc:	23d62200 	bicscs	r2, r6, #0, 4
    8bc0:	01390000 	teqeq	r9, r0
    8bc4:	08e30000 	stmiaeq	r3!, {}^	; <UNPREDICTABLE>
    8bc8:	011a0000 	tsteq	sl, r0
    8bcc:	00750250 	rsbseq	r0, r5, r0, asr r2
    8bd0:	23e02200 	mvncs	r2, #0, 4
    8bd4:	0ad60000 	beq	ff588bdc <_estack+0xdf583bdc>
    8bd8:	08fd0000 	ldmeq	sp!, {}^	; <UNPREDICTABLE>
    8bdc:	011a0000 	tsteq	sl, r0
    8be0:	28080251 	stmdacs	r8, {r0, r4, r6, r9}
    8be4:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8be8:	22000074 	andcs	r0, r0, #116	; 0x74
    8bec:	000023e6 	andeq	r2, r0, r6, ror #7
    8bf0:	000000be 	strheq	r0, [r0], -lr
    8bf4:	00000911 	andeq	r0, r0, r1, lsl r9
    8bf8:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8bfc:	22000075 	andcs	r0, r0, #117	; 0x75
    8c00:	000023f8 	strdeq	r2, [r0], -r8
    8c04:	000001a3 	andeq	r0, r0, r3, lsr #3
    8c08:	00000925 	andeq	r0, r0, r5, lsr #18
    8c0c:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c10:	22000075 	andcs	r0, r0, #117	; 0x75
    8c14:	0000240a 	andeq	r2, r0, sl, lsl #8
    8c18:	000001cc 	andeq	r0, r0, ip, asr #3
    8c1c:	00000939 	andeq	r0, r0, r9, lsr r9
    8c20:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c24:	22000075 	andcs	r0, r0, #117	; 0x75
    8c28:	0000241e 	andeq	r2, r0, lr, lsl r4
    8c2c:	0000016e 	andeq	r0, r0, lr, ror #2
    8c30:	0000094d 	andeq	r0, r0, sp, asr #18
    8c34:	0250011a 	subseq	r0, r0, #-2147483642	; 0x80000006
    8c38:	19000075 	stmdbne	r0, {r0, r2, r4, r5, r6}
    8c3c:	00002428 	andeq	r2, r0, r8, lsr #8
    8c40:	00000ad6 	ldrdeq	r0, [r0], -r6
    8c44:	0151011a 	cmpeq	r1, sl, lsl r1
    8c48:	50011a38 	andpl	r1, r1, r8, lsr sl
    8c4c:	00007402 	andeq	r7, r0, r2, lsl #8
    8c50:	19c51700 	stmibne	r5, {r8, r9, sl, ip}^
    8c54:	fd020000 	stc2	0, cr0, [r2, #-0]
    8c58:	00002454 	andeq	r2, r0, r4, asr r4
    8c5c:	00000064 	andeq	r0, r0, r4, rrx
    8c60:	09899c01 	stmibeq	r9, {r0, sl, fp, ip, pc}
    8c64:	941d0000 	ldrls	r0, [sp], #-0
    8c68:	0100001b 	tsteq	r0, fp, lsl r0
    8c6c:	008c03eb 	addeq	r0, ip, fp, ror #7
    8c70:	37600000 	strbcc	r0, [r0, -r0]!
    8c74:	0c000000 	stceq	0, cr0, [r0], {-0}
    8c78:	00001f22 	andeq	r1, r0, r2, lsr #30
    8c7c:	b8010602 	stmdalt	r1, {r1, r9, sl}
    8c80:	28000024 	stmdacs	r0, {r2, r5}
    8c84:	01000000 	mrseq	r0, (UNDEF: 0)
    8c88:	0009b09c 	muleq	r9, ip, r0
    8c8c:	1d611c00 	stclne	12, cr1, [r1, #-0]
    8c90:	13010000 	movwne	r0, #4096	; 0x1000
    8c94:	00008c04 	andeq	r8, r0, r4, lsl #24
    8c98:	00377b00 	eorseq	r7, r7, r0, lsl #22
    8c9c:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    8ca0:	02000019 	andeq	r0, r0, #25
    8ca4:	0024e07a 	eoreq	lr, r4, sl, ror r0
    8ca8:	00015000 	andeq	r5, r1, r0
    8cac:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    8cb0:	1c00000a 	stcne	0, cr0, [r0], {10}
    8cb4:	00001a5f 	andeq	r1, r0, pc, asr sl
    8cb8:	8c019b01 			; <UNDEFINED> instruction: 0x8c019b01
    8cbc:	9c000000 	stcls	0, cr0, [r0], {-0}
    8cc0:	1d000037 	stcne	0, cr0, [r0, #-220]	; 0xffffff24
    8cc4:	00001ec0 	andeq	r1, r0, r0, asr #29
    8cc8:	8c019d01 	stchi	13, cr9, [r1], {1}
    8ccc:	f7000000 			; <UNDEFINED> instruction: 0xf7000000
    8cd0:	1d000037 	stcne	0, cr0, [r0, #-220]	; 0xffffff24
    8cd4:	00001dca 	andeq	r1, r0, sl, asr #27
    8cd8:	8c019e01 	stchi	14, cr9, [r1], {1}
    8cdc:	0a000000 	beq	8ce4 <__exidx_end+0x6064>
    8ce0:	1d000038 	stcne	0, cr0, [r0, #-224]	; 0xffffff20
    8ce4:	00001b14 	andeq	r1, r0, r4, lsl fp
    8ce8:	8c019f01 	stchi	15, cr9, [r1], {1}
    8cec:	1d000000 	stcne	0, cr0, [r0, #-0]
    8cf0:	1d000038 	stcne	0, cr0, [r0, #-224]	; 0xffffff20
    8cf4:	00001aef 	andeq	r1, r0, pc, ror #21
    8cf8:	8c01a001 	stchi	0, cr10, [r1], {1}
    8cfc:	3b000000 	blcc	8d04 <__exidx_end+0x6084>
    8d00:	25000038 	strcs	r0, [r0, #-56]	; 0xffffffc8
    8d04:	00000212 	andeq	r0, r0, r2, lsl r2
    8d08:	000025f2 	strdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    8d0c:	0000003e 	andeq	r0, r0, lr, lsr r0
    8d10:	23021601 	movwcs	r1, #9729	; 0x2601
    8d14:	0000256a 	andeq	r2, r0, sl, ror #10
    8d18:	0000063c 	andeq	r0, r0, ip, lsr r6
    8d1c:	00258c22 	eoreq	r8, r5, r2, lsr #24
    8d20:	000af200 	andeq	pc, sl, r0, lsl #4
    8d24:	000a4600 	andeq	r4, sl, r0, lsl #12
    8d28:	51011a00 	tstpl	r1, r0, lsl #20
    8d2c:	011a3101 	tsteq	sl, r1, lsl #2
    8d30:	00340150 	eorseq	r0, r4, r0, asr r1
    8d34:	00259222 	eoreq	r9, r5, r2, lsr #4
    8d38:	00098900 	andeq	r8, r9, r0, lsl #18
    8d3c:	000a5d00 	andeq	r5, sl, r0, lsl #26
    8d40:	50011a00 	andpl	r1, r1, r0, lsl #20
    8d44:	37bd0c05 	ldrcc	r0, [sp, r5, lsl #24]!
    8d48:	23000086 	movwcs	r0, #134	; 0x86
    8d4c:	00002598 	muleq	r0, r8, r5
    8d50:	00000b08 	andeq	r0, r0, r8, lsl #22
    8d54:	0025a222 	eoreq	sl, r5, r2, lsr #4
    8d58:	000af200 	andeq	pc, sl, r0, lsl #4
    8d5c:	000a7f00 	andeq	r7, sl, r0, lsl #30
    8d60:	51011a00 	tstpl	r1, r0, lsl #20
    8d64:	1a007402 	bne	25d74 <__ccfg+0x5dcc>
    8d68:	34015001 	strcc	r5, [r1], #-1
    8d6c:	25a82200 	strcs	r2, [r8, #512]!	; 0x200
    8d70:	0b080000 	bleq	208d78 <__ccfg+0x1e8dd0>
    8d74:	0a920000 	beq	fe488d7c <_estack+0xde483d7c>
    8d78:	011a0000 	tsteq	sl, r0
    8d7c:	00340150 	eorseq	r0, r4, r0, asr r1
    8d80:	0025b822 	eoreq	fp, r5, r2, lsr #16
    8d84:	00098900 	andeq	r8, r9, r0, lsl #18
    8d88:	000aac00 	andeq	sl, sl, r0, lsl #24
    8d8c:	50011a00 	andpl	r1, r1, r0, lsl #20
    8d90:	0c007408 	cfstrseq	mvf7, [r0], {8}
    8d94:	00ffffff 	ldrshteq	pc, [pc], #255	; <UNPREDICTABLE>
    8d98:	c826001a 	stmdagt	r6!, {r1, r3, r4}
    8d9c:	cc000025 	stcgt	0, cr0, [r0], {37}	; 0x25
    8da0:	1a00000a 	bne	8dd0 <__exidx_end+0x6150>
    8da4:	0c055201 	sfmeq	f5, 4, [r5], {1}
    8da8:	60006000 	andvs	r6, r0, r0
    8dac:	0151011a 	cmpeq	r1, sl, lsl r1
    8db0:	50011a37 	andpl	r1, r1, r7, lsr sl
    8db4:	48007404 	stmdami	r0, {r2, sl, ip, sp, lr}
    8db8:	de230025 	cdple	0, 2, cr0, cr3, cr5, {1}
    8dbc:	f2000025 	vhadd.s8	d0, d0, d21
    8dc0:	0000000a 	andeq	r0, r0, sl
    8dc4:	001cda27 	andseq	sp, ip, r7, lsr #20
    8dc8:	01ca0600 	biceq	r0, sl, r0, lsl #12
    8dcc:	00000af2 	strdeq	r0, [r0], -r2
    8dd0:	00008c28 	andeq	r8, r0, r8, lsr #24
    8dd4:	008c2800 	addeq	r2, ip, r0, lsl #16
    8dd8:	8c280000 	stchi	0, cr0, [r8], #-0
    8ddc:	00000000 	andeq	r0, r0, r0
    8de0:	001afc29 	andseq	pc, sl, r9, lsr #24
    8de4:	08f90700 	ldmeq	r9!, {r8, r9, sl}^
    8de8:	2800000b 	stmdacs	r0, {r0, r1, r3}
    8dec:	0000008c 	andeq	r0, r0, ip, lsl #1
    8df0:	00008c28 	andeq	r8, r0, r8, lsr #24
    8df4:	972a0000 	strls	r0, [sl, -r0]!
    8df8:	0700001e 	smladeq	r0, lr, r0, r0
    8dfc:	008c0110 	addeq	r0, ip, r0, lsl r1
    8e00:	8c280000 	stchi	0, cr0, [r8], #-0
    8e04:	00000000 	andeq	r0, r0, r0
    8e08:	00092300 	andeq	r2, r9, r0, lsl #6
    8e0c:	20000400 	andcs	r0, r0, r0, lsl #8
    8e10:	0400002a 	streq	r0, [r0], #-42	; 0xffffffd6
    8e14:	00163f01 	andseq	r3, r6, r1, lsl #30
    8e18:	20aa0100 	adccs	r0, sl, r0, lsl #2
    8e1c:	17340000 	ldrne	r0, [r4, -r0]!
    8e20:	0f200000 	svceq	0x00200000
    8e24:	00000000 	andeq	r0, r0, r0
    8e28:	62910000 	addsvs	r0, r1, #0
    8e2c:	ef020000 	svc	0x00020000
    8e30:	06000016 			; <UNDEFINED> instruction: 0x06000016
    8e34:	0000301b 	andeq	r3, r0, fp, lsl r0
    8e38:	06010300 	streq	r0, [r1], -r0, lsl #6
    8e3c:	00000392 	muleq	r0, r2, r3
    8e40:	0021e902 	eoreq	lr, r1, r2, lsl #18
    8e44:	421d0600 	andsmi	r0, sp, #0, 12
    8e48:	03000000 	movweq	r0, #0
    8e4c:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    8e50:	02030000 	andeq	r0, r3, #0
    8e54:	0003cc05 	andeq	ip, r3, r5, lsl #24
    8e58:	20d70200 	sbcscs	r0, r7, r0, lsl #4
    8e5c:	2b060000 	blcs	188e64 <__ccfg+0x168ebc>
    8e60:	0000005b 	andeq	r0, r0, fp, asr r0
    8e64:	60070203 	andvs	r0, r7, r3, lsl #4
    8e68:	02000002 	andeq	r0, r0, #2
    8e6c:	00001635 	andeq	r1, r0, r5, lsr r6
    8e70:	006d3f06 	rsbeq	r3, sp, r6, lsl #30
    8e74:	04030000 	streq	r0, [r3], #-0
    8e78:	00009d05 	andeq	r9, r0, r5, lsl #26
    8e7c:	17a00200 	strne	r0, [r0, r0, lsl #4]!
    8e80:	41060000 	mrsmi	r0, (UNDEF: 6)
    8e84:	0000007f 	andeq	r0, r0, pc, ror r0
    8e88:	72070403 	andvc	r0, r7, #50331648	; 0x3000000
    8e8c:	03000000 	movweq	r0, #0
    8e90:	00980508 	addseq	r0, r8, r8, lsl #10
    8e94:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    8e98:	00006d07 	andeq	r6, r0, r7, lsl #26
    8e9c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    8ea0:	00746e69 	rsbseq	r6, r4, r9, ror #28
    8ea4:	77070403 	strvc	r0, [r7, -r3, lsl #8]
    8ea8:	02000000 	andeq	r0, r0, #0
    8eac:	000016f1 	strdeq	r1, [r0], -r1	; <UNPREDICTABLE>
    8eb0:	00251307 	eoreq	r1, r5, r7, lsl #6
    8eb4:	eb020000 	bl	88ebc <__ccfg+0x68f14>
    8eb8:	07000021 	streq	r0, [r0, -r1, lsr #32]
    8ebc:	00003714 	andeq	r3, r0, r4, lsl r7
    8ec0:	20d90200 	sbcscs	r0, r9, r0, lsl #4
    8ec4:	1a070000 	bne	1c8ecc <__ccfg+0x1a8f24>
    8ec8:	00000050 	andeq	r0, r0, r0, asr r0
    8ecc:	00163702 	andseq	r3, r6, r2, lsl #14
    8ed0:	621f0700 	andsvs	r0, pc, #0, 14
    8ed4:	02000000 	andeq	r0, r0, #0
    8ed8:	000017a2 	andeq	r1, r0, r2, lsr #15
    8edc:	00742007 	rsbseq	r2, r4, r7
    8ee0:	c2020000 	andgt	r0, r2, #0
    8ee4:	08000022 	stmdaeq	r0, {r1, r5}
    8ee8:	0000e433 	andeq	lr, r0, r3, lsr r4
    8eec:	ea040500 	b	10a2f4 <__ccfg+0xea34c>
    8ef0:	06000000 	streq	r0, [r0], -r0
    8ef4:	00f10405 	rscseq	r0, r1, r5, lsl #8
    8ef8:	fc070000 	stc2	0, cr0, [r7], {-0}
    8efc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8f00:	000000ad 	andeq	r0, r0, sp, lsr #1
    8f04:	23380200 	teqcs	r8, #0, 4
    8f08:	42090000 	andmi	r0, r9, #0
    8f0c:	00000107 	andeq	r0, r0, r7, lsl #2
    8f10:	010d0405 	tsteq	sp, r5, lsl #8
    8f14:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    8f18:	26000000 	strcs	r0, [r0], -r0
    8f1c:	08000001 	stmdaeq	r0, {r0}
    8f20:	00000126 	andeq	r0, r0, r6, lsr #2
    8f24:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f28:	00ce0800 	sbceq	r0, lr, r0, lsl #16
    8f2c:	05000000 	streq	r0, [r0, #-0]
    8f30:	0000ad04 	andeq	sl, r0, r4, lsl #26
    8f34:	24610200 	strbtcs	r0, [r1], #-512	; 0xfffffe00
    8f38:	46090000 	strmi	r0, [r9], -r0
    8f3c:	00000137 	andeq	r0, r0, r7, lsr r1
    8f40:	013d0405 	teqeq	sp, r5, lsl #8
    8f44:	ce0a0000 	cdpgt	0, 0, cr0, cr10, cr0, {0}
    8f48:	02000000 	andeq	r0, r0, #0
    8f4c:	000024cd 	andeq	r2, r0, sp, asr #9
    8f50:	01374809 	teqeq	r7, r9, lsl #16
    8f54:	13020000 	movwne	r0, #8192	; 0x2000
    8f58:	09000022 	stmdbeq	r0, {r1, r5}
    8f5c:	0001584a 	andeq	r5, r1, sl, asr #16
    8f60:	5e040500 	cfsh32pl	mvfx0, mvfx4, #0
    8f64:	09000001 	stmdbeq	r0, {r0}
    8f68:	000000ce 	andeq	r0, r0, lr, asr #1
    8f6c:	0000016d 	andeq	r0, r0, sp, ror #2
    8f70:	0000ce08 	andeq	ip, r0, r8, lsl #28
    8f74:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
    8f78:	09000021 	stmdbeq	r0, {r0, r5}
    8f7c:	0001374c 	andeq	r3, r1, ip, asr #14
    8f80:	20e20200 	rsccs	r0, r2, r0, lsl #4
    8f84:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
    8f88:	00000107 	andeq	r0, r0, r7, lsl #2
    8f8c:	00216902 	eoreq	r6, r1, r2, lsl #18
    8f90:	e4510900 	ldrb	r0, [r1], #-2304	; 0xfffff700
    8f94:	02000000 	andeq	r0, r0, #0
    8f98:	00001fe5 	andeq	r1, r0, r5, ror #31
    8f9c:	01995309 	orrseq	r5, r9, r9, lsl #6
    8fa0:	04050000 	streq	r0, [r5], #-0
    8fa4:	0000019f 	muleq	r0, pc, r1	; <UNPREDICTABLE>
    8fa8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8fac:	0001b800 	andeq	fp, r1, r0, lsl #16
    8fb0:	01b80800 			; <UNDEFINED> instruction: 0x01b80800
    8fb4:	b8080000 	stmdalt	r8, {}	; <UNPREDICTABLE>
    8fb8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    8fbc:	000000b8 	strheq	r0, [r0], -r8
    8fc0:	b8040500 	stmdalt	r4, {r8, sl}
    8fc4:	02000000 	andeq	r0, r0, #0
    8fc8:	0000235c 	andeq	r2, r0, ip, asr r3
    8fcc:	01c95709 	biceq	r5, r9, r9, lsl #14
    8fd0:	04050000 	streq	r0, [r5], #-0
    8fd4:	000001cf 	andeq	r0, r0, pc, asr #3
    8fd8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    8fdc:	0001e300 	andeq	lr, r1, r0, lsl #6
    8fe0:	01e30800 	mvneq	r0, r0, lsl #16
    8fe4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    8fe8:	00000000 	andeq	r0, r0, r0
    8fec:	00ce0405 	sbceq	r0, lr, r5, lsl #8
    8ff0:	9c020000 	stcls	0, cr0, [r2], {-0}
    8ff4:	09000021 	stmdbeq	r0, {r0, r5}
    8ff8:	0001c95a 	andeq	ip, r1, sl, asr r9
    8ffc:	22650200 	rsbcs	r0, r5, #0, 4
    9000:	5d090000 	stcpl	0, cr0, [r9, #-0]
    9004:	000001c9 	andeq	r0, r0, r9, asr #3
    9008:	001ff702 	andseq	pc, pc, r2, lsl #14
    900c:	c9600900 	stmdbgt	r0!, {r8, fp}^
    9010:	02000001 	andeq	r0, r0, #1
    9014:	00002387 	andeq	r2, r0, r7, lsl #7
    9018:	00e46309 	rsceq	r6, r4, r9, lsl #6
    901c:	1d020000 	stcne	0, cr0, [r2, #-0]
    9020:	09000020 	stmdbeq	r0, {r5}
    9024:	00022065 	andeq	r2, r2, r5, rrx
    9028:	26040500 	strcs	r0, [r4], -r0, lsl #10
    902c:	07000002 	streq	r0, [r0, -r2]
    9030:	00000231 	andeq	r0, r0, r1, lsr r2
    9034:	0000ce08 	andeq	ip, r0, r8, lsl #28
    9038:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    903c:	09000024 	stmdbeq	r0, {r2, r5}
    9040:	00022067 	andeq	r2, r2, r7, rrx
    9044:	22d30200 	sbcscs	r0, r3, #0, 4
    9048:	69090000 	stmdbvs	r9, {}	; <UNPREDICTABLE>
    904c:	000000eb 	andeq	r0, r0, fp, ror #1
    9050:	0024ac02 	eoreq	sl, r4, r2, lsl #24
    9054:	eb6b0900 	bl	1acb45c <__ccfg+0x1aab4b4>
    9058:	02000000 	andeq	r0, r0, #0
    905c:	00002281 	andeq	r2, r0, r1, lsl #5
    9060:	00eb6d09 	rsceq	r6, fp, r9, lsl #26
    9064:	93020000 	movwls	r0, #8192	; 0x2000
    9068:	09000022 	stmdbeq	r0, {r1, r5}
    906c:	0000eb6f 	andeq	lr, r0, pc, ror #22
    9070:	094c0b00 	stmdbeq	ip, {r8, r9, fp}^
    9074:	0003557a 	andeq	r5, r3, sl, ror r5
    9078:	22370c00 	eorscs	r0, r7, #0, 24
    907c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    9080:	000000fc 	strdeq	r0, [r0], -ip
    9084:	249f0c00 	ldrcs	r0, [pc], #3072	; 908c <__exidx_end+0x640c>
    9088:	7d090000 	stcvc	0, cr0, [r9, #-0]
    908c:	0000012c 	andeq	r0, r0, ip, lsr #2
    9090:	225b0c04 	subscs	r0, fp, #4, 24	; 0x400
    9094:	7e090000 	cdpvc	0, 0, cr0, cr9, cr0, {0}
    9098:	00000142 	andeq	r0, r0, r2, asr #2
    909c:	23c60c08 	biccs	r0, r6, #8, 24	; 0x800
    90a0:	7f090000 	svcvc	0x00090000
    90a4:	0000014d 	andeq	r0, r0, sp, asr #2
    90a8:	23d80c0c 	bicscs	r0, r8, #12, 24	; 0xc00
    90ac:	80090000 	andhi	r0, r9, r0
    90b0:	0000016d 	andeq	r0, r0, sp, ror #2
    90b4:	23ea0c10 	mvncs	r0, #16, 24	; 0x1000
    90b8:	81090000 	mrshi	r0, (UNDEF: 9)
    90bc:	00000178 	andeq	r0, r0, r8, ror r1
    90c0:	21350c14 	teqcs	r5, r4, lsl ip
    90c4:	82090000 	andhi	r0, r9, #0
    90c8:	00000183 	andeq	r0, r0, r3, lsl #3
    90cc:	22500c18 	subscs	r0, r0, #24, 24	; 0x1800
    90d0:	83090000 	movwhi	r0, #36864	; 0x9000
    90d4:	0000018e 	andeq	r0, r0, lr, lsl #3
    90d8:	23a10c1c 			; <UNDEFINED> instruction: 0x23a10c1c
    90dc:	84090000 	strhi	r0, [r9], #-0
    90e0:	000001be 			; <UNDEFINED> instruction: 0x000001be
    90e4:	21d80c20 	bicscs	r0, r8, r0, lsr #24
    90e8:	85090000 	strhi	r0, [r9, #-0]
    90ec:	000001e9 	andeq	r0, r0, r9, ror #3
    90f0:	21f30c24 	mvnscs	r0, r4, lsr #24
    90f4:	86090000 	strhi	r0, [r9], -r0
    90f8:	000001f4 	strdeq	r0, [r0], -r4
    90fc:	240e0c28 	strcs	r0, [lr], #-3112	; 0xfffff3d8
    9100:	87090000 	strhi	r0, [r9, -r0]
    9104:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    9108:	218a0c2c 	orrcs	r0, sl, ip, lsr #24
    910c:	88090000 	stmdahi	r9, {}	; <UNPREDICTABLE>
    9110:	00000215 	andeq	r0, r0, r5, lsl r2
    9114:	23fc0c30 	mvnscs	r0, #48, 24	; 0x3000
    9118:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
    911c:	00000231 	andeq	r0, r0, r1, lsr r2
    9120:	223d0c34 	eorscs	r0, sp, #52, 24	; 0x3400
    9124:	8a090000 	bhi	24912c <__ccfg+0x229184>
    9128:	0000020a 	andeq	r0, r0, sl, lsl #4
    912c:	22b10c38 	adcscs	r0, r1, #56, 24	; 0x3800
    9130:	8b090000 	blhi	249138 <__ccfg+0x229190>
    9134:	0000023c 	andeq	r0, r0, ip, lsr r2
    9138:	23b70c3c 			; <UNDEFINED> instruction: 0x23b70c3c
    913c:	8c090000 	stchi	0, cr0, [r9], {-0}
    9140:	00000247 	andeq	r0, r0, r7, asr #4
    9144:	21b20c40 			; <UNDEFINED> instruction: 0x21b20c40
    9148:	8d090000 	stchi	0, cr0, [r9, #-0]
    914c:	00000252 	andeq	r0, r0, r2, asr r2
    9150:	200e0c44 	andcs	r0, lr, r4, asr #24
    9154:	8e090000 	cdphi	0, 0, cr0, cr9, cr0, {0}
    9158:	0000025d 	andeq	r0, r0, sp, asr r2
    915c:	12020048 	andne	r0, r2, #72	; 0x48
    9160:	09000023 	stmdbeq	r0, {r0, r1, r5}
    9164:	0002688f 	andeq	r6, r2, pc, lsl #17
    9168:	01080b00 	tsteq	r8, r0, lsl #22
    916c:	0003994e 	andeq	r9, r3, lr, asr #18
    9170:	23550c00 	cmpcs	r5, #0, 24
    9174:	4f010000 	svcmi	0x00010000
    9178:	000000ce 	andeq	r0, r0, lr, asr #1
    917c:	24220c00 	strtcs	r0, [r2], #-3072	; 0xfffff400
    9180:	50010000 	andpl	r0, r1, r0
    9184:	000000b8 	strheq	r0, [r0], -r8
    9188:	21e10c04 	mvncs	r0, r4, lsl #24
    918c:	51010000 	mrspl	r0, (UNDEF: 1)
    9190:	000000ad 	andeq	r0, r0, sp, lsr #1
    9194:	21200c06 			; <UNDEFINED> instruction: 0x21200c06
    9198:	52010000 	andpl	r0, r1, #0
    919c:	000000a2 	andeq	r0, r0, r2, lsr #1
    91a0:	4e020007 	cdpmi	0, 0, cr0, cr2, cr7, {0}
    91a4:	01000024 	tsteq	r0, r4, lsr #32
    91a8:	00036053 	andeq	r6, r3, r3, asr r0
    91ac:	051f0d00 	ldreq	r0, [pc, #-3328]	; 84b4 <__exidx_end+0x5834>
    91b0:	dc020000 	stcle	0, cr0, [r2], {-0}
    91b4:	03be0301 			; <UNDEFINED> instruction: 0x03be0301
    91b8:	d90e0000 	stmdble	lr, {}	; <UNPREDICTABLE>
    91bc:	02000004 	andeq	r0, r0, #4
    91c0:	00ce01dc 	ldrdeq	r0, [lr], #28
    91c4:	0f000000 	svceq	0x00000000
    91c8:	00000534 	andeq	r0, r0, r4, lsr r5
    91cc:	ce022c02 	cdpgt	12, 0, cr2, cr2, cr2, {0}
    91d0:	03000000 	movweq	r0, #0
    91d4:	00063e10 	andeq	r3, r6, r0, lsl lr
    91d8:	022a0400 	eoreq	r0, sl, #0, 8
    91dc:	1dd31103 	ldfnee	f1, [r3, #12]
    91e0:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    91e4:	000000c3 	andeq	r0, r0, r3, asr #1
    91e8:	0003fb03 	andeq	pc, r3, r3, lsl #22
    91ec:	1b231200 	blne	8cd9f4 <__ccfg+0x8ada4c>
    91f0:	e9050000 	stmdb	r5, {}	; <UNPREDICTABLE>
    91f4:	000000ce 	andeq	r0, r0, lr, asr #1
    91f8:	001e2c13 	andseq	r2, lr, r3, lsl ip
    91fc:	c3ef0500 	mvngt	r0, #0, 10
    9200:	00000000 	andeq	r0, r0, r0
    9204:	0021410d 	eoreq	r4, r1, sp, lsl #2
    9208:	025c0400 	subseq	r0, ip, #0, 8
    920c:	00041503 	andeq	r1, r4, r3, lsl #10
    9210:	210f0e00 	tstcs	pc, r0, lsl #28
    9214:	5c040000 	stcpl	0, cr0, [r4], {-0}
    9218:	0000ce02 	andeq	ip, r0, r2, lsl #28
    921c:	26100000 	ldrcs	r0, [r0], -r0
    9220:	03000023 	movweq	r0, #35	; 0x23
    9224:	0f030140 	svceq	0x00030140
    9228:	000022e2 	andeq	r2, r0, r2, ror #5
    922c:	2b023e04 	blcs	98a44 <__ccfg+0x78a9c>
    9230:	03000004 	movweq	r0, #4
    9234:	a7020103 	strge	r0, [r2, -r3, lsl #2]
    9238:	1400000b 	strne	r0, [r0], #-11
    923c:	0000236a 	andeq	r2, r0, sl, ror #6
    9240:	00009e0a 	andeq	r9, r0, sl, lsl #28
    9244:	00f40000 	rscseq	r0, r4, r0
    9248:	9c010000 	stcls	0, cr0, [r1], {-0}
    924c:	000005cd 	andeq	r0, r0, sp, asr #11
    9250:	0021d015 	eoreq	sp, r1, r5, lsl r0
    9254:	ce7b0100 	rpwgte	f0, f3, f0
    9258:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    925c:	16000038 			; <UNDEFINED> instruction: 0x16000038
    9260:	00002127 	andeq	r2, r0, r7, lsr #2
    9264:	00ce7c01 	sbceq	r7, lr, r1, lsl #24
    9268:	07ff0000 	ldrbeq	r0, [pc, r0]!
    926c:	0003a417 	andeq	sl, r3, r7, lsl r4
    9270:	00000000 	andeq	r0, r0, r0
    9274:	000ef000 	andeq	pc, lr, r0
    9278:	7d810100 	stfvcs	f0, [r1]
    927c:	18000004 	stmdane	r0, {r2}
    9280:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
    9284:	be190001 	cdplt	0, 1, cr0, cr9, cr1, {0}
    9288:	00000003 	andeq	r0, r0, r3
    928c:	04000000 	streq	r0, [r0], #-0
    9290:	01000000 	mrseq	r0, (UNDEF: 0)
    9294:	04151a82 	ldreq	r1, [r5], #-2690	; 0xfffff57e
    9298:	00000000 	andeq	r0, r0, r0
    929c:	00080000 	andeq	r0, r8, r0
    92a0:	a1010000 	mrsge	r0, (UNDEF: 1)
    92a4:	000004a9 	andeq	r0, r0, r9, lsr #9
    92a8:	0000001b 	andeq	r0, r0, fp, lsl r0
    92ac:	0008de00 	andeq	sp, r8, r0, lsl #28
    92b0:	cb190000 	blgt	6492b8 <__ccfg+0x629310>
    92b4:	00000003 	andeq	r0, r0, r3
    92b8:	06000000 	streq	r0, [r0], -r0
    92bc:	01000000 	mrseq	r0, (UNDEF: 0)
    92c0:	041e19b1 	ldreq	r1, [lr], #-2481	; 0xfffff64f
    92c4:	00000000 	andeq	r0, r0, r0
    92c8:	00040000 	andeq	r0, r4, r0
    92cc:	b2010000 	andlt	r0, r1, #0
    92d0:	0003fb1a 	andeq	pc, r3, sl, lsl fp	; <UNPREDICTABLE>
    92d4:	00000000 	andeq	r0, r0, r0
    92d8:	00000a00 	andeq	r0, r0, r0, lsl #20
    92dc:	e1b80100 			; <UNDEFINED> instruction: 0xe1b80100
    92e0:	18000004 	stmdane	r0, {r2}
    92e4:	00000408 	andeq	r0, r0, r8, lsl #8
    92e8:	cb190011 	blgt	649334 <__ccfg+0x62938c>
    92ec:	00000003 	andeq	r0, r0, r3
    92f0:	04000000 	streq	r0, [r0], #-0
    92f4:	01000000 	mrseq	r0, (UNDEF: 0)
    92f8:	041e19b9 	ldreq	r1, [lr], #-2489	; 0xfffff647
    92fc:	00000000 	andeq	r0, r0, r0
    9300:	00020000 	andeq	r0, r2, r0
    9304:	ba010000 	blt	4930c <__ccfg+0x29364>
    9308:	0003cb19 	andeq	ip, r3, r9, lsl fp
    930c:	00000000 	andeq	r0, r0, r0
    9310:	00000600 	andeq	r0, r0, r0, lsl #12
    9314:	19cf0100 	stmibne	pc, {r8}^	; <UNPREDICTABLE>
    9318:	0000041e 	andeq	r0, r0, lr, lsl r4
    931c:	00000000 	andeq	r0, r0, r0
    9320:	00000002 	andeq	r0, r0, r2
    9324:	001cd001 	andseq	sp, ip, r1
    9328:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    932c:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    9330:	0a035001 	beq	dd33c <__ccfg+0xbd394>
    9334:	1c0007ff 	stcne	7, cr0, [r0], {255}	; 0xff
    9338:	00000000 	andeq	r0, r0, r0
    933c:	0000053f 	andeq	r0, r0, pc, lsr r5
    9340:	0350011d 	cmpeq	r0, #1073741831	; 0x40000007
    9344:	0007ff0a 	andeq	pc, r7, sl, lsl #30
    9348:	0000001e 	andeq	r0, r0, lr, lsl r0
    934c:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9350:	00055700 	andeq	r5, r5, r0, lsl #14
    9354:	51011d00 	tstpl	r1, r0, lsl #26
    9358:	011d3101 	tsteq	sp, r1, lsl #2
    935c:	00330150 	eorseq	r0, r3, r0, asr r1
    9360:	0000001e 	andeq	r0, r0, lr, lsl r0
    9364:	0008ef00 	andeq	lr, r8, r0, lsl #30
    9368:	00056f00 	andeq	r6, r5, r0, lsl #30
    936c:	51011d00 	tstpl	r1, r0, lsl #26
    9370:	011d3301 	tsteq	sp, r1, lsl #6
    9374:	00340150 	eorseq	r0, r4, r0, asr r1
    9378:	0000001e 	andeq	r0, r0, lr, lsl r0
    937c:	00090500 	andeq	r0, r9, r0, lsl #10
    9380:	00058200 	andeq	r8, r5, r0, lsl #4
    9384:	50011d00 	andpl	r1, r1, r0, lsl #26
    9388:	1c003101 	stfnes	f3, [r0], {1}
    938c:	00000000 	andeq	r0, r0, r0
    9390:	00000591 	muleq	r0, r1, r5
    9394:	0150011d 	cmpeq	r0, sp, lsl r1
    9398:	001c0037 	andseq	r0, ip, r7, lsr r0
    939c:	a0000000 	andge	r0, r0, r0
    93a0:	1d000005 	stcne	0, cr0, [r0, #-20]	; 0xffffffec
    93a4:	37015001 	strcc	r5, [r1, -r1]
    93a8:	00001c00 	andeq	r1, r0, r0, lsl #24
    93ac:	05b00000 	ldreq	r0, [r0, #0]!
    93b0:	011d0000 	tsteq	sp, r0
    93b4:	00760250 	rsbseq	r0, r6, r0, asr r2
    93b8:	00001c00 	andeq	r1, r0, r0, lsl #24
    93bc:	05c00000 	strbeq	r0, [r0]
    93c0:	011d0000 	tsteq	sp, r0
    93c4:	00760250 	rsbseq	r0, r6, r0, asr r2
    93c8:	00001f00 	andeq	r1, r0, r0, lsl #30
    93cc:	011d0000 	tsteq	sp, r0
    93d0:	00760250 	rsbseq	r0, r6, r0, asr r2
    93d4:	82200000 	eorhi	r0, r0, #0
    93d8:	0a000020 	beq	9460 <__exidx_end+0x67e0>
    93dc:	26300101 	ldrtcs	r0, [r0], -r1, lsl #2
    93e0:	02200000 	eoreq	r0, r0, #0
    93e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    93e8:	000007c8 	andeq	r0, r0, r8, asr #15
    93ec:	0022a321 	eoreq	sl, r2, r1, lsr #6
    93f0:	ceda0100 	cdpgt	1, 13, cr0, cr10, cr0, {0}
    93f4:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    93f8:	15000038 	strne	r0, [r0, #-56]	; 0xffffffc8
    93fc:	00002006 	andeq	r2, r0, r6
    9400:	00c3dc01 	sbceq	sp, r3, r1, lsl #24
    9404:	38a50000 	stmiacc	r5!, {}	; <UNPREDICTABLE>
    9408:	ee150000 	cdp	0, 1, cr0, cr5, cr0, {0}
    940c:	01000022 	tsteq	r0, r2, lsr #32
    9410:	0000c3dd 	ldrdeq	ip, [r0], -sp
    9414:	0038c300 	eorseq	ip, r8, r0, lsl #6
    9418:	22241500 	eorcs	r1, r4, #0, 10
    941c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
    9420:	000000c3 	andeq	r0, r0, r3, asr #1
    9424:	0000391d 	andeq	r3, r0, sp, lsl r9
    9428:	00244015 	eoreq	r4, r4, r5, lsl r0
    942c:	c3df0100 	bicsgt	r0, pc, #0, 2
    9430:	3b000000 	blcc	9438 <__exidx_end+0x67b8>
    9434:	15000039 	strne	r0, [r0, #-57]	; 0xffffffc7
    9438:	00001fd7 	ldrdeq	r1, [r0], -r7
    943c:	00c3e001 	sbceq	lr, r3, r1
    9440:	39590000 	ldmdbcc	r9, {}^	; <UNPREDICTABLE>
    9444:	2e220000 	cdpcs	0, 2, cr0, cr2, cr0, {0}
    9448:	01000020 	tsteq	r0, r0, lsr #32
    944c:	0000c3e1 	andeq	ip, r0, r1, ror #7
    9450:	15530100 	ldrbne	r0, [r3, #-256]	; 0xffffff00
    9454:	00001a5f 	andeq	r1, r0, pc, asr sl
    9458:	00cee201 	sbceq	lr, lr, r1, lsl #4
    945c:	396c0000 	stmdbcc	ip!, {}^	; <UNPREDICTABLE>
    9460:	1d150000 	ldcne	0, cr0, [r5, #-0]
    9464:	01000023 	tsteq	r0, r3, lsr #32
    9468:	0000cee3 	andeq	ip, r0, r3, ror #29
    946c:	00397f00 	eorseq	r7, r9, r0, lsl #30
    9470:	20421500 	subcs	r1, r2, r0, lsl #10
    9474:	e4010000 	str	r0, [r1], #-0
    9478:	000000ce 	andeq	r0, r0, lr, asr #1
    947c:	0000399e 	muleq	r0, lr, r9
    9480:	00696423 	rsbeq	r6, r9, r3, lsr #8
    9484:	00cee501 	sbceq	lr, lr, r1, lsl #10
    9488:	39b10000 	ldmibcc	r1!, {}	; <UNPREDICTABLE>
    948c:	64230000 	strtvs	r0, [r3], #-0
    9490:	01006969 	tsteq	r0, r9, ror #18
    9494:	0000cee6 	andeq	ip, r0, r6, ror #29
    9498:	0039e700 	eorseq	lr, r9, r0, lsl #14
    949c:	69742300 	ldmdbvs	r4!, {r8, r9, sp}^
    94a0:	cee70100 	cdpgt	1, 14, cr0, cr7, cr0, {0}
    94a4:	1d000000 	stcne	0, cr0, [r0, #-0]
    94a8:	2300003a 	movwcs	r0, #58	; 0x3a
    94ac:	01006463 	tsteq	r0, r3, ror #8
    94b0:	0000cee8 	andeq	ip, r0, r8, ror #29
    94b4:	003a8d00 	eorseq	r8, sl, r0, lsl #26
    94b8:	6c632300 	stclvs	3, cr2, [r3], #-0
    94bc:	cee90100 	cdpgt	1, 14, cr0, cr9, cr0, {0}
    94c0:	a0000000 	andge	r0, r0, r0
    94c4:	1500003a 	strne	r0, [r0, #-58]	; 0xffffffc6
    94c8:	00002053 	andeq	r2, r0, r3, asr r0
    94cc:	00ceea01 	sbceq	lr, lr, r1, lsl #20
    94d0:	3ab30000 	bcc	fecc94d8 <_estack+0xdecc44d8>
    94d4:	6b240000 	blvs	9094dc <__ccfg+0x8e9534>
    94d8:	ceeb0100 	cdpgt	1, 14, cr0, cr11, cr0, {0}
    94dc:	13000000 	movwne	r0, #0
    94e0:	000021aa 	andeq	r2, r0, sl, lsr #3
    94e4:	00ceec01 	sbceq	lr, lr, r1, lsl #24
    94e8:	57150000 	ldrpl	r0, [r5, -r0]
    94ec:	01000021 	tsteq	r0, r1, lsr #32
    94f0:	0000ceed 	andeq	ip, r0, sp, ror #29
    94f4:	003ad100 	eorseq	sp, sl, r0, lsl #2
    94f8:	211b1500 	tstcs	fp, r0, lsl #10
    94fc:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    9500:	000000ce 	andeq	r0, r0, lr, asr #1
    9504:	00003afa 	strdeq	r3, [r0], -sl
    9508:	00215215 	eoreq	r5, r1, r5, lsl r2
    950c:	ceef0100 	cdpgt	1, 14, cr0, cr15, cr0, {0}
    9510:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    9514:	1500003b 	strne	r0, [r0, #-59]	; 0xffffffc5
    9518:	000023aa 	andeq	r2, r0, sl, lsr #7
    951c:	07c8f001 	strbeq	pc, [r8, r1]	; <UNPREDICTABLE>
    9520:	3b5d0000 	blcc	1749528 <__ccfg+0x1729580>
    9524:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
    9528:	12000026 	andne	r0, r0, #38	; 0x26
    952c:	3b000000 	blcc	9534 <__exidx_end+0x68b4>
    9530:	26000007 	strcs	r0, [r0], -r7
    9534:	000022fa 	strdeq	r2, [r0], -sl
    9538:	c3010a01 	movwgt	r0, #6657	; 0x1a01
    953c:	75000000 	strvc	r0, [r0, #-0]
    9540:	0000003b 	andeq	r0, r0, fp, lsr r0
    9544:	0003d427 	andeq	sp, r3, r7, lsr #8
    9548:	00268400 	eoreq	r8, r6, r0, lsl #8
    954c:	00000600 	andeq	r0, r0, r0, lsl #12
    9550:	01110100 	tsteq	r1, r0, lsl #2
    9554:	00000768 	andeq	r0, r0, r8, ror #14
    9558:	0003e428 	andeq	lr, r3, r8, lsr #8
    955c:	26842900 	strcs	r2, [r4], r0, lsl #18
    9560:	00060000 	andeq	r0, r6, r0
    9564:	ef2a0000 	svc	0x002a0000
    9568:	88000003 	stmdahi	r0, {r0, r1}
    956c:	0000003b 	andeq	r0, r0, fp, lsr r0
    9570:	03d42700 	bicseq	r2, r4, #0, 14
    9574:	269c0000 	ldrcs	r0, [ip], r0
    9578:	00060000 	andeq	r0, r6, r0
    957c:	1b010000 	blne	49584 <__ccfg+0x295dc>
    9580:	00079501 	andeq	r9, r7, r1, lsl #10
    9584:	03e42800 	mvneq	r2, #0, 16
    9588:	9c290000 	stcls	0, cr0, [r9], #-0
    958c:	06000026 	streq	r0, [r0], -r6, lsr #32
    9590:	2a000000 	bcs	9598 <__exidx_end+0x6918>
    9594:	000003ef 	andeq	r0, r0, pc, ror #7
    9598:	00003b9b 	muleq	r0, fp, fp
    959c:	d42b0000 	strtle	r0, [fp], #-0
    95a0:	a6000003 	strge	r0, [r0], -r3
    95a4:	08000026 	stmdaeq	r0, {r1, r2, r5}
    95a8:	0100000f 	tsteq	r0, pc
    95ac:	07be011f 			; <UNDEFINED> instruction: 0x07be011f
    95b0:	e4280000 	strt	r0, [r8], #-0
    95b4:	2c000003 	stccs	0, cr0, [r0], {3}
    95b8:	00000f08 	andeq	r0, r0, r8, lsl #30
    95bc:	0003ef2a 	andeq	lr, r3, sl, lsr #30
    95c0:	003bae00 	eorseq	sl, fp, r0, lsl #28
    95c4:	1b000000 	blne	95cc <__exidx_end+0x694c>
    95c8:	00002650 	andeq	r2, r0, r0, asr r6
    95cc:	0000091b 	andeq	r0, r0, fp, lsl r9
    95d0:	ce040500 	cfsh32gt	mvfx0, mvfx4, #0
    95d4:	2d000007 	stccs	0, cr0, [r0, #-28]	; 0xffffffe4
    95d8:	000000ce 	andeq	r0, r0, lr, asr #1
    95dc:	00205820 	eoreq	r5, r0, r0, lsr #16
    95e0:	01170a00 	tsteq	r7, r0, lsl #20
    95e4:	00002850 	andeq	r2, r0, r0, asr r8
    95e8:	00000060 	andeq	r0, r0, r0, rrx
    95ec:	08339c01 	ldmdaeq	r3!, {r0, sl, fp, ip, pc}
    95f0:	06260000 	strteq	r0, [r6], -r0
    95f4:	01000020 	tsteq	r0, r0, lsr #32
    95f8:	00c301b8 	strheq	r0, [r3], #24
    95fc:	3bc10000 	blcc	ff049604 <_estack+0xdf044604>
    9600:	fd260000 	stc2	0, cr0, [r6, #-0]
    9604:	01000021 	tsteq	r0, r1, lsr #32
    9608:	00ce01b9 	strheq	r0, [lr], #25
    960c:	3bec0000 	blcc	ffb09614 <_estack+0xdfb04614>
    9610:	c6260000 	strtgt	r0, [r6], -r0
    9614:	01000021 	tsteq	r0, r1, lsr #32
    9618:	00ce01ba 	strheq	r0, [lr], #26
    961c:	3bff0000 	blcc	fffc9624 <_estack+0xdffc4624>
    9620:	57260000 	strpl	r0, [r6, -r0]!
    9624:	01000021 	tsteq	r0, r1, lsr #32
    9628:	00ce01bb 	strheq	r0, [lr], #27
    962c:	3c260000 	stccc	0, cr0, [r6], #-0
    9630:	5e1b0000 	cdppl	0, 1, cr0, cr11, cr0, {0}
    9634:	1b000028 	blne	96dc <__exidx_end+0x6a5c>
    9638:	00000009 	andeq	r0, r0, r9
    963c:	00247220 	eoreq	r7, r4, r0, lsr #4
    9640:	01290a00 			; <UNDEFINED> instruction: 0x01290a00
    9644:	00000000 	andeq	r0, r0, r0
    9648:	00000078 	andeq	r0, r0, r8, ror r0
    964c:	088a9c01 	stmeq	sl, {r0, sl, fp, ip, pc}
    9650:	74260000 	strtvc	r0, [r6], #-0
    9654:	01000022 	tsteq	r0, r2, lsr #32
    9658:	00ce01e7 	sbceq	r0, lr, r7, ror #3
    965c:	3c4f0000 	marcc	acc0, r0, pc
    9660:	33260000 			; <UNDEFINED> instruction: 0x33260000
    9664:	01000024 	tsteq	r0, r4, lsr #32
    9668:	00ce01e8 	sbceq	r0, lr, r8, ror #3
    966c:	3c620000 	stclcc	0, cr0, [r2], #-0
    9670:	5f260000 	svcpl	0x00260000
    9674:	0100001a 	tsteq	r0, sl, lsl r0
    9678:	00ce01e9 	sbceq	r0, lr, r9, ror #3
    967c:	3c750000 	ldclcc	0, cr0, [r5], #-0
    9680:	45260000 	strmi	r0, [r6, #-0]!
    9684:	01000023 	tsteq	r0, r3, lsr #32
    9688:	00ce01ea 	sbceq	r0, lr, sl, ror #3
    968c:	3c880000 	stccc	0, cr0, [r8], {0}
    9690:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    9694:	000020f3 	strdeq	r2, [r0], -r3
    9698:	ce01420a 	cdpgt	2, 0, cr4, cr1, cr10, {0}
    969c:	b0000000 	andlt	r0, r0, r0
    96a0:	18000028 	stmdane	r0, {r3, r5}
    96a4:	01000000 	mrseq	r0, (UNDEF: 0)
    96a8:	24bc229c 	ldrtcs	r2, [ip], #668	; 0x29c
    96ac:	55010000 	strpl	r0, [r1, #-0]
    96b0:	00000399 	muleq	r0, r9, r3
    96b4:	004c0305 	subeq	r0, ip, r5, lsl #6
    96b8:	ce2f2000 	cdpgt	0, 2, cr2, cr15, cr0, {0}
    96bc:	c1000000 	mrsgt	r0, (UNDEF: 0)
    96c0:	30000008 	andcc	r0, r0, r8
    96c4:	000008c1 	andeq	r0, r0, r1, asr #17
    96c8:	0403000c 	streq	r0, [r3], #-12
    96cc:	00186407 	andseq	r6, r8, r7, lsl #8
    96d0:	23022200 	movwcs	r2, #8704	; 0x2200
    96d4:	61010000 	mrsvs	r0, (UNDEF: 1)
    96d8:	000008d9 	ldrdeq	r0, [r0], -r9
    96dc:	00000305 	andeq	r0, r0, r5, lsl #6
    96e0:	b12d0000 			; <UNDEFINED> instruction: 0xb12d0000
    96e4:	31000008 	tstcc	r0, r8
    96e8:	000020ca 	andeq	r2, r0, sl, asr #1
    96ec:	08ef9909 	stmiaeq	pc!, {r0, r3, r8, fp, ip, pc}^	; <UNPREDICTABLE>
    96f0:	d9080000 	stmdble	r8, {}	; <UNPREDICTABLE>
    96f4:	00000000 	andeq	r0, r0, r0
    96f8:	001afc31 	andseq	pc, sl, r1, lsr ip	; <UNPREDICTABLE>
    96fc:	05f90300 	ldrbeq	r0, [r9, #768]!	; 0x300
    9700:	08000009 	stmdaeq	r0, {r0, r3}
    9704:	000000ce 	andeq	r0, r0, lr, asr #1
    9708:	0000ce08 	andeq	ip, r0, r8, lsl #28
    970c:	97320000 	ldrls	r0, [r2, -r0]!
    9710:	0300001e 	movweq	r0, #30
    9714:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    9718:	091b0000 	ldmdbeq	fp, {}	; <UNPREDICTABLE>
    971c:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    9720:	00000000 	andeq	r0, r0, r0
    9724:	00160633 	andseq	r0, r6, r3, lsr r6
    9728:	c3aa0b00 			; <UNDEFINED> instruction: 0xc3aa0b00
    972c:	00000000 	andeq	r0, r0, r0
    9730:	000003cc 	andeq	r0, r0, ip, asr #7
    9734:	2cda0004 	ldclcs	0, cr0, [sl], {4}
    9738:	01040000 	mrseq	r0, (UNDEF: 4)
    973c:	0000163f 	andeq	r1, r0, pc, lsr r6
    9740:	0027c501 	eoreq	ip, r7, r1, lsl #10
    9744:	00173400 	andseq	r3, r7, r0, lsl #8
    9748:	000f8000 	andeq	r8, pc, r0
    974c:	00000000 	andeq	r0, r0, r0
    9750:	0065fa00 	rsbeq	pc, r5, r0, lsl #20
    9754:	06010200 	streq	r0, [r1], -r0, lsl #4
    9758:	00000392 	muleq	r0, r2, r3
    975c:	90080102 	andls	r0, r8, r2, lsl #2
    9760:	02000003 	andeq	r0, r0, #3
    9764:	03cc0502 	biceq	r0, ip, #8388608	; 0x800000
    9768:	02020000 	andeq	r0, r2, #0
    976c:	00026007 	andeq	r6, r2, r7
    9770:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    9774:	0000009d 	muleq	r0, sp, r0
    9778:	0017a003 	andseq	sl, r7, r3
    977c:	53410300 	movtpl	r0, #4864	; 0x1300
    9780:	02000000 	andeq	r0, r0, #0
    9784:	00720704 	rsbseq	r0, r2, r4, lsl #14
    9788:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    978c:	00009805 	andeq	r9, r0, r5, lsl #16
    9790:	07080200 	streq	r0, [r8, -r0, lsl #4]
    9794:	0000006d 	andeq	r0, r0, sp, rrx
    9798:	69050404 	stmdbvs	r5, {r2, sl}
    979c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    97a0:	00770704 	rsbseq	r0, r7, r4, lsl #14
    97a4:	a2030000 	andge	r0, r3, #0
    97a8:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    97ac:	00004820 	andeq	r4, r0, r0, lsr #16
    97b0:	02010500 	andeq	r0, r1, #0, 10
    97b4:	0000a263 	andeq	sl, r0, r3, ror #4
    97b8:	26ff0600 	ldrbtcs	r0, [pc], r0, lsl #12
    97bc:	06000000 	streq	r0, [r0], -r0
    97c0:	0000273f 	andeq	r2, r0, pc, lsr r7
    97c4:	26af0602 	strtcs	r0, [pc], r2, lsl #12
    97c8:	06040000 	streq	r0, [r4], -r0
    97cc:	000024ef 	andeq	r2, r0, pc, ror #9
    97d0:	9b030008 	blls	c97f8 <__ccfg+0xa9850>
    97d4:	02000026 	andeq	r0, r0, #38	; 0x26
    97d8:	00008168 	andeq	r8, r0, r8, ror #2
    97dc:	02010500 	andeq	r0, r1, #0, 10
    97e0:	0000daa5 	andeq	sp, r0, r5, lsr #21
    97e4:	27b50600 	ldrcs	r0, [r5, r0, lsl #12]!
    97e8:	067f0000 	ldrbteq	r0, [pc], -r0
    97ec:	00002507 	andeq	r2, r0, r7, lsl #10
    97f0:	28660600 	stmdacs	r6!, {r9, sl}^
    97f4:	06010000 	streq	r0, [r1], -r0
    97f8:	000026f3 	strdeq	r2, [r0], -r3
    97fc:	28580602 	ldmdacs	r8, {r1, r9, sl}^
    9800:	06030000 	streq	r0, [r3], -r0
    9804:	000025ec 	andeq	r2, r0, ip, ror #11
    9808:	72030004 	andvc	r0, r3, #4
    980c:	02000028 	andeq	r0, r0, #40	; 0x28
    9810:	0000adac 	andeq	sl, r0, ip, lsr #27
    9814:	02010700 	andeq	r0, r1, #0, 14
    9818:	0125013d 			; <UNDEFINED> instruction: 0x0125013d
    981c:	c9060000 	stmdbgt	r6, {}	; <UNPREDICTABLE>
    9820:	7f000026 	svcvc	0x00000026
    9824:	0025b706 	eoreq	fp, r5, r6, lsl #14
    9828:	13060000 	movwne	r0, #24576	; 0x6000
    982c:	01000026 	tsteq	r0, r6, lsr #32
    9830:	00264f06 	eoreq	r4, r6, r6, lsl #30
    9834:	9a060200 	bls	18a03c <__ccfg+0x16a094>
    9838:	03000027 	movweq	r0, #39	; 0x27
    983c:	00251306 	eoreq	r1, r5, r6, lsl #6
    9840:	db060400 	blle	18a848 <__ccfg+0x16a8a0>
    9844:	05000025 	streq	r0, [r0, #-37]	; 0xffffffdb
    9848:	00277406 	eoreq	r7, r7, r6, lsl #8
    984c:	87060600 	strhi	r0, [r6, -r0, lsl #12]
    9850:	07000027 	streq	r0, [r0, -r7, lsr #32]
    9854:	259f0800 	ldrcs	r0, [pc, #2048]	; a05c <__exidx_end+0x73dc>
    9858:	47020000 	strmi	r0, [r2, -r0]
    985c:	0000e501 	andeq	lr, r0, r1, lsl #10
    9860:	02010700 	andeq	r0, r1, #0, 14
    9864:	015f0159 	cmpeq	pc, r9, asr r1	; <UNPREDICTABLE>
    9868:	40060000 	andmi	r0, r6, r0
    986c:	7f000026 	svcvc	0x00000026
    9870:	00266906 	eoreq	r6, r6, r6, lsl #18
    9874:	e5060000 	str	r0, [r6, #-0]
    9878:	01000026 	tsteq	r0, r6, lsr #32
    987c:	00252c06 	eoreq	r2, r5, r6, lsl #24
    9880:	4f060200 	svcmi	0x00060200
    9884:	03000027 	movweq	r0, #39	; 0x27
    9888:	00260206 	eoreq	r0, r6, r6, lsl #4
    988c:	08000400 	stmdaeq	r0, {sl}
    9890:	000025c8 	andeq	r2, r0, r8, asr #11
    9894:	31016002 	tstcc	r1, r2
    9898:	07000001 	streq	r0, [r0, -r1]
    989c:	01b80201 			; <UNDEFINED> instruction: 0x01b80201
    98a0:	00000199 	muleq	r0, r9, r1
    98a4:	00267f06 	eoreq	r7, r6, r6, lsl #30
    98a8:	ab067f00 	blge	1a94b0 <__ccfg+0x189508>
    98ac:	0a000027 	beq	9950 <__exidx_end+0x6cd0>
    98b0:	00271006 	eoreq	r1, r7, r6
    98b4:	35061400 	strcc	r1, [r6, #-1024]	; 0xfffffc00
    98b8:	15000027 	strne	r0, [r0, #-39]	; 0xffffffd9
    98bc:	0026db06 	eoreq	sp, r6, r6, lsl #22
    98c0:	61061600 	tstvs	r6, r0, lsl #12
    98c4:	17000027 	strne	r0, [r0, -r7, lsr #32]
    98c8:	25aa0800 	strcs	r0, [sl, #2048]!	; 0x800
    98cc:	bf020000 	svclt	0x00020000
    98d0:	00016b01 	andeq	r6, r1, r1, lsl #22
    98d4:	27f10900 	ldrbcs	r0, [r1, r0, lsl #18]!
    98d8:	07020000 	streq	r0, [r2, -r0]
    98dc:	00007601 	andeq	r7, r0, r1, lsl #12
    98e0:	3e0a0300 	cdpcc	3, 0, cr0, cr10, cr0, {0}
    98e4:	02000025 	andeq	r0, r0, #37	; 0x25
    98e8:	015f016a 	cmpeq	pc, sl, ror #2
    98ec:	da010000 	ble	498f4 <__ccfg+0x2994c>
    98f0:	0b000001 	bleq	98fc <__exidx_end+0x6c7c>
    98f4:	00002677 	andeq	r2, r0, r7, ror r6
    98f8:	015f6801 	cmpeq	pc, r1, lsl #16
    98fc:	240b0000 	strcs	r0, [fp], #-0
    9900:	01000025 	tsteq	r0, r5, lsr #32
    9904:	00007669 	andeq	r7, r0, r9, ror #12
    9908:	9f090000 	svcls	0x00090000
    990c:	02000028 	andeq	r0, r0, #40	; 0x28
    9910:	00760132 	rsbseq	r0, r6, r2, lsr r1
    9914:	0c030000 	stceq	0, cr0, [r3], {-0}
    9918:	00002831 	andeq	r2, r0, r1, lsr r8
    991c:	00a27202 	adceq	r7, r2, r2, lsl #4
    9920:	00000000 	andeq	r0, r0, r0
    9924:	00100000 	andseq	r0, r0, r0
    9928:	9c010000 	stcls	0, cr0, [r1], {-0}
    992c:	00255b0d 	eoreq	r5, r5, sp, lsl #22
    9930:	dab60200 	ble	fed8a138 <_estack+0xded85138>
    9934:	00000000 	andeq	r0, r0, r0
    9938:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    993c:	01000000 	mrseq	r0, (UNDEF: 0)
    9940:	0002259c 	muleq	r2, ip, r5
    9944:	25960e00 	ldrcs	r0, [r6, #3584]	; 0xe00
    9948:	52010000 	andpl	r0, r1, #0
    994c:	000000da 	ldrdeq	r0, [r0], -sl
    9950:	00003c9b 	muleq	r0, fp, ip
    9954:	01b20f00 			; <UNDEFINED> instruction: 0x01b20f00
    9958:	28c80000 	stmiacs	r8, {}^	; <UNPREDICTABLE>
    995c:	004c0000 	subeq	r0, ip, r0
    9960:	9c010000 	stcls	0, cr0, [r1], {-0}
    9964:	0000026e 	andeq	r0, r0, lr, ror #4
    9968:	0001c310 	andeq	ip, r1, r0, lsl r3
    996c:	003cc300 	eorseq	ip, ip, r0, lsl #6
    9970:	01ce1000 	biceq	r1, lr, r0
    9974:	3ce30000 	stclcc	0, cr0, [r3]
    9978:	d8110000 	ldmdale	r1, {}	; <UNPREDICTABLE>
    997c:	0e000028 	cdpeq	0, 0, cr0, cr0, cr8, {1}
    9980:	12000000 	andne	r0, r0, #0
    9984:	000001c3 	andeq	r0, r0, r3, asr #3
    9988:	0001ce12 	andeq	ip, r1, r2, lsl lr
    998c:	01a51300 			; <UNDEFINED> instruction: 0x01a51300
    9990:	28d80000 	ldmcs	r8, {}^	; <UNPREDICTABLE>
    9994:	00040000 	andeq	r0, r4, r0
    9998:	70010000 	andvc	r0, r1, r0
    999c:	1a140000 	bne	5099a4 <__ccfg+0x4e99fc>
    99a0:	02000027 	andeq	r0, r0, #39	; 0x27
    99a4:	01250151 			; <UNDEFINED> instruction: 0x01250151
    99a8:	00000000 	andeq	r0, r0, r0
    99ac:	00300000 	eorseq	r0, r0, r0
    99b0:	9c010000 	stcls	0, cr0, [r1], {-0}
    99b4:	000002ca 	andeq	r0, r0, sl, asr #5
    99b8:	00276b0e 	eoreq	r6, r7, lr, lsl #22
    99bc:	25850100 	strcs	r0, [r5, #256]	; 0x100
    99c0:	17000001 	strne	r0, [r0, -r1]
    99c4:	0b00003d 	bleq	9ac0 <__exidx_end+0x6e40>
    99c8:	000027e5 	andeq	r2, r0, r5, ror #15
    99cc:	00768601 	rsbseq	r8, r6, r1, lsl #12
    99d0:	8d0e0000 	stchi	0, cr0, [lr, #-0]
    99d4:	01000026 	tsteq	r0, r6, lsr #32
    99d8:	00007687 	andeq	r7, r0, r7, lsl #13
    99dc:	003d3700 	eorseq	r3, sp, r0, lsl #14
    99e0:	01da1300 	bicseq	r1, sl, r0, lsl #6
    99e4:	00000000 	andeq	r0, r0, r0
    99e8:	00040000 	andeq	r0, r4, r0
    99ec:	86010000 	strhi	r0, [r1], -r0
    99f0:	00000015 	andeq	r0, r0, r5, lsl r0
    99f4:	0001b200 	andeq	fp, r1, r0, lsl #4
    99f8:	0f160000 	svceq	0x00160000
    99fc:	02000028 	andeq	r0, r0, #40	; 0x28
    9a00:	00760119 	rsbseq	r0, r6, r9, lsl r1
    9a04:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    9a08:	17000002 	strne	r0, [r0, -r2]
    9a0c:	000025f9 	strdeq	r2, [r0], -r9
    9a10:	76011b02 	strvc	r1, [r1], -r2, lsl #22
    9a14:	00000000 	andeq	r0, r0, r0
    9a18:	00257914 	eoreq	r7, r5, r4, lsl r9
    9a1c:	01c90200 	biceq	r0, r9, r0, lsl #4
    9a20:	00000199 	muleq	r0, r9, r1
    9a24:	00002914 	andeq	r2, r0, r4, lsl r9
    9a28:	0000006c 	andeq	r0, r0, ip, rrx
    9a2c:	03659c01 	cmneq	r5, #256	; 0x100
    9a30:	d50e0000 	strle	r0, [lr, #-0]
    9a34:	01000025 	tsteq	r0, r5, lsr #32
    9a38:	000199a8 	andeq	r9, r1, r8, lsr #19
    9a3c:	003d4a00 	eorseq	r4, sp, r0, lsl #20
    9a40:	26600b00 	strbtcs	r0, [r0], -r0, lsl #22
    9a44:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9a48:	00000076 	andeq	r0, r0, r6, ror r0
    9a4c:	00282618 	eoreq	r2, r8, r8, lsl r6
    9a50:	76aa0100 	strtvc	r0, [sl], r0, lsl #2
    9a54:	01000000 	mrseq	r0, (UNDEF: 0)
    9a58:	01a51954 			; <UNDEFINED> instruction: 0x01a51954
    9a5c:	29160000 	ldmdbcs	r6, {}	; <UNPREDICTABLE>
    9a60:	0f500000 	svceq	0x00500000
    9a64:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9a68:	0002ca1a 	andeq	ip, r2, sl, lsl sl
    9a6c:	00291a00 	eoreq	r1, r9, r0, lsl #20
    9a70:	000f6800 	andeq	r6, pc, r0, lsl #16
    9a74:	5baa0100 	blpl	fea89e7c <_estack+0xdea84e7c>
    9a78:	1b000003 	blne	9a8c <__exidx_end+0x6e0c>
    9a7c:	00000f68 	andeq	r0, r0, r8, ror #30
    9a80:	0002db10 	andeq	sp, r2, r0, lsl fp
    9a84:	003da700 	eorseq	sl, sp, r0, lsl #14
    9a88:	15000000 	strne	r0, [r0, #-0]
    9a8c:	0000292e 	andeq	r2, r0, lr, lsr #18
    9a90:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9a94:	26240900 	strtcs	r0, [r4], -r0, lsl #18
    9a98:	83020000 	movwhi	r0, #8192	; 0x2000
    9a9c:	00037201 	andeq	r7, r3, r1, lsl #4
    9aa0:	01020300 	mrseq	r0, LR_svc
    9aa4:	000ba702 	andeq	sl, fp, r2, lsl #14
    9aa8:	28800900 	stmcs	r0, {r8, fp}
    9aac:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
    9ab0:	00037201 	andeq	r7, r3, r1, lsl #4
    9ab4:	a81c0300 	ldmdage	ip, {r8, r9}
    9ab8:	0200001a 	andeq	r0, r0, #26
    9abc:	29800243 	stmibcs	r0, {r0, r1, r6, r9}
    9ac0:	00160000 	andseq	r0, r6, r0
    9ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9ac8:	0003651d 	andeq	r6, r3, sp, lsl r5
    9acc:	00298200 	eoreq	r8, r9, r0, lsl #4
    9ad0:	00000400 	andeq	r0, r0, r0, lsl #8
    9ad4:	b5e20100 	strblt	r0, [r2, #256]!	; 0x100
    9ad8:	15000003 	strne	r0, [r0, #-3]
    9adc:	00002986 	andeq	r2, r0, r6, lsl #19
    9ae0:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    9ae4:	03791e00 	cmneq	r9, #0, 28
    9ae8:	298a0000 	stmibcs	sl, {}	; <UNPREDICTABLE>
    9aec:	00040000 	andeq	r0, r4, r0
    9af0:	e3010000 	movw	r0, #4096	; 0x1000
    9af4:	00298e15 	eoreq	r8, r9, r5, lsl lr
    9af8:	0002e800 	andeq	lr, r2, r0, lsl #16
    9afc:	00000000 	andeq	r0, r0, r0
    9b00:	000005a7 	andeq	r0, r0, r7, lsr #11
    9b04:	2ea80004 	cdpcs	0, 10, cr0, cr8, cr4, {0}
    9b08:	01040000 	mrseq	r0, (UNDEF: 4)
    9b0c:	0000163f 	andeq	r1, r0, pc, lsr r6
    9b10:	00297701 	eoreq	r7, r9, r1, lsl #14
    9b14:	00173400 	andseq	r3, r7, r0, lsl #8
    9b18:	000fb800 	andeq	fp, pc, r0, lsl #16
    9b1c:	00000000 	andeq	r0, r0, r0
    9b20:	00682900 	rsbeq	r2, r8, r0, lsl #18
    9b24:	06010200 	streq	r0, [r1], -r0, lsl #4
    9b28:	00000392 	muleq	r0, r2, r3
    9b2c:	0021e903 	eoreq	lr, r1, r3, lsl #18
    9b30:	371d0300 	ldrcc	r0, [sp, -r0, lsl #6]
    9b34:	02000000 	andeq	r0, r0, #0
    9b38:	03900801 	orrseq	r0, r0, #65536	; 0x10000
    9b3c:	02020000 	andeq	r0, r2, #0
    9b40:	0003cc05 	andeq	ip, r3, r5, lsl #24
    9b44:	20d70300 	sbcscs	r0, r7, r0, lsl #6
    9b48:	2b030000 	blcs	c9b50 <__ccfg+0xa9ba8>
    9b4c:	00000050 	andeq	r0, r0, r0, asr r0
    9b50:	60070202 	andvs	r0, r7, r2, lsl #4
    9b54:	02000002 	andeq	r0, r0, #2
    9b58:	009d0504 	addseq	r0, sp, r4, lsl #10
    9b5c:	a0030000 	andge	r0, r3, r0
    9b60:	03000017 	movweq	r0, #23
    9b64:	00006941 	andeq	r6, r0, r1, asr #18
    9b68:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b6c:	00000072 	andeq	r0, r0, r2, ror r0
    9b70:	98050802 	stmdals	r5, {r1, fp}
    9b74:	02000000 	andeq	r0, r0, #0
    9b78:	006d0708 	rsbeq	r0, sp, r8, lsl #14
    9b7c:	04040000 	streq	r0, [r4], #-0
    9b80:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    9b84:	07040200 	streq	r0, [r4, -r0, lsl #4]
    9b88:	00000077 	andeq	r0, r0, r7, ror r0
    9b8c:	0021eb03 	eoreq	lr, r1, r3, lsl #22
    9b90:	2c140400 	cfldrscs	mvf0, [r4], {-0}
    9b94:	03000000 	movweq	r0, #0
    9b98:	000020d9 	ldrdeq	r2, [r0], -r9
    9b9c:	00451a04 	subeq	r1, r5, r4, lsl #20
    9ba0:	a2030000 	andge	r0, r3, #0
    9ba4:	04000017 	streq	r0, [r0], #-23	; 0xffffffe9
    9ba8:	00005e20 	andeq	r5, r0, r0, lsr #28
    9bac:	28f00500 	ldmcs	r0!, {r8, sl}^
    9bb0:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9bb4:	0000e603 	andeq	lr, r0, r3, lsl #12
    9bb8:	28d20600 	ldmcs	r2, {r9, sl}^
    9bbc:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    9bc0:	000000a2 	andeq	r0, r0, r2, lsr #1
    9bc4:	00294306 	eoreq	r4, r9, r6, lsl #6
    9bc8:	a2890100 	addge	r0, r9, #0, 2
    9bcc:	06000000 	streq	r0, [r0], -r0
    9bd0:	000029b3 			; <UNDEFINED> instruction: 0x000029b3
    9bd4:	00a28901 	adceq	r8, r2, r1, lsl #18
    9bd8:	a7070000 	strge	r0, [r7, -r0]
    9bdc:	01000029 	tsteq	r0, r9, lsr #32
    9be0:	0000e68c 	andeq	lr, r0, ip, lsl #13
    9be4:	01020000 	mrseq	r0, (UNDEF: 2)
    9be8:	000ba702 	andeq	sl, fp, r2, lsl #14
    9bec:	29510800 	ldmdbcs	r1, {fp}^
    9bf0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9bf4:	000000a2 	andeq	r0, r0, r2, lsr #1
    9bf8:	00012a03 	andeq	r2, r1, r3, lsl #20
    9bfc:	28d20600 	ldmcs	r2, {r9, sl}^
    9c00:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    9c04:	000000a2 	andeq	r0, r0, r2, lsr #1
    9c08:	0029b306 	eoreq	fp, r9, r6, lsl #6
    9c0c:	a2a90100 	adcge	r0, r9, #0, 2
    9c10:	07000000 	streq	r0, [r0, -r0]
    9c14:	000028eb 	andeq	r2, r0, fp, ror #17
    9c18:	00a2ab01 	adceq	sl, r2, r1, lsl #22
    9c1c:	a7070000 	strge	r0, [r7, -r0]
    9c20:	01000029 	tsteq	r0, r9, lsr #32
    9c24:	0000e6ad 	andeq	lr, r0, sp, lsr #13
    9c28:	ad090000 	stcge	0, cr0, [r9, #-0]
    9c2c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    9c30:	28000029 	stmdacs	r0, {r0, r3, r5}
    9c34:	01000000 	mrseq	r0, (UNDEF: 0)
    9c38:	0001719c 	muleq	r1, ip, r1
    9c3c:	00b90a00 	adcseq	r0, r9, r0, lsl #20
    9c40:	3dba0000 	ldccc	0, cr0, [sl]
    9c44:	c40a0000 	strgt	r0, [sl], #-0
    9c48:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    9c4c:	0b00003d 	bleq	9d48 <__exidx_end+0x70c8>
    9c50:	000000da 	ldrdeq	r0, [r0], -sl
    9c54:	00003e44 	andeq	r3, r0, r4, asr #28
    9c58:	0000cf0c 	andeq	ip, r0, ip, lsl #30
    9c5c:	a20d0400 	andge	r0, sp, #0, 8
    9c60:	94000029 	strls	r0, [r0], #-41	; 0xffffffd7
    9c64:	0e000005 	cdpeq	0, 0, cr0, cr0, cr5, {0}
    9c68:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    9c6c:	0000059f 	muleq	r0, pc, r5	; <UNPREDICTABLE>
    9c70:	1cda0f00 	ldclne	15, cr0, [sl], {0}
    9c74:	ca010000 	bgt	49c7c <__ccfg+0x29cd4>
    9c78:	0029c001 	eoreq	ip, r9, r1
    9c7c:	00000800 	andeq	r0, r0, r0, lsl #16
    9c80:	d19c0100 	orrsle	r0, ip, r0, lsl #2
    9c84:	10000001 	andne	r0, r0, r1
    9c88:	00000720 	andeq	r0, r0, r0, lsr #14
    9c8c:	00a24202 	adceq	r4, r2, r2, lsl #4
    9c90:	3e6a0000 	cdpcc	0, 6, cr0, cr10, cr0, {0}
    9c94:	b2100000 	andslt	r0, r0, #0
    9c98:	02000028 	andeq	r0, r0, #40	; 0x28
    9c9c:	0000a242 	andeq	sl, r0, r2, asr #4
    9ca0:	003e8b00 	eorseq	r8, lr, r0, lsl #22
    9ca4:	29491000 	stmdbcs	r9, {ip}^
    9ca8:	43020000 	movwmi	r0, #8192	; 0x2000
    9cac:	000000a2 	andeq	r0, r0, r2, lsr #1
    9cb0:	00003eac 	andeq	r3, r0, ip, lsr #29
    9cb4:	0029c811 	eoreq	ip, r9, r1, lsl r8
    9cb8:	00012a00 	andeq	r2, r1, r0, lsl #20
    9cbc:	51011200 	mrspl	r1, R9_usr
    9cc0:	5201f303 	andpl	pc, r1, #201326592	; 0xc000000
    9cc4:	07500112 	smmlaeq	r0, r2, r1, r0
    9cc8:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    9ccc:	00225101 	eoreq	r5, r2, r1, lsl #2
    9cd0:	29630f00 	stmdbcs	r3!, {r8, r9, sl, fp}^
    9cd4:	df010000 	svcle	0x00010000
    9cd8:	00000001 	andeq	r0, r0, r1
    9cdc:	00002200 	andeq	r2, r0, r0, lsl #4
    9ce0:	ea9c0100 	b	fe70a0e8 <_estack+0xde7050e8>
    9ce4:	10000002 	andne	r0, r0, r2
    9ce8:	00000720 	andeq	r0, r0, r0, lsr #14
    9cec:	00a25702 	adceq	r5, r2, r2, lsl #14
    9cf0:	3ecd0000 	cdpcc	0, 12, cr0, cr13, cr0, {0}
    9cf4:	b2100000 	andslt	r0, r0, #0
    9cf8:	02000028 	andeq	r0, r0, #40	; 0x28
    9cfc:	0000a257 	andeq	sl, r0, r7, asr r2
    9d00:	003eee00 	eorseq	lr, lr, r0, lsl #28
    9d04:	29921000 	ldmibcs	r2, {ip}
    9d08:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
    9d0c:	000000a2 	andeq	r0, r0, r2, lsr #1
    9d10:	00003f0f 	andeq	r3, r0, pc, lsl #30
    9d14:	00290c10 	eoreq	r0, r9, r0, lsl ip
    9d18:	a2580200 	subsge	r0, r8, #0, 4
    9d1c:	5a000000 	bpl	9d24 <__exidx_end+0x70a4>
    9d20:	1300003f 	movwne	r0, #63	; 0x3f
    9d24:	0000299b 	muleq	r0, fp, r9
    9d28:	00a25a02 	adceq	r5, r2, r2, lsl #20
    9d2c:	3f7b0000 	svccc	0x007b0000
    9d30:	17130000 	ldrne	r0, [r3, -r0]
    9d34:	02000029 	andeq	r0, r0, #41	; 0x29
    9d38:	0000a25b 	andeq	sl, r0, fp, asr r2
    9d3c:	00400f00 	subeq	r0, r0, r0, lsl #30
    9d40:	00001100 	andeq	r1, r0, r0, lsl #2
    9d44:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    9d48:	01120000 	tsteq	r2, r0
    9d4c:	01f34551 	mvnseq	r4, r1, asr r5
    9d50:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    9d54:	01f35201 	mvnseq	r5, r1, lsl #4
    9d58:	30254052 	eorcc	r4, r5, r2, asr r0
    9d5c:	0001282e 	andeq	r2, r1, lr, lsr #16
    9d60:	24401316 	strbcs	r1, [r0], #-790	; 0xfffffcea
    9d64:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    9d68:	01f32540 	mvnseq	r2, r0, asr #10
    9d6c:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    9d70:	2e302540 	cfneg32cs	mvfx2, mvfx0
    9d74:	16000128 	strne	r0, [r0], -r8, lsr #2
    9d78:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    9d7c:	01f32540 	mvnseq	r2, r0, asr #10
    9d80:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    9d84:	13160001 	tstne	r6, #1
    9d88:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    9d8c:	00012829 	andeq	r2, r1, r9, lsr #16
    9d90:	12211316 	eorne	r1, r1, #1476395008	; 0x58000000
    9d94:	f3515001 	vhadd.u16	d21, d1, d1
    9d98:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9d9c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9da0:	f3048023 	vhadd.u8	d8, d4, d19
    9da4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9da8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9dac:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9db0:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    9db4:	13160001 	tstne	r6, #1
    9db8:	f3048423 	vshl.u8	d8, d19, d4
    9dbc:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9dc0:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9dc4:	f3048023 	vhadd.u8	d8, d4, d19
    9dc8:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    9dcc:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    9dd0:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9dd4:	28293025 	stmdacs	r9!, {r0, r2, r5, ip, sp}
    9dd8:	13160001 	tstne	r6, #1
    9ddc:	405201f3 	ldrshmi	r0, [r2], #-19	; 0xffffffed
    9de0:	282e3025 	stmdacs	lr!, {r0, r2, r5, ip, sp}
    9de4:	13160001 	tstne	r6, #1
    9de8:	2a0f0000 	bcs	3c9df0 <__ccfg+0x3a9e48>
    9dec:	01000029 	tsteq	r0, r9, lsr #32
    9df0:	000001f6 	strdeq	r0, [r0], -r6
    9df4:	002e0000 	eoreq	r0, lr, r0
    9df8:	9c010000 	stcls	0, cr0, [r1], {-0}
    9dfc:	0000041f 	andeq	r0, r0, pc, lsl r4
    9e00:	00072010 	andeq	r2, r7, r0, lsl r0
    9e04:	a2830200 	addge	r0, r3, #0, 4
    9e08:	5b000000 	blpl	9e10 <__exidx_end+0x7190>
    9e0c:	10000040 	andne	r0, r0, r0, asr #32
    9e10:	000028b2 			; <UNDEFINED> instruction: 0x000028b2
    9e14:	00a28302 	adceq	r8, r2, r2, lsl #6
    9e18:	407c0000 	rsbsmi	r0, ip, r0
    9e1c:	92100000 	andsls	r0, r0, #0
    9e20:	02000029 	andeq	r0, r0, #41	; 0x29
    9e24:	0000a284 	andeq	sl, r0, r4, lsl #5
    9e28:	00409d00 	subeq	r9, r0, r0, lsl #26
    9e2c:	29201000 	stmdbcs	r0!, {ip}
    9e30:	84020000 	strhi	r0, [r2], #-0
    9e34:	000000a2 	andeq	r0, r0, r2, lsr #1
    9e38:	000040ee 	andeq	r4, r0, lr, ror #1
    9e3c:	00291710 	eoreq	r1, r9, r0, lsl r7
    9e40:	97850200 	strls	r0, [r5, r0, lsl #4]
    9e44:	3f000000 	svccc	0x00000000
    9e48:	13000041 	movwne	r0, #65	; 0x41
    9e4c:	0000299b 	muleq	r0, fp, r9
    9e50:	00a28702 	adceq	r8, r2, r2, lsl #14
    9e54:	415f0000 	cmpmi	pc, r0
    9e58:	0c130000 	ldceq	0, cr0, [r3], {-0}
    9e5c:	02000029 	andeq	r0, r0, #41	; 0x29
    9e60:	0000a288 	andeq	sl, r0, r8, lsl #5
    9e64:	00420500 	subeq	r0, r2, r0, lsl #10
    9e68:	00001100 	andeq	r1, r0, r0, lsl #2
    9e6c:	012a0000 			; <UNDEFINED> instruction: 0x012a0000
    9e70:	01120000 	tsteq	r2, r0
    9e74:	01f34051 	mvnseq	r4, r1, asr r0
    9e78:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    9e7c:	01f35201 	mvnseq	r5, r1, lsl #4
    9e80:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9e84:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9e88:	282b8000 	stmdacs	fp!, {pc}
    9e8c:	13160001 	tstne	r6, #1
    9e90:	007d2440 	rsbseq	r2, sp, r0, asr #8
    9e94:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    9e98:	01f31aff 	ldrsheq	r1, [r3, #175]!	; 0xaf
    9e9c:	f31c4053 	vqadd.u16	q2, q6, <illegal reg q1.5>
    9ea0:	01f35301 	mvnseq	r5, r1, lsl #6
    9ea4:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    9ea8:	000f0c22 	andeq	r0, pc, r2, lsr #24
    9eac:	282b8000 	stmdacs	fp!, {pc}
    9eb0:	13160001 	tstne	r6, #1
    9eb4:	01122124 	tsteq	r2, r4, lsr #2
    9eb8:	01f36350 	mvnseq	r6, r0, asr r3
    9ebc:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9ec0:	23225001 			; <UNDEFINED> instruction: 0x23225001
    9ec4:	01f30480 	mvnseq	r0, r0, lsl #9
    9ec8:	f3243151 	vbit	<illegal reg q1.5>, q2, <illegal reg q0.5>
    9ecc:	f3225001 	vhadd.u32	d5, d2, d1
    9ed0:	4b405301 	blmi	101eadc <__ccfg+0xffeb34>
    9ed4:	0f0c2224 	svceq	0x000c2224
    9ed8:	2c800000 	stccs	0, cr0, [r0], {0}
    9edc:	16000128 	strne	r0, [r0], -r8, lsr #2
    9ee0:	04842313 	streq	r2, [r4], #787	; 0x313
    9ee4:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ee8:	5001f324 	andpl	pc, r1, r4, lsr #6
    9eec:	04802322 	streq	r2, [r0], #802	; 0x322
    9ef0:	315101f3 	ldrshcc	r0, [r1, #-19]	; 0xffffffed
    9ef4:	5001f324 	andpl	pc, r1, r4, lsr #6
    9ef8:	5301f322 	movwpl	pc, #4898	; 0x1322	; <UNPREDICTABLE>
    9efc:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    9f00:	00000f0c 	andeq	r0, r0, ip, lsl #30
    9f04:	01282c80 	smlawbeq	r8, r0, ip, r2
    9f08:	f3131600 	vmax.u16	d1, d3, d0
    9f0c:	4b405301 	blmi	101eb18 <__ccfg+0xffeb70>
    9f10:	0f0c2224 	svceq	0x000c2224
    9f14:	2b800000 	blcs	fe009f1c <_estack+0xde004f1c>
    9f18:	16000128 	strne	r0, [r0], -r8, lsr #2
    9f1c:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    9f20:	000028d8 	ldrdeq	r2, [r0], -r8
    9f24:	97020801 	strls	r0, [r2, -r1, lsl #16]
    9f28:	00000000 	andeq	r0, r0, r0
    9f2c:	34000000 	strcc	r0, [r0], #-0
    9f30:	01000000 	mrseq	r0, (UNDEF: 0)
    9f34:	0004d29c 	muleq	r4, ip, r2
    9f38:	07201000 	streq	r1, [r0, -r0]!
    9f3c:	af020000 	svcge	0x00020000
    9f40:	000000a2 	andeq	r0, r0, r2, lsr #1
    9f44:	00004265 	andeq	r4, r0, r5, ror #4
    9f48:	0028b210 	eoreq	fp, r8, r0, lsl r2
    9f4c:	a2af0200 	adcge	r0, pc, #0, 4
    9f50:	86000000 	strhi	r0, [r0], -r0
    9f54:	10000042 	andne	r0, r0, r2, asr #32
    9f58:	00002992 	muleq	r0, r2, r9
    9f5c:	00a2af02 	adceq	sl, r2, r2, lsl #30
    9f60:	42a70000 	adcmi	r0, r7, #0
    9f64:	9b130000 	blls	4c9f6c <__ccfg+0x4a9fc4>
    9f68:	02000029 	andeq	r0, r0, #41	; 0x29
    9f6c:	0000a2b1 			; <UNDEFINED> instruction: 0x0000a2b1
    9f70:	0042e400 	subeq	lr, r2, r0, lsl #8
    9f74:	29031300 	stmdbcs	r3, {r8, r9, ip}
    9f78:	b2020000 	andlt	r0, r2, #0
    9f7c:	00000097 	muleq	r0, r7, r0
    9f80:	0000431e 	andeq	r4, r0, lr, lsl r3
    9f84:	0000ed15 	andeq	lr, r0, r5, lsl sp
    9f88:	00000000 	andeq	r0, r0, r0
    9f8c:	00001a00 	andeq	r1, r0, r0, lsl #20
    9f90:	0cca0200 	sfmeq	f0, 2, [sl], {0}
    9f94:	00000108 	andeq	r0, r0, r8, lsl #2
    9f98:	00fd0a02 	rscseq	r0, sp, r2, lsl #20
    9f9c:	43360000 	teqmi	r6, #0
    9fa0:	00160000 	andseq	r0, r6, r0
    9fa4:	1a000000 	bne	9fac <__exidx_end+0x732c>
    9fa8:	0b000000 	bleq	9fb0 <__exidx_end+0x7330>
    9fac:	00000113 	andeq	r0, r0, r3, lsl r1
    9fb0:	00004370 	andeq	r4, r0, r0, ror r3
    9fb4:	00011e0b 	andeq	r1, r1, fp, lsl #28
    9fb8:	00438900 	subeq	r8, r3, r0, lsl #18
    9fbc:	00000d00 	andeq	r0, r0, r0, lsl #26
    9fc0:	05940000 	ldreq	r0, [r4]
    9fc4:	000d0000 	andeq	r0, sp, r0
    9fc8:	9f000000 	svcls	0x00000000
    9fcc:	00000005 	andeq	r0, r0, r5
    9fd0:	ba140000 	blt	509fd8 <__ccfg+0x4ea030>
    9fd4:	01000028 	tsteq	r0, r8, lsr #32
    9fd8:	0097021d 	addseq	r0, r7, sp, lsl r2
    9fdc:	00000000 	andeq	r0, r0, r0
    9fe0:	00400000 	subeq	r0, r0, r0
    9fe4:	9c010000 	stcls	0, cr0, [r1], {-0}
    9fe8:	00000594 	muleq	r0, r4, r5
    9fec:	00072010 	andeq	r2, r7, r0, lsl r0
    9ff0:	a2dd0200 	sbcsge	r0, sp, #0, 4
    9ff4:	a0000000 	andge	r0, r0, r0
    9ff8:	10000043 	andne	r0, r0, r3, asr #32
    9ffc:	000028b2 			; <UNDEFINED> instruction: 0x000028b2
    a000:	00a2dd02 	adceq	sp, r2, r2, lsl #26
    a004:	43c10000 	bicmi	r0, r1, #0
    a008:	92100000 	andsls	r0, r0, #0
    a00c:	02000029 	andeq	r0, r0, #41	; 0x29
    a010:	0000a2de 	ldrdeq	sl, [r0], -lr
    a014:	0043e200 	subeq	lr, r3, r0, lsl #4
    a018:	29201000 	stmdbcs	r0!, {ip}
    a01c:	de020000 	cdple	0, 0, cr0, cr2, cr0, {0}
    a020:	000000a2 	andeq	r0, r0, r2, lsr #1
    a024:	00004425 	andeq	r4, r0, r5, lsr #8
    a028:	00299b13 	eoreq	r9, r9, r3, lsl fp
    a02c:	a2e00200 	rscge	r0, r0, #0, 4
    a030:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
    a034:	13000044 	movwne	r0, #68	; 0x44
    a038:	00002903 	andeq	r2, r0, r3, lsl #18
    a03c:	0097e102 	addseq	lr, r7, r2, lsl #2
    a040:	44c30000 	strbmi	r0, [r3], #0
    a044:	ed150000 	ldc	0, cr0, [r5, #-0]
    a048:	00000000 	andeq	r0, r0, r0
    a04c:	1a000000 	bne	a054 <__exidx_end+0x73d4>
    a050:	02000000 	andeq	r0, r0, #0
    a054:	01080cfa 	strdeq	r0, [r8, -sl]
    a058:	0a020000 	beq	8a060 <__ccfg+0x6a0b8>
    a05c:	000000fd 	strdeq	r0, [r0], -sp
    a060:	000044e6 	andeq	r4, r0, r6, ror #9
    a064:	00000016 	andeq	r0, r0, r6, lsl r0
    a068:	00001a00 	andeq	r1, r0, r0, lsl #20
    a06c:	01130b00 	tsteq	r3, r0, lsl #22
    a070:	45260000 	strmi	r0, [r6, #-0]!
    a074:	1e0b0000 	cdpne	0, 0, cr0, cr11, cr0, {0}
    a078:	3f000001 	svccc	0x00000001
    a07c:	0d000045 	stceq	0, cr0, [r0, #-276]	; 0xfffffeec
    a080:	00000000 	andeq	r0, r0, r0
    a084:	00000594 	muleq	r0, r4, r5
    a088:	0000000d 	andeq	r0, r0, sp
    a08c:	00059f00 	andeq	r9, r5, r0, lsl #30
    a090:	00000000 	andeq	r0, r0, r0
    a094:	0018a217 	andseq	sl, r8, r7, lsl r2
    a098:	a26a0500 	rsbge	r0, sl, #0, 10
    a09c:	17000000 	strne	r0, [r0, -r0]
    a0a0:	000018b1 			; <UNDEFINED> instruction: 0x000018b1
    a0a4:	00a28405 	adceq	r8, r2, r5, lsl #8
    a0a8:	bf000000 	svclt	0x00000000
    a0ac:	04000008 	streq	r0, [r0], #-8
    a0b0:	002ffc00 	eoreq	pc, pc, r0, lsl #24
    a0b4:	3f010400 	svccc	0x00010400
    a0b8:	01000016 	tsteq	r0, r6, lsl r0
    a0bc:	00002a40 	andeq	r2, r0, r0, asr #20
    a0c0:	00001734 	andeq	r1, r0, r4, lsr r7
    a0c4:	00001008 	andeq	r1, r0, r8
    a0c8:	00000000 	andeq	r0, r0, r0
    a0cc:	00006a4b 	andeq	r6, r0, fp, asr #20
    a0d0:	92060102 	andls	r0, r6, #-2147483648	; 0x80000000
    a0d4:	03000003 	movweq	r0, #3
    a0d8:	000021e9 	andeq	r2, r0, r9, ror #3
    a0dc:	00371d03 	eorseq	r1, r7, r3, lsl #26
    a0e0:	01020000 	mrseq	r0, (UNDEF: 2)
    a0e4:	00039008 	andeq	r9, r3, r8
    a0e8:	2c560300 	mrrccs	3, 0, r0, r6, cr0
    a0ec:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    a0f0:	00000049 	andeq	r0, r0, r9, asr #32
    a0f4:	cc050202 	sfmgt	f0, 4, [r5], {2}
    a0f8:	03000003 	movweq	r0, #3
    a0fc:	000020d7 	ldrdeq	r2, [r0], -r7
    a100:	005b2b03 	subseq	r2, fp, r3, lsl #22
    a104:	02020000 	andeq	r0, r2, #0
    a108:	00026007 	andeq	r6, r2, r7
    a10c:	16350300 	ldrtne	r0, [r5], -r0, lsl #6
    a110:	3f030000 	svccc	0x00030000
    a114:	0000006d 	andeq	r0, r0, sp, rrx
    a118:	9d050402 	cfstrsls	mvf0, [r5, #-8]
    a11c:	03000000 	movweq	r0, #0
    a120:	000017a0 	andeq	r1, r0, r0, lsr #15
    a124:	007f4103 	rsbseq	r4, pc, r3, lsl #2
    a128:	04020000 	streq	r0, [r2], #-0
    a12c:	00007207 	andeq	r7, r0, r7, lsl #4
    a130:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    a134:	00000098 	muleq	r0, r8, r0
    a138:	6d070802 	stcvs	8, cr0, [r7, #-8]
    a13c:	04000000 	streq	r0, [r0], #-0
    a140:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    a144:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    a148:	00007707 	andeq	r7, r0, r7, lsl #14
    a14c:	21eb0300 	mvncs	r0, r0, lsl #6
    a150:	14040000 	strne	r0, [r4], #-0
    a154:	0000002c 	andeq	r0, r0, ip, lsr #32
    a158:	002c5803 	eoreq	r5, ip, r3, lsl #16
    a15c:	3e190400 	cfmulscc	mvf0, mvf9, mvf0
    a160:	03000000 	movweq	r0, #0
    a164:	000020d9 	ldrdeq	r2, [r0], -r9
    a168:	00501a04 	subseq	r1, r0, r4, lsl #20
    a16c:	37030000 	strcc	r0, [r3, -r0]
    a170:	04000016 	streq	r0, [r0], #-22	; 0xffffffea
    a174:	0000621f 	andeq	r6, r0, pc, lsl r2
    a178:	17a20300 	strne	r0, [r2, r0, lsl #6]!
    a17c:	20040000 	andcs	r0, r4, r0
    a180:	00000074 	andeq	r0, r0, r4, ror r0
    a184:	0022c203 	eoreq	ip, r2, r3, lsl #4
    a188:	e4330500 	ldrt	r0, [r3], #-1280	; 0xfffffb00
    a18c:	05000000 	streq	r0, [r0, #-0]
    a190:	0000ea04 	andeq	lr, r0, r4, lsl #20
    a194:	04050600 	streq	r0, [r5], #-1536	; 0xfffffa00
    a198:	000000f1 	strdeq	r0, [r0], -r1
    a19c:	0000fc07 	andeq	pc, r0, r7, lsl #24
    a1a0:	00a20800 	adceq	r0, r2, r0, lsl #16
    a1a4:	03000000 	movweq	r0, #0
    a1a8:	00002338 	andeq	r2, r0, r8, lsr r3
    a1ac:	01074206 	tsteq	r7, r6, lsl #4
    a1b0:	04050000 	streq	r0, [r5], #-0
    a1b4:	0000010d 	andeq	r0, r0, sp, lsl #2
    a1b8:	0000ce09 	andeq	ip, r0, r9, lsl #28
    a1bc:	00012600 	andeq	r2, r1, r0, lsl #12
    a1c0:	01260800 			; <UNDEFINED> instruction: 0x01260800
    a1c4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a1c8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    a1cc:	000000ce 	andeq	r0, r0, lr, asr #1
    a1d0:	a2040500 	andge	r0, r4, #0, 10
    a1d4:	03000000 	movweq	r0, #0
    a1d8:	00002461 	andeq	r2, r0, r1, ror #8
    a1dc:	01374606 	teqeq	r7, r6, lsl #12
    a1e0:	04050000 	streq	r0, [r5], #-0
    a1e4:	0000013d 	andeq	r0, r0, sp, lsr r1
    a1e8:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    a1ec:	24cd0300 	strbcs	r0, [sp], #768	; 0x300
    a1f0:	48060000 	stmdami	r6, {}	; <UNPREDICTABLE>
    a1f4:	00000137 	andeq	r0, r0, r7, lsr r1
    a1f8:	00221303 	eoreq	r1, r2, r3, lsl #6
    a1fc:	584a0600 	stmdapl	sl, {r9, sl}^
    a200:	05000001 	streq	r0, [r0, #-1]
    a204:	00015e04 	andeq	r5, r1, r4, lsl #28
    a208:	00ce0900 	sbceq	r0, lr, r0, lsl #18
    a20c:	016d0000 	cmneq	sp, r0
    a210:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a214:	00000000 	andeq	r0, r0, r0
    a218:	00217903 	eoreq	r7, r1, r3, lsl #18
    a21c:	374c0600 	strbcc	r0, [ip, -r0, lsl #12]
    a220:	03000001 	movweq	r0, #1
    a224:	000020e2 	andeq	r2, r0, r2, ror #1
    a228:	01074e06 	tsteq	r7, r6, lsl #28
    a22c:	69030000 	stmdbvs	r3, {}	; <UNPREDICTABLE>
    a230:	06000021 	streq	r0, [r0], -r1, lsr #32
    a234:	0000e451 	andeq	lr, r0, r1, asr r4
    a238:	1fe50300 	svcne	0x00e50300
    a23c:	53060000 	movwpl	r0, #24576	; 0x6000
    a240:	00000199 	muleq	r0, r9, r1
    a244:	019f0405 	orrseq	r0, pc, r5, lsl #8
    a248:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a24c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    a250:	08000001 	stmdaeq	r0, {r0}
    a254:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    a258:	0000b808 	andeq	fp, r0, r8, lsl #16
    a25c:	00b80800 	adcseq	r0, r8, r0, lsl #16
    a260:	05000000 	streq	r0, [r0, #-0]
    a264:	0000b804 	andeq	fp, r0, r4, lsl #16
    a268:	235c0300 	cmpcs	ip, #0, 6
    a26c:	57060000 	strpl	r0, [r6, -r0]
    a270:	000001c9 	andeq	r0, r0, r9, asr #3
    a274:	01cf0405 	biceq	r0, pc, r5, lsl #8
    a278:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    a27c:	e3000000 	movw	r0, #0
    a280:	08000001 	stmdaeq	r0, {r0}
    a284:	000001e3 	andeq	r0, r0, r3, ror #3
    a288:	0000ce08 	andeq	ip, r0, r8, lsl #28
    a28c:	04050000 	streq	r0, [r5], #-0
    a290:	000000ce 	andeq	r0, r0, lr, asr #1
    a294:	00219c03 	eoreq	r9, r1, r3, lsl #24
    a298:	c95a0600 	ldmdbgt	sl, {r9, sl}^
    a29c:	03000001 	movweq	r0, #1
    a2a0:	00002265 	andeq	r2, r0, r5, ror #4
    a2a4:	01c95d06 	biceq	r5, r9, r6, lsl #26
    a2a8:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    a2ac:	0600001f 			; <UNDEFINED> instruction: 0x0600001f
    a2b0:	0001c960 	andeq	ip, r1, r0, ror #18
    a2b4:	23870300 	orrcs	r0, r7, #0, 6
    a2b8:	63060000 	movwvs	r0, #24576	; 0x6000
    a2bc:	000000e4 	andeq	r0, r0, r4, ror #1
    a2c0:	00201d03 	eoreq	r1, r0, r3, lsl #26
    a2c4:	20650600 	rsbcs	r0, r5, r0, lsl #12
    a2c8:	05000002 	streq	r0, [r0, #-2]
    a2cc:	00022604 	andeq	r2, r2, r4, lsl #12
    a2d0:	02310700 	eorseq	r0, r1, #0, 14
    a2d4:	ce080000 	cdpgt	0, 0, cr0, cr8, cr0, {0}
    a2d8:	00000000 	andeq	r0, r0, r0
    a2dc:	0024de03 	eoreq	sp, r4, r3, lsl #28
    a2e0:	20670600 	rsbcs	r0, r7, r0, lsl #12
    a2e4:	03000002 	movweq	r0, #2
    a2e8:	000022d3 	ldrdeq	r2, [r0], -r3
    a2ec:	00eb6906 	rsceq	r6, fp, r6, lsl #18
    a2f0:	ac030000 	stcge	0, cr0, [r3], {-0}
    a2f4:	06000024 	streq	r0, [r0], -r4, lsr #32
    a2f8:	0000eb6b 	andeq	lr, r0, fp, ror #22
    a2fc:	22810300 	addcs	r0, r1, #0, 6
    a300:	6d060000 	stcvs	0, cr0, [r6, #-0]
    a304:	000000eb 	andeq	r0, r0, fp, ror #1
    a308:	00229303 	eoreq	r9, r2, r3, lsl #6
    a30c:	eb6f0600 	bl	1bcbb14 <__ccfg+0x1babb6c>
    a310:	0b000000 	bleq	a318 <__exidx_end+0x7698>
    a314:	557a064c 	ldrbpl	r0, [sl, #-1612]!	; 0xfffff9b4
    a318:	0c000003 	stceq	0, cr0, [r0], {3}
    a31c:	00002237 	andeq	r2, r0, r7, lsr r2
    a320:	00fc7c06 	rscseq	r7, ip, r6, lsl #24
    a324:	0c000000 	stceq	0, cr0, [r0], {-0}
    a328:	0000249f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
    a32c:	012c7d06 			; <UNDEFINED> instruction: 0x012c7d06
    a330:	0c040000 	stceq	0, cr0, [r4], {-0}
    a334:	0000225b 	andeq	r2, r0, fp, asr r2
    a338:	01427e06 	cmpeq	r2, r6, lsl #28
    a33c:	0c080000 	stceq	0, cr0, [r8], {-0}
    a340:	000023c6 	andeq	r2, r0, r6, asr #7
    a344:	014d7f06 	cmpeq	sp, r6, lsl #30
    a348:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a34c:	000023d8 	ldrdeq	r2, [r0], -r8
    a350:	016d8006 	cmneq	sp, r6
    a354:	0c100000 	ldceq	0, cr0, [r0], {-0}
    a358:	000023ea 	andeq	r2, r0, sl, ror #7
    a35c:	01788106 	cmneq	r8, r6, lsl #2
    a360:	0c140000 	ldceq	0, cr0, [r4], {-0}
    a364:	00002135 	andeq	r2, r0, r5, lsr r1
    a368:	01838206 	orreq	r8, r3, r6, lsl #4
    a36c:	0c180000 	ldceq	0, cr0, [r8], {-0}
    a370:	00002250 	andeq	r2, r0, r0, asr r2
    a374:	018e8306 	orreq	r8, lr, r6, lsl #6
    a378:	0c1c0000 	ldceq	0, cr0, [ip], {-0}
    a37c:	000023a1 	andeq	r2, r0, r1, lsr #7
    a380:	01be8406 			; <UNDEFINED> instruction: 0x01be8406
    a384:	0c200000 	stceq	0, cr0, [r0], #-0
    a388:	000021d8 	ldrdeq	r2, [r0], -r8
    a38c:	01e98506 	mvneq	r8, r6, lsl #10
    a390:	0c240000 	stceq	0, cr0, [r4], #-0
    a394:	000021f3 	strdeq	r2, [r0], -r3
    a398:	01f48606 	mvnseq	r8, r6, lsl #12
    a39c:	0c280000 	stceq	0, cr0, [r8], #-0
    a3a0:	0000240e 	andeq	r2, r0, lr, lsl #8
    a3a4:	01ff8706 	mvnseq	r8, r6, lsl #14
    a3a8:	0c2c0000 	stceq	0, cr0, [ip], #-0
    a3ac:	0000218a 	andeq	r2, r0, sl, lsl #3
    a3b0:	02158806 	andseq	r8, r5, #393216	; 0x60000
    a3b4:	0c300000 	ldceq	0, cr0, [r0], #-0
    a3b8:	000023fc 	strdeq	r2, [r0], -ip
    a3bc:	02318906 	eorseq	r8, r1, #98304	; 0x18000
    a3c0:	0c340000 	ldceq	0, cr0, [r4], #-0
    a3c4:	0000223d 	andeq	r2, r0, sp, lsr r2
    a3c8:	020a8a06 	andeq	r8, sl, #24576	; 0x6000
    a3cc:	0c380000 	ldceq	0, cr0, [r8], #-0
    a3d0:	000022b1 			; <UNDEFINED> instruction: 0x000022b1
    a3d4:	023c8b06 	eorseq	r8, ip, #6144	; 0x1800
    a3d8:	0c3c0000 	ldceq	0, cr0, [ip], #-0
    a3dc:	000023b7 			; <UNDEFINED> instruction: 0x000023b7
    a3e0:	02478c06 	subeq	r8, r7, #1536	; 0x600
    a3e4:	0c400000 	mareq	acc0, r0, r0
    a3e8:	000021b2 			; <UNDEFINED> instruction: 0x000021b2
    a3ec:	02528d06 	subseq	r8, r2, #384	; 0x180
    a3f0:	0c440000 	mareq	acc0, r0, r4
    a3f4:	0000200e 	andeq	r2, r0, lr
    a3f8:	025d8e06 	subseq	r8, sp, #6, 28	; 0x60
    a3fc:	00480000 	subeq	r0, r8, r0
    a400:	00231203 	eoreq	r1, r3, r3, lsl #4
    a404:	688f0600 	stmvs	pc, {r9, sl}	; <UNPREDICTABLE>
    a408:	0b000002 	bleq	a418 <__exidx_end+0x7798>
    a40c:	a5540114 	ldrbge	r0, [r4, #-276]	; 0xfffffeec
    a410:	0c000003 	stceq	0, cr0, [r0], {3}
    a414:	00002a28 	andeq	r2, r0, r8, lsr #20
    a418:	00ce5501 	sbceq	r5, lr, r1, lsl #10
    a41c:	0c000000 	stceq	0, cr0, [r0], {-0}
    a420:	00002b8d 	andeq	r2, r0, sp, lsl #23
    a424:	00ce5601 	sbceq	r5, lr, r1, lsl #12
    a428:	0c040000 	stceq	0, cr0, [r4], {-0}
    a42c:	000029c1 	andeq	r2, r0, r1, asr #19
    a430:	00ce5701 	sbceq	r5, lr, r1, lsl #14
    a434:	0c080000 	stceq	0, cr0, [r8], {-0}
    a438:	00002a5b 	andeq	r2, r0, fp, asr sl
    a43c:	00ce5801 	sbceq	r5, lr, r1, lsl #16
    a440:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    a444:	000029f1 	strdeq	r2, [r0], -r1
    a448:	00c35901 	sbceq	r5, r3, r1, lsl #18
    a44c:	00100000 	andseq	r0, r0, r0
    a450:	002bb803 	eoreq	fp, fp, r3, lsl #16
    a454:	605a0100 	subsvs	r0, sl, r0, lsl #2
    a458:	0d000003 	stceq	0, cr0, [r0, #-12]
    a45c:	00001afc 	strdeq	r1, [r0], -ip
    a460:	d301f902 	movwle	pc, #6402	; 0x1902	; <UNPREDICTABLE>
    a464:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    a468:	00002bdb 	ldrdeq	r2, [r0], -fp
    a46c:	00ce6501 	sbceq	r6, lr, r1, lsl #10
    a470:	b90e0000 	stmdblt	lr, {}	; <UNPREDICTABLE>
    a474:	01000029 	tsteq	r0, r9, lsr #32
    a478:	0000ce65 	andeq	ip, r0, r5, ror #28
    a47c:	970f0000 	strls	r0, [pc, -r0]
    a480:	0200001e 	andeq	r0, r0, #30
    a484:	00ce0110 	sbceq	r0, lr, r0, lsl r1
    a488:	fb010000 	blx	4a492 <__ccfg+0x2a4ea>
    a48c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    a490:	00002bdb 	ldrdeq	r2, [r0], -fp
    a494:	00cea001 	sbceq	sl, lr, r1
    a498:	46100000 	ldrmi	r0, [r0], -r0
    a49c:	0100002c 	tsteq	r0, ip, lsr #32
    a4a0:	0000cea2 	andeq	ip, r0, r2, lsr #29
    a4a4:	b0110000 	andslt	r0, r1, r0
    a4a8:	c8000003 	stmdagt	r0, {r0, r1}
    a4ac:	5c000029 	stcpl	0, cr0, [r0], {41}	; 0x29
    a4b0:	01000000 	mrseq	r0, (UNDEF: 0)
    a4b4:	0004b69c 	muleq	r4, ip, r6
    a4b8:	03bc1200 			; <UNDEFINED> instruction: 0x03bc1200
    a4bc:	45560000 	ldrbmi	r0, [r6, #-0]
    a4c0:	c7120000 	ldrgt	r0, [r2, -r0]
    a4c4:	82000003 	andhi	r0, r0, #3
    a4c8:	13000045 	movwne	r0, #69	; 0x45
    a4cc:	00002a02 	andeq	r2, r0, r2, lsl #20
    a4d0:	00000014 	andeq	r0, r0, r4, lsl r0
    a4d4:	00000461 	andeq	r0, r0, r1, ror #8
    a4d8:	0003bc12 	andeq	fp, r3, r2, lsl ip
    a4dc:	0045ae00 	subeq	sl, r5, r0, lsl #28
    a4e0:	03c71200 	biceq	r1, r7, #0, 4
    a4e4:	45c10000 	strbmi	r0, [r1]
    a4e8:	16140000 	ldrne	r0, [r4], -r0
    a4ec:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a4f0:	01150074 	tsteq	r5, r4, ror r0
    a4f4:	15320153 	ldrne	r0, [r2, #-339]!	; 0xfffffead
    a4f8:	3c015201 	sfmcc	f5, 4, [r1], {1}
    a4fc:	01510115 	cmpeq	r1, r5, lsl r1
    a500:	50011530 	andpl	r1, r1, r0, lsr r5
    a504:	a0000c05 	andge	r0, r0, r5, lsl #24
    a508:	0000400c 	andeq	r4, r0, ip
    a50c:	0029e616 	eoreq	lr, r9, r6, lsl r6
    a510:	00760200 	rsbseq	r0, r6, r0, lsl #4
    a514:	0000048d 	andeq	r0, r0, sp, lsl #9
    a518:	01530115 	cmpeq	r3, r5, lsl r1
    a51c:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    a520:	01153101 	tsteq	r5, r1, lsl #2
    a524:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a528:	0c055001 	stceq	0, cr5, [r5], {1}
    a52c:	400ca000 	andmi	sl, ip, r0
    a530:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    a534:	00007402 	andeq	r7, r0, r2, lsl #8
    a538:	0029fe14 	eoreq	pc, r9, r4, lsl lr	; <UNPREDICTABLE>
    a53c:	00760200 	rsbseq	r0, r6, r0, lsl #4
    a540:	01530115 	cmpeq	r3, r5, lsl r1
    a544:	52011531 	andpl	r1, r1, #205520896	; 0xc400000
    a548:	01153201 	tsteq	r5, r1, lsl #4
    a54c:	15300151 	ldrne	r0, [r0, #-337]!	; 0xfffffeaf
    a550:	0c055001 	stceq	0, cr5, [r5], {1}
    a554:	400ca000 	andmi	sl, ip, r0
    a558:	007d0215 	rsbseq	r0, sp, r5, lsl r2
    a55c:	00007402 	andeq	r7, r0, r2, lsl #8
    a560:	03d31100 	bicseq	r1, r3, #0, 2
    a564:	2a240000 	bcs	90a56c <__ccfg+0x8ea5c4>
    a568:	002c0000 	eoreq	r0, ip, r0
    a56c:	9c010000 	stcls	0, cr0, [r1], {-0}
    a570:	0000050d 	andeq	r0, r0, sp, lsl #10
    a574:	0003e412 	andeq	lr, r3, r2, lsl r4
    a578:	0045e200 	subeq	lr, r5, r0, lsl #4
    a57c:	03ef1700 	mvneq	r1, #0, 14
    a580:	50010000 	andpl	r0, r1, r0
    a584:	000ff018 	andeq	pc, pc, r8, lsl r0	; <UNPREDICTABLE>
    a588:	0004f400 	andeq	pc, r4, r0, lsl #8
    a58c:	03e41900 	mvneq	r1, #0, 18
    a590:	1a040000 	bne	10a598 <__ccfg+0xea5f0>
    a594:	00000ff0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    a598:	0003ef1b 	andeq	lr, r3, fp, lsl pc
    a59c:	14000000 	strne	r0, [r0], #-0
    a5a0:	00002a44 	andeq	r2, r0, r4, asr #20
    a5a4:	15007402 	strne	r7, [r0, #-1026]	; 0xfffffbfe
    a5a8:	08025101 	stmdaeq	r2, {r0, r8, ip, lr}
    a5ac:	50011534 	andpl	r1, r1, r4, lsr r5
    a5b0:	a0000c05 	andge	r0, r0, r5, lsl #24
    a5b4:	0000400c 	andeq	r4, r0, ip
    a5b8:	002cc11c 	eoreq	ip, ip, ip, lsl r1
    a5bc:	01840200 	orreq	r0, r4, r0, lsl #4
    a5c0:	000000ce 	andeq	r0, r0, lr, asr #1
    a5c4:	00000000 	andeq	r0, r0, r0
    a5c8:	00000090 	muleq	r0, r0, r0
    a5cc:	05769c01 	ldrbeq	r9, [r6, #-3073]!	; 0xfffff3ff
    a5d0:	c71d0000 	ldrgt	r0, [sp, -r0]
    a5d4:	0100002b 	tsteq	r0, fp, lsr #32
    a5d8:	0000cec2 	andeq	ip, r0, r2, asr #29
    a5dc:	00460300 	subeq	r0, r6, r0, lsl #6
    a5e0:	2b451e00 	blcs	1151de8 <__ccfg+0x1131e40>
    a5e4:	c4010000 	strgt	r0, [r1], #-0
    a5e8:	000000ce 	andeq	r0, r0, lr, asr #1
    a5ec:	0000462f 	andeq	r4, r0, pc, lsr #12
    a5f0:	002b5e1e 	eoreq	r5, fp, lr, lsl lr
    a5f4:	c3c50100 	bicgt	r0, r5, #0, 2
    a5f8:	42000000 	andmi	r0, r0, #0
    a5fc:	1e000046 	cdpne	0, 0, cr0, cr0, cr6, {2}
    a600:	000029fd 	strdeq	r2, [r0], -sp
    a604:	00cec601 	sbceq	ip, lr, r1, lsl #12
    a608:	46690000 	strbtmi	r0, [r9], -r0
    a60c:	001f0000 	andseq	r0, pc, r0
    a610:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a614:	1f000008 	svcne	0x00000008
    a618:	00000000 	andeq	r0, r0, r0
    a61c:	000008aa 	andeq	r0, r0, sl, lsr #17
    a620:	2a842000 	bcs	fe112628 <_estack+0xde10d628>
    a624:	91020000 	mrsls	r0, (UNDEF: 2)
    a628:	00000001 	andeq	r0, r0, r1
    a62c:	00001800 	andeq	r1, r0, r0, lsl #16
    a630:	ae9c0100 	fmlgee	f0, f4, f0
    a634:	21000005 	tstcs	r0, r5
    a638:	00000000 	andeq	r0, r0, r0
    a63c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
    a640:	000005a4 	andeq	r0, r0, r4, lsr #11
    a644:	01510115 	cmpeq	r1, r5, lsl r1
    a648:	50011531 	andpl	r1, r1, r1, lsr r5
    a64c:	1f003301 	svcne	0x00003301
    a650:	00000000 	andeq	r0, r0, r0
    a654:	0000089e 	muleq	r0, lr, r8
    a658:	2b9c2200 	blcs	fe712e60 <_estack+0xde70de60>
    a65c:	22020000 	andcs	r0, r2, #0
    a660:	0005bb01 	andeq	fp, r5, r1, lsl #22
    a664:	01020300 	mrseq	r0, LR_svc
    a668:	000ba702 	andeq	sl, fp, r2, lsl #14
    a66c:	23262300 			; <UNDEFINED> instruction: 0x23262300
    a670:	40020000 	andmi	r0, r2, r0
    a674:	cf1c0301 	svcgt	0x001c0301
    a678:	02000029 	andeq	r0, r0, #41	; 0x29
    a67c:	05bb01a1 	ldreq	r0, [fp, #417]!	; 0x1a1
    a680:	00000000 	andeq	r0, r0, r0
    a684:	00600000 	rsbeq	r0, r0, r0
    a688:	9c010000 	stcls	0, cr0, [r1], {-0}
    a68c:	00000677 	andeq	r0, r0, r7, ror r6
    a690:	002b7d24 	eoreq	r7, fp, r4, lsr #26
    a694:	01020100 	mrseq	r0, (UNDEF: 18)
    a698:	000000ce 	andeq	r0, r0, lr, asr #1
    a69c:	000046bd 			; <UNDEFINED> instruction: 0x000046bd
    a6a0:	002bf924 	eoreq	pc, fp, r4, lsr #18
    a6a4:	01030100 	mrseq	r0, (UNDEF: 19)
    a6a8:	000000ce 	andeq	r0, r0, lr, asr #1
    a6ac:	000046d0 	ldrdeq	r4, [r0], -r0
    a6b0:	0005ae25 	andeq	sl, r5, r5, lsr #28
    a6b4:	00000000 	andeq	r0, r0, r0
    a6b8:	00001000 	andeq	r1, r0, r0
    a6bc:	01090100 	mrseq	r0, (UNDEF: 25)
    a6c0:	0000063c 	andeq	r0, r0, ip, lsr r6
    a6c4:	00000014 	andeq	r0, r0, r4, lsl r0
    a6c8:	00740200 	rsbseq	r0, r4, r0, lsl #4
    a6cc:	01530115 	cmpeq	r3, r5, lsl r1
    a6d0:	52011530 	andpl	r1, r1, #48, 10	; 0xc000000
    a6d4:	01153101 	tsteq	r5, r1, lsl #2
    a6d8:	34080251 	strcc	r0, [r8], #-593	; 0xfffffdaf
    a6dc:	05500115 	ldrbeq	r0, [r0, #-277]	; 0xfffffeeb
    a6e0:	0ca0000c 	stceq	0, cr0, [r0], #48	; 0x30
    a6e4:	25000040 	strcs	r0, [r0, #-64]	; 0xffffffc0
    a6e8:	000005c2 	andeq	r0, r0, r2, asr #11
    a6ec:	00000000 	andeq	r0, r0, r0
    a6f0:	00000008 	andeq	r0, r0, r8
    a6f4:	5a010a01 	bpl	4cf00 <__ccfg+0x2cf58>
    a6f8:	1f000006 	svcne	0x00000006
    a6fc:	00000000 	andeq	r0, r0, r0
    a700:	000008b5 			; <UNDEFINED> instruction: 0x000008b5
    a704:	00002100 	andeq	r2, r0, r0, lsl #2
    a708:	03d30000 	bicseq	r0, r3, #0
    a70c:	066d0000 	strbteq	r0, [sp], -r0
    a710:	01150000 	tsteq	r5, r0
    a714:	00310150 	eorseq	r0, r1, r0, asr r1
    a718:	0000001f 	andeq	r0, r0, pc, lsl r0
    a71c:	00089e00 	andeq	r9, r8, r0, lsl #28
    a720:	a4200000 	strtge	r0, [r0], #-0
    a724:	0200002a 	andeq	r0, r0, #42	; 0x2a
    a728:	000001ae 	andeq	r0, r0, lr, lsr #3
    a72c:	00340000 	eorseq	r0, r4, r0
    a730:	9c010000 	stcls	0, cr0, [r1], {-0}
    a734:	000006e9 	andeq	r0, r0, r9, ror #13
    a738:	0005c225 	andeq	ip, r5, r5, lsr #4
    a73c:	00000000 	andeq	r0, r0, r0
    a740:	00000800 	andeq	r0, r0, r0, lsl #16
    a744:	012f0100 			; <UNDEFINED> instruction: 0x012f0100
    a748:	000006ab 	andeq	r0, r0, fp, lsr #13
    a74c:	0000001f 	andeq	r0, r0, pc, lsl r0
    a750:	0008b500 	andeq	fp, r8, r0, lsl #10
    a754:	00210000 	eoreq	r0, r1, r0
    a758:	b0000000 	andlt	r0, r0, r0
    a75c:	c3000003 	movwgt	r0, #3
    a760:	15000006 	strne	r0, [r0, #-6]
    a764:	30015101 	andcc	r5, r1, r1, lsl #2
    a768:	01500115 	cmpeq	r0, r5, lsl r1
    a76c:	00210033 	eoreq	r0, r1, r3, lsr r0
    a770:	d3000000 	movwle	r0, #0
    a774:	d6000003 	strle	r0, [r0], -r3
    a778:	15000006 	strne	r0, [r0, #-6]
    a77c:	31015001 	tstcc	r1, r1
    a780:	00001f00 	andeq	r1, r0, r0, lsl #30
    a784:	089e0000 	ldmeq	lr, {}	; <UNPREDICTABLE>
    a788:	001f0000 	andseq	r0, pc, r0
    a78c:	aa000000 	bge	a794 <__exidx_end+0x7b14>
    a790:	00000008 	andeq	r0, r0, r8
    a794:	002ac91c 	eoreq	ip, sl, ip, lsl r9
    a798:	01f20200 	mvnseq	r0, r0, lsl #4
    a79c:	000000c3 	andeq	r0, r0, r3, asr #1
    a7a0:	00000000 	andeq	r0, r0, r0
    a7a4:	00000038 	andeq	r0, r0, r8, lsr r0
    a7a8:	079a9c01 	ldreq	r9, [sl, r1, lsl #24]
    a7ac:	e6260000 	strt	r0, [r6], -r0
    a7b0:	0100002b 	tsteq	r0, fp, lsr #32
    a7b4:	00c3013c 	sbceq	r0, r3, ip, lsr r1
    a7b8:	46e30000 	strbtmi	r0, [r3], r0
    a7bc:	73270000 			; <UNDEFINED> instruction: 0x73270000
    a7c0:	0100002b 	tsteq	r0, fp, lsr #32
    a7c4:	00ce013f 	sbceq	r0, lr, pc, lsr r1
    a7c8:	51010000 	mrspl	r0, (UNDEF: 1)
    a7cc:	002cdc27 	eoreq	sp, ip, r7, lsr #24
    a7d0:	01410100 	mrseq	r0, (UNDEF: 81)
    a7d4:	000000c3 	andeq	r0, r0, r3, asr #1
    a7d8:	40007105 	andmi	r7, r0, r5, lsl #2
    a7dc:	10279f26 	eorne	r9, r7, r6, lsr #30
    a7e0:	0100002a 	tsteq	r0, sl, lsr #32
    a7e4:	00c30143 	sbceq	r0, r3, r3, asr #2
    a7e8:	71070000 	mrsvc	r0, (UNDEF: 7)
    a7ec:	48244000 	stmdami	r4!, {lr}
    a7f0:	18279f26 	stmdane	r7!, {r1, r2, r5, r8, r9, sl, fp, ip, pc}
    a7f4:	0100002a 	tsteq	r0, sl, lsr #32
    a7f8:	00c30145 	sbceq	r0, r3, r5, asr #2
    a7fc:	71070000 	mrsvc	r0, (UNDEF: 7)
    a800:	48244800 	stmdami	r4!, {fp, lr}
    a804:	20249f26 	eorcs	r9, r4, r6, lsr #30
    a808:	0100002a 	tsteq	r0, sl, lsr #32
    a80c:	00c30147 	sbceq	r0, r3, r7, asr #2
    a810:	47110000 	ldrmi	r0, [r1, -r0]
    a814:	6d240000 	stcvs	0, cr0, [r4, #-0]
    a818:	0100002a 	tsteq	r0, sl, lsr #32
    a81c:	00c30156 	sbceq	r0, r3, r6, asr r1
    a820:	472a0000 	strmi	r0, [sl, -r0]!
    a824:	18240000 	stmdane	r4!, {}	; <UNPREDICTABLE>
    a828:	0100002b 	tsteq	r0, fp, lsr #32
    a82c:	00c30157 	sbceq	r0, r3, r7, asr r1
    a830:	474d0000 	strbmi	r0, [sp, -r0]
    a834:	64280000 	strtvs	r0, [r8], #-0
    a838:	01580100 	cmpeq	r8, r0, lsl #2
    a83c:	000000c3 	andeq	r0, r0, r3, asr #1
    a840:	00004776 	andeq	r4, r0, r6, ror r7
    a844:	2c0a1c00 	stccs	12, cr1, [sl], {-0}
    a848:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
    a84c:	0000ad02 	andeq	sl, r0, r2, lsl #26
    a850:	00000000 	andeq	r0, r0, r0
    a854:	00000c00 	andeq	r0, r0, r0, lsl #24
    a858:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    a85c:	26000007 	strcs	r0, [r0], -r7
    a860:	00002b31 	andeq	r2, r0, r1, lsr fp
    a864:	c3016301 	movwgt	r6, #4865	; 0x1301
    a868:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    a86c:	24000047 	strcs	r0, [r0], #-71	; 0xffffffb9
    a870:	00002c60 	andeq	r2, r0, r0, ror #24
    a874:	c3018501 	movwgt	r8, #5377	; 0x1501
    a878:	11000000 	mrsne	r0, (UNDEF: 0)
    a87c:	00000048 	andeq	r0, r0, r8, asr #32
    a880:	002af31c 	eoreq	pc, sl, ip, lsl r3	; <UNPREDICTABLE>
    a884:	01c20200 	biceq	r0, r2, r0, lsl #4
    a888:	000000ce 	andeq	r0, r0, lr, asr #1
    a88c:	00000000 	andeq	r0, r0, r0
    a890:	00000034 	andeq	r0, r0, r4, lsr r0
    a894:	08429c01 	stmdaeq	r2, {r0, sl, fp, ip, pc}^
    a898:	b3240000 			; <UNDEFINED> instruction: 0xb3240000
    a89c:	0100002c 	tsteq	r0, ip, lsr #32
    a8a0:	00ce0192 	smulleq	r0, lr, r2, r1
    a8a4:	48510000 	ldmdami	r1, {}^	; <UNPREDICTABLE>
    a8a8:	ef240000 	svc	0x00240000
    a8ac:	0100002b 	tsteq	r0, fp, lsr #32
    a8b0:	00ce0193 	smulleq	r0, lr, r3, r1
    a8b4:	48730000 	ldmdami	r3!, {}^	; <UNPREDICTABLE>
    a8b8:	c6240000 	strtgt	r0, [r4], -r0
    a8bc:	01000021 	tsteq	r0, r1, lsr #32
    a8c0:	00ce0194 	smulleq	r0, lr, r4, r1
    a8c4:	48860000 	stmmi	r6, {}	; <UNPREDICTABLE>
    a8c8:	9b240000 	blls	90a8d0 <__ccfg+0x8ea928>
    a8cc:	0100002a 	tsteq	r0, sl, lsr #32
    a8d0:	00ce0195 	smulleq	r0, lr, r5, r1
    a8d4:	48a90000 	stmiami	r9!, {}	; <UNPREDICTABLE>
    a8d8:	001f0000 	andseq	r0, pc, r0
    a8dc:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    a8e0:	1f000008 	svcne	0x00000008
    a8e4:	00000000 	andeq	r0, r0, r0
    a8e8:	0000089e 	muleq	r0, lr, r8
    a8ec:	2c7f1c00 	ldclcs	12, cr1, [pc], #-0	; a8f4 <__exidx_end+0x7c74>
    a8f0:	d3020000 	movwle	r0, #8192	; 0x2000
    a8f4:	0000ce01 	andeq	ip, r0, r1, lsl #28
    a8f8:	00000000 	andeq	r0, r0, r0
    a8fc:	00001c00 	andeq	r1, r0, r0, lsl #24
    a900:	8d9c0100 	ldfhis	f0, [ip]
    a904:	24000008 	strcs	r0, [r0], #-8
    a908:	00002bad 	andeq	r2, r0, sp, lsr #23
    a90c:	ce01b701 	cdpgt	7, 0, cr11, cr1, cr1, {0}
    a910:	c5000000 	strgt	r0, [r0, #-0]
    a914:	24000048 	strcs	r0, [r0], #-72	; 0xffffffb8
    a918:	00002c71 	andeq	r2, r0, r1, ror ip
    a91c:	ce01b801 	cdpgt	8, 0, cr11, cr1, cr1, {0}
    a920:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    a924:	24000048 	strcs	r0, [r0], #-72	; 0xffffffb8
    a928:	00002a77 	andeq	r2, r0, r7, ror sl
    a92c:	ce01b901 	vmlagt.f16	s22, s2, s2	; <UNPREDICTABLE>
    a930:	f3000000 	vhadd.u8	d0, d0, d0
    a934:	00000048 	andeq	r0, r0, r8, asr #32
    a938:	002b2429 	eoreq	r2, fp, r9, lsr #8
    a93c:	a55c0100 	ldrbge	r0, [ip, #-256]	; 0xffffff00
    a940:	05000003 	streq	r0, [r0, #-3]
    a944:	00000003 	andeq	r0, r0, r3
    a948:	17ba2a00 	ldrne	r2, [sl, r0, lsl #20]!
    a94c:	45070000 	strmi	r0, [r7, #-0]
    a950:	0000ce03 	andeq	ip, r0, r3, lsl #28
    a954:	16062b00 	strne	r2, [r6], -r0, lsl #22
    a958:	aa080000 	bge	20a960 <__ccfg+0x1ea9b8>
    a95c:	000000c3 	andeq	r0, r0, r3, asr #1
    a960:	0020ca2c 	eoreq	ip, r0, ip, lsr #20
    a964:	08990600 	ldmeq	r9, {r9, sl}
    a968:	000000d9 	ldrdeq	r0, [r0], -r9
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
       c:	10011106 	andne	r1, r1, r6, lsl #2
      10:	02000006 	andeq	r0, r0, #6
      14:	0b0b0024 	bleq	2c00ac <__ccfg+0x2a0104>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	16030000 	strne	r0, [r3], -r0
      20:	3a0e0300 	bcc	380c28 <__ccfg+0x360c80>
      24:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      28:	0013490b 	andseq	r4, r3, fp, lsl #18
      2c:	00240400 	eoreq	r0, r4, r0, lsl #8
      30:	0b3e0b0b 	bleq	f82c64 <__ccfg+0xf62cbc>
      34:	00000803 	andeq	r0, r0, r3, lsl #16
      38:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
      3c:	06000013 			; <UNDEFINED> instruction: 0x06000013
			i = k;
      40:	13490035 	movtne	r0, #36917	; 0x9035
				j->Next = k;
      44:	13070000 	movwne	r0, #28672	; 0x7000
      48:	3a0b0b01 	bcc	2c2c54 <__ccfg+0x2a2cac>
}
      4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      50:	0013010b 	andseq	r0, r3, fp, lsl #2
      54:	000d0800 	andeq	r0, sp, r0, lsl #16
		release;
      58:	0b3a0e03 	bleq	e8386c <__ccfg+0xe638c4>
      5c:	0b390b3b 	bleq	e42d50 <__ccfg+0xe22da8>
      60:	0b0b1349 	bleq	2c4d8c <__ccfg+0x2a4de4>
      64:	0b0c0b0d 	bleq	302ca0 <__ccfg+0x2e2cf8>
      68:	00000b38 	andeq	r0, r0, r8, lsr fp
      6c:	03000d09 	movweq	r0, #3337	; 0xd09
      70:	3b0b3a0e 	blcc	2ce8b0 <__ccfg+0x2ae908>
      74:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
      78:	000b3813 	andeq	r3, fp, r3, lsl r8
      7c:	00340a00 	eorseq	r0, r4, r0, lsl #20
      80:	0b3a0e03 	bleq	e83894 <__ccfg+0xe638ec>
      84:	0b390b3b 	bleq	e42d78 <__ccfg+0xe22dd0>
      88:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; ffffff6c <_estack+0xdfffaf6c>
      8c:	00000c3c 	andeq	r0, r0, ip, lsr ip
	descriptors [fd] = s;
      90:	0b000f0b 	bleq	3cc4 <__exidx_end+0x1044>
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	0013490b 	andseq	r4, r3, fp, lsl #18
      98:	01010c00 	tsteq	r1, r0, lsl #24
	if (s == NULL)
      9c:	13011349 	movwne	r1, #4937	; 0x1349
		syserror (EMALLOC, "tcv05");
      a0:	210d0000 	mrscs	r0, (UNDEF: 13)
      a4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
      a8:	13490021 	movtne	r0, #36897	; 0x9021
      ac:	00000b2f 	andeq	r0, r0, pc, lsr #22
      b0:	0300160f 	movweq	r1, #1551	; 0x60f
      b4:	3b0b3a0e 	blcc	2ce8f4 <__ccfg+0x2ae94c>
      b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
      bc:	10000013 	andne	r0, r0, r3, lsl r0
      c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
      c4:	00001301 	andeq	r1, r0, r1, lsl #6
      c8:	49000511 	stmdbmi	r0, {r0, r4, r8, sl}
      cc:	12000013 	andne	r0, r0, #19
      d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
      d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
      e0:	13130000 	tstne	r3, #0
      e4:	3a0b0b01 	bcc	2c2cf0 <__ccfg+0x2a2d48>
      e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	0013010b 	andseq	r0, r3, fp, lsl #2
      f0:	000d1400 	andeq	r1, sp, r0, lsl #8
			wwait (st, 50);
      f4:	0b3a0e03 	bleq	e83908 <__ccfg+0xe63960>
			curr += 0x1000;
      f8:	0b39053b 	bleq	e415ec <__ccfg+0xe21644>
      fc:	0b381349 	bleq	e04e28 <__ccfg+0xde4e80>
		if (from >= EE_SIZE || upto < from)
     100:	13150000 	tstne	r5, #0
     104:	0b0e0301 	bleq	380d10 <__ccfg+0x360d68>
			upto = EE_SIZE - 1;
     108:	3b0b3a0b 	blcc	2ce93c <__ccfg+0x2ae994>
     10c:	010b3905 	tsteq	fp, r5, lsl #18
     110:	16000013 			; <UNDEFINED> instruction: 0x16000013
     114:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     118:	0b3b0b3a 	bleq	ec2e08 <__ccfg+0xea2e60>
     11c:	13490b39 	movtne	r0, #39737	; 0x9b39
     120:	00000b38 	andeq	r0, r0, r8, lsr fp
     124:	03003417 	movweq	r3, #1047	; 0x417
}
     128:	3b0b3a0e 	blcc	2ce968 <__ccfg+0x2ae9c0>
     12c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     130:	020c3f13 	andeq	r3, ip, #19, 30	; 0x4c
     134:	1800000a 	stmdane	r0, {r1, r3}
     138:	08030034 	stmdaeq	r3, {r2, r4, r5}
     13c:	0b3b0b3a 	bleq	ec2e2c <__ccfg+0xea2e84>
    cycles[0].offTime = numbers[1];
     140:	13490b39 	movtne	r0, #39737	; 0x9b39
    cycles[1].onTime = numbers[2];
     144:	0a020c3f 	beq	83248 <__ccfg+0x632a0>
    cycles[1].offTime = numbers[3];
     148:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     14c:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
     150:	3b0b3a0e 	blcc	2ce990 <__ccfg+0x2ae9e8>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
            number = number * 10;
     158:	1201110c 	andne	r1, r1, #12, 2
     15c:	010a4001 	tsteq	sl, r1
            number += settingsInput[i] - 48;
     160:	1a000013 	bne	1b4 <root+0x48>
     164:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     168:	0b3b0b3a 	bleq	ec2e58 <__ccfg+0xea2eb0>
fsm root {
     16c:	13490b39 	movtne	r0, #39737	; 0x9b39
     170:	00000602 	andeq	r0, r0, r2, lsl #12
     174:	03000a1b 	movweq	r0, #2587	; 0xa1b
     178:	3b0b3a0e 	blcc	2ce9b8 <__ccfg+0x2aea10>
     17c:	110b390b 	tstne	fp, fp, lsl #18
     180:	1c000001 	stcne	0, cr0, [r0], {1}
        initCycles();
     184:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
        ser_outf(Initial, "Enter your name: ");
     188:	341d0000 	ldrcc	r0, [sp], #-0
     18c:	3a0e0300 	bcc	380d94 <__ccfg+0x360dec>
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     194:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	1e00000a 	cdpne	0, 0, cr0, cr0, cr10, {0}
     19c:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     1a0:	00001301 	andeq	r1, r0, r1, lsl #6
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	11010b1f 	tstne	r1, pc, lsl fp
     1a8:	01011201 	tsteq	r1, r1, lsl #4
        if (choice == 'A' || choice == 'a'){
     1ac:	20000013 	andcs	r0, r0, r3, lsl r0
     1b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     1b4:	0b3b0b3a 	bleq	ec2ea4 <__ccfg+0xea2efc>
            proceed Adjust_Intervals;
     1b8:	13490b39 	movtne	r0, #39737	; 0x9b39
            proceed Monitor;
     1bc:	1d210000 	stcne	0, cr0, [r1, #-0]
        proceed Show_Menu;
     1c0:	11133101 	tstne	r3, r1, lsl #2
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	58011201 	stmdapl	r1, {r0, r9, ip}
     1c8:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	0013010b 	andseq	r0, r3, fp, lsl #2
     1d0:	00052200 	andeq	r2, r5, r0, lsl #4
     1d4:	00001331 	andeq	r1, r0, r1, lsr r3
        processSettingsInput(settings);
     1d8:	31011d23 	tstcc	r1, r3, lsr #26
        proceed Show_Menu;
     1dc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
     1e0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	000b570b 	andeq	r5, fp, fp, lsl #14
     1e8:	00342400 	eorseq	r2, r4, r0, lsl #8
     1ec:	0b3a0e03 	bleq	e83a00 <__ccfg+0xe63a58>
     1f0:	0b390b3b 	bleq	e42ee4 <__ccfg+0xe22f3c>
     1f4:	06021349 	streq	r1, [r2], -r9, asr #6
        proceed Show_Menu;
     1f8:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     1fc:	030c3f00 	movweq	r3, #52992	; 0xcf00
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	3b0b3a0e 	blcc	2cea40 <__ccfg+0x2aea98>
     204:	110b390b 	tstne	fp, fp, lsl #18
        displayCycle = YES;
     208:	40011201 	andmi	r1, r1, r1, lsl #4
        ser_inf(Await_Stop, "%c", ch);
     20c:	2600000a 	strcs	r0, [r0], -sl
     210:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     214:	01120111 	tsteq	r2, r1, lsl r1
        proceed Monitor;
     218:	0b590b58 	bleq	1642f80 <__ccfg+0x1622fd8>
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     21c:	00000b57 	andeq	r0, r0, r7, asr fp
     220:	31011d27 	tstcc	r1, r7, lsr #26
        leds(1, 0);
     224:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     228:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
     22c:	0105570b 	tsteq	r5, fp, lsl #14
     230:	28000013 	stmdacs	r0, {r0, r1, r4}
     234:	0e03012e 	adfeqsp	f0, f3, #0.5
        leds(0, 0);
     238:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     23c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     240:	13010b20 	movwne	r0, #6944	; 0x1b20
     244:	05290000 	streq	r0, [r9, #-0]!
     248:	3a0e0300 	bcc	380e50 <__ccfg+0x360ea8>
     24c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
        } else if (choice == 'S' || choice == 's') {
     250:	0013490b 	andseq	r4, r3, fp, lsl #18
            proceed Stop;
     254:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
        } else if (choice == 'V' || choice == 'v') {
     258:	0b3a0e03 	bleq	e83a6c <__ccfg+0xe63ac4>
            proceed View_Settings;
     25c:	0b39053b 	bleq	e41750 <__ccfg+0xe217a8>
        } else if (choice == 'M' || choice == 'm') {
     260:	0b200c27 	bleq	803304 <__ccfg+0x7e335c>
            proceed Monitor;
     264:	01000000 	mrseq	r0, (UNDEF: 0)
     268:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     26c:	0e030b13 	vmoveq.32	d3[0], r0
     270:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     274:	06100111 			; <UNDEFINED> instruction: 0x06100111
     278:	24020000 	strcs	r0, [r2], #-0
     27c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     280:	000e030b 	andeq	r0, lr, fp, lsl #6
     284:	00160300 	andseq	r0, r6, r0, lsl #6
     288:	0b3a0e03 	bleq	e83a9c <__ccfg+0xe63af4>
     28c:	0b390b3b 	bleq	e42f80 <__ccfg+0xe22fd8>
     290:	00001349 	andeq	r1, r0, r9, asr #6
     294:	0b002404 	bleq	92ac <__exidx_end+0x662c>
static void devinit_uart (int devnum) {
     298:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	adddevfunc (ioreq_uart_a, devnum);
     29c:	05000008 	streq	r0, [r0, #-8]
     2a0:	13490026 	movtne	r0, #36902	; 0x9026
void udelay (volatile word n) {
     2a4:	35060000 	strcc	r0, [r6, #-0]
     2a8:	00134900 	andseq	r4, r3, r0, lsl #18
	while (n) {
     2ac:	000f0700 	andeq	r0, pc, r0, lsl #14
     2b0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
}
     2b4:	13080000 	movwne	r0, #32768	; 0x8000
	while (n--);
     2b8:	3a0b0b01 	bcc	2c2ec4 <__ccfg+0x2a2f1c>
     2bc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2c0:	0013010b 	andseq	r0, r3, fp, lsl #2
		n--;
     2c4:	000d0900 	andeq	r0, sp, r0, lsl #18
     2c8:	0b3a0e03 	bleq	e83adc <__ccfg+0xe63b34>
     2cc:	0b390b3b 	bleq	e42fc0 <__ccfg+0xe23018>
void mdelay (volatile word n) {
     2d0:	0b0b1349 	bleq	2c4ffc <__ccfg+0x2a5054>
     2d4:	0b0c0b0d 	bleq	302f10 <__ccfg+0x2e2f68>
	while (n) {
     2d8:	00000b38 	andeq	r0, r0, r8, lsr fp
     2dc:	03000d0a 	movweq	r0, #3338	; 0xd0a
}
     2e0:	3b0b3a0e 	blcc	2ceb20 <__ccfg+0x2aeb78>
		udelay (999);
     2e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     2e8:	000b3813 	andeq	r3, fp, r3, lsl r8
		n--;
     2ec:	00340b00 	eorseq	r0, r4, r0, lsl #22
     2f0:	0b3a0e03 	bleq	e83b04 <__ccfg+0xe63b5c>
     2f4:	0b390b3b 	bleq	e42fe8 <__ccfg+0xe23040>
     2f8:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1dc <root+0x70>
void __pi_ondomain (lword d) {
     2fc:	00000c3c 	andeq	r0, r0, ip, lsr ip
     300:	4901010c 	stmdbmi	r1, {r2, r3, r8}
		if (__pi_systat.effpdm > 1)
     304:	00130113 	andseq	r0, r3, r3, lsl r1
     308:	00210d00 	eoreq	r0, r1, r0, lsl #26
			__pi_systat.effpdm = 1;
     30c:	160e0000 	strne	r0, [lr], -r0
	PRCMPowerDomainOn (d);
     310:	3a0e0300 	bcc	380f18 <__ccfg+0x360f70>
     314:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     318:	0013490b 	andseq	r4, r3, fp, lsl #18
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	01150f00 	tsteq	r5, r0, lsl #30
     320:	13010c27 	movwne	r0, #7207	; 0x1c27
     324:	05100000 	ldreq	r0, [r0, #-0]
	__pi_systat.ondmns |= d;
     328:	00134900 	andseq	r4, r3, r0, lsl #18
     32c:	00341100 	eorseq	r1, r4, r0, lsl #2
}
     330:	0b3a0e03 	bleq	e83b44 <__ccfg+0xe63b9c>
     334:	0b39053b 	bleq	e41828 <__ccfg+0xe21880>
void __pi_syserror (word ec, const char *m) {
     338:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 21c <root+0xb0>
	diag ("SYSERR: %x, %s", ec, m);
     33c:	00000c3c 	andeq	r0, r0, ip, lsr ip
     340:	0b011312 	bleq	44f90 <__ccfg+0x24fe8>
  __ASM volatile ("cpsid i" : : : "memory");
     344:	3b0b3a0b 	blcc	2ceb78 <__ccfg+0x2aebd0>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	010b3905 	tsteq	fp, r5, lsl #18
     34c:	13000013 	movwne	r0, #19
     350:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		all_leds_blink;
     354:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     358:	13490b39 	movtne	r0, #39737	; 0x9b39
     35c:	00000b38 	andeq	r0, r0, r8, lsr fp
     360:	03011314 	movweq	r1, #4884	; 0x1314
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	3a0b0b0e 	bcc	2c2fa4 <__ccfg+0x2a2ffc>
     368:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     36c:	0013010b 	andseq	r0, r3, fp, lsl #2
     370:	00211500 	eoreq	r1, r1, r0, lsl #10
     374:	0b2f1349 	bleq	bc50a0 <__ccfg+0xba50f8>
     378:	34160000 	ldrcc	r0, [r6], #-0
	while (1) {
     37c:	3a0e0300 	bcc	380f84 <__ccfg+0x360fdc>
     380:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     384:	0013490b 	andseq	r4, r3, fp, lsl #18
     388:	00341700 	eorseq	r1, r4, r0, lsl #14
void tci_run_delay_timer () {
     38c:	0b3a0e03 	bleq	e83ba0 <__ccfg+0xe63bf8>
	setdel = __pi_mintk - __pi_old;
     390:	0b390b3b 	bleq	e43084 <__ccfg+0xe230dc>
     394:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 278 <root+0x10c>
     398:	00000a02 	andeq	r0, r0, r2, lsl #20
     39c:	03003418 	movweq	r3, #1048	; 0x418
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a0:	3b0b3a0e 	blcc	2cebe0 <__ccfg+0x2aec38>
     3a4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     3a8:	000a0213 	andeq	r0, sl, r3, lsl r2
     3ac:	00341900 	eorseq	r1, r4, r0, lsl #18
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	0b3a1347 	bleq	e850d4 <__ccfg+0xe6512c>
	sti_tim;
     3b4:	0b39053b 	bleq	e418a8 <__ccfg+0xe21900>
}
     3b8:	00000a02 	andeq	r0, r0, r2, lsl #20
     3bc:	3f012e1a 	svccc	0x00012e1a
     3c0:	3a0e030c 	bcc	380ff8 <__ccfg+0x361050>
     3c4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3c8:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
	cli_aux;
     3cc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3d0:	010a4001 	tsteq	sl, r1
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	1b000013 	blne	428 <AONRTCIntHandler+0x34>
     3d8:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     3dc:	00001301 	andeq	r1, r0, r1, lsl #6
     3e0:	0300341c 	movweq	r3, #1052	; 0x41c
	sti_aux;
     3e4:	3b0b3a08 	blcc	2cec0c <__ccfg+0x2aec64>
}
     3e8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     3ec:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     3f0:	1331001d 	teqne	r1, #29
void AONRTCIntHandler () {
     3f4:	01120111 	tsteq	r2, r1, lsl r1
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
     3fc:	00000b57 	andeq	r0, r0, r7, asr fp
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	3f012e1e 	svccc	0x00012e1e
		if (__pi_utims [0] == 0)
     404:	3a0e030c 	bcc	38103c <__ccfg+0x361094>
     408:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (*(__pi_utims [0])) {
     40c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     410:	010a4001 	tsteq	sl, r1
			(*(__pi_utims [0]))--;
     414:	1f000013 	svcne	0x00000013
		if (__pi_utims [1] == 0)
     418:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
		if (*(__pi_utims [1])) {
     41c:	0b3b0b3a 	bleq	ec310c <__ccfg+0xea3164>
			aux_timer_inactive = 0;
     420:	00000b39 	andeq	r0, r0, r9, lsr fp
			(*(__pi_utims [1]))--;
     424:	31011d20 	tstcc	r1, r0, lsr #26
		if (__pi_utims [2] == 0)
     428:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
		if (*(__pi_utims [2])) {
     42c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
			(*(__pi_utims [2]))--;
     430:	010b5705 	tsteq	fp, r5, lsl #14
		if (__pi_utims [3] != 0) {
     434:	21000013 	tstcs	r0, r3, lsl r0
			if (*(__pi_utims [3])) {
     438:	13310005 	teqne	r1, #5
				aux_timer_inactive = 0;
     43c:	1d220000 	stcne	0, cr0, [r2, #-0]
				(*(__pi_utims [3]))--;
     440:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
	if (__pi_systat.ledsts) {
     444:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
     448:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		if (__pi_systat.ledblc++ == 0) {
     44c:	0013010b 	andseq	r0, r3, fp, lsl #2
     450:	010b2300 	mrseq	r2, (UNDEF: 59)
			if (__pi_systat.ledblk) {
     454:	00000655 	andeq	r0, r0, r5, asr r6
     458:	31000a24 	tstcc	r0, r4, lsr #20
     45c:	00011113 	andeq	r1, r1, r3, lsl r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	001d2500 	andseq	r2, sp, r0, lsl #10
     464:	01521331 	cmpeq	r2, r1, lsr r3
				if (__pi_systat.ledsts & 0x2)
     468:	0b580655 	bleq	1601dc4 <__ccfg+0x15e1e1c>
     46c:	0b570559 	bleq	15c19d8 <__ccfg+0x15a1a30>
     470:	1d260000 	stcne	0, cr0, [r6, #-0]
				if (__pi_systat.ledsts & 0x4)
     474:	11133101 	tstne	r3, r1, lsl #2
				__pi_systat.ledblk = 0;
     478:	58011201 	stmdapl	r1, {r0, r9, ip}
     47c:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
			if (__pi_systat.fstblk)
     480:	0013010b 	andseq	r0, r3, fp, lsl #2
     484:	011d2700 	tsteq	sp, r0, lsl #14
				__pi_systat.ledblc = 200;
     488:	01111331 	tsteq	r1, r1, lsr r3
	if (events & AON_RTC_EVFLAGS_CH0) {
     48c:	0b580112 	bleq	16008dc <__ccfg+0x15e0934>
		cli_tim;
     490:	0b570559 	bleq	15c19fc <__ccfg+0x15a1a54>
		__pi_new += setdel;
     494:	1d280000 	stcne	0, cr0, [r8, #-0]
     498:	11133100 	tstne	r3, r0, lsl #2
		setdel = 0;
     49c:	58011201 	stmdapl	r1, {r0, r9, ip}
		RISE_N_SHINE;
     4a0:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		__pi_new += setdel;
     4a4:	2900000b 	stmdbcs	r0, {r0, r1, r3}
		RISE_N_SHINE;
     4a8:	08030034 	stmdaeq	r3, {r2, r4, r5}
     4ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		aux_timer_inactive = 1;
     4b0:	13490b39 	movtne	r0, #39737	; 0x9b39
     4b4:	00000602 	andeq	r0, r0, r2, lsl #12
				if (__pi_systat.ledsts & 0x1)
     4b8:	03012e2a 	movweq	r2, #7722	; 0x1e2a
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	3b0b3a0e 	blcc	2cecfc <__ccfg+0x2aed54>
     4c0:	200b3905 	andcs	r3, fp, r5, lsl #18
				if (__pi_systat.ledsts & 0x2)
     4c4:	0013010b 	andseq	r0, r3, fp, lsl #2
     4c8:	000a2b00 	andeq	r2, sl, r0, lsl #22
     4cc:	0b3a0e03 	bleq	e83ce0 <__ccfg+0xe63d38>
				if (__pi_systat.ledsts & 0x8)
     4d0:	0b39053b 	bleq	e419c4 <__ccfg+0xe21a1c>
				__pi_systat.ledblk = 1;
     4d4:	2e2c0000 	cdpcs	0, 2, cr0, cr12, cr0, {0}
     4d8:	030c3f01 	movweq	r3, #52993	; 0xcf01
		if (aux_timer_inactive) {
     4dc:	3b0b3a0e 	blcc	2ced1c <__ccfg+0x2aed74>
			cli_aux;
     4e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     4e4:	1201110c 	andne	r1, r1, #12, 2
     4e8:	010a4001 	tsteq	sl, r1
     4ec:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     4f0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     4f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     4f8:	13490b39 	movtne	r0, #39737	; 0x9b39
     4fc:	00000602 	andeq	r0, r0, r2, lsl #12
     500:	11010b2e 	tstne	r1, lr, lsr #22
     504:	01011201 	tsteq	r1, r1, lsl #4
word tci_update_delay_ticks (Boolean force) {
     508:	2f000013 	svccs	0x00000013
	cli_tim;
     50c:	13310034 	teqne	r1, #52	; 0x34
     510:	0b300000 	bleq	c00518 <__ccfg+0xbe0570>
	if (setdel) {
     514:	55133101 	ldrpl	r3, [r3, #-257]	; 0xfffffeff
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	31000006 	tstcc	r0, r6
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	13310034 	teqne	r1, #52	; 0x34
     520:	00000602 	andeq	r0, r0, r2, lsl #12
     524:	31011d32 	tstcc	r1, r2, lsr sp
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
				AON_RTC_O_CH0CMP)) - gettav ());
     52c:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	return NO;
     530:	000b570b 	andeq	r5, fp, fp, lsl #14
			setdel = 0;
     534:	011d3300 	tsteq	sp, r0, lsl #6
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     538:	01521331 	cmpeq	r2, r1, lsr r3
     53c:	0b580655 	bleq	1601e98 <__ccfg+0x15e1ef0>
}
     540:	0b570559 	bleq	15c1aac <__ccfg+0x15a1b04>
		sti_tim;
     544:	05340000 	ldreq	r0, [r4, #-0]!
		return YES;
     548:	3a080300 	bcc	201150 <__ccfg+0x1e11a8>
     54c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     550:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     554:	3500000a 	strcc	r0, [r0, #-10]
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	13310005 	teqne	r1, #5
	UARTDisable (UART0_BASE);
     55c:	00000602 	andeq	r0, r0, r2, lsl #12
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	03003436 	movweq	r3, #1078	; 0x436
	UARTDisable (UART0_BASE);
     564:	3b0b3a08 	blcc	2ced8c <__ccfg+0x2aede4>
	UARTConfigSetExpClk (UART0_BASE,
     568:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     56c:	00060213 	andeq	r0, r6, r3, lsl r2
     570:	010b3700 	tsteq	fp, r0, lsl #14
     574:	01120111 	tsteq	r2, r1, lsl r1
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     57c:	3a0e0300 	bcc	381184 <__ccfg+0x3611dc>
     580:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	000b200b 	andeq	r2, fp, fp
     588:	012e3900 			; <UNDEFINED> instruction: 0x012e3900
     58c:	0b3a0e03 	bleq	e83da0 <__ccfg+0xe63df8>
	urates [0] = rate;
     590:	0b39053b 	bleq	e41a84 <__ccfg+0xe21adc>
}
     594:	01110c27 	tsteq	r1, r7, lsr #24
     598:	0a400112 	beq	10009e8 <__ccfg+0xfe0a40>
     59c:	00001301 	andeq	r1, r0, r1, lsl #6
     5a0:	03012e3a 	movweq	r2, #7738	; 0x1e3a
     5a4:	3b0b3a0e 	blcc	2cede4 <__ccfg+0x2aee3c>
     5a8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	1113490c 	tstne	r3, ip, lsl #18
     5b0:	40011201 	andmi	r1, r1, r1, lsl #4
     5b4:	0013010a 	andseq	r0, r3, sl, lsl #2
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	00053b00 	andeq	r3, r5, r0, lsl #22
     5bc:	0b3a0803 	bleq	e825d0 <__ccfg+0xe62628>
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c0:	0b39053b 	bleq	e41ab4 <__ccfg+0xe21b0c>
     5c4:	06021349 	streq	r1, [r2], -r9, asr #6
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	2e3c0000 	cdpcs	0, 3, cr0, cr12, cr0, {0}
     5cc:	3a0e0301 	bcc	3811d8 <__ccfg+0x361230>
     5d0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5d4:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     5d8:	010a4001 	tsteq	sl, r1
     5dc:	3d000013 	stccc	0, cr0, [r0, #-76]	; 0xffffffb4
     5e0:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 530 <tci_update_delay_ticks+0x28>
	switch (operation) {
     5e4:	0b3a0e03 	bleq	e83df8 <__ccfg+0xe63e50>
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e8:	0b39053b 	bleq	e41adc <__ccfg+0xe21b34>
     5ec:	13490c27 	movtne	r0, #39975	; 0x9c27
     5f0:	13010b20 	movwne	r0, #6944	; 0x1b20
     5f4:	053e0000 	ldreq	r0, [lr, #-0]!
     5f8:	3a080300 	bcc	201200 <__ccfg+0x1e1258>
				*buf++ = uart_a_read;
     5fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     600:	0013490b 	andseq	r4, r3, fp, lsl #18
			while (len && uart_a_char_available) {
     604:	000a3f00 	andeq	r3, sl, r0, lsl #30
     608:	0b3a0803 	bleq	e8261c <__ccfg+0xe62674>
     60c:	0b39053b 	bleq	e41b00 <__ccfg+0xe21b58>
			if (len != operation) {
     610:	34400000 	strbcc	r0, [r0], #-0
}
     614:	3a0e0300 	bcc	38121c <__ccfg+0x361274>
     618:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			uart_a_disable_int;
     61c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			if (uart_a_char_available) {
     620:	41000006 	tstmi	r0, r6
				*buf++ = uart_a_read;
     624:	0803000a 	stmdaeq	r3, {r1, r3}
			uart_a_disable_int;
     628:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     62c:	01110b39 	tsteq	r1, r9, lsr fp
			if (uart_a_char_available) {
     630:	1d420000 	stclne	0, cr0, [r2, #-0]
     634:	11133101 	tstne	r3, r1, lsl #2
				uart_a_enable_int;
     638:	58011201 	stmdapl	r1, {r0, r9, ip}
     63c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
				goto Redo_rx;
     640:	0013010b 	andseq	r0, r3, fp, lsl #2
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     644:	011d4300 	tsteq	sp, r0, lsl #6
     648:	01111331 	tsteq	r1, r1, lsr r3
			return -2;
     64c:	0b580112 	bleq	1600a9c <__ccfg+0x15e0af4>
     650:	0b570b59 	bleq	15c33bc <__ccfg+0x15a3414>
				uart_a_write (*buf);
     654:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
     658:	3a0e0301 	bcc	381264 <__ccfg+0x3612bc>
			while (len && uart_a_room_in_tx) {
     65c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     660:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     664:	010b2013 	tsteq	fp, r3, lsl r0
			if (len != operation) {
     668:	45000013 	strmi	r0, [r0, #-19]	; 0xffffffed
			uart_a_disable_int;
     66c:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     670:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			if (uart_a_room_in_tx) {
     674:	13490b39 	movtne	r0, #39737	; 0x9b39
     678:	00000b20 	andeq	r0, r0, r0, lsr #22
				uart_a_enable_int;
     67c:	03012e46 	movweq	r2, #7750	; 0x1e46
     680:	3b0b3a0e 	blcc	2ceec0 <__ccfg+0x2aef18>
				*buf++ = uart_a_read;
     684:	200b390b 	andcs	r3, fp, fp, lsl #18
			if (uart_a_room_in_tx) {
     688:	0013010b 	andseq	r0, r3, fp, lsl #2
				uart_a_write (*buf);
     68c:	00344700 	eorseq	r4, r4, r0, lsl #14
     690:	0b3a0803 	bleq	e826a4 <__ccfg+0xe626fc>
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	0b390b3b 	bleq	e43388 <__ccfg+0xe233e0>
     698:	00001349 	andeq	r1, r0, r9, asr #6
			uart_a_enable_int;
     69c:	00010b48 	andeq	r0, r1, r8, asr #22
     6a0:	012e4900 			; <UNDEFINED> instruction: 0x012e4900
     6a4:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			return 0;
     6a8:	0b3b0b3a 	bleq	ec3398 <__ccfg+0xea33f0>
			if (len == UART_CNTRL_SETRATE) {
     6ac:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
				if (__pi_uart_setrate (*((word*)buf),
     6b0:	01120111 	tsteq	r2, r1, lsl r1
     6b4:	13010a40 	movwne	r0, #6720	; 0x1a40
     6b8:	054a0000 	strbeq	r0, [sl, #-0]
				syserror (EREQPAR, "uar");
     6bc:	3a080300 	bcc	2012c4 <__ccfg+0x1e131c>
			syserror (ENOOPER, "uai");
     6c0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (len == UART_CNTRL_GETRATE) {
     6c4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				return 1;
     6c8:	4b000006 	blmi	6e8 <ioreq_uart_a+0x104>
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
			syserror (ENOOPER, "uai");
     6d0:	0b3b0b3a 	bleq	ec33c0 <__ccfg+0xea3418>
     6d4:	13490b39 	movtne	r0, #39737	; 0x9b39
     6d8:	00000a02 	andeq	r0, r0, r2, lsl #20
     6dc:	03000a4c 	movweq	r0, #2636	; 0xa4c
     6e0:	3b0b3a0e 	blcc	2cef20 <__ccfg+0x2aef78>
     6e4:	110b390b 	tstne	fp, fp, lsl #18
     6e8:	4d000001 	stcmi	0, cr0, [r0, #-4]
     6ec:	1331001d 	teqne	r1, #29
     6f0:	06550152 			; <UNDEFINED> instruction: 0x06550152
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	0b590b58 	bleq	164345c <__ccfg+0x16234b4>
void UART0IntHandler () {
     6f8:	00000b57 	andeq	r0, r0, r7, asr fp
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	3f002e4e 	svccc	0x00002e4e
     700:	3a0e030c 	bcc	381338 <__ccfg+0x361390>
     704:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     708:	110c270b 	tstne	ip, fp, lsl #14
     70c:	40011201 	andmi	r1, r1, r1, lsl #4
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	4f00000a 	svcmi	0x0000000a
     714:	08030005 	stmdaeq	r3, {r0, r2}
		RISE_N_SHINE;
     718:	0b3b0b3a 	bleq	ec3408 <__ccfg+0xea3460>
     71c:	13490b39 	movtne	r0, #39737	; 0x9b39
		i_trigger (devevent (UART_A, READ));
     720:	00000a02 	andeq	r0, r0, r2, lsl #20
     724:	03012e50 	movweq	r2, #7760	; 0x1e50
     728:	3b0b3a0e 	blcc	2cef68 <__ccfg+0x2aefc0>
     72c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     730:	010b200c 	tsteq	fp, ip
     734:	51000013 	tstpl	r0, r3, lsl r0
     738:	08030005 	stmdaeq	r3, {r0, r2}
     73c:	0b3b0b3a 	bleq	ec342c <__ccfg+0xea3484>
     740:	13490b39 	movtne	r0, #39737	; 0x9b39
     744:	2e520000 	cdpcs	0, 5, cr0, cr2, cr0, {0}
     748:	3a0e0301 	bcc	381354 <__ccfg+0x3613ac>
     74c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	200c270b 	andcs	r2, ip, fp, lsl #14
     754:	0013010b 	andseq	r0, r3, fp, lsl #2
     758:	00055300 	andeq	r5, r5, r0, lsl #6
		i_trigger (devevent (UART_A, WRITE));
     75c:	0b3a0e03 	bleq	e83f70 <__ccfg+0xe63fc8>
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	0b39053b 	bleq	e41c54 <__ccfg+0xe21cac>
     764:	00001349 	andeq	r1, r0, r9, asr #6
		RISE_N_SHINE;
     768:	03002e54 	movweq	r2, #3668	; 0xe54
     76c:	3b0b3a0e 	blcc	2cefac <__ccfg+0x2af004>
     770:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
		i_trigger (devevent (UART_A, WRITE));
     774:	000b200c 	andeq	r2, fp, ip
     778:	012e5500 			; <UNDEFINED> instruction: 0x012e5500
     77c:	0b3a0e03 	bleq	e83f90 <__ccfg+0xe63fe8>
     780:	0b390b3b 	bleq	e43474 <__ccfg+0xe234cc>
     784:	13490c27 	movtne	r0, #39975	; 0x9c27
     788:	13010b20 	movwne	r0, #6944	; 0x1b20
     78c:	2e560000 	cdpcs	0, 5, cr0, cr6, cr0, {0}
     790:	3a0e0300 	bcc	381398 <__ccfg+0x3613f0>
     794:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     798:	200c270b 	andcs	r2, ip, fp, lsl #14
     79c:	5700000b 	strpl	r0, [r0, -fp]
}
     7a0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
     7a4:	0b3b0b3a 	bleq	ec3494 <__ccfg+0xea34ec>
     7a8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     7ac:	0b201349 	bleq	8054d8 <__ccfg+0x7e5530>
     7b0:	2e580000 	cdpcs	0, 5, cr0, cr8, cr0, {0}
void __buttons_setirq (int val) {
     7b4:	3a0e0300 	bcc	3813bc <__ccfg+0x361414>
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7bc:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	000b2013 	andeq	r2, fp, r3, lsl r0
     7c4:	012e5900 			; <UNDEFINED> instruction: 0x012e5900
     7c8:	01111331 	tsteq	r1, r1, lsr r3
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	0a400112 	beq	1000c1c <__ccfg+0xfe0c74>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d0:	01000000 	mrseq	r0, (UNDEF: 0)
     7d4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     7d8:	0e030b13 	vmoveq.32	d3[0], r0
     7dc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
     7e0:	06100111 			; <UNDEFINED> instruction: 0x06100111
     7e4:	24020000 	strcs	r0, [r2], #-0
}
     7e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     7ec:	000e030b 	andeq	r0, lr, fp, lsl #6
     7f0:	00160300 	andseq	r0, r6, r0, lsl #6
     7f4:	0b3a0e03 	bleq	e84008 <__ccfg+0xe64060>
void __pinlist_setirq (int val) {
     7f8:	0b390b3b 	bleq	e434ec <__ccfg+0xe23544>
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	00001349 	andeq	r1, r0, r9, asr #6
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	0b002404 	bleq	9818 <__exidx_end+0x6b98>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
	for (i = 0; i < N_PINLIST; i++) {
     808:	05000008 	streq	r0, [r0, #-8]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     810:	0b3a0b0b 	bleq	e83444 <__ccfg+0xe6349c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     814:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     818:	0d060000 	stceq	0, cr0, [r6, #-0]
     81c:	490e0300 	stmdbmi	lr, {r8, r9}
	for (i = 0; i < N_PINLIST; i++) {
     820:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
}
     824:	0700000c 	streq	r0, [r0, -ip]
     828:	0b0b000f 	bleq	2c086c <__ccfg+0x2a08c4>
     82c:	26080000 	strcs	r0, [r8], -r0
     830:	00134900 	andseq	r4, r3, r0, lsl #18
void GPIOIntHandler () {
     834:	00350900 	eorseq	r0, r5, r0, lsl #18
if (buttons_int) {
     838:	00001349 	andeq	r1, r0, r9, asr #6
     83c:	0b000f0a 	bleq	446c <__exidx_end+0x17ec>
	buttons_disable ();
     840:	0013490b 	andseq	r4, r3, fp, lsl #18
     844:	01130b00 	tsteq	r3, r0, lsl #22
	i_trigger ((aword)&__button_list);
     848:	0b3a0b0b 	bleq	e8347c <__ccfg+0xe634d4>
     84c:	0b390b3b 	bleq	e43540 <__ccfg+0xe23598>
     850:	00001301 	andeq	r1, r0, r1, lsl #6
     854:	03000d0c 	movweq	r0, #3340	; 0xd0c
     858:	3b0b3a0e 	blcc	2cf098 <__ccfg+0x2af0f0>
     85c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     860:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
     864:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
     868:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
     86c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     870:	0b3b0b3a 	bleq	ec3560 <__ccfg+0xea35b8>
	RISE_N_SHINE;
     874:	13490b39 	movtne	r0, #39737	; 0x9b39
     878:	00000b38 	andeq	r0, r0, r8, lsr fp
     87c:	0300340e 	movweq	r3, #1038	; 0x40e
if (pin_sensor_int) {
     880:	3b0b3a0e 	blcc	2cf0c0 <__ccfg+0x2af118>
     884:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	i_trigger ((aword)(&__input_pins));
     888:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     88c:	0f00000c 	svceq	0x0000000c
     890:	13490101 	movtne	r0, #37121	; 0x9101
     894:	00001301 	andeq	r1, r0, r1, lsl #6
     898:	00002110 	andeq	r2, r0, r0, lsl r1
     89c:	00161100 	andseq	r1, r6, r0, lsl #2
     8a0:	0b3a0e03 	bleq	e840b4 <__ccfg+0xe6410c>
     8a4:	0b39053b 	bleq	e41d98 <__ccfg+0xe21df0>
     8a8:	00001349 	andeq	r1, r0, r9, asr #6
     8ac:	27011512 	smladcs	r1, r2, r5, r1
     8b0:	0013010c 	andseq	r0, r3, ip, lsl #2
	__pinsen_disable_and_clear;
     8b4:	00051300 	andeq	r1, r5, r0, lsl #6
	RISE_N_SHINE;
     8b8:	00001349 	andeq	r1, r0, r9, asr #6
     8bc:	03003414 	movweq	r3, #1044	; 0x414
     8c0:	3b0b3a0e 	blcc	2cf100 <__ccfg+0x2af158>
}
     8c4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     8c8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
     8cc:	1500000c 	strne	r0, [r0, #-12]
     8d0:	0b0b0113 	bleq	2c0d24 <__ccfg+0x2a0d7c>
     8d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void system_init () {
     8d8:	13010b39 	movwne	r0, #6969	; 0x1b39
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	0d160000 	ldceq	0, cr0, [r6, #-0]
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e0:	3a0e0300 	bcc	3814e8 <__ccfg+0x361540>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     8e8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     8ec:	1700000b 	strne	r0, [r0, -fp]
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     8f4:	0b3a0b0b 	bleq	e83528 <__ccfg+0xe63580>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	0b39053b 	bleq	e41dec <__ccfg+0xe21e44>
     8fc:	00001301 	andeq	r1, r0, r1, lsl #6
     900:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	000b2f13 	andeq	r2, fp, r3, lsl pc
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	01151900 	tsteq	r5, r0, lsl #18
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	13490c27 	movtne	r0, #39975	; 0x9c27
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	4700341a 	smladmi	r0, sl, r4, r3
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	3b0b3a13 	blcc	2cf16c <__ccfg+0x2af1c4>
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	020b390b 	andeq	r3, fp, #180224	; 0x2c000
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	1b00000a 	blne	950 <system_init+0x78>
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     928:	0b3b0b3a 	bleq	ec3618 <__ccfg+0xea3670>
     92c:	13490b39 	movtne	r0, #39737	; 0x9b39
     930:	0a020c3f 	beq	83a34 <__ccfg+0x63a8c>
     934:	341c0000 	ldrcc	r0, [ip], #-0
		if (port_confs [i] & 0x80)
     938:	3a0e0300 	bcc	381540 <__ccfg+0x361598>
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     940:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		if (port_confs [i] & 0x40)
     944:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     94c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     950:	13490b39 	movtne	r0, #39737	; 0x9b39
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     954:	00000a02 	andeq	r0, r0, r2, lsl #20
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     958:	3f002e1e 	svccc	0x00002e1e
	all_leds_blink;
     95c:	3a0e030c 	bcc	381594 <__ccfg+0x3615ec>
     960:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     964:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     968:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     96c:	000a4001 	andeq	r4, sl, r1
     970:	012e1f00 			; <UNDEFINED> instruction: 0x012e1f00
     974:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     97c:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
     980:	01120111 	tsteq	r2, r1, lsl r1
     984:	13010a40 	movwne	r0, #6720	; 0x1a40
     988:	05200000 	streq	r0, [r0, #-0]!
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	3a0e0300 	bcc	381594 <__ccfg+0x3615ec>
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     994:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
	IntEnable (INT_AON_RTC_COMB);
     998:	21000006 	tstcs	r0, r6
     99c:	00000018 	andeq	r0, r0, r8, lsl r0
     9a0:	03003422 	movweq	r3, #1058	; 0x422
	__pi_malloc_init ();
     9a4:	3b0b3a08 	blcc	2cf1cc <__ccfg+0x2af224>
	IntEnable (INT_AON_GPIO_EDGE);
     9a8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     9ac:	00060213 	andeq	r0, r6, r3, lsl r2
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	00342300 	eorseq	r2, r4, r0, lsl #6
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	0b3a0803 	bleq	e829c8 <__ccfg+0xe62a20>
     9b8:	0b39053b 	bleq	e41eac <__ccfg+0xe21f04>
     9bc:	0a021349 	beq	856e8 <__ccfg+0x65740>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c0:	34240000 	strtcc	r0, [r4], #-0
     9c4:	3a080300 	bcc	2015cc <__ccfg+0x1e1624>
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9cc:	0013490b 	andseq	r4, r3, fp, lsl #18
     9d0:	000a2500 	andeq	r2, sl, r0, lsl #10
	urates [0] = UART_RATE / 100;
     9d4:	0b3a0e03 	bleq	e841e8 <__ccfg+0xe64240>
     9d8:	0b39053b 	bleq	e41ecc <__ccfg+0xe21f24>
	reinit_uart ();
     9dc:	00000111 	andeq	r0, r0, r1, lsl r1
	EXTRA_INITIALIZERS;
     9e0:	11010b26 	tstne	r1, r6, lsr #22
     9e4:	01011201 	tsteq	r1, r1, lsl #4
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e8:	27000013 	smladcs	r0, r3, r0, r0
     9ec:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
     9f0:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	31011d28 	tstcc	r1, r8, lsr #26
     9f8:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
     a00:	000b5705 	andeq	r5, fp, r5, lsl #14
			devinit [i] . init (devinit [i] . param);
     a04:	00052900 	andeq	r2, r5, r0, lsl #18
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	00001331 	andeq	r1, r0, r1, lsr r3
     a0c:	03012e2a 	movweq	r2, #7722	; 0x1e2a
     a10:	3b0b3a0e 	blcc	2cf250 <__ccfg+0x2af2a8>
	IntEnable (INT_UART0_COMB);
     a14:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     a18:	1201110c 	andne	r1, r1, #12, 2
}
     a1c:	010a4001 	tsteq	sl, r1
	tci_run_auxiliary_timer ();
     a20:	2b000013 	blcs	a74 <system_init+0x19c>
		diag ("");
     a24:	08030005 	stmdaeq	r3, {r0, r2}
     a28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2c:	13490b39 	movtne	r0, #39737	; 0x9b39
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	00000602 	andeq	r0, r0, r2, lsl #12
		diag ("Leftover RAM: %d bytes",
     a34:	3f012e2c 	svccc	0x00012e2c
     a38:	3a0e030c 	bcc	381670 <__ccfg+0x3616c8>
     a3c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a40:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     a44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a48:	010a4001 	tsteq	sl, r1
     a4c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     a50:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     a54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     a58:	13490b39 	movtne	r0, #39737	; 0x9b39
     a5c:	00000602 	andeq	r0, r0, r2, lsl #12
     a60:	3f012e2e 	svccc	0x00012e2e
     a64:	3a0e030c 	bcc	38169c <__ccfg+0x3616f4>
     a68:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a6c:	200c270b 	andcs	r2, ip, fp, lsl #14
     a70:	0013010b 	andseq	r0, r3, fp, lsl #2
     a74:	00052f00 	andeq	r2, r5, r0, lsl #30
     a78:	0b3a0803 	bleq	e82a8c <__ccfg+0xe62ae4>
     a7c:	0b39053b 	bleq	e41f70 <__ccfg+0xe21fc8>
     a80:	00001349 	andeq	r1, r0, r9, asr #6
     a84:	3f012e30 	svccc	0x00012e30
     a88:	3a0e030c 	bcc	3816c0 <__ccfg+0x361718>
     a8c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
__attribute__ ((noreturn)) void __pi_release () {
     a90:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
     a94:	010a4001 	tsteq	sl, r1
     a98:	31000013 	tstcc	r0, r3, lsl r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 9ec <system_init+0x114>
	check_stack_overflow;
     aa0:	0b3a0803 	bleq	e82ab4 <__ccfg+0xe62b0c>
     aa4:	0b39053b 	bleq	e41f98 <__ccfg+0xe21ff0>
     aa8:	13490c27 	movtne	r0, #39975	; 0x9c27
	update_n_wake (MAX_WORD, NO);
     aac:	01120111 	tsteq	r2, r1, lsl r1
     ab0:	13010a40 	movwne	r0, #6720	; 0x1a40
     ab4:	05320000 	ldreq	r0, [r2, #-0]!
	for_all_tasks (__pi_curr) {
     ab8:	3a080300 	bcc	2016c0 <__ccfg+0x1e1718>
     abc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ac0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	3300000a 	movwcc	r0, #10
	__SLEEP;
     ac8:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; a18 <system_init+0x140>
     acc:	0b3a0e03 	bleq	e842e0 <__ccfg+0xe64338>
     ad0:	0b39053b 	bleq	e41fc4 <__ccfg+0xe2201c>
     ad4:	01110c27 	tsteq	r1, r7, lsr #24
	system_event_count ++;
     ad8:	0a400112 	beq	1000f28 <__ccfg+0xfe0f80>
     adc:	05340000 	ldreq	r0, [r4, #-0]!
	switch (__pi_systat.effpdm) {
     ae0:	3a0e0300 	bcc	3816e8 <__ccfg+0x361740>
     ae4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     aec:	3500000a 	strcc	r0, [r0, #-10]
			__WFI ();
     af0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     af4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     af8:	13490b39 	movtne	r0, #39737	; 0x9b39
	check_stack_overflow;
     afc:	0b360000 	bleq	d80b04 <__ccfg+0xd60b5c>
     b00:	00065501 	andeq	r5, r6, r1, lsl #10
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	012e3700 			; <UNDEFINED> instruction: 0x012e3700
     b08:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	0b3b0b3a 	bleq	ec37fc <__ccfg+0xea3854>
			goto Redo;
     b10:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	for_all_tasks (__pi_curr) {
     b14:	13010b20 	movwne	r0, #6944	; 0x1b20
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	05380000 	ldreq	r0, [r8, #-0]!
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1c:	3a080300 	bcc	201724 <__ccfg+0x1e177c>
     b20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b24:	0013490b 	andseq	r4, r3, fp, lsl #18
     b28:	00053900 	andeq	r3, r5, r0, lsl #18
     b2c:	0b3a0e03 	bleq	e84340 <__ccfg+0xe64398>
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b30:	0b390b3b 	bleq	e43824 <__ccfg+0xe2387c>
     b34:	00001349 	andeq	r1, r0, r9, asr #6
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b38:	0300343a 	movweq	r3, #1082	; 0x43a
     b3c:	3b0b3a08 	blcc	2cf364 <__ccfg+0x2af3bc>
			__WFI ();
     b40:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	3b000013 	blcc	b98 <__pi_release+0x108>
     b48:	0803000a 	stmdaeq	r3, {r1, r3}
}
     b4c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b50:	00000b39 	andeq	r0, r0, r9, lsr fp
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b54:	3f012e3c 	svccc	0x00012e3c
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b58:	3a0e030c 	bcc	381790 <__ccfg+0x3617e8>
     b5c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	110c270b 	tstne	ip, fp, lsl #14
     b64:	40011201 	andmi	r1, r1, r1, lsl #4
     b68:	0013010a 	andseq	r0, r3, sl, lsl #2
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6c:	00053d00 	andeq	r3, r5, r0, lsl #26
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	0b3a0803 	bleq	e82b84 <__ccfg+0xe62bdc>
     b74:	0b390b3b 	bleq	e43868 <__ccfg+0xe238c0>
     b78:	06021349 	streq	r1, [r2], -r9, asr #6
     b7c:	343e0000 	ldrtcc	r0, [lr], #-0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	3a080300 	bcc	201788 <__ccfg+0x1e17e0>
     b84:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	3f000006 	svccc	0x00000006
     b90:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; ae0 <__pi_release+0x50>
     b94:	0b3a0e03 	bleq	e843a8 <__ccfg+0xe64400>
     b98:	0b390b3b 	bleq	e4388c <__ccfg+0xe238e4>
     b9c:	01110c27 	tsteq	r1, r7, lsr #24
			SysCtrlSetRechargeBeforePowerDown
     ba0:	0a400112 	beq	1000ff0 <__ccfg+0xfe1048>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	2e400000 	cdpcs	0, 4, cr0, cr0, cr0, {0}
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba8:	3a0e0301 	bcc	3817b4 <__ccfg+0x36180c>
     bac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     bb4:	010b2013 	tsteq	fp, r3, lsl r0
     bb8:	41000013 	tstmi	r0, r3, lsl r0
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	0e03012e 	adfeqsp	f0, f3, #0.5
     bc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	0b201349 	bleq	8058f4 <__ccfg+0x7e594c>
     bcc:	00001301 	andeq	r1, r0, r1, lsl #6
     bd0:	31012e42 	tstcc	r1, r2, asr #28
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			while (!(AONWUCPowerStatusGet () &
     bd8:	010a4001 	tsteq	sl, r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	43000013 	movwmi	r0, #19
     be0:	13310005 	teqne	r1, #5
     be4:	00000602 	andeq	r0, r0, r2, lsl #12
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be8:	31003444 	tstcc	r0, r4, asr #8
     bec:	00060213 	andeq	r0, r6, r3, lsl r2
     bf0:	011d4500 	tsteq	sp, r0, lsl #10
     bf4:	01111331 	tsteq	r1, r1, lsr r3
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf8:	0b580112 	bleq	1601048 <__ccfg+0x15e10a0>
     bfc:	0b570b59 	bleq	15c3968 <__ccfg+0x15a39c0>
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c00:	34460000 	strbcc	r0, [r6], #-0
     c04:	00133100 	andseq	r3, r3, r0, lsl #2
			SysCtrlAdjustRechargeAfterPowerDown ();
     c08:	011d4700 	tsteq	sp, r0, lsl #14
			reinit_uart ();
     c0c:	01521331 	cmpeq	r2, r1, lsr r3
     c10:	0b580655 	bleq	160256c <__ccfg+0x15e25c4>
     c14:	0b570b59 	bleq	15c3980 <__ccfg+0x15a39d8>
}
     c18:	0a480000 	beq	1200c20 <__ccfg+0x11e0c78>
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1c:	11133100 	tstne	r3, r0, lsl #2
     c20:	49000001 	stmdbmi	r0, {r0}
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     c28:	01120111 	tsteq	r2, r1, lsl r1
     c2c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c30:	00000b57 	andeq	r0, r0, r7, asr fp
     c34:	31012e4a 	tstcc	r1, sl, asr #28
     c38:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	000a4001 	andeq	r4, sl, r1
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	11010000 	mrsne	r0, (UNDEF: 1)
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	130e2501 	movwne	r2, #58625	; 0xe501
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	1b0e030b 	blne	38187c <__ccfg+0x3618d4>
     c4c:	1106550e 	tstne	r6, lr, lsl #10
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c50:	00061001 	andeq	r1, r6, r1
     c54:	00240200 	eoreq	r0, r4, r0, lsl #4
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	0b3e0b0b 	bleq	f8388c <__ccfg+0xf638e4>
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5c:	00000e03 	andeq	r0, r0, r3, lsl #28
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c60:	03001603 	movweq	r1, #1539	; 0x603
     c64:	3b0b3a0e 	blcc	2cf4a4 <__ccfg+0x2af4fc>
			PRCMPowerDomainOff (
     c68:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     c6c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	__SLEEP;
     c70:	0b0b0024 	bleq	2c0d08 <__ccfg+0x2a0d60>
     c74:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	13050000 	movwne	r0, #20480	; 0x5000
	goto Redo;
     c7c:	0b0e0301 	bleq	381888 <__ccfg+0x3618e0>
     c80:	3b0b3a0b 	blcc	2cf4b4 <__ccfg+0x2af50c>
     c84:	0013010b 	andseq	r0, r3, fp, lsl #2
     c88:	000d0600 	andeq	r0, sp, r0, lsl #12
     c8c:	13490e03 	movtne	r0, #40451	; 0x9e03
     c90:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
     c94:	0f070000 	svceq	0x00070000
     c98:	000b0b00 	andeq	r0, fp, r0, lsl #22
     c9c:	00260800 	eoreq	r0, r6, r0, lsl #16
     ca0:	00001349 	andeq	r1, r0, r9, asr #6
     ca4:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
     ca8:	0a000013 	beq	cfc <main+0x14>
     cac:	0b0b000f 	bleq	2c0cf0 <__ccfg+0x2a0d48>
     cb0:	00001349 	andeq	r1, r0, r9, asr #6
     cb4:	0b01130b 	bleq	458e8 <__ccfg+0x25940>
     cb8:	3b0b3a0b 	blcc	2cf4ec <__ccfg+0x2af544>
     cbc:	010b390b 	tsteq	fp, fp, lsl #18
     cc0:	0c000013 	stceq	0, cr0, [r0], {19}
     cc4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cc8:	0b3b0b3a 	bleq	ec39b8 <__ccfg+0xea3a10>
     ccc:	13490b39 	movtne	r0, #39737	; 0x9b39
     cd0:	0b0d0b0b 	bleq	343904 <__ccfg+0x32395c>
     cd4:	0b380b0c 	bleq	e0390c <__ccfg+0xde3964>
     cd8:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     cdc:	3a0e0300 	bcc	3818e4 <__ccfg+0x36193c>
     ce0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ce4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
int main (void) {
     ce8:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     cf0:	0b3b0b3a 	bleq	ec39e0 <__ccfg+0xea3a38>
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	13490b39 	movtne	r0, #39737	; 0x9b39
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
	system_init ();
     cfc:	010f0000 	mrseq	r0, CPSR
	tcv_init ();
     d00:	01134901 	tsteq	r3, r1, lsl #18
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	10000013 	andne	r0, r0, r3, lsl r0
     d08:	00000021 	andeq	r0, r0, r1, lsr #32
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d0c:	03001611 	movweq	r1, #1553	; 0x611
     d10:	3b0b3a0e 	blcc	2cf550 <__ccfg+0x2af5a8>
     d14:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	12000013 	andne	r0, r0, #19
     d1c:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
	delay (16, 0);
     d20:	00001301 	andeq	r1, r0, r1, lsl #6
     d24:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
     d28:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
	__pi_release ();
     d2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d30:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     d34:	13490b39 	movtne	r0, #39737	; 0x9b39
     d38:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
     d3c:	15150000 	ldrne	r0, [r5, #-0]
     d40:	490c2701 	stmdbmi	ip, {r0, r8, r9, sl, sp}
     d44:	00130113 	andseq	r0, r3, r3, lsl r1
static void killev (__pi_pcb_t *pid) {
     d48:	01131600 	tsteq	r3, r0, lsl #12
	wfun = (aword)(pid->code);
     d4c:	0b0b0e03 	bleq	2c4560 <__ccfg+0x2a45b8>
	for_all_tasks (i) {
     d50:	0b3b0b3a 	bleq	ec3a40 <__ccfg+0xea3a98>
		for (j = 0; j < nevents (i); j++) {
     d54:	13010b39 	movwne	r0, #6969	; 0x1b39
     d58:	17170000 	ldrne	r0, [r7, -r0]
     d5c:	3a0b0b01 	bcc	2c3968 <__ccfg+0x2a39c0>
			    || i->Events [j] . Event == wfun
     d60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		for (j = 0; j < nevents (i); j++) {
     d64:	0013010b 	andseq	r0, r3, fp, lsl #2
			if (i->Events [j] . Event == (aword)pid
     d68:	000d1800 	andeq	r1, sp, r0, lsl #16
     d6c:	0b3a0e03 	bleq	e84580 <__ccfg+0xe645d8>
     d70:	0b390b3b 	bleq	e43a64 <__ccfg+0xe23abc>
				wakeupev (i, j);
     d74:	00001349 	andeq	r1, r0, r9, asr #6
     d78:	03000d19 	movweq	r0, #3353	; 0xd19
	for_all_tasks (i) {
     d7c:	3b0b3a08 	blcc	2cf5a4 <__ccfg+0x2af5fc>
}
     d80:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	1a000013 	bne	dd8 <qfree+0x54>
static void qfree (aword *ch) {
     d88:	0803000d 	stmdaeq	r3, {r0, r2, r3}
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	0b3b0b3a 	bleq	ec3a7c <__ccfg+0xea3ad4>
	cc = (aword*)(mpools + MA_NP);
     d90:	13490b39 	movtne	r0, #39737	; 0x9b39
	m_setnextp (ch, chunk);
     d94:	00000b38 	andeq	r0, r0, r8, lsr fp
	m_setnextp (cc, ch);
     d98:	0b01131b 	bleq	45a0c <__ccfg+0x25a64>
}
     d9c:	3b0b3a0b 	blcc	2cf5d0 <__ccfg+0x2af628>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da0:	010b3905 	tsteq	fp, r5, lsl #18
     da4:	1c000013 	stcne	0, cr0, [r0], {19}
     da8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
			m_setnextp (cc, m_nextp (chunk));
     dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	13490b39 	movtne	r0, #39737	; 0x9b39
     db4:	00000b38 	andeq	r0, r0, r8, lsr fp
     db8:	0301131d 	movweq	r1, #4893	; 0x131d
     dbc:	3a0b0b0e 	bcc	2c39fc <__ccfg+0x2a3a54>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	0013010b 	andseq	r0, r3, fp, lsl #2
     dc8:	00211e00 	eoreq	r1, r1, r0, lsl #28
     dcc:	0b2f1349 	bleq	bc5af8 <__ccfg+0xba5b50>
			m_setnextp (cc, m_nextp (chunk));
     dd0:	341f0000 	ldrcc	r0, [pc], #-0	; dd8 <qfree+0x54>
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	3a0e0300 	bcc	3819dc <__ccfg+0x361a34>
     dd8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ddc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     de0:	2000000a 	andcs	r0, r0, sl
     de4:	0c3f002e 	ldceq	0, cr0, [pc], #-184	; d34 <main+0x4c>
     de8:	0b3a0e03 	bleq	e845fc <__ccfg+0xe64654>
			if (m_size (chunk) >= m_size (ch))
     dec:	0b39053b 	bleq	e422e0 <__ccfg+0xe22338>
     df0:	01110c27 	tsteq	r1, r7, lsr #24
     df4:	0a400112 	beq	1001244 <__ccfg+0xfe129c>
		chunk = m_nextp (chunk))
     df8:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     dfc:	030c3f01 	movweq	r3, #52993	; 0xcf01
     e00:	3b0b3a0e 	blcc	2cf640 <__ccfg+0x2af698>
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
	diag_wait (a);
     e08:	1113490c 	tstne	r3, ip, lsl #18
	diag_wchar (c, a);
     e0c:	40011201 	andmi	r1, r1, r1, lsl #4
     e10:	0013010a 	andseq	r0, r3, sl, lsl #2
}
     e14:	00052200 	andeq	r2, r5, r0, lsl #4
     e18:	0b3a0803 	bleq	e82e2c <__ccfg+0xe62e84>
	syserror (ESTATE, "state");
     e1c:	0b39053b 	bleq	e42310 <__ccfg+0xe22368>
     e20:	06021349 	streq	r1, [r2], -r9, asr #6
     e24:	1d230000 	stcne	0, cr0, [r3, #-0]
     e28:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
void update_n_wake (word min, Boolean force) {
     e2c:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	5705590b 	strpl	r5, [r5, -fp, lsl #18]
     e34:	2400000b 	strcs	r0, [r0], #-11
     e38:	13310005 	teqne	r1, #5
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	00000602 	andeq	r0, r0, r2, lsl #12
     e40:	55010b25 	strpl	r0, [r1, #-2853]	; 0xfffff4db
     e44:	26000006 	strcs	r0, [r0], -r6
     e48:	13310034 	teqne	r1, #52	; 0x34
     e4c:	00000602 	andeq	r0, r0, r2, lsl #12
     e50:	3f012e27 	svccc	0x00012e27
     e54:	3a0e030c 	bcc	381a8c <__ccfg+0x361ae4>
     e58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e5c:	110c270b 	tstne	ip, fp, lsl #14
     e60:	40011201 	andmi	r1, r1, r1, lsl #4
     e64:	0013010a 	andseq	r0, r3, sl, lsl #2
     e68:	00342800 	eorseq	r2, r4, r0, lsl #16
     e6c:	0b3a0803 	bleq	e82e80 <__ccfg+0xe62ed8>
		for_all_tasks (i) {
     e70:	0b39053b 	bleq	e42364 <__ccfg+0xe223bc>
	__pi_mintk = znew + min;
     e74:	06021349 	streq	r1, [r2], -r9, asr #6
     e78:	34290000 	strtcc	r0, [r9], #-0
			if (!twaiting (i))
     e7c:	3a080300 	bcc	201a84 <__ccfg+0x1e1adc>
     e80:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	0013490b 	andseq	r4, r3, fp, lsl #18
     e88:	00342a00 	eorseq	r2, r4, r0, lsl #20
     e8c:	0b3a0803 	bleq	e82ea0 <__ccfg+0xe62ef8>
     e90:	0b39053b 	bleq	e42384 <__ccfg+0xe223dc>
     e94:	0a021349 	beq	85bc0 <__ccfg+0x65c18>
     e98:	052b0000 	streq	r0, [fp, #-0]!
     e9c:	3a0e0300 	bcc	381aa4 <__ccfg+0x361afc>
     ea0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ea4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ea8:	2c000006 	stccs	0, cr0, [r0], {6}
     eac:	0c3f012e 	ldfeqs	f0, [pc], #-184	; dfc <qfree+0x78>
     eb0:	0b3a0e03 	bleq	e846c4 <__ccfg+0xe6471c>
				wakeuptm (i);
     eb4:	0b39053b 	bleq	e423a8 <__ccfg+0xe22400>
     eb8:	13490c27 	movtne	r0, #39975	; 0x9c27
		for_all_tasks (i) {
     ebc:	13010b20 	movwne	r0, #6944	; 0x1b20
				d = i->Timer - znew;
     ec0:	052d0000 	streq	r0, [sp, #-0]!
     ec4:	3a0e0300 	bcc	381acc <__ccfg+0x361b24>
     ec8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	0013490b 	andseq	r4, r3, fp, lsl #18
     ed0:	00052e00 	andeq	r2, r5, r0, lsl #28
     ed4:	0b3a0803 	bleq	e82ee8 <__ccfg+0xe62f40>
	__pi_old = znew;
     ed8:	0b39053b 	bleq	e423cc <__ccfg+0xe22424>
}
     edc:	00001349 	andeq	r1, r0, r9, asr #6
	TCI_RUN_DELAY_TIMER;
     ee0:	11010b2f 	tstne	r1, pc, lsr #22
}
     ee4:	00011201 	andeq	r1, r1, r1, lsl #4
     ee8:	00343000 	eorseq	r3, r4, r0
     eec:	0b3a0e03 	bleq	e84700 <__ccfg+0xe64758>
     ef0:	0b39053b 	bleq	e423e4 <__ccfg+0xe2243c>
     ef4:	0a021349 	beq	85c20 <__ccfg+0x65c78>
void proceed (word state) {
     ef8:	0a310000 	beq	c40f00 <__ccfg+0xc20f58>
	prcdstate (__pi_curr, state);
     efc:	3a0e0300 	bcc	381b04 <__ccfg+0x361b5c>
     f00:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	release;
     f04:	0001110b 	andeq	r1, r1, fp, lsl #2
     f08:	011d3200 	tsteq	sp, r0, lsl #4
void __pi_wait (aword event, word state) {
     f0c:	01111331 	tsteq	r1, r1, lsr r3
	sint j = nevents (__pi_curr);
     f10:	0b580112 	bleq	1601360 <__ccfg+0x15e13b8>
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	0b570559 	bleq	15c2480 <__ccfg+0x15a24d8>
     f18:	05330000 	ldreq	r0, [r3, #-0]!
     f1c:	00133100 	andseq	r3, r3, r0, lsl #2
		syserror (ENEVENTS, "sw");
     f20:	00053400 	andeq	r3, r5, r0, lsl #8
     f24:	0b3a0803 	bleq	e82f38 <__ccfg+0xe62f90>
	setestate (__pi_curr->Events [j], state, event);
     f28:	0b39053b 	bleq	e4241c <__ccfg+0xe22474>
	incwait (__pi_curr);
     f2c:	0a021349 	beq	85c58 <__ccfg+0x65cb0>
	setestate (__pi_curr->Events [j], state, event);
     f30:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
}
     f34:	36000000 	strcc	r0, [r0], -r0
     f38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     f3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
void __pi_trigger (aword event) {
     f40:	13490b39 	movtne	r0, #39737	; 0x9b39
	for_all_tasks (i) {
     f44:	2e370000 	cdpcs	0, 3, cr0, cr7, cr0, {0}
		for (j = 0; j < nevents (i); j++) {
     f48:	3a080301 	bcc	201b54 <__ccfg+0x1e1bac>
     f4c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f50:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
     f54:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
			if (i->Events [j] . Event == event) {
     f58:	010a4001 	tsteq	sl, r1
     f5c:	38000013 	stmdacc	r0, {r0, r1, r4}
     f60:	0803012e 	stmdaeq	r3, {r1, r2, r3, r5, r8}
				wakeupev (i, j);
     f64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f68:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	for_all_tasks (i) {
     f6c:	01120111 	tsteq	r2, r1, lsl r1
}
     f70:	13010a40 	movwne	r0, #6720	; 0x1a40
aword __pi_join (aword pid, word st) {
     f74:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
	for_all_tasks (i) {
     f78:	3a0e0301 	bcc	381b84 <__ccfg+0x361bdc>
     f7c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	return 0;
     f80:	200c270b 	andcs	r2, ip, fp, lsl #14
		if ((aword)i == pid) {
     f84:	0013010b 	andseq	r0, r3, fp, lsl #2
			__pi_wait (pid, st);
     f88:	00053a00 	andeq	r3, r5, r0, lsl #20
}
     f8c:	0b3a0803 	bleq	e82fa0 <__ccfg+0xe62ff8>
	for_all_tasks (i) {
     f90:	0b390b3b 	bleq	e43c84 <__ccfg+0xe23cdc>
     f94:	00001349 	andeq	r1, r0, r9, asr #6
void delay (word d, word state) {
     f98:	03012e3b 	movweq	r2, #7739	; 0x1e3b
	settstate (__pi_curr, state);
     f9c:	3b0b3a0e 	blcc	2cf7dc <__ccfg+0x2af834>
     fa0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     fa4:	2013490c 	andscs	r4, r3, ip, lsl #18
     fa8:	0013010b 	andseq	r0, r3, fp, lsl #2
	update_n_wake (d, YES);
     fac:	00343c00 	eorseq	r3, r4, r0, lsl #24
     fb0:	0b3a0803 	bleq	e82fc4 <__ccfg+0xe6301c>
	__pi_curr->Timer = __pi_old + d;
     fb4:	0b390b3b 	bleq	e43ca8 <__ccfg+0xe23d00>
     fb8:	00001349 	andeq	r1, r0, r9, asr #6
	inctimer (__pi_curr);
     fbc:	03012e3d 	movweq	r2, #7741	; 0x1e3d
     fc0:	3b0b3a08 	blcc	2cf7e8 <__ccfg+0x2af840>
     fc4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
}
     fc8:	010b200c 	tsteq	fp, ip
     fcc:	3e000013 	mcrcc	0, 0, r0, cr0, cr3, {0}
	if (fun == NULL)
     fd0:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
		return (int) __pi_curr;
     fd4:	01120111 	tsteq	r2, r1, lsl r1
     fd8:	13010a40 	movwne	r0, #6720	; 0x1a40
	for_all_tasks (i)
     fdc:	053f0000 	ldreq	r0, [pc, #-0]!	; fe4 <running+0x14>
}
     fe0:	02133100 	andseq	r3, r3, #0, 2
		if (i->code == fun)
     fe4:	4000000a 	andmi	r0, r0, sl
	for_all_tasks (i)
     fe8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
     fec:	01120111 	tsteq	r2, r1, lsl r1
     ff0:	0b590b58 	bleq	1643d58 <__ccfg+0x1623db0>
int __pi_strlen (const char *s) {
     ff4:	00000b57 	andeq	r0, r0, r7, asr fp
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	31011d41 	tstcc	r1, r1, asr #26
}
     ffc:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
	for (i = 0; *(s+i) != '\0'; i++);
    1000:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	while (n--)
    1004:	000b570b 	andeq	r5, fp, fp, lsl #14
    1008:	012e4200 			; <UNDEFINED> instruction: 0x012e4200
		*dest++ = *src++;
    100c:	01111331 	tsteq	r1, r1, lsr r3
    1010:	0a400112 	beq	1001460 <__ccfg+0xfe14b8>
    1014:	34430000 	strbcc	r0, [r3], #-0
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	00133100 	andseq	r3, r3, r0, lsl #2
		syserror (EREQPAR, "addv");
    101c:	11010000 	mrsne	r0, (UNDEF: 1)
		syserror (ERESOURCE, "addv");
    1020:	130e2501 	movwne	r2, #58625	; 0xe501
	if (ioreq [loc] != NULL)
    1024:	1b0e030b 	blne	381c58 <__ccfg+0x361cb0>
    1028:	1106550e 	tstne	r6, lr, lsl #10
		syserror (ERESOURCE, "addv");
    102c:	00061001 	andeq	r1, r6, r1
	ioreq [loc] = rf;
    1030:	00240200 	eoreq	r0, r4, r0, lsl #4
}
    1034:	0b3e0b0b 	bleq	f83c68 <__ccfg+0xf63cc0>
    1038:	00000e03 	andeq	r0, r0, r3, lsl #28
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	03001603 	movweq	r1, #1539	; 0x603
    1040:	3b0b3a0e 	blcc	2cf880 <__ccfg+0x2af8d8>
    1044:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1048:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	0b0b0024 	bleq	2c10e4 <__ccfg+0x2a113c>
    1050:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1054:	0f050000 	svceq	0x00050000
		syserror (ENODEVICE, "io");
    1058:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    105c:	06000013 			; <UNDEFINED> instruction: 0x06000013
	if (len == 0)
    1060:	13490026 	movtne	r0, #36902	; 0x9026
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	15070000 	strne	r0, [r7, #-0]
    1068:	000c2700 	andeq	r2, ip, r0, lsl #14
	if (ret >= 0)
    106c:	00340800 	eorseq	r0, r4, r0, lsl #16
	if (ret == -1) {
    1070:	0b3a0e03 	bleq	e84884 <__ccfg+0xe648dc>
    1074:	0b390b3b 	bleq	e43d68 <__ccfg+0xe23dc0>
		if (retry == WNONE)
    1078:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; f5c <__pi_trigger+0x1c>
		iowait (dev, operation, retry);
    107c:	00000c3c 	andeq	r0, r0, ip, lsr ip
    1080:	49010109 	stmdbmi	r1, {r0, r3, r8}
    1084:	00130113 	andseq	r0, r3, r3, lsl r1
			release;
    1088:	00210a00 	eoreq	r0, r1, r0, lsl #20
	if (ret == -2) {
    108c:	0b2f1349 	bleq	bc5db8 <__ccfg+0xba5e10>
		if (retry != WNONE) {
    1090:	340b0000 	strcc	r0, [fp], #-0
    1094:	3a0e0300 	bcc	381c9c <__ccfg+0x361cf4>
			iowait (dev, operation, retry);
    1098:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    109c:	3f13490b 	svccc	0x0013490b
			(ioreq [dev]) (NONE, buf, len);
    10a0:	000a020c 	andeq	r0, sl, ip, lsl #4
    10a4:	002e0c00 	eoreq	r0, lr, r0, lsl #24
    10a8:	0b3a0e03 	bleq	e848bc <__ccfg+0xe64914>
		(ioreq [dev]) (NONE, buf, len);
    10ac:	0b39053b 	bleq	e425a0 <__ccfg+0xe225f8>
    10b0:	01110c27 	tsteq	r1, r7, lsr #24
    10b4:	0a400112 	beq	1001504 <__ccfg+0xfe155c>
}
    10b8:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
	if (retry != WNONE) {
    10bc:	030c3f01 	movweq	r3, #52993	; 0xcf01
		delay (-ret - 2, retry);
    10c0:	3b0b3a0e 	blcc	2cf900 <__ccfg+0x2af958>
    10c4:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10c8:	1201110c 	andne	r1, r1, #12, 2
    10cc:	000a4001 	andeq	r4, sl, r1
		release;
    10d0:	00340e00 	eorseq	r0, r4, r0, lsl #28
    10d4:	0b3a0e03 	bleq	e848e8 <__ccfg+0xe64940>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	0b390b3b 	bleq	e43dcc <__ccfg+0xe23e24>
    10dc:	06021349 	streq	r1, [r2], -r9, asr #6
    10e0:	01000000 	mrseq	r0, (UNDEF: 0)
    10e4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    10e8:	0e030b13 	vmoveq.32	d3[0], r0
		syserror (ERESOURCE, "mal1");
    10ec:	06100e1b 			; <UNDEFINED> instruction: 0x06100e1b
    10f0:	24020000 	strcs	r0, [r2], #-0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    10f8:	000e030b 	andeq	r0, lr, fp, lsl #6
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fc:	00160300 	andseq	r0, r6, r0, lsl #6
	m_size (mpools [0]) = mlen - m_hdrlen;
    1100:	0b3a0e03 	bleq	e84914 <__ccfg+0xe6496c>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1104:	0b390b3b 	bleq	e43df8 <__ccfg+0xe23e50>
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1108:	00001349 	andeq	r1, r0, r9, asr #6
    110c:	0b002404 	bleq	a124 <__exidx_end+0x74a4>
}
    1110:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1114:	05000008 	streq	r0, [r0, #-8]
    1118:	0b0b0113 	bleq	2c156c <__ccfg+0x2a15c4>
    111c:	0b3b0b3a 	bleq	ec3e0c <__ccfg+0xea3e64>
    1120:	13010b39 	movwne	r0, #6969	; 0x1b39
    1124:	0d060000 	stceq	0, cr0, [r6, #-0]
void __pi_free (aword *ch) {
    1128:	3a0e0300 	bcc	381d30 <__ccfg+0x361d88>
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    112c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1130:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
		syserror (EMALLOC, "malg");
    1134:	0700000b 	streq	r0, [r0, -fp]
    1138:	13490026 	movtne	r0, #36902	; 0x9026
	mcfree [MA_NP] += m_size (ch);
    113c:	34080000 	strcc	r0, [r8], #-0
		m_size (ch) ^= MALLOC_UMASK;
    1140:	3a0e0300 	bcc	381d48 <__ccfg+0x361da0>
    1144:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	mcfree [MA_NP] += m_size (ch);
    1148:	3f13490b 	svccc	0x0013490b
	QFREE;
    114c:	000c3c0c 	andeq	r3, ip, ip, lsl #24
	if (mevent [MA_NP] . nwait) {
    1150:	00350900 	eorseq	r0, r5, r0, lsl #18
    1154:	00001349 	andeq	r1, r0, r9, asr #6
		trigger ((aword)(&(mevent [MA_NP])));
    1158:	03000d0a 	movweq	r0, #3338	; 0xd0a
		mevent [MA_NP] . nwait --;
    115c:	3b0b3a0e 	blcc	2cf99c <__ccfg+0x2af9f4>
}
    1160:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1164:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1168:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    116c:	0b00000b 	bleq	11a0 <kill+0x30>
void kill (aword pid) {
    1170:	0b0b000f 	bleq	2c11b4 <__ccfg+0x2a120c>
		pid = (aword) __pi_curr;
    1174:	00001349 	andeq	r1, r0, r9, asr #6
	j = NULL;
    1178:	4901010c 	stmdbmi	r1, {r2, r3, r8}
	for_all_tasks (i) {
    117c:	00130113 	andseq	r0, r3, r3, lsl r1
	syserror (EREQPAR, "kpi");
    1180:	00210d00 	eoreq	r0, r1, r0, lsl #26
    1184:	160e0000 	strne	r0, [lr], -r0
		if ((aword)i == pid) {
    1188:	3a0e0300 	bcc	381d90 <__ccfg+0x361de8>
    118c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				__PCB = i->Next;
    1190:	0013490b 	andseq	r4, r3, fp, lsl #18
			killev (i);
    1194:	01150f00 	tsteq	r5, r0, lsl #30
			ufree (i);
    1198:	13010c27 	movwne	r0, #7207	; 0x1c27
			if (i == __pi_curr)
    119c:	05100000 	ldreq	r0, [r0, #-0]
    11a0:	00134900 	andseq	r4, r3, r0, lsl #18
				release;
    11a4:	00341100 	eorseq	r1, r4, r0, lsl #2
				j->Next = i->Next;
    11a8:	0b3a0e03 	bleq	e849bc <__ccfg+0xe64a14>
    11ac:	0b39053b 	bleq	e426a0 <__ccfg+0xe226f8>
    11b0:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1094 <io+0x58>
}
    11b4:	00000c3c 	andeq	r0, r0, ip, lsr ip
    11b8:	0b011312 	bleq	45e08 <__ccfg+0x25e60>
    11bc:	3b0b3a0b 	blcc	2cf9f0 <__ccfg+0x2afa48>
	if (size < 8)
    11c0:	010b3905 	tsteq	fp, r5, lsl #18
		_size = 2;
    11c4:	13000013 	movwne	r0, #19
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
		_size = (((aword)size) + 3) >> 2;
    11cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d0:	13490b39 	movtne	r0, #39737	; 0x9b39
		_size = (((aword)size) + 3) >> 2;
    11d4:	00000b38 	andeq	r0, r0, r8, lsr fp
		if (mevent [MA_NP] . nfail != 255)
    11d8:	03011314 	movweq	r1, #4884	; 0x1314
    11dc:	3a0b0b0e 	bcc	2c3e1c <__ccfg+0x2a3e74>
			mevent [MA_NP] . nfail ++;
    11e0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		mnfree [MA_NP] = 0;
    11e4:	0013010b 	andseq	r0, r3, fp, lsl #2
    11e8:	00211500 	eoreq	r1, r1, r0, lsl #10
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	0b2f1349 	bleq	bc5f18 <__ccfg+0xba5f70>
    11f0:	34160000 	ldrcc	r0, [r6], #-0
			syserror (EMALLOC, "malc");
    11f4:	3a134700 	bcc	4d2dfc <__ccfg+0x4b2e54>
    11f8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		if (m_size (chunk) >= _size)
    11fc:	000a020b 	andeq	r0, sl, fp, lsl #4
    1200:	11010000 	mrsne	r0, (UNDEF: 1)
		chunk = m_nextp (chunk)) {
    1204:	130e2501 	movwne	r2, #58625	; 0xe501
		m_setnextp (cc, m_nextp (chunk));
    1208:	1b0e030b 	blne	381e3c <__ccfg+0x361e94>
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120c:	1106550e 	tstne	r6, lr, lsl #10
    1210:	00061001 	andeq	r1, r6, r1
			m_size (chunk) = _size;
    1214:	00240200 	eoreq	r0, r4, r0, lsl #4
			cc = chunk + _size + m_hdrlen;
    1218:	0b3e0b0b 	bleq	f83e4c <__ccfg+0xf63ea4>
    121c:	00000e03 	andeq	r0, r0, r3, lsl #28
			m_size (cc) = waste - m_hdrlen;
    1220:	03001603 	movweq	r1, #1539	; 0x603
			QFREE;
    1224:	3b0b3a0e 	blcc	2cfa64 <__ccfg+0x2afabc>
		mevent [MA_NP] . nfail = 0;
    1228:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		mcfree [MA_NP] -= m_size (chunk);
    122c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1230:	0b0b0024 	bleq	2c12c8 <__ccfg+0x2a1320>
    1234:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1238:	26050000 	strcs	r0, [r5], -r0
		m_size (chunk) |= MALLOC_UMASK;
    123c:	00134900 	andseq	r4, r3, r0, lsl #18
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1240:	00350600 	eorseq	r0, r5, r0, lsl #12
		m_size (chunk) |= MALLOC_UMASK;
    1244:	00001349 	andeq	r1, r0, r9, asr #6
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	0b000f07 	bleq	4e6c <__exidx_end+0x21ec>
}
    124c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1250:	01130800 	tsteq	r3, r0, lsl #16
    1254:	0b3a0b0b 	bleq	e83e88 <__ccfg+0xe63ee0>
    1258:	0b390b3b 	bleq	e43f4c <__ccfg+0xe23fa4>
    125c:	00001301 	andeq	r1, r0, r1, lsl #6
    1260:	03000d09 	movweq	r0, #3337	; 0xd09
    1264:	3b0b3a0e 	blcc	2cfaa4 <__ccfg+0x2afafc>
aword __pi_fork (fsmcode func, aword data) {
    1268:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1270:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1274:	0a00000b 	beq	12a8 <__pi_waitmem+0xc>
		if ((j = __PCB) == NULL)
    1278:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	i->Next = NULL;
    127c:	0b3b0b3a 	bleq	ec3f6c <__ccfg+0xea3fc4>
	i->data = data;
    1280:	13490b39 	movtne	r0, #39737	; 0x9b39
		if ((j = __PCB) == NULL)
    1284:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    1288:	0300340b 	movweq	r3, #1035	; 0x40b
			for (; j->Next != NULL; j = j->Next);
    128c:	3b0b3a0e 	blcc	2cfacc <__ccfg+0x2afb24>
    1290:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	return (aword) i;
    1294:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1298:	0c00000c 	stceq	0, cr0, [r0], {12}
	if (mevent [MA_NP] . nwait != 255)
    129c:	13490101 	movtne	r0, #37121	; 0x9101
    12a0:	00001301 	andeq	r1, r0, r1, lsl #6
    12a4:	0000210d 	andeq	r2, r0, sp, lsl #2
		mevent [MA_NP] . nwait ++;
    12a8:	00160e00 	andseq	r0, r6, r0, lsl #28
	wait ((aword)(&(mevent [MA_NP])), state);
    12ac:	0b3a0e03 	bleq	e84ac0 <__ccfg+0xe64b18>
    12b0:	0b39053b 	bleq	e427a4 <__ccfg+0xe227fc>
void diag (const char *mess, ...) {
    12b4:	00001349 	andeq	r1, r0, r9, asr #6
    12b8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    12bc:	0013010c 	andseq	r0, r3, ip, lsl #2
	diag_disable_int (a, is);
    12c0:	00051000 	andeq	r1, r5, r0
    12c4:	00001349 	andeq	r1, r0, r9, asr #6
    12c8:	03003411 	movweq	r3, #1041	; 0x411
				d = (bc == 16) ? 10000 : 1000000000;
    12cc:	3b0b3a0e 	blcc	2cfb0c <__ccfg+0x2afb64>
	diag_disable_int (a, is);
    12d0:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
	while (*mess != '\0') {
    12d4:	3c0c3f13 	stccc	15, cr3, [ip], {19}
	dgout ('\r');
    12d8:	1200000c 	andne	r0, r0, #12
	dgout ('\n');
    12dc:	0b0b0113 	bleq	2c1730 <__ccfg+0x2a1788>
    12e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    12e4:	13010b39 	movwne	r0, #6969	; 0x1b39
	diag_wait (a);
    12e8:	0d130000 	ldceq	0, cr0, [r3, #-0]
	diag_enable_int (a, is);
    12ec:	3a0e0300 	bcc	381ef4 <__ccfg+0x361f4c>
    12f0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
}
    12f4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    12f8:	1400000b 	strne	r0, [r0], #-11
    12fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		if (*mess == '%') {
    1300:	0b3a0b0b 	bleq	e83f34 <__ccfg+0xe63f8c>
    1304:	0b39053b 	bleq	e427f8 <__ccfg+0xe22850>
			if (*mess == 'l') {
    1308:	00001301 	andeq	r1, r0, r1, lsl #6
    130c:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
				mess++;
    1310:	000b2f13 	andeq	r2, fp, r3, lsl pc
				val = va_arg (ap, lword);
    1314:	00341600 	eorseq	r1, r4, r0, lsl #12
				bc = 32;
    1318:	0b3a1347 	bleq	e8603c <__ccfg+0xe66094>
				bc = 16;
    131c:	0b390b3b 	bleq	e44010 <__ccfg+0xe24068>
			switch (*mess) {
    1320:	00000a02 	andeq	r0, r0, r2, lsl #20
    1324:	3f012e17 	svccc	0x00012e17
    1328:	3a0e030c 	bcc	381f60 <__ccfg+0x361fb8>
				dgout ('%');
    132c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1330:	110c270b 	tstne	ip, fp, lsl #14
				dgout (*mess);
    1334:	40011201 	andmi	r1, r1, r1, lsl #4
    1338:	0013010a 	andseq	r0, r3, sl, lsl #2
			switch (*mess) {
    133c:	00051800 	andeq	r1, r5, r0, lsl #16
					v = __pi_hex_enc_table [
    1340:	0b3a0803 	bleq	e83354 <__ccfg+0xe633ac>
					i += 4;
    1344:	0b390b3b 	bleq	e44038 <__ccfg+0xe24090>
					(val >> (bc - i)) & 0xf];
    1348:	06021349 	streq	r1, [r2], -r9, asr #6
    134c:	05190000 	ldreq	r0, [r9, #-0]
					dgout (v);
    1350:	3a0e0300 	bcc	381f58 <__ccfg+0x361fb0>
    1354:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				while (i < bc) {
    1358:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
			mess++;
    135c:	1a000006 	bne	137c <diag+0xc8>
					d /= 10;
    1360:	08030034 	stmdaeq	r3, {r2, r4, r5}
				if ((val >> (bc - 1)) & 1) {
    1364:	0b3b0b3a 	bleq	ec4054 <__ccfg+0xea40ac>
    1368:	13490b39 	movtne	r0, #39737	; 0x9b39
					dgout ('-');
    136c:	341b0000 	ldrcc	r0, [fp], #-0
    1370:	3a080300 	bcc	201f78 <__ccfg+0x1e1fd0>
						val |= 0xffff0000;
    1374:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1378:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    137c:	1c000006 	stcne	0, cr0, [r0], {6}
				d = (bc == 16) ? 10000 : 1000000000;
    1380:	1331001d 	teqne	r1, #29
    1384:	01120111 	tsteq	r2, r1, lsl r1
    1388:	0b590b58 	bleq	16440f0 <__ccfg+0x1624148>
					v = (word) (val / d);
    138c:	00000b57 	andeq	r0, r0, r7, asr fp
					if (v || d == 1) break;
    1390:	31011d1d 	tstcc	r1, sp, lsl sp
    1394:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
					d /= 10;
    1398:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
				d = (bc == 16) ? 10000 : 1000000000;
    139c:	000b570b 	andeq	r5, fp, fp, lsl #14
					dgout (v + '0');
    13a0:	00051e00 	andeq	r1, r5, r0, lsl #28
    13a4:	06021331 			; <UNDEFINED> instruction: 0x06021331
    13a8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
					d /= 10;
    13ac:	030c3f00 	movweq	r3, #52992	; 0xcf00
					val = val - (v * d);
    13b0:	3b0b3a0e 	blcc	2cfbf0 <__ccfg+0x2afc48>
					if (d == 0) break;
    13b4:	110b390b 	tstne	fp, fp, lsl #18
					v = (word) (val / d);
    13b8:	40011201 	andmi	r1, r1, r1, lsl #4
    13bc:	2000000a 	andcs	r0, r0, sl
				if (bc == 16)
    13c0:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
				d = (bc == 16) ? 10000 : 1000000000;
    13c4:	0b3b0b3a 	bleq	ec40b4 <__ccfg+0xea410c>
					val &= 0xffff;
    13c8:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
					dgout (*s);
    13cc:	00000b20 	andeq	r0, r0, r0, lsr #22
					s++;
    13d0:	03012e21 	movweq	r2, #7713	; 0x1e21
				while (*s != '\0') {
    13d4:	3b0b3a0e 	blcc	2cfc14 <__ccfg+0x2afc6c>
    13d8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
			dgout (*mess++);
    13dc:	2013490c 	andscs	r4, r3, ip, lsl #18
    13e0:	2200000b 	andcs	r0, r0, #11
    13e4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    13e8:	0b3b0b3a 	bleq	ec40d8 <__ccfg+0xea4130>
    13ec:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    13f0:	01000000 	mrseq	r0, (UNDEF: 0)
    while(1)
    13f4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
{
    13f8:	0e030b13 	vmoveq.32	d3[0], r0
    SetupTrimDevice();
    13fc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    pui32Src = &_etext;
    1400:	06100111 			; <UNDEFINED> instruction: 0x06100111
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1404:	24020000 	strcs	r0, [r2], #-0
    __asm("    ldr     r0, =_bss\n"
    1408:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    140c:	000e030b 	andeq	r0, lr, fp, lsl #6
    1410:	00160300 	andseq	r0, r6, r0, lsl #6
    1414:	0b3a0e03 	bleq	e84c28 <__ccfg+0xe64c80>
    1418:	0b390b3b 	bleq	e4410c <__ccfg+0xe24164>
   main();
    141c:	00001349 	andeq	r1, r0, r9, asr #6
    FaultISR();
    1420:	0b002404 	bleq	a438 <__exidx_end+0x77b8>
        *pui32Dest++ = *pui32Src++;
    1424:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1428:	05000008 	streq	r0, [r0, #-8]
    142c:	13490026 	movtne	r0, #36902	; 0x9026
    1430:	35060000 	strcc	r0, [r6, #-0]
    1434:	00134900 	andseq	r4, r3, r0, lsl #18
    1438:	01130700 	tsteq	r3, r0, lsl #14
    143c:	0b3a0b0b 	bleq	e84070 <__ccfg+0xe640c8>
    1440:	0b390b3b 	bleq	e44134 <__ccfg+0xe2418c>
static byte get_byte () {
    1444:	00001301 	andeq	r1, r0, r1, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1448:	03000d08 	movweq	r0, #3336	; 0xd08
    144c:	3b0b3a0e 	blcc	2cfc8c <__ccfg+0x2afce4>
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1450:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1454:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
		if (ee_inp)
    1458:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
			b |= 1;
    145c:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    1460:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1464:	0b3b0b3a 	bleq	ec4154 <__ccfg+0xea41ac>
	for (b = 0, i = 0; i < 8; i++) {
    1468:	13490b39 	movtne	r0, #39737	; 0x9b39
}
    146c:	00000b38 	andeq	r0, r0, r8, lsr fp
    1470:	0300340a 	movweq	r3, #1034	; 0x40a
    1474:	3b0b3a0e 	blcc	2cfcb4 <__ccfg+0x2afd0c>
static void put_byte (byte b) {
    1478:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    147c:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1480:	0b00000c 	bleq	14b8 <cmd_0+0x10>
    1484:	0b0b000f 	bleq	2c14c8 <__ccfg+0x2a1520>
		if (b & 0x80)
    1488:	00001349 	andeq	r1, r0, r9, asr #6
    148c:	4901010c 	stmdbmi	r1, {r2, r3, r8}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1490:	00130113 	andseq	r0, r3, r3, lsl r1
	for (i = 0; i < 8; i++) {
    1494:	00210d00 	eoreq	r0, r1, r0, lsl #26
		b <<= 1;
    1498:	160e0000 	strne	r0, [lr], -r0
	for (i = 0; i < 8; i++) {
    149c:	3a0e0300 	bcc	3820a4 <__ccfg+0x3620fc>
}
    14a0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    14a4:	0013490b 	andseq	r4, r3, fp, lsl #18
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14a8:	01150f00 	tsteq	r5, r0, lsl #30
    14ac:	13010c27 	movwne	r0, #7207	; 0x1c27
	put_byte (cmd);
    14b0:	05100000 	ldreq	r0, [r0, #-0]
    14b4:	00134900 	andseq	r4, r3, r0, lsl #18
}
    14b8:	00341100 	eorseq	r1, r4, r0, lsl #2
    14bc:	0b3a0e03 	bleq	e84cd0 <__ccfg+0xe64d28>
static void wwait (word st, word del) {
    14c0:	0b39053b 	bleq	e429b4 <__ccfg+0xe22a0c>
    14c4:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 13a8 <diag+0xf4>
    14c8:	00000c3c 	andeq	r0, r0, ip, lsr ip
	while (dopen && (rdsr () & 1)) {
    14cc:	0b011312 	bleq	4611c <__ccfg+0x26174>
    14d0:	3b0b3a0b 	blcc	2cfd04 <__ccfg+0x2afd5c>
    14d4:	010b3905 	tsteq	fp, r5, lsl #18
    14d8:	13000013 	movwne	r0, #19
	put_byte (CMD_RDSR);
    14dc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
	r = get_byte ();
    14e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    14e4:	13490b39 	movtne	r0, #39737	; 0x9b39
	while (dopen && (rdsr () & 1)) {
    14e8:	00000b38 	andeq	r0, r0, r8, lsr fp
}
    14ec:	03011314 	movweq	r1, #4884	; 0x1314
		if (st == WNONE)
    14f0:	3a0b0b0e 	bcc	2c4130 <__ccfg+0x2a4188>
    14f4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
			mdelay (1);
    14f8:	0013010b 	andseq	r0, r3, fp, lsl #2
    14fc:	00211500 	eoreq	r1, r1, r0, lsl #10
			delay (del, st);
    1500:	0b2f1349 	bleq	bc622c <__ccfg+0xba6284>
    1504:	34160000 	ldrcc	r0, [r6], #-0
			release;
    1508:	3a0e0300 	bcc	382110 <__ccfg+0x362168>
    150c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1510:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
static void ready () {
    1514:	1700000a 	strne	r0, [r0, -sl]
	if (dopen) {
    1518:	13470034 	movtne	r0, #28724	; 0x7034
		wwait (WNONE, 1);
    151c:	0b3b0b3a 	bleq	ec420c <__ccfg+0xea4264>
    1520:	0a020b39 	beq	8420c <__ccfg+0x64264>
    1524:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
	dstat = 0;
    1528:	030c3f01 	movweq	r3, #52993	; 0xcf01
}
    152c:	3b0b3a0e 	blcc	2cfd6c <__ccfg+0x2afdc4>
    1530:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1534:	1201110c 	andne	r1, r1, #12, 2
	udelay (1);
    1538:	010a4001 	tsteq	sl, r1
    153c:	19000013 	stmdbne	r0, {r0, r1, r4}
	udelay (1);
    1540:	08030005 	stmdaeq	r3, {r0, r2}
		dopen = DOPEN_TEMP;
    1544:	0b3b0b3a 	bleq	ec4234 <__ccfg+0xea428c>
    1548:	13490b39 	movtne	r0, #39737	; 0x9b39
    154c:	00000602 	andeq	r0, r0, r2, lsl #12
    1550:	0300051a 	movweq	r0, #1306	; 0x51a
static void cclose () {
    1554:	3b0b3a0e 	blcc	2cfd94 <__ccfg+0x2afdec>
	if (dopen == DOPEN_TEMP) {
    1558:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    155c:	00060213 	andeq	r0, r6, r3, lsl r2
		wwait (WNONE, 1);
    1560:	000a1b00 	andeq	r1, sl, r0, lsl #22
    1564:	0b3a0e03 	bleq	e84d78 <__ccfg+0xe64dd0>
	cmd_0 (CMD_DP);
    1568:	0b390b3b 	bleq	e4425c <__ccfg+0xe242b4>
    156c:	00000111 	andeq	r0, r0, r1, lsl r1
		dopen = 0;
    1570:	31011d1c 	tstcc	r1, ip, lsl sp
}
    1574:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
word ee_open () {
    1578:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
	ready ();
    157c:	010b570b 	tsteq	fp, fp, lsl #14
	dopen = DOPEN_PERM;
    1580:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
    1584:	13310005 	teqne	r1, #5
}
    1588:	1d1e0000 	ldcne	0, cr0, [lr, #-0]
	if (dopen) {
    158c:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1590:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
		dopen = DOPEN_TEMP;
    1594:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
		cclose ();
    1598:	1f00000b 	svcne	0x0000000b
}
    159c:	0e03012e 	adfeqsp	f0, f3, #0.5
int ser_in (word st, char *buf, int len) {
    15a0:	0b3b0b3a 	bleq	ec4290 <__ccfg+0xea42e8>
    15a4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
	if (len == 0)
    15a8:	0b201349 	bleq	8062d4 <__ccfg+0x7e632c>
	if (__inpline == NULL) {
    15ac:	05200000 	streq	r0, [r0, #-0]!
		if ((prcs = running (__inserial)) == 0) {
    15b0:	3a0e0300 	bcc	3821b8 <__ccfg+0x362210>
    15b4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
			prcs = runthread (__inserial);
    15b8:	0013490b 	andseq	r4, r3, fp, lsl #18
    15bc:	11010000 	mrsne	r0, (UNDEF: 1)
			if (prcs == 0) {
    15c0:	130e2501 	movwne	r2, #58625	; 0xe501
				npwait (st);
    15c4:	1b0e030b 	blne	3821f8 <__ccfg+0x362250>
		release;
    15c8:	1106550e 	tstne	r6, lr, lsl #10
		join (prcs, st);
    15cc:	00061001 	andeq	r1, r6, r1
    15d0:	00240200 	eoreq	r0, r4, r0, lsl #4
	if (*__inpline == NULL) // bin cmd
    15d4:	0b3e0b0b 	bleq	f84208 <__ccfg+0xf64260>
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15d8:	00000e03 	andeq	r0, r0, r3, lsl #28
	if (prcs >= len)
    15dc:	03001603 	movweq	r1, #1539	; 0x603
		prcs = len-1;
    15e0:	3b0b3a0e 	blcc	2cfe20 <__ccfg+0x2afe78>
	memcpy (buf, __inpline, prcs);
    15e4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    15e8:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    15ec:	0b0b0024 	bleq	2c1684 <__ccfg+0x2a16dc>
	ufree (__inpline);
    15f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
	__inpline = NULL;
    15f4:	26050000 	strcs	r0, [r5], -r0
	if (*buf) // if it's NULL, it's a bin cmd
    15f8:	00134900 	andseq	r4, r3, r0, lsl #18
		buf [prcs] = '\0';
    15fc:	00350600 	eorseq	r0, r5, r0, lsl #12
}
    1600:	00001349 	andeq	r1, r0, r9, asr #6
		prcs = strlen (__inpline);
    1604:	0b011307 	bleq	46228 <__ccfg+0x26280>
    1608:	3b0b3a0b 	blcc	2cfe3c <__ccfg+0x2afe94>
		return 0;
    160c:	010b390b 	tsteq	fp, fp, lsl #18
    1610:	08000013 	stmdaeq	r0, {r0, r1, r4}
    1614:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
int ser_outf (word st, const char *m, ...) {
    1618:	0b3b0b3a 	bleq	ec4308 <__ccfg+0xea4360>
    161c:	13490b39 	movtne	r0, #39737	; 0x9b39
	if ((prcs = running (__outserial)) != 0) {
    1620:	0b0d0b0b 	bleq	344254 <__ccfg+0x3242ac>
    1624:	0b380b0c 	bleq	e0425c <__ccfg+0xde42b4>
		join (prcs, st);
    1628:	0d090000 	stceq	0, cr0, [r9, #-0]
    162c:	3a0e0300 	bcc	382234 <__ccfg+0x36228c>
		release;
    1630:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1634:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1638:	0a00000b 	beq	166c <ser_inf>
    163c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		umwait (st);
    1640:	0b3b0b3a 	bleq	ec4330 <__ccfg+0xea4388>
    1644:	13490b39 	movtne	r0, #39737	; 0x9b39
	if (runstrand (__outserial, buf) == 0) {
    1648:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    164c:	0f0b0000 	svceq	0x000b0000
    1650:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
		ufree (buf);
    1654:	0c000013 	stceq	0, cr0, [r0], {19}
		npwait (st);
    1658:	13490101 	movtne	r0, #37121	; 0x9101
}
    165c:	00001301 	andeq	r1, r0, r1, lsl #6
    1660:	0000210d 	andeq	r2, r0, sp, lsl #2
    1664:	00160e00 	andseq	r0, r6, r0, lsl #28
    1668:	0b3a0e03 	bleq	e84e7c <__ccfg+0xe64ed4>
int ser_inf (word st, const char *fmt, ...) {
    166c:	0b39053b 	bleq	e42b60 <__ccfg+0xe22bb8>
    1670:	00001349 	andeq	r1, r0, r9, asr #6
	if (fmt == NULL)
    1674:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
	if (__inpline == NULL) {
    1678:	0013010c 	andseq	r0, r3, ip, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    167c:	00051000 	andeq	r1, r5, r0
    1680:	00001349 	andeq	r1, r0, r9, asr #6
			prcs = runthread (__inserial);
    1684:	03003411 	movweq	r3, #1041	; 0x411
    1688:	3b0b3a0e 	blcc	2cfec8 <__ccfg+0x2aff20>
			if (prcs == 0) {
    168c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
				npwait (st);
    1690:	3c0c3f13 	stccc	15, cr3, [ip], {19}
		release;
    1694:	1200000c 	andne	r0, r0, #12
		join (prcs, st);
    1698:	0b0b0113 	bleq	2c1aec <__ccfg+0x2a1b44>
    169c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
	va_start (ap, fmt);
    16a0:	13010b39 	movwne	r0, #6969	; 0x1b39
	prcs = vscan (__inpline, fmt, ap);
    16a4:	0d130000 	ldceq	0, cr0, [r3, #-0]
    16a8:	3a0e0300 	bcc	3822b0 <__ccfg+0x362308>
	ufree (__inpline);
    16ac:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
	__inpline = NULL;
    16b0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
}
    16b4:	1400000b 	strne	r0, [r0], #-11
    16b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    16bc:	0b3a0b0b 	bleq	e842f0 <__ccfg+0xe64348>
		return 0;
    16c0:	0b39053b 	bleq	e42bb4 <__ccfg+0xe22c0c>
    16c4:	00001301 	andeq	r1, r0, r1, lsl #6
    16c8:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
strand (__outserial, const char*)
    16cc:	000b2f13 	andeq	r2, fp, r3, lsl pc
    16d0:	00341600 	eorseq	r1, r4, r0, lsl #12
    16d4:	0b3a0e03 	bleq	e84ee8 <__ccfg+0xe64f40>
    16d8:	0b390b3b 	bleq	e443cc <__ccfg+0xe24424>
endstrand
    16dc:	0a021349 	beq	86408 <__ccfg+0x66460>
    16e0:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
	ptr = data;
    16e4:	030c3f00 	movweq	r3, #52992	; 0xcf00
    16e8:	3b0b3a0e 	blcc	2cff28 <__ccfg+0x2aff80>
	if (*ptr)
    16ec:	110b390b 	tstne	fp, fp, lsl #18
		len = strlen (ptr);
    16f0:	40011201 	andmi	r1, r1, r1, lsl #4
    16f4:	1800000a 	stmdane	r0, {r1, r3}
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16f8:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 1648 <ser_outf+0x30>
    16fc:	0b3a0e03 	bleq	e84f10 <__ccfg+0xe64f68>
    1700:	0b390b3b 	bleq	e443f4 <__ccfg+0xe2444c>
    1704:	13490c27 	movtne	r0, #39975	; 0x9c27
    1708:	01120111 	tsteq	r2, r1, lsl r1
	len -= quant;
    170c:	13010a40 	movwne	r0, #6720	; 0x1a40
    1710:	05190000 	ldreq	r0, [r9, #-0]
    1714:	3a080300 	bcc	20231c <__ccfg+0x1e2374>
	if (len == 0) {
    1718:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		ufree (data);
    171c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
		finish;
    1720:	1a000006 	bne	1740 <__inserial+0x4>
    1724:	08030005 	stmdaeq	r3, {r0, r2}
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1728:	0b3b0b3a 	bleq	ec4418 <__ccfg+0xea4470>
    172c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1730:	00000a02 	andeq	r0, r0, r2, lsl #20
    1734:	3f012e1b 	svccc	0x00012e1b
    1738:	3a0e030c 	bcc	382370 <__ccfg+0x3623c8>
strand (__inserial, address)
    173c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1740:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    1744:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1748:	010a4001 	tsteq	sl, r1
    174c:	1c000013 	stcne	0, cr0, [r0], {19}
	if (__inpline != NULL)
    1750:	08030005 	stmdaeq	r3, {r0, r2}
    1754:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
		finish;
    1758:	13490b39 	movtne	r0, #39737	; 0x9b39
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    175c:	00000602 	andeq	r0, r0, r2, lsl #12
    1760:	3f002e1d 	svccc	0x00002e1d
    1764:	3a0e030c 	bcc	38239c <__ccfg+0x3623f4>
    1768:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
		umwait (IM_INIT);
    176c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
		release;
    1770:	000a4001 	andeq	r4, sl, r1
	savedata (data);
    1774:	00341e00 	eorseq	r1, r4, r0, lsl #28
	len = MAX_LINE_LENGTH;
    1778:	0b3a0803 	bleq	e8378c <__ccfg+0xe637e4>
	io (IM_READ, __cport, READ, ptr, 1);
    177c:	0b39053b 	bleq	e42c70 <__ccfg+0xe22cc8>
    1780:	06021349 	streq	r1, [r2], -r9, asr #6
    1784:	0a1f0000 	beq	7c178c <__ccfg+0x7a17e4>
    1788:	3a0e0300 	bcc	382390 <__ccfg+0x3623e8>
	if (ptr == (char*) data) { // new line
    178c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1790:	0001110b 	andeq	r1, r1, fp, lsl #2
		if (*ptr == '\0') { // bin cmd
    1794:	011d2000 	tsteq	sp, r0
			proceed (IM_BIN);
    1798:	01521331 	cmpeq	r2, r1, lsr r3
    179c:	0b580655 	bleq	16030f8 <__ccfg+0x15e3150>
		if (*ptr < 0x20)
    17a0:	0b570559 	bleq	15c2d0c <__ccfg+0x15a2d64>
    17a4:	00001301 	andeq	r1, r0, r1, lsl #6
			proceed (IM_READ);
    17a8:	31000521 	tstcc	r0, r1, lsr #10
    17ac:	22000013 	andcs	r0, r0, #19
	if (*ptr == '\n' || *ptr == '\r') {
    17b0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    17b4:	01120111 	tsteq	r2, r1, lsl r1
    17b8:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
		*ptr = '\0';
    17bc:	00000b57 	andeq	r0, r0, r7, asr fp
		__inpline = (char*)data;
    17c0:	03000523 	movweq	r0, #1315	; 0x523
		finish;
    17c4:	3b0b3a0e 	blcc	2d0004 <__ccfg+0x2b005c>
	if (len) {
    17c8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		ptr++;
    17cc:	00060213 	andeq	r0, r6, r3, lsl r2
    17d0:	000a2400 	andeq	r2, sl, r0, lsl #8
		len--;
    17d4:	0b3a0e03 	bleq	e84fe8 <__ccfg+0xe65040>
	proceed (IM_READ);
    17d8:	0b390b3b 	bleq	e444cc <__ccfg+0xe24524>
	io (IM_BIN, __cport, READ, ptr, 1);
    17dc:	00000111 	andeq	r0, r0, r1, lsl r1
    17e0:	31011d25 	tstcc	r1, r5, lsr #26
    17e4:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    17e8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    17ec:	000b570b 	andeq	r5, fp, fp, lsl #14
	len -= 2;
    17f0:	00052600 	andeq	r2, r5, r0, lsl #12
	if (len > *ptr + 1) // 1 for 0x04
    17f4:	06021331 			; <UNDEFINED> instruction: 0x06021331
    17f8:	1d270000 	stcne	0, cr0, [r7, #-0]
		len = *ptr + 1;
    17fc:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    1800:	58065501 	stmdapl	r6, {r0, r8, sl, ip, lr}
	ptr++;
    1804:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1808:	0013010b 	andseq	r0, r3, fp, lsl #2
    180c:	011d2800 	tsteq	sp, r0, lsl #16
    1810:	01111331 	tsteq	r1, r1, lsr r3
    1814:	0b580112 	bleq	1601c64 <__ccfg+0x15e1cbc>
    1818:	0b570b59 	bleq	15c4584 <__ccfg+0x15a45dc>
    181c:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
	len -= quant;
    1820:	030c3f00 	movweq	r3, #52992	; 0xcf00
		__inpline = (char*)data;
    1824:	3b0b3a0e 	blcc	2d0064 <__ccfg+0x2b00bc>
		finish;
    1828:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
	ptr += quant;
    182c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1830:	000a4001 	andeq	r4, sl, r1
endstrand
    1834:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
    1838:	0b3a0e03 	bleq	e8504c <__ccfg+0xe650a4>
	proceed (IM_BINL);
    183c:	0b390b3b 	bleq	e44530 <__ccfg+0xe24588>
endstrand
    1840:	01120111 	tsteq	r2, r1, lsl r1
    1844:	13010a40 	movwne	r0, #6720	; 0x1a40
    1848:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
    184c:	3a0e0300 	bcc	382454 <__ccfg+0x3624ac>
    1850:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1854:	000b200b 	andeq	r2, fp, fp
		if (res && (d < n))
    1858:	012e2c00 			; <UNDEFINED> instruction: 0x012e2c00
    185c:	0b3a0e03 	bleq	e85070 <__ccfg+0xe650c8>
    1860:	0b390b3b 	bleq	e44554 <__ccfg+0xe245ac>
    1864:	01110c27 	tsteq	r1, r7, lsr #24
			res [d] = (char) c;
    1868:	0a400112 	beq	1001cb8 <__ccfg+0xfe1d10>
		d++;
    186c:	00001301 	andeq	r1, r0, r1, lsl #6
    1870:	55010b2d 	strpl	r0, [r1, #-2861]	; 0xfffff4d3
    1874:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1878:	13310034 	teqne	r1, #52	; 0x34
    187c:	00000602 	andeq	r0, r0, r2, lsl #12
    1880:	03012e2f 	movweq	r2, #7727	; 0x1e2f
				enci (10000);
    1884:	3b0b3a0e 	blcc	2d00c4 <__ccfg+0x2b011c>
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1888:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    188c:	010b2013 	tsteq	fp, r3, lsl r0
	d = 0;
    1890:	30000013 	andcc	r0, r0, r3, lsl r0
		c = *fm++;
    1894:	08030034 	stmdaeq	r3, {r2, r4, r5}
		if (c == '\\') {
    1898:	0b3b0b3a 	bleq	ec4588 <__ccfg+0xea45e0>
			if ((c = *fm++) == '\0') {
    189c:	13490b39 	movtne	r0, #39737	; 0x9b39
    18a0:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
				outc ('\\');
    18a4:	3a0e0301 	bcc	3824b0 <__ccfg+0x362508>
			if ((c = *fm++) == '\0') {
    18a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
				outc ('\\');
    18ac:	200c270b 	andcs	r2, ip, fp, lsl #14
    18b0:	0013010b 	andseq	r0, r3, fp, lsl #2
			outc (c);
    18b4:	00053200 	andeq	r3, r5, r0, lsl #4
    18b8:	0b3a0803 	bleq	e838cc <__ccfg+0xe63924>
			if (c == '\0')
    18bc:	0b390b3b 	bleq	e445b0 <__ccfg+0xe24608>
    18c0:	00001349 	andeq	r1, r0, r9, asr #6
			outc (c);
    18c4:	31011d33 	tstcc	r1, r3, lsr sp
				outc (val);
    18c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
				val = (word) va_arg (ap, aword);
    18cc:	590b5801 	stmdbpl	fp, {r0, fp, ip, lr}
		if (c == '%') {
    18d0:	010b570b 	tsteq	fp, fp, lsl #14
    18d4:	34000013 	strcc	r0, [r0], #-19	; 0xffffffed
			c = *fm++;
    18d8:	0e03012e 	adfeqsp	f0, f3, #0.5
			switch (c) {
    18dc:	0b3b0b3a 	bleq	ec45cc <__ccfg+0xea4624>
    18e0:	13490b39 	movtne	r0, #39737	; 0x9b39
    18e4:	01120111 	tsteq	r2, r1, lsl r1
    18e8:	13010a40 	movwne	r0, #6720	; 0x1a40
    18ec:	34350000 	ldrtcc	r0, [r5], #-0
    18f0:	3a080300 	bcc	2024f8 <__ccfg+0x1e2550>
    18f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    18f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
				outc ('%');
    18fc:	36000006 	strcc	r0, [r0], -r6
    1900:	0e03012e 	adfeqsp	f0, f3, #0.5
				outc (c);
    1904:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1908:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    190c:	13010b20 	movwne	r0, #6944	; 0x1b20
				if (c == '\0')
    1910:	05370000 	ldreq	r0, [r7, #-0]!
				return d;
    1914:	3a0e0300 	bcc	38251c <__ccfg+0x362574>
}
    1918:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    191c:	0013490b 	andseq	r4, r3, fp, lsl #18
			switch (c) {
    1920:	012e3800 			; <UNDEFINED> instruction: 0x012e3800
    1924:	0b3a0e03 	bleq	e85138 <__ccfg+0xe65190>
    1928:	0b390b3b 	bleq	e4461c <__ccfg+0xe24674>
				for (i = 12; ; i -= 4) {
    192c:	13490c27 	movtne	r0, #39975	; 0x9c27
				val = (word) va_arg (ap, aword);
    1930:	13010b20 	movwne	r0, #6944	; 0x1b20
						[ (val >> i) & 0xf ]);
    1934:	05390000 	ldreq	r0, [r9, #-0]!
    1938:	3a0e0300 	bcc	382540 <__ccfg+0x362598>
    193c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
					outc (__pi_hex_enc_table
    1940:	0013490b 	andseq	r4, r3, fp, lsl #18
    1944:	012e3a00 			; <UNDEFINED> instruction: 0x012e3a00
					if (i == 0)
    1948:	01111331 	tsteq	r1, r1, lsr r3
    194c:	0a400112 	beq	1001d9c <__ccfg+0xfe1df4>
				for (i = 12; ; i -= 4) {
    1950:	1d3b0000 	ldcne	0, cr0, [fp, #-0]
				val = (word) va_arg (ap, aword);
    1954:	11133100 	tstne	r3, r0, lsl #2
				if (c == 'd' && (val & 0x8000) != 0) {
    1958:	58011201 	stmdapl	r1, {r0, r9, ip}
				val = (word) va_arg (ap, aword);
    195c:	570b590b 	strpl	r5, [fp, -fp, lsl #18]
				if (c == 'd' && (val & 0x8000) != 0) {
    1960:	0000000b 	andeq	r0, r0, fp
    1964:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
					outc ('-');
    1968:	030b130e 	movweq	r1, #45838	; 0xb30e
    196c:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
					val = (~val) + 1;
    1970:	10011106 	andne	r1, r1, r6, lsl #2
    1974:	02000006 	andeq	r0, r0, #6
				for (i = 12; ; i -= 4) {
    1978:	0b0b0024 	bleq	2c1a10 <__ccfg+0x2a1a68>
				enci (10000);
    197c:	0e030b3e 	vmoveq.16	d3[0], r0
    1980:	16030000 	strne	r0, [r3], -r0
    1984:	3a0e0300 	bcc	38258c <__ccfg+0x3625e4>
    1988:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    198c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1990:	00240400 	eoreq	r0, r4, r0, lsl #8
    1994:	0b3e0b0b 	bleq	f845c8 <__ccfg+0xf64620>
    1998:	00000803 	andeq	r0, r0, r3, lsl #16
    199c:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    19a0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    19a4:	13490035 	movtne	r0, #36917	; 0x9035
    19a8:	13070000 	movwne	r0, #28672	; 0x7000
    19ac:	3a0b0b01 	bcc	2c45b8 <__ccfg+0x2a4610>
    19b0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    19b4:	0013010b 	andseq	r0, r3, fp, lsl #2
    19b8:	000d0800 	andeq	r0, sp, r0, lsl #16
    19bc:	0b3a0e03 	bleq	e851d0 <__ccfg+0xe65228>
    19c0:	0b390b3b 	bleq	e446b4 <__ccfg+0xe2470c>
				if (c == 'd' || c == 'u') {
    19c4:	0b0b1349 	bleq	2c66f0 <__ccfg+0x2a6748>
    19c8:	0b0c0b0d 	bleq	304604 <__ccfg+0x2e465c>
					if (c == 'd' &&
    19cc:	00000b38 	andeq	r0, r0, r8, lsr fp
					val = va_arg (ap, lword);
    19d0:	03000d09 	movweq	r0, #3337	; 0xd09
					fm++;
    19d4:	3b0b3a0e 	blcc	2d0214 <__ccfg+0x2b026c>
					if (c == 'd' &&
    19d8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    19dc:	000b3813 	andeq	r3, fp, r3, lsl r8
						outc ('-');
    19e0:	00340a00 	eorseq	r0, r4, r0, lsl #20
    19e4:	0b3a0e03 	bleq	e851f8 <__ccfg+0xe65250>
						val = (~val) + 1;
    19e8:	0b390b3b 	bleq	e446dc <__ccfg+0xe24734>
				enci (10000);
    19ec:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 18d0 <__pi_vfparse+0x58>
					enci (1000000000UL);
    19f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    19f4:	0b000f0b 	bleq	5628 <__exidx_end+0x29a8>
    19f8:	0013490b 	andseq	r4, r3, fp, lsl #18
    19fc:	01010c00 	tsteq	r1, r0, lsl #24
    1a00:	13011349 	movwne	r1, #4937	; 0x1349
    1a04:	210d0000 	mrscs	r0, (UNDEF: 13)
    1a08:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1a0c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1a10:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a14:	13490b39 	movtne	r0, #39737	; 0x9b39
    1a18:	150f0000 	strne	r0, [pc, #-0]	; 1a20 <__pi_vfparse+0x1a8>
    1a1c:	010c2701 	tsteq	ip, r1, lsl #14
    1a20:	10000013 	andne	r0, r0, r3, lsl r0
    1a24:	13490005 	movtne	r0, #36869	; 0x9005
    1a28:	34110000 	ldrcc	r0, [r1], #-0
    1a2c:	3a0e0300 	bcc	382634 <__ccfg+0x36268c>
    1a30:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
				} else if (c == 'x') {
    1a34:	3f13490b 	svccc	0x0013490b
					for (i = 28; ; i -= 4) {
    1a38:	000c3c0c 	andeq	r3, ip, ip, lsl #24
					val = va_arg (ap, lword);
    1a3c:	01131200 	tsteq	r3, r0, lsl #4
							[ (val >> i) & 0xf ]);
    1a40:	0b3a0b0b 	bleq	e84674 <__ccfg+0xe646cc>
    1a44:	0b39053b 	bleq	e42f38 <__ccfg+0xe22f90>
						outc (__pi_hex_enc_table
    1a48:	00001301 	andeq	r1, r0, r1, lsl #6
    1a4c:	03000d13 	movweq	r0, #3347	; 0xd13
    1a50:	3b0b3a0e 	blcc	2d0290 <__ccfg+0x2b02e8>
						if (i == 0)
    1a54:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1a58:	000b3813 	andeq	r3, fp, r3, lsl r8
					for (i = 28; ; i -= 4) {
    1a5c:	01131400 	tsteq	r3, r0, lsl #8
					outc ('%');
    1a60:	0b0b0e03 	bleq	2c5274 <__ccfg+0x2a52cc>
    1a64:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1a68:	13010b39 	movwne	r0, #6969	; 0x1b39
					outc ('l');
    1a6c:	21150000 	tstcs	r5, r0
    1a70:	2f134900 	svccs	0x00134900
				val = (word) va_arg (ap, aword);
    1a74:	1600000b 	strne	r0, [r0], -fp
				outc (val);
    1a78:	0c3f012e 	ldfeqs	f0, [pc], #-184	; 19c8 <__pi_vfparse+0x150>
    1a7c:	0b3a0e03 	bleq	e85290 <__ccfg+0xe652e8>
				while (*st != '\0') {
    1a80:	0b390b3b 	bleq	e44774 <__ccfg+0xe247cc>
    1a84:	13490c27 	movtne	r0, #39975	; 0x9c27
    1a88:	01120111 	tsteq	r2, r1, lsl r1
    1a8c:	00000a40 	andeq	r0, r0, r0, asr #20
					outc (*st);
    1a90:	03000517 	movweq	r0, #1303	; 0x517
    1a94:	3b0b3a08 	blcc	2d02bc <__ccfg+0x2b0314>
					st++;
    1a98:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
		c = *fm++;
    1a9c:	00060213 	andeq	r0, r6, r3, lsl r2
    1aa0:	00341800 	eorseq	r1, r4, r0, lsl #16
    1aa4:	0b3a0e03 	bleq	e852b8 <__ccfg+0xe65310>
char *vform (char *res, const char *fm, va_list aq) {
    1aa8:	0b390b3b 	bleq	e4479c <__ccfg+0xe247f4>
    1aac:	06021349 	streq	r1, [r2], -r9, asr #6
	if (res != NULL) {
    1ab0:	01000000 	mrseq	r0, (UNDEF: 0)
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab4:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1ab8:	0e030b13 	vmoveq.32	d3[0], r0
    1abc:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
}
    1ac0:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1ac4:	24020000 	strcs	r0, [r2], #-0
	fml = strlen (fm) + 17;
    1ac8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1acc:	000e030b 	andeq	r0, lr, fp, lsl #6
    1ad0:	00160300 	andseq	r0, r6, r0, lsl #6
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad4:	0b3a0e03 	bleq	e852e8 <__ccfg+0xe65340>
    1ad8:	0b390b3b 	bleq	e447cc <__ccfg+0xe24824>
    1adc:	00001349 	andeq	r1, r0, r9, asr #6
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae0:	0b002404 	bleq	aaf8 <__exidx_end+0x7e78>
    1ae4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1ae8:	05000008 	streq	r0, [r0, #-8]
    1aec:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
		ufree (res);
    1af0:	0b3a0b0b 	bleq	e84724 <__ccfg+0xe6477c>
		goto Again;
    1af4:	13010b3b 	movwne	r0, #6971	; 0x1b3b
	if (buf == NULL || fmt == NULL)
    1af8:	0d060000 	stceq	0, cr0, [r6, #-0]
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afc:	490e0300 	stmdbmi	lr, {r8, r9}
	if (buf == NULL || fmt == NULL)
    1b00:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1b04:	0700000c 	streq	r0, [r0, -ip]
    1b08:	0b0b000f 	bleq	2c1b4c <__ccfg+0x2a1ba4>
		    	    case 'u': scanu (lword); break;
    1b0c:	26080000 	strcs	r0, [r8], -r0
			while (isspace (*buf)) buf++;
    1b10:	00134900 	andseq	r4, r3, r0, lsl #18
    1b14:	00350900 	eorseq	r0, r5, r0, lsl #18
	while (*fmt != '\0') {
    1b18:	00001349 	andeq	r1, r0, r9, asr #6
		if (*fmt++ != '%')
    1b1c:	0b01130a 	bleq	4674c <__ccfg+0x267a4>
		switch (*fmt++) {
    1b20:	3b0b3a0b 	blcc	2d0354 <__ccfg+0x2b03ac>
    1b24:	010b390b 	tsteq	fp, fp, lsl #18
    1b28:	0b000013 	bleq	1b7c <vscan+0x84>
    1b2c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1b30:	0b3b0b3a 	bleq	ec4820 <__ccfg+0xea4878>
    1b34:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b38:	0b0d0b0b 	bleq	34476c <__ccfg+0x3247c4>
}
    1b3c:	0b380b0c 	bleq	e04774 <__ccfg+0xde47cc>
		switch (*fmt++) {
    1b40:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1b44:	3a0e0300 	bcc	38274c <__ccfg+0x3627a4>
    1b48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1b4c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
			while (isspace (*buf)) buf++;
    1b50:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1b54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1b58:	0b3b0b3a 	bleq	ec4848 <__ccfg+0xea48a0>
    1b5c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1b60:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1b64:	0f0e0000 	svceq	0x000e0000
			if (*buf == '\0')
    1b68:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
			if (*buf != ',') {
    1b6c:	0f000013 	svceq	0x00000013
			sap = va_arg (ap, char*);
    1b70:	13490101 	movtne	r0, #37121	; 0x9101
			nc++;
    1b74:	00001301 	andeq	r1, r0, r1, lsl #6
			if (*buf != ',') {
    1b78:	00002110 	andeq	r2, r0, r0, lsl r1
				while (!isspace (*buf) && *buf != ',' &&
    1b7c:	00161100 	andseq	r1, r6, r0, lsl #2
    1b80:	0b3a0e03 	bleq	e85394 <__ccfg+0xe653ec>
    1b84:	0b39053b 	bleq	e43078 <__ccfg+0xe230d0>
    1b88:	00001349 	andeq	r1, r0, r9, asr #6
    1b8c:	27011512 	smladcs	r1, r2, r5, r1
    1b90:	0013010c 	andseq	r0, r3, ip, lsl #2
    1b94:	00051300 	andeq	r1, r5, r0, lsl #6
			while (isspace (*buf)) buf++;
    1b98:	00001349 	andeq	r1, r0, r9, asr #6
    1b9c:	03003414 	movweq	r3, #1044	; 0x414
    1ba0:	3b0b3a0e 	blcc	2d03e0 <__ccfg+0x2b0438>
    1ba4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1ba8:	3c0c3f13 	stccc	15, cr3, [ip], {19}
			if (*buf == ',') buf++;
    1bac:	1500000c 	strne	r0, [r0, #-12]
    1bb0:	0b0b0113 	bleq	2c2004 <__ccfg+0x2a205c>
			*sap = '\0';
    1bb4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
			break;
    1bb8:	13010b39 	movwne	r0, #6969	; 0x1b39
		    case 'd': scani (word); break;
    1bbc:	0d160000 	ldceq	0, cr0, [r6, #-0]
    1bc0:	3a0e0300 	bcc	3827c8 <__ccfg+0x362820>
    1bc4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1bc8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1bcc:	1700000b 	strne	r0, [r0, -fp]
    1bd0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1bd4:	0b3a0b0b 	bleq	e84808 <__ccfg+0xe64860>
    1bd8:	0b39053b 	bleq	e430cc <__ccfg+0xe23124>
    1bdc:	00001301 	andeq	r1, r0, r1, lsl #6
    1be0:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1be4:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1be8:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1bec:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1bf0:	0b3b0b3a 	bleq	ec48e0 <__ccfg+0xea4938>
    1bf4:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1bf8:	01111349 	tsteq	r1, r9, asr #6
    1bfc:	0a400112 	beq	100204c <__ccfg+0xfe20a4>
    1c00:	00001301 	andeq	r1, r0, r1, lsl #6
    1c04:	0300051a 	movweq	r0, #1306	; 0x51a
    1c08:	3b0b3a08 	blcc	2d0430 <__ccfg+0x2b0488>
    1c0c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c10:	00060213 	andeq	r0, r6, r3, lsl r2
    1c14:	00051b00 	andeq	r1, r5, r0, lsl #22
    1c18:	0b3a0803 	bleq	e83c2c <__ccfg+0xe63c84>
    1c1c:	0b390b3b 	bleq	e44910 <__ccfg+0xe24968>
    1c20:	0a021349 	beq	8694c <__ccfg+0x669a4>
    1c24:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1c28:	1d000000 	stcne	0, cr0, [r0, #-0]
		    case 'u': scanu (word); break;
    1c2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1c30:	0b3b0b3a 	bleq	ec4920 <__ccfg+0xea4978>
    1c34:	13490b39 	movtne	r0, #39737	; 0x9b39
    1c38:	00000602 	andeq	r0, r0, r2, lsl #12
    1c3c:	0300341e 	movweq	r3, #1054	; 0x41e
    1c40:	3b0b3a08 	blcc	2d0468 <__ccfg+0x2b04c0>
    1c44:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1c48:	00060213 	andeq	r0, r6, r3, lsl r2
    1c4c:	00341f00 	eorseq	r1, r4, r0, lsl #30
    1c50:	0b3a0803 	bleq	e83c64 <__ccfg+0xe63cbc>
    1c54:	0b390b3b 	bleq	e44948 <__ccfg+0xe249a0>
    1c58:	0a021349 	beq	86984 <__ccfg+0x669dc>
    1c5c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c60:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1c64:	0e030b13 	vmoveq.32	d3[0], r0
    1c68:	06550e1b 			; <UNDEFINED> instruction: 0x06550e1b
    1c6c:	06100111 			; <UNDEFINED> instruction: 0x06100111
    1c70:	24020000 	strcs	r0, [r2], #-0
		    case 'x': scanx (word); break;
    1c74:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1c78:	000e030b 	andeq	r0, lr, fp, lsl #6
    1c7c:	00160300 	andseq	r0, r6, r0, lsl #6
    1c80:	0b3a0e03 	bleq	e85494 <__ccfg+0xe654ec>
    1c84:	0b390b3b 	bleq	e44978 <__ccfg+0xe249d0>
    1c88:	00001349 	andeq	r1, r0, r9, asr #6
    1c8c:	0b002404 	bleq	aca4 <__exidx_end+0x8024>
    1c90:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1c94:	05000008 	streq	r0, [r0, #-8]
    1c98:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1c9c:	0b3a0b0b 	bleq	e848d0 <__ccfg+0xe64928>
    1ca0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
    1ca4:	0d060000 	stceq	0, cr0, [r6, #-0]
    1ca8:	490e0300 	stmdbmi	lr, {r8, r9}
    1cac:	340b3813 	strcc	r3, [fp], #-2067	; 0xfffff7ed
    1cb0:	0700000c 	streq	r0, [r0, -ip]
    1cb4:	0b0b000f 	bleq	2c1cf8 <__ccfg+0x2a1d50>
    1cb8:	26080000 	strcs	r0, [r8], -r0
    1cbc:	00134900 	andseq	r4, r3, r0, lsl #18
    1cc0:	00350900 	eorseq	r0, r5, r0, lsl #18
    1cc4:	00001349 	andeq	r1, r0, r9, asr #6
    1cc8:	0b01130a 	bleq	468f8 <__ccfg+0x26950>
    1ccc:	3b0b3a0b 	blcc	2d0500 <__ccfg+0x2b0558>
    1cd0:	010b390b 	tsteq	fp, fp, lsl #18
    1cd4:	0b000013 	bleq	1d28 <vscan+0x230>
    1cd8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1cdc:	0b3b0b3a 	bleq	ec49cc <__ccfg+0xea4a24>
    1ce0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ce4:	0b0d0b0b 	bleq	344918 <__ccfg+0x324970>
    1ce8:	0b380b0c 	bleq	e04920 <__ccfg+0xde4978>
			switch (*fmt++) {
    1cec:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1cf0:	3a0e0300 	bcc	3828f8 <__ccfg+0x362950>
    1cf4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1cf8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1cfc:	0d00000b 	stceq	0, cr0, [r0, #-44]	; 0xffffffd4
    1d00:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
		    	    case 'd': scani (lword); break;
    1d04:	0b3b0b3a 	bleq	ec49f4 <__ccfg+0xea4a4c>
    1d08:	13490b39 	movtne	r0, #39737	; 0x9b39
    1d0c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1d10:	0f0e0000 	svceq	0x000e0000
    1d14:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1d18:	0f000013 	svceq	0x00000013
    1d1c:	13490101 	movtne	r0, #37121	; 0x9101
    1d20:	00001301 	andeq	r1, r0, r1, lsl #6
    1d24:	00002110 	andeq	r2, r0, r0, lsl r1
    1d28:	00161100 	andseq	r1, r6, r0, lsl #2
    1d2c:	0b3a0e03 	bleq	e85540 <__ccfg+0xe65598>
    1d30:	0b39053b 	bleq	e43224 <__ccfg+0xe2327c>
    1d34:	00001349 	andeq	r1, r0, r9, asr #6
    1d38:	27011512 	smladcs	r1, r2, r5, r1
    1d3c:	0013010c 	andseq	r0, r3, ip, lsl #2
    1d40:	00051300 	andeq	r1, r5, r0, lsl #6
    1d44:	00001349 	andeq	r1, r0, r9, asr #6
    1d48:	03003414 	movweq	r3, #1044	; 0x414
    1d4c:	3b0b3a0e 	blcc	2d058c <__ccfg+0x2b05e4>
    1d50:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1d54:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1d58:	1500000c 	strne	r0, [r0, #-12]
    1d5c:	0b0b0113 	bleq	2c21b0 <__ccfg+0x2a2208>
		    	    case 'x': scanx (lword); break;
    1d60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1d64:	13010b39 	movwne	r0, #6969	; 0x1b39
    1d68:	0d160000 	ldceq	0, cr0, [r6, #-0]
    1d6c:	3a0e0300 	bcc	382974 <__ccfg+0x3629cc>
    1d70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1d74:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1d78:	1700000b 	strne	r0, [r0, -fp]
    1d7c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1d80:	0b3a0b0b 	bleq	e849b4 <__ccfg+0xe64a0c>
    1d84:	0b39053b 	bleq	e43278 <__ccfg+0xe232d0>
    1d88:	00001301 	andeq	r1, r0, r1, lsl #6
    1d8c:	49002118 	stmdbmi	r0, {r3, r4, r8, sp}
    1d90:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1d94:	012e1900 			; <UNDEFINED> instruction: 0x012e1900
    1d98:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1d9c:	0b3b0b3a 	bleq	ec4a8c <__ccfg+0xea4ae4>
    1da0:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1da4:	01111349 	tsteq	r1, r9, asr #6
    1da8:	0a400112 	beq	10021f8 <__ccfg+0xfe2250>
    1dac:	00001301 	andeq	r1, r0, r1, lsl #6
    1db0:	0300051a 	movweq	r0, #1306	; 0x51a
    1db4:	3b0b3a08 	blcc	2d05dc <__ccfg+0x2b0634>
    1db8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1dbc:	00060213 	andeq	r0, r6, r3, lsl r2
    1dc0:	00051b00 	andeq	r1, r5, r0, lsl #22
    1dc4:	0b3a0803 	bleq	e83dd8 <__ccfg+0xe63e30>
    1dc8:	0b390b3b 	bleq	e44abc <__ccfg+0xe24b14>
    1dcc:	0a021349 	beq	86af8 <__ccfg+0x66b50>
		    	    case 'd': scani (lword); break;
    1dd0:	181c0000 	ldmdane	ip, {}	; <UNPREDICTABLE>
    1dd4:	1d000000 	stcne	0, cr0, [r0, #-0]
    1dd8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1ddc:	0b3b0b3a 	bleq	ec4acc <__ccfg+0xea4b24>
    1de0:	13490b39 	movtne	r0, #39737	; 0x9b39
    1de4:	00000602 	andeq	r0, r0, r2, lsl #12
    1de8:	0300341e 	movweq	r3, #1054	; 0x41e
		    	    case 'u': scanu (lword); break;
    1dec:	3b0b3a08 	blcc	2d0614 <__ccfg+0x2b066c>
    1df0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1df4:	000a0213 	andeq	r0, sl, r3, lsl r2
    1df8:	11010000 	mrsne	r0, (UNDEF: 1)
    1dfc:	130e2501 	movwne	r2, #58625	; 0xe501
    1e00:	1b0e030b 	blne	382a34 <__ccfg+0x362a8c>
    1e04:	1106550e 	tstne	r6, lr, lsl #10
    1e08:	00061001 	andeq	r1, r6, r1
    1e0c:	00240200 	eoreq	r0, r4, r0, lsl #4
    1e10:	0b3e0b0b 	bleq	f84a44 <__ccfg+0xf64a9c>
    1e14:	00000e03 	andeq	r0, r0, r3, lsl #28
    1e18:	03001603 	movweq	r1, #1539	; 0x603
    1e1c:	3b0b3a0e 	blcc	2d065c <__ccfg+0x2b06b4>
    1e20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1e24:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1e28:	0b0b0024 	bleq	2c1ec0 <__ccfg+0x2a1f18>
    1e2c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1e30:	26050000 	strcs	r0, [r5], -r0
		    	    case 'x': scanx (lword); break;
    1e34:	00134900 	andseq	r4, r3, r0, lsl #18
    1e38:	00350600 	eorseq	r0, r5, r0, lsl #12
			if ((c = *buf++) == '\0')
    1e3c:	00001349 	andeq	r1, r0, r9, asr #6
    1e40:	0b011307 	bleq	46a64 <__ccfg+0x26abc>
			sap = va_arg (ap, char*);
    1e44:	3b0b3a0b 	blcc	2d0678 <__ccfg+0x2b06d0>
			nc++;
    1e48:	010b390b 	tsteq	fp, fp, lsl #18
			break;
    1e4c:	08000013 	stmdaeq	r0, {r0, r1, r4}
			while (isspace (*buf)) buf++;
    1e50:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1e54:	0b3b0b3a 	bleq	ec4b44 <__ccfg+0xea4b9c>
    1e58:	13490b39 	movtne	r0, #39737	; 0x9b39
						*sap++ = *buf++;
    1e5c:	0b0d0b0b 	bleq	344a90 <__ccfg+0x324ae8>
    1e60:	0b380b0c 	bleq	e04a98 <__ccfg+0xde4af0>
			while (isspace (*buf)) buf++;
    1e64:	0d090000 	stceq	0, cr0, [r9, #-0]
    1e68:	3a0e0300 	bcc	382a70 <__ccfg+0x362ac8>
    1e6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
		return 0;
    1e70:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1e74:	0a00000b 	beq	1ea8 <NOROM_AONBatMonTemperatureGetDegC+0x20>
		    case 'x': scanx (word); break;
    1e78:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1e7c:	0b3b0b3a 	bleq	ec4b6c <__ccfg+0xea4bc4>
		    	    case 'x': scanx (lword); break;
    1e80:	13490b39 	movtne	r0, #39737	; 0x9b39
    1e84:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    1e88:	0f0b0000 	svceq	0x000b0000
    1e8c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1e90:	0c000013 	stceq	0, cr0, [r0], {19}
    1e94:	13490101 	movtne	r0, #37121	; 0x9101
    1e98:	00001301 	andeq	r1, r0, r1, lsl #6
    1e9c:	0000210d 	andeq	r2, r0, sp, lsl #2
    1ea0:	00160e00 	andseq	r0, r6, r0, lsl #28
    1ea4:	0b3a0e03 	bleq	e856b8 <__ccfg+0xe65710>
    1ea8:	0b39053b 	bleq	e4339c <__ccfg+0xe233f4>
    1eac:	00001349 	andeq	r1, r0, r9, asr #6
    1eb0:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    1eb4:	0013010c 	andseq	r0, r3, ip, lsl #2
    1eb8:	00051000 	andeq	r1, r5, r0
    1ebc:	00001349 	andeq	r1, r0, r9, asr #6
    1ec0:	03003411 	movweq	r3, #1041	; 0x411
    1ec4:	3b0b3a0e 	blcc	2d0704 <__ccfg+0x2b075c>
    1ec8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    1ecc:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    1ed0:	1200000c 	andne	r0, r0, #12
    1ed4:	0b0b0113 	bleq	2c2328 <__ccfg+0x2a2380>
    1ed8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    1edc:	13010b39 	movwne	r0, #6969	; 0x1b39
    1ee0:	0d130000 	ldceq	0, cr0, [r3, #-0]
    1ee4:	3a0e0300 	bcc	382aec <__ccfg+0x362b44>
    1ee8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1eec:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1ef0:	1400000b 	strne	r0, [r0], #-11
    1ef4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    1ef8:	0b3a0b0b 	bleq	e84b2c <__ccfg+0xe64b84>
    1efc:	0b39053b 	bleq	e433f0 <__ccfg+0xe23448>
    1f00:	00001301 	andeq	r1, r0, r1, lsl #6
    1f04:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    1f08:	000b2f13 	andeq	r2, fp, r3, lsl pc
    1f0c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    1f10:	0e030c3f 	mcreq	12, 0, r0, cr3, cr15, {1}
    1f14:	0b3b0b3a 	bleq	ec4c04 <__ccfg+0xea4c5c>
    1f18:	0c270b39 			; <UNDEFINED> instruction: 0x0c270b39
    1f1c:	01120111 	tsteq	r2, r1, lsl r1
    1f20:	13010a40 	movwne	r0, #6720	; 0x1a40
    1f24:	05170000 	ldreq	r0, [r7, #-0]
    1f28:	3a0e0300 	bcc	382b30 <__ccfg+0x362b88>
    1f2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1f30:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1f34:	18000006 	stmdane	r0, {r1, r2}
    1f38:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1f3c:	0b3b0b3a 	bleq	ec4c2c <__ccfg+0xea4c84>
    1f40:	13490b39 	movtne	r0, #39737	; 0x9b39
    1f44:	00000602 	andeq	r0, r0, r2, lsl #12
    1f48:	03000a19 	movweq	r0, #2585	; 0xa19
    1f4c:	3b0b3a0e 	blcc	2d078c <__ccfg+0x2b07e4>
    1f50:	000b390b 	andeq	r3, fp, fp, lsl #18
    1f54:	010b1a00 	tsteq	fp, r0, lsl #20
    1f58:	00000655 	andeq	r0, r0, r5, asr r6
    1f5c:	0300341b 	movweq	r3, #1051	; 0x41b
    1f60:	3b0b3a08 	blcc	2d0788 <__ccfg+0x2b07e0>
    1f64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f68:	000a0213 	andeq	r0, sl, r3, lsl r2
    1f6c:	11010000 	mrsne	r0, (UNDEF: 1)
    1f70:	130e2501 	movwne	r2, #58625	; 0xe501
    1f74:	1b0e030b 	blne	382ba8 <__ccfg+0x362c00>
    1f78:	1106550e 	tstne	r6, lr, lsl #10
    1f7c:	00061001 	andeq	r1, r6, r1
    1f80:	00240200 	eoreq	r0, r4, r0, lsl #4
    1f84:	0b3e0b0b 	bleq	f84bb8 <__ccfg+0xf64c10>
    1f88:	00000e03 	andeq	r0, r0, r3, lsl #28
    1f8c:	03001603 	movweq	r1, #1539	; 0x603
    1f90:	3b0b3a0e 	blcc	2d07d0 <__ccfg+0x2b0828>
    1f94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1f98:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    1f9c:	0b0b0024 	bleq	2c2034 <__ccfg+0x2a208c>
    1fa0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1fa4:	26050000 	strcs	r0, [r5], -r0
    1fa8:	00134900 	andseq	r4, r3, r0, lsl #18
    1fac:	00350600 	eorseq	r0, r5, r0, lsl #12
    1fb0:	00001349 	andeq	r1, r0, r9, asr #6
    1fb4:	0b000f07 	bleq	5bd8 <__exidx_end+0x2f58>
    1fb8:	0013490b 	andseq	r4, r3, fp, lsl #18
    1fbc:	01130800 	tsteq	r3, r0, lsl #16
    1fc0:	0b3a0b0b 	bleq	e84bf4 <__ccfg+0xe64c4c>
    1fc4:	0b390b3b 	bleq	e44cb8 <__ccfg+0xe24d10>
    1fc8:	00001301 	andeq	r1, r0, r1, lsl #6
    1fcc:	03000d09 	movweq	r0, #3337	; 0xd09
    1fd0:	3b0b3a0e 	blcc	2d0810 <__ccfg+0x2b0868>
    1fd4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1fd8:	0d0b0b13 	vstreq	d0, [fp, #-76]	; 0xffffffb4
    1fdc:	380b0c0b 	stmdacc	fp, {r0, r1, r3, sl, fp}
    1fe0:	0a00000b 	beq	2014 <NOROM_SetupTrimDevice+0x60>
    1fe4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1fe8:	0b3b0b3a 	bleq	ec4cd8 <__ccfg+0xea4d30>
    1fec:	13490b39 	movtne	r0, #39737	; 0x9b39
    1ff0:	00000b38 	andeq	r0, r0, r8, lsr fp
    1ff4:	0300340b 	movweq	r3, #1035	; 0x40b
    1ff8:	3b0b3a0e 	blcc	2d0838 <__ccfg+0x2b0890>
    1ffc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2000:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2004:	0c00000c 	stceq	0, cr0, [r0], {12}
    2008:	13490101 	movtne	r0, #37121	; 0x9101
    200c:	00001301 	andeq	r1, r0, r1, lsl #6
    2010:	0000210d 	andeq	r2, r0, sp, lsl #2
    2014:	00160e00 	andseq	r0, r6, r0, lsl #28
    2018:	0b3a0e03 	bleq	e8582c <__ccfg+0xe65884>
    201c:	0b39053b 	bleq	e43510 <__ccfg+0xe23568>
    2020:	00001349 	andeq	r1, r0, r9, asr #6
    2024:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
    2028:	0013010c 	andseq	r0, r3, ip, lsl #2
    202c:	00051000 	andeq	r1, r5, r0
    2030:	00001349 	andeq	r1, r0, r9, asr #6
    2034:	03003411 	movweq	r3, #1041	; 0x411
    2038:	3b0b3a0e 	blcc	2d0878 <__ccfg+0x2b08d0>
    203c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    2040:	3c0c3f13 	stccc	15, cr3, [ip], {19}
    2044:	1200000c 	andne	r0, r0, #12
    2048:	0b0b0113 	bleq	2c249c <__ccfg+0x2a24f4>
    204c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2050:	13010b39 	movwne	r0, #6969	; 0x1b39
    2054:	0d130000 	ldceq	0, cr0, [r3, #-0]
    2058:	3a0e0300 	bcc	382c60 <__ccfg+0x362cb8>
    205c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2060:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    2064:	1400000b 	strne	r0, [r0], #-11
    2068:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
    206c:	0b3a0b0b 	bleq	e84ca0 <__ccfg+0xe64cf8>
    2070:	0b39053b 	bleq	e43564 <__ccfg+0xe235bc>
    2074:	00001301 	andeq	r1, r0, r1, lsl #6
    2078:	49002115 	stmdbmi	r0, {r0, r2, r4, r8, sp}
    207c:	000b2f13 	andeq	r2, fp, r3, lsl pc
    2080:	00341600 	eorseq	r1, r4, r0, lsl #12
    2084:	0b3a0e03 	bleq	e85898 <__ccfg+0xe658f0>
    2088:	0b390b3b 	bleq	e44d7c <__ccfg+0xe24dd4>
    208c:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 1f70 <TrimAfterColdResetWakeupFromShutDown+0x90>
    2090:	00000a02 	andeq	r0, r0, r2, lsl #20
    2094:	3f012e17 	svccc	0x00012e17
    2098:	3a0e030c 	bcc	382cd0 <__ccfg+0x362d28>
    209c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    20a0:	110c270b 	tstne	ip, fp, lsl #14
    20a4:	40011201 	andmi	r1, r1, r1, lsl #4
    20a8:	1800000a 	stmdane	r0, {r1, r3}
    20ac:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    20b0:	0b3b0b3a 	bleq	ec4da0 <__ccfg+0xea4df8>
    20b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    20b8:	00000602 	andeq	r0, r0, r2, lsl #12
    20bc:	03003419 	movweq	r3, #1049	; 0x419
    20c0:	3b0b3a0e 	blcc	2d0900 <__ccfg+0x2b0958>
    20c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20c8:	00060213 	andeq	r0, r6, r3, lsl r2
    20cc:	010b1a00 	tsteq	fp, r0, lsl #20
    20d0:	00000655 	andeq	r0, r0, r5, asr r6
    20d4:	0300341b 	movweq	r3, #1051	; 0x41b
    20d8:	3b0b3a08 	blcc	2d0900 <__ccfg+0x2b0958>
    20dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    20e0:	000a0213 	andeq	r0, sl, r3, lsl r2
    20e4:	11010000 	mrsne	r0, (UNDEF: 1)
    20e8:	130e2501 	movwne	r2, #58625	; 0xe501
    20ec:	1b0e030b 	blne	382d20 <__ccfg+0x362d78>
    20f0:	1106550e 	tstne	r6, lr, lsl #10
    20f4:	00061001 	andeq	r1, r6, r1
    20f8:	00240200 	eoreq	r0, r4, r0, lsl #4
    20fc:	0b3e0b0b 	bleq	f84d30 <__ccfg+0xf64d88>
    2100:	00000e03 	andeq	r0, r0, r3, lsl #28
    2104:	03001603 	movweq	r1, #1539	; 0x603
    2108:	3b0b3a0e 	blcc	2d0948 <__ccfg+0x2b09a0>
    210c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2110:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2114:	0b0b0024 	bleq	2c21ac <__ccfg+0x2a2204>
    2118:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    211c:	13050000 	movwne	r0, #20480	; 0x5000
    2120:	0b0e0301 	bleq	382d2c <__ccfg+0x362d84>
    2124:	3b0b3a0b 	blcc	2d0958 <__ccfg+0x2b09b0>
    2128:	0013010b 	andseq	r0, r3, fp, lsl #2
    212c:	000d0600 	andeq	r0, sp, r0, lsl #12
    2130:	13490e03 	movtne	r0, #40451	; 0x9e03
    2134:	0c340b38 			; <UNDEFINED> instruction: 0x0c340b38
    2138:	0f070000 	svceq	0x00070000
    213c:	000b0b00 	andeq	r0, fp, r0, lsl #22
    2140:	00260800 	eoreq	r0, r6, r0, lsl #16
    2144:	00001349 	andeq	r1, r0, r9, asr #6
    2148:	49003509 	stmdbmi	r0, {r0, r3, r8, sl, ip, sp}
    214c:	0a000013 	beq	21a0 <NOROM_SetupGetTrimForAnabypassValue1+0x20>
    2150:	0b0b000f 	bleq	2c2194 <__ccfg+0x2a21ec>
    2154:	00001349 	andeq	r1, r0, r9, asr #6
    2158:	0b01130b 	bleq	46d8c <__ccfg+0x26de4>
    215c:	3b0b3a0b 	blcc	2d0990 <__ccfg+0x2b09e8>
    2160:	010b390b 	tsteq	fp, fp, lsl #18
    2164:	0c000013 	stceq	0, cr0, [r0], {19}
    2168:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    216c:	0b3b0b3a 	bleq	ec4e5c <__ccfg+0xea4eb4>
    2170:	13490b39 	movtne	r0, #39737	; 0x9b39
    2174:	0b0d0b0b 	bleq	344da8 <__ccfg+0x324e00>
    2178:	0b380b0c 	bleq	e04db0 <__ccfg+0xde4e08>
    217c:	0d0d0000 	stceq	0, cr0, [sp, #-0]
    2180:	3a0e0300 	bcc	382d88 <__ccfg+0x362de0>
    2184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2188:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    218c:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
    2190:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2194:	0b3b0b3a 	bleq	ec4e84 <__ccfg+0xea4edc>
    2198:	13490b39 	movtne	r0, #39737	; 0x9b39
    219c:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    21a0:	010f0000 	mrseq	r0, CPSR
    21a4:	01134901 	tsteq	r3, r1, lsl #18
    21a8:	10000013 	andne	r0, r0, r3, lsl r0
    21ac:	00000021 	andeq	r0, r0, r1, lsr #32
    21b0:	03001611 	movweq	r1, #1553	; 0x611
    21b4:	3b0b3a0e 	blcc	2d09f4 <__ccfg+0x2b0a4c>
    21b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
    21bc:	12000013 	andne	r0, r0, #19
    21c0:	0c270115 	stfeqs	f0, [r7], #-84	; 0xffffffac
    21c4:	00001301 	andeq	r1, r0, r1, lsl #6
    21c8:	49000513 	stmdbmi	r0, {r0, r1, r4, r8, sl}
    21cc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
    21d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    21d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    21d8:	13490b39 	movtne	r0, #39737	; 0x9b39
    21dc:	0c3c0c3f 	ldceq	12, cr0, [ip], #-252	; 0xffffff04
    21e0:	13150000 	tstne	r5, #0
    21e4:	3a0b0b01 	bcc	2c4df0 <__ccfg+0x2a4e48>
    21e8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    21ec:	0013010b 	andseq	r0, r3, fp, lsl #2
    21f0:	000d1600 	andeq	r1, sp, r0, lsl #12
    21f4:	0b3a0e03 	bleq	e85a08 <__ccfg+0xe65a60>
    21f8:	0b39053b 	bleq	e436ec <__ccfg+0xe23744>
    21fc:	0b381349 	bleq	e06f28 <__ccfg+0xde6f80>
    2200:	13170000 	tstne	r7, #0
    2204:	0b0e0301 	bleq	382e10 <__ccfg+0x362e68>
    2208:	3b0b3a0b 	blcc	2d0a3c <__ccfg+0x2b0a94>
    220c:	010b3905 	tsteq	fp, r5, lsl #18
    2210:	18000013 	stmdane	r0, {r0, r1, r4}
    2214:	13490021 	movtne	r0, #36897	; 0x9021
    2218:	00000b2f 	andeq	r0, r0, pc, lsr #22
    221c:	3f012e19 	svccc	0x00012e19
    2220:	3a0e030c 	bcc	382e58 <__ccfg+0x362eb0>
    2224:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2228:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    222c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2230:	010a4001 	tsteq	sl, r1
    2234:	1a000013 	bne	2288 <NOROM_SetupGetTrimForDblrLoopFilterResetVoltage+0xc>
    2238:	08030005 	stmdaeq	r3, {r0, r2}
    223c:	0b3b0b3a 	bleq	ec4f2c <__ccfg+0xea4f84>
    2240:	13490b39 	movtne	r0, #39737	; 0x9b39
    2244:	00000602 	andeq	r0, r0, r2, lsl #12
    2248:	0300341b 	movweq	r3, #1051	; 0x41b
    224c:	3b0b3a08 	blcc	2d0a74 <__ccfg+0x2b0acc>
    2250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    2254:	00060213 	andeq	r0, r6, r3, lsl r2
    2258:	000a1c00 	andeq	r1, sl, r0, lsl #24
    225c:	0b3a0e03 	bleq	e85a70 <__ccfg+0xe65ac8>
    2260:	0b390b3b 	bleq	e44f54 <__ccfg+0xe24fac>
    2264:	00000111 	andeq	r0, r0, r1, lsl r1
    2268:	3f012e1d 	svccc	0x00012e1d
    226c:	3a0e030c 	bcc	382ea4 <__ccfg+0x362efc>
    2270:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2274:	490c270b 	stmdbmi	ip, {r0, r1, r3, r8, r9, sl, sp}
    2278:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    227c:	000a4001 	andeq	r4, sl, r1
    2280:	00341e00 	eorseq	r1, r4, r0, lsl #28
    2284:	0b3a0803 	bleq	e84298 <__ccfg+0xe642f0>
    2288:	0b390b3b 	bleq	e44f7c <__ccfg+0xe24fd4>
    228c:	0a021349 	beq	86fb8 <__ccfg+0x67010>
    2290:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
    2294:	3a0e0301 	bcc	382ea0 <__ccfg+0x362ef8>
    2298:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    229c:	110c270b 	tstne	ip, fp, lsl #14
    22a0:	40011201 	andmi	r1, r1, r1, lsl #4
    22a4:	010a480a 	tsteq	sl, sl, lsl #16
    22a8:	20000013 	andcs	r0, r0, r3, lsl r0
    22ac:	08030005 	stmdaeq	r3, {r0, r2}
    22b0:	0b3b0b3a 	bleq	ec4fa0 <__ccfg+0xea4ff8>
    22b4:	13490b39 	movtne	r0, #39737	; 0x9b39
    22b8:	00000a02 	andeq	r0, r0, r2, lsl #20
    22bc:	03000a21 	movweq	r0, #2593	; 0xa21
    22c0:	3b0b3a08 	blcc	2d0ae8 <__ccfg+0x2b0b40>
    22c4:	110b390b 	tstne	fp, fp, lsl #18
    22c8:	22000001 	andcs	r0, r0, #1
    22cc:	0655010b 	ldrbeq	r0, [r5], -fp, lsl #2
    22d0:	00001301 	andeq	r1, r0, r1, lsl #6
    22d4:	03003423 	movweq	r3, #1059	; 0x423
    22d8:	3b0b3a08 	blcc	2d0b00 <__ccfg+0x2b0b58>
    22dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    22e0:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    22e4:	0111010b 	tsteq	r1, fp, lsl #2
    22e8:	13010112 	movwne	r0, #4370	; 0x1112
    22ec:	0b250000 	bleq	9422f4 <__ccfg+0x92234c>
    22f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    22f4:	00000001 	andeq	r0, r0, r1
    22f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    22fc:	030b130e 	movweq	r1, #45838	; 0xb30e
    2300:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2304:	10011106 	andne	r1, r1, r6, lsl #2
    2308:	02000006 	andeq	r0, r0, #6
    230c:	0b0b0024 	bleq	2c23a4 <__ccfg+0x2a23fc>
    2310:	0e030b3e 	vmoveq.16	d3[0], r0
    2314:	16030000 	strne	r0, [r3], -r0
    2318:	3a0e0300 	bcc	382f20 <__ccfg+0x362f78>
    231c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2320:	0013490b 	andseq	r4, r3, fp, lsl #18
    2324:	00240400 	eoreq	r0, r4, r0, lsl #8
    2328:	0b3e0b0b 	bleq	f84f5c <__ccfg+0xf64fb4>
    232c:	00000803 	andeq	r0, r0, r3, lsl #16
    2330:	03011305 	movweq	r1, #4869	; 0x1305
    2334:	3a0b0b0e 	bcc	2c4f74 <__ccfg+0x2a4fcc>
    2338:	010b3b0b 	tsteq	fp, fp, lsl #22
    233c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2340:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2344:	0b381349 	bleq	e07070 <__ccfg+0xde70c8>
    2348:	00000c34 	andeq	r0, r0, r4, lsr ip
    234c:	0b000f07 	bleq	5f70 <__exidx_end+0x32f0>
    2350:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    2354:	13490026 	movtne	r0, #36902	; 0x9026
    2358:	35090000 	strcc	r0, [r9, #-0]
    235c:	00134900 	andseq	r4, r3, r0, lsl #18
    2360:	000f0a00 	andeq	r0, pc, r0, lsl #20
    2364:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    2368:	130b0000 	movwne	r0, #45056	; 0xb000
    236c:	3a0b0b01 	bcc	2c4f78 <__ccfg+0x2a4fd0>
    2370:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2374:	0013010b 	andseq	r0, r3, fp, lsl #2
    2378:	000d0c00 	andeq	r0, sp, r0, lsl #24
    237c:	0b3a0e03 	bleq	e85b90 <__ccfg+0xe65be8>
    2380:	0b390b3b 	bleq	e45074 <__ccfg+0xe250cc>
    2384:	0b0b1349 	bleq	2c70b0 <__ccfg+0x2a7108>
    2388:	0b0c0b0d 	bleq	304fc4 <__ccfg+0x2e501c>
    238c:	00000b38 	andeq	r0, r0, r8, lsr fp
    2390:	03000d0d 	movweq	r0, #3341	; 0xd0d
    2394:	3b0b3a0e 	blcc	2d0bd4 <__ccfg+0x2b0c2c>
    2398:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    239c:	000b3813 	andeq	r3, fp, r3, lsl r8
    23a0:	00340e00 	eorseq	r0, r4, r0, lsl #28
    23a4:	0b3a0e03 	bleq	e85bb8 <__ccfg+0xe65c10>
    23a8:	0b390b3b 	bleq	e4509c <__ccfg+0xe250f4>
    23ac:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 2290 <NOROM_SetupGetTrimForAdcShModeEn>
    23b0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    23b4:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
    23b8:	00130113 	andseq	r0, r3, r3, lsl r1
    23bc:	00211000 	eoreq	r1, r1, r0
    23c0:	16110000 	ldrne	r0, [r1], -r0
    23c4:	3a0e0300 	bcc	382fcc <__ccfg+0x363024>
    23c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    23cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    23d0:	01151200 	tsteq	r5, r0, lsl #4
    23d4:	13010c27 	movwne	r0, #7207	; 0x1c27
    23d8:	05130000 	ldreq	r0, [r3, #-0]
    23dc:	00134900 	andseq	r4, r3, r0, lsl #18
    23e0:	00341400 	eorseq	r1, r4, r0, lsl #8
    23e4:	0b3a0e03 	bleq	e85bf8 <__ccfg+0xe65c50>
    23e8:	0b39053b 	bleq	e438dc <__ccfg+0xe23934>
    23ec:	0c3f1349 	ldceq	3, cr1, [pc], #-292	; 22d0 <NOROM_SetupGetTrimForXoscHfCtl+0x18>
    23f0:	00000c3c 	andeq	r0, r0, ip, lsr ip
    23f4:	0b011315 	bleq	47050 <__ccfg+0x270a8>
    23f8:	3b0b3a0b 	blcc	2d0c2c <__ccfg+0x2b0c84>
    23fc:	010b3905 	tsteq	fp, r5, lsl #18
    2400:	16000013 			; <UNDEFINED> instruction: 0x16000013
    2404:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2408:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    240c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2410:	00000b38 	andeq	r0, r0, r8, lsr fp
    2414:	03011317 	movweq	r1, #4887	; 0x1317
    2418:	3a0b0b0e 	bcc	2c5058 <__ccfg+0x2a50b0>
    241c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2420:	0013010b 	andseq	r0, r3, fp, lsl #2
    2424:	00211800 	eoreq	r1, r1, r0, lsl #16
    2428:	0b2f1349 	bleq	bc7154 <__ccfg+0xba71ac>
    242c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
    2430:	030c3f01 	movweq	r3, #52993	; 0xcf01
    2434:	3b0b3a0e 	blcc	2d0c74 <__ccfg+0x2b0ccc>
    2438:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    243c:	1113490c 	tstne	r3, ip, lsl #18
    2440:	40011201 	andmi	r1, r1, r1, lsl #4
    2444:	0013010a 	andseq	r0, r3, sl, lsl #2
    2448:	00051a00 	andeq	r1, r5, r0, lsl #20
    244c:	0b3a0803 	bleq	e84460 <__ccfg+0xe644b8>
    2450:	0b390b3b 	bleq	e45144 <__ccfg+0xe2519c>
    2454:	06021349 	streq	r1, [r2], -r9, asr #6
    2458:	341b0000 	ldrcc	r0, [fp], #-0
    245c:	3a080300 	bcc	203064 <__ccfg+0x1e30bc>
    2460:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2464:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2468:	1c000006 	stcne	0, cr0, [r0], {6}
    246c:	0e03000a 	cdpeq	0, 0, cr0, cr3, cr10, {0}
    2470:	0b3b0b3a 	bleq	ec5160 <__ccfg+0xea51b8>
    2474:	00000b39 	andeq	r0, r0, r9, lsr fp
    2478:	11010b1d 	tstne	r1, sp, lsl fp
    247c:	01011201 	tsteq	r1, r1, lsl #4
    2480:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
    2484:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2488:	0b3b0b3a 	bleq	ec5178 <__ccfg+0xea51d0>
    248c:	13490b39 	movtne	r0, #39737	; 0x9b39
    2490:	00000a02 	andeq	r0, r0, r2, lsl #20
    2494:	55010b1f 	strpl	r0, [r1, #-2847]	; 0xfffff4e1
    2498:	00130106 	andseq	r0, r3, r6, lsl #2
    249c:	00342000 	eorseq	r2, r4, r0
    24a0:	0b3a0803 	bleq	e844b4 <__ccfg+0xe6450c>
    24a4:	0b390b3b 	bleq	e45198 <__ccfg+0xe251f0>
    24a8:	00001349 	andeq	r1, r0, r9, asr #6
    24ac:	55010b21 	strpl	r0, [r1, #-2849]	; 0xfffff4df
    24b0:	00000006 	andeq	r0, r0, r6
    24b4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    24b8:	030b130e 	movweq	r1, #45838	; 0xb30e
    24bc:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    24c0:	10011117 	andne	r1, r1, r7, lsl r1
    24c4:	02000017 	andeq	r0, r0, #23
    24c8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    24cc:	0b3b0b3a 	bleq	ec51bc <__ccfg+0xea5214>
    24d0:	00001349 	andeq	r1, r0, r9, asr #6
    24d4:	0b002403 	bleq	b4e8 <__exidx_end+0x8868>
    24d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    24dc:	0400000e 	streq	r0, [r0], #-14
    24e0:	0b0b0024 	bleq	2c2578 <__ccfg+0x2a25d0>
    24e4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    24e8:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    24ec:	03193f01 	tsteq	r9, #1, 30
    24f0:	3b0b3a0e 	blcc	2d0d30 <__ccfg+0x2b0d88>
    24f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    24f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    24fc:	97184006 	ldrls	r4, [r8, -r6]
    2500:	00001942 	andeq	r1, r0, r2, asr #18
    2504:	03003406 	movweq	r3, #1030	; 0x406
    2508:	3b0b3a0e 	blcc	2d0d48 <__ccfg+0x2b0da0>
    250c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2510:	07000017 	smladeq	r0, r7, r0, r0
    2514:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2518:	0b3b0b3a 	bleq	ec5208 <__ccfg+0xea5260>
    251c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    2520:	01000000 	mrseq	r0, (UNDEF: 0)
    2524:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    2528:	0e030b13 	vmoveq.32	d3[0], r0
    252c:	17550e1b 	smmlane	r5, fp, lr, r0
    2530:	17100111 			; <UNDEFINED> instruction: 0x17100111
    2534:	24020000 	strcs	r0, [r2], #-0
    2538:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    253c:	000e030b 	andeq	r0, lr, fp, lsl #6
    2540:	00160300 	andseq	r0, r6, r0, lsl #6
    2544:	0b3a0e03 	bleq	e85d58 <__ccfg+0xe65db0>
    2548:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    254c:	24040000 	strcs	r0, [r4], #-0
    2550:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    2554:	0008030b 	andeq	r0, r8, fp, lsl #6
    2558:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    255c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2560:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2564:	13491927 	movtne	r1, #39207	; 0x9927
    2568:	06120111 			; <UNDEFINED> instruction: 0x06120111
    256c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2570:	00130119 	andseq	r0, r3, r9, lsl r1
    2574:	00340600 	eorseq	r0, r4, r0, lsl #12
    2578:	0b3a0e03 	bleq	e85d8c <__ccfg+0xe65de4>
    257c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2580:	00001702 	andeq	r1, r0, r2, lsl #14
    2584:	03003407 	movweq	r3, #1031	; 0x407
    2588:	3b0b3a0e 	blcc	2d0dc8 <__ccfg+0x2b0e20>
    258c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2590:	08000018 	stmdaeq	r0, {r3, r4}
    2594:	0b0b0117 	bleq	2c29f8 <__ccfg+0x2a2a50>
    2598:	0b3b0b3a 	bleq	ec5288 <__ccfg+0xea52e0>
    259c:	00001301 	andeq	r1, r0, r1, lsl #6
    25a0:	03000d09 	movweq	r0, #3337	; 0xd09
    25a4:	3b0b3a0e 	blcc	2d0de4 <__ccfg+0x2b0e3c>
    25a8:	0013490b 	andseq	r4, r3, fp, lsl #18
    25ac:	00340a00 	eorseq	r0, r4, r0, lsl #20
    25b0:	0b3a0e03 	bleq	e85dc4 <__ccfg+0xe65e1c>
    25b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    25b8:	010b0000 	mrseq	r0, (UNDEF: 11)
    25bc:	01134901 	tsteq	r3, r1, lsl #18
    25c0:	0c000013 	stceq	0, cr0, [r0], {19}
    25c4:	13490021 	movtne	r0, #36897	; 0x9021
    25c8:	00000b2f 	andeq	r0, r0, pc, lsr #22
    25cc:	01110100 	tsteq	r1, r0, lsl #2
    25d0:	0b130e25 	bleq	4c5e6c <__ccfg+0x4a5ec4>
    25d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    25d8:	01111755 	tsteq	r1, r5, asr r7
    25dc:	00001710 	andeq	r1, r0, r0, lsl r7
    25e0:	0b002402 	bleq	b5f0 <__exidx_end+0x8970>
    25e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    25e8:	0300000e 	movweq	r0, #14
    25ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    25f0:	0b3b0b3a 	bleq	ec52e0 <__ccfg+0xea5338>
    25f4:	00001349 	andeq	r1, r0, r9, asr #6
    25f8:	0b002404 	bleq	b610 <__exidx_end+0x8990>
    25fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2600:	05000008 	streq	r0, [r0, #-8]
    2604:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2608:	0b3a0e03 	bleq	e85e1c <__ccfg+0xe65e74>
    260c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2610:	01111349 	tsteq	r1, r9, asr #6
    2614:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2618:	01194297 			; <UNDEFINED> instruction: 0x01194297
    261c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2620:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2624:	0b3b0b3a 	bleq	ec5314 <__ccfg+0xea536c>
    2628:	00001349 	andeq	r1, r0, r9, asr #6
    262c:	03003407 	movweq	r3, #1031	; 0x407
    2630:	3b0b3a0e 	blcc	2d0e70 <__ccfg+0x2b0ec8>
    2634:	00134905 	andseq	r4, r3, r5, lsl #18
    2638:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    263c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2640:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2644:	13491927 	movtne	r1, #39207	; 0x9927
    2648:	06120111 			; <UNDEFINED> instruction: 0x06120111
    264c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2650:	00130119 	andseq	r0, r3, r9, lsl r1
    2654:	012e0900 			; <UNDEFINED> instruction: 0x012e0900
    2658:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    265c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2660:	01111927 	tsteq	r1, r7, lsr #18
    2664:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2668:	00194297 	mulseq	r9, r7, r2
    266c:	00050a00 	andeq	r0, r5, r0, lsl #20
    2670:	0b3a0e03 	bleq	e85e84 <__ccfg+0xe65edc>
    2674:	1349053b 	movtne	r0, #38203	; 0x953b
    2678:	00001802 	andeq	r1, r0, r2, lsl #16
    267c:	01110100 	tsteq	r1, r0, lsl #2
    2680:	0b130e25 	bleq	4c5f1c <__ccfg+0x4a5f74>
    2684:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    2688:	01111755 	tsteq	r1, r5, asr r7
    268c:	00001710 	andeq	r1, r0, r0, lsl r7
    2690:	0b002402 	bleq	b6a0 <__exidx_end+0x8a20>
    2694:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2698:	0300000e 	movweq	r0, #14
    269c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    26a0:	0b3b0b3a 	bleq	ec5390 <__ccfg+0xea53e8>
    26a4:	00001349 	andeq	r1, r0, r9, asr #6
    26a8:	0b002404 	bleq	b6c0 <__exidx_end+0x8a40>
    26ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    26b0:	05000008 	streq	r0, [r0, #-8]
    26b4:	0e03002e 	cdpeq	0, 0, cr0, cr3, cr14, {1}
    26b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    26bc:	0b201927 	bleq	808b60 <__ccfg+0x7e8bb8>
    26c0:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
    26c4:	3a0e0300 	bcc	3832cc <__ccfg+0x363324>
    26c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    26cc:	000b2019 	andeq	r2, fp, r9, lsl r0
    26d0:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
    26d4:	0b3a0e03 	bleq	e85ee8 <__ccfg+0xe65f40>
    26d8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    26dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    26e0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    26e4:	00130119 	andseq	r0, r3, r9, lsl r1
    26e8:	00050800 	andeq	r0, r5, r0, lsl #16
    26ec:	0b3a0e03 	bleq	e85f00 <__ccfg+0xe65f58>
    26f0:	1349053b 	movtne	r0, #38203	; 0x953b
    26f4:	00001702 	andeq	r1, r0, r2, lsl #14
    26f8:	03003409 	movweq	r3, #1033	; 0x409
    26fc:	3b0b3a0e 	blcc	2d0f3c <__ccfg+0x2b0f94>
    2700:	02134905 	andseq	r4, r3, #81920	; 0x14000
    2704:	0a000017 	beq	2768 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x138>
    2708:	1331001d 	teqne	r1, #29
    270c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2710:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2714:	0b0b0000 	bleq	2c271c <__ccfg+0x2a2774>
    2718:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    271c:	00130106 	andseq	r0, r3, r6, lsl #2
    2720:	82890c00 	addhi	r0, r9, #0, 24
    2724:	01110101 	tsteq	r1, r1, lsl #2
    2728:	13011331 	movwne	r1, #4913	; 0x1331
    272c:	8a0d0000 	bhi	342734 <__ccfg+0x32278c>
    2730:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    2734:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2738:	890e0000 	stmdbhi	lr, {}	; <UNPREDICTABLE>
    273c:	11010182 	smlabbne	r1, r2, r1, r0
    2740:	0f000001 	svceq	0x00000001
    2744:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2748:	0b3a0e03 	bleq	e85f5c <__ccfg+0xe65fb4>
    274c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2750:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2754:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2758:	00130119 	andseq	r0, r3, r9, lsl r1
    275c:	00341000 	eorseq	r1, r4, r0
    2760:	0b3a0e03 	bleq	e85f74 <__ccfg+0xe65fcc>
    2764:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2768:	00001702 	andeq	r1, r0, r2, lsl #14
    276c:	01828911 	orreq	r8, r2, r1, lsl r9
    2770:	31011100 	mrscc	r1, (UNDEF: 17)
    2774:	12000013 	andne	r0, r0, #19
    2778:	01018289 	smlabbeq	r1, r9, r2, r8
    277c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2780:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
    2784:	03193f01 	tsteq	r9, #1, 30
    2788:	3b0b3a0e 	blcc	2d0fc8 <__ccfg+0x2b1020>
    278c:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2790:	00130119 	andseq	r0, r3, r9, lsl r1
    2794:	00051400 	andeq	r1, r5, r0, lsl #8
    2798:	00001349 	andeq	r1, r0, r9, asr #6
    279c:	3f002e15 	svccc	0x00002e15
    27a0:	3a0e0319 	bcc	38340c <__ccfg+0x363464>
    27a4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    27a8:	00193c19 	andseq	r3, r9, r9, lsl ip
    27ac:	002e1600 	eoreq	r1, lr, r0, lsl #12
    27b0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    27b4:	0b3b0b3a 	bleq	ec54a4 <__ccfg+0xea54fc>
    27b8:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    27bc:	01000000 	mrseq	r0, (UNDEF: 0)
    27c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    27c4:	0e030b13 	vmoveq.32	d3[0], r0
    27c8:	17550e1b 	smmlane	r5, fp, lr, r0
    27cc:	17100111 			; <UNDEFINED> instruction: 0x17100111
    27d0:	24020000 	strcs	r0, [r2], #-0
    27d4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    27d8:	000e030b 	andeq	r0, lr, fp, lsl #6
    27dc:	00160300 	andseq	r0, r6, r0, lsl #6
    27e0:	0b3a0e03 	bleq	e85ff4 <__ccfg+0xe6604c>
    27e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    27e8:	24040000 	strcs	r0, [r4], #-0
    27ec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    27f0:	0008030b 	andeq	r0, r8, fp, lsl #6
    27f4:	012e0500 			; <UNDEFINED> instruction: 0x012e0500
    27f8:	0b3a0e03 	bleq	e8600c <__ccfg+0xe66064>
    27fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2800:	0b201349 	bleq	80752c <__ccfg+0x7e7584>
    2804:	00001301 	andeq	r1, r0, r1, lsl #6
    2808:	03000506 	movweq	r0, #1286	; 0x506
    280c:	3b0b3a0e 	blcc	2d104c <__ccfg+0x2b10a4>
    2810:	0013490b 	andseq	r4, r3, fp, lsl #18
    2814:	00340700 	eorseq	r0, r4, r0, lsl #14
    2818:	0b3a0e03 	bleq	e8602c <__ccfg+0xe66084>
    281c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2820:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
    2824:	03193f01 	tsteq	r9, #1, 30
    2828:	3b0b3a0e 	blcc	2d1068 <__ccfg+0x2b10c0>
    282c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2830:	010b2013 	tsteq	fp, r3, lsl r0
    2834:	09000013 	stmdbeq	r0, {r0, r1, r4}
    2838:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    283c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2840:	00001349 	andeq	r1, r0, r9, asr #6
    2844:	0300340a 	movweq	r3, #1034	; 0x40a
    2848:	3b0b3a0e 	blcc	2d1088 <__ccfg+0x2b10e0>
    284c:	00134905 	andseq	r4, r3, r5, lsl #18
    2850:	002e0b00 	eoreq	r0, lr, r0, lsl #22
    2854:	0b3a0e03 	bleq	e86068 <__ccfg+0xe660c0>
    2858:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    285c:	00000b20 	andeq	r0, r0, r0, lsr #22
    2860:	3f012e0c 	svccc	0x00012e0c
    2864:	3a0e0319 	bcc	3834d0 <__ccfg+0x363528>
    2868:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    286c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2870:	97184006 	ldrls	r4, [r8, -r6]
    2874:	13011942 	movwne	r1, #6466	; 0x1942
    2878:	050d0000 	streq	r0, [sp, #-0]
    287c:	3a0e0300 	bcc	383484 <__ccfg+0x3634dc>
    2880:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2884:	00170213 	andseq	r0, r7, r3, lsl r2
    2888:	00340e00 	eorseq	r0, r4, r0, lsl #28
    288c:	0b3a0e03 	bleq	e860a0 <__ccfg+0xe660f8>
    2890:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2894:	00001802 	andeq	r1, r0, r2, lsl #16
    2898:	0300340f 	movweq	r3, #1039	; 0x40f
    289c:	3b0b3a0e 	blcc	2d10dc <__ccfg+0x2b1134>
    28a0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    28a4:	10000017 	andne	r0, r0, r7, lsl r0
    28a8:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28ac:	17550152 			; <UNDEFINED> instruction: 0x17550152
    28b0:	0b590b58 	bleq	1645618 <__ccfg+0x1625670>
    28b4:	00001301 	andeq	r1, r0, r1, lsl #6
    28b8:	31000511 	tstcc	r0, r1, lsl r5
    28bc:	12000013 	andne	r0, r0, #19
    28c0:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    28c4:	34130000 	ldrcc	r0, [r3], #-0
    28c8:	02133100 	andseq	r3, r3, #0, 2
    28cc:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
    28d0:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    28d4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    28d8:	0b590b58 	bleq	1645640 <__ccfg+0x1625698>
    28dc:	0b150000 	bleq	5428e4 <__ccfg+0x52293c>
    28e0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
    28e4:	16000006 	strne	r0, [r0], -r6
    28e8:	13310034 	teqne	r1, #52	; 0x34
    28ec:	00001702 	andeq	r1, r0, r2, lsl #14
    28f0:	3f012e17 	svccc	0x00012e17
    28f4:	3a0e0319 	bcc	383560 <__ccfg+0x3635b8>
    28f8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    28fc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    2900:	97184006 	ldrls	r4, [r8, -r6]
    2904:	13011942 	movwne	r1, #6466	; 0x1942
    2908:	1d180000 	ldcne	0, cr0, [r8, #-0]
    290c:	11133101 	tstne	r3, r1, lsl #2
    2910:	58061201 	stmdapl	r6, {r0, r9, ip}
    2914:	010b590b 	tsteq	fp, fp, lsl #18
    2918:	19000013 	stmdbne	r0, {r0, r1, r4}
    291c:	01018289 	smlabbeq	r1, r9, r2, r8
    2920:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2924:	8a1a0000 	bhi	68292c <__ccfg+0x662984>
    2928:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    292c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    2930:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
    2934:	03193f01 	tsteq	r9, #1, 30
    2938:	3b0b3a0e 	blcc	2d1178 <__ccfg+0x2b11d0>
    293c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2940:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2944:	97184006 	ldrls	r4, [r8, -r6]
    2948:	13011942 	movwne	r1, #6466	; 0x1942
    294c:	051c0000 	ldreq	r0, [ip, #-0]
    2950:	3a0e0300 	bcc	383558 <__ccfg+0x3635b0>
    2954:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2958:	00170213 	andseq	r0, r7, r3, lsl r2
    295c:	00341d00 	eorseq	r1, r4, r0, lsl #26
    2960:	0b3a0e03 	bleq	e86174 <__ccfg+0xe661cc>
    2964:	1349053b 	movtne	r0, #38203	; 0x953b
    2968:	00001702 	andeq	r1, r0, r2, lsl #14
    296c:	31012e1e 	tstcc	r1, lr, lsl lr
    2970:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2974:	97184006 	ldrls	r4, [r8, -r6]
    2978:	13011942 	movwne	r1, #6466	; 0x1942
    297c:	051f0000 	ldreq	r0, [pc, #-0]	; 2984 <NOROM_ThisCodeIsBuiltForCC13xxHwRev20AndLater_HaltIfViolated+0x4>
    2980:	02133100 	andseq	r3, r3, #0, 2
    2984:	20000017 	andcs	r0, r0, r7, lsl r0
    2988:	13310034 	teqne	r1, #52	; 0x34
    298c:	1d210000 	stcne	0, cr0, [r1, #-0]
    2990:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
    2994:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
    2998:	0105590b 	tsteq	r5, fp, lsl #18
    299c:	22000013 	andcs	r0, r0, #19
    29a0:	01018289 	smlabbeq	r1, r9, r2, r8
    29a4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    29a8:	00001301 	andeq	r1, r0, r1, lsl #6
    29ac:	01828923 	orreq	r8, r2, r3, lsr #18
    29b0:	31011100 	mrscc	r1, (UNDEF: 17)
    29b4:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
    29b8:	01018289 	smlabbeq	r1, r9, r2, r8
    29bc:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
    29c0:	00130118 	andseq	r0, r3, r8, lsl r1
    29c4:	001d2500 	andseq	r2, sp, r0, lsl #10
    29c8:	01111331 	tsteq	r1, r1, lsr r3
    29cc:	0b580612 	bleq	160421c <__ccfg+0x15e4274>
    29d0:	00000559 	andeq	r0, r0, r9, asr r5
    29d4:	01828926 	orreq	r8, r2, r6, lsr #18
    29d8:	01011101 	tsteq	r1, r1, lsl #2
    29dc:	27000013 	smladcs	r0, r3, r0, r0
    29e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    29e4:	0b3a0e03 	bleq	e861f8 <__ccfg+0xe66250>
    29e8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    29ec:	1301193c 	movwne	r1, #6460	; 0x193c
    29f0:	05280000 	streq	r0, [r8, #-0]!
    29f4:	00134900 	andseq	r4, r3, r0, lsl #18
    29f8:	012e2900 			; <UNDEFINED> instruction: 0x012e2900
    29fc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2a00:	0b3b0b3a 	bleq	ec56f0 <__ccfg+0xea5748>
    2a04:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    2a08:	00001301 	andeq	r1, r0, r1, lsl #6
    2a0c:	3f012e2a 	svccc	0x00012e2a
    2a10:	3a0e0319 	bcc	38367c <__ccfg+0x3636d4>
    2a14:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2a18:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2a1c:	00000019 	andeq	r0, r0, r9, lsl r0
    2a20:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2a24:	030b130e 	movweq	r1, #45838	; 0xb30e
    2a28:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2a2c:	10011117 	andne	r1, r1, r7, lsl r1
    2a30:	02000017 	andeq	r0, r0, #23
    2a34:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2a38:	0b3b0b3a 	bleq	ec5728 <__ccfg+0xea5780>
    2a3c:	00001349 	andeq	r1, r0, r9, asr #6
    2a40:	0b002403 	bleq	ba54 <__exidx_end+0x8dd4>
    2a44:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    2a48:	0400000e 	streq	r0, [r0], #-14
    2a4c:	0b0b0024 	bleq	2c2ae4 <__ccfg+0x2a2b3c>
    2a50:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2a54:	0f050000 	svceq	0x00050000
    2a58:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    2a5c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2a60:	19270015 	stmdbne	r7!, {r0, r2, r4}
    2a64:	15070000 	strne	r0, [r7, #-0]
    2a68:	01192701 	tsteq	r9, r1, lsl #14
    2a6c:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2a70:	13490005 	movtne	r0, #36869	; 0x9005
    2a74:	15090000 	strne	r0, [r9, #-0]
    2a78:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    2a7c:	00130113 	andseq	r0, r3, r3, lsl r1
    2a80:	00150a00 	andseq	r0, r5, r0, lsl #20
    2a84:	13491927 	movtne	r1, #39207	; 0x9927
    2a88:	130b0000 	movwne	r0, #45056	; 0xb000
    2a8c:	3a0b0b01 	bcc	2c5698 <__ccfg+0x2a56f0>
    2a90:	010b3b0b 	tsteq	fp, fp, lsl #22
    2a94:	0c000013 	stceq	0, cr0, [r0], {19}
    2a98:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    2a9c:	0b3b0b3a 	bleq	ec578c <__ccfg+0xea57e4>
    2aa0:	0b381349 	bleq	e077cc <__ccfg+0xde7824>
    2aa4:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    2aa8:	3a0e0301 	bcc	3836b4 <__ccfg+0x36370c>
    2aac:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2ab0:	010b2019 	tsteq	fp, r9, lsl r0
    2ab4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    2ab8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2abc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2ac0:	00001349 	andeq	r1, r0, r9, asr #6
    2ac4:	03002e0f 	movweq	r2, #3599	; 0xe0f
    2ac8:	3b0b3a0e 	blcc	2d1308 <__ccfg+0x2b1360>
    2acc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2ad0:	000b2013 	andeq	r2, fp, r3, lsl r0
    2ad4:	002e1000 	eoreq	r1, lr, r0
    2ad8:	0b3a0e03 	bleq	e862ec <__ccfg+0xe66344>
    2adc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2ae0:	00000b20 	andeq	r0, r0, r0, lsr #22
    2ae4:	03012e11 	movweq	r2, #7697	; 0x1e11
    2ae8:	3b0b3a0e 	blcc	2d1328 <__ccfg+0x2b1380>
    2aec:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2af0:	010b2013 	tsteq	fp, r3, lsl r0
    2af4:	12000013 	andne	r0, r0, #19
    2af8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2afc:	0b3b0b3a 	bleq	ec57ec <__ccfg+0xea5844>
    2b00:	00001349 	andeq	r1, r0, r9, asr #6
    2b04:	03003413 	movweq	r3, #1043	; 0x413
    2b08:	3b0b3a0e 	blcc	2d1348 <__ccfg+0x2b13a0>
    2b0c:	0013490b 	andseq	r4, r3, fp, lsl #18
    2b10:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
    2b14:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2b18:	0b3b0b3a 	bleq	ec5808 <__ccfg+0xea5860>
    2b1c:	01111927 	tsteq	r1, r7, lsr #18
    2b20:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2b24:	01194297 			; <UNDEFINED> instruction: 0x01194297
    2b28:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
    2b2c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    2b30:	0b3b0b3a 	bleq	ec5820 <__ccfg+0xea5878>
    2b34:	17021349 	strne	r1, [r2, -r9, asr #6]
    2b38:	34160000 	ldrcc	r0, [r6], #-0
    2b3c:	3a0e0300 	bcc	383744 <__ccfg+0x36379c>
    2b40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2b44:	00051c13 	andeq	r1, r5, r3, lsl ip
    2b48:	011d1700 	tsteq	sp, r0, lsl #14
    2b4c:	01521331 	cmpeq	r2, r1, lsr r3
    2b50:	0b581755 	bleq	16088ac <__ccfg+0x15e8904>
    2b54:	13010b59 	movwne	r0, #7001	; 0x1b59
    2b58:	05180000 	ldreq	r0, [r8, #-0]
    2b5c:	1c133100 	ldfnes	f3, [r3], {-0}
    2b60:	1900000b 	stmdbne	r0, {r0, r1, r3}
    2b64:	1331001d 	teqne	r1, #29
    2b68:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2b6c:	0b590b58 	bleq	16458d4 <__ccfg+0x162592c>
    2b70:	1d1a0000 	ldcne	0, cr0, [sl, #-0]
    2b74:	11133101 	tstne	r3, r1, lsl #2
    2b78:	58061201 	stmdapl	r6, {r0, r9, ip}
    2b7c:	010b590b 	tsteq	fp, fp, lsl #18
    2b80:	1b000013 	blne	2bd4 <NOROM_OSCClockSourceGet+0x1b0>
    2b84:	00018289 	andeq	r8, r1, r9, lsl #5
    2b88:	13310111 	teqne	r1, #1073741828	; 0x40000004
    2b8c:	891c0000 	ldmdbhi	ip, {}	; <UNPREDICTABLE>
    2b90:	11010182 	smlabbne	r1, r2, r1, r0
    2b94:	00130101 	andseq	r0, r3, r1, lsl #2
    2b98:	828a1d00 	addhi	r1, sl, #0, 26
    2b9c:	18020001 	stmdane	r2, {r0}
    2ba0:	00184291 	mulseq	r8, r1, r2
    2ba4:	82891e00 	addhi	r1, r9, #0, 28
    2ba8:	01110101 	tsteq	r1, r1, lsl #2
    2bac:	13011331 	movwne	r1, #4913	; 0x1331
    2bb0:	891f0000 	ldmdbhi	pc, {}	; <UNPREDICTABLE>
    2bb4:	11010182 	smlabbne	r1, r2, r1, r0
    2bb8:	20000001 	andcs	r0, r0, r1
    2bbc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2bc0:	0b3a0e03 	bleq	e863d4 <__ccfg+0xe6642c>
    2bc4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2bc8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2bcc:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2bd0:	00130119 	andseq	r0, r3, r9, lsl r1
    2bd4:	00052100 	andeq	r2, r5, r0, lsl #2
    2bd8:	0b3a0e03 	bleq	e863ec <__ccfg+0xe66444>
    2bdc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2be0:	00001702 	andeq	r1, r0, r2, lsl #14
    2be4:	03003422 	movweq	r3, #1058	; 0x422
    2be8:	3b0b3a0e 	blcc	2d1428 <__ccfg+0x2b1480>
    2bec:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2bf0:	23000018 	movwcs	r0, #24
    2bf4:	08030034 	stmdaeq	r3, {r2, r4, r5}
    2bf8:	0b3b0b3a 	bleq	ec58e8 <__ccfg+0xea5940>
    2bfc:	17021349 	strne	r1, [r2, -r9, asr #6]
    2c00:	34240000 	strtcc	r0, [r4], #-0
    2c04:	3a080300 	bcc	20380c <__ccfg+0x1e3864>
    2c08:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c0c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
    2c10:	0111010b 	tsteq	r1, fp, lsl #2
    2c14:	13010612 	movwne	r0, #5650	; 0x1612
    2c18:	34260000 	strtcc	r0, [r6], #-0
    2c1c:	3a0e0300 	bcc	383824 <__ccfg+0x36387c>
    2c20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    2c24:	00170213 	andseq	r0, r7, r3, lsl r2
    2c28:	011d2700 	tsteq	sp, r0, lsl #14
    2c2c:	01111331 	tsteq	r1, r1, lsr r3
    2c30:	0b580612 	bleq	1604480 <__ccfg+0x15e44d8>
    2c34:	13010559 	movwne	r0, #5465	; 0x1559
    2c38:	05280000 	streq	r0, [r8, #-0]!
    2c3c:	00133100 	andseq	r3, r3, r0, lsl #2
    2c40:	010b2900 	tsteq	fp, r0, lsl #18
    2c44:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2c48:	342a0000 	strtcc	r0, [sl], #-0
    2c4c:	02133100 	andseq	r3, r3, #0, 2
    2c50:	2b000017 	blcs	2cb4 <__exidx_end+0x34>
    2c54:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2c58:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2c5c:	05590b58 	ldrbeq	r0, [r9, #-2904]	; 0xfffff4a8
    2c60:	00001301 	andeq	r1, r0, r1, lsl #6
    2c64:	55010b2c 	strpl	r0, [r1, #-2860]	; 0xfffff4d4
    2c68:	2d000017 	stccs	0, cr0, [r0, #-92]	; 0xffffffa4
    2c6c:	13490026 	movtne	r0, #36902	; 0x9026
    2c70:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
    2c74:	03193f00 	tsteq	r9, #0, 30
    2c78:	3b0b3a0e 	blcc	2d14b8 <__ccfg+0x2b1510>
    2c7c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2c80:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2c84:	97184006 	ldrls	r4, [r8, -r6]
    2c88:	00001942 	andeq	r1, r0, r2, asr #18
    2c8c:	4901012f 	stmdbmi	r1, {r0, r1, r2, r3, r5, r8}
    2c90:	00130113 	andseq	r0, r3, r3, lsl r1
    2c94:	00213000 	eoreq	r3, r1, r0
    2c98:	0b2f1349 	bleq	bc79c4 <__ccfg+0xba7a1c>
    2c9c:	2e310000 	cdpcs	0, 3, cr0, cr1, cr0, {0}
    2ca0:	03193f01 	tsteq	r9, #1, 30
    2ca4:	3b0b3a0e 	blcc	2d14e4 <__ccfg+0x2b153c>
    2ca8:	3c19270b 	ldccc	7, cr2, [r9], {11}
    2cac:	00130119 	andseq	r0, r3, r9, lsl r1
    2cb0:	012e3200 			; <UNDEFINED> instruction: 0x012e3200
    2cb4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2cb8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2cbc:	13491927 	movtne	r1, #39207	; 0x9927
    2cc0:	1301193c 	movwne	r1, #6460	; 0x193c
    2cc4:	2e330000 	cdpcs	0, 3, cr0, cr3, cr0, {0}
    2cc8:	03193f00 	tsteq	r9, #0, 30
    2ccc:	3b0b3a0e 	blcc	2d150c <__ccfg+0x2b1564>
    2cd0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    2cd4:	00193c13 	andseq	r3, r9, r3, lsl ip
    2cd8:	11010000 	mrsne	r0, (UNDEF: 1)
    2cdc:	130e2501 	movwne	r2, #58625	; 0xe501
    2ce0:	1b0e030b 	blne	383914 <__ccfg+0x36396c>
    2ce4:	1117550e 	tstne	r7, lr, lsl #10
    2ce8:	00171001 	andseq	r1, r7, r1
    2cec:	00240200 	eoreq	r0, r4, r0, lsl #4
    2cf0:	0b3e0b0b 	bleq	f85924 <__ccfg+0xf6597c>
    2cf4:	00000e03 	andeq	r0, r0, r3, lsl #28
    2cf8:	03001603 	movweq	r1, #1539	; 0x603
    2cfc:	3b0b3a0e 	blcc	2d153c <__ccfg+0x2b1594>
    2d00:	0013490b 	andseq	r4, r3, fp, lsl #18
    2d04:	00240400 	eoreq	r0, r4, r0, lsl #8
    2d08:	0b3e0b0b 	bleq	f8593c <__ccfg+0xf65994>
    2d0c:	00000803 	andeq	r0, r0, r3, lsl #16
    2d10:	0b010405 	bleq	43d2c <__ccfg+0x23d84>
    2d14:	3b0b3a0b 	blcc	2d1548 <__ccfg+0x2b15a0>
    2d18:	0013010b 	andseq	r0, r3, fp, lsl #2
    2d1c:	00280600 	eoreq	r0, r8, r0, lsl #12
    2d20:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
    2d24:	04070000 	streq	r0, [r7], #-0
    2d28:	3a0b0b01 	bcc	2c5934 <__ccfg+0x2a598c>
    2d2c:	01053b0b 	tsteq	r5, fp, lsl #22
    2d30:	08000013 	stmdaeq	r0, {r0, r1, r4}
    2d34:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    2d38:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d3c:	00001349 	andeq	r1, r0, r9, asr #6
    2d40:	03002e09 	movweq	r2, #3593	; 0xe09
    2d44:	3b0b3a0e 	blcc	2d1584 <__ccfg+0x2b15dc>
    2d48:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2d4c:	000b2013 	andeq	r2, fp, r3, lsl r0
    2d50:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
    2d54:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d58:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    2d5c:	13491927 	movtne	r1, #39207	; 0x9927
    2d60:	13010b20 	movwne	r0, #6944	; 0x1b20
    2d64:	340b0000 	strcc	r0, [fp], #-0
    2d68:	3a0e0300 	bcc	383970 <__ccfg+0x3639c8>
    2d6c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2d70:	0c000013 	stceq	0, cr0, [r0], {19}
    2d74:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
    2d78:	0b3a0e03 	bleq	e8658c <__ccfg+0xe665e4>
    2d7c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2d80:	01111349 	tsteq	r1, r9, asr #6
    2d84:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    2d88:	00194297 	mulseq	r9, r7, r2
    2d8c:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    2d90:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    2d94:	0b3b0b3a 	bleq	ec5a84 <__ccfg+0xea5adc>
    2d98:	13491927 	movtne	r1, #39207	; 0x9927
    2d9c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2da0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2da4:	00130119 	andseq	r0, r3, r9, lsl r1
    2da8:	00340e00 	eorseq	r0, r4, r0, lsl #28
    2dac:	0b3a0e03 	bleq	e865c0 <__ccfg+0xe66618>
    2db0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2db4:	00001702 	andeq	r1, r0, r2, lsl #14
    2db8:	31012e0f 	tstcc	r1, pc, lsl #28
    2dbc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2dc0:	97184006 	ldrls	r4, [r8, -r6]
    2dc4:	13011942 	movwne	r1, #6466	; 0x1942
    2dc8:	34100000 	ldrcc	r0, [r0], #-0
    2dcc:	02133100 	andseq	r3, r3, #0, 2
    2dd0:	11000017 	tstne	r0, r7, lsl r0
    2dd4:	0111010b 	tsteq	r1, fp, lsl #2
    2dd8:	00000612 	andeq	r0, r0, r2, lsl r6
    2ddc:	31003412 	tstcc	r0, r2, lsl r4
    2de0:	13000013 	movwne	r0, #19
    2de4:	1331001d 	teqne	r1, #29
    2de8:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2dec:	0b590b58 	bleq	1645b54 <__ccfg+0x1625bac>
    2df0:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
    2df4:	03193f01 	tsteq	r9, #1, 30
    2df8:	3b0b3a0e 	blcc	2d1638 <__ccfg+0x2b1690>
    2dfc:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    2e00:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2e04:	97184006 	ldrls	r4, [r8, -r6]
    2e08:	13011942 	movwne	r1, #6466	; 0x1942
    2e0c:	89150000 	ldmdbhi	r5, {}	; <UNPREDICTABLE>
    2e10:	11000182 	smlabbne	r0, r2, r1, r0
    2e14:	00133101 	andseq	r3, r3, r1, lsl #2
    2e18:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
    2e1c:	0b3a0e03 	bleq	e86630 <__ccfg+0xe66688>
    2e20:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e24:	0b201349 	bleq	807b50 <__ccfg+0x7e7ba8>
    2e28:	00001301 	andeq	r1, r0, r1, lsl #6
    2e2c:	03003417 	movweq	r3, #1047	; 0x417
    2e30:	3b0b3a0e 	blcc	2d1670 <__ccfg+0x2b16c8>
    2e34:	00134905 	andseq	r4, r3, r5, lsl #18
    2e38:	00341800 	eorseq	r1, r4, r0, lsl #16
    2e3c:	0b3a0e03 	bleq	e86650 <__ccfg+0xe666a8>
    2e40:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2e44:	00001802 	andeq	r1, r0, r2, lsl #16
    2e48:	31001d19 	tstcc	r0, r9, lsl sp
    2e4c:	55015213 	strpl	r5, [r1, #-531]	; 0xfffffded
    2e50:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
    2e54:	1a00000b 	bne	2e88 <__exidx_end+0x208>
    2e58:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2e5c:	17550152 			; <UNDEFINED> instruction: 0x17550152
    2e60:	0b590b58 	bleq	1645bc8 <__ccfg+0x1625c20>
    2e64:	00001301 	andeq	r1, r0, r1, lsl #6
    2e68:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xfffff4e5
    2e6c:	1c000017 	stcne	0, cr0, [r0], {23}
    2e70:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    2e74:	0b3a0e03 	bleq	e86688 <__ccfg+0xe666e0>
    2e78:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    2e7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    2e84:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
    2e88:	1331011d 	teqne	r1, #1073741831	; 0x40000007
    2e8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    2e90:	0b590b58 	bleq	1645bf8 <__ccfg+0x1625c50>
    2e94:	00001301 	andeq	r1, r0, r1, lsl #6
    2e98:	31011d1e 	tstcc	r1, lr, lsl sp
    2e9c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2ea0:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2ea4:	0000000b 	andeq	r0, r0, fp
    2ea8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    2eac:	030b130e 	movweq	r1, #45838	; 0xb30e
    2eb0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    2eb4:	10011117 	andne	r1, r1, r7, lsl r1
    2eb8:	02000017 	andeq	r0, r0, #23
    2ebc:	0b0b0024 	bleq	2c2f54 <__ccfg+0x2a2fac>
    2ec0:	0e030b3e 	vmoveq.16	d3[0], r0
    2ec4:	16030000 	strne	r0, [r3], -r0
    2ec8:	3a0e0300 	bcc	383ad0 <__ccfg+0x363b28>
    2ecc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    2ed0:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2ed4:	0b0b0024 	bleq	2c2f6c <__ccfg+0x2a2fc4>
    2ed8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    2edc:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
    2ee0:	3a0e0301 	bcc	383aec <__ccfg+0x363b44>
    2ee4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2ee8:	010b2019 	tsteq	fp, r9, lsl r0
    2eec:	06000013 			; <UNDEFINED> instruction: 0x06000013
    2ef0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    2ef4:	0b3b0b3a 	bleq	ec5be4 <__ccfg+0xea5c3c>
    2ef8:	00001349 	andeq	r1, r0, r9, asr #6
    2efc:	03003407 	movweq	r3, #1031	; 0x407
    2f00:	3b0b3a0e 	blcc	2d1740 <__ccfg+0x2b1798>
    2f04:	0013490b 	andseq	r4, r3, fp, lsl #18
    2f08:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
    2f0c:	0b3a0e03 	bleq	e86720 <__ccfg+0xe66778>
    2f10:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    2f14:	0b201349 	bleq	807c40 <__ccfg+0x7e7c98>
    2f18:	00001301 	andeq	r1, r0, r1, lsl #6
    2f1c:	31012e09 	tstcc	r1, r9, lsl #28
    2f20:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2f24:	97184006 	ldrls	r4, [r8, -r6]
    2f28:	13011942 	movwne	r1, #6466	; 0x1942
    2f2c:	050a0000 	streq	r0, [sl, #-0]
    2f30:	02133100 	andseq	r3, r3, #0, 2
    2f34:	0b000017 	bleq	2f98 <__exidx_end+0x318>
    2f38:	13310034 	teqne	r1, #52	; 0x34
    2f3c:	00001702 	andeq	r1, r0, r2, lsl #14
    2f40:	3100050c 	tstcc	r0, ip, lsl #10
    2f44:	000b1c13 	andeq	r1, fp, r3, lsl ip
    2f48:	82890d00 	addhi	r0, r9, #0, 26
    2f4c:	01110001 	tsteq	r1, r1
    2f50:	00001331 	andeq	r1, r0, r1, lsr r3
    2f54:	0182890e 	orreq	r8, r2, lr, lsl #18
    2f58:	95011100 	strls	r1, [r1, #-256]	; 0xffffff00
    2f5c:	13311942 	teqne	r1, #1081344	; 0x108000
    2f60:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    2f64:	03193f01 	tsteq	r9, #1, 30
    2f68:	3b0b3a0e 	blcc	2d17a8 <__ccfg+0x2b1800>
    2f6c:	11192705 	tstne	r9, r5, lsl #14
    2f70:	40061201 	andmi	r1, r6, r1, lsl #4
    2f74:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2f78:	00001301 	andeq	r1, r0, r1, lsl #6
    2f7c:	03000510 	movweq	r0, #1296	; 0x510
    2f80:	3b0b3a0e 	blcc	2d17c0 <__ccfg+0x2b1818>
    2f84:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    2f88:	11000017 	tstne	r0, r7, lsl r0
    2f8c:	01018289 	smlabbeq	r1, r9, r2, r8
    2f90:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    2f94:	00133119 	andseq	r3, r3, r9, lsl r1
    2f98:	828a1200 	addhi	r1, sl, #0, 4
    2f9c:	18020001 	stmdane	r2, {r0}
    2fa0:	00184291 	mulseq	r8, r1, r2
    2fa4:	00341300 	eorseq	r1, r4, r0, lsl #6
    2fa8:	0b3a0e03 	bleq	e867bc <__ccfg+0xe66814>
    2fac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    2fb0:	00001702 	andeq	r1, r0, r2, lsl #14
    2fb4:	3f012e14 	svccc	0x00012e14
    2fb8:	3a0e0319 	bcc	383c24 <__ccfg+0x363c7c>
    2fbc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    2fc0:	11134919 	tstne	r3, r9, lsl r9
    2fc4:	40061201 	andmi	r1, r6, r1, lsl #4
    2fc8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    2fcc:	00001301 	andeq	r1, r0, r1, lsl #6
    2fd0:	31011d15 	tstcc	r1, r5, lsl sp
    2fd4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    2fd8:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    2fdc:	1600000b 	strne	r0, [r0], -fp
    2fe0:	0111010b 	tsteq	r1, fp, lsl #2
    2fe4:	00000612 	andeq	r0, r0, r2, lsl r6
    2fe8:	3f002e17 	svccc	0x00002e17
    2fec:	3a0e0319 	bcc	383c58 <__ccfg+0x363cb0>
    2ff0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    2ff4:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    2ff8:	00000019 	andeq	r0, r0, r9, lsl r0
    2ffc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    3000:	030b130e 	movweq	r1, #45838	; 0xb30e
    3004:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    3008:	10011117 	andne	r1, r1, r7, lsl r1
    300c:	02000017 	andeq	r0, r0, #23
    3010:	0b0b0024 	bleq	2c30a8 <__ccfg+0x2a3100>
    3014:	0e030b3e 	vmoveq.16	d3[0], r0
    3018:	16030000 	strne	r0, [r3], -r0
    301c:	3a0e0300 	bcc	383c24 <__ccfg+0x363c7c>
    3020:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    3024:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    3028:	0b0b0024 	bleq	2c30c0 <__ccfg+0x2a3118>
    302c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    3030:	0f050000 	svceq	0x00050000
    3034:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    3038:	06000013 			; <UNDEFINED> instruction: 0x06000013
    303c:	19270015 	stmdbne	r7!, {r0, r2, r4}
    3040:	15070000 	strne	r0, [r7, #-0]
    3044:	01192701 	tsteq	r9, r1, lsl #14
    3048:	08000013 	stmdaeq	r0, {r0, r1, r4}
    304c:	13490005 	movtne	r0, #36869	; 0x9005
    3050:	15090000 	strne	r0, [r9, #-0]
    3054:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
    3058:	00130113 	andseq	r0, r3, r3, lsl r1
    305c:	00150a00 	andseq	r0, r5, r0, lsl #20
    3060:	13491927 	movtne	r1, #39207	; 0x9927
    3064:	130b0000 	movwne	r0, #45056	; 0xb000
    3068:	3a0b0b01 	bcc	2c5c74 <__ccfg+0x2a5ccc>
    306c:	010b3b0b 	tsteq	fp, fp, lsl #22
    3070:	0c000013 	stceq	0, cr0, [r0], {19}
    3074:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    3078:	0b3b0b3a 	bleq	ec5d68 <__ccfg+0xea5dc0>
    307c:	0b381349 	bleq	e07da8 <__ccfg+0xde7e00>
    3080:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    3084:	03193f01 	tsteq	r9, #1, 30
    3088:	3b0b3a0e 	blcc	2d18c8 <__ccfg+0x2b1920>
    308c:	2019270b 	andscs	r2, r9, fp, lsl #14
    3090:	0013010b 	andseq	r0, r3, fp, lsl #2
    3094:	00050e00 	andeq	r0, r5, r0, lsl #28
    3098:	0b3a0e03 	bleq	e868ac <__ccfg+0xe66904>
    309c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    30a0:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
    30a4:	03193f01 	tsteq	r9, #1, 30
    30a8:	3b0b3a0e 	blcc	2d18e8 <__ccfg+0x2b1940>
    30ac:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    30b0:	010b2013 	tsteq	fp, r3, lsl r0
    30b4:	10000013 	andne	r0, r0, r3, lsl r0
    30b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    30bc:	0b3b0b3a 	bleq	ec5dac <__ccfg+0xea5e04>
    30c0:	00001349 	andeq	r1, r0, r9, asr #6
    30c4:	31012e11 	tstcc	r1, r1, lsl lr
    30c8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    30cc:	97184006 	ldrls	r4, [r8, -r6]
    30d0:	13011942 	movwne	r1, #6466	; 0x1942
    30d4:	05120000 	ldreq	r0, [r2, #-0]
    30d8:	02133100 	andseq	r3, r3, #0, 2
    30dc:	13000017 	movwne	r0, #23
    30e0:	0111010b 	tsteq	r1, fp, lsl #2
    30e4:	13010612 	movwne	r0, #5650	; 0x1612
    30e8:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
    30ec:	11010182 	smlabbne	r1, r2, r1, r0
    30f0:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    30f4:	8a150000 	bhi	5430fc <__ccfg+0x523154>
    30f8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    30fc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    3100:	89160000 	ldmdbhi	r6, {}	; <UNPREDICTABLE>
    3104:	11010182 	smlabbne	r1, r2, r1, r0
    3108:	18429301 	stmdane	r2, {r0, r8, r9, ip, pc}^
    310c:	00001301 	andeq	r1, r0, r1, lsl #6
    3110:	31003417 	tstcc	r0, r7, lsl r4
    3114:	00180213 	andseq	r0, r8, r3, lsl r2
    3118:	010b1800 	tsteq	fp, r0, lsl #16
    311c:	13011755 	movwne	r1, #5973	; 0x1755
    3120:	05190000 	ldreq	r0, [r9, #-0]
    3124:	1c133100 	ldfnes	f3, [r3], {-0}
    3128:	1a00000b 	bne	315c <__exidx_end+0x4dc>
    312c:	1755010b 	ldrbne	r0, [r5, -fp, lsl #2]
    3130:	341b0000 	ldrcc	r0, [fp], #-0
    3134:	00133100 	andseq	r3, r3, r0, lsl #2
    3138:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
    313c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3140:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    3144:	13491927 	movtne	r1, #39207	; 0x9927
    3148:	06120111 			; <UNDEFINED> instruction: 0x06120111
    314c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
    3150:	00130119 	andseq	r0, r3, r9, lsl r1
    3154:	00051d00 	andeq	r1, r5, r0, lsl #26
    3158:	0b3a0e03 	bleq	e8696c <__ccfg+0xe669c4>
    315c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    3160:	00001702 	andeq	r1, r0, r2, lsl #14
    3164:	0300341e 	movweq	r3, #1054	; 0x41e
    3168:	3b0b3a0e 	blcc	2d19a8 <__ccfg+0x2b1a00>
    316c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    3170:	1f000017 	svcne	0x00000017
    3174:	00018289 	andeq	r8, r1, r9, lsl #5
    3178:	13310111 	teqne	r1, #1073741828	; 0x40000004
    317c:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    3180:	03193f01 	tsteq	r9, #1, 30
    3184:	3b0b3a0e 	blcc	2d19c4 <__ccfg+0x2b1a1c>
    3188:	11192705 	tstne	r9, r5, lsl #14
    318c:	40061201 	andmi	r1, r6, r1, lsl #4
    3190:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    3194:	00001301 	andeq	r1, r0, r1, lsl #6
    3198:	01828921 	orreq	r8, r2, r1, lsr #18
    319c:	31011101 	tstcc	r1, r1, lsl #2
    31a0:	00130113 	andseq	r0, r3, r3, lsl r1
    31a4:	002e2200 	eoreq	r2, lr, r0, lsl #4
    31a8:	0b3a0e03 	bleq	e869bc <__ccfg+0xe66a14>
    31ac:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
    31b0:	0b201349 	bleq	807edc <__ccfg+0x7e7f34>
    31b4:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    31b8:	3a0e0300 	bcc	383dc0 <__ccfg+0x363e18>
    31bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    31c0:	000b2019 	andeq	r2, fp, r9, lsl r0
    31c4:	00342400 	eorseq	r2, r4, r0, lsl #8
    31c8:	0b3a0e03 	bleq	e869dc <__ccfg+0xe66a34>
    31cc:	1349053b 	movtne	r0, #38203	; 0x953b
    31d0:	00001702 	andeq	r1, r0, r2, lsl #14
    31d4:	31011d25 	tstcc	r1, r5, lsr #26
    31d8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    31dc:	590b5806 	stmdbpl	fp, {r1, r2, fp, ip, lr}
    31e0:	00130105 	andseq	r0, r3, r5, lsl #2
    31e4:	00052600 	andeq	r2, r5, r0, lsl #12
    31e8:	0b3a0e03 	bleq	e869fc <__ccfg+0xe66a54>
    31ec:	1349053b 	movtne	r0, #38203	; 0x953b
    31f0:	00001702 	andeq	r1, r0, r2, lsl #14
    31f4:	03003427 	movweq	r3, #1063	; 0x427
    31f8:	3b0b3a0e 	blcc	2d1a38 <__ccfg+0x2b1a90>
    31fc:	02134905 	andseq	r4, r3, #81920	; 0x14000
    3200:	28000018 	stmdacs	r0, {r3, r4}
    3204:	08030034 	stmdaeq	r3, {r2, r4, r5}
    3208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    320c:	17021349 	strne	r1, [r2, -r9, asr #6]
    3210:	34290000 	strtcc	r0, [r9], #-0
    3214:	3a0e0300 	bcc	383e1c <__ccfg+0x363e74>
    3218:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    321c:	00180213 	andseq	r0, r8, r3, lsl r2
    3220:	002e2a00 	eoreq	r2, lr, r0, lsl #20
    3224:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    3228:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
    322c:	13491927 	movtne	r1, #39207	; 0x9927
    3230:	0000193c 	andeq	r1, r0, ip, lsr r9
    3234:	3f002e2b 	svccc	0x00002e2b
    3238:	3a0e0319 	bcc	383ea4 <__ccfg+0x363efc>
    323c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    3240:	3c134919 			; <UNDEFINED> instruction: 0x3c134919
    3244:	2c000019 	stccs	0, cr0, [r0], {25}
    3248:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    324c:	0b3a0e03 	bleq	e86a60 <__ccfg+0xe66ab8>
    3250:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    3254:	0000193c 	andeq	r1, r0, ip, lsr r9
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	0000016c 	andeq	r0, r0, ip, ror #2
       4:	00000185 	andeq	r0, r0, r5, lsl #3
       8:	66500001 	ldrbvs	r0, [r0], -r1
       c:	69000002 	stmdbvs	r0, {r1}
      10:	01000002 	tsteq	r0, r2
      14:	00005000 	andeq	r5, r0, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	01100000 	tsteq	r0, r0
      20:	011a0000 	tsteq	sl, r0
      24:	00010000 	andeq	r0, r1, r0
      28:	00000050 	andeq	r0, r0, r0, asr r0
      2c:	00000000 	andeq	r0, r0, r0
      30:	00011a00 	andeq	r1, r1, r0, lsl #20
      34:	00016c00 	andeq	r6, r1, r0, lsl #24
      38:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
				j->Next = k;
      44:	0000011a 	andeq	r0, r0, sl, lsl r1
      48:	0000012c 	andeq	r0, r0, ip, lsr #2
}
      4c:	30530001 	subscc	r0, r3, r1
      50:	36000001 	strcc	r0, [r0], -r1
      54:	01000001 	tsteq	r0, r1
		release;
      58:	01525300 	cmpeq	r2, r0, lsl #6
      5c:	015e0000 	cmpeq	lr, r0
      60:	00010000 	andeq	r0, r1, r0
      64:	00016453 	andeq	r6, r1, r3, asr r4
      68:	00016c00 	andeq	r6, r1, r0, lsl #24
      6c:	53000100 	movwpl	r0, #256	; 0x100
	...
      80:	00500001 	subseq	r0, r0, r1
      84:	00000000 	andeq	r0, r0, r0
      88:	01000000 	mrseq	r0, (UNDEF: 0)
      8c:	00005000 	andeq	r5, r0, r0
	descriptors [fd] = s;
      90:	00000000 	andeq	r0, r0, r0
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00010000 	andeq	r0, r1, r0
      98:	00000050 	andeq	r0, r0, r0, asr r0
	if (s == NULL)
      9c:	00000000 	andeq	r0, r0, r0
		syserror (EMALLOC, "tcv05");
      a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
      b4:	00500001 	subseq	r0, r0, r1
      b8:	00000000 	andeq	r0, r0, r0
      bc:	0f000000 	svceq	0x00000000
      c0:	03007100 	movweq	r7, #256	; 0x100
      c4:	20000084 	andcs	r0, r0, r4, lsl #1
      c8:	74031e06 	strvc	r1, [r3], #-3590	; 0xfffff1fa
      cc:	22200000 	eorcs	r0, r0, #0
	...
      d8:	8403000e 	strhi	r0, [r3], #-14
      dc:	06200000 	strteq	r0, [r0], -r0
      e0:	74031e3c 	strvc	r1, [r3], #-3644	; 0xfffff1c4
      e4:	22200000 	eorcs	r0, r0, #0
	...
			curr += 0x1000;
      f8:	00500001 	subseq	r0, r0, r1
	...
			upto = EE_SIZE - 1;
     108:	01000000 	mrseq	r0, (UNDEF: 0)
     10c:	00005000 	andeq	r5, r0, r0
     110:	00000000 	andeq	r0, r0, r0
     114:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
     118:	09220000 	stmdbeq	r2!, {}	; <UNPREDICTABLE>
     11c:	00010000 	andeq	r0, r1, r0
     120:	00095256 	andeq	r5, r9, r6, asr r2
     124:	00095600 	andeq	r5, r9, r0, lsl #12
}
     128:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
     134:	00000806 	andeq	r0, r0, r6, lsl #16
     138:	0000080a 	andeq	r0, r0, sl, lsl #16
     13c:	20520001 	subscs	r0, r2, r1
    cycles[0].offTime = numbers[1];
     140:	34000008 	strcc	r0, [r0], #-8
    cycles[1].onTime = numbers[2];
     144:	01000008 	tsteq	r0, r8
    cycles[1].offTime = numbers[3];
     148:	00005200 	andeq	r5, r0, r0, lsl #4
     14c:	00000000 	andeq	r0, r0, r0
}
     150:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	08140000 	ldmdaeq	r4, {}	; <UNPREDICTABLE>
            number = number * 10;
     158:	00010000 	andeq	r0, r1, r0
     15c:	00000053 	andeq	r0, r0, r3, asr r0
            number += settingsInput[i] - 48;
     160:	00000000 	andeq	r0, r0, r0
     164:	0007c400 	andeq	ip, r7, r0, lsl #8
     168:	0007ce00 	andeq	ip, r7, r0, lsl #28
fsm root {
     16c:	53000100 	movwpl	r0, #256	; 0x100
	...
     178:	000007c4 	andeq	r0, r0, r4, asr #15
     17c:	000007ca 	andeq	r0, r0, sl, asr #15
     180:	00530001 	subseq	r0, r3, r1
        initCycles();
     184:	00000000 	andeq	r0, r0, r0
        ser_outf(Initial, "Enter your name: ");
     188:	5a000000 	bpl	190 <root+0x24>
     18c:	64000008 	strvs	r0, [r0], #-8
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	01000008 	tsteq	r0, r8
     194:	00005300 	andeq	r5, r0, r0, lsl #6
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	00000000 	andeq	r0, r0, r0
     19c:	084c0000 	stmdaeq	ip, {}^	; <UNPREDICTABLE>
     1a0:	08760000 	ldmdaeq	r6!, {}^	; <UNPREDICTABLE>
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	00010000 	andeq	r0, r1, r0
     1a8:	00000052 	andeq	r0, r0, r2, asr r0
        if (choice == 'A' || choice == 'a'){
     1ac:	00000000 	andeq	r0, r0, r0
     1b0:	00089a00 	andeq	r9, r8, r0, lsl #20
     1b4:	0008a400 	andeq	sl, r8, r0, lsl #8
            proceed Adjust_Intervals;
     1b8:	53000100 	movwpl	r0, #256	; 0x100
	...
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	0000088c 	andeq	r0, r0, ip, lsl #17
     1c8:	000008c2 	andeq	r0, r0, r2, asr #17
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	00500001 	subseq	r0, r0, r1
     1d0:	00000000 	andeq	r0, r0, r0
     1d4:	32000000 	andcc	r0, r0, #0
        processSettingsInput(settings);
     1d8:	3c000007 	stccc	0, cr0, [r0], {7}
        proceed Show_Menu;
     1dc:	01000007 	tsteq	r0, r7
     1e0:	00005300 	andeq	r5, r0, r0, lsl #6
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	00000000 	andeq	r0, r0, r0
     1e8:	07240000 	streq	r0, [r4, -r0]!
     1ec:	074e0000 	strbeq	r0, [lr, -r0]
     1f0:	00010000 	andeq	r0, r1, r0
     1f4:	00000052 	andeq	r0, r0, r2, asr r0
        proceed Show_Menu;
     1f8:	00000000 	andeq	r0, r0, r0
     1fc:	00078400 	andeq	r8, r7, r0, lsl #8
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	00078e00 	andeq	r8, r7, r0, lsl #28
     204:	53000100 	movwpl	r0, #256	; 0x100
	...
        ser_inf(Await_Stop, "%c", ch);
     210:	00000776 	andeq	r0, r0, r6, ror r7
     214:	0000079e 	muleq	r0, lr, r7
        proceed Monitor;
     218:	00520001 	subseq	r0, r2, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     21c:	00000000 	andeq	r0, r0, r0
     220:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
        leds(1, 0);
     224:	9c000002 	stcls	0, cr0, [r0], {2}
     228:	01000002 	tsteq	r0, r2
     22c:	029c5000 	addseq	r5, ip, #0
     230:	029f0000 	addseq	r0, pc, #0
     234:	00010000 	andeq	r0, r1, r0
        leds(0, 0);
     238:	00000051 	andeq	r0, r0, r1, asr r0
     23c:	00000000 	andeq	r0, r0, r0
     240:	0005e400 	andeq	lr, r5, r0, lsl #8
     244:	0005e600 	andeq	lr, r5, r0, lsl #12
     248:	50000100 	andpl	r0, r0, r0, lsl #2
	...
            proceed Stop;
     254:	000005e4 	andeq	r0, r0, r4, ror #11
        } else if (choice == 'V' || choice == 'v') {
     258:	000005fa 	strdeq	r0, [r0], -sl
            proceed View_Settings;
     25c:	fa510001 	blx	1440268 <__ccfg+0x14202c0>
        } else if (choice == 'M' || choice == 'm') {
     260:	fe000005 	cdp2	0, 0, cr0, cr0, cr5, {0}
            proceed Monitor;
     264:	01000005 	tsteq	r0, r5
     268:	06045500 	streq	r5, [r4], -r0, lsl #10
     26c:	061a0000 	ldreq	r0, [sl], -r0
     270:	00010000 	andeq	r0, r1, r0
     274:	00061a55 	andeq	r1, r6, r5, asr sl
     278:	00062800 	andeq	r2, r6, r0, lsl #16
     27c:	51000100 	mrspl	r0, (UNDEF: 16)
     280:	00000628 	andeq	r0, r0, r8, lsr #12
     284:	00000656 	andeq	r0, r0, r6, asr r6
     288:	5c550001 	mrrcpl	0, 0, r0, r5, cr1
     28c:	84000006 	strhi	r0, [r0], #-6
     290:	01000006 	tsteq	r0, r6
     294:	06845500 	streq	r5, [r4], r0, lsl #10
static void devinit_uart (int devnum) {
     298:	06920000 	ldreq	r0, [r2], r0
	adddevfunc (ioreq_uart_a, devnum);
     29c:	00010000 	andeq	r0, r1, r0
     2a0:	00069251 	andeq	r9, r6, r1, asr r2
void udelay (volatile word n) {
     2a4:	00069c00 	andeq	r9, r6, r0, lsl #24
     2a8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	while (n) {
     2ac:	0000069c 	muleq	r0, ip, r6
     2b0:	000006a7 	andeq	r0, r0, r7, lsr #13
}
     2b4:	a7510001 	ldrbge	r0, [r1, -r1]
	while (n--);
     2b8:	aa000006 	bge	2d8 <mdelay+0x8>
     2bc:	01000006 	tsteq	r0, r6
     2c0:	06aa5500 	strteq	r5, [sl], r0, lsl #10
		n--;
     2c4:	06b00000 	ldrteq	r0, [r0], r0
     2c8:	00010000 	andeq	r0, r1, r0
     2cc:	0006b051 	andeq	fp, r6, r1, asr r0
void mdelay (volatile word n) {
     2d0:	0006c200 	andeq	ip, r6, r0, lsl #4
     2d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	while (n) {
     2d8:	000006c2 	andeq	r0, r0, r2, asr #13
     2dc:	000006d4 	ldrdeq	r0, [r0], -r4
}
     2e0:	d4510001 	ldrble	r0, [r1], #-1
		udelay (999);
     2e4:	f4000006 	vst4.8	{d0-d3}, [r0], r6
     2e8:	01000006 	tsteq	r0, r6
		n--;
     2ec:	00005500 	andeq	r5, r0, r0, lsl #10
     2f0:	00000000 	andeq	r0, r0, r0
     2f4:	05e40000 	strbeq	r0, [r4, #0]!
     2f8:	05fa0000 	ldrbeq	r0, [sl, #0]!
void __pi_ondomain (lword d) {
     2fc:	00010000 	andeq	r0, r1, r0
     300:	0005fa52 	andeq	pc, r5, r2, asr sl	; <UNPREDICTABLE>
		if (__pi_systat.effpdm > 1)
     304:	00060000 	andeq	r0, r6, r0
     308:	56000100 	strpl	r0, [r0], -r0, lsl #2
			__pi_systat.effpdm = 1;
     30c:	00000604 	andeq	r0, r0, r4, lsl #12
	PRCMPowerDomainOn (d);
     310:	00000614 	andeq	r0, r0, r4, lsl r6
     314:	1a560001 	bne	1580320 <__ccfg+0x1560378>
     318:	28000006 	stmdacs	r0, {r1, r2}
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	01000006 	tsteq	r0, r6
     320:	06285200 	strteq	r5, [r8], -r0, lsl #4
     324:	06580000 	ldrbeq	r0, [r8], -r0
	__pi_systat.ondmns |= d;
     328:	00010000 	andeq	r0, r1, r0
     32c:	00065c56 	andeq	r5, r6, r6, asr ip
}
     330:	00068400 	andeq	r8, r6, r0, lsl #8
     334:	56000100 	strpl	r0, [r0], -r0, lsl #2
void __pi_syserror (word ec, const char *m) {
     338:	00000684 	andeq	r0, r0, r4, lsl #13
	diag ("SYSERR: %x, %s", ec, m);
     33c:	00000692 	muleq	r0, r2, r6
     340:	92520001 	subsls	r0, r2, #1
  __ASM volatile ("cpsid i" : : : "memory");
     344:	9c000006 	stcls	0, cr0, [r0], {6}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	01000006 	tsteq	r0, r6
     34c:	069c5600 	ldreq	r5, [ip], r0, lsl #12
     350:	06a70000 	strteq	r0, [r7], r0
		all_leds_blink;
     354:	00010000 	andeq	r0, r1, r0
     358:	0006aa52 	andeq	sl, r6, r2, asr sl
     35c:	0006b500 	andeq	fp, r6, r0, lsl #10
     360:	52000100 	andpl	r0, r0, #0, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	000006b5 			; <UNDEFINED> instruction: 0x000006b5
     368:	000006c2 	andeq	r0, r0, r2, asr #13
     36c:	c2540001 	subsgt	r0, r4, #1
     370:	f4000006 	vst4.8	{d0-d3}, [r0], r6
     374:	01000006 	tsteq	r0, r6
     378:	00005200 	andeq	r5, r0, r0, lsl #4
	while (1) {
     37c:	00000000 	andeq	r0, r0, r0
     380:	05580000 	ldrbeq	r0, [r8, #-0]
     384:	05660000 	strbeq	r0, [r6, #-0]!
     388:	00010000 	andeq	r0, r1, r0
void tci_run_delay_timer () {
     38c:	00000050 	andeq	r0, r0, r0, asr r0
	setdel = __pi_mintk - __pi_old;
     390:	00000000 	andeq	r0, r0, r0
     394:	00055800 	andeq	r5, r5, r0, lsl #16
     398:	00056700 	andeq	r6, r5, r0, lsl #14
     39c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a8:	00000508 	andeq	r0, r0, r8, lsl #10
     3ac:	0000051f 	andeq	r0, r0, pc, lsl r5
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	42500001 	subsmi	r0, r0, #1
	sti_tim;
     3b4:	58000005 	stmdapl	r0, {r0, r2}
}
     3b8:	01000005 	tsteq	r0, r5
     3bc:	00005000 	andeq	r5, r0, r0
     3c0:	00000000 	andeq	r0, r0, r0
     3c4:	03fe0000 	mvnseq	r0, #0
     3c8:	040e0000 	streq	r0, [lr], #-0
	cli_aux;
     3cc:	00010000 	andeq	r0, r1, r0
     3d0:	00040e52 	andeq	r0, r4, r2, asr lr
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	00041600 	andeq	r1, r4, r0, lsl #12
     3d8:	0c000500 	cfstr32eq	mvfx0, [r0], {-0}
     3dc:	40092004 	andmi	r2, r9, r4
     3e0:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
	sti_aux;
     3e4:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
}
     3e8:	040c0005 	streq	r0, [ip], #-5
     3ec:	b4400920 	strblt	r0, [r0], #-2336	; 0xfffff6e0
     3f0:	b6000004 	strlt	r0, [r0], -r4
void AONRTCIntHandler () {
     3f4:	01000004 	tsteq	r0, r4
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f8:	04b65200 	ldrteq	r5, [r6], #512	; 0x200
     3fc:	04b80000 	ldrteq	r0, [r8], #0
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	00050000 	andeq	r0, r5, r0
		if (__pi_utims [0] == 0)
     404:	0920040c 	stmdbeq	r0!, {r2, r3, sl}
     408:	00000040 	andeq	r0, r0, r0, asr #32
		if (*(__pi_utims [0])) {
     40c:	00000000 	andeq	r0, r0, r0
     410:	00041800 	andeq	r1, r4, r0, lsl #16
			(*(__pi_utims [0]))--;
     414:	00042200 	andeq	r2, r4, r0, lsl #4
		if (__pi_utims [1] == 0)
     418:	52000100 	andpl	r0, r0, #0, 2
		if (*(__pi_utims [1])) {
     41c:	00000426 	andeq	r0, r0, r6, lsr #8
			aux_timer_inactive = 0;
     420:	00000430 	andeq	r0, r0, r0, lsr r4
			(*(__pi_utims [1]))--;
     424:	34520001 	ldrbcc	r0, [r2], #-1
		if (__pi_utims [2] == 0)
     428:	3e000004 	cdpcc	0, 0, cr0, cr0, cr4, {0}
		if (*(__pi_utims [2])) {
     42c:	01000004 	tsteq	r0, r4
			(*(__pi_utims [2]))--;
     430:	04425200 	strbeq	r5, [r2], #-512	; 0xfffffe00
		if (__pi_utims [3] != 0) {
     434:	044e0000 	strbeq	r0, [lr], #-0
			if (*(__pi_utims [3])) {
     438:	00010000 	andeq	r0, r1, r0
				aux_timer_inactive = 0;
     43c:	0004da52 	andeq	sp, r4, r2, asr sl
				(*(__pi_utims [3]))--;
     440:	0004de00 	andeq	sp, r4, r0, lsl #28
	if (__pi_systat.ledsts) {
     444:	52000100 	andpl	r0, r0, #0, 2
	...
		if (__pi_systat.ledblc++ == 0) {
     450:	0000039e 	muleq	r0, lr, r3
			if (__pi_systat.ledblk) {
     454:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
     458:	00540001 	subseq	r0, r4, r1
     45c:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     464:	40000003 	andmi	r0, r0, r3
				if (__pi_systat.ledsts & 0x2)
     468:	01000003 	tsteq	r0, r3
     46c:	00005000 	andeq	r5, r0, r0
     470:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
     474:	03380000 	teqeq	r8, #0
				__pi_systat.ledblk = 0;
     478:	033e0000 	teqeq	lr, #0
     47c:	00010000 	andeq	r0, r1, r0
			if (__pi_systat.fstblk)
     480:	00033e51 	andeq	r3, r3, r1, asr lr
     484:	00034300 	andeq	r4, r3, r0, lsl #6
				__pi_systat.ledblc = 200;
     488:	52000100 	andpl	r0, r0, #0, 2
	...
		setdel = 0;
     49c:	00500001 	subseq	r0, r0, r1
	...
		RISE_N_SHINE;
     4ac:	01000000 	mrseq	r0, (UNDEF: 0)
		aux_timer_inactive = 1;
     4b0:	00005100 	andeq	r5, r0, r0, lsl #2
     4b4:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x1)
     4b8:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	00000051 	andeq	r0, r0, r1, asr r0
	...
     4cc:	52000100 	andpl	r0, r0, #0, 2
	...
				__pi_systat.ledblk = 1;
     4d8:	00540001 	subseq	r0, r4, r1
	...
			cli_aux;
     4e8:	01000000 	mrseq	r0, (UNDEF: 0)
     4ec:	00005000 	andeq	r5, r0, r0
     4f0:	00000000 	andeq	r0, r0, r0
     4f4:	00010000 	andeq	r0, r1, r0
     4f8:	00000054 	andeq	r0, r0, r4, asr r0
     4fc:	00000000 	andeq	r0, r0, r0
     500:	0002fc00 	andeq	pc, r2, r0, lsl #24
     504:	00031400 	andeq	r1, r3, r0, lsl #8
word tci_update_delay_ticks (Boolean force) {
     508:	50000100 	andpl	r0, r0, r0, lsl #2
	cli_tim;
     50c:	00000314 	andeq	r0, r0, r4, lsl r3
     510:	0000032c 	andeq	r0, r0, ip, lsr #6
	if (setdel) {
     514:	00540001 	subseq	r0, r4, r1
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	00000000 	andeq	r0, r0, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	d0000000 	andle	r0, r0, r0
     520:	d6000002 	strle	r0, [r0], -r2
     524:	01000002 	tsteq	r0, r2
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	00005000 	andeq	r5, r0, r0
	...
     538:	00010000 	andeq	r0, r1, r0
     53c:	00000050 	andeq	r0, r0, r0, asr r0
}
     540:	00000000 	andeq	r0, r0, r0
		sti_tim;
     544:	0012b400 	andseq	fp, r2, r0, lsl #8
		return YES;
     548:	0012d200 	andseq	sp, r2, r0, lsl #4
     54c:	91000200 	mrsls	r0, R8_usr
     550:	0012d270 	andseq	sp, r2, r0, ror r2
     554:	0012fa00 	andseq	pc, r2, r0, lsl #20
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	UARTDisable (UART0_BASE);
     55c:	000012fe 	strdeq	r1, [r0], -lr
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	00001306 	andeq	r1, r0, r6, lsl #6
	UARTDisable (UART0_BASE);
     564:	14540001 	ldrbne	r0, [r4], #-1
	UARTConfigSetExpClk (UART0_BASE,
     568:	5e000013 	mcrpl	0, 0, r0, cr0, cr3, {0}
     56c:	01000013 	tsteq	r0, r3, lsl r0
     570:	13625600 	cmnne	r2, #0, 12
     574:	13da0000 	bicsne	r0, sl, #0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	00010000 	andeq	r0, r1, r0
     57c:	00000056 	andeq	r0, r0, r6, asr r0
     580:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	00131e00 	andseq	r1, r3, r0, lsl #28
     588:	00135c00 	andseq	r5, r3, r0, lsl #24
     58c:	51000100 	mrspl	r0, (UNDEF: 16)
	urates [0] = rate;
     590:	00001362 	andeq	r1, r0, r2, ror #6
}
     594:	00001374 	andeq	r1, r0, r4, ror r3
     598:	80510001 	subshi	r0, r1, r1
     59c:	8a000013 	bhi	5f0 <ioreq_uart_a+0xc>
     5a0:	01000013 	tsteq	r0, r3, lsl r0
     5a4:	139c5100 	orrsne	r5, ip, #0, 2
     5a8:	13a00000 	movne	r0, #0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	00010000 	andeq	r0, r1, r0
     5b0:	0013c051 	andseq	ip, r3, r1, asr r0
     5b4:	0013c400 	andseq	ip, r3, r0, lsl #8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c4:	0000131e 	andeq	r1, r0, lr, lsl r3
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	0000135c 	andeq	r1, r0, ip, asr r3
     5cc:	62550001 	subsvs	r0, r5, #1
     5d0:	8a000013 	bhi	624 <ioreq_uart_a+0x40>
     5d4:	01000013 	tsteq	r0, r3, lsl r0
     5d8:	139c5500 	orrsne	r5, ip, #0, 10
     5dc:	13a00000 	movne	r0, #0
     5e0:	00010000 	andeq	r0, r1, r0
	switch (operation) {
     5e4:	0013c055 	andseq	ip, r3, r5, asr r0
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e8:	0013da00 	andseq	sp, r3, r0, lsl #20
     5ec:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     5f8:	00001390 	muleq	r0, r0, r3
				*buf++ = uart_a_read;
     5fc:	0000139c 	muleq	r0, ip, r3
     600:	a0550001 	subsge	r0, r5, r1
			while (len && uart_a_char_available) {
     604:	ba000013 	blt	658 <ioreq_uart_a+0x74>
     608:	01000013 	tsteq	r0, r3, lsl r0
     60c:	13be5500 			; <UNDEFINED> instruction: 0x13be5500
			if (len != operation) {
     610:	13c00000 	bicne	r0, r0, #0
}
     614:	00010000 	andeq	r0, r1, r0
     618:	00000055 	andeq	r0, r0, r5, asr r0
			uart_a_disable_int;
     61c:	00000000 	andeq	r0, r0, r0
			if (uart_a_char_available) {
     620:	00134400 	andseq	r4, r3, r0, lsl #8
				*buf++ = uart_a_read;
     624:	00135c00 	andseq	r5, r3, r0, lsl #24
			uart_a_disable_int;
     628:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			if (uart_a_char_available) {
     634:	0000138a 	andeq	r1, r0, sl, lsl #7
				uart_a_enable_int;
     638:	0000139c 	muleq	r0, ip, r3
     63c:	a0540001 	subsge	r0, r4, r1
				goto Redo_rx;
     640:	b4000013 	strlt	r0, [r0], #-19	; 0xffffffed
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     644:	01000013 	tsteq	r0, r3, lsl r0
     648:	13b45400 			; <UNDEFINED> instruction: 0x13b45400
			return -2;
     64c:	13c00000 	bicne	r0, r0, #0
     650:	00010000 	andeq	r0, r1, r0
				uart_a_write (*buf);
     654:	00000053 	andeq	r0, r0, r3, asr r0
     658:	00000000 	andeq	r0, r0, r0
			while (len && uart_a_room_in_tx) {
     65c:	0013cc00 	andseq	ip, r3, r0, lsl #24
     660:	0013da00 	andseq	sp, r3, r0, lsl #20
     664:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			uart_a_disable_int;
     670:	00000e04 	andeq	r0, r0, r4, lsl #28
			if (uart_a_room_in_tx) {
     674:	00000e10 	andeq	r0, r0, r0, lsl lr
     678:	00500001 	subseq	r0, r0, r1
	...
     688:	01000000 	mrseq	r0, (UNDEF: 0)
				uart_a_write (*buf);
     68c:	00005000 	andeq	r5, r0, r0
     690:	00000000 	andeq	r0, r0, r0
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	00010000 	andeq	r0, r1, r0
     698:	00000050 	andeq	r0, r0, r0, asr r0
	...
			return 0;
     6a8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				if (__pi_uart_setrate (*((word*)buf),
     6b4:	00510001 	subseq	r0, r1, r1
	...
			if (len == UART_CNTRL_GETRATE) {
     6c4:	01000000 	mrseq	r0, (UNDEF: 0)
				return 1;
     6c8:	00005200 	andeq	r5, r0, r0, lsl #4
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     6d0:	00010000 	andeq	r0, r1, r0
     6d4:	00000052 	andeq	r0, r0, r2, asr r0
	...
     6e4:	53000100 	movwpl	r0, #256	; 0x100
	...
     6f0:	00530001 	subseq	r0, r3, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	00000000 	andeq	r0, r0, r0
void UART0IntHandler () {
     6f8:	01000000 	mrseq	r0, (UNDEF: 0)
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     70c:	00010000 	andeq	r0, r1, r0
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	00000050 	andeq	r0, r0, r0, asr r0
     714:	00000000 	andeq	r0, r0, r0
		RISE_N_SHINE;
     718:	00129c00 	andseq	r9, r2, r0, lsl #24
     71c:	0012a400 	andseq	sl, r2, r0, lsl #8
		i_trigger (devevent (UART_A, READ));
     720:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     72c:	000011c0 	andeq	r1, r0, r0, asr #3
     730:	000011c6 	andeq	r1, r0, r6, asr #3
     734:	00500001 	subseq	r0, r0, r1
     738:	00000000 	andeq	r0, r0, r0
     73c:	d6000000 	strle	r0, [r0], -r0
     740:	02000011 	andeq	r0, r0, #17
     744:	01000012 	tsteq	r0, r2, lsl r0
     748:	12025400 	andne	r5, r2, #0, 8
     74c:	12080000 	andne	r0, r8, #0
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	00010000 	andeq	r0, r1, r0
     754:	00120852 	andseq	r0, r2, r2, asr r8
     758:	00125000 	andseq	r5, r2, r0
		i_trigger (devevent (UART_A, WRITE));
     75c:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	00001250 	andeq	r1, r0, r0, asr r2
     764:	00001268 	andeq	r1, r0, r8, ror #4
		RISE_N_SHINE;
     768:	00500001 	subseq	r0, r0, r1
     76c:	00000000 	andeq	r0, r0, r0
     770:	02000000 	andeq	r0, r0, #0
		i_trigger (devevent (UART_A, WRITE));
     774:	06000012 			; <UNDEFINED> instruction: 0x06000012
     778:	01000012 	tsteq	r0, r2, lsl r0
     77c:	12065400 	andne	r5, r6, #0, 8
     780:	12080000 	andne	r0, r8, #0
     784:	00010000 	andeq	r0, r1, r0
     788:	00121e53 	andseq	r1, r2, r3, asr lr
     78c:	00122700 	andseq	r2, r2, r0, lsl #14
     790:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     79c:	00001210 	andeq	r1, r0, r0, lsl r2
}
     7a0:	00001220 	andeq	r1, r0, r0, lsr #4
     7a4:	00530001 	subseq	r0, r3, r1
     7a8:	00000000 	andeq	r0, r0, r0
     7ac:	d6000000 	strle	r0, [r0], -r0
     7b0:	f4000011 	vst4.8	{d0-d3}, [r0 :64], r1
void __buttons_setirq (int val) {
     7b4:	01000011 	tsteq	r0, r1, lsl r0
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	11fa5000 	mvnsne	r5, r0
     7bc:	121a0000 	andsne	r0, sl, #0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	00010000 	andeq	r0, r1, r0
     7c4:	00121a50 	andseq	r1, r2, r0, asr sl
     7c8:	00122400 	andseq	r2, r2, r0, lsl #8
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d0:	0000007c 	andeq	r0, r0, ip, ror r0
     7d4:	00000000 	andeq	r0, r0, r0
     7d8:	000d8400 	andeq	r8, sp, r0, lsl #8
     7dc:	000db200 	andeq	fp, sp, r0, lsl #4
     7e0:	50000100 	andpl	r0, r0, r0, lsl #2
     7e4:	00000dc0 	andeq	r0, r0, r0, asr #27
}
     7e8:	00000e04 	andeq	r0, r0, r4, lsl #28
     7ec:	00500001 	subseq	r0, r0, r1
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	8c000000 	stchi	0, cr0, [r0], {-0}
void __pinlist_setirq (int val) {
     7f8:	9800000d 	stmdals	r0, {r0, r2, r3}
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	0100000d 	tsteq	r0, sp
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	0d985300 	ldceq	3, cr5, [r8]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	0d9a0000 	ldceq	0, cr0, [sl]
	for (i = 0; i < N_PINLIST; i++) {
     808:	00020000 	andeq	r0, r2, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80c:	0d9e0070 	ldceq	0, cr0, [lr, #448]	; 0x1c0
     810:	0df60000 	ldcleq	0, cr0, [r6]
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     814:	00010000 	andeq	r0, r1, r0
     818:	000df653 	andeq	pc, sp, r3, asr r6	; <UNPREDICTABLE>
     81c:	000dfa00 	andeq	pc, sp, r0, lsl #20
	for (i = 0; i < N_PINLIST; i++) {
     820:	73000200 	movwvc	r0, #512	; 0x200
}
     824:	000dfa00 	andeq	pc, sp, r0, lsl #20
     828:	000e0400 	andeq	r0, lr, r0, lsl #8
     82c:	53000100 	movwpl	r0, #256	; 0x100
	...
if (buttons_int) {
     838:	00000d8c 	andeq	r0, r0, ip, lsl #27
     83c:	00000d8e 	andeq	r0, r0, lr, lsl #27
	buttons_disable ();
     840:	9e520001 	cdpls	0, 5, cr0, cr2, cr1, {0}
     844:	de00000d 	cdple	0, 0, cr0, cr0, cr13, {0}
	i_trigger ((aword)&__button_list);
     848:	0100000d 	tsteq	r0, sp
     84c:	0df65200 	lfmeq	f5, 2, [r6]
     850:	0dfa0000 	ldcleq	0, cr0, [sl]
     854:	00010000 	andeq	r0, r1, r0
     858:	000dfa53 	andeq	pc, sp, r3, asr sl	; <UNPREDICTABLE>
     85c:	000e0400 	andeq	r0, lr, r0, lsl #8
     860:	52000100 	andpl	r0, r0, #0, 2
	...
     86c:	000010e8 	andeq	r1, r0, r8, ror #1
     870:	000010f0 	strdeq	r1, [r0], -r0
	RISE_N_SHINE;
     874:	f4510001 			; <UNDEFINED> instruction: 0xf4510001
     878:	f6000010 			; <UNDEFINED> instruction: 0xf6000010
     87c:	01000010 	tsteq	r0, r0, lsl r0
if (pin_sensor_int) {
     880:	00005100 	andeq	r5, r0, r0, lsl #2
     884:	00000000 	andeq	r0, r0, r0
	i_trigger ((aword)(&__input_pins));
     888:	103c0000 	eorsne	r0, ip, r0
     88c:	10580000 	subsne	r0, r8, r0
     890:	00010000 	andeq	r0, r1, r0
     894:	00105e50 	andseq	r5, r0, r0, asr lr
     898:	00106a00 	andseq	r6, r0, r0, lsl #20
     89c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8a8:	0000103c 	andeq	r1, r0, ip, lsr r0
     8ac:	0000105a 	andeq	r1, r0, sl, asr r0
     8b0:	5e510001 	cdppl	0, 5, cr0, cr1, cr1, {0}
	__pinsen_disable_and_clear;
     8b4:	68000010 	stmdavs	r0, {r4}
	RISE_N_SHINE;
     8b8:	01000010 	tsteq	r0, r0, lsl r0
     8bc:	00005100 	andeq	r5, r0, r0, lsl #2
     8c0:	00000000 	andeq	r0, r0, r0
}
     8c4:	103c0000 	eorsne	r0, ip, r0
     8c8:	105d0000 	subsne	r0, sp, r0
     8cc:	00010000 	andeq	r0, r1, r0
     8d0:	00105e52 	andseq	r5, r0, r2, asr lr
     8d4:	00106600 	andseq	r6, r0, r0, lsl #12
void system_init () {
     8d8:	52000100 	andpl	r0, r0, #0, 2
	...
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	0000103c 	andeq	r1, r0, ip, lsr r0
     8e8:	00001054 	andeq	r1, r0, r4, asr r0
     8ec:	54530001 	ldrbpl	r0, [r3], #-1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	d8000010 	stmdale	r0, {r4}
     8f4:	01000010 	tsteq	r0, r0, lsl r0
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	00005500 	andeq	r5, r0, r0, lsl #10
     8fc:	00000000 	andeq	r0, r0, r0
     900:	103c0000 	eorsne	r0, ip, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	10bc0000 	adcsne	r0, ip, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	00020000 	andeq	r0, r2, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	10bc0091 	umlalsne	r0, ip, r1, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	10d80000 	sbcsne	r0, r8, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	00020000 	andeq	r0, r2, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	00000091 	muleq	r0, r1, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	106c0000 	rsbne	r0, ip, r0
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	10820000 	addne	r0, r2, r0
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     928:	00010000 	andeq	r0, r1, r0
     92c:	00108a50 	andseq	r8, r0, r0, asr sl
     930:	00109c00 	andseq	r9, r0, r0, lsl #24
     934:	50000100 	andpl	r0, r0, r0, lsl #2
		if (port_confs [i] & 0x80)
     938:	000010ac 	andeq	r1, r0, ip, lsr #1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	000010b4 	strheq	r1, [r0], -r4
     940:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
		if (port_confs [i] & 0x40)
     944:	c4000010 	strgt	r0, [r0], #-16
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	01000010 	tsteq	r0, r0, lsl r0
     94c:	00005000 	andeq	r5, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     950:	00000000 	andeq	r0, r0, r0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     954:	10180000 	andsne	r0, r8, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     958:	101e0000 	andsne	r0, lr, r0
	all_leds_blink;
     95c:	00010000 	andeq	r0, r1, r0
     960:	00102450 	andseq	r2, r0, r0, asr r4
     964:	00102c00 	andseq	r2, r0, r0, lsl #24
     968:	50000100 	andpl	r0, r0, r0, lsl #2
     96c:	00001030 	andeq	r1, r0, r0, lsr r0
     970:	0000103c 	andeq	r1, r0, ip, lsr r0
     974:	00500001 	subseq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	00000000 	andeq	r0, r0, r0
     97c:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     980:	20000010 	andcs	r0, r0, r0, lsl r0
     984:	01000010 	tsteq	r0, r0, lsl r0
     988:	10245100 	eorne	r5, r4, r0, lsl #2
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	102e0000 	eorne	r0, lr, r0
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	00010000 	andeq	r0, r1, r0
     994:	00103051 	andseq	r3, r0, r1, asr r0
	IntEnable (INT_AON_RTC_COMB);
     998:	00103c00 	andseq	r3, r0, r0, lsl #24
     99c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	00500001 	subseq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	01000000 	mrseq	r0, (UNDEF: 0)
     9bc:	00005000 	andeq	r5, r0, r0
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9cc:	00010000 	andeq	r0, r1, r0
     9d0:	00000052 	andeq	r0, r0, r2, asr r0
	urates [0] = UART_RATE / 100;
     9d4:	00000000 	andeq	r0, r0, r0
     9d8:	00100200 	andseq	r0, r0, r0, lsl #4
	reinit_uart ();
     9dc:	00100400 	andseq	r0, r0, r0, lsl #8
	EXTRA_INITIALIZERS;
     9e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9ec:	00001002 	andeq	r1, r0, r2
     9f0:	0000100c 	andeq	r1, r0, ip
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	10510001 	subsne	r0, r1, r1
     9f8:	16000010 			; <UNDEFINED> instruction: 0x16000010
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	01000010 	tsteq	r0, r0, lsl r0
     a00:	00005100 	andeq	r5, r0, r0, lsl #2
			devinit [i] . init (devinit [i] . param);
     a04:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	10020000 	andne	r0, r2, r0
     a0c:	10060000 	andne	r0, r6, r0
     a10:	00010000 	andeq	r0, r1, r0
	IntEnable (INT_UART0_COMB);
     a14:	00000052 	andeq	r0, r0, r2, asr r0
	...
		diag ("");
     a24:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		diag ("Leftover RAM: %d bytes",
     a38:	00510001 	subseq	r0, r1, r1
	...
     a48:	01000000 	mrseq	r0, (UNDEF: 0)
     a4c:	00005000 	andeq	r5, r0, r0
     a50:	00000000 	andeq	r0, r0, r0
     a54:	00010000 	andeq	r0, r1, r0
     a58:	00000050 	andeq	r0, r0, r0, asr r0
	...
     a68:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     a7c:	00500001 	subseq	r0, r0, r1
     a80:	00000000 	andeq	r0, r0, r0
     a84:	01000000 	mrseq	r0, (UNDEF: 0)
     a88:	00005000 	andeq	r5, r0, r0
	...
__attribute__ ((noreturn)) void __pi_release () {
     a98:	00010000 	andeq	r0, r1, r0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	00000051 	andeq	r0, r0, r1, asr r0
	...
	update_n_wake (MAX_WORD, NO);
     aac:	52000100 	andpl	r0, r0, #0, 2
	...
	for_all_tasks (__pi_curr) {
     ac0:	00500001 	subseq	r0, r0, r1
	...
	__SLEEP;
     ad0:	01000000 	mrseq	r0, (UNDEF: 0)
     ad4:	00005100 	andeq	r5, r0, r0, lsl #2
	system_event_count ++;
     ad8:	00000000 	andeq	r0, r0, r0
     adc:	00010000 	andeq	r0, r1, r0
	switch (__pi_systat.effpdm) {
     ae0:	00000051 	andeq	r0, r0, r1, asr r0
     ae4:	00000000 	andeq	r0, r0, r0
     ae8:	000ff400 	andeq	pc, pc, r0, lsl #8
     aec:	000ff800 	andeq	pc, pc, r0, lsl #16
			__WFI ();
     af0:	50000100 	andpl	r0, r0, r0, lsl #2
     af4:	00000ff8 	strdeq	r0, [r0], -r8
     af8:	00001002 	andeq	r1, r0, r2
	check_stack_overflow;
     afc:	00530001 	subseq	r0, r3, r1
     b00:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     b08:	0200000f 	andeq	r0, r0, #15
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	01000010 	tsteq	r0, r0, lsl r0
			goto Redo;
     b10:	00005000 	andeq	r5, r0, r0
	...
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b20:	00010000 	andeq	r0, r1, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b24:	00000050 	andeq	r0, r0, r0, asr r0
     b28:	00000000 	andeq	r0, r0, r0
     b2c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			__WFI ();
     b40:	00520001 	subseq	r0, r2, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	00000000 	andeq	r0, r0, r0
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
}
     b4c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b5c:	00010000 	andeq	r0, r1, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	00000050 	andeq	r0, r0, r0, asr r0
     b64:	00000000 	andeq	r0, r0, r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b68:	000fd000 	andeq	sp, pc, r0
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6c:	000fd800 	andeq	sp, pc, r0, lsl #16
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	50000100 	andpl	r0, r0, r0, lsl #2
     b74:	00000fda 	ldrdeq	r0, [r0], -sl
     b78:	00000fde 	ldrdeq	r0, [r0], -lr
     b7c:	de500001 	cdple	0, 5, cr0, cr0, cr1, {0}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	f400000f 	vst4.8	{d0-d3}, [r0]
     b84:	0100000f 	tsteq	r0, pc
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	00005300 	andeq	r5, r0, r0, lsl #6
	...
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b98:	00010000 	andeq	r0, r1, r0
     b9c:	00000050 	andeq	r0, r0, r0, asr r0
			SysCtrlSetRechargeBeforePowerDown
     ba0:	00000000 	andeq	r0, r0, r0
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb8:	00500001 	subseq	r0, r0, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	01000000 	mrseq	r0, (UNDEF: 0)
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	00005000 	andeq	r5, r0, r0
	...
     bd4:	00010000 	andeq	r0, r1, r0
			while (!(AONWUCPowerStatusGet () &
     bd8:	00000050 	andeq	r0, r0, r0, asr r0
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bf4:	00560001 	subseq	r0, r6, r1
	...
     c04:	01000000 	mrseq	r0, (UNDEF: 0)
			SysCtrlAdjustRechargeAfterPowerDown ();
     c08:	00005000 	andeq	r5, r0, r0
			reinit_uart ();
     c0c:	00000000 	andeq	r0, r0, r0
     c10:	00010000 	andeq	r0, r1, r0
     c14:	00000050 	andeq	r0, r0, r0, asr r0
}
     c18:	00000000 	andeq	r0, r0, r0
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1c:	58000100 	stmdapl	r0, {r8}
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c28:	00500001 	subseq	r0, r0, r1
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c38:	01000000 	mrseq	r0, (UNDEF: 0)
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	00005400 	andeq	r5, r0, r0, lsl #8
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	00000000 	andeq	r0, r0, r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	00010000 	andeq	r0, r1, r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	00000054 	andeq	r0, r0, r4, asr r0
	...
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	58000100 	stmdapl	r0, {r8}
	...
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c64:	00580001 	subseq	r0, r8, r1
			PRCMPowerDomainOff (
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	70000000 	andvc	r0, r0, r0
	__SLEEP;
     c70:	78000011 	stmdavc	r0, {r0, r4}
     c74:	01000011 	tsteq	r0, r1, lsl r0
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	11785000 	cmnne	r8, r0
	goto Redo;
     c7c:	11820000 	orrne	r0, r2, r0
     c80:	00010000 	andeq	r0, r1, r0
     c84:	00118850 	andseq	r8, r1, r0, asr r8
     c88:	00119400 	andseq	r9, r1, r0, lsl #8
     c8c:	50000100 	andpl	r0, r0, r0, lsl #2
     c90:	000011a8 	andeq	r1, r0, r8, lsr #3
     c94:	000011b2 			; <UNDEFINED> instruction: 0x000011b2
     c98:	00500001 	subseq	r0, r0, r1
     c9c:	00000000 	andeq	r0, r0, r0
     ca0:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
     ca4:	b0000011 	andlt	r0, r0, r1, lsl r0
     ca8:	01000011 	tsteq	r0, r1, lsl r0
     cac:	11b05400 	lslsne	r5, r0, #8
     cb0:	11b20000 			; <UNDEFINED> instruction: 0x11b20000
     cb4:	00010000 	andeq	r0, r1, r0
     cb8:	0011b252 	andseq	fp, r1, r2, asr r2
     cbc:	0011b400 	andseq	fp, r1, r0, lsl #8
     cc0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
     ccc:	00000d4e 	andeq	r0, r0, lr, asr #26
     cd0:	00000d80 	andeq	r0, r0, r0, lsl #27
     cd4:	00560001 	subseq	r0, r6, r1
     cd8:	00000000 	andeq	r0, r0, r0
     cdc:	64000000 	strvs	r0, [r0], #-0
     ce0:	6e00000d 	cdpvs	0, 0, cr0, cr0, cr13, {0}
     ce4:	0100000d 	tsteq	r0, sp
int main (void) {
     ce8:	00005300 	andeq	r5, r0, r0, lsl #6
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	00010000 	andeq	r0, r1, r0
	system_init ();
     cfc:	00000050 	andeq	r0, r0, r0, asr r0
	tcv_init ();
     d00:	00000000 	andeq	r0, r0, r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	00500001 	subseq	r0, r0, r1
     d1c:	00000000 	andeq	r0, r0, r0
	delay (16, 0);
     d20:	01000000 	mrseq	r0, (UNDEF: 0)
     d24:	00005000 	andeq	r5, r0, r0
     d28:	00000000 	andeq	r0, r0, r0
	__pi_release ();
     d2c:	0f980000 	svceq	0x00980000
     d30:	0fb10000 	svceq	0x00b10000
     d34:	00010000 	andeq	r0, r1, r0
     d38:	00000050 	andeq	r0, r0, r0, asr r0
     d3c:	00000000 	andeq	r0, r0, r0
     d40:	000f9800 	andeq	r9, pc, r0, lsl #16
     d44:	000fae00 	andeq	sl, pc, r0, lsl #28
static void killev (__pi_pcb_t *pid) {
     d48:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		for (j = 0; j < nevents (i); j++) {
     d54:	00000f74 	andeq	r0, r0, r4, ror pc
     d58:	00000f88 	andeq	r0, r0, r8, lsl #31
     d5c:	88500001 	ldmdahi	r0, {r0}^
			    || i->Events [j] . Event == wfun
     d60:	8c00000f 	stchi	0, cr0, [r0], {15}
		for (j = 0; j < nevents (i); j++) {
     d64:	0100000f 	tsteq	r0, pc
			if (i->Events [j] . Event == (aword)pid
     d68:	0f905400 	svceq	0x00905400
     d6c:	0f980000 	svceq	0x00980000
     d70:	00010000 	andeq	r0, r1, r0
				wakeupev (i, j);
     d74:	00000050 	andeq	r0, r0, r0, asr r0
     d78:	00000000 	andeq	r0, r0, r0
	for_all_tasks (i) {
     d7c:	000f7400 	andeq	r7, pc, r0, lsl #8
}
     d80:	000f8b00 	andeq	r8, pc, r0, lsl #22
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	51000100 	mrspl	r0, (UNDEF: 16)
static void qfree (aword *ch) {
     d88:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
	cc = (aword*)(mpools + MA_NP);
     d90:	00510001 	subseq	r0, r1, r1
	m_setnextp (ch, chunk);
     d94:	00000000 	andeq	r0, r0, r0
	m_setnextp (cc, ch);
     d98:	7c000000 	stcvc	0, cr0, [r0], {-0}
}
     d9c:	8b00000f 	blhi	de0 <qfree+0x5c>
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da0:	0100000f 	tsteq	r0, pc
     da4:	0f905300 	svceq	0x00905300
     da8:	0f980000 	svceq	0x00980000
			m_setnextp (cc, m_nextp (chunk));
     dac:	00010000 	andeq	r0, r1, r0
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	00000053 	andeq	r0, r0, r3, asr r0
	...
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	00510001 	subseq	r0, r1, r1
     dd8:	00000000 	andeq	r0, r0, r0
     ddc:	01000000 	mrseq	r0, (UNDEF: 0)
     de0:	00005500 	andeq	r5, r0, r0, lsl #10
	...
			if (m_size (chunk) >= m_size (ch))
     df0:	00010000 	andeq	r0, r1, r0
     df4:	00000052 	andeq	r0, r0, r2, asr r0
		chunk = m_nextp (chunk))
     df8:	00000000 	andeq	r0, r0, r0
     dfc:	52000100 	andpl	r0, r0, #0, 2
	...
	diag_wait (a);
     e08:	00000f54 	andeq	r0, r0, r4, asr pc
	diag_wchar (c, a);
     e0c:	00000f5e 	andeq	r0, r0, lr, asr pc
     e10:	00530001 	subseq	r0, r3, r1
}
     e14:	00000000 	andeq	r0, r0, r0
     e18:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
	syserror (ESTATE, "state");
     e1c:	fe00000e 	cdp2	0, 0, cr0, cr0, cr14, {0}
     e20:	0100000e 	tsteq	r0, lr
     e24:	00005000 	andeq	r5, r0, r0
     e28:	00000000 	andeq	r0, r0, r0
void update_n_wake (word min, Boolean force) {
     e2c:	12680000 	rsbne	r0, r8, #0
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	126e0000 	rsbne	r0, lr, #0
     e34:	00010000 	andeq	r0, r1, r0
     e38:	00126e50 	andseq	r6, r2, r0, asr lr
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	00129c00 	andseq	r9, r2, r0, lsl #24
     e40:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
     e4c:	00001268 	andeq	r1, r0, r8, ror #4
     e50:	00001273 	andeq	r1, r0, r3, ror r2
     e54:	73510001 	cmpvc	r1, #1
     e58:	9c000012 	stcls	0, cr0, [r0], {18}
     e5c:	01000012 	tsteq	r0, r2, lsl r0
     e60:	00005400 	andeq	r5, r0, r0, lsl #8
     e64:	00000000 	andeq	r0, r0, r0
     e68:	12840000 	addne	r0, r4, #0
     e6c:	12880000 	addne	r0, r8, #0
		for_all_tasks (i) {
     e70:	00010000 	andeq	r0, r1, r0
	__pi_mintk = znew + min;
     e74:	00128a53 	andseq	r8, r2, r3, asr sl
     e78:	00128e00 	andseq	r8, r2, r0, lsl #28
			if (!twaiting (i))
     e7c:	53000100 	movwpl	r0, #256	; 0x100
     e80:	0000128e 	andeq	r1, r0, lr, lsl #5
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	0000129c 	muleq	r0, ip, r2
     e88:	00520001 	subseq	r0, r2, r1
	...
     e98:	01000000 	mrseq	r0, (UNDEF: 0)
     e9c:	00005000 	andeq	r5, r0, r0
	...
     eac:	00010000 	andeq	r0, r1, r0
     eb0:	00000051 	andeq	r0, r0, r1, asr r0
	...
				d = i->Timer - znew;
     ec0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	00500001 	subseq	r0, r0, r1
	...
}
     edc:	01000000 	mrseq	r0, (UNDEF: 0)
	TCI_RUN_DELAY_TIMER;
     ee0:	00005300 	andeq	r5, r0, r0, lsl #6
}
     ee4:	00000000 	andeq	r0, r0, r0
     ee8:	00010000 	andeq	r0, r1, r0
     eec:	00000053 	andeq	r0, r0, r3, asr r0
	...
	prcdstate (__pi_curr, state);
     efc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	release;
     f08:	00530001 	subseq	r0, r3, r1
void __pi_wait (aword event, word state) {
     f0c:	00000000 	andeq	r0, r0, r0
	sint j = nevents (__pi_curr);
     f10:	01000000 	mrseq	r0, (UNDEF: 0)
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	00005300 	andeq	r5, r0, r0, lsl #6
	...
		syserror (ENEVENTS, "sw");
     f24:	00010000 	andeq	r0, r1, r0
	setestate (__pi_curr->Events [j], state, event);
     f28:	00000050 	andeq	r0, r0, r0, asr r0
	incwait (__pi_curr);
     f2c:	00000000 	andeq	r0, r0, r0
	setestate (__pi_curr->Events [j], state, event);
     f30:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i) {
     f44:	00500001 	subseq	r0, r0, r1
		for (j = 0; j < nevents (i); j++) {
     f48:	00000000 	andeq	r0, r0, r0
     f4c:	01000000 	mrseq	r0, (UNDEF: 0)
     f50:	00005300 	andeq	r5, r0, r0, lsl #6
     f54:	00000000 	andeq	r0, r0, r0
			if (i->Events [j] . Event == event) {
     f58:	00010000 	andeq	r0, r1, r0
     f5c:	00000053 	andeq	r0, r0, r3, asr r0
	...
	for_all_tasks (i) {
     f6c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	for_all_tasks (i) {
     f78:	00500001 	subseq	r0, r0, r1
	...
			__pi_wait (pid, st);
     f88:	01000000 	mrseq	r0, (UNDEF: 0)
}
     f8c:	00005300 	andeq	r5, r0, r0, lsl #6
	for_all_tasks (i) {
     f90:	00000000 	andeq	r0, r0, r0
     f94:	0e2c0000 	cdpeq	0, 2, cr0, cr12, cr0, {0}
void delay (word d, word state) {
     f98:	0e320000 	cdpeq	0, 3, cr0, cr2, cr0, {0}
	settstate (__pi_curr, state);
     f9c:	00010000 	andeq	r0, r1, r0
     fa0:	00000050 	andeq	r0, r0, r0, asr r0
     fa4:	00000000 	andeq	r0, r0, r0
     fa8:	000e2c00 	andeq	r2, lr, r0, lsl #24
	update_n_wake (d, YES);
     fac:	000e3500 	andeq	r3, lr, r0, lsl #10
     fb0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	inctimer (__pi_curr);
     fbc:	00000e3a 	andeq	r0, r0, sl, lsr lr
     fc0:	00000e78 	andeq	r0, r0, r8, ror lr
     fc4:	7c540001 	mrrcvc	0, 0, r0, r4, cr1
}
     fc8:	ca00000e 	bgt	1008 <__pi_memcpy+0x6>
     fcc:	0100000e 	tsteq	r0, lr
	if (fun == NULL)
     fd0:	0ecc5400 	cdpeq	4, 12, cr5, cr12, cr0, {0}
		return (int) __pi_curr;
     fd4:	0ed60000 	cdpeq	0, 13, cr0, cr6, cr0, {0}
     fd8:	00010000 	andeq	r0, r1, r0
	for_all_tasks (i)
     fdc:	00000054 	andeq	r0, r0, r4, asr r0
}
     fe0:	00000000 	andeq	r0, r0, r0
		if (i->code == fun)
     fe4:	000e7200 	andeq	r7, lr, r0, lsl #4
	for_all_tasks (i)
     fe8:	000e7400 	andeq	r7, lr, r0, lsl #8
     fec:	50000100 	andpl	r0, r0, r0, lsl #2
     ff0:	00000e7c 	andeq	r0, r0, ip, ror lr
int __pi_strlen (const char *s) {
     ff4:	00000ecc 	andeq	r0, r0, ip, asr #29
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	00500001 	subseq	r0, r0, r1
}
     ffc:	00000000 	andeq	r0, r0, r0
	for (i = 0; *(s+i) != '\0'; i++);
    1000:	0c000000 	stceq	0, cr0, [r0], {-0}
	while (n--)
    1004:	2000000f 	andcs	r0, r0, pc
    1008:	0100000f 	tsteq	r0, pc
		*dest++ = *src++;
    100c:	0f265000 	svceq	0x00265000
    1010:	0f400000 	svceq	0x00400000
    1014:	00010000 	andeq	r0, r1, r0
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EREQPAR, "addv");
    101c:	00000000 	andeq	r0, r0, r0
		syserror (ERESOURCE, "addv");
    1020:	000f0c00 	andeq	r0, pc, r0, lsl #24
	if (ioreq [loc] != NULL)
    1024:	000f2200 	andeq	r2, pc, r0, lsl #4
    1028:	51000100 	mrspl	r0, (UNDEF: 16)
		syserror (ERESOURCE, "addv");
    102c:	00000f26 	andeq	r0, r0, r6, lsr #30
	ioreq [loc] = rf;
    1030:	00000f2c 	andeq	r0, r0, ip, lsr #30
}
    1034:	00510001 	subseq	r0, r1, r1
    1038:	00000000 	andeq	r0, r0, r0
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1040:	2000000f 	andcs	r0, r0, pc
    1044:	0100000f 	tsteq	r0, pc
    1048:	00005000 	andeq	r5, r0, r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	00000000 	andeq	r0, r0, r0
    1050:	0f1e0000 	svceq	0x001e0000
    1054:	0f220000 	svceq	0x00220000
		syserror (ENODEVICE, "io");
    1058:	00010000 	andeq	r0, r1, r0
    105c:	00000051 	andeq	r0, r0, r1, asr r0
	if (len == 0)
    1060:	00000000 	andeq	r0, r0, r0
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	00112800 	andseq	r2, r1, r0, lsl #16
    1068:	00113600 	andseq	r3, r1, r0, lsl #12
	if (ret >= 0)
    106c:	50000100 	andpl	r0, r0, r0, lsl #2
	if (ret == -1) {
    1070:	0000113c 	andeq	r1, r0, ip, lsr r1
    1074:	0000114f 	andeq	r1, r0, pc, asr #2
		if (retry == WNONE)
    1078:	00500001 	subseq	r0, r0, r1
		iowait (dev, operation, retry);
    107c:	00000000 	andeq	r0, r0, r0
    1080:	34000000 	strcc	r0, [r0], #-0
    1084:	36000011 			; <UNDEFINED> instruction: 0x36000011
			release;
    1088:	01000011 	tsteq	r0, r1, lsl r0
	if (ret == -2) {
    108c:	00005000 	andeq	r5, r0, r0
	...
			iowait (dev, operation, retry);
    109c:	00010000 	andeq	r0, r1, r0
			(ioreq [dev]) (NONE, buf, len);
    10a0:	00000050 	andeq	r0, r0, r0, asr r0
    10a4:	00000000 	andeq	r0, r0, r0
    10a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (retry != WNONE) {
    10bc:	00550001 	subseq	r0, r5, r1
	...
		delay (-ret - 2, retry);
    10cc:	01000000 	mrseq	r0, (UNDEF: 0)
		release;
    10d0:	00005400 	andeq	r5, r0, r0, lsl #8
    10d4:	00000000 	andeq	r0, r0, r0
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	00010000 	andeq	r0, r1, r0
    10dc:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (ERESOURCE, "mal1");
    10ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f8:	00500001 	subseq	r0, r0, r1
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fc:	00000000 	andeq	r0, r0, r0
	m_size (mpools [0]) = mlen - m_hdrlen;
    1100:	02000000 	andeq	r0, r0, #0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1104:	00007500 	andeq	r7, r0, r0, lsl #10
	...
}
    1114:	01000000 	mrseq	r0, (UNDEF: 0)
    1118:	00005000 	andeq	r5, r0, r0
    111c:	00000000 	andeq	r0, r0, r0
    1120:	00010000 	andeq	r0, r1, r0
    1124:	00000050 	andeq	r0, r0, r0, asr r0
	...
		syserror (EMALLOC, "malg");
    1134:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		m_size (ch) ^= MALLOC_UMASK;
    1140:	00500001 	subseq	r0, r0, r1
	...
	if (mevent [MA_NP] . nwait) {
    1150:	01000000 	mrseq	r0, (UNDEF: 0)
    1154:	00005000 	andeq	r5, r0, r0
		trigger ((aword)(&(mevent [MA_NP])));
    1158:	00000000 	andeq	r0, r0, r0
		mevent [MA_NP] . nwait --;
    115c:	00010000 	andeq	r0, r1, r0
}
    1160:	00000050 	andeq	r0, r0, r0, asr r0
	...
void kill (aword pid) {
    1170:	53000100 	movwpl	r0, #256	; 0x100
	...
	syserror (EREQPAR, "kpi");
    1184:	00500001 	subseq	r0, r0, r1
		if ((aword)i == pid) {
    1188:	00000000 	andeq	r0, r0, r0
    118c:	02000000 	andeq	r0, r0, #0
				__PCB = i->Next;
    1190:	00007300 	andeq	r7, r0, r0, lsl #6
	...
			if (i == __pi_curr)
    11a0:	01000000 	mrseq	r0, (UNDEF: 0)
				release;
    11a4:	00005000 	andeq	r5, r0, r0
				j->Next = i->Next;
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	00010000 	andeq	r0, r1, r0
    11b0:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (size < 8)
    11c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		_size = (((aword)size) + 3) >> 2;
    11cc:	00510001 	subseq	r0, r1, r1
	...
		if (mevent [MA_NP] . nfail != 255)
    11dc:	01000000 	mrseq	r0, (UNDEF: 0)
			mevent [MA_NP] . nfail ++;
    11e0:	00005300 	andeq	r5, r0, r0, lsl #6
		mnfree [MA_NP] = 0;
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	00010000 	andeq	r0, r1, r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	00000053 	andeq	r0, r0, r3, asr r0
	...
		if (m_size (chunk) >= _size)
    11fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		m_setnextp (cc, m_nextp (chunk));
    1208:	00500001 	subseq	r0, r0, r1
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120c:	00000000 	andeq	r0, r0, r0
    1210:	02000000 	andeq	r0, r0, #0
			m_size (chunk) = _size;
    1214:	00007300 	andeq	r7, r0, r0, lsl #6
	...
			QFREE;
    1224:	01000000 	mrseq	r0, (UNDEF: 0)
		mevent [MA_NP] . nfail = 0;
    1228:	00005000 	andeq	r5, r0, r0
		mcfree [MA_NP] -= m_size (chunk);
    122c:	00000000 	andeq	r0, r0, r0
    1230:	00010000 	andeq	r0, r1, r0
    1234:	00000055 	andeq	r0, r0, r5, asr r0
    1238:	00000000 	andeq	r0, r0, r0
		m_size (chunk) |= MALLOC_UMASK;
    123c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	00550001 	subseq	r0, r5, r1
	...
}
    1258:	01000000 	mrseq	r0, (UNDEF: 0)
    125c:	00005100 	andeq	r5, r0, r0, lsl #2
    1260:	00000000 	andeq	r0, r0, r0
    1264:	00010000 	andeq	r0, r1, r0
aword __pi_fork (fsmcode func, aword data) {
    1268:	00000057 	andeq	r0, r0, r7, asr r0
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	00000000 	andeq	r0, r0, r0
    1270:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	i->Next = NULL;
    127c:	00570001 	subseq	r0, r7, r1
	...
			for (; j->Next != NULL; j = j->Next);
    128c:	01000000 	mrseq	r0, (UNDEF: 0)
    1290:	00005200 	andeq	r5, r0, r0, lsl #4
	return (aword) i;
    1294:	00000000 	andeq	r0, r0, r0
    1298:	00010000 	andeq	r0, r1, r0
	if (mevent [MA_NP] . nwait != 255)
    129c:	00000054 	andeq	r0, r0, r4, asr r0
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	52000100 	andpl	r0, r0, #0, 2
	...
	wait ((aword)(&(mevent [MA_NP])), state);
    12b0:	00540001 	subseq	r0, r4, r1
	...
	diag_disable_int (a, is);
    12c0:	01000000 	mrseq	r0, (UNDEF: 0)
    12c4:	00005000 	andeq	r5, r0, r0
    12c8:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    12cc:	00010000 	andeq	r0, r1, r0
	diag_disable_int (a, is);
    12d0:	00000051 	andeq	r0, r0, r1, asr r0
	...
	dgout ('\n');
    12e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    12f4:	00500001 	subseq	r0, r0, r1
    12f8:	00000000 	andeq	r0, r0, r0
    12fc:	01000000 	mrseq	r0, (UNDEF: 0)
		if (*mess == '%') {
    1300:	00005400 	andeq	r5, r0, r0, lsl #8
	...
				mess++;
    1310:	00010000 	andeq	r0, r1, r0
				val = va_arg (ap, lword);
    1314:	00000051 	andeq	r0, r0, r1, asr r0
				bc = 32;
    1318:	00000000 	andeq	r0, r0, r0
				bc = 16;
    131c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
				dgout ('%');
    1330:	00520001 	subseq	r0, r2, r1
				dgout (*mess);
    1334:	00000000 	andeq	r0, r0, r0
    1338:	01000000 	mrseq	r0, (UNDEF: 0)
			switch (*mess) {
    133c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
					(val >> (bc - i)) & 0xf];
    134c:	00010000 	andeq	r0, r1, r0
					dgout (v);
    1350:	00000050 	andeq	r0, r0, r0, asr r0
    1354:	00000000 	andeq	r0, r0, r0
				while (i < bc) {
    1358:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
			mess++;
    135c:	72243200 	eorvc	r3, r4, #0, 4
					d /= 10;
    1360:	00002200 	andeq	r2, r0, r0, lsl #4
				if ((val >> (bc - 1)) & 1) {
    1364:	00000000 	andeq	r0, r0, r0
    1368:	00010000 	andeq	r0, r1, r0
					dgout ('-');
    136c:	00000050 	andeq	r0, r0, r0, asr r0
	...
						val |= 0xffff0000;
    137c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					if (v || d == 1) break;
    1390:	00510001 	subseq	r0, r1, r1
	...
					dgout (v + '0');
    13a0:	01000000 	mrseq	r0, (UNDEF: 0)
    13a4:	00005000 	andeq	r5, r0, r0
    13a8:	00000000 	andeq	r0, r0, r0
					d /= 10;
    13ac:	00010000 	andeq	r0, r1, r0
					val = val - (v * d);
    13b0:	00000055 	andeq	r0, r0, r5, asr r0
	...
				if (bc == 16)
    13c0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
					dgout (*s);
    13cc:	00560001 	subseq	r0, r6, r1
	...
			dgout (*mess++);
    13dc:	01000000 	mrseq	r0, (UNDEF: 0)
    13e0:	00005000 	andeq	r5, r0, r0
    13e4:	00000000 	andeq	r0, r0, r0
    13e8:	00010000 	andeq	r0, r1, r0
    13ec:	00000054 	andeq	r0, r0, r4, asr r0
	...
    SetupTrimDevice();
    13fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    __asm("    ldr     r0, =_bss\n"
    1408:	00500001 	subseq	r0, r0, r1
	...
    1418:	01000000 	mrseq	r0, (UNDEF: 0)
   main();
    141c:	00005100 	andeq	r5, r0, r0, lsl #2
    FaultISR();
    1420:	00000000 	andeq	r0, r0, r0
        *pui32Dest++ = *pui32Src++;
    1424:	00010000 	andeq	r0, r1, r0
    1428:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1438:	50000100 	andpl	r0, r0, r0, lsl #2
	...
static byte get_byte () {
    1444:	00500001 	subseq	r0, r0, r1
	...
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1454:	01000000 	mrseq	r0, (UNDEF: 0)
		if (ee_inp)
    1458:	00005100 	andeq	r5, r0, r0, lsl #2
			b |= 1;
    145c:	00000000 	andeq	r0, r0, r0
    1460:	00010000 	andeq	r0, r1, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1464:	00000051 	andeq	r0, r0, r1, asr r0
	...
}
    1474:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1480:	00500001 	subseq	r0, r0, r1
    1484:	00000000 	andeq	r0, r0, r0
		if (b & 0x80)
    1488:	01000000 	mrseq	r0, (UNDEF: 0)
    148c:	00005000 	andeq	r5, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1490:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < 8; i++) {
    1494:	00010000 	andeq	r0, r1, r0
		b <<= 1;
    1498:	00000050 	andeq	r0, r0, r0, asr r0
	for (i = 0; i < 8; i++) {
    149c:	00000000 	andeq	r0, r0, r0
}
    14a0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14b4:	00510001 	subseq	r0, r1, r1
}
    14b8:	00000000 	andeq	r0, r0, r0
    14bc:	01000000 	mrseq	r0, (UNDEF: 0)
static void wwait (word st, word del) {
    14c0:	00005100 	andeq	r5, r0, r0, lsl #2
    14c4:	00000000 	andeq	r0, r0, r0
    14c8:	00010000 	andeq	r0, r1, r0
	while (dopen && (rdsr () & 1)) {
    14cc:	00000051 	andeq	r0, r0, r1, asr r0
	...
	put_byte (CMD_RDSR);
    14dc:	52000100 	andpl	r0, r0, #0, 2
	...
	while (dopen && (rdsr () & 1)) {
    14e8:	00520001 	subseq	r0, r2, r1
}
    14ec:	00000000 	andeq	r0, r0, r0
		if (st == WNONE)
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
    14f4:	00005200 	andeq	r5, r0, r0, lsl #4
	...
			delay (del, st);
    1504:	00010000 	andeq	r0, r1, r0
			release;
    1508:	00000050 	andeq	r0, r0, r0, asr r0
	...
	if (dopen) {
    1518:	50000100 	andpl	r0, r0, r0, lsl #2
	...
		wwait (WNONE, 1);
    1524:	00500001 	subseq	r0, r0, r1
	...
    1534:	01000000 	mrseq	r0, (UNDEF: 0)
	udelay (1);
    1538:	00005000 	andeq	r5, r0, r0
    153c:	00000000 	andeq	r0, r0, r0
	udelay (1);
    1540:	00010000 	andeq	r0, r1, r0
		dopen = DOPEN_TEMP;
    1544:	00000054 	andeq	r0, r0, r4, asr r0
	...
static void cclose () {
    1554:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	cmd_0 (CMD_DP);
    1568:	00520001 	subseq	r0, r2, r1
    156c:	00000000 	andeq	r0, r0, r0
		dopen = 0;
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
}
    1574:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	dopen = DOPEN_PERM;
    1584:	00010000 	andeq	r0, r1, r0
}
    1588:	00000050 	andeq	r0, r0, r0, asr r0
	if (dopen) {
    158c:	00000000 	andeq	r0, r0, r0
    1590:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
int ser_in (word st, char *buf, int len) {
    15a4:	00510001 	subseq	r0, r1, r1
	if (len == 0)
    15a8:	00000000 	andeq	r0, r0, r0
	if (__inpline == NULL) {
    15ac:	01000000 	mrseq	r0, (UNDEF: 0)
		if ((prcs = running (__inserial)) == 0) {
    15b0:	00005000 	andeq	r5, r0, r0
	...
			if (prcs == 0) {
    15c0:	00010000 	andeq	r0, r1, r0
				npwait (st);
    15c4:	00000052 	andeq	r0, r0, r2, asr r0
		release;
    15c8:	00000000 	andeq	r0, r0, r0
		join (prcs, st);
    15cc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
		prcs = len-1;
    15e0:	00500001 	subseq	r0, r0, r1
	memcpy (buf, __inpline, prcs);
    15e4:	00000000 	andeq	r0, r0, r0
    15e8:	01000000 	mrseq	r0, (UNDEF: 0)
    15ec:	00005000 	andeq	r5, r0, r0
	...
		buf [prcs] = '\0';
    15fc:	00010000 	andeq	r0, r1, r0
}
    1600:	00000051 	andeq	r0, r0, r1, asr r0
		prcs = strlen (__inpline);
    1604:	00000000 	andeq	r0, r0, r0
    1608:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		return 0;
    1614:	00510001 	subseq	r0, r1, r1
	...
	if ((prcs = running (__outserial)) != 0) {
    1624:	01000000 	mrseq	r0, (UNDEF: 0)
		join (prcs, st);
    1628:	00005200 	andeq	r5, r0, r0, lsl #4
    162c:	00000000 	andeq	r0, r0, r0
		release;
    1630:	00010000 	andeq	r0, r1, r0
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1634:	00000054 	andeq	r0, r0, r4, asr r0
    1638:	00000000 	andeq	r0, r0, r0
    163c:	52000100 	andpl	r0, r0, #0, 2
	...
	if (runstrand (__outserial, buf) == 0) {
    1648:	00540001 	subseq	r0, r4, r1
    164c:	00000000 	andeq	r0, r0, r0
    1650:	01000000 	mrseq	r0, (UNDEF: 0)
		ufree (buf);
    1654:	00005400 	andeq	r5, r0, r0, lsl #8
		npwait (st);
    1658:	00000000 	andeq	r0, r0, r0
}
    165c:	00010000 	andeq	r0, r1, r0
    1660:	00000054 	andeq	r0, r0, r4, asr r0
	...
int ser_inf (word st, const char *fmt, ...) {
    1670:	53000100 	movwpl	r0, #256	; 0x100
	...
			prcs = runthread (__inserial);
    1684:	00500001 	subseq	r0, r0, r1
    1688:	00000000 	andeq	r0, r0, r0
			if (prcs == 0) {
    168c:	01000000 	mrseq	r0, (UNDEF: 0)
				npwait (st);
    1690:	00005000 	andeq	r5, r0, r0
	...
	va_start (ap, fmt);
    16a0:	00010000 	andeq	r0, r1, r0
	prcs = vscan (__inpline, fmt, ap);
    16a4:	00000050 	andeq	r0, r0, r0, asr r0
    16a8:	00000000 	andeq	r0, r0, r0
	ufree (__inpline);
    16ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
}
    16b8:	00500001 	subseq	r0, r0, r1
	...
		return 0;
    16c8:	01000000 	mrseq	r0, (UNDEF: 0)
strand (__outserial, const char*)
    16cc:	00005000 	andeq	r5, r0, r0
    16d0:	00000000 	andeq	r0, r0, r0
    16d4:	00010000 	andeq	r0, r1, r0
    16d8:	00000050 	andeq	r0, r0, r0, asr r0
endstrand
    16dc:	00000000 	andeq	r0, r0, r0
    16e0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if (*ptr)
    16ec:	00500001 	subseq	r0, r0, r1
	...
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1700:	00005100 	andeq	r5, r0, r0, lsl #2
    1704:	00000000 	andeq	r0, r0, r0
    1708:	00010000 	andeq	r0, r1, r0
	len -= quant;
    170c:	00000051 	andeq	r0, r0, r1, asr r0
    1710:	00000000 	andeq	r0, r0, r0
    1714:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		finish;
    1720:	00510001 	subseq	r0, r1, r1
	...
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	00005400 	andeq	r5, r0, r0, lsl #8
    1738:	00000000 	andeq	r0, r0, r0
strand (__inserial, address)
    173c:	000a0000 	andeq	r0, sl, r0
    1740:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    1744:	00000003 	andeq	r0, r0, r3
    1748:	00002200 	andeq	r2, r0, r0, lsl #4
    174c:	00000000 	andeq	r0, r0, r0
	if (__inpline != NULL)
    1750:	00010000 	andeq	r0, r1, r0
    1754:	00000054 	andeq	r0, r0, r4, asr r0
		finish;
    1758:	00000000 	andeq	r0, r0, r0
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    175c:	70000a00 	andvc	r0, r0, r0, lsl #20
    1760:	03243200 			; <UNDEFINED> instruction: 0x03243200
    1764:	00000000 	andeq	r0, r0, r0
    1768:	00000022 	andeq	r0, r0, r2, lsr #32
		umwait (IM_INIT);
    176c:	00000000 	andeq	r0, r0, r0
		release;
    1770:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
	io (IM_READ, __cport, READ, ptr, 1);
    177c:	0070000a 	rsbseq	r0, r0, sl
    1780:	00032432 	andeq	r2, r3, r2, lsr r4
    1784:	22000000 	andcs	r0, r0, #0
	...
			proceed (IM_BIN);
    1798:	00550001 	subseq	r0, r5, r1
    179c:	00000000 	andeq	r0, r0, r0
		if (*ptr < 0x20)
    17a0:	01000000 	mrseq	r0, (UNDEF: 0)
    17a4:	00005500 	andeq	r5, r0, r0, lsl #10
	...
	if (*ptr == '\n' || *ptr == '\r') {
    17b4:	00010000 	andeq	r0, r1, r0
    17b8:	00000054 	andeq	r0, r0, r4, asr r0
		*ptr = '\0';
    17bc:	00000000 	andeq	r0, r0, r0
		__inpline = (char*)data;
    17c0:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
		len--;
    17d4:	00500001 	subseq	r0, r0, r1
	proceed (IM_READ);
    17d8:	00000000 	andeq	r0, r0, r0
	io (IM_BIN, __cport, READ, ptr, 1);
    17dc:	01000000 	mrseq	r0, (UNDEF: 0)
    17e0:	00005000 	andeq	r5, r0, r0
    17e4:	00000000 	andeq	r0, r0, r0
    17e8:	00010000 	andeq	r0, r1, r0
    17ec:	00000050 	andeq	r0, r0, r0, asr r0
	...
		len = *ptr + 1;
    17fc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1810:	00500001 	subseq	r0, r0, r1
	...
	len -= quant;
    1820:	01000000 	mrseq	r0, (UNDEF: 0)
		__inpline = (char*)data;
    1824:	00005000 	andeq	r5, r0, r0
		finish;
    1828:	00000000 	andeq	r0, r0, r0
	ptr += quant;
    182c:	00010000 	andeq	r0, r1, r0
    1830:	00000050 	andeq	r0, r0, r0, asr r0
endstrand
    1834:	00000000 	andeq	r0, r0, r0
    1838:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1844:	00500001 	subseq	r0, r0, r1
	...
    1854:	01000000 	mrseq	r0, (UNDEF: 0)
		if (res && (d < n))
    1858:	00005100 	andeq	r5, r0, r0, lsl #2
    185c:	00000000 	andeq	r0, r0, r0
    1860:	00010000 	andeq	r0, r1, r0
    1864:	00000051 	andeq	r0, r0, r1, asr r0
			res [d] = (char) c;
    1868:	00000000 	andeq	r0, r0, r0
		d++;
    186c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1880:	00530001 	subseq	r0, r3, r1
				enci (10000);
    1884:	00000000 	andeq	r0, r0, r0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1888:	0a000000 	beq	1890 <__pi_vfparse+0x18>
    188c:	32007000 	andcc	r7, r0, #0
	d = 0;
    1890:	00000324 	andeq	r0, r0, r4, lsr #6
		c = *fm++;
    1894:	00220000 	eoreq	r0, r2, r0
		if (c == '\\') {
    1898:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    189c:	01000000 	mrseq	r0, (UNDEF: 0)
    18a0:	00005300 	andeq	r5, r0, r0, lsl #6
				outc ('\\');
    18a4:	00000000 	andeq	r0, r0, r0
			if ((c = *fm++) == '\0') {
    18a8:	000a0000 	andeq	r0, sl, r0
				outc ('\\');
    18ac:	24320070 	ldrtcs	r0, [r2], #-112	; 0xffffff90
    18b0:	00000003 	andeq	r0, r0, r3
			outc (c);
    18b4:	00002200 	andeq	r2, r0, r0, lsl #4
    18b8:	00000000 	andeq	r0, r0, r0
			if (c == '\0')
    18bc:	00010000 	andeq	r0, r1, r0
    18c0:	00000053 	andeq	r0, r0, r3, asr r0
			outc (c);
    18c4:	00000000 	andeq	r0, r0, r0
				outc (val);
    18c8:	70000a00 	andvc	r0, r0, r0, lsl #20
				val = (word) va_arg (ap, aword);
    18cc:	03243200 			; <UNDEFINED> instruction: 0x03243200
		if (c == '%') {
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	00000022 	andeq	r0, r0, r2, lsr #32
	...
			switch (c) {
    18e4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    18f0:	00500001 	subseq	r0, r0, r1
	...
				outc ('%');
    1900:	01000000 	mrseq	r0, (UNDEF: 0)
				outc (c);
    1904:	00005300 	andeq	r5, r0, r0, lsl #6
    1908:	00000000 	andeq	r0, r0, r0
    190c:	00010000 	andeq	r0, r1, r0
				if (c == '\0')
    1910:	00000053 	andeq	r0, r0, r3, asr r0
				return d;
    1914:	00000000 	andeq	r0, r0, r0
}
    1918:	53000100 	movwpl	r0, #256	; 0x100
	...
				for (i = 12; ; i -= 4) {
    192c:	00520001 	subseq	r0, r2, r1
				val = (word) va_arg (ap, aword);
    1930:	00000000 	andeq	r0, r0, r0
						[ (val >> i) & 0xf ]);
    1934:	01000000 	mrseq	r0, (UNDEF: 0)
    1938:	00005200 	andeq	r5, r0, r0, lsl #4
    193c:	00000000 	andeq	r0, r0, r0
					outc (__pi_hex_enc_table
    1940:	00010000 	andeq	r0, r1, r0
    1944:	00000052 	andeq	r0, r0, r2, asr r0
					if (i == 0)
    1948:	00000000 	andeq	r0, r0, r0
    194c:	52000100 	andpl	r0, r0, #0, 2
	...
				if (c == 'd' && (val & 0x8000) != 0) {
    1960:	00500001 	subseq	r0, r0, r1
	...
					val = (~val) + 1;
    1970:	01000000 	mrseq	r0, (UNDEF: 0)
    1974:	00005100 	andeq	r5, r0, r0, lsl #2
				for (i = 12; ; i -= 4) {
    1978:	00000000 	andeq	r0, r0, r0
				enci (10000);
    197c:	00010000 	andeq	r0, r1, r0
    1980:	00000051 	andeq	r0, r0, r1, asr r0
    1984:	00000000 	andeq	r0, r0, r0
    1988:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1994:	00510001 	subseq	r0, r1, r1
    1998:	00000000 	andeq	r0, r0, r0
    199c:	01000000 	mrseq	r0, (UNDEF: 0)
    19a0:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    19b0:	00010000 	andeq	r0, r1, r0
    19b4:	00000055 	andeq	r0, r0, r5, asr r0
	...
				if (c == 'd' || c == 'u') {
    19c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
					val = va_arg (ap, lword);
    19d0:	00500001 	subseq	r0, r0, r1
					fm++;
    19d4:	00000000 	andeq	r0, r0, r0
					if (c == 'd' &&
    19d8:	01000000 	mrseq	r0, (UNDEF: 0)
    19dc:	00005400 	andeq	r5, r0, r0, lsl #8
	...
				enci (10000);
    19ec:	00010000 	andeq	r0, r1, r0
					enci (1000000000UL);
    19f0:	00000050 	andeq	r0, r0, r0, asr r0
    19f4:	00000000 	andeq	r0, r0, r0
    19f8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1a04:	00710007 	rsbseq	r0, r1, r7
    1a08:	00722432 	rsbseq	r2, r2, r2, lsr r4
    1a0c:	00000022 	andeq	r0, r0, r2, lsr #32
    1a10:	00000000 	andeq	r0, r0, r0
    1a14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1a28:	00500001 	subseq	r0, r0, r1
    1a2c:	00000000 	andeq	r0, r0, r0
    1a30:	01000000 	mrseq	r0, (UNDEF: 0)
				} else if (c == 'x') {
    1a34:	00005000 	andeq	r5, r0, r0
	...
							[ (val >> i) & 0xf ]);
    1a44:	00010000 	andeq	r0, r1, r0
						outc (__pi_hex_enc_table
    1a48:	00000050 	andeq	r0, r0, r0, asr r0
    1a4c:	00000000 	andeq	r0, r0, r0
    1a50:	50000100 	andpl	r0, r0, r0, lsl #2
	...
					outc ('%');
    1a64:	00510001 	subseq	r0, r1, r1
    1a68:	00000000 	andeq	r0, r0, r0
					outc ('l');
    1a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a70:	00005500 	andeq	r5, r0, r0, lsl #10
				val = (word) va_arg (ap, aword);
    1a74:	00000000 	andeq	r0, r0, r0
				outc (val);
    1a78:	00010000 	andeq	r0, r1, r0
    1a7c:	00000051 	andeq	r0, r0, r1, asr r0
				while (*st != '\0') {
    1a80:	00000000 	andeq	r0, r0, r0
    1a84:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
					outc (*st);
    1a90:	00510001 	subseq	r0, r1, r1
    1a94:	00000000 	andeq	r0, r0, r0
					st++;
    1a98:	01000000 	mrseq	r0, (UNDEF: 0)
		c = *fm++;
    1a9c:	00005500 	andeq	r5, r0, r0, lsl #10
	...
char *vform (char *res, const char *fm, va_list aq) {
    1aac:	00010000 	andeq	r0, r1, r0
	if (res != NULL) {
    1ab0:	00000056 	andeq	r0, r0, r6, asr r0
	...
}
    1ac0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad4:	00500001 	subseq	r0, r0, r1
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	01000000 	mrseq	r0, (UNDEF: 0)
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae0:	00005000 	andeq	r5, r0, r0
    1ae4:	00000000 	andeq	r0, r0, r0
    1ae8:	00010000 	andeq	r0, r1, r0
    1aec:	00000050 	andeq	r0, r0, r0, asr r0
	...
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
	if (buf == NULL || fmt == NULL)
    1b08:	00570001 	subseq	r0, r7, r1
		    	    case 'u': scanu (lword); break;
    1b0c:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    1b10:	01000000 	mrseq	r0, (UNDEF: 0)
    1b14:	00005100 	andeq	r5, r0, r0, lsl #2
	while (*fmt != '\0') {
    1b18:	00000000 	andeq	r0, r0, r0
		if (*fmt++ != '%')
    1b1c:	00010000 	andeq	r0, r1, r0
		switch (*fmt++) {
    1b20:	00000057 	andeq	r0, r0, r7, asr r0
    1b24:	00000000 	andeq	r0, r0, r0
    1b28:	57000100 	strpl	r0, [r0, -r0, lsl #2]
	...
    1b34:	00510001 	subseq	r0, r1, r1
    1b38:	00000000 	andeq	r0, r0, r0
}
    1b3c:	01000000 	mrseq	r0, (UNDEF: 0)
		switch (*fmt++) {
    1b40:	00005700 	andeq	r5, r0, r0, lsl #14
	...
			while (isspace (*buf)) buf++;
    1b50:	00020000 	andeq	r0, r2, r0
    1b54:	00007891 	muleq	r0, r1, r8
    1b58:	00000000 	andeq	r0, r0, r0
    1b5c:	00020000 	andeq	r0, r2, r0
    1b60:	00007891 	muleq	r0, r1, r8
    1b64:	00000000 	andeq	r0, r0, r0
			if (*buf == '\0')
    1b68:	00020000 	andeq	r0, r2, r0
			if (*buf != ',') {
    1b6c:	00007891 	muleq	r0, r1, r8
			sap = va_arg (ap, char*);
    1b70:	00000000 	andeq	r0, r0, r0
			nc++;
    1b74:	00020000 	andeq	r0, r2, r0
			if (*buf != ',') {
    1b78:	00007891 	muleq	r0, r1, r8
	...
				while (!isspace (*buf) && *buf != ',' &&
    1b88:	00010000 	andeq	r0, r1, r0
    1b8c:	00000056 	andeq	r0, r0, r6, asr r0
    1b90:	00000000 	andeq	r0, r0, r0
    1b94:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
			while (isspace (*buf)) buf++;
    1ba8:	00500001 	subseq	r0, r0, r1
			if (*buf == ',') buf++;
    1bac:	00000000 	andeq	r0, r0, r0
    1bb0:	01000000 	mrseq	r0, (UNDEF: 0)
			*sap = '\0';
    1bb4:	00005400 	andeq	r5, r0, r0, lsl #8
			break;
    1bb8:	00000000 	andeq	r0, r0, r0
		    case 'd': scani (word); break;
    1bbc:	00010000 	andeq	r0, r1, r0
    1bc0:	00000050 	andeq	r0, r0, r0, asr r0
    1bc4:	00000000 	andeq	r0, r0, r0
    1bc8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1bd4:	00500001 	subseq	r0, r0, r1
    1bd8:	00000000 	andeq	r0, r0, r0
    1bdc:	01000000 	mrseq	r0, (UNDEF: 0)
    1be0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1bf0:	00010000 	andeq	r0, r1, r0
    1bf4:	00000050 	andeq	r0, r0, r0, asr r0
    1bf8:	00000000 	andeq	r0, r0, r0
    1bfc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c08:	00500001 	subseq	r0, r0, r1
	...
    1c18:	01000000 	mrseq	r0, (UNDEF: 0)
    1c1c:	00005400 	andeq	r5, r0, r0, lsl #8
    1c20:	00000000 	andeq	r0, r0, r0
    1c24:	00010000 	andeq	r0, r1, r0
    1c28:	00000050 	andeq	r0, r0, r0, asr r0
		    case 'u': scanu (word); break;
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1c3c:	00500001 	subseq	r0, r0, r1
	...
    1c4c:	01000000 	mrseq	r0, (UNDEF: 0)
    1c50:	00005000 	andeq	r5, r0, r0
	...
    1c60:	00010000 	andeq	r0, r1, r0
    1c64:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    case 'x': scanx (word); break;
    1c74:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1c88:	00500001 	subseq	r0, r0, r1
    1c8c:	00000000 	andeq	r0, r0, r0
    1c90:	01000000 	mrseq	r0, (UNDEF: 0)
    1c94:	00005500 	andeq	r5, r0, r0, lsl #10
    1c98:	00000000 	andeq	r0, r0, r0
    1c9c:	00010000 	andeq	r0, r1, r0
    1ca0:	00000050 	andeq	r0, r0, r0, asr r0
    1ca4:	00000000 	andeq	r0, r0, r0
    1ca8:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    1cbc:	00510001 	subseq	r0, r1, r1
    1cc0:	00000000 	andeq	r0, r0, r0
    1cc4:	01000000 	mrseq	r0, (UNDEF: 0)
    1cc8:	00005400 	andeq	r5, r0, r0, lsl #8
    1ccc:	00000000 	andeq	r0, r0, r0
    1cd0:	00010000 	andeq	r0, r1, r0
    1cd4:	00000051 	andeq	r0, r0, r1, asr r0
    1cd8:	00000000 	andeq	r0, r0, r0
    1cdc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
			switch (*fmt++) {
    1cf0:	00500001 	subseq	r0, r0, r1
    1cf4:	00000000 	andeq	r0, r0, r0
    1cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cfc:	00005500 	andeq	r5, r0, r0, lsl #10
	...
		    	    case 'd': scani (lword); break;
    1d0c:	00010000 	andeq	r0, r1, r0
    1d10:	00000051 	andeq	r0, r0, r1, asr r0
    1d14:	00000000 	andeq	r0, r0, r0
    1d18:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    1d2c:	00500001 	subseq	r0, r0, r1
    1d30:	00000000 	andeq	r0, r0, r0
    1d34:	01000000 	mrseq	r0, (UNDEF: 0)
    1d38:	00005400 	andeq	r5, r0, r0, lsl #8
    1d3c:	00000000 	andeq	r0, r0, r0
    1d40:	00010000 	andeq	r0, r1, r0
    1d44:	00000051 	andeq	r0, r0, r1, asr r0
    1d48:	00000000 	andeq	r0, r0, r0
    1d4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1d58:	00540001 	subseq	r0, r4, r1
    1d5c:	00000000 	andeq	r0, r0, r0
		    	    case 'x': scanx (lword); break;
    1d60:	01000000 	mrseq	r0, (UNDEF: 0)
    1d64:	00005000 	andeq	r5, r0, r0
    1d68:	00000000 	andeq	r0, r0, r0
    1d6c:	00010000 	andeq	r0, r1, r0
    1d70:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1d80:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1d94:	00500001 	subseq	r0, r0, r1
    1d98:	00000000 	andeq	r0, r0, r0
    1d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1da0:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    1db0:	00010000 	andeq	r0, r1, r0
    1db4:	00000050 	andeq	r0, r0, r0, asr r0
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	53000100 	movwpl	r0, #256	; 0x100
	...
		    	    case 'd': scani (lword); break;
    1dd0:	00510001 	subseq	r0, r1, r1
    1dd4:	00000000 	andeq	r0, r0, r0
    1dd8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ddc:	00005000 	andeq	r5, r0, r0
    1de0:	00000000 	andeq	r0, r0, r0
    1de4:	00010000 	andeq	r0, r1, r0
    1de8:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    	    case 'u': scanu (lword); break;
    1df8:	52000100 	andpl	r0, r0, #0, 2
	...
    1e04:	00510001 	subseq	r0, r1, r1
    1e08:	00000000 	andeq	r0, r0, r0
    1e0c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e10:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1e20:	00010000 	andeq	r0, r1, r0
    1e24:	00000050 	andeq	r0, r0, r0, asr r0
	...
		    	    case 'x': scanx (lword); break;
    1e34:	51000100 	mrspl	r0, (UNDEF: 16)
	...
			nc++;
    1e48:	00500001 	subseq	r0, r0, r1
	...
			while (isspace (*buf)) buf++;
    1e58:	01000000 	mrseq	r0, (UNDEF: 0)
						*sap++ = *buf++;
    1e5c:	00005100 	andeq	r5, r0, r0, lsl #2
    1e60:	00000000 	andeq	r0, r0, r0
			while (isspace (*buf)) buf++;
    1e64:	00010000 	andeq	r0, r1, r0
    1e68:	00000056 	andeq	r0, r0, r6, asr r0
    1e6c:	00000000 	andeq	r0, r0, r0
		return 0;
    1e70:	51000100 	mrspl	r0, (UNDEF: 16)
	...
		    case 'x': scanx (word); break;
    1e7c:	00560001 	subseq	r0, r6, r1
		    	    case 'x': scanx (lword); break;
    1e80:	00000000 	andeq	r0, r0, r0
    1e84:	01000000 	mrseq	r0, (UNDEF: 0)
    1e88:	00005100 	andeq	r5, r0, r0, lsl #2
    1e8c:	00000000 	andeq	r0, r0, r0
    1e90:	00010000 	andeq	r0, r1, r0
    1e94:	00000056 	andeq	r0, r0, r6, asr r0
    1e98:	00000000 	andeq	r0, r0, r0
    1e9c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1ea8:	00560001 	subseq	r0, r6, r1
	...
    1eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ebc:	00005200 	andeq	r5, r0, r0, lsl #4
    1ec0:	00000000 	andeq	r0, r0, r0
    1ec4:	00010000 	andeq	r0, r1, r0
    1ec8:	00000055 	andeq	r0, r0, r5, asr r0
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	52000100 	andpl	r0, r0, #0, 2
	...
    1edc:	00550001 	subseq	r0, r5, r1
    1ee0:	00000000 	andeq	r0, r0, r0
    1ee4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ee8:	00005200 	andeq	r5, r0, r0, lsl #4
    1eec:	00000000 	andeq	r0, r0, r0
    1ef0:	00010000 	andeq	r0, r1, r0
    1ef4:	00000055 	andeq	r0, r0, r5, asr r0
	...
    1f04:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1f10:	00500001 	subseq	r0, r0, r1
    1f14:	00000000 	andeq	r0, r0, r0
    1f18:	01000000 	mrseq	r0, (UNDEF: 0)
    1f1c:	00005400 	andeq	r5, r0, r0, lsl #8
    1f20:	00000000 	andeq	r0, r0, r0
    1f24:	00010000 	andeq	r0, r1, r0
    1f28:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1f38:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1f44:	00001404 	andeq	r1, r0, r4, lsl #8
    1f48:	0000141d 	andeq	r1, r0, sp, lsl r4
    1f4c:	28520001 	ldmdacs	r2, {r0}^
    1f50:	3c000014 	stccc	0, cr0, [r0], {20}
    1f54:	01000014 	tsteq	r0, r4, lsl r0
    1f58:	00005200 	andeq	r5, r0, r0, lsl #4
    1f5c:	00000000 	andeq	r0, r0, r0
    1f60:	14040000 	strne	r0, [r4], #-0
    1f64:	141d0000 	ldrne	r0, [sp], #-0
    1f68:	00010000 	andeq	r0, r1, r0
    1f6c:	00142c53 	andseq	r2, r4, r3, asr ip
    1f70:	00143c00 	andseq	r3, r4, r0, lsl #24
    1f74:	53000100 	movwpl	r0, #256	; 0x100
	...
    1f88:	00500001 	subseq	r0, r0, r1
    1f8c:	00000000 	andeq	r0, r0, r0
    1f90:	01000000 	mrseq	r0, (UNDEF: 0)
    1f94:	00005000 	andeq	r5, r0, r0
	...
    1fa4:	00010000 	andeq	r0, r1, r0
    1fa8:	00000051 	andeq	r0, r0, r1, asr r0
    1fac:	00000000 	andeq	r0, r0, r0
    1fb0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1fc4:	00520001 	subseq	r0, r2, r1
    1fc8:	00000000 	andeq	r0, r0, r0
    1fcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd0:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    1fe0:	00010000 	andeq	r0, r1, r0
    1fe4:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1ff4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2008:	00500001 	subseq	r0, r0, r1
    200c:	00000000 	andeq	r0, r0, r0
    2010:	05000000 	streq	r0, [r0, #-0]
    2014:	00000300 	andeq	r0, r0, r0, lsl #6
	...
    2020:	00010000 	andeq	r0, r1, r0
    2024:	00000050 	andeq	r0, r0, r0, asr r0
    2028:	00000000 	andeq	r0, r0, r0
    202c:	03000500 	movweq	r0, #1280	; 0x500
	...
    2044:	00500001 	subseq	r0, r0, r1
    2048:	00000000 	andeq	r0, r0, r0
    204c:	01000000 	mrseq	r0, (UNDEF: 0)
    2050:	00005000 	andeq	r5, r0, r0
    2054:	00000000 	andeq	r0, r0, r0
    2058:	00010000 	andeq	r0, r1, r0
    205c:	00000050 	andeq	r0, r0, r0, asr r0
    2060:	00000000 	andeq	r0, r0, r0
    2064:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2078:	00500001 	subseq	r0, r0, r1
	...
    2088:	01000000 	mrseq	r0, (UNDEF: 0)
    208c:	00005000 	andeq	r5, r0, r0
	...
    209c:	00010000 	andeq	r0, r1, r0
    20a0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    20b0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    20bc:	00560001 	subseq	r0, r6, r1
	...
    20cc:	01000000 	mrseq	r0, (UNDEF: 0)
    20d0:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    20e0:	00010000 	andeq	r0, r1, r0
    20e4:	00000053 	andeq	r0, r0, r3, asr r0
	...
    20f4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    2100:	00540001 	subseq	r0, r4, r1
    2104:	00000000 	andeq	r0, r0, r0
    2108:	01000000 	mrseq	r0, (UNDEF: 0)
    210c:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    211c:	00010000 	andeq	r0, r1, r0
    2120:	00000050 	andeq	r0, r0, r0, asr r0
    2124:	00000000 	andeq	r0, r0, r0
    2128:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    213c:	00510001 	subseq	r0, r1, r1
    2140:	00000000 	andeq	r0, r0, r0
    2144:	01000000 	mrseq	r0, (UNDEF: 0)
    2148:	00005600 	andeq	r5, r0, r0, lsl #12
    214c:	00000000 	andeq	r0, r0, r0
    2150:	00010000 	andeq	r0, r1, r0
    2154:	00000051 	andeq	r0, r0, r1, asr r0
	...
    2164:	52000100 	andpl	r0, r0, #0, 2
	...
    2170:	00540001 	subseq	r0, r4, r1
	...
    2180:	01000000 	mrseq	r0, (UNDEF: 0)
    2184:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    2194:	00010000 	andeq	r0, r1, r0
    2198:	00000050 	andeq	r0, r0, r0, asr r0
	...
    21a8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    21b4:	00550001 	subseq	r0, r5, r1
    21b8:	00000000 	andeq	r0, r0, r0
    21bc:	01000000 	mrseq	r0, (UNDEF: 0)
    21c0:	00005000 	andeq	r5, r0, r0
	...
    21d0:	00010000 	andeq	r0, r1, r0
    21d4:	00000051 	andeq	r0, r0, r1, asr r0
    21d8:	00000000 	andeq	r0, r0, r0
    21dc:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    21e8:	00560001 	subseq	r0, r6, r1
    21ec:	00000000 	andeq	r0, r0, r0
    21f0:	01000000 	mrseq	r0, (UNDEF: 0)
    21f4:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    2204:	00010000 	andeq	r0, r1, r0
    2208:	00000052 	andeq	r0, r0, r2, asr r0
    220c:	00000000 	andeq	r0, r0, r0
    2210:	52000100 	andpl	r0, r0, #0, 2
	...
    221c:	000014c0 	andeq	r1, r0, r0, asr #9
    2220:	000014d0 	ldrdeq	r1, [r0], -r0
    2224:	00500001 	subseq	r0, r0, r1
    2228:	00000000 	andeq	r0, r0, r0
    222c:	c0000000 	andgt	r0, r0, r0
    2230:	d0000014 	andle	r0, r0, r4, lsl r0
    2234:	01000014 	tsteq	r0, r4, lsl r0
    2238:	00005100 	andeq	r5, r0, r0, lsl #2
    223c:	00000000 	andeq	r0, r0, r0
    2240:	14e20000 	strbtne	r0, [r2], #0
    2244:	14e60000 	strbtne	r0, [r6], #0
    2248:	00010000 	andeq	r0, r1, r0
    224c:	00000050 	andeq	r0, r0, r0, asr r0
    2250:	00000000 	andeq	r0, r0, r0
    2254:	0014a800 	andseq	sl, r4, r0, lsl #16
    2258:	0014b300 	andseq	fp, r4, r0, lsl #6
    225c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2268:	00001478 	andeq	r1, r0, r8, ror r4
    226c:	00001494 	muleq	r0, r4, r4
    2270:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2274:	a8000014 	stmdage	r0, {r2, r4}
    2278:	01000014 	tsteq	r0, r4, lsl r0
    227c:	00005000 	andeq	r5, r0, r0
    2280:	00000000 	andeq	r0, r0, r0
    2284:	14540000 	ldrbne	r0, [r4], #-0
    2288:	14580000 	ldrbne	r0, [r8], #-0
    228c:	00010000 	andeq	r0, r1, r0
    2290:	00145c50 	andseq	r5, r4, r0, asr ip
    2294:	00147800 	andseq	r7, r4, r0, lsl #16
    2298:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    22a4:	000015a0 	andeq	r1, r0, r0, lsr #11
    22a8:	000015ae 	andeq	r1, r0, lr, lsr #11
    22ac:	0a500001 	beq	14022b8 <__ccfg+0x13e2310>
    22b0:	18000016 	stmdane	r0, {r1, r2, r4}
    22b4:	01000016 	tsteq	r0, r6, lsl r0
    22b8:	00005000 	andeq	r5, r0, r0
    22bc:	00000000 	andeq	r0, r0, r0
    22c0:	15a00000 	strne	r0, [r0, #0]!
    22c4:	15b50000 	ldrne	r0, [r5, #0]!
    22c8:	00010000 	andeq	r0, r1, r0
    22cc:	0015b551 	andseq	fp, r5, r1, asr r5
    22d0:	0015d400 	andseq	sp, r5, r0, lsl #8
    22d4:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    22d8:	000015d4 	ldrdeq	r1, [r0], -r4
    22dc:	000015dc 	ldrdeq	r1, [r0], -ip
    22e0:	dc510001 	mrrcle	0, 0, r0, r1, cr1
    22e4:	02000015 	andeq	r0, r0, #21
    22e8:	01000016 	tsteq	r0, r6, lsl r0
    22ec:	16025700 	strne	r5, [r2], -r0, lsl #14
    22f0:	16050000 	strne	r0, [r5], -r0
    22f4:	00010000 	andeq	r0, r1, r0
    22f8:	00160551 	andseq	r0, r6, r1, asr r5
    22fc:	00160a00 	andseq	r0, r6, r0, lsl #20
    2300:	57000100 	strpl	r0, [r0, -r0, lsl #2]
    2304:	0000160a 	andeq	r1, r0, sl, lsl #12
    2308:	00001618 	andeq	r1, r0, r8, lsl r6
    230c:	00510001 	subseq	r0, r1, r1
    2310:	00000000 	andeq	r0, r0, r0
    2314:	a0000000 	andge	r0, r0, r0
    2318:	b5000015 	strlt	r0, [r0, #-21]	; 0xffffffeb
    231c:	01000015 	tsteq	r0, r5, lsl r0
    2320:	15b55200 	ldrne	r5, [r5, #512]!	; 0x200
    2324:	15d40000 	ldrbne	r0, [r4]
    2328:	00010000 	andeq	r0, r1, r0
    232c:	0015d455 	andseq	sp, r5, r5, asr r4
    2330:	0015dc00 	andseq	sp, r5, r0, lsl #24
    2334:	52000100 	andpl	r0, r0, #0, 2
    2338:	000015dc 	ldrdeq	r1, [r0], -ip
    233c:	00001602 	andeq	r1, r0, r2, lsl #12
    2340:	02550001 	subseq	r0, r5, #1
    2344:	05000016 	streq	r0, [r0, #-22]	; 0xffffffea
    2348:	01000016 	tsteq	r0, r6, lsl r0
    234c:	16055200 	strne	r5, [r5], -r0, lsl #4
    2350:	160a0000 	strne	r0, [sl], -r0
    2354:	00010000 	andeq	r0, r1, r0
    2358:	00160a55 	andseq	r0, r6, r5, asr sl
    235c:	00161800 	andseq	r1, r6, r0, lsl #16
    2360:	52000100 	andpl	r0, r0, #0, 2
	...
    236c:	000015b6 			; <UNDEFINED> instruction: 0x000015b6
    2370:	000015bc 			; <UNDEFINED> instruction: 0x000015bc
    2374:	bc500001 	mrrclt	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    2378:	bf000015 	svclt	0x00000015
    237c:	01000015 	tsteq	r0, r5, lsl r0
    2380:	15c05100 	strbne	r5, [r0, #256]	; 0x100
    2384:	15c40000 	strbne	r0, [r4]
    2388:	00010000 	andeq	r0, r1, r0
    238c:	0015cc50 	andseq	ip, r5, r0, asr ip
    2390:	0015d100 	andseq	sp, r5, r0, lsl #2
    2394:	50000100 	andpl	r0, r0, r0, lsl #2
    2398:	000015dc 	ldrdeq	r1, [r0], -ip
    239c:	000015fe 	strdeq	r1, [r0], -lr
    23a0:	08540001 	ldmdaeq	r4, {r0}^
    23a4:	0a000016 	beq	2404 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xc0>
    23a8:	01000016 	tsteq	r0, r6, lsl r0
    23ac:	00005000 	andeq	r5, r0, r0
    23b0:	00000000 	andeq	r0, r0, r0
    23b4:	16180000 	ldrne	r0, [r8], -r0
    23b8:	16200000 	strtne	r0, [r0], -r0
    23bc:	00010000 	andeq	r0, r1, r0
    23c0:	00000050 	andeq	r0, r0, r0, asr r0
    23c4:	00000000 	andeq	r0, r0, r0
    23c8:	00162400 	andseq	r2, r6, r0, lsl #8
    23cc:	00162d00 	andseq	r2, r6, r0, lsl #26
    23d0:	50000100 	andpl	r0, r0, r0, lsl #2
    23d4:	0000162d 	andeq	r1, r0, sp, lsr #12
    23d8:	00001632 	andeq	r1, r0, r2, lsr r6
    23dc:	32560001 	subscc	r0, r6, #1
    23e0:	3b000016 	blcc	2440 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xfc>
    23e4:	01000016 	tsteq	r0, r6, lsl r0
    23e8:	163b5000 	ldrtne	r5, [fp], -r0
    23ec:	16620000 	strbtne	r0, [r2], -r0
    23f0:	00010000 	andeq	r0, r1, r0
    23f4:	00166256 	andseq	r6, r6, r6, asr r2
    23f8:	00166c00 	andseq	r6, r6, r0, lsl #24
    23fc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2408:	0000163c 	andeq	r1, r0, ip, lsr r6
    240c:	00001640 	andeq	r1, r0, r0, asr #12
    2410:	40500001 	subsmi	r0, r0, r1
    2414:	48000016 	stmdami	r0, {r1, r2, r4}
    2418:	01000016 	tsteq	r0, r6, lsl r0
    241c:	16485500 	strbne	r5, [r8], -r0, lsl #10
    2420:	164c0000 	strbne	r0, [ip], -r0
    2424:	00010000 	andeq	r0, r1, r0
    2428:	00164c50 	andseq	r4, r6, r0, asr ip
    242c:	00166200 	andseq	r6, r6, r0, lsl #4
    2430:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    243c:	0000166c 	andeq	r1, r0, ip, ror #12
    2440:	0000167a 	andeq	r1, r0, sl, ror r6
    2444:	c0500001 	subsgt	r0, r0, r1
    2448:	cc000016 	stcgt	0, cr0, [r0], {22}
    244c:	01000016 	tsteq	r0, r6, lsl r0
    2450:	00005000 	andeq	r5, r0, r0
    2454:	00000000 	andeq	r0, r0, r0
    2458:	16820000 	strne	r0, [r2], r0
    245c:	16880000 	strne	r0, [r8], r0
    2460:	00010000 	andeq	r0, r1, r0
    2464:	00168850 	andseq	r8, r6, r0, asr r8
    2468:	00168b00 	andseq	r8, r6, r0, lsl #22
    246c:	51000100 	mrspl	r0, (UNDEF: 16)
    2470:	0000168c 	andeq	r1, r0, ip, lsl #13
    2474:	00001690 	muleq	r0, r0, r6
    2478:	98500001 	ldmdals	r0, {r0}^
    247c:	9d000016 	stcls	0, cr0, [r0, #-88]	; 0xffffffa8
    2480:	01000016 	tsteq	r0, r6, lsl r0
    2484:	16aa5000 	strtne	r5, [sl], r0
    2488:	16ac0000 	strtne	r0, [ip], r0
    248c:	00010000 	andeq	r0, r1, r0
    2490:	0016ac50 	andseq	sl, r6, r0, asr ip
    2494:	0016b400 	andseq	fp, r6, r0, lsl #8
    2498:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    24a4:	000016cc 	andeq	r1, r0, ip, asr #13
    24a8:	000016e3 	andeq	r1, r0, r3, ror #13
    24ac:	e4500001 	ldrb	r0, [r0], #-1
    24b0:	f0000016 			; <UNDEFINED> instruction: 0xf0000016
    24b4:	01000016 	tsteq	r0, r6, lsl r0
    24b8:	17285000 	strne	r5, [r8, -r0]!
    24bc:	173c0000 	ldrne	r0, [ip, -r0]!
    24c0:	00010000 	andeq	r0, r1, r0
    24c4:	00000050 	andeq	r0, r0, r0, asr r0
    24c8:	00000000 	andeq	r0, r0, r0
    24cc:	0016d400 	andseq	sp, r6, r0, lsl #8
    24d0:	0016e000 	andseq	lr, r6, r0
    24d4:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    24d8:	000016e0 	andeq	r1, r0, r0, ror #13
    24dc:	000016e3 	andeq	r1, r0, r3, ror #13
    24e0:	08730002 	ldmdaeq	r3!, {r1}^
    24e4:	000016e4 	andeq	r1, r0, r4, ror #13
    24e8:	0000173c 	andeq	r1, r0, ip, lsr r7
    24ec:	00550001 	subseq	r0, r5, r1
    24f0:	00000000 	andeq	r0, r0, r0
    24f4:	0a000000 	beq	24fc <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x1c>
    24f8:	1c000017 	stcne	0, cr0, [r0], {23}
    24fc:	01000017 	tsteq	r0, r7, lsl r0
    2500:	00005000 	andeq	r5, r0, r0
    2504:	00000000 	andeq	r0, r0, r0
    2508:	173c0000 	ldrne	r0, [ip, -r0]!
    250c:	17580000 	ldrbne	r0, [r8, -r0]
    2510:	00010000 	andeq	r0, r1, r0
    2514:	00183e50 	andseq	r3, r8, r0, asr lr
    2518:	00184700 	andseq	r4, r8, r0, lsl #14
    251c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2528:	00001744 	andeq	r1, r0, r4, asr #14
    252c:	00001766 	andeq	r1, r0, r6, ror #14
    2530:	66540001 	ldrbvs	r0, [r4], -r1
    2534:	6d000017 	stcvs	0, cr0, [r0, #-92]	; 0xffffffa4
    2538:	01000017 	tsteq	r0, r7, lsl r0
    253c:	176d5000 	strbne	r5, [sp, -r0]!
    2540:	17720000 	ldrbne	r0, [r2, -r0]!
    2544:	00010000 	andeq	r0, r1, r0
    2548:	00177254 	andseq	r7, r7, r4, asr r2
    254c:	00177c00 	andseq	r7, r7, r0, lsl #24
    2550:	50000100 	andpl	r0, r0, r0, lsl #2
    2554:	0000177c 	andeq	r1, r0, ip, ror r7
    2558:	0000183a 	andeq	r1, r0, sl, lsr r8
    255c:	3e540001 	cdpcc	0, 5, cr0, cr4, cr1, {0}
    2560:	44000018 	strmi	r0, [r0], #-24	; 0xffffffe8
    2564:	01000018 	tsteq	r0, r8, lsl r0
    2568:	18445400 	stmdane	r4, {sl, ip, lr}^
    256c:	18470000 	stmdane	r7, {}^	; <UNPREDICTABLE>
    2570:	00020000 	andeq	r0, r2, r0
    2574:	00000872 	andeq	r0, r0, r2, ror r8
    2578:	00000000 	andeq	r0, r0, r0
    257c:	181e0000 	ldmdane	lr, {}	; <UNPREDICTABLE>
    2580:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
    2584:	00010000 	andeq	r0, r1, r0
    2588:	00182050 	andseq	r2, r8, r0, asr r0
    258c:	00183a00 	andseq	r3, r8, r0, lsl #20
    2590:	56000100 	strpl	r0, [r0], -r0, lsl #2
	...
    259c:	00001aa8 	andeq	r1, r0, r8, lsr #21
    25a0:	00001abf 			; <UNDEFINED> instruction: 0x00001abf
    25a4:	bf500001 	svclt	0x00500001
    25a8:	c600001a 			; <UNDEFINED> instruction: 0xc600001a
    25ac:	0100001a 	tsteq	r0, sl, lsl r0
    25b0:	1ac65400 	bne	ff1975b8 <_estack+0xdf1925b8>
    25b4:	1ac80000 	bne	ff2025bc <_estack+0xdf1fd5bc>
    25b8:	00010000 	andeq	r0, r1, r0
    25bc:	001ac850 	andseq	ip, sl, r0, asr r8
    25c0:	001ad800 	andseq	sp, sl, r0, lsl #16
    25c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    25c8:	00001ad8 	ldrdeq	r1, [r0], -r8
    25cc:	00001ae7 	andeq	r1, r0, r7, ror #21
    25d0:	e7500001 	ldrb	r0, [r0, -r1]
    25d4:	f800001a 			; <UNDEFINED> instruction: 0xf800001a
    25d8:	0100001a 	tsteq	r0, sl, lsl r0
    25dc:	00005400 	andeq	r5, r0, r0, lsl #8
    25e0:	00000000 	andeq	r0, r0, r0
    25e4:	1aa80000 	bne	fea025ec <_estack+0xde9fd5ec>
    25e8:	1abc0000 	bne	fef025f0 <_estack+0xdeefd5f0>
    25ec:	00010000 	andeq	r0, r1, r0
    25f0:	001abc51 	andseq	fp, sl, r1, asr ip
    25f4:	001abf00 	andseq	fp, sl, r0, lsl #30
    25f8:	52000100 	andpl	r0, r0, #0, 2
    25fc:	00001abf 			; <UNDEFINED> instruction: 0x00001abf
    2600:	00001ac6 	andeq	r1, r0, r6, asr #21
    2604:	c6560001 	ldrbgt	r0, [r6], -r1
    2608:	cb00001a 	blgt	2678 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x48>
    260c:	0100001a 	tsteq	r0, sl, lsl r0
    2610:	1acb5100 	bne	ff2d6a18 <_estack+0xdf2d1a18>
    2614:	1af80000 	bne	ffe0261c <_estack+0xdfdfd61c>
    2618:	00010000 	andeq	r0, r1, r0
    261c:	00000056 	andeq	r0, r0, r6, asr r0
    2620:	00000000 	andeq	r0, r0, r0
    2624:	001aa800 	andseq	sl, sl, r0, lsl #16
    2628:	001ab000 	andseq	fp, sl, r0
    262c:	52000100 	andpl	r0, r0, #0, 2
    2630:	00001ab4 			; <UNDEFINED> instruction: 0x00001ab4
    2634:	00001ab8 			; <UNDEFINED> instruction: 0x00001ab8
    2638:	c0520001 	subsgt	r0, r2, r1
    263c:	c600001a 			; <UNDEFINED> instruction: 0xc600001a
    2640:	0100001a 	tsteq	r0, sl, lsl r0
    2644:	1ad25700 	bne	ff49824c <_estack+0xdf49324c>
    2648:	1af80000 	bne	ffe02650 <_estack+0xdfdfd650>
    264c:	00010000 	andeq	r0, r1, r0
    2650:	00000057 	andeq	r0, r0, r7, asr r0
    2654:	00000000 	andeq	r0, r0, r0
    2658:	001ad200 	andseq	sp, sl, r0, lsl #4
    265c:	001af400 	andseq	pc, sl, r0, lsl #8
    2660:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2664:	00001af4 	strdeq	r1, [r0], -r4
    2668:	00001af8 	strdeq	r1, [r0], -r8
    266c:	00580001 	subseq	r0, r8, r1
    2670:	00000000 	andeq	r0, r0, r0
    2674:	ec000000 	stc	0, cr0, [r0], {-0}
    2678:	f000001a 			; <UNDEFINED> instruction: 0xf000001a
    267c:	0100001a 	tsteq	r0, sl, lsl r0
    2680:	00005000 	andeq	r5, r0, r0
    2684:	00000000 	andeq	r0, r0, r0
    2688:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
    268c:	18920000 	ldmne	r2, {}	; <UNPREDICTABLE>
    2690:	00010000 	andeq	r0, r1, r0
    2694:	00000050 	andeq	r0, r0, r0, asr r0
    2698:	00000000 	andeq	r0, r0, r0
    269c:	00187800 	andseq	r7, r8, r0, lsl #16
    26a0:	00189200 	andseq	r9, r8, r0, lsl #4
    26a4:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    26b0:	00001878 	andeq	r1, r0, r8, ror r8
    26b4:	00001892 	muleq	r0, r2, r8
    26b8:	a2520001 	subsge	r0, r2, #1
    26bc:	ce000018 	mcrgt	0, 0, r0, cr0, cr8, {0}
    26c0:	01000018 	tsteq	r0, r8, lsl r0
    26c4:	18dc5500 	ldmne	ip, {r8, sl, ip, lr}^
    26c8:	1a9a0000 	bne	fe6826d0 <_estack+0xde67d6d0>
    26cc:	00010000 	andeq	r0, r1, r0
    26d0:	00000055 	andeq	r0, r0, r5, asr r0
    26d4:	00000000 	andeq	r0, r0, r0
    26d8:	00187800 	andseq	r7, r8, r0, lsl #16
    26dc:	00187c00 	andseq	r7, r8, r0, lsl #24
    26e0:	53000100 	movwpl	r0, #256	; 0x100
    26e4:	0000187e 	andeq	r1, r0, lr, ror r8
    26e8:	00001880 	andeq	r1, r0, r0, lsl #17
    26ec:	93530003 	cmpls	r3, #3
    26f0:	00188004 	andseq	r8, r8, r4
    26f4:	0018ca00 	andseq	ip, r8, r0, lsl #20
    26f8:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    26fc:	18ca0493 	stmiane	sl, {r0, r1, r4, r7, sl}^
    2700:	191e0000 	ldmdbne	lr, {}	; <UNPREDICTABLE>
    2704:	00030000 	andeq	r0, r3, r0
    2708:	1e049354 	mcrne	3, 0, r9, cr4, cr4, {2}
    270c:	2a000019 	bcs	2778 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x148>
    2710:	03000019 	movweq	r0, #25
    2714:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    2718:	00001932 	andeq	r1, r0, r2, lsr r9
    271c:	00001954 	andeq	r1, r0, r4, asr r9
    2720:	93540003 	cmpls	r4, #3
    2724:	00195804 	andseq	r5, r9, r4, lsl #16
    2728:	0019d200 	andseq	sp, r9, r0, lsl #4
    272c:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2730:	19d80493 	ldmibne	r8, {r0, r1, r4, r7, sl}^
    2734:	19ec0000 	stmibne	ip!, {}^	; <UNPREDICTABLE>
    2738:	00030000 	andeq	r0, r3, r0
    273c:	32049354 	andcc	r9, r4, #84, 6	; 0x50000001
    2740:	3e00001a 	mcrcc	0, 0, r0, cr0, cr10, {0}
    2744:	0300001a 	movweq	r0, #26
    2748:	04935400 	ldreq	r5, [r3], #1024	; 0x400
    274c:	00001a60 	andeq	r1, r0, r0, ror #20
    2750:	00001a72 	andeq	r1, r0, r2, ror sl
    2754:	93540003 	cmpls	r4, #3
    2758:	001a7604 	andseq	r7, sl, r4, lsl #12
    275c:	001a7e00 	andseq	r7, sl, r0, lsl #28
    2760:	54000300 	strpl	r0, [r0], #-768	; 0xfffffd00
    2764:	1a820493 	bne	fe0839b8 <_estack+0xde07e9b8>
    2768:	1aa80000 	bne	fea02770 <_estack+0xde9fd770>
    276c:	00030000 	andeq	r0, r3, r0
    2770:	00049354 	andeq	r9, r4, r4, asr r3
    2774:	00000000 	andeq	r0, r0, r0
    2778:	96000000 	strls	r0, [r0], -r0
    277c:	a0000018 	andge	r0, r0, r8, lsl r0
    2780:	01000018 	tsteq	r0, r8, lsl r0
    2784:	18a05900 	stmiane	r0!, {r8, fp, ip, lr}
    2788:	18a20000 	stmiane	r2!, {}	; <UNPREDICTABLE>
    278c:	00020000 	andeq	r0, r2, r0
    2790:	18a20072 	stmiane	r2!, {r1, r4, r5, r6}
    2794:	18c60000 	stmiane	r6, {}^	; <UNPREDICTABLE>
    2798:	00010000 	andeq	r0, r1, r0
    279c:	0018ce59 	andseq	ip, r8, r9, asr lr
    27a0:	0018dc00 	andseq	sp, r8, r0, lsl #24
    27a4:	59000100 	stmdbpl	r0, {r8}
    27a8:	000018dc 	ldrdeq	r1, [r0], -ip
    27ac:	00001914 	andeq	r1, r0, r4, lsl r9
    27b0:	1e580001 	cdpne	0, 5, cr0, cr8, cr1, {0}
    27b4:	2e000019 	mcrcs	0, 0, r0, cr0, cr9, {0}
    27b8:	01000019 	tsteq	r0, r9, lsl r0
    27bc:	192e5800 	stmdbne	lr!, {fp, ip, lr}
    27c0:	19360000 	ldmdbne	r6!, {}	; <UNPREDICTABLE>
    27c4:	00020000 	andeq	r0, r2, r0
    27c8:	19540172 	ldmdbne	r4, {r1, r4, r5, r6, r8}^
    27cc:	197e0000 	ldmdbne	lr!, {}^	; <UNPREDICTABLE>
    27d0:	00010000 	andeq	r0, r1, r0
    27d4:	00198258 	andseq	r8, r9, r8, asr r2
    27d8:	00198600 	andseq	r8, r9, r0, lsl #12
    27dc:	50000100 	andpl	r0, r0, r0, lsl #2
    27e0:	00001990 	muleq	r0, r0, r9
    27e4:	0000199a 	muleq	r0, sl, r9
    27e8:	ba500001 	blt	14027f4 <__ccfg+0x13e284c>
    27ec:	bc000019 	stclt	0, cr0, [r0], {25}
    27f0:	01000019 	tsteq	r0, r9, lsl r0
    27f4:	19c25000 	stmibne	r2, {ip, lr}^
    27f8:	19c40000 	stmibne	r4, {}^	; <UNPREDICTABLE>
    27fc:	00010000 	andeq	r0, r1, r0
    2800:	0019c458 	andseq	ip, r9, r8, asr r4
    2804:	0019e700 	andseq	lr, r9, r0, lsl #14
    2808:	53000100 	movwpl	r0, #256	; 0x100
    280c:	000019f6 	strdeq	r1, [r0], -r6
    2810:	000019fa 	strdeq	r1, [r0], -sl
    2814:	04590001 	ldrbeq	r0, [r9], #-1
    2818:	2400001a 	strcs	r0, [r0], #-26	; 0xffffffe6
    281c:	0100001a 	tsteq	r0, sl, lsl r0
    2820:	1a2a5900 	bne	a98c28 <__ccfg+0xa78c80>
    2824:	1a2c0000 	bne	b0282c <__ccfg+0xae2884>
    2828:	00010000 	andeq	r0, r1, r0
    282c:	001a3259 	andseq	r3, sl, r9, asr r2
    2830:	001a4000 	andseq	r4, sl, r0
    2834:	53000100 	movwpl	r0, #256	; 0x100
    2838:	00001a60 	andeq	r1, r0, r0, ror #20
    283c:	00001a69 	andeq	r1, r0, r9, ror #20
    2840:	72530001 	subsvc	r0, r3, #1
    2844:	8600001a 			; <UNDEFINED> instruction: 0x8600001a
    2848:	0100001a 	tsteq	r0, sl, lsl r0
    284c:	1a9a5800 	bne	fe698854 <_estack+0xde693854>
    2850:	1aa80000 	bne	fea02858 <_estack+0xde9fd858>
    2854:	00010000 	andeq	r0, r1, r0
    2858:	00000059 	andeq	r0, r0, r9, asr r0
    285c:	00000000 	andeq	r0, r0, r0
    2860:	00193600 	andseq	r3, r9, r0, lsl #12
    2864:	00195400 	andseq	r5, r9, r0, lsl #8
    2868:	58000100 	stmdapl	r0, {r8}
	...
    2874:	00001960 	andeq	r1, r0, r0, ror #18
    2878:	00001974 	andeq	r1, r0, r4, ror r9
    287c:	78590001 	ldmdavc	r9, {r0}^
    2880:	a6000019 			; <UNDEFINED> instruction: 0xa6000019
    2884:	01000019 	tsteq	r0, r9, lsl r0
    2888:	19ae5900 	stmibne	lr!, {r8, fp, ip, lr}
    288c:	19c20000 	stmibne	r2, {}^	; <UNPREDICTABLE>
    2890:	00010000 	andeq	r0, r1, r0
    2894:	00000059 	andeq	r0, r0, r9, asr r0
    2898:	00000000 	andeq	r0, r0, r0
    289c:	00197e00 	andseq	r7, r9, r0, lsl #28
    28a0:	0019b000 	andseq	fp, r9, r0
    28a4:	58000100 	stmdapl	r0, {r8}
    28a8:	000019b0 			; <UNDEFINED> instruction: 0x000019b0
    28ac:	000019bc 			; <UNDEFINED> instruction: 0x000019bc
    28b0:	bc530001 	mrrclt	0, 0, r0, r3, cr1
    28b4:	c2000019 	andgt	r0, r0, #25
    28b8:	01000019 	tsteq	r0, r9, lsl r0
    28bc:	00005800 	andeq	r5, r0, r0, lsl #16
    28c0:	00000000 	andeq	r0, r0, r0
    28c4:	19ec0000 	stmibne	ip!, {}^	; <UNPREDICTABLE>
    28c8:	1a320000 	bne	c828d0 <__ccfg+0xc62928>
    28cc:	00010000 	andeq	r0, r1, r0
    28d0:	0000005a 	andeq	r0, r0, sl, asr r0
    28d4:	00000000 	andeq	r0, r0, r0
    28d8:	0019f200 	andseq	pc, r9, r0, lsl #4
    28dc:	001a1c00 	andseq	r1, sl, r0, lsl #24
    28e0:	58000100 	stmdapl	r0, {r8}
    28e4:	00001a1c 	andeq	r1, r0, ip, lsl sl
    28e8:	00001a2c 	andeq	r1, r0, ip, lsr #20
    28ec:	2c530001 	mrrccs	0, 0, r0, r3, cr1
    28f0:	3200001a 	andcc	r0, r0, #26
    28f4:	0100001a 	tsteq	r0, sl, lsl r0
    28f8:	00005800 	andeq	r5, r0, r0, lsl #16
    28fc:	00000000 	andeq	r0, r0, r0
    2900:	1a400000 	bne	1002908 <__ccfg+0xfe2960>
    2904:	1a600000 	bne	180290c <__ccfg+0x17e2964>
    2908:	00010000 	andeq	r0, r1, r0
    290c:	00000058 	andeq	r0, r0, r8, asr r0
    2910:	00000000 	andeq	r0, r0, r0
    2914:	001a7200 	andseq	r7, sl, r0, lsl #4
    2918:	001a7600 	andseq	r7, sl, r0, lsl #12
    291c:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    2920:	001a7600 	andseq	r7, sl, r0, lsl #12
    2924:	001a7e00 	andseq	r7, sl, r0, lsl #28
    2928:	74000200 	strvc	r0, [r0], #-512	; 0xfffffe00
    292c:	0000007c 	andeq	r0, r0, ip, ror r0
    2930:	00000000 	andeq	r0, r0, r0
    2934:	001a8a00 	andseq	r8, sl, r0, lsl #20
    2938:	001a9800 	andseq	r9, sl, r0, lsl #16
    293c:	58000100 	stmdapl	r0, {r8}
	...
    2948:	00001af8 	strdeq	r1, [r0], -r8
    294c:	00001b14 	andeq	r1, r0, r4, lsl fp
    2950:	52500001 	subspl	r0, r0, #1
    2954:	6400001b 	strvs	r0, [r0], #-27	; 0xffffffe5
    2958:	0100001b 	tsteq	r0, fp, lsl r0
    295c:	1b645300 	blne	1917564 <__ccfg+0x18f75bc>
    2960:	1b780000 	blne	1e02968 <__ccfg+0x1de29c0>
    2964:	00010000 	andeq	r0, r1, r0
    2968:	001b7a56 	andseq	r7, fp, r6, asr sl
    296c:	001b9600 	andseq	r9, fp, r0, lsl #12
    2970:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2974:	00001ba8 	andeq	r1, r0, r8, lsr #23
    2978:	00001bb4 			; <UNDEFINED> instruction: 0x00001bb4
    297c:	b4560001 	ldrblt	r0, [r6], #-1
    2980:	ba00001b 	blt	29f4 <NOROM_OSCClockSourceSet+0x2c>
    2984:	0100001b 	tsteq	r0, fp, lsl r0
    2988:	1bc05300 	blne	ff017590 <_estack+0xdf012590>
    298c:	1bc40000 	blne	ff102994 <_estack+0xdf0fd994>
    2990:	00010000 	andeq	r0, r1, r0
    2994:	001bc453 	andseq	ip, fp, r3, asr r4
    2998:	001bd400 	andseq	sp, fp, r0, lsl #8
    299c:	5e000100 	adfpls	f0, f0, f0
    29a0:	00001bd4 	ldrdeq	r1, [r0], -r4
    29a4:	00001bea 	andeq	r1, r0, sl, ror #23
    29a8:	ea530001 	b	14c29b4 <__ccfg+0x14a2a0c>
    29ac:	f200001b 	vqadd.s8	d0, d0, d11
    29b0:	0100001b 	tsteq	r0, fp, lsl r0
    29b4:	1bf85e00 	blne	ffe1a1bc <_estack+0xdfe151bc>
    29b8:	1c140000 	ldcne	0, cr0, [r4], {-0}
    29bc:	00010000 	andeq	r0, r1, r0
    29c0:	001c1453 	andseq	r1, ip, r3, asr r4
    29c4:	001c1a00 	andseq	r1, ip, r0, lsl #20
    29c8:	5e000100 	adfpls	f0, f0, f0
    29cc:	00001c1a 	andeq	r1, r0, sl, lsl ip
    29d0:	00001c1c 	andeq	r1, r0, ip, lsl ip
    29d4:	28530001 	ldmdacs	r3, {r0}^
    29d8:	2a00001c 	bcs	2a50 <NOROM_OSCClockSourceGet+0x2c>
    29dc:	0100001c 	tsteq	r0, ip, lsl r0
    29e0:	1c2a5e00 	stcne	14, cr5, [sl], #-0
    29e4:	1c3e0000 	ldcne	0, cr0, [lr], #-0
    29e8:	00010000 	andeq	r0, r1, r0
    29ec:	001c3e53 	andseq	r3, ip, r3, asr lr
    29f0:	001c4e00 	andseq	r4, ip, r0, lsl #28
    29f4:	56000100 	strpl	r0, [r0], -r0, lsl #2
    29f8:	00001c4e 	andeq	r1, r0, lr, asr #24
    29fc:	00001c62 	andeq	r1, r0, r2, ror #24
    2a00:	70530001 	subsvc	r0, r3, r1
    2a04:	7200001c 	andvc	r0, r0, #28
    2a08:	0100001c 	tsteq	r0, ip, lsl r0
    2a0c:	1c725600 	ldclne	6, cr5, [r2], #-0
    2a10:	1c8a0000 	stcne	0, cr0, [sl], {0}
    2a14:	00010000 	andeq	r0, r1, r0
    2a18:	001c8a53 	andseq	r8, ip, r3, asr sl
    2a1c:	001ca400 	andseq	sl, ip, r0, lsl #8
    2a20:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2a24:	00001caa 	andeq	r1, r0, sl, lsr #25
    2a28:	00001ccc 	andeq	r1, r0, ip, asr #25
    2a2c:	cc530001 	mrrcgt	0, 0, r0, r3, cr1
    2a30:	de00001c 	mcrle	0, 0, r0, cr0, cr12, {0}
    2a34:	0100001c 	tsteq	r0, ip, lsl r0
    2a38:	1d045600 	stcne	6, cr5, [r4, #-0]
    2a3c:	1d080000 	stcne	0, cr0, [r8, #-0]
    2a40:	00010000 	andeq	r0, r1, r0
    2a44:	001d0853 	andseq	r0, sp, r3, asr r8
    2a48:	001d1800 	andseq	r1, sp, r0, lsl #16
    2a4c:	58000100 	stmdapl	r0, {r8}
    2a50:	00001d18 	andeq	r1, r0, r8, lsl sp
    2a54:	00001d28 	andeq	r1, r0, r8, lsr #26
    2a58:	28530001 	ldmdacs	r3, {r0}^
    2a5c:	3200001d 	andcc	r0, r0, #29
    2a60:	0100001d 	tsteq	r0, sp, lsl r0
    2a64:	1d385800 	ldcne	8, cr5, [r8, #-0]
    2a68:	1d5a0000 	ldclne	0, cr0, [sl, #-0]
    2a6c:	00010000 	andeq	r0, r1, r0
    2a70:	001d6053 	andseq	r6, sp, r3, asr r0
    2a74:	001d7000 	andseq	r7, sp, r0
    2a78:	53000100 	movwpl	r0, #256	; 0x100
    2a7c:	00001d70 	andeq	r1, r0, r0, ror sp
    2a80:	00001d8a 	andeq	r1, r0, sl, lsl #27
    2a84:	90560001 	subsls	r0, r6, r1
    2a88:	b000001d 	andlt	r0, r0, sp, lsl r0
    2a8c:	0100001d 	tsteq	r0, sp, lsl r0
    2a90:	1db05300 	ldcne	3, cr5, [r0]
    2a94:	1dc20000 	stclne	0, cr0, [r2]
    2a98:	00010000 	andeq	r0, r1, r0
    2a9c:	001dd656 	andseq	sp, sp, r6, asr r6
    2aa0:	001dda00 	andseq	sp, sp, r0, lsl #20
    2aa4:	58000100 	stmdapl	r0, {r8}
    2aa8:	00001dda 	ldrdeq	r1, [r0], -sl
    2aac:	00001dde 	ldrdeq	r1, [r0], -lr
    2ab0:	e8530001 	ldmda	r3, {r0}^
    2ab4:	ea00001d 	b	2b30 <NOROM_OSCClockSourceGet+0x10c>
    2ab8:	0100001d 	tsteq	r0, sp, lsl r0
    2abc:	1dea5800 	stclne	8, cr5, [sl]
    2ac0:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2ac4:	00010000 	andeq	r0, r1, r0
    2ac8:	001e0053 	andseq	r0, lr, r3, asr r0
    2acc:	001e1000 	andseq	r1, lr, r0
    2ad0:	56000100 	strpl	r0, [r0], -r0, lsl #2
    2ad4:	00001e10 	andeq	r1, r0, r0, lsl lr
    2ad8:	00001e26 	andeq	r1, r0, r6, lsr #28
    2adc:	30530001 	subscc	r0, r3, r1
    2ae0:	3200001e 	andcc	r0, r0, #30
    2ae4:	0100001e 	tsteq	r0, lr, lsl r0
    2ae8:	1e325600 	cfmsuba32ne	mvax0, mvax5, mvfx2, mvfx0
    2aec:	1e3a0000 	cdpne	0, 3, cr0, cr10, cr0, {0}
    2af0:	00010000 	andeq	r0, r1, r0
    2af4:	001e3e53 	andseq	r3, lr, r3, asr lr
    2af8:	001e4e00 	andseq	r4, lr, r0, lsl #28
    2afc:	53000100 	movwpl	r0, #256	; 0x100
    2b00:	00001e4e 	andeq	r1, r0, lr, asr #28
    2b04:	00001e5c 	andeq	r1, r0, ip, asr lr
    2b08:	5c560001 	mrrcpl	0, 0, r0, r6, cr1
    2b0c:	6200001e 	andvs	r0, r0, #30
    2b10:	0100001e 	tsteq	r0, lr, lsl r0
    2b14:	1e625800 	cdpne	8, 6, cr5, cr2, cr0, {0}
    2b18:	1e6e0000 	cdpne	0, 6, cr0, cr14, cr0, {0}
    2b1c:	00010000 	andeq	r0, r1, r0
    2b20:	001e6e56 	andseq	r6, lr, r6, asr lr
    2b24:	001e7600 	andseq	r7, lr, r0, lsl #12
    2b28:	50000100 	andpl	r0, r0, r0, lsl #2
    2b2c:	00001e76 	andeq	r1, r0, r6, ror lr
    2b30:	00001e88 	andeq	r1, r0, r8, lsl #29
    2b34:	00530001 	subseq	r0, r3, r1
    2b38:	00000000 	andeq	r0, r0, r0
    2b3c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2b40:	1600001a 			; <UNDEFINED> instruction: 0x1600001a
    2b44:	0100001b 	tsteq	r0, fp, lsl r0
    2b48:	1b165100 	blne	596f50 <__ccfg+0x576fa8>
    2b4c:	1b1c0000 	blne	702b54 <__ccfg+0x6e2bac>
    2b50:	00010000 	andeq	r0, r1, r0
    2b54:	001b1c56 	andseq	r1, fp, r6, asr ip
    2b58:	001b3a00 	andseq	r3, fp, r0, lsl #20
    2b5c:	51000100 	mrspl	r0, (UNDEF: 16)
    2b60:	00001b40 	andeq	r1, r0, r0, asr #22
    2b64:	00001e88 	andeq	r1, r0, r8, lsl #29
    2b68:	00510001 	subseq	r0, r1, r1
    2b6c:	00000000 	andeq	r0, r0, r0
    2b70:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    2b74:	f800001a 			; <UNDEFINED> instruction: 0xf800001a
    2b78:	0100001a 	tsteq	r0, sl, lsl r0
    2b7c:	1af85200 	bne	ffe17384 <_estack+0xdfe12384>
    2b80:	1b140000 	blne	502b88 <__ccfg+0x4e2be0>
    2b84:	00030000 	andeq	r0, r3, r0
    2b88:	ba049352 	blt	1278d8 <__ccfg+0x107930>
    2b8c:	ee00001b 	mcr	0, 0, r0, cr0, cr11, {0}
    2b90:	0100001b 	tsteq	r0, fp, lsl r0
    2b94:	1c145200 	lfmne	f5, 4, [r4], {-0}
    2b98:	1c1a0000 	ldcne	0, cr0, [sl], {-0}
    2b9c:	00010000 	andeq	r0, r1, r0
    2ba0:	001c2a52 	andseq	r2, ip, r2, asr sl
    2ba4:	001c4400 	andseq	r4, ip, r0, lsl #8
    2ba8:	52000100 	andpl	r0, r0, #0, 2
    2bac:	00001c72 	andeq	r1, r0, r2, ror ip
    2bb0:	00001c9a 	muleq	r0, sl, ip
    2bb4:	ec520001 	mrrc	0, 0, r0, r2, cr1
    2bb8:	2c00001c 	stccs	0, cr0, [r0], {28}
    2bbc:	0100001d 	tsteq	r0, sp, lsl r0
    2bc0:	1d5a5200 	lfmne	f5, 2, [sl, #-0]
    2bc4:	1d800000 	stcne	0, cr0, [r0]
    2bc8:	00010000 	andeq	r0, r1, r0
    2bcc:	001dd052 	andseq	sp, sp, r2, asr r0
    2bd0:	001dda00 	andseq	sp, sp, r0, lsl #20
    2bd4:	52000100 	andpl	r0, r0, #0, 2
    2bd8:	00001dea 	andeq	r1, r0, sl, ror #27
    2bdc:	00001e06 	andeq	r1, r0, r6, lsl #28
    2be0:	32520001 	subscc	r0, r2, #1
    2be4:	4800001e 	stmdami	r0, {r1, r2, r3, r4}
    2be8:	0100001e 	tsteq	r0, lr, lsl r0
    2bec:	1e4e5200 	cdpne	2, 4, cr5, cr14, cr0, {0}
    2bf0:	1e5c0000 	cdpne	0, 5, cr0, cr12, cr0, {0}
    2bf4:	00010000 	andeq	r0, r1, r0
    2bf8:	001e6e52 	andseq	r6, lr, r2, asr lr
    2bfc:	001e7600 	andseq	r7, lr, r0, lsl #12
    2c00:	52000100 	andpl	r0, r0, #0, 2
	...
    2c0c:	00001b76 	andeq	r1, r0, r6, ror fp
    2c10:	00001b78 	andeq	r1, r0, r8, ror fp
    2c14:	f0540001 			; <UNDEFINED> instruction: 0xf0540001
    2c18:	1400001b 	strne	r0, [r0], #-27	; 0xffffffe5
    2c1c:	0100001c 	tsteq	r0, ip, lsl r0
    2c20:	1c1a5400 	cfldrsne	mvf5, [sl], {-0}
    2c24:	1c2a0000 	stcne	0, cr0, [sl], #-0
    2c28:	00010000 	andeq	r0, r1, r0
    2c2c:	001c4654 	andseq	r4, ip, r4, asr r6
    2c30:	001c7200 	andseq	r7, ip, r0, lsl #4
    2c34:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c38:	00001c9c 	muleq	r0, ip, ip
    2c3c:	00001cec 	andeq	r1, r0, ip, ror #25
    2c40:	2e540001 	cdpcs	0, 5, cr0, cr4, cr1, {0}
    2c44:	5a00001d 	bpl	2cc0 <__exidx_end+0x40>
    2c48:	0100001d 	tsteq	r0, sp, lsl r0
    2c4c:	1d825400 	cfstrsne	mvf5, [r2]
    2c50:	1dd00000 	ldclne	0, cr0, [r0]
    2c54:	00010000 	andeq	r0, r1, r0
    2c58:	001dda54 	andseq	sp, sp, r4, asr sl
    2c5c:	001dea00 	andseq	lr, sp, r0, lsl #20
    2c60:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    2c64:	00001e08 	andeq	r1, r0, r8, lsl #28
    2c68:	00001e32 	andeq	r1, r0, r2, lsr lr
    2c6c:	4a540001 	bmi	1502c78 <__ccfg+0x14e2cd0>
    2c70:	4e00001e 	mcrmi	0, 0, r0, cr0, cr14, {0}
    2c74:	0100001e 	tsteq	r0, lr, lsl r0
    2c78:	1e765400 	cdpne	4, 7, cr5, cr6, cr0, {0}
    2c7c:	1e880000 	cdpne	0, 8, cr0, cr8, cr0, {0}
    2c80:	00010000 	andeq	r0, r1, r0
    2c84:	00000054 	andeq	r0, r0, r4, asr r0
    2c88:	00000000 	andeq	r0, r0, r0
    2c8c:	001bea00 	andseq	lr, fp, r0, lsl #20
    2c90:	001c1400 	andseq	r1, ip, r0, lsl #8
    2c94:	58000100 	stmdapl	r0, {r8}
    2c98:	00001c1a 	andeq	r1, r0, sl, lsl ip
    2c9c:	00001c2a 	andeq	r1, r0, sl, lsr #24
    2ca0:	00580001 	subseq	r0, r8, r1
    2ca4:	00000000 	andeq	r0, r0, r0
    2ca8:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2cac:	de00001c 	mcrle	0, 0, r0, cr0, cr12, {0}
    2cb0:	0100001c 	tsteq	r0, ip, lsl r0
    2cb4:	1cde5900 			; <UNDEFINED> instruction: 0x1cde5900
    2cb8:	1ce60000 	stclne	0, cr0, [r6]
    2cbc:	00010000 	andeq	r0, r1, r0
    2cc0:	00000050 	andeq	r0, r0, r0, asr r0
    2cc4:	00000000 	andeq	r0, r0, r0
    2cc8:	001d2800 	andseq	r2, sp, r0, lsl #16
    2ccc:	001d5200 	andseq	r5, sp, r0, lsl #4
    2cd0:	50000100 	andpl	r0, r0, r0, lsl #2
    2cd4:	00001dda 	ldrdeq	r1, [r0], -sl
    2cd8:	00001dea 	andeq	r1, r0, sl, ror #27
    2cdc:	00500001 	subseq	r0, r0, r1
    2ce0:	00000000 	andeq	r0, r0, r0
    2ce4:	b0000000 	andlt	r0, r0, r0
    2ce8:	c200001d 	andgt	r0, r0, #29
    2cec:	0100001d 	tsteq	r0, sp, lsl r0
    2cf0:	1dc25900 	vstrne.16	s11, [r2]	; <UNPREDICTABLE>
    2cf4:	1dca0000 	stclne	0, cr0, [sl]
    2cf8:	00010000 	andeq	r0, r1, r0
    2cfc:	00000050 	andeq	r0, r0, r0, asr r0
    2d00:	00000000 	andeq	r0, r0, r0
    2d04:	001e3e00 	andseq	r3, lr, r0, lsl #28
    2d08:	001e4e00 	andseq	r4, lr, r0, lsl #28
    2d0c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    2d18:	00001b7a 	andeq	r1, r0, sl, ror fp
    2d1c:	00001b96 	muleq	r0, r6, fp
    2d20:	605e0001 	subsvs	r0, lr, r1
    2d24:	6200001e 	andvs	r0, r0, #30
    2d28:	0100001e 	tsteq	r0, lr, lsl r0
    2d2c:	00005e00 	andeq	r5, r0, r0, lsl #28
    2d30:	00000000 	andeq	r0, r0, r0
    2d34:	1e8c0000 	cdpne	0, 8, cr0, cr12, cr0, {0}
    2d38:	1e9e0000 	cdpne	0, 9, cr0, cr14, cr0, {0}
    2d3c:	00070000 	andeq	r0, r7, r0
    2d40:	243f0070 	ldrtcs	r0, [pc], #-112	; 2d48 <__exidx_end+0xc8>
    2d44:	009f263f 	addseq	r2, pc, pc, lsr r6	; <UNPREDICTABLE>
    2d48:	00000000 	andeq	r0, r0, r0
    2d4c:	94000000 	strls	r0, [r0], #-0
    2d50:	9c00001e 	stcls	0, cr0, [r0], {30}
    2d54:	0d00001e 	stceq	0, cr0, [r0, #-120]	; 0xffffff88
    2d58:	7a807200 	bvc	fe01f560 <_estack+0xde01a560>
    2d5c:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    2d60:	341e2648 	ldrcc	r2, [lr], #-1608	; 0xfffff9b8
    2d64:	1e9c9f26 	cdpne	15, 9, cr9, cr12, cr6, {1}
    2d68:	1eb80000 	cdpne	0, 11, cr0, cr8, cr0, {0}
    2d6c:	000c0000 	andeq	r0, ip, r0
    2d70:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    2d74:	00722648 	rsbseq	r2, r2, r8, asr #12
    2d78:	9f26341e 	svcls	0x0026341e
	...
    2d8c:	00530001 	subseq	r0, r3, r1
	...
    2d9c:	01000000 	mrseq	r0, (UNDEF: 0)
    2da0:	00005000 	andeq	r5, r0, r0
    2da4:	00000000 	andeq	r0, r0, r0
    2da8:	1ee00000 	cdpne	0, 14, cr0, cr0, cr0, {0}
    2dac:	1f1e0000 	svcne	0x001e0000
    2db0:	00010000 	andeq	r0, r1, r0
    2db4:	001f1e50 	andseq	r1, pc, r0, asr lr	; <UNPREDICTABLE>
    2db8:	001f8000 	andseq	r8, pc, r0
    2dbc:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    2dc0:	00001f80 	andeq	r1, r0, r0, lsl #31
    2dc4:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
    2dc8:	01f30004 	mvnseq	r0, r4
    2dcc:	00009f50 	andeq	r9, r0, r0, asr pc
    2dd0:	00000000 	andeq	r0, r0, r0
    2dd4:	1f1c0000 	svcne	0x001c0000
    2dd8:	1f800000 	svcne	0x00800000
    2ddc:	00010000 	andeq	r0, r1, r0
    2de0:	00000054 	andeq	r0, r0, r4, asr r0
    2de4:	00000000 	andeq	r0, r0, r0
    2de8:	001f3200 	andseq	r3, pc, r0, lsl #4
    2dec:	001f3400 	andseq	r3, pc, r0, lsl #8
    2df0:	73000700 	movwvc	r0, #1792	; 0x700
    2df4:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    2df8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    2dfc:	00000000 	andeq	r0, r0, r0
    2e00:	1f420000 	svcne	0x00420000
    2e04:	1f5c0000 	svcne	0x005c0000
    2e08:	00010000 	andeq	r0, r1, r0
    2e0c:	00000053 	andeq	r0, r0, r3, asr r0
    2e10:	00000000 	andeq	r0, r0, r0
    2e14:	001f4600 	andseq	r4, pc, r0, lsl #12
    2e18:	001f5200 	andseq	r5, pc, r0, lsl #4
    2e1c:	52000100 	andpl	r0, r0, #0, 2
    2e20:	00001f52 	andeq	r1, r0, r2, asr pc
    2e24:	00001f56 	andeq	r1, r0, r6, asr pc
    2e28:	06710003 	ldrbteq	r0, [r1], -r3
    2e2c:	001f569f 	mulseq	pc, pc, r6	; <UNPREDICTABLE>
    2e30:	001f5e00 	andseq	r5, pc, r0, lsl #28
    2e34:	52000100 	andpl	r0, r0, #0, 2
	...
    2e40:	00001fba 			; <UNDEFINED> instruction: 0x00001fba
    2e44:	00002034 	andeq	r2, r0, r4, lsr r0
    2e48:	00540001 	subseq	r0, r4, r1
    2e4c:	00000000 	andeq	r0, r0, r0
    2e50:	20000000 	andcs	r0, r0, r0
    2e54:	2a000020 	bcs	2edc <__exidx_end+0x25c>
    2e58:	01000020 	tsteq	r0, r0, lsr #32
    2e5c:	00005300 	andeq	r5, r0, r0, lsl #6
    2e60:	00000000 	andeq	r0, r0, r0
    2e64:	20580000 	subscs	r0, r8, r0
    2e68:	207e0000 	rsbscs	r0, lr, r0
    2e6c:	00010000 	andeq	r0, r1, r0
    2e70:	00207e50 	eoreq	r7, r0, r0, asr lr
    2e74:	0020d400 	eoreq	sp, r0, r0, lsl #8
    2e78:	f3000400 	vshl.u8	d0, d0, d0
    2e7c:	009f5001 	addseq	r5, pc, r1
    2e80:	00000000 	andeq	r0, r0, r0
    2e84:	80000000 	andhi	r0, r0, r0
    2e88:	b4000020 	strlt	r0, [r0], #-32	; 0xffffffe0
    2e8c:	01000020 	tsteq	r0, r0, lsr #32
    2e90:	00005300 	andeq	r5, r0, r0, lsl #6
    2e94:	00000000 	andeq	r0, r0, r0
    2e98:	20840000 	addcs	r0, r4, r0
    2e9c:	20920000 	addscs	r0, r2, r0
    2ea0:	00010000 	andeq	r0, r1, r0
    2ea4:	00209251 	eoreq	r9, r0, r1, asr r2
    2ea8:	00209400 	eoreq	r9, r0, r0, lsl #8
    2eac:	72000600 	andvc	r0, r0, #0, 12
    2eb0:	1c007300 	stcne	3, cr7, [r0], {-0}
    2eb4:	0020949f 	mlaeq	r0, pc, r4, r9	; <UNPREDICTABLE>
    2eb8:	00209a00 	eoreq	r9, r0, r0, lsl #20
    2ebc:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    2ec8:	00002070 	andeq	r2, r0, r0, ror r0
    2ecc:	00002082 	andeq	r2, r0, r2, lsl #1
    2ed0:	00530001 	subseq	r0, r3, r1
    2ed4:	00000000 	andeq	r0, r0, r0
    2ed8:	d4000000 	strle	r0, [r0], #-0
    2edc:	f7000020 			; <UNDEFINED> instruction: 0xf7000020
    2ee0:	01000020 	tsteq	r0, r0, lsr #32
    2ee4:	20f75000 	rscscs	r5, r7, r0
    2ee8:	21020000 	mrscs	r0, (UNDEF: 2)
    2eec:	00010000 	andeq	r0, r1, r0
    2ef0:	00210254 	eoreq	r0, r1, r4, asr r2
    2ef4:	00210a00 	eoreq	r0, r1, r0, lsl #20
    2ef8:	50000100 	andpl	r0, r0, r0, lsl #2
    2efc:	0000210a 	andeq	r2, r0, sl, lsl #2
    2f00:	00002156 	andeq	r2, r0, r6, asr r1
    2f04:	00540001 	subseq	r0, r4, r1
    2f08:	00000000 	andeq	r0, r0, r0
    2f0c:	10000000 	andne	r0, r0, r0
    2f10:	14000021 	strne	r0, [r0], #-33	; 0xffffffdf
    2f14:	01000021 	tsteq	r0, r1, lsr #32
    2f18:	21165300 	tstcs	r6, r0, lsl #6
    2f1c:	21240000 			; <UNDEFINED> instruction: 0x21240000
    2f20:	00010000 	andeq	r0, r1, r0
    2f24:	00212653 	eoreq	r2, r1, r3, asr r6
    2f28:	00212e00 	eoreq	r2, r1, r0, lsl #28
    2f2c:	53000100 	movwpl	r0, #256	; 0x100
	...
    2f38:	00002110 	andeq	r2, r0, r0, lsl r1
    2f3c:	00002144 	andeq	r2, r0, r4, asr #2
    2f40:	00740005 	rsbseq	r0, r4, r5
    2f44:	449f264c 	ldrmi	r2, [pc], #1612	; 2f4c <__exidx_end+0x2cc>
    2f48:	80000021 	andhi	r0, r0, r1, lsr #32
    2f4c:	06000021 	streq	r0, [r0], -r1, lsr #32
    2f50:	5001f300 	andpl	pc, r1, r0, lsl #6
    2f54:	009f264c 	addseq	r2, pc, ip, asr #12
    2f58:	00000000 	andeq	r0, r0, r0
    2f5c:	0a000000 	beq	2f64 <__exidx_end+0x2e4>
    2f60:	14000021 	strne	r0, [r0], #-33	; 0xffffffdf
    2f64:	01000021 	tsteq	r0, r1, lsr #32
    2f68:	00005300 	andeq	r5, r0, r0, lsl #6
    2f6c:	00000000 	andeq	r0, r0, r0
    2f70:	21800000 	orrcs	r0, r0, r0
    2f74:	21940000 	orrscs	r0, r4, r0
    2f78:	00010000 	andeq	r0, r1, r0
    2f7c:	00219450 	eoreq	r9, r1, r0, asr r4
    2f80:	0021dc00 	eoreq	sp, r1, r0, lsl #24
    2f84:	f3000400 	vshl.u8	d0, d0, d0
    2f88:	009f5001 	addseq	r5, pc, r1
    2f8c:	00000000 	andeq	r0, r0, r0
    2f90:	86000000 	strhi	r0, [r0], -r0
    2f94:	8e000021 	cdphi	0, 0, cr0, cr0, cr1, {1}
    2f98:	01000021 	tsteq	r0, r1, lsr #32
    2f9c:	00005300 	andeq	r5, r0, r0, lsl #6
    2fa0:	00000000 	andeq	r0, r0, r0
    2fa4:	218a0000 	orrcs	r0, sl, r0
    2fa8:	219c0000 	orrscs	r0, ip, r0
    2fac:	00010000 	andeq	r0, r1, r0
    2fb0:	00219c52 	eoreq	r9, r1, r2, asr ip
    2fb4:	00219e00 	eoreq	r9, r1, r0, lsl #28
    2fb8:	72000500 	andvc	r0, r0, #0, 10
    2fbc:	9f253100 	svcls	0x00253100
    2fc0:	0000219e 	muleq	r0, lr, r1
    2fc4:	000021a4 	andeq	r2, r0, r4, lsr #3
    2fc8:	a8520001 	ldmdage	r2, {r0}^
    2fcc:	ba000021 	blt	3058 <__exidx_end+0x3d8>
    2fd0:	01000021 	tsteq	r0, r1, lsr #32
    2fd4:	21be5200 			; <UNDEFINED> instruction: 0x21be5200
    2fd8:	21c80000 	biccs	r0, r8, r0
    2fdc:	00010000 	andeq	r0, r1, r0
    2fe0:	0021ca52 	eoreq	ip, r1, r2, asr sl
    2fe4:	0021dc00 	eoreq	sp, r1, r0, lsl #24
    2fe8:	52000100 	andpl	r0, r0, #0, 2
	...
    2ff4:	0000218e 	andeq	r2, r0, lr, lsl #3
    2ff8:	00002198 	muleq	r0, r8, r1
    2ffc:	98530001 	ldmdals	r3, {r0}^
    3000:	9a000021 	bls	308c <__exidx_end+0x40c>
    3004:	05000021 	streq	r0, [r0, #-33]	; 0xffffffdf
    3008:	31007300 	mrscc	r7, LR_irq
    300c:	219a9f25 	orrscs	r9, sl, r5, lsr #30
    3010:	219c0000 	orrscs	r0, ip, r0
    3014:	00010000 	andeq	r0, r1, r0
    3018:	00219c53 	eoreq	r9, r1, r3, asr ip
    301c:	0021a800 	eoreq	sl, r1, r0, lsl #16
    3020:	0a000400 	beq	4028 <__exidx_end+0x13a8>
    3024:	a89fffff 	ldmge	pc, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}	; <UNPREDICTABLE>
    3028:	ae000021 	cdpge	0, 0, cr0, cr0, cr1, {1}
    302c:	01000021 	tsteq	r0, r1, lsr #32
    3030:	21b25300 			; <UNDEFINED> instruction: 0x21b25300
    3034:	21b80000 			; <UNDEFINED> instruction: 0x21b80000
    3038:	00010000 	andeq	r0, r1, r0
    303c:	0021b853 	eoreq	fp, r1, r3, asr r8
    3040:	0021ca00 	eoreq	ip, r1, r0, lsl #20
    3044:	31000200 	mrscc	r0, R8_usr
    3048:	0021ca9f 	mlaeq	r1, pc, sl, ip	; <UNPREDICTABLE>
    304c:	0021dc00 	eoreq	sp, r1, r0, lsl #24
    3050:	53000100 	movwpl	r0, #256	; 0x100
	...
    305c:	0000218e 	andeq	r2, r0, lr, lsl #3
    3060:	00002194 	muleq	r0, r4, r1
    3064:	9f300002 	svcls	0x00300002
    3068:	00002194 	muleq	r0, r4, r1
    306c:	000021d0 	ldrdeq	r2, [r0], -r0
    3070:	00500001 	subseq	r0, r0, r1
    3074:	00000000 	andeq	r0, r0, r0
    3078:	d0000000 	andle	r0, r0, r0
    307c:	d4000021 	strle	r0, [r0], #-33	; 0xffffffdf
    3080:	08000021 	stmdaeq	r0, {r0, r5}
    3084:	40007200 	andmi	r7, r0, r0, lsl #4
    3088:	21007324 	tstcs	r0, r4, lsr #6
    308c:	0021d49f 	mlaeq	r1, pc, r4, sp	; <UNPREDICTABLE>
    3090:	0021dc00 	eoreq	sp, r1, r0, lsl #24
    3094:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    30a0:	000021e6 	andeq	r2, r0, r6, ror #3
    30a4:	000021ea 	andeq	r2, r0, sl, ror #3
    30a8:	0070000a 	rsbseq	r0, r0, sl
    30ac:	24381a33 	ldrtcs	r1, [r8], #-2611	; 0xfffff5cd
    30b0:	9f210073 	svcls	0x00210073
    30b4:	000021ee 	andeq	r2, r0, lr, ror #3
    30b8:	000021f4 	strdeq	r2, [r0], -r4
    30bc:	00500001 	subseq	r0, r0, r1
	...
    30cc:	07000000 	streq	r0, [r0, -r0]
    30d0:	0a007000 	beq	1f0d8 <__exidx_end+0x1c458>
    30d4:	9f1a3fff 	svcls	0x001a3fff
	...
    30e0:	000021f8 	strdeq	r2, [r0], -r8
    30e4:	000021fc 	strdeq	r2, [r0], -ip
    30e8:	0070000f 	rsbseq	r0, r0, pc
    30ec:	701afc08 	andsvc	pc, sl, r8, lsl #24
    30f0:	f8801100 			; <UNDEFINED> instruction: 0xf8801100
    30f4:	211a67f3 			; <UNDEFINED> instruction: 0x211a67f3
    30f8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    30fc:	00000000 	andeq	r0, r0, r0
    3100:	0021f800 	eoreq	pc, r1, r0, lsl #16
    3104:	0021fc00 	eoreq	pc, r1, r0, lsl #24
    3108:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3114:	00002208 	andeq	r2, r0, r8, lsl #4
    3118:	0000220c 	andeq	r2, r0, ip, lsl #4
    311c:	0070000f 	rsbseq	r0, r0, pc
    3120:	701a3f08 	andsvc	r3, sl, r8, lsl #30
    3124:	ffc00c00 			; <UNDEFINED> instruction: 0xffc00c00
    3128:	211a00fc 	ldrshcs	r0, [sl, -ip]
    312c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3130:	00000000 	andeq	r0, r0, r0
    3134:	00220800 	eoreq	r0, r2, r0, lsl #16
    3138:	00220c00 	eoreq	r0, r2, r0, lsl #24
    313c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3148:	00002218 	andeq	r2, r0, r8, lsl r2
    314c:	0000226e 	andeq	r2, r0, lr, ror #4
    3150:	6e500001 	cdpvs	0, 5, cr0, cr0, cr1, {0}
    3154:	7c000022 	stcvc	0, cr0, [r0], {34}	; 0x22
    3158:	04000022 	streq	r0, [r0], #-34	; 0xffffffde
    315c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3160:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3164:	00000000 	andeq	r0, r0, r0
    3168:	00225800 	eoreq	r5, r2, r0, lsl #16
    316c:	00226000 	eoreq	r6, r2, r0
    3170:	74001700 	strvc	r1, [r0], #-1792	; 0xfffff900
    3174:	ff000a00 			; <UNDEFINED> instruction: 0xff000a00
    3178:	0800741a 	stmdaeq	r0, {r1, r3, r4, sl, ip, sp, lr}
    317c:	72211af0 	eorvc	r1, r1, #240, 20	; 0xf0000
    3180:	21244400 			; <UNDEFINED> instruction: 0x21244400
    3184:	24400073 	strbcs	r0, [r0], #-115	; 0xffffff8d
    3188:	22649f21 	rsbcs	r9, r4, #33, 30	; 0x84
    318c:	227c0000 	rsbscs	r0, ip, #0
    3190:	00010000 	andeq	r0, r1, r0
    3194:	00000053 	andeq	r0, r0, r3, asr r0
    3198:	00000000 	andeq	r0, r0, r0
    319c:	00222000 	eoreq	r2, r2, r0
    31a0:	00226a00 	eoreq	r6, r2, r0, lsl #20
    31a4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    31b0:	00002226 	andeq	r2, r0, r6, lsr #4
    31b4:	0000223a 	andeq	r2, r0, sl, lsr r2
    31b8:	3a520001 	bcc	14831c4 <__ccfg+0x146321c>
    31bc:	46000022 	strmi	r0, [r0], -r2, lsr #32
    31c0:	06000022 	streq	r0, [r0], -r2, lsr #32
    31c4:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    31c8:	589f24ec 	ldmpl	pc, {r2, r3, r5, r6, r7, sl, sp}	; <UNPREDICTABLE>
    31cc:	60000022 	andvs	r0, r0, r2, lsr #32
    31d0:	01000022 	tsteq	r0, r2, lsr #32
    31d4:	00005200 	andeq	r5, r0, r0, lsl #4
    31d8:	00000000 	andeq	r0, r0, r0
    31dc:	222e0000 	eorcs	r0, lr, #0
    31e0:	224c0000 	subcs	r0, ip, #0
    31e4:	00010000 	andeq	r0, r1, r0
    31e8:	00224c53 	eoreq	r4, r2, r3, asr ip
    31ec:	00225800 	eoreq	r5, r2, r0, lsl #16
    31f0:	74000600 	strvc	r0, [r0], #-1536	; 0xfffffa00
    31f4:	24f00900 	ldrbtcs	r0, [r0], #2304	; 0x900
    31f8:	0022589f 	mlaeq	r2, pc, r8, r5	; <UNPREDICTABLE>
    31fc:	00226400 	eoreq	r6, r2, r0, lsl #8
    3200:	53000100 	movwpl	r0, #256	; 0x100
	...
    320c:	00002238 	andeq	r2, r0, r8, lsr r2
    3210:	0000223a 	andeq	r2, r0, sl, lsr r2
    3214:	00760006 	rsbseq	r0, r6, r6
    3218:	9f220072 	svcls	0x00220072
    321c:	0000223a 	andeq	r2, r0, sl, lsr r2
    3220:	00002242 	andeq	r2, r0, r2, asr #4
    3224:	42520001 	subsmi	r0, r2, #1
    3228:	44000022 	strmi	r0, [r0], #-34	; 0xffffffde
    322c:	09000022 	stmdbeq	r0, {r1, r5}
    3230:	09007400 	stmdbeq	r0, {sl, ip, sp, lr}
    3234:	007624ec 	rsbseq	r2, r6, ip, ror #9
    3238:	22449f22 	subcs	r9, r4, #34, 30	; 0x88
    323c:	22460000 	subcs	r0, r6, #0
    3240:	00010000 	andeq	r0, r1, r0
    3244:	00224a55 	eoreq	r4, r2, r5, asr sl
    3248:	00224c00 	eoreq	r4, r2, r0, lsl #24
    324c:	71000600 	tstvc	r0, r0, lsl #12
    3250:	22007300 	andcs	r7, r0, #0, 6
    3254:	00224c9f 	mlaeq	r2, pc, ip, r4	; <UNPREDICTABLE>
    3258:	00225400 	eoreq	r5, r2, r0, lsl #8
    325c:	53000100 	movwpl	r0, #256	; 0x100
    3260:	00002254 	andeq	r2, r0, r4, asr r2
    3264:	00002256 	andeq	r2, r0, r6, asr r2
    3268:	00740009 	rsbseq	r0, r4, r9
    326c:	7124f009 	msrvc	CPSR_s, r9
    3270:	569f2200 	ldrpl	r2, [pc], r0, lsl #4
    3274:	58000022 	stmdapl	r0, {r1, r5}
    3278:	02000022 	andeq	r0, r0, #34	; 0x22
    327c:	009f3000 	addseq	r3, pc, r0
    3280:	00000000 	andeq	r0, r0, r0
    3284:	7c000000 	stcvc	0, cr0, [r0], {-0}
    3288:	84000022 	strhi	r0, [r0], #-34	; 0xffffffde
    328c:	01000022 	tsteq	r0, r2, lsr #32
    3290:	22845000 	addcs	r5, r4, #0
    3294:	22900000 	addscs	r0, r0, #0
    3298:	00040000 	andeq	r0, r4, r0
    329c:	9f5001f3 	svcls	0x005001f3
	...
    32a8:	0000227c 	andeq	r2, r0, ip, ror r2
    32ac:	0000228a 	andeq	r2, r0, sl, lsl #5
    32b0:	9f300002 	svcls	0x00300002
    32b4:	0000228a 	andeq	r2, r0, sl, lsl #5
    32b8:	00002290 	muleq	r0, r0, r2
    32bc:	00500001 	subseq	r0, r0, r1
    32c0:	00000000 	andeq	r0, r0, r0
    32c4:	7e000000 	cdpvc	0, 0, cr0, cr0, cr0, {0}
    32c8:	84000022 	strhi	r0, [r0], #-34	; 0xffffffde
    32cc:	01000022 	tsteq	r0, r2, lsr #32
    32d0:	22845000 	addcs	r5, r4, #0
    32d4:	22900000 	addscs	r0, r0, #0
    32d8:	00040000 	andeq	r0, r4, r0
    32dc:	9f5001f3 	svcls	0x005001f3
	...
    32e8:	00002288 	andeq	r2, r0, r8, lsl #5
    32ec:	0000228a 	andeq	r2, r0, sl, lsl #5
    32f0:	00500001 	subseq	r0, r0, r1
    32f4:	00000000 	andeq	r0, r0, r0
    32f8:	90000000 	andls	r0, r0, r0
    32fc:	98000022 	stmdals	r0, {r1, r5}
    3300:	01000022 	tsteq	r0, r2, lsr #32
    3304:	22985000 	addscs	r5, r8, #0
    3308:	22a40000 	adccs	r0, r4, #0
    330c:	00040000 	andeq	r0, r4, r0
    3310:	9f5001f3 	svcls	0x005001f3
	...
    331c:	00002290 	muleq	r0, r0, r2
    3320:	0000229e 	muleq	r0, lr, r2
    3324:	9f310002 	svcls	0x00310002
    3328:	0000229e 	muleq	r0, lr, r2
    332c:	000022a4 	andeq	r2, r0, r4, lsr #5
    3330:	00500001 	subseq	r0, r0, r1
    3334:	00000000 	andeq	r0, r0, r0
    3338:	92000000 	andls	r0, r0, #0
    333c:	98000022 	stmdals	r0, {r1, r5}
    3340:	01000022 	tsteq	r0, r2, lsr #32
    3344:	22985000 	addscs	r5, r8, #0
    3348:	22a40000 	adccs	r0, r4, #0
    334c:	00040000 	andeq	r0, r4, r0
    3350:	9f5001f3 	svcls	0x005001f3
	...
    335c:	0000229c 	muleq	r0, ip, r2
    3360:	0000229e 	muleq	r0, lr, r2
    3364:	00500001 	subseq	r0, r0, r1
    3368:	00000000 	andeq	r0, r0, r0
    336c:	a4000000 	strge	r0, [r0], #-0
    3370:	ac000022 	stcge	0, cr0, [r0], {34}	; 0x22
    3374:	01000022 	tsteq	r0, r2, lsr #32
    3378:	22ac5000 	adccs	r5, ip, #0
    337c:	22b80000 	adcscs	r0, r8, #0
    3380:	00040000 	andeq	r0, r4, r0
    3384:	9f5001f3 	svcls	0x005001f3
	...
    3390:	000022a4 	andeq	r2, r0, r4, lsr #5
    3394:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
    3398:	9f310002 	svcls	0x00310002
    339c:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
    33a0:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    33a4:	00500001 	subseq	r0, r0, r1
    33a8:	00000000 	andeq	r0, r0, r0
    33ac:	a6000000 	strge	r0, [r0], -r0
    33b0:	ac000022 	stcge	0, cr0, [r0], {34}	; 0x22
    33b4:	01000022 	tsteq	r0, r2, lsr #32
    33b8:	22ac5000 	adccs	r5, ip, #0
    33bc:	22b80000 	adcscs	r0, r8, #0
    33c0:	00040000 	andeq	r0, r4, r0
    33c4:	9f5001f3 	svcls	0x005001f3
	...
    33d0:	000022b0 			; <UNDEFINED> instruction: 0x000022b0
    33d4:	000022b2 			; <UNDEFINED> instruction: 0x000022b2
    33d8:	00500001 	subseq	r0, r0, r1
    33dc:	00000000 	andeq	r0, r0, r0
    33e0:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    33e4:	c4000022 	strgt	r0, [r0], #-34	; 0xffffffde
    33e8:	01000022 	tsteq	r0, r2, lsr #32
    33ec:	22c45000 	sbccs	r5, r4, #0
    33f0:	22e00000 	rsccs	r0, r0, #0
    33f4:	00040000 	andeq	r0, r4, r0
    33f8:	9f5001f3 	svcls	0x005001f3
	...
    3404:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
    3408:	000022da 	ldrdeq	r2, [r0], -sl
    340c:	9f300002 	svcls	0x00300002
    3410:	000022da 	ldrdeq	r2, [r0], -sl
    3414:	000022e0 	andeq	r2, r0, r0, ror #5
    3418:	00500001 	subseq	r0, r0, r1
    341c:	00000000 	andeq	r0, r0, r0
    3420:	ba000000 	blt	3428 <__exidx_end+0x7a8>
    3424:	c4000022 	strgt	r0, [r0], #-34	; 0xffffffde
    3428:	01000022 	tsteq	r0, r2, lsr #32
    342c:	22c45000 	sbccs	r5, r4, #0
    3430:	22e00000 	rsccs	r0, r0, #0
    3434:	00040000 	andeq	r0, r4, r0
    3438:	9f5001f3 	svcls	0x005001f3
	...
    3444:	000022cc 	andeq	r2, r0, ip, asr #5
    3448:	000022d4 	ldrdeq	r2, [r0], -r4
    344c:	00730010 	rsbseq	r0, r3, r0, lsl r0
    3450:	1a24464c 	bne	914d88 <__ccfg+0x8f4de0>
    3454:	24322548 	ldrtcs	r2, [r2], #-1352	; 0xfffffab8
    3458:	24380072 	ldrtcs	r0, [r8], #-114	; 0xffffff8e
    345c:	22d69f21 	sbcscs	r9, r6, #33, 30	; 0x84
    3460:	22da0000 	sbcscs	r0, sl, #0
    3464:	00010000 	andeq	r0, r1, r0
    3468:	00000050 	andeq	r0, r0, r0, asr r0
    346c:	00000000 	andeq	r0, r0, r0
    3470:	0022c000 	eoreq	ip, r2, r0
    3474:	0022d400 	eoreq	sp, r2, r0, lsl #8
    3478:	53000100 	movwpl	r0, #256	; 0x100
	...
    3484:	000022e4 	andeq	r2, r0, r4, ror #5
    3488:	000022e8 	andeq	r2, r0, r8, ror #5
    348c:	00700009 	rsbseq	r0, r0, r9
    3490:	1a244048 	bne	9135b8 <__ccfg+0x8f3610>
    3494:	009f2543 	addseq	r2, pc, r3, asr #10
    3498:	00000000 	andeq	r0, r0, r0
    349c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    34a0:	fc000022 	stc2	0, cr0, [r0], {34}	; 0x22
    34a4:	01000022 	tsteq	r0, r2, lsr #32
    34a8:	22fc5000 	rscscs	r5, ip, #0
    34ac:	231c0000 	tstcs	ip, #0
    34b0:	00040000 	andeq	r0, r4, r0
    34b4:	9f5001f3 	svcls	0x005001f3
	...
    34c0:	000022f0 	strdeq	r2, [r0], -r0
    34c4:	00002312 	andeq	r2, r0, r2, lsl r3
    34c8:	000c0006 	andeq	r0, ip, r6
    34cc:	9f403f80 	svcls	0x00403f80
    34d0:	00002312 	andeq	r2, r0, r2, lsl r3
    34d4:	0000231c 	andeq	r2, r0, ip, lsl r3
    34d8:	00500001 	subseq	r0, r0, r1
    34dc:	00000000 	andeq	r0, r0, r0
    34e0:	f2000000 	vhadd.s8	d0, d0, d0
    34e4:	fc000022 	stc2	0, cr0, [r0], {34}	; 0x22
    34e8:	01000022 	tsteq	r0, r2, lsr #32
    34ec:	22fc5000 	rscscs	r5, ip, #0
    34f0:	231c0000 	tstcs	ip, #0
    34f4:	00040000 	andeq	r0, r4, r0
    34f8:	9f5001f3 	svcls	0x005001f3
	...
    3504:	00002300 	andeq	r2, r0, r0, lsl #6
    3508:	00002306 	andeq	r2, r0, r6, lsl #6
    350c:	00730010 	rsbseq	r0, r3, r0, lsl r0
    3510:	1a03f00a 	bne	ff540 <__ccfg+0xdf598>
    3514:	24402534 	strbcs	r2, [r0], #-1332	; 0xfffffacc
    3518:	24460072 	strbcs	r0, [r6], #-114	; 0xffffff8e
    351c:	23109f21 	tstcs	r0, #33, 30	; 0x84
    3520:	23120000 	tstcs	r2, #0
    3524:	00010000 	andeq	r0, r1, r0
    3528:	00000050 	andeq	r0, r0, r0, asr r0
    352c:	00000000 	andeq	r0, r0, r0
    3530:	0022f800 	eoreq	pc, r2, r0, lsl #16
    3534:	00230600 	eoreq	r0, r3, r0, lsl #12
    3538:	53000100 	movwpl	r0, #256	; 0x100
	...
    3544:	0000231c 	andeq	r2, r0, ip, lsl r3
    3548:	00002324 	andeq	r2, r0, r4, lsr #6
    354c:	24500001 	ldrbcs	r0, [r0], #-1
    3550:	30000023 	andcc	r0, r0, r3, lsr #32
    3554:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3558:	5001f300 	andpl	pc, r1, r0, lsl #6
    355c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3560:	00000000 	andeq	r0, r0, r0
    3564:	00231c00 	eoreq	r1, r3, r0, lsl #24
    3568:	00232a00 	eoreq	r2, r3, r0, lsl #20
    356c:	30000200 	andcc	r0, r0, r0, lsl #4
    3570:	00232a9f 	mlaeq	r3, pc, sl, r2	; <UNPREDICTABLE>
    3574:	00233000 	eoreq	r3, r3, r0
    3578:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3584:	0000231e 	andeq	r2, r0, lr, lsl r3
    3588:	00002324 	andeq	r2, r0, r4, lsr #6
    358c:	24500001 	ldrbcs	r0, [r0], #-1
    3590:	30000023 	andcc	r0, r0, r3, lsr #32
    3594:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    3598:	5001f300 	andpl	pc, r1, r0, lsl #6
    359c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35a0:	00000000 	andeq	r0, r0, r0
    35a4:	00232800 	eoreq	r2, r3, r0, lsl #16
    35a8:	00232a00 	eoreq	r2, r3, r0, lsl #20
    35ac:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    35b8:	00002330 	andeq	r2, r0, r0, lsr r3
    35bc:	00002338 	andeq	r2, r0, r8, lsr r3
    35c0:	38500001 	ldmdacc	r0, {r0}^
    35c4:	44000023 	strmi	r0, [r0], #-35	; 0xffffffdd
    35c8:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    35cc:	5001f300 	andpl	pc, r1, r0, lsl #6
    35d0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    35d4:	00000000 	andeq	r0, r0, r0
    35d8:	00233000 	eoreq	r3, r3, r0
    35dc:	00233e00 	eoreq	r3, r3, r0, lsl #28
    35e0:	30000200 	andcc	r0, r0, r0, lsl #4
    35e4:	00233e9f 	mlaeq	r3, pc, lr, r3	; <UNPREDICTABLE>
    35e8:	00234400 	eoreq	r4, r3, r0, lsl #8
    35ec:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    35f8:	00002332 	andeq	r2, r0, r2, lsr r3
    35fc:	00002338 	andeq	r2, r0, r8, lsr r3
    3600:	38500001 	ldmdacc	r0, {r0}^
    3604:	44000023 	strmi	r0, [r0], #-35	; 0xffffffdd
    3608:	04000023 	streq	r0, [r0], #-35	; 0xffffffdd
    360c:	5001f300 	andpl	pc, r1, r0, lsl #6
    3610:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3614:	00000000 	andeq	r0, r0, r0
    3618:	00233c00 	eoreq	r3, r3, r0, lsl #24
    361c:	00233e00 	eoreq	r3, r3, r0, lsl #28
    3620:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    362c:	00002344 	andeq	r2, r0, r4, asr #6
    3630:	0000234a 	andeq	r2, r0, sl, asr #6
    3634:	4a500001 	bmi	1403640 <__ccfg+0x13e3698>
    3638:	34000023 	strcc	r0, [r0], #-35	; 0xffffffdd
    363c:	01000024 	tsteq	r0, r4, lsr #32
    3640:	24345500 	ldrtcs	r5, [r4], #-1280	; 0xfffffb00
    3644:	24540000 	ldrbcs	r0, [r4], #-0
    3648:	00040000 	andeq	r0, r4, r0
    364c:	9f5001f3 	svcls	0x005001f3
	...
    3658:	00002344 	andeq	r2, r0, r4, asr #6
    365c:	0000234d 	andeq	r2, r0, sp, asr #6
    3660:	4d510001 	ldclmi	0, cr0, [r1, #-4]
    3664:	54000023 	strpl	r0, [r0], #-35	; 0xffffffdd
    3668:	04000024 	streq	r0, [r0], #-36	; 0xffffffdc
    366c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3670:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3674:	00000000 	andeq	r0, r0, r0
    3678:	00235200 	eoreq	r5, r3, r0, lsl #4
    367c:	00235600 	eoreq	r5, r3, r0, lsl #12
    3680:	50000100 	andpl	r0, r0, r0, lsl #2
    3684:	00002356 	andeq	r2, r0, r6, asr r3
    3688:	00002359 	andeq	r2, r0, r9, asr r3
    368c:	5e520001 	cdppl	0, 5, cr0, cr2, cr1, {0}
    3690:	62000023 	andvs	r0, r0, #35	; 0x23
    3694:	01000023 	tsteq	r0, r3, lsr #32
    3698:	238c5000 	orrcs	r5, ip, #0
    369c:	238e0000 	orrcs	r0, lr, #0
    36a0:	00010000 	andeq	r0, r1, r0
    36a4:	00238e50 	eoreq	r8, r3, r0, asr lr
    36a8:	00239100 	eoreq	r9, r3, r0, lsl #2
    36ac:	52000100 	andpl	r0, r0, #0, 2
    36b0:	0000239a 	muleq	r0, sl, r3
    36b4:	0000239c 	muleq	r0, ip, r3
    36b8:	9c500001 	mrrcls	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    36bc:	9f000023 	svcls	0x00000023
    36c0:	01000023 	tsteq	r0, r3, lsr #32
    36c4:	23aa5200 			; <UNDEFINED> instruction: 0x23aa5200
    36c8:	23ac0000 			; <UNDEFINED> instruction: 0x23ac0000
    36cc:	00010000 	andeq	r0, r1, r0
    36d0:	0023ac50 	eoreq	sl, r3, r0, asr ip
    36d4:	0023af00 	eoreq	sl, r3, r0, lsl #30
    36d8:	52000100 	andpl	r0, r0, #0, 2
    36dc:	000023b6 			; <UNDEFINED> instruction: 0x000023b6
    36e0:	000023b8 			; <UNDEFINED> instruction: 0x000023b8
    36e4:	c8500001 	ldmdagt	r0, {r0}^
    36e8:	cc000023 	stcgt	0, cr0, [r0], {35}	; 0x23
    36ec:	01000023 	tsteq	r0, r3, lsr #32
    36f0:	23da5000 	bicscs	r5, sl, #0
    36f4:	23dc0000 	bicscs	r0, ip, #0
    36f8:	00010000 	andeq	r0, r1, r0
    36fc:	0023dc50 	eoreq	sp, r3, r0, asr ip
    3700:	0023df00 	eoreq	sp, r3, r0, lsl #30
    3704:	52000100 	andpl	r0, r0, #0, 2
    3708:	000023e6 	andeq	r2, r0, r6, ror #7
    370c:	000023e8 	andeq	r2, r0, r8, ror #7
    3710:	f8500001 			; <UNDEFINED> instruction: 0xf8500001
    3714:	fa000023 	blx	37a8 <__exidx_end+0xb28>
    3718:	01000023 	tsteq	r0, r3, lsr #32
    371c:	240a5000 	strcs	r5, [sl], #-0
    3720:	240e0000 	strcs	r0, [lr], #-0
    3724:	00010000 	andeq	r0, r1, r0
    3728:	00242250 	eoreq	r2, r4, r0, asr r2
    372c:	00242400 	eoreq	r2, r4, r0, lsl #8
    3730:	50000100 	andpl	r0, r0, r0, lsl #2
    3734:	00002424 	andeq	r2, r0, r4, lsr #8
    3738:	00002427 	andeq	r2, r0, r7, lsr #8
    373c:	00520001 	subseq	r0, r2, r1
    3740:	00000000 	andeq	r0, r0, r0
    3744:	7a000000 	bvc	374c <__exidx_end+0xacc>
    3748:	80000023 	andhi	r0, r0, r3, lsr #32
    374c:	07000023 	streq	r0, [r0, -r3, lsr #32]
    3750:	0a007200 	beq	1ff58 <__exidx_end+0x1d2d8>
    3754:	9f1a3fff 	svcls	0x001a3fff
	...
    3760:	0000246e 	andeq	r2, r0, lr, ror #8
    3764:	00002478 	andeq	r2, r0, r8, ror r4
    3768:	00730009 	rsbseq	r0, r3, r9
    376c:	0000040c 	andeq	r0, r0, ip, lsl #8
    3770:	009f2120 	addseq	r2, pc, r0, lsr #2
    3774:	00000000 	andeq	r0, r0, r0
    3778:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    377c:	c0000024 	andgt	r0, r0, r4, lsr #32
    3780:	01000024 	tsteq	r0, r4, lsr #32
    3784:	24c05000 	strbcs	r5, [r0], #0
    3788:	24e00000 	strbtcs	r0, [r0], #0
    378c:	00040000 	andeq	r0, r4, r0
    3790:	9f5001f3 	svcls	0x005001f3
	...
    379c:	000024e0 	andeq	r2, r0, r0, ror #9
    37a0:	00002508 	andeq	r2, r0, r8, lsl #10
    37a4:	08500001 	ldmdaeq	r0, {r0}^
    37a8:	48000025 	stmdami	r0, {r0, r2, r5}
    37ac:	01000025 	tsteq	r0, r5, lsr #32
    37b0:	25485400 	strbcs	r5, [r8, #-1024]	; 0xfffffc00
    37b4:	25500000 	ldrbcs	r0, [r0, #-0]
    37b8:	00010000 	andeq	r0, r1, r0
    37bc:	00255050 	eoreq	r5, r5, r0, asr r0
    37c0:	00259a00 	eoreq	r9, r5, r0, lsl #20
    37c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    37c8:	0000259a 	muleq	r0, sl, r5
    37cc:	000025d6 	ldrdeq	r2, [r0], -r6
    37d0:	01f30004 	mvnseq	r0, r4
    37d4:	25d69f50 	ldrbcs	r9, [r6, #3920]	; 0xf50
    37d8:	25da0000 	ldrbcs	r0, [sl]
    37dc:	00010000 	andeq	r0, r1, r0
    37e0:	0025da54 	eoreq	sp, r5, r4, asr sl
    37e4:	00263000 	eoreq	r3, r6, r0
    37e8:	f3000400 	vshl.u8	d0, d0, d0
    37ec:	009f5001 	addseq	r5, pc, r1
    37f0:	00000000 	andeq	r0, r0, r0
    37f4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    37f8:	38000024 	stmdacc	r0, {r2, r5}
    37fc:	01000025 	tsteq	r0, r5, lsr #32
    3800:	00005300 	andeq	r5, r0, r0, lsl #6
    3804:	00000000 	andeq	r0, r0, r0
    3808:	256a0000 	strbcs	r0, [sl, #-0]!
    380c:	25700000 	ldrbcs	r0, [r0, #-0]!
    3810:	00010000 	andeq	r0, r1, r0
    3814:	00000050 	andeq	r0, r0, r0, asr r0
    3818:	00000000 	andeq	r0, r0, r0
    381c:	00259a00 	eoreq	r9, r5, r0, lsl #20
    3820:	00259c00 	eoreq	r9, r5, r0, lsl #24
    3824:	50000100 	andpl	r0, r0, r0, lsl #2
    3828:	0000259c 	muleq	r0, ip, r5
    382c:	000025b0 			; <UNDEFINED> instruction: 0x000025b0
    3830:	00540001 	subseq	r0, r4, r1
    3834:	00000000 	andeq	r0, r0, r0
    3838:	b0000000 	andlt	r0, r0, r0
    383c:	d0000025 	andle	r0, r0, r5, lsr #32
    3840:	01000025 	tsteq	r0, r5, lsr #32
    3844:	00005400 	andeq	r5, r0, r0, lsl #8
	...
    3854:	00010000 	andeq	r0, r1, r0
    3858:	00000055 	andeq	r0, r0, r5, asr r0
    385c:	00000000 	andeq	r0, r0, r0
    3860:	75000300 	strvc	r0, [r0, #-768]	; 0xfffffd00
    3864:	00009f7f 	andeq	r9, r0, pc, ror pc
    3868:	00000000 	andeq	r0, r0, r0
    386c:	00010000 	andeq	r0, r1, r0
    3870:	00000055 	andeq	r0, r0, r5, asr r0
    3874:	00000000 	andeq	r0, r0, r0
    3878:	00263000 	eoreq	r3, r6, r0
    387c:	00264f00 	eoreq	r4, r6, r0, lsl #30
    3880:	50000100 	andpl	r0, r0, r0, lsl #2
    3884:	0000264f 	andeq	r2, r0, pc, asr #12
    3888:	00002710 	andeq	r2, r0, r0, lsl r7
    388c:	10570001 	subsne	r0, r7, r1
    3890:	50000027 	andpl	r0, r0, r7, lsr #32
    3894:	04000028 	streq	r0, [r0], #-40	; 0xffffffd8
    3898:	5001f300 	andpl	pc, r1, r0, lsl #6
    389c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    38a0:	00000000 	andeq	r0, r0, r0
    38a4:	00265000 	eoreq	r5, r6, r0
    38a8:	0027d000 	eoreq	sp, r7, r0
    38ac:	50000100 	andpl	r0, r0, r0, lsl #2
    38b0:	000027d2 	ldrdeq	r2, [r0], -r2	; <UNPREDICTABLE>
    38b4:	0000280c 	andeq	r2, r0, ip, lsl #16
    38b8:	00500001 	subseq	r0, r0, r1
    38bc:	00000000 	andeq	r0, r0, r0
    38c0:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    38c4:	fc000026 	stc2	0, cr0, [r0], {38}	; 0x26
    38c8:	03000026 	movweq	r0, #38	; 0x26
    38cc:	9f717000 	svcls	0x00717000
    38d0:	000026fc 	strdeq	r2, [r0], -ip
    38d4:	00002702 	andeq	r2, r0, r2, lsl #14
    38d8:	02510001 	subseq	r0, r1, #1
    38dc:	22000027 	andcs	r0, r0, #39	; 0x27
    38e0:	02000027 	andeq	r0, r0, #39	; 0x27
    38e4:	22549100 	subscs	r9, r4, #0, 2
    38e8:	2e000027 	cdpcs	0, 0, cr0, cr0, cr7, {1}
    38ec:	01000027 	tsteq	r0, r7, lsr #32
    38f0:	272e5100 	strcs	r5, [lr, -r0, lsl #2]!
    38f4:	27300000 	ldrcs	r0, [r0, -r0]!
    38f8:	00020000 	andeq	r0, r2, r0
    38fc:	27305491 			; <UNDEFINED> instruction: 0x27305491
    3900:	27320000 	ldrcs	r0, [r2, -r0]!
    3904:	00010000 	andeq	r0, r1, r0
    3908:	00273251 	eoreq	r3, r7, r1, asr r2
    390c:	0027d800 	eoreq	sp, r7, r0, lsl #16
    3910:	91000200 	mrsls	r0, R8_usr
    3914:	00000054 	andeq	r0, r0, r4, asr r0
    3918:	00000000 	andeq	r0, r0, r0
    391c:	00265c00 	eoreq	r5, r6, r0, lsl #24
    3920:	0026b600 	eoreq	fp, r6, r0, lsl #12
    3924:	51000100 	mrspl	r0, (UNDEF: 16)
    3928:	000026be 			; <UNDEFINED> instruction: 0x000026be
    392c:	000026c0 	andeq	r2, r0, r0, asr #13
    3930:	00510001 	subseq	r0, r1, r1
    3934:	00000000 	andeq	r0, r0, r0
    3938:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    393c:	bc000026 	stclt	0, cr0, [r0], {38}	; 0x26
    3940:	01000026 	tsteq	r0, r6, lsr #32
    3944:	26be5200 	ldrtcs	r5, [lr], r0, lsl #4
    3948:	27a00000 	strcs	r0, [r0, r0]!
    394c:	00010000 	andeq	r0, r1, r0
    3950:	00000052 	andeq	r0, r0, r2, asr r0
    3954:	00000000 	andeq	r0, r0, r0
    3958:	0026ae00 	eoreq	sl, r6, r0, lsl #28
    395c:	00279600 	eoreq	r9, r7, r0, lsl #12
    3960:	53000100 	movwpl	r0, #256	; 0x100
	...
    396c:	00002654 	andeq	r2, r0, r4, asr r6
    3970:	000027aa 	andeq	r2, r0, sl, lsr #15
    3974:	00550001 	subseq	r0, r5, r1
    3978:	00000000 	andeq	r0, r0, r0
    397c:	50000000 	andpl	r0, r0, r0
    3980:	d8000026 	stmdale	r0, {r1, r2, r5}
    3984:	02000026 	andeq	r0, r0, #38	; 0x26
    3988:	d89f3000 	ldmle	pc, {ip, sp}	; <UNPREDICTABLE>
    398c:	0c000026 	stceq	0, cr0, [r0], {38}	; 0x26
    3990:	01000028 	tsteq	r0, r8, lsr #32
    3994:	00005400 	andeq	r5, r0, r0, lsl #8
    3998:	00000000 	andeq	r0, r0, r0
    399c:	26d00000 	ldrbcs	r0, [r0], r0
    39a0:	26da0000 	ldrbcs	r0, [sl], r0
    39a4:	00010000 	andeq	r0, r1, r0
    39a8:	00000051 	andeq	r0, r0, r1, asr r0
    39ac:	00000000 	andeq	r0, r0, r0
    39b0:	0026f800 	eoreq	pc, r6, r0, lsl #16
    39b4:	00274800 	eoreq	r4, r7, r0, lsl #16
    39b8:	30000200 	andcc	r0, r0, r0, lsl #4
    39bc:	0027489f 	mlaeq	r7, pc, r8, r4	; <UNPREDICTABLE>
    39c0:	00276800 	eoreq	r6, r7, r0, lsl #16
    39c4:	51000100 	mrspl	r0, (UNDEF: 16)
    39c8:	00002768 	andeq	r2, r0, r8, ror #14
    39cc:	0000276e 	andeq	r2, r0, lr, ror #14
    39d0:	9f300002 	svcls	0x00300002
    39d4:	0000276e 	andeq	r2, r0, lr, ror #14
    39d8:	000027a8 	andeq	r2, r0, r8, lsr #15
    39dc:	00510001 	subseq	r0, r1, r1
    39e0:	00000000 	andeq	r0, r0, r0
    39e4:	24000000 	strcs	r0, [r0], #-0
    39e8:	28000027 	stmdacs	r0, {r0, r1, r2, r5}
    39ec:	01000027 	tsteq	r0, r7, lsr #32
    39f0:	27305e00 	ldrcs	r5, [r0, -r0, lsl #28]!
    39f4:	27320000 	ldrcs	r0, [r2, -r0]!
    39f8:	00010000 	andeq	r0, r1, r0
    39fc:	0027325e 	eoreq	r3, r7, lr, asr r2
    3a00:	00273800 	eoreq	r3, r7, r0, lsl #16
    3a04:	51000100 	mrspl	r0, (UNDEF: 16)
    3a08:	00002738 	andeq	r2, r0, r8, lsr r7
    3a0c:	00002740 	andeq	r2, r0, r0, asr #14
    3a10:	7f710003 	svcvc	0x00710003
    3a14:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3a18:	00000000 	andeq	r0, r0, r0
    3a1c:	0026f800 	eoreq	pc, r6, r0, lsl #16
    3a20:	00272200 	eoreq	r2, r7, r0, lsl #4
    3a24:	30000200 	andcc	r0, r0, r0, lsl #4
    3a28:	0027229f 	mlaeq	r7, pc, r2, r2	; <UNPREDICTABLE>
    3a2c:	00272c00 	eoreq	r2, r7, r0, lsl #24
    3a30:	5e000100 	adfpls	f0, f0, f0
    3a34:	0000272c 	andeq	r2, r0, ip, lsr #14
    3a38:	0000272e 	andeq	r2, r0, lr, lsr #14
    3a3c:	00710005 	rsbseq	r0, r1, r5
    3a40:	2e9f2638 	mrccs	6, 4, r2, cr15, cr8, {1}
    3a44:	30000027 	andcc	r0, r0, r7, lsr #32
    3a48:	06000027 	streq	r0, [r0], -r7, lsr #32
    3a4c:	06549100 	ldrbeq	r9, [r4], -r0, lsl #2
    3a50:	309f2638 	addscc	r2, pc, r8, lsr r6	; <UNPREDICTABLE>
    3a54:	32000027 	andcc	r0, r0, #39	; 0x27
    3a58:	01000027 	tsteq	r0, r7, lsr #32
    3a5c:	27325e00 	ldrcs	r5, [r2, -r0, lsl #28]!
    3a60:	27680000 	strbcs	r0, [r8, -r0]!
    3a64:	00060000 	andeq	r0, r6, r0
    3a68:	38065491 	stmdacc	r6, {r0, r4, r7, sl, ip, lr}
    3a6c:	27689f26 	strbcs	r9, [r8, -r6, lsr #30]!
    3a70:	276e0000 	strbcs	r0, [lr, -r0]!
    3a74:	00020000 	andeq	r0, r2, r0
    3a78:	276e9f30 			; <UNDEFINED> instruction: 0x276e9f30
    3a7c:	27d80000 	ldrbcs	r0, [r8, r0]
    3a80:	00010000 	andeq	r0, r1, r0
    3a84:	0000005e 	andeq	r0, r0, lr, asr r0
    3a88:	00000000 	andeq	r0, r0, r0
    3a8c:	00274400 	eoreq	r4, r7, r0, lsl #8
    3a90:	00276800 	eoreq	r6, r7, r0, lsl #16
    3a94:	5c000100 	stfpls	f0, [r0], {-0}
	...
    3aa0:	00002772 	andeq	r2, r0, r2, ror r7
    3aa4:	000027d8 	ldrdeq	r2, [r0], -r8
    3aa8:	005a0001 	subseq	r0, sl, r1
    3aac:	00000000 	andeq	r0, r0, r0
    3ab0:	76000000 	strvc	r0, [r0], -r0
    3ab4:	b2000027 	andlt	r0, r0, #39	; 0x27
    3ab8:	01000027 	tsteq	r0, r7, lsr #32
    3abc:	27b25c00 	ldrcs	r5, [r2, r0, lsl #24]!
    3ac0:	27b60000 	ldrcs	r0, [r6, r0]!
    3ac4:	00010000 	andeq	r0, r1, r0
    3ac8:	00000051 	andeq	r0, r0, r1, asr r0
    3acc:	00000000 	andeq	r0, r0, r0
    3ad0:	0027b600 	eoreq	fp, r7, r0, lsl #12
    3ad4:	0027c000 	eoreq	ip, r7, r0
    3ad8:	71001700 	tstvc	r0, r0, lsl #14
    3adc:	4b401200 	blmi	10082e4 <__ccfg+0xfe833c>
    3ae0:	ff0a2224 			; <UNDEFINED> instruction: 0xff0a2224
    3ae4:	401416ff 			; <UNDEFINED> instruction: 0x401416ff
    3ae8:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    3aec:	16000128 	strne	r0, [r0], -r8, lsr #2
    3af0:	00009f13 	andeq	r9, r0, r3, lsl pc
    3af4:	00000000 	andeq	r0, r0, r0
    3af8:	27e00000 	strbcs	r0, [r0, r0]!
    3afc:	27ec0000 	strbcs	r0, [ip, r0]!
    3b00:	00020000 	andeq	r0, r2, r0
    3b04:	27ec9f30 			; <UNDEFINED> instruction: 0x27ec9f30
    3b08:	280c0000 	stmdacs	ip, {}	; <UNPREDICTABLE>
    3b0c:	00010000 	andeq	r0, r1, r0
    3b10:	00000051 	andeq	r0, r0, r1, asr r0
    3b14:	00000000 	andeq	r0, r0, r0
    3b18:	0027e200 	eoreq	lr, r7, r0, lsl #4
    3b1c:	0027e400 	eoreq	lr, r7, r0, lsl #8
    3b20:	53000100 	movwpl	r0, #256	; 0x100
    3b24:	000027e4 	andeq	r2, r0, r4, ror #15
    3b28:	000027ec 	andeq	r2, r0, ip, ror #15
    3b2c:	9f4f0002 	svcls	0x004f0002
    3b30:	000027ec 	andeq	r2, r0, ip, ror #15
    3b34:	000027fc 	strdeq	r2, [r0], -ip
    3b38:	fc530001 	mrrc2	0, 0, r0, r3, cr1
    3b3c:	00000027 	andeq	r0, r0, r7, lsr #32
    3b40:	05000028 	streq	r0, [r0, #-40]	; 0xffffffd8
    3b44:	34007300 	strcc	r7, [r0], #-768	; 0xfffffd00
    3b48:	28009f25 	stmdacs	r0, {r0, r2, r5, r8, r9, sl, fp, ip, pc}
    3b4c:	28040000 	stmdacs	r4, {}	; <UNPREDICTABLE>
    3b50:	00010000 	andeq	r0, r1, r0
    3b54:	00000053 	andeq	r0, r0, r3, asr r0
    3b58:	00000000 	andeq	r0, r0, r0
    3b5c:	0026f800 	eoreq	pc, r6, r0, lsl #16
    3b60:	0027d800 	eoreq	sp, r7, r0, lsl #16
    3b64:	0c000600 	stceq	6, cr0, [r0], {-0}
    3b68:	5000139c 	mulpl	r0, ip, r3
    3b6c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3b70:	00000000 	andeq	r0, r0, r0
    3b74:	00266400 	eoreq	r6, r6, r0, lsl #8
    3b78:	00267000 	eoreq	r7, r6, r0
    3b7c:	53000100 	movwpl	r0, #256	; 0x100
	...
    3b88:	00002684 	andeq	r2, r0, r4, lsl #13
    3b8c:	00002690 	muleq	r0, r0, r6
    3b90:	00520001 	subseq	r0, r2, r1
    3b94:	00000000 	andeq	r0, r0, r0
    3b98:	9a000000 	bls	3ba0 <__exidx_end+0xf20>
    3b9c:	a6000026 	strge	r0, [r0], -r6, lsr #32
    3ba0:	01000026 	tsteq	r0, r6, lsr #32
    3ba4:	00005200 	andeq	r5, r0, r0, lsl #4
    3ba8:	00000000 	andeq	r0, r0, r0
    3bac:	26a60000 	strtcs	r0, [r6], r0
    3bb0:	27960000 	ldrcs	r0, [r6, r0]
    3bb4:	00010000 	andeq	r0, r1, r0
    3bb8:	00000053 	andeq	r0, r0, r3, asr r0
    3bbc:	00000000 	andeq	r0, r0, r0
    3bc0:	00285e00 	eoreq	r5, r8, r0, lsl #28
    3bc4:	00286800 	eoreq	r6, r8, r0, lsl #16
    3bc8:	50000100 	andpl	r0, r0, r0, lsl #2
    3bcc:	00002868 	andeq	r2, r0, r8, ror #16
    3bd0:	00002872 	andeq	r2, r0, r2, ror r8
    3bd4:	0070000e 	rsbseq	r0, r0, lr
    3bd8:	16800912 	pkhbtne	r0, r0, r2, lsl #18
    3bdc:	01282b14 			; <UNDEFINED> instruction: 0x01282b14
    3be0:	9f131600 	svcls	0x00131600
	...
    3bec:	00002858 	andeq	r2, r0, r8, asr r8
    3bf0:	00002884 	andeq	r2, r0, r4, lsl #17
    3bf4:	00540001 	subseq	r0, r4, r1
    3bf8:	00000000 	andeq	r0, r0, r0
    3bfc:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    3c00:	8e000028 	cdphi	0, 0, cr0, cr0, cr8, {1}
    3c04:	15000028 	strne	r0, [r0, #-40]	; 0xffffffd8
    3c08:	12007300 	andne	r7, r0, #0, 6
    3c0c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3c10:	4014164f 	andsmi	r1, r4, pc, asr #12
    3c14:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    3c18:	16000128 	strne	r0, [r0], -r8, lsr #2
    3c1c:	00009f13 	andeq	r9, r0, r3, lsl pc
    3c20:	00000000 	andeq	r0, r0, r0
    3c24:	28940000 	ldmcs	r4, {}	; <UNPREDICTABLE>
    3c28:	289e0000 	ldmcs	lr, {}	; <UNPREDICTABLE>
    3c2c:	00170000 	andseq	r0, r7, r0
    3c30:	40120074 	andsmi	r0, r2, r4, ror r0
    3c34:	0a22244b 	beq	88cd68 <__ccfg+0x86cdc0>
    3c38:	1416ffff 	ldrne	pc, [r6], #-4095	; 0xfffff001
    3c3c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    3c40:	0001282d 	andeq	r2, r1, sp, lsr #16
    3c44:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    3c54:	01000000 	mrseq	r0, (UNDEF: 0)
    3c58:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    3c68:	00010000 	andeq	r0, r1, r0
    3c6c:	00000050 	andeq	r0, r0, r0, asr r0
	...
    3c7c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    3c90:	00530001 	subseq	r0, r3, r1
	...
    3ca0:	16000000 	strne	r0, [r0], -r0
    3ca4:	08007000 	stmdaeq	r0, {ip, sp, lr}
    3ca8:	400070ff 	strdmi	r7, [r0], -pc	; <UNPREDICTABLE>
    3cac:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    3cb0:	80000005 	andhi	r0, r0, r5
    3cb4:	0001282d 	andeq	r2, r1, sp, lsr #16
    3cb8:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
    3cbc:	00000000 	andeq	r0, r0, r0
    3cc0:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
    3cc4:	0a000028 	beq	3d6c <__exidx_end+0x10ec>
    3cc8:	03000029 	movweq	r0, #41	; 0x29
    3ccc:	9fff0900 	svcls	0x00ff0900
    3cd0:	0000290a 	andeq	r2, r0, sl, lsl #18
    3cd4:	00002914 	andeq	r2, r0, r4, lsl r9
    3cd8:	00500001 	subseq	r0, r0, r1
    3cdc:	00000000 	andeq	r0, r0, r0
    3ce0:	d4000000 	strle	r0, [r0], #-0
    3ce4:	e2000028 	and	r0, r0, #40	; 0x28
    3ce8:	01000028 	tsteq	r0, r8, lsr #32
    3cec:	28e65000 	stmiacs	r6!, {ip, lr}^
    3cf0:	29020000 	stmdbcs	r2, {}	; <UNPREDICTABLE>
    3cf4:	00010000 	andeq	r0, r1, r0
    3cf8:	00290450 	eoreq	r0, r9, r0, asr r4
    3cfc:	00290600 	eoreq	r0, r9, r0, lsl #12
    3d00:	50000100 	andpl	r0, r0, r0, lsl #2
    3d04:	00002908 	andeq	r2, r0, r8, lsl #18
    3d08:	0000290a 	andeq	r2, r0, sl, lsl #18
    3d0c:	00500001 	subseq	r0, r0, r1
	...
    3d1c:	03000000 	movweq	r0, #0
    3d20:	9fff0900 	svcls	0x00ff0900
	...
    3d2c:	00500001 	subseq	r0, r0, r1
	...
    3d3c:	01000000 	mrseq	r0, (UNDEF: 0)
    3d40:	00005400 	andeq	r5, r0, r0, lsl #8
    3d44:	00000000 	andeq	r0, r0, r0
    3d48:	29140000 	ldmdbcs	r4, {}	; <UNPREDICTABLE>
    3d4c:	294e0000 	stmdbcs	lr, {}^	; <UNPREDICTABLE>
    3d50:	00030000 	andeq	r0, r3, r0
    3d54:	4e9fff09 	cdpmi	15, 9, cr15, cr15, cr9, {0}
    3d58:	52000029 	andpl	r0, r0, #41	; 0x29
    3d5c:	02000029 	andeq	r0, r0, #41	; 0x29
    3d60:	529f4400 	addspl	r4, pc, #0, 8
    3d64:	56000029 	strpl	r0, [r0], -r9, lsr #32
    3d68:	02000029 	andeq	r0, r0, #41	; 0x29
    3d6c:	569f4500 	ldrpl	r4, [pc], r0, lsl #10
    3d70:	74000029 	strvc	r0, [r0], #-41	; 0xffffffd7
    3d74:	03000029 	movweq	r0, #41	; 0x29
    3d78:	9fff0900 	svcls	0x00ff0900
    3d7c:	00002974 	andeq	r2, r0, r4, ror r9
    3d80:	00002976 	andeq	r2, r0, r6, ror r9
    3d84:	76500001 	ldrbvc	r0, [r0], -r1
    3d88:	78000029 	stmdavc	r0, {r0, r3, r5}
    3d8c:	03000029 	movweq	r0, #41	; 0x29
    3d90:	9fff0900 	svcls	0x00ff0900
    3d94:	00002978 	andeq	r2, r0, r8, ror r9
    3d98:	00002980 	andeq	r2, r0, r0, lsl #19
    3d9c:	00500001 	subseq	r0, r0, r1
    3da0:	00000000 	andeq	r0, r0, r0
    3da4:	24000000 	strcs	r0, [r0], #-0
    3da8:	7c000029 	stcvc	0, cr0, [r0], {41}	; 0x29
    3dac:	01000029 	tsteq	r0, r9, lsr #32
    3db0:	00005400 	andeq	r5, r0, r0, lsl #8
    3db4:	00000000 	andeq	r0, r0, r0
    3db8:	29980000 	ldmibcs	r8, {}	; <UNPREDICTABLE>
    3dbc:	29a10000 	stmibcs	r1!, {}	; <UNPREDICTABLE>
    3dc0:	00010000 	andeq	r0, r1, r0
    3dc4:	0029a150 	eoreq	sl, r9, r0, asr r1
    3dc8:	0029b600 	eoreq	fp, r9, r0, lsl #12
    3dcc:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    3dd0:	000029b6 			; <UNDEFINED> instruction: 0x000029b6
    3dd4:	000029ba 			; <UNDEFINED> instruction: 0x000029ba
    3dd8:	01f30004 	mvnseq	r0, r4
    3ddc:	29ba9f50 	ldmibcs	sl!, {r4, r6, r8, r9, sl, fp, ip, pc}
    3de0:	29bc0000 	ldmibcs	ip!, {}	; <UNPREDICTABLE>
    3de4:	00010000 	andeq	r0, r1, r0
    3de8:	0029bc54 	eoreq	fp, r9, r4, asr ip
    3dec:	0029c000 	eoreq	ip, r9, r0
    3df0:	f3000400 	vshl.u8	d0, d0, d0
    3df4:	009f5001 	addseq	r5, pc, r1
    3df8:	00000000 	andeq	r0, r0, r0
    3dfc:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    3e00:	a1000029 	tstge	r0, r9, lsr #32
    3e04:	01000029 	tsteq	r0, r9, lsr #32
    3e08:	29a15100 	stmibcs	r1!, {r8, ip, lr}
    3e0c:	29b60000 	ldmibcs	r6!, {}	; <UNPREDICTABLE>
    3e10:	00010000 	andeq	r0, r1, r0
    3e14:	0029b655 	eoreq	fp, r9, r5, asr r6
    3e18:	0029ba00 	eoreq	fp, r9, r0, lsl #20
    3e1c:	f3000400 	vshl.u8	d0, d0, d0
    3e20:	ba9f5101 	blt	fe7d822c <_estack+0xde7d322c>
    3e24:	bc000029 	stclt	0, cr0, [r0], {41}	; 0x29
    3e28:	01000029 	tsteq	r0, r9, lsr #32
    3e2c:	29bc5500 	ldmibcs	ip!, {r8, sl, ip, lr}
    3e30:	29c00000 	stmibcs	r0, {}^	; <UNPREDICTABLE>
    3e34:	00040000 	andeq	r0, r4, r0
    3e38:	9f5101f3 	svcls	0x005101f3
	...
    3e44:	000029a2 	andeq	r2, r0, r2, lsr #19
    3e48:	000029b9 			; <UNDEFINED> instruction: 0x000029b9
    3e4c:	00700005 	rsbseq	r0, r0, r5
    3e50:	ba9f2930 	blt	fe7ce318 <_estack+0xde7c9318>
    3e54:	c0000029 	andgt	r0, r0, r9, lsr #32
    3e58:	05000029 	streq	r0, [r0, #-41]	; 0xffffffd7
    3e5c:	30007000 	andcc	r7, r0, r0
    3e60:	00009f29 	andeq	r9, r0, r9, lsr #30
    3e64:	00000000 	andeq	r0, r0, r0
    3e68:	29c00000 	stmibcs	r0, {}^	; <UNPREDICTABLE>
    3e6c:	29c20000 	stmibcs	r2, {}^	; <UNPREDICTABLE>
    3e70:	00010000 	andeq	r0, r1, r0
    3e74:	0029c250 	eoreq	ip, r9, r0, asr r2
    3e78:	0029c800 	eoreq	ip, r9, r0, lsl #16
    3e7c:	f3000400 	vshl.u8	d0, d0, d0
    3e80:	009f5001 	addseq	r5, pc, r1
    3e84:	00000000 	andeq	r0, r0, r0
    3e88:	c0000000 	andgt	r0, r0, r0
    3e8c:	c4000029 	strgt	r0, [r0], #-41	; 0xffffffd7
    3e90:	01000029 	tsteq	r0, r9, lsr #32
    3e94:	29c45100 	stmibcs	r4, {r8, ip, lr}^
    3e98:	29c80000 	stmibcs	r8, {}^	; <UNPREDICTABLE>
    3e9c:	00040000 	andeq	r0, r4, r0
    3ea0:	9f5101f3 	svcls	0x005101f3
	...
    3eac:	000029c0 	andeq	r2, r0, r0, asr #19
    3eb0:	000029c7 	andeq	r2, r0, r7, asr #19
    3eb4:	c7520001 	ldrbgt	r0, [r2, -r1]
    3eb8:	c8000029 	stmdagt	r0, {r0, r3, r5}
    3ebc:	04000029 	streq	r0, [r0], #-41	; 0xffffffd7
    3ec0:	5201f300 	andpl	pc, r1, #0, 6
    3ec4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    3ed4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    3ee0:	01f30004 	mvnseq	r0, r4
    3ee4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    3ef4:	00010000 	andeq	r0, r1, r0
    3ef8:	00000051 	andeq	r0, r0, r1, asr r0
    3efc:	00000000 	andeq	r0, r0, r0
    3f00:	f3000400 	vshl.u8	d0, d0, d0
    3f04:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    3f14:	01000000 	mrseq	r0, (UNDEF: 0)
    3f18:	00005200 	andeq	r5, r0, r0, lsl #4
    3f1c:	00000000 	andeq	r0, r0, r0
    3f20:	00040000 	andeq	r0, r4, r0
    3f24:	9f5201f3 	svcls	0x005201f3
	...
    3f30:	00520001 	subseq	r0, r2, r1
    3f34:	00000000 	andeq	r0, r0, r0
    3f38:	15000000 	strne	r0, [r0, #-0]
    3f3c:	5201f300 	andpl	pc, r1, #0, 6
    3f40:	01f32540 	mvnseq	r2, r0, asr #10
    3f44:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    3f48:	2e302540 	cfneg32cs	mvfx2, mvfx0
    3f4c:	16000128 	strne	r0, [r0], -r8, lsr #2
    3f50:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    3f60:	00010000 	andeq	r0, r1, r0
    3f64:	00000053 	andeq	r0, r0, r3, asr r0
    3f68:	00000000 	andeq	r0, r0, r0
    3f6c:	f3000400 	vshl.u8	d0, d0, d0
    3f70:	009f5301 	addseq	r5, pc, r1, lsl #6
	...
    3f80:	04000000 	streq	r0, [r0], #-0
    3f84:	04807000 	streq	r7, [r0], #0
    3f88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    3f8c:	00000000 	andeq	r0, r0, r0
    3f90:	f3000d00 	vpadd.f32	d0, d0, d0
    3f94:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    3f98:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    3f9c:	9f048023 	svcls	0x00048023
	...
    3fa8:	00500001 	subseq	r0, r0, r1
    3fac:	00000000 	andeq	r0, r0, r0
    3fb0:	52000000 	andpl	r0, r0, #0
    3fb4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    3fb8:	01f32431 	mvnseq	r2, r1, lsr r4
    3fbc:	80232250 	eorhi	r2, r3, r0, asr r2
    3fc0:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    3fc4:	01f32431 	mvnseq	r2, r1, lsr r4
    3fc8:	01f32250 	mvnseq	r2, r0, asr r2
    3fcc:	30254052 	eorcc	r4, r5, r2, asr r0
    3fd0:	00012829 	andeq	r2, r1, r9, lsr #16
    3fd4:	84231316 	strthi	r1, [r3], #-790	; 0xfffffcea
    3fd8:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    3fdc:	01f32431 	mvnseq	r2, r1, lsr r4
    3fe0:	80232250 	eorhi	r2, r3, r0, asr r2
    3fe4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    3fe8:	01f32431 	mvnseq	r2, r1, lsr r4
    3fec:	01f32250 	mvnseq	r2, r0, asr r2
    3ff0:	30254052 	eorcc	r4, r5, r2, asr r0
    3ff4:	00012829 	andeq	r2, r1, r9, lsr #16
    3ff8:	01f31316 	mvnseq	r1, r6, lsl r3
    3ffc:	30254052 	eorcc	r4, r5, r2, asr r0
    4000:	0001282e 	andeq	r2, r1, lr, lsr #16
    4004:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4014:	01000000 	mrseq	r0, (UNDEF: 0)
    4018:	00005100 	andeq	r5, r0, r0, lsl #2
    401c:	00000000 	andeq	r0, r0, r0
    4020:	002f0000 	eoreq	r0, pc, r0
    4024:	5201f330 	andpl	pc, r1, #48, 6	; 0xc0000000
    4028:	01f32540 	mvnseq	r2, r0, asr #10
    402c:	5201f352 	andpl	pc, r1, #1207959553	; 0x48000001
    4030:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4034:	16000128 	strne	r0, [r0], -r8, lsr #2
    4038:	5201f313 	andpl	pc, r1, #1275068416	; 0x4c000000
    403c:	01f32540 	mvnseq	r2, r0, asr #10
    4040:	282e3053 	stmdacs	lr!, {r0, r1, r4, r6, ip, sp}
    4044:	13160001 	tstne	r6, #1
    4048:	305301f3 	ldrshcc	r0, [r3], #-19	; 0xffffffed
    404c:	00012829 	andeq	r2, r1, r9, lsr #16
    4050:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4060:	01000000 	mrseq	r0, (UNDEF: 0)
    4064:	00005000 	andeq	r5, r0, r0
    4068:	00000000 	andeq	r0, r0, r0
    406c:	00040000 	andeq	r0, r4, r0
    4070:	9f5001f3 	svcls	0x005001f3
	...
    4084:	00510001 	subseq	r0, r1, r1
    4088:	00000000 	andeq	r0, r0, r0
    408c:	04000000 	streq	r0, [r0], #-0
    4090:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    4094:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    40a4:	52000100 	andpl	r0, r0, #0, 2
	...
    40b0:	01f30004 	mvnseq	r0, r4
    40b4:	00009f52 	andeq	r9, r0, r2, asr pc
    40b8:	00000000 	andeq	r0, r0, r0
    40bc:	00010000 	andeq	r0, r1, r0
    40c0:	00000052 	andeq	r0, r0, r2, asr r0
    40c4:	00000000 	andeq	r0, r0, r0
    40c8:	f3001b00 	vqrdmulh.s<illegal width 8>	d1, d0, d0
    40cc:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    40d0:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    40d4:	4b405301 	blmi	1018ce0 <__ccfg+0xff8d38>
    40d8:	0f0c2224 	svceq	0x000c2224
    40dc:	2b800000 	blcs	fe0040e4 <_estack+0xddfff0e4>
    40e0:	16000128 	strne	r0, [r0], -r8, lsr #2
    40e4:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    40f4:	00010000 	andeq	r0, r1, r0
    40f8:	00000053 	andeq	r0, r0, r3, asr r0
    40fc:	00000000 	andeq	r0, r0, r0
    4100:	f3000400 	vshl.u8	d0, d0, d0
    4104:	009f5301 	addseq	r5, pc, r1, lsl #6
    4108:	00000000 	andeq	r0, r0, r0
    410c:	01000000 	mrseq	r0, (UNDEF: 0)
    4110:	00005300 	andeq	r5, r0, r0, lsl #6
    4114:	00000000 	andeq	r0, r0, r0
    4118:	001b0000 	andseq	r0, fp, r0
    411c:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4120:	5301f31c 	movwpl	pc, #4892	; 0x131c	; <UNPREDICTABLE>
    4124:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    4128:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    412c:	8000000f 	andhi	r0, r0, pc
    4130:	0001282b 	andeq	r2, r1, fp, lsr #16
    4134:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    4144:	02000000 	andeq	r0, r0, #0
    4148:	00009100 	andeq	r9, r0, r0, lsl #2
    414c:	00000000 	andeq	r0, r0, r0
    4150:	02000000 	andeq	r0, r0, #0
    4154:	00007d00 	andeq	r7, r0, r0, lsl #26
	...
    4164:	04000000 	streq	r0, [r0], #-0
    4168:	04807000 	streq	r7, [r0], #0
    416c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4170:	00000000 	andeq	r0, r0, r0
    4174:	f3000d00 	vpadd.f32	d0, d0, d0
    4178:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    417c:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    4180:	9f048023 	svcls	0x00048023
	...
    418c:	00500001 	subseq	r0, r0, r1
    4190:	00000000 	andeq	r0, r0, r0
    4194:	64000000 	strvs	r0, [r0], #-0
    4198:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    419c:	01f32431 	mvnseq	r2, r1, lsr r4
    41a0:	80232250 	eorhi	r2, r3, r0, asr r2
    41a4:	5101f304 	tstpl	r1, r4, lsl #6	; <UNPREDICTABLE>
    41a8:	01f32431 	mvnseq	r2, r1, lsr r4
    41ac:	01f32250 	mvnseq	r2, r0, asr r2
    41b0:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    41b4:	000f0c22 	andeq	r0, pc, r2, lsr #24
    41b8:	282c8000 	stmdacs	ip!, {pc}
    41bc:	13160001 	tstne	r6, #1
    41c0:	f3048423 	vshl.u8	d8, d19, d4
    41c4:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    41c8:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    41cc:	f3048023 	vhadd.u8	d8, d4, d19
    41d0:	24315101 	ldrtcs	r5, [r1], #-257	; 0xfffffeff
    41d4:	225001f3 	subscs	r0, r0, #-1073741764	; 0xc000003c
    41d8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    41dc:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    41e0:	8000000f 	andhi	r0, r0, pc
    41e4:	0001282c 	andeq	r2, r1, ip, lsr #16
    41e8:	01f31316 	mvnseq	r1, r6, lsl r3
    41ec:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    41f0:	000f0c22 	andeq	r0, pc, r2, lsr #24
    41f4:	282b8000 	stmdacs	fp!, {pc}
    41f8:	13160001 	tstne	r6, #1
    41fc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    420c:	74000a00 	strvc	r0, [r0], #-2560	; 0xfffff600
    4210:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    4214:	2400731a 	strcs	r7, [r0], #-794	; 0xfffffce6
    4218:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    421c:	00000000 	andeq	r0, r0, r0
    4220:	7d000c00 	stcvc	12, cr0, [r0, #-0]
    4224:	0a029400 	beq	a922c <__ccfg+0x89284>
    4228:	731affff 	tstvc	sl, #1020	; 0x3fc	; <UNPREDICTABLE>
    422c:	009f2400 	addseq	r2, pc, r0, lsl #8
    4230:	00000000 	andeq	r0, r0, r0
    4234:	24000000 	strcs	r0, [r0], #-0
    4238:	94007d00 	strls	r7, [r0], #-3328	; 0xfffff300
    423c:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    4240:	5301f31a 	movwpl	pc, #4890	; 0x131a	; <UNPREDICTABLE>
    4244:	01f31c40 	mvnseq	r1, r0, asr #24
    4248:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    424c:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4250:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4254:	01282b80 	smlawbeq	r8, r0, fp, r2
    4258:	24131600 	ldrcs	r1, [r3], #-1536	; 0xfffffa00
    425c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    426c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    4278:	01f30004 	mvnseq	r0, r4
    427c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    428c:	00010000 	andeq	r0, r1, r0
    4290:	00000051 	andeq	r0, r0, r1, asr r0
    4294:	00000000 	andeq	r0, r0, r0
    4298:	f3000400 	vshl.u8	d0, d0, d0
    429c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
    42ac:	01000000 	mrseq	r0, (UNDEF: 0)
    42b0:	00005200 	andeq	r5, r0, r0, lsl #4
    42b4:	00000000 	andeq	r0, r0, r0
    42b8:	00010000 	andeq	r0, r1, r0
    42bc:	00000054 	andeq	r0, r0, r4, asr r0
    42c0:	00000000 	andeq	r0, r0, r0
    42c4:	f3001500 	vrshl.u8	d1, d0, d0
    42c8:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    42cc:	f35201f3 	vbsl	q8, q9, <illegal reg q9.5>
    42d0:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    42d4:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    42d8:	9f131600 	svcls	0x00131600
	...
    42ec:	00550001 	subseq	r0, r5, r1
    42f0:	00000000 	andeq	r0, r0, r0
    42f4:	1d000000 	stcne	0, cr0, [r0, #-0]
    42f8:	5001f300 	andpl	pc, r1, r0, lsl #6
    42fc:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    4300:	01f30223 	mvnseq	r0, r3, lsr #4
    4304:	5101f350 	tstpl	r1, r0, asr r3	; <UNPREDICTABLE>
    4308:	5201f322 	andpl	pc, r1, #-2013265920	; 0x88000000
    430c:	2e302540 	cfneg32cs	mvfx2, mvfx0
    4310:	16000128 	strne	r0, [r0], -r8, lsr #2
    4314:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    4324:	00060000 	andeq	r0, r6, r0
    4328:	00740075 	rsbseq	r0, r4, r5, ror r0
    432c:	00009f1a 	andeq	r9, r0, sl, lsl pc
	...
    433c:	00010000 	andeq	r0, r1, r0
    4340:	00000055 	andeq	r0, r0, r5, asr r0
    4344:	00000000 	andeq	r0, r0, r0
    4348:	f3001d00 	vpadd.f32	d1, d0, d0
    434c:	01f35001 	mvnseq	r5, r1
    4350:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    4354:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4358:	f3225101 	vrhadd.u32	d5, d2, d1
    435c:	25405201 	strbcs	r5, [r0, #-513]	; 0xfffffdff
    4360:	01282e30 			; <UNDEFINED> instruction: 0x01282e30
    4364:	9f131600 	svcls	0x00131600
	...
    4378:	00750007 	rsbseq	r0, r5, r7
    437c:	1affff0a 	bne	3fac <__exidx_end+0x132c>
    4380:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4390:	70000500 	andvc	r0, r0, r0, lsl #10
    4394:	9f293000 	svcls	0x00293000
	...
    43a8:	00500001 	subseq	r0, r0, r1
    43ac:	00000000 	andeq	r0, r0, r0
    43b0:	04000000 	streq	r0, [r0], #-0
    43b4:	5001f300 	andpl	pc, r1, r0, lsl #6
    43b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    43c8:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    43d4:	01f30004 	mvnseq	r0, r4
    43d8:	00009f51 	andeq	r9, r0, r1, asr pc
	...
    43e8:	00010000 	andeq	r0, r1, r0
    43ec:	00000052 	andeq	r0, r0, r2, asr r0
    43f0:	00000000 	andeq	r0, r0, r0
    43f4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
	...
    4400:	01f3001b 	mvnseq	r0, fp, lsl r0
    4404:	f3254052 	vqadd.u32	q2, <illegal reg q2.5>, q1
    4408:	01f35201 	mvnseq	r5, r1, lsl #4
    440c:	244b4053 	strbcs	r4, [fp], #-83	; 0xffffffad
    4410:	000f0c22 	andeq	r0, pc, r2, lsr #24
    4414:	282b8000 	stmdacs	fp!, {pc}
    4418:	13160001 	tstne	r6, #1
    441c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    442c:	53000100 	movwpl	r0, #256	; 0x100
	...
    4438:	00550001 	subseq	r0, r5, r1
    443c:	00000000 	andeq	r0, r0, r0
    4440:	1b000000 	blne	4448 <__exidx_end+0x17c8>
    4444:	5301f300 	movwpl	pc, #4864	; 0x1300	; <UNPREDICTABLE>
    4448:	01f31c40 	mvnseq	r1, r0, asr #24
    444c:	5301f353 	movwpl	pc, #4947	; 0x1353	; <UNPREDICTABLE>
    4450:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    4454:	00000f0c 	andeq	r0, r0, ip, lsl #30
    4458:	01282b80 	smlawbeq	r8, r0, fp, r2
    445c:	9f131600 	svcls	0x00131600
	...
    4470:	00560001 	subseq	r0, r6, r1
    4474:	00000000 	andeq	r0, r0, r0
    4478:	06000000 	streq	r0, [r0], -r0
    447c:	71007000 	mrsvc	r7, (UNDEF: 0)
    4480:	009f2200 	addseq	r2, pc, r0, lsl #4
    4484:	00000000 	andeq	r0, r0, r0
    4488:	01000000 	mrseq	r0, (UNDEF: 0)
    448c:	00005600 	andeq	r5, r0, r0, lsl #12
    4490:	00000000 	andeq	r0, r0, r0
    4494:	00230000 	eoreq	r0, r3, r0
    4498:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    449c:	23225101 			; <UNDEFINED> instruction: 0x23225101
    44a0:	5001f302 	andpl	pc, r1, r2, lsl #6
    44a4:	225101f3 	subscs	r0, r1, #-1073741764	; 0xc000003c
    44a8:	405301f3 	ldrshmi	r0, [r3], #-19	; 0xffffffed
    44ac:	0c22244b 	cfstrseq	mvf2, [r2], #-300	; 0xfffffed4
    44b0:	8000000f 	andhi	r0, r0, pc
    44b4:	0001282b 	andeq	r2, r1, fp, lsr #16
    44b8:	009f1316 	addseq	r1, pc, r6, lsl r3	; <UNPREDICTABLE>
	...
    44c8:	06000000 	streq	r0, [r0], -r0
    44cc:	74007600 	strvc	r7, [r0], #-1536	; 0xfffffa00
    44d0:	009f1a00 	addseq	r1, pc, r0, lsl #20
    44d4:	00000000 	andeq	r0, r0, r0
    44d8:	01000000 	mrseq	r0, (UNDEF: 0)
    44dc:	00005000 	andeq	r5, r0, r0
	...
    44ec:	00010000 	andeq	r0, r1, r0
    44f0:	00000056 	andeq	r0, r0, r6, asr r0
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	f3002300 	vcgt.u8	d2, d0, d0
    44fc:	01f35001 	mvnseq	r5, r1
    4500:	02232251 	eoreq	r2, r3, #268435461	; 0x10000005
    4504:	f35001f3 	vbsl	q8, q8, <illegal reg q9.5>
    4508:	f3225101 	vrhadd.u32	d5, d2, d1
    450c:	4b405301 	blmi	1019118 <__ccfg+0xff9170>
    4510:	0f0c2224 	svceq	0x000c2224
    4514:	2b800000 	blcs	fe00451c <_estack+0xddfff51c>
    4518:	16000128 	strne	r0, [r0], -r8, lsr #2
    451c:	00009f13 	andeq	r9, r0, r3, lsl pc
	...
    452c:	00070000 	andeq	r0, r7, r0
    4530:	ff0a0076 			; <UNDEFINED> instruction: 0xff0a0076
    4534:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
	...
    4544:	05000000 	streq	r0, [r0, #-0]
    4548:	30007000 	andcc	r7, r0, r0
    454c:	00009f29 	andeq	r9, r0, r9, lsr #30
    4550:	00000000 	andeq	r0, r0, r0
    4554:	29c80000 	stmibcs	r8, {}^	; <UNPREDICTABLE>
    4558:	29e00000 	stmibcs	r0!, {}^	; <UNPREDICTABLE>
    455c:	00010000 	andeq	r0, r1, r0
    4560:	0029e050 	eoreq	lr, r9, r0, asr r0
    4564:	002a1a00 	eoreq	r1, sl, r0, lsl #20
    4568:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
    456c:	00002a1a 	andeq	r2, r0, sl, lsl sl
    4570:	00002a24 	andeq	r2, r0, r4, lsr #20
    4574:	01f30004 	mvnseq	r0, r4
    4578:	00009f50 	andeq	r9, r0, r0, asr pc
    457c:	00000000 	andeq	r0, r0, r0
    4580:	29c80000 	stmibcs	r8, {}^	; <UNPREDICTABLE>
    4584:	29ce0000 	stmibcs	lr, {}^	; <UNPREDICTABLE>
    4588:	00010000 	andeq	r0, r1, r0
    458c:	0029ce51 	eoreq	ip, r9, r1, asr lr
    4590:	002a0600 	eoreq	r0, sl, r0, lsl #12
    4594:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    4598:	00002a06 	andeq	r2, r0, r6, lsl #20
    459c:	00002a24 	andeq	r2, r0, r4, lsr #20
    45a0:	01f30004 	mvnseq	r0, r4
    45a4:	00009f51 	andeq	r9, r0, r1, asr pc
    45a8:	00000000 	andeq	r0, r0, r0
    45ac:	2a020000 	bcs	845b4 <__ccfg+0x6460c>
    45b0:	2a160000 	bcs	5845b8 <__ccfg+0x564610>
    45b4:	00010000 	andeq	r0, r1, r0
    45b8:	00000055 	andeq	r0, r0, r5, asr r0
    45bc:	00000000 	andeq	r0, r0, r0
    45c0:	002a0200 	eoreq	r0, sl, r0, lsl #4
    45c4:	002a0600 	eoreq	r0, sl, r0, lsl #12
    45c8:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
    45cc:	00002a06 	andeq	r2, r0, r6, lsl #20
    45d0:	00002a16 	andeq	r2, r0, r6, lsl sl
    45d4:	01f30004 	mvnseq	r0, r4
    45d8:	00009f51 	andeq	r9, r0, r1, asr pc
    45dc:	00000000 	andeq	r0, r0, r0
    45e0:	2a240000 	bcs	9045e8 <__ccfg+0x8e4640>
    45e4:	2a420000 	bcs	10845ec <__ccfg+0x1064644>
    45e8:	00010000 	andeq	r0, r1, r0
    45ec:	002a4250 	eoreq	r4, sl, r0, asr r2
    45f0:	002a5000 	eoreq	r5, sl, r0
    45f4:	f3000400 	vshl.u8	d0, d0, d0
    45f8:	009f5001 	addseq	r5, pc, r1
	...
    4608:	01000000 	mrseq	r0, (UNDEF: 0)
    460c:	00005000 	andeq	r5, r0, r0
    4610:	00000000 	andeq	r0, r0, r0
    4614:	00010000 	andeq	r0, r1, r0
    4618:	00000056 	andeq	r0, r0, r6, asr r0
    461c:	00000000 	andeq	r0, r0, r0
    4620:	f3000400 	vshl.u8	d0, d0, d0
    4624:	009f5001 	addseq	r5, pc, r1
	...
    4634:	01000000 	mrseq	r0, (UNDEF: 0)
    4638:	00005500 	andeq	r5, r0, r0, lsl #10
	...
    4648:	00070000 	andeq	r0, r7, r0
    464c:	00730070 	rsbseq	r0, r3, r0, ror r0
    4650:	009f191c 	addseq	r1, pc, ip, lsl r9	; <UNPREDICTABLE>
    4654:	00000000 	andeq	r0, r0, r0
    4658:	04000000 	streq	r0, [r0], #-0
    465c:	19007000 	stmdbne	r0, {ip, sp, lr}
    4660:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4670:	0a000400 	beq	5678 <__exidx_end+0x29f8>
    4674:	009f07d0 			; <UNDEFINED> instruction: 0x009f07d0
    4678:	00000000 	andeq	r0, r0, r0
    467c:	01000000 	mrseq	r0, (UNDEF: 0)
    4680:	00005000 	andeq	r5, r0, r0
    4684:	00000000 	andeq	r0, r0, r0
    4688:	00050000 	andeq	r0, r5, r0
    468c:	25400072 	strbcs	r0, [r0, #-114]	; 0xffffff8e
    4690:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    4694:	00000000 	andeq	r0, r0, r0
    4698:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46a4:	d00a0004 	andle	r0, sl, r4
    46a8:	00009f07 	andeq	r9, r0, r7, lsl #30
    46ac:	00000000 	andeq	r0, r0, r0
    46b0:	00010000 	andeq	r0, r1, r0
    46b4:	00000050 	andeq	r0, r0, r0, asr r0
	...
    46c4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    46d8:	00530001 	subseq	r0, r3, r1
	...
    46e8:	01000000 	mrseq	r0, (UNDEF: 0)
    46ec:	00005000 	andeq	r5, r0, r0
    46f0:	00000000 	andeq	r0, r0, r0
    46f4:	00030000 	andeq	r0, r3, r0
    46f8:	009f1b70 	addseq	r1, pc, r0, ror fp	; <UNPREDICTABLE>
    46fc:	00000000 	andeq	r0, r0, r0
    4700:	04000000 	streq	r0, [r0], #-0
    4704:	5001f300 	andpl	pc, r1, r0, lsl #6
    4708:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4718:	74000700 	strvc	r0, [r0], #-1792	; 0xfffff900
    471c:	48244800 	stmdami	r4!, {fp, lr}
    4720:	00009f26 	andeq	r9, r0, r6, lsr #30
	...
    4730:	00010000 	andeq	r0, r1, r0
    4734:	00000050 	andeq	r0, r0, r0, asr r0
    4738:	00000000 	andeq	r0, r0, r0
    473c:	f3000600 	vmax.u8	d0, d0, d0
    4740:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    4744:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4754:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4760:	01f3000c 	mvnseq	r0, ip
    4764:	f31c4b50 	vqrdmlah.s16	q2, q6, q0
    4768:	1c4b5001 	mcrrne	0, 0, r5, fp, cr1
    476c:	00009f1e 	andeq	r9, r0, lr, lsl pc
	...
    477c:	002c0000 	eoreq	r0, ip, r0
    4780:	26400071 			; <UNDEFINED> instruction: 0x26400071
    4784:	24400071 	strbcs	r0, [r0], #-113	; 0xffffff8f
    4788:	00702648 	rsbseq	r2, r0, r8, asr #12
    478c:	2226331e 	eorcs	r3, r6, #2013265920	; 0x78000000
    4790:	24480071 	strbcs	r0, [r8], #-113	; 0xffffff8f
    4794:	00752648 	rsbseq	r2, r5, r8, asr #12
    4798:	22263a1e 	eorcs	r3, r6, #122880	; 0x1e000
    479c:	24480074 	strbcs	r0, [r8], #-116	; 0xffffff8c
    47a0:	00752648 	rsbseq	r2, r5, r8, asr #12
    47a4:	1e00701e 	mcrne	0, 0, r7, cr0, cr14, {0}
    47a8:	9f222642 	svcls	0x00222642
	...
    47b4:	00710032 	rsbseq	r0, r1, r2, lsr r0
    47b8:	01f32640 	mvnseq	r2, r0, asr #12
    47bc:	711c4b50 	tstvc	ip, r0, asr fp
    47c0:	48244000 	stmdami	r4!, {lr}
    47c4:	26331e26 	ldrtcs	r1, [r3], -r6, lsr #28
    47c8:	48007122 	stmdami	r0, {r1, r5, r8, ip, sp, lr}
    47cc:	75264824 	strvc	r4, [r6, #-2084]!	; 0xfffff7dc
    47d0:	263a1e00 	ldrtcs	r1, [sl], -r0, lsl #28
    47d4:	5001f322 	andpl	pc, r1, r2, lsr #6
    47d8:	00741c4b 	rsbseq	r1, r4, fp, asr #24
    47dc:	26482448 	strbcs	r2, [r8], -r8, asr #8
    47e0:	1e00751e 	mcrne	5, 0, r7, cr0, cr14, {0}
    47e4:	9f222642 	svcls	0x00222642
	...
    47f8:	00500001 	subseq	r0, r0, r1
    47fc:	00000000 	andeq	r0, r0, r0
    4800:	04000000 	streq	r0, [r0], #-0
    4804:	5001f300 	andpl	pc, r1, r0, lsl #6
    4808:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4818:	70000b00 	andvc	r0, r0, r0, lsl #22
    481c:	1e007000 	cdpne	0, 0, cr7, cr0, cr0, {0}
    4820:	00702646 	rsbseq	r2, r0, r6, asr #12
    4824:	00009f1c 	andeq	r9, r0, ip, lsl pc
    4828:	00000000 	andeq	r0, r0, r0
    482c:	00010000 	andeq	r0, r1, r0
    4830:	00000050 	andeq	r0, r0, r0, asr r0
    4834:	00000000 	andeq	r0, r0, r0
    4838:	f3000e00 	vcge.f32	d0, d0, d0
    483c:	01f35001 	mvnseq	r5, r1
    4840:	26461e50 			; <UNDEFINED> instruction: 0x26461e50
    4844:	1c5001f3 	ldfnee	f0, [r0], {243}	; 0xf3
    4848:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    4858:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
	...
    4864:	380c0005 	stmdacc	ip, {r0, r2}
    4868:	00400910 	subeq	r0, r0, r0, lsl r9
	...
    4878:	01000000 	mrseq	r0, (UNDEF: 0)
    487c:	00005600 	andeq	r5, r0, r0, lsl #12
	...
    488c:	00060000 	andeq	r0, r6, r0
    4890:	00760070 	rsbseq	r0, r6, r0, ror r0
    4894:	00009f1c 	andeq	r9, r0, ip, lsl pc
    4898:	00000000 	andeq	r0, r0, r0
    489c:	00010000 	andeq	r0, r1, r0
    48a0:	00000050 	andeq	r0, r0, r0, asr r0
	...
    48b0:	70000a00 	andvc	r0, r0, r0, lsl #20
    48b4:	44fc0800 	ldrbtmi	r0, [ip], #2048	; 0x800
    48b8:	25461a24 	strbcs	r1, [r6, #-2596]	; 0xfffff5dc
    48bc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    48cc:	53000100 	movwpl	r0, #256	; 0x100
	...
    48e0:	00730009 	rsbseq	r0, r3, r9
    48e4:	1afc000a 	bne	fff04914 <_estack+0xdfeff914>
    48e8:	009f253a 	addseq	r2, pc, sl, lsr r5	; <UNPREDICTABLE>
	...
    48f8:	0a000000 	beq	4900 <__exidx_end+0x1c80>
    48fc:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    4900:	1a2440fc 	bne	914cf8 <__ccfg+0x8f4d50>
    4904:	009f2542 	addseq	r2, pc, r2, asr #10
    4908:	00000000 	andeq	r0, r0, r0
    490c:	Address 0x000000000000490c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000034 	andeq	r0, r0, r4, lsr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
	...
  14:	00000140 	andeq	r0, r0, r0, asr #2
  18:	000000c8 	andeq	r0, r0, r8, asr #1
  1c:	00000048 	andeq	r0, r0, r8, asr #32
  20:	00000110 	andeq	r0, r0, r0, lsl r1
  24:	0000005c 	andeq	r0, r0, ip, asr r0
  28:	0000016c 	andeq	r0, r0, ip, ror #2
  2c:	0000012c 	andeq	r0, r0, ip, lsr #2
	...
  38:	000000e4 	andeq	r0, r0, r4, ror #1
  3c:	07910002 	ldreq	r0, [r1, r2]
			i = k;
  40:	00040000 	andeq	r0, r4, r0
				j->Next = k;
  44:	00000000 	andeq	r0, r0, r0
  48:	00000298 	muleq	r0, r8, r2
}
  4c:	0000000c 	andeq	r0, r0, ip
  50:	000002a4 	andeq	r0, r0, r4, lsr #5
  54:	0000002c 	andeq	r0, r0, ip, lsr #32
		release;
  58:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  5c:	0000002a 	andeq	r0, r0, sl, lsr #32
  60:	000002fc 	strdeq	r0, [r0], -ip
  64:	0000003c 	andeq	r0, r0, ip, lsr r0
  68:	00000000 	andeq	r0, r0, r0
  6c:	00000040 	andeq	r0, r0, r0, asr #32
  70:	00000000 	andeq	r0, r0, r0
  74:	00000020 	andeq	r0, r0, r0, lsr #32
  78:	00000338 	andeq	r0, r0, r8, lsr r3
  7c:	00000054 	andeq	r0, r0, r4, asr r0
  80:	0000038c 	andeq	r0, r0, ip, lsl #7
  84:	00000040 	andeq	r0, r0, r0, asr #32
  88:	000003cc 	andeq	r0, r0, ip, asr #7
  8c:	00000028 	andeq	r0, r0, r8, lsr #32
	descriptors [fd] = s;
  90:	000003f4 	strdeq	r0, [r0], -r4
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	00000114 	andeq	r0, r0, r4, lsl r1
  98:	00000508 	andeq	r0, r0, r8, lsl #10
	if (s == NULL)
  9c:	00000050 	andeq	r0, r0, r0, asr r0
		syserror (EMALLOC, "tcv05");
  a0:	00000558 	andeq	r0, r0, r8, asr r5
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	000005ac 	andeq	r0, r0, ip, lsr #11
  ac:	00000038 	andeq	r0, r0, r8, lsr r0
  b0:	000005e4 	andeq	r0, r0, r4, ror #11
  b4:	00000110 	andeq	r0, r0, r0, lsl r1
  b8:	00000000 	andeq	r0, r0, r0
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	000006f4 	strdeq	r0, [r0], -r4
  c4:	000000c0 	andeq	r0, r0, r0, asr #1
  c8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
  cc:	00000044 	andeq	r0, r0, r4, asr #32
  d0:	000007f8 	strdeq	r0, [r0], -r8
  d4:	0000003c 	andeq	r0, r0, ip, lsr r0
  d8:	00000834 	andeq	r0, r0, r4, lsr r8
  dc:	000000a4 	andeq	r0, r0, r4, lsr #1
  e0:	000008d8 	ldrdeq	r0, [r0], -r8
  e4:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  e8:	00000000 	andeq	r0, r0, r0
  ec:	00000024 	andeq	r0, r0, r4, lsr #32
  f0:	00000000 	andeq	r0, r0, r0
			wwait (st, 50);
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
			curr += 0x1000;
  f8:	00000a90 	muleq	r0, r0, sl
  fc:	00000258 	andeq	r0, r0, r8, asr r2
		if (from >= EE_SIZE || upto < from)
 100:	00000000 	andeq	r0, r0, r0
 104:	00000030 	andeq	r0, r0, r0, lsr r0
			upto = EE_SIZE - 1;
 108:	00000000 	andeq	r0, r0, r0
 10c:	0000005c 	andeq	r0, r0, ip, asr r0
 110:	00000ce8 	andeq	r0, r0, r8, ror #25
 114:	00000060 	andeq	r0, r0, r0, rrx
	...
 120:	00000154 	andeq	r0, r0, r4, asr r1
 124:	1c210002 	stcne	0, cr0, [r1], #-8
}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00000d48 	andeq	r0, r0, r8, asr #26
 134:	0000003c 	andeq	r0, r0, ip, lsr r0
 138:	00000d84 	andeq	r0, r0, r4, lsl #27
 13c:	00000080 	andeq	r0, r0, r0, lsl #1
    cycles[0].offTime = numbers[1];
 140:	00000e04 	andeq	r0, r0, r4, lsl #28
    cycles[1].onTime = numbers[2];
 144:	00000018 	andeq	r0, r0, r8, lsl r0
    cycles[1].offTime = numbers[3];
 148:	00000000 	andeq	r0, r0, r0
 14c:	00000024 	andeq	r0, r0, r4, lsr #32
}
 150:	00000e1c 	andeq	r0, r0, ip, lsl lr
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
 154:	00000010 	andeq	r0, r0, r0, lsl r0
            number = number * 10;
 158:	00000000 	andeq	r0, r0, r0
 15c:	0000002c 	andeq	r0, r0, ip, lsr #32
            number += settingsInput[i] - 48;
 160:	00000000 	andeq	r0, r0, r0
 164:	0000004c 	andeq	r0, r0, ip, asr #32
 168:	00000000 	andeq	r0, r0, r0
fsm root {
 16c:	00000006 	andeq	r0, r0, r6
 170:	00000e2c 	andeq	r0, r0, ip, lsr #28
 174:	000000cc 	andeq	r0, r0, ip, asr #1
 178:	00000ef8 	strdeq	r0, [r0], -r8
 17c:	00000014 	andeq	r0, r0, r4, lsl r0
 180:	00000f0c 	andeq	r0, r0, ip, lsl #30
        initCycles();
 184:	00000034 	andeq	r0, r0, r4, lsr r0
        ser_outf(Initial, "Enter your name: ");
 188:	00000f40 	andeq	r0, r0, r0, asr #30
 18c:	00000034 	andeq	r0, r0, r4, lsr r0
        ser_in(Get_Name, username, NAME_LENGTH);
 190:	00000000 	andeq	r0, r0, r0
 194:	0000002c 	andeq	r0, r0, ip, lsr #32
        ser_outf(Show_Menu, "Welcome %s\n\r"
 198:	00000f74 	andeq	r0, r0, r4, ror pc
 19c:	00000024 	andeq	r0, r0, r4, lsr #32
 1a0:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
        ser_inf(Get_Choice, "%c", &choice);
 1a4:	00000038 	andeq	r0, r0, r8, lsr r0
 1a8:	00000000 	andeq	r0, r0, r0
        if (choice == 'A' || choice == 'a'){
 1ac:	00000014 	andeq	r0, r0, r4, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000040 	andeq	r0, r0, r0, asr #32
            proceed Adjust_Intervals;
 1b8:	00000000 	andeq	r0, r0, r0
            proceed Monitor;
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
        proceed Show_Menu;
 1c0:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
 1c4:	00000024 	andeq	r0, r0, r4, lsr #32
 1c8:	00000000 	andeq	r0, r0, r0
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
 1cc:	00000020 	andeq	r0, r0, r0, lsr #32
 1d0:	00000ff4 	strdeq	r0, [r0], -r4
 1d4:	0000000e 	andeq	r0, r0, lr
        processSettingsInput(settings);
 1d8:	00000000 	andeq	r0, r0, r0
        proceed Show_Menu;
 1dc:	00000010 	andeq	r0, r0, r0, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	00000000 	andeq	r0, r0, r0
 1ec:	00000010 	andeq	r0, r0, r0, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	00000006 	andeq	r0, r0, r6
        proceed Show_Menu;
 1f8:	00001002 	andeq	r1, r0, r2
 1fc:	00000014 	andeq	r0, r0, r4, lsl r0
        ser_outf(Monitor, "Monitor (press S to stop): ");
 200:	00000000 	andeq	r0, r0, r0
 204:	0000000e 	andeq	r0, r0, lr
        displayCycle = YES;
 208:	00001018 	andeq	r1, r0, r8, lsl r0
        ser_inf(Await_Stop, "%c", ch);
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	0000103c 	andeq	r1, r0, ip, lsr r0
 214:	0000009c 	muleq	r0, ip, r0
        proceed Monitor;
 218:	000010d8 	ldrdeq	r1, [r0], -r8
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 21c:	00000050 	andeq	r0, r0, r0, asr r0
 220:	00001128 	andeq	r1, r0, r8, lsr #2
        leds(1, 0);
 224:	00000048 	andeq	r0, r0, r8, asr #32
 228:	00001170 	andeq	r1, r0, r0, ror r1
 22c:	00000050 	andeq	r0, r0, r0, asr r0
 230:	00000000 	andeq	r0, r0, r0
 234:	00000058 	andeq	r0, r0, r8, asr r0
        leds(0, 0);
 238:	000011c0 	andeq	r1, r0, r0, asr #3
 23c:	000000a8 	andeq	r0, r0, r8, lsr #1
 240:	00001268 	andeq	r1, r0, r8, ror #4
 244:	00000034 	andeq	r0, r0, r4, lsr r0
 248:	0000129c 	muleq	r0, ip, r2
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
        } else if (choice == 'S' || choice == 's') {
 250:	00000000 	andeq	r0, r0, r0
            proceed Stop;
 254:	00000030 	andeq	r0, r0, r0, lsr r0
        } else if (choice == 'V' || choice == 'v') {
 258:	00000000 	andeq	r0, r0, r0
            proceed View_Settings;
 25c:	00000038 	andeq	r0, r0, r8, lsr r0
        } else if (choice == 'M' || choice == 'm') {
 260:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
            proceed Monitor;
 264:	0000013c 	andeq	r0, r0, ip, lsr r1
 268:	00000000 	andeq	r0, r0, r0
 26c:	00000024 	andeq	r0, r0, r4, lsr #32
	...
 278:	00000104 	andeq	r0, r0, r4, lsl #2
 27c:	2e440002 	cdpcs	0, 4, cr0, cr4, cr2, {0}
 280:	00040000 	andeq	r0, r4, r0
	...
 28c:	00000016 	andeq	r0, r0, r6, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	0000001a 	andeq	r0, r0, sl, lsl r0
static void devinit_uart (int devnum) {
 298:	00000000 	andeq	r0, r0, r0
	adddevfunc (ioreq_uart_a, devnum);
 29c:	0000000e 	andeq	r0, r0, lr
 2a0:	00000000 	andeq	r0, r0, r0
void udelay (volatile word n) {
 2a4:	0000004c 	andeq	r0, r0, ip, asr #32
 2a8:	00000000 	andeq	r0, r0, r0
	while (n) {
 2ac:	0000008c 	andeq	r0, r0, ip, lsl #1
 2b0:	00000000 	andeq	r0, r0, r0
}
 2b4:	00000070 	andeq	r0, r0, r0, ror r0
	while (n--);
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	000000c0 	andeq	r0, r0, r0, asr #1
 2c0:	00000000 	andeq	r0, r0, r0
		n--;
 2c4:	0000006c 	andeq	r0, r0, ip, rrx
 2c8:	00000000 	andeq	r0, r0, r0
 2cc:	00000024 	andeq	r0, r0, r4, lsr #32
void mdelay (volatile word n) {
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	00000080 	andeq	r0, r0, r0, lsl #1
	while (n) {
 2d8:	00000000 	andeq	r0, r0, r0
 2dc:	00000070 	andeq	r0, r0, r0, ror r0
}
 2e0:	00000000 	andeq	r0, r0, r0
		udelay (999);
 2e4:	00000078 	andeq	r0, r0, r8, ror r0
 2e8:	00000000 	andeq	r0, r0, r0
		n--;
 2ec:	000000bc 	strheq	r0, [r0], -ip
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 2f8:	00000000 	andeq	r0, r0, r0
void __pi_ondomain (lword d) {
 2fc:	00000038 	andeq	r0, r0, r8, lsr r0
 300:	00000000 	andeq	r0, r0, r0
		if (__pi_systat.effpdm > 1)
 304:	0000000a 	andeq	r0, r0, sl
 308:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
 30c:	0000002c 	andeq	r0, r0, ip, lsr #32
	PRCMPowerDomainOn (d);
 310:	00000000 	andeq	r0, r0, r0
 314:	00000060 	andeq	r0, r0, r0, rrx
 318:	00000000 	andeq	r0, r0, r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
 31c:	00000040 	andeq	r0, r0, r0, asr #32
 320:	00000000 	andeq	r0, r0, r0
 324:	0000002c 	andeq	r0, r0, ip, lsr #32
	__pi_systat.ondmns |= d;
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000003c 	andeq	r0, r0, ip, lsr r0
}
 330:	00000000 	andeq	r0, r0, r0
 334:	00000006 	andeq	r0, r0, r6
void __pi_syserror (word ec, const char *m) {
 338:	00000000 	andeq	r0, r0, r0
	diag ("SYSERR: %x, %s", ec, m);
 33c:	00000068 	andeq	r0, r0, r8, rrx
 340:	00000000 	andeq	r0, r0, r0
  __ASM volatile ("cpsid i" : : : "memory");
 344:	00000050 	andeq	r0, r0, r0, asr r0
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 348:	00000000 	andeq	r0, r0, r0
 34c:	0000009c 	muleq	r0, ip, r0
 350:	00000000 	andeq	r0, r0, r0
		all_leds_blink;
 354:	00000040 	andeq	r0, r0, r0, asr #32
 358:	00000000 	andeq	r0, r0, r0
 35c:	00000034 	andeq	r0, r0, r4, lsr r0
 360:	00000000 	andeq	r0, r0, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	00000000 	andeq	r0, r0, r0
 36c:	0000003c 	andeq	r0, r0, ip, lsr r0
 370:	000013f0 	strdeq	r1, [r0], -r0
 374:	00000002 	andeq	r0, r0, r2
	...
	while (1) {
 380:	00000034 	andeq	r0, r0, r4, lsr r0
 384:	417b0002 	cmnmi	fp, r2
 388:	00040000 	andeq	r0, r4, r0
void tci_run_delay_timer () {
 38c:	00000000 	andeq	r0, r0, r0
	setdel = __pi_mintk - __pi_old;
 390:	000013f2 	strdeq	r1, [r0], -r2
 394:	00000002 	andeq	r0, r0, r2
 398:	000013f4 	strdeq	r1, [r0], -r4
 39c:	00000002 	andeq	r0, r0, r2
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 3a0:	000013f6 	strdeq	r1, [r0], -r6
 3a4:	00000002 	andeq	r0, r0, r2
 3a8:	000013f8 	strdeq	r1, [r0], -r8
 3ac:	00000044 	andeq	r0, r0, r4, asr #32
	...
}
 3b8:	00000014 	andeq	r0, r0, r4, lsl r0
 3bc:	42f30002 	rscsmi	r0, r3, #2
 3c0:	00040000 	andeq	r0, r4, r0
	...
	cli_aux;
 3d0:	00000024 	andeq	r0, r0, r4, lsr #32
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
 3d4:	482e0002 	stmdami	lr!, {r1}
 3d8:	00040000 	andeq	r0, r4, r0
	...
	sti_aux;
 3e4:	00000002 	andeq	r0, r0, r2
}
 3e8:	00000000 	andeq	r0, r0, r0
 3ec:	00000058 	andeq	r0, r0, r8, asr r0
	...
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
 3f8:	00000024 	andeq	r0, r0, r4, lsr #32
 3fc:	4d320002 	ldcmi	0, cr0, [r2, #-8]!
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
 400:	00040000 	andeq	r0, r4, r0
	...
		if (*(__pi_utims [0])) {
 40c:	000000cc 	andeq	r0, r0, ip, asr #1
 410:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [0]))--;
 414:	00000038 	andeq	r0, r0, r8, lsr r0
	...
			aux_timer_inactive = 0;
 420:	0000008c 	andeq	r0, r0, ip, lsl #1
			(*(__pi_utims [1]))--;
 424:	522c0002 	eorpl	r0, ip, #2
		if (__pi_utims [2] == 0)
 428:	00040000 	andeq	r0, r4, r0
		if (*(__pi_utims [2])) {
 42c:	00000000 	andeq	r0, r0, r0
			(*(__pi_utims [2]))--;
 430:	00001444 	andeq	r1, r0, r4, asr #8
		if (__pi_utims [3] != 0) {
 434:	00000034 	andeq	r0, r0, r4, lsr r0
			if (*(__pi_utims [3])) {
 438:	00001478 	andeq	r1, r0, r8, ror r4
				aux_timer_inactive = 0;
 43c:	00000030 	andeq	r0, r0, r0, lsr r0
				(*(__pi_utims [3]))--;
 440:	000014a8 	andeq	r1, r0, r8, lsr #9
	if (__pi_systat.ledsts) {
 444:	00000018 	andeq	r0, r0, r8, lsl r0
 448:	000014c0 	andeq	r1, r0, r0, asr #9
		if (__pi_systat.ledblc++ == 0) {
 44c:	00000054 	andeq	r0, r0, r4, asr r0
 450:	00001514 	andeq	r1, r0, r4, lsl r5
			if (__pi_systat.ledblk) {
 454:	00000040 	andeq	r0, r0, r0, asr #32
 458:	00001554 	andeq	r1, r0, r4, asr r5
 45c:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
 460:	00001578 	andeq	r1, r0, r8, ror r5
 464:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_systat.ledsts & 0x2)
 468:	0000158c 	andeq	r1, r0, ip, lsl #11
 46c:	00000014 	andeq	r0, r0, r4, lsl r0
 470:	00000000 	andeq	r0, r0, r0
				if (__pi_systat.ledsts & 0x4)
 474:	00000064 	andeq	r0, r0, r4, rrx
				__pi_systat.ledblk = 0;
 478:	00000000 	andeq	r0, r0, r0
 47c:	00000128 	andeq	r0, r0, r8, lsr #2
			if (__pi_systat.fstblk)
 480:	00000000 	andeq	r0, r0, r0
 484:	000000ec 	andeq	r0, r0, ip, ror #1
				__pi_systat.ledblc = 200;
 488:	00000000 	andeq	r0, r0, r0
	if (events & AON_RTC_EVFLAGS_CH0) {
 48c:	00000002 	andeq	r0, r0, r2
		cli_tim;
 490:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
 494:	00000004 	andeq	r0, r0, r4
 498:	00000000 	andeq	r0, r0, r0
		setdel = 0;
 49c:	00000014 	andeq	r0, r0, r4, lsl r0
		RISE_N_SHINE;
 4a0:	00000000 	andeq	r0, r0, r0
		__pi_new += setdel;
 4a4:	0000001a 	andeq	r0, r0, sl, lsl r0
	...
		aux_timer_inactive = 1;
 4b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b4:	5cd70002 	ldclpl	0, cr0, [r7], {2}
				if (__pi_systat.ledsts & 0x1)
 4b8:	00040000 	andeq	r0, r4, r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
 4bc:	00000000 	andeq	r0, r0, r0
 4c0:	000015a0 	andeq	r1, r0, r0, lsr #11
				if (__pi_systat.ledsts & 0x2)
 4c4:	00000078 	andeq	r0, r0, r8, ror r0
	...
				if (__pi_systat.ledsts & 0x8)
 4d0:	0000001c 	andeq	r0, r0, ip, lsl r0
				__pi_systat.ledblk = 1;
 4d4:	60ed0002 	rscvs	r0, sp, r2
 4d8:	00040000 	andeq	r0, r4, r0
		if (aux_timer_inactive) {
 4dc:	00000000 	andeq	r0, r0, r0
			cli_aux;
 4e0:	00001618 	andeq	r1, r0, r8, lsl r6
 4e4:	00000054 	andeq	r0, r0, r4, asr r0
	...
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	653d0002 	ldrvs	r0, [sp, #-2]!
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	0000166c 	andeq	r1, r0, ip, ror #12
 504:	00000060 	andeq	r0, r0, r0, rrx
	...
	cli_tim;
 510:	0000001c 	andeq	r0, r0, ip, lsl r0
	if (setdel) {
 514:	698d0002 	stmibvs	sp, {r1}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 518:	00040000 	andeq	r0, r4, r0
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
 51c:	00000000 	andeq	r0, r0, r0
 520:	000016cc 	andeq	r1, r0, ip, asr #13
 524:	00000070 	andeq	r0, r0, r0, ror r0
	...
	return NO;
 530:	0000001c 	andeq	r0, r0, ip, lsl r0
			setdel = 0;
 534:	6dbe0002 	ldcvs	0, cr0, [lr, #8]!
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
 538:	00040000 	andeq	r0, r4, r0
 53c:	00000000 	andeq	r0, r0, r0
}
 540:	0000173c 	andeq	r1, r0, ip, lsr r7
		sti_tim;
 544:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
		return YES;
 550:	0000002c 	andeq	r0, r0, ip, lsr #32
 554:	72020002 	andvc	r0, r2, #2
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 558:	00040000 	andeq	r0, r4, r0
	UARTDisable (UART0_BASE);
 55c:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
 560:	00001858 	andeq	r1, r0, r8, asr r8
	UARTDisable (UART0_BASE);
 564:	00000020 	andeq	r0, r0, r0, lsr #32
	UARTConfigSetExpClk (UART0_BASE,
 568:	00001878 	andeq	r1, r0, r8, ror r8
 56c:	00000230 	andeq	r0, r0, r0, lsr r2
 570:	00001aa8 	andeq	r1, r0, r8, lsr #21
 574:	00000050 	andeq	r0, r0, r0, asr r0
	...
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
 584:	77f60002 	ldrbvc	r0, [r6, r2]!
 588:	00040000 	andeq	r0, r4, r0
 58c:	00000000 	andeq	r0, r0, r0
	urates [0] = rate;
 590:	00001af8 	strdeq	r1, [r0], -r8
}
 594:	00000390 	muleq	r0, r0, r3
	...
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	7d890002 	stcvc	0, cr0, [r9, #8]
 5a8:	00040000 	andeq	r0, r4, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
 5ac:	00000000 	andeq	r0, r0, r0
 5b0:	00001e88 	andeq	r1, r0, r8, lsl #29
 5b4:	00000030 	andeq	r0, r0, r0, lsr r0
	...
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
 5c0:	00000024 	andeq	r0, r0, r4, lsr #32
 5c4:	7e620002 	cdpvc	0, 6, cr0, cr2, cr2, {0}
	__pi_uart_setrate (urates [0], __pi_uart);
 5c8:	00040000 	andeq	r0, r4, r0
	...
 5d4:	00000020 	andeq	r0, r0, r0, lsr #32
 5d8:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
 5dc:	00000018 	andeq	r0, r0, r8, lsl r0
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ec:	7fa90002 	svcvc	0x00a90002
 5f0:	00040000 	andeq	r0, r4, r0
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	00001ed0 	ldrdeq	r1, [r0], -r0
				*buf++ = uart_a_read;
 5fc:	00000008 	andeq	r0, r0, r8
 600:	00000000 	andeq	r0, r0, r0
			while (len && uart_a_char_available) {
 604:	00000006 	andeq	r0, r0, r6
 608:	00001ed8 	ldrdeq	r1, [r0], -r8
 60c:	00000008 	andeq	r0, r0, r8
			if (len != operation) {
 610:	00000000 	andeq	r0, r0, r0
}
 614:	00000006 	andeq	r0, r0, r6
 618:	00000000 	andeq	r0, r0, r0
			uart_a_disable_int;
 61c:	00000008 	andeq	r0, r0, r8
	...
 628:	00000024 	andeq	r0, r0, r4, lsr #32
 62c:	80e30002 	rschi	r0, r3, r2
			if (uart_a_char_available) {
 630:	00040000 	andeq	r0, r4, r0
 634:	00000000 	andeq	r0, r0, r0
				uart_a_enable_int;
 638:	00001ee0 	andeq	r1, r0, r0, ror #29
 63c:	000000d4 	ldrdeq	r0, [r0], -r4
				goto Redo_rx;
 640:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
 644:	000000a4 	andeq	r0, r0, r4, lsr #1
	...
			return -2;
 650:	000000b4 	strheq	r0, [r0], -r4
				uart_a_write (*buf);
 654:	82ee0002 	rschi	r0, lr, #2
 658:	00040000 	andeq	r0, r4, r0
			while (len && uart_a_room_in_tx) {
 65c:	00000000 	andeq	r0, r0, r0
 660:	00002058 	andeq	r2, r0, r8, asr r0
 664:	0000007c 	andeq	r0, r0, ip, ror r0
			if (len != operation) {
 668:	000020d4 	ldrdeq	r2, [r0], -r4
			uart_a_disable_int;
 66c:	000000ac 	andeq	r0, r0, ip, lsr #1
 670:	00002180 	andeq	r2, r0, r0, lsl #3
			if (uart_a_room_in_tx) {
 674:	0000005c 	andeq	r0, r0, ip, asr r0
 678:	000021dc 	ldrdeq	r2, [r0], -ip
				uart_a_enable_int;
 67c:	00000018 	andeq	r0, r0, r8, lsl r0
 680:	00000000 	andeq	r0, r0, r0
				*buf++ = uart_a_read;
 684:	00000010 	andeq	r0, r0, r0, lsl r0
			if (uart_a_room_in_tx) {
 688:	000021f4 	strdeq	r2, [r0], -r4
				uart_a_write (*buf);
 68c:	00000010 	andeq	r0, r0, r0, lsl r0
 690:	00002204 	andeq	r2, r0, r4, lsl #4
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
 694:	00000014 	andeq	r0, r0, r4, lsl r0
 698:	00002218 	andeq	r2, r0, r8, lsl r2
			uart_a_enable_int;
 69c:	00000064 	andeq	r0, r0, r4, rrx
 6a0:	0000227c 	andeq	r2, r0, ip, ror r2
 6a4:	00000014 	andeq	r0, r0, r4, lsl r0
			return 0;
 6a8:	00002290 	muleq	r0, r0, r2
			if (len == UART_CNTRL_SETRATE) {
 6ac:	00000014 	andeq	r0, r0, r4, lsl r0
				if (__pi_uart_setrate (*((word*)buf),
 6b0:	000022a4 	andeq	r2, r0, r4, lsr #5
 6b4:	00000014 	andeq	r0, r0, r4, lsl r0
 6b8:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
				syserror (EREQPAR, "uar");
 6bc:	00000028 	andeq	r0, r0, r8, lsr #32
			syserror (ENOOPER, "uai");
 6c0:	000022e0 	andeq	r2, r0, r0, ror #5
			if (len == UART_CNTRL_GETRATE) {
 6c4:	00000010 	andeq	r0, r0, r0, lsl r0
				return 1;
 6c8:	000022f0 	strdeq	r2, [r0], -r0
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
 6cc:	0000002c 	andeq	r0, r0, ip, lsr #32
			syserror (ENOOPER, "uai");
 6d0:	0000231c 	andeq	r2, r0, ip, lsl r3
 6d4:	00000014 	andeq	r0, r0, r4, lsl r0
 6d8:	00002330 	andeq	r2, r0, r0, lsr r3
 6dc:	00000014 	andeq	r0, r0, r4, lsl r0
 6e0:	00002344 	andeq	r2, r0, r4, asr #6
 6e4:	00000110 	andeq	r0, r0, r0, lsl r1
 6e8:	00002454 	andeq	r2, r0, r4, asr r4
 6ec:	00000064 	andeq	r0, r0, r4, rrx
 6f0:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
 6f4:	00000028 	andeq	r0, r0, r8, lsr #32
void UART0IntHandler () {
 6f8:	000024e0 	andeq	r2, r0, r0, ror #9
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
 6fc:	00000150 	andeq	r0, r0, r0, asr r1
	...
 708:	0000003c 	andeq	r0, r0, ip, lsr r0
 70c:	8e090002 	cdphi	0, 0, cr0, cr9, cr2, {0}
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
 710:	00040000 	andeq	r0, r4, r0
	...
		RISE_N_SHINE;
 71c:	000000f4 	strdeq	r0, [r0], -r4
		i_trigger (devevent (UART_A, READ));
 720:	00002630 	andeq	r2, r0, r0, lsr r6
 724:	00000220 	andeq	r0, r0, r0, lsr #4
 728:	00002850 	andeq	r2, r0, r0, asr r8
 72c:	00000060 	andeq	r0, r0, r0, rrx
 730:	00000000 	andeq	r0, r0, r0
 734:	00000078 	andeq	r0, r0, r8, ror r0
 738:	000028b0 			; <UNDEFINED> instruction: 0x000028b0
 73c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 748:	00000044 	andeq	r0, r0, r4, asr #32
 74c:	97300002 	ldrls	r0, [r0, -r2]!
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
 750:	00040000 	andeq	r0, r4, r0
	...
		i_trigger (devevent (UART_A, WRITE));
 75c:	00000010 	andeq	r0, r0, r0, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
 760:	00000000 	andeq	r0, r0, r0
 764:	00000018 	andeq	r0, r0, r8, lsl r0
		RISE_N_SHINE;
 768:	000028c8 	andeq	r2, r0, r8, asr #17
 76c:	0000004c 	andeq	r0, r0, ip, asr #32
 770:	00000000 	andeq	r0, r0, r0
		i_trigger (devevent (UART_A, WRITE));
 774:	00000030 	andeq	r0, r0, r0, lsr r0
 778:	00002914 	andeq	r2, r0, r4, lsl r9
 77c:	0000006c 	andeq	r0, r0, ip, rrx
 780:	00002980 	andeq	r2, r0, r0, lsl #19
 784:	00000016 	andeq	r0, r0, r6, lsl r0
	...
 790:	00000044 	andeq	r0, r0, r4, asr #32
 794:	9b000002 	blls	7a4 <UART0IntHandler+0xb0>
 798:	00040000 	andeq	r0, r4, r0
 79c:	00000000 	andeq	r0, r0, r0
}
 7a0:	00002998 	muleq	r0, r8, r9
 7a4:	00000028 	andeq	r0, r0, r8, lsr #32
 7a8:	000029c0 	andeq	r2, r0, r0, asr #19
 7ac:	00000008 	andeq	r0, r0, r8
 7b0:	00000000 	andeq	r0, r0, r0
void __buttons_setirq (int val) {
 7b4:	00000022 	andeq	r0, r0, r2, lsr #32
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	0000002e 	andeq	r0, r0, lr, lsr #32
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 7c0:	00000000 	andeq	r0, r0, r0
 7c4:	00000034 	andeq	r0, r0, r4, lsr r0
 7c8:	00000000 	andeq	r0, r0, r0
		bn = BUTTON_GPIO (__button_list [i]);
 7cc:	00000040 	andeq	r0, r0, r0, asr #32
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 7d8:	00000064 	andeq	r0, r0, r4, rrx
 7dc:	a0ab0002 	adcge	r0, fp, r2
 7e0:	00040000 	andeq	r0, r4, r0
 7e4:	00000000 	andeq	r0, r0, r0
}
 7e8:	000029c8 	andeq	r2, r0, r8, asr #19
 7ec:	0000005c 	andeq	r0, r0, ip, asr r0
 7f0:	00002a24 	andeq	r2, r0, r4, lsr #20
 7f4:	0000002c 	andeq	r0, r0, ip, lsr #32
void __pinlist_setirq (int val) {
 7f8:	00000000 	andeq	r0, r0, r0
	for (i = 0; i < N_PINLIST; i++) {
 7fc:	00000090 	muleq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 800:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 804:	00000018 	andeq	r0, r0, r8, lsl r0
	for (i = 0; i < N_PINLIST; i++) {
 808:	00000000 	andeq	r0, r0, r0
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
 80c:	00000060 	andeq	r0, r0, r0, rrx
 810:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
 814:	00000034 	andeq	r0, r0, r4, lsr r0
 818:	00000000 	andeq	r0, r0, r0
 81c:	00000038 	andeq	r0, r0, r8, lsr r0
	for (i = 0; i < N_PINLIST; i++) {
 820:	00000000 	andeq	r0, r0, r0
}
 824:	0000000c 	andeq	r0, r0, ip
 828:	00000000 	andeq	r0, r0, r0
 82c:	00000034 	andeq	r0, r0, r4, lsr r0
 830:	00000000 	andeq	r0, r0, r0
void GPIOIntHandler () {
 834:	0000001c 	andeq	r0, r0, ip, lsl r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
       0:	00000001 	andeq	r0, r0, r1
       4:	00000001 	andeq	r0, r0, r1
       8:	00000001 	andeq	r0, r0, r1
       c:	00000001 	andeq	r0, r0, r1
      10:	00000001 	andeq	r0, r0, r1
      14:	00000001 	andeq	r0, r0, r1
	...
      20:	00000110 	andeq	r0, r0, r0, lsl r1
      24:	00000110 	andeq	r0, r0, r0, lsl r1
      28:	0000011a 	andeq	r0, r0, sl, lsl r1
      2c:	00000134 	andeq	r0, r0, r4, lsr r1
      30:	00000152 	andeq	r0, r0, r2, asr r1
      34:	0000016c 	andeq	r0, r0, ip, ror #2
	...
			i = k;
      40:	00000182 	andeq	r0, r0, r2, lsl #3
				j->Next = k;
      44:	00000248 	andeq	r0, r0, r8, asr #4
      48:	0000024e 	andeq	r0, r0, lr, asr #4
}
      4c:	0000026a 	andeq	r0, r0, sl, ror #4
	...
		release;
      58:	000001a2 	andeq	r0, r0, r2, lsr #3
      5c:	000001c4 	andeq	r0, r0, r4, asr #3
      60:	0000024e 	andeq	r0, r0, lr, asr #4
      64:	00000266 	andeq	r0, r0, r6, ror #4
	...
      70:	00000232 	andeq	r0, r0, r2, lsr r2
      74:	00000234 	andeq	r0, r0, r4, lsr r2
      78:	00000236 	andeq	r0, r0, r6, lsr r2
      7c:	00000238 	andeq	r0, r0, r8, lsr r2
	...
      88:	00000001 	andeq	r0, r0, r1
      8c:	00000001 	andeq	r0, r0, r1
	descriptors [fd] = s;
      90:	000000c8 	andeq	r0, r0, r8, asr #1
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	00000110 	andeq	r0, r0, r0, lsl r1
      98:	00000110 	andeq	r0, r0, r0, lsl r1
	if (s == NULL)
      9c:	0000016c 	andeq	r0, r0, ip, ror #2
		syserror (EMALLOC, "tcv05");
      a0:	0000016c 	andeq	r0, r0, ip, ror #2
      a4:	00000298 	muleq	r0, r8, r2
	...
      b0:	00000346 	andeq	r0, r0, r6, asr #6
      b4:	0000034c 	andeq	r0, r0, ip, asr #6
      b8:	0000034c 	andeq	r0, r0, ip, asr #6
      bc:	0000034c 	andeq	r0, r0, ip, asr #6
      c0:	00000350 	andeq	r0, r0, r0, asr r3
      c4:	00000352 	andeq	r0, r0, r2, asr r3
	...
      d0:	0000034c 	andeq	r0, r0, ip, asr #6
      d4:	0000034e 	andeq	r0, r0, lr, asr #6
      d8:	00000352 	andeq	r0, r0, r2, asr r3
      dc:	00000354 	andeq	r0, r0, r4, asr r3
	...
      e8:	00000364 	andeq	r0, r0, r4, ror #6
      ec:	00000366 	andeq	r0, r0, r6, ror #6
      f0:	00000368 	andeq	r0, r0, r8, ror #6
			wwait (st, 50);
      f4:	0000036a 	andeq	r0, r0, sl, ror #6
	...
		if (from >= EE_SIZE || upto < from)
     100:	0000039e 	muleq	r0, lr, r3
     104:	000003a2 	andeq	r0, r0, r2, lsr #7
			upto = EE_SIZE - 1;
     108:	000003a4 	andeq	r0, r0, r4, lsr #7
     10c:	000003a6 	andeq	r0, r0, r6, lsr #7
     110:	000003a8 	andeq	r0, r0, r8, lsr #7
     114:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
	...
     120:	000003d4 	ldrdeq	r0, [r0], -r4
     124:	000003da 	ldrdeq	r0, [r0], -sl
}
     128:	000003dc 	ldrdeq	r0, [r0], -ip
     12c:	000003e2 	andeq	r0, r0, r2, ror #7
	...
     138:	00000404 	andeq	r0, r0, r4, lsl #8
     13c:	0000048a 	andeq	r0, r0, sl, lsl #9
    cycles[0].offTime = numbers[1];
     140:	000004b0 			; <UNDEFINED> instruction: 0x000004b0
    cycles[1].onTime = numbers[2];
     144:	00000508 	andeq	r0, r0, r8, lsl #10
	...
}
     150:	00000578 	andeq	r0, r0, r8, ror r5
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	0000057a 	andeq	r0, r0, sl, ror r5
            number = number * 10;
     158:	0000057c 	andeq	r0, r0, ip, ror r5
     15c:	00000590 	muleq	r0, r0, r5
	...
            number += settingsInput[i] - 48;
     168:	000005ac 	andeq	r0, r0, ip, lsr #11
fsm root {
     16c:	000005ae 	andeq	r0, r0, lr, lsr #11
     170:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
     174:	000005b8 			; <UNDEFINED> instruction: 0x000005b8
	...
     180:	000006f4 	strdeq	r0, [r0], -r4
        initCycles();
     184:	000006f8 	strdeq	r0, [r0], -r8
        ser_outf(Initial, "Enter your name: ");
     188:	000006fa 	strdeq	r0, [r0], -sl
     18c:	000006fc 	strdeq	r0, [r0], -ip
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	000006fe 	strdeq	r0, [r0], -lr
     194:	00000700 	andeq	r0, r0, r0, lsl #14
	...
        ser_outf(Show_Menu, "Welcome %s\n\r"
     1a0:	0000075c 	andeq	r0, r0, ip, asr r7
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	00000760 	andeq	r0, r0, r0, ror #14
     1a8:	00000772 	andeq	r0, r0, r2, ror r7
        if (choice == 'A' || choice == 'a'){
     1ac:	0000079e 	muleq	r0, lr, r7
	...
            proceed Adjust_Intervals;
     1b8:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
            proceed Monitor;
     1bc:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
        proceed Show_Menu;
     1c0:	000007b6 			; <UNDEFINED> instruction: 0x000007b6
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
	...
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1d0:	000007b8 			; <UNDEFINED> instruction: 0x000007b8
     1d4:	000007ba 			; <UNDEFINED> instruction: 0x000007ba
        processSettingsInput(settings);
     1d8:	000007bc 			; <UNDEFINED> instruction: 0x000007bc
        proceed Show_Menu;
     1dc:	000007be 			; <UNDEFINED> instruction: 0x000007be
     1e0:	000007c4 	andeq	r0, r0, r4, asr #15
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	000007ca 	andeq	r0, r0, sl, asr #15
     1e8:	000007d4 	ldrdeq	r0, [r0], -r4
     1ec:	000007d6 	ldrdeq	r0, [r0], -r6
     1f0:	000007e2 	andeq	r0, r0, r2, ror #15
     1f4:	000007e4 	andeq	r0, r0, r4, ror #15
	...
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	000007f8 	strdeq	r0, [r0], -r8
     204:	000007f8 	strdeq	r0, [r0], -r8
        displayCycle = YES;
     208:	000007fa 	strdeq	r0, [r0], -sl
        ser_inf(Await_Stop, "%c", ch);
     20c:	000007fc 	strdeq	r0, [r0], -ip
	...
        proceed Monitor;
     218:	000007fe 	strdeq	r0, [r0], -lr
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     21c:	00000800 	andeq	r0, r0, r0, lsl #16
     220:	00000802 	andeq	r0, r0, r2, lsl #16
        leds(1, 0);
     224:	00000804 	andeq	r0, r0, r4, lsl #16
     228:	0000080e 	andeq	r0, r0, lr, lsl #16
     22c:	00000812 	andeq	r0, r0, r2, lsl r8
     230:	0000081c 	andeq	r0, r0, ip, lsl r8
     234:	0000081e 	andeq	r0, r0, lr, lsl r8
	...
        leds(0, 0);
     240:	00000902 	andeq	r0, r0, r2, lsl #18
     244:	00000904 	andeq	r0, r0, r4, lsl #18
     248:	00000906 	andeq	r0, r0, r6, lsl #18
     24c:	0000090a 	andeq	r0, r0, sl, lsl #18
        } else if (choice == 'S' || choice == 's') {
     250:	0000091a 	andeq	r0, r0, sl, lsl r9
            proceed Stop;
     254:	0000091c 	andeq	r0, r0, ip, lsl r9
	...
        } else if (choice == 'M' || choice == 'm') {
     260:	00000904 	andeq	r0, r0, r4, lsl #18
            proceed Monitor;
     264:	00000906 	andeq	r0, r0, r6, lsl #18
     268:	0000090a 	andeq	r0, r0, sl, lsl #18
     26c:	0000091a 	andeq	r0, r0, sl, lsl r9
     270:	0000091c 	andeq	r0, r0, ip, lsl r9
     274:	00000956 	andeq	r0, r0, r6, asr r9
	...
     280:	0000090e 	andeq	r0, r0, lr, lsl #18
     284:	00000912 	andeq	r0, r0, r2, lsl r9
     288:	0000093a 	andeq	r0, r0, sl, lsr r9
     28c:	00000942 	andeq	r0, r0, r2, asr #18
	...
static void devinit_uart (int devnum) {
     298:	00000912 	andeq	r0, r0, r2, lsl r9
	adddevfunc (ioreq_uart_a, devnum);
     29c:	00000916 	andeq	r0, r0, r6, lsl r9
     2a0:	0000094e 	andeq	r0, r0, lr, asr #18
void udelay (volatile word n) {
     2a4:	00000952 	andeq	r0, r0, r2, asr r9
	...
	while (n) {
     2b0:	00000916 	andeq	r0, r0, r6, lsl r9
}
     2b4:	0000091a 	andeq	r0, r0, sl, lsl r9
	while (n--);
     2b8:	00000948 	andeq	r0, r0, r8, asr #18
     2bc:	0000094e 	andeq	r0, r0, lr, asr #18
	...
		n--;
     2c8:	00000956 	andeq	r0, r0, r6, asr r9
     2cc:	00000958 	andeq	r0, r0, r8, asr r9
void mdelay (volatile word n) {
     2d0:	0000095a 	andeq	r0, r0, sl, asr r9
     2d4:	0000095c 	andeq	r0, r0, ip, asr r9
	while (n) {
     2d8:	0000095e 	andeq	r0, r0, lr, asr r9
     2dc:	00000960 	andeq	r0, r0, r0, ror #18
	...
		udelay (999);
     2e8:	00000958 	andeq	r0, r0, r8, asr r9
		n--;
     2ec:	0000095a 	andeq	r0, r0, sl, asr r9
     2f0:	00000960 	andeq	r0, r0, r0, ror #18
     2f4:	00000962 	andeq	r0, r0, r2, ror #18
	...
void __pi_ondomain (lword d) {
     300:	00000972 	andeq	r0, r0, r2, ror r9
		if (__pi_systat.effpdm > 1)
     304:	00000974 	andeq	r0, r0, r4, ror r9
     308:	00000976 	andeq	r0, r0, r6, ror r9
			__pi_systat.effpdm = 1;
     30c:	00000978 	andeq	r0, r0, r8, ror r9
	...
	PRCMPowerDomainOn (d);
     318:	0000098a 	andeq	r0, r0, sl, lsl #19
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	0000098c 	andeq	r0, r0, ip, lsl #19
     320:	0000098e 	andeq	r0, r0, lr, lsl #19
     324:	00000990 	muleq	r0, r0, r9
	...
}
     330:	000009d2 	ldrdeq	r0, [r0], -r2
     334:	000009d2 	ldrdeq	r0, [r0], -r2
void __pi_syserror (word ec, const char *m) {
     338:	000009d6 	ldrdeq	r0, [r0], -r6
	diag ("SYSERR: %x, %s", ec, m);
     33c:	000009d8 	ldrdeq	r0, [r0], -r8
	...
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	00000a08 	andeq	r0, r0, r8, lsl #20
     34c:	00000a0a 	andeq	r0, r0, sl, lsl #20
     350:	00000a0c 	andeq	r0, r0, ip, lsl #20
		all_leds_blink;
     354:	00000a14 	andeq	r0, r0, r4, lsl sl
	...
     360:	00000a90 	muleq	r0, r0, sl
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	00000a90 	muleq	r0, r0, sl
     368:	00000a96 	muleq	r0, r6, sl
     36c:	00000a98 	muleq	r0, r8, sl
     370:	00000a9a 	muleq	r0, sl, sl
     374:	00000a9e 	muleq	r0, lr, sl
	...
	while (1) {
     380:	00000aaa 	andeq	r0, r0, sl, lsr #21
     384:	00000aac 	andeq	r0, r0, ip, lsr #21
     388:	00000ac2 	andeq	r0, r0, r2, asr #21
void tci_run_delay_timer () {
     38c:	00000ac4 	andeq	r0, r0, r4, asr #21
	setdel = __pi_mintk - __pi_old;
     390:	00000ad6 	ldrdeq	r0, [r0], -r6
     394:	00000af2 	strdeq	r0, [r0], -r2
     398:	00000b16 	andeq	r0, r0, r6, lsl fp
     39c:	00000c70 	andeq	r0, r0, r0, ror ip
	...
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a8:	00000aaa 	andeq	r0, r0, sl, lsr #21
     3ac:	00000aac 	andeq	r0, r0, ip, lsr #21
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	00000b4a 	andeq	r0, r0, sl, asr #22
	sti_tim;
     3b4:	00000b4e 	andeq	r0, r0, lr, asr #22
	...
}
     3c0:	00000b4e 	andeq	r0, r0, lr, asr #22
     3c4:	00000b4e 	andeq	r0, r0, lr, asr #22
     3c8:	00000b52 	andeq	r0, r0, r2, asr fp
	cli_aux;
     3cc:	00000b56 	andeq	r0, r0, r6, asr fp
     3d0:	00000b5a 	andeq	r0, r0, sl, asr fp
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	00000b5c 	andeq	r0, r0, ip, asr fp
	...
     3e0:	00000b4e 	andeq	r0, r0, lr, asr #22
	sti_aux;
     3e4:	00000b52 	andeq	r0, r0, r2, asr fp
}
     3e8:	00000b68 	andeq	r0, r0, r8, ror #22
     3ec:	00000b6a 	andeq	r0, r0, sl, ror #22
     3f0:	00000b6e 	andeq	r0, r0, lr, ror #22
void AONRTCIntHandler () {
     3f4:	00000b72 	andeq	r0, r0, r2, ror fp
	...
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	00000b56 	andeq	r0, r0, r6, asr fp
		if (__pi_utims [0] == 0)
     404:	00000b5a 	andeq	r0, r0, sl, asr fp
     408:	00000b5c 	andeq	r0, r0, ip, asr fp
		if (*(__pi_utims [0])) {
     40c:	00000b5e 	andeq	r0, r0, lr, asr fp
     410:	00000b62 	andeq	r0, r0, r2, ror #22
			(*(__pi_utims [0]))--;
     414:	00000b66 	andeq	r0, r0, r6, ror #22
	...
			aux_timer_inactive = 0;
     420:	00000b6a 	andeq	r0, r0, sl, ror #22
			(*(__pi_utims [1]))--;
     424:	00000b6e 	andeq	r0, r0, lr, ror #22
		if (__pi_utims [2] == 0)
     428:	00000b88 	andeq	r0, r0, r8, lsl #23
		if (*(__pi_utims [2])) {
     42c:	00000b8c 	andeq	r0, r0, ip, lsl #23
			(*(__pi_utims [2]))--;
     430:	00000b8e 	andeq	r0, r0, lr, lsl #23
		if (__pi_utims [3] != 0) {
     434:	00000b96 	muleq	r0, r6, fp
	...
				(*(__pi_utims [3]))--;
     440:	00000b80 	andeq	r0, r0, r0, lsl #23
	if (__pi_systat.ledsts) {
     444:	00000b82 	andeq	r0, r0, r2, lsl #23
     448:	00000b84 	andeq	r0, r0, r4, lsl #23
		if (__pi_systat.ledblc++ == 0) {
     44c:	00000b88 	andeq	r0, r0, r8, lsl #23
	...
			if (__pi_systat.ledblk) {
     458:	00000bc4 	andeq	r0, r0, r4, asr #23
     45c:	00000bc8 	andeq	r0, r0, r8, asr #23
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	00000bca 	andeq	r0, r0, sl, asr #23
     464:	00000bd2 	ldrdeq	r0, [r0], -r2
	...
     470:	00000bc8 	andeq	r0, r0, r8, asr #23
				if (__pi_systat.ledsts & 0x4)
     474:	00000bca 	andeq	r0, r0, sl, asr #23
				__pi_systat.ledblk = 0;
     478:	00000bd6 	ldrdeq	r0, [r0], -r6
     47c:	00000bd8 	ldrdeq	r0, [r0], -r8
	...
				__pi_systat.ledblc = 200;
     488:	00000bf6 	strdeq	r0, [r0], -r6
	if (events & AON_RTC_EVFLAGS_CH0) {
     48c:	00000bf8 	strdeq	r0, [r0], -r8
		cli_tim;
     490:	00000bfa 	strdeq	r0, [r0], -sl
		__pi_new += setdel;
     494:	00000bfc 	strdeq	r0, [r0], -ip
	...
		RISE_N_SHINE;
     4a0:	00000bf8 	strdeq	r0, [r0], -r8
		__pi_new += setdel;
     4a4:	00000bfa 	strdeq	r0, [r0], -sl
		RISE_N_SHINE;
     4a8:	00000bfc 	strdeq	r0, [r0], -ip
     4ac:	00000c00 	andeq	r0, r0, r0, lsl #24
	...
				if (__pi_systat.ledsts & 0x1)
     4b8:	00000c56 	andeq	r0, r0, r6, asr ip
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	00000c58 	andeq	r0, r0, r8, asr ip
     4c0:	00000c58 	andeq	r0, r0, r8, asr ip
				if (__pi_systat.ledsts & 0x2)
     4c4:	00000c5a 	andeq	r0, r0, sl, asr ip
	...
				if (__pi_systat.ledsts & 0x8)
     4d0:	00000c5e 	andeq	r0, r0, lr, asr ip
				__pi_systat.ledblk = 1;
     4d4:	00000c62 	andeq	r0, r0, r2, ror #24
     4d8:	00000c64 	andeq	r0, r0, r4, ror #24
		if (aux_timer_inactive) {
     4dc:	00000c66 	andeq	r0, r0, r6, ror #24
	...
			cli_aux;
     4e8:	00000001 	andeq	r0, r0, r1
     4ec:	00000001 	andeq	r0, r0, r1
     4f0:	00000001 	andeq	r0, r0, r1
     4f4:	00000001 	andeq	r0, r0, r1
	...
     500:	00000ce8 	andeq	r0, r0, r8, ror #25
     504:	00000ce8 	andeq	r0, r0, r8, ror #25
word tci_update_delay_ticks (Boolean force) {
     508:	00000cec 	andeq	r0, r0, ip, ror #25
	cli_tim;
     50c:	00000cf8 	strdeq	r0, [r0], -r8
	...
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	00000298 	muleq	r0, r8, r2
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	000002a4 	andeq	r0, r0, r4, lsr #5
     520:	000002a4 	andeq	r0, r0, r4, lsr #5
     524:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
				AON_RTC_O_CH0CMP)) - gettav ());
     52c:	000002fa 	strdeq	r0, [r0], -sl
	return NO;
     530:	000002fc 	strdeq	r0, [r0], -ip
			setdel = 0;
     534:	00000338 	andeq	r0, r0, r8, lsr r3
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     538:	00000001 	andeq	r0, r0, r1
     53c:	00000001 	andeq	r0, r0, r1
}
     540:	00000001 	andeq	r0, r0, r1
		sti_tim;
     544:	00000001 	andeq	r0, r0, r1
		return YES;
     548:	00000338 	andeq	r0, r0, r8, lsr r3
     54c:	0000038c 	andeq	r0, r0, ip, lsl #7
     550:	0000038c 	andeq	r0, r0, ip, lsl #7
     554:	000003cc 	andeq	r0, r0, ip, asr #7
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	000003cc 	andeq	r0, r0, ip, asr #7
	UARTDisable (UART0_BASE);
     55c:	000003f4 	strdeq	r0, [r0], -r4
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	000003f4 	strdeq	r0, [r0], -r4
	UARTDisable (UART0_BASE);
     564:	00000508 	andeq	r0, r0, r8, lsl #10
	UARTConfigSetExpClk (UART0_BASE,
     568:	00000508 	andeq	r0, r0, r8, lsl #10
     56c:	00000558 	andeq	r0, r0, r8, asr r5
     570:	00000558 	andeq	r0, r0, r8, asr r5
     574:	000005ac 	andeq	r0, r0, ip, lsr #11
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	000005ac 	andeq	r0, r0, ip, lsr #11
     57c:	000005e4 	andeq	r0, r0, r4, ror #11
     580:	000005e4 	andeq	r0, r0, r4, ror #11
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	000006f4 	strdeq	r0, [r0], -r4
     588:	00000001 	andeq	r0, r0, r1
     58c:	00000001 	andeq	r0, r0, r1
	urates [0] = rate;
     590:	000006f4 	strdeq	r0, [r0], -r4
}
     594:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     598:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     59c:	000007f8 	strdeq	r0, [r0], -r8
     5a0:	000007f8 	strdeq	r0, [r0], -r8
     5a4:	00000834 	andeq	r0, r0, r4, lsr r8
     5a8:	00000834 	andeq	r0, r0, r4, lsr r8
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	000008d8 	ldrdeq	r0, [r0], -r8
     5b0:	000008d8 	ldrdeq	r0, [r0], -r8
     5b4:	00000a90 	muleq	r0, r0, sl
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	00000001 	andeq	r0, r0, r1
     5bc:	00000001 	andeq	r0, r0, r1
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c0:	00000001 	andeq	r0, r0, r1
     5c4:	00000001 	andeq	r0, r0, r1
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	00000a90 	muleq	r0, r0, sl
     5cc:	00000ce8 	andeq	r0, r0, r8, ror #25
     5d0:	00000001 	andeq	r0, r0, r1
     5d4:	00000001 	andeq	r0, r0, r1
     5d8:	00000001 	andeq	r0, r0, r1
     5dc:	00000001 	andeq	r0, r0, r1
     5e0:	00000ce8 	andeq	r0, r0, r8, ror #25
	switch (operation) {
     5e4:	00000d48 	andeq	r0, r0, r8, asr #26
	...
static int ioreq_uart_a (int operation, char *buf, int len) {
     5f0:	00000e04 	andeq	r0, r0, r4, lsl #28
     5f4:	00000e06 	andeq	r0, r0, r6, lsl #28
     5f8:	00000e06 	andeq	r0, r0, r6, lsl #28
				*buf++ = uart_a_read;
     5fc:	00000e08 	andeq	r0, r0, r8, lsl #28
	...
			while (len && uart_a_char_available) {
     608:	00000e3a 	andeq	r0, r0, sl, lsr lr
     60c:	00000edc 	ldrdeq	r0, [r0], -ip
			if (len != operation) {
     610:	00000ee0 	andeq	r0, r0, r0, ror #29
}
     614:	00000ee4 	andeq	r0, r0, r4, ror #29
	...
			if (uart_a_char_available) {
     620:	00001278 	andeq	r1, r0, r8, ror r2
				*buf++ = uart_a_read;
     624:	0000127a 	andeq	r1, r0, sl, ror r2
			uart_a_disable_int;
     628:	0000127e 	andeq	r1, r0, lr, ror r2
     62c:	00001280 	andeq	r1, r0, r0, lsl #5
			if (uart_a_char_available) {
     630:	00001284 	andeq	r1, r0, r4, lsl #5
     634:	00001288 	andeq	r1, r0, r8, lsl #5
				uart_a_enable_int;
     638:	0000128a 	andeq	r1, r0, sl, lsl #5
     63c:	00001294 	muleq	r0, r4, r2
	...
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     648:	000012c6 	andeq	r1, r0, r6, asr #5
			return -2;
     64c:	000012c8 	andeq	r1, r0, r8, asr #5
     650:	000012ca 	andeq	r1, r0, sl, asr #5
				uart_a_write (*buf);
     654:	000012ce 	andeq	r1, r0, lr, asr #5
     658:	0000135e 	andeq	r1, r0, lr, asr r3
			while (len && uart_a_room_in_tx) {
     65c:	000013c0 	andeq	r1, r0, r0, asr #7
     660:	000013c4 	andeq	r1, r0, r4, asr #7
     664:	000013c8 	andeq	r1, r0, r8, asr #7
			if (len != operation) {
     668:	000013ca 	andeq	r1, r0, sl, asr #7
			uart_a_disable_int;
     66c:	000013cc 	andeq	r1, r0, ip, asr #7
	...
			if (uart_a_room_in_tx) {
     678:	000012e2 	andeq	r1, r0, r2, ror #5
				uart_a_enable_int;
     67c:	000012e4 	andeq	r1, r0, r4, ror #5
     680:	000012e4 	andeq	r1, r0, r4, ror #5
				*buf++ = uart_a_read;
     684:	000012e6 	andeq	r1, r0, r6, ror #5
	...
				uart_a_write (*buf);
     690:	00000d48 	andeq	r0, r0, r8, asr #26
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	00000d84 	andeq	r0, r0, r4, lsl #27
     698:	00000d84 	andeq	r0, r0, r4, lsl #27
			uart_a_enable_int;
     69c:	00000e04 	andeq	r0, r0, r4, lsl #28
     6a0:	00000e04 	andeq	r0, r0, r4, lsl #28
     6a4:	00000e1c 	andeq	r0, r0, ip, lsl lr
			return 0;
     6a8:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_SETRATE) {
     6ac:	00000001 	andeq	r0, r0, r1
				if (__pi_uart_setrate (*((word*)buf),
     6b0:	00000e1c 	andeq	r0, r0, ip, lsl lr
     6b4:	00000e2c 	andeq	r0, r0, ip, lsr #28
     6b8:	00000001 	andeq	r0, r0, r1
				syserror (EREQPAR, "uar");
     6bc:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     6c0:	00000001 	andeq	r0, r0, r1
			if (len == UART_CNTRL_GETRATE) {
     6c4:	00000001 	andeq	r0, r0, r1
				return 1;
     6c8:	00000001 	andeq	r0, r0, r1
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	00000001 	andeq	r0, r0, r1
			syserror (ENOOPER, "uai");
     6d0:	00000e2c 	andeq	r0, r0, ip, lsr #28
     6d4:	00000ef8 	strdeq	r0, [r0], -r8
     6d8:	00000ef8 	strdeq	r0, [r0], -r8
     6dc:	00000f0c 	andeq	r0, r0, ip, lsl #30
     6e0:	00000f0c 	andeq	r0, r0, ip, lsl #30
     6e4:	00000f40 	andeq	r0, r0, r0, asr #30
     6e8:	00000f40 	andeq	r0, r0, r0, asr #30
     6ec:	00000f74 	andeq	r0, r0, r4, ror pc
     6f0:	00000001 	andeq	r0, r0, r1
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	00000001 	andeq	r0, r0, r1
void UART0IntHandler () {
     6f8:	00000f74 	andeq	r0, r0, r4, ror pc
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     700:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     704:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     708:	00000001 	andeq	r0, r0, r1
     70c:	00000001 	andeq	r0, r0, r1
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	00000001 	andeq	r0, r0, r1
     714:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     718:	00000001 	andeq	r0, r0, r1
     71c:	00000001 	andeq	r0, r0, r1
		i_trigger (devevent (UART_A, READ));
     720:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     724:	00000ff4 	strdeq	r0, [r0], -r4
     728:	00000001 	andeq	r0, r0, r1
     72c:	00000001 	andeq	r0, r0, r1
     730:	00000ff4 	strdeq	r0, [r0], -r4
     734:	00001002 	andeq	r1, r0, r2
     738:	00000001 	andeq	r0, r0, r1
     73c:	00000001 	andeq	r0, r0, r1
     740:	00000001 	andeq	r0, r0, r1
     744:	00000001 	andeq	r0, r0, r1
     748:	00000001 	andeq	r0, r0, r1
     74c:	00000001 	andeq	r0, r0, r1
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	00000001 	andeq	r0, r0, r1
     754:	00000001 	andeq	r0, r0, r1
     758:	00001002 	andeq	r1, r0, r2
		i_trigger (devevent (UART_A, WRITE));
     75c:	00001016 	andeq	r1, r0, r6, lsl r0
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	00000001 	andeq	r0, r0, r1
     764:	00000001 	andeq	r0, r0, r1
		RISE_N_SHINE;
     768:	00001018 	andeq	r1, r0, r8, lsl r0
     76c:	0000103c 	andeq	r1, r0, ip, lsr r0
     770:	0000103c 	andeq	r1, r0, ip, lsr r0
		i_trigger (devevent (UART_A, WRITE));
     774:	000010d8 	ldrdeq	r1, [r0], -r8
     778:	000010d8 	ldrdeq	r1, [r0], -r8
     77c:	00001128 	andeq	r1, r0, r8, lsr #2
     780:	00001128 	andeq	r1, r0, r8, lsr #2
     784:	00001170 	andeq	r1, r0, r0, ror r1
     788:	00001170 	andeq	r1, r0, r0, ror r1
     78c:	000011c0 	andeq	r1, r0, r0, asr #3
     790:	00000001 	andeq	r0, r0, r1
     794:	00000001 	andeq	r0, r0, r1
     798:	000011c0 	andeq	r1, r0, r0, asr #3
     79c:	00001268 	andeq	r1, r0, r8, ror #4
}
     7a0:	00001268 	andeq	r1, r0, r8, ror #4
     7a4:	0000129c 	muleq	r0, ip, r2
     7a8:	0000129c 	muleq	r0, ip, r2
     7ac:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     7b0:	00000001 	andeq	r0, r0, r1
void __buttons_setirq (int val) {
     7b4:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	00000001 	andeq	r0, r0, r1
     7bc:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     7c4:	000013f0 	strdeq	r1, [r0], -r0
     7c8:	00000001 	andeq	r0, r0, r1
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	00000001 	andeq	r0, r0, r1
	...
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d8:	00000001 	andeq	r0, r0, r1
     7dc:	00000001 	andeq	r0, r0, r1
     7e0:	00000001 	andeq	r0, r0, r1
     7e4:	00000001 	andeq	r0, r0, r1
}
     7e8:	00000001 	andeq	r0, r0, r1
     7ec:	00000001 	andeq	r0, r0, r1
	...
void __pinlist_setirq (int val) {
     7f8:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	00000001 	andeq	r0, r0, r1
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	00000001 	andeq	r0, r0, r1
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	00000001 	andeq	r0, r0, r1
	...
     810:	00000001 	andeq	r0, r0, r1
     814:	00000001 	andeq	r0, r0, r1
     818:	00000001 	andeq	r0, r0, r1
     81c:	00000001 	andeq	r0, r0, r1
	for (i = 0; i < N_PINLIST; i++) {
     820:	00000001 	andeq	r0, r0, r1
}
     824:	00000001 	andeq	r0, r0, r1
     828:	00000001 	andeq	r0, r0, r1
     82c:	00000001 	andeq	r0, r0, r1
     830:	00000001 	andeq	r0, r0, r1
void GPIOIntHandler () {
     834:	00000001 	andeq	r0, r0, r1
if (buttons_int) {
     838:	00000001 	andeq	r0, r0, r1
     83c:	00000001 	andeq	r0, r0, r1
	buttons_disable ();
     840:	00000001 	andeq	r0, r0, r1
     844:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)&__button_list);
     848:	00000001 	andeq	r0, r0, r1
     84c:	00000001 	andeq	r0, r0, r1
     850:	00000001 	andeq	r0, r0, r1
     854:	00000001 	andeq	r0, r0, r1
     858:	00000001 	andeq	r0, r0, r1
     85c:	00000001 	andeq	r0, r0, r1
     860:	00000001 	andeq	r0, r0, r1
     864:	00000001 	andeq	r0, r0, r1
     868:	00000001 	andeq	r0, r0, r1
     86c:	00000001 	andeq	r0, r0, r1
     870:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     874:	00000001 	andeq	r0, r0, r1
     878:	00000001 	andeq	r0, r0, r1
     87c:	00000001 	andeq	r0, r0, r1
if (pin_sensor_int) {
     880:	00000001 	andeq	r0, r0, r1
     884:	00000001 	andeq	r0, r0, r1
	i_trigger ((aword)(&__input_pins));
     888:	00000001 	andeq	r0, r0, r1
     88c:	00000001 	andeq	r0, r0, r1
     890:	00000001 	andeq	r0, r0, r1
     894:	00000001 	andeq	r0, r0, r1
     898:	00000001 	andeq	r0, r0, r1
     89c:	00000001 	andeq	r0, r0, r1
     8a0:	00000001 	andeq	r0, r0, r1
     8a4:	00000001 	andeq	r0, r0, r1
     8a8:	00000001 	andeq	r0, r0, r1
     8ac:	00000001 	andeq	r0, r0, r1
     8b0:	00000001 	andeq	r0, r0, r1
	__pinsen_disable_and_clear;
     8b4:	00000001 	andeq	r0, r0, r1
	RISE_N_SHINE;
     8b8:	00000001 	andeq	r0, r0, r1
     8bc:	00000001 	andeq	r0, r0, r1
     8c0:	00000001 	andeq	r0, r0, r1
}
     8c4:	00000001 	andeq	r0, r0, r1
     8c8:	00000001 	andeq	r0, r0, r1
     8cc:	00000001 	andeq	r0, r0, r1
     8d0:	00000001 	andeq	r0, r0, r1
     8d4:	00000001 	andeq	r0, r0, r1
void system_init () {
     8d8:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	00000001 	andeq	r0, r0, r1
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e0:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	00000001 	andeq	r0, r0, r1
     8e8:	00000001 	andeq	r0, r0, r1
     8ec:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	00000001 	andeq	r0, r0, r1
     8f4:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	000013f0 	strdeq	r1, [r0], -r0
     8fc:	000013f2 	strdeq	r1, [r0], -r2
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	000013f2 	strdeq	r1, [r0], -r2
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	000013f4 	strdeq	r1, [r0], -r4
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	000013f4 	strdeq	r1, [r0], -r4
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	000013f6 	strdeq	r1, [r0], -r6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	000013f6 	strdeq	r1, [r0], -r6
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	000013f8 	strdeq	r1, [r0], -r8
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	000013f8 	strdeq	r1, [r0], -r8
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	0000143c 	andeq	r1, r0, ip, lsr r4
	...
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     930:	00000001 	andeq	r0, r0, r1
     934:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x80)
     938:	00000001 	andeq	r0, r0, r1
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	00000001 	andeq	r0, r0, r1
     940:	00000001 	andeq	r0, r0, r1
		if (port_confs [i] & 0x40)
     944:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	00000001 	andeq	r0, r0, r1
     94c:	00000001 	andeq	r0, r0, r1
	...
     958:	00000001 	andeq	r0, r0, r1
	all_leds_blink;
     95c:	00000001 	andeq	r0, r0, r1
     960:	00000001 	andeq	r0, r0, r1
     964:	00000001 	andeq	r0, r0, r1
	...
     970:	00000001 	andeq	r0, r0, r1
     974:	00000001 	andeq	r0, r0, r1
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	00000001 	andeq	r0, r0, r1
     97c:	00000001 	andeq	r0, r0, r1
     980:	00000001 	andeq	r0, r0, r1
     984:	00000001 	andeq	r0, r0, r1
     988:	00000001 	andeq	r0, r0, r1
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	00000001 	andeq	r0, r0, r1
	...
	IntEnable (INT_AON_RTC_COMB);
     998:	00000001 	andeq	r0, r0, r1
     99c:	00000001 	andeq	r0, r0, r1
     9a0:	00000001 	andeq	r0, r0, r1
	__pi_malloc_init ();
     9a4:	00000001 	andeq	r0, r0, r1
	...
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	00000001 	andeq	r0, r0, r1
     9b8:	00000001 	andeq	r0, r0, r1
     9bc:	00000001 	andeq	r0, r0, r1
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c0:	00000001 	andeq	r0, r0, r1
     9c4:	00000001 	andeq	r0, r0, r1
	...
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9d0:	00000001 	andeq	r0, r0, r1
	urates [0] = UART_RATE / 100;
     9d4:	00000001 	andeq	r0, r0, r1
     9d8:	00000001 	andeq	r0, r0, r1
	reinit_uart ();
     9dc:	00000001 	andeq	r0, r0, r1
	...
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e8:	00001448 	andeq	r1, r0, r8, asr #8
     9ec:	0000144c 	andeq	r1, r0, ip, asr #8
     9f0:	00001452 	andeq	r1, r0, r2, asr r4
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	00001454 	andeq	r1, r0, r4, asr r4
     9f8:	00001462 	andeq	r1, r0, r2, ror #8
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	00001462 	andeq	r1, r0, r2, ror #8
     a00:	00001464 	andeq	r1, r0, r4, ror #8
			devinit [i] . init (devinit [i] . param);
     a04:	00001466 	andeq	r1, r0, r6, ror #8
	...
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a10:	0000144e 	andeq	r1, r0, lr, asr #8
	IntEnable (INT_UART0_COMB);
     a14:	00001450 	andeq	r1, r0, r0, asr r4
     a18:	00001466 	andeq	r1, r0, r6, ror #8
}
     a1c:	00001468 	andeq	r1, r0, r8, ror #8
	...
		diag ("");
     a28:	00001450 	andeq	r1, r0, r0, asr r4
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2c:	00001452 	andeq	r1, r0, r2, asr r4
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	00001454 	andeq	r1, r0, r4, asr r4
		diag ("Leftover RAM: %d bytes",
     a34:	00001456 	andeq	r1, r0, r6, asr r4
     a38:	0000145c 	andeq	r1, r0, ip, asr r4
     a3c:	0000145c 	andeq	r1, r0, ip, asr r4
	...
     a48:	00001480 	andeq	r1, r0, r0, lsl #9
     a4c:	00001488 	andeq	r1, r0, r8, lsl #9
     a50:	00001492 	muleq	r0, r2, r4
     a54:	00001492 	muleq	r0, r2, r4
     a58:	00001496 	muleq	r0, r6, r4
     a5c:	00001498 	muleq	r0, r8, r4
	...
     a68:	00001498 	muleq	r0, r8, r4
     a6c:	00001498 	muleq	r0, r8, r4
     a70:	0000149a 	muleq	r0, sl, r4
     a74:	0000149c 	muleq	r0, ip, r4
	...
     a80:	000014a8 	andeq	r1, r0, r8, lsr #9
     a84:	000014aa 	andeq	r1, r0, sl, lsr #9
     a88:	000014ac 	andeq	r1, r0, ip, lsr #9
     a8c:	000014b0 			; <UNDEFINED> instruction: 0x000014b0
	...
__attribute__ ((noreturn)) void __pi_release () {
     a98:	000014c8 	andeq	r1, r0, r8, asr #9
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	000014ca 	andeq	r1, r0, sl, asr #9
	check_stack_overflow;
     aa0:	000014ce 	andeq	r1, r0, lr, asr #9
     aa4:	000014d0 	ldrdeq	r1, [r0], -r0
     aa8:	000014d6 	ldrdeq	r1, [r0], -r6
	update_n_wake (MAX_WORD, NO);
     aac:	000014e6 	andeq	r1, r0, r6, ror #9
	...
	for_all_tasks (__pi_curr) {
     ab8:	000014c8 	andeq	r1, r0, r8, asr #9
     abc:	000014ca 	andeq	r1, r0, sl, asr #9
     ac0:	000014ce 	andeq	r1, r0, lr, asr #9
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	000014d0 	ldrdeq	r1, [r0], -r0
	__SLEEP;
     ac8:	000014d6 	ldrdeq	r1, [r0], -r6
     acc:	000014d6 	ldrdeq	r1, [r0], -r6
     ad0:	000014d8 	ldrdeq	r1, [r0], -r8
     ad4:	000014da 	ldrdeq	r1, [r0], -sl
	...
	switch (__pi_systat.effpdm) {
     ae0:	0000152e 	andeq	r1, r0, lr, lsr #10
     ae4:	00001532 	andeq	r1, r0, r2, lsr r5
     ae8:	00001534 	andeq	r1, r0, r4, lsr r5
     aec:	00001536 	andeq	r1, r0, r6, lsr r5
	...
     af8:	0000153a 	andeq	r1, r0, sl, lsr r5
	check_stack_overflow;
     afc:	0000153a 	andeq	r1, r0, sl, lsr r5
     b00:	0000153c 	andeq	r1, r0, ip, lsr r5
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	0000153e 	andeq	r1, r0, lr, lsr r5
	...
			goto Redo;
     b10:	00000001 	andeq	r0, r0, r1
	for_all_tasks (__pi_curr) {
     b14:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	00000001 	andeq	r0, r0, r1
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1c:	00000001 	andeq	r0, r0, r1
	...
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b28:	00000001 	andeq	r0, r0, r1
     b2c:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b30:	00000001 	andeq	r0, r0, r1
     b34:	00000001 	andeq	r0, r0, r1
	...
			__WFI ();
     b40:	00000001 	andeq	r0, r0, r1
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	00000001 	andeq	r0, r0, r1
     b48:	00000001 	andeq	r0, r0, r1
}
     b4c:	00000001 	andeq	r0, r0, r1
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b58:	00000001 	andeq	r0, r0, r1
     b5c:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	00000001 	andeq	r0, r0, r1
     b64:	00000001 	andeq	r0, r0, r1
	...
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	00001444 	andeq	r1, r0, r4, asr #8
     b74:	00001478 	andeq	r1, r0, r8, ror r4
     b78:	00001478 	andeq	r1, r0, r8, ror r4
     b7c:	000014a8 	andeq	r1, r0, r8, lsr #9
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	000014a8 	andeq	r1, r0, r8, lsr #9
     b84:	000014c0 	andeq	r1, r0, r0, asr #9
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	000014c0 	andeq	r1, r0, r0, asr #9
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	00001514 	andeq	r1, r0, r4, lsl r5
     b90:	00001514 	andeq	r1, r0, r4, lsl r5
     b94:	00001554 	andeq	r1, r0, r4, asr r5
     b98:	00001554 	andeq	r1, r0, r4, asr r5
     b9c:	00001578 	andeq	r1, r0, r8, ror r5
			SysCtrlSetRechargeBeforePowerDown
     ba0:	00001578 	andeq	r1, r0, r8, ror r5
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	0000158c 	andeq	r1, r0, ip, lsl #11
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba8:	0000158c 	andeq	r1, r0, ip, lsl #11
     bac:	000015a0 	andeq	r1, r0, r0, lsr #11
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	00000001 	andeq	r0, r0, r1
     bb4:	00000001 	andeq	r0, r0, r1
     bb8:	00000001 	andeq	r0, r0, r1
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	00000001 	andeq	r0, r0, r1
     bc0:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	00000001 	andeq	r0, r0, r1
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	00000001 	andeq	r0, r0, r1
     bcc:	00000001 	andeq	r0, r0, r1
     bd0:	00000001 	andeq	r0, r0, r1
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd4:	00000001 	andeq	r0, r0, r1
			while (!(AONWUCPowerStatusGet () &
     bd8:	00000001 	andeq	r0, r0, r1
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	00000001 	andeq	r0, r0, r1
     be0:	00000001 	andeq	r0, r0, r1
     be4:	00000001 	andeq	r0, r0, r1
	...
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     bf0:	000015a0 	andeq	r1, r0, r0, lsr #11
     bf4:	00001618 	andeq	r1, r0, r8, lsl r6
	...
     c00:	00001618 	andeq	r1, r0, r8, lsl r6
     c04:	0000166c 	andeq	r1, r0, ip, ror #12
	...
     c10:	0000166c 	andeq	r1, r0, ip, ror #12
     c14:	000016cc 	andeq	r1, r0, ip, asr #13
	...
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c20:	000016da 	ldrdeq	r1, [r0], -sl
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	000016da 	ldrdeq	r1, [r0], -sl
     c28:	000016e0 	andeq	r1, r0, r0, ror #13
     c2c:	0000173c 	andeq	r1, r0, ip, lsr r7
	...
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c38:	000016cc 	andeq	r1, r0, ip, asr #13
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	0000173c 	andeq	r1, r0, ip, lsr r7
	...
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	00001750 	andeq	r1, r0, r0, asr r7
     c4c:	00001834 	andeq	r1, r0, r4, lsr r8
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c50:	0000183a 	andeq	r1, r0, sl, lsr r8
     c54:	0000183e 	andeq	r1, r0, lr, lsr r8
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	00001844 	andeq	r1, r0, r4, asr #16
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5c:	00001858 	andeq	r1, r0, r8, asr r8
	...
			PRCMPowerDomainOff (
     c68:	0000173c 	andeq	r1, r0, ip, lsr r7
     c6c:	00001858 	andeq	r1, r0, r8, asr r8
	...
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	00001884 	andeq	r1, r0, r4, lsl #17
	goto Redo;
     c7c:	00001886 	andeq	r1, r0, r6, lsl #17
     c80:	00001954 	andeq	r1, r0, r4, asr r9
     c84:	00001978 	andeq	r1, r0, r8, ror r9
     c88:	0000197a 	andeq	r1, r0, sl, ror r9
     c8c:	000019c2 	andeq	r1, r0, r2, asr #19
     c90:	000019ec 	andeq	r1, r0, ip, ror #19
     c94:	000019ee 	andeq	r1, r0, lr, ror #19
	...
     ca0:	00001886 	andeq	r1, r0, r6, lsl #17
     ca4:	00001888 	andeq	r1, r0, r8, lsl #17
     ca8:	0000192a 	andeq	r1, r0, sl, lsr #18
     cac:	00001954 	andeq	r1, r0, r4, asr r9
     cb0:	00001978 	andeq	r1, r0, r8, ror r9
     cb4:	0000197a 	andeq	r1, r0, sl, ror r9
	...
     cc0:	000018c6 	andeq	r1, r0, r6, asr #17
     cc4:	000018ce 	andeq	r1, r0, lr, asr #17
     cc8:	00001a72 	andeq	r1, r0, r2, ror sl
     ccc:	00001a7e 	andeq	r1, r0, lr, ror sl
	...
     cd8:	000019cc 	andeq	r1, r0, ip, asr #19
     cdc:	000019ec 	andeq	r1, r0, ip, ror #19
     ce0:	000019ee 	andeq	r1, r0, lr, ror #19
     ce4:	00001a32 	andeq	r1, r0, r2, lsr sl
	...
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cf0:	00001858 	andeq	r1, r0, r8, asr r8
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	00001878 	andeq	r1, r0, r8, ror r8
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	00001878 	andeq	r1, r0, r8, ror r8
	system_init ();
     cfc:	00001aa8 	andeq	r1, r0, r8, lsr #21
	tcv_init ();
     d00:	00001aa8 	andeq	r1, r0, r8, lsr #21
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	00001af8 	strdeq	r1, [r0], -r8
	...
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d10:	00001b0c 	andeq	r1, r0, ip, lsl #22
     d14:	00001b10 	andeq	r1, r0, r0, lsl fp
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	00001dea 	andeq	r1, r0, sl, ror #27
     d1c:	00001e32 	andeq	r1, r0, r2, lsr lr
	...
	delay (16, 0);
     d28:	00001b10 	andeq	r1, r0, r0, lsl fp
	__pi_release ();
     d2c:	00001b16 	andeq	r1, r0, r6, lsl fp
     d30:	00001b4e 	andeq	r1, r0, lr, asr #22
     d34:	00001bba 			; <UNDEFINED> instruction: 0x00001bba
     d38:	00001e4e 	andeq	r1, r0, lr, asr #28
     d3c:	00001e6e 	andeq	r1, r0, lr, ror #28
	...
static void killev (__pi_pcb_t *pid) {
     d48:	00001c72 	andeq	r1, r0, r2, ror ip
	wfun = (aword)(pid->code);
     d4c:	00001cec 	andeq	r1, r0, ip, ror #25
	for_all_tasks (i) {
     d50:	00001e76 	andeq	r1, r0, r6, ror lr
		for (j = 0; j < nevents (i); j++) {
     d54:	00001e7e 	andeq	r1, r0, lr, ror lr
	...
			    || i->Events [j] . Event == wfun
     d60:	00001d04 	andeq	r1, r0, r4, lsl #26
		for (j = 0; j < nevents (i); j++) {
     d64:	00001d5a 	andeq	r1, r0, sl, asr sp
			if (i->Events [j] . Event == (aword)pid
     d68:	00001dd0 	ldrdeq	r1, [r0], -r0
     d6c:	00001dea 	andeq	r1, r0, sl, ror #27
	...
				wakeupev (i, j);
     d78:	00001d60 	andeq	r1, r0, r0, ror #26
	for_all_tasks (i) {
     d7c:	00001dd0 	ldrdeq	r1, [r0], -r0
}
     d80:	00001e32 	andeq	r1, r0, r2, lsr lr
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	00001e3a 	andeq	r1, r0, sl, lsr lr
static void qfree (aword *ch) {
     d88:	00001e7e 	andeq	r1, r0, lr, ror lr
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	00001e88 	andeq	r1, r0, r8, lsl #29
	...
	m_setnextp (cc, ch);
     d98:	00001af8 	strdeq	r1, [r0], -r8
}
     d9c:	00001e88 	andeq	r1, r0, r8, lsl #29
	...
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da8:	00001e88 	andeq	r1, r0, r8, lsl #29
			m_setnextp (cc, m_nextp (chunk));
     dac:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
	...
			m_size (chunk) += m_hdrlen + m_size (ch);
     db8:	00000001 	andeq	r0, r0, r1
     dbc:	00000001 	andeq	r0, r0, r1
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	00001ed0 	ldrdeq	r1, [r0], -r0
	...
			m_setnextp (cc, m_nextp (chunk));
     dd0:	00001ed0 	ldrdeq	r1, [r0], -r0
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	00001ed8 	ldrdeq	r1, [r0], -r8
     dd8:	00000001 	andeq	r0, r0, r1
     ddc:	00000001 	andeq	r0, r0, r1
     de0:	00001ed8 	ldrdeq	r1, [r0], -r8
     de4:	00001ee0 	andeq	r1, r0, r0, ror #29
     de8:	00000001 	andeq	r0, r0, r1
			if (m_size (chunk) >= m_size (ch))
     dec:	00000001 	andeq	r0, r0, r1
     df0:	00000001 	andeq	r0, r0, r1
     df4:	00000001 	andeq	r0, r0, r1
	...
		chunk = m_nextp (chunk))
     e00:	00001ee0 	andeq	r1, r0, r0, ror #29
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
	diag_wait (a);
     e08:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
	diag_wchar (c, a);
     e0c:	00002058 	andeq	r2, r0, r8, asr r0
	...
}
     e18:	00002066 	andeq	r2, r0, r6, rrx
	syserror (ESTATE, "state");
     e1c:	00002068 	andeq	r2, r0, r8, rrx
     e20:	0000206c 	andeq	r2, r0, ip, rrx
     e24:	00002070 	andeq	r2, r0, r0, ror r0
	...
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	00002374 	andeq	r2, r0, r4, ror r3
     e34:	00002376 	andeq	r2, r0, r6, ror r3
     e38:	00002378 	andeq	r2, r0, r8, ror r3
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	0000237a 	andeq	r2, r0, sl, ror r3
	...
     e48:	00002058 	andeq	r2, r0, r8, asr r0
     e4c:	000020d4 	ldrdeq	r2, [r0], -r4
     e50:	000020d4 	ldrdeq	r2, [r0], -r4
     e54:	00002180 	andeq	r2, r0, r0, lsl #3
     e58:	00002180 	andeq	r2, r0, r0, lsl #3
     e5c:	000021dc 	ldrdeq	r2, [r0], -ip
     e60:	000021dc 	ldrdeq	r2, [r0], -ip
     e64:	000021f4 	strdeq	r2, [r0], -r4
     e68:	00000001 	andeq	r0, r0, r1
     e6c:	00000001 	andeq	r0, r0, r1
		for_all_tasks (i) {
     e70:	000021f4 	strdeq	r2, [r0], -r4
	__pi_mintk = znew + min;
     e74:	00002204 	andeq	r2, r0, r4, lsl #4
     e78:	00002204 	andeq	r2, r0, r4, lsl #4
			if (!twaiting (i))
     e7c:	00002218 	andeq	r2, r0, r8, lsl r2
     e80:	00002218 	andeq	r2, r0, r8, lsl r2
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	0000227c 	andeq	r2, r0, ip, ror r2
     e88:	0000227c 	andeq	r2, r0, ip, ror r2
     e8c:	00002290 	muleq	r0, r0, r2
     e90:	00002290 	muleq	r0, r0, r2
     e94:	000022a4 	andeq	r2, r0, r4, lsr #5
     e98:	000022a4 	andeq	r2, r0, r4, lsr #5
     e9c:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
     ea0:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
     ea4:	000022e0 	andeq	r2, r0, r0, ror #5
     ea8:	000022e0 	andeq	r2, r0, r0, ror #5
     eac:	000022f0 	strdeq	r2, [r0], -r0
     eb0:	000022f0 	strdeq	r2, [r0], -r0
				wakeuptm (i);
     eb4:	0000231c 	andeq	r2, r0, ip, lsl r3
     eb8:	0000231c 	andeq	r2, r0, ip, lsl r3
		for_all_tasks (i) {
     ebc:	00002330 	andeq	r2, r0, r0, lsr r3
				d = i->Timer - znew;
     ec0:	00002330 	andeq	r2, r0, r0, lsr r3
     ec4:	00002344 	andeq	r2, r0, r4, asr #6
     ec8:	00002344 	andeq	r2, r0, r4, asr #6
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	00002454 	andeq	r2, r0, r4, asr r4
     ed0:	00002454 	andeq	r2, r0, r4, asr r4
     ed4:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
	__pi_old = znew;
     ed8:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
}
     edc:	000024e0 	andeq	r2, r0, r0, ror #9
	TCI_RUN_DELAY_TIMER;
     ee0:	000024e0 	andeq	r2, r0, r0, ror #9
}
     ee4:	00002630 	andeq	r2, r0, r0, lsr r6
	...
     ef0:	00000001 	andeq	r0, r0, r1
     ef4:	00000001 	andeq	r0, r0, r1
void proceed (word state) {
     ef8:	00000001 	andeq	r0, r0, r1
	prcdstate (__pi_curr, state);
     efc:	00000001 	andeq	r0, r0, r1
	...
	release;
     f08:	000026a6 	andeq	r2, r0, r6, lsr #13
void __pi_wait (aword event, word state) {
     f0c:	000026a8 	andeq	r2, r0, r8, lsr #13
	sint j = nevents (__pi_curr);
     f10:	000026aa 	andeq	r2, r0, sl, lsr #13
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	000026ae 	andeq	r2, r0, lr, lsr #13
	...
		syserror (ENEVENTS, "sw");
     f20:	00000001 	andeq	r0, r0, r1
     f24:	00000001 	andeq	r0, r0, r1
	setestate (__pi_curr->Events [j], state, event);
     f28:	00002630 	andeq	r2, r0, r0, lsr r6
	incwait (__pi_curr);
     f2c:	00002850 	andeq	r2, r0, r0, asr r8
	setestate (__pi_curr->Events [j], state, event);
     f30:	00002850 	andeq	r2, r0, r0, asr r8
}
     f34:	000028b0 			; <UNDEFINED> instruction: 0x000028b0
     f38:	00000001 	andeq	r0, r0, r1
     f3c:	00000001 	andeq	r0, r0, r1
void __pi_trigger (aword event) {
     f40:	000028b0 			; <UNDEFINED> instruction: 0x000028b0
	for_all_tasks (i) {
     f44:	000028c8 	andeq	r2, r0, r8, asr #17
	...
		for (j = 0; j < nevents (i); j++) {
     f50:	00002916 	andeq	r2, r0, r6, lsl r9
     f54:	0000291a 	andeq	r2, r0, sl, lsl r9
			if (i->Events [j] . Event == event) {
     f58:	00002920 	andeq	r2, r0, r0, lsr #18
     f5c:	00002922 	andeq	r2, r0, r2, lsr #18
	...
				wakeupev (i, j);
     f68:	0000291a 	andeq	r2, r0, sl, lsl r9
	for_all_tasks (i) {
     f6c:	00002920 	andeq	r2, r0, r0, lsr #18
}
     f70:	00002922 	andeq	r2, r0, r2, lsr #18
aword __pi_join (aword pid, word st) {
     f74:	0000292a 	andeq	r2, r0, sl, lsr #18
	...
	return 0;
     f80:	00000001 	andeq	r0, r0, r1
		if ((aword)i == pid) {
     f84:	00000001 	andeq	r0, r0, r1
			__pi_wait (pid, st);
     f88:	00000001 	andeq	r0, r0, r1
}
     f8c:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i) {
     f90:	000028c8 	andeq	r2, r0, r8, asr #17
     f94:	00002914 	andeq	r2, r0, r4, lsl r9
void delay (word d, word state) {
     f98:	00000001 	andeq	r0, r0, r1
	settstate (__pi_curr, state);
     f9c:	00000001 	andeq	r0, r0, r1
     fa0:	00002914 	andeq	r2, r0, r4, lsl r9
     fa4:	00002980 	andeq	r2, r0, r0, lsl #19
     fa8:	00002980 	andeq	r2, r0, r0, lsl #19
	update_n_wake (d, YES);
     fac:	00002996 	muleq	r0, r6, r9
	...
	__pi_curr->Timer = __pi_old + d;
     fb8:	00002998 	muleq	r0, r8, r9
	inctimer (__pi_curr);
     fbc:	000029c0 	andeq	r2, r0, r0, asr #19
     fc0:	000029c0 	andeq	r2, r0, r0, asr #19
     fc4:	000029c8 	andeq	r2, r0, r8, asr #19
}
     fc8:	00000001 	andeq	r0, r0, r1
     fcc:	00000001 	andeq	r0, r0, r1
	if (fun == NULL)
     fd0:	00000001 	andeq	r0, r0, r1
		return (int) __pi_curr;
     fd4:	00000001 	andeq	r0, r0, r1
     fd8:	00000001 	andeq	r0, r0, r1
	for_all_tasks (i)
     fdc:	00000001 	andeq	r0, r0, r1
}
     fe0:	00000001 	andeq	r0, r0, r1
		if (i->code == fun)
     fe4:	00000001 	andeq	r0, r0, r1
	...
	for_all_tasks (i)
     ff0:	00002a2a 	andeq	r2, r0, sl, lsr #20
int __pi_strlen (const char *s) {
     ff4:	00002a3a 	andeq	r2, r0, sl, lsr sl
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	00002a40 	andeq	r2, r0, r0, asr #20
}
     ffc:	00002a42 	andeq	r2, r0, r2, asr #20
	...
	while (n--)
    1008:	000029c8 	andeq	r2, r0, r8, asr #19
		*dest++ = *src++;
    100c:	00002a24 	andeq	r2, r0, r4, lsr #20
    1010:	00002a24 	andeq	r2, r0, r4, lsr #20
    1014:	00002a50 	andeq	r2, r0, r0, asr sl
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	00000001 	andeq	r0, r0, r1
		syserror (EREQPAR, "addv");
    101c:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "addv");
    1020:	00000001 	andeq	r0, r0, r1
	if (ioreq [loc] != NULL)
    1024:	00000001 	andeq	r0, r0, r1
    1028:	00000001 	andeq	r0, r0, r1
		syserror (ERESOURCE, "addv");
    102c:	00000001 	andeq	r0, r0, r1
	ioreq [loc] = rf;
    1030:	00000001 	andeq	r0, r0, r1
}
    1034:	00000001 	andeq	r0, r0, r1
    1038:	00000001 	andeq	r0, r0, r1
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	00000001 	andeq	r0, r0, r1
    1040:	00000001 	andeq	r0, r0, r1
    1044:	00000001 	andeq	r0, r0, r1
    1048:	00000001 	andeq	r0, r0, r1
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	00000001 	andeq	r0, r0, r1
    1050:	00000001 	andeq	r0, r0, r1
    1054:	00000001 	andeq	r0, r0, r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000533 	andeq	r0, r0, r3, lsr r5
       4:	01380003 	teqeq	r8, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
      24:	2f6e6974 	svccs	0x006e6974
      28:	6b736544 	blvs	1cd9540 <__ccfg+0x1cb9598>
      2c:	2f706f74 	svccs	0x00706f74
      30:	4f534c4f 	svcmi	0x00534c4f
      34:	2f54454e 	svccs	0x0054454e
      38:	4f434950 	svcmi	0x00434950
      3c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
			i = k;
      40:	2f534f63 	svccs	0x00534f63
				j->Next = k;
      44:	33314343 	teqcc	r1, #201326593	; 0xc000001
      48:	432f5858 			; <UNDEFINED> instruction: 0x432f5858
}
      4c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
      50:	52415758 	subpl	r5, r1, #88, 14	; 0x1600000
      54:	72642f45 	rsbvc	r2, r4, #276	; 0x114
		release;
      58:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
      5c:	0062696c 	rsbeq	r6, r2, ip, ror #18
      60:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
      64:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
      68:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
      6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
      70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
      74:	61652d65 	cmnvs	r5, r5, ror #26
      78:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
      7c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
      80:	636e692f 	cmnvs	lr, #770048	; 0xbc000
      84:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
      88:	6f682f00 	svcvs	0x00682f00
      8c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; fffffee0 <_estack+0xdfffaee0>
	descriptors [fd] = s;
      90:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      98:	6f746b73 	svcvs	0x00746b73
	if (s == NULL)
      9c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
		syserror (EMALLOC, "tcv05");
      a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      a8:	2f534f43 	svccs	0x00534f43
      ac:	4f636950 	svcmi	0x00636950
      b0:	43432f53 	movtmi	r2, #16211	; 0x3f53
      b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
      b8:	6f682f00 	svcvs	0x00682f00
      bc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; ffffff10 <_estack+0xdfffaf10>
      c0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
      c4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      c8:	6f746b73 	svcvs	0x00746b73
      cc:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
      d0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
      d4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
      d8:	2f534f43 	svccs	0x00534f43
      dc:	4f636950 	svcmi	0x00636950
      e0:	61000053 	qaddvs	r0, r3, r0
      e4:	632e7070 			; <UNDEFINED> instruction: 0x632e7070
      e8:	00000063 	andeq	r0, r0, r3, rrx
      ec:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
			wwait (st, 50);
      f4:	73000001 	movwvc	r0, #1
			curr += 0x1000;
      f8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
      fc:	00682e74 	rsbeq	r2, r8, r4, ror lr
		if (from >= EE_SIZE || upto < from)
     100:	61000002 	tstvs	r0, r2
     104:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
			upto = EE_SIZE - 1;
     108:	00030068 	andeq	r0, r3, r8, rrx
     10c:	63616d00 	cmnvs	r1, #0, 26
     110:	00682e68 	rsbeq	r2, r8, r8, ror #28
     114:	70000003 	andvc	r0, r0, r3
     118:	5f736e69 	svcpl	0x00736e69
     11c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
     120:	00030068 	andeq	r0, r3, r8, rrx
     124:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
}
     128:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
     12c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
     130:	0300682e 	movweq	r6, #2094	; 0x82e
     134:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
     138:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
     13c:	00040068 	andeq	r0, r4, r8, rrx
    cycles[0].offTime = numbers[1];
     140:	1d050000 	stcne	0, cr0, [r5, #-0]
    cycles[1].onTime = numbers[2];
     144:	00020500 	andeq	r0, r2, r0, lsl #10
    cycles[1].offTime = numbers[3];
     148:	03000000 	movweq	r0, #0
     14c:	1f05011c 	svcne	0x0005011c
}
     150:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	201f0501 	andscs	r0, pc, r1, lsl #10
            number = number * 10;
     158:	03060905 	movweq	r0, #26885	; 0x6905
     15c:	0e054a0d 	vmlaeq.f32	s8, s10, s26
            number += settingsInput[i] - 48;
     160:	011e0501 	tsteq	lr, r1, lsl #10
     164:	01063605 	tsteq	r6, r5, lsl #12
     168:	05822105 	streq	r2, [r2, #261]	; 0x105
fsm root {
     16c:	052e0644 	streq	r0, [lr, #-1604]!	; 0xfffff9bc
     170:	02040149 	andeq	r0, r4, #1073741842	; 0x40000012
     174:	af030505 	svcge	0x00030505
     178:	05170102 	ldreq	r0, [r7, #-258]	; 0xfffffefe
     17c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
     180:	065c0501 	ldrbeq	r0, [ip], -r1, lsl #10
        initCycles();
     184:	2e7dcc03 	cdpcs	12, 7, cr12, cr13, cr3, {0}
        ser_outf(Initial, "Enter your name: ");
     188:	01066f05 	tsteq	r6, r5, lsl #30
     18c:	4a01df05 	bmi	77da8 <__ccfg+0x57e00>
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	0601f205 	streq	pc, [r1], -r5, lsl #4
     194:	02e3054a 	rsceq	r0, r3, #310378496	; 0x12800000
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	02e80501 	rsceq	r0, r8, #4194304	; 0x400000
     19c:	02f00501 	rscseq	r0, r0, #4194304	; 0x400000
     1a0:	08e90501 	stmiaeq	r9!, {r0, r8, sl}^
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	14090501 	strne	r0, [r9], #-1281	; 0xfffffaff
     1a8:	01060e05 	tsteq	r6, r5, lsl #28
        if (choice == 'A' || choice == 'a'){
     1ac:	05202b05 	streq	r2, [r0, #-2821]!	; 0xfffff4fb
     1b0:	0905200e 	stmdbeq	r5, {r1, r2, r3, sp}
     1b4:	29053e06 	stmdbcs	r5, {r1, r2, r9, sl, fp, ip, sp}
            proceed Adjust_Intervals;
     1b8:	09050106 	stmdbeq	r5, {r1, r2, r8}
            proceed Monitor;
     1bc:	2c290522 	cfstr32cs	mvfx0, [r9], #-136	; 0xffffff78
        proceed Show_Menu;
     1c0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	09052c29 	stmdbeq	r5, {r0, r3, r5, sl, fp, sp}
     1c8:	2c150530 	cfldr32cs	mvfx0, [r5], {48}	; 0x30
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	22060905 	andcs	r0, r6, #81920	; 0x14000
     1d0:	052e6f03 	streq	r6, [lr, #-3843]!	; 0xfffff0fd
     1d4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
        processSettingsInput(settings);
     1d8:	0d052e0b 	stceq	14, cr2, [r5, #-44]	; 0xffffffd4
        proceed Show_Menu;
     1dc:	12054b06 	andne	r4, r5, #6144	; 0x1800
     1e0:	03820501 	orreq	r0, r2, #4194304	; 0x400000
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	03920501 	orrseq	r0, r2, #4194304	; 0x400000
     1e8:	03aa0501 			; <UNDEFINED> instruction: 0x03aa0501
     1ec:	95050106 	strls	r0, [r5, #-262]	; 0xfffffefa
     1f0:	b8055803 	stmdalt	r5, {r0, r1, fp, ip, lr}
     1f4:	05200603 	streq	r0, [r0, #-1539]!	; 0xfffff9fd
        proceed Show_Menu;
     1f8:	040103bd 	streq	r0, [r1], #-957	; 0xfffffc43
     1fc:	03050502 	movweq	r0, #21762	; 0x5502
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	17010283 	strne	r0, [r1, -r3, lsl #5]
     204:	01063e05 	tsteq	r6, r5, lsl #28
        displayCycle = YES;
     208:	cf050104 	svcgt	0x00050104
        ser_inf(Await_Stop, "%c", ch);
     20c:	f8030603 			; <UNDEFINED> instruction: 0xf8030603
     210:	e2052e7d 	and	r2, r5, #2000	; 0x7d0
     214:	05010603 	streq	r0, [r1, #-1539]	; 0xfffff9fd
        proceed Monitor;
     218:	054a04d1 	strbeq	r0, [sl, #-1233]	; 0xfffffb2f
     21c:	4a0604e4 	bmi	1815b4 <__ccfg+0x16160c>
     220:	0108ed05 	tsteq	r8, r5, lsl #26
        leds(1, 0);
     224:	05130d05 	ldreq	r0, [r3, #-3333]	; 0xfffff2fb
     228:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
     22c:	11052e0f 	tstne	r5, pc, lsl #28
     230:	42053d06 	andmi	r3, r5, #384	; 0x180
     234:	11050106 	tstne	r5, r6, lsl #2
        leds(0, 0);
     238:	08ed052e 	stmiaeq	sp!, {r1, r2, r3, r5, r8, sl}^
     23c:	09055b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, ip, lr}
     240:	06220513 			; <UNDEFINED> instruction: 0x06220513
     244:	20090501 	andcs	r0, r9, r1, lsl #10
     248:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
     24c:	0a033c09 	beq	cf278 <__ccfg+0xaf2d0>
        } else if (choice == 'S' || choice == 's') {
     250:	4b2f0674 	blmi	bc1c28 <__ccfg+0xba1c80>
            proceed Stop;
     254:	03048105 	movweq	r8, #16645	; 0x4105
        } else if (choice == 'V' || choice == 'v') {
     258:	84052e6e 	strhi	r2, [r5], #-3694	; 0xfffff192
            proceed View_Settings;
     25c:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
        } else if (choice == 'M' || choice == 'm') {
     260:	2e0604a7 	cdpcs	4, 0, cr0, cr6, cr7, {5}
            proceed Monitor;
     264:	0104ac05 	tsteq	r4, r5, lsl #24
     268:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     26c:	01028303 	tsteq	r2, r3, lsl #6
     270:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     274:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     278:	030604be 	movweq	r0, #25790	; 0x64be
     27c:	052e7df8 	streq	r7, [lr, #-3576]!	; 0xfffff208
     280:	010604d1 	ldrdeq	r0, [r6, -r1]
     284:	5d060d05 	stcpl	13, cr0, [r6, #-20]	; 0xffffffec
     288:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
     28c:	3a050122 	bcc	14071c <__ccfg+0x120774>
     290:	25050106 	strcs	r0, [r5, #-262]	; 0xfffffefa
     294:	0648053c 			; <UNDEFINED> instruction: 0x0648053c
static void devinit_uart (int devnum) {
     298:	014d0520 	cmpeq	sp, r0, lsr #10
	adddevfunc (ioreq_uart_a, devnum);
     29c:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
     2a0:	0102b403 	tsteq	r2, r3, lsl #8
void udelay (volatile word n) {
     2a4:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
     2a8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	while (n) {
     2ac:	c7030660 	strgt	r0, [r3, -r0, ror #12]
     2b0:	73052e7d 	movwvc	r2, #24189	; 0x5e7d
}
     2b4:	e3050106 	movw	r0, #20742	; 0x5106
	while (n--);
     2b8:	f6054a01 			; <UNDEFINED> instruction: 0xf6054a01
     2bc:	054a0601 	strbeq	r0, [sl, #-1537]	; 0xfffff9ff
     2c0:	05200192 	streq	r0, [r0, #-402]!	; 0xfffffe6e
		n--;
     2c4:	01060195 			; <UNDEFINED> instruction: 0x01060195
     2c8:	0601b805 	streq	fp, [r1], -r5, lsl #16
     2cc:	01bd052e 			; <UNDEFINED> instruction: 0x01bd052e
void mdelay (volatile word n) {
     2d0:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
     2d4:	02b40305 	adcseq	r0, r4, #335544320	; 0x14000000
	while (n) {
     2d8:	3e051701 	cdpcc	7, 0, cr1, cr5, cr1, {0}
     2dc:	01040106 	tsteq	r4, r6, lsl #2
}
     2e0:	0601d005 	streq	sp, [r1], -r5
		udelay (999);
     2e4:	2e7dc703 	cdpcs	7, 7, cr12, cr13, cr3, {0}
     2e8:	0601e305 	streq	lr, [r1], -r5, lsl #6
		n--;
     2ec:	018e0501 	orreq	r0, lr, r1, lsl #10
     2f0:	91055d06 	tstls	r5, r6, lsl #26
     2f4:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
     2f8:	2e0601b4 	mcrcs	1, 0, r0, cr6, cr4, {5}
void __pi_ondomain (lword d) {
     2fc:	0101b905 	tsteq	r1, r5, lsl #18
     300:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
		if (__pi_systat.effpdm > 1)
     304:	0102af03 	tsteq	r2, r3, lsl #30
     308:	063e0517 			; <UNDEFINED> instruction: 0x063e0517
			__pi_systat.effpdm = 1;
     30c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	PRCMPowerDomainOn (d);
     310:	030601cc 	movweq	r0, #25036	; 0x61cc
     314:	052e7dcc 	streq	r7, [lr, #-3532]!	; 0xfffff234
     318:	010601df 	ldrdeq	r0, [r6, -pc]
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	03060105 	movweq	r0, #24837	; 0x6105
     320:	13055809 	movwne	r5, #22537	; 0x5809
     324:	06010501 	streq	r0, [r1], -r1, lsl #10
	__pi_systat.ondmns |= d;
     328:	2e130501 	cfmul32cs	mvfx0, mvfx3, mvfx1
     32c:	01001202 	tsteq	r0, r2, lsl #4
}
     330:	00130501 	andseq	r0, r3, r1, lsl #10
     334:	00c80205 	sbceq	r0, r8, r5, lsl #4
void __pi_syserror (word ec, const char *m) {
     338:	34030000 	strcc	r0, [r3], #-0
	diag ("SYSERR: %x, %s", ec, m);
     33c:	13050501 	movwne	r0, #21761	; 0x5501
     340:	13061505 	movwne	r1, #25861	; 0x6505
  __ASM volatile ("cpsid i" : : : "memory");
     344:	051f1205 	ldreq	r1, [pc, #-517]	; 147 <processSettingsInput+0x37>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	15051f13 	strne	r1, [r5, #-3859]	; 0xfffff0ed
     34c:	24140522 	ldrcs	r0, [r4], #-1314	; 0xfffffade
     350:	05291205 	streq	r1, [r9, #-517]!	; 0xfffffdfb
		all_leds_blink;
     354:	17052514 	smladne	r5, r4, r5, r2
     358:	320f0521 	andcc	r0, pc, #138412032	; 0x8400000
     35c:	76031205 	strvc	r1, [r3], -r5, lsl #4
     360:	06050520 	streq	r0, [r5], -r0, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	15051321 	strne	r1, [r5, #-801]	; 0xfffffcdf
     368:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     36c:	16052106 	strne	r2, [r5], -r6, lsl #2
     370:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     374:	13132206 	tstne	r3, #1610612736	; 0x60000000
     378:	15060f05 	strne	r0, [r6, #-3845]	; 0xfffff0fb
	while (1) {
     37c:	051d1705 	ldreq	r1, [sp, #-1797]	; 0xfffff8fb
     380:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
     384:	0514060f 	ldreq	r0, [r4, #-1551]	; 0xfffff9f1
     388:	05052c18 	streq	r2, [r5, #-3096]	; 0xfffff3e8
void tci_run_delay_timer () {
     38c:	05132206 	ldreq	r2, [r3, #-518]	; 0xfffffdfa
	setdel = __pi_mintk - __pi_old;
     390:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
     394:	055a0605 	ldrbeq	r0, [sl, #-1541]	; 0xfffff9fb
     398:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
     39c:	0a022f01 	beq	8bfa8 <__ccfg+0x6c000>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     3a4:	02050030 	andeq	r0, r5, #48	; 0x30
     3a8:	00000110 	andeq	r0, r0, r0, lsl r1
     3ac:	0100c503 	tsteq	r0, r3, lsl #10
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	13130505 	tstne	r3, #20971520	; 0x1400000
	sti_tim;
     3b4:	0a051414 	beq	14540c <__ccfg+0x125464>
}
     3b8:	01150501 	tsteq	r5, r1, lsl #10
     3bc:	10060a05 	andne	r0, r6, r5, lsl #20
     3c0:	051c3005 	ldreq	r3, [ip, #-5]
     3c4:	41062209 	tstmi	r6, r9, lsl #4
     3c8:	01061905 	tsteq	r6, r5, lsl #18
	cli_aux;
     3cc:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
     3d0:	052f060d 	streq	r0, [pc, #-1549]!	; fffffdcb <_estack+0xdfffadcb>
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
     3d8:	1359060d 	cmpne	r9, #13631488	; 0xd00000
     3dc:	11061405 	tstne	r6, r5, lsl #8
     3e0:	05211905 	streq	r1, [r1, #-2309]!	; 0xfffff6fb
	sti_aux;
     3e4:	051c061d 	ldreq	r0, [ip, #-1565]	; 0xfffff9e3
}
     3e8:	05050115 	streq	r0, [r5, #-277]	; 0xfffffeeb
     3ec:	03060106 	movweq	r0, #24838	; 0x6106
     3f0:	16052e0b 	strne	r2, [r5], -fp, lsl #28
void AONRTCIntHandler () {
     3f4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f8:	17054b06 	strne	r4, [r5, -r6, lsl #22]
     3fc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	16053e06 	strne	r3, [r5], -r6, lsl #28
		if (__pi_utims [0] == 0)
     404:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
     408:	17053d06 	strne	r3, [r5, -r6, lsl #26]
		if (*(__pi_utims [0])) {
     40c:	01050106 	tsteq	r5, r6, lsl #2
     410:	0610053d 			; <UNDEFINED> instruction: 0x0610053d
			(*(__pi_utims [0]))--;
     414:	052e7503 	streq	r7, [lr, #-1283]!	; 0xfffffafd
		if (__pi_utims [1] == 0)
     418:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
		if (*(__pi_utims [1])) {
     41c:	0d052013 	stceq	0, cr2, [r5, #-76]	; 0xffffffb4
			aux_timer_inactive = 0;
     420:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
			(*(__pi_utims [1]))--;
     424:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
		if (__pi_utims [2] == 0)
     428:	14053d06 	strne	r3, [r5], #-3334	; 0xfffff2fa
		if (*(__pi_utims [2])) {
     42c:	07020106 	streq	r0, [r2, -r6, lsl #2]
			(*(__pi_utims [2]))--;
     430:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (__pi_utims [3] != 0) {
     434:	0205001a 	andeq	r0, r5, #26
			if (*(__pi_utims [3])) {
     438:	0000016c 	andeq	r0, r0, ip, ror #2
				aux_timer_inactive = 0;
     43c:	0100dd03 	tsteq	r0, r3, lsl #26
				(*(__pi_utims [3]))--;
     440:	05011c05 	streq	r1, [r1, #-3077]	; 0xfffff3fb
	if (__pi_systat.ledsts) {
     444:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
     448:	05ae0605 	streq	r0, [lr, #1541]!	; 0x605
		if (__pi_systat.ledblc++ == 0) {
     44c:	4d301509 	cfldr32mi	mvfx1, [r0, #-36]!	; 0xffffffdc
     450:	5809035c 	stmdapl	r9, {r2, r3, r4, r6, r8, r9}
			if (__pi_systat.ledblk) {
     454:	0c055a14 			; <UNDEFINED> instruction: 0x0c055a14
     458:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
     45c:	26066706 	strcs	r6, [r6], -r6, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	31060905 	tstcc	r6, r5, lsl #18
     464:	5a144d3f 	bpl	513968 <__ccfg+0x4f39c0>
				if (__pi_systat.ledsts & 0x2)
     468:	16053f3e 			; <UNDEFINED> instruction: 0x16053f3e
     46c:	09051406 	stmdbeq	r5, {r1, r2, sl, ip}
     470:	3fa5061e 	svccc	0x00a5061e
				if (__pi_systat.ledsts & 0x4)
     474:	0616054b 	ldreq	r0, [r6], -fp, asr #10
				__pi_systat.ledblk = 0;
     478:	06090501 	streq	r0, [r9], -r1, lsl #10
     47c:	175a133f 	smmlarne	sl, pc, r3, r1	; <UNPREDICTABLE>
			if (__pi_systat.fstblk)
     480:	010e053f 	tsteq	lr, pc, lsr r5
     484:	05011e05 	streq	r1, [r1, #-3589]	; 0xfffff1fb
				__pi_systat.ledblc = 200;
     488:	88050178 	stmdahi	r5, {r3, r4, r5, r6, r8}
	if (events & AON_RTC_EVFLAGS_CH0) {
     48c:	8d050101 	stfhis	f0, [r5, #-4]
		cli_tim;
     490:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
		__pi_new += setdel;
     494:	ae030505 	cfsh32ge	mvfx0, mvfx3, #5
     498:	05170101 	ldreq	r0, [r7, #-257]	; 0xfffffeff
		setdel = 0;
     49c:	0401063e 	streq	r0, [r1], #-1598	; 0xfffff9c2
		RISE_N_SHINE;
     4a0:	01a00501 	lsleq	r0, r1, #10
		__pi_new += setdel;
     4a4:	7ecd0306 	cdpvc	3, 12, cr0, cr13, cr6, {0}
		RISE_N_SHINE;
     4a8:	01b3053c 			; <UNDEFINED> instruction: 0x01b3053c
     4ac:	02040106 	andeq	r0, r4, #-2147483647	; 0x80000001
		aux_timer_inactive = 1;
     4b0:	b3033e05 	movwlt	r3, #15877	; 0x3e05
     4b4:	01048201 	tsteq	r4, r1, lsl #4
				if (__pi_systat.ledsts & 0x1)
     4b8:	0301b305 	movweq	fp, #4869	; 0x1305
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	05207ecd 	streq	r7, [r0, #-3789]!	; 0xfffff133
     4c0:	200601c6 	andcs	r0, r6, r6, asr #3
				if (__pi_systat.ledsts & 0x2)
     4c4:	01028b05 	tsteq	r2, r5, lsl #22
     4c8:	01029005 	tsteq	r2, r5
     4cc:	01029805 	tsteq	r2, r5, lsl #16
				if (__pi_systat.ledsts & 0x8)
     4d0:	0106e105 	tsteq	r6, r5, lsl #2
				__pi_systat.ledblk = 1;
     4d4:	05130905 	ldreq	r0, [r3, #-2309]	; 0xfffff6fb
     4d8:	1e05010e 	adfnes	f0, f5, #0.5
		if (aux_timer_inactive) {
     4dc:	012e0501 			; <UNDEFINED> instruction: 0x012e0501
			cli_aux;
     4e0:	04013305 	streq	r3, [r1], #-773	; 0xfffffcfb
     4e4:	03050502 	movweq	r0, #21762	; 0x5502
     4e8:	170101ad 	strne	r0, [r1, -sp, lsr #3]
     4ec:	01063e05 	tsteq	r6, r5, lsl #28
     4f0:	46050104 	strmi	r0, [r5], -r4, lsl #2
     4f4:	7ece0306 	cdpvc	3, 12, cr0, cr14, cr6, {0}
     4f8:	06590520 	ldrbeq	r0, [r9], -r0, lsr #10
     4fc:	066c0501 	strbteq	r0, [ip], -r1, lsl #10
     500:	06010582 	streq	r0, [r1], -r2, lsl #11
     504:	06100513 			; <UNDEFINED> instruction: 0x06100513
word tci_update_delay_ticks (Boolean force) {
     508:	053c4e03 	ldreq	r4, [ip, #-3587]!	; 0xfffff1fd
	cli_tim;
     50c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
     510:	052f060d 	streq	r0, [pc, #-1549]!	; ffffff0b <_estack+0xdfffaf0b>
	if (setdel) {
     514:	13052f10 	movwne	r2, #24336	; 0x5f10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	10052f06 	andne	r2, r5, r6, lsl #30
     520:	0613052f 	ldreq	r0, [r3], -pc, lsr #10
     524:	060d0501 	streq	r0, [sp], -r1, lsl #10
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	0313052f 	tsteq	r3, #197132288	; 0xbc00000
				AON_RTC_O_CH0CMP)) - gettav ());
     52c:	01052e2d 	tsteq	r5, sp, lsr #28
	return NO;
     530:	17022e06 	strne	r2, [r2, -r6, lsl #28]
			setdel = 0;
     534:	5c010100 	stfpls	f0, [r1], {-0}
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     538:	03000015 	movweq	r0, #21
     53c:	00029b00 	andeq	r9, r2, r0, lsl #22
}
     540:	fb010200 	blx	40d4a <__ccfg+0x20da2>
		sti_tim;
     544:	01000d0e 	tsteq	r0, lr, lsl #26
		return YES;
     548:	00010101 	andeq	r0, r1, r1, lsl #2
     54c:	00010000 	andeq	r0, r1, r0
     550:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     554:	2f656d6f 	svccs	0x00656d6f
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
	UARTDisable (UART0_BASE);
     55c:	442f6e69 	strtmi	r6, [pc], #-3689	; 564 <__pi_uart_setrate+0xc>
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	UARTDisable (UART0_BASE);
     564:	4f2f706f 	svcmi	0x002f706f
	UARTConfigSetExpClk (UART0_BASE,
     568:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     56c:	502f5445 	eorpl	r5, pc, r5, asr #8
     570:	534f4349 	movtpl	r4, #62281	; 0xf349
     574:	6369502f 	cmnvs	r9, #47	; 0x2f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
     57c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     580:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	2f656d6f 	svccs	0x00656d6f
     588:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     58c:	442f6e69 	strtmi	r6, [pc], #-3689	; 594 <__pi_uart_setrate+0x3c>
	urates [0] = rate;
     590:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
}
     594:	4f2f706f 	svcmi	0x002f706f
     598:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     59c:	502f5445 	eorpl	r5, pc, r5, asr #8
     5a0:	534f4349 	movtpl	r4, #62281	; 0xf349
     5a4:	6369502f 	cmnvs	r9, #47	; 0x2f
     5a8:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     5b0:	43432f58 	movtmi	r2, #16216	; 0x3f58
     5b4:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
     5bc:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c0:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
     5c4:	2f006269 	svccs	0x00006269
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     5cc:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
     5d0:	2f6e6974 	svccs	0x006e6974
     5d4:	6b736544 	blvs	1cd9aec <__ccfg+0x1cb9b44>
     5d8:	2f706f74 	svccs	0x00706f74
     5dc:	4f534c4f 	svcmi	0x00534c4f
     5e0:	2f54454e 	svccs	0x0054454e
	switch (operation) {
     5e4:	4f434950 	svcmi	0x00434950
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
     5ec:	2f534f63 	svccs	0x00534f63
     5f0:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
     5f4:	4f492f73 	svcmi	0x00492f73
     5f8:	6f682f00 	svcvs	0x00682f00
				*buf++ = uart_a_read;
     5fc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 450 <AONRTCIntHandler+0x5c>
     600:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			while (len && uart_a_char_available) {
     604:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     608:	6f746b73 	svcvs	0x00746b73
     60c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
			if (len != operation) {
     610:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
}
     614:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
     618:	2f534f43 	svccs	0x00534f43
			uart_a_disable_int;
     61c:	4f636950 	svcmi	0x00636950
			if (uart_a_char_available) {
     620:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
				*buf++ = uart_a_read;
     624:	2f736269 	svccs	0x00736269
			uart_a_disable_int;
     628:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
     62c:	0073726f 	rsbseq	r7, r3, pc, ror #4
			if (uart_a_char_available) {
     630:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 57c <__pi_uart_setrate+0x24>
     634:	616d2f65 	cmnvs	sp, r5, ror #30
				uart_a_enable_int;
     638:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
     63c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				goto Redo_rx;
     640:	706f746b 	rsbvc	r7, pc, fp, ror #8
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     644:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
     648:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			return -2;
     64c:	4349502f 	movtmi	r5, #36911	; 0x902f
     650:	502f534f 	eorpl	r5, pc, pc, asr #6
				uart_a_write (*buf);
     654:	534f6369 	movtpl	r6, #62313	; 0xf369
     658:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
			while (len && uart_a_room_in_tx) {
     65c:	006c656e 	rsbeq	r6, ip, lr, ror #10
     660:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
     664:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
			if (len != operation) {
     668:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
			uart_a_disable_int;
     66c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
     670:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
			if (uart_a_room_in_tx) {
     674:	61652d65 	cmnvs	r5, r5, ror #26
     678:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
				uart_a_enable_int;
     67c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
     680:	636e692f 	cmnvs	lr, #770048	; 0xbc000
				*buf++ = uart_a_read;
     684:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
			if (uart_a_room_in_tx) {
     688:	6f682f00 	svcvs	0x00682f00
				uart_a_write (*buf);
     68c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4e0 <AONRTCIntHandler+0xec>
     690:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
     698:	6f746b73 	svcvs	0x00746b73
			uart_a_enable_int;
     69c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
     6a0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
     6a4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
			return 0;
     6a8:	2f534f43 	svccs	0x00534f43
			if (len == UART_CNTRL_SETRATE) {
     6ac:	4f636950 	svcmi	0x00636950
				if (__pi_uart_setrate (*((word*)buf),
     6b0:	6d000053 	stcvs	0, cr0, [r0, #-332]	; 0xfffffeb4
     6b4:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
     6b8:	00010063 	andeq	r0, r1, r3, rrx
				syserror (EREQPAR, "uar");
     6bc:	73797300 	cmnvc	r9, #0, 6
			syserror (ENOOPER, "uai");
     6c0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
			if (len == UART_CNTRL_GETRATE) {
     6c4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
				return 1;
     6c8:	63000002 	movwvs	r0, #2
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	7369736d 	cmnvc	r9, #-1275068415	; 0xb4000001
			syserror (ENOOPER, "uai");
     6d0:	6363675f 	cmnvs	r3, #24903680	; 0x17c0000
     6d4:	0100682e 	tsteq	r0, lr, lsr #16
     6d8:	70670000 	rsbvc	r0, r7, r0
     6dc:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
     6e0:	00000200 	andeq	r0, r0, r0, lsl #4
     6e4:	5f717269 	svcpl	0x00717269
     6e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     6ec:	656c5f72 	strbvs	r5, [ip, #-3954]!	; 0xfffff08e
     6f0:	682e7364 	stmdavs	lr!, {r2, r5, r6, r8, r9, ip, sp, lr}
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	00000300 	andeq	r0, r0, r0, lsl #6
void UART0IntHandler () {
     6f8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     700:	72690000 	rsbvc	r0, r9, #0
     704:	75625f71 	strbvc	r5, [r2, #-3953]!	; 0xfffff08f
     708:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     70c:	00682e73 	rsbeq	r2, r8, r3, ror lr
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	69000003 	stmdbvs	r0, {r0, r1}
     714:	705f7172 	subsvc	r7, pc, r2, ror r1	; <UNPREDICTABLE>
		RISE_N_SHINE;
     718:	735f6e69 	cmpvc	pc, #1680	; 0x690
     71c:	6f736e65 	svcvs	0x00736e65
		i_trigger (devevent (UART_A, READ));
     720:	00682e72 	rsbeq	r2, r8, r2, ror lr
     724:	70000004 	andvc	r0, r0, r4
     728:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
     72c:	00020068 	andeq	r0, r2, r8, rrx
     730:	6e6f6100 	powvse	f6, f7, f0
     734:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
     738:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     73c:	77700000 	ldrbvc	r0, [r0, -r0]!
     740:	74635f72 	strbtvc	r5, [r3], #-3954	; 0xfffff08e
     744:	682e6c72 	stmdavs	lr!, {r1, r4, r5, r6, sl, fp, sp, lr}
     748:	00000200 	andeq	r0, r0, r0, lsl #4
     74c:	5f6e6f61 	svcpl	0x006e6f61
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	2e636f69 	cdpcs	15, 6, cr6, cr3, cr9, {3}
     754:	00020068 	andeq	r0, r2, r8, rrx
     758:	68637300 	stmdavs	r3!, {r8, r9, ip, sp, lr}^
		i_trigger (devevent (UART_A, WRITE));
     75c:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	682e7265 	stmdavs	lr!, {r0, r2, r5, r6, r9, ip, sp, lr}
     764:	00000500 	andeq	r0, r0, r0, lsl #10
		RISE_N_SHINE;
     768:	5f6e6f61 	svcpl	0x006e6f61
     76c:	2e637577 	mcrcs	5, 3, r7, cr3, cr7, {3}
     770:	00020068 	andeq	r0, r2, r8, rrx
		i_trigger (devevent (UART_A, WRITE));
     774:	6e6f6100 	powvse	f6, f7, f0
     778:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
     77c:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
     780:	00020068 	andeq	r0, r2, r8, rrx
     784:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     788:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
     78c:	00060068 	andeq	r0, r6, r8, rrx
     790:	63726100 	cmnvs	r2, #0, 2
     794:	00682e68 	rsbeq	r2, r8, r8, ror #28
     798:	6d000001 	stcvs	0, cr0, [r0, #-4]
     79c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
}
     7a0:	00010068 	andeq	r0, r1, r8, rrx
     7a4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
     7a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     7ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
     7b0:	62000001 	andvs	r0, r0, #1
void __buttons_setirq (int val) {
     7b4:	6f747475 	svcvs	0x00747475
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
     7bc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	00000100 	andeq	r0, r0, r0, lsl #2
     7c4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     7c8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	6b000007 	blvs	7f0 <__buttons_setirq+0x3c>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     7d4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
     7d8:	00000005 	andeq	r0, r0, r5
     7dc:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
     7e0:	00029802 	andeq	r9, r2, r2, lsl #16
     7e4:	06fc0300 	ldrbteq	r0, [ip], r0, lsl #6
}
     7e8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
     7ec:	10062705 	andne	r2, r6, r5, lsl #14
     7f0:	02220205 	eoreq	r0, r2, #1342177280	; 0x50000000
     7f4:	01010005 	tsteq	r1, r5
void __pinlist_setirq (int val) {
     7f8:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	0002a402 	andeq	sl, r2, r2, lsl #8
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	01180300 	tsteq	r8, r0, lsl #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	053d0205 	ldreq	r0, [sp, #-517]!	; 0xfffffdfb
	for (i = 0; i < N_PINLIST; i++) {
     808:	09050108 	stmdbeq	r5, {r3, r8}
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80c:	08050106 	stmdaeq	r5, {r1, r2, r8}
     810:	2401053c 	strcs	r0, [r1], #-1340	; 0xfffffac4
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     814:	2b060305 	blcs	181430 <__ccfg+0x161488>
     818:	051b0205 	ldreq	r0, [fp, #-517]	; 0xfffffdfb
     81c:	0805010d 	stmdaeq	r5, {r0, r2, r3, r8}
	for (i = 0; i < N_PINLIST; i++) {
     820:	060a0501 	streq	r0, [sl], -r1, lsl #10
}
     824:	3c080501 	cfstr32cc	mvfx0, [r8], {1}
     828:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
     82c:	01060405 	tsteq	r6, r5, lsl #8
     830:	01000702 	tsteq	r0, r2, lsl #14
void GPIOIntHandler () {
     834:	001f0501 	andseq	r0, pc, r1, lsl #10
if (buttons_int) {
     838:	02d00205 	sbcseq	r0, r0, #1342177280	; 0x50000000
     83c:	1f030000 	svcne	0x00030000
	buttons_disable ();
     840:	3d020501 	cfstr32cc	mvfx0, [r2, #-4]
     844:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
	i_trigger ((aword)&__button_list);
     848:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
     84c:	01053c08 	tsteq	r5, r8, lsl #24
     850:	06030524 	streq	r0, [r3], -r4, lsr #10
     854:	04054b39 	streq	r4, [r5], #-2873	; 0xfffff4c7
     858:	07020106 	streq	r0, [r2, -r6, lsl #2]
     85c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     860:	0205001e 	andeq	r0, r5, #30
     864:	000002fc 	strdeq	r0, [r0], -ip
     868:	05012a03 	streq	r2, [r1, #-2563]	; 0xfffff5fd
     86c:	1e051602 	cfmadd32ne	mvax0, mvfx1, mvfx5, mvfx2
     870:	05050e06 	streq	r0, [r5, #-3590]	; 0xfffff1fa
	RISE_N_SHINE;
     874:	1c1e0524 	cfldr32ne	mvfx0, [lr], {36}	; 0x24
     878:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
     87c:	05220603 	streq	r0, [r2, #-1539]!	; 0xfffff9fd
if (pin_sensor_int) {
     880:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     884:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
	i_trigger ((aword)(&__input_pins));
     888:	17052106 	strne	r2, [r5, -r6, lsl #2]
     88c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
     890:	05593f06 	ldrbeq	r3, [r9, #-3846]	; 0xfffff0fa
     894:	0805013b 	stmdaeq	r5, {r0, r1, r3, r4, r5, r8}
     898:	06090501 	streq	r0, [r9], -r1, lsl #10
     89c:	4a080501 	bmi	201ca8 <__ccfg+0x1e1d00>
     8a0:	30060205 	andcc	r0, r6, r5, lsl #4
     8a4:	01061505 	tsteq	r6, r5, lsl #10
     8a8:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
     8ac:	01010005 	tsteq	r1, r5
     8b0:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
	__pinsen_disable_and_clear;
     8b4:	00000002 	andeq	r0, r0, r2
	RISE_N_SHINE;
     8b8:	013a0300 	teqeq	sl, r0, lsl #6
     8bc:	05170205 	ldreq	r0, [r7, #-517]	; 0xfffffdfb
     8c0:	050d061f 	streq	r0, [sp, #-1567]	; 0xfffff9e1
}
     8c4:	1f052502 	svcne	0x00052502
     8c8:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     8cc:	3c053d06 	stccc	13, cr3, [r5], {6}
     8d0:	01080501 	tsteq	r8, r1, lsl #10
     8d4:	01060905 	tsteq	r6, r5, lsl #18
void system_init () {
     8d8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e0:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	054b0603 	strbeq	r0, [fp, #-1539]	; 0xfffff9fd
     8e8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     8ec:	06052027 	streq	r2, [r5], -r7, lsr #32
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	06040520 	streq	r0, [r4], -r0, lsr #10
     8f4:	06240521 	strteq	r0, [r4], -r1, lsr #10
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	3c170501 	cfldr32cc	mvfx0, [r7], {1}
     8fc:	23060205 	movwcs	r0, #25093	; 0x6205
     900:	01061505 	tsteq	r6, r5, lsl #10
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	01010005 	tsteq	r1, r5
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	05001305 	streq	r1, [r0, #-773]	; 0xfffffcfb
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	00000002 	andeq	r0, r0, r2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	00ce0300 	sbceq	r0, lr, r0, lsl #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	1e061305 	cdpne	3, 0, cr1, cr6, cr5, {0}
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	06220205 	strteq	r0, [r2], -r5, lsl #4
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	03053633 	movweq	r3, #22067	; 0x5633
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     928:	05020413 	streq	r0, [r2, #-1043]	; 0xfffffbed
     92c:	01f00304 	mvnseq	r0, r4, lsl #6
     930:	5c053001 	stcpl	0, cr3, [r5], {1}
     934:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		if (port_confs [i] & 0x80)
     938:	05143e06 	ldreq	r3, [r4, #-3590]	; 0xfffff1fa
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	0502100a 	streq	r1, [r2, #-10]
     940:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		if (port_confs [i] & 0x40)
     944:	0205002d 	andeq	r0, r5, #45	; 0x2d
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	00000338 	andeq	r0, r0, r8, lsr r3
     94c:	01019703 	tsteq	r1, r3, lsl #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     950:	01140205 	tsteq	r4, r5, lsl #4
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     954:	2d051701 	stccs	7, cr1, [r5, #-4]
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     958:	01790306 	cmneq	r9, r6, lsl #6
	all_leds_blink;
     95c:	06350205 	ldrteq	r0, [r5], -r5, lsl #4
     960:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
     964:	03030503 	movweq	r0, #13571	; 0x3503
     968:	04017fb5 	streq	r7, [r1], #-4021	; 0xfffff04b
     96c:	062d0504 	strteq	r0, [sp], -r4, lsl #10
     970:	2001cb03 	andcs	ip, r1, r3, lsl #22
     974:	02050104 	andeq	r0, r5, #4, 2
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	7f8f0306 	svcvc	0x008f0306
     97c:	1303053c 	movwne	r0, #13628	; 0x353c
     980:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
     984:	eb032905 	bl	cada0 <__ccfg+0xaadf8>
     988:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     994:	7f900303 	svcvc	0x00900303
	IntEnable (INT_AON_RTC_COMB);
     998:	05040420 	streq	r0, [r4, #-1056]	; 0xfffffbe0
     99c:	00f0032d 	rscseq	r0, r0, sp, lsr #6
     9a0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
	__pi_malloc_init ();
     9a4:	90030603 	andls	r0, r3, r3, lsl #12
	IntEnable (INT_AON_GPIO_EDGE);
     9a8:	0404207f 	streq	r2, [r4], #-127	; 0xffffff81
     9ac:	eb032905 	bl	cadc8 <__ccfg+0xaae20>
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     9b8:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
     9bc:	90030603 	andls	r0, r3, r3, lsl #12
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c0:	0101207f 	tsteq	r1, pc, ror r0
     9c4:	01010101 	tsteq	r1, r1, lsl #2
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c8:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
     9cc:	29050404 	stmdbcs	r5, {r2, sl}
     9d0:	0101a103 	tsteq	r1, r3, lsl #2
	urates [0] = UART_RATE / 100;
     9d4:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     9d8:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
	reinit_uart ();
     9dc:	03030501 	movweq	r0, #13569	; 0x3501
	EXTRA_INITIALIZERS;
     9e0:	04207eda 	strteq	r7, [r0], #-3802	; 0xfffff126
     9e4:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e8:	042001a6 	strteq	r0, [r0], #-422	; 0xfffffe5a
     9ec:	06030501 	streq	r0, [r3], -r1, lsl #10
     9f0:	207eda03 	rsbscs	sp, lr, r3, lsl #20
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	29050404 	stmdbcs	r5, {r2, sl}
     9f8:	0101a103 	tsteq	r1, r3, lsl #2
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
     a00:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
			devinit [i] . init (devinit [i] . param);
     a04:	06030501 	streq	r0, [r3], -r1, lsl #10
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	207eda03 	rsbscs	sp, lr, r3, lsl #20
     a0c:	01010101 	tsteq	r1, r1, lsl #2
     a10:	01580101 	cmpeq	r8, r1, lsl #2
	IntEnable (INT_UART0_COMB);
     a14:	1108052e 	tstne	r8, lr, lsr #10
     a18:	01000902 	tsteq	r0, r2, lsl #18
}
     a1c:	001d0501 	andseq	r0, sp, r1, lsl #10
	tci_run_auxiliary_timer ();
     a20:	038c0205 	orreq	r0, ip, #1342177280	; 0x50000000
		diag ("");
     a24:	9d030000 	stcls	0, cr0, [r3, #-0]
     a28:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2c:	061d0516 			; <UNDEFINED> instruction: 0x061d0516
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	2416050e 	ldrcs	r0, [r6], #-1294	; 0xfffffaf2
		diag ("Leftover RAM: %d bytes",
     a34:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     a38:	09052016 	stmdbeq	r5, {r1, r2, r4, sp}
     a3c:	0602052e 	streq	r0, [r2], -lr, lsr #10
     a40:	01760323 	cmneq	r6, r3, lsr #6
     a44:	01061105 	tsteq	r6, r5, lsl #2
     a48:	0d030205 	sfmeq	f0, 4, [r3, #-20]	; 0xffffffec
     a4c:	032f052e 			; <UNDEFINED> instruction: 0x032f052e
     a50:	2a052073 	bcs	148c24 <__ccfg+0x128c7c>
     a54:	05200a03 	streq	r0, [r0, #-2563]!	; 0xfffff5fd
     a58:	2076032f 	rsbscs	r0, r6, pc, lsr #6
     a5c:	052e3605 	streq	r3, [lr, #-1541]!	; 0xfffff9fb
     a60:	2e0a032a 	cdpcs	3, 0, cr0, cr10, cr10, {1}
     a64:	23060205 	movwcs	r0, #25093	; 0x6205
     a68:	2f060105 	svccs	0x00060105
     a6c:	01000b02 	tsteq	r0, r2, lsl #22
     a70:	00210501 	eoreq	r0, r1, r1, lsl #10
     a74:	03cc0205 	biceq	r0, ip, #1342177280	; 0x50000000
     a78:	aa030000 	bge	c0a80 <__ccfg+0xa0ad8>
     a7c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
     a80:	06210517 			; <UNDEFINED> instruction: 0x06210517
     a84:	2502051b 	strcs	r0, [r2, #-1307]	; 0xfffffae5
     a88:	2e060905 	vmlacs.f16	s0, s12, s10	; <UNPREDICTABLE>
     a8c:	03140205 	tsteq	r4, #1342177280	; 0x50000000
__attribute__ ((noreturn)) void __pi_release () {
     a90:	11050169 	tstne	r5, r9, ror #2
     a94:	2f050106 	svccs	0x00050106
     a98:	032a052e 			; <UNDEFINED> instruction: 0x032a052e
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	2f052017 	svccs	0x00052017
	check_stack_overflow;
     aa0:	05206903 	streq	r6, [r0, #-2307]!	; 0xfffff6fd
     aa4:	2a052e36 	bcs	14c384 <__ccfg+0x12c3dc>
     aa8:	05201703 	streq	r1, [r0, #-1795]!	; 0xfffff8fd
	update_n_wake (MAX_WORD, NO);
     aac:	05230602 	streq	r0, [r3, #-1538]!	; 0xfffff9fe
     ab0:	01052e09 	tsteq	r5, r9, lsl #28
     ab4:	06021306 	streq	r1, [r2], -r6, lsl #6
	for_all_tasks (__pi_curr) {
     ab8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     abc:	0205001a 	andeq	r0, r5, #26
     ac0:	000003f4 	strdeq	r0, [r0], -r4
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	0102b703 	tsteq	r2, r3, lsl #14
	__SLEEP;
     ac8:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
     acc:	0e061a05 	vmlaeq.f32	s2, s12, s10
     ad0:	05240b05 	streq	r0, [r4, #-2821]!	; 0xfffff4fb
     ad4:	02052e09 	andeq	r2, r5, #9, 28	; 0x90
	system_event_count ++;
     ad8:	05053206 	streq	r3, [r5, #-518]	; 0xfffffdfa
     adc:	2b051406 	blcs	145afc <__ccfg+0x125b54>
	switch (__pi_systat.effpdm) {
     ae0:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
     ae4:	06050522 	streq	r0, [r5], -r2, lsr #10
     ae8:	06030501 	streq	r0, [r3], -r1, lsl #10
     aec:	05151825 	ldreq	r1, [r5, #-2085]	; 0xfffff7db
			__WFI ();
     af0:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     af4:	03052e06 	movweq	r2, #24070	; 0x5e06
     af8:	07053006 	streq	r3, [r5, -r6]
	check_stack_overflow;
     afc:	06050106 	streq	r0, [r5], -r6, lsl #2
     b00:	06040520 	streq	r0, [r4], -r0, lsr #10
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
     b08:	06040501 	streq	r0, [r4], -r1, lsl #10
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	0617052f 	ldreq	r0, [r7], -pc, lsr #10
			goto Redo;
     b10:	06030501 	streq	r0, [r3], -r1, lsl #10
	for_all_tasks (__pi_curr) {
     b14:	06120522 	ldreq	r0, [r2], -r2, lsr #10
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	20060501 	andcs	r0, r6, r1, lsl #10
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1c:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
     b20:	01060705 	tsteq	r6, r5, lsl #14
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b24:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
     b28:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
     b2c:	1f130617 	svcne	0x00130617
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b30:	2f060405 	svccs	0x00060405
     b34:	05140305 	ldreq	r0, [r4, #-773]	; 0xfffffcfb
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b38:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     b3c:	03052006 	movweq	r2, #20486	; 0x5006
			__WFI ();
     b40:	07052206 	streq	r2, [r5, -r6, lsl #4]
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	06050106 	streq	r0, [r5], -r6, lsl #2
     b48:	06040520 	streq	r0, [r4], -r0, lsr #10
}
     b4c:	06170521 	ldreq	r0, [r7], -r1, lsr #10
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b50:	04051f13 	streq	r1, [r5], #-3859	; 0xfffff0ed
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b54:	03052f06 	movweq	r2, #24326	; 0x5f06
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b58:	06120514 			; <UNDEFINED> instruction: 0x06120514
     b5c:	20060501 	andcs	r0, r6, r1, lsl #10
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	21060405 	tstcs	r6, r5, lsl #8
     b64:	01060805 	tsteq	r6, r5, lsl #16
     b68:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6c:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	1f130618 	svcne	0x00130618
     b74:	2f060505 	svccs	0x00060505
     b78:	02050504 	andeq	r0, r5, #4, 10	; 0x1000000
     b7c:	017da303 	cmneq	sp, r3, lsl #6
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	01061105 	tsteq	r6, r5, lsl #2
     b84:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
     b90:	06052019 			; <UNDEFINED> instruction: 0x06052019
     b94:	0604053c 			; <UNDEFINED> instruction: 0x0604053c
     b98:	06130521 	ldreq	r0, [r3], -r1, lsr #10
     b9c:	20070501 	andcs	r0, r7, r1, lsl #10
			SysCtrlSetRechargeBeforePowerDown
     ba0:	052f1405 	streq	r1, [pc, #-1029]!	; 7a3 <UART0IntHandler+0xaf>
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	05051f07 	streq	r1, [r5, #-3847]	; 0xfffff0f9
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba8:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
     bac:	06050106 	streq	r0, [r5], -r6, lsl #2
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     bb4:	96032905 	strls	r2, [r3], -r5, lsl #18
     bb8:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     bc0:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	e6030605 	str	r0, [r3], -r5, lsl #12
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     bcc:	08050106 	stmdaeq	r5, {r1, r2, r8}
     bd0:	06060520 	streq	r0, [r6], -r0, lsr #10
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd4:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
			while (!(AONWUCPowerStatusGet () &
     bd8:	02940329 	addseq	r0, r4, #-1543503872	; 0xa4000000
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	17050501 	strne	r0, [r5, -r1, lsl #10]
     be0:	01062d05 	tsteq	r6, r5, lsl #26
     be4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be8:	7de80306 	stclvc	3, cr0, [r8, #24]!
     bec:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     bf0:	06060501 	streq	r0, [r6], -r1, lsl #10
     bf4:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf8:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     bfc:	06050106 	streq	r0, [r5], -r6, lsl #2
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c00:	01012106 	tsteq	r1, r6, lsl #2
     c04:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
			SysCtrlAdjustRechargeAfterPowerDown ();
     c08:	03010618 	movweq	r0, #5656	; 0x1618
			reinit_uart ();
     c0c:	04053c0a 	streq	r3, [r5], #-3082	; 0xfffff3f6
     c10:	13052206 	movwne	r2, #20998	; 0x5206
     c14:	07050106 	streq	r0, [r5, -r6, lsl #2]
}
     c18:	06050520 	streq	r0, [r5], -r0, lsr #10
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1c:	0618052f 	ldreq	r0, [r8], -pc, lsr #10
     c20:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	cd03060b 	stcgt	6, cr0, [r3, #-44]	; 0xffffffd4
     c28:	02052e02 	andeq	r2, r5, #2, 28
     c2c:	0605051a 			; <UNDEFINED> instruction: 0x0605051a
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c30:	06030501 	streq	r0, [r3], -r1, lsl #10
     c34:	060c0534 			; <UNDEFINED> instruction: 0x060c0534
     c38:	2c030530 	cfstr32cs	mvfx0, [r3], {48}	; 0x30
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	0c052206 	sfmeq	f2, 4, [r5], {6}
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	0a050106 	beq	141060 <__ccfg+0x1210b8>
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	1f0c052f 	svcne	0x000c052f
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	05220305 	streq	r0, [r2, #-773]!	; 0xfffffcfb
     c4c:	03051e0c 	movweq	r1, #24076	; 0x5e0c
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c50:	01132f06 	tsteq	r3, r6, lsl #30
     c54:	1902054a 	stmdbne	r2, {r1, r3, r6, r8, sl}
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	13060105 	movwne	r0, #24837	; 0x6105
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5c:	45031605 	strmi	r1, [r3, #-1541]	; 0xfffff9fb
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c60:	05050420 	streq	r0, [r5, #-1056]	; 0xfffffbe0
     c64:	c9030605 	stmdbgt	r3, {r0, r2, r9, sl}
			PRCMPowerDomainOff (
     c68:	08054a7d 	stmdaeq	r5, {r0, r2, r3, r4, r5, r6, r9, fp, lr}
     c6c:	06050106 	streq	r0, [r5], -r6, lsl #2
	__SLEEP;
     c70:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
     c74:	c2032905 	andgt	r2, r3, #81920	; 0x14000
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
	goto Redo;
     c7c:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
     c80:	05050401 	streq	r0, [r5, #-1025]	; 0xfffffbff
     c84:	ba030605 	blt	c24a0 <__ccfg+0xa24f8>
     c88:	14054a7d 	strne	r4, [r5], #-2685	; 0xfffff583
     c8c:	08050106 	stmdaeq	r5, {r1, r2, r8}
     c90:	06060520 	streq	r0, [r6], -r0, lsr #10
     c94:	05040421 	streq	r0, [r4, #-1057]	; 0xfffffbdf
     c98:	02c00329 	sbceq	r0, r0, #-1543503872	; 0xa4000000
     c9c:	17050501 	strne	r0, [r5, -r1, lsl #10]
     ca0:	01062d05 	tsteq	r6, r5, lsl #26
     ca4:	05050504 	streq	r0, [r5, #-1284]	; 0xfffffafc
     ca8:	7dbc0306 	ldcvc	3, cr0, [ip, #24]!
     cac:	0614054a 	ldreq	r0, [r4], -sl, asr #10
     cb0:	06060501 	streq	r0, [r6], -r1, lsl #10
     cb4:	05010121 	streq	r0, [r1, #-289]	; 0xfffffedf
     cb8:	14051305 	strne	r1, [r5], #-773	; 0xfffffcfb
     cbc:	06050106 	streq	r0, [r5], -r6, lsl #2
     cc0:	01012106 	tsteq	r1, r6, lsl #2
     cc4:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
     cc8:	04010618 	streq	r0, [r1], #-1560	; 0xfffff9e8
     ccc:	06030501 	streq	r0, [r3], -r1, lsl #10
     cd0:	4a02ce03 	bmi	b44e4 <__ccfg+0x9453c>
     cd4:	01060605 	tsteq	r6, r5, lsl #12
     cd8:	30060405 	andcc	r0, r6, r5, lsl #8
     cdc:	01001502 	tsteq	r0, r2, lsl #10
     ce0:	002d0501 	eoreq	r0, sp, r1, lsl #10
     ce4:	05080205 	streq	r0, [r8, #-517]	; 0xfffffdfb
int main (void) {
     ce8:	89030000 	stmdbhi	r3, {}	; <UNPREDICTABLE>
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cec:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
     cf0:	062d0516 			; <UNDEFINED> instruction: 0x062d0516
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	052f0605 	streq	r0, [pc, #-1541]!	; 6fb <UART0IntHandler+0x7>
	system_init ();
     cfc:	21061f02 	tstcs	r6, r2, lsl #30
	tcv_init ();
     d00:	01060605 	tsteq	r6, r5, lsl #12
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
     d08:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d0c:	06060520 	streq	r0, [r6], -r0, lsr #10
     d10:	06040501 	streq	r0, [r4], -r1, lsl #10
     d14:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	06020501 	streq	r0, [r2], -r1, lsl #10
     d1c:	2e7ef903 	vaddcs.f16	s31, s28, s6	; <UNPREDICTABLE>
	delay (16, 0);
     d20:	01061005 	tsteq	r6, r5
     d24:	052e2e05 	streq	r2, [lr, #-3589]!	; 0xfffff1fb
     d28:	0187031a 	orreq	r0, r7, sl, lsl r3
	__pi_release ();
     d2c:	18052f3c 	stmdane	r5, {r2, r3, r4, r5, r8, r9, sl, fp, sp}
     d30:	1f170520 	svcne	0x00170520
     d34:	0a030905 	beq	c3150 <__ccfg+0xa31a8>
     d38:	030d0520 	movweq	r0, #54560	; 0xd520
     d3c:	0b052076 	bleq	148f1c <__ccfg+0x128f74>
     d40:	1d0d0523 	cfstr32ne	mvfx0, [sp, #-140]	; 0xffffff74
     d44:	4d060405 	cfstrsmi	mvf0, [r6, #-20]	; 0xffffffec
static void killev (__pi_pcb_t *pid) {
     d48:	06010513 			; <UNDEFINED> instruction: 0x06010513
	wfun = (aword)(pid->code);
     d4c:	06030519 			; <UNDEFINED> instruction: 0x06030519
	for_all_tasks (i) {
     d50:	0a052f29 	beq	14c9fc <__ccfg+0x12ca54>
		for (j = 0; j < nevents (i); j++) {
     d54:	09020106 	stmdbeq	r2, {r1, r2, r8}
     d58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
     d5c:	02050033 	andeq	r0, r5, #51	; 0x33
			    || i->Events [j] . Event == wfun
     d60:	00000558 	andeq	r0, r0, r8, asr r5
		for (j = 0; j < nevents (i); j++) {
     d64:	0105d303 	tsteq	r5, r3, lsl #6
			if (i->Events [j] . Event == (aword)pid
     d68:	17140205 	ldrne	r0, [r4, -r5, lsl #4]
     d6c:	03063305 	movweq	r3, #25349	; 0x6305
     d70:	02050179 	andeq	r0, r5, #1073741854	; 0x4000001e
				wakeupev (i, j);
     d74:	03330527 	teqeq	r3, #163577856	; 0x9c00000
     d78:	02053c79 	andeq	r3, r5, #30976	; 0x7900
	for_all_tasks (i) {
     d7c:	043e0627 	ldrteq	r0, [lr], #-1575	; 0xfffff9d9
}
     d80:	03050502 	movweq	r0, #21762	; 0x5502
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	04017bd5 	streq	r7, [r1], #-3029	; 0xfffff42b
static void qfree (aword *ch) {
     d88:	06020501 	streq	r0, [r2], -r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	0104ab03 	tsteq	r4, r3, lsl #22
	cc = (aword*)(mpools + MA_NP);
     d90:	82090306 	andhi	r0, r9, #402653184	; 0x18000000
	m_setnextp (ch, chunk);
     d94:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
	m_setnextp (cc, ch);
     d98:	017dd903 	cmneq	sp, r3, lsl #18
}
     d9c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da0:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
     da4:	03010501 	movweq	r0, #5377	; 0x1501
     da8:	042002a5 	strteq	r0, [r0], #-677	; 0xfffffd5b
			m_setnextp (cc, m_nextp (chunk));
     dac:	03230506 			; <UNDEFINED> instruction: 0x03230506
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	05207ddb 	streq	r7, [r0, #-3547]!	; 0xfffff225
     db4:	054f0605 	strbeq	r0, [pc, #-1541]	; 7b7 <__buttons_setirq+0x3>
     db8:	04010622 	streq	r0, [r1], #-1570	; 0xfffff9de
     dbc:	06020501 	streq	r0, [r2], -r1, lsl #10
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	66029e03 	strvs	r9, [r2], -r3, lsl #28
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	01060d05 	tsteq	r6, r5, lsl #26
     dc8:	2f060205 	svccs	0x00060205
     dcc:	13060105 	movwne	r0, #24837	; 0x6105
			m_setnextp (cc, m_nextp (chunk));
     dd0:	01000c02 	tsteq	r0, r2, lsl #24
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	001c0501 	andseq	r0, ip, r1, lsl #10
     dd8:	05ac0205 	streq	r0, [ip, #517]!	; 0x205
     ddc:	ef030000 	svc	0x00030000
     de0:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
     de4:	05060417 	streq	r0, [r6, #-1047]	; 0xfffffbe9
     de8:	7df70324 	ldclvc	3, cr0, [r7, #144]!	; 0x90
			if (m_size (chunk) >= m_size (ch))
     dec:	17050501 	strne	r0, [r5, -r1, lsl #10]
     df0:	01062305 	tsteq	r6, r5, lsl #6
     df4:	02050104 	andeq	r0, r5, #4, 2
		chunk = m_nextp (chunk))
     df8:	20028803 	andcs	r8, r2, r3, lsl #16
     dfc:	23050604 	movwcs	r0, #22020	; 0x5604
     e00:	207df803 	rsbscs	pc, sp, r3, lsl #16
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	02050104 	andeq	r0, r5, #4, 2
	diag_wait (a);
     e08:	02850306 	addeq	r0, r5, #402653184	; 0x18000000
	diag_wchar (c, a);
     e0c:	0506044a 	streq	r0, [r6, #-1098]	; 0xfffffbb6
     e10:	7cc90324 	stclvc	3, cr0, [r9], {36}	; 0x24
}
     e14:	172d0501 	strne	r0, [sp, -r1, lsl #10]!
     e18:	17050517 	smladne	r5, r7, r5, r0
	syserror (ESTATE, "state");
     e1c:	01062305 	tsteq	r6, r5, lsl #6
     e20:	02050104 	andeq	r0, r5, #4, 2
     e24:	03a90306 			; <UNDEFINED> instruction: 0x03a90306
     e28:	0506043c 	streq	r0, [r6, #-1084]	; 0xfffffbc4
void update_n_wake (word min, Boolean force) {
     e2c:	02ce0327 	sbceq	r0, lr, #-1677721600	; 0x9c000000
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	14050501 	strne	r0, [r5], #-1281	; 0xfffffaff
     e34:	01062405 	tsteq	r6, r5, lsl #8
     e38:	02050104 	andeq	r0, r5, #4, 2
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	7db20306 	ldcvc	3, cr0, [r2, #24]!
     e40:	000e0258 	andeq	r0, lr, r8, asr r2
     e44:	3d050101 	stfccs	f0, [r5, #-4]
     e48:	e4020500 	str	r0, [r2], #-1280	; 0xfffffb00
     e4c:	03000005 	movweq	r0, #5
     e50:	0501068f 	streq	r0, [r1, #-1679]	; 0xfffff971
     e54:	3d051402 	cfstrscc	mvf1, [r5, #-8]
     e58:	052e1e06 	streq	r1, [lr, #-3590]!	; 0xfffff1fa
     e5c:	0b030605 	bleq	c2678 <__ccfg+0xa26d0>
     e60:	060e0582 	streq	r0, [lr], -r2, lsl #11
     e64:	2f080501 	svccs	0x00080501
     e68:	051f0e05 	ldreq	r0, [pc, #-3589]	; 6b <g_pfnVectors+0x6b>
     e6c:	052f0605 	streq	r0, [pc, #-1541]!	; 86f <GPIOIntHandler+0x3b>
		for_all_tasks (i) {
     e70:	12050f0a 	andne	r0, r5, #10, 30	; 0x28
	__pi_mintk = znew + min;
     e74:	0f052006 	svceq	0x00052006
     e78:	0604052e 	streq	r0, [r4], -lr, lsr #10
			if (!twaiting (i))
     e7c:	06070534 			; <UNDEFINED> instruction: 0x06070534
     e80:	06050501 	streq	r0, [r5], -r1, lsl #10
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	052e2803 	streq	r2, [lr, #-2051]!	; 0xfffff7fd
     e88:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
     e8c:	20340301 	eorscs	r0, r4, r1, lsl #6
     e90:	a0030905 	andge	r0, r3, r5, lsl #18
     e94:	04053c7f 	streq	r3, [r5], #-3199	; 0xfffff381
     e98:	05200b03 	streq	r0, [r0, #-2819]!	; 0xfffff4fd
     e9c:	0e052108 	adfeqs	f2, f5, #0.0
     ea0:	052e7403 	streq	r7, [lr, #-1027]!	; 0xfffffbfd
     ea4:	0b030604 	bleq	c26bc <__ccfg+0xa2714>
     ea8:	08054b3c 	stmdaeq	r5, {r2, r3, r4, r5, r8, r9, fp, lr}
     eac:	07050106 	streq	r0, [r5, -r6, lsl #2]
     eb0:	0605052e 	streq	r0, [r5], -lr, lsr #10
				wakeuptm (i);
     eb4:	04054b30 	streq	r4, [r5], #-2864	; 0xfffff4d0
     eb8:	060b0524 	streq	r0, [fp], -r4, lsr #10
		for_all_tasks (i) {
     ebc:	054a2403 	strbeq	r2, [sl, #-1027]	; 0xfffffbfd
				d = i->Timer - znew;
     ec0:	21062d04 	tstcs	r6, r4, lsl #26
     ec4:	01060b05 	tsteq	r6, r5, lsl #22
     ec8:	03060505 	movweq	r0, #25861	; 0x6505
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	0805206e 	stmdaeq	r5, {r1, r2, r3, r5, r6, sp}
     ed0:	05053006 	streq	r3, [r5, #-6]
     ed4:	132f061e 			; <UNDEFINED> instruction: 0x132f061e
	__pi_old = znew;
     ed8:	050e0a05 	streq	r0, [lr, #-2565]	; 0xfffff5fb
}
     edc:	05200612 	streq	r0, [r0, #-1554]!	; 0xfffff9ee
	TCI_RUN_DELAY_TIMER;
     ee0:	04052e0f 	streq	r2, [r5], #-3599	; 0xfffff1f1
}
     ee4:	07053506 	streq	r3, [r5, -r6, lsl #10]
     ee8:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     eec:	054b3406 	strbeq	r3, [fp, #-1030]	; 0xfffffbfa
     ef0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
     ef4:	05052e07 	streq	r2, [r5, #-3591]	; 0xfffff1f9
void proceed (word state) {
     ef8:	054b2f06 	strbeq	r2, [fp, #-3846]	; 0xfffff0fa
	prcdstate (__pi_curr, state);
     efc:	4d030609 	stcmi	6, cr0, [r3, #-36]	; 0xffffffdc
     f00:	03040520 	movweq	r0, #17696	; 0x4520
	release;
     f04:	08052030 	stmdaeq	r5, {r4, r5, sp}
     f08:	03050521 	movweq	r0, #21793	; 0x5521
void __pi_wait (aword event, word state) {
     f0c:	04052e74 	streq	r2, [r5], #-3700	; 0xfffff18c
	sint j = nevents (__pi_curr);
     f10:	3c110306 	ldccc	3, cr0, [r1], {6}
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	060b055e 			; <UNDEFINED> instruction: 0x060b055e
     f18:	1f04053d 	svcne	0x0004053d
     f1c:	0b052f06 	bleq	14cb3c <__ccfg+0x12cb94>
		syserror (ENEVENTS, "sw");
     f20:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     f24:	07052506 	streq	r2, [r5, -r6, lsl #10]
	setestate (__pi_curr->Events [j], state, event);
     f28:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
	incwait (__pi_curr);
     f2c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
	setestate (__pi_curr->Events [j], state, event);
     f30:	08050106 	stmdaeq	r5, {r1, r2, r8}
}
     f34:	0605054a 	streq	r0, [r5], -sl, asr #10
     f38:	06040531 			; <UNDEFINED> instruction: 0x06040531
     f3c:	062e1603 	strteq	r1, [lr], -r3, lsl #12
void __pi_trigger (aword event) {
     f40:	052e6d03 	streq	r6, [lr, #-3331]!	; 0xfffff2fd
	for_all_tasks (i) {
     f44:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
		for (j = 0; j < nevents (i); j++) {
     f48:	052f0605 	streq	r0, [pc, #-1541]!	; 94b <system_init+0x73>
     f4c:	7f880302 	svcvc	0x00880302
     f50:	06100501 	ldreq	r0, [r0], -r1, lsl #10
     f54:	030c0501 	movweq	r0, #50433	; 0xc501
			if (i->Events [j] . Event == event) {
     f58:	052000f9 	streq	r0, [r0, #-249]!	; 0xffffff07
     f5c:	05051f13 	streq	r1, [r5, #-3859]	; 0xfffff0ed
     f60:	0c052f06 	stceq	15, cr2, [r5], {6}
				wakeupev (i, j);
     f64:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
     f68:	20110306 	andscs	r0, r1, r6, lsl #6
	for_all_tasks (i) {
     f6c:	01001202 	tsteq	r0, r2, lsl #4
}
     f70:	002b0501 	eoreq	r0, fp, r1, lsl #10
aword __pi_join (aword pid, word st) {
     f74:	00000205 	andeq	r0, r0, r5, lsl #4
	for_all_tasks (i) {
     f78:	ea030000 	b	c0f80 <__ccfg+0xa0fd8>
     f7c:	02050105 	andeq	r0, r5, #1073741825	; 0x40000001
	return 0;
     f80:	06010514 			; <UNDEFINED> instruction: 0x06010514
		if ((aword)i == pid) {
     f84:	00060213 	andeq	r0, r6, r3, lsl r2
			__pi_wait (pid, st);
     f88:	19050101 	stmdbne	r5, {r0, r8}
}
     f8c:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
	for_all_tasks (i) {
     f90:	03000006 	movweq	r0, #6
     f94:	05010781 	streq	r0, [r1, #-1921]	; 0xfffff87f
void delay (word d, word state) {
     f98:	06041402 	streq	r1, [r4], -r2, lsl #8
	settstate (__pi_curr, state);
     f9c:	12032405 	andne	r2, r3, #83886080	; 0x5000000
     fa0:	17050501 	strne	r0, [r5, -r1, lsl #10]
     fa4:	01062205 	tsteq	r6, r5, lsl #4
     fa8:	19050104 	stmdbne	r5, {r2, r8}
	update_n_wake (d, YES);
     fac:	042e6703 	strteq	r6, [lr], #-1795	; 0xfffff8fd
     fb0:	03220506 			; <UNDEFINED> instruction: 0x03220506
	__pi_curr->Timer = __pi_old + d;
     fb4:	01042019 	tsteq	r4, r9, lsl r0
     fb8:	6b030605 	blvs	c27d4 <__ccfg+0xa282c>
	inctimer (__pi_curr);
     fbc:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
     fc0:	20150322 	andscs	r0, r5, r2, lsr #6
     fc4:	02050104 	andeq	r0, r5, #4, 2
}
     fc8:	206b0306 	rsbcs	r0, fp, r6, lsl #6
     fcc:	01060605 	tsteq	r6, r5, lsl #12
	if (fun == NULL)
     fd0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
		return (int) __pi_curr;
     fd4:	1c052e29 	stcne	14, cr2, [r5], {41}	; 0x29
     fd8:	0603052e 	streq	r0, [r3], -lr, lsr #10
	for_all_tasks (i)
     fdc:	58014b2f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8, r9, fp, lr}
}
     fe0:	01010113 	tsteq	r1, r3, lsl r1
		if (i->code == fun)
     fe4:	0620062e 	strteq	r0, [r0], -lr, lsr #12
	for_all_tasks (i)
     fe8:	4a662e66 	bmi	198c988 <__ccfg+0x196c9e0>
     fec:	02052e01 	andeq	r2, r5, #1, 28
     ff0:	06060515 			; <UNDEFINED> instruction: 0x06060515
int __pi_strlen (const char *s) {
     ff4:	20050501 	andcs	r0, r5, r1, lsl #10
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
}
     ffc:	03052e18 	movweq	r2, #24088	; 0x5e18
	for (i = 0; *(s+i) != '\0'; i++);
    1000:	14062f06 	strne	r2, [r6], #-3846	; 0xfffff0fa
	while (n--)
    1004:	014b062c 	cmpeq	fp, ip, lsr #12
    1008:	01011358 	tsteq	r1, r8, asr r3
		*dest++ = *src++;
    100c:	20062e01 	andcs	r2, r6, r1, lsl #28
    1010:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    1014:	0105014a 	tsteq	r5, sl, asr #2
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	0b023206 	bleq	8d838 <__ccfg+0x6d890>
		syserror (EREQPAR, "addv");
    101c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
		syserror (ERESOURCE, "addv");
    1020:	02050021 	andeq	r0, r5, #33	; 0x21
	if (ioreq [loc] != NULL)
    1024:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
    1028:	0107d903 	tsteq	r7, r3, lsl #18
		syserror (ERESOURCE, "addv");
    102c:	13140205 	tstne	r4, #1342177280	; 0x50000000
	ioreq [loc] = rf;
    1030:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
}
    1034:	78fe0303 	ldmvc	lr!, {r0, r1, r8, r9}^
    1038:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	fd030621 	stc2	6, cr0, [r3, #-132]	; 0xffffff7c
    1040:	03040106 	movweq	r0, #16646	; 0x4106
    1044:	83030305 	movwhi	r0, #13061	; 0x3305
    1048:	01042079 	tsteq	r4, r9, ror r0
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	03060205 	movweq	r0, #25093	; 0x6205
    1050:	05200783 	streq	r0, [r0, #-1923]!	; 0xfffff87d
    1054:	0305010e 	movweq	r0, #20750	; 0x510e
		syserror (ENODEVICE, "io");
    1058:	05040413 	streq	r0, [r4, #-1043]	; 0xfffffbed
    105c:	ad030633 	stcge	6, cr0, [r3, #-204]	; 0xffffff34
	if (len == 0)
    1060:	0104017d 	tsteq	r4, sp, ror r1
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	d3030805 	movwle	r0, #14341	; 0x3805
    1068:	04042002 	streq	r2, [r4], #-2
	if (ret >= 0)
    106c:	ad032d05 	stcge	13, cr2, [r3, #-20]	; 0xffffffec
	if (ret == -1) {
    1070:	0104207d 	tsteq	r4, sp, ror r0
    1074:	d3030805 	movwle	r0, #14341	; 0x3805
		if (retry == WNONE)
    1078:	03052002 	movweq	r2, #20482	; 0x5002
		iowait (dev, operation, retry);
    107c:	1e080522 	cfsh32ne	mvfx0, mvfx8, #18
    1080:	21060305 	tstcs	r6, r5, lsl #6
    1084:	29050404 	stmdbcs	r5, {r2, sl}
			release;
    1088:	017da703 	cmneq	sp, r3, lsl #14
	if (ret == -2) {
    108c:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
		if (retry != WNONE) {
    1090:	05010633 	streq	r0, [r1, #-1587]	; 0xfffff9cd
    1094:	01042e2d 	tsteq	r4, sp, lsr #28
			iowait (dev, operation, retry);
    1098:	03060305 	movweq	r0, #25349	; 0x6305
    109c:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
			(ioreq [dev]) (NONE, buf, len);
    10a0:	051e0608 	ldreq	r0, [lr, #-1544]	; 0xfffff9f8
    10a4:	08052203 	stmdaeq	r5, {r0, r1, r9, sp}
    10a8:	0504042c 	streq	r0, [r4, #-1068]	; 0xfffffbd4
		(ioreq [dev]) (NONE, buf, len);
    10ac:	7dad0333 	stcvc	3, cr0, [sp, #204]!	; 0xcc
    10b0:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    10b4:	02d50303 	sbcseq	r0, r5, #201326592	; 0xc000000
}
    10b8:	58410520 	stmdapl	r1, {r5, r8, sl}^
	if (retry != WNONE) {
    10bc:	1d061d05 	stcne	13, cr1, [r6, #-20]	; 0xffffffec
		delay (-ret - 2, retry);
    10c0:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    10c4:	04131303 	ldreq	r1, [r3], #-771	; 0xfffffcfd
    10c8:	03290504 			; <UNDEFINED> instruction: 0x03290504
    10cc:	05017da7 	streq	r7, [r1, #-3495]	; 0xfffff259
		release;
    10d0:	2d051705 	stccs	7, cr1, [r5, #-20]	; 0xffffffec
    10d4:	01040106 	tsteq	r4, r6, lsl #2
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	03060305 	movweq	r0, #25349	; 0x6305
    10dc:	052002d5 	streq	r0, [r0, #-725]!	; 0xfffffd2b
    10e0:	05010641 	streq	r0, [r1, #-1601]	; 0xfffff9bf
    10e4:	051d061d 	ldreq	r0, [sp, #-1565]	; 0xfffff9e3
    10e8:	0205010e 	andeq	r0, r5, #-2147483645	; 0x80000003
		syserror (ERESOURCE, "mal1");
    10ec:	05030418 	streq	r0, [r3, #-1048]	; 0xfffffbe8
    10f0:	78ec0303 	stmiavc	ip!, {r0, r1, r8, r9}^
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    10f8:	95030601 	strls	r0, [r3, #-1537]	; 0xfffff9ff
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fc:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
	m_size (mpools [0]) = mlen - m_hdrlen;
    1100:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1104:	02050021 	andeq	r0, r5, #33	; 0x21
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1108:	000007f8 	strdeq	r0, [r0], -r8
    110c:	0107ec03 	tsteq	r7, r3, lsl #24
}
    1110:	13140205 	tstne	r4, #1342177280	; 0x50000000
    1114:	05030414 	streq	r0, [r3, #-1044]	; 0xfffffbec
    1118:	78eb0303 	stmiavc	fp!, {r0, r1, r8, r9}^
    111c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1120:	90030621 	andls	r0, r3, r1, lsr #12
    1124:	03040107 	movweq	r0, #16647	; 0x4107
void __pi_free (aword *ch) {
    1128:	f0030305 			; <UNDEFINED> instruction: 0xf0030305
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    112c:	01042078 	tsteq	r4, r8, ror r0
    1130:	03060205 	movweq	r0, #25093	; 0x6205
		syserror (EMALLOC, "malg");
    1134:	05200796 	streq	r0, [r0, #-1942]!	; 0xfffff86a
    1138:	0905010e 	stmdbeq	r5, {r1, r2, r3, r8}
	mcfree [MA_NP] += m_size (ch);
    113c:	04040106 	streq	r0, [r4], #-262	; 0xfffffefa
		m_size (ch) ^= MALLOC_UMASK;
    1140:	9b033305 	blls	cdd5c <__ccfg+0xaddb4>
    1144:	0104207d 	tsteq	r4, sp, ror r0
	mcfree [MA_NP] += m_size (ch);
    1148:	e6030805 	str	r0, [r3], -r5, lsl #16
	QFREE;
    114c:	04042002 	streq	r2, [r4], #-2
	if (mevent [MA_NP] . nwait) {
    1150:	9a032d05 	bls	cc56c <__ccfg+0xac5c4>
    1154:	0104207d 	tsteq	r4, sp, ror r0
		trigger ((aword)(&(mevent [MA_NP])));
    1158:	e8030305 	stmda	r3, {r0, r2, r8, r9}
		mevent [MA_NP] . nwait --;
    115c:	1e062002 	cdpne	0, 0, cr2, cr6, cr2, {0}
}
    1160:	01060805 	tsteq	r6, r5, lsl #16
    1164:	051f1e05 	ldreq	r1, [pc, #-3589]	; 367 <__pi_syserror+0x2f>
    1168:	03052106 	movweq	r2, #20742	; 0x5106
    116c:	04042f06 	streq	r2, [r4], #-3846	; 0xfffff0fa
void kill (aword pid) {
    1170:	94032905 	strls	r2, [r3], #-2309	; 0xfffff6fb
		pid = (aword) __pi_curr;
    1174:	0505017d 	streq	r0, [r5, #-381]	; 0xfffffe83
	j = NULL;
    1178:	06330517 			; <UNDEFINED> instruction: 0x06330517
	for_all_tasks (i) {
    117c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	syserror (EREQPAR, "kpi");
    1180:	02e80303 	rsceq	r0, r8, #201326592	; 0xc000000
    1184:	4702052e 	strmi	r0, [r2, -lr, lsr #10]
		if ((aword)i == pid) {
    1188:	2d050404 	cfstrscs	mvf0, [r5, #-16]
    118c:	207d9b03 	rsbscs	r9, sp, r3, lsl #22
				__PCB = i->Next;
    1190:	03050104 	movweq	r0, #20740	; 0x5104
			killev (i);
    1194:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
			ufree (i);
    1198:	06410520 	strbeq	r0, [r1], -r0, lsr #10
			if (i == __pi_curr)
    119c:	061d0501 	ldreq	r0, [sp], -r1, lsl #10
    11a0:	010e051d 	tsteq	lr, sp, lsl r5
				release;
    11a4:	01060205 	tsteq	r6, r5, lsl #4
				j->Next = i->Next;
    11a8:	03042606 	movweq	r2, #17926	; 0x4606
    11ac:	d9030305 	stmdble	r3, {r0, r2, r8, r9}
    11b0:	01040178 	tsteq	r4, r8, ror r1
}
    11b4:	03060105 	movweq	r0, #24837	; 0x6105
    11b8:	022007a8 	eoreq	r0, r0, #168, 14	; 0x2a00000
    11bc:	01010008 	tsteq	r1, r8
	if (size < 8)
    11c0:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
		_size = 2;
    11c4:	00083402 	andeq	r3, r8, r2, lsl #8
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c8:	07c50300 	strbeq	r0, [r5, r0, lsl #6]
		_size = (((aword)size) + 3) >> 2;
    11cc:	05070401 	streq	r0, [r7, #-1025]	; 0xfffffbff
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d0:	78bb0301 	ldmvc	fp!, {r0, r8, r9}
		_size = (((aword)size) + 3) >> 2;
    11d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		if (mevent [MA_NP] . nfail != 255)
    11d8:	c5030618 	strgt	r0, [r3, #-1560]	; 0xfffff9e8
    11dc:	07040107 	streq	r0, [r4, -r7, lsl #2]
			mevent [MA_NP] . nfail ++;
    11e0:	bb030505 	bllt	c25fc <__ccfg+0xa2654>
		mnfree [MA_NP] = 0;
    11e4:	04052078 	streq	r2, [r5], #-120	; 0xffffff88
    11e8:	0602052e 	streq	r0, [r2], -lr, lsr #10
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	01013d3d 	tsteq	r1, sp, lsr sp
    11f0:	20063c01 	andcs	r3, r6, r1, lsl #24
			syserror (EMALLOC, "malc");
    11f4:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
    11f8:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
		if (m_size (chunk) >= _size)
    11fc:	08045801 	stmdaeq	r4, {r0, fp, ip, lr}
    1200:	050f0105 	streq	r0, [pc, #-261]	; 1103 <__pi_malloc_init+0x2b>
		chunk = m_nextp (chunk)) {
    1204:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
		m_setnextp (cc, m_nextp (chunk));
    1208:	02052004 	andeq	r2, r5, #4
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120c:	01013d06 	tsteq	r1, r6, lsl #26
    1210:	20063c01 	andcs	r3, r6, r1, lsl #24
			m_size (chunk) = _size;
    1214:	582e6606 	stmdapl	lr!, {r1, r2, r9, sl, sp, lr}
			cc = chunk + _size + m_hdrlen;
    1218:	132e014a 			; <UNDEFINED> instruction: 0x132e014a
    121c:	0458012f 	ldrbeq	r0, [r8], #-303	; 0xfffffed1
			m_size (cc) = waste - m_hdrlen;
    1220:	06010501 	streq	r0, [r1], -r1, lsl #10
			QFREE;
    1224:	0107d003 	tsteq	r7, r3
		mevent [MA_NP] . nfail = 0;
    1228:	01000b02 	tsteq	r0, r2, lsl #22
		mcfree [MA_NP] -= m_size (chunk);
    122c:	00150501 	andseq	r0, r5, r1, lsl #10
    1230:	08d80205 	ldmeq	r8, {r0, r2, r9}^
    1234:	80030000 	andhi	r0, r3, r0
    1238:	02050108 	andeq	r0, r5, #8, 2
		m_size (chunk) |= MALLOC_UMASK;
    123c:	06150514 			; <UNDEFINED> instruction: 0x06150514
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1240:	32020510 	andcc	r0, r2, #16, 10	; 0x4000000
		m_size (chunk) |= MALLOC_UMASK;
    1244:	593e061e 	ldmdbpl	lr!, {r1, r2, r3, r4, r9, sl}
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	09045959 	stmdbeq	r4, {r0, r3, r4, r6, r8, fp, ip, lr}
}
    124c:	a7030505 	strge	r0, [r3, -r5, lsl #10]
    1250:	3105017c 	tstcc	r5, ip, ror r1
    1254:	01040106 	tsteq	r4, r6, lsl #2
    1258:	c5030b05 	strgt	r0, [r3, #-2821]	; 0xfffff4fb
    125c:	0904207d 	stmdbeq	r4, {r0, r2, r3, r4, r5, r6, sp}
    1260:	bb033105 	bllt	cd67c <__ccfg+0xad6d4>
    1264:	01042002 	tsteq	r4, r2
aword __pi_fork (fsmcode func, aword data) {
    1268:	c8033205 	stmdagt	r3, {r0, r2, r9, ip, sp}
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	04042e7d 	streq	r2, [r4], #-3709	; 0xfffff183
    1270:	9b030505 	blls	c268c <__ccfg+0xa26e4>
    1274:	2d052e02 	stccs	14, cr2, [r5, #-8]
		if ((j = __PCB) == NULL)
    1278:	2e7ecc03 	cdpcs	12, 7, cr12, cr14, cr3, {0}
	i->Next = NULL;
    127c:	042e4a03 	strteq	r4, [lr], #-2563	; 0xfffff5fd
	i->data = data;
    1280:	03310509 	teqeq	r1, #37748736	; 0x2400000
		if ((j = __PCB) == NULL)
    1284:	042e0287 	strteq	r0, [lr], #-647	; 0xfffffd79
}
    1288:	06020501 	streq	r0, [r2], -r1, lsl #10
			for (; j->Next != NULL; j = j->Next);
    128c:	2003dc03 	andcs	sp, r3, r3, lsl #24
    1290:	0179e703 	cmneq	r9, r3, lsl #14
	return (aword) i;
    1294:	01070514 	tsteq	r7, r4, lsl r5
    1298:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
	if (mevent [MA_NP] . nwait != 255)
    129c:	15051403 	strne	r1, [r5, #-1027]	; 0xfffffbfd
    12a0:	3d050106 	stfccs	f0, [r5, #-24]	; 0xffffffe8
    12a4:	2207052c 	andcs	r0, r7, #44, 10	; 0xb000000
		mevent [MA_NP] . nwait ++;
    12a8:	2f060305 	svccs	0x00060305
	wait ((aword)(&(mevent [MA_NP])), state);
    12ac:	58063205 	stmdapl	r6, {r0, r2, r9, ip, sp}
    12b0:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
void diag (const char *mess, ...) {
    12b4:	052f0603 	streq	r0, [pc, #-1539]!	; cb9 <__pi_release+0x229>
    12b8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    12bc:	04220604 	strteq	r0, [r2], #-1540	; 0xfffff9fc
	diag_disable_int (a, is);
    12c0:	03290504 			; <UNDEFINED> instruction: 0x03290504
    12c4:	05010291 	streq	r0, [r1, #-657]	; 0xfffffd6f
    12c8:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
				d = (bc == 16) ? 10000 : 1000000000;
    12cc:	06380517 			; <UNDEFINED> instruction: 0x06380517
	diag_disable_int (a, is);
    12d0:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
	while (*mess != '\0') {
    12d4:	e9030603 	stmdb	r3, {r0, r1, r9, sl}
	dgout ('\r');
    12d8:	0605207d 			; <UNDEFINED> instruction: 0x0605207d
	dgout ('\n');
    12dc:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    12e0:	04042106 	streq	r2, [r4], #-262	; 0xfffffefa
    12e4:	27032905 	strcs	r2, [r3, -r5, lsl #18]
	diag_wait (a);
    12e8:	17050501 	strne	r0, [r5, -r1, lsl #10]
	diag_enable_int (a, is);
    12ec:	01062d05 	tsteq	r6, r5, lsl #26
    12f0:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
}
    12f4:	3c560306 	mrrccc	3, 0, r0, r6, cr6
    12f8:	29050404 	stmdbcs	r5, {r2, sl}
    12fc:	0100db03 	tsteq	r0, r3, lsl #22
		if (*mess == '%') {
    1300:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    1304:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
			if (*mess == 'l') {
    1308:	063c0501 	ldrteq	r0, [ip], -r1, lsl #10
    130c:	2e7f9603 	cdpcs	6, 7, cr9, cr15, cr3, {0}
				mess++;
    1310:	05011205 	streq	r1, [r1, #-517]	; 0xfffffdfb
				val = va_arg (ap, lword);
    1314:	06010602 	streq	r0, [r1], -r2, lsl #12
				bc = 32;
    1318:	2e069a03 	vmlacs.f32	s18, s12, s6
				bc = 16;
    131c:	04040101 	streq	r0, [r4], #-257	; 0xfffffeff
			switch (*mess) {
    1320:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
    1324:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
    1328:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
				dgout ('%');
    132c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1330:	05e60302 	strbeq	r0, [r6, #770]!	; 0x302
				dgout (*mess);
    1334:	0504043c 	streq	r0, [r4, #-1084]	; 0xfffffbc4
    1338:	7a9a032d 	bvc	fe681ff4 <_estack+0xde67cff4>
			switch (*mess) {
    133c:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
					v = __pi_hex_enc_table [
    1340:	e6030602 	str	r0, [r3], -r2, lsl #12
					i += 4;
    1344:	04042005 	streq	r2, [r4], #-5
					(val >> (bc - i)) & 0xf];
    1348:	95032905 	strls	r2, [r3, #-2309]	; 0xfffff6fb
    134c:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
					dgout (v);
    1350:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    1354:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				while (i < bc) {
    1358:	e6030602 	str	r0, [r3], -r2, lsl #12
			mess++;
    135c:	01012005 	tsteq	r1, r5
					d /= 10;
    1360:	01010101 	tsteq	r1, r1, lsl #2
				if ((val >> (bc - 1)) & 1) {
    1364:	012e0166 			; <UNDEFINED> instruction: 0x012e0166
    1368:	29050404 	stmdbcs	r5, {r2, sl}
					dgout ('-');
    136c:	017acb03 	cmneq	sl, r3, lsl #22
    1370:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
						val |= 0xffff0000;
    1374:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    1378:	03020501 	movweq	r0, #9473	; 0x2501
    137c:	042005b0 	strteq	r0, [r0], #-1456	; 0xfffffa50
				d = (bc == 16) ? 10000 : 1000000000;
    1380:	032d0504 			; <UNDEFINED> instruction: 0x032d0504
    1384:	04207ad0 	strteq	r7, [r0], #-2768	; 0xfffff530
    1388:	06020501 	streq	r0, [r2], -r1, lsl #10
					v = (word) (val / d);
    138c:	2005b003 	andcs	fp, r5, r3
					if (v || d == 1) break;
    1390:	29050404 	stmdbcs	r5, {r2, sl}
    1394:	017acb03 	cmneq	sl, r3, lsl #22
					d /= 10;
    1398:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
				d = (bc == 16) ? 10000 : 1000000000;
    139c:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
					dgout (v + '0');
    13a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    13a4:	2005b003 	andcs	fp, r5, r3
    13a8:	01010101 	tsteq	r1, r1, lsl #2
					d /= 10;
    13ac:	23050101 	movwcs	r0, #20737	; 0x5101
					val = val - (v * d);
    13b0:	01100306 	tsteq	r0, r6, lsl #6
					if (d == 0) break;
    13b4:	70030205 	andvc	r0, r3, r5, lsl #4
					v = (word) (val / d);
    13b8:	01580620 	cmpeq	r8, r0, lsr #12
    13bc:	010d032e 	tsteq	sp, lr, lsr #6
				if (bc == 16)
    13c0:	05050a04 	streq	r0, [r5, #-2564]	; 0xfffff5fc
				d = (bc == 16) ? 10000 : 1000000000;
    13c4:	017ecd03 	cmneq	lr, r3, lsl #26
					val &= 0xffff;
    13c8:	01062f05 	tsteq	r6, r5, lsl #30
					dgout (*s);
    13cc:	27050104 	strcs	r0, [r5, -r4, lsl #2]
					s++;
    13d0:	2001ba03 	andcs	fp, r1, r3, lsl #20
				while (*s != '\0') {
    13d4:	2f050a04 	svccs	0x00050a04
    13d8:	207ec603 	rsbscs	ip, lr, r3, lsl #12
			dgout (*mess++);
    13dc:	02050104 	andeq	r0, r5, #4, 2
    13e0:	01b50306 			; <UNDEFINED> instruction: 0x01b50306
    13e4:	06230520 	strteq	r0, [r3], -r0, lsr #10
    13e8:	03020513 	movweq	r0, #9491	; 0x2513
    13ec:	2305200c 	movwcs	r2, #20492	; 0x500c
}
    13f0:	05207403 	streq	r7, [r0, #-1027]!	; 0xfffffbfd
    while(1)
    13f4:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
{
    13f8:	05010627 	streq	r0, [r1, #-1575]	; 0xfffff9d9
    SetupTrimDevice();
    13fc:	27052802 	strcs	r2, [r5, -r2, lsl #16]
    pui32Src = &_etext;
    1400:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1404:	3f280602 	svccc	0x00280602
    __asm("    ldr     r0, =_bss\n"
    1408:	4a0a0331 	bmi	2820d4 <__ccfg+0x26212c>
    140c:	7dc00340 	stclvc	3, cr0, [r0, #256]	; 0x100
    1410:	59595901 	ldmdbpl	r9, {r0, r8, fp, ip, lr}^
    1414:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    1418:	017eae03 	cmneq	lr, r3, lsl #28
   main();
    141c:	0d050104 	stfeqs	f0, [r5, #-16]
    FaultISR();
    1420:	01d40306 	bicseq	r0, r4, r6, lsl #6
        *pui32Dest++ = *pui32Src++;
    1424:	05090401 	streq	r0, [r9, #-1025]	; 0xfffffbff
    1428:	7eac0331 	mcrvc	3, 5, r0, cr12, cr1, {1}
    142c:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    1430:	d4030602 	strle	r0, [r3], #-1538	; 0xfffff9fe
    1434:	0d052001 	stceq	0, cr2, [r5, #-4]
    1438:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    143c:	c7032206 	strgt	r2, [r3, -r6, lsl #4]
    1440:	2e012e02 	cdpcs	14, 0, cr2, cr1, cr2, {0}
static byte get_byte () {
    1444:	0605152e 	streq	r1, [r5], -lr, lsr #10
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1448:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    144c:	0603052e 	streq	r0, [r3], -lr, lsr #10
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1450:	050b0430 	streq	r0, [fp, #-1072]	; 0xfffffbd0
    1454:	79c30305 	stmibvc	r3, {r0, r2, r8, r9}^
		if (ee_inp)
    1458:	030c0401 	movweq	r0, #50177	; 0xc401
			b |= 1;
    145c:	2e05015e 	mcrcs	1, 0, r0, cr5, cr14, {2}
    1460:	0b040106 	bleq	101880 <__ccfg+0xe18d8>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1464:	03060505 	movweq	r0, #25861	; 0x6505
	for (b = 0, i = 0; i < 8; i++) {
    1468:	34052e23 	strcc	r2, [r5], #-3619	; 0xfffff1dd
}
    146c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1470:	01044b06 	tsteq	r4, r6, lsl #22
    1474:	d5031505 	strle	r1, [r3, #-1285]	; 0xfffffafb
static void put_byte (byte b) {
    1478:	03054a06 	movweq	r4, #23046	; 0x5a06
    147c:	13040513 	movwne	r0, #17683	; 0x4513
    1480:	053a1505 	ldreq	r1, [sl, #-1285]!	; 0xfffffafb
    1484:	cb031902 	blgt	c7894 <__ccfg+0xa78ec>
		if (b & 0x80)
    1488:	0604017e 			; <UNDEFINED> instruction: 0x0604017e
    148c:	d4032405 	strle	r2, [r3], #-1029	; 0xfffffbfb
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1490:	0505017e 	streq	r0, [r5, #-382]	; 0xfffffe82
	for (i = 0; i < 8; i++) {
    1494:	06230517 			; <UNDEFINED> instruction: 0x06230517
		b <<= 1;
    1498:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	for (i = 0; i < 8; i++) {
    149c:	02dd0302 	sbcseq	r0, sp, #134217728	; 0x8000000
}
    14a0:	05060420 	streq	r0, [r6, #-1056]	; 0xfffffbe0
    14a4:	7da30323 	stcvc	3, cr0, [r3, #140]!	; 0x8c
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14a8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    14ac:	dd030602 	stcle	6, cr0, [r3, #-8]
	put_byte (cmd);
    14b0:	054e4a02 	strbeq	r4, [lr, #-2562]	; 0xfffff5fe
    14b4:	05130601 	ldreq	r0, [r3, #-1537]	; 0xfffff9ff
}
    14b8:	03052d02 	movweq	r2, #23810	; 0x5d02
    14bc:	2e5f0306 	cdpcs	3, 5, cr0, cr15, cr6, {0}
static void wwait (word st, word del) {
    14c0:	04054141 	streq	r4, [r5], #-321	; 0xfffffebf
    14c4:	03051306 	movweq	r1, #21254	; 0x5306
    14c8:	002f021f 	eoreq	r0, pc, pc, lsl r2	; <UNPREDICTABLE>
	while (dopen && (rdsr () & 1)) {
    14cc:	1f050101 	svcne	0x00050101
    14d0:	00020500 	andeq	r0, r2, r0, lsl #10
    14d4:	03000000 	movweq	r0, #0
    14d8:	050108fd 	streq	r0, [r1, #-2301]	; 0xfffff703
	put_byte (CMD_RDSR);
    14dc:	05161702 	ldreq	r1, [r6, #-1794]	; 0xfffff8fe
	r = get_byte ();
    14e0:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    14e4:	2c056615 	stccs	6, cr6, [r5], {21}
	while (dopen && (rdsr () & 1)) {
    14e8:	20150520 	andscs	r0, r5, r0, lsr #10
}
    14ec:	05211205 	streq	r1, [r1, #-517]!	; 0xfffffdfb
		if (st == WNONE)
    14f0:	054a1f15 	strbeq	r1, [sl, #-3861]	; 0xfffff0eb
    14f4:	03022301 	movweq	r2, #8961	; 0x2301
			mdelay (1);
    14f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    14fc:	0205001c 	andeq	r0, r5, #28
			delay (del, st);
    1500:	00000000 	andeq	r0, r0, r0
    1504:	010adb03 	tsteq	sl, r3, lsl #22
			release;
    1508:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    150c:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
    1510:	050e061c 	streq	r0, [lr, #-1564]	; 0xfffff9e4
static void ready () {
    1514:	07052506 	streq	r2, [r5, -r6, lsl #10]
	if (dopen) {
    1518:	58060520 	stmdapl	r6, {r5, r8, sl}
		wwait (WNONE, 1);
    151c:	2e060305 	cdpcs	3, 0, cr0, cr6, cr5, {0}
    1520:	01060605 	tsteq	r6, r5, lsl #12
    1524:	2d063105 	stfcss	f3, [r6, #-20]	; 0xffffffec
	dstat = 0;
    1528:	05010f05 	streq	r0, [r1, #-3845]	; 0xfffff0fb
}
    152c:	06200602 	strteq	r0, [r0], -r2, lsl #12
    1530:	0601054d 	streq	r0, [r1], -sp, asr #10
    1534:	00040213 	andeq	r0, r4, r3, lsl r2
	udelay (1);
    1538:	31050101 	tstcc	r5, r1, lsl #2
    153c:	90020500 	andls	r0, r2, r0, lsl #10
	udelay (1);
    1540:	0300000a 	movweq	r0, #10
		dopen = DOPEN_TEMP;
    1544:	05010ae7 	streq	r0, [r1, #-2791]	; 0xfffff519
    1548:	03041402 	movweq	r1, #17410	; 0x4402
    154c:	b2030305 	andlt	r0, r3, #335544320	; 0x14000000
    1550:	01040177 	tsteq	r4, r7, ror r1
static void cclose () {
    1554:	03063105 	movweq	r3, #24837	; 0x6105
	if (dopen == DOPEN_TEMP) {
    1558:	040108cc 	streq	r0, [r1], #-2252	; 0xfffff734
    155c:	03030503 	movweq	r0, #13571	; 0x3503
		wwait (WNONE, 1);
    1560:	043c77b4 	ldrteq	r7, [ip], #-1972	; 0xfffff84c
    1564:	03310501 	teqeq	r1, #4194304	; 0x400000
	cmd_0 (CMD_DP);
    1568:	042008cc 	strteq	r0, [r0], #-2252	; 0xfffff734
    156c:	03030503 	movweq	r0, #13571	; 0x3503
		dopen = 0;
    1570:	042077b4 	strteq	r7, [r0], #-1972	; 0xfffff84c
}
    1574:	06020501 	streq	r0, [r2], -r1, lsl #10
word ee_open () {
    1578:	2e08d003 	cdpcs	0, 0, cr13, cr8, cr3, {0}
	ready ();
    157c:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
	dopen = DOPEN_PERM;
    1580:	dd030605 	stcle	6, cr0, [r3, #-20]	; 0xffffffec
    1584:	01046676 	tsteq	r4, r6, ror r6
}
    1588:	03060205 	movweq	r0, #25093	; 0x6205
	if (dopen) {
    158c:	042009a3 	strteq	r0, [r0], #-2467	; 0xfffff65d
    1590:	759b030d 	ldrvc	r0, [fp, #781]	; 0x30d
		dopen = DOPEN_TEMP;
    1594:	19010101 	stmdbne	r1, {r0, r8}
		cclose ();
    1598:	01044a5b 	tsteq	r4, fp, asr sl
}
    159c:	03061a05 	movweq	r1, #27141	; 0x6a05
int ser_in (word st, char *buf, int len) {
    15a0:	042e099d 	strteq	r0, [lr], #-2461	; 0xfffff663
    15a4:	0602050d 	streq	r0, [r2], -sp, lsl #10
	if (len == 0)
    15a8:	2076f903 	rsbscs	pc, r6, r3, lsl #18
	if (__inpline == NULL) {
    15ac:	01010101 	tsteq	r1, r1, lsl #2
		if ((prcs = running (__inserial)) == 0) {
    15b0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    15b4:	01360303 	teqeq	r6, r3, lsl #6
			prcs = runthread (__inserial);
    15b8:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
    15bc:	82204a03 	eorhi	r4, r0, #12288	; 0x3000
			if (prcs == 0) {
    15c0:	eb030104 	bl	c19d8 <__ccfg+0xa1a30>
				npwait (st);
    15c4:	15050108 	strne	r0, [r5, #-264]	; 0xfffffef8
		release;
    15c8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		join (prcs, st);
    15cc:	15054c06 	strne	r4, [r5, #-3078]	; 0xfffff3fa
    15d0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
	if (*__inpline == NULL) // bin cmd
    15d4:	20150520 	andscs	r0, r5, r0, lsr #10
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15d8:	05200205 	streq	r0, [r0, #-517]!	; 0xfffffdfb
	if (prcs >= len)
    15dc:	216a0604 	cmncs	sl, r4, lsl #12
		prcs = len-1;
    15e0:	02050d04 	andeq	r0, r5, #4, 26	; 0x100
	memcpy (buf, __inpline, prcs);
    15e4:	01778e03 	cmneq	r7, r3, lsl #28
    15e8:	03050304 	movweq	r0, #21252	; 0x5304
    15ec:	04012b03 	streq	r2, [r1], #-2819	; 0xfffff4fd
	ufree (__inpline);
    15f0:	0302050d 	movweq	r0, #9485	; 0x250d
	__inpline = NULL;
    15f4:	20202055 	eorcs	r2, r0, r5, asr r0
	if (*buf) // if it's NULL, it's a bin cmd
    15f8:	c5030104 	strgt	r0, [r3, #-260]	; 0xfffffefc
		buf [prcs] = '\0';
    15fc:	0d04200a 	stceq	0, cr2, [r4, #-40]	; 0xffffffd8
}
    1600:	a6030305 	strge	r0, [r3], -r5, lsl #6
		prcs = strlen (__inpline);
    1604:	10054a75 	andne	r4, r5, r5, ror sl
    1608:	06050106 	streq	r0, [r5], -r6, lsl #2
		return 0;
    160c:	20230520 	eorcs	r0, r3, r0, lsr #10
    1610:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    1614:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
int ser_outf (word st, const char *m, ...) {
    1618:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    161c:	052f0604 	streq	r0, [pc, #-1540]!	; 1020 <adddevfunc+0x8>
	if ((prcs = running (__outserial)) != 0) {
    1620:	01041c02 	tsteq	r4, r2, lsl #24
    1624:	8f030405 	svchi	0x00030405
		join (prcs, st);
    1628:	2a052e09 	bcs	14ce54 <__ccfg+0x12ceac>
    162c:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
		release;
    1630:	032a0527 			; <UNDEFINED> instruction: 0x032a0527
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1634:	04052079 	streq	r2, [r5], #-121	; 0xffffff87
    1638:	09044e06 	stmdbeq	r4, {r1, r2, r9, sl, fp, lr}
    163c:	017fb203 	cmneq	pc, r3, lsl #4
		umwait (st);
    1640:	01062905 	tsteq	r6, r5, lsl #18
    1644:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
	if (runstrand (__outserial, buf) == 0) {
    1648:	00d10306 	sbcseq	r0, r1, r6, lsl #6
    164c:	02044d66 	andeq	r4, r4, #6528	; 0x1980
    1650:	9f030505 	svcls	0x00030505
		ufree (buf);
    1654:	01040178 	tsteq	r4, r8, ror r1
		npwait (st);
    1658:	e5030405 	str	r0, [r3, #-1029]	; 0xfffffbfb
}
    165c:	1a052007 	bne	149680 <__ccfg+0x1296d8>
    1660:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1664:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
    1668:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
int ser_inf (word st, const char *fmt, ...) {
    166c:	044d0604 	strbeq	r0, [sp], #-1540	; 0xfffff9fc
    1670:	03050502 	movweq	r0, #21762	; 0x5502
	if (fmt == NULL)
    1674:	05017896 	streq	r7, [r1, #-2198]	; 0xfffff76a
	if (__inpline == NULL) {
    1678:	04210601 	strteq	r0, [r1], #-1537	; 0xfffff9ff
		if ((prcs = running (__inserial)) == 0) {
    167c:	06040501 	streq	r0, [r4], -r1, lsl #10
    1680:	2007f103 	andcs	pc, r7, r3, lsl #2
			prcs = runthread (__inserial);
    1684:	05050c04 	streq	r0, [r5, #-3076]	; 0xfffff3fc
    1688:	0178a003 	cmneq	r8, r3
			if (prcs == 0) {
    168c:	31050904 	tstcc	r5, r4, lsl #18
				npwait (st);
    1690:	02d40306 	sbcseq	r0, r4, #402653184	; 0x18000000
		release;
    1694:	050c0401 	streq	r0, [ip, #-1025]	; 0xfffffbff
		join (prcs, st);
    1698:	7dac032e 	stcvc	3, cr0, [ip, #184]!	; 0xb8
    169c:	050e042e 	streq	r0, [lr, #-1070]	; 0xfffffbd2
	va_start (ap, fmt);
    16a0:	02880352 	addeq	r0, r8, #1207959553	; 0x48000001
	prcs = vscan (__inpline, fmt, ap);
    16a4:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    16a8:	7df8032e 	ldclvc	3, cr0, [r8, #184]!	; 0xb8
	ufree (__inpline);
    16ac:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
	__inpline = NULL;
    16b0:	e5030604 	str	r0, [r3, #-1540]	; 0xfffff9fc
}
    16b4:	0e042007 	cdpeq	0, 0, cr2, cr4, cr7, {0}
    16b8:	a0033105 	andge	r3, r3, r5, lsl #2
    16bc:	0505017a 	streq	r0, [r5, #-378]	; 0xfffffe86
		return 0;
    16c0:	06520515 			; <UNDEFINED> instruction: 0x06520515
    16c4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    16c8:	05e50304 	strbeq	r0, [r5, #772]!	; 0x304
strand (__outserial, const char*)
    16cc:	050e0420 	streq	r0, [lr, #-1056]	; 0xfffffbe0
    16d0:	7a9b0352 	bvc	fe6c2420 <_estack+0xde6bd420>
    16d4:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    16d8:	e0030604 	and	r0, r3, r4, lsl #12
endstrand
    16dc:	02042e05 	andeq	r2, r4, #5, 28	; 0x50
    16e0:	86030505 	strhi	r0, [r3], -r5, lsl #10
	ptr = data;
    16e4:	01040178 	tsteq	r4, r8, ror r1
    16e8:	fc030405 	stc2	4, cr0, [r3], {5}
	if (*ptr)
    16ec:	09042007 	stmdbeq	r4, {r0, r1, r2, sp}
		len = strlen (ptr);
    16f0:	ea030505 	b	c2b0c <__ccfg+0xa2b64>
    16f4:	3105017a 	tstcc	r5, sl, ror r1
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16f8:	29050106 	stmdbcs	r5, {r1, r2, r8}
    16fc:	2004b603 	andcs	fp, r4, r3, lsl #12
    1700:	ca033105 	bgt	cdb1c <__ccfg+0xadb74>
    1704:	01042e7b 	tsteq	r4, fp, ror lr
    1708:	03060405 	movweq	r0, #25605	; 0x6405
	len -= quant;
    170c:	052e0599 	streq	r0, [lr, #-1433]!	; 0xfffffa67
    1710:	05010623 	streq	r0, [r1, #-1571]	; 0xfffff9dd
    1714:	6a062004 	bvs	18972c <__ccfg+0x169784>
	if (len == 0) {
    1718:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
		ufree (data);
    171c:	01799f03 	cmneq	r9, r3, lsl #30
		finish;
    1720:	01063f05 	tsteq	r6, r5, lsl #30
    1724:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1728:	2006ed03 	andcs	lr, r6, r3, lsl #26
    172c:	3f050904 	svccc	0x00050904
    1730:	20799303 	rsbscs	r9, r9, r3, lsl #6
    1734:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
    1738:	06ea0306 	strbteq	r0, [sl], r6, lsl #6
strand (__inserial, address)
    173c:	0309042e 	movweq	r0, #37934	; 0x942e
    1740:	05017f90 	streq	r7, [r1, #-3984]	; 0xfffff070
    1744:	04010629 	streq	r0, [r1], #-1577	; 0xfffff9d7
    1748:	03040501 	movweq	r0, #17665	; 0x4501
    174c:	042e00f3 	strteq	r0, [lr], #-243	; 0xffffff0d
	if (__inpline != NULL)
    1750:	03290509 			; <UNDEFINED> instruction: 0x03290509
    1754:	04207f8d 	strteq	r7, [r0], #-3981	; 0xfffff073
		finish;
    1758:	06040501 	streq	r0, [r4], -r1, lsl #10
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    175c:	4a00f303 	bmi	3e370 <__ccfg+0x1e3c8>
    1760:	0204404d 	andeq	r4, r4, #77	; 0x4d
    1764:	ea030505 	b	c2b80 <__ccfg+0xa2bd8>
    1768:	01040177 	tsteq	r4, r7, ror r1
		umwait (IM_INIT);
    176c:	99030405 	stmdbls	r3, {r0, r2, sl}
		release;
    1770:	1a052008 	bne	149798 <__ccfg+0x1297f0>
	savedata (data);
    1774:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
	len = MAX_LINE_LENGTH;
    1778:	05214b06 	streq	r4, [r1, #-2822]!	; 0xfffff4fa
	io (IM_READ, __cport, READ, ptr, 1);
    177c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    1780:	1a052304 	bne	14a398 <__ccfg+0x12a3f0>
    1784:	0604051d 			; <UNDEFINED> instruction: 0x0604051d
    1788:	0904593f 	stmdbeq	r4, {r0, r1, r2, r3, r4, r5, r8, fp, ip, lr}
	if (ptr == (char*) data) { // new line
    178c:	017eee03 	cmneq	lr, r3, lsl #28
    1790:	01062905 	tsteq	r6, r5, lsl #18
		if (*ptr == '\0') { // bin cmd
    1794:	0d050e04 	stceq	14, cr0, [r5, #-16]
			proceed (IM_BIN);
    1798:	2e7bdb03 	vaddcs.f64	d29, d11, d3
    179c:	29050904 	stmdbcs	r5, {r2, r8, fp}
		if (*ptr < 0x20)
    17a0:	2004a503 	andcs	sl, r4, r3, lsl #10
    17a4:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
			proceed (IM_READ);
    17a8:	01970306 	orrseq	r0, r7, r6, lsl #6
    17ac:	050e044a 	streq	r0, [lr, #-1098]	; 0xfffffbb6
	if (*ptr == '\n' || *ptr == '\r') {
    17b0:	79f30331 	ldmibvc	r3!, {r0, r4, r5, r8, r9}^
    17b4:	15050501 	strne	r0, [r5, #-1281]	; 0xfffffaff
    17b8:	01065205 	tsteq	r6, r5, lsl #4
		*ptr = '\0';
    17bc:	1a050104 	bne	141bd4 <__ccfg+0x121c2c>
		__inpline = (char*)data;
    17c0:	068c0306 	streq	r0, [ip], r6, lsl #6
		finish;
    17c4:	110a052e 	tstne	sl, lr, lsr #10
	if (len) {
    17c8:	05050e04 	streq	r0, [r5, #-3588]	; 0xfffff1fc
		ptr++;
    17cc:	017ac303 	cmneq	sl, r3, lsl #6
    17d0:	01060d05 	tsteq	r6, r5, lsl #26
		len--;
    17d4:	0a050104 	beq	141bec <__ccfg+0x121c44>
	proceed (IM_READ);
    17d8:	2005bd03 	andcs	fp, r5, r3, lsl #26
	io (IM_BIN, __cport, READ, ptr, 1);
    17dc:	32060405 	andcc	r0, r6, #83886080	; 0x5000000
    17e0:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    17e4:	061a0501 	ldreq	r0, [sl], -r1, lsl #10
    17e8:	110a0521 	tstne	sl, r1, lsr #10
    17ec:	01060b05 	tsteq	r6, r5, lsl #22
	len -= 2;
    17f0:	05580a05 	ldrbeq	r0, [r8, #-2565]	; 0xfffff5fb
	if (len > *ptr + 1) // 1 for 0x04
    17f4:	04320604 	ldrteq	r0, [r2], #-1540	; 0xfffff9fc
    17f8:	03050509 	movweq	r0, #21769	; 0x5509
		len = *ptr + 1;
    17fc:	05017ab8 	streq	r7, [r1, #-2744]	; 0xfffff548
    1800:	05010631 	streq	r0, [r1, #-1585]	; 0xfffff9cf
	ptr++;
    1804:	7ebc033f 	mrcvc	3, 5, r0, cr12, cr15, {1}
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1808:	03310520 	teqeq	r1, #32, 10	; 0x8000000
    180c:	042001c4 	strteq	r0, [r0], #-452	; 0xfffffe3c
    1810:	06040501 	streq	r0, [r4], -r1, lsl #10
    1814:	2005cb03 	andcs	ip, r5, r3, lsl #22
    1818:	05050904 	streq	r0, [r5, #-2308]	; 0xfffff6fc
    181c:	0178f103 	cmneq	r8, r3, lsl #2	; <UNPREDICTABLE>
	len -= quant;
    1820:	01063f05 	tsteq	r6, r5, lsl #30
		__inpline = (char*)data;
    1824:	04050104 	streq	r0, [r5], #-260	; 0xfffffefc
		finish;
    1828:	07920306 	ldreq	r0, [r2, r6, lsl #6]
	ptr += quant;
    182c:	050c042e 	streq	r0, [ip, #-1070]	; 0xfffffbd2
    1830:	77f50305 	ldrbvc	r0, [r5, r5, lsl #6]!
endstrand
    1834:	062e0501 	strteq	r0, [lr], -r1, lsl #10
    1838:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
	proceed (IM_BINL);
    183c:	8e030604 	cfmadd32hi	mvax0, mvfx0, mvfx3, mvfx4
endstrand
    1840:	02042e08 	andeq	r2, r4, #8, 28	; 0x80
    1844:	c9030505 	stmdbgt	r3, {r0, r2, r8, sl}
    1848:	01040177 	tsteq	r4, r7, ror r1
    184c:	ba030405 	blt	c2868 <__ccfg+0xa28c0>
    1850:	09032008 	stmdbeq	r3, {r3, sp}
    1854:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
		if (res && (d < n))
    1858:	017db003 	cmneq	sp, r3
    185c:	24050604 	strcs	r0, [r5], #-1540	; 0xfffff9fc
    1860:	017ed403 	cmneq	lr, r3, lsl #8
    1864:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
			res [d] = (char) c;
    1868:	04010623 	streq	r0, [r1], #-1571	; 0xfffff9dd
		d++;
    186c:	03010501 	movweq	r0, #5377	; 0x1501
    1870:	055801a8 	ldrbeq	r0, [r8, #-424]	; 0xfffffe58
    1874:	f0030604 			; <UNDEFINED> instruction: 0xf0030604
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1878:	055b2002 	ldrbeq	r2, [fp, #-2]
    187c:	0501062c 	streq	r0, [r1, #-1580]	; 0xfffff9d4
    1880:	2c052732 	stccs	7, cr2, [r5], {50}	; 0x32
				enci (10000);
    1884:	05207903 	streq	r7, [r0, #-2307]!	; 0xfffff6fd
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1888:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    188c:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
	d = 0;
    1890:	055d0604 	ldrbeq	r0, [sp, #-1540]	; 0xfffff9fc
		c = *fm++;
    1894:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
		if (c == '\\') {
    1898:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
			if ((c = *fm++) == '\0') {
    189c:	05010632 	streq	r0, [r1, #-1586]	; 0xfffff9ce
    18a0:	04240604 	strteq	r0, [r4], #-1540	; 0xfffff9fc
				outc ('\\');
    18a4:	03050502 	movweq	r0, #21762	; 0x5502
			if ((c = *fm++) == '\0') {
    18a8:	0401778b 	streq	r7, [r1], #-1931	; 0xfffff875
				outc ('\\');
    18ac:	03040501 	movweq	r0, #17665	; 0x4501
    18b0:	042008f8 	strteq	r0, [r0], #-2296	; 0xfffff708
			outc (c);
    18b4:	0305050e 	movweq	r0, #21774	; 0x550e
    18b8:	05017a88 	streq	r7, [r1, #-2696]	; 0xfffff578
			if (c == '\0')
    18bc:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    18c0:	05310605 	ldreq	r0, [r1, #-1541]!	; 0xfffff9fb
			outc (c);
    18c4:	0501064d 	streq	r0, [r1, #-1613]	; 0xfffff9b3
				outc (val);
    18c8:	053d0605 	ldreq	r0, [sp, #-1541]!	; 0xfffff9fb
				val = (word) va_arg (ap, aword);
    18cc:	0401062e 	streq	r0, [r1], #-1582	; 0xfffff9d2
		if (c == '%') {
    18d0:	06040501 	streq	r0, [r4], -r1, lsl #10
    18d4:	3c05f703 	stccc	7, cr15, [r5], {3}
			c = *fm++;
    18d8:	05050204 	streq	r0, [r5, #-516]	; 0xfffffdfc
			switch (c) {
    18dc:	01778503 	cmneq	r7, r3, lsl #10
    18e0:	0d050e04 	stceq	14, cr0, [r5, #-16]
    18e4:	02e80306 	rsceq	r0, r8, #402653184	; 0x18000000
    18e8:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    18ec:	96030639 			; <UNDEFINED> instruction: 0x96030639
    18f0:	0a052006 	beq	149910 <__ccfg+0x129968>
    18f4:	050e0401 	streq	r0, [lr, #-1025]	; 0xfffffbff
    18f8:	79ea0305 	stmibvc	sl!, {r0, r2, r8, r9}^
				outc ('%');
    18fc:	060d0501 	streq	r0, [sp], -r1, lsl #10
    1900:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
				outc (c);
    1904:	0696030a 	ldreq	r0, [r6], sl, lsl #6
    1908:	06040520 	streq	r0, [r4], -r0, lsr #10
    190c:	05090432 	streq	r0, [r9, #-1074]	; 0xfffffbce
				if (c == '\0')
    1910:	77ec0305 	strbvc	r0, [ip, r5, lsl #6]!
				return d;
    1914:	06410501 	strbeq	r0, [r1], -r1, lsl #10
}
    1918:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    191c:	08970304 	ldmeq	r7, {r2, r8, r9}
			switch (c) {
    1920:	0509042e 	streq	r0, [r9, #-1070]	; 0xfffffbd2
    1924:	77e90341 	strbvc	r0, [r9, r1, asr #6]!
    1928:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
				for (i = 12; ; i -= 4) {
    192c:	97030604 	strls	r0, [r3, -r4, lsl #12]
				val = (word) va_arg (ap, aword);
    1930:	04522008 	ldrbeq	r2, [r2], #-8
						[ (val >> i) & 0xf ]);
    1934:	0302050d 	movweq	r0, #9485	; 0x250d
    1938:	4a2075d1 	bmi	81f084 <__ccfg+0x7ff0dc>
    193c:	04010101 	streq	r0, [r1], #-257	; 0xfffffeff
					outc (__pi_hex_enc_table
    1940:	03030503 	movweq	r0, #13571	; 0x3503
    1944:	0d04012b 	stfeqs	f0, [r4, #-172]	; 0xffffff54
					if (i == 0)
    1948:	55030205 	strpl	r0, [r3, #-517]	; 0xfffffdfb
    194c:	37021620 	strcc	r1, [r2, -r0, lsr #12]
				for (i = 12; ; i -= 4) {
    1950:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
				val = (word) va_arg (ap, aword);
    1954:	02050012 	andeq	r0, r5, #18
				if (c == 'd' && (val & 0x8000) != 0) {
    1958:	00000000 	andeq	r0, r0, r0
				val = (word) va_arg (ap, aword);
    195c:	0100e103 	tsteq	r0, r3, lsl #2
				if (c == 'd' && (val & 0x8000) != 0) {
    1960:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1964:	051e0612 	ldreq	r0, [lr, #-1554]	; 0xfffff9ee
					outc ('-');
    1968:	1f212202 	svcne	0x00212202
    196c:	4b2f2106 	blmi	bc9d8c <__ccfg+0xba9de4>
					val = (~val) + 1;
    1970:	0608053f 			; <UNDEFINED> instruction: 0x0608053f
    1974:	06020501 	streq	r0, [r2], -r1, lsl #10
				for (i = 12; ; i -= 4) {
    1978:	0008022f 	andeq	r0, r8, pc, lsr #4
				enci (10000);
    197c:	3a050101 	bcc	141d88 <__ccfg+0x121de0>
    1980:	00020500 	andeq	r0, r2, r0, lsl #10
    1984:	03000000 	movweq	r0, #0
    1988:	050100f1 	streq	r0, [r1, #-241]	; 0xffffff0f
    198c:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    1990:	200e063a 	andcs	r0, lr, sl, lsr r6
    1994:	05240605 	streq	r0, [r4, #-1541]!	; 0xfffff9fb
    1998:	05051c3a 	streq	r1, [r5, #-3130]	; 0xfffff3c6
    199c:	06030524 	streq	r0, [r3], -r4, lsr #10
    19a0:	0606053f 			; <UNDEFINED> instruction: 0x0606053f
    19a4:	06040501 	streq	r0, [r4], -r1, lsl #10
    19a8:	06120530 			; <UNDEFINED> instruction: 0x06120530
    19ac:	2e0b0501 	cfsh32cs	mvfx0, mvfx11, #1
    19b0:	25060305 	strcs	r0, [r6, #-773]	; 0xfffffcfb
    19b4:	01060905 	tsteq	r6, r5, lsl #18
    19b8:	2f050f04 	svccs	0x00050f04
    19bc:	04201503 	strteq	r1, [r0], #-1283	; 0xfffffafd
    19c0:	03090501 	movweq	r0, #38145	; 0x9501
				if (c == 'd' || c == 'u') {
    19c4:	0305206b 	movweq	r2, #20587	; 0x506b
    19c8:	0f042106 	svceq	0x00042106
					if (c == 'd' &&
    19cc:	14030505 	strne	r0, [r3], #-1285	; 0xfffffafb
					val = va_arg (ap, lword);
    19d0:	062f0501 	strteq	r0, [pc], -r1, lsl #10
					fm++;
    19d4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
					if (c == 'd' &&
    19d8:	207a0301 	rsbscs	r0, sl, r1, lsl #6
    19dc:	03060405 	movweq	r0, #25605	; 0x6405
						outc ('-');
    19e0:	0f04206f 	svceq	0x0004206f
    19e4:	c3030505 	movwgt	r0, #13573	; 0x3505
						val = (~val) + 1;
    19e8:	05140100 	ldreq	r0, [r4, #-256]	; 0xffffff00
				enci (10000);
    19ec:	05010618 	streq	r0, [r1, #-1560]	; 0xfffff9e8
					enci (1000000000UL);
    19f0:	04330605 	ldrteq	r0, [r3], #-1541	; 0xfffff9fb
    19f4:	060b0501 	streq	r0, [fp], -r1, lsl #10
    19f8:	017fb603 	cmneq	pc, r3, lsl #12
    19fc:	34060305 	strcc	r0, [r6], #-773	; 0xfffffcfb
    1a00:	05050f04 	streq	r0, [r5, #-3844]	; 0xfffff0fc
    1a04:	062f050e 	strteq	r0, [pc], -lr, lsl #10
    1a08:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    1a0c:	05410603 	strbeq	r0, [r1, #-1539]	; 0xfffff9fd
    1a10:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    1a14:	06053f04 	streq	r3, [r5], -r4, lsl #30
    1a18:	0604052b 	streq	r0, [r4], -fp, lsr #10
    1a1c:	03052f23 	movweq	r2, #24355	; 0x5f23
    1a20:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    1a24:	03051f09 	movweq	r1, #24329	; 0x5f09
    1a28:	022f2106 	eoreq	r2, pc, #-2147483647	; 0x80000001
    1a2c:	01010009 	tsteq	r1, r9
    1a30:	05001105 	streq	r1, [r0, #-261]	; 0xfffffefb
				} else if (c == 'x') {
    1a34:	000ce802 	andeq	lr, ip, r2, lsl #16
					for (i = 28; ; i -= 4) {
    1a38:	0af10300 	beq	ffc42640 <_estack+0xdfc3d640>
					val = va_arg (ap, lword);
    1a3c:	16030501 	strne	r0, [r3], -r1, lsl #10
							[ (val >> i) & 0xf ]);
    1a40:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    1a44:	0d061105 	stfeqs	f1, [r6, #-20]	; 0xffffffec
						outc (__pi_hex_enc_table
    1a48:	26250520 	strtcs	r0, [r5], -r0, lsr #10
    1a4c:	051f0305 	ldreq	r0, [pc, #-773]	; 174f <__inserial+0x13>
    1a50:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
						if (i == 0)
    1a54:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    1a58:	052d0637 	streq	r0, [sp, #-1591]!	; 0xfffff9c9
					for (i = 28; ; i -= 4) {
    1a5c:	0305010f 	movweq	r0, #20751	; 0x510f
					outc ('%');
    1a60:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1a64:	19063206 	stmdbne	r6, {r1, r2, r9, ip, sp}
    1a68:	06207903 	strteq	r7, [r0], -r3, lsl #18
					outc ('l');
    1a6c:	5b5b3231 	blpl	16ce338 <__ccfg+0x16ae390>
    1a70:	01061c05 	tsteq	r6, r5, lsl #24
				val = (word) va_arg (ap, aword);
    1a74:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
				outc (val);
    1a78:	0c052302 	stceq	3, cr2, [r5], {2}
    1a7c:	0602051d 			; <UNDEFINED> instruction: 0x0602051d
				while (*st != '\0') {
    1a80:	03043e23 	movweq	r3, #20003	; 0x4e23
    1a84:	c5030305 	strgt	r0, [r3, #-773]	; 0xfffffcfb
    1a88:	01040175 	tsteq	r4, r5, ror r1
    1a8c:	bd030205 	sfmlt	f0, 4, [r3, #-20]	; 0xffffffec
					outc (*st);
    1a90:	0e02200a 	cdpeq	0, 0, cr2, cr2, cr10, {0}
    1a94:	e0010100 	and	r0, r1, r0, lsl #2
					st++;
    1a98:	0300000e 	movweq	r0, #14
		c = *fm++;
    1a9c:	00019000 	andeq	r9, r1, r0
    1aa0:	fb010200 	blx	422aa <__ccfg+0x22302>
    1aa4:	01000d0e 	tsteq	r0, lr, lsl #26
char *vform (char *res, const char *fm, va_list aq) {
    1aa8:	00010101 	andeq	r0, r1, r1, lsl #2
    1aac:	00010000 	andeq	r0, r1, r0
	if (res != NULL) {
    1ab0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab4:	2f656d6f 	svccs	0x00656d6f
    1ab8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1abc:	442f6e69 	strtmi	r6, [pc], #-3689	; 1ac4 <vform+0x1c>
}
    1ac0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    1ac4:	4f2f706f 	svcmi	0x002f706f
	fml = strlen (fm) + 17;
    1ac8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    1acc:	502f5445 	eorpl	r5, pc, r5, asr #8
    1ad0:	534f4349 	movtpl	r4, #62281	; 0xf349
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad4:	6369502f 	cmnvs	r9, #47	; 0x2f
    1ad8:	6b2f534f 	blvs	bd681c <__ccfg+0xbb6874>
    1adc:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae0:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
    1ae4:	2f656d6f 	svccs	0x00656d6f
    1ae8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    1aec:	442f6e69 	strtmi	r6, [pc], #-3689	; 1af4 <vform+0x4c>
		ufree (res);
    1af0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		goto Again;
    1af4:	4f2f706f 	svcmi	0x002f706f
	if (buf == NULL || fmt == NULL)
    1af8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afc:	502f5445 	eorpl	r5, pc, r5, asr #8
	if (buf == NULL || fmt == NULL)
    1b00:	534f4349 	movtpl	r4, #62281	; 0xf349
    1b04:	6369502f 	cmnvs	r9, #47	; 0x2f
    1b08:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
		    	    case 'u': scanu (lword); break;
    1b0c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
			while (isspace (*buf)) buf++;
    1b10:	43432f58 	movtmi	r2, #16216	; 0x3f58
    1b14:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
	while (*fmt != '\0') {
    1b18:	45524157 	ldrbmi	r4, [r2, #-343]	; 0xfffffea9
		if (*fmt++ != '%')
    1b1c:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
		switch (*fmt++) {
    1b20:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    1b24:	2f006269 	svccs	0x00006269
    1b28:	2f727375 	svccs	0x00727375
    1b2c:	2f62696c 	svccs	0x0062696c
    1b30:	2f636367 	svccs	0x00636367
    1b34:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1b38:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
}
    1b3c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
		switch (*fmt++) {
    1b40:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    1b44:	2f312e32 	svccs	0x00312e32
    1b48:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1b4c:	00656475 	rsbeq	r6, r5, r5, ror r4
			while (isspace (*buf)) buf++;
    1b50:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1a9c <__pi_vfparse+0x224>
    1b54:	616d2f65 	cmnvs	sp, r5, ror #30
    1b58:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b5c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1b60:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b64:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			if (*buf == '\0')
    1b68:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			if (*buf != ',') {
    1b6c:	4349502f 	movtmi	r5, #36911	; 0x902f
			sap = va_arg (ap, char*);
    1b70:	502f534f 	eorpl	r5, pc, pc, asr #6
			nc++;
    1b74:	534f6369 	movtpl	r6, #62313	; 0xf369
			if (*buf != ',') {
    1b78:	3143432f 	cmpcc	r3, pc, lsr #6
				while (!isspace (*buf) && *buf != ',' &&
    1b7c:	00585833 	subseq	r5, r8, r3, lsr r8
    1b80:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1acc <vform+0x24>
    1b84:	616d2f65 	cmnvs	sp, r5, ror #30
    1b88:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1b8c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1b90:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1b94:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
			while (isspace (*buf)) buf++;
    1b98:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1b9c:	4349502f 	movtmi	r5, #36911	; 0x902f
    1ba0:	502f534f 	eorpl	r5, pc, pc, asr #6
    1ba4:	534f6369 	movtpl	r6, #62313	; 0xf369
    1ba8:	656b0000 	strbvs	r0, [fp, #-0]!
			if (*buf == ',') buf++;
    1bac:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1bb0:	0100632e 	tsteq	r0, lr, lsr #6
			*sap = '\0';
    1bb4:	61750000 	cmnvs	r5, r0
			break;
    1bb8:	682e7472 	stmdavs	lr!, {r1, r4, r5, r6, sl, ip, sp, lr}
		    case 'd': scani (word); break;
    1bbc:	00000200 	andeq	r0, r0, r0, lsl #4
    1bc0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1bc4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1bc8:	00000300 	andeq	r0, r0, r0, lsl #6
    1bcc:	61647473 	smcvs	18243	; 0x4743
    1bd0:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    1bd4:	00000300 	andeq	r0, r0, r0, lsl #6
    1bd8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1bdc:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1be0:	616d0000 	cmnvs	sp, r0
    1be4:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    1be8:	00000400 	andeq	r0, r0, r0, lsl #8
    1bec:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    1bf0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    1bf4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    1bf8:	75620000 	strbvc	r0, [r2, #-0]!
    1bfc:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    1c00:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c04:	00682e73 	rsbeq	r2, r8, r3, ror lr
    1c08:	73000004 	movwvc	r0, #4
    1c0c:	6f697379 	svcvs	0x00697379
    1c10:	0500682e 	streq	r6, [r0, #-2094]	; 0xfffff7d2
    1c14:	656b0000 	strbvs	r0, [fp, #-0]!
    1c18:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    1c1c:	0100682e 	tsteq	r0, lr, lsr #16
    1c20:	623c0000 	eorsvs	r0, ip, #0
    1c24:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    1c28:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
		    case 'u': scanu (word); break;
    1c2c:	00000000 	andeq	r0, r0, r0
    1c30:	00260500 	eoreq	r0, r6, r0, lsl #10
    1c34:	0d480205 	sfmeq	f0, 2, [r8, #-20]	; 0xffffffec
    1c38:	c3030000 	movwgt	r0, #12288	; 0x3000
    1c3c:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    1c40:	14131316 	ldrne	r1, [r3], #-790	; 0xfffffcea
    1c44:	03062605 	movweq	r2, #26117	; 0x6605
    1c48:	02050178 	andeq	r0, r5, #120, 2
    1c4c:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    1c50:	02051f07 	andeq	r1, r5, #7, 30
    1c54:	05202106 	streq	r2, [r0, #-262]!	; 0xfffffefa
    1c58:	05210613 	streq	r0, [r1, #-1555]!	; 0xfffff9ed
    1c5c:	13053c0a 	movwne	r3, #23562	; 0x5c0a
    1c60:	3e080520 	cfsh32cc	mvfx0, mvfx8, #16
    1c64:	2c060f05 	stccs	15, cr0, [r6], {5}
    1c68:	01060305 	tsteq	r6, r5, lsl #6
    1c6c:	2f060405 	svccs	0x00060405
    1c70:	01061605 	tsteq	r6, r5, lsl #12
		    case 'x': scanx (word); break;
    1c74:	053c0705 	ldreq	r0, [ip, #-1797]!	; 0xfffff8fb
    1c78:	4b310605 	blmi	c43494 <__ccfg+0xc234ec>
    1c7c:	7a030205 	bvc	c2498 <__ccfg+0xa24f0>
    1c80:	06010501 	streq	r0, [r1], -r1, lsl #10
    1c84:	022e0a03 	eoreq	r0, lr, #12288	; 0x3000
    1c88:	01010003 	tsteq	r1, r3
    1c8c:	05001f05 	streq	r1, [r0, #-3845]	; 0xfffff0fb
    1c90:	000d8402 	andeq	r8, sp, r2, lsl #8
    1c94:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    1c98:	03020501 	movweq	r0, #9473	; 0x2501
    1c9c:	1314010d 	tstne	r4, #1073741827	; 0x40000003
    1ca0:	01060d05 	tsteq	r6, r5, lsl #26
    1ca4:	70031f05 	andvc	r1, r3, r5, lsl #30
    1ca8:	030d0520 	movweq	r0, #54560	; 0xd520
    1cac:	1f052e10 	svcne	0x00052e10
    1cb0:	02052006 	andeq	r2, r5, #6
    1cb4:	03060106 	movweq	r0, #24838	; 0x6106
    1cb8:	05132011 	ldreq	r2, [r3, #-17]	; 0xffffffef
    1cbc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    1cc0:	1f051f05 	svcne	0x00051f05
    1cc4:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    1cc8:	25060106 	strcs	r0, [r6, #-262]	; 0xfffffefa
    1ccc:	060f0521 	streq	r0, [pc], -r1, lsr #10
    1cd0:	1d020515 	cfstr32ne	mvfx0, [r2, #-84]	; 0xffffffac
    1cd4:	0f052306 	svceq	0x00052306
    1cd8:	01050106 	tsteq	r5, r6, lsl #2
    1cdc:	06030524 	streq	r0, [r3], -r4, lsr #10
    1ce0:	05206203 	streq	r6, [r0, #-515]!	; 0xfffffdfd
    1ce4:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    1ce8:	04055806 	streq	r5, [r5], #-2054	; 0xfffff7fa
			switch (*fmt++) {
    1cec:	05213006 	streq	r3, [r1, #-6]!
    1cf0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    1cf4:	05910604 	ldreq	r0, [r1, #1540]	; 0x604
    1cf8:	36050d2e 	strcc	r0, [r5], -lr, lsr #26
    1cfc:	0a050106 	beq	14211c <__ccfg+0x122174>
    1d00:	1f053406 	svcne	0x00053406
		    	    case 'd': scani (lword); break;
    1d04:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1d08:	06040558 			; <UNDEFINED> instruction: 0x06040558
    1d0c:	10052f22 	andne	r2, r5, r2, lsr #30
    1d10:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1d14:	ac0b0306 	stcge	3, cr0, [fp], {6}
    1d18:	01060705 	tsteq	r6, r5, lsl #14
    1d1c:	64062e05 	strvs	r2, [r6], #-3589	; 0xfffff1fb
    1d20:	13060905 	movwne	r0, #26885	; 0x6905
    1d24:	01000702 	tsteq	r0, r2, lsl #14
    1d28:	001c0501 	andseq	r0, ip, r1, lsl #10
    1d2c:	0e040205 	cdpeq	2, 0, cr0, cr4, cr5, {0}
    1d30:	c6030000 	strgt	r0, [r3], -r0
    1d34:	02050108 	andeq	r0, r5, #8, 2
    1d38:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    1d3c:	df03060d 	svcle	0x0003060d
    1d40:	0104017c 	tsteq	r4, ip, ror r1
    1d44:	03060f05 	movweq	r0, #28421	; 0x6f05
    1d48:	052003a1 	streq	r0, [r0, #-929]!	; 0xfffffc5f
    1d4c:	02040102 	andeq	r0, r4, #-2147483648	; 0x80000000
    1d50:	da032405 	ble	cad6c <__ccfg+0xaadc4>
    1d54:	0505017c 	streq	r0, [r5, #-380]	; 0xfffffe84
    1d58:	060d0517 			; <UNDEFINED> instruction: 0x060d0517
    1d5c:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
		    	    case 'x': scanx (lword); break;
    1d60:	03a10302 			; <UNDEFINED> instruction: 0x03a10302
    1d64:	052f0620 	streq	r0, [pc, #-1568]!	; 174c <__inserial+0x10>
    1d68:	023d0601 	eorseq	r0, sp, #1048576	; 0x100000
    1d6c:	01010005 	tsteq	r1, r5
    1d70:	05002705 	streq	r2, [r0, #-1797]	; 0xfffff8fb
    1d74:	00000002 	andeq	r0, r0, r2
    1d78:	00de0300 	sbcseq	r0, lr, r0, lsl #6
    1d7c:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    1d80:	06270514 			; <UNDEFINED> instruction: 0x06270514
    1d84:	2402050e 	strcs	r0, [r2], #-1294	; 0xfffffaf2
    1d88:	051c2705 	ldreq	r2, [ip, #-1797]	; 0xfffff8fb
    1d8c:	20062402 	andcs	r2, r6, r2, lsl #8
    1d90:	48030523 	stmdami	r3, {r0, r1, r5, r8, sl}
    1d94:	01060605 	tsteq	r6, r5, lsl #12
    1d98:	2d060205 	sfmcs	f0, 4, [r6, #-20]	; 0xffffffec
    1d9c:	32060105 	andcc	r0, r6, #1073741825	; 0x40000001
    1da0:	01000502 	tsteq	r0, r2, lsl #10
    1da4:	001b0501 	andseq	r0, fp, r1, lsl #10
    1da8:	0e1c0205 	cdpeq	2, 1, cr0, cr12, cr5, {0}
    1dac:	fa030000 	blx	c1db4 <__ccfg+0xa1e0c>
    1db0:	02050100 	andeq	r0, r5, #0, 2
    1db4:	061b0513 			; <UNDEFINED> instruction: 0x061b0513
    1db8:	2102051f 	tstcs	r2, pc, lsl r5
    1dbc:	01000602 	tsteq	r0, r2, lsl #12
    1dc0:	001e0501 	andseq	r0, lr, r1, lsl #10
    1dc4:	00000205 	andeq	r0, r0, r5, lsl #4
    1dc8:	fe030000 	cdp2	0, 0, cr0, cr3, cr0, {0}
    1dcc:	02050100 	andeq	r0, r5, #0, 2
		    	    case 'd': scani (lword); break;
    1dd0:	0e051416 	cfmvdlreq	mvd5, r1
    1dd4:	061e0501 	ldreq	r0, [lr], -r1, lsl #10
    1dd8:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1ddc:	1e053409 	cdpne	4, 0, cr3, cr5, cr9, {0}
    1de0:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    1de4:	05270603 	streq	r0, [r7, #-1539]!	; 0xfffff9fd
    1de8:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
		    	    case 'u': scanu (lword); break;
    1dec:	1f052e06 	svcne	0x00052e06
    1df0:	20051f06 	andcs	r1, r5, r6, lsl #30
    1df4:	0e050106 	adfeqs	f0, f5, f6
    1df8:	02052006 	andeq	r2, r5, #6
    1dfc:	32060106 	andcc	r0, r6, #-2147483647	; 0x80000001
    1e00:	05130305 	ldreq	r0, [r3, #-773]	; 0xfffffcfb
    1e04:	05153b02 	ldreq	r3, [r5, #-2818]	; 0xfffff4fe
    1e08:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    1e0c:	06022f01 	streq	r2, [r2], -r1, lsl #30
    1e10:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1e14:	02050021 	andeq	r0, r5, #33	; 0x21
    1e18:	00000000 	andeq	r0, r0, r0
    1e1c:	01018e03 	tsteq	r1, r3, lsl #28
    1e20:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    1e24:	05010e05 	streq	r0, [r1, #-3589]	; 0xfffff1fb
    1e28:	05200609 	streq	r0, [r0, #-1545]!	; 0xfffff9f7
    1e2c:	2e7a0321 	cdpcs	3, 7, cr0, cr10, cr1, {1}
    1e30:	27060305 	strcs	r0, [r6, -r5, lsl #6]
		    	    case 'x': scanx (lword); break;
    1e34:	01061205 	tsteq	r6, r5, lsl #4
    1e38:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
			if ((c = *buf++) == '\0')
    1e3c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    1e40:	06054b03 	streq	r4, [r5], -r3, lsl #22
			sap = va_arg (ap, char*);
    1e44:	1f050106 	svcne	0x00050106
			nc++;
    1e48:	20052b06 	andcs	r2, r5, r6, lsl #22
			break;
    1e4c:	0e050106 	adfeqs	f0, f5, f6
			while (isspace (*buf)) buf++;
    1e50:	02052006 	andeq	r2, r5, #6
    1e54:	34060106 	strcc	r0, [r6], #-262	; 0xfffffefa
    1e58:	05580b05 	ldrbeq	r0, [r8, #-2821]	; 0xfffff4fb
						*sap++ = *buf++;
    1e5c:	08051302 	stmdaeq	r5, {r1, r8, r9, ip}
    1e60:	2f030501 	svccs	0x00030501
			while (isspace (*buf)) buf++;
    1e64:	01061f05 	tsteq	r6, r5, lsl #30
    1e68:	05202105 	streq	r2, [r0, #-261]!	; 0xfffffefb
    1e6c:	03052012 	movweq	r2, #20498	; 0x5012
		return 0;
    1e70:	06052f06 	streq	r2, [r5], -r6, lsl #30
    1e74:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
		    case 'x': scanx (word); break;
    1e78:	0b053206 	bleq	14e698 <__ccfg+0x12e6f0>
    1e7c:	0601052e 	streq	r0, [r1], -lr, lsr #10
		    	    case 'x': scanx (lword); break;
    1e80:	00070213 	andeq	r0, r7, r3, lsl r2
    1e84:	2a050101 	bcs	142290 <__ccfg+0x1222e8>
    1e88:	00020500 	andeq	r0, r2, r0, lsl #10
    1e8c:	03000000 	movweq	r0, #0
    1e90:	050101a6 	streq	r0, [r1, #-422]	; 0xfffffe5a
    1e94:	05051402 	streq	r1, [r5, #-1026]	; 0xfffffbfe
    1e98:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1e9c:	02022106 	andeq	r2, r2, #-2147483647	; 0x80000001
    1ea0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1ea4:	0205002e 	andeq	r0, r5, #46	; 0x2e
    1ea8:	00000e2c 	andeq	r0, r0, ip, lsr #28
    1eac:	0101ae03 	tsteq	r1, r3, lsl #28
    1eb0:	02052006 	andeq	r2, r5, #6
    1eb4:	200e0306 	andcs	r0, lr, r6, lsl #6
    1eb8:	01100313 	tsteq	r0, r3, lsl r3
    1ebc:	01060605 	tsteq	r6, r5, lsl #12
    1ec0:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    1ec4:	09030602 	stmdbeq	r3, {r1, r9, sl}
    1ec8:	0606052e 	streq	r0, [r6], -lr, lsr #10
    1ecc:	58050501 	stmdapl	r5, {r0, r8, sl}
    1ed0:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    1ed4:	27080603 	strcs	r0, [r8, -r3, lsl #12]
    1ed8:	0302052e 	movweq	r0, #9518	; 0x252e
    1edc:	14052029 	strne	r2, [r5], #-41	; 0xffffffd7
    1ee0:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    1ee4:	0604052e 	streq	r0, [r4], -lr, lsr #10
    1ee8:	052e5903 	streq	r5, [lr, #-2307]!	; 0xfffff6fd
    1eec:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    1ef0:	04052007 	streq	r2, [r5], #-7
    1ef4:	08053106 	stmdaeq	r5, {r1, r2, r8, ip, sp}
    1ef8:	07050106 	streq	r0, [r5, -r6, lsl #2]
    1efc:	2e08053c 	mcrcs	5, 0, r0, cr8, cr12, {1}
    1f00:	08060505 	stmdaeq	r6, {r0, r2, r8, sl}
    1f04:	0303053e 	movweq	r0, #13630	; 0x353e
    1f08:	05053c79 	streq	r3, [r5, #-3193]	; 0xfffff387
    1f0c:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    1f10:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    1f14:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    1f18:	05110607 	ldreq	r0, [r1, #-1543]	; 0xfffff9f9
    1f1c:	17030603 	strne	r0, [r3, -r3, lsl #12]
    1f20:	06070566 	streq	r0, [r7], -r6, ror #10
    1f24:	2e060501 	cfsh32cs	mvfx0, mvfx6, #1
    1f28:	03060205 	movweq	r0, #25093	; 0x6205
    1f2c:	0b053c16 	bleq	150f8c <__ccfg+0x130fe4>
    1f30:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    1f34:	01054006 	tsteq	r5, r6
    1f38:	010d0306 	tsteq	sp, r6, lsl #6
    1f3c:	73030205 	movwvc	r0, #12805	; 0x3205
    1f40:	0301052e 	movweq	r0, #5422	; 0x152e
    1f44:	0a022e0d 	beq	8d780 <__ccfg+0x6d7d8>
    1f48:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1f4c:	0205001b 	andeq	r0, r5, #27
    1f50:	00000ef8 	strdeq	r0, [r0], -r8
    1f54:	0102d203 	tsteq	r2, r3, lsl #4
    1f58:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    1f5c:	0510061b 	ldreq	r0, [r0, #-1563]	; 0xfffff9e5
    1f60:	4b062202 	blmi	18a770 <__ccfg+0x16a7c8>
    1f64:	01000502 	tsteq	r0, r2, lsl #10
    1f68:	002a0501 	eoreq	r0, sl, r1, lsl #10
    1f6c:	0f0c0205 	svceq	0x000c0205
    1f70:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    1f74:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1f78:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    1f7c:	240b050e 	strcs	r0, [fp], #-1294	; 0xfffffaf2
    1f80:	053e0505 	ldreq	r0, [lr, #-1285]!	; 0xfffffafb
    1f84:	054a0602 	strbeq	r0, [sl, #-1538]	; 0xfffff9fe
    1f88:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    1f8c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    1f90:	06014c02 	streq	r4, [r1], -r2, lsl #24
    1f94:	20061f3d 	andcs	r1, r6, sp, lsr pc
    1f98:	01051320 	tsteq	r5, r0, lsr #6
    1f9c:	06022106 	streq	r2, [r2], -r6, lsl #2
    1fa0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    1fa4:	02050021 	andeq	r0, r5, #33	; 0x21
    1fa8:	00000f40 	andeq	r0, r0, r0, asr #30
    1fac:	0102e503 	tsteq	r2, r3, lsl #10
    1fb0:	13160205 	tstne	r6, #1342177280	; 0x50000000
    1fb4:	06210514 			; <UNDEFINED> instruction: 0x06210514
    1fb8:	05017903 	streq	r7, [r1, #-2307]	; 0xfffff6fd
    1fbc:	2e062702 	cdpcs	7, 0, cr2, cr6, cr2, {0}
    1fc0:	21061305 	tstcs	r6, r5, lsl #6
    1fc4:	05200a05 	streq	r0, [r0, #-2565]!	; 0xfffff5fb
    1fc8:	0f052013 	svceq	0x00052013
    1fcc:	03054a06 	movweq	r4, #23046	; 0x5a06
    1fd0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    1fd4:	07052f06 	streq	r2, [r5, -r6, lsl #30]
    1fd8:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    1fdc:	054b5a06 	strbeq	r5, [fp, #-2566]	; 0xfffff5fa
    1fe0:	01050d02 	tsteq	r5, r2, lsl #26
    1fe4:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    1fe8:	01000302 	tsteq	r0, r2, lsl #6
    1fec:	002d0501 	eoreq	r0, sp, r1, lsl #10
    1ff0:	00000205 	andeq	r0, r0, r5, lsl #4
    1ff4:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    1ff8:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    1ffc:	05141316 	ldreq	r1, [r4, #-790]	; 0xfffffcea
    2000:	7903062d 	stmdbvc	r3, {r0, r2, r3, r5, r9, sl}
    2004:	02052001 	andeq	r2, r5, #1
    2008:	05300627 	ldreq	r0, [r0, #-1575]!	; 0xfffff9d9
    200c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    2010:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    2014:	05010612 	streq	r0, [r1, #-1554]	; 0xfffff9ee
    2018:	01053c02 	tsteq	r5, r2, lsl #24
    201c:	06030533 			; <UNDEFINED> instruction: 0x06030533
    2020:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2024:	1f200501 	svcne	0x00200501
    2028:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    202c:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    2030:	0102641f 	tsteq	r2, pc, lsl r4
    2034:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2038:	02050026 	andeq	r0, r5, #38	; 0x26
    203c:	00000f74 	andeq	r0, r0, r4, ror pc
    2040:	01038703 	tsteq	r3, r3, lsl #14
    2044:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2048:	0e062605 	cfmadd32eq	mvax0, mvfx2, mvfx6, mvfx5
    204c:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    2050:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    2054:	03052806 	movweq	r2, #22534	; 0x5806
    2058:	2e790306 	cdpcs	3, 7, cr0, cr9, cr6, {0}
    205c:	01060605 	tsteq	r6, r5, lsl #12
    2060:	30060405 	andcc	r0, r6, r5, lsl #8
    2064:	0601053d 			; <UNDEFINED> instruction: 0x0601053d
    2068:	06020517 			; <UNDEFINED> instruction: 0x06020517
    206c:	022e7703 	eoreq	r7, lr, #786432	; 0xc0000
    2070:	01010004 	tsteq	r1, r4
    2074:	05002105 	streq	r2, [r0, #-261]	; 0xfffffefb
    2078:	000f9802 	andeq	r9, pc, r2, lsl #16
    207c:	03990300 	orrseq	r0, r9, #0, 6
    2080:	16020501 	strne	r0, [r2], -r1, lsl #10
    2084:	0e062105 	adfeqs	f2, f6, f5
    2088:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    208c:	053e8506 	ldreq	r8, [lr, #-1286]!	; 0xfffffafa
    2090:	0501061e 	streq	r0, [r1, #-1566]	; 0xfffff9e2
    2094:	1e052e0b 	cdpne	14, 0, cr2, cr5, cr11, {0}
    2098:	20130520 	andscs	r0, r3, r0, lsr #10
    209c:	22060205 	andcs	r0, r6, #1342177280	; 0x50000000
    20a0:	59060105 	stmdbpl	r6, {r0, r2, r8}
    20a4:	01000502 	tsteq	r0, r2, lsl #10
    20a8:	00140501 	andseq	r0, r4, r1, lsl #10
    20ac:	00000205 	andeq	r0, r0, r5, lsl #4
    20b0:	a7030000 	strge	r0, [r3, -r0]
    20b4:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    20b8:	06010516 			; <UNDEFINED> instruction: 0x06010516
    20bc:	00040267 	andeq	r0, r4, r7, ror #4
    20c0:	18050101 	stmdane	r5, {r0, r8}
    20c4:	00020500 	andeq	r0, r2, r0, lsl #10
    20c8:	03000000 	movweq	r0, #0
    20cc:	050103b2 	streq	r0, [r1, #-946]	; 0xfffffc4e
    20d0:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    20d4:	200e0618 	andcs	r0, lr, r8, lsl r6
    20d8:	06240205 	strteq	r0, [r4], -r5, lsl #4
    20dc:	0605055a 			; <UNDEFINED> instruction: 0x0605055a
    20e0:	06030501 	streq	r0, [r3], -r1, lsl #10
    20e4:	06050521 	streq	r0, [r5], -r1, lsr #10
    20e8:	06020501 	streq	r0, [r2], -r1, lsl #10
    20ec:	06120535 			; <UNDEFINED> instruction: 0x06120535
    20f0:	59010501 	stmdbpl	r1, {r0, r8, sl}
    20f4:	03060305 	movweq	r0, #25349	; 0x6305
    20f8:	053d207a 	ldreq	r2, [sp, #-122]!	; 0xffffff86
    20fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2100:	0b052e17 	bleq	14d964 <__ccfg+0x12d9bc>
    2104:	0008023d 	andeq	r0, r8, sp, lsr r2
    2108:	1d050101 	stfnes	f0, [r5, #-4]
    210c:	00020500 	andeq	r0, r2, r0, lsl #10
    2110:	03000000 	movweq	r0, #0
    2114:	05010492 	streq	r0, [r1, #-1170]	; 0xfffffb6e
    2118:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    211c:	050e061d 	streq	r0, [lr, #-1565]	; 0xfffff9e3
    2120:	03052405 	movweq	r2, #21509	; 0x5405
    2124:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    2128:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    212c:	01053206 	tsteq	r5, r6, lsl #4
    2130:	03051306 	movweq	r1, #21254	; 0x5306
    2134:	06022b06 	streq	r2, [r2], -r6, lsl #22
    2138:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    213c:	0205001d 	andeq	r0, r5, #29
    2140:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2144:	01049e03 	tsteq	r4, r3, lsl #28
    2148:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    214c:	01060505 	tsteq	r6, r5, lsl #10
    2150:	2f060305 	svccs	0x00060305
    2154:	01060a05 	tsteq	r6, r5, lsl #20
    2158:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    215c:	0601052e 	streq	r0, [r1], -lr, lsr #10
    2160:	06030525 	streq	r0, [r3], -r5, lsr #10
    2164:	0606051c 			; <UNDEFINED> instruction: 0x0606051c
    2168:	06020501 	streq	r0, [r2], -r1, lsl #10
    216c:	0006023b 	andeq	r0, r6, fp, lsr r2
    2170:	1d050101 	stfnes	f0, [r5, #-4]
    2174:	00020500 	andeq	r0, r2, r0, lsl #10
    2178:	03000000 	movweq	r0, #0
    217c:	050104ac 	streq	r0, [r1, #-1196]	; 0xfffffb54
    2180:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2184:	061d0513 			; <UNDEFINED> instruction: 0x061d0513
    2188:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    218c:	02052504 	andeq	r2, r5, #4, 10	; 0x1000000
    2190:	052e0621 	streq	r0, [lr, #-1569]!	; 0xfffff9df
    2194:	05240601 	streq	r0, [r4, #-1537]!	; 0xfffff9ff
    2198:	051d0603 	ldreq	r0, [sp, #-1539]	; 0xfffff9fd
    219c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    21a0:	06051f02 	streq	r1, [r5], -r2, lsl #30
    21a4:	06040521 	streq	r0, [r4], -r1, lsr #10
    21a8:	06050521 	streq	r0, [r5], -r1, lsr #10
    21ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    21b0:	0004023a 	andeq	r0, r4, sl, lsr r2
    21b4:	21050101 	tstcs	r5, r1, lsl #2
    21b8:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    21bc:	0300000f 	movweq	r0, #15
    21c0:	050104b8 	streq	r0, [r1, #-1208]	; 0xfffffb48
    21c4:	05141402 	ldreq	r1, [r4, #-1026]	; 0xfffffbfe
    21c8:	050e0621 	streq	r0, [lr, #-1569]	; 0xfffff9df
    21cc:	0e052409 	cdpeq	4, 0, cr2, cr5, cr9, {0}
    21d0:	02052006 	andeq	r2, r5, #6
    21d4:	01050106 	tsteq	r5, r6, lsl #2
    21d8:	06220531 			; <UNDEFINED> instruction: 0x06220531
    21dc:	011e051d 	tsteq	lr, sp, lsl r5
    21e0:	01061f05 	tsteq	r6, r5, lsl #30
    21e4:	01000202 	tsteq	r0, r2, lsl #4
    21e8:	002b0501 	eoreq	r0, fp, r1, lsl #10
    21ec:	00000205 	andeq	r0, r0, r5, lsl #4
    21f0:	c1030000 	mrsgt	r0, (UNDEF: 3)
    21f4:	02050104 	andeq	r0, r5, #4, 2
    21f8:	20200514 	eorcs	r0, r0, r4, lsl r5
    21fc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    2200:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2204:	08052e18 	stmdaeq	r5, {r3, r4, r9, sl, fp, sp}
    2208:	2f01052e 	svccs	0x0001052e
    220c:	01000102 	tsteq	r0, r2, lsl #2
    2210:	00330501 	eorseq	r0, r3, r1, lsl #10
    2214:	00000205 	andeq	r0, r0, r5, lsl #4
    2218:	c6030000 	strgt	r0, [r3], -r0
    221c:	02050104 	andeq	r0, r5, #4, 2
    2220:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2224:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    2228:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    222c:	11052f01 	tstne	r5, r1, lsl #30
    2230:	2e0d051d 	mcrcs	5, 0, r0, cr13, cr13, {0}
    2234:	2f060305 	svccs	0x00060305
    2238:	01060805 	tsteq	r6, r5, lsl #16
    223c:	01000302 	tsteq	r0, r2, lsl #6
    2240:	002b0501 	eoreq	r0, fp, r1, lsl #10
    2244:	00000205 	andeq	r0, r0, r5, lsl #4
    2248:	cd030000 	stcgt	0, cr0, [r3, #-0]
    224c:	02050104 	andeq	r0, r5, #4, 2
    2250:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2254:	024b0205 	subeq	r0, fp, #1342177280	; 0x50000000
    2258:	01010002 	tsteq	r1, r2
    225c:	05003305 	streq	r3, [r0, #-773]	; 0xfffffcfb
    2260:	00000002 	andeq	r0, r0, r2
    2264:	04d30300 	ldrbeq	r0, [r3], #768	; 0x300
    2268:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    226c:	01000302 	tsteq	r0, r2, lsl #6
    2270:	00370501 	eorseq	r0, r7, r1, lsl #10
    2274:	10020205 	andne	r0, r2, r5, lsl #4
    2278:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
    227c:	02050104 	andeq	r0, r5, #4, 2
    2280:	2e080514 	mcrcs	5, 0, r0, cr8, cr4, {0}
    2284:	30060105 	andcc	r0, r6, r5, lsl #2
    2288:	1f060305 	svcne	0x00060305
    228c:	01060d05 	tsteq	r6, r5, lsl #26
    2290:	022e0b05 	eoreq	r0, lr, #5120	; 0x1400
    2294:	01010003 	tsteq	r1, r3
    2298:	05002e05 	streq	r2, [r0, #-3589]	; 0xfffff1fb
    229c:	00000002 	andeq	r0, r0, r2
    22a0:	04de0300 	ldrbeq	r0, [lr], #768	; 0x300
    22a4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22a8:	05200805 	streq	r0, [r0, #-2053]!	; 0xfffff7fb
    22ac:	05300601 	ldreq	r0, [r0, #-1537]!	; 0xfffff9ff
    22b0:	051f0603 	ldreq	r0, [pc, #-1539]	; 1cb5 <vscan+0x1bd>
    22b4:	0201060b 	andeq	r0, r1, #11534336	; 0xb00000
    22b8:	01010003 	tsteq	r1, r3
    22bc:	05002b05 	streq	r2, [r0, #-2821]	; 0xfffff4fb
    22c0:	00101802 	andseq	r1, r0, r2, lsl #16
    22c4:	04e80300 	strbteq	r0, [r8], #768	; 0x300
    22c8:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    22cc:	10062b05 	andne	r2, r6, r5, lsl #22
    22d0:	05220505 	streq	r0, [r2, #-1285]!	; 0xfffffafb
    22d4:	06210603 	strteq	r0, [r1], -r3, lsl #12
    22d8:	06020531 			; <UNDEFINED> instruction: 0x06020531
    22dc:	060c052d 	streq	r0, [ip], -sp, lsr #10
    22e0:	20050501 	andcs	r0, r5, r1, lsl #10
    22e4:	2f060305 	svccs	0x00060305
    22e8:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    22ec:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    22f0:	05022101 	streq	r2, [r2, #-257]	; 0xfffffeff
    22f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    22f8:	02050045 	andeq	r0, r5, #69	; 0x45
    22fc:	0000103c 	andeq	r1, r0, ip, lsr r0
    2300:	0104f803 	tsteq	r4, r3, lsl #16	; <UNPREDICTABLE>
    2304:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2308:	0e064505 	cfsh32eq	mvfx4, mvfx6, #5
    230c:	5c05052e 	cfstr32pl	mvfx0, [r5], {46}	; 0x2e
    2310:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
    2314:	03054a19 	movweq	r4, #23065	; 0x5a19
    2318:	02052106 	andeq	r2, r5, #-2147483647	; 0x80000001
    231c:	0605054c 	streq	r0, [r5], -ip, asr #10
    2320:	06020501 	streq	r0, [r2], -r1, lsl #10
    2324:	060f0540 	streq	r0, [pc], -r0, asr #10
    2328:	06020501 	streq	r0, [r2], -r1, lsl #10
    232c:	0605054c 	streq	r0, [r5], -ip, asr #10
    2330:	06020501 	streq	r0, [r2], -r1, lsl #10
    2334:	06050531 			; <UNDEFINED> instruction: 0x06050531
    2338:	06030501 	streq	r0, [r3], -r1, lsl #10
    233c:	0606054f 	streq	r0, [r6], -pc, asr #10
    2340:	06030501 	streq	r0, [r3], -r1, lsl #10
    2344:	04055930 	streq	r5, [r5], #-2352	; 0xfffff6d0
    2348:	05010d03 	streq	r0, [r1, #-3331]	; 0xfffff2fd
    234c:	2e760302 	cdpcs	3, 7, cr0, cr6, cr2, {0}
    2350:	01060505 	tsteq	r6, r5, lsl #10
    2354:	35060305 	strcc	r0, [r6, #-773]	; 0xfffffcfb
    2358:	01060605 	tsteq	r6, r5, lsl #12
    235c:	4b060405 	blmi	183378 <__ccfg+0x1633d0>
    2360:	060b0559 			; <UNDEFINED> instruction: 0x060b0559
    2364:	06030501 	streq	r0, [r3], -r1, lsl #10
    2368:	060a0569 	streq	r0, [sl], -r9, ror #10
    236c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2370:	060a0559 			; <UNDEFINED> instruction: 0x060a0559
    2374:	05016103 	streq	r6, [r1, #-259]	; 0xfffffefd
    2378:	20290301 	eorcs	r0, r9, r1, lsl #6
    237c:	03060205 	movweq	r0, #25093	; 0x6205
    2380:	05052e7a 	streq	r2, [r5, #-3706]	; 0xfffff186
    2384:	03050106 	movweq	r0, #20742	; 0x5106
    2388:	02752f06 	rsbseq	r2, r5, #6, 30
    238c:	01010005 	tsteq	r1, r5
    2390:	05001a05 	streq	r1, [r0, #-2565]	; 0xfffff5fb
    2394:	0010d802 	andseq	sp, r0, r2, lsl #16
    2398:	05ef0300 	strbeq	r0, [pc, #768]!	; 26a0 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x70>
    239c:	17020501 	strne	r0, [r2, -r1, lsl #10]
    23a0:	05011303 	streq	r1, [r1, #-771]	; 0xfffffcfd
    23a4:	05010615 	streq	r0, [r1, #-1557]	; 0xfffff9eb
    23a8:	2068031a 	rsbcs	r0, r8, sl, lsl r3
    23ac:	18031505 	stmdane	r3, {r0, r2, r8, sl, ip}
    23b0:	580c0520 	stmdapl	ip, {r5, r8, sl}
    23b4:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    23b8:	05310603 	ldreq	r0, [r1, #-1539]!	; 0xfffff9fd
    23bc:	0d055202 	sfmeq	f5, 4, [r5, #-8]
    23c0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23c4:	17053e06 	strne	r3, [r5, -r6, lsl #28]
    23c8:	1d051506 	cfstr32ne	mvfx1, [r5, #-24]	; 0xffffffe8
    23cc:	2016052b 	andscs	r0, r6, fp, lsr #10
    23d0:	21060205 	tstcs	r6, r5, lsl #4
    23d4:	14061705 	strne	r1, [r6], #-1797	; 0xfffff8fb
    23d8:	31060205 	tstcc	r6, r5, lsl #4
    23dc:	01061a05 	tsteq	r6, r5, lsl #20
    23e0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    23e4:	2e2c0301 	cdpcs	3, 2, cr0, cr12, cr1, {0}
    23e8:	01000d02 	tsteq	r0, r2, lsl #26
    23ec:	001c0501 	andseq	r0, ip, r1, lsl #10
    23f0:	11280205 			; <UNDEFINED> instruction: 0x11280205
    23f4:	fb030000 	blx	c23fe <__ccfg+0xa2456>
    23f8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    23fc:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    2400:	7403061c 	strvc	r0, [r3], #-1564	; 0xfffff9e4
    2404:	03050501 	movweq	r0, #21761	; 0x5501
    2408:	0205200c 	andeq	r2, r5, #12
    240c:	07052506 	streq	r2, [r5, -r6, lsl #10]
    2410:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2414:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2418:	11054c2f 	tstne	r5, pc, lsr #24
    241c:	0f051606 	svceq	0x00051606
    2420:	3211051c 	andscc	r0, r1, #28, 10	; 0x7000000
    2424:	051c0f05 	ldreq	r0, [ip, #-3845]	; 0xfffff0fb
    2428:	05320602 	ldreq	r0, [r2, #-1538]!	; 0xfffff9fe
    242c:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    2430:	30300602 	eorscc	r0, r0, r2, lsl #12
    2434:	01061505 	tsteq	r6, r5, lsl #10
    2438:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    243c:	2f2f0603 	svccs	0x002f0603
    2440:	01061a05 	tsteq	r6, r5, lsl #20
    2444:	02420105 	subeq	r0, r2, #1073741825	; 0x40000001
    2448:	01010008 	tsteq	r1, r8
    244c:	05001705 	streq	r1, [r0, #-1797]	; 0xfffff8fb
    2450:	00117002 	andseq	r7, r1, r2
    2454:	03d80300 	bicseq	r0, r8, #0, 6
    2458:	16020501 	strne	r0, [r2], -r1, lsl #10
    245c:	06170514 			; <UNDEFINED> instruction: 0x06170514
    2460:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    2464:	03052605 	movweq	r2, #22021	; 0x5605
    2468:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    246c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    2470:	06020520 	streq	r0, [r2], -r0, lsr #10
    2474:	04051322 	streq	r1, [r5], #-802	; 0xfffffcde
    2478:	02051106 	andeq	r1, r5, #-2147483647	; 0x80000001
    247c:	032e0621 			; <UNDEFINED> instruction: 0x032e0621
    2480:	0305200f 	movweq	r2, #20495	; 0x500f
    2484:	054a7203 	strbeq	r7, [sl, #-515]	; 0xfffffdfd
    2488:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    248c:	053e0604 	ldreq	r0, [lr, #-1540]!	; 0xfffff9fc
    2490:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    2494:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2498:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    249c:	3d230604 	stccc	6, cr0, [r3, #-16]!
    24a0:	060a052f 	streq	r0, [sl], -pc, lsr #10
    24a4:	20070501 	andcs	r0, r7, r1, lsl #10
    24a8:	3d060505 	cfstr32cc	mvfx0, [r6, #-20]	; 0xffffffec
    24ac:	060d052a 	streq	r0, [sp], -sl, lsr #10
    24b0:	03010501 	movweq	r0, #5377	; 0x1501
    24b4:	0702580a 	streq	r5, [r2, -sl, lsl #16]
    24b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    24bc:	0205001c 	andeq	r0, r5, #28
    24c0:	00000000 	andeq	r0, r0, r0
    24c4:	0103f403 	tsteq	r3, r3, lsl #8	; <UNPREDICTABLE>
    24c8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    24cc:	05131314 	ldreq	r1, [r3, #-788]	; 0xfffffcec
    24d0:	7703061c 	smladvc	r3, ip, r6, r0
    24d4:	36040501 	strcc	r0, [r4], -r1, lsl #10
    24d8:	051f0605 	ldreq	r0, [pc, #-1541]	; 1edb <NOROM_CPUcpsie+0x3>
    24dc:	1c052209 	sfmne	f2, 4, [r5], {9}
    24e0:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    24e4:	2010030a 	andscs	r0, r0, sl, lsl #6
    24e8:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    24ec:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    24f0:	06020520 	streq	r0, [r2], -r0, lsr #10
    24f4:	11030601 	tstne	r3, r1, lsl #12
    24f8:	06050520 	streq	r0, [r5], -r0, lsr #10
    24fc:	06030501 	streq	r0, [r3], -r1, lsl #10
    2500:	2e6f0321 	cdpcs	3, 6, cr0, cr15, cr1, {1}
    2504:	01060605 	tsteq	r6, r5, lsl #12
    2508:	59060405 	stmdbpl	r6, {r0, r2, sl}
    250c:	06070513 			; <UNDEFINED> instruction: 0x06070513
    2510:	06050501 	streq	r0, [r5], -r1, lsl #10
    2514:	060b0521 	streq	r0, [fp], -r1, lsr #10
    2518:	06040501 	streq	r0, [r4], -r1, lsl #10
    251c:	06070531 			; <UNDEFINED> instruction: 0x06070531
    2520:	2f090501 	svccs	0x00090501
    2524:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    2528:	05052f2f 	streq	r2, [r5, #-3887]	; 0xfffff0d1
    252c:	060d0545 	streq	r0, [sp], -r5, asr #10
    2530:	03010501 	movweq	r0, #5377	; 0x1501
    2534:	07023c0d 	streq	r3, [r2, -sp, lsl #24]
    2538:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    253c:	02050020 	andeq	r0, r5, #32
    2540:	000011c0 	andeq	r1, r0, r0, asr #3
    2544:	0107a203 	tsteq	r7, r3, lsl #4
    2548:	161a0205 	ldrne	r0, [sl], -r5, lsl #4
    254c:	06050514 			; <UNDEFINED> instruction: 0x06050514
    2550:	06030501 	streq	r0, [r3], -r1, lsl #10
    2554:	06090525 	streq	r0, [r9], -r5, lsr #10
    2558:	0320050f 			; <UNDEFINED> instruction: 0x0320050f
    255c:	0d052e70 	stceq	14, cr2, [r5, #-448]	; 0xfffffe40
    2560:	05202303 	streq	r2, [r0, #-771]!	; 0xfffffcfd
    2564:	2070031a 	rsbscs	r0, r0, sl, lsl r3
    2568:	10030d05 	andne	r0, r3, r5, lsl #26
    256c:	2306052e 	movwcs	r0, #25902	; 0x652e
    2570:	6d030905 	vstrvs.16	s0, [r3, #-10]	; <UNPREDICTABLE>
    2574:	06020520 	streq	r0, [r2], -r0, lsr #10
    2578:	132e0f03 			; <UNDEFINED> instruction: 0x132e0f03
    257c:	05011f05 	streq	r1, [r1, #-3845]	; 0xfffff0fb
    2580:	06010602 	streq	r0, [r1], -r2, lsl #12
    2584:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2588:	01190303 	tsteq	r9, r3, lsl #6
    258c:	01061605 	tsteq	r6, r5, lsl #12
    2590:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2594:	052f0604 	streq	r0, [pc, #-1540]!	; 1f98 <TrimAfterColdResetWakeupFromShutDown+0xb8>
    2598:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    259c:	0d030603 	stceq	6, cr0, [r3, #-12]
    25a0:	0612052e 	ldreq	r0, [r2], -lr, lsr #10
    25a4:	06020501 	streq	r0, [r2], -r1, lsl #10
    25a8:	06090540 	streq	r0, [r9], -r0, asr #10
    25ac:	06030501 	streq	r0, [r3], -r1, lsl #10
    25b0:	05204f03 	streq	r4, [r0, #-3843]!	; 0xfffff0fd
    25b4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    25b8:	053d0604 	ldreq	r0, [sp, #-1540]!	; 0xfffff9fc
    25bc:	06054c03 	streq	r4, [r5], -r3, lsl #24
    25c0:	2e050106 	adfcss	f0, f5, f6
    25c4:	4a7a0306 	bmi	1e831e4 <__ccfg+0x1e6323c>
    25c8:	13060905 	movwne	r0, #26885	; 0x6905
    25cc:	44060205 	strmi	r0, [r6], #-517	; 0xfffffdfb
    25d0:	22140305 	andscs	r0, r4, #335544320	; 0x14000000
    25d4:	01060e05 	tsteq	r6, r5, lsl #28
    25d8:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    25dc:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    25e0:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    25e4:	052f0604 	streq	r0, [pc, #-1540]!	; 1fe8 <NOROM_SetupTrimDevice+0x34>
    25e8:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    25ec:	04052007 	streq	r2, [r5], #-7
    25f0:	18052f06 	stmdane	r5, {r1, r2, r8, r9, sl, fp, sp}
    25f4:	10050106 	andne	r0, r5, r6, lsl #2
    25f8:	06040520 	streq	r0, [r4], -r0, lsr #10
    25fc:	2e090530 	cfmv64hrcs	mvdx9, r0
    2600:	05150305 	ldreq	r0, [r5, #-773]	; 0xfffffcfb
    2604:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2608:	1a053012 	bne	14e658 <__ccfg+0x12e6b0>
    260c:	0603051e 			; <UNDEFINED> instruction: 0x0603051e
    2610:	06150522 	ldreq	r0, [r5], -r2, lsr #10
    2614:	2e120501 	cfmul32cs	mvfx0, mvfx2, mvfx1
    2618:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    261c:	01060e05 	tsteq	r6, r5, lsl #28
    2620:	05251205 	streq	r1, [r5, #-517]!	; 0xfffffdfb
    2624:	12052906 	andne	r2, r5, #98304	; 0x18000
    2628:	29060525 	stmdbcs	r6, {r0, r2, r5, r8, sl}
    262c:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    2630:	01061305 	tsteq	r6, r5, lsl #6
    2634:	31060305 	tstcc	r6, r5, lsl #6
    2638:	03060105 	movweq	r0, #24837	; 0x6105
    263c:	0e02011b 	mcreq	1, 0, r0, cr2, cr11, {0}
    2640:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2644:	0205002c 	andeq	r0, r5, #44	; 0x2c
    2648:	00001268 	andeq	r1, r0, r8, ror #4
    264c:	0102ab03 	tsteq	r2, r3, lsl #22
    2650:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    2654:	0e062c05 	cdpeq	12, 0, cr2, cr6, cr5, {0}
    2658:	24190520 	ldrcs	r0, [r9], #-1312	; 0xfffffae0
    265c:	051c2c05 	ldreq	r2, [ip, #-3077]	; 0xfffff3fb
    2660:	05052419 	streq	r2, [r5, #-1049]	; 0xfffffbe7
    2664:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    2668:	060a0523 	streq	r0, [sl], -r3, lsr #10
    266c:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    2670:	2077030c 	rsbscs	r0, r7, ip, lsl #6
    2674:	23260a05 			; <UNDEFINED> instruction: 0x23260a05
    2678:	05207603 	streq	r7, [r0, #-1539]!	; 0xfffff9fd
    267c:	182f0602 	stmdane	pc!, {r1, r9, sl}	; <UNPREDICTABLE>
    2680:	13140305 	tstne	r4, #335544320	; 0x14000000
    2684:	01060605 	tsteq	r6, r5, lsl #12
    2688:	21060405 	tstcs	r6, r5, lsl #8
    268c:	01060a05 	tsteq	r6, r5, lsl #20
    2690:	0f030105 	svceq	0x00030105
    2694:	060b0520 	streq	r0, [fp], -r0, lsr #10
    2698:	05207303 	streq	r7, [r0, #-771]!	; 0xfffffcfd
    269c:	0520060c 	streq	r0, [r0, #-1548]!	; 0xfffff9f4
    26a0:	2f062004 	svccs	0x00062004
    26a4:	01060c05 	tsteq	r6, r5, lsl #24
    26a8:	03060205 	movweq	r0, #25093	; 0x6205
    26ac:	0905200b 	stmdbeq	r5, {r0, r1, r3, sp}
    26b0:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    26b4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    26b8:	02050020 	andeq	r0, r5, #32
    26bc:	0000129c 	muleq	r0, ip, r2
    26c0:	01088103 	tsteq	r8, r3, lsl #2
    26c4:	09030205 	stmdbeq	r3, {r0, r2, r9}
    26c8:	06150501 	ldreq	r0, [r5], -r1, lsl #10
    26cc:	03200501 			; <UNDEFINED> instruction: 0x03200501
    26d0:	15052077 	strne	r2, [r5, #-119]	; 0xffffff89
    26d4:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    26d8:	05052302 	streq	r2, [r5, #-770]	; 0xfffffcfe
    26dc:	0603051d 			; <UNDEFINED> instruction: 0x0603051d
    26e0:	061a0521 	ldreq	r0, [sl], -r1, lsr #10
    26e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    26e8:	0004023e 	andeq	r0, r4, lr, lsr r2
    26ec:	21050101 	tstcs	r5, r1, lsl #2
    26f0:	00020500 	andeq	r0, r2, r0, lsl #10
    26f4:	03000000 	movweq	r0, #0
    26f8:	05010894 	streq	r0, [r1, #-2196]	; 0xfffff76c
    26fc:	01090302 	tsteq	r9, r2, lsl #6
    2700:	03062105 	movweq	r2, #24837	; 0x6105
    2704:	05050177 	streq	r0, [r5, #-375]	; 0xfffffe89
    2708:	053c0903 	ldreq	r0, [ip, #-2307]!	; 0xfffff6fd
    270c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2710:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2714:	08052e0a 	stmdaeq	r5, {r1, r3, r9, sl, fp, sp}
    2718:	22120520 	andscs	r0, r2, #32, 10	; 0x8000000
    271c:	051e0805 	ldreq	r0, [lr, #-2053]	; 0xfffff7fb
    2720:	054c0603 	strbeq	r0, [ip, #-1539]	; 0xfffff9fd
    2724:	09051402 	stmdbeq	r5, {r1, sl, ip}
    2728:	01050106 	tsteq	r5, r6, lsl #2
    272c:	0006025a 	andeq	r0, r6, sl, asr r2
    2730:	20050101 	andcs	r0, r5, r1, lsl #2
    2734:	00020500 	andeq	r0, r2, r0, lsl #10
    2738:	03000000 	movweq	r0, #0
    273c:	050108a7 	streq	r0, [r1, #-2215]	; 0xfffff759
    2740:	01090302 	tsteq	r9, r2, lsl #6
    2744:	20051413 	andcs	r1, r5, r3, lsl r4
    2748:	01740306 	cmneq	r4, r6, lsl #6
    274c:	0c031d05 	stceq	13, cr1, [r3], {5}
    2750:	2e120520 	cfmul64cs	mvdx0, mvdx2, mvdx0
    2754:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2758:	0520062f 	streq	r0, [r0, #-1583]!	; 0xfffff9d1
    275c:	06010602 	streq	r0, [r1], -r2, lsl #12
    2760:	06050524 	streq	r0, [r5], -r4, lsr #10
    2764:	0603052e 	streq	r0, [r3], -lr, lsr #10
    2768:	06070521 	streq	r0, [r7], -r1, lsr #10
    276c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2770:	0609054c 	streq	r0, [r9], -ip, asr #10
    2774:	3e010501 	cfsh32cc	mvfx0, mvfx1, #1
    2778:	03060305 	movweq	r0, #25349	; 0x6305
    277c:	23052e79 	movwcs	r2, #24185	; 0x5e79
    2780:	06052d06 	streq	r2, [r5], -r6, lsl #26
    2784:	0e054a06 	vmlaeq.f32	s8, s10, s12
    2788:	04020106 	streq	r0, [r2], #-262	; 0xfffffefa
    278c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2790:	02050023 	andeq	r0, r5, #35	; 0x23
    2794:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
    2798:	01098103 	tsteq	r9, r3, lsl #2
    279c:	13410205 	movtne	r0, #4613	; 0x1205
    27a0:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    27a4:	03062305 	movweq	r2, #25349	; 0x6305
    27a8:	02050175 	andeq	r0, r5, #1073741853	; 0x4000001d
    27ac:	1f3c0c03 	svcne	0x003c0c03
    27b0:	01012106 	tsteq	r1, r6, lsl #2
    27b4:	03060805 	movweq	r0, #26629	; 0x6805
    27b8:	02052028 	andeq	r2, r5, #40	; 0x28
    27bc:	05205803 	streq	r5, [r0, #-2051]!	; 0xfffff7fd
    27c0:	2023031c 	eorcs	r0, r3, ip, lsl r3
    27c4:	5d030205 	sfmpl	f0, 4, [r3, #-20]	; 0xffffffec
    27c8:	142e062e 	strtne	r0, [lr], #-1582	; 0xfffff9d2
    27cc:	05010805 	streq	r0, [r1, #-2053]	; 0xfffff7fb
    27d0:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    27d4:	02052008 	andeq	r2, r5, #8
    27d8:	00c70306 	sbceq	r0, r7, r6, lsl #6
    27dc:	043d3d20 	ldrteq	r3, [sp], #-3360	; 0xfffff2e0
    27e0:	060d0502 	streq	r0, [sp], -r2, lsl #10
    27e4:	017bcf03 	cmneq	fp, r3, lsl #30
    27e8:	0f050104 	svceq	0x00050104
    27ec:	04b10306 	ldrteq	r0, [r1], #774	; 0x306
    27f0:	01020520 	tsteq	r2, r0, lsr #10
    27f4:	24050204 	strcs	r0, [r5], #-516	; 0xfffffdfc
    27f8:	017bca03 	cmneq	fp, r3, lsl #20
    27fc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    2800:	0401060d 	streq	r0, [r1], #-1549	; 0xfffff9f3
    2804:	03020501 	movweq	r0, #9473	; 0x2501
    2808:	062004b1 			; <UNDEFINED> instruction: 0x062004b1
    280c:	5801012f 	stmdapl	r1, {r0, r1, r2, r3, r5, r8}
    2810:	13060105 	movwne	r0, #24837	; 0x6105
    2814:	03060305 	movweq	r0, #25349	; 0x6305
    2818:	05587fb6 	ldrbeq	r7, [r8, #-4022]	; 0xfffff04a
    281c:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2820:	134b0604 	movtne	r0, #46596	; 0xb604
    2824:	20060705 	andcs	r0, r6, r5, lsl #14
    2828:	4b060505 	blmi	183c44 <__ccfg+0x163c9c>
    282c:	09051313 	stmdbeq	r5, {r0, r1, r4, r8, r9, ip}
    2830:	052d0106 	streq	r0, [sp, #-262]!	; 0xfffffefa
    2834:	0805280c 	stmdaeq	r5, {r2, r3, fp, sp}
    2838:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    283c:	15320605 	ldrne	r0, [r2, #-1541]!	; 0xfffff9fb
    2840:	0f060805 	svceq	0x00060805
    2844:	25060405 	strcs	r0, [r6, #-1029]	; 0xfffffbfb
    2848:	31030505 	tstcc	r3, r5, lsl #10
    284c:	04053d74 	streq	r3, [r5], #-3444	; 0xfffff28c
    2850:	4a4e0306 	bmi	1383470 <__ccfg+0x13634c8>
    2854:	05411d05 	strbeq	r1, [r1, #-3333]	; 0xfffff2fb
    2858:	052d0606 	streq	r0, [sp, #-1542]!	; 0xfffff9fa
    285c:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    2860:	14210606 	strtne	r0, [r1], #-1542	; 0xfffff9fa
    2864:	11060b05 	tstne	r6, r5, lsl #22
    2868:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    286c:	0b052f06 	bleq	14e48c <__ccfg+0x12e4e4>
    2870:	04054606 	streq	r4, [r5], #-1542	; 0xfffff9fa
    2874:	052e3103 	streq	r3, [lr, #-259]!	; 0xfffffefd
    2878:	03010608 	movweq	r0, #5640	; 0x1608
    287c:	0505206a 	streq	r2, [r5, #-106]	; 0xffffff96
    2880:	2e6e0306 	cdpcs	3, 6, cr0, cr14, cr6, {0}
    2884:	06150513 			; <UNDEFINED> instruction: 0x06150513
    2888:	200e0501 	andcs	r0, lr, r1, lsl #10
    288c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2890:	3d2f0606 	stccc	6, cr0, [pc, #-24]!	; 2880 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x30>
    2894:	01060905 	tsteq	r6, r5, lsl #18
    2898:	21060705 	tstcs	r6, r5, lsl #14
    289c:	01060b05 	tsteq	r6, r5, lsl #22
    28a0:	59060605 	stmdbpl	r6, {r0, r2, r9, sl}
    28a4:	01060a05 	tsteq	r6, r5, lsl #20
    28a8:	23060505 	movwcs	r0, #25861	; 0x6505
    28ac:	01061c05 	tsteq	r6, r5, lsl #24
    28b0:	59060505 	stmdbpl	r6, {r0, r2, r8, sl}
    28b4:	05140605 	ldreq	r0, [r4, #-1541]	; 0xfffff9fb
    28b8:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    28bc:	06052e08 	streq	r2, [r5], -r8, lsl #28
    28c0:	09052106 	stmdbeq	r5, {r1, r2, r8, sp}
    28c4:	0c050106 	stfeqs	f0, [r5], {6}
    28c8:	06060520 	streq	r0, [r6], -r0, lsr #10
    28cc:	0608052f 	streq	r0, [r8], -pc, lsr #10
    28d0:	060b0501 	streq	r0, [fp], -r1, lsl #10
    28d4:	0608052a 	streq	r0, [r8], -sl, lsr #10
    28d8:	1d1c0514 	cfldr32ne	mvfx0, [ip, #-80]	; 0xffffffb0
    28dc:	35060505 	strcc	r0, [r6, #-1285]	; 0xfffffafb
    28e0:	59130605 	ldmdbpl	r3, {r0, r2, r9, sl}
    28e4:	14060905 	strne	r0, [r6], #-2309	; 0xfffff6fb
    28e8:	051f0805 	ldreq	r0, [pc, #-2053]	; 20eb <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x17>
    28ec:	06052d0a 	streq	r2, [r5], -sl, lsl #26
    28f0:	05132f06 	ldreq	r2, [r3, #-3846]	; 0xfffff0fa
    28f4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    28f8:	05210606 	streq	r0, [r1, #-1542]!	; 0xfffff9fa
    28fc:	05010616 	streq	r0, [r1, #-1558]	; 0xfffff9ea
    2900:	05222c08 	streq	r2, [r2, #-3080]!	; 0xfffff3f8
    2904:	051b060b 	ldreq	r0, [fp, #-1547]	; 0xfffff9f5
    2908:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    290c:	09030605 	stmdbeq	r3, {r0, r2, r9, sl}
    2910:	06080520 	streq	r0, [r8], -r0, lsr #10
    2914:	06060501 	streq	r0, [r6], -r1, lsl #10
    2918:	061c052f 	ldreq	r0, [ip], -pc, lsr #10
    291c:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    2920:	2e12030a 	cdpcs	3, 1, cr0, cr2, cr10, {0}
    2924:	03060505 	movweq	r0, #25861	; 0x6505
    2928:	0605206e 	streq	r2, [r5], -lr, rrx
    292c:	2f201703 	svccs	0x00201703
    2930:	01060705 	tsteq	r6, r5, lsl #14
    2934:	1e060b05 	vmlane.f64	d0, d6, d5
    2938:	01060c05 	tsteq	r6, r5, lsl #24
    293c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
    2940:	0c030604 	stceq	6, cr0, [r3], {4}
    2944:	000b023c 	andeq	r0, fp, ip, lsr r2
    2948:	0f050101 	svceq	0x00050101
    294c:	00020500 	andeq	r0, r2, r0, lsl #10
    2950:	03000000 	movweq	r0, #0
    2954:	05010aae 	streq	r0, [r1, #-2734]	; 0xfffff552
    2958:	25051302 	strcs	r1, [r5, #-770]	; 0xfffffcfe
    295c:	18050106 	stmdane	r5, {r1, r2, r8}
    2960:	2025052e 	eorcs	r0, r5, lr, lsr #10
    2964:	05201805 	streq	r1, [r0, #-2053]!	; 0xfffff7fb
    2968:	0c052025 	stceq	0, cr2, [r5], {37}	; 0x25
    296c:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2970:	05140621 	ldreq	r0, [r4, #-1569]	; 0xfffff9df
    2974:	08023101 	stmdaeq	r2, {r0, r8, ip, sp}
    2978:	b7010100 	strlt	r0, [r1, -r0, lsl #2]
    297c:	0300000c 	movweq	r0, #12
    2980:	0001a100 	andeq	sl, r1, r0, lsl #2
    2984:	fb010200 	blx	4318e <__ccfg+0x231e6>
    2988:	01000d0e 	tsteq	r0, lr, lsl #26
    298c:	00010101 	andeq	r0, r1, r1, lsl #2
    2990:	00010000 	andeq	r0, r1, r0
    2994:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    2998:	2f656d6f 	svccs	0x00656d6f
    299c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    29a0:	442f6e69 	strtmi	r6, [pc], #-3689	; 29a8 <AuxAdiDdiSafeWrite.constprop.1+0x10>
    29a4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    29a8:	4f2f706f 	svcmi	0x002f706f
    29ac:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    29b0:	502f5445 	eorpl	r5, pc, r5, asr #8
    29b4:	534f4349 	movtpl	r4, #62281	; 0xf349
    29b8:	6369502f 	cmnvs	r9, #47	; 0x2f
    29bc:	502f534f 	eorpl	r5, pc, pc, asr #6
    29c0:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    29c4:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
    29c8:	2f004974 	svccs	0x00004974
    29cc:	2f727375 	svccs	0x00727375
    29d0:	2f62696c 	svccs	0x0062696c
    29d4:	2f636367 	svccs	0x00636367
    29d8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    29dc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    29e0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    29e4:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    29e8:	2f312e32 	svccs	0x00312e32
    29ec:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    29f0:	00656475 	rsbeq	r6, r5, r5, ror r4
    29f4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2940 <NOROM_ChipInfo_GetHwRevision+0x2c>
    29f8:	616d2f65 	cmnvs	sp, r5, ror #30
    29fc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a00:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a04:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a08:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a0c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a10:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a14:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a18:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a1c:	3143432f 	cmpcc	r3, pc, lsr #6
    2a20:	00585833 	subseq	r5, r8, r3, lsr r8
    2a24:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2970 <NOROM_ChipInfo_GetHwRevision+0x5c>
    2a28:	616d2f65 	cmnvs	sp, r5, ror #30
    2a2c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    2a30:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    2a34:	706f746b 	rsbvc	r7, pc, fp, ror #8
    2a38:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    2a3c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    2a40:	4349502f 	movtmi	r5, #36911	; 0x902f
    2a44:	502f534f 	eorpl	r5, pc, pc, asr #6
    2a48:	534f6369 	movtpl	r6, #62313	; 0xf369
    2a4c:	6f682f00 	svcvs	0x00682f00
    2a50:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 28a4 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x54>
    2a54:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    2a58:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    2a5c:	6f746b73 	svcvs	0x00746b73
    2a60:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    2a64:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    2a68:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    2a6c:	2f534f43 	svccs	0x00534f43
    2a70:	4f636950 	svcmi	0x00636950
    2a74:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    2a78:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    2a7c:	63740000 	cmnvs	r4, #0
    2a80:	00632e76 	rsbeq	r2, r3, r6, ror lr
    2a84:	73000001 	movwvc	r0, #1
    2a88:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    2a8c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    2a90:	73000002 	movwvc	r0, #2
    2a94:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    2a98:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2a9c:	61000002 	tstvs	r0, r2
    2aa0:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    2aa4:	00030068 	andeq	r0, r3, r8, rrx
    2aa8:	63616d00 	cmnvs	r1, #0, 26
    2aac:	00682e68 	rsbeq	r2, r8, r8, ror #28
    2ab0:	70000003 	andvc	r0, r0, r3
    2ab4:	5f736e69 	svcpl	0x00736e69
    2ab8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    2abc:	00030068 	andeq	r0, r3, r8, rrx
    2ac0:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    2ac4:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    2ac8:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    2acc:	0300682e 	movweq	r6, #2094	; 0x82e
    2ad0:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    2ad4:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    2ad8:	00040068 	andeq	r0, r4, r8, rrx
    2adc:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
    2ae0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    2ae4:	00682e73 	rsbeq	r2, r8, r3, ror lr
    2ae8:	6b000001 	blvs	2af4 <NOROM_OSCClockSourceGet+0xd0>
    2aec:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    2af0:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    2af4:	74000005 	strvc	r0, [r0], #-5
    2af8:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
    2afc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    2b00:	00000100 	andeq	r0, r0, r0, lsl #2
    2b04:	5f766374 	svcpl	0x00766374
    2b08:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
    2b0c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    2b10:	00682e61 	rsbeq	r2, r8, r1, ror #28
    2b14:	3c000001 	stccc	0, cr0, [r0], {1}
    2b18:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2b1c:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    2b20:	0000003e 	andeq	r0, r0, lr, lsr r0
    2b24:	31050000 	mrscc	r0, (UNDEF: 5)
    2b28:	00020500 	andeq	r0, r2, r0, lsl #10
    2b2c:	03000000 	movweq	r0, #0
    2b30:	05010293 	streq	r0, [r1, #-659]	; 0xfffffd6d
    2b34:	14131702 	ldrne	r1, [r3], #-1794	; 0xfffff8fe
    2b38:	03063105 	movweq	r3, #24837	; 0x6105
    2b3c:	05200178 	streq	r0, [r0, #-376]!	; 0xfffffe88
    2b40:	16052607 	strne	r2, [r5], -r7, lsl #12
    2b44:	3c050522 	cfstr32cc	mvfx0, [r5], {34}	; 0x22
    2b48:	26060205 	strcs	r0, [r6], -r5, lsl #4
    2b4c:	13061a05 	movwne	r1, #27141	; 0x6a05
    2b50:	051f0e05 	ldreq	r0, [pc, #-3589]	; 1d53 <vscan+0x25b>
    2b54:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    2b58:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2b5c:	0c030602 	stceq	6, cr0, [r3], {2}
    2b60:	06010520 	streq	r0, [r1], -r0, lsr #10
    2b64:	00010216 	andeq	r0, r1, r6, lsl r2
    2b68:	2e050101 	adfcss	f0, f5, f1
    2b6c:	00020500 	andeq	r0, r2, r0, lsl #10
    2b70:	03000000 	movweq	r0, #0
    2b74:	050100fe 	streq	r0, [r1, #-254]	; 0xffffff02
    2b78:	06051602 	streq	r1, [r5], -r2, lsl #12
    2b7c:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    2b80:	06030520 	streq	r0, [r3], -r0, lsr #10
    2b84:	0629052f 	strteq	r0, [r9], -pc, lsr #10
    2b88:	2e1c0501 	cfmul32cs	mvfx0, mvfx12, mvfx1
    2b8c:	21060305 	tstcs	r6, r5, lsl #6
    2b90:	01062905 	tsteq	r6, r5, lsl #18
    2b94:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
    2b98:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2b9c:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    2ba0:	01024c01 	tsteq	r2, r1, lsl #24
    2ba4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2ba8:	0205002e 	andeq	r0, r5, #46	; 0x2e
    2bac:	00000000 	andeq	r0, r0, r0
    2bb0:	01028303 	tsteq	r2, r3, lsl #6
    2bb4:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    2bb8:	050e062e 	streq	r0, [lr, #-1582]	; 0xfffff9d2
    2bbc:	2f062402 	svccs	0x00062402
    2bc0:	01130101 	tsteq	r3, r1, lsl #2
    2bc4:	01051401 	tsteq	r5, r1, lsl #8
    2bc8:	02051306 	andeq	r1, r5, #402653184	; 0x18000000
    2bcc:	0002022d 	andeq	r0, r2, sp, lsr #4
    2bd0:	3a050101 	bcc	142fdc <__ccfg+0x123034>
    2bd4:	00020500 	andeq	r0, r2, r0, lsl #10
    2bd8:	03000000 	movweq	r0, #0
    2bdc:	050101a7 	streq	r0, [r1, #-423]	; 0xfffffe59
    2be0:	05240602 	streq	r0, [r4, #-1538]!	; 0xfffff9fe
    2be4:	02051c3a 	andeq	r1, r5, #14848	; 0x3a00
    2be8:	05012406 	streq	r2, [r1, #-1030]	; 0xfffffbfa
    2bec:	051c063a 	ldreq	r0, [ip, #-1594]	; 0xfffff9c6
    2bf0:	20062402 	andcs	r2, r6, r2, lsl #8
    2bf4:	0505134a 	streq	r1, [r5, #-842]	; 0xfffffcb6
    2bf8:	03050106 	movweq	r0, #20742	; 0x5106
    2bfc:	02053d06 	andeq	r3, r5, #384	; 0x180
    2c00:	0606052f 	streq	r0, [r6], -pc, lsr #10
    2c04:	20050501 	andcs	r0, r5, r1, lsl #10
    2c08:	30060305 	andcc	r0, r6, r5, lsl #6
    2c0c:	01061705 	tsteq	r6, r5, lsl #14
    2c10:	05211405 	streq	r1, [r1, #-1029]!	; 0xfffffbfb
    2c14:	052f0603 	streq	r0, [pc, #-1539]!	; 2619 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x139>
    2c18:	05010604 	streq	r0, [r1, #-1540]	; 0xfffff9fc
    2c1c:	03052011 	movweq	r2, #20497	; 0x5011
    2c20:	0b052106 	bleq	14b040 <__ccfg+0x12b098>
    2c24:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2c28:	19052806 	stmdbne	r5, {r1, r2, fp, sp}
    2c2c:	01050106 	tsteq	r5, r6, lsl #2
    2c30:	0603054b 	streq	r0, [r3], -fp, asr #10
    2c34:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    2c38:	05010614 	streq	r0, [r1, #-1556]	; 0xfffff9ec
    2c3c:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    2c40:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    2c44:	03052014 	movweq	r2, #20500	; 0x5014
    2c48:	11052106 	tstne	r5, r6, lsl #2
    2c4c:	03050106 	movweq	r0, #20742	; 0x5106
    2c50:	0b052106 	bleq	14b070 <__ccfg+0x12b0c8>
    2c54:	05020106 	streq	r0, [r2, #-262]	; 0xfffffefa
    2c58:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2c5c:	0205003a 	andeq	r0, r5, #58	; 0x3a
    2c60:	00000000 	andeq	r0, r0, r0
    2c64:	0101df03 	tsteq	r1, r3, lsl #30
    2c68:	02052006 	andeq	r2, r5, #6
    2c6c:	20090306 	andcs	r0, r9, r6, lsl #6
    2c70:	84040530 	strhi	r0, [r4], #-1328	; 0xfffffad0
    2c74:	01061b05 	tsteq	r6, r5, lsl #22
    2c78:	4c060405 	cfstrsmi	mvf0, [r6], {5}
    2c7c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    2c80:	0627064a 	strteq	r0, [r7], -sl, asr #12
    2c84:	133c7903 	teqne	ip, #49152	; 0xc000
    2c88:	03060105 	movweq	r0, #24837	; 0x6105
    2c8c:	04052012 	streq	r2, [r5], #-18	; 0xffffffee
    2c90:	062e7503 	strteq	r7, [lr], -r3, lsl #10
    2c94:	061b052b 	ldreq	r0, [fp], -fp, lsr #10
    2c98:	06040501 	streq	r0, [r4], -r1, lsl #10
    2c9c:	2e90014c 	fmlcssm	f0, f0, #4.0
    2ca0:	01055b13 	tsteq	r5, r3, lsl fp
    2ca4:	04051a06 	streq	r1, [r5], #-2566	; 0xfffff5fa
    2ca8:	052e7803 	streq	r7, [lr, #-2051]!	; 0xfffff7fd
    2cac:	0c023601 	stceq	6, cr3, [r2], {1}
    2cb0:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2cb4:	02050031 	andeq	r0, r5, #49	; 0x31
    2cb8:	00000000 	andeq	r0, r0, r0
    2cbc:	0102ba03 	tsteq	r2, r3, lsl #20
    2cc0:	14180205 	ldrne	r0, [r8], #-517	; 0xfffffdfb
    2cc4:	03063105 	movweq	r3, #24837	; 0x6105
    2cc8:	06050178 			; <UNDEFINED> instruction: 0x06050178
    2ccc:	05200903 	streq	r0, [r0, #-2307]!	; 0xfffff6fd
    2cd0:	02052d04 	andeq	r2, r5, #4, 26	; 0x100
    2cd4:	05052f06 	streq	r2, [r5, #-3846]	; 0xfffff0fa
    2cd8:	03050106 	movweq	r0, #20742	; 0x5106
    2cdc:	06012f06 	streq	r2, [r1], -r6, lsl #30
    2ce0:	064a0666 	strbeq	r0, [sl], -r6, ror #12
    2ce4:	133b0621 	teqne	fp, #34603008	; 0x2100000
    2ce8:	4a660601 	bmi	19844f4 <__ccfg+0x196454c>
    2cec:	132e2e06 			; <UNDEFINED> instruction: 0x132e2e06
    2cf0:	03060105 	movweq	r0, #24837	; 0x6105
    2cf4:	03053c09 	movweq	r3, #23561	; 0x5c09
    2cf8:	062e7703 	strteq	r7, [lr], -r3, lsl #14
    2cfc:	06010536 			; <UNDEFINED> instruction: 0x06010536
    2d00:	2d030521 	cfstr32cs	mvfx0, [r3, #-132]	; 0xffffff7c
    2d04:	01000b02 	tsteq	r0, r2, lsl #22
    2d08:	004a0501 	subeq	r0, sl, r1, lsl #10
    2d0c:	00000205 	andeq	r0, r0, r5, lsl #4
    2d10:	f5030000 			; <UNDEFINED> instruction: 0xf5030000
    2d14:	02050103 	andeq	r0, r5, #-1073741824	; 0xc0000000
    2d18:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    2d1c:	064a0513 			; <UNDEFINED> instruction: 0x064a0513
    2d20:	3c017903 			; <UNDEFINED> instruction: 0x3c017903
    2d24:	0b030505 	bleq	c4140 <__ccfg+0xa4198>
    2d28:	034a053c 	movteq	r0, #42300	; 0xa53c
    2d2c:	02052075 	andeq	r2, r5, #117	; 0x75
    2d30:	05240627 	streq	r0, [r4, #-1575]!	; 0xfffff9d9
    2d34:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    2d38:	25052030 	strcs	r2, [r5, #-48]	; 0xffffffd0
    2d3c:	3d0c0520 	cfstr32cc	mvfx0, [ip, #-128]	; 0xffffff80
    2d40:	053c3005 	ldreq	r3, [ip, #-5]!
    2d44:	04052025 	streq	r2, [r5], #-37	; 0xffffffdb
    2d48:	03054b06 	movweq	r4, #23302	; 0x5b06
    2d4c:	2e150306 	cdpcs	3, 1, cr0, cr5, cr6, {0}
    2d50:	03060205 	movweq	r0, #25093	; 0x6205
    2d54:	13132e6e 	tstne	r3, #1760	; 0x6e0
    2d58:	06120517 			; <UNDEFINED> instruction: 0x06120517
    2d5c:	06020501 	streq	r0, [r2], -r1, lsl #10
    2d60:	010f0576 	tsteq	pc, r6, ror r5	; <UNPREDICTABLE>
    2d64:	20060a05 	andcs	r0, r6, r5, lsl #20
    2d68:	2f060305 	svccs	0x00060305
    2d6c:	01061305 	tsteq	r6, r5, lsl #6
    2d70:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2d74:	051f0622 	ldreq	r0, [pc, #-1570]	; 275a <NOROM_SysCtrlSetRechargeBeforePowerDown+0x12a>
    2d78:	05010624 	streq	r0, [r1, #-1572]	; 0xfffff9dc
    2d7c:	0520060f 	streq	r0, [r0, #-1551]!	; 0xfffff9f1
    2d80:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    2d84:	0105330a 	tsteq	r5, sl, lsl #6
    2d88:	052e1303 	streq	r1, [lr, #-771]!	; 0xfffffcfd
    2d8c:	73030602 	movwvc	r0, #13826	; 0x3602
    2d90:	061a0566 	ldreq	r0, [sl], -r6, ror #10
    2d94:	39130515 	ldmdbcc	r3, {r0, r2, r4, r8, sl}
    2d98:	2f060205 	svccs	0x00060205
    2d9c:	14061a05 	strne	r1, [r6], #-2565	; 0xfffff5fb
    2da0:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    2da4:	0114132f 	tsteq	r4, pc, lsr #6
    2da8:	05143c4a 	ldreq	r3, [r4, #-3146]	; 0xfffff3b6
    2dac:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    2db0:	02054a05 	andeq	r4, r5, #20480	; 0x5000
    2db4:	13053206 	movwne	r3, #20998	; 0x5206
    2db8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dbc:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    2dc0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    2dc4:	206d0306 	rsbcs	r0, sp, r6, lsl #6
    2dc8:	06130515 			; <UNDEFINED> instruction: 0x06130515
    2dcc:	06020501 	streq	r0, [r2], -r1, lsl #10
    2dd0:	0605053d 			; <UNDEFINED> instruction: 0x0605053d
    2dd4:	06030501 	streq	r0, [r3], -r1, lsl #10
    2dd8:	0010023d 	andseq	r0, r0, sp, lsr r2
    2ddc:	3a050101 	bcc	1431e8 <__ccfg+0x123240>
    2de0:	00020500 	andeq	r0, r2, r0, lsl #10
    2de4:	03000000 	movweq	r0, #0
    2de8:	050104a8 	streq	r0, [r1, #-1192]	; 0xfffffb58
    2dec:	14131402 	ldrne	r1, [r3], #-1026	; 0xfffffbfe
    2df0:	063a0501 	ldrteq	r0, [sl], -r1, lsl #10
    2df4:	0205201b 	andeq	r2, r5, #27
    2df8:	4a062025 	bmi	18ae94 <__ccfg+0x16aeec>
    2dfc:	03062706 	movweq	r2, #26374	; 0x6706
    2e00:	14143c79 	ldrne	r3, [r4], #-3193	; 0xfffff387
    2e04:	58060115 	stmdapl	r6, {r0, r2, r4, r8}
    2e08:	2e2e064a 	cfmadda32cs	mvax2, mvax0, mvfx14, mvfx10
    2e0c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    2e10:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    2e14:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    2e18:	13410603 	movtne	r0, #5635	; 0x1603
    2e1c:	052b0805 	streq	r0, [fp, #-2053]!	; 0xfffff7fb
    2e20:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    2e24:	02052008 	andeq	r2, r5, #8
    2e28:	053d3306 	ldreq	r3, [sp, #-774]!	; 0xfffffcfa
    2e2c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    2e30:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    2e34:	02130601 	andseq	r0, r3, #1048576	; 0x100000
    2e38:	0101000b 	tsteq	r1, fp
    2e3c:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    2e40:	00000002 	andeq	r0, r0, r2
    2e44:	04c90300 	strbeq	r0, [r9], #768	; 0x300
    2e48:	16020501 	strne	r0, [r2], -r1, lsl #10
    2e4c:	01060505 	tsteq	r6, r5, lsl #10
    2e50:	052f0f05 	streq	r0, [pc, #-3845]!	; 1f53 <TrimAfterColdResetWakeupFromShutDown+0x73>
    2e54:	1d053b26 	vstrne	d3, [r5, #-152]	; 0xffffff68
    2e58:	06020521 	streq	r0, [r2], -r1, lsr #10
    2e5c:	06100531 			; <UNDEFINED> instruction: 0x06100531
    2e60:	06020501 	streq	r0, [r2], -r1, lsl #10
    2e64:	0609052f 	streq	r0, [r9], -pc, lsr #10
    2e68:	2b0a0501 	blcs	284274 <__ccfg+0x2642cc>
    2e6c:	02320105 	eorseq	r0, r2, #1073741825	; 0x40000001
    2e70:	01010004 	tsteq	r1, r4
    2e74:	05003c05 	streq	r3, [r0, #-3077]	; 0xfffff3fb
    2e78:	00000002 	andeq	r0, r0, r2
    2e7c:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
    2e80:	19020501 	stmdbne	r2, {r0, r8, sl}
    2e84:	01141313 	tsteq	r4, r3, lsl r3
    2e88:	03063c05 	movweq	r3, #27653	; 0x6c05
    2e8c:	05202075 	streq	r2, [r0, #-117]!	; 0xffffff8b
    2e90:	200b0302 	andcs	r0, fp, r2, lsl #6
    2e94:	064a0620 	strbeq	r0, [sl], -r0, lsr #12
    2e98:	06201303 	strteq	r1, [r0], -r3, lsl #6
    2e9c:	143c6d03 	ldrtne	r6, [ip], #-3331	; 0xfffff2fd
    2ea0:	06040513 			; <UNDEFINED> instruction: 0x06040513
    2ea4:	06020501 	streq	r0, [r2], -r1, lsl #10
    2ea8:	06050521 	streq	r0, [r5], -r1, lsr #10
    2eac:	06030501 	streq	r0, [r3], -r1, lsl #10
    2eb0:	06060530 			; <UNDEFINED> instruction: 0x06060530
    2eb4:	06040501 	streq	r0, [r4], -r1, lsl #10
    2eb8:	02053d4b 	andeq	r3, r5, #4800	; 0x12c0
    2ebc:	01013d33 	tsteq	r1, r3, lsr sp
    2ec0:	05140615 	ldreq	r0, [r4, #-1557]	; 0xfffff9eb
    2ec4:	02051e04 	andeq	r1, r5, #4, 28	; 0x40
    2ec8:	06013006 	streq	r3, [r1], -r6
    2ecc:	2e064a4a 	vmlscs.f32	s8, s12, s20
    2ed0:	053e132e 	ldreq	r1, [lr, #-814]!	; 0xfffffcd2
    2ed4:	05130622 	ldreq	r0, [r3, #-1570]	; 0xfffff9de
    2ed8:	02055715 	andeq	r5, r5, #5505024	; 0x540000
    2edc:	01052306 	tsteq	r5, r6, lsl #6
    2ee0:	0a051306 	beq	147b00 <__ccfg+0x127b58>
    2ee4:	022e7003 	eoreq	r7, lr, #3
    2ee8:	0101000b 	tsteq	r1, fp
    2eec:	05003805 	streq	r3, [r0, #-2053]	; 0xfffff7fb
    2ef0:	00000002 	andeq	r0, r0, r2
    2ef4:	04fc0300 	ldrbteq	r0, [ip], #768	; 0x300
    2ef8:	16020501 	strne	r0, [r2], -r1, lsl #10
    2efc:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    2f00:	06380501 	ldrteq	r0, [r8], -r1, lsl #10
    2f04:	05207703 	streq	r7, [r0, #-1795]!	; 0xfffff8fd
    2f08:	20090302 	andcs	r0, r9, r2, lsl #6
    2f0c:	054a0620 	strbeq	r0, [sl, #-1568]	; 0xfffff9e0
    2f10:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    2f14:	0602052e 	streq	r0, [r2], -lr, lsr #10
    2f18:	142e7703 	strtne	r7, [lr], #-1795	; 0xfffff8fd
    2f1c:	061a0514 			; <UNDEFINED> instruction: 0x061a0514
    2f20:	20050501 	andcs	r0, r5, r1, lsl #10
    2f24:	2f060305 	svccs	0x00060305
    2f28:	13190205 	tstne	r9, #1342177280	; 0x50000000
    2f2c:	01061b05 	tsteq	r6, r5, lsl #22
    2f30:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2f34:	0a030603 	beq	c4748 <__ccfg+0xa47a0>
    2f38:	06050520 	streq	r0, [r5], -r0, lsr #10
    2f3c:	05017503 	streq	r7, [r1, #-1283]	; 0xfffffafd
    2f40:	200b030a 	andcs	r0, fp, sl, lsl #6
    2f44:	20061a05 	andcs	r1, r6, r5, lsl #20
    2f48:	01060305 	tsteq	r6, r5, lsl #6
    2f4c:	2f060405 	svccs	0x00060405
    2f50:	11062c05 	tstne	r6, r5, lsl #24
    2f54:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    2f58:	051f062a 	ldreq	r0, [pc, #-1578]	; 2936 <NOROM_ChipInfo_GetHwRevision+0x22>
    2f5c:	206f0309 	rsbcs	r0, pc, r9, lsl #6
    2f60:	01062105 	tsteq	r6, r5, lsl #2
    2f64:	05200c05 	streq	r0, [r0, #-3077]!	; 0xfffff3fb
    2f68:	052f0603 	streq	r0, [pc, #-1539]!	; 296d <NOROM_ChipInfo_GetHwRevision+0x59>
    2f6c:	05010620 	streq	r0, [r1, #-1568]	; 0xfffff9e0
    2f70:	20052006 	andcs	r2, r5, r6
    2f74:	20060520 	andcs	r0, r6, r0, lsr #10
    2f78:	33060205 	movwcc	r0, #25093	; 0x6205
    2f7c:	06050513 			; <UNDEFINED> instruction: 0x06050513
    2f80:	06030501 	streq	r0, [r3], -r1, lsl #10
    2f84:	0505422a 	streq	r4, [r5, #-554]	; 0xfffffdd6
    2f88:	0a050f06 	beq	146ba8 <__ccfg+0x126c00>
    2f8c:	061a0523 	ldreq	r0, [sl], -r3, lsr #10
    2f90:	06030520 	streq	r0, [r3], -r0, lsr #10
    2f94:	03010501 	movweq	r0, #5377	; 0x1501
    2f98:	04052e0d 	streq	r2, [r5], #-3597	; 0xfffff1f3
    2f9c:	20740306 	rsbscs	r0, r4, r6, lsl #6
    2fa0:	01060805 	tsteq	r6, r5, lsl #16
    2fa4:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
    2fa8:	052f0605 	streq	r0, [pc, #-1541]!	; 29ab <AuxAdiDdiSafeWrite.constprop.1+0x13>
    2fac:	0510062c 	ldreq	r0, [r0, #-1580]	; 0xfffff9d4
    2fb0:	2a052207 	bcs	14b7d4 <__ccfg+0x12b82c>
    2fb4:	0a021e06 	beq	8a7d4 <__ccfg+0x6a82c>
    2fb8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    2fbc:	02050038 	andeq	r0, r5, #56	; 0x38
    2fc0:	00000000 	andeq	r0, r0, r0
    2fc4:	0105a303 	tsteq	r5, r3, lsl #6
    2fc8:	13160205 	tstne	r6, #1342177280	; 0x50000000
    2fcc:	01141313 	tsteq	r4, r3, lsl r3
    2fd0:	03063805 	movweq	r3, #26629	; 0x6805
    2fd4:	02052077 	andeq	r2, r5, #119	; 0x77
    2fd8:	20200903 	eorcs	r0, r0, r3, lsl #18
    2fdc:	03054a06 	movweq	r4, #23046	; 0x5a06
    2fe0:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    2fe4:	03060205 	movweq	r0, #25093	; 0x6205
    2fe8:	14142e77 	ldrne	r2, [r4], #-3703	; 0xfffff189
    2fec:	01061a05 	tsteq	r6, r5, lsl #20
    2ff0:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    2ff4:	052f0603 	streq	r0, [pc, #-1539]!	; 29f9 <NOROM_OSCClockSourceSet+0x31>
    2ff8:	05051902 	streq	r1, [r5, #-2306]	; 0xfffff6fe
    2ffc:	1b050106 	blne	14341c <__ccfg+0x123474>
    3000:	03380520 	teqeq	r8, #32, 10	; 0x8000000
    3004:	0305206b 	movweq	r2, #20587	; 0x506b
    3008:	7cb30306 	ldcvc	3, cr0, [r3], #24
    300c:	06050520 	streq	r0, [r5], -r0, lsr #10
    3010:	06030501 	streq	r0, [r3], -r1, lsl #10
    3014:	06060521 	streq	r0, [r6], -r1, lsr #10
    3018:	06030501 	streq	r0, [r3], -r1, lsl #10
    301c:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3020:	01061305 	tsteq	r6, r5, lsl #6
    3024:	20060f05 	andcs	r0, r6, r5, lsl #30
    3028:	13060505 	movwne	r0, #25861	; 0x6505
    302c:	03060905 	movweq	r0, #26885	; 0x6905
    3030:	052003dc 	streq	r0, [r0, #-988]!	; 0xfffffc24
    3034:	05010621 	streq	r0, [r1, #-1569]	; 0xfffff9df
    3038:	0305200c 	movweq	r2, #20492	; 0x500c
    303c:	20052f06 	andcs	r2, r5, r6, lsl #30
    3040:	06050106 	streq	r0, [r5], -r6, lsl #2
    3044:	20200520 	eorcs	r0, r0, r0, lsr #10
    3048:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    304c:	05330602 	ldreq	r0, [r3, #-1538]!	; 0xfffff9fe
    3050:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3054:	052b0603 	streq	r0, [fp, #-1539]!	; 0xfffff9fd
    3058:	0a030601 	beq	c4864 <__ccfg+0xa48bc>
    305c:	0602053c 			; <UNDEFINED> instruction: 0x0602053c
    3060:	06090521 	streq	r0, [r9], -r1, lsr #10
    3064:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    3068:	06020520 	streq	r0, [r2], -r0, lsr #10
    306c:	03010501 	movweq	r0, #5377	; 0x1501
    3070:	03052e0a 	movweq	r2, #24074	; 0x5e0a
    3074:	2e770306 	cdpcs	3, 7, cr0, cr7, cr6, {0}
    3078:	01061e05 	tsteq	r6, r5, lsl #28
    307c:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    3080:	2f300604 	svccs	0x00300604
    3084:	01060605 	tsteq	r6, r5, lsl #12
    3088:	21060405 	tstcs	r6, r5, lsl #8
    308c:	051b2905 	ldreq	r2, [fp, #-2309]	; 0xfffff6fb
    3090:	0201062b 	andeq	r0, r1, #45088768	; 0x2b00000
    3094:	0101000a 	tsteq	r1, sl
    3098:	05001605 	streq	r1, [r0, #-1541]	; 0xfffff9fb
    309c:	00000002 	andeq	r0, r0, r2
    30a0:	05cd0300 	strbeq	r0, [sp, #768]	; 0x300
    30a4:	13020501 	movwne	r0, #9473	; 0x2501
    30a8:	14131313 	ldrne	r1, [r3], #-787	; 0xfffffced
    30ac:	06160501 	ldreq	r0, [r6], -r1, lsl #10
    30b0:	20207a03 	eorcs	r7, r0, r3, lsl #20
    30b4:	20420205 	subcs	r0, r2, r5, lsl #4
    30b8:	24064a06 	strcs	r4, [r6], #-2566	; 0xfffff5fa
    30bc:	14143806 	ldrne	r3, [r4], #-2054	; 0xfffff7fa
    30c0:	4a580601 	bmi	16048cc <__ccfg+0x15e4924>
    30c4:	162e2e06 	strtne	r2, [lr], -r6, lsl #28
    30c8:	01060e05 	tsteq	r6, r5, lsl #28
    30cc:	2f060205 	svccs	0x00060205
    30d0:	14060d05 	strne	r0, [r6], #-3333	; 0xfffff2fb
    30d4:	051e0e05 	ldreq	r0, [lr, #-3589]	; 0xfffff1fb
    30d8:	05300602 	ldreq	r0, [r0, #-1538]!	; 0xfffff9fe
    30dc:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    30e0:	03052e05 	movweq	r2, #24069	; 0x5e05
    30e4:	06052206 	streq	r2, [r5], -r6, lsl #4
    30e8:	0a050106 	beq	143508 <__ccfg+0x123560>
    30ec:	0301054e 	movweq	r0, #5454	; 0x154e
    30f0:	04052021 	streq	r2, [r5], #-33	; 0xffffffdf
    30f4:	2e5c0306 	cdpcs	3, 5, cr0, cr12, cr6, {0}
    30f8:	0117033d 	tsteq	r7, sp, lsr r3
    30fc:	6e030205 	cdpvs	2, 0, cr0, cr3, cr5, {0}
    3100:	2e3c012e 	rsfcsep	f0, f4, #0.5
    3104:	05010b03 	streq	r0, [r1, #-2819]	; 0xfffff4fd
    3108:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    310c:	0b054a17 	bleq	155970 <__ccfg+0x1359c8>
    3110:	58050520 	stmdapl	r5, {r5, r8, sl}
    3114:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    3118:	01060605 	tsteq	r6, r5, lsl #12
    311c:	4e060405 	cdpmi	4, 0, cr0, cr6, cr5, {0}
    3120:	05500205 	ldrbeq	r0, [r0, #-517]	; 0xfffffdfb
    3124:	05010610 	streq	r0, [r1, #-1552]	; 0xfffff9f0
    3128:	052f0602 	streq	r0, [pc, #-1538]!	; 2b2e <NOROM_OSCClockSourceGet+0x10a>
    312c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    3130:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3134:	0501061a 	streq	r0, [r1, #-1562]	; 0xfffff9e6
    3138:	054b0602 	strbeq	r0, [fp, #-1538]	; 0xfffff9fe
    313c:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    3140:	051f2f15 	ldreq	r2, [pc, #-3861]	; 2233 <NOROM_SetupGetTrimForAmpcompCtrl+0x1b>
    3144:	14210602 	strtne	r0, [r1], #-1538	; 0xfffff9fe
    3148:	01060905 	tsteq	r6, r5, lsl #18
    314c:	01000c02 	tsteq	r0, r2, lsl #24
    3150:	00440501 	subeq	r0, r4, r1, lsl #10
    3154:	00000205 	andeq	r0, r0, r5, lsl #4
    3158:	87030000 	strhi	r0, [r3, -r0]
    315c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3160:	06440516 			; <UNDEFINED> instruction: 0x06440516
    3164:	0205200e 	andeq	r2, r5, #14
    3168:	1a052606 	bne	14c988 <__ccfg+0x12c9e0>
    316c:	44050106 	strmi	r0, [r5], #-262	; 0xfffffefa
    3170:	052e7a03 	streq	r7, [lr, #-2563]!	; 0xfffff5fd
    3174:	09030602 	stmdbeq	r3, {r1, r9, sl}
    3178:	0605054a 	streq	r0, [r5], -sl, asr #10
    317c:	06030501 	streq	r0, [r3], -r1, lsl #10
    3180:	1605672f 	strne	r6, [r5], -pc, lsr #14
    3184:	03050106 	movweq	r0, #20742	; 0x5106
    3188:	16056706 	strne	r6, [r5], -r6, lsl #14
    318c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3190:	01055b06 	tsteq	r5, r6, lsl #22
    3194:	02021306 	andeq	r1, r2, #402653184	; 0x18000000
    3198:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    319c:	0205004b 	andeq	r0, r5, #75	; 0x4b
    31a0:	00000000 	andeq	r0, r0, r0
    31a4:	01069903 	tsteq	r6, r3, lsl #18
    31a8:	14160205 	ldrne	r0, [r6], #-517	; 0xfffffdfb
    31ac:	03064b05 	movweq	r4, #27397	; 0x6b05
    31b0:	1a05017a 	bne	1437a0 <__ccfg+0x1237f8>
    31b4:	034b0526 	movteq	r0, #46374	; 0xb526
    31b8:	02052e7a 	andeq	r2, r5, #1952	; 0x7a0
    31bc:	4a090306 	bmi	243ddc <__ccfg+0x223e34>
    31c0:	01060505 	tsteq	r6, r5, lsl #10
    31c4:	2f060305 	svccs	0x00060305
    31c8:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31cc:	06030501 	streq	r0, [r3], -r1, lsl #10
    31d0:	06160567 	ldreq	r0, [r6], -r7, ror #10
    31d4:	06020501 	streq	r0, [r2], -r1, lsl #10
    31d8:	0601055a 			; <UNDEFINED> instruction: 0x0601055a
    31dc:	00020213 	andeq	r0, r2, r3, lsl r2
    31e0:	31050101 	tstcc	r5, r1, lsl #2
    31e4:	00020500 	andeq	r0, r2, r0, lsl #10
    31e8:	03000000 	movweq	r0, #0
    31ec:	050106aa 	streq	r0, [r1, #-1706]	; 0xfffff956
    31f0:	05051602 	streq	r1, [r5, #-1538]	; 0xfffff9fe
    31f4:	03050106 	movweq	r0, #20742	; 0x5106
    31f8:	01052106 	tsteq	r5, r6, lsl #2
    31fc:	01023d06 	tsteq	r2, r6, lsl #26
    3200:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3204:	02050048 	andeq	r0, r5, #72	; 0x48
    3208:	00000000 	andeq	r0, r0, r0
    320c:	0106d103 	tsteq	r6, r3, lsl #2
    3210:	24060205 	strcs	r0, [r6], #-517	; 0xfffffdfb
    3214:	051c4805 	ldreq	r4, [ip, #-2053]	; 0xfffff7fb
    3218:	01240602 			; <UNDEFINED> instruction: 0x01240602
    321c:	0e064805 	cdpeq	8, 0, cr4, cr6, cr5, {0}
    3220:	24020520 	strcs	r0, [r2], #-1312	; 0xfffffae0
    3224:	4a4a0620 	bmi	1284aac <__ccfg+0x1264b04>
    3228:	06010513 			; <UNDEFINED> instruction: 0x06010513
    322c:	2d130513 	cfldr32cs	mvfx0, [r3, #-76]	; 0xffffffb4
    3230:	01000602 	tsteq	r0, r2, lsl #12
    3234:	00460501 	subeq	r0, r6, r1, lsl #10
    3238:	00000205 	andeq	r0, r0, r5, lsl #4
    323c:	b2030000 	andlt	r0, r3, #0
    3240:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3244:	06460517 			; <UNDEFINED> instruction: 0x06460517
    3248:	2505050d 	strcs	r0, [r5, #-1293]	; 0xfffffaf3
    324c:	2f060305 	svccs	0x00060305
    3250:	01060605 	tsteq	r6, r5, lsl #12
    3254:	30060305 	andcc	r0, r6, r5, lsl #6
    3258:	01060605 	tsteq	r6, r5, lsl #12
    325c:	2f060405 	svccs	0x00060405
    3260:	06070513 			; <UNDEFINED> instruction: 0x06070513
    3264:	06040501 	streq	r0, [r4], -r1, lsl #10
    3268:	060b0530 			; <UNDEFINED> instruction: 0x060b0530
    326c:	3c070501 	cfstr32cc	mvfx0, [r7], {1}
    3270:	22060405 	andcs	r0, r6, #83886080	; 0x5000000
    3274:	01060c05 	tsteq	r6, r5, lsl #24
    3278:	09030105 	stmdbeq	r3, {r0, r2, r8}
    327c:	06030520 	streq	r0, [r3], -r0, lsr #10
    3280:	05207a03 	streq	r7, [r0, #-2563]!	; 0xfffff5fd
    3284:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    3288:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    328c:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    3290:	014c0602 	cmpeq	ip, r2, lsl #12
    3294:	4a062e06 	bmi	18eab4 <__ccfg+0x16eb0c>
    3298:	3705134a 	strcc	r1, [r5, -sl, asr #6]
    329c:	01050106 	tsteq	r5, r6, lsl #2
    32a0:	2d090521 	cfstr32cs	mvfx0, [r9, #-132]	; 0xffffff7c
    32a4:	71030b05 	tstvc	r3, r5, lsl #22
    32a8:	000b023c 	andeq	r0, fp, ip, lsr r2
    32ac:	3d050101 	stfccs	f0, [r5, #-4]
    32b0:	00020500 	andeq	r0, r2, r0, lsl #10
    32b4:	03000000 	movweq	r0, #0
    32b8:	050106d9 	streq	r0, [r1, #-1753]	; 0xfffff927
    32bc:	05011602 	streq	r1, [r1, #-1538]	; 0xfffff9fe
    32c0:	051c063d 	ldreq	r0, [ip, #-1597]	; 0xfffff9c3
    32c4:	06202402 	strteq	r2, [r0], -r2, lsl #8
    32c8:	05134a4a 	ldreq	r4, [r3, #-2634]	; 0xfffff5b6
    32cc:	05010625 	streq	r0, [r1, #-1573]	; 0xfffff9db
    32d0:	05670602 	strbeq	r0, [r7, #-1538]!	; 0xfffff9fe
    32d4:	05010643 	streq	r0, [r1, #-1603]	; 0xfffff9bd
    32d8:	43052e22 	movwmi	r2, #24098	; 0x5e22
    32dc:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
    32e0:	024b0105 	subeq	r0, fp, #1073741825	; 0x40000001
    32e4:	01010005 	tsteq	r1, r5
    32e8:	05003d05 	streq	r3, [r0, #-3333]	; 0xfffff2fb
    32ec:	00000002 	andeq	r0, r0, r2
    32f0:	06e20300 	strbteq	r0, [r2], r0, lsl #6
    32f4:	16020501 	strne	r0, [r2], -r1, lsl #10
    32f8:	063d0501 	ldrteq	r0, [sp], -r1, lsl #10
    32fc:	2402051c 	strcs	r0, [r2], #-1308	; 0xfffffae4
    3300:	4a4a0620 	bmi	1284b88 <__ccfg+0x1264be0>
    3304:	06220513 			; <UNDEFINED> instruction: 0x06220513
    3308:	67010501 	strvs	r0, [r1, -r1, lsl #10]
    330c:	01000502 	tsteq	r0, r2, lsl #10
    3310:	00400501 	subeq	r0, r0, r1, lsl #10
    3314:	00000205 	andeq	r0, r0, r5, lsl #4
    3318:	ea030000 	b	c3320 <__ccfg+0xa3378>
    331c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3320:	40051416 	andmi	r1, r5, r6, lsl r4
    3324:	017a0306 	cmneq	sl, r6, lsl #6
    3328:	260c0520 	strcs	r0, [ip], -r0, lsr #10
    332c:	7a034005 	bvc	d3348 <__ccfg+0xb33a0>
    3330:	260c052e 	strcs	r0, [ip], -lr, lsr #10
    3334:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    3338:	84330602 	ldrthi	r0, [r3], #-1538	; 0xfffff9fe
    333c:	01061105 	tsteq	r6, r5, lsl #2
    3340:	05310205 	ldreq	r0, [r1, #-517]!	; 0xfffffdfb
    3344:	02051d11 	andeq	r1, r5, #1088	; 0x440
    3348:	05132106 	ldreq	r2, [r3, #-262]	; 0xfffffefa
    334c:	0511061a 	ldreq	r0, [r1, #-1562]	; 0xfffff9e6
    3350:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    3354:	01060905 	tsteq	r6, r5, lsl #18
    3358:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
    335c:	01010002 	tsteq	r1, r2
    3360:	05003e05 	streq	r3, [r0, #-3589]	; 0xfffff1fb
    3364:	00000002 	andeq	r0, r0, r2
    3368:	06fe0300 	ldrbteq	r0, [lr], r0, lsl #6
    336c:	16020501 	strne	r0, [r2], -r1, lsl #10
    3370:	01000302 	tsteq	r0, r2, lsl #6
    3374:	00450501 	subeq	r0, r5, r1, lsl #10
    3378:	00000205 	andeq	r0, r0, r5, lsl #4
    337c:	85030000 	strhi	r0, [r3, #-0]
    3380:	02050107 	andeq	r0, r5, #-1073741823	; 0xc0000001
    3384:	45051416 	strmi	r1, [r5, #-1046]	; 0xfffffbea
    3388:	017a0306 	cmneq	sl, r6, lsl #6
    338c:	2605052e 	strcs	r0, [r5], -lr, lsr #10
    3390:	31060305 	tstcc	r6, r5, lsl #6
    3394:	01060605 	tsteq	r6, r5, lsl #12
    3398:	2f060405 	svccs	0x00060405
    339c:	2f060305 	svccs	0x00060305
    33a0:	06012e06 	streq	r2, [r1], -r6, lsl #28
    33a4:	3c4a062e 	mcrrcc	6, 2, r0, sl, cr14
    33a8:	05011d03 	streq	r1, [r1, #-3331]	; 0xfffff2fd
    33ac:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    33b0:	0a052e06 	beq	14ebd0 <__ccfg+0x12ec28>
    33b4:	27010535 	smladxcs	r1, r5, r5, r0
    33b8:	03060405 	movweq	r0, #25605	; 0x6405
    33bc:	20052073 	andcs	r2, r5, r3, ror r0
    33c0:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    33c4:	1d120531 	cfldr32ne	mvfx0, [r2, #-196]	; 0xffffff3c
    33c8:	30060405 	andcc	r0, r6, r5, lsl #8
    33cc:	01061d05 	tsteq	r6, r5, lsl #26
    33d0:	3d060405 	cfstrscc	mvf0, [r6, #-20]	; 0xffffffec
    33d4:	060b052f 	streq	r0, [fp], -pc, lsr #10
    33d8:	06020501 	streq	r0, [r2], -r1, lsl #10
    33dc:	060b0541 	streq	r0, [fp], -r1, asr #10
    33e0:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    33e4:	2f060305 	svccs	0x00060305
    33e8:	01060a05 	tsteq	r6, r5, lsl #20
    33ec:	01000902 	tsteq	r0, r2, lsl #18
    33f0:	00480501 	subeq	r0, r8, r1, lsl #10
    33f4:	00000205 	andeq	r0, r0, r5, lsl #4
    33f8:	86030000 	strhi	r0, [r3], -r0
    33fc:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3400:	05051418 	streq	r1, [r5, #-1048]	; 0xfffffbe8
    3404:	48050106 	stmdami	r5, {r1, r2, r8}
    3408:	20207803 	eorcs	r7, r0, r3, lsl #16
    340c:	05280505 	streq	r0, [r8, #-1285]!	; 0xfffffafb
    3410:	25052031 	strcs	r2, [r5, #-49]	; 0xffffffcf
    3414:	06030520 	streq	r0, [r3], -r0, lsr #10
    3418:	0535063d 	ldreq	r0, [r5, #-1597]!	; 0xfffff9c3
    341c:	05290602 	streq	r0, [r9, #-1538]!	; 0xfffff9fe
    3420:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    3424:	052f0602 	streq	r0, [pc, #-1538]!	; 2e2a <__exidx_end+0x1aa>
    3428:	05010611 	streq	r0, [r1, #-1553]	; 0xfffff9ef
    342c:	11052221 	tstne	r5, r1, lsr #4
    3430:	0602051e 			; <UNDEFINED> instruction: 0x0602051e
    3434:	06210530 			; <UNDEFINED> instruction: 0x06210530
    3438:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    343c:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3440:	01060505 	tsteq	r6, r5, lsl #10
    3444:	21060305 	tstcs	r6, r5, lsl #6
    3448:	343d0205 	ldrtcc	r0, [sp], #-517	; 0xfffffdfb
    344c:	13060105 	movwne	r0, #24837	; 0x6105
    3450:	01000b02 	tsteq	r0, r2, lsl #22
    3454:	00440501 	subeq	r0, r4, r1, lsl #10
    3458:	00000205 	andeq	r0, r0, r5, lsl #4
    345c:	a0030000 	andge	r0, r3, r0
    3460:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3464:	14131317 	ldrne	r1, [r3], #-791	; 0xfffffce9
    3468:	06440501 	strbeq	r0, [r4], -r1, lsl #10
    346c:	05017703 	streq	r7, [r1, #-1795]	; 0xfffff8fd
    3470:	2e090302 	cdpcs	3, 0, cr0, cr9, cr2, {0}
    3474:	77034405 	strvc	r4, [r3, -r5, lsl #8]
    3478:	03020520 	movweq	r0, #9504	; 0x2520
    347c:	06204a09 	strteq	r4, [r0], -r9, lsl #20
    3480:	0603054a 	streq	r0, [r3], -sl, asr #10
    3484:	05200d03 	streq	r0, [r0, #-3331]!	; 0xfffff2fd
    3488:	03054b0e 	movweq	r4, #23310	; 0x5b0e
    348c:	0f054706 	svceq	0x00054706
    3490:	06050106 	streq	r0, [r5], -r6, lsl #2
    3494:	0628053c 			; <UNDEFINED> instruction: 0x0628053c
    3498:	05207803 	streq	r7, [r0, #-2051]!	; 0xfffff7fd
    349c:	0205011e 	andeq	r0, r5, #-2147483641	; 0x80000007
    34a0:	0a050106 	beq	1438c0 <__ccfg+0x123918>
    34a4:	052e1603 	streq	r1, [lr, #-1539]!	; 0xfffff9fd
    34a8:	200d0301 	andcs	r0, sp, r1, lsl #6
    34ac:	03060305 	movweq	r0, #25349	; 0x6305
    34b0:	58013c67 	stmdapl	r1, {r0, r1, r2, r5, r6, sl, fp, ip, sp}
    34b4:	0e05132e 	cdpeq	3, 0, cr1, cr5, cr14, {1}
    34b8:	06050106 	streq	r0, [r5], -r6, lsl #2
    34bc:	06020574 			; <UNDEFINED> instruction: 0x06020574
    34c0:	06050542 	streq	r0, [r5], -r2, asr #10
    34c4:	06020501 	streq	r0, [r2], -r1, lsl #10
    34c8:	060c0536 			; <UNDEFINED> instruction: 0x060c0536
    34cc:	2e160501 	cfmul32cs	mvfx0, mvfx6, mvfx1
    34d0:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    34d4:	02052006 	andeq	r2, r5, #6
    34d8:	0b052306 	bleq	14c0f8 <__ccfg+0x12c150>
    34dc:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    34e0:	0602054a 	streq	r0, [r2], -sl, asr #10
    34e4:	09056832 	stmdbeq	r5, {r1, r4, r5, fp, sp, lr}
    34e8:	0a020106 	beq	83908 <__ccfg+0x63960>
    34ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    34f0:	0205003e 	andeq	r0, r5, #62	; 0x3e
    34f4:	00000000 	andeq	r0, r0, r0
    34f8:	0109d103 	tsteq	r9, r3, lsl #2
    34fc:	13170205 	tstne	r7, #1342177280	; 0x50000000
    3500:	3e050114 	mcrcc	1, 0, r0, cr5, cr4, {0}
    3504:	20780306 	rsbscs	r0, r8, r6, lsl #6
    3508:	20280205 	eorcs	r0, r8, r5, lsl #4
    350c:	144a4a06 	strbne	r4, [sl], #-2566	; 0xfffff5fa
    3510:	01060505 	tsteq	r6, r5, lsl #10
    3514:	3d060205 	sfmcc	f0, 4, [r6, #-20]	; 0xffffffec
    3518:	01060405 	tsteq	r6, r5, lsl #8
    351c:	21060205 	tstcs	r6, r5, lsl #4
    3520:	01060505 	tsteq	r6, r5, lsl #10
    3524:	33060205 	movwcc	r0, #25093	; 0x6205
    3528:	01060a05 	tsteq	r6, r5, lsl #20
    352c:	2f060205 	svccs	0x00060205
    3530:	1301012f 	movwne	r0, #4399	; 0x112f
    3534:	01060905 	tsteq	r6, r5, lsl #18
    3538:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
    353c:	2079030a 	rsbscs	r0, r9, sl, lsl #6
    3540:	01000902 	tsteq	r0, r2, lsl #18
    3544:	00340501 	eorseq	r0, r4, r1, lsl #10
    3548:	00000205 	andeq	r0, r0, r5, lsl #4
    354c:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
    3550:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    3554:	01141316 	tsteq	r4, r6, lsl r3
    3558:	03063405 	movweq	r3, #25605	; 0x6405
    355c:	02052079 	andeq	r2, r5, #121	; 0x79
    3560:	4a062027 	bmi	18b604 <__ccfg+0x16b65c>
    3564:	0505144a 	streq	r1, [r5, #-1098]	; 0xfffffbb6
    3568:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    356c:	04053d06 	streq	r3, [r5], #-3334	; 0xfffff2fa
    3570:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3574:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    3578:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    357c:	0a052306 	beq	14c19c <__ccfg+0x12c1f4>
    3580:	09051006 	stmdbeq	r5, {r1, r2, ip}
    3584:	21010530 	tstcs	r1, r0, lsr r5
    3588:	01000702 	tsteq	r0, r2, lsl #14
    358c:	00350501 	eorseq	r0, r5, r1, lsl #10
    3590:	00000205 	andeq	r0, r0, r5, lsl #4
    3594:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    3598:	02050109 	andeq	r0, r5, #1073741826	; 0x40000002
    359c:	06350516 			; <UNDEFINED> instruction: 0x06350516
    35a0:	2602050e 	strcs	r0, [r2], -lr, lsl #10
    35a4:	052c0c05 	streq	r0, [ip, #-3077]!	; 0xfffff3fb
    35a8:	01300602 	teqeq	r0, r2, lsl #12
    35ac:	064a4a06 	strbeq	r4, [sl], -r6, lsl #20
    35b0:	05134a2e 	ldreq	r4, [r3, #-2606]	; 0xfffff5d2
    35b4:	053e0601 	ldreq	r0, [lr, #-1537]!	; 0xfffff9ff
    35b8:	06022c02 	streq	r2, [r2], -r2, lsl #24
    35bc:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    35c0:	02050032 	andeq	r0, r5, #50	; 0x32
    35c4:	00000000 	andeq	r0, r0, r0
    35c8:	010a8403 	tsteq	sl, r3, lsl #8
    35cc:	01160205 	tsteq	r6, r5, lsl #4
    35d0:	1c063205 	sfmne	f3, 4, [r6], {5}
    35d4:	20240205 	eorcs	r0, r4, r5, lsl #4
    35d8:	134a4a06 	movtne	r4, #43526	; 0xaa06
    35dc:	03060a05 	movweq	r0, #27141	; 0x6a05
    35e0:	050177cc 	streq	r7, [r1, #-1996]	; 0xfffff834
    35e4:	08b40309 	ldmeq	r4!, {r0, r3, r8, r9}
    35e8:	06020520 	streq	r0, [r2], -r0, lsr #10
    35ec:	3c77c903 			; <UNDEFINED> instruction: 0x3c77c903
    35f0:	03051413 	movweq	r1, #21523	; 0x5413
    35f4:	06050513 			; <UNDEFINED> instruction: 0x06050513
    35f8:	06030501 	streq	r0, [r3], -r1, lsl #10
    35fc:	06060521 	streq	r0, [r6], -r1, lsr #10
    3600:	06030501 	streq	r0, [r3], -r1, lsl #10
    3604:	29110531 	ldmdbcs	r1, {r0, r4, r5, r8, sl}
    3608:	01061305 	tsteq	r6, r5, lsl #6
    360c:	20060f05 	andcs	r0, r6, r5, lsl #30
    3610:	13060505 	movwne	r0, #25861	; 0x6505
    3614:	b4030105 	strlt	r0, [r3], #-261	; 0xfffffefb
    3618:	08022008 	stmdaeq	r2, {r3, sp}
    361c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    3620:	02050028 	andeq	r0, r5, #40	; 0x28
    3624:	000013f0 	strdeq	r1, [r0], -r0
    3628:	010a8c03 	tsteq	sl, r3, lsl #24
    362c:	1a030105 	bne	c3a48 <__ccfg+0xa3aa0>
    3630:	00010201 	andeq	r0, r1, r1, lsl #4
    3634:	01230101 			; <UNDEFINED> instruction: 0x01230101
    3638:	00030000 	andeq	r0, r3, r0
    363c:	00000089 	andeq	r0, r0, r9, lsl #1
    3640:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    3644:	0101000d 	tsteq	r1, sp
    3648:	00000101 	andeq	r0, r0, r1, lsl #2
    364c:	00000100 	andeq	r0, r0, r0, lsl #2
    3650:	6f682f01 	svcvs	0x00682f01
    3654:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 34a8 <__exidx_end+0x828>
    3658:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    365c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3660:	6f746b73 	svcvs	0x00746b73
    3664:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3668:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    366c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3670:	2f534f43 	svccs	0x00534f43
    3674:	4f636950 	svcmi	0x00636950
    3678:	43432f53 	movtmi	r2, #16211	; 0x3f53
    367c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3680:	73752f00 	cmnvc	r5, #0, 30
    3684:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3688:	63672f62 	cmnvs	r7, #392	; 0x188
    368c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3690:	6f6e2d6d 	svcvs	0x006e2d6d
    3694:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3698:	2f696261 	svccs	0x00696261
    369c:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    36a0:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    36a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    36a8:	73000065 	movwvc	r0, #101	; 0x65
    36ac:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    36b0:	675f7075 			; <UNDEFINED> instruction: 0x675f7075
    36b4:	632e6363 			; <UNDEFINED> instruction: 0x632e6363
    36b8:	00000100 	andeq	r0, r0, r0, lsl #2
    36bc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    36c0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    36c4:	00000200 	andeq	r0, r0, r0, lsl #4
    36c8:	00010500 	andeq	r0, r1, r0, lsl #10
    36cc:	13f20205 	mvnsne	r0, #1342177280	; 0x50000000
    36d0:	84030000 	strhi	r0, [r3], #-0
    36d4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    36d8:	0a051416 	beq	148738 <__ccfg+0x128790>
    36dc:	00010210 	andeq	r0, r1, r0, lsl r2
    36e0:	01050101 	tsteq	r5, r1, lsl #2
    36e4:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    36e8:	03000013 	movweq	r0, #19
    36ec:	05010296 	streq	r0, [r1, #-662]	; 0xfffffd6a
    36f0:	05141605 	ldreq	r1, [r4, #-1541]	; 0xfffff9fb
    36f4:	0102100a 	tsteq	r2, sl
    36f8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    36fc:	02050001 	andeq	r0, r5, #1
    3700:	000013f6 	strdeq	r1, [r0], -r6
    3704:	0102a803 	tsteq	r2, r3, lsl #16
    3708:	14160505 	ldrne	r0, [r6], #-1285	; 0xfffffafb
    370c:	02100a05 	andseq	r0, r0, #20480	; 0x5000
    3710:	01010001 	tsteq	r1, r1
    3714:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    3718:	0013f802 	andseq	pc, r3, r2, lsl #16
    371c:	01d20300 	bicseq	r0, r2, r0, lsl #6
    3720:	13050501 	movwne	r0, #21761	; 0x5501
    3724:	06010517 			; <UNDEFINED> instruction: 0x06010517
    3728:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    372c:	33062605 	movwcc	r2, #26117	; 0x6605
    3730:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    3734:	2105051f 	tstcs	r5, pc, lsl r5
    3738:	20061d05 	andcs	r1, r6, r5, lsl #26
    373c:	01060505 	tsteq	r6, r5, lsl #10
    3740:	04053606 	streq	r3, [r5], #-1542	; 0xfffff9fa
    3744:	05900d03 	ldreq	r0, [r0, #3331]	; 0xd03
    3748:	01053305 	tsteq	r5, r5, lsl #6
    374c:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    3750:	20670306 	rsbcs	r0, r7, r6, lsl #6
    3754:	01061605 	tsteq	r6, r5, lsl #12
    3758:	01001002 	tsteq	r0, r2
    375c:	00018501 	andeq	r8, r1, r1, lsl #10
    3760:	7f000300 	svcvc	0x00000300
    3764:	02000001 	andeq	r0, r0, #1
    3768:	0d0efb01 	vstreq	d15, [lr, #-4]
    376c:	01010100 	mrseq	r0, (UNDEF: 17)
    3770:	00000001 	andeq	r0, r0, r1
    3774:	01000001 	tsteq	r0, r1
    3778:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    377c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    3780:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    3784:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    3788:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    378c:	61652d65 	cmnvs	r5, r5, ror #26
    3790:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    3794:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    3798:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    379c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    37a0:	6f682f00 	svcvs	0x00682f00
    37a4:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 35f8 <__exidx_end+0x978>
    37a8:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    37ac:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    37b0:	6f746b73 	svcvs	0x00746b73
    37b4:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    37b8:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    37bc:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    37c0:	2f534f43 	svccs	0x00534f43
    37c4:	4f636950 	svcmi	0x00636950
    37c8:	43432f53 	movtmi	r2, #16211	; 0x3f53
    37cc:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    37d0:	3143432f 	cmpcc	r3, pc, lsr #6
    37d4:	57585833 	smmlarpl	r8, r3, r8, r5
    37d8:	2f455241 	svccs	0x00455241
    37dc:	00636e69 	rsbeq	r6, r3, r9, ror #28
    37e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 372c <__exidx_end+0xaac>
    37e4:	616d2f65 	cmnvs	sp, r5, ror #30
    37e8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    37ec:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    37f0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    37f4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    37f8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    37fc:	4349502f 	movtmi	r5, #36911	; 0x902f
    3800:	502f534f 	eorpl	r5, pc, pc, asr #6
    3804:	534f6369 	movtpl	r6, #62313	; 0xf369
    3808:	3143432f 	cmpcc	r3, pc, lsr #6
    380c:	00585833 	subseq	r5, r8, r3, lsr r8
    3810:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 375c <__exidx_end+0xadc>
    3814:	616d2f65 	cmnvs	sp, r5, ror #30
    3818:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    381c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3820:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3824:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3828:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    382c:	4349502f 	movtmi	r5, #36911	; 0x902f
    3830:	502f534f 	eorpl	r5, pc, pc, asr #6
    3834:	534f6369 	movtpl	r6, #62313	; 0xf369
    3838:	6f682f00 	svcvs	0x00682f00
    383c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3690 <__exidx_end+0xa10>
    3840:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3844:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3848:	6f746b73 	svcvs	0x00746b73
    384c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3850:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3854:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3858:	2f534f43 	svccs	0x00534f43
    385c:	4f636950 	svcmi	0x00636950
    3860:	656b2f53 	strbvs	r2, [fp, #-3923]!	; 0xfffff0ad
    3864:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
    3868:	74730000 	ldrbtvc	r0, [r3], #-0
    386c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    3870:	0100682e 	tsteq	r0, lr, lsr #16
    3874:	77680000 	strbvc	r0, [r8, -r0]!
    3878:	6663635f 			; <UNDEFINED> instruction: 0x6663635f
    387c:	69735f67 	ldmdbvs	r3!, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    3880:	656c706d 	strbvs	r7, [ip, #-109]!	; 0xffffff93
    3884:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
    3888:	2e746375 	mrccs	3, 3, r6, cr4, cr5, {3}
    388c:	00020068 	andeq	r0, r2, r8, rrx
    3890:	63726100 	cmnvs	r2, #0, 2
    3894:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3898:	6d000003 	stcvs	0, cr0, [r0, #-12]
    389c:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    38a0:	00030068 	andeq	r0, r3, r8, rrx
    38a4:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    38a8:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    38ac:	00682e73 	rsbeq	r2, r8, r3, ror lr
    38b0:	62000003 	andvs	r0, r0, #3
    38b4:	6f747475 	svcvs	0x00747475
    38b8:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    38bc:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    38c0:	00000300 	andeq	r0, r0, r0, lsl #6
    38c4:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    38c8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    38cc:	6b000004 	blvs	38e4 <__exidx_end+0xc64>
    38d0:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    38d4:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    38d8:	63000005 	movwvs	r0, #5
    38dc:	2e676663 	cdpcs	6, 6, cr6, cr7, cr3, {3}
    38e0:	00030063 	andeq	r0, r3, r3, rrx
    38e4:	02990000 	addseq	r0, r9, #0
    38e8:	00030000 	andeq	r0, r3, r0
    38ec:	000001c0 	andeq	r0, r0, r0, asr #3
    38f0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    38f4:	0101000d 	tsteq	r1, sp
    38f8:	00000101 	andeq	r0, r0, r1, lsl #2
    38fc:	00000100 	andeq	r0, r0, r0, lsl #2
    3900:	6f682f01 	svcvs	0x00682f01
    3904:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3758 <__exidx_end+0xad8>
    3908:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    390c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3910:	6f746b73 	svcvs	0x00746b73
    3914:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3918:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    391c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3920:	2f534f43 	svccs	0x00534f43
    3924:	4f636950 	svcmi	0x00636950
    3928:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    392c:	2f736269 	svccs	0x00736269
    3930:	736e6553 	cmnvc	lr, #348127232	; 0x14c00000
    3934:	0073726f 	rsbseq	r7, r3, pc, ror #4
    3938:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3884 <__exidx_end+0xc04>
    393c:	616d2f65 	cmnvs	sp, r5, ror #30
    3940:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3944:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3948:	706f746b 	rsbvc	r7, pc, fp, ror #8
    394c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3950:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3954:	4349502f 	movtmi	r5, #36911	; 0x902f
    3958:	502f534f 	eorpl	r5, pc, pc, asr #6
    395c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3960:	3143432f 	cmpcc	r3, pc, lsr #6
    3964:	00585833 	subseq	r5, r8, r3, lsr r8
    3968:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 38b4 <__exidx_end+0xc34>
    396c:	616d2f65 	cmnvs	sp, r5, ror #30
    3970:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3974:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3978:	706f746b 	rsbvc	r7, pc, fp, ror #8
    397c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3980:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3984:	4349502f 	movtmi	r5, #36911	; 0x902f
    3988:	502f534f 	eorpl	r5, pc, pc, asr #6
    398c:	534f6369 	movtpl	r6, #62313	; 0xf369
    3990:	3143432f 	cmpcc	r3, pc, lsr #6
    3994:	2f585833 	svccs	0x00585833
    3998:	33314343 	teqcc	r1, #201326593	; 0xc000001
    399c:	41575858 	cmpmi	r7, r8, asr r8
    39a0:	642f4552 	strtvs	r4, [pc], #-1362	; 39a8 <__exidx_end+0xd28>
    39a4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    39a8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    39ac:	73752f00 	cmnvc	r5, #0, 30
    39b0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    39b4:	63672f62 	cmnvs	r7, #392	; 0x188
    39b8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    39bc:	6f6e2d6d 	svcvs	0x006e2d6d
    39c0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    39c4:	2f696261 	svccs	0x00696261
    39c8:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    39cc:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    39d0:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    39d4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    39d8:	2f656d6f 	svccs	0x00656d6f
    39dc:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    39e0:	442f6e69 	strtmi	r6, [pc], #-3689	; 39e8 <__exidx_end+0xd68>
    39e4:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    39e8:	4f2f706f 	svcmi	0x002f706f
    39ec:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    39f0:	502f5445 	eorpl	r5, pc, r5, asr #8
    39f4:	534f4349 	movtpl	r4, #62281	; 0xf349
    39f8:	6369502f 	cmnvs	r9, #47	; 0x2f
    39fc:	2f00534f 	svccs	0x0000534f
    3a00:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3a04:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3a08:	2f6e6974 	svccs	0x006e6974
    3a0c:	6b736544 	blvs	1cdcf24 <__ccfg+0x1cbcf7c>
    3a10:	2f706f74 	svccs	0x00706f74
    3a14:	4f534c4f 	svcmi	0x00534c4f
    3a18:	2f54454e 	svccs	0x0054454e
    3a1c:	4f434950 	svcmi	0x00434950
    3a20:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3a24:	2f534f63 	svccs	0x00534f63
    3a28:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3a2c:	00006c65 	andeq	r6, r0, r5, ror #24
    3a30:	5f6e6970 	svcpl	0x006e6970
    3a34:	736e6573 	cmnvc	lr, #482344960	; 0x1cc00000
    3a38:	632e726f 			; <UNDEFINED> instruction: 0x632e726f
    3a3c:	00000100 	andeq	r0, r0, r0, lsl #2
    3a40:	69736d63 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    3a44:	63675f73 	cmnvs	r7, #460	; 0x1cc
    3a48:	00682e63 	rsbeq	r2, r8, r3, ror #28
    3a4c:	67000002 	strvs	r0, [r0, -r2]
    3a50:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    3a54:	00030068 	andeq	r0, r3, r8, rrx
    3a58:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    3a5c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    3a60:	00040068 	andeq	r0, r4, r8, rrx
    3a64:	63726100 	cmnvs	r2, #0, 2
    3a68:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3a6c:	6d000002 	stcvs	0, cr0, [r0, #-8]
    3a70:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    3a74:	00020068 	andeq	r0, r2, r8, rrx
    3a78:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    3a7c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    3a80:	00682e73 	rsbeq	r2, r8, r3, ror lr
    3a84:	62000002 	andvs	r0, r0, #2
    3a88:	6f747475 	svcvs	0x00747475
    3a8c:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    3a90:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    3a94:	00000200 	andeq	r0, r0, r0, lsl #4
    3a98:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    3a9c:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3aa0:	6b000005 	blvs	3abc <__exidx_end+0xe3c>
    3aa4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
    3aa8:	00682e6c 	rsbeq	r2, r8, ip, ror #28
    3aac:	00000006 	andeq	r0, r0, r6
    3ab0:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    3ab4:	00000002 	andeq	r0, r0, r2
    3ab8:	010e0300 	mrseq	r0, ELR_hyp
    3abc:	01011b05 	tsteq	r1, r5, lsl #22
    3ac0:	06010501 	streq	r0, [r1], -r1, lsl #10
    3ac4:	00010201 	andeq	r0, r1, r1, lsl #4
    3ac8:	3f050101 	svccc	0x00050101
    3acc:	00020500 	andeq	r0, r2, r0, lsl #10
    3ad0:	03000000 	movweq	r0, #0
    3ad4:	02050110 	andeq	r0, r5, #16, 2
    3ad8:	14131314 	ldrne	r1, [r3], #-788	; 0xfffffcec
    3adc:	03063f05 	movweq	r3, #28421	; 0x6f05
    3ae0:	0520017a 	streq	r0, [r0, #-378]!	; 0xfffffe86
    3ae4:	03052605 	movweq	r2, #22021	; 0x5605
    3ae8:	06052206 	streq	r2, [r5], -r6, lsl #4
    3aec:	03050106 	movweq	r0, #20742	; 0x5106
    3af0:	02044d06 	andeq	r4, r4, #384	; 0x180
    3af4:	0100c103 	tsteq	r0, r3, lsl #2
    3af8:	40030104 	andmi	r0, r3, r4, lsl #2
    3afc:	044b3d20 	strbeq	r3, [fp], #-3360	; 0xfffff2e0
    3b00:	01330302 	teqeq	r3, r2, lsl #6
    3b04:	4e030104 	adfmis	f0, f3, f4
    3b08:	31020520 	tstcc	r2, r0, lsr #10
    3b0c:	01060705 	tsteq	r6, r5, lsl #14
    3b10:	0f050304 	svceq	0x00050304
    3b14:	2e018b03 	vmlacs.f64	d8, d1, d3
    3b18:	07050104 	streq	r0, [r5, -r4, lsl #2]
    3b1c:	207ef503 	rsbscs	pc, lr, r3, lsl #10
    3b20:	21060205 	tstcs	r6, r5, lsl #4
    3b24:	05130b05 	ldreq	r0, [r3, #-2821]	; 0xfffff4fb
    3b28:	03041303 	movweq	r1, #17155	; 0x4303
    3b2c:	83032905 	movwhi	r2, #14597	; 0x3905
    3b30:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    3b34:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3b38:	f803060b 			; <UNDEFINED> instruction: 0xf803060b
    3b3c:	0304017e 	movweq	r0, #16766	; 0x417e
    3b40:	88030f05 	stmdahi	r3, {r0, r2, r8, r9, sl, fp}
    3b44:	01042001 	tsteq	r4, r1
    3b48:	f8030b05 			; <UNDEFINED> instruction: 0xf8030b05
    3b4c:	0304207e 	movweq	r2, #16510	; 0x407e
    3b50:	88033305 	stmdahi	r3, {r0, r2, r8, r9, ip, sp}
    3b54:	42052e01 	andmi	r2, r5, #1, 28
    3b58:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    3b5c:	7ef8030b 	cdpvc	3, 15, cr0, cr8, cr11, {0}
    3b60:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    3b64:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
    3b68:	02052e08 	andeq	r2, r5, #8, 28	; 0x80
    3b6c:	2208051e 	andcs	r0, r8, #125829120	; 0x7800000
    3b70:	1f063a05 	svcne	0x00063a05
    3b74:	05010b05 	streq	r0, [r1, #-2821]	; 0xfffff4fb
    3b78:	05110602 	ldreq	r0, [r1, #-1538]	; 0xfffff9fe
    3b7c:	06022301 	streq	r2, [r2], -r1, lsl #6
    3b80:	3c010100 	stfccs	f0, [r1], {-0}
    3b84:	03000003 	movweq	r0, #3
    3b88:	0001a900 	andeq	sl, r1, r0, lsl #18
    3b8c:	fb010200 	blx	44396 <__ccfg+0x243ee>
    3b90:	01000d0e 	tsteq	r0, lr, lsl #26
    3b94:	00010101 	andeq	r0, r1, r1, lsl #2
    3b98:	00010000 	andeq	r0, r1, r0
    3b9c:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ba0:	2f656d6f 	svccs	0x00656d6f
    3ba4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3ba8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3bb0 <__exidx_end+0xf30>
    3bac:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3bb0:	4f2f706f 	svcmi	0x002f706f
    3bb4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3bb8:	502f5445 	eorpl	r5, pc, r5, asr #8
    3bbc:	534f4349 	movtpl	r4, #62281	; 0xf349
    3bc0:	6369502f 	cmnvs	r9, #47	; 0x2f
    3bc4:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bc8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3bcc:	004f492f 	subeq	r4, pc, pc, lsr #18
    3bd0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3b1c <__exidx_end+0xe9c>
    3bd4:	616d2f65 	cmnvs	sp, r5, ror #30
    3bd8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3bdc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3be0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3be4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3be8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3bec:	4349502f 	movtmi	r5, #36911	; 0x902f
    3bf0:	502f534f 	eorpl	r5, pc, pc, asr #6
    3bf4:	534f6369 	movtpl	r6, #62313	; 0xf369
    3bf8:	3143432f 	cmpcc	r3, pc, lsr #6
    3bfc:	2f585833 	svccs	0x00585833
    3c00:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3c04:	41575858 	cmpmi	r7, r8, asr r8
    3c08:	642f4552 	strtvs	r4, [pc], #-1362	; 3c10 <__exidx_end+0xf90>
    3c0c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    3c10:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    3c14:	73752f00 	cmnvc	r5, #0, 30
    3c18:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    3c1c:	63672f62 	cmnvs	r7, #392	; 0x188
    3c20:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    3c24:	6f6e2d6d 	svcvs	0x006e2d6d
    3c28:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    3c2c:	2f696261 	svccs	0x00696261
    3c30:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    3c34:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    3c38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    3c3c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    3c40:	2f656d6f 	svccs	0x00656d6f
    3c44:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c48:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c50 <__exidx_end+0xfd0>
    3c4c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c50:	4f2f706f 	svcmi	0x002f706f
    3c54:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c58:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c5c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c60:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c64:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    3c68:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    3c6c:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    3c70:	2f656d6f 	svccs	0x00656d6f
    3c74:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3c78:	442f6e69 	strtmi	r6, [pc], #-3689	; 3c80 <__exidx_end+0x1000>
    3c7c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3c80:	4f2f706f 	svcmi	0x002f706f
    3c84:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3c88:	502f5445 	eorpl	r5, pc, r5, asr #8
    3c8c:	534f4349 	movtpl	r4, #62281	; 0xf349
    3c90:	6369502f 	cmnvs	r9, #47	; 0x2f
    3c94:	2f00534f 	svccs	0x0000534f
    3c98:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3c9c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3ca0:	2f6e6974 	svccs	0x006e6974
    3ca4:	6b736544 	blvs	1cdd1bc <__ccfg+0x1cbd214>
    3ca8:	2f706f74 	svccs	0x00706f74
    3cac:	4f534c4f 	svcmi	0x00534c4f
    3cb0:	2f54454e 	svccs	0x0054454e
    3cb4:	4f434950 	svcmi	0x00434950
    3cb8:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3cbc:	2f534f63 	svccs	0x00534f63
    3cc0:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    3cc4:	00006c65 	andeq	r6, r0, r5, ror #24
    3cc8:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    3ccc:	2e736e6f 	cdpcs	14, 7, cr6, cr3, cr15, {3}
    3cd0:	00010063 	andeq	r0, r1, r3, rrx
    3cd4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    3cd8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    3cdc:	73000002 	movwvc	r0, #2
    3ce0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    3ce4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    3ce8:	61000003 	tstvs	r0, r3
    3cec:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    3cf0:	00040068 	andeq	r0, r4, r8, rrx
    3cf4:	63616d00 	cmnvs	r1, #0, 26
    3cf8:	00682e68 	rsbeq	r2, r8, r8, ror #28
    3cfc:	70000004 	andvc	r0, r0, r4
    3d00:	5f736e69 	svcpl	0x00736e69
    3d04:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    3d08:	00040068 	andeq	r0, r4, r8, rrx
    3d0c:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    3d10:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    3d14:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    3d18:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    3d1c:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    3d20:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    3d24:	00050068 	andeq	r0, r5, r8, rrx
    3d28:	72656b00 	rsbvc	r6, r5, #0, 22
    3d2c:	2e6c656e 	cdpcs	5, 6, cr6, cr12, cr14, {3}
    3d30:	00060068 	andeq	r0, r6, r8, rrx
    3d34:	01050000 	mrseq	r0, (UNDEF: 5)
    3d38:	00020500 	andeq	r0, r2, r0, lsl #10
    3d3c:	03000000 	movweq	r0, #0
    3d40:	0601011b 			; <UNDEFINED> instruction: 0x0601011b
    3d44:	0602052e 	streq	r0, [r2], -lr, lsr #10
    3d48:	060e056a 	streq	r0, [lr], -sl, ror #10
    3d4c:	20050501 	andcs	r0, r5, r1, lsl #10
    3d50:	31060305 	tstcc	r6, r5, lsl #6
    3d54:	05400205 	strbeq	r0, [r0, #-517]	; 0xfffffdfb
    3d58:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3d5c:	01870302 	orreq	r0, r7, r2, lsl #6
    3d60:	0501042e 	streq	r0, [r1, #-1070]	; 0xfffffbd2
    3d64:	7efd0307 	cdpvc	3, 15, cr0, cr13, cr7, {0}
    3d68:	1c0f0520 	cfstr32ne	mvfx0, [pc], {32}
    3d6c:	20061405 	andcs	r1, r6, r5, lsl #8
    3d70:	01061c05 	tsteq	r6, r5, lsl #24
    3d74:	06200205 	strteq	r0, [r0], -r5, lsl #4
    3d78:	4b2e1103 	blmi	b8818c <__ccfg+0xb681e4>
    3d7c:	0303053d 	movweq	r0, #13629	; 0x353d
    3d80:	02042e71 	andeq	r2, r4, #1808	; 0x710
    3d84:	fe032905 	vseleq.f16	s4, s6, s10
    3d88:	05050100 	streq	r0, [r5, #-256]	; 0xffffff00
    3d8c:	05010417 	streq	r0, [r1, #-1047]	; 0xfffffbe9
    3d90:	fd030607 	stc2	6, cr0, [r3, #-28]	; 0xffffffe4
    3d94:	0204017e 	andeq	r0, r4, #-2147483617	; 0x8000001f
    3d98:	83030f05 	movwhi	r0, #16133	; 0x3f05
    3d9c:	01042e01 	tsteq	r4, r1, lsl #28
    3da0:	fd030705 	stc2	7, cr0, [r3, #-20]	; 0xffffffec
    3da4:	0204207e 	andeq	r2, r4, #126	; 0x7e
    3da8:	83033305 	movwhi	r3, #13061	; 0x3305
    3dac:	01042001 	tsteq	r4, r1
    3db0:	fd030605 	stc2	6, cr0, [r3, #-20]	; 0xffffffec
    3db4:	0405207e 	streq	r2, [r5], #-126	; 0xffffff82
    3db8:	05053006 	streq	r3, [r5, #-6]
    3dbc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    3dc0:	03054006 	movweq	r4, #20486	; 0x5006
    3dc4:	2e120306 	cdpcs	3, 1, cr0, cr2, cr6, {0}
    3dc8:	06052f06 	streq	r2, [r5], -r6, lsl #30
    3dcc:	05206403 	streq	r6, [r0, #-1027]!	; 0xfffffbfd
    3dd0:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    3dd4:	16030602 	strne	r0, [r3], -r2, lsl #12
    3dd8:	0607053c 			; <UNDEFINED> instruction: 0x0607053c
    3ddc:	05020401 	streq	r0, [r2, #-1025]	; 0xfffffbff
    3de0:	eb030629 	bl	c568c <__ccfg+0xa56e4>
    3de4:	05055800 	streq	r5, [r5, #-2048]	; 0xfffff800
    3de8:	060f0517 			; <UNDEFINED> instruction: 0x060f0517
    3dec:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    3df0:	7f900307 	svcvc	0x00900307
    3df4:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    3df8:	00f0030f 	rscseq	r0, r0, pc, lsl #6
    3dfc:	20330520 	eorscs	r0, r3, r0, lsr #10
    3e00:	05050104 	streq	r0, [r5, #-260]	; 0xfffffefc
    3e04:	207f9003 	rsbscs	r9, pc, r3
    3e08:	31060205 	tstcc	r6, r5, lsl #4
    3e0c:	01060505 	tsteq	r6, r5, lsl #10
    3e10:	3e060305 	cdpcc	3, 0, cr0, cr6, cr5, {0}
    3e14:	05510205 	ldrbeq	r0, [r1, #-517]	; 0xfffffdfb
    3e18:	04010607 	streq	r0, [r1], #-1543	; 0xfffff9f9
    3e1c:	06290502 	strteq	r0, [r9], -r2, lsl #10
    3e20:	3c00df03 	stccc	15, cr13, [r0], {3}
    3e24:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    3e28:	0401060f 	streq	r0, [r1], #-1551	; 0xfffff9f1
    3e2c:	03070501 	movweq	r0, #29953	; 0x7501
    3e30:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e34:	030f0502 	movweq	r0, #62722	; 0xf502
    3e38:	042e00e4 	strteq	r0, [lr], #-228	; 0xffffff1c
    3e3c:	03070501 	movweq	r0, #29953	; 0x7501
    3e40:	04207f9c 	strteq	r7, [r0], #-3996	; 0xfffff064
    3e44:	03330502 	teqeq	r3, #8388608	; 0x800000
    3e48:	042000e4 	strteq	r0, [r0], #-228	; 0xffffff1c
    3e4c:	03050501 	movweq	r0, #21761	; 0x5501
    3e50:	05207f9c 	streq	r7, [r0, #-3996]!	; 0xfffff064
    3e54:	05310602 	ldreq	r0, [r1, #-1538]!	; 0xfffff9fe
    3e58:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    3e5c:	02052e05 	andeq	r2, r5, #5, 28	; 0x50
    3e60:	03053106 	movweq	r3, #20742	; 0x5106
    3e64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    3e68:	01052206 	tsteq	r5, r6, lsl #4
    3e6c:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    3e70:	0601052c 	streq	r0, [r1], -ip, lsr #10
    3e74:	000c024c 	andeq	r0, ip, ip, asr #4
    3e78:	29050101 	stmdbcs	r5, {r0, r8}
    3e7c:	00020500 	andeq	r0, r2, r0, lsl #10
    3e80:	03000000 	movweq	r0, #0
    3e84:	050100d7 	streq	r0, [r1, #-215]	; 0xffffff29
    3e88:	0f051602 	svceq	0x00051602
    3e8c:	29050106 	stmdbcs	r5, {r1, r2, r8}
    3e90:	240f051c 	strcs	r0, [pc], #-1308	; 3e98 <__exidx_end+0x1218>
    3e94:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    3e98:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    3e9c:	051a0601 	ldreq	r0, [sl, #-1537]	; 0xfffff9ff
    3ea0:	2e780303 	cdpcs	3, 7, cr0, cr8, cr3, {0}
    3ea4:	40060205 	andmi	r0, r6, r5, lsl #4
    3ea8:	01060705 	tsteq	r6, r5, lsl #14
    3eac:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    3eb0:	2f2f0603 	svccs	0x002f0603
    3eb4:	22060105 	andcs	r0, r6, #1073741825	; 0x40000001
    3eb8:	052c0305 	streq	r0, [ip, #-773]!	; 0xfffffcfb
    3ebc:	06023e01 	streq	r3, [r2], -r1, lsl #28
    3ec0:	31010100 	mrscc	r0, (UNDEF: 17)
    3ec4:	03000009 	movweq	r0, #9
    3ec8:	0001cc00 	andeq	ip, r1, r0, lsl #24
    3ecc:	fb010200 	blx	446d6 <__ccfg+0x2472e>
    3ed0:	01000d0e 	tsteq	r0, lr, lsl #26
    3ed4:	00010101 	andeq	r0, r1, r1, lsl #2
    3ed8:	00010000 	andeq	r0, r1, r0
    3edc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    3ee0:	2f656d6f 	svccs	0x00656d6f
    3ee4:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    3ee8:	442f6e69 	strtmi	r6, [pc], #-3689	; 3ef0 <__exidx_end+0x1270>
    3eec:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    3ef0:	4f2f706f 	svcmi	0x002f706f
    3ef4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    3ef8:	502f5445 	eorpl	r5, pc, r5, asr #8
    3efc:	534f4349 	movtpl	r4, #62281	; 0xf349
    3f00:	6369502f 	cmnvs	r9, #47	; 0x2f
    3f04:	502f534f 	eorpl	r5, pc, pc, asr #6
    3f08:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    3f0c:	6f74532f 	svcvs	0x0074532f
    3f10:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    3f14:	6f682f00 	svcvs	0x00682f00
    3f18:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 3d6c <__exidx_end+0x10ec>
    3f1c:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    3f20:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    3f24:	6f746b73 	svcvs	0x00746b73
    3f28:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    3f2c:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    3f30:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    3f34:	2f534f43 	svccs	0x00534f43
    3f38:	4f636950 	svcmi	0x00636950
    3f3c:	43432f53 	movtmi	r2, #16211	; 0x3f53
    3f40:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    3f44:	3143432f 	cmpcc	r3, pc, lsr #6
    3f48:	57585833 	smmlarpl	r8, r3, r8, r5
    3f4c:	2f455241 	svccs	0x00455241
    3f50:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    3f54:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    3f58:	752f0062 	strvc	r0, [pc, #-98]!	; 3efe <__exidx_end+0x127e>
    3f5c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 3d98 <__exidx_end+0x1118>
    3f60:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    3f64:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    3f68:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    3f6c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    3f70:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    3f74:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    3f78:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    3f7c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    3f80:	2f006564 	svccs	0x00006564
    3f84:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3f88:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3f8c:	2f6e6974 	svccs	0x006e6974
    3f90:	6b736544 	blvs	1cdd4a8 <__ccfg+0x1cbd500>
    3f94:	2f706f74 	svccs	0x00706f74
    3f98:	4f534c4f 	svcmi	0x00534c4f
    3f9c:	2f54454e 	svccs	0x0054454e
    3fa0:	4f434950 	svcmi	0x00434950
    3fa4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fa8:	2f534f63 	svccs	0x00534f63
    3fac:	33314343 	teqcc	r1, #201326593	; 0xc000001
    3fb0:	2f005858 	svccs	0x00005858
    3fb4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    3fb8:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    3fbc:	2f6e6974 	svccs	0x006e6974
    3fc0:	6b736544 	blvs	1cdd4d8 <__ccfg+0x1cbd530>
    3fc4:	2f706f74 	svccs	0x00706f74
    3fc8:	4f534c4f 	svcmi	0x00534c4f
    3fcc:	2f54454e 	svccs	0x0054454e
    3fd0:	4f434950 	svcmi	0x00434950
    3fd4:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    3fd8:	00534f63 	subseq	r4, r3, r3, ror #30
    3fdc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 3f28 <__exidx_end+0x12a8>
    3fe0:	616d2f65 	cmnvs	sp, r5, ror #30
    3fe4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    3fe8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    3fec:	706f746b 	rsbvc	r7, pc, fp, ror #8
    3ff0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    3ff4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    3ff8:	4349502f 	movtmi	r5, #36911	; 0x902f
    3ffc:	502f534f 	eorpl	r5, pc, pc, asr #6
    4000:	534f6369 	movtpl	r6, #62313	; 0xf369
    4004:	72656b2f 	rsbvc	r6, r5, #48128	; 0xbc00
    4008:	006c656e 	rsbeq	r6, ip, lr, ror #10
    400c:	6f747300 	svcvs	0x00747300
    4010:	65676172 	strbvs	r6, [r7, #-370]!	; 0xfffffe8e
    4014:	32786d5f 	rsbscc	r6, r8, #6080	; 0x17c0
    4018:	30387235 	eorscc	r7, r8, r5, lsr r2
    401c:	632e3533 			; <UNDEFINED> instruction: 0x632e3533
    4020:	00000100 	andeq	r0, r0, r0, lsl #2
    4024:	6f697067 	svcvs	0x00697067
    4028:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    402c:	74730000 	ldrbtvc	r0, [r3], #-0
    4030:	6761726f 	strbvs	r7, [r1, -pc, ror #4]!
    4034:	65655f65 	strbvs	r5, [r5, #-3941]!	; 0xfffff09b
    4038:	6d6f7270 	sfmvs	f7, 2, [pc, #-448]!	; 3e80 <__exidx_end+0x1200>
    403c:	0100682e 	tsteq	r0, lr, lsr #16
    4040:	74730000 	ldrbtvc	r0, [r3], #-0
    4044:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4048:	0300682e 	movweq	r6, #2094	; 0x82e
    404c:	72610000 	rsbvc	r0, r1, #0
    4050:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4054:	00000400 	andeq	r0, r0, r0, lsl #8
    4058:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    405c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4060:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    4064:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    4068:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    406c:	00000400 	andeq	r0, r0, r0, lsl #8
    4070:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    4074:	5f736e6f 	svcpl	0x00736e6f
    4078:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    407c:	00040068 	andeq	r0, r4, r8, rrx
    4080:	73797300 	cmnvc	r9, #0, 6
    4084:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    4088:	00000500 	andeq	r0, r0, r0, lsl #10
    408c:	6e72656b 	cdpvs	5, 7, cr6, cr2, cr11, {3}
    4090:	682e6c65 	stmdavs	lr!, {r0, r2, r5, r6, sl, fp, sp, lr}
    4094:	00000600 	andeq	r0, r0, r0, lsl #12
    4098:	00190500 	andseq	r0, r9, r0, lsl #10
    409c:	14440205 	strbne	r0, [r4], #-517	; 0xfffffdfb
    40a0:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    40a4:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    40a8:	15051413 	strne	r1, [r5, #-1043]	; 0xfffffbed
    40ac:	06190501 	ldreq	r0, [r9], -r1, lsl #10
    40b0:	2509050d 	strcs	r0, [r9, #-1293]	; 0xfffffaf3
    40b4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40b8:	20028a03 	andcs	r8, r2, r3, lsl #20
    40bc:	19050104 	stmdbne	r5, {r2, r8}
    40c0:	2e7df103 	expcse	f7, f3
    40c4:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    40c8:	2002c503 	andcs	ip, r2, r3, lsl #10
    40cc:	d0030f05 	andle	r0, r3, r5, lsl #30
    40d0:	2d05207e 	stccs	0, cr2, [r5, #-504]	; 0xfffffe08
    40d4:	2000fa03 	andcs	pc, r0, r3, lsl #20
    40d8:	03050104 	movweq	r0, #20740	; 0x5104
    40dc:	7df70306 	ldclvc	3, cr0, [r7, #24]!
    40e0:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    40e4:	8f03060f 	svchi	0x0003060f
    40e8:	01040101 	tsteq	r4, r1, lsl #2
    40ec:	f1030505 			; <UNDEFINED> instruction: 0xf1030505
    40f0:	0605207e 			; <UNDEFINED> instruction: 0x0605207e
    40f4:	1f050521 	svcne	0x00050521
    40f8:	21060305 	tstcs	r6, r5, lsl #6
    40fc:	29050204 	stmdbcs	r5, {r2, r9}
    4100:	01018903 	tsteq	r1, r3, lsl #18
    4104:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4108:	03040501 	movweq	r0, #17665	; 0x4501
    410c:	05017ef3 	streq	r7, [r1, #-3827]	; 0xfffff10d
    4110:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4114:	043d0603 	ldrteq	r0, [sp], #-1539	; 0xfffff9fd
    4118:	03290502 			; <UNDEFINED> instruction: 0x03290502
    411c:	05010281 	streq	r0, [r1, #-641]	; 0xfffffd7f
    4120:	01041705 	tsteq	r4, r5, lsl #14
    4124:	03060205 	movweq	r0, #25093	; 0x6205
    4128:	04017df6 	streq	r7, [r1], #-3574	; 0xfffff20a
    412c:	032d0502 			; <UNDEFINED> instruction: 0x032d0502
    4130:	0420028a 	strteq	r0, [r0], #-650	; 0xfffffd76
    4134:	06030501 	streq	r0, [r3], -r1, lsl #10
    4138:	207dfb03 	rsbscs	pc, sp, r3, lsl #22
    413c:	29050204 	stmdbcs	r5, {r2, r9}
    4140:	0102b603 	tsteq	r2, r3, lsl #12
    4144:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4148:	0401062d 	streq	r0, [r1], #-1581	; 0xfffff9d3
    414c:	061c0501 	ldreq	r0, [ip], -r1, lsl #10
    4150:	207dc003 	rsbscs	ip, sp, r3
    4154:	05011505 	streq	r1, [r1, #-1285]	; 0xfffffafb
    4158:	05010602 	streq	r0, [r1, #-1538]	; 0xfffff9fe
    415c:	20090301 	andcs	r0, r9, r1, lsl #6
    4160:	01000702 	tsteq	r0, r2, lsl #14
    4164:	001f0501 	andseq	r0, pc, r1, lsl #10
    4168:	14780205 	ldrbtne	r0, [r8], #-517	; 0xfffffdfb
    416c:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    4170:	14020501 	strne	r0, [r2], #-1281	; 0xfffffaff
    4174:	010e0514 	tsteq	lr, r4, lsl r5
    4178:	0e061f05 	cdpeq	15, 0, cr1, cr6, cr5, {0}
    417c:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    4180:	01ff032d 	mvnseq	r0, sp, lsr #6
    4184:	0501043c 	streq	r0, [r1, #-1084]	; 0xfffffbc4
    4188:	86030603 	strhi	r0, [r3], -r3, lsl #12
    418c:	06054a7e 			; <UNDEFINED> instruction: 0x06054a7e
    4190:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4194:	02042f06 	andeq	r2, r4, #6, 30
    4198:	f4032905 	vst2.8	{d2,d4}, [r3], r5
    419c:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41a0:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41a4:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41a8:	89030604 	stmdbhi	r3, {r2, r9, sl}
    41ac:	02042e7e 	andeq	r2, r4, #2016	; 0x7e0
    41b0:	a8032905 	stmdage	r3, {r0, r2, r8, fp, sp}
    41b4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41b8:	062d0517 			; <UNDEFINED> instruction: 0x062d0517
    41bc:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    41c0:	d4030603 	strle	r0, [r3], #-1539	; 0xfffff9fd
    41c4:	0204207d 	andeq	r2, r4, #125	; 0x7d
    41c8:	f1032905 			; <UNDEFINED> instruction: 0xf1032905
    41cc:	05050101 	streq	r0, [r5, #-257]	; 0xfffffeff
    41d0:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41d4:	017e8c03 	cmneq	lr, r3, lsl #24
    41d8:	79030205 	stmdbvc	r3, {r0, r2, r9}
    41dc:	05020420 	streq	r0, [r2, #-1056]	; 0xfffffbe0
    41e0:	01fb032d 	mvnseq	r0, sp, lsr #6
    41e4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    41e8:	8b030603 	blhi	c59fc <__ccfg+0xa5a54>
    41ec:	0204207e 	andeq	r2, r4, #126	; 0x7e
    41f0:	a6032905 	strge	r2, [r3], -r5, lsl #18
    41f4:	05050102 	streq	r0, [r5, #-258]	; 0xfffffefe
    41f8:	06010417 			; <UNDEFINED> instruction: 0x06010417
    41fc:	017dd603 	cmneq	sp, r3, lsl #12
    4200:	2d050204 	sfmcs	f0, 4, [r5, #-16]
    4204:	2002aa03 	andcs	sl, r2, r3, lsl #20
    4208:	03050104 	movweq	r0, #20740	; 0x5104
    420c:	7dd60306 	ldclvc	3, cr0, [r6, #24]
    4210:	03150520 	tsteq	r5, #32, 10	; 0x8000000
    4214:	0e050179 	mcreq	1, 0, r0, cr5, cr9, {3}
    4218:	06020501 	streq	r0, [r2], -r1, lsl #10
    421c:	03010501 	movweq	r0, #5377	; 0x1501
    4220:	05022009 	streq	r2, [r2, #-9]
    4224:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    4228:	0205001e 	andeq	r0, r5, #30
    422c:	000014a8 	andeq	r1, r0, r8, lsr #9
    4230:	05013903 	streq	r3, [r1, #-2307]	; 0xfffff6fd
    4234:	02041402 	andeq	r1, r4, #33554432	; 0x2000000
    4238:	cf032905 	svcgt	0x00032905
    423c:	3d050103 	stfccs	f0, [r5, #-12]
    4240:	17050514 	smladne	r5, r4, r5, r0
    4244:	01063805 	tsteq	r6, r5, lsl #16
    4248:	1e050104 	adfnes	f0, f5, f4
    424c:	207ca803 	rsbscs	sl, ip, r3, lsl #16
    4250:	38050204 	stmdacc	r5, {r2, r9}
    4254:	2003d803 	andcs	sp, r3, r3, lsl #16
    4258:	02050104 	andeq	r0, r5, #4, 2
    425c:	7cab0306 	stcvc	3, cr0, [fp], #24
    4260:	02042f2e 	andeq	r2, r4, #46, 30	; 0xb8
    4264:	cd032905 	vstrgt.16	s4, [r3, #-10]	; <UNPREDICTABLE>
    4268:	3d050103 	stfccs	f0, [r5, #-12]
    426c:	17050514 	smladne	r5, r4, r5, r0
    4270:	01063805 	tsteq	r6, r5, lsl #16
    4274:	01050104 	tsteq	r5, r4, lsl #2
    4278:	2e7cad03 	cdpcs	13, 7, cr10, cr12, cr3, {0}
    427c:	01000402 	tsteq	r0, r2, lsl #8
    4280:	00270501 	eoreq	r0, r7, r1, lsl #10
    4284:	14c00205 	strbne	r0, [r0], #517	; 0x205
    4288:	d7030000 	strle	r0, [r3, -r0]
    428c:	02050100 	andeq	r0, r5, #0, 2
    4290:	06270516 			; <UNDEFINED> instruction: 0x06270516
    4294:	02042e0e 	andeq	r2, r4, #14, 28	; 0xe0
    4298:	ba033805 	blt	d22b4 <__ccfg+0xb230c>
    429c:	01042e03 	tsteq	r4, r3, lsl #28
    42a0:	ca030905 	bgt	c66bc <__ccfg+0xa6714>
    42a4:	0204207c 	andeq	r2, r4, #124	; 0x7c
    42a8:	b6033805 	strlt	r3, [r3], -r5, lsl #16
    42ac:	01042e03 	tsteq	r4, r3, lsl #28
    42b0:	03060805 	movweq	r0, #26629	; 0x6805
    42b4:	05207cca 	streq	r7, [r0, #-3274]!	; 0xfffff336
    42b8:	3c730302 	ldclcc	3, cr0, [r3], #-8
    42bc:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    42c0:	03ba0329 			; <UNDEFINED> instruction: 0x03ba0329
    42c4:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    42c8:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    42cc:	06020501 	streq	r0, [r2], -r1, lsl #10
    42d0:	017cc003 	cmneq	ip, r3
    42d4:	38050204 	stmdacc	r5, {r2, r9}
    42d8:	2003c003 	andcs	ip, r3, r3
    42dc:	02050104 	andeq	r0, r5, #4, 2
    42e0:	7cc00306 	stclvc	3, cr0, [r0], {6}
    42e4:	06052f20 	streq	r2, [r5], -r0, lsr #30
    42e8:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    42ec:	02042f06 	andeq	r2, r4, #6, 30
    42f0:	b7032905 	strlt	r2, [r3, -r5, lsl #18]
    42f4:	3d050103 	stfccs	f0, [r5, #-12]
    42f8:	17050514 	smladne	r5, r4, r5, r0
    42fc:	01063805 	tsteq	r6, r5, lsl #16
    4300:	02050104 	andeq	r0, r5, #4, 2
    4304:	7cc30306 	stclvc	3, cr0, [r3], {6}
    4308:	060f052e 	streq	r0, [pc], -lr, lsr #10
    430c:	36010519 			; <UNDEFINED> instruction: 0x36010519
    4310:	03060305 	movweq	r0, #25349	; 0x6305
    4314:	06052e79 			; <UNDEFINED> instruction: 0x06052e79
    4318:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    431c:	4b4c4b06 	blmi	1316f3c <__ccfg+0x12f6f94>
    4320:	01000702 	tsteq	r0, r2, lsl #14
    4324:	00160501 	andseq	r0, r6, r1, lsl #10
    4328:	15140205 	ldrne	r0, [r4, #-517]	; 0xfffffdfb
    432c:	81030000 	mrshi	r0, (UNDEF: 3)
    4330:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    4334:	06160516 			; <UNDEFINED> instruction: 0x06160516
    4338:	2406050e 	strcs	r0, [r6], #-1294	; 0xfffffaf2
    433c:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4340:	05300603 	ldreq	r0, [r0, #-1539]!	; 0xfffff9fd
    4344:	08055e02 	stmdaeq	r5, {r1, r9, sl, fp, ip, lr}
    4348:	01050106 	tsteq	r5, r6, lsl #2
    434c:	0603053d 			; <UNDEFINED> instruction: 0x0603053d
    4350:	0302051b 	movweq	r0, #9499	; 0x251b
    4354:	01010166 	tsteq	r1, r6, ror #2
    4358:	05020414 	streq	r0, [r2, #-1044]	; 0xfffffbec
    435c:	03990329 	orrseq	r0, r9, #-1543503872	; 0xa4000000
    4360:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4364:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    4368:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    436c:	03020501 	movweq	r0, #9473	; 0x2501
    4370:	042e7ce1 	strteq	r7, [lr], #-3297	; 0xfffff31f
    4374:	03380502 	teqeq	r8, #8388608	; 0x800000
    4378:	0420039f 	strteq	r0, [r0], #-927	; 0xfffffc61
    437c:	06020501 	streq	r0, [r2], -r1, lsl #10
    4380:	207ce103 	rsbscs	lr, ip, r3, lsl #2
    4384:	0502042f 	streq	r0, [r2, #-1071]	; 0xfffffbd1
    4388:	03970329 	orrseq	r0, r7, #-1543503872	; 0xa4000000
    438c:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    4390:	04170505 	ldreq	r0, [r7], #-1285	; 0xfffffafb
    4394:	06020501 	streq	r0, [r2], -r1, lsl #10
    4398:	017ce303 	cmneq	ip, r3, lsl #6
    439c:	38050204 	stmdacc	r5, {r2, r9}
    43a0:	20039d03 	andcs	r9, r3, r3, lsl #26
    43a4:	02050104 	andeq	r0, r5, #4, 2
    43a8:	7ce30306 	stclvc	3, cr0, [r3], #24
    43ac:	03030520 	movweq	r0, #13600	; 0x3520
    43b0:	09052e16 	stmdbeq	r5, {r1, r2, r4, r9, sl, fp, sp}
    43b4:	09020106 	stmdbeq	r2, {r1, r2, r8}
    43b8:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43bc:	02050017 	andeq	r0, r5, #23
    43c0:	00001554 	andeq	r1, r0, r4, asr r5
    43c4:	0100f703 	tsteq	r0, r3, lsl #14	; <UNPREDICTABLE>
    43c8:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    43cc:	05100617 	ldreq	r0, [r0, #-1559]	; 0xfffff9e9
    43d0:	0505220c 	streq	r2, [r5, #-524]	; 0xfffffdf4
    43d4:	06030520 	streq	r0, [r3], -r0, lsr #10
    43d8:	0205593d 	andeq	r5, r5, #999424	; 0xf4000
    43dc:	05016e03 	streq	r6, [r1, #-3587]	; 0xfffff1fd
    43e0:	3c130303 	ldccc	3, cr0, [r3], {3}
    43e4:	01060905 	tsteq	r6, r5, lsl #18
    43e8:	2f060305 	svccs	0x00060305
    43ec:	01050101 	tsteq	r5, r1, lsl #2
    43f0:	03021406 	movweq	r1, #9222	; 0x2406
    43f4:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    43f8:	02050011 	andeq	r0, r5, #17
    43fc:	00001578 	andeq	r1, r0, r8, ror r5
    4400:	01019203 	tsteq	r1, r3, lsl #4
    4404:	05160205 	ldreq	r0, [r6, #-517]	; 0xfffffdfb
    4408:	050e0611 	streq	r0, [lr, #-1553]	; 0xfffff9ef
    440c:	2f062402 	svccs	0x00062402
    4410:	01060805 	tsteq	r6, r5, lsl #16
    4414:	0e030105 	adfeqs	f0, f3, f5
    4418:	0308052e 	movweq	r0, #34094	; 0x852e
    441c:	02052072 	andeq	r2, r5, #114	; 0x72
    4420:	200d0306 	andcs	r0, sp, r6, lsl #6
    4424:	13060105 	movwne	r0, #24837	; 0x6105
    4428:	01000302 	tsteq	r0, r2, lsl #6
    442c:	00120501 	andseq	r0, r2, r1, lsl #10
    4430:	158c0205 	strne	r0, [ip, #517]	; 0x205
    4434:	a7030000 	strge	r0, [r3, -r0]
    4438:	02050101 	andeq	r0, r5, #1073741824	; 0x40000000
    443c:	06060514 			; <UNDEFINED> instruction: 0x06060514
    4440:	20050501 	andcs	r0, r5, r1, lsl #10
    4444:	2f060305 	svccs	0x00060305
    4448:	01060905 	tsteq	r6, r5, lsl #18
    444c:	2f060305 	svccs	0x00060305
    4450:	30060105 	andcc	r0, r6, r5, lsl #2
    4454:	01000302 	tsteq	r0, r2, lsl #6
    4458:	002b0501 	eoreq	r0, fp, r1, lsl #10
    445c:	00000205 	andeq	r0, r0, r5, lsl #4
    4460:	af030000 	svcge	0x00030000
    4464:	20060101 	andcs	r0, r6, r1, lsl #2
    4468:	30060205 	andcc	r0, r6, r5, lsl #4
    446c:	01060505 	tsteq	r6, r5, lsl #10
    4470:	31060205 	tstcc	r6, r5, lsl #4
    4474:	01060505 	tsteq	r6, r5, lsl #10
    4478:	053c1805 	ldreq	r1, [ip, #-2053]!	; 0xfffff7fb
    447c:	02052012 	andeq	r2, r5, #18
    4480:	04303f06 	ldrteq	r3, [r0], #-3846	; 0xfffff0fa
    4484:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4488:	050102d1 	streq	r0, [r1, #-721]	; 0xfffffd2f
    448c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4490:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4494:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4498:	7daa0302 	stcvc	3, cr0, [sl, #8]!
    449c:	0502042e 	streq	r0, [r2, #-1070]	; 0xfffffbd2
    44a0:	02d60338 	sbcseq	r0, r6, #56, 6	; 0xe0000000
    44a4:	05010420 	streq	r0, [r1, #-1056]	; 0xfffffbe0
    44a8:	aa030602 	bge	c5cb8 <__ccfg+0xa5d10>
    44ac:	4b2f207d 	blmi	bcc6a8 <__ccfg+0xbac700>
    44b0:	08053e4b 	stmdaeq	r5, {r0, r1, r3, r6, r9, sl, fp, ip, sp}
    44b4:	31020520 	tstcc	r2, r0, lsr #10
    44b8:	29050204 	stmdbcs	r5, {r2, r9}
    44bc:	0102c703 	tsteq	r2, r3, lsl #14
    44c0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    44c4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    44c8:	01040106 	tsteq	r4, r6, lsl #2
    44cc:	03060205 	movweq	r0, #25093	; 0x6205
    44d0:	302e7db4 	strhtcc	r7, [lr], -r4
    44d4:	13060105 	movwne	r0, #24837	; 0x6105
    44d8:	03060305 	movweq	r0, #25349	; 0x6305
    44dc:	0a052e79 	beq	14fec8 <__ccfg+0x12ff20>
    44e0:	08050106 	stmdaeq	r5, {r1, r2, r8}
    44e4:	030a052e 	movweq	r0, #42286	; 0xa52e
    44e8:	05023c74 	streq	r3, [r2, #-3188]	; 0xfffff38c
    44ec:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    44f0:	02050031 	andeq	r0, r5, #49	; 0x31
    44f4:	00000000 	andeq	r0, r0, r0
    44f8:	0101ca03 	tsteq	r1, r3, lsl #20
    44fc:	05140205 	ldreq	r0, [r4, #-517]	; 0xfffffdfb
    4500:	05100631 	ldreq	r0, [r0, #-1585]	; 0xfffff9cf
    4504:	3105220c 	tstcc	r5, ip, lsl #4
    4508:	2205051e 	andcs	r0, r5, #125829120	; 0x7800000
    450c:	051e3105 	ldreq	r3, [lr, #-261]	; 0xfffffefb
    4510:	03053005 	movweq	r3, #20485	; 0x5005
    4514:	06053206 	streq	r3, [r5], -r6, lsl #4
    4518:	17050106 	strne	r0, [r5, -r6, lsl #2]
    451c:	20060520 	andcs	r0, r6, r0, lsr #10
    4520:	30060305 	andcc	r0, r6, r5, lsl #6
    4524:	01060605 	tsteq	r6, r5, lsl #12
    4528:	053c1705 	ldreq	r1, [ip, #-1797]!	; 0xfffff8fb
    452c:	30320603 	eorscc	r0, r2, r3, lsl #12
    4530:	0a030405 	beq	c554c <__ccfg+0xa55a4>
    4534:	06100501 	ldreq	r0, [r0], -r1, lsl #10
    4538:	20090501 	andcs	r0, r9, r1, lsl #10
    453c:	05201005 	streq	r1, [r0, #-5]!
    4540:	04052009 	streq	r2, [r5], #-9
    4544:	11052206 	tstne	r5, r6, lsl #4
    4548:	09050106 	stmdbeq	r5, {r1, r2, r8}
    454c:	201f0520 	andscs	r0, pc, r0, lsr #10
    4550:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4554:	05240604 	streq	r0, [r4, #-1540]!	; 0xfffff9fc
    4558:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    455c:	05054a07 	streq	r4, [r5, #-2567]	; 0xfffff5f9
    4560:	0b053106 	bleq	150980 <__ccfg+0x1309d8>
    4564:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4568:	052f2f06 	streq	r2, [pc, #-3846]!	; 366a <__exidx_end+0x9ea>
    456c:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4570:	20310301 	eorscs	r0, r1, r1, lsl #6
    4574:	03060405 	movweq	r0, #25605	; 0x6405
    4578:	0e052052 	mcreq	0, 0, r2, cr5, cr2, {2}
    457c:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4580:	20250520 	eorcs	r0, r5, r0, lsr #10
    4584:	05201d05 	streq	r1, [r0, #-3333]!	; 0xfffff2fb
    4588:	053e0605 	ldreq	r0, [lr, #-1541]!	; 0xfffff9fb
    458c:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4590:	0b052804 	bleq	14e5a8 <__ccfg+0x12e600>
    4594:	0604051e 			; <UNDEFINED> instruction: 0x0604051e
    4598:	02042f22 	andeq	r2, r4, #34, 30	; 0x88
    459c:	03063805 	movweq	r3, #26629	; 0x6805
    45a0:	04010296 	streq	r0, [r1], #-662	; 0xfffffd6a
    45a4:	03040501 	movweq	r0, #17665	; 0x4501
    45a8:	052e7dea 	streq	r7, [lr, #-3562]!	; 0xfffff216
    45ac:	c7030602 	strgt	r0, [r3, -r2, lsl #12]
    45b0:	0204207e 	andeq	r2, r4, #126	; 0x7e
    45b4:	c8032905 	stmdagt	r3, {r0, r2, r8, fp, sp}
    45b8:	3d050103 	stfccs	f0, [r5, #-12]
    45bc:	17050514 	smladne	r5, r4, r5, r0
    45c0:	01063805 	tsteq	r6, r5, lsl #16
    45c4:	02050104 	andeq	r0, r5, #4, 2
    45c8:	7cb20306 	ldcvc	3, cr0, [r2], #24
    45cc:	4b4b2f20 	blmi	12d0254 <__ccfg+0x12b02ac>
    45d0:	0502043d 	streq	r0, [r2, #-1085]	; 0xfffffbc3
    45d4:	03c30329 	biceq	r0, r3, #-1543503872	; 0xa4000000
    45d8:	143d0501 	ldrtne	r0, [sp], #-1281	; 0xfffffaff
    45dc:	05170505 	ldreq	r0, [r7, #-1285]	; 0xfffffafb
    45e0:	04010638 	streq	r0, [r1], #-1592	; 0xfffff9c8
    45e4:	06020501 	streq	r0, [r2], -r1, lsl #10
    45e8:	2e7dee03 	cdpcs	14, 7, cr14, cr13, cr3, {0}
    45ec:	03060b05 	movweq	r0, #27397	; 0x6b05
    45f0:	09058255 	stmdbeq	r5, {r0, r2, r4, r6, r9, pc}
    45f4:	2e1f0306 	cdpcs	3, 1, cr0, cr15, cr6, {0}
    45f8:	01061305 	tsteq	r6, r5, lsl #6
    45fc:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4600:	2205202a 	andcs	r2, r5, #42	; 0x2a
    4604:	06050520 	streq	r0, [r5], -r0, lsr #10
    4608:	060b053e 			; <UNDEFINED> instruction: 0x060b053e
    460c:	06050501 	streq	r0, [r5], -r1, lsl #10
    4610:	060b0531 			; <UNDEFINED> instruction: 0x060b0531
    4614:	35020501 	strcc	r0, [r2, #-1281]	; 0xfffffaff
    4618:	03060405 	movweq	r0, #25605	; 0x6405
    461c:	05592e0a 	ldrbeq	r2, [r9, #-3594]	; 0xfffff1f6
    4620:	03010609 	movweq	r0, #5641	; 0x1609
    4624:	04054a0e 	streq	r4, [r5], #-2574	; 0xfffff5f2
    4628:	6b032106 	blvs	cca48 <__ccfg+0xacaa0>
    462c:	0b035920 	bleq	daab4 <__ccfg+0xbab0c>
    4630:	09054b20 	stmdbeq	r5, {r5, r8, r9, fp, lr}
    4634:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4638:	054b5e06 	strbeq	r5, [fp, #-3590]	; 0xfffff1fa
    463c:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4640:	ba030603 	blt	c5e54 <__ccfg+0xa5eac>
    4644:	0605587f 			; <UNDEFINED> instruction: 0x0605587f
    4648:	09050106 	stmdbeq	r5, {r1, r2, r8}
    464c:	0100083b 	tsteq	r0, fp, lsr r8
    4650:	003b0501 	eorseq	r0, fp, r1, lsl #10
    4654:	00000205 	andeq	r0, r0, r5, lsl #4
    4658:	a0030000 	andge	r0, r3, r0
    465c:	02050102 	andeq	r0, r5, #-2147483648	; 0x80000000
    4660:	3b051414 	blcc	1496b8 <__ccfg+0x129710>
    4664:	0c050e06 	stceq	14, cr0, [r5], {6}
    4668:	1c3b0532 	cfldr32ne	mvfx0, [fp], #-200	; 0xffffff38
    466c:	05240505 	streq	r0, [r4, #-1285]!	; 0xfffffafb
    4670:	05051c3b 	streq	r1, [r5, #-3131]	; 0xfffff3c5
    4674:	06030532 			; <UNDEFINED> instruction: 0x06030532
    4678:	06060532 			; <UNDEFINED> instruction: 0x06060532
    467c:	3c1a0501 	cfldr32cc	mvfx0, [sl], {1}
    4680:	052e1405 	streq	r1, [lr, #-1029]!	; 0xfffffbfb
    4684:	053f0603 	ldreq	r0, [pc, #-1539]!	; 4089 <__exidx_end+0x1409>
    4688:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    468c:	052f0603 	streq	r0, [pc, #-1539]!	; 4091 <__exidx_end+0x1411>
    4690:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4694:	053d0603 	ldreq	r0, [sp, #-1539]!	; 0xfffff9fd
    4698:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    469c:	2f300603 	svccs	0x00300603
    46a0:	01060905 	tsteq	r6, r5, lsl #18
    46a4:	30060305 	andcc	r0, r6, r5, lsl #6
    46a8:	01060c05 	tsteq	r6, r5, lsl #24
    46ac:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    46b0:	05220604 	streq	r0, [r2, #-1540]!	; 0xfffff9fc
    46b4:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    46b8:	2f210604 	svccs	0x00210604
    46bc:	03060105 	movweq	r0, #24837	; 0x6105
    46c0:	03050122 	movweq	r0, #20770	; 0x5122
    46c4:	3c620306 	stclcc	3, cr0, [r2], #-24	; 0xffffffe8
    46c8:	01061105 	tsteq	r6, r5, lsl #2
    46cc:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    46d0:	063e0603 	ldrteq	r0, [lr], -r3, lsl #12
    46d4:	304a0624 	subcc	r0, sl, r4, lsr #12
    46d8:	29050204 	stmdbcs	r5, {r2, r9}
    46dc:	0101c803 	tsteq	r1, r3, lsl #16
    46e0:	05143d05 	ldreq	r3, [r4, #-3333]	; 0xfffff2fb
    46e4:	38051705 	stmdacc	r5, {r0, r2, r8, r9, sl, ip}
    46e8:	01040106 	tsteq	r4, r6, lsl #2
    46ec:	b3030305 	movwlt	r0, #13061	; 0x3305
    46f0:	02043c7e 	andeq	r3, r4, #32256	; 0x7e00
    46f4:	cd033805 	stcgt	8, cr3, [r3, #-20]	; 0xffffffec
    46f8:	01042001 	tsteq	r4, r1
    46fc:	03060305 	movweq	r0, #25349	; 0x6305
    4700:	2f2e7eb3 	svccs	0x002e7eb3
    4704:	01061905 	tsteq	r6, r5, lsl #18
    4708:	062e0305 	strteq	r0, [lr], -r5, lsl #6
    470c:	053e4b4b 	ldreq	r4, [lr, #-2891]!	; 0xfffff4b5
    4710:	05310608 	ldreq	r0, [r1, #-1544]!	; 0xfffff9f8
    4714:	09052b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, sp}
    4718:	2308052e 	movwcs	r0, #34094	; 0x852e
    471c:	1d060905 	vstrne.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4720:	04260305 	strteq	r0, [r6], #-773	; 0xfffffcfb
    4724:	03290502 			; <UNDEFINED> instruction: 0x03290502
    4728:	050101bb 	streq	r0, [r1, #-443]	; 0xfffffe45
    472c:	0505143d 	streq	r1, [r5, #-1085]	; 0xfffffbc3
    4730:	06380517 			; <UNDEFINED> instruction: 0x06380517
    4734:	05010401 	streq	r0, [r1, #-1025]	; 0xfffffbff
    4738:	c1030602 	tstgt	r3, r2, lsl #12
    473c:	05053c7e 	streq	r3, [r5, #-3198]	; 0xfffff382
    4740:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4744:	054b4006 	strbeq	r4, [fp, #-6]
    4748:	20730304 	rsbscs	r0, r3, r4, lsl #6
    474c:	01061305 	tsteq	r6, r5, lsl #6
    4750:	063c0405 	ldrteq	r0, [ip], -r5, lsl #8
    4754:	0608053d 			; <UNDEFINED> instruction: 0x0608053d
    4758:	06040501 	streq	r0, [r4], -r1, lsl #10
    475c:	06080559 			; <UNDEFINED> instruction: 0x06080559
    4760:	030b0501 	movweq	r0, #46337	; 0xb501
    4764:	0d024a5d 	vstreq	s8, [r2, #-372]	; 0xfffffe8c
    4768:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    476c:	02050012 	andeq	r0, r5, #18
    4770:	00000000 	andeq	r0, r0, r0
    4774:	0102da03 	tsteq	r2, r3, lsl #20
    4778:	02150105 	andseq	r0, r5, #1073741825	; 0x40000001
    477c:	01010001 	tsteq	r1, r1
    4780:	05001805 	streq	r1, [r0, #-2053]	; 0xfffff7fb
    4784:	00000002 	andeq	r0, r0, r2
    4788:	02df0300 	sbcseq	r0, pc, #0, 6
    478c:	15020501 	strne	r0, [r2, #-1281]	; 0xfffffaff
    4790:	13060105 	movwne	r0, #24837	; 0x6105
    4794:	01000202 	tsteq	r0, r2, lsl #4
    4798:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    479c:	02050029 	andeq	r0, r5, #41	; 0x29
    47a0:	00000000 	andeq	r0, r0, r0
    47a4:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    47a8:	01060505 	tsteq	r6, r5, lsl #10
    47ac:	21060305 	tstcs	r6, r5, lsl #6
    47b0:	01060705 	tsteq	r6, r5, lsl #14
    47b4:	30060205 	andcc	r0, r6, r5, lsl #4
    47b8:	01060505 	tsteq	r6, r5, lsl #10
    47bc:	21060305 	tstcs	r6, r5, lsl #6
    47c0:	01060805 	tsteq	r6, r5, lsl #16
    47c4:	3e060205 	cdpcc	2, 0, cr0, cr6, cr5, {0}
    47c8:	13060105 	movwne	r0, #24837	; 0x6105
    47cc:	01000302 	tsteq	r0, r2, lsl #6
    47d0:	05030401 	streq	r0, [r3, #-1025]	; 0xfffffbff
    47d4:	02050017 	andeq	r0, r5, #23
    47d8:	00000000 	andeq	r0, r0, r0
    47dc:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    47e0:	17051402 	strne	r1, [r5, -r2, lsl #8]
    47e4:	02051006 	andeq	r1, r5, #6
    47e8:	672f0622 	strvs	r0, [pc, -r2, lsr #12]!
    47ec:	13060105 	movwne	r0, #24837	; 0x6105
    47f0:	022d0205 	eoreq	r0, sp, #1342177280	; 0x50000000
    47f4:	01010002 	tsteq	r1, r2
    47f8:	000001c1 	andeq	r0, r0, r1, asr #3
    47fc:	01210003 			; <UNDEFINED> instruction: 0x01210003
    4800:	01020000 	mrseq	r0, (UNDEF: 2)
    4804:	000d0efb 	strdeq	r0, [sp], -fp
    4808:	01010101 	tsteq	r1, r1, lsl #2
    480c:	01000000 	mrseq	r0, (UNDEF: 0)
    4810:	2f010000 	svccs	0x00010000
    4814:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4818:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    481c:	2f6e6974 	svccs	0x006e6974
    4820:	6b736544 	blvs	1cddd38 <__ccfg+0x1cbdd90>
    4824:	2f706f74 	svccs	0x00706f74
    4828:	4f534c4f 	svcmi	0x00534c4f
    482c:	2f54454e 	svccs	0x0054454e
    4830:	4f434950 	svcmi	0x00434950
    4834:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4838:	2f534f63 	svccs	0x00534f63
    483c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    4840:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
    4844:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    4848:	73752f00 	cmnvc	r5, #0, 30
    484c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4850:	63672f62 	cmnvs	r7, #392	; 0x188
    4854:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4858:	6f6e2d6d 	svcvs	0x006e2d6d
    485c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    4860:	2f696261 	svccs	0x00696261
    4864:	2e322e39 	mrccs	14, 1, r2, cr2, cr9, {1}
    4868:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    486c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4870:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    4874:	2f656d6f 	svccs	0x00656d6f
    4878:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    487c:	442f6e69 	strtmi	r6, [pc], #-3689	; 4884 <__exidx_end+0x1c04>
    4880:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4884:	4f2f706f 	svcmi	0x002f706f
    4888:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    488c:	502f5445 	eorpl	r5, pc, r5, asr #8
    4890:	534f4349 	movtpl	r4, #62281	; 0xf349
    4894:	6369502f 	cmnvs	r9, #47	; 0x2f
    4898:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
    489c:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
    48a0:	682f0058 	stmdavs	pc!, {r3, r4, r6}	; <UNPREDICTABLE>
    48a4:	2f656d6f 	svccs	0x00656d6f
    48a8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    48ac:	442f6e69 	strtmi	r6, [pc], #-3689	; 48b4 <__exidx_end+0x1c34>
    48b0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    48b4:	4f2f706f 	svcmi	0x002f706f
    48b8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    48bc:	502f5445 	eorpl	r5, pc, r5, asr #8
    48c0:	534f4349 	movtpl	r4, #62281	; 0xf349
    48c4:	6369502f 	cmnvs	r9, #47	; 0x2f
    48c8:	0000534f 	andeq	r5, r0, pc, asr #6
    48cc:	5f726573 	svcpl	0x00726573
    48d0:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    48d4:	00000100 	andeq	r0, r0, r0, lsl #2
    48d8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    48dc:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    48e0:	00000200 	andeq	r0, r0, r0, lsl #4
    48e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    48e8:	0300682e 	movweq	r6, #2094	; 0x82e
    48ec:	616d0000 	cmnvs	sp, r0
    48f0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    48f4:	00000300 	andeq	r0, r0, r0, lsl #6
    48f8:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    48fc:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4900:	0300682e 	movweq	r6, #2094	; 0x82e
    4904:	75620000 	strbvc	r0, [r2, #-0]!
    4908:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    490c:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4910:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4914:	73000003 	movwvc	r0, #3
    4918:	6f697379 	svcvs	0x00697379
    491c:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4920:	05000000 	streq	r0, [r0, #-0]
    4924:	0205002a 	andeq	r0, r5, #42	; 0x2a
    4928:	000015a0 	andeq	r1, r0, r0, lsr #11
    492c:	05010c03 	streq	r0, [r1, #-3075]	; 0xfffff3fd
    4930:	05141602 	ldreq	r1, [r4, #-1538]	; 0xfffff9fe
    4934:	7a03062a 	bvc	c61e4 <__ccfg+0xa623c>
    4938:	05052001 	streq	r2, [r5, #-1]
    493c:	06020534 			; <UNDEFINED> instruction: 0x06020534
    4940:	06100532 			; <UNDEFINED> instruction: 0x06100532
    4944:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4948:	21060305 	tstcs	r6, r5, lsl #6
    494c:	01060f05 	tsteq	r6, r5, lsl #30
    4950:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
    4954:	05210604 	streq	r0, [r1, #-1540]!	; 0xfffff9fc
    4958:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    495c:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    4960:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    4964:	3d210605 	stccc	6, cr0, [r1, #-20]!	; 0xffffffec
    4968:	2d160305 	ldccs	3, cr0, [r6, #-20]	; 0xffffffec
    496c:	054f0205 	strbeq	r0, [pc, #-517]	; 476f <__exidx_end+0x1aef>
    4970:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    4974:	052f0603 	streq	r0, [pc, #-1539]!	; 4379 <__exidx_end+0x16f9>
    4978:	05010613 	streq	r0, [r1, #-1555]	; 0xfffff9ed
    497c:	02052008 	andeq	r2, r5, #8
    4980:	05052406 	streq	r2, [r5, #-1030]	; 0xfffffbfa
    4984:	03050106 	movweq	r0, #20742	; 0x5106
    4988:	08052106 	stmdaeq	r5, {r1, r2, r8, sp}
    498c:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4990:	3d593e06 	ldclcc	14, cr3, [r9, #-24]	; 0xffffffe8
    4994:	01060c05 	tsteq	r6, r5, lsl #24
    4998:	2f060205 	svccs	0x00060205
    499c:	01060505 	tsteq	r6, r5, lsl #10
    49a0:	2f060305 	svccs	0x00060305
    49a4:	01060e05 	tsteq	r6, r5, lsl #28
    49a8:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
    49ac:	75030603 	strvc	r0, [r3, #-1539]	; 0xfffff9fd
    49b0:	060a052e 	streq	r0, [sl], -lr, lsr #10
    49b4:	4a6e0301 	bmi	1b855c0 <__ccfg+0x1b65618>
    49b8:	01000702 	tsteq	r0, r2, lsl #14
    49bc:	00019e01 	andeq	r9, r1, r1, lsl #28
    49c0:	3d000300 	stccc	3, cr0, [r0, #-0]
    49c4:	02000001 	andeq	r0, r0, #1
    49c8:	0d0efb01 	vstreq	d15, [lr, #-4]
    49cc:	01010100 	mrseq	r0, (UNDEF: 17)
    49d0:	00000001 	andeq	r0, r0, r1
    49d4:	01000001 	tsteq	r0, r1
    49d8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4924 <__exidx_end+0x1ca4>
    49dc:	616d2f65 	cmnvs	sp, r5, ror #30
    49e0:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    49e4:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    49e8:	706f746b 	rsbvc	r7, pc, fp, ror #8
    49ec:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    49f0:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    49f4:	4349502f 	movtmi	r5, #36911	; 0x902f
    49f8:	502f534f 	eorpl	r5, pc, pc, asr #6
    49fc:	534f6369 	movtpl	r6, #62313	; 0xf369
    4a00:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    4a04:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    4a08:	61697265 	cmnvs	r9, r5, ror #4
    4a0c:	752f006c 	strvc	r0, [pc, #-108]!	; 49a8 <__exidx_end+0x1d28>
    4a10:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 484c <__exidx_end+0x1bcc>
    4a14:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4a18:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4a1c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4a20:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4a24:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4a28:	322e392f 	eorcc	r3, lr, #770048	; 0xbc000
    4a2c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    4a30:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4a34:	2f006564 	svccs	0x00006564
    4a38:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a3c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a40:	2f6e6974 	svccs	0x006e6974
    4a44:	6b736544 	blvs	1cddf5c <__ccfg+0x1cbdfb4>
    4a48:	2f706f74 	svccs	0x00706f74
    4a4c:	4f534c4f 	svcmi	0x00534c4f
    4a50:	2f54454e 	svccs	0x0054454e
    4a54:	4f434950 	svcmi	0x00434950
    4a58:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a5c:	2f534f63 	svccs	0x00534f63
    4a60:	33314343 	teqcc	r1, #201326593	; 0xc000001
    4a64:	2f005858 	svccs	0x00005858
    4a68:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    4a6c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
    4a70:	2f6e6974 	svccs	0x006e6974
    4a74:	6b736544 	blvs	1cddf8c <__ccfg+0x1cbdfe4>
    4a78:	2f706f74 	svccs	0x00706f74
    4a7c:	4f534c4f 	svcmi	0x00534c4f
    4a80:	2f54454e 	svccs	0x0054454e
    4a84:	4f434950 	svcmi	0x00434950
    4a88:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    4a8c:	00534f63 	subseq	r4, r3, r3, ror #30
    4a90:	72657300 	rsbvc	r7, r5, #0, 6
    4a94:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    4a98:	00632e66 	rsbeq	r2, r3, r6, ror #28
    4a9c:	73000001 	movwvc	r0, #1
    4aa0:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4aa4:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4aa8:	73000002 	movwvc	r0, #2
    4aac:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
    4ab0:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4ab4:	61000002 	tstvs	r0, r2
    4ab8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4abc:	00030068 	andeq	r0, r3, r8, rrx
    4ac0:	63616d00 	cmnvs	r1, #0, 26
    4ac4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4ac8:	70000003 	andvc	r0, r0, r3
    4acc:	5f736e69 	svcpl	0x00736e69
    4ad0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4ad4:	00030068 	andeq	r0, r3, r8, rrx
    4ad8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4adc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4ae0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4ae4:	0300682e 	movweq	r6, #2094	; 0x82e
    4ae8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4aec:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4af0:	00040068 	andeq	r0, r4, r8, rrx
    4af4:	75623c00 	strbvc	r3, [r2, #-3072]!	; 0xfffff400
    4af8:	2d746c69 	ldclcs	12, cr6, [r4, #-420]!	; 0xfffffe5c
    4afc:	003e6e69 	eorseq	r6, lr, r9, ror #28
    4b00:	00000000 	andeq	r0, r0, r0
    4b04:	05002c05 	streq	r2, [r0, #-3077]	; 0xfffff3fb
    4b08:	00161802 	andseq	r1, r6, r2, lsl #16
    4b0c:	010b0300 	mrseq	r0, (UNDEF: 59)
    4b10:	13140205 	tstne	r4, #1342177280	; 0x50000000
    4b14:	2c051413 	cfstrscs	mvf1, [r5], {19}
    4b18:	017a0306 	cmneq	sl, r6, lsl #6
    4b1c:	260e052e 	strcs	r0, [lr], -lr, lsr #10
    4b20:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    4b24:	3d300603 	ldccc	6, cr0, [r0, #-12]!
    4b28:	05010a03 	streq	r0, [r1, #-2563]	; 0xfffff5fd
    4b2c:	2e790302 	cdpcs	3, 7, cr0, cr9, cr2, {0}
    4b30:	22060d05 	andcs	r0, r6, #320	; 0x140
    4b34:	061e0205 	ldreq	r0, [lr], -r5, lsl #4
    4b38:	060d0522 	streq	r0, [sp], -r2, lsr #10
    4b3c:	2e050501 	cfsh32cs	mvfx0, mvfx5, #1
    4b40:	32060305 	andcc	r0, r6, #335544320	; 0x14000000
    4b44:	054e0205 	strbeq	r0, [lr, #-517]	; 0xfffffdfb
    4b48:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    4b4c:	03054a05 	movweq	r4, #23045	; 0x5a05
    4b50:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4b54:	01052402 	tsteq	r5, r2, lsl #8
    4b58:	09021306 	stmdbeq	r2, {r1, r2, r8, r9, ip}
    4b5c:	af010100 	svcge	0x00010100
    4b60:	03000001 	movweq	r0, #1
    4b64:	00013c00 	andeq	r3, r1, r0, lsl #24
    4b68:	fb010200 	blx	45372 <__ccfg+0x253ca>
    4b6c:	01000d0e 	tsteq	r0, lr, lsl #26
    4b70:	00010101 	andeq	r0, r1, r1, lsl #2
    4b74:	00010000 	andeq	r0, r1, r0
    4b78:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4b7c:	2f656d6f 	svccs	0x00656d6f
    4b80:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4b84:	442f6e69 	strtmi	r6, [pc], #-3689	; 4b8c <__exidx_end+0x1f0c>
    4b88:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4b8c:	4f2f706f 	svcmi	0x002f706f
    4b90:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4b94:	502f5445 	eorpl	r5, pc, r5, asr #8
    4b98:	534f4349 	movtpl	r4, #62281	; 0xf349
    4b9c:	6369502f 	cmnvs	r9, #47	; 0x2f
    4ba0:	502f534f 	eorpl	r5, pc, pc, asr #6
    4ba4:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4ba8:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4bac:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4bb0:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4bb4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4bb8:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4bbc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4bc0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4bc4:	61652d65 	cmnvs	r5, r5, ror #26
    4bc8:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4bcc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4bd0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4bd4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4bd8:	6f682f00 	svcvs	0x00682f00
    4bdc:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a30 <__exidx_end+0x1db0>
    4be0:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4be4:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4be8:	6f746b73 	svcvs	0x00746b73
    4bec:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4bf0:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4bf4:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4bf8:	2f534f43 	svccs	0x00534f43
    4bfc:	4f636950 	svcmi	0x00636950
    4c00:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4c04:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4c08:	6f682f00 	svcvs	0x00682f00
    4c0c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4a60 <__exidx_end+0x1de0>
    4c10:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4c14:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4c18:	6f746b73 	svcvs	0x00746b73
    4c1c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4c20:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4c24:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4c28:	2f534f43 	svccs	0x00534f43
    4c2c:	4f636950 	svcmi	0x00636950
    4c30:	73000053 	movwvc	r0, #83	; 0x53
    4c34:	695f7265 	ldmdbvs	pc, {r0, r2, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
    4c38:	632e666e 			; <UNDEFINED> instruction: 0x632e666e
    4c3c:	00000100 	andeq	r0, r0, r0, lsl #2
    4c40:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4c44:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4c48:	00000200 	andeq	r0, r0, r0, lsl #4
    4c4c:	61647473 	smcvs	18243	; 0x4743
    4c50:	682e6772 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, sp, lr}
    4c54:	00000200 	andeq	r0, r0, r0, lsl #4
    4c58:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    4c5c:	0300682e 	movweq	r6, #2094	; 0x82e
    4c60:	616d0000 	cmnvs	sp, r0
    4c64:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    4c68:	00000300 	andeq	r0, r0, r0, lsl #6
    4c6c:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
    4c70:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4c74:	0300682e 	movweq	r6, #2094	; 0x82e
    4c78:	75620000 	strbvc	r0, [r2, #-0]!
    4c7c:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
    4c80:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    4c84:	00682e73 	rsbeq	r2, r8, r3, ror lr
    4c88:	73000003 	movwvc	r0, #3
    4c8c:	6f697379 	svcvs	0x00697379
    4c90:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    4c94:	623c0000 	eorsvs	r0, ip, #0
    4c98:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    4c9c:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
    4ca0:	00000000 	andeq	r0, r0, r0
    4ca4:	002d0500 	eoreq	r0, sp, r0, lsl #10
    4ca8:	166c0205 	strbtne	r0, [ip], -r5, lsl #4
    4cac:	0d030000 	stceq	0, cr0, [r3, #-0]
    4cb0:	17020501 	strne	r0, [r2, -r1, lsl #10]
    4cb4:	2d051413 	cfstrscs	mvf1, [r5, #-76]	; 0xffffffb4
    4cb8:	01780306 	cmneq	r8, r6, lsl #6
    4cbc:	3605052e 	strcc	r0, [r5], -lr, lsr #10
    4cc0:	23060205 	movwcs	r0, #25093	; 0x6205
    4cc4:	01061005 	tsteq	r6, r5
    4cc8:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    4ccc:	052f0603 	streq	r0, [pc, #-1539]!	; 46d1 <__exidx_end+0x1a51>
    4cd0:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4cd4:	04053c06 	streq	r3, [r5], #-3078	; 0xfffff3fa
    4cd8:	0b052106 	bleq	14d0f8 <__ccfg+0x12d150>
    4cdc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    4ce0:	07054b06 	streq	r4, [r5, -r6, lsl #22]
    4ce4:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4ce8:	053d2106 	ldreq	r2, [sp, #-262]!	; 0xfffffefa
    4cec:	052d1603 	streq	r1, [sp, #-1539]!	; 0xfffff9fd
    4cf0:	05304f02 	ldreq	r4, [r0, #-3842]!	; 0xfffff0fe
    4cf4:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    4cf8:	3d3e0602 	ldccc	6, cr0, [lr, #-8]!
    4cfc:	01060c05 	tsteq	r6, r5, lsl #24
    4d00:	30060205 	andcc	r0, r6, r5, lsl #4
    4d04:	13060105 	movwne	r0, #24837	; 0x6105
    4d08:	69030a05 	stmdbvs	r3, {r0, r2, r9, fp}
    4d0c:	00060266 	andeq	r0, r6, r6, ror #4
    4d10:	01a10101 			; <UNDEFINED> instruction: 0x01a10101
    4d14:	00030000 	andeq	r0, r3, r0
    4d18:	00000126 	andeq	r0, r0, r6, lsr #2
    4d1c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d20:	0101000d 	tsteq	r1, sp
    4d24:	00000101 	andeq	r0, r0, r1, lsl #2
    4d28:	00000100 	andeq	r0, r0, r0, lsl #2
    4d2c:	6f682f01 	svcvs	0x00682f01
    4d30:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4b84 <__exidx_end+0x1f04>
    4d34:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4d38:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4d3c:	6f746b73 	svcvs	0x00746b73
    4d40:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4d44:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4d48:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4d4c:	2f534f43 	svccs	0x00534f43
    4d50:	4f636950 	svcmi	0x00636950
    4d54:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    4d58:	2f736269 	svccs	0x00736269
    4d5c:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    4d60:	2f006c61 	svccs	0x00006c61
    4d64:	2f727375 	svccs	0x00727375
    4d68:	2f62696c 	svccs	0x0062696c
    4d6c:	2f636367 	svccs	0x00636367
    4d70:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d74:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d78:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d7c:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    4d80:	2f312e32 	svccs	0x00312e32
    4d84:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4d88:	00656475 	rsbeq	r6, r5, r5, ror r4
    4d8c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4cd8 <__exidx_end+0x2058>
    4d90:	616d2f65 	cmnvs	sp, r5, ror #30
    4d94:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4d98:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4d9c:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4da0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4da4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4da8:	4349502f 	movtmi	r5, #36911	; 0x902f
    4dac:	502f534f 	eorpl	r5, pc, pc, asr #6
    4db0:	534f6369 	movtpl	r6, #62313	; 0xf369
    4db4:	3143432f 	cmpcc	r3, pc, lsr #6
    4db8:	00585833 	subseq	r5, r8, r3, lsr r8
    4dbc:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 4d08 <__exidx_end+0x2088>
    4dc0:	616d2f65 	cmnvs	sp, r5, ror #30
    4dc4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    4dc8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    4dcc:	706f746b 	rsbvc	r7, pc, fp, ror #8
    4dd0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    4dd4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    4dd8:	4349502f 	movtmi	r5, #36911	; 0x902f
    4ddc:	502f534f 	eorpl	r5, pc, pc, asr #6
    4de0:	534f6369 	movtpl	r6, #62313	; 0xf369
    4de4:	5f5f0000 	svcpl	0x005f0000
    4de8:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    4dec:	61697265 	cmnvs	r9, r5, ror #4
    4df0:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4df4:	73000001 	movwvc	r0, #1
    4df8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4dfc:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4e00:	61000002 	tstvs	r0, r2
    4e04:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4e08:	00030068 	andeq	r0, r3, r8, rrx
    4e0c:	63616d00 	cmnvs	r1, #0, 26
    4e10:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4e14:	70000003 	andvc	r0, r0, r3
    4e18:	5f736e69 	svcpl	0x00736e69
    4e1c:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4e20:	00030068 	andeq	r0, r3, r8, rrx
    4e24:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4e28:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4e2c:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4e30:	0300682e 	movweq	r6, #2094	; 0x82e
    4e34:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4e38:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4e3c:	00040068 	andeq	r0, r4, r8, rrx
    4e40:	01050000 	mrseq	r0, (UNDEF: 5)
    4e44:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
    4e48:	03000016 	movweq	r0, #22
    4e4c:	0601011c 			; <UNDEFINED> instruction: 0x0601011c
    4e50:	033c0620 	teqeq	ip, #32, 12	; 0x2000000
    4e54:	05013c26 	streq	r3, [r1, #-3110]	; 0xfffff3da
    4e58:	585f0302 	ldmdapl	pc, {r1, r8, r9}^	; <UNPREDICTABLE>
    4e5c:	01151313 	tsteq	r5, r3, lsl r3
    4e60:	06051301 	streq	r1, [r5], -r1, lsl #6
    4e64:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    4e68:	05053d06 	streq	r3, [r5, #-3334]	; 0xfffff2fa
    4e6c:	03050106 	movweq	r0, #20742	; 0x5106
    4e70:	09052f06 	stmdbeq	r5, {r1, r2, r8, r9, sl, fp, sp}
    4e74:	07050106 	streq	r0, [r5, -r6, lsl #2]
    4e78:	280a053c 	stmdacs	sl, {r2, r3, r4, r5, r8, sl}
    4e7c:	2e060205 	cdpcs	2, 0, cr0, cr6, cr5, {0}
    4e80:	01060a05 	tsteq	r6, r5, lsl #20
    4e84:	83060205 	movwhi	r0, #25093	; 0x6205
    4e88:	01060605 	tsteq	r6, r5, lsl #12
    4e8c:	1f211f21 	svcne	0x00211f21
    4e90:	21060205 	tstcs	r6, r5, lsl #4
    4e94:	01060605 	tsteq	r6, r5, lsl #12
    4e98:	21060205 	tstcs	r6, r5, lsl #4
    4e9c:	01060505 	tsteq	r6, r5, lsl #10
    4ea0:	30060305 	andcc	r0, r6, r5, lsl #6
    4ea4:	4a74033d 	bmi	1d05ba0 <__ccfg+0x1ce5bf8>
    4ea8:	01060d05 	tsteq	r6, r5, lsl #26
    4eac:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
    4eb0:	08022007 	stmdaeq	r2, {r0, r1, r2, sp}
    4eb4:	4b010100 	blmi	452bc <__ccfg+0x25314>
    4eb8:	03000002 	movweq	r0, #2
    4ebc:	00012500 	andeq	r2, r1, r0, lsl #10
    4ec0:	fb010200 	blx	456ca <__ccfg+0x25722>
    4ec4:	01000d0e 	tsteq	r0, lr, lsl #26
    4ec8:	00010101 	andeq	r0, r1, r1, lsl #2
    4ecc:	00010000 	andeq	r0, r1, r0
    4ed0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4ed4:	2f656d6f 	svccs	0x00656d6f
    4ed8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    4edc:	442f6e69 	strtmi	r6, [pc], #-3689	; 4ee4 <__exidx_end+0x2264>
    4ee0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    4ee4:	4f2f706f 	svcmi	0x002f706f
    4ee8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    4eec:	502f5445 	eorpl	r5, pc, r5, asr #8
    4ef0:	534f4349 	movtpl	r4, #62281	; 0xf349
    4ef4:	6369502f 	cmnvs	r9, #47	; 0x2f
    4ef8:	502f534f 	eorpl	r5, pc, pc, asr #6
    4efc:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    4f00:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    4f04:	006c6169 	rsbeq	r6, ip, r9, ror #2
    4f08:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4f0c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4f10:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4f14:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4f18:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4f1c:	61652d65 	cmnvs	r5, r5, ror #26
    4f20:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    4f24:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    4f28:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4f2c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4f30:	6f682f00 	svcvs	0x00682f00
    4f34:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4d88 <__exidx_end+0x2108>
    4f38:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f3c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f40:	6f746b73 	svcvs	0x00746b73
    4f44:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f48:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f4c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f50:	2f534f43 	svccs	0x00534f43
    4f54:	4f636950 	svcmi	0x00636950
    4f58:	43432f53 	movtmi	r2, #16211	; 0x3f53
    4f5c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    4f60:	6f682f00 	svcvs	0x00682f00
    4f64:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4db8 <__exidx_end+0x2138>
    4f68:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    4f6c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    4f70:	6f746b73 	svcvs	0x00746b73
    4f74:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    4f78:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    4f7c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    4f80:	2f534f43 	svccs	0x00534f43
    4f84:	4f636950 	svcmi	0x00636950
    4f88:	5f000053 	svcpl	0x00000053
    4f8c:	736e695f 	cmnvc	lr, #1556480	; 0x17c000
    4f90:	61697265 	cmnvs	r9, r5, ror #4
    4f94:	00632e6c 	rsbeq	r2, r3, ip, ror #28
    4f98:	73000001 	movwvc	r0, #1
    4f9c:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4fa0:	00682e74 	rsbeq	r2, r8, r4, ror lr
    4fa4:	61000002 	tstvs	r0, r2
    4fa8:	2e686372 	mcrcs	3, 3, r6, cr8, cr2, {3}
    4fac:	00030068 	andeq	r0, r3, r8, rrx
    4fb0:	63616d00 	cmnvs	r1, #0, 26
    4fb4:	00682e68 	rsbeq	r2, r8, r8, ror #28
    4fb8:	70000003 	andvc	r0, r0, r3
    4fbc:	5f736e69 	svcpl	0x00736e69
    4fc0:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    4fc4:	00030068 	andeq	r0, r3, r8, rrx
    4fc8:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    4fcc:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
    4fd0:	7379735f 	cmnvc	r9, #2080374785	; 0x7c000001
    4fd4:	0300682e 	movweq	r6, #2094	; 0x82e
    4fd8:	79730000 	ldmdbvc	r3!, {}^	; <UNPREDICTABLE>
    4fdc:	2e6f6973 			; <UNDEFINED> instruction: 0x2e6f6973
    4fe0:	00040068 	andeq	r0, r4, r8, rrx
    4fe4:	01050000 	mrseq	r0, (UNDEF: 5)
    4fe8:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
    4fec:	03000017 	movweq	r0, #23
    4ff0:	06010122 	streq	r0, [r1], -r2, lsr #2
    4ff4:	053c0620 	ldreq	r0, [ip, #-1568]!	; 0xfffff9e0
    4ff8:	13136b02 	tstne	r3, #2048	; 0x800
    4ffc:	06100516 			; <UNDEFINED> instruction: 0x06100516
    5000:	20050501 	andcs	r0, r5, r1, lsl #10
    5004:	30060305 	andcc	r0, r6, r5, lsl #6
    5008:	053f0205 	ldreq	r0, [pc, #-517]!	; 4e0b <__exidx_end+0x218b>
    500c:	0501061d 	streq	r0, [r1, #-1565]	; 0xfffff9e3
    5010:	1d053c0b 	stcne	12, cr3, [r5, #-44]	; 0xffffffd4
    5014:	200b0520 	andcs	r0, fp, r0, lsr #10
    5018:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
    501c:	2f240603 	svccs	0x00240603
    5020:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
    5024:	05130606 	ldreq	r0, [r3, #-1542]	; 0xfffff9fa
    5028:	2f061f02 	svccs	0x00061f02
    502c:	01060605 	tsteq	r6, r5, lsl #12
    5030:	30060205 	andcc	r0, r6, r5, lsl #4
    5034:	83160101 	tsthi	r6, #1073741824	; 0x40000000
    5038:	01060505 	tsteq	r6, r5, lsl #10
    503c:	3d060305 	stccc	3, cr0, [r6, #-20]	; 0xffffffec
    5040:	01060605 	tsteq	r6, r5, lsl #12
    5044:	2f060405 	svccs	0x00060405
    5048:	01060705 	tsteq	r6, r5, lsl #14
    504c:	05210405 	streq	r0, [r1, #-1029]!	; 0xfffffbfb
    5050:	04051f07 	streq	r1, [r5], #-3847	; 0xfffff0f9
    5054:	03052106 	movweq	r2, #20742	; 0x5106
    5058:	06070531 			; <UNDEFINED> instruction: 0x06070531
    505c:	20060501 	andcs	r0, r6, r1, lsl #10
    5060:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5064:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
    5068:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    506c:	13052e05 	movwne	r2, #24069	; 0x5e05
    5070:	0603052e 	streq	r0, [r3], -lr, lsr #10
    5074:	0608052f 	streq	r0, [r8], -pc, lsr #10
    5078:	06030501 	streq	r0, [r3], -r1, lsl #10
    507c:	060d052f 	streq	r0, [sp], -pc, lsr #10
    5080:	06030501 	streq	r0, [r3], -r1, lsl #10
    5084:	3102052f 	tstcc	r2, pc, lsr #10
    5088:	01060605 	tsteq	r6, r5, lsl #12
    508c:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    5090:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    5094:	21010606 	tstcs	r1, r6, lsl #12
    5098:	0603051f 			; <UNDEFINED> instruction: 0x0603051f
    509c:	0606052f 	streq	r0, [r6], -pc, lsr #10
    50a0:	06020501 	streq	r0, [r2], -r1, lsl #10
    50a4:	05914023 	ldreq	r4, [r1, #35]	; 0x23
    50a8:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50ac:	053d0602 	ldreq	r0, [sp, #-1538]!	; 0xfffff9fe
    50b0:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    50b4:	07053c11 	smladeq	r5, r1, ip, r3
    50b8:	06020521 	streq	r0, [r2], -r1, lsr #10
    50bc:	0605054b 	streq	r0, [r5], -fp, asr #10
    50c0:	06020501 	streq	r0, [r2], -r1, lsl #10
    50c4:	060a0524 	streq	r0, [sl], -r4, lsr #10
    50c8:	9f060501 	svcls	0x00060501
    50cc:	051f0a05 	ldreq	r0, [pc, #-2565]	; 46cf <__exidx_end+0x1a4f>
    50d0:	05210602 	streq	r0, [r1, #-1538]!	; 0xfffff9fe
    50d4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    50d8:	052f0602 	streq	r0, [pc, #-1538]!	; 4ade <__exidx_end+0x1e5e>
    50dc:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    50e0:	05210603 	streq	r0, [r1, #-1539]!	; 0xfffff9fd
    50e4:	0501060d 	streq	r0, [r1, #-1549]	; 0xfffff9f3
    50e8:	052f0603 	streq	r0, [pc, #-1539]!	; 4aed <__exidx_end+0x1e6d>
    50ec:	06053002 	streq	r3, [r5], -r2
    50f0:	02050106 	andeq	r0, r5, #-2147483647	; 0x80000001
    50f4:	01053d06 	tsteq	r5, r6, lsl #26
    50f8:	02052206 	andeq	r2, r5, #1610612736	; 0x60000000
    50fc:	0601053a 			; <UNDEFINED> instruction: 0x0601053a
    5100:	000d0230 	andeq	r0, sp, r0, lsr r2
    5104:	03bd0101 			; <UNDEFINED> instruction: 0x03bd0101
    5108:	00030000 	andeq	r0, r3, r0
    510c:	0000013a 	andeq	r0, r0, sl, lsr r1
    5110:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5114:	0101000d 	tsteq	r1, sp
    5118:	00000101 	andeq	r0, r0, r1, lsl #2
    511c:	00000100 	andeq	r0, r0, r0, lsl #2
    5120:	6f682f01 	svcvs	0x00682f01
    5124:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 4f78 <__exidx_end+0x22f8>
    5128:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    512c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5130:	6f746b73 	svcvs	0x00746b73
    5134:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5138:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    513c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5140:	2f534f43 	svccs	0x00534f43
    5144:	4f636950 	svcmi	0x00636950
    5148:	4c502f53 	mrrcmi	15, 5, r2, r0, cr3
    514c:	2f736269 	svccs	0x00736269
    5150:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    5154:	2f006c61 	svccs	0x00006c61
    5158:	2f727375 	svccs	0x00727375
    515c:	2f62696c 	svccs	0x0062696c
    5160:	2f636367 	svccs	0x00636367
    5164:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5168:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    516c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5170:	2e392f69 	cdpcs	15, 3, cr2, cr9, cr9, {3}
    5174:	2f312e32 	svccs	0x00312e32
    5178:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    517c:	00656475 	rsbeq	r6, r5, r5, ror r4
    5180:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50cc <__exidx_end+0x244c>
    5184:	616d2f65 	cmnvs	sp, r5, ror #30
    5188:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    518c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    5190:	706f746b 	rsbvc	r7, pc, fp, ror #8
    5194:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    5198:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    519c:	4349502f 	movtmi	r5, #36911	; 0x902f
    51a0:	502f534f 	eorpl	r5, pc, pc, asr #6
    51a4:	534f6369 	movtpl	r6, #62313	; 0xf369
    51a8:	3143432f 	cmpcc	r3, pc, lsr #6
    51ac:	00585833 	subseq	r5, r8, r3, lsr r8
    51b0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 50fc <__exidx_end+0x247c>
    51b4:	616d2f65 	cmnvs	sp, r5, ror #30
    51b8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    51bc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    51c0:	706f746b 	rsbvc	r7, pc, fp, ror #8
    51c4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    51c8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    51cc:	4349502f 	movtmi	r5, #36911	; 0x902f
    51d0:	502f534f 	eorpl	r5, pc, pc, asr #6
    51d4:	534f6369 	movtpl	r6, #62313	; 0xf369
    51d8:	66760000 	ldrbtvs	r0, [r6], -r0
    51dc:	2e6d726f 	cdpcs	2, 6, cr7, cr13, cr15, {3}
    51e0:	00010063 	andeq	r0, r1, r3, rrx
    51e4:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51e8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    51ec:	00020068 	andeq	r0, r2, r8, rrx
    51f0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    51f4:	2e677261 	cdpcs	2, 6, cr7, cr7, cr1, {3}
    51f8:	00020068 	andeq	r0, r2, r8, rrx
    51fc:	63726100 	cmnvs	r2, #0, 2
    5200:	00682e68 	rsbeq	r2, r8, r8, ror #28
    5204:	6d000003 	stcvs	0, cr0, [r0, #-12]
    5208:	2e686361 	cdpcs	3, 6, cr6, cr8, cr1, {3}
    520c:	00030068 	andeq	r0, r3, r8, rrx
    5210:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    5214:	79735f73 	ldmdbvc	r3!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5218:	00682e73 	rsbeq	r2, r8, r3, ror lr
    521c:	62000003 	andvs	r0, r0, #3
    5220:	6f747475 	svcvs	0x00747475
    5224:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    5228:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    522c:	00000300 	andeq	r0, r0, r0, lsl #6
    5230:	69737973 	ldmdbvs	r3!, {r0, r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    5234:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    5238:	3c000004 	stccc	0, cr0, [r0], {4}
    523c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    5240:	6e692d74 	mcrvs	13, 3, r2, cr9, cr4, {3}
    5244:	0000003e 	andeq	r0, r0, lr, lsr r0
    5248:	15050000 	strne	r0, [r5, #-0]
    524c:	58020500 	stmdapl	r2, {r8, sl}
    5250:	03000018 	movweq	r0, #24
    5254:	0305010c 	movweq	r0, #20748	; 0x510c
    5258:	06060513 			; <UNDEFINED> instruction: 0x06060513
    525c:	580b0501 	stmdapl	fp, {r0, r8, sl}
    5260:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    5264:	01060e05 	tsteq	r6, r5, lsl #28
    5268:	30060305 	andcc	r0, r6, r5, lsl #6
    526c:	01060405 	tsteq	r6, r5, lsl #8
    5270:	02590205 	subseq	r0, r9, #1342177280	; 0x50000000
    5274:	01010001 	tsteq	r1, r1
    5278:	05004305 	streq	r4, [r0, #-773]	; 0xfffffcfb
    527c:	00187802 	andseq	r7, r8, r2, lsl #16
    5280:	2e061900 	vmlacs.f16	s2, s12, s0	; <UNPREDICTABLE>
    5284:	05200605 	streq	r0, [r0, #-1541]!	; 0xfffff9fb
    5288:	2e1d0304 	cdpcs	3, 1, cr0, cr13, cr4, {0}
    528c:	28030505 	stmdacs	r3, {r0, r2, r8, sl}
    5290:	03070520 	movweq	r0, #29984	; 0x7520
    5294:	06052071 			; <UNDEFINED> instruction: 0x06052071
    5298:	05204a03 	streq	r4, [r0, #-2563]!	; 0xfffff5fd
    529c:	133e0602 	teqne	lr, #2097152	; 0x200000
    52a0:	18030514 	stmdane	r3, {r2, r4, r8, sl}
    52a4:	12030205 	andne	r0, r3, #1342177280	; 0x50000000
    52a8:	06040501 	streq	r0, [r4], -r1, lsl #10
    52ac:	06020501 	streq	r0, [r2], -r1, lsl #10
    52b0:	14030530 	strne	r0, [r3], #-1328	; 0xfffffad0
    52b4:	01060505 	tsteq	r6, r5, lsl #10
    52b8:	30060305 	andcc	r0, r6, r5, lsl #6
    52bc:	01060605 	tsteq	r6, r5, lsl #12
    52c0:	3e060405 	cdpcc	4, 0, cr0, cr6, cr5, {0}
    52c4:	01060b05 	tsteq	r6, r5, lsl #22
    52c8:	052e1005 	streq	r1, [lr, #-5]!
    52cc:	07052105 	streq	r2, [r5, -r5, lsl #2]
    52d0:	0605052d 	streq	r0, [r5], -sp, lsr #10
    52d4:	04053d3d 	streq	r3, [r5], #-3389	; 0xfffff2c3
    52d8:	0100da03 	tsteq	r0, r3, lsl #20
    52dc:	06070559 			; <UNDEFINED> instruction: 0x06070559
    52e0:	06040501 	streq	r0, [r4], -r1, lsl #10
    52e4:	4a7fa703 	bmi	1feeef8 <__ccfg+0x1fcef50>
    52e8:	03060505 	movweq	r0, #25861	; 0x6505
    52ec:	062000c2 	strteq	r0, [r0], -r2, asr #1
    52f0:	0612052f 	ldreq	r0, [r2], -pc, lsr #10
    52f4:	06030510 			; <UNDEFINED> instruction: 0x06030510
    52f8:	052e4303 	streq	r4, [lr, #-771]!	; 0xfffffcfd
    52fc:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5300:	054c0604 	strbeq	r0, [ip, #-1540]	; 0xfffff9fc
    5304:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    5308:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
    530c:	05052106 	streq	r2, [r5, #-262]	; 0xfffffefa
    5310:	e400c903 	str	ip, [r0], #-2307	; 0xfffff6fd
    5314:	08055959 	stmdaeq	r5, {r0, r3, r4, r6, r8, fp, ip, lr}
    5318:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    531c:	3c090306 	stccc	3, cr0, [r9], {6}
    5320:	01060c05 	tsteq	r6, r5, lsl #24
    5324:	05310105 	ldreq	r0, [r1, #-261]!	; 0xfffffefb
    5328:	7fa90304 	svcvc	0x00a90304
    532c:	0605053c 			; <UNDEFINED> instruction: 0x0605053c
    5330:	010f0568 	tsteq	pc, r8, ror #10
    5334:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    5338:	0513060c 	ldreq	r0, [r3, #-1548]	; 0xfffff9f4
    533c:	05052d12 	streq	r2, [r5, #-3346]	; 0xfffff2ee
    5340:	0e052f06 	cdpeq	15, 0, cr2, cr5, cr6, {0}
    5344:	06051406 	streq	r1, [r5], -r6, lsl #8
    5348:	0e052d06 	cdpeq	13, 0, cr2, cr5, cr6, {0}
    534c:	14051306 	strne	r1, [r5], #-774	; 0xfffffcfa
    5350:	2d06052e 	cfstr32cs	mvfx0, [r6, #-184]	; 0xffffff48
    5354:	09055a06 	stmdbeq	r5, {r1, r2, r9, fp, ip, lr}
    5358:	14050106 	strne	r0, [r5], #-262	; 0xfffffefa
    535c:	16053906 	strne	r3, [r5], -r6, lsl #18
    5360:	12050106 	andne	r0, r5, #-2147483647	; 0x80000001
    5364:	06052e06 	streq	r2, [r5], -r6, lsl #28
    5368:	05051306 	streq	r1, [r5, #-774]	; 0xfffffcfa
    536c:	20090306 	andcs	r0, r9, r6, lsl #6
    5370:	06120513 			; <UNDEFINED> instruction: 0x06120513
    5374:	2f080501 	svccs	0x00080501
    5378:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    537c:	052f0605 	streq	r0, [pc, #-1541]!	; 4d7f <__exidx_end+0x20ff>
    5380:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    5384:	06052012 			; <UNDEFINED> instruction: 0x06052012
    5388:	05593006 	ldrbeq	r3, [r9, #-6]
    538c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5390:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
    5394:	6f03060c 	svcvs	0x0003060c
    5398:	03050501 	movweq	r0, #21761	; 0x5501
    539c:	2e062011 	mcrcs	0, 0, r2, cr6, cr1, {0}
    53a0:	3c062e01 	stccc	14, cr2, [r6], {1}
    53a4:	74014a06 	strvc	r4, [r1], #-2566	; 0xfffff5fa
    53a8:	4a202082 	bmi	80d5b8 <__ccfg+0x7ed610>
    53ac:	05252e20 	streq	r2, [r5, #-3616]!	; 0xfffff1e0
    53b0:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    53b4:	05210605 	streq	r0, [r1, #-1541]!	; 0xfffff9fb
    53b8:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    53bc:	06052e12 			; <UNDEFINED> instruction: 0x06052e12
    53c0:	05133006 	ldreq	r3, [r3, #-6]
    53c4:	05140609 	ldreq	r0, [r4, #-1545]	; 0xfffff9f7
    53c8:	08051f0a 	stmdaeq	r5, {r1, r3, r8, r9, sl, fp, ip}
    53cc:	0606052d 	streq	r0, [r6], -sp, lsr #10
    53d0:	0905132f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r8, r9, ip}
    53d4:	13050106 	movwne	r0, #20742	; 0x5106
    53d8:	06070520 	streq	r0, [r7], -r0, lsr #10
    53dc:	0b05593f 	bleq	15b8e0 <__ccfg+0x13b938>
    53e0:	06050106 	streq	r0, [r5], -r6, lsl #2
    53e4:	05053006 	streq	r3, [r5, #-6]
    53e8:	016f0306 	cmneq	pc, r6, lsl #6
    53ec:	11030605 	tstne	r3, r5, lsl #12
    53f0:	012e0620 			; <UNDEFINED> instruction: 0x012e0620
    53f4:	063c062e 	ldrteq	r0, [ip], -lr, lsr #12
    53f8:	6666014a 	strbtvs	r0, [r6], -sl, asr #2
    53fc:	20582e01 	subscs	r2, r8, r1, lsl #28
    5400:	210c052e 	tstcs	ip, lr, lsr #10
    5404:	01060f05 	tsteq	r6, r5, lsl #30
    5408:	2f060605 	svccs	0x00060605
    540c:	0d051313 	stceq	3, cr1, [r5, #-76]	; 0xffffffb4
    5410:	0a051406 	beq	14a430 <__ccfg+0x12a488>
    5414:	2d08052d 	cfstr32cs	mvfx0, [r8, #-180]	; 0xffffff4c
    5418:	21060605 	tstcs	r6, r5, lsl #12
    541c:	05140705 	ldreq	r0, [r4, #-1797]	; 0xfffff8fb
    5420:	0513060f 	ldreq	r0, [r3, #-1551]	; 0xfffff9f1
    5424:	07052e15 	smladeq	r5, r5, lr, r2
    5428:	055a062d 	ldrbeq	r0, [sl, #-1581]	; 0xfffff9d3
    542c:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    5430:	05470615 	strbeq	r0, [r7, #-1557]	; 0xfffff9eb
    5434:	05010617 	streq	r0, [r1, #-1559]	; 0xfffff9e9
    5438:	052e0613 	streq	r0, [lr, #-1555]!	; 0xfffff9ed
    543c:	05130607 	ldreq	r0, [r3, #-1543]	; 0xfffff9f9
    5440:	59260606 	stmdbpl	r6!, {r1, r2, r9, sl}
    5444:	134f0505 	movtne	r0, #62725	; 0xf505
    5448:	06090513 			; <UNDEFINED> instruction: 0x06090513
    544c:	2f050511 	svccs	0x00050511
    5450:	13134f06 	tstne	r3, #6, 30
    5454:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    5458:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    545c:	06052e0b 	streq	r2, [r5], -fp, lsl #28
    5460:	054b3d06 	strbeq	r3, [fp, #-3334]	; 0xfffff2fa
    5464:	ad03060a 	stcge	6, cr0, [r3, #-40]	; 0xffffffd8
    5468:	0702207f 	smlsdxeq	r2, pc, r0, r2	; <UNPREDICTABLE>
    546c:	05010100 	streq	r0, [r1, #-256]	; 0xffffff00
    5470:	02050035 	andeq	r0, r5, #53	; 0x35
    5474:	00001aa8 	andeq	r1, r0, r8, lsr #21
    5478:	01019003 	tsteq	r1, r3
    547c:	14140205 	ldrne	r0, [r4], #-517	; 0xfffffdfb
    5480:	0e063505 	cfsh32eq	mvfx3, mvfx6, #5
    5484:	3205052e 	andcc	r0, r5, #192937984	; 0xb800000
    5488:	30060305 	andcc	r0, r6, r5, lsl #6
    548c:	06010567 	streq	r0, [r1], -r7, ror #10
    5490:	05011203 	streq	r1, [r1, #-515]	; 0xfffffdfd
    5494:	72030602 	andvc	r0, r3, #2097152	; 0x200000
    5498:	0608053c 			; <UNDEFINED> instruction: 0x0608053c
    549c:	3c060501 	cfstr32cc	mvfx0, [r6], {1}
    54a0:	3f060205 	svccc	0x00060205
    54a4:	01061505 	tsteq	r6, r5, lsl #10
    54a8:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
    54ac:	05400602 	strbeq	r0, [r0, #-1538]	; 0xfffff9fe
    54b0:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    54b4:	0b055805 	bleq	15b4d0 <__ccfg+0x13b528>
    54b8:	20050520 	andcs	r0, r5, r0, lsr #10
    54bc:	22060305 	andcs	r0, r6, #335544320	; 0x14000000
    54c0:	0202133d 	andeq	r1, r2, #-201326592	; 0xf4000000
    54c4:	c6010100 	strgt	r0, [r1], -r0, lsl #2
    54c8:	03000002 	movweq	r0, #2
    54cc:	00013a00 	andeq	r3, r1, r0, lsl #20
    54d0:	fb010200 	blx	45cda <__ccfg+0x25d32>
    54d4:	01000d0e 	tsteq	r0, lr, lsl #26
    54d8:	00010101 	andeq	r0, r1, r1, lsl #2
    54dc:	00010000 	andeq	r0, r1, r0
    54e0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    54e4:	2f656d6f 	svccs	0x00656d6f
    54e8:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
    54ec:	442f6e69 	strtmi	r6, [pc], #-3689	; 54f4 <__exidx_end+0x2874>
    54f0:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
    54f4:	4f2f706f 	svcmi	0x002f706f
    54f8:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
    54fc:	502f5445 	eorpl	r5, pc, r5, asr #8
    5500:	534f4349 	movtpl	r4, #62281	; 0xf349
    5504:	6369502f 	cmnvs	r9, #47	; 0x2f
    5508:	502f534f 	eorpl	r5, pc, pc, asr #6
    550c:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
    5510:	7265532f 	rsbvc	r5, r5, #-1140850688	; 0xbc000000
    5514:	006c6169 	rsbeq	r6, ip, r9, ror #2
    5518:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    551c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    5520:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    5524:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    5528:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    552c:	61652d65 	cmnvs	r5, r5, ror #26
    5530:	392f6962 	stmdbcc	pc!, {r1, r5, r6, r8, fp, sp, lr}	; <UNPREDICTABLE>
    5534:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
    5538:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    553c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5540:	6f682f00 	svcvs	0x00682f00
    5544:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 5398 <__exidx_end+0x2718>
    5548:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    554c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5550:	6f746b73 	svcvs	0x00746b73
    5554:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5558:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    555c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5560:	2f534f43 	svccs	0x00534f43
    5564:	4f636950 	svcmi	0x00636950
    5568:	43432f53 	movtmi	r2, #16211	; 0x3f53
    556c:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    5570:	6f682f00 	svcvs	0x00682f00
    5574:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; 53c8 <__exidx_end+0x2748>
    5578:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    557c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    5580:	6f746b73 	svcvs	0x00746b73
    5584:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    5588:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    558c:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
    5590:	2f534f43 	svccs	0x00534f43
    5594:	4f636950 	svcmi	0x00636950
    5598:	76000053 			; <UNDEFINED> instruction: 0x76000053
    559c:	6e616373 	mcrvs	3, 3, r6, cr1, cr3, {3}
    55a0:	0100632e 	tsteq	r0, lr, lsr #6
    55a4:	74730000 	ldrbtvc	r0, [r3], #-0
    55a8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    55ac:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55b0:	74730000 	ldrbtvc	r0, [r3], #-0
    55b4:	67726164 	ldrbvs	r6, [r2, -r4, ror #2]!
    55b8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    55bc:	72610000 	rsbvc	r0, r1, #0
    55c0:	682e6863 	stmdavs	lr!, {r0, r1, r5, r6, fp, sp, lr}
    55c4:	00000300 	andeq	r0, r0, r0, lsl #6
    55c8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    55cc:	0300682e 	movweq	r6, #2094	; 0x82e
    55d0:	69700000 	ldmdbvs	r0!, {}^	; <UNPREDICTABLE>
    55d4:	735f736e 	cmpvc	pc, #-1207959551	; 0xb8000001
    55d8:	682e7379 	stmdavs	lr!, {r0, r3, r4, r5, r6, r8, r9, ip, sp, lr}
    55dc:	00000300 	andeq	r0, r0, r0, lsl #6
    55e0:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
    55e4:	5f736e6f 	svcpl	0x00736e6f
    55e8:	2e737973 			; <UNDEFINED> instruction: 0x2e737973
    55ec:	00030068 	andeq	r0, r3, r8, rrx
    55f0:	73797300 	cmnvc	r9, #0, 6
    55f4:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    55f8:	00000400 	andeq	r0, r0, r0, lsl #8
    55fc:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
    5600:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
    5604:	00003e6e 	andeq	r3, r0, lr, ror #28
    5608:	05000000 	streq	r0, [r0, #-0]
    560c:	0205003a 	andeq	r0, r5, #58	; 0x3a
    5610:	00001af8 	strdeq	r1, [r0], -r8
    5614:	14020519 	strne	r0, [r2], #-1305	; 0xfffffae7
    5618:	05013a03 	streq	r3, [r1, #-2563]	; 0xfffff5fd
    561c:	05010605 	streq	r0, [r1, #-1541]	; 0xfffff9fb
    5620:	2044033a 	subcs	r0, r4, sl, lsr r3
    5624:	3c030505 	cfstr32cc	mvfx0, [r3], {5}
    5628:	3c12052e 	cfldr32cc	mvfx0, [r2], {46}	; 0x2e
    562c:	05400505 	strbeq	r0, [r0, #-1285]	; 0xfffffafb
    5630:	200e0316 	andcs	r0, lr, r6, lsl r3
    5634:	11030b05 	tstne	r3, r5, lsl #22
    5638:	0608052e 	streq	r0, [r8], -lr, lsr #10
    563c:	053c6203 	ldreq	r6, [ip, #-515]!	; 0xfffffdfd
    5640:	05010609 	streq	r0, [r1, #-1545]	; 0xfffff9f7
    5644:	03052e08 	movweq	r2, #24072	; 0x5e08
    5648:	06052106 	streq	r2, [r5], -r6, lsl #2
    564c:	03050106 	movweq	r0, #20742	; 0x5106
    5650:	0b053006 	bleq	151670 <__ccfg+0x1316c8>
    5654:	0f050106 	svceq	0x00050106
    5658:	20030520 	andcs	r0, r3, r0, lsr #10
    565c:	2e030105 	adfcss	f0, f3, f5
    5660:	030305ac 	movweq	r0, #13740	; 0x35ac
    5664:	0b053c52 	bleq	1547b4 <__ccfg+0x13480c>
    5668:	05741b03 	ldrbeq	r1, [r4, #-2819]!	; 0xfffff4fd
    566c:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    5670:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5674:	05ad0604 	streq	r0, [sp, #1540]!	; 0x604
    5678:	05010607 	streq	r0, [r1, #-1543]	; 0xfffff9f9
    567c:	05300604 	ldreq	r0, [r0, #-1540]!	; 0xfffff9fc
    5680:	05150607 	ldreq	r0, [r5, #-1543]	; 0xfffff9f9
    5684:	06051e08 	streq	r1, [r5], -r8, lsl #28
    5688:	0604052d 	streq	r0, [r4], -sp, lsr #10
    568c:	0705142f 	streq	r1, [r5, -pc, lsr #8]
    5690:	0b050106 	bleq	145ab0 <__ccfg+0x125b08>
    5694:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    5698:	0c050106 	stfeqs	f0, [r5], {6}
    569c:	2e1c0566 	cfmsc32cs	mvfx0, mvfx12, mvfx6
    56a0:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    56a4:	0a054e0b 	beq	158ed8 <__ccfg+0x138f30>
    56a8:	0b053c06 	bleq	1546c8 <__ccfg+0x134720>
    56ac:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56b0:	18058306 	stmdane	r5, {r1, r2, r8, r9, pc}
    56b4:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56b8:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    56bc:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    56c0:	11052f06 	tstne	r5, r6, lsl #30
    56c4:	3c205903 			; <UNDEFINED> instruction: 0x3c205903
    56c8:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    56cc:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    56d0:	013c6606 	teqeq	ip, r6, lsl #12
    56d4:	06010620 	streq	r0, [r1], -r0, lsr #12
    56d8:	063c743c 			; <UNDEFINED> instruction: 0x063c743c
    56dc:	743c064a 	ldrtvc	r0, [ip], #-1610	; 0xfffff9b6
    56e0:	3c902e21 	ldccc	14, cr2, [r0], {33}	; 0x21
    56e4:	01062e01 	tsteq	r6, r1, lsl #28
    56e8:	90822e06 	addls	r2, r2, r6, lsl #28
    56ec:	90064a21 	andls	r4, r6, r1, lsr #20
    56f0:	013c5806 	teqeq	ip, r6, lsl #16
    56f4:	2e06012e 	adfcssp	f0, f6, #0.5
    56f8:	82063c06 	andhi	r3, r6, #1536	; 0x600
    56fc:	3c3c0666 	ldccc	6, cr0, [ip], #-408	; 0xfffffe68
    5700:	04053c3c 	streq	r3, [r5], #-3132	; 0xfffff3c4
    5704:	060c0577 			; <UNDEFINED> instruction: 0x060c0577
    5708:	20100501 	andscs	r0, r0, r1, lsl #10
    570c:	ae061605 	cfmadd32ge	mvax0, mvfx1, mvfx6, mvfx5
    5710:	062e6606 	strteq	r6, [lr], -r6, lsl #12
    5714:	3c062e2e 	stccc	14, cr2, [r6], {46}	; 0x2e
    5718:	013c3c06 	teqeq	ip, r6, lsl #24
    571c:	0601062e 	streq	r0, [r1], -lr, lsr #12
    5720:	923c823c 	eorsls	r8, ip, #60, 4	; 0xc0000003
    5724:	58069006 	stmdapl	r6, {r1, r2, ip, pc}
    5728:	012e013c 			; <UNDEFINED> instruction: 0x012e013c
    572c:	3c062e06 	stccc	14, cr2, [r6], {6}
    5730:	06667406 	strbteq	r7, [r6], -r6, lsl #8
    5734:	3c3c3c3c 	ldccc	12, cr3, [ip], #-240	; 0xffffff10
    5738:	063c0672 			; <UNDEFINED> instruction: 0x063c0672
    573c:	3c21742e 	cfstrscc	mvf7, [r1], #-184	; 0xffffff48
    5740:	2e013c90 	mcrcs	12, 0, r3, cr1, cr0, {4}
    5744:	2e060106 	adfcss	f0, f6, f6
    5748:	05217490 	streq	r7, [r1, #-1168]!	; 0xfffffb70
    574c:	05144f04 	ldreq	r4, [r4, #-3844]	; 0xfffff0fc
    5750:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    5754:	04052e07 	streq	r2, [r5], #-3591	; 0xfffff1f9
    5758:	08053e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, ip, sp}
    575c:	06051306 	streq	r1, [r5], -r6, lsl #6
    5760:	0604052d 	streq	r0, [r4], -sp, lsr #10
    5764:	09051321 	stmdbeq	r5, {r0, r5, r8, r9, ip}
    5768:	04050106 	streq	r0, [r5], #-262	; 0xfffffefa
    576c:	0b052106 	bleq	14db8c <__ccfg+0x12dbe4>
    5770:	07052406 	streq	r2, [r5, -r6, lsl #8]
    5774:	74090306 	strvc	r0, [r9], #-774	; 0xfffffcfa
    5778:	01060e05 	tsteq	r6, r5, lsl #28
    577c:	053e0b05 	ldreq	r0, [lr, #-2821]!	; 0xfffff4fb
    5780:	6654030a 	ldrbvs	r0, [r4], -sl, lsl #6
    5784:	0a031105 	beq	c9ba0 <__ccfg+0xa9bf8>
    5788:	5116054a 	tstpl	r6, sl, asr #10
    578c:	01000502 	tsteq	r0, r2, lsl #10
    5790:	00016701 	andeq	r6, r1, r1, lsl #14
    5794:	47000200 	strmi	r0, [r0, -r0, lsl #4]
    5798:	02000001 	andeq	r0, r0, #1
    579c:	0d0efb01 	vstreq	d15, [lr, #-4]
    57a0:	01010100 	mrseq	r0, (UNDEF: 17)
    57a4:	00000001 	andeq	r0, r0, r1
    57a8:	01000001 	tsteq	r0, r1
    57ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    57b0:	2f2e2e2f 	svccs	0x002e2e2f
    57b4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 57bc <__exidx_end+0x2b3c>
    57b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    57bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    57c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    57c4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    57c8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    57cc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    57d0:	31303030 	teqcc	r0, r0, lsr r0
    57d4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    57d8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    57dc:	61746562 	cmnvs	r4, r2, ror #10
    57e0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    57e4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    57e8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5620 <__exidx_end+0x29a0>
    57ec:	6f635c73 	svcvs	0x00635c73
    57f0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    57f4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    57f8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    57fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5800:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5804:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5808:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    580c:	3130322d 	teqcc	r0, sp, lsr #4
    5810:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5814:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5818:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    581c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5820:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5824:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5828:	616d5c65 	cmnvs	sp, r5, ror #24
    582c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5830:	3a630065 	bcc	18c59cc <__ccfg+0x18a5a24>
    5834:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5838:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    583c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5840:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5844:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5848:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    584c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5850:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5854:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5858:	6f6f745c 	svcvs	0x006f745c
    585c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5860:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5864:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5868:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    586c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5870:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5874:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5878:	5f342d69 	svcpl	0x00342d69
    587c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5880:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5884:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5888:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    588c:	61652d65 	cmnvs	r5, r5, ror #26
    5890:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5894:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5898:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    589c:	00007379 	andeq	r7, r0, r9, ror r3
    58a0:	5f6e6f61 	svcpl	0x006e6f61
    58a4:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    58a8:	632e6e6f 			; <UNDEFINED> instruction: 0x632e6e6f
    58ac:	00000100 	andeq	r0, r0, r0, lsl #2
    58b0:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    58b4:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    58b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    58bc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    58c0:	00000200 	andeq	r0, r0, r0, lsl #4
    58c4:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    58c8:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    58cc:	00030068 	andeq	r0, r3, r8, rrx
    58d0:	6e6f6100 	powvse	f6, f7, f0
    58d4:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    58d8:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
    58dc:	00010068 	andeq	r0, r1, r8, rrx
    58e0:	05000000 	streq	r0, [r0, #-0]
    58e4:	001e8802 	andseq	r8, lr, r2, lsl #16
    58e8:	013c0300 	teqeq	ip, r0, lsl #6
    58ec:	032f361a 			; <UNDEFINED> instruction: 0x032f361a
    58f0:	09032e77 	stmdbeq	r3, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp}
    58f4:	023d4c2e 	eorseq	r4, sp, #11776	; 0x2e00
    58f8:	01010009 	tsteq	r1, r9
    58fc:	000001a9 	andeq	r0, r0, r9, lsr #3
    5900:	01410002 	cmpeq	r1, r2
    5904:	01020000 	mrseq	r0, (UNDEF: 2)
    5908:	000d0efb 	strdeq	r0, [sp], -fp
    590c:	01010101 	tsteq	r1, r1, lsl #2
    5910:	01000000 	mrseq	r0, (UNDEF: 0)
    5914:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5918:	2f2e2e2f 	svccs	0x002e2e2f
    591c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    5920:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    5924:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    5928:	0062696c 	rsbeq	r6, r2, ip, ror #18
    592c:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    5930:	63635c69 	cmnvs	r3, #26880	; 0x6900
    5934:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    5938:	302e302e 	eorcc	r3, lr, lr, lsr #32
    593c:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    5940:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    5944:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    5948:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    594c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5950:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    5954:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    5958:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 57f0 <__exidx_end+0x2b70>
    595c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    5960:	63675c72 	cmnvs	r7, #29184	; 0x7200
    5964:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    5968:	6f6e2d6d 	svcvs	0x006e2d6d
    596c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5970:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    5974:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    5978:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    597c:	615c3371 	cmpvs	ip, r1, ror r3
    5980:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5984:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5988:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    598c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    5990:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    5994:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
    5998:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    599c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    59a0:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    59a4:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    59a8:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    59ac:	31303030 	teqcc	r0, r0, lsr r0
    59b0:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    59b4:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    59b8:	61746562 	cmnvs	r4, r2, ror #10
    59bc:	63635c32 	cmnvs	r3, #12800	; 0x3200
    59c0:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    59c4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 57fc <__exidx_end+0x2b7c>
    59c8:	6f635c73 	svcvs	0x00635c73
    59cc:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    59d0:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    59d4:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    59d8:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    59dc:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    59e0:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    59e4:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    59e8:	3130322d 	teqcc	r0, sp, lsr #4
    59ec:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    59f0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    59f4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    59f8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    59fc:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5a00:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5a04:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
    5a08:	61000073 	tstvs	r0, r3, ror r0
    5a0c:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    5a10:	632e6374 			; <UNDEFINED> instruction: 0x632e6374
    5a14:	00000100 	andeq	r0, r0, r0, lsl #2
    5a18:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5a1c:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5a20:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5a24:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5a28:	00000200 	andeq	r0, r0, r0, lsl #4
    5a2c:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5a30:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5a34:	00030068 	andeq	r0, r3, r8, rrx
    5a38:	6e6f6100 	powvse	f6, f7, f0
    5a3c:	6374725f 	cmnvs	r4, #-268435451	; 0xf0000005
    5a40:	0100682e 	tsteq	r0, lr, lsr #16
    5a44:	00000000 	andeq	r0, r0, r0
    5a48:	00000205 	andeq	r0, r0, r5, lsl #4
    5a4c:	3e030000 	cdpcc	0, 0, cr0, cr3, cr0, {0}
    5a50:	04020001 	streq	r0, [r2], #-1
    5a54:	010a0301 	tsteq	sl, r1, lsl #6
    5a58:	01040200 	mrseq	r0, R12_usr
    5a5c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a60:	02001f01 	andeq	r1, r0, #1, 30
    5a64:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a68:	21010402 	tstcs	r1, r2, lsl #8
    5a6c:	01040200 	mrseq	r0, R12_usr
    5a70:	02213021 	eoreq	r3, r1, #33	; 0x21
    5a74:	01010008 	tsteq	r1, r8
    5a78:	b8020500 	stmdalt	r2, {r8, sl}
    5a7c:	0300001e 	movweq	r0, #30
    5a80:	000100d7 	ldrdeq	r0, [r1], -r7
    5a84:	03010402 	movweq	r0, #5122	; 0x1402
    5a88:	0200010c 	andeq	r0, r0, #12, 2
    5a8c:	00210104 	eoreq	r0, r1, r4, lsl #2
    5a90:	1f010402 	svcne	0x00010402
    5a94:	01040200 	mrseq	r0, R12_usr
    5a98:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    5a9c:	02002101 	andeq	r2, r0, #1073741824	; 0x40000000
    5aa0:	31210104 			; <UNDEFINED> instruction: 0x31210104
    5aa4:	01000502 	tsteq	r0, r2, lsl #10
    5aa8:	00019c01 	andeq	r9, r1, r1, lsl #24
    5aac:	39000200 	stmdbcc	r0, {r9}
    5ab0:	02000001 	andeq	r0, r0, #1
    5ab4:	0d0efb01 	vstreq	d15, [lr, #-4]
    5ab8:	01010100 	mrseq	r0, (UNDEF: 17)
    5abc:	00000001 	andeq	r0, r0, r1
    5ac0:	01000001 	tsteq	r0, r1
    5ac4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5ac8:	2f2e2e2f 	svccs	0x002e2e2f
    5acc:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5ad4 <__exidx_end+0x2e54>
    5ad0:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5ad4:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5ad8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5adc:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5ae0:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5ae4:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5ae8:	31303030 	teqcc	r0, r0, lsr r0
    5aec:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5af0:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5af4:	61746562 	cmnvs	r4, r2, ror #10
    5af8:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5afc:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5b00:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5938 <__exidx_end+0x2cb8>
    5b04:	6f635c73 	svcvs	0x00635c73
    5b08:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5b0c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5b10:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5b14:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5b18:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5b1c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5b20:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5b24:	3130322d 	teqcc	r0, sp, lsr #4
    5b28:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5b2c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b30:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b34:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b38:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5b3c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5b40:	616d5c65 	cmnvs	sp, r5, ror #24
    5b44:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5b48:	3a630065 	bcc	18c5ce4 <__ccfg+0x18a5d3c>
    5b4c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5b50:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5b54:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5b58:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5b5c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5b60:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5b64:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5b68:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5b6c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5b70:	6f6f745c 	svcvs	0x006f745c
    5b74:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5b78:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5b7c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5b80:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5b84:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5b88:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5b8c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5b90:	5f342d69 	svcpl	0x00342d69
    5b94:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5b98:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5b9c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ba0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ba4:	61652d65 	cmnvs	r5, r5, ror #26
    5ba8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5bac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5bb0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5bb4:	00007379 	andeq	r7, r0, r9, ror r3
    5bb8:	2e757063 	cdpcs	0, 7, cr7, cr5, cr3, {3}
    5bbc:	00010063 	andeq	r0, r1, r3, rrx
    5bc0:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5bc4:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5bc8:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5bcc:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5bd0:	00020068 	andeq	r0, r2, r8, rrx
    5bd4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5bd8:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5bdc:	0300682e 	movweq	r6, #2094	; 0x82e
    5be0:	70630000 	rsbvc	r0, r3, r0
    5be4:	00682e75 	rsbeq	r2, r8, r5, ror lr
    5be8:	00000001 	andeq	r0, r0, r1
    5bec:	d0020500 	andle	r0, r2, r0, lsl #10
    5bf0:	0300001e 	movweq	r0, #30
    5bf4:	030100f5 	movweq	r0, #4341	; 0x10f5
    5bf8:	04020112 	streq	r0, [r2], #-274	; 0xfffffeee
    5bfc:	00010100 	andeq	r0, r1, r0, lsl #2
    5c00:	00000205 	andeq	r0, r0, r5, lsl #4
    5c04:	c0030000 	andgt	r0, r3, r0
    5c08:	11030101 	tstne	r3, r1, lsl #2
    5c0c:	00030201 	andeq	r0, r3, r1, lsl #4
    5c10:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    5c14:	001ed802 	andseq	sp, lr, r2, lsl #16
    5c18:	028d0300 	addeq	r0, sp, #0, 6
    5c1c:	01120301 	tsteq	r2, r1, lsl #6
    5c20:	01000402 	tsteq	r0, r2, lsl #8
    5c24:	02050001 	andeq	r0, r5, #1
    5c28:	00000000 	andeq	r0, r0, r0
    5c2c:	0102d803 	tsteq	r2, r3, lsl #16
    5c30:	02011103 	andeq	r1, r1, #-1073741824	; 0xc0000000
    5c34:	01010003 	tsteq	r1, r3
    5c38:	00020500 	andeq	r0, r2, r0, lsl #10
    5c3c:	03000000 	movweq	r0, #0
    5c40:	1601039e 			; <UNDEFINED> instruction: 0x1601039e
    5c44:	01000402 	tsteq	r0, r2, lsl #8
    5c48:	0001e901 	andeq	lr, r1, r1, lsl #18
    5c4c:	67000200 	strvs	r0, [r0, -r0, lsl #4]
    5c50:	02000001 	andeq	r0, r0, #1
    5c54:	0d0efb01 	vstreq	d15, [lr, #-4]
    5c58:	01010100 	mrseq	r0, (UNDEF: 17)
    5c5c:	00000001 	andeq	r0, r0, r1
    5c60:	01000001 	tsteq	r0, r1
    5c64:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5c68:	2f2e2e2f 	svccs	0x002e2e2f
    5c6c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 5c74 <__exidx_end+0x2ff4>
    5c70:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    5c74:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    5c78:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    5c7c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    5c80:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    5c84:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    5c88:	31303030 	teqcc	r0, r0, lsr r0
    5c8c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    5c90:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    5c94:	61746562 	cmnvs	r4, r2, ror #10
    5c98:	63635c32 	cmnvs	r3, #12800	; 0x3200
    5c9c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    5ca0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 5ad8 <__exidx_end+0x2e58>
    5ca4:	6f635c73 	svcvs	0x00635c73
    5ca8:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    5cac:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    5cb0:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    5cb4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    5cb8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    5cbc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    5cc0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    5cc4:	3130322d 	teqcc	r0, sp, lsr #4
    5cc8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    5ccc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5cd0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5cd4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5cd8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    5cdc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    5ce0:	616d5c65 	cmnvs	sp, r5, ror #24
    5ce4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    5ce8:	3a630065 	bcc	18c5e84 <__ccfg+0x18a5edc>
    5cec:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5cf0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5cf4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5cf8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5cfc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5d00:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5d04:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5d08:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5d0c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5d10:	6f6f745c 	svcvs	0x006f745c
    5d14:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5d18:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5d1c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5d20:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5d24:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5d28:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5d2c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5d30:	5f342d69 	svcpl	0x00342d69
    5d34:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5d38:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5d3c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5d40:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5d44:	61652d65 	cmnvs	r5, r5, ror #26
    5d48:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5d4c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5d50:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    5d54:	00007379 	andeq	r7, r0, r9, ror r3
    5d58:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5d5c:	00632e70 	rsbeq	r2, r3, r0, ror lr
    5d60:	61000001 	tstvs	r0, r1
    5d64:	775f6e6f 	ldrbvc	r6, [pc, -pc, ror #28]
    5d68:	682e6375 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
    5d6c:	00000100 	andeq	r0, r0, r0, lsl #2
    5d70:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    5d74:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    5d78:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    5d7c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    5d80:	00000200 	andeq	r0, r0, r0, lsl #4
    5d84:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    5d88:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    5d8c:	00030068 	andeq	r0, r3, r8, rrx
    5d90:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5d94:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5d98:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    5d9c:	00000100 	andeq	r0, r0, r0, lsl #2
    5da0:	70696863 	rsbvc	r6, r9, r3, ror #16
    5da4:	6f666e69 	svcvs	0x00666e69
    5da8:	0100682e 	tsteq	r0, lr, lsr #16
    5dac:	65730000 	ldrbvs	r0, [r3, #-0]!
    5db0:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
    5db4:	00010068 	andeq	r0, r1, r8, rrx
    5db8:	05000000 	streq	r0, [r0, #-0]
    5dbc:	001ee002 	andseq	lr, lr, r2
    5dc0:	028d0300 	addeq	r0, sp, #0, 6
    5dc4:	0a032001 	beq	cddd0 <__ccfg+0xade28>
    5dc8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    5dcc:	424f4101 	submi	r4, pc, #1073741824	; 0x40000000
    5dd0:	1f212d43 	svcne	0x00212d43
    5dd4:	87030204 	strhi	r0, [r3, -r4, lsl #4]
    5dd8:	01046604 	tsteq	r4, r4, lsl #12
    5ddc:	3c7c8603 	ldclcc	6, cr8, [ip], #-12
    5de0:	09034236 	stmdbeq	r3, {r1, r2, r4, r5, r9, lr}
    5de4:	2f3d2d4a 	svccs	0x003d2d4a
    5de8:	2f2f1f2f 	svccs	0x002f1f2f
    5dec:	48312321 	ldmdami	r1!, {r0, r5, r8, r9, sp}
    5df0:	580a0325 	stmdapl	sl, {r0, r2, r5, r8, r9}
    5df4:	023f5d41 	eorseq	r5, pc, #4160	; 0x1040
    5df8:	0101001e 	tsteq	r1, lr, lsl r0
    5dfc:	b4020500 	strlt	r0, [r2], #-1280	; 0xfffffb00
    5e00:	0300001f 	movweq	r0, #31
    5e04:	280100f0 	stmdacs	r1, {r4, r5, r6, r7}
    5e08:	41334330 	teqmi	r3, r0, lsr r3
    5e0c:	333c0903 	teqcc	ip, #49152	; 0xc000
    5e10:	032e0b03 			; <UNDEFINED> instruction: 0x032e0b03
    5e14:	03273c0e 			; <UNDEFINED> instruction: 0x03273c0e
    5e18:	15032079 	strne	r2, [r3, #-121]	; 0xffffff87
    5e1c:	2e090320 	cdpcs	3, 0, cr0, cr9, cr0, {1}
    5e20:	03496742 	movteq	r6, #38722	; 0x9742
    5e24:	2d592009 	ldclcs	0, cr2, [r9, #-36]	; 0xffffffdc
    5e28:	004b6924 	subeq	r6, fp, r4, lsr #18
    5e2c:	27010402 	strcs	r0, [r1, -r2, lsl #8]
    5e30:	0013024d 	andseq	r0, r3, sp, asr #4
    5e34:	04570101 	ldrbeq	r0, [r7], #-257	; 0xfffffeff
    5e38:	00020000 	andeq	r0, r2, r0
    5e3c:	00000165 	andeq	r0, r0, r5, ror #2
    5e40:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    5e44:	0101000d 	tsteq	r1, sp
    5e48:	00000101 	andeq	r0, r0, r1, lsl #2
    5e4c:	00000100 	andeq	r0, r0, r0, lsl #2
    5e50:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    5e54:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    5e58:	2f2e2e2f 	svccs	0x002e2e2f
    5e5c:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    5e60:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    5e64:	3a630062 	bcc	18c5ff4 <__ccfg+0x18a604c>
    5e68:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    5e6c:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    5e70:	302e322e 	eorcc	r3, lr, lr, lsr #4
    5e74:	3030302e 	eorscc	r3, r0, lr, lsr #32
    5e78:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    5e7c:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    5e80:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    5e84:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    5e88:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    5e8c:	6f6f745c 	svcvs	0x006f745c
    5e90:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    5e94:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    5e98:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    5e9c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    5ea0:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    5ea4:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    5ea8:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    5eac:	5f342d69 	svcpl	0x00342d69
    5eb0:	30322d39 	eorscc	r2, r2, r9, lsr sp
    5eb4:	33713531 	cmncc	r1, #205520896	; 0xc400000
    5eb8:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    5ebc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5ec0:	61652d65 	cmnvs	r5, r5, ror #26
    5ec4:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    5ec8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    5ecc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    5ed0:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    5ed4:	6300656e 	movwvs	r6, #1390	; 0x56e
    5ed8:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    5edc:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    5ee0:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    5ee4:	30302e30 	eorscc	r2, r0, r0, lsr lr
    5ee8:	5f393130 	svcpl	0x00393130
    5eec:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    5ef0:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    5ef4:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    5ef8:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    5efc:	6f745c36 	svcvs	0x00745c36
    5f00:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    5f04:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    5f08:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    5f0c:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    5f10:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    5f14:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    5f18:	61652d65 	cmnvs	r5, r5, ror #26
    5f1c:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    5f20:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    5f24:	71353130 	teqvc	r5, r0, lsr r1
    5f28:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    5f2c:	6f6e2d6d 	svcvs	0x006e2d6d
    5f30:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    5f34:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    5f38:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    5f3c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    5f40:	00737973 	rsbseq	r7, r3, r3, ror r9
    5f44:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    5f48:	725f7075 	subsvc	r7, pc, #117	; 0x75
    5f4c:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
    5f50:	00000100 	andeq	r0, r0, r0, lsl #2
    5f54:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0xfffffa8d
    5f58:	6f725f70 	svcvs	0x00725f70
    5f5c:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    5f60:	73000001 	movwvc	r0, #1
    5f64:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    5f68:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    5f6c:	00010068 	andeq	r0, r1, r8, rrx
    5f70:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    5f74:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    5f78:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    5f7c:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    5f80:	00020068 	andeq	r0, r2, r8, rrx
    5f84:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    5f88:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    5f8c:	0300682e 	movweq	r6, #2094	; 0x82e
    5f90:	64640000 	strbtvs	r0, [r4], #-0
    5f94:	00682e69 	rsbeq	r2, r8, r9, ror #28
    5f98:	6f000001 	svcvs	0x00000001
    5f9c:	682e6373 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}
    5fa0:	00000100 	andeq	r0, r0, r0, lsl #2
    5fa4:	02050000 	andeq	r0, r5, #0
    5fa8:	00002058 	andeq	r2, r0, r8, asr r0
    5fac:	0100ff03 	tsteq	r0, r3, lsl #30	; <UNPREDICTABLE>
    5fb0:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
    5fb4:	72032e0e 	andvc	r2, r3, #14, 28	; 0xe0
    5fb8:	2e0e0320 	cdpcs	3, 0, cr0, cr14, cr0, {1}
    5fbc:	d7030204 	strle	r0, [r3, -r4, lsl #4]
    5fc0:	01042000 	mrseq	r2, (UNDEF: 4)
    5fc4:	207fa803 	rsbscs	sl, pc, r3, lsl #16
    5fc8:	d9030204 	stmdble	r3, {r2, r9}
    5fcc:	212d2e00 			; <UNDEFINED> instruction: 0x212d2e00
    5fd0:	ac030104 	stfges	f0, [r3], {4}
    5fd4:	4d302e7f 	ldcmi	14, cr2, [r0, #-508]!	; 0xfffffe04
    5fd8:	22652f21 	rsbcs	r2, r5, #33, 30	; 0x84
    5fdc:	221e2222 	andscs	r2, lr, #536870914	; 0x20000002
    5fe0:	03587803 	cmpeq	r8, #196608	; 0x30000
    5fe4:	7303200d 	movwvc	r2, #12301	; 0x300d
    5fe8:	2010033c 	andscs	r0, r0, ip, lsr r3
    5fec:	21212121 			; <UNDEFINED> instruction: 0x21212121
    5ff0:	01000d02 	tsteq	r0, r2, lsl #26
    5ff4:	02050001 	andeq	r0, r5, #1
    5ff8:	000020d4 	ldrdeq	r2, [r0], -r4
    5ffc:	0101bf03 	tsteq	r1, r3, lsl #30
    6000:	4a78031a 	bmi	1e06c70 <__ccfg+0x1de6cc8>
    6004:	0e032820 	cdpeq	8, 0, cr2, cr3, cr0, {1}
    6008:	2e7a0320 	cdpcs	3, 7, cr0, cr10, cr0, {1}
    600c:	2e0e0342 	cdpcs	3, 0, cr0, cr14, cr2, {2}
    6010:	432d3130 			; <UNDEFINED> instruction: 0x432d3130
    6014:	3002042d 	andcc	r0, r2, sp, lsr #8
    6018:	03010421 	movweq	r0, #5153	; 0x1421
    601c:	2f3d2e0b 	svccs	0x003d2e0b
    6020:	0c032365 	stceq	3, cr2, [r3], {101}	; 0x65
    6024:	302c4d66 	eorcc	r4, ip, r6, ror #26
    6028:	2d522d28 	ldclcs	13, cr2, [r2, #-160]	; 0xffffff60
    602c:	01001502 	tsteq	r0, r2, lsl #10
    6030:	02050001 	andeq	r0, r5, #1
    6034:	00002180 	andeq	r2, r0, r0, lsl #3
    6038:	01049f03 	tsteq	r4, r3, lsl #30
    603c:	03010c03 	movweq	r0, #7171	; 0x1c03
    6040:	77032009 	strvc	r2, [r3, -r9]
    6044:	33312120 	teqcc	r1, #32, 2
    6048:	31303027 	teqcc	r0, r7, lsr #32
    604c:	351d2d22 	ldrcc	r2, [sp, #-3362]	; 0xfffff2de
    6050:	3d3e3d31 	ldccc	13, cr3, [lr, #-196]!	; 0xffffff3c
    6054:	271d3b22 	ldrcs	r3, [sp, -r2, lsr #22]
    6058:	03207603 			; <UNDEFINED> instruction: 0x03207603
    605c:	06022e12 			; <UNDEFINED> instruction: 0x06022e12
    6060:	00010100 	andeq	r0, r1, r0, lsl #2
    6064:	21dc0205 	bicscs	r0, ip, r5, lsl #4
    6068:	e5030000 	str	r0, [r3, #-0]
    606c:	34180104 	ldrcc	r0, [r8], #-260	; 0xfffffefc
    6070:	36207903 	strtcc	r7, [r0], -r3, lsl #18
    6074:	00050233 	andeq	r0, r5, r3, lsr r2
    6078:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    607c:	00000002 	andeq	r0, r0, r2
    6080:	05810300 	streq	r0, [r1, #768]	; 0x300
    6084:	02331801 	eorseq	r1, r3, #65536	; 0x10000
    6088:	01010006 	tsteq	r1, r6
    608c:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    6090:	03000021 	movweq	r0, #33	; 0x21
    6094:	19010595 	stmdbne	r1, {r0, r2, r4, r7, r8, sl}
    6098:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    609c:	01010006 	tsteq	r1, r6
    60a0:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
    60a4:	03000022 	movweq	r0, #34	; 0x22
    60a8:	190105b8 	stmdbne	r1, {r3, r4, r5, r7, r8, sl}
    60ac:	022e1303 	eoreq	r1, lr, #201326592	; 0xc000000
    60b0:	01010008 	tsteq	r1, r8
    60b4:	18020500 	stmdane	r2, {r8, sl}
    60b8:	03000022 	movweq	r0, #34	; 0x22
    60bc:	030105db 	movweq	r0, #5595	; 0x15db
    60c0:	0903200b 	stmdbeq	r3, {r0, r1, r3, sp}
    60c4:	20770320 	rsbscs	r0, r7, r0, lsr #6
    60c8:	03200903 			; <UNDEFINED> instruction: 0x03200903
    60cc:	2a352079 	bcs	d4e2b8 <__ccfg+0xd2e310>
    60d0:	30312232 	eorscc	r2, r1, r2, lsr r2
    60d4:	30274732 	eorcc	r4, r7, r2, lsr r7
    60d8:	17034732 	smladxne	r3, r2, r7, r4
    60dc:	3a36372e 	bcc	d93d9c <__ccfg+0xd73df4>
    60e0:	00080227 	andeq	r0, r8, r7, lsr #4
    60e4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    60e8:	00227c02 	eoreq	r7, r2, r2, lsl #24
    60ec:	06a90300 	strteq	r0, [r9], r0, lsl #6
    60f0:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    60f4:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    60f8:	01010003 	tsteq	r1, r3
    60fc:	90020500 	andls	r0, r2, r0, lsl #10
    6100:	03000022 	movweq	r0, #34	; 0x22
    6104:	150106bc 	strne	r0, [r1, #-1724]	; 0xfffff944
    6108:	09035521 	stmdbeq	r3, {r0, r5, r8, sl, ip, lr}
    610c:	00030220 	andeq	r0, r3, r0, lsr #4
    6110:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6114:	0022a402 	eoreq	sl, r2, r2, lsl #8
    6118:	06cf0300 	strbeq	r0, [pc], r0, lsl #6
    611c:	55211501 	strpl	r1, [r1, #-1281]!	; 0xfffffaff
    6120:	02200903 	eoreq	r0, r0, #49152	; 0xc000
    6124:	01010003 	tsteq	r1, r3
    6128:	b8020500 	stmdalt	r2, {r8, sl}
    612c:	03000022 	movweq	r0, #34	; 0x22
    6130:	160106e2 	strne	r0, [r1], -r2, ror #13
    6134:	032f4321 			; <UNDEFINED> instruction: 0x032f4321
    6138:	3540207a 	strbcc	r2, [r0, #-122]	; 0xffffff86
    613c:	2071032c 	rsbscs	r0, r1, ip, lsr #6
    6140:	022e1603 	eoreq	r1, lr, #3145728	; 0x300000
    6144:	01010003 	tsteq	r1, r3
    6148:	e0020500 	and	r0, r2, r0, lsl #10
    614c:	03000022 	movweq	r0, #34	; 0x22
    6150:	16010782 	strne	r0, [r1], -r2, lsl #15
    6154:	00060233 	andeq	r0, r6, r3, lsr r2
    6158:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    615c:	0022f002 	eoreq	pc, r2, r2
    6160:	07940300 	ldreq	r0, [r4, r0, lsl #6]
    6164:	43211601 			; <UNDEFINED> instruction: 0x43211601
    6168:	03333429 	teqeq	r3, #687865856	; 0x29000000
    616c:	1e352079 	mrcne	0, 1, r2, cr5, cr9, {3}
    6170:	032e7103 			; <UNDEFINED> instruction: 0x032e7103
    6174:	05022016 	streq	r2, [r2, #-22]	; 0xffffffea
    6178:	00010100 	andeq	r0, r1, r0, lsl #2
    617c:	231c0205 	tstcs	ip, #1342177280	; 0x50000000
    6180:	b4030000 	strlt	r0, [r3], #-0
    6184:	21150107 	tstcs	r5, r7, lsl #2
    6188:	20090355 	andcs	r0, r9, r5, asr r3
    618c:	01000302 	tsteq	r0, r2, lsl #6
    6190:	02050001 	andeq	r0, r5, #1
    6194:	00002330 	andeq	r2, r0, r0, lsr r3
    6198:	0107c803 	tsteq	r7, r3, lsl #16
    619c:	03552115 	cmpeq	r5, #1073741829	; 0x40000005
    61a0:	0302200a 	movweq	r2, #8202	; 0x200a
    61a4:	00010100 	andeq	r0, r1, r0, lsl #2
    61a8:	23440205 	movtcs	r0, #16901	; 0x4205
    61ac:	a7030000 	strge	r0, [r3, -r0]
    61b0:	03200102 			; <UNDEFINED> instruction: 0x03200102
    61b4:	1f3d2009 	svcne	0x003d2009
    61b8:	032f4e21 			; <UNDEFINED> instruction: 0x032f4e21
    61bc:	03ac02d1 			; <UNDEFINED> instruction: 0x03ac02d1
    61c0:	03207db9 			; <UNDEFINED> instruction: 0x03207db9
    61c4:	032002c7 			; <UNDEFINED> instruction: 0x032002c7
    61c8:	5c207db9 	stcpl	13, cr7, [r0], #-740	; 0xfffffd1c
    61cc:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61d0:	3d211f2f 	stccc	15, cr1, [r1, #-188]!	; 0xffffff44
    61d4:	43211f3d 			; <UNDEFINED> instruction: 0x43211f3d
    61d8:	523d6e3d 	eorspl	r6, sp, #976	; 0x3d0
    61dc:	03211f3d 			; <UNDEFINED> instruction: 0x03211f3d
    61e0:	033d3c09 	teqeq	sp, #2304	; 0x900
    61e4:	033d660a 	teqeq	sp, #10485760	; 0xa00000
    61e8:	7c3d660b 	ldcvc	6, cr6, [sp], #-44	; 0xffffffd4
    61ec:	40211f3d 	eormi	r1, r1, sp, lsr pc
    61f0:	0012024b 	andseq	r0, r2, fp, asr #4
    61f4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    61f8:	00245402 	eoreq	r5, r4, r2, lsl #8
    61fc:	07de0300 	ldrbeq	r0, [lr, r0, lsl #6]
    6200:	04020001 	streq	r0, [r2], #-1
    6204:	200e0301 	andcs	r0, lr, r1, lsl #6
    6208:	231d2352 	tstcs	sp, #1207959553	; 0x48000001
    620c:	4b684d1d 	blmi	1a19688 <__ccfg+0x19f96e0>
    6210:	34207a03 	strtcc	r7, [r0], #-2563	; 0xfffff5fd
    6214:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
    6218:	315b3d01 	cmpcc	fp, r1, lsl #26
    621c:	01000b02 	tsteq	r0, r2, lsl #22
    6220:	02050001 	andeq	r0, r5, #1
    6224:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
    6228:	01089303 	tsteq	r8, r3, lsl #6
    622c:	2f010903 	svccs	0x00010903
    6230:	0022212d 	eoreq	r2, r2, sp, lsr #2
    6234:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    6238:	0007024b 	andeq	r0, r7, fp, asr #4
    623c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6240:	0024e002 	eoreq	lr, r4, r2
    6244:	039b0300 	orrseq	r0, fp, #0, 6
    6248:	01090301 	tsteq	r9, r1, lsl #6
    624c:	203c7703 	eorscs	r7, ip, r3, lsl #14
    6250:	52200903 	eorpl	r0, r0, #49152	; 0xc000
    6254:	0a033130 	beq	d271c <__ccfg+0xb2774>
    6258:	4c2b234a 	stcmi	3, cr2, [fp], #-296	; 0xfffffed8
    625c:	2d2f2448 	cfstrscs	mvf2, [pc, #-288]!	; 6144 <__exidx_end+0x34c4>
    6260:	32293376 	eorcc	r3, r9, #-671088639	; 0xd8000001
    6264:	5226501c 	eorpl	r5, r6, #28
    6268:	2f4d4f3d 	svccs	0x004d4f3d
    626c:	3d4b845d 	cfstrdcc	mvd8, [fp, #-372]	; 0xfffffe8c
    6270:	02003d24 	andeq	r3, r0, #36, 26	; 0x900
    6274:	5b4b0104 	blpl	12c668c <__ccfg+0x12a66e4>
    6278:	4d864b2f 	vstrmi	d4, [r6, #188]	; 0xbc
    627c:	4a09033f 	bmi	246f80 <__ccfg+0x226fd8>
    6280:	031e221e 	tsteq	lr, #-536870911	; 0xe0000001
    6284:	03043c0b 	movweq	r3, #19467	; 0x4c0b
    6288:	4a7db903 	bmi	1f7469c <__ccfg+0x1f546f4>
    628c:	01001f02 	tsteq	r0, r2, lsl #30
    6290:	00036501 	andeq	r6, r3, r1, lsl #10
    6294:	a8000200 	stmdage	r0, {r9}
    6298:	02000001 	andeq	r0, r0, #1
    629c:	0d0efb01 	vstreq	d15, [lr, #-4]
    62a0:	01010100 	mrseq	r0, (UNDEF: 17)
    62a4:	00000001 	andeq	r0, r0, r1
    62a8:	01000001 	tsteq	r0, r1
    62ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    62b0:	2f2e2e2f 	svccs	0x002e2e2f
    62b4:	642f2e2e 	strtvs	r2, [pc], #-3630	; 62bc <__exidx_end+0x363c>
    62b8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    62bc:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    62c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    62c4:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    62c8:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    62cc:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    62d0:	31303030 	teqcc	r0, r0, lsr r0
    62d4:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    62d8:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    62dc:	61746562 	cmnvs	r4, r2, ror #10
    62e0:	63635c32 	cmnvs	r3, #12800	; 0x3200
    62e4:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    62e8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 6120 <__exidx_end+0x34a0>
    62ec:	6f635c73 	svcvs	0x00635c73
    62f0:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    62f4:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    62f8:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    62fc:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6300:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6304:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6308:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    630c:	3130322d 	teqcc	r0, sp, lsr #4
    6310:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    6314:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6318:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    631c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6320:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    6324:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    6328:	616d5c65 	cmnvs	sp, r5, ror #24
    632c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    6330:	3a630065 	bcc	18c64cc <__ccfg+0x18a6524>
    6334:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6338:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    633c:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6340:	3030302e 	eorscc	r3, r0, lr, lsr #32
    6344:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6348:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    634c:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6350:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    6354:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6358:	6f6f745c 	svcvs	0x006f745c
    635c:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6360:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    6364:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6368:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    636c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6370:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    6374:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6378:	5f342d69 	svcpl	0x00342d69
    637c:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6380:	33713531 	cmncc	r1, #205520896	; 0xc400000
    6384:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6388:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    638c:	61652d65 	cmnvs	r5, r5, ror #26
    6390:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    6394:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6398:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    639c:	2e007379 	mcrcs	3, 0, r7, cr0, cr9, {3}
    63a0:	2f2e2e2f 	svccs	0x002e2e2f
    63a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    63a8:	6e692f2e 	cdpvs	15, 6, cr2, cr9, cr14, {1}
    63ac:	73000063 	movwvc	r0, #99	; 0x63
    63b0:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    63b4:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    63b8:	00010063 	andeq	r0, r1, r3, rrx
    63bc:	6e6f6100 	powvse	f6, f7, f0
    63c0:	6375775f 	cmnvs	r5, #24903680	; 0x17c0000
    63c4:	0100682e 	tsteq	r0, lr, lsr #16
    63c8:	736f0000 	cmnvc	pc, #0
    63cc:	00682e63 	rsbeq	r2, r8, r3, ror #28
    63d0:	70000001 	andvc	r0, r0, r1
    63d4:	2e6d6372 	mcrcs	3, 3, r6, cr13, cr2, {3}
    63d8:	00010068 	andeq	r0, r1, r8, rrx
    63dc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
    63e0:	725f7075 	subsvc	r7, pc, #117	; 0x75
    63e4:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    63e8:	00000100 	andeq	r0, r0, r0, lsl #2
    63ec:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    63f0:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
    63f4:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    63f8:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
    63fc:	00000200 	andeq	r0, r0, r0, lsl #4
    6400:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
    6404:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    6408:	00030068 	andeq	r0, r3, r8, rrx
    640c:	5f776800 	svcpl	0x00776800
    6410:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6414:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6418:	72000004 	andvc	r0, r0, #4
    641c:	682e6d6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
    6420:	00000100 	andeq	r0, r0, r0, lsl #2
    6424:	5f737973 	svcpl	0x00737973
    6428:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
    642c:	0100682e 	tsteq	r0, lr, lsr #16
    6430:	6f610000 	svcvs	0x00610000
    6434:	61625f6e 	cmnvs	r2, lr, ror #30
    6438:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    643c:	0100682e 	tsteq	r0, lr, lsr #16
    6440:	00000000 	andeq	r0, r0, r0
    6444:	00000205 	andeq	r0, r0, r5, lsl #4
    6448:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
    644c:	02040100 	andeq	r0, r4, #0, 2
    6450:	0102e903 	tsteq	r2, r3, lsl #18
    6454:	97030104 	strls	r0, [r3, -r4, lsl #2]
    6458:	02042e7d 	andeq	r2, r4, #2000	; 0x7d0
    645c:	2e02e903 	vmlacs.f16	s28, s4, s6	; <UNPREDICTABLE>
    6460:	01040200 	mrseq	r0, R12_usr
    6464:	2000ce03 	andcs	ip, r0, r3, lsl #28
    6468:	02000104 	andeq	r0, r0, #4, 2
    646c:	d1030104 	tstle	r3, r4, lsl #2
    6470:	0c032e7c 	stceq	14, cr2, [r3], {124}	; 0x7c
    6474:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6478:	4b896701 	blmi	fe260084 <_estack+0xde25b084>
    647c:	044a0903 	strbeq	r0, [sl], #-2307	; 0xfffff6fd
    6480:	01a50303 			; <UNDEFINED> instruction: 0x01a50303
    6484:	03010458 	movweq	r0, #5208	; 0x1458
    6488:	004a7ee4 	subeq	r7, sl, r4, ror #29
    648c:	5d010402 	cfstrspl	mvf0, [r1, #-8]
    6490:	81030404 	tsthi	r3, r4, lsl #8
    6494:	02007403 	andeq	r7, r0, #50331648	; 0x3000000
    6498:	14030104 	strne	r0, [r3], #-260	; 0xfffffefc
    649c:	0001043c 	andeq	r0, r1, ip, lsr r4
    64a0:	03010402 	movweq	r0, #5122	; 0x1402
    64a4:	042e7cef 	strteq	r7, [lr], #-3311	; 0xfffff311
    64a8:	03b70304 			; <UNDEFINED> instruction: 0x03b70304
    64ac:	241c322e 	ldrcs	r3, [ip], #-558	; 0xfffffdd2
    64b0:	00204203 	eoreq	r4, r0, r3, lsl #4
    64b4:	03010402 	movweq	r0, #5122	; 0x1402
    64b8:	01042e14 	tsteq	r4, r4, lsl lr
    64bc:	01040200 	mrseq	r0, R12_usr
    64c0:	207cf703 	rsbscs	pc, ip, r3, lsl #14
    64c4:	412e0903 			; <UNDEFINED> instruction: 0x412e0903
    64c8:	4b83281b 	blmi	fe0d053c <_estack+0xde0cb53c>
    64cc:	041b2438 	ldreq	r2, [fp], #-1080	; 0xfffffbc8
    64d0:	02e70304 	rsceq	r0, r7, #4, 6	; 0x10000000
    64d4:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    64d8:	3c140301 	ldccc	3, cr0, [r4], {1}
    64dc:	02000104 	andeq	r0, r0, #4, 2
    64e0:	8d030104 	stfhis	f0, [r3, #-16]
    64e4:	0230207d 	eorseq	r2, r0, #125	; 0x7d
    64e8:	01010017 	tsteq	r1, r7, lsl r0
    64ec:	30020500 	andcc	r0, r2, r0, lsl #10
    64f0:	03000026 	movweq	r0, #38	; 0x26
    64f4:	030101da 	movweq	r0, #4570	; 0x11da
    64f8:	63032e1d 	movwvs	r2, #15901	; 0x3e1d
    64fc:	201d0320 	andscs	r0, sp, r0, lsr #6
    6500:	32412f59 	subcc	r2, r1, #356	; 0x164
    6504:	321c2232 	andscc	r2, ip, #536870915	; 0x20000003
    6508:	325c9421 	subscc	r9, ip, #553648128	; 0x21000000
    650c:	0305041b 	movweq	r0, #21531	; 0x541b
    6510:	04212e5f 	strteq	r2, [r1], #-3679	; 0xfffff1a1
    6514:	2e240301 	cdpcs	3, 2, cr0, cr4, cr1, {0}
    6518:	331b3243 	tstcc	fp, #805306372	; 0x30000004
    651c:	50030504 	andpl	r0, r3, r4, lsl #10
    6520:	01042120 	tsteq	r4, r0, lsr #2
    6524:	042e2e03 	strteq	r2, [lr], #-3587	; 0xfffff1fd
    6528:	2e510305 	cdpcs	3, 5, cr0, cr1, cr5, {0}
    652c:	34030104 	strcc	r0, [r3], #-260	; 0xfffffefc
    6530:	03050420 	movweq	r0, #21536	; 0x5420
    6534:	0104204d 	tsteq	r4, sp, asr #32
    6538:	2f2e3403 	svccs	0x002e3403
    653c:	2f692365 	svccs	0x00692365
    6540:	213e214d 	teqcs	lr, sp, asr #2
    6544:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    6548:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
    654c:	ca4a0f03 	bgt	128a160 <__ccfg+0x126a1b8>
    6550:	242a2f3f 	strtcs	r2, [sl], #-3903	; 0xfffff0c1
    6554:	40322b24 	eorsmi	r2, r2, r4, lsr #22
    6558:	3e3d3193 	mrccc	1, 1, r3, cr13, cr3, {4}
    655c:	03213e3d 			; <UNDEFINED> instruction: 0x03213e3d
    6560:	032d3c63 			; <UNDEFINED> instruction: 0x032d3c63
    6564:	31312026 	teqcc	r1, r6, lsr #32
    6568:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
    656c:	2e0b0321 	cdpcs	3, 0, cr0, cr11, cr1, {1}
    6570:	3c780321 	ldclcc	3, cr0, [r8], #-132	; 0xffffff7c
    6574:	03200903 			; <UNDEFINED> instruction: 0x03200903
    6578:	0e032e77 	mcreq	14, 0, r2, cr3, cr7, {3}
    657c:	7103213c 	tstvc	r3, ip, lsr r1
    6580:	3c0f0320 	stccc	3, cr0, [pc], {32}
    6584:	21231d7b 			; <UNDEFINED> instruction: 0x21231d7b
    6588:	23212265 			; <UNDEFINED> instruction: 0x23212265
    658c:	20780328 	rsbscs	r0, r8, r8, lsr #6
    6590:	4c222134 	stfmis	f2, [r2], #-208	; 0xffffff30
    6594:	403e213d 	eorsmi	r2, lr, sp, lsr r1
    6598:	023d322c 	eorseq	r3, sp, #44, 4	; 0xc0000002
    659c:	01010021 	tsteq	r1, r1, lsr #32
    65a0:	50020500 	andpl	r0, r2, r0, lsl #10
    65a4:	03000028 	movweq	r0, #40	; 0x28
    65a8:	270103b6 			; <UNDEFINED> instruction: 0x270103b6
    65ac:	a22f2240 	eorge	r2, pc, #64, 4
    65b0:	2a404e24 	bcs	1019e48 <__ccfg+0xff9ea0>
    65b4:	0902864e 	stmdbeq	r2, {r1, r2, r3, r6, r9, sl, pc}
    65b8:	00010100 	andeq	r0, r1, r0, lsl #2
    65bc:	00000205 	andeq	r0, r0, r5, lsl #4
    65c0:	e5030000 	str	r0, [r3, #-0]
    65c4:	0c030103 	stfeqs	f0, [r3], {3}
    65c8:	30282f20 	eorcc	r2, r8, r0, lsr #30
    65cc:	2d302d5a 	ldccs	13, cr2, [r0, #-360]!	; 0xfffffe98
    65d0:	24211f32 	strtcs	r1, [r1], #-3890	; 0xfffff0ce
    65d4:	322c2f2b 	eorcc	r2, ip, #43, 30	; 0xac
    65d8:	34302f24 	ldrtcc	r2, [r0], #-3876	; 0xfffff0dc
    65dc:	1e224b2f 	vmulne.f64	d4, d2, d31
    65e0:	000c023e 	andeq	r0, ip, lr, lsr r2
    65e4:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    65e8:	0028b002 	eoreq	fp, r8, r2
    65ec:	04a60300 	strteq	r0, [r6], #768	; 0x300
    65f0:	483f1301 	ldmdami	pc!, {r0, r8, r9, ip}	; <UNPREDICTABLE>
    65f4:	00040226 	andeq	r0, r4, r6, lsr #4
    65f8:	022b0101 	eoreq	r0, fp, #1073741824	; 0x40000000
    65fc:	00020000 	andeq	r0, r2, r0
    6600:	00000143 	andeq	r0, r0, r3, asr #2
    6604:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    6608:	0101000d 	tsteq	r1, sp
    660c:	00000101 	andeq	r0, r0, r1, lsl #2
    6610:	00000100 	andeq	r0, r0, r0, lsl #2
    6614:	2e2f2e01 	cdpcs	14, 2, cr2, cr15, cr1, {0}
    6618:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    661c:	2f2e2e2f 	svccs	0x002e2e2f
    6620:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    6624:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    6628:	3a630062 	bcc	18c67b8 <__ccfg+0x18a6810>
    662c:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    6630:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    6634:	302e322e 	eorcc	r3, lr, lr, lsr #4
    6638:	3030302e 	eorscc	r3, r0, lr, lsr #32
    663c:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    6640:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    6644:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    6648:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    664c:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    6650:	6f6f745c 	svcvs	0x006f745c
    6654:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    6658:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    665c:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6660:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6664:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6668:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    666c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6670:	5f342d69 	svcpl	0x00342d69
    6674:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6678:	33713531 	cmncc	r1, #205520896	; 0xc400000
    667c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6680:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6684:	61652d65 	cmnvs	r5, r5, ror #26
    6688:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    668c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6690:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
    6694:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    6698:	6300656e 	movwvs	r6, #1390	; 0x56e
    669c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    66a0:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    66a4:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    66a8:	30302e30 	eorscc	r2, r0, r0, lsr lr
    66ac:	5f393130 	svcpl	0x00393130
    66b0:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    66b4:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    66b8:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    66bc:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    66c0:	6f745c36 	svcvs	0x00745c36
    66c4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    66c8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    66cc:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    66d0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    66d4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    66d8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    66dc:	61652d65 	cmnvs	r5, r5, ror #26
    66e0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    66e4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    66e8:	71353130 	teqvc	r5, r0, lsr r1
    66ec:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    66f0:	6f6e2d6d 	svcvs	0x006e2d6d
    66f4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    66f8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    66fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6700:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6704:	00737973 	rsbseq	r7, r3, r3, ror r9
    6708:	69686300 	stmdbvs	r8!, {r8, r9, sp, lr}^
    670c:	666e6970 			; <UNDEFINED> instruction: 0x666e6970
    6710:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    6714:	63000001 	movwvs	r0, #1
    6718:	69706968 	ldmdbvs	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    671c:	2e6f666e 	cdpcs	6, 6, cr6, cr15, cr14, {3}
    6720:	00010068 	andeq	r0, r1, r8, rrx
    6724:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
    6728:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
    672c:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    6730:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
    6734:	00020068 	andeq	r0, r2, r8, rrx
    6738:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
    673c:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    6740:	0300682e 	movweq	r6, #2094	; 0x82e
    6744:	00000000 	andeq	r0, r0, r0
    6748:	00000205 	andeq	r0, r0, r5, lsl #4
    674c:	c4030000 	strgt	r0, [r3], #-0
    6750:	2f130100 	svccs	0x00130100
    6754:	01000602 	tsteq	r0, r2, lsl #12
    6758:	02050001 	andeq	r0, r5, #1
    675c:	00000000 	andeq	r0, r0, r0
    6760:	0100d003 	tsteq	r0, r3
    6764:	0a032f14 	beq	d23bc <__ccfg+0xb2414>
    6768:	0008022e 	andeq	r0, r8, lr, lsr #4
    676c:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6770:	0028c802 	eoreq	ip, r8, r2, lsl #16
    6774:	00e60300 	rsceq	r0, r6, r0, lsl #6
    6778:	4e2a1a01 	vmulmi.f32	s2, s20, s2
    677c:	9b030204 	blls	c6f94 <__ccfg+0xa6fec>
    6780:	01042e01 	tsteq	r4, r1, lsl #28
    6784:	2e7ee603 	cdpcs	6, 7, cr14, cr14, cr3, {0}
    6788:	4b4b4c23 	blmi	12d981c <__ccfg+0x12b9874>
    678c:	02242f72 	eoreq	r2, r4, #456	; 0x1c8
    6790:	01010005 	tsteq	r1, r5
    6794:	00020500 	andeq	r0, r2, r0, lsl #10
    6798:	03000000 	movweq	r0, #0
    679c:	04010183 	streq	r0, [r1], #-387	; 0xfffffe7d
    67a0:	01b00302 	lslseq	r0, r2, #6
    67a4:	03010420 	movweq	r0, #5152	; 0x1420
    67a8:	392e7ed6 	stmdbcc	lr!, {r1, r2, r4, r6, r7, r9, sl, fp, ip, sp, lr}
    67ac:	78032331 	stmdavc	r3, {r0, r4, r5, r8, r9, sp}
    67b0:	4a0a033c 	bmi	2874a8 <__ccfg+0x267500>
    67b4:	252e0903 	strcs	r0, [lr, #-2307]!	; 0xfffff6fd
    67b8:	01000502 	tsteq	r0, r2, lsl #10
    67bc:	02050001 	andeq	r0, r5, #1
    67c0:	00002914 	andeq	r2, r0, r4, lsl r9
    67c4:	0101a603 	tsteq	r1, r3, lsl #12
    67c8:	e3030204 	movw	r0, #12804	; 0x3204
    67cc:	11032000 	mrsne	r2, (UNDEF: 3)
    67d0:	3c6f032e 	stclcc	3, cr0, [pc], #-184	; 6720 <__exidx_end+0x3aa0>
    67d4:	25201103 	strcs	r1, [r0, #-259]!	; 0xfffffefd
    67d8:	8c030104 	stfhis	f0, [r3], {4}
    67dc:	95923c7f 	ldrls	r3, [r2, #3199]	; 0xc7f
    67e0:	22212221 	eorcs	r2, r1, #268435458	; 0x10000002
    67e4:	03394141 	teqeq	r9, #1073741840	; 0x40000010
    67e8:	03272e09 			; <UNDEFINED> instruction: 0x03272e09
    67ec:	03212e73 			; <UNDEFINED> instruction: 0x03212e73
    67f0:	30032064 	andcc	r2, r3, r4, rrx
    67f4:	00040220 	andeq	r0, r4, r0, lsr #4
    67f8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    67fc:	00298002 	eoreq	r8, r9, r2
    6800:	01e00300 	mvneq	r0, r0, lsl #6
    6804:	03020401 	movweq	r0, #9217	; 0x2401
    6808:	042001a4 	strteq	r0, [r0], #-420	; 0xfffffe5c
    680c:	7edd0301 	cdpvc	3, 13, cr0, cr13, cr1, {0}
    6810:	0302042e 	movweq	r0, #9262	; 0x242e
    6814:	042e0290 	strteq	r0, [lr], #-656	; 0xfffffd70
    6818:	7df00301 	ldclvc	3, cr0, [r0, #4]!
    681c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    6820:	2e090301 	cdpcs	3, 0, cr0, cr9, cr1, {0}
    6824:	01000202 	tsteq	r0, r2, lsl #4
    6828:	00021e01 	andeq	r1, r2, r1, lsl #28
    682c:	42000200 	andmi	r0, r0, #0, 4
    6830:	02000001 	andeq	r0, r0, #1
    6834:	0d0efb01 	vstreq	d15, [lr, #-4]
    6838:	01010100 	mrseq	r0, (UNDEF: 17)
    683c:	00000001 	andeq	r0, r0, r1
    6840:	01000001 	tsteq	r0, r1
    6844:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6848:	2f2e2e2f 	svccs	0x002e2e2f
    684c:	642f2e2e 	strtvs	r2, [pc], #-3630	; 6854 <__exidx_end+0x3bd4>
    6850:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    6854:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    6858:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
    685c:	635c6974 	cmpvs	ip, #116, 18	; 0x1d0000
    6860:	2e367363 	cdpcs	3, 3, cr7, cr6, cr3, {3}
    6864:	2e302e32 	mrccs	14, 1, r2, cr0, cr2, {1}
    6868:	31303030 	teqcc	r0, r0, lsr r0
    686c:	69775f39 	ldmdbvs	r7!, {r0, r3, r4, r5, r8, r9, sl, fp, ip, lr}^
    6870:	2d32336e 	ldccs	3, cr3, [r2, #-440]!	; 0xfffffe48
    6874:	61746562 	cmnvs	r4, r2, ror #10
    6878:	63635c32 	cmnvs	r3, #12800	; 0x3200
    687c:	5c367673 	ldcpl	6, cr7, [r6], #-460	; 0xfffffe34
    6880:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 66b8 <__exidx_end+0x3a38>
    6884:	6f635c73 	svcvs	0x00635c73
    6888:	6c69706d 	stclvs	0, cr7, [r9], #-436	; 0xfffffe4c
    688c:	675c7265 	ldrbvs	r7, [ip, -r5, ror #4]
    6890:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    6894:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6898:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    689c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    68a0:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
    68a4:	3130322d 	teqcc	r0, sp, lsr #4
    68a8:	5c337135 	ldfpls	f7, [r3], #-212	; 0xffffff2c
    68ac:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    68b0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    68b4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    68b8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
    68bc:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    68c0:	616d5c65 	cmnvs	sp, r5, ror #24
    68c4:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    68c8:	3a630065 	bcc	18c6a64 <__ccfg+0x18a6abc>
    68cc:	5c69745c 	cfstrdpl	mvd7, [r9], #-368	; 0xfffffe90
    68d0:	36736363 	ldrbtcc	r6, [r3], -r3, ror #6
    68d4:	302e322e 	eorcc	r3, lr, lr, lsr #4
    68d8:	3030302e 	eorscc	r3, r0, lr, lsr #32
    68dc:	775f3931 	smmlarvc	pc, r1, r9, r3	; <UNPREDICTABLE>
    68e0:	32336e69 	eorscc	r6, r3, #1680	; 0x690
    68e4:	7465622d 	strbtvc	r6, [r5], #-557	; 0xfffffdd3
    68e8:	635c3261 	cmpvs	ip, #268435462	; 0x10000006
    68ec:	36767363 	ldrbtcc	r7, [r6], -r3, ror #6
    68f0:	6f6f745c 	svcvs	0x006f745c
    68f4:	635c736c 	cmpvs	ip, #108, 6	; 0xb0000001
    68f8:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    68fc:	5c72656c 	cfldr64pl	mvdx6, [r2], #-432	; 0xfffffe50
    6900:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    6904:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    6908:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    690c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    6910:	5f342d69 	svcpl	0x00342d69
    6914:	30322d39 	eorscc	r2, r2, r9, lsr sp
    6918:	33713531 	cmncc	r1, #205520896	; 0xc400000
    691c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
    6920:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6924:	61652d65 	cmnvs	r5, r5, ror #26
    6928:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
    692c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    6930:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
    6934:	00007379 	andeq	r7, r0, r9, ror r3
    6938:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    693c:	00010068 	andeq	r0, r1, r8, rrx
    6940:	69646400 	stmdbvs	r4!, {sl, sp, lr}^
    6944:	0100632e 	tsteq	r0, lr, lsr #6
    6948:	645f0000 	ldrbvs	r0, [pc], #-0	; 6950 <__exidx_end+0x3cd0>
    694c:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
    6950:	745f746c 	ldrbvc	r7, [pc], #-1132	; 6958 <__exidx_end+0x3cd8>
    6954:	73657079 	cmnvc	r5, #121	; 0x79
    6958:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    695c:	735f0000 	cmpvc	pc, #0
    6960:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    6964:	00682e74 	rsbeq	r2, r8, r4, ror lr
    6968:	63000003 	movwvs	r0, #3
    696c:	682e7570 	stmdavs	lr!, {r4, r5, r6, r8, sl, ip, sp, lr}
    6970:	00000100 	andeq	r0, r0, r0, lsl #2
    6974:	02050000 	andeq	r0, r5, #0
    6978:	00002998 	muleq	r0, r8, r9
    697c:	01018803 	tsteq	r1, r3, lsl #16
    6980:	50303120 	eorspl	r3, r0, r0, lsr #2
    6984:	2322221e 			; <UNDEFINED> instruction: 0x2322221e
    6988:	0005022c 	andeq	r0, r5, ip, lsr #4
    698c:	02040101 	andeq	r0, r4, #1073741824	; 0x40000000
    6990:	c0020500 	andgt	r0, r2, r0, lsl #10
    6994:	03000029 	movweq	r0, #41	; 0x29
    6998:	030100c3 	movweq	r0, #4291	; 0x10c3
    699c:	0402010a 	streq	r0, [r2], #-266	; 0xfffffef6
    69a0:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    69a4:	02050002 	andeq	r0, r5, #2
    69a8:	00000000 	andeq	r0, r0, r0
    69ac:	0100d803 	tsteq	r0, r3, lsl #16
    69b0:	33010e03 	movwcc	r0, #7683	; 0x1e03
    69b4:	2e780323 	cdpcs	3, 7, cr0, cr8, cr3, {1}
    69b8:	024f3535 	subeq	r3, pc, #222298112	; 0xd400000
    69bc:	01010004 	tsteq	r1, r4
    69c0:	05000204 	streq	r0, [r0, #-516]	; 0xfffffdfc
    69c4:	00000002 	andeq	r0, r0, r2
    69c8:	01850300 	orreq	r0, r5, r0, lsl #6
    69cc:	20110301 	andscs	r0, r1, r1, lsl #6
    69d0:	03206f03 			; <UNDEFINED> instruction: 0x03206f03
    69d4:	79032e13 	stmdbvc	r3, {r0, r1, r4, r9, sl, fp, sp}
    69d8:	2e09032e 	cdpcs	3, 0, cr0, cr9, cr14, {1}
    69dc:	2e710334 	mrccs	3, 3, r0, cr1, cr4, {1}
    69e0:	2e0c0344 	cdpcs	3, 0, cr0, cr12, cr4, {2}
    69e4:	02022d2f 	andeq	r2, r2, #3008	; 0xbc0
    69e8:	04010100 	streq	r0, [r1], #-256	; 0xffffff00
    69ec:	02050002 	andeq	r0, r5, #2
    69f0:	00000000 	andeq	r0, r0, r0
    69f4:	0101af03 	tsteq	r1, r3, lsl #30
    69f8:	1b201103 	blne	80ae0c <__ccfg+0x7eae64>
    69fc:	032e7403 			; <UNDEFINED> instruction: 0x032e7403
    6a00:	042f2013 	strteq	r2, [pc], #-19	; 6a08 <__exidx_end+0x3d88>
    6a04:	20690301 	rsbcs	r0, r9, r1, lsl #6
    6a08:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a0c:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a10:	2e1d0302 	cdpcs	3, 1, cr0, cr13, cr2, {0}
    6a14:	01000502 	tsteq	r0, r2, lsl #10
    6a18:	00020401 	andeq	r0, r2, r1, lsl #8
    6a1c:	00000205 	andeq	r0, r0, r5, lsl #4
    6a20:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
    6a24:	11030101 	tstne	r3, r1, lsl #2
    6a28:	74031b20 	strvc	r1, [r3], #-2848	; 0xfffff4e0
    6a2c:	2e14032e 	cdpcs	3, 1, cr0, cr4, cr14, {1}
    6a30:	0104302d 	tsteq	r4, sp, lsr #32
    6a34:	207fb903 	rsbscs	fp, pc, r3, lsl #18
    6a38:	1d234d30 	stcne	13, cr4, [r3, #-192]!	; 0xffffff40
    6a3c:	04212223 	strteq	r2, [r1], #-547	; 0xfffffddd
    6a40:	00c80302 	sbceq	r0, r8, r2, lsl #6
    6a44:	0502422e 	streq	r4, [r2, #-558]	; 0xfffffdd2
    6a48:	d6010100 	strle	r0, [r1], -r0, lsl #2
    6a4c:	02000002 	andeq	r0, r0, #2
    6a50:	00017c00 	andeq	r7, r1, r0, lsl #24
    6a54:	fb010200 	blx	4725e <__ccfg+0x272b6>
    6a58:	01000d0e 	tsteq	r0, lr, lsl #26
    6a5c:	00010101 	andeq	r0, r1, r1, lsl #2
    6a60:	00010000 	andeq	r0, r1, r0
    6a64:	2f2e0100 	svccs	0x002e0100
    6a68:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    6a6c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6a70:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    6a74:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    6a78:	63006269 	movwvs	r6, #617	; 0x269
    6a7c:	69745c3a 	ldmdbvs	r4!, {r1, r3, r4, r5, sl, fp, ip, lr}^
    6a80:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6a84:	2e322e36 	mrccs	14, 1, r2, cr2, cr6, {1}
    6a88:	30302e30 	eorscc	r2, r0, r0, lsr lr
    6a8c:	5f393130 	svcpl	0x00393130
    6a90:	336e6977 	cmncc	lr, #1949696	; 0x1dc000
    6a94:	65622d32 	strbvs	r2, [r2, #-3378]!	; 0xfffff2ce
    6a98:	5c326174 	ldfpls	f6, [r2], #-464	; 0xfffffe30
    6a9c:	76736363 	ldrbtvc	r6, [r3], -r3, ror #6
    6aa0:	6f745c36 	svcvs	0x00745c36
    6aa4:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
    6aa8:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    6aac:	72656c69 	rsbvc	r6, r5, #26880	; 0x6900
    6ab0:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
    6ab4:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    6ab8:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    6abc:	61652d65 	cmnvs	r5, r5, ror #26
    6ac0:	342d6962 	strtcc	r6, [sp], #-2402	; 0xfffff69e
    6ac4:	322d395f 	eorcc	r3, sp, #1556480	; 0x17c000
    6ac8:	71353130 	teqvc	r5, r0, lsr r1
    6acc:	72615c33 	rsbvc	r5, r1, #13056	; 0x3300
    6ad0:	6f6e2d6d 	svcvs	0x006e2d6d
    6ad4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6ad8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
    6adc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    6ae0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
    6ae4:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    6ae8:	00656e69 	rsbeq	r6, r5, r9, ror #28
    6aec:	745c3a63 	ldrbvc	r3, [ip], #-2659	; 0xfffff59d
    6af0:	63635c69 	cmnvs	r3, #26880	; 0x6900
    6af4:	322e3673 	eorcc	r3, lr, #120586240	; 0x7300000
    6af8:	302e302e 	eorcc	r3, lr, lr, lsr #32
    6afc:	39313030 	ldmdbcc	r1!, {r4, r5, ip, sp}
    6b00:	6e69775f 	mcrvs	7, 3, r7, cr9, cr15, {2}
    6b04:	622d3233 	eorvs	r3, sp, #805306371	; 0x30000003
    6b08:	32617465 	rsbcc	r7, r1, #1694498816	; 0x65000000
    6b0c:	7363635c 	cmnvc	r3, #92, 6	; 0x70000001
    6b10:	745c3676 	ldrbvc	r3, [ip], #-1654	; 0xfffff98a
    6b14:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
    6b18:	6d6f635c 	stclvs	3, cr6, [pc, #-368]!	; 69b0 <__exidx_end+0x3d30>
    6b1c:	656c6970 	strbvs	r6, [ip, #-2416]!	; 0xfffff690
    6b20:	63675c72 	cmnvs	r7, #29184	; 0x7200
    6b24:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    6b28:	6f6e2d6d 	svcvs	0x006e2d6d
    6b2c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    6b30:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    6b34:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    6b38:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
    6b3c:	615c3371 	cmpvs	ip, r1, ror r3
    6b40:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    6b44:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    6b48:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    6b4c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
    6b50:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    6b54:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
    6b58:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    6b5c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    6b60:	2f2e2e2f 	svccs	0x002e2e2f
    6b64:	00636e69 	rsbeq	r6, r3, r9, ror #28
    6b68:	63736f00 	cmnvs	r3, #0, 30
    6b6c:	0100632e 	tsteq	r0, lr, lsr #6
    6b70:	736f0000 	cmnvc	pc, #0
    6b74:	00682e63 	rsbeq	r2, r8, r3, ror #28
    6b78:	5f000001 	svcpl	0x00000001
    6b7c:	61666564 	cmnvs	r6, r4, ror #10
    6b80:	5f746c75 	svcpl	0x00746c75
    6b84:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
    6b88:	00682e73 	rsbeq	r2, r8, r3, ror lr
    6b8c:	5f000002 	svcpl	0x00000002
    6b90:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    6b94:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    6b98:	00000300 	andeq	r0, r0, r0, lsl #6
    6b9c:	745f7768 	ldrbvc	r7, [pc], #-1896	; 6ba4 <__exidx_end+0x3f24>
    6ba0:	73657079 	cmnvc	r5, #121	; 0x79
    6ba4:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
    6ba8:	6f720000 	svcvs	0x00720000
    6bac:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    6bb0:	61000001 	tstvs	r0, r1
    6bb4:	725f6e6f 	subsvc	r6, pc, #1776	; 0x6f0
    6bb8:	682e6374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, sp, lr}
    6bbc:	00000100 	andeq	r0, r0, r0, lsl #2
    6bc0:	5f6e6f61 	svcpl	0x006e6f61
    6bc4:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
    6bc8:	682e6e6f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
    6bcc:	00000100 	andeq	r0, r0, r0, lsl #2
    6bd0:	02050000 	andeq	r0, r5, #0
    6bd4:	000029c8 	andeq	r2, r0, r8, asr #19
    6bd8:	0100e503 	tsteq	r0, r3, lsl #10
    6bdc:	200f0320 	andcs	r0, pc, r0, lsr #6
    6be0:	03207103 			; <UNDEFINED> instruction: 0x03207103
    6be4:	0325200f 			; <UNDEFINED> instruction: 0x0325200f
    6be8:	03309e09 	teqeq	r0, #9, 28	; 0x90
    6bec:	a3339e09 	teqge	r3, #9, 28	; 0x90
    6bf0:	01000702 	tsteq	r0, r2, lsl #14
    6bf4:	02050001 	andeq	r0, r5, #1
    6bf8:	00002a24 	andeq	r2, r0, r4, lsr #20
    6bfc:	0101a003 	tsteq	r1, r3
    6c00:	222e0c03 	eorcs	r0, lr, #768	; 0x300
    6c04:	3c7a0388 	ldclcc	3, cr0, [sl], #-544	; 0xfffffde0
    6c08:	06022526 	streq	r2, [r2], -r6, lsr #10
    6c0c:	00010100 	andeq	r0, r1, r0, lsl #2
    6c10:	00000205 	andeq	r0, r0, r5, lsl #4
    6c14:	c2030000 	andgt	r0, r3, #0
    6c18:	25200101 	strcs	r0, [r0, #-257]!	; 0xfffffeff
    6c1c:	79033491 	stmdbvc	r3, {r0, r4, r7, sl, ip, sp}
    6c20:	7a03272e 	bvc	d08e0 <__ccfg+0xb0938>
    6c24:	0200262e 	andeq	r2, r0, #48234496	; 0x2e00000
    6c28:	7a030104 	bvc	c7040 <__ccfg+0xa7098>
    6c2c:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    6c30:	2d305001 	ldccs	0, cr5, [r0, #-4]!
    6c34:	4b241f30 	blmi	90e8fc <__ccfg+0x8ee954>
    6c38:	3d341f3d 	ldccc	15, cr1, [r4, #-244]!	; 0xffffff0c
    6c3c:	6d03326c 	sfmvs	f3, 4, [r3, #-432]	; 0xfffffe50
    6c40:	3c100366 	ldccc	3, cr0, [r0], {102}	; 0x66
    6c44:	00090226 	andeq	r0, r9, r6, lsr #4
    6c48:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
    6c4c:	00000002 	andeq	r0, r0, r2
    6c50:	01f30300 	mvnseq	r0, r0, lsl #6
    6c54:	024b2101 	subeq	r2, fp, #1073741824	; 0x40000000
    6c58:	01010007 	tsteq	r1, r7
    6c5c:	00020500 	andeq	r0, r2, r0, lsl #10
    6c60:	03000000 	movweq	r0, #0
    6c64:	24010280 	strcs	r0, [r1], #-640	; 0xfffffd80
    6c68:	22030204 	andcs	r0, r3, #4, 4	; 0x40000000
    6c6c:	03010458 	movweq	r0, #5208	; 0x1458
    6c70:	02048262 	andeq	r8, r4, #536870918	; 0x20000006
    6c74:	04203c03 	strteq	r3, [r0], #-3075	; 0xfffff3fd
    6c78:	4a4a0301 	bmi	1287884 <__ccfg+0x12678dc>
    6c7c:	3d211f3d 	stccc	15, cr1, [r1, #-244]!	; 0xffffff0c
    6c80:	1f30221f 	svcne	0x0030221f
    6c84:	02232230 	eoreq	r2, r3, #48, 4
    6c88:	0101000c 	tsteq	r1, ip
    6c8c:	00020500 	andeq	r0, r2, r0, lsl #10
    6c90:	03000000 	movweq	r0, #0
    6c94:	250102a3 	strcs	r0, [r1, #-675]	; 0xfffffd5d
    6c98:	0302044f 	movweq	r0, #9295	; 0x244f
    6c9c:	01044a17 	tsteq	r4, r7, lsl sl
    6ca0:	4b4a6d03 	blmi	12a20b4 <__ccfg+0x128210c>
    6ca4:	01000902 	tsteq	r0, r2, lsl #18
    6ca8:	02050001 	andeq	r0, r5, #1
    6cac:	00000000 	andeq	r0, r0, r0
    6cb0:	0102bc03 	tsteq	r2, r3, lsl #24
    6cb4:	20170322 	andscs	r0, r7, r2, lsr #6
    6cb8:	28206903 	stmdacs	r0!, {r0, r1, r8, fp, sp, lr}
    6cbc:	033c1003 	teqeq	ip, #3
    6cc0:	15032e6c 	strne	r2, [r3, #-3692]	; 0xfffff194
    6cc4:	586d032e 	stmdapl	sp!, {r1, r2, r3, r5, r8, r9}^
    6cc8:	03201303 			; <UNDEFINED> instruction: 0x03201303
    6ccc:	1103206f 	tstne	r3, pc, rrx
    6cd0:	06023f20 	streq	r3, [r2], -r0, lsr #30
    6cd4:	00010100 	andeq	r0, r1, r0, lsl #2
    6cd8:	00000205 	andeq	r0, r0, r5, lsl #4
    6cdc:	e3030000 	movw	r0, #12288	; 0x3000
    6ce0:	21030102 	tstcs	r3, r2, lsl #2
    6ce4:	02024d01 	andeq	r4, r2, #1, 26	; 0x40
    6ce8:	00010100 	andeq	r0, r1, r0, lsl #2
    6cec:	00000205 	andeq	r0, r0, r5, lsl #4
    6cf0:	90030000 	andls	r0, r3, r0
    6cf4:	10030103 	andne	r0, r3, r3, lsl #2
    6cf8:	211f2120 	tstcs	pc, r0, lsr #2
    6cfc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    6d00:	02003e01 	andeq	r3, r0, #1, 28
    6d04:	3d3d0104 	ldfccs	f0, [sp, #-16]!
    6d08:	02341d31 	eorseq	r1, r4, #3136	; 0xc40
    6d0c:	01010007 	tsteq	r1, r7
    6d10:	00020500 	andeq	r0, r2, r0, lsl #10
    6d14:	03000000 	movweq	r0, #0
    6d18:	170103b5 			; <UNDEFINED> instruction: 0x170103b5
    6d1c:	3d332c31 	ldccc	12, cr2, [r3, #-196]!	; 0xffffff3c
    6d20:	01000502 	tsteq	r0, r2, lsl #10
    6d24:	Address 0x0000000000006d24 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
       4:	5f62616c 	svcpl	0x0062616c
       8:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
       c:	00726f74 	rsbseq	r6, r2, r4, ror pc
      10:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
      14:	5f62616c 	svcpl	0x0062616c
      18:	63656843 	cmnvs	r5, #4390912	; 0x430000
      1c:	45505f6b 	ldrbmi	r5, [r0, #-3947]	; 0xfffff095
      20:	444f4952 	strbmi	r4, [pc], #-2386	; 28 <g_pfnVectors+0x28>
      24:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
      28:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
      2c:	6f694474 	svcvs	0x00694474
      30:	67646500 	strbvs	r6, [r4, -r0, lsl #10]!
      34:	5f5f0065 	svcpl	0x005f0065
      38:	755f6970 	ldrbvc	r6, [pc, #-2416]	; fffff6d0 <_estack+0xdfffa6d0>
      3c:	00747261 	rsbseq	r7, r4, r1, ror #4
			i = k;
      40:	70716572 	rsbsvc	r6, r1, r2, ror r5
				j->Next = k;
      44:	5f006d64 	svcpl	0x00006d64
      48:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
      4c:	475f6261 	ldrbmi	r6, [pc, -r1, ror #4]
      50:	4e5f7465 	cdpmi	4, 5, cr7, cr15, cr5, {3}
      54:	00656d61 	rsbeq	r6, r5, r1, ror #26
		release;
      58:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
      5c:	73676e69 	cmnvc	r7, #1680	; 0x690
      60:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
      64:	66650074 			; <UNDEFINED> instruction: 0x66650074
      68:	6d647066 	stclvs	0, cr7, [r4, #-408]!	; 0xfffffe68
      6c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
      70:	6f6c2067 	svcvs	0x006c2067
      74:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
      78:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      7c:	2064656e 	rsbcs	r6, r4, lr, ror #10
      80:	00746e69 	rsbseq	r6, r4, r9, ror #28
      84:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
      88:	49737265 	ldmdbmi	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      8c:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
	descriptors [fd] = s;
      90:	6e766500 	cdpvs	5, 7, cr6, cr6, cr0, {0}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	006e7074 	rsbeq	r7, lr, r4, ror r0
      98:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
	if (s == NULL)
      9c:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
		syserror (EMALLOC, "tcv05");
      a0:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
      a4:	5f5f0074 	svcpl	0x005f0074
      a8:	616c7473 	smcvs	51011	; 0xc743
      ac:	68535f62 	ldmdavs	r3, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
      b0:	4d5f776f 	ldclmi	7, cr7, [pc, #-444]	; fffffefc <_estack+0xdfffaefc>
      b4:	00756e65 	rsbseq	r6, r5, r5, ror #28
      b8:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
      bc:	0074735f 	rsbseq	r7, r4, pc, asr r3
      c0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; c <g_pfnVectors+0xc>
      c4:	616d2f65 	cmnvs	sp, r5, ror #30
      c8:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
      cc:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
      d0:	706f746b 	rsbvc	r7, pc, fp, ror #8
      d4:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
      d8:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
      dc:	4349502f 	movtmi	r5, #36911	; 0x902f
      e0:	412f534f 			; <UNDEFINED> instruction: 0x412f534f
      e4:	2f737070 	svccs	0x00737070
      e8:	54504d43 	ldrbpl	r4, [r0], #-3395	; 0xfffff2bd
      ec:	5f343634 	svcpl	0x00343634
      f0:	3662614c 	strbtcc	r6, [r2], -ip, asr #2
			wwait (st, 50);
      f4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
			curr += 0x1000;
      f8:	63794374 	cmnvs	r9, #116, 6	; 0xd0000001
      fc:	0073656c 	rsbseq	r6, r3, ip, ror #10
		if (from >= EE_SIZE || upto < from)
     100:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
     104:	5f62616c 	svcpl	0x0062616c
			upto = EE_SIZE - 1;
     108:	5f46464f 	svcpl	0x0046464f
     10c:	49524550 	ldmdbmi	r2, {r4, r6, r8, sl, lr}^
     110:	5f00444f 	svcpl	0x0000444f
     114:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
     118:	495f6261 	ldmdbmi	pc, {r0, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     11c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     120:	73006c61 	movwvc	r6, #3169	; 0xc61
     124:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
}
     128:	76655f6d 	strbtvc	r5, [r5], -sp, ror #30
     12c:	5f746e65 	svcpl	0x00746e65
     130:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
     134:	5f5f0074 	svcpl	0x005f0074
     138:	616c7473 	smcvs	51011	; 0xc743
     13c:	74535f62 	ldrbvc	r5, [r3], #-3938	; 0xfffff09e
    cycles[0].offTime = numbers[1];
     140:	6f00706f 	svcvs	0x0000706f
    cycles[1].onTime = numbers[2];
     144:	6e6d646e 	cdpvs	4, 6, cr6, cr13, cr14, {3}
    cycles[1].offTime = numbers[3];
     148:	72670073 	rsbvc	r0, r7, #115	; 0x73
     14c:	436e6565 	cmnmi	lr, #423624704	; 0x19400000
}
     150:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	6f696400 	svcvs	0x00696400
            number = number * 10;
     158:	626d754e 	rsbvs	r7, sp, #327155712	; 0x13800000
     15c:	47007265 	strmi	r7, [r0, -r5, ror #4]
            number += settingsInput[i] - 48;
     160:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
     164:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
     168:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
fsm root {
     16c:	31303220 	teqcc	r0, r0, lsr #4
     170:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
     174:	72282035 	eorvc	r2, r8, #53	; 0x35
     178:	61656c65 	cmnvs	r5, r5, ror #24
     17c:	20296573 	eorcs	r6, r9, r3, ror r5
     180:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
        initCycles();
     184:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
        ser_outf(Initial, "Enter your name: ");
     188:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
     18c:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
     194:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
     19c:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
     1a0:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
     1a8:	726f633d 	rsbvc	r6, pc, #-201326592	; 0xf4000000
        if (choice == 'A' || choice == 'a'){
     1ac:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
     1b0:	2d20336d 	stccs	3, cr3, [r0, #-436]!	; 0xfffffe4c
     1b4:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
            proceed Adjust_Intervals;
     1b8:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
            proceed Monitor;
     1bc:	6f6c666d 	svcvs	0x006c666d
        proceed Show_Menu;
     1c0:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	733d6962 	teqvc	sp, #1605632	; 0x188000
     1c8:	2074666f 	rsbscs	r6, r4, pc, ror #12
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
     1d0:	613d6863 	teqvs	sp, r3, ror #16
     1d4:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
        processSettingsInput(settings);
     1d8:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
        proceed Show_Menu;
     1dc:	672d2067 	strvs	r2, [sp, -r7, rrx]!
     1e0:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	20332d66 	eorscs	r2, r3, r6, ror #26
     1e8:	7473672d 	ldrbtvc	r6, [r3], #-1837	; 0xfffff8d3
     1ec:	74636972 	strbtvc	r6, [r3], #-2418	; 0xfffff68e
     1f0:	6177642d 	cmnvs	r7, sp, lsr #8
     1f4:	2d206672 	stccs	6, cr6, [r0, #-456]!	; 0xfffffe38
        proceed Show_Menu;
     1f8:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
     1fc:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	20393963 	eorscs	r3, r9, r3, ror #18
     204:	7566662d 	strbvc	r6, [r6, #-1581]!	; 0xfffff9d3
        displayCycle = YES;
     208:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
        ser_inf(Await_Stop, "%c", ch);
     20c:	732d6e6f 			; <UNDEFINED> instruction: 0x732d6e6f
     210:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     214:	20736e6f 	rsbscs	r6, r3, pc, ror #28
        proceed Monitor;
     218:	6164662d 	cmnvs	r4, sp, lsr #12
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     21c:	732d6174 			; <UNDEFINED> instruction: 0x732d6174
     220:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
        leds(1, 0);
     224:	20736e6f 	rsbscs	r6, r3, pc, ror #28
     228:	6f6e662d 	svcvs	0x006e662d
     22c:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
     230:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
     234:	61696c61 	cmnvs	r9, r1, ror #24
        leds(0, 0);
     238:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
     23c:	61662d20 	cmnvs	r6, r0, lsr #26
     240:	2d206d73 	stccs	13, cr6, [r0, #-460]!	; 0xfffffe34
     244:	78616d66 	stmdavc	r1!, {r1, r2, r5, r6, r8, sl, fp, sp, lr}^
     248:	7272652d 	rsbsvc	r6, r2, #188743680	; 0xb400000
     24c:	3d73726f 	lfmcc	f7, 2, [r3, #-444]!	; 0xfffffe44
        } else if (choice == 'S' || choice == 's') {
     250:	5f003031 	svcpl	0x00003031
            proceed Stop;
     254:	5f69705f 	svcpl	0x0069705f
        } else if (choice == 'V' || choice == 'v') {
     258:	6e657665 	cdpvs	6, 6, cr7, cr5, cr5, {3}
            proceed View_Settings;
     25c:	00745f74 	rsbseq	r5, r4, r4, ror pc
        } else if (choice == 'M' || choice == 'm') {
     260:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
            proceed Monitor;
     264:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
     268:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     26c:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
     270:	7000746e 	andvc	r7, r0, lr, ror #8
     274:	6f696e69 	svcvs	0x00696e69
     278:	00745f64 	rsbseq	r5, r4, r4, ror #30
     27c:	6c637963 			; <UNDEFINED> instruction: 0x6c637963
     280:	6e497365 	cdpvs	3, 4, cr7, cr9, cr5, {3}
     284:	00786564 	rsbseq	r6, r8, r4, ror #10
     288:	62747366 	rsbsvs	r7, r4, #-1744830463	; 0x98000001
     28c:	6e006b6c 	vmlsvs.f64	d6, d0, d28
     290:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
     294:	77610072 			; <UNDEFINED> instruction: 0x77610072
static void devinit_uart (int devnum) {
     298:	0064726f 	rsbeq	r7, r4, pc, ror #4
	adddevfunc (ioreq_uart_a, devnum);
     29c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     2a0:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
void udelay (volatile word n) {
     2a4:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     2a8:	79735f69 	ldmdbvc	r3!, {r0, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
	while (n) {
     2ac:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     2b0:	6d647000 	stclvs	0, cr7, [r4, #-0]
}
     2b4:	0065646f 	rsbeq	r6, r5, pc, ror #8
	while (n--);
     2b8:	43646572 	cmnmi	r4, #478150656	; 0x1c800000
     2bc:	656c6379 	strbvs	r6, [ip, #-889]!	; 0xfffffc87
     2c0:	73616200 	cmnvc	r1, #0, 4
		n--;
     2c4:	654e0065 	strbvs	r0, [lr, #-101]	; 0xffffff9b
     2c8:	54007478 	strpl	r7, [r0], #-1144	; 0xfffffb88
     2cc:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
void mdelay (volatile word n) {
     2d0:	4d544b00 	vldrmi	d20, [r4, #-0]
     2d4:	70612f50 	rsbvc	r2, r1, r0, asr pc
	while (n) {
     2d8:	00632e70 	rsbeq	r2, r3, r0, ror lr
     2dc:	6e695f5f 	mcrvs	15, 3, r5, cr9, cr15, {2}
}
     2e0:	5f747570 	svcpl	0x00747570
		udelay (999);
     2e4:	736e6970 	cmnvc	lr, #112, 18	; 0x1c0000
     2e8:	735f5f00 	cmpvc	pc, #0, 30
		n--;
     2ec:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     2f0:	6177415f 	cmnvs	r7, pc, asr r1
     2f4:	535f7469 	cmppl	pc, #1761607680	; 0x69000000
     2f8:	00706f74 	rsbseq	r6, r0, r4, ror pc
void __pi_ondomain (lword d) {
     2fc:	73625f5f 	cmnvc	r2, #380	; 0x17c
     300:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
		if (__pi_systat.effpdm > 1)
     304:	5f747261 	svcpl	0x00747261
     308:	5f5f005f 	svcpl	0x005f005f
			__pi_systat.effpdm = 1;
     30c:	5f737362 	svcpl	0x00737362
	PRCMPowerDomainOn (d);
     310:	5f646e65 	svcpl	0x00646e65
     314:	7270005f 	rsbsvc	r0, r0, #95	; 0x5f
     318:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	74655373 	strbtvc	r5, [r5], #-883	; 0xfffffc8d
     320:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     324:	706e4973 	rsbvc	r4, lr, r3, ror r9
	__pi_systat.ondmns |= d;
     328:	62007475 	andvs	r7, r0, #1962934272	; 0x75000000
     32c:	6b6e696c 	blvs	1b9a8e4 <__ccfg+0x1b7a93c>
}
     330:	73007265 	movwvc	r7, #613	; 0x265
     334:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
void __pi_syserror (word ec, const char *m) {
     338:	0073676e 	rsbseq	r6, r3, lr, ror #14
	diag ("SYSERR: %x, %s", ec, m);
     33c:	5466666f 	strbtpl	r6, [r6], #-1647	; 0xfffff991
     340:	00656d69 	rsbeq	r6, r5, r9, ror #26
  __ASM volatile ("cpsid i" : : : "memory");
     344:	74735f5f 	ldrbtvc	r5, [r3], #-3935	; 0xfffff0a1
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	5f62616c 	svcpl	0x0062616c
     34c:	5f746553 	svcpl	0x00746553
     350:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
		all_leds_blink;
     354:	6c617672 	stclvs	6, cr7, [r1], #-456	; 0xfffffe38
     358:	5f5f0073 	svcpl	0x005f0073
     35c:	616c7473 	smcvs	51011	; 0xc743
     360:	69565f62 	ldmdbvs	r6, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	535f7765 	cmppl	pc, #26476544	; 0x1940000
     368:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
     36c:	0073676e 	rsbseq	r6, r3, lr, ror #14
     370:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     374:	7275635f 	rsbsvc	r6, r5, #2080374785	; 0x7c000001
     378:	6f680072 	svcvs	0x00680072
	while (1) {
     37c:	695f7473 	ldmdbvs	pc, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     380:	5f5f0064 	svcpl	0x005f0064
     384:	74747562 	ldrbtvc	r7, [r4], #-1378	; 0xfffffa9e
     388:	6c5f6e6f 	mrrcvs	14, 6, r6, pc, cr15	; <UNPREDICTABLE>
void tci_run_delay_timer () {
     38c:	00747369 	rsbseq	r7, r4, r9, ror #6
	setdel = __pi_mintk - __pi_old;
     390:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     394:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
     398:	61686320 	cmnvs	r8, r0, lsr #6
     39c:	50470072 	subpl	r0, r7, r2, ror r0
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a0:	635f4f49 	cmpvs	pc, #292	; 0x124
     3a4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     3a8:	006f6944 	rsbeq	r6, pc, r4, asr #18
     3ac:	69546e6f 	ldmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	5f00656d 	svcpl	0x0000656d
	sti_tim;
     3b4:	6c74735f 	ldclvs	3, cr7, [r4], #-380	; 0xfffffe84
}
     3b8:	415f6261 	cmpmi	pc, r1, ror #4
     3bc:	73756a64 	cmnvc	r5, #100, 20	; 0x64000
     3c0:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     3c4:	76726574 			; <UNDEFINED> instruction: 0x76726574
     3c8:	00736c61 	rsbseq	r6, r3, r1, ror #24
	cli_aux;
     3cc:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
     3d0:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	79630074 	stmdbvc	r3!, {r2, r4, r5, r6}^
     3d8:	73656c63 	cmnvc	r5, #25344	; 0x6300
     3dc:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
     3e0:	73726562 	cmnvc	r2, #411041792	; 0x18800000
	sti_aux;
     3e4:	64656c00 	strbtvs	r6, [r5], #-3072	; 0xfffff400
}
     3e8:	00636c62 	rsbeq	r6, r3, r2, ror #24
     3ec:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 2ec <mdelay+0x1c>
     3f0:	006e6165 	rsbeq	r6, lr, r5, ror #2
void AONRTCIntHandler () {
     3f4:	7364656c 	cmnvc	r4, #108, 10	; 0x1b000000
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f8:	6c007374 	stcvs	3, cr7, [r0], {116}	; 0x74
     3fc:	6c626465 	cfstrdvs	mvd6, [r2], #-404	; 0xfffffe6c
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	6175006b 	cmnvs	r5, fp, rrx
		if (__pi_utims [0] == 0)
     404:	745f7472 	ldrbvc	r7, [pc], #-1138	; 40c <AONRTCIntHandler+0x18>
     408:	735f5f00 	cmpvc	pc, #0, 30
		if (*(__pi_utims [0])) {
     40c:	62616c74 	rsbvs	r6, r1, #116, 24	; 0x7400
     410:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
			(*(__pi_utims [0]))--;
     414:	6f68435f 	svcvs	0x0068435f
		if (__pi_utims [1] == 0)
     418:	00656369 	rsbeq	r6, r5, r9, ror #6
		if (*(__pi_utims [1])) {
     41c:	7474656c 	ldrbtvc	r6, [r4], #-1388	; 0xfffffa94
			aux_timer_inactive = 0;
     420:	73007265 	movwvc	r7, #613	; 0x265
			(*(__pi_utims [1]))--;
     424:	61747379 	cmnvs	r4, r9, ror r3
		if (__pi_utims [2] == 0)
     428:	00745f74 	rsbseq	r5, r4, r4, ror pc
		if (*(__pi_utims [2])) {
     42c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
			(*(__pi_utims [2]))--;
     430:	5f007374 	svcpl	0x00007374
		if (__pi_utims [3] != 0) {
     434:	5f69705f 	svcpl	0x0069705f
			if (*(__pi_utims [3])) {
     438:	5f786568 	svcpl	0x00786568
				aux_timer_inactive = 0;
     43c:	5f636e65 	svcpl	0x00636e65
				(*(__pi_utims [3]))--;
     440:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
	if (__pi_systat.ledsts) {
     444:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
     448:	616c7073 	smcvs	50947	; 0xc703
		if (__pi_systat.ledblc++ == 0) {
     44c:	63794379 	cmnvs	r9, #-469762047	; 0xe4000001
     450:	7000656c 	andvc	r6, r0, ip, ror #10
			if (__pi_systat.ledblk) {
     454:	006d756e 	rsbeq	r7, sp, lr, ror #10
     458:	72746e65 	rsbsvc	r6, r4, #1616	; 0x650
     45c:	0079706f 	rsbseq	r7, r9, pc, rrx
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
     464:	68630073 	stmdavs	r3!, {r0, r1, r4, r5, r6}^
				if (__pi_systat.ledsts & 0x2)
     468:	6563696f 	strbvs	r6, [r3, #-2415]!	; 0xfffff691
     46c:	6d736600 	ldclvs	6, cr6, [r3, #-0]
     470:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
				if (__pi_systat.ledsts & 0x4)
     474:	61745300 	cmnvs	r4, r0, lsl #6
				__pi_systat.ledblk = 0;
     478:	00737574 	rsbseq	r7, r3, r4, ror r5
     47c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			if (__pi_systat.fstblk)
     480:	6263705f 	rsbvs	r7, r3, #95	; 0x5f
     484:	5f00735f 	svcpl	0x0000735f
				__pi_systat.ledblc = 200;
     488:	5f69705f 	svcpl	0x0069705f
	if (events & AON_RTC_EVFLAGS_CH0) {
     48c:	5f626370 	svcpl	0x00626370
		cli_tim;
     490:	656c0074 	strbvs	r0, [ip, #-116]!	; 0xffffff8c
		__pi_new += setdel;
     494:	63794364 	cmnvs	r9, #100, 6	; 0x90000001
     498:	7200656c 	andvc	r6, r0, #108, 10	; 0x1b000000
		setdel = 0;
     49c:	00746f6f 	rsbseq	r6, r4, pc, ror #30
		RISE_N_SHINE;
     4a0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		__pi_new += setdel;
     4a4:	6e696d5f 	mcrvs	13, 3, r6, cr9, cr15, {2}
		RISE_N_SHINE;
     4a8:	72006b74 	andvc	r6, r0, #116, 22	; 0x1d000
     4ac:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
		aux_timer_inactive = 1;
     4b0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     4b4:	65735f4f 	ldrbvs	r5, [r3, #-3919]!	; 0xfffff0b1
				if (__pi_systat.ledsts & 0x1)
     4b8:	74754f74 	ldrbtvc	r4, [r5], #-3956	; 0xfffff08c
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	45747570 	ldrbmi	r7, [r4, #-1392]!	; 0xfffffa90
     4c0:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
				if (__pi_systat.ledsts & 0x2)
     4c4:	6f694465 	svcvs	0x00694465
     4c8:	4e4f4100 	dvfmie	f4, f7, f0
     4cc:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
				if (__pi_systat.ledsts & 0x8)
     4d0:	6e456e6f 	cdpvs	14, 4, cr6, cr5, cr15, {3}
				__pi_systat.ledblk = 1;
     4d4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     4d8:	33697500 	cmncc	r9, #0, 10
		if (aux_timer_inactive) {
     4dc:	646f4d32 	strbtvs	r4, [pc], #-3378	; 4e4 <AONRTCIntHandler+0xf0>
			cli_aux;
     4e0:	5f5f0065 	svcpl	0x005f0065
     4e4:	6f5f6970 	svcvs	0x005f6970
     4e8:	6f646666 	svcvs	0x00646666
     4ec:	6e69616d 	powvsez	f6, f1, #5.0
     4f0:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
     4f4:	00766174 	rsbseq	r6, r6, r4, ror r1
     4f8:	74617275 	strbtvc	r7, [r1], #-629	; 0xfffffd8b
     4fc:	5f007365 	svcpl	0x00007365
     500:	616e655f 	cmnvs	lr, pc, asr r5
     504:	5f656c62 	svcpl	0x00656c62
word tci_update_delay_ticks (Boolean force) {
     508:	00717269 	rsbseq	r7, r1, r9, ror #4
	cli_tim;
     50c:	72656877 	rsbvc	r6, r5, #7798784	; 0x770000
     510:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
	if (setdel) {
     514:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	6e756674 	mrcvs	6, 3, r6, cr5, cr4, {3}
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	4100745f 	tstmi	r0, pc, asr r4
     520:	55574e4f 	ldrbpl	r4, [r7, #-3663]	; 0xfffff1b1
     524:	78754143 	ldmdavc	r5!, {r0, r1, r6, r8, lr}^
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
				AON_RTC_O_CH0CMP)) - gettav ());
     52c:	76457075 			; <UNDEFINED> instruction: 0x76457075
	return NO;
     530:	00746e65 	rsbseq	r6, r4, r5, ror #28
			setdel = 0;
     534:	574e4f41 	strbpl	r4, [lr, -r1, asr #30]
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     538:	6f504355 	svcvs	0x00504355
     53c:	53726577 	cmnpl	r2, #499122176	; 0x1dc00000
}
     540:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
		sti_tim;
     544:	74654773 	strbtvc	r4, [r5], #-1907	; 0xfffff88d
		return YES;
     548:	52415500 	subpl	r5, r1, #0, 10
     54c:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
     550:	61656c43 	cmnvs	r5, r3, asr #24
     554:	79730072 	ldmdbvc	r3!, {r1, r4, r5, r6}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	6d657473 	cfstrdvs	mvd7, [r5, #-460]!	; 0xfffffe34
	UARTDisable (UART0_BASE);
     55c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	4f410074 	svcmi	0x00410074
	UARTDisable (UART0_BASE);
     564:	4355574e 	cmpmi	r5, #20447232	; 0x1380000
	UARTConfigSetExpClk (UART0_BASE,
     568:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
     56c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
     570:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     574:	7300656c 	movwvc	r6, #1388	; 0x56c
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	65647465 	strbvs	r7, [r4, #-1125]!	; 0xfffffb9b
     57c:	5250006c 	subspl	r0, r0, #108	; 0x6c
     580:	634d4d43 	movtvs	r4, #56643	; 0xdd43
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	776f5075 			; <UNDEFINED> instruction: 0x776f5075
     588:	664f7265 	strbvs	r7, [pc], -r5, ror #4
     58c:	5f5f0066 	svcpl	0x005f0066
	urates [0] = rate;
     590:	5f746573 	svcpl	0x00746573
}
     594:	0050534d 	subseq	r5, r0, sp, asr #6
     598:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
     59c:	5f74696e 	svcpl	0x0074696e
     5a0:	5f5f0074 	svcpl	0x005f0074
     5a4:	6f5f6970 	svcvs	0x005f6970
     5a8:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 3f8 <AONRTCIntHandler+0x4>
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	006e6961 	rsbeq	r6, lr, r1, ror #18
     5b0:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     5b4:	6c467748 	mcrrvs	7, 4, r7, r6, cr8
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	6f43776f 	svcvs	0x0043776f
     5bc:	6f72746e 	svcvs	0x0072746e
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c0:	7369446c 	cmnvc	r9, #108, 8	; 0x6c000000
     5c4:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	505f5f00 	subspl	r5, pc, r0, lsl #30
     5cc:	5f004243 	svcpl	0x00004243
     5d0:	5f69705f 	svcpl	0x0069705f
     5d4:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     5d8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
     5dc:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
     5e0:	4e4f4100 	dvfmie	f4, f7, f0
	switch (operation) {
     5e4:	46434f49 	strbmi	r4, [r3], -r9, asr #30
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e8:	7a656572 	bvc	1959bb8 <__ccfg+0x1939c10>
     5ec:	73694465 	cmnvc	r9, #1694498816	; 0x65000000
     5f0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     5f4:	33697500 	cmncc	r9, #0, 10
     5f8:	4c785232 	lfmmi	f5, 2, [r8], #-200	; 0xffffff38
				*buf++ = uart_a_read;
     5fc:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
     600:	64655200 	strbtvs	r5, [r5], #-512	; 0xfffffe00
			while (len && uart_a_char_available) {
     604:	78725f6f 	ldmdavc	r2!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
     608:	33697500 	cmncc	r9, #0, 10
     60c:	4c785432 	cfldrdmi	mvd5, [r8], #-200	; 0xffffff38
			if (len != operation) {
     610:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
}
     614:	73795300 	cmnvc	r9, #0, 6
     618:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
			uart_a_disable_int;
     61c:	636f6c43 	cmnvs	pc, #17152	; 0x4300
			if (uart_a_char_available) {
     620:	7465476b 	strbtvc	r4, [r5], #-1899	; 0xfffff895
				*buf++ = uart_a_read;
     624:	43525000 	cmpmi	r2, #0
			uart_a_disable_int;
     628:	6361434d 	cmnvs	r1, #872415233	; 0x34000001
     62c:	65526568 	ldrbvs	r6, [r2, #-1384]	; 0xfffffa98
			if (uart_a_char_available) {
     630:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
     634:	456e6f69 	strbmi	r6, [lr, #-3945]!	; 0xfffff097
				uart_a_enable_int;
     638:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     63c:	52500065 	subspl	r0, r0, #101	; 0x65
				goto Redo_rx;
     640:	6f4c4d43 	svcvs	0x004c4d43
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     644:	65536461 	ldrbvs	r6, [r3, #-1121]	; 0xfffffb9f
     648:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
			return -2;
     64c:	6e453233 	mcrvs	2, 2, r3, cr5, cr3, {1}
     650:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
				uart_a_write (*buf);
     654:	616e6500 	cmnvs	lr, r0, lsl #10
     658:	5f656c62 	svcpl	0x00656c62
			while (len && uart_a_room_in_tx) {
     65c:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
     660:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
     664:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0xfffffd9b
			if (len != operation) {
     668:	00737470 	rsbseq	r7, r3, r0, ror r4
			uart_a_disable_int;
     66c:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     670:	4f464946 	svcmi	0x00464946
			if (uart_a_room_in_tx) {
     674:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     678:	7500656c 	strvc	r6, [r0, #-1388]	; 0xfffffa94
				uart_a_enable_int;
     67c:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
     680:	6c46746e 	cfstrdvs	mvd7, [r6], {110}	; 0x6e
				*buf++ = uart_a_read;
     684:	00736761 	rsbseq	r6, r3, r1, ror #14
			if (uart_a_room_in_tx) {
     688:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
				uart_a_write (*buf);
     68c:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     690:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	74617274 	strbtvc	r7, [r1], #-628	; 0xfffffd8c
     698:	6f500065 	svcvs	0x00500065
			uart_a_enable_int;
     69c:	43726577 	cmnmi	r2, #499122176	; 0x1dc00000
     6a0:	496c7274 	stmdbmi	ip!, {r2, r4, r5, r6, r9, ip, sp, lr}^
     6a4:	6572464f 	ldrbvs	r4, [r2, #-1615]!	; 0xfffff9b1
			return 0;
     6a8:	44657a65 	strbtmi	r7, [r5], #-2661	; 0xfffff59b
			if (len == UART_CNTRL_SETRATE) {
     6ac:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
				if (__pi_uart_setrate (*((word*)buf),
     6b0:	5000656c 	andpl	r6, r0, ip, ror #10
     6b4:	434d4352 	movtmi	r4, #54098	; 0xd352
     6b8:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
				syserror (EREQPAR, "uar");
     6bc:	65746552 	ldrbvs	r6, [r4, #-1362]!	; 0xfffffaae
			syserror (ENOOPER, "uai");
     6c0:	6f69746e 	svcvs	0x0069746e
			if (len == UART_CNTRL_GETRATE) {
     6c4:	7369446e 	cmnvc	r9, #1845493760	; 0x6e000000
				return 1;
     6c8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
			syserror (ENOOPER, "uai");
     6d0:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
     6d4:	646f6d72 	strbtvs	r6, [pc], #-3442	; 6dc <ioreq_uart_a+0xf8>
     6d8:	706f0065 	rsbvc	r0, pc, r5, rrx
     6dc:	74617265 	strbtvc	r7, [r1], #-613	; 0xfffffd9b
     6e0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6e4:	5f787561 	svcpl	0x00787561
     6e8:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
     6ec:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
     6f0:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	70006576 	andvc	r6, r0, r6, ror r5
void UART0IntHandler () {
     6f8:	5f74726f 	svcpl	0x0074726f
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
     700:	65520073 	ldrbvs	r0, [r2, #-115]	; 0xffffff8d
     704:	745f6f64 	ldrbvc	r6, [pc], #-3940	; 70c <UART0IntHandler+0x18>
     708:	5f5f0078 	svcpl	0x005f0078
     70c:	6f5f6970 	svcvs	0x005f6970
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	7500646c 	strvc	r6, [r0, #-1132]	; 0xfffffb94
     714:	49323369 	ldmdbmi	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
		RISE_N_SHINE;
     718:	6156636e 	cmpvs	r6, lr, ror #6
     71c:	0065756c 	rsbeq	r7, r5, ip, ror #10
		i_trigger (devevent (UART_A, READ));
     720:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     724:	65736142 	ldrbvs	r6, [r3, #-322]!	; 0xfffffebe
     728:	645f5f00 	ldrbvs	r5, [pc], #-3840	; 730 <UART0IntHandler+0x3c>
     72c:	66775f6f 	ldrbtvs	r5, [r7], -pc, ror #30
     730:	73615f69 	cmnvc	r1, #420	; 0x1a4
     734:	65656e5f 	strbvs	r6, [r5, #-3679]!	; 0xfffff1a1
     738:	00646564 	rsbeq	r6, r4, r4, ror #10
     73c:	524e4f41 	subpl	r4, lr, #260	; 0x104
     740:	6e494354 	mcrvs	3, 2, r4, cr9, cr4, {2}
     744:	6c615663 	stclvs	6, cr5, [r1], #-396	; 0xfffffe74
     748:	68436575 	stmdavs	r3, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     74c:	74655332 	strbtvc	r5, [r5], #-818	; 0xfffffcce
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
     754:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     758:	76656400 	strbtvc	r6, [r5], -r0, lsl #8
		i_trigger (devevent (UART_A, WRITE));
     75c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
     764:	4f410074 	svcmi	0x00410074
		RISE_N_SHINE;
     768:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
     76c:	48746e49 	ldmdami	r4!, {r0, r3, r6, r9, sl, fp, sp, lr}^
     770:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
		i_trigger (devevent (UART_A, WRITE));
     774:	70007265 	andvc	r7, r0, r5, ror #4
     778:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     77c:	69637400 	stmdbvs	r3!, {sl, ip, sp, lr}^
     780:	6e75725f 	mrcvs	2, 3, r7, cr5, cr15, {2}
     784:	6c65645f 	cfstrdvs	mvd6, [r5], #-380	; 0xfffffe84
     788:	745f7961 	ldrbvc	r7, [pc], #-2401	; 790 <UART0IntHandler+0x9c>
     78c:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
     790:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     794:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
     798:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     79c:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
}
     7a0:	70006f64 	andvc	r6, r0, r4, ror #30
     7a4:	6e696572 	mcrvs	5, 3, r6, cr9, cr2, {3}
     7a8:	755f7469 	ldrbvc	r7, [pc, #-1129]	; 347 <__pi_syserror+0xf>
     7ac:	00747261 	rsbseq	r7, r4, r1, ror #4
     7b0:	63726f66 	cmnvs	r2, #408	; 0x198
void __buttons_setirq (int val) {
     7b4:	41550065 	cmpmi	r5, r5, rrx
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	6e455452 	mcrvs	4, 2, r5, cr5, cr2, {2}
     7bc:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     7c4:	6c635f4f 	stclvs	15, cr5, [r3], #-316	; 0xfffffec4
     7c8:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0xfffffe9b
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d0:	006f6944 	rsbeq	r6, pc, r4, asr #18
     7d4:	75625f5f 	strbvc	r5, [r2, #-3935]!	; 0xfffff0a1
     7d8:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
     7dc:	65735f73 	ldrbvs	r5, [r3, #-3955]!	; 0xfffff08d
     7e0:	71726974 	cmnvc	r2, r4, ror r9
     7e4:	65646d00 	strbvs	r6, [r4, #-3328]!	; 0xfffff300
}
     7e8:	0079616c 	rsbseq	r6, r9, ip, ror #2
     7ec:	69645f5f 	stmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     7f0:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     7f4:	72695f65 	rsbvc	r5, r9, #404	; 0x194
void __pinlist_setirq (int val) {
     7f8:	79530071 	ldmdbvc	r3, {r0, r4, r5, r6}^
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	6e6f416c 	powvsez	f4, f7, #4.0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	636e7953 	cmnvs	lr, #1359872	; 0x14c000
	for (i = 0; i < N_PINLIST; i++) {
     808:	705f5f00 	subsvc	r5, pc, r0, lsl #30
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80c:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     810:	666b6361 	strbtvs	r6, [fp], -r1, ror #6
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     814:	00656572 	rsbeq	r6, r5, r2, ror r5
     818:	5f696374 	svcpl	0x00696374
     81c:	5f6e7572 	svcpl	0x006e7572
	for (i = 0; i < N_PINLIST; i++) {
     820:	69787561 	ldmdbvs	r8!, {r0, r5, r6, r8, sl, ip, sp, lr}^
}
     824:	7261696c 	rsbvc	r6, r1, #108, 18	; 0x1b0000
     828:	69745f79 	ldmdbvs	r4!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     82c:	0072656d 	rsbseq	r6, r2, sp, ror #10
     830:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
void GPIOIntHandler () {
     834:	73696c6e 	cmnvc	r9, #28160	; 0x6e00
if (buttons_int) {
     838:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
     83c:	71726974 	cmnvc	r2, r4, ror r9
	buttons_disable ();
     840:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
     844:	746e494f 	strbtvc	r4, [lr], #-2383	; 0xfffff6b1
	i_trigger ((aword)&__button_list);
     848:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     84c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     850:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     854:	4f464946 	svcmi	0x00464946
     858:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
     85c:	7465536c 	strbtvc	r5, [r5], #-876	; 0xfffffc94
     860:	73795300 	cmnvc	r9, #0, 6
     864:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     868:	74737953 	ldrbtvc	r7, [r3], #-2387	; 0xfffff6ad
     86c:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xfffff29b
     870:	00746573 	rsbseq	r6, r4, r3, ror r5
	RISE_N_SHINE;
     874:	74746573 	ldrbtvc	r6, [r4], #-1395	; 0xfffffa8d
     878:	65007661 	strvs	r7, [r0, #-1633]	; 0xfffff99f
     87c:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
if (pin_sensor_int) {
     880:	64750073 	ldrbtvs	r0, [r5], #-115	; 0xffffff8d
     884:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	i_trigger ((aword)(&__input_pins));
     888:	4e4f4100 	dvfmie	f4, f7, f0
     88c:	4d746142 	ldfmie	f6, [r4, #-264]!	; 0xfffffef8
     890:	69446e6f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     894:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     898:	5f5f0065 	svcpl	0x005f0065
     89c:	6e5f6970 			; <UNDEFINED> instruction: 0x6e5f6970
     8a0:	5f007765 	svcpl	0x00007765
     8a4:	5f69705f 	svcpl	0x0069705f
     8a8:	6d746162 	ldfvse	f6, [r4, #-392]!	; 0xfffffe78
     8ac:	41006e6f 	tstmi	r0, pc, ror #28
     8b0:	4f494e4f 	svcmi	0x00494e4f
	__pinsen_disable_and_clear;
     8b4:	65724643 	ldrbvs	r4, [r2, #-1603]!	; 0xfffff9bd
	RISE_N_SHINE;
     8b8:	45657a65 	strbmi	r7, [r5, #-2661]!	; 0xfffff59b
     8bc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
     8c0:	4f410065 	svcmi	0x00410065
}
     8c4:	7461424e 	strbtvc	r4, [r1], #-590	; 0xfffffdb2
     8c8:	426e6f4d 	rsbmi	r6, lr, #308	; 0x134
     8cc:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
     8d0:	6f567972 	svcvs	0x00567972
     8d4:	6761746c 	strbvs	r7, [r1, -ip, ror #8]!
void system_init () {
     8d8:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	726f6900 	rsbvc	r6, pc, #0, 18
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e0:	755f7165 	ldrbvc	r7, [pc, #-357]	; 783 <UART0IntHandler+0x8f>
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	5f747261 	svcpl	0x00747261
     8e8:	5f5f0061 	svcpl	0x005f0061
     8ec:	755f6970 	ldrbvc	r6, [pc, #-2416]	; ffffff84 <_estack+0xdfffaf84>
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	736d6974 	cmnvc	sp, #116, 18	; 0x1d0000
     8f4:	6e697300 	cdpvs	3, 6, cr7, cr9, cr0, {0}
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
     8fc:	696e6976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     900:	5f5f0074 	svcpl	0x005f0074
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	72657379 	rsbvc	r7, r5, #-469762047	; 0xe4000001
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	00726f72 	rsbseq	r6, r2, r2, ror pc
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	6e766564 	cdpvs	5, 7, cr6, cr6, cr4, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	2f006d75 	svccs	0x00006d75
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	2f6e6974 	svccs	0x006e6974
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	6b736544 	blvs	1cd9e3c <__ccfg+0x1cb9e94>
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     928:	2f706f74 	svccs	0x00706f74
     92c:	4f534c4f 	svcmi	0x00534c4f
     930:	2f54454e 	svccs	0x0054454e
     934:	4f434950 	svcmi	0x00434950
		if (port_confs [i] & 0x80)
     938:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	2f534f63 	svccs	0x00534f63
     940:	33314343 	teqcc	r1, #201326593	; 0xc000001
		if (port_confs [i] & 0x40)
     944:	6d2f5858 	stcvs	8, cr5, [pc, #-352]!	; 7ec <__buttons_setirq+0x38>
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
     94c:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     950:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     954:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     958:	74614274 	strbtvc	r4, [r1], #-628	; 0xfffffd8c
	all_leds_blink;
     95c:	79726574 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     960:	52415500 	subpl	r5, r1, #0, 10
     964:	746e4954 	strbtvc	r4, [lr], #-2388	; 0xfffff6ac
     968:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
     96c:	5000656c 	andpl	r6, r0, ip, ror #10
     970:	4d4d4352 	stclmi	3, cr4, [sp, #-328]	; 0xfffffeb8
     974:	6c557563 	cfldr64vs	mvdx7, [r5], {99}	; 0x63
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	6f436f64 	svcvs	0x00436f64
     97c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     980:	00657275 	rsbeq	r7, r5, r5, ror r2
     984:	7074756f 	rsbsvc	r7, r4, pc, ror #10
     988:	6e457475 	mcrvs	4, 2, r7, cr5, cr5, {3}
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
     994:	61680065 	cmnvs	r8, r5, rrx
	IntEnable (INT_AON_RTC_COMB);
     998:	7400746c 	strvc	r7, [r0], #-1132	; 0xfffffb94
     99c:	664f706f 	strbvs	r7, [pc], -pc, rrx
     9a0:	6e69614d 	powvsem	f6, f1, #5.0
	__pi_malloc_init ();
     9a4:	63617453 	cmnvs	r1, #1392508928	; 0x53000000
	IntEnable (INT_AON_GPIO_EDGE);
     9a8:	675f006b 	ldrbvs	r0, [pc, -fp, rrx]
     9ac:	616c6564 	cmnvs	ip, r4, ror #10
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	41550079 	cmpmi	r5, r9, ror r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	49305452 	ldmdbmi	r0!, {r1, r4, r6, sl, ip, lr}
     9b8:	6148746e 	cmpvs	r8, lr, ror #8
     9bc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c0:	65440072 	strbvs	r0, [r4, #-114]	; 0xffffff8e
     9c4:	6c537065 	mrrcvs	0, 6, r7, r3, cr5
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c8:	00706565 	rsbseq	r6, r0, r5, ror #10
     9cc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     9d0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
	urates [0] = UART_RATE / 100;
     9d4:	00676966 	rsbeq	r6, r7, r6, ror #18
     9d8:	5f696374 	svcpl	0x00696374
	reinit_uart ();
     9dc:	61647075 	smcvs	18181	; 0x4705
	EXTRA_INITIALIZERS;
     9e0:	645f6574 	ldrbvs	r6, [pc], #-1396	; 9e8 <system_init+0x110>
     9e4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e8:	6369745f 	cmnvs	r9, #1593835520	; 0x5f000000
     9ec:	4d00736b 	stcmi	3, cr7, [r0, #-428]	; 0xfffffe54
     9f0:	75736165 	ldrbvc	r6, [r3, #-357]!	; 0xfffffe9b
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	64006572 	strvs	r6, [r0], #-1394	; 0xfffffa8e
     9f8:	65727665 	ldrbvs	r7, [r2, #-1637]!	; 0xfffff99b
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	6e756671 	mrcvs	6, 3, r6, cr5, cr1, {3}
     a00:	6b00745f 	blvs	1db84 <__exidx_end+0x1af04>
			devinit [i] . init (devinit [i] . param);
     a04:	656c6c69 	strbvs	r6, [ip, #-3177]!	; 0xfffff397
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	5f5f0076 	svcpl	0x005f0076
     a0c:	735f6970 	cmpvc	pc, #112, 18	; 0x1c0000
     a10:	70637274 	rsbvc	r7, r3, r4, ror r2
	IntEnable (INT_UART0_COMB);
     a14:	5f5f0079 	svcpl	0x005f0079
     a18:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; 940 <system_init+0x68>	; <UNPREDICTABLE>
}
     a1c:	6f6c6c61 	svcvs	0x006c6c61
	tci_run_auxiliary_timer ();
     a20:	6e750063 	cdpvs	0, 7, cr0, cr5, cr3, {3}
		diag ("");
     a24:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
     a28:	72667100 	rsbvc	r7, r6, #0, 2
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2c:	69006565 	stmdbvs	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	7165726f 	cmnvc	r5, pc, ror #4
		diag ("Leftover RAM: %d bytes",
     a34:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     a38:	6f665f69 	svcvs	0x00665f69
     a3c:	6b006b72 	blvs	1b80c <__exidx_end+0x18b8c>
     a40:	006c6c69 	rsbeq	r6, ip, r9, ror #24
     a44:	6f6f706d 	svcvs	0x006f706d
     a48:	5f00736c 	svcpl	0x0000736c
     a4c:	5f61765f 	svcpl	0x0061765f
     a50:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     a54:	69747500 	ldmdbvs	r4!, {r8, sl, ip, sp, lr}^
     a58:	5f72656d 	svcpl	0x0072656d
     a5c:	00646461 	rsbeq	r6, r4, r1, ror #8
     a60:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
     a64:	79737542 	ldmdbvc	r3!, {r1, r6, r8, sl, ip, sp, lr}^
     a68:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     a6c:	616d5f69 	cmnvs	sp, r9, ror #30
     a70:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
     a74:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
     a78:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
     a7c:	2f656d6f 	svccs	0x00656d6f
     a80:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     a84:	442f6e69 	strtmi	r6, [pc], #-3689	; a8c <system_init+0x1b4>
     a88:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     a8c:	4f2f706f 	svcmi	0x002f706f
__attribute__ ((noreturn)) void __pi_release () {
     a90:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     a94:	502f5445 	eorpl	r5, pc, r5, asr #8
     a98:	534f4349 	movtpl	r4, #62281	; 0xf349
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	6369502f 	cmnvs	r9, #47	; 0x2f
	check_stack_overflow;
     aa0:	6b2f534f 	blvs	bd57e4 <__ccfg+0xbb583c>
     aa4:	656e7265 	strbvs	r7, [lr, #-613]!	; 0xfffffd9b
     aa8:	656b2f6c 	strbvs	r2, [fp, #-3948]!	; 0xfffff094
	update_n_wake (MAX_WORD, NO);
     aac:	6c656e72 	stclvs	14, cr6, [r5], #-456	; 0xfffffe38
     ab0:	5f00632e 	svcpl	0x0000632e
     ab4:	5f69705f 	svcpl	0x0069705f
	for_all_tasks (__pi_curr) {
     ab8:	67697274 			; <UNDEFINED> instruction: 0x67697274
     abc:	00726567 	rsbseq	r6, r2, r7, ror #10
     ac0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
	__SLEEP;
     ac8:	006e656c 	rsbeq	r6, lr, ip, ror #10
     acc:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     ad0:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
     ad4:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
	system_event_count ++;
     ad8:	75726300 	ldrbvc	r6, [r2, #-768]!	; 0xfffffd00
     adc:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
	switch (__pi_systat.effpdm) {
     ae0:	636e0067 	cmnvs	lr, #103	; 0x67
     ae4:	6d006b68 	vstrvs	d6, [r0, #-416]	; 0xfffffe60
     ae8:	6572666e 	ldrbvs	r6, [r2, #-1646]!	; 0xfffff992
     aec:	72700065 	rsbsvc	r0, r0, #101	; 0x65
			__WFI ();
     af0:	6565636f 	strbvs	r6, [r5, #-879]!	; 0xfffffc91
     af4:	6c6d0064 	stclvs	0, cr0, [sp], #-400	; 0xfffffe70
     af8:	5f006e65 	svcpl	0x00006e65
	check_stack_overflow;
     afc:	5f69705f 	svcpl	0x0069705f
     b00:	69727470 	ldmdbvs	r2!, {r4, r5, r6, sl, ip, sp, lr}^
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	72656767 	rsbvc	r6, r5, #27000832	; 0x19c0000
     b08:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	66766564 	ldrbtvs	r6, [r6], -r4, ror #10
			goto Redo;
     b10:	00636e75 	rsbeq	r6, r3, r5, ror lr
	for_all_tasks (__pi_curr) {
     b14:	76646970 			; <UNDEFINED> instruction: 0x76646970
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	64007265 	strvs	r7, [r0], #-613	; 0xfffffd9b
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1c:	00676169 	rsbeq	r6, r7, r9, ror #2
     b20:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b24:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
     b28:	00746163 	rsbseq	r6, r4, r3, ror #2
     b2c:	6576656d 	ldrbvs	r6, [r6, #-1389]!	; 0xfffffa93
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b30:	745f746e 	ldrbvc	r7, [pc], #-1134	; b38 <__pi_release+0xa8>
     b34:	675f5f00 	ldrbvs	r5, [pc, -r0, lsl #30]
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b38:	5f63756e 	svcpl	0x0063756e
     b3c:	6c5f6176 	ldfvse	f6, [pc], {118}	; 0x76
			__WFI ();
     b40:	00747369 	rsbseq	r7, r4, r9, ror #6
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	7266636d 	rsbvc	r6, r6, #-1275068415	; 0xb4000001
     b48:	77006565 	strvc	r6, [r0, -r5, ror #10]
}
     b4c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b50:	74657200 	strbtvc	r7, [r5], #-512	; 0xfffffe00
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b54:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b58:	00747365 	rsbseq	r7, r4, r5, ror #6
     b5c:	7373656d 	cmnvc	r3, #457179136	; 0x1b400000
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	76656d00 	strbtvc	r6, [r5], -r0, lsl #26
     b64:	00746e65 	rsbseq	r6, r4, r5, ror #28
     b68:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6c:	6461625f 	strbtvs	r6, [r1], #-607	; 0xfffffda1
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
     b74:	5f5f0065 	svcpl	0x005f0065
     b78:	775f6970 			; <UNDEFINED> instruction: 0x775f6970
     b7c:	00746961 	rsbseq	r6, r4, r1, ror #18
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     b84:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	6d656d74 	stclvs	13, cr6, [r5, #-464]!	; 0xfffffe30
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	6e726c00 	cdpvs	12, 7, cr6, cr2, cr0, {0}
     b90:	696b0064 	stmdbvs	fp!, {r2, r5, r6}^
     b94:	6c616c6c 	stclvs	12, cr6, [r1], #-432	; 0xfffffe50
     b98:	5f5f006c 	svcpl	0x005f006c
     b9c:	6d5f6970 	vldrvs.16	s13, [pc, #-224]	; ac4 <__pi_release+0x34>	; <UNPREDICTABLE>
			SysCtrlSetRechargeBeforePowerDown
     ba0:	72666d65 	rsbvc	r6, r6, #6464	; 0x1940
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	5f006565 	svcpl	0x00006565
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba8:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; aa8 <__pi_release+0x18>
     bac:	75686300 	strbvc	r6, [r8, #-768]!	; 0xfffffd00
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	75006b6e 	strvc	r6, [r0, #-2926]	; 0xfffff492
     bb4:	74616470 	strbtvc	r6, [r1], #-1136	; 0xfffffb90
     bb8:	5f6e5f65 	svcpl	0x006e5f65
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	656b6177 	strbvs	r6, [fp, #-375]!	; 0xfffffe89
     bc0:	705f5f00 	subsvc	r5, pc, r0, lsl #30
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	65735f69 	ldrbvs	r5, [r3, #-3945]!	; 0xfffff097
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	67006465 	strvs	r6, [r0, -r5, ror #8]
     bcc:	6f637465 	svcvs	0x00637465
     bd0:	64006564 	strvs	r6, [r0], #-1380	; 0xfffffa9c
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd4:	7466656c 	strbtvc	r6, [r6], #-1388	; 0xfffffa94
			while (!(AONWUCPowerStatusGet () &
     bd8:	705f5f00 	subsvc	r5, pc, r0, lsl #30
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	656d5f69 	strbvs	r5, [sp, #-3945]!	; 0xfffff097
     be0:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
     be4:	6f676400 	svcvs	0x00676400
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be8:	5f007475 	svcpl	0x00007475
     bec:	0070615f 	rsbseq	r6, r0, pc, asr r1
     bf0:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     bf4:	6974755f 	ldmdbvs	r4!, {r0, r1, r2, r3, r4, r6, r8, sl, ip, sp, lr}^
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf8:	5f72656d 	svcpl	0x0072656d
     bfc:	00746573 	rsbseq	r6, r4, r3, ror r5
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c00:	6e756677 	mrcvs	6, 3, r6, cr5, cr7, {3}
     c04:	61666e00 	cmnvs	r6, r0, lsl #28
			SysCtrlAdjustRechargeAfterPowerDown ();
     c08:	5f006c69 	svcpl	0x00006c69
			reinit_uart ();
     c0c:	5f69705f 	svcpl	0x0069705f
     c10:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
     c14:	5f494400 	svcpl	0x00494400
}
     c18:	00474953 	subeq	r4, r7, r3, asr r9
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1c:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c20:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	00746573 	rsbseq	r6, r4, r3, ror r5
     c28:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
     c2c:	7274735f 	rsbsvc	r7, r4, #2080374785	; 0x7c000001
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c30:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     c34:	705f5f00 	subsvc	r5, pc, r0, lsl #30
     c38:	6f6a5f69 	svcvs	0x006a5f69
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	75006e69 	strvc	r6, [r0, #-3689]	; 0xfffff197
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	65645f72 	strbvs	r5, [r4, #-3954]!	; 0xfffff08e
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     c4c:	705f5f00 	subsvc	r5, pc, r0, lsl #30
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c50:	74735f69 	ldrbtvc	r5, [r3], #-3945	; 0xfffff097
     c54:	61636e72 	smcvs	14050	; 0x36e2
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	63740074 	cmnvs	r4, #116	; 0x74
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5c:	73715f76 	cmnvc	r1, #472	; 0x1d8
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c60:	00657a69 	rsbeq	r7, r5, r9, ror #20
     c64:	76657270 			; <UNDEFINED> instruction: 0x76657270
			PRCMPowerDomainOff (
     c68:	745f5f00 	ldrbvc	r5, [pc], #-3840	; c70 <__pi_release+0x1e0>
     c6c:	625f7663 	subsvs	r7, pc, #103809024	; 0x6300000
	__SLEEP;
     c70:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
     c74:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
	goto Redo;
     c7c:	6f745f79 	svcvs	0x00745f79
     c80:	63740070 	cmnvs	r4, #112	; 0x70
     c84:	6f635f76 	svcvs	0x00635f76
     c88:	6f72746e 	svcvs	0x0072746e
     c8c:	682f006c 	stmdavs	pc!, {r2, r3, r5, r6}	; <UNPREDICTABLE>
     c90:	2f656d6f 	svccs	0x00656d6f
     c94:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
     c98:	442f6e69 	strtmi	r6, [pc], #-3689	; ca0 <__pi_release+0x210>
     c9c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
     ca0:	4f2f706f 	svcmi	0x002f706f
     ca4:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
     ca8:	502f5445 	eorpl	r5, pc, r5, asr #8
     cac:	534f4349 	movtpl	r4, #62281	; 0xf349
     cb0:	6369502f 	cmnvs	r9, #47	; 0x2f
     cb4:	502f534f 	eorpl	r5, pc, pc, asr #6
     cb8:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
     cbc:	654e562f 	strbvs	r5, [lr, #-1583]	; 0xfffff9d1
     cc0:	742f4974 	strtvc	r4, [pc], #-2420	; cc8 <__pi_release+0x238>
     cc4:	632e7663 			; <UNDEFINED> instruction: 0x632e7663
     cc8:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     ccc:	69645f70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     cd0:	736f7073 	cmnvc	pc, #115	; 0x73
     cd4:	63740065 	cmnvs	r4, #101	; 0x65
     cd8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     cdc:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     ce0:	78656e00 	stmdavc	r5!, {r9, sl, fp, sp, lr}^
     ce4:	74630074 	strbtvc	r0, [r3], #-116	; 0xffffff8c
int main (void) {
     ce8:	75666c72 	strbvc	r6, [r6, #-3186]!	; 0xfffff38e
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cec:	00745f6e 	rsbseq	r5, r4, lr, ror #30
     cf0:	70766374 	rsbsvc	r6, r6, r4, ror r3
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	5f67756c 	svcpl	0x0067756c
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	63740074 	cmnvs	r4, #116	; 0x74
	system_init ();
     cfc:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
	tcv_init ();
     d00:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     d08:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d0c:	6374006f 	cmnvs	r4, #111	; 0x6f
     d10:	706f5f76 	rsbvc	r5, pc, r6, ror pc	; <UNPREDICTABLE>
     d14:	74006e65 	strvc	r6, [r0], #-3685	; 0xfffff19b
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	645f7663 	ldrbvs	r7, [pc], #-1635	; d20 <main+0x38>
     d1c:	00706f72 	rsbseq	r6, r0, r2, ror pc
	delay (16, 0);
     d20:	73796870 	cmnvc	r9, #112, 16	; 0x700000
     d24:	6f666e69 	svcvs	0x00666e69
     d28:	706d6500 	rsbvc	r6, sp, r0, lsl #10
	__pi_release ();
     d2c:	74007974 	strvc	r7, [r0], #-2420	; 0xfffff68c
     d30:	68707663 	ldmdavs	r0!, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^
     d34:	72655f79 	rsbvc	r5, r5, #484	; 0x1e4
     d38:	00657361 	rsbeq	r7, r5, r1, ror #6
     d3c:	70766374 	rsbsvc	r6, r6, r4, ror r3
     d40:	7474615f 	ldrbtvc	r6, [r4], #-351	; 0xfffffea1
     d44:	00686361 	rsbeq	r6, r8, r1, ror #6
static void killev (__pi_pcb_t *pid) {
     d48:	6575716f 	ldrbvs	r7, [r5, #-367]!	; 0xfffffe91
	wfun = (aword)(pid->code);
     d4c:	00736575 	rsbseq	r6, r3, r5, ror r5
	for_all_tasks (i) {
     d50:	63745f5f 	cmnvs	r4, #380	; 0x17c
		for (j = 0; j < nevents (i); j++) {
     d54:	69715f76 	ldmdbvs	r1!, {r1, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     d58:	5f6d6574 	svcpl	0x006d6574
     d5c:	5f5f0073 	svcpl	0x005f0073
			    || i->Events [j] . Event == wfun
     d60:	5f766374 	svcpl	0x00766374
		for (j = 0; j < nevents (i); j++) {
     d64:	65746971 	ldrbvs	r6, [r4, #-2417]!	; 0xfffff68f
			if (i->Events [j] . Event == (aword)pid
     d68:	00745f6d 	rsbseq	r5, r4, sp, ror #30
     d6c:	63745f5f 	cmnvs	r4, #380	; 0x17c
     d70:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
				wakeupev (i, j);
     d74:	6b636f6c 	blvs	18dcb2c <__ccfg+0x18bcb84>
     d78:	6100745f 	tstvs	r0, pc, asr r4
	for_all_tasks (i) {
     d7c:	00707474 	rsbseq	r7, r0, r4, ror r4
}
     d80:	65677275 	strbvs	r7, [r7, #-629]!	; 0xfffffd8b
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	7600746e 	strvc	r7, [r0], -lr, ror #8
static void qfree (aword *ch) {
     d88:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	5f724500 	svcpl	0x00724500
	cc = (aword*)(mpools + MA_NP);
     d90:	74007472 	strvc	r7, [r0], #-1138	; 0xfffffb8e
	m_setnextp (ch, chunk);
     d94:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
	m_setnextp (cc, ch);
     d98:	64006f6c 	strvs	r6, [r0], #-3948	; 0xfffff094
}
     d9c:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da0:	6f747069 	svcvs	0x00747069
     da4:	74007372 	strvc	r7, [r0], #-882	; 0xfffffc8e
     da8:	655f7663 	ldrbvs	r7, [pc, #-1635]	; 74d <UART0IntHandler+0x59>
			m_setnextp (cc, m_nextp (chunk));
     dac:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     db4:	646e655f 	strbtvs	r6, [lr], #-1375	; 0xfffffaa1
     db8:	63740070 	cmnvs	r4, #112	; 0x70
     dbc:	756f5f76 	strbvc	r5, [pc, #-3958]!	; fffffe4e <_estack+0xdfffae4e>
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	63740074 	cmnvs	r4, #116	; 0x74
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	6e5f7076 	mrcvs	0, 2, r7, cr15, cr6, {3}
     dc8:	72007765 	andvc	r7, r0, #26476544	; 0x1940000
     dcc:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
			m_setnextp (cc, m_nextp (chunk));
     dd0:	63740065 	cmnvs	r4, #101	; 0x65
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	6d745f76 	ldclvs	15, cr5, [r4, #-472]!	; 0xfffffe28
     dd8:	74700074 	ldrbtvc	r0, [r0], #-116	; 0xffffff8c
     ddc:	70007372 	andvc	r7, r0, r2, ror r3
     de0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
     de4:	00737265 	rsbseq	r7, r3, r5, ror #4
     de8:	5f766374 	svcpl	0x00766374
			if (m_size (chunk) >= m_size (ch))
     dec:	73706e77 	cmnvc	r0, #1904	; 0x770
     df0:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     df4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
		chunk = m_nextp (chunk))
     df8:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
     dfc:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
     e00:	74007663 	strvc	r7, [r0], #-1635	; 0xfffff99d
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	635f7663 	cmpvs	pc, #103809024	; 0x6300000
	diag_wait (a);
     e08:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
	diag_wchar (c, a);
     e0c:	745f5f00 	ldrbvc	r5, [pc], #-3840	; e14 <dgout+0x10>
     e10:	735f7663 	cmpvc	pc, #103809024	; 0x6300000
}
     e14:	65647365 	strbvs	r7, [r4, #-869]!	; 0xfffffc9b
     e18:	745f6373 	ldrbvc	r6, [pc], #-883	; e20 <__pi_badstate+0x4>
	syserror (ESTATE, "state");
     e1c:	79687000 	stmdbvc	r8!, {ip, sp, lr}^
     e20:	68700073 	ldmdavs	r0!, {r0, r1, r4, r5, r6}^
     e24:	63697379 	cmnvs	r9, #-469762047	; 0xe4000001
     e28:	74006c61 	strvc	r6, [r0], #-3169	; 0xfffff39f
void update_n_wake (word min, Boolean force) {
     e2c:	006c6961 	rsbeq	r6, ip, r1, ror #18
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
     e34:	74006465 	strvc	r6, [r0], #-1125	; 0xfffffb9b
     e38:	725f7663 	subsvc	r7, pc, #103809024	; 0x6300000
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	00646165 	rsbeq	r6, r4, r5, ror #2
     e40:	5f766374 	svcpl	0x00766374
     e44:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     e48:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e4c:	6d72665f 	ldclvs	6, cr6, [r2, #-380]!	; 0xfffffe84
     e50:	73657300 	cmnvc	r5, #0, 6
     e54:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
     e58:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e5c:	6c635f70 	stclvs	15, cr5, [r3], #-448	; 0xfffffe40
     e60:	00656e6f 	rsbeq	r6, r5, pc, ror #28
     e64:	70766374 	rsbsvc	r6, r6, r4, ror r3
     e68:	7373615f 	cmnvc	r3, #-1073741801	; 0xc0000017
     e6c:	006e6769 	rsbeq	r6, lr, r9, ror #14
		for_all_tasks (i) {
     e70:	64696c70 	strbtvs	r6, [r9], #-3184	; 0xfffff390
	__pi_mintk = znew + min;
     e74:	76637400 	strbtvc	r7, [r3], -r0, lsl #8
     e78:	5f796870 	svcpl	0x00796870
			if (!twaiting (i))
     e7c:	00646e65 	rsbeq	r6, r4, r5, ror #28
     e80:	70747461 	rsbsvc	r7, r4, r1, ror #8
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	65747461 	ldrbvs	r7, [r4, #-1121]!	; 0xfffffb9f
     e88:	74006e72 	strvc	r6, [r0], #-3698	; 0xfffff18e
     e8c:	6f5f7663 	svcvs	0x005f7663
     e90:	74006570 	strvc	r6, [r0], #-1392	; 0xfffffa90
     e94:	785f7663 	ldmdavc	pc, {r0, r1, r5, r6, r9, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     e98:	7400746d 	strvc	r7, [r0], #-1133	; 0xfffffb93
     e9c:	64617663 	strbtvs	r7, [r1], #-1635	; 0xfffff99d
     ea0:	00745f70 	rsbseq	r5, r4, r0, ror pc
     ea4:	5f766374 	svcpl	0x00766374
     ea8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
     eac:	61656800 	cmnvs	r5, r0, lsl #16
     eb0:	74610064 	strbtvc	r0, [r1], #-100	; 0xffffff9c
				wakeuptm (i);
     eb4:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
     eb8:	73657475 	cmnvc	r5, #1962934272	; 0x75000000
		for_all_tasks (i) {
     ebc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; ec4 <update_n_wake+0x98>
				d = i->Timer - znew;
     ec0:	715f7663 	cmpvc	pc, r3, ror #12
     ec4:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
     ec8:	7000745f 	andvc	r7, r0, pc, asr r4
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	6967756c 	stmdbvs	r7!, {r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     ed0:	656c006e 	strbvs	r0, [ip, #-110]!	; 0xffffff92
     ed4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
	__pi_old = znew;
     ed8:	73696400 	cmnvc	r9, #0, 8
}
     edc:	63740070 	cmnvs	r4, #112	; 0x70
	TCI_RUN_DELAY_TIMER;
     ee0:	6e725f76 	mrcvs	15, 3, r5, cr2, cr6, {3}
}
     ee4:	63740070 	cmnvs	r4, #112	; 0x70
     ee8:	79687076 	stmdbvc	r8!, {r1, r2, r4, r5, r6, ip, sp, lr}^
     eec:	7663725f 			; <UNDEFINED> instruction: 0x7663725f
     ef0:	75716200 	ldrbvc	r6, [r1, #-512]!	; 0xfffffe00
     ef4:	00657565 	rsbeq	r7, r5, r5, ror #10
void proceed (word state) {
     ef8:	67756c70 			; <UNDEFINED> instruction: 0x67756c70
	prcdstate (__pi_curr, state);
     efc:	00736e69 	rsbseq	r6, r3, r9, ror #28
     f00:	63745f5f 	cmnvs	r4, #380	; 0x17c
	release;
     f04:	62685f76 	rsbvs	r5, r8, #472	; 0x1d8
     f08:	6b636f6c 	blvs	18dccc0 <__ccfg+0x18bcd18>
void __pi_wait (aword event, word state) {
     f0c:	6f00735f 	svcvs	0x0000735f
	sint j = nevents (__pi_curr);
     f10:	6f677475 	svcvs	0x00677475
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	00676e69 	rsbeq	r6, r7, r9, ror #28
     f18:	70766374 	rsbsvc	r6, r6, r4, ror r3
     f1c:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
		syserror (ENEVENTS, "sw");
     f20:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; d58 <killev+0x10>
     f24:	73655f00 	cmnvc	r5, #0, 30
	setestate (__pi_curr->Events [j], state, event);
     f28:	6b636174 	blvs	18d9500 <__ccfg+0x18b9558>
	incwait (__pi_curr);
     f2c:	61645f00 	cmnvs	r4, r0, lsl #30
	setestate (__pi_curr->Events [j], state, event);
     f30:	70006174 	andvc	r6, r0, r4, ror r1
}
     f34:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
     f38:	00637253 	rsbeq	r7, r3, r3, asr r2
     f3c:	6c756146 	ldfvse	f6, [r5], #-280	; 0xfffffee8
void __pi_trigger (aword event) {
     f40:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
	for_all_tasks (i) {
     f44:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
		for (j = 0; j < nevents (i); j++) {
     f48:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f4c:	53696d4e 	cmnpl	r9, #4992	; 0x1380
     f50:	6e614852 	mcrvs	8, 3, r4, cr1, cr2, {2}
     f54:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
			if (i->Events [j] . Event == event) {
     f58:	74655f00 	strbtvc	r5, [r5], #-3840	; 0xfffff100
     f5c:	00747865 	rsbseq	r7, r4, r5, ror #16
     f60:	7362655f 	cmnvc	r2, #398458880	; 0x17c00000
				wakeupev (i, j);
     f64:	682f0073 	stmdavs	pc!, {r0, r1, r4, r5, r6}	; <UNPREDICTABLE>
     f68:	2f656d6f 	svccs	0x00656d6f
	for_all_tasks (i) {
     f6c:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
}
     f70:	442f6e69 	strtmi	r6, [pc], #-3689	; f78 <__pi_join+0x4>
aword __pi_join (aword pid, word st) {
     f74:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
	for_all_tasks (i) {
     f78:	4f2f706f 	svcmi	0x002f706f
     f7c:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
	return 0;
     f80:	502f5445 	eorpl	r5, pc, r5, asr #8
		if ((aword)i == pid) {
     f84:	534f4349 	movtpl	r4, #62281	; 0xf349
			__pi_wait (pid, st);
     f88:	6369502f 	cmnvs	r9, #47	; 0x2f
}
     f8c:	432f534f 			; <UNDEFINED> instruction: 0x432f534f
	for_all_tasks (i) {
     f90:	58333143 	ldmdapl	r3!, {r0, r1, r6, r8, ip, sp}
     f94:	74732f58 	ldrbtvc	r2, [r3], #-3928	; 0xfffff0a8
void delay (word d, word state) {
     f98:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
	settstate (__pi_curr, state);
     f9c:	63675f70 	cmnvs	r7, #112, 30	; 0x1c0
     fa0:	00632e63 	rsbeq	r2, r3, r3, ror #28
     fa4:	7373625f 	cmnvc	r3, #-268435451	; 0xf0000005
     fa8:	64655f00 	strbtvs	r5, [r5], #-3840	; 0xfffff100
	update_n_wake (d, YES);
     fac:	00617461 	rsbeq	r7, r1, r1, ror #8
     fb0:	44746e49 	ldrbtmi	r6, [r4], #-3657	; 0xfffff1b7
	__pi_curr->Timer = __pi_old + d;
     fb4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
     fb8:	6148746c 	cmpvs	r8, ip, ror #8
	inctimer (__pi_curr);
     fbc:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     fc0:	5f670072 	svcpl	0x00670072
     fc4:	566e6670 			; <UNDEFINED> instruction: 0x566e6670
}
     fc8:	6f746365 	svcvs	0x00746365
     fcc:	70007372 	andvc	r7, r0, r2, ror r3
	if (fun == NULL)
     fd0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		return (int) __pi_curr;
     fd4:	74736544 	ldrbtvc	r6, [r3], #-1348	; 0xfffffabc
     fd8:	73655200 	cmnvc	r5, #0, 4
	for_all_tasks (i)
     fdc:	53497465 	movtpl	r7, #37989	; 0x9465
}
     fe0:	43430052 	movtmi	r0, #12370	; 0x3052
		if (i->code == fun)
     fe4:	565f4746 	ldrbpl	r4, [pc], -r6, asr #14
	for_all_tasks (i)
     fe8:	5f544c4f 	svcpl	0x00544c4f
     fec:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xfffff0b4
     ff0:	4300305f 	movwmi	r3, #95	; 0x5f
int __pi_strlen (const char *s) {
     ff4:	5f474643 	svcpl	0x00474643
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	544c4f56 	strbpl	r4, [ip], #-3926	; 0xfffff0aa
}
     ffc:	414f4c5f 	cmpmi	pc, pc, asr ip	; <UNPREDICTABLE>
	for (i = 0; *(s+i) != '\0'; i++);
    1000:	00315f44 	eorseq	r5, r1, r4, asr #30
	while (n--)
    1004:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1008:	5f4c425f 	svcpl	0x004c425f
		*dest++ = *src++;
    100c:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
    1010:	43004749 	movwmi	r4, #1865	; 0x749
    1014:	5f474643 	svcpl	0x00474643
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	5f435452 	svcpl	0x00435452
		syserror (EREQPAR, "addv");
    101c:	5346464f 	movtpl	r4, #26191	; 0x664f
		syserror (ERESOURCE, "addv");
    1020:	43005445 	movwmi	r5, #1093	; 0x445
	if (ioreq [loc] != NULL)
    1024:	5f474643 	svcpl	0x00474643
    1028:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
		syserror (ERESOURCE, "addv");
    102c:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
	ioreq [loc] = rf;
    1030:	5f5f0046 	svcpl	0x005f0046
}
    1034:	67666363 	strbvs	r6, [r6, -r3, ror #6]!
    1038:	6f682f00 	svcvs	0x00682f00
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	6d2f656d 	cfstr32vs	mvfx6, [pc, #-436]!	; e90 <update_n_wake+0x64>
    1040:	69747261 	ldmdbvs	r4!, {r0, r5, r6, r9, ip, sp, lr}^
    1044:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
    1048:	6f746b73 	svcvs	0x00746b73
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	4c4f2f70 	mcrrmi	15, 7, r2, pc, cr0
    1050:	454e4f53 	strbmi	r4, [lr, #-3923]	; 0xfffff0ad
    1054:	49502f54 	ldmdbmi	r0, {r2, r4, r6, r8, r9, sl, fp, sp}^
		syserror (ENODEVICE, "io");
    1058:	2f534f43 	svccs	0x00534f43
    105c:	4f636950 	svcmi	0x00636950
	if (len == 0)
    1060:	43432f53 	movtmi	r2, #16211	; 0x3f53
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	58583331 	ldmdapl	r8, {r0, r4, r5, r8, r9, ip, sp}^
    1068:	6663632f 	strbtvs	r6, [r3], -pc, lsr #6
	if (ret >= 0)
    106c:	00632e67 	rsbeq	r2, r3, r7, ror #28
	if (ret == -1) {
    1070:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    1074:	5a49535f 	bpl	1255df8 <__ccfg+0x1235e50>
		if (retry == WNONE)
    1078:	4e415f45 	cdpmi	15, 4, cr5, cr1, cr5, {2}
		iowait (dev, operation, retry);
    107c:	49445f44 	stmdbmi	r4, {r2, r6, r8, r9, sl, fp, ip, lr}^
    1080:	4c465f53 	mcrrmi	15, 5, r5, r6, cr3
    1084:	00534741 	subseq	r4, r3, r1, asr #14
			release;
    1088:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	if (ret == -2) {
    108c:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
		if (retry != WNONE) {
    1090:	414d5f45 	cmpmi	sp, r5, asr #30
    1094:	00305f43 	eorseq	r5, r0, r3, asr #30
			iowait (dev, operation, retry);
    1098:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    109c:	4545495f 	strbmi	r4, [r5, #-2399]	; 0xfffff6a1
			(ioreq [dev]) (NONE, buf, len);
    10a0:	414d5f45 	cmpmi	sp, r5, asr #30
    10a4:	00315f43 	eorseq	r5, r1, r3, asr #30
    10a8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		(ioreq [dev]) (NONE, buf, len);
    10ac:	444f4d5f 	strbmi	r4, [pc], #-3423	; 10b4 <io+0x78>
    10b0:	4f435f45 	svcmi	0x00435f45
    10b4:	315f464e 	cmpcc	pc, lr, asr #12
}
    10b8:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	if (retry != WNONE) {
    10bc:	43435f47 	movtmi	r5, #16199	; 0x3f47
		delay (-ret - 2, retry);
    10c0:	545f4746 	ldrbpl	r4, [pc], #-1862	; 10c8 <io+0x8c>
    10c4:	445f5041 	ldrbmi	r5, [pc], #-65	; 10cc <io+0x90>
    10c8:	305f5041 	subscc	r5, pc, r1, asr #32
    10cc:	46434300 	strbmi	r4, [r3], -r0, lsl #6
		release;
    10d0:	43435f47 	movtmi	r5, #16199	; 0x3f47
    10d4:	545f4746 	ldrbpl	r4, [pc], #-1862	; 10dc <__pi_malloc_init+0x4>
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	445f5041 	ldrbmi	r5, [pc], #-65	; 10e0 <__pi_malloc_init+0x8>
    10dc:	315f5041 	cmpcc	pc, r1, asr #32
    10e0:	66636300 	strbtvs	r6, [r3], -r0, lsl #6
    10e4:	00745f67 	rsbseq	r5, r4, r7, ror #30
    10e8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
		syserror (ERESOURCE, "mal1");
    10ec:	4643435f 			; <UNDEFINED> instruction: 0x4643435f
    10f0:	52505f47 	subspl	r5, r0, #284	; 0x11c
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f4:	315f544f 	cmpcc	pc, pc, asr #8
    10f8:	395f3732 	ldmdbcc	pc, {r1, r4, r5, r8, r9, sl, ip, sp}^	; <UNPREDICTABLE>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fc:	43430036 	movtmi	r0, #12342	; 0x3036
	m_size (mpools [0]) = mlen - m_hdrlen;
    1100:	455f4746 	ldrbmi	r4, [pc, #-1862]	; 9c2 <system_init+0xea>
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1104:	45534152 	ldrbmi	r4, [r3, #-338]	; 0xfffffeae
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1108:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    110c:	43430046 	movtmi	r0, #12358	; 0x3046
}
    1110:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1114:	5f474643 	svcpl	0x00474643
    1118:	544f5250 	strbpl	r5, [pc], #-592	; 1120 <__pi_malloc_init+0x48>
    111c:	5f31335f 	svcpl	0x0031335f
    1120:	43430030 	movtmi	r0, #12336	; 0x3030
    1124:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
void __pi_free (aword *ch) {
    1128:	4547414d 	strbmi	r4, [r7, #-333]	; 0xfffffeb3
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    112c:	4c41565f 	mcrrmi	6, 5, r5, r1, cr15
    1130:	435f4449 	cmpmi	pc, #1224736768	; 0x49000000
		syserror (EMALLOC, "malg");
    1134:	00464e4f 	subeq	r4, r6, pc, asr #28
    1138:	47464343 	strbmi	r4, [r6, -r3, asr #6]
	mcfree [MA_NP] += m_size (ch);
    113c:	4552465f 	ldrbmi	r4, [r2, #-1631]	; 0xfffff9a1
		m_size (ch) ^= MALLOC_UMASK;
    1140:	464f5f51 			; <UNDEFINED> instruction: 0x464f5f51
    1144:	54455346 	strbpl	r5, [r5], #-838	; 0xfffffcba
	mcfree [MA_NP] += m_size (ch);
    1148:	46434300 	strbmi	r4, [r3], -r0, lsl #6
	QFREE;
    114c:	43435f47 	movtmi	r5, #16199	; 0x3f47
	if (mevent [MA_NP] . nwait) {
    1150:	505f4746 	subspl	r4, pc, r6, asr #14
    1154:	5f544f52 	svcpl	0x00544f52
		trigger ((aword)(&(mevent [MA_NP])));
    1158:	335f3336 	cmpcc	pc, #-671088640	; 0xd8000000
		mevent [MA_NP] . nwait --;
    115c:	43430032 	movtmi	r0, #12338	; 0x3032
}
    1160:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
    1164:	5f454545 	svcpl	0x00454545
    1168:	5f454c42 	svcpl	0x00454c42
    116c:	43430030 	movtmi	r0, #12336	; 0x3030
void kill (aword pid) {
    1170:	495f4746 	ldmdbmi	pc, {r1, r2, r6, r8, r9, sl, lr}^	; <UNPREDICTABLE>
		pid = (aword) __pi_curr;
    1174:	5f454545 	svcpl	0x00454545
	j = NULL;
    1178:	5f454c42 	svcpl	0x00454c42
	for_all_tasks (i) {
    117c:	43430031 	movtmi	r0, #12337	; 0x3031
	syserror (EREQPAR, "kpi");
    1180:	435f4746 	cmpmi	pc, #18350080	; 0x1180000
    1184:	5f474643 	svcpl	0x00474643
		if ((aword)i == pid) {
    1188:	544f5250 	strbpl	r5, [pc], #-592	; 1190 <kill+0x20>
    118c:	5f35395f 	svcpl	0x0035395f
				__PCB = i->Next;
    1190:	43003436 	movwmi	r3, #1078	; 0x436
			killev (i);
    1194:	5f474643 	svcpl	0x00474643
			ufree (i);
    1198:	5f545845 	svcpl	0x00545845
			if (i == __pi_curr)
    119c:	435f464c 	cmpmi	pc, #76, 12	; 0x4c00000
    11a0:	43004b4c 	movwmi	r4, #2892	; 0xb4c
				release;
    11a4:	5f474643 	svcpl	0x00474643
				j->Next = i->Next;
    11a8:	47464343 	strbmi	r4, [r6, -r3, asr #6]
    11ac:	5f49545f 	svcpl	0x0049545f
    11b0:	4954504f 	ldmdbmi	r4, {r0, r1, r2, r3, r6, ip, lr}^
}
    11b4:	00534e4f 	subseq	r4, r3, pc, asr #28
    11b8:	4f495047 	svcmi	0x00495047
    11bc:	6165725f 	cmnvs	r5, pc, asr r2
	if (size < 8)
    11c0:	6f694464 	svcvs	0x00694464
		_size = 2;
    11c4:	6e756a00 	vaddvs.f32	s13, s10, s0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c8:	6970006b 	ldmdbvs	r0!, {r0, r1, r3, r5, r6}^
		_size = (((aword)size) + 3) >> 2;
    11cc:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d0:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		_size = (((aword)size) + 3) >> 2;
    11d4:	6165725f 	cmnvs	r5, pc, asr r2
		if (mevent [MA_NP] . nfail != 255)
    11d8:	69700064 	ldmdbvs	r0!, {r2, r5, r6}^
    11dc:	65735f6e 	ldrbvs	r5, [r3, #-3950]!	; 0xfffff092
			mevent [MA_NP] . nfail ++;
    11e0:	726f736e 	rsbvc	r7, pc, #-1207959551	; 0xb8000001
		mnfree [MA_NP] = 0;
    11e4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    11e8:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	2f656d6f 	svccs	0x00656d6f
    11f0:	7472616d 	ldrbtvc	r6, [r2], #-365	; 0xfffffe93
			syserror (EMALLOC, "malc");
    11f4:	442f6e69 	strtmi	r6, [pc], #-3689	; 11fc <__pi_malloc+0x3c>
    11f8:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
		if (m_size (chunk) >= _size)
    11fc:	4f2f706f 	svcmi	0x002f706f
    1200:	4e4f534c 	cdpmi	3, 4, cr5, cr15, cr12, {2}
		chunk = m_nextp (chunk)) {
    1204:	502f5445 	eorpl	r5, pc, r5, asr #8
		m_setnextp (cc, m_nextp (chunk));
    1208:	534f4349 	movtpl	r4, #62281	; 0xf349
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120c:	6369502f 	cmnvs	r9, #47	; 0x2f
    1210:	502f534f 	eorpl	r5, pc, pc, asr #6
			m_size (chunk) = _size;
    1214:	7362694c 	cmnvc	r2, #76, 18	; 0x130000
			cc = chunk + _size + m_hdrlen;
    1218:	6e65532f 	cdpvs	3, 6, cr5, cr5, cr15, {1}
    121c:	73726f73 	cmnvc	r2, #460	; 0x1cc
			m_size (cc) = waste - m_hdrlen;
    1220:	6e69702f 	cdpvs	0, 6, cr7, cr9, cr15, {1}
			QFREE;
    1224:	6e65735f 	mcrvs	3, 3, r7, cr5, cr15, {2}
		mevent [MA_NP] . nfail = 0;
    1228:	2e726f73 	mrccs	15, 3, r6, cr2, cr3, {3}
		mcfree [MA_NP] -= m_size (chunk);
    122c:	65540063 	ldrbvs	r0, [r4, #-99]	; 0xffffff9d
    1230:	62006d72 	andvs	r6, r0, #7296	; 0x1c80
    1234:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
    1238:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
		m_size (chunk) |= MALLOC_UMASK;
    123c:	756f6265 	strbvc	r6, [pc, #-613]!	; fdf <running+0xf>
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1240:	0065636e 	rsbeq	r6, r5, lr, ror #6
		m_size (chunk) |= MALLOC_UMASK;
    1244:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1190 <kill+0x20>
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	616d2f65 	cmnvs	sp, r5, ror #30
}
    124c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1250:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1254:	706f746b 	rsbvc	r7, pc, fp, ror #8
    1258:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    125c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1260:	4349502f 	movtmi	r5, #36911	; 0x902f
    1264:	502f534f 	eorpl	r5, pc, pc, asr #6
aword __pi_fork (fsmcode func, aword data) {
    1268:	534f6369 	movtpl	r6, #62313	; 0xf369
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1270:	492f7362 	stmdbmi	pc!, {r1, r5, r6, r8, r9, ip, sp, lr}	; <UNPREDICTABLE>
    1274:	75622f4f 	strbvc	r2, [r2, #-3919]!	; 0xfffff0b1
		if ((j = __PCB) == NULL)
    1278:	6e6f7474 	mcrvs	4, 3, r7, cr15, cr4, {3}
	i->Next = NULL;
    127c:	00632e73 	rsbeq	r2, r3, r3, ror lr
	i->data = data;
    1280:	74756270 	ldrbtvc	r6, [r5], #-624	; 0xfffffd90
		if ((j = __PCB) == NULL)
    1284:	006e6f74 	rsbeq	r6, lr, r4, ror pc
}
    1288:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
			for (; j->Next != NULL; j = j->Next);
    128c:	7475625f 	ldrbtvc	r6, [r5], #-607	; 0xfffffda1
    1290:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
	return (aword) i;
    1294:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
    1298:	736e6f74 	cmnvc	lr, #116, 30	; 0x1d0
	if (mevent [MA_NP] . nwait != 255)
    129c:	7463615f 	strbtvc	r6, [r3], #-351	; 0xfffffea1
    12a0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    12a4:	6e6f4345 	cdpvs	3, 6, cr4, cr15, cr5, {2}
		mevent [MA_NP] . nwait ++;
    12a8:	65650074 	strbvs	r0, [r5, #-116]!	; 0xffffff8c
	wait ((aword)(&(mevent [MA_NP])), state);
    12ac:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    12b0:	72655f74 	rsbvc	r5, r5, #116, 30	; 0x1d0
void diag (const char *mess, ...) {
    12b4:	00657361 	rsbeq	r7, r5, r1, ror #6
    12b8:	6f747075 	svcvs	0x00747075
    12bc:	646d6300 	strbtvs	r6, [sp], #-768	; 0xfffffd00
	diag_disable_int (a, is);
    12c0:	6500305f 	strvs	r3, [r0, #-95]	; 0xffffffa1
    12c4:	6c635f65 	stclvs	15, cr5, [r3], #-404	; 0xfffffe6c
    12c8:	0065736f 	rsbeq	r7, r5, pc, ror #6
				d = (bc == 16) ? 10000 : 1000000000;
    12cc:	655f6565 	ldrbvs	r6, [pc, #-1381]	; d6f <killev+0x27>
	diag_disable_int (a, is);
    12d0:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0xfffffe8e
	while (*mess != '\0') {
    12d4:	5f656500 	svcpl	0x00656500
	dgout ('\r');
    12d8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
	dgout ('\n');
    12dc:	6f640065 	svcvs	0x00640065
    12e0:	006e6570 	rsbeq	r6, lr, r0, ror r5
    12e4:	6f5f6565 	svcvs	0x005f6565
	diag_wait (a);
    12e8:	006e6570 	rsbeq	r6, lr, r0, ror r5
	diag_enable_int (a, is);
    12ec:	6e6f4357 	mcrvs	3, 3, r4, cr15, cr7, {2}
    12f0:	6d630074 	stclvs	0, cr0, [r3, #-464]!	; 0xfffffe30
}
    12f4:	00335f64 	eorseq	r5, r3, r4, ror #30
    12f8:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    12fc:	5f656500 	svcpl	0x00656500
		if (*mess == '%') {
    1300:	696e6170 	stmdbvs	lr!, {r4, r5, r6, r8, sp, lr}^
    1304:	65650063 	strbvs	r0, [r5, #-99]!	; 0xffffff9d
			if (*mess == 'l') {
    1308:	6e79735f 	mrcvs	3, 3, r7, cr9, cr15, {2}
    130c:	72660063 	rsbvc	r0, r6, #99	; 0x63
				mess++;
    1310:	65006d6f 	strvs	r6, [r0, #-3439]	; 0xfffff291
				val = va_arg (ap, lword);
    1314:	65725f65 	ldrbvs	r5, [r2, #-3941]!	; 0xfffff09b
				bc = 32;
    1318:	72006461 	andvc	r6, r0, #1627389952	; 0x61000000
				bc = 16;
    131c:	00727364 	rsbseq	r7, r2, r4, ror #6
			switch (*mess) {
    1320:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 126c <__pi_fork+0x4>
    1324:	616d2f65 	cmnvs	sp, r5, ror #30
    1328:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
				dgout ('%');
    132c:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    1330:	706f746b 	rsbvc	r7, pc, fp, ror #8
				dgout (*mess);
    1334:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1338:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
			switch (*mess) {
    133c:	4349502f 	movtmi	r5, #36911	; 0x902f
					v = __pi_hex_enc_table [
    1340:	502f534f 	eorpl	r5, pc, pc, asr #6
					i += 4;
    1344:	534f6369 	movtpl	r6, #62313	; 0xf369
					(val >> (bc - i)) & 0xf];
    1348:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    134c:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
					dgout (v);
    1350:	61726f74 	cmnvs	r2, r4, ror pc
    1354:	732f6567 			; <UNDEFINED> instruction: 0x732f6567
				while (i < bc) {
    1358:	61726f74 	cmnvs	r2, r4, ror pc
			mess++;
    135c:	6d5f6567 	cfldr64vs	mvdx6, [pc, #-412]	; 11c8 <__pi_malloc+0x8>
					d /= 10;
    1360:	72353278 	eorsvc	r3, r5, #120, 4	; 0x80000007
				if ((val >> (bc - 1)) & 1) {
    1364:	35333038 	ldrcc	r3, [r3, #-56]!	; 0xffffffc8
    1368:	6300632e 	movwvs	r6, #814	; 0x32e
					dgout ('-');
    136c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
    1370:	73640065 	cmnvc	r4, #101	; 0x65
						val |= 0xffff0000;
    1374:	00746174 	rsbseq	r6, r4, r4, ror r1
    1378:	65706f63 	ldrbvs	r6, [r0, #-3939]!	; 0xfffff09d
    137c:	7063006e 	rsbvc	r0, r3, lr, rrx
				d = (bc == 16) ? 10000 : 1000000000;
    1380:	65007274 	strvs	r7, [r0, #-628]	; 0xfffffd8c
    1384:	69735f65 	ldmdbvs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    1388:	7200657a 	andvc	r6, r0, #511705088	; 0x1e800000
					v = (word) (val / d);
    138c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
					if (v || d == 1) break;
    1390:	6f444500 	svcvs	0x00444500
    1394:	7000656e 	andvc	r6, r0, lr, ror #10
					d /= 10;
    1398:	6e776f64 	cdpvs	15, 7, cr6, cr7, cr4, {3}
				d = (bc == 16) ? 10000 : 1000000000;
    139c:	61777700 	cmnvs	r7, r0, lsl #14
					dgout (v + '0');
    13a0:	67007469 	strvs	r7, [r0, -r9, ror #8]
    13a4:	625f7465 	subsvs	r7, pc, #1694498816	; 0x65000000
    13a8:	00657479 	rsbeq	r7, r5, r9, ror r4
					d /= 10;
    13ac:	5f747570 	svcpl	0x00747570
					val = val - (v * d);
    13b0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
					if (d == 0) break;
    13b4:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
					v = (word) (val / d);
    13b8:	696c706e 	stmdbvs	ip!, {r1, r2, r3, r5, r6, ip, sp, lr}^
    13bc:	2f00656e 	svccs	0x0000656e
				if (bc == 16)
    13c0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
				d = (bc == 16) ? 10000 : 1000000000;
    13c4:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
					val &= 0xffff;
    13c8:	2f6e6974 	svccs	0x006e6974
					dgout (*s);
    13cc:	6b736544 	blvs	1cda8e4 <__ccfg+0x1cba93c>
					s++;
    13d0:	2f706f74 	svccs	0x00706f74
				while (*s != '\0') {
    13d4:	4f534c4f 	svcmi	0x00534c4f
    13d8:	2f54454e 	svccs	0x0054454e
			dgout (*mess++);
    13dc:	4f434950 	svcmi	0x00434950
    13e0:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    13e4:	2f534f63 	svccs	0x00534f63
    13e8:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    13ec:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
}
    13f0:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    while(1)
    13f4:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
{
    13f8:	2e6e695f 			; <UNDEFINED> instruction: 0x2e6e695f
    SetupTrimDevice();
    13fc:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
    pui32Src = &_etext;
    1400:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1404:	63727000 	cmnvs	r2, #0
    __asm("    ldr     r0, =_bss\n"
    1408:	65730073 	ldrbvs	r0, [r3, #-115]!	; 0xffffff8d
    140c:	756f5f72 	strbvc	r5, [pc, #-3954]!	; 4a2 <AONRTCIntHandler+0xae>
    1410:	2f006674 	svccs	0x00006674
    1414:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1418:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
   main();
    141c:	2f6e6974 	svccs	0x006e6974
    FaultISR();
    1420:	6b736544 	blvs	1cda938 <__ccfg+0x1cba990>
        *pui32Dest++ = *pui32Src++;
    1424:	2f706f74 	svccs	0x00706f74
    1428:	4f534c4f 	svcmi	0x00534c4f
    142c:	2f54454e 	svccs	0x0054454e
    1430:	4f434950 	svcmi	0x00434950
    1434:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
    1438:	2f534f63 	svccs	0x00534f63
    143c:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
    1440:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
static byte get_byte () {
    1444:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1448:	7265732f 	rsbvc	r7, r5, #-1140850688	; 0xbc000000
    144c:	74756f5f 	ldrbtvc	r6, [r5], #-3935	; 0xfffff0a1
    return (( HWREG( GPIO_BASE + GPIO_O_DIN31_0 ) >> dioNumber ) & 1 );
    1450:	00632e66 	rsbeq	r2, r3, r6, ror #28
    1454:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13a0 <diag+0xec>
		if (ee_inp)
    1458:	616d2f65 	cmnvs	sp, r5, ror #30
			b |= 1;
    145c:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    1460:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
    1464:	706f746b 	rsbvc	r7, pc, fp, ror #8
	for (b = 0, i = 0; i < 8; i++) {
    1468:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
}
    146c:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1470:	4349502f 	movtmi	r5, #36911	; 0x902f
    1474:	502f534f 	eorpl	r5, pc, pc, asr #6
static void put_byte (byte b) {
    1478:	534f6369 	movtpl	r6, #62313	; 0xf369
    147c:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1480:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
    1484:	61697265 	cmnvs	r9, r5, ror #4
		if (b & 0x80)
    1488:	65732f6c 	ldrbvs	r2, [r3, #-3948]!	; 0xfffff094
    148c:	6e695f72 	mcrvs	15, 3, r5, cr9, cr2, {3}
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
    1490:	00632e66 	rsbeq	r2, r3, r6, ror #28
	for (i = 0; i < 8; i++) {
    1494:	5f726573 	svcpl	0x00726573
		b <<= 1;
    1498:	00666e69 	rsbeq	r6, r6, r9, ror #28
	for (i = 0; i < 8; i++) {
    149c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 13e8 <diag+0x134>
}
    14a0:	616d2f65 	cmnvs	sp, r5, ror #30
    14a4:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
    14a8:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
    14ac:	706f746b 	rsbvc	r7, pc, fp, ror #8
	put_byte (cmd);
    14b0:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    14b4:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
}
    14b8:	4349502f 	movtmi	r5, #36911	; 0x902f
    14bc:	502f534f 	eorpl	r5, pc, pc, asr #6
static void wwait (word st, word del) {
    14c0:	534f6369 	movtpl	r6, #62313	; 0xf369
    14c4:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    14c8:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	while (dopen && (rdsr () & 1)) {
    14cc:	61697265 	cmnvs	r9, r5, ror #4
    14d0:	5f5f2f6c 	svcpl	0x005f2f6c
    14d4:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
    14d8:	61697265 	cmnvs	r9, r5, ror #4
	put_byte (CMD_RDSR);
    14dc:	00632e6c 	rsbeq	r2, r3, ip, ror #28
	r = get_byte ();
    14e0:	6e617571 	mcrvs	5, 3, r7, cr1, cr1, {3}
    14e4:	5f5f0074 	svcpl	0x005f0074
	while (dopen && (rdsr () & 1)) {
    14e8:	7374756f 	cmnvc	r4, #465567744	; 0x1bc00000
}
    14ec:	61697265 	cmnvs	r9, r5, ror #4
		if (st == WNONE)
    14f0:	5f5f006c 	svcpl	0x005f006c
    14f4:	575f4d4f 	ldrbpl	r4, [pc, -pc, asr #26]
			mdelay (1);
    14f8:	45544952 	ldrbmi	r4, [r4, #-2386]	; 0xfffff6ae
    14fc:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
			delay (del, st);
    1500:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    1504:	006c6169 	rsbeq	r6, ip, r9, ror #2
			release;
    1508:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1454 <get_byte+0x10>
    150c:	616d2f65 	cmnvs	sp, r5, ror #30
    1510:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
static void ready () {
    1514:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
	if (dopen) {
    1518:	706f746b 	rsbvc	r7, pc, fp, ror #8
		wwait (WNONE, 1);
    151c:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
    1520:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    1524:	4349502f 	movtmi	r5, #36911	; 0x902f
	dstat = 0;
    1528:	502f534f 	eorpl	r5, pc, pc, asr #6
}
    152c:	534f6369 	movtpl	r6, #62313	; 0xf369
    1530:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
    1534:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	udelay (1);
    1538:	61697265 	cmnvs	r9, r5, ror #4
    153c:	5f5f2f6c 	svcpl	0x005f2f6c
	udelay (1);
    1540:	65736e69 	ldrbvs	r6, [r3, #-3689]!	; 0xfffff197
		dopen = DOPEN_TEMP;
    1544:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
    1548:	2f00632e 	svccs	0x0000632e
    154c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1550:	72616d2f 	rsbvc	r6, r1, #3008	; 0xbc0
static void cclose () {
    1554:	2f6e6974 	svccs	0x006e6974
	if (dopen == DOPEN_TEMP) {
    1558:	6b736544 	blvs	1cdaa70 <__ccfg+0x1cbaac8>
    155c:	2f706f74 	svccs	0x00706f74
		wwait (WNONE, 1);
    1560:	4f534c4f 	svcmi	0x00534c4f
    1564:	2f54454e 	svccs	0x0054454e
	cmd_0 (CMD_DP);
    1568:	4f434950 	svcmi	0x00434950
    156c:	69502f53 	ldmdbvs	r0, {r0, r1, r4, r6, r8, r9, sl, fp, sp}^
		dopen = 0;
    1570:	2f534f63 	svccs	0x00534f63
}
    1574:	62694c50 	rsbvs	r4, r9, #80, 24	; 0x5000
word ee_open () {
    1578:	65532f73 	ldrbvs	r2, [r3, #-3955]	; 0xfffff08d
	ready ();
    157c:	6c616972 			; <UNDEFINED> instruction: 0x6c616972
	dopen = DOPEN_PERM;
    1580:	6f66762f 	svcvs	0x0066762f
    1584:	632e6d72 			; <UNDEFINED> instruction: 0x632e6d72
}
    1588:	61674100 	cmnvs	r7, r0, lsl #2
	if (dopen) {
    158c:	6f006e69 	svcvs	0x00006e69
    1590:	00637475 	rsbeq	r7, r3, r5, ror r4
		dopen = DOPEN_TEMP;
    1594:	69705f5f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
		cclose ();
    1598:	7066765f 	rsbvc	r7, r6, pc, asr r6
}
    159c:	65737261 	ldrbvs	r7, [r3, #-609]!	; 0xfffffd9f
int ser_in (word st, char *buf, int len) {
    15a0:	6f667600 	svcvs	0x00667600
    15a4:	52006d72 	andpl	r6, r0, #7296	; 0x1c80
	if (len == 0)
    15a8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
	if (__inpline == NULL) {
    15ac:	775f645f 			; <UNDEFINED> instruction: 0x775f645f
		if ((prcs = running (__inserial)) == 0) {
    15b0:	0064726f 	rsbeq	r7, r4, pc, ror #4
    15b4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1500 <wwait+0x40>
			prcs = runthread (__inserial);
    15b8:	616d2f65 	cmnvs	sp, r5, ror #30
    15bc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
			if (prcs == 0) {
    15c0:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
				npwait (st);
    15c4:	706f746b 	rsbvc	r7, pc, fp, ror #8
		release;
    15c8:	534c4f2f 	movtpl	r4, #53039	; 0xcf2f
		join (prcs, st);
    15cc:	54454e4f 	strbpl	r4, [r5], #-3663	; 0xfffff1b1
    15d0:	4349502f 	movtmi	r5, #36911	; 0x902f
	if (*__inpline == NULL) // bin cmd
    15d4:	502f534f 	eorpl	r5, pc, pc, asr #6
		prcs = __inpline[1] + 3; // 0x00, len, 0x04
    15d8:	534f6369 	movtpl	r6, #62313	; 0xf369
	if (prcs >= len)
    15dc:	694c502f 	stmdbvs	ip, {r0, r1, r2, r3, r5, ip, lr}^
		prcs = len-1;
    15e0:	532f7362 			; <UNDEFINED> instruction: 0x532f7362
	memcpy (buf, __inpline, prcs);
    15e4:	61697265 	cmnvs	r9, r5, ror #4
    15e8:	73762f6c 	cmnvc	r6, #108, 30	; 0x1b0
    15ec:	2e6e6163 	powcsez	f6, f6, f3
	ufree (__inpline);
    15f0:	73760063 	cmnvc	r6, #99	; 0x63
	__inpline = NULL;
    15f4:	006e6163 	rsbeq	r6, lr, r3, ror #2
	if (*buf) // if it's NULL, it's a bin cmd
    15f8:	72746552 	rsbsvc	r6, r4, #343932928	; 0x14800000
		buf [prcs] = '\0';
    15fc:	5f645f79 	svcpl	0x00645f79
}
    1600:	726f776c 	rsbvc	r7, pc, #108, 14	; 0x1b00000
		prcs = strlen (__inpline);
    1604:	4f4e0064 	svcmi	0x004e0064
    1608:	5f4d4f52 	svcpl	0x004d4f52
		return 0;
    160c:	424e4f41 	submi	r4, lr, #260	; 0x104
    1610:	6f4d7461 	svcvs	0x004d7461
    1614:	6d65546e 	cfstrdvs	mvd5, [r5, #-440]!	; 0xfffffe48
int ser_outf (word st, const char *m, ...) {
    1618:	61726570 	cmnvs	r2, r0, ror r5
    161c:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
	if ((prcs = running (__outserial)) != 0) {
    1620:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0xfffffab9
    1624:	00436765 	subeq	r6, r3, r5, ror #14
		join (prcs, st);
    1628:	746c6f76 	strbtvc	r6, [ip], #-3958	; 0xfffff08a
    162c:	53656761 	cmnpl	r5, #25427968	; 0x1840000
		release;
    1630:	65706f6c 	ldrbvs	r6, [r0, #-3948]!	; 0xfffff094
	if ((buf = vform (NULL, m, ap)) == NULL) {
    1634:	695f5f00 	ldmdbvs	pc, {r8, r9, sl, fp, ip, lr}^	; <UNPREDICTABLE>
    1638:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    163c:	4700745f 	smlsdmi	r0, pc, r4, r7	; <UNPREDICTABLE>
		umwait (st);
    1640:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    1644:	392e3420 	stmdbcc	lr!, {r5, sl, ip, sp}
	if (runstrand (__outserial, buf) == 0) {
    1648:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
    164c:	30353130 	eorscc	r3, r5, r0, lsr r1
    1650:	20393235 	eorscs	r3, r9, r5, lsr r2
		ufree (buf);
    1654:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
		npwait (st);
    1658:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
}
    165c:	415b2029 	cmpmi	fp, r9, lsr #32
    1660:	652f4d52 	strvs	r4, [pc, #-3410]!	; 916 <system_init+0x3e>
    1664:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
    1668:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
int ser_inf (word st, const char *fmt, ...) {
    166c:	2d395f34 	ldccs	15, cr5, [r9, #-208]!	; 0xffffff30
    1670:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
	if (fmt == NULL)
    1674:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
	if (__inpline == NULL) {
    1678:	73697665 	cmnvc	r9, #105906176	; 0x6500000
		if ((prcs = running (__inserial)) == 0) {
    167c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
    1680:	39373232 	ldmdbcc	r7!, {r1, r4, r5, r9, ip, sp}
			prcs = runthread (__inserial);
    1684:	205d3737 	subscs	r3, sp, r7, lsr r7
    1688:	68746d2d 	ldmdavs	r4!, {r0, r2, r3, r5, r8, sl, fp, sp, lr}^
			if (prcs == 0) {
    168c:	20626d75 	rsbcs	r6, r2, r5, ror sp
				npwait (st);
    1690:	70636d2d 	rsbvc	r6, r3, sp, lsr #26
		release;
    1694:	6f633d75 	svcvs	0x00633d75
		join (prcs, st);
    1698:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
    169c:	20336d2d 	eorscs	r6, r3, sp, lsr #26
	va_start (ap, fmt);
    16a0:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
	prcs = vscan (__inpline, fmt, ap);
    16a4:	2d20734f 	stccs	3, cr7, [r0, #-316]!	; 0xfffffec4
    16a8:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
	ufree (__inpline);
    16ac:	20393963 	eorscs	r3, r9, r3, ror #18
	__inpline = NULL;
    16b0:	6f6e662d 	svcvs	0x006e662d
}
    16b4:	7274732d 	rsbsvc	r7, r4, #-1275068416	; 0xb4000000
    16b8:	2d746369 	ldclcs	3, cr6, [r4, #-420]!	; 0xfffffe5c
    16bc:	61696c61 	cmnvs	r9, r1, ror #24
		return 0;
    16c0:	676e6973 			; <UNDEFINED> instruction: 0x676e6973
    16c4:	66662d20 	strbtvs	r2, [r6], -r0, lsr #26
    16c8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
strand (__outserial, const char*)
    16cc:	2d6e6f69 	stclcs	15, cr6, [lr, #-420]!	; 0xfffffe5c
    16d0:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    16d4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    16d8:	64662d20 	strbtvs	r2, [r6], #-3360	; 0xfffff2e0
endstrand
    16dc:	2d617461 	cfstrdcs	mvd7, [r1, #-388]!	; 0xfffffe7c
    16e0:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
	ptr = data;
    16e4:	736e6f69 	cmnvc	lr, #420	; 0x1a4
    16e8:	61662d20 	cmnvs	r6, r0, lsr #26
	if (*ptr)
    16ec:	5f006d73 	svcpl	0x00006d73
		len = strlen (ptr);
    16f0:	746e695f 	strbtvc	r6, [lr], #-2399	; 0xfffff6a1
    16f4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
	quant = io (OM_WRITE, __cport, WRITE, (char*)ptr, len);
    16f8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    16fc:	2f2e2e2f 	svccs	0x002e2e2f
    1700:	642f2e2e 	strtvs	r2, [pc], #-3630	; 1708 <__outserial+0x3c>
    1704:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1708:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
	len -= quant;
    170c:	6e6f612f 	powvsep	f6, f7, #10.0
    1710:	7461625f 	strbtvc	r6, [r1], #-607	; 0xfffffda1
    1714:	2e6e6f6d 	cdpcs	15, 6, cr6, cr14, cr13, {3}
	if (len == 0) {
    1718:	65740063 	ldrbvs	r0, [r4, #-99]!	; 0xffffff9d
		ufree (data);
    171c:	6f43706d 	svcvs	0x0043706d
		finish;
    1720:	63657272 	cmnvs	r5, #536870919	; 0x20000007
    1724:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
		len = ptr [1] +3; // 3: 0x00, len, 0x04
    1728:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
    172c:	5464656e 	strbtpl	r6, [r4], #-1390	; 0xfffffa92
    1730:	00706d65 	rsbseq	r6, r0, r5, ror #26
    1734:	4a5c3a43 	bmi	1710048 <__ccfg+0x16f00a0>
    1738:	696b6e65 	stmdbvs	fp!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
strand (__inserial, address)
    173c:	6a5c736e 	bvs	171e4fc <__ccfg+0x16fe554>
    1740:	5c73626f 	lfmpl	f6, 2, [r3], #-444	; 0xfffffe44
    1744:	72475746 	subvc	r5, r7, #18350080	; 0x1180000
    1748:	2d70756f 	cfldr64cs	mvdx7, [r0, #-444]!	; 0xfffffe44
    174c:	76697244 	strbtvc	r7, [r9], -r4, asr #4
	if (__inpline != NULL)
    1750:	694c7265 	stmdbvs	ip, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1754:	6f775c62 	svcvs	0x00775c62
		finish;
    1758:	70736b72 	rsbsvc	r6, r3, r2, ror fp
	if ((ptr = (char*) (data = umalloc (MAX_LINE_LENGTH + 1))) == NULL) {
    175c:	5c656361 	stclpl	3, cr6, [r5], #-388	; 0xfffffe7c
    1760:	75646f6d 	strbvc	r6, [r4, #-3949]!	; 0xfffff093
    1764:	5c73656c 	cfldr64pl	mvdx6, [r3], #-432	; 0xfffffe50
    1768:	7074756f 	rsbsvc	r7, r4, pc, ror #10
		umwait (IM_INIT);
    176c:	635c7475 	cmpvs	ip, #1962934272	; 0x75000000
		release;
    1770:	78333163 	ldmdavc	r3!, {r0, r1, r5, r6, r8, ip, sp}
	savedata (data);
    1774:	68635f78 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
	len = MAX_LINE_LENGTH;
    1778:	5f325f61 	svcpl	0x00325f61
	io (IM_READ, __cport, READ, ptr, 1);
    177c:	78655f30 	stmdavc	r5!, {r4, r5, r8, r9, sl, fp, ip, lr}^
    1780:	72645c74 	rsbvc	r5, r4, #116, 24	; 0x7400
    1784:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1788:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
	if (ptr == (char*) data) { // new line
    178c:	5c6e6962 			; <UNDEFINED> instruction: 0x5c6e6962
    1790:	00636367 	rsbeq	r6, r3, r7, ror #6
		if (*ptr == '\0') { // bin cmd
    1794:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
			proceed (IM_BIN);
    1798:	61566e72 	cmpvs	r6, r2, ror lr
    179c:	0065756c 	rsbeq	r7, r5, ip, ror #10
		if (*ptr < 0x20)
    17a0:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
    17a4:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
			proceed (IM_READ);
    17a8:	7500745f 	strvc	r7, [r0, #-1119]	; 0xfffffba1
    17ac:	43323369 	teqmi	r2, #-1543503871	; 0xa4000001
	if (*ptr == '\n' || *ptr == '\r') {
    17b0:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    17b4:	6553746e 	ldrbvs	r7, [r3, #-1134]	; 0xfffffb92
    17b8:	4f4e0063 	svcmi	0x004e0063
		*ptr = '\0';
    17bc:	5f4d4f52 	svcpl	0x004d4f52
		__inpline = (char*)data;
    17c0:	524e4f41 	subpl	r4, lr, #260	; 0x104
		finish;
    17c4:	75434354 	strbvc	r4, [r3, #-852]	; 0xfffffcac
	if (len) {
    17c8:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
		ptr++;
    17cc:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 1604 <ser_in+0x64>
    17d0:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
		len--;
    17d4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
	proceed (IM_READ);
    17d8:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
	io (IM_BIN, __cport, READ, ptr, 1);
    17dc:	33697500 	cmncc	r9, #0, 10
    17e0:	63655332 	cmnvs	r5, #-939524096	; 0xc8000000
    17e4:	53646e6f 	cmnpl	r4, #1776	; 0x6f0
    17e8:	65526365 	ldrbvs	r6, [r2, #-869]	; 0xfffffc9b
    17ec:	5f006461 	svcpl	0x00006461
	len -= 2;
    17f0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
	if (len > *ptr + 1) // 1 for 0x04
    17f4:	5f343674 	svcpl	0x00343674
    17f8:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
		len = *ptr + 1;
    17fc:	75433233 	strbvc	r3, [r3, #-563]	; 0xfffffdcd
    1800:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
	ptr++;
    1804:	62755374 	rsbsvs	r5, r5, #116, 6	; 0xd0000001
	quant = io (IM_BINL, __cport, READ, ptr, len);
    1808:	00636553 	rsbeq	r6, r3, r3, asr r5
    180c:	4f524f4e 	svcmi	0x00524f4e
    1810:	4f415f4d 	svcmi	0x00415f4d
    1814:	4354524e 	cmpmi	r4, #-536870908	; 0xe0000004
    1818:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    181c:	36746e65 	ldrbtcc	r6, [r4], -r5, ror #28
	len -= quant;
    1820:	74694234 	strbtvc	r4, [r9], #-564	; 0xfffffdcc
		__inpline = (char*)data;
    1824:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
		finish;
    1828:	74654765 	strbtvc	r4, [r5], #-1893	; 0xfffff89b
	ptr += quant;
    182c:	72756300 	rsbsvc	r6, r5, #0, 6
    1830:	746e6572 	strbtvc	r6, [lr], #-1394	; 0xfffffa8e
endstrand
    1834:	00637452 	rsbeq	r7, r3, r2, asr r4
    1838:	41636573 	smcmi	13907	; 0x3653
	proceed (IM_BINL);
    183c:	7553646e 	ldrbvc	r6, [r3, #-1134]	; 0xfffffb92
endstrand
    1840:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1844:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    1848:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    184c:	2f2e2e2f 	svccs	0x002e2e2f
    1850:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    1854:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
		if (res && (d < n))
    1858:	6f612f62 	svcvs	0x00612f62
    185c:	74725f6e 	ldrbtvc	r5, [r2], #-3950	; 0xfffff092
    1860:	00632e63 	rsbeq	r2, r3, r3, ror #28
    1864:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
			res [d] = (char) c;
    1868:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
		d++;
    186c:	524f4e00 	subpl	r4, pc, #0, 28
    1870:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    1874:	61625550 	cmnvs	r2, r0, asr r5
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1878:	72706573 	rsbsvc	r6, r0, #482344960	; 0x1cc00000
    187c:	74654769 	strbtvc	r4, [r5], #-1897	; 0xfffff897
    1880:	524f4e00 	subpl	r4, pc, #0, 28
				enci (10000);
    1884:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
word __pi_vfparse (char *res, word n, const char *fm, va_list ap) {
    1888:	65645550 	strbvs	r5, [r4, #-1360]!	; 0xfffffab0
    188c:	0079616c 	rsbseq	r6, r9, ip, ror #2
	d = 0;
    1890:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
		c = *fm++;
    1894:	00746552 	rsbseq	r6, r4, r2, asr r5
		if (c == '\\') {
    1898:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
			if ((c = *fm++) == '\0') {
    189c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    18a0:	4f4e0074 	svcmi	0x004e0074
				outc ('\\');
    18a4:	5f4d4f52 	svcpl	0x004d4f52
			if ((c = *fm++) == '\0') {
    18a8:	63555043 	cmpvs	r5, #67	; 0x43
				outc ('\\');
    18ac:	64697370 	strbtvs	r7, [r9], #-880	; 0xfffffc90
    18b0:	524f4e00 	subpl	r4, pc, #0, 28
			outc (c);
    18b4:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    18b8:	70635550 	rsbvc	r5, r3, r0, asr r5
			if (c == '\0')
    18bc:	00656973 	rsbeq	r6, r5, r3, ror r9
    18c0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
			outc (c);
    18c4:	2f2e2e2f 	svccs	0x002e2e2f
				outc (val);
    18c8:	642f2e2e 	strtvs	r2, [pc], #-3630	; 18d0 <__pi_vfparse+0x58>
				val = (word) va_arg (ap, aword);
    18cc:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
		if (c == '%') {
    18d0:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    18d4:	7570632f 	ldrbvc	r6, [r0, #-815]!	; 0xfffffcd1
			c = *fm++;
    18d8:	4e00632e 	cdpmi	3, 0, cr6, cr0, cr14, {1}
			switch (c) {
    18dc:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 17a8 <__inserial+0x6c>
    18e0:	5550435f 	ldrbpl	r4, [r0, #-863]	; 0xfffffca1
    18e4:	6d697270 	sfmvs	f7, 2, [r9, #-448]!	; 0xfffffe40
    18e8:	006b7361 	rsbeq	r7, fp, r1, ror #6
    18ec:	7231706d 	eorsvc	r7, r1, #109	; 0x6d
    18f0:	54007665 	strpl	r7, [r0], #-1637	; 0xfffff99b
    18f4:	416d6972 	smcmi	54930	; 0xd692
    18f8:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
				outc ('%');
    18fc:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    1900:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
				outc (c);
    1904:	6b615774 	blvs	18576dc <__ccfg+0x1837734>
    1908:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    190c:	536d6f72 	cmnpl	sp, #456	; 0x1c8
				if (c == '\0')
    1910:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
				return d;
    1914:	006e776f 	rsbeq	r7, lr, pc, ror #14
}
    1918:	4f524f4e 	svcmi	0x00524f4e
    191c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
			switch (c) {
    1920:	41707574 	cmnmi	r0, r4, ror r5
    1924:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    1928:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
				for (i = 12; ; i -= 4) {
    192c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
				val = (word) va_arg (ap, aword);
    1930:	6b615774 	blvs	1857708 <__ccfg+0x1837760>
						[ (val >> i) & 0xf ]);
    1934:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    1938:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    193c:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
					outc (__pi_hex_enc_table
    1940:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    1944:	00316766 	eorseq	r6, r1, r6, ror #14
					if (i == 0)
    1948:	4f524f4e 	svcmi	0x00524f4e
    194c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
				for (i = 12; ; i -= 4) {
    1950:	41707574 	cmnmi	r0, r4, ror r5
				val = (word) va_arg (ap, aword);
    1954:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
				if (c == 'd' && (val & 0x8000) != 0) {
    1958:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
				val = (word) va_arg (ap, aword);
    195c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
				if (c == 'd' && (val & 0x8000) != 0) {
    1960:	6b615774 	blvs	1857738 <__ccfg+0x1837790>
    1964:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
					outc ('-');
    1968:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    196c:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
					val = (~val) + 1;
    1970:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    1974:	00326766 	eorseq	r6, r2, r6, ror #14
				for (i = 12; ; i -= 4) {
    1978:	4f524f4e 	svcmi	0x00524f4e
				enci (10000);
    197c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1980:	41707574 	cmnmi	r0, r4, ror r5
    1984:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    1988:	646c6f43 	strbtvs	r6, [ip], #-3907	; 0xfffff0bd
    198c:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1990:	6b615774 	blvs	1857768 <__ccfg+0x18377c0>
    1994:	46707565 	ldrbtmi	r7, [r0], -r5, ror #10
    1998:	536d6f72 	cmnpl	sp, #456	; 0x1c8
    199c:	44747568 	ldrbtmi	r7, [r4], #-1384	; 0xfffffa98
    19a0:	436e776f 	cmnmi	lr, #29097984	; 0x1bc0000
    19a4:	00336766 	eorseq	r6, r3, r6, ror #14
    19a8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    19ac:	2f2e2e2f 	svccs	0x002e2e2f
    19b0:	642f2e2e 	strtvs	r2, [pc], #-3630	; 19b8 <__pi_vfparse+0x140>
    19b4:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    19b8:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    19bc:	7465732f 	strbtvc	r7, [r5], #-815	; 0xfffffcd1
    19c0:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
				if (c == 'd' || c == 'u') {
    19c4:	524f4e00 	subpl	r4, pc, #0, 28
    19c8:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
					if (c == 'd' &&
    19cc:	70757465 	rsbsvc	r7, r5, r5, ror #8
					val = va_arg (ap, lword);
    19d0:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
					fm++;
    19d4:	65686361 	strbvs	r6, [r8, #-865]!	; 0xfffffc9f
					if (c == 'd' &&
    19d8:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    19dc:	6f636341 	svcvs	0x00636341
						outc ('-');
    19e0:	6e696472 	mcrvs	4, 3, r6, cr9, cr2, {3}
    19e4:	436f5467 	cmnmi	pc, #1728053248	; 0x67000000
						val = (~val) + 1;
    19e8:	53676663 	cmnpl	r7, #103809024	; 0x6300000
				enci (10000);
    19ec:	69747465 	ldmdbvs	r4!, {r0, r2, r5, r6, sl, ip, sp, lr}^
					enci (1000000000UL);
    19f0:	7500676e 	strvc	r6, [r0, #-1902]	; 0xfffff892
    19f4:	46323369 	ldrtmi	r3, [r2], -r9, ror #6
    19f8:	31676663 	cmncc	r7, r3, ror #12
    19fc:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    1a00:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    1a04:	4e4f4100 	dvfmie	f4, f7, f0
    1a08:	4a435557 	bmi	10d6f6c <__ccfg+0x10b6fc4>
    1a0c:	50676174 	rsbpl	r6, r7, r4, ror r1
    1a10:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    1a14:	0066664f 	rsbeq	r6, r6, pc, asr #12
    1a18:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1a1c:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
    1a20:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 1860 <outc.5724+0x8>
    1a24:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
    1a28:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    1a2c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 18f8 <__pi_vfparse+0x80>
    1a30:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
				} else if (c == 'x') {
    1a34:	72547075 	subsvc	r7, r4, #117	; 0x75
					for (i = 28; ; i -= 4) {
    1a38:	65446d69 	strbvs	r6, [r4, #-3433]	; 0xfffff297
					val = va_arg (ap, lword);
    1a3c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
							[ (val >> i) & 0xf ]);
    1a40:	72747600 	rsbsvc	r7, r4, #0, 12
    1a44:	755f6d69 	ldrbvc	r6, [pc, #-3433]	; ce3 <__pi_release+0x253>
						outc (__pi_hex_enc_table
    1a48:	00676964 	rsbeq	r6, r7, r4, ror #18
    1a4c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1a50:	536e6f41 	cmnpl	lr, #260	; 0x104
						if (i == 0)
    1a54:	65527379 	ldrbvs	r7, [r2, #-889]	; 0xfffffc87
    1a58:	63746573 	cmnvs	r4, #482344960	; 0x1cc00000
					for (i = 28; ; i -= 4) {
    1a5c:	63006c74 	movwvs	r6, #3188	; 0xc74
					outc ('%');
    1a60:	5f676663 	svcpl	0x00676663
    1a64:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    1a68:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
					outc ('l');
    1a6c:	00676552 	rsbeq	r6, r7, r2, asr r5
    1a70:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
				val = (word) va_arg (ap, aword);
    1a74:	65746641 	ldrbvs	r6, [r4, #-1601]!	; 0xfffff9bf
				outc (val);
    1a78:	6c6f4372 	stclvs	3, cr4, [pc], #-456	; 18b8 <__pi_vfparse+0x40>
    1a7c:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
				while (*st != '\0') {
    1a80:	61577465 	cmpvs	r7, r5, ror #8
    1a84:	7075656b 	rsbsvc	r6, r5, fp, ror #10
    1a88:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 1978 <__pi_vfparse+0x100>
    1a8c:	74756853 	ldrbtvc	r6, [r5], #-2131	; 0xfffff7ad
					outc (*st);
    1a90:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
    1a94:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
					st++;
    1a98:	72467075 	subvc	r7, r6, #117	; 0x75
		c = *fm++;
    1a9c:	6f506d6f 	svcvs	0x00506d6f
    1aa0:	44726577 	ldrbtmi	r6, [r2], #-1399	; 0xfffffa89
    1aa4:	006e776f 	rsbeq	r7, lr, pc, ror #14
char *vform (char *res, const char *fm, va_list aq) {
    1aa8:	4f524f4e 	svcmi	0x00524f4e
    1aac:	68545f4d 	ldmdavs	r4, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
	if (res != NULL) {
    1ab0:	6f437369 	svcvs	0x00437369
		__pi_vfparse (res, MAX_WORD, fm, aq);
    1ab4:	73496564 	movtvc	r6, #38244	; 0x9564
    1ab8:	6c697542 	cfstr64vs	mvdx7, [r9], #-264	; 0xfffffef8
    1abc:	726f4674 	rsbvc	r4, pc, #116, 12	; 0x7400000
}
    1ac0:	33314343 	teqcc	r1, #201326593	; 0xc000001
    1ac4:	77487878 	smlsldxvc	r7, r8, r8, r8
	fml = strlen (fm) + 17;
    1ac8:	32766552 	rsbscc	r6, r6, #343932928	; 0x14800000
    1acc:	646e4130 	strbtvs	r4, [lr], #-304	; 0xfffffed0
    1ad0:	6574614c 	ldrbvs	r6, [r4, #-332]!	; 0xfffffeb4
	if ((res = (char*) umalloc (fml)) == NULL)
    1ad4:	61485f72 	hvcvs	34290	; 0x85f2
    1ad8:	6649746c 	strbvs	r7, [r9], -ip, ror #8
    1adc:	6c6f6956 			; <UNDEFINED> instruction: 0x6c6f6956
	if ((d = __pi_vfparse (res, fml, fm, aq)) > fml) {
    1ae0:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    1ae4:	72747600 	rsbsvc	r7, r4, #0, 12
    1ae8:	625f6d69 	subsvs	r6, pc, #6720	; 0x1a40
    1aec:	6300646f 	movwvs	r6, #1135	; 0x46f
		ufree (res);
    1af0:	45676663 	strbmi	r6, [r7, #-1635]!	; 0xfffff99d
		goto Again;
    1af4:	664c7478 			; <UNDEFINED> instruction: 0x664c7478
	if (buf == NULL || fmt == NULL)
    1af8:	006b6c43 	rsbeq	r6, fp, r3, asr #24
int vscan (const char *buf, const char *fmt, va_list ap) {
    1afc:	4f524f4e 	svcmi	0x00524f4e
	if (buf == NULL || fmt == NULL)
    1b00:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    1b04:	6f6c4343 	svcvs	0x006c4343
    1b08:	6f536b63 	svcvs	0x00536b63
		    	    case 'u': scanu (lword); break;
    1b0c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
			while (isspace (*buf)) buf++;
    1b10:	00746553 	rsbseq	r6, r4, r3, asr r5
    1b14:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
	while (*fmt != '\0') {
    1b18:	48746e65 	ldmdami	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
		if (*fmt++ != '%')
    1b1c:	6f6c4366 	svcvs	0x006c4366
		switch (*fmt++) {
    1b20:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
    1b24:	56323369 	ldrtpl	r3, [r2], -r9, ror #6
    1b28:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1b2c:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1b30:	4e006c61 	cdpmi	12, 0, cr6, cr0, cr1, {3}
    1b34:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1a00 <__pi_vfparse+0x188>
    1b38:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
}
    1b3c:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
		switch (*fmt++) {
    1b40:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1b44:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1b48:	62616e41 	rsbvs	r6, r1, #1040	; 0x410
    1b4c:	73617079 	cmnvc	r1, #121	; 0x79
			while (isspace (*buf)) buf++;
    1b50:	6c615673 	stclvs	6, cr5, [r1], #-460	; 0xfffffe34
    1b54:	00316575 	eorseq	r6, r1, r5, ror r5
    1b58:	4f524f4e 	svcmi	0x00524f4e
    1b5c:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1b60:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1b64:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
			if (*buf == '\0')
    1b68:	6f466d69 	svcvs	0x00466d69
			if (*buf != ',') {
    1b6c:	6c624472 	cfstrdvs	mvd4, [r2], #-456	; 0xfffffe38
			sap = va_arg (ap, char*);
    1b70:	6f6f4c72 	svcvs	0x006f4c72
			nc++;
    1b74:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
			if (*buf != ',') {
    1b78:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
				while (!isspace (*buf) && *buf != ',' &&
    1b7c:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1b80:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    1b84:	00656761 	rsbeq	r6, r5, r1, ror #14
    1b88:	72727563 	rsbsvc	r7, r2, #415236096	; 0x18c00000
    1b8c:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    1b90:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1b94:	736d6976 	cmnvc	sp, #1933312	; 0x1d8000
			while (isspace (*buf)) buf++;
    1b98:	4d6c7443 	cfstrdmi	mvd7, [ip, #-268]!	; 0xfffffef4
    1b9c:	3065646f 	rsbcc	r6, r5, pc, ror #8
    1ba0:	69626900 	stmdbvs	r2!, {r8, fp, sp, lr}^
    1ba4:	664f7361 	strbvs	r7, [pc], -r1, ror #6
    1ba8:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
			if (*buf == ',') buf++;
    1bac:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1bb0:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
			*sap = '\0';
    1bb4:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
			break;
    1bb8:	6863736f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
		    case 'd': scani (word); break;
    1bbc:	6c744366 	ldclvs	3, cr4, [r4], #-408	; 0xfffffe68
    1bc0:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1bc4:	4f4e0065 	svcmi	0x004e0065
    1bc8:	5f4d4f52 	svcpl	0x004d4f52
    1bcc:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1bd0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1bd4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1bd8:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1bdc:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1be0:	73614666 	cmnvc	r1, #106954752	; 0x6600000
    1be4:	61745374 	cmnvs	r4, r4, ror r3
    1be8:	4e007472 	mcrmi	4, 0, r7, cr0, cr2, {3}
    1bec:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1ab8 <vform+0x10>
    1bf0:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1bf4:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1bf8:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1bfc:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1c00:	734f6352 	movtvc	r6, #62290	; 0xf352
    1c04:	49664c63 	stmdbmi	r6!, {r0, r1, r5, r6, sl, fp, lr}^
    1c08:	73616942 	cmnvc	r1, #1081344	; 0x108000
    1c0c:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1c10:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    1c14:	64416174 	strbvs	r6, [r1], #-372	; 0xfffffe8c
    1c18:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    1c1c:	524f4e00 	subpl	r4, pc, #0, 28
    1c20:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1c24:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1c28:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
		    case 'u': scanu (word); break;
    1c2c:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1c30:	6f58726f 	svcvs	0x0058726f
    1c34:	66486373 			; <UNDEFINED> instruction: 0x66486373
    1c38:	006c7443 	rsbeq	r7, ip, r3, asr #8
    1c3c:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    1c40:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1c44:	6152726f 	cmpvs	r2, pc, ror #4
    1c48:	78456364 	stmdavc	r5, {r2, r5, r6, r8, r9, sp, lr}^
    1c4c:	67664374 			; <UNDEFINED> instruction: 0x67664374
    1c50:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1c54:	65640065 	strbvs	r0, [r4, #-101]!	; 0xffffff9b
    1c58:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    1c5c:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1c60:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1c64:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1c68:	61466648 	cmpvs	r6, r8, asr #12
    1c6c:	74537473 	ldrbvc	r7, [r3], #-1139	; 0xfffffb8d
    1c70:	56747261 	ldrbtpl	r7, [r4], -r1, ror #4
		    case 'x': scanx (word); break;
    1c74:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1c78:	524f4e00 	subpl	r4, pc, #0, 28
    1c7c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1c80:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1c84:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1c88:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1c8c:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    1c90:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1ad8 <vform+0x30>
    1c94:	31685470 	smccc	34112	; 0x8540
    1c98:	524f4e00 	subpl	r4, pc, #0, 28
    1c9c:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1ca0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1ca4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1ca8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1cac:	6d41726f 	sfmvs	f7, 2, [r1, #-444]	; 0xfffffe44
    1cb0:	6d6f6370 	stclvs	3, cr6, [pc, #-448]!	; 1af8 <vscan>
    1cb4:	32685470 	rsbcc	r5, r8, #112, 8	; 0x70000000
    1cb8:	524f4e00 	subpl	r4, pc, #0, 28
    1cbc:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1cc0:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1cc4:	54746547 	ldrbtpl	r6, [r4], #-1351	; 0xfffffab9
    1cc8:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1ccc:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    1cd0:	56685363 	strbtpl	r5, [r8], -r3, ror #6
    1cd4:	45667562 	strbmi	r7, [r6, #-1378]!	; 0xfffffa9e
    1cd8:	4f4e006e 	svcmi	0x004e006e
    1cdc:	5f4d4f52 	svcpl	0x004d4f52
    1ce0:	33494444 	movtcc	r4, #37956	; 0x9444
    1ce4:	67655232 			; <UNDEFINED> instruction: 0x67655232
    1ce8:	74697257 	strbtvc	r7, [r9], #-599	; 0xfffffda9
			switch (*fmt++) {
    1cec:	63660065 	cmnvs	r6, #101	; 0x65
    1cf0:	44316766 	ldrtmi	r6, [r1], #-1894	; 0xfffff89a
    1cf4:	00617461 	rsbeq	r7, r1, r1, ror #8
    1cf8:	6d697274 	sfmvs	f7, 2, [r9, #-464]!	; 0xfffffe30
    1cfc:	52726f46 	rsbspl	r6, r2, #280	; 0x118
    1d00:	63734f63 	cmnvs	r3, #396	; 0x18c
		    	    case 'd': scani (lword); break;
    1d04:	4249664c 	submi	r6, r9, #76, 12	; 0x4c00000
    1d08:	54736169 	ldrbtpl	r6, [r3], #-361	; 0xfffffe97
    1d0c:	566d6972 			; <UNDEFINED> instruction: 0x566d6972
    1d10:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1d14:	72617400 	rsbvc	r7, r1, #0, 8
    1d18:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    1d1c:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1d20:	4f524f4e 	svcmi	0x00524f4e
    1d24:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1d28:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1d2c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1d30:	6f466d69 	svcvs	0x00466d69
    1d34:	64615272 	strbtvs	r5, [r1], #-626	; 0xfffffd8e
    1d38:	74784563 	ldrbtvc	r4, [r8], #-1379	; 0xfffffa9d
    1d3c:	00676643 	rsbeq	r6, r7, r3, asr #12
    1d40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d44:	2f2e2e2f 	svccs	0x002e2e2f
    1d48:	642f2e2e 	strtvs	r2, [pc], #-3630	; 1d50 <vscan+0x258>
    1d4c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1d50:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    1d54:	7465732f 	strbtvc	r7, [r5], #-815	; 0xfffffcd1
    1d58:	725f7075 	subsvc	r7, pc, #117	; 0x75
    1d5c:	632e6d6f 			; <UNDEFINED> instruction: 0x632e6d6f
		    	    case 'x': scanx (lword); break;
    1d60:	62757300 	rsbsvs	r7, r5, #0, 6
    1d64:	49636553 	stmdbmi	r3!, {r0, r1, r4, r6, r8, sl, sp, lr}^
    1d68:	4e00636e 	cdpmi	3, 0, cr6, cr0, cr14, {3}
    1d6c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1c38 <vscan+0x140>
    1d70:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1d74:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1d78:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1d7c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1d80:	734f6352 	movtvc	r6, #62290	; 0xf352
    1d84:	52664c63 	rsbpl	r4, r6, #25344	; 0x6300
    1d88:	656e7574 	strbvs	r7, [lr, #-1396]!	; 0xfffffa8c
    1d8c:	6e757443 	cdpvs	4, 7, cr7, cr5, cr3, {2}
    1d90:	69725465 	ldmdbvs	r2!, {r0, r2, r5, r6, sl, ip, lr}^
    1d94:	4f4e006d 	svcmi	0x004e006d
    1d98:	5f4d4f52 	svcpl	0x004d4f52
    1d9c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1da0:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
    1da4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1da8:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1dac:	4c63736f 	stclmi	3, cr7, [r3], #-444	; 0xfffffe44
    1db0:	67655266 	strbvs	r5, [r5, -r6, ror #4]!
    1db4:	74616c75 	strbtvc	r6, [r1], #-3189	; 0xfffff38b
    1db8:	6e41726f 	cdpvs	2, 4, cr7, cr1, cr15, {3}
    1dbc:	696d4364 	stmdbvs	sp!, {r2, r5, r6, r8, r9, lr}^
    1dc0:	72777272 	rsbsvc	r7, r7, #536870919	; 0x20000007
    1dc4:	69746152 	ldmdbvs	r4!, {r1, r4, r6, r8, sp, lr}^
    1dc8:	6975006f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r6}^
    1dcc:	72543233 	subsvc	r3, r4, #805306371	; 0x30000003
		    	    case 'd': scani (lword); break;
    1dd0:	53006d69 	movwpl	r6, #3433	; 0xd69
    1dd4:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1dd8:	6e676953 			; <UNDEFINED> instruction: 0x6e676953
    1ddc:	65747845 	ldrbvs	r7, [r4, #-2117]!	; 0xfffff7bb
    1de0:	6456646e 	ldrbvs	r6, [r6], #-1134	; 0xfffffb92
    1de4:	72547264 	subsvc	r7, r4, #100, 4	; 0x40000006
    1de8:	61566d69 	cmpvs	r6, r9, ror #26
		    	    case 'u': scanu (lword); break;
    1dec:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1df0:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
    1df4:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1df8:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    1dfc:	56685363 	strbtpl	r5, [r8], -r3, ror #6
    1e00:	45667562 	strbmi	r7, [r6, #-1378]!	; 0xfffffa9e
    1e04:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1e08:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1e0c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1cd8 <vscan+0x1e0>
    1e10:	7465535f 	strbtvc	r5, [r5], #-863	; 0xfffffca1
    1e14:	65477075 	strbvs	r7, [r7, #-117]	; 0xffffff8b
    1e18:	69725474 	ldmdbvs	r2!, {r2, r4, r5, r6, sl, ip, lr}^
    1e1c:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1e20:	53636441 	cmnpl	r3, #1090519040	; 0x41000000
    1e24:	646f4d68 	strbtvs	r4, [pc], #-3432	; 1e2c <vscan+0x334>
    1e28:	006e4565 	rsbeq	r4, lr, r5, ror #10
    1e2c:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    1e30:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
		    	    case 'x': scanx (lword); break;
    1e34:	64645664 	strbtvs	r5, [r4], #-1636	; 0xfffff99c
    1e38:	6c615672 	stclvs	6, cr5, [r1], #-456	; 0xfffffe38
			if ((c = *buf++) == '\0')
    1e3c:	646f6d00 	strbtvs	r6, [pc], #-3328	; 1e44 <vscan+0x34c>
    1e40:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
			sap = va_arg (ap, char*);
    1e44:	75003166 	strvc	r3, [r0, #-358]	; 0xfffffe9a
			nc++;
    1e48:	46323369 	ldrtmi	r3, [r2], -r9, ror #6
			break;
    1e4c:	31676663 	cmncc	r7, r3, ror #12
			while (isspace (*buf)) buf++;
    1e50:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1e54:	4f4e0065 	svcmi	0x004e0065
    1e58:	5f4d4f52 	svcpl	0x004d4f52
						*sap++ = *buf++;
    1e5c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1e60:	74654770 	strbtvc	r4, [r5], #-1904	; 0xfffff890
			while (isspace (*buf)) buf++;
    1e64:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1e68:	58726f46 	ldmdapl	r2!, {r1, r2, r6, r8, r9, sl, fp, sp, lr}^
    1e6c:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
		return 0;
    1e70:	69624966 	stmdbvs	r2!, {r1, r2, r5, r6, r8, fp, lr}^
    1e74:	68747361 	ldmdavs	r4!, {r0, r5, r6, r8, r9, ip, sp, lr}^
		    case 'x': scanx (word); break;
    1e78:	006d7265 	rsbeq	r7, sp, r5, ror #4
    1e7c:	54746567 	ldrbtpl	r6, [r4], #-1383	; 0xfffffa99
		    	    case 'x': scanx (lword); break;
    1e80:	466d6972 			; <UNDEFINED> instruction: 0x466d6972
    1e84:	6441726f 	strbvs	r7, [r1], #-623	; 0xfffffd91
    1e88:	4d685363 	stclmi	3, cr5, [r8, #-396]!	; 0xfffffe74
    1e8c:	4565646f 	strbmi	r6, [r5, #-1135]!	; 0xfffffb91
    1e90:	6c61566e 	stclvs	6, cr5, [r1], #-440	; 0xfffffe48
    1e94:	4e006575 	cfrshl64mi	mvdx0, mvdx5, r6
    1e98:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1d64 <vscan+0x26c>
    1e9c:	43534f5f 	cmpmi	r3, #380	; 0x17c
    1ea0:	636f6c43 	cmnvs	pc, #17152	; 0x4300
    1ea4:	756f536b 	strbvc	r5, [pc, #-875]!	; 1b41 <vscan+0x49>
    1ea8:	47656372 			; <UNDEFINED> instruction: 0x47656372
    1eac:	69007465 	stmdbvs	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
    1eb0:	64563233 	ldrbvs	r3, [r6], #-563	; 0xfffffdcd
    1eb4:	6c537264 	lfmvs	f7, 2, [r3], {100}	; 0x64
    1eb8:	54706565 	ldrbtpl	r6, [r0], #-1381	; 0xfffffa9b
    1ebc:	006d6972 	rsbeq	r6, sp, r2, ror r9
    1ec0:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    1ec4:	63734f31 	cmnvs	r3, #49, 30	; 0xc4
    1ec8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
    1ecc:	6c626400 	cfstrdvs	mvd6, [r2], #-0
    1ed0:	6f6f4c72 	svcvs	0x006f4c72
    1ed4:	6c694670 	stclvs	6, cr4, [r9], #-448	; 0xfffffe40
    1ed8:	52726574 	rsbspl	r6, r2, #116, 10	; 0x1d000000
    1edc:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
    1ee0:	746c6f56 	strbtvc	r6, [ip], #-3926	; 0xfffff0aa
    1ee4:	56656761 	strbtpl	r6, [r5], -r1, ror #14
    1ee8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    1eec:	69727400 	ldmdbvs	r2!, {sl, ip, sp, lr}^
    1ef0:	726f466d 	rsbvc	r4, pc, #114294784	; 0x6d00000
    1ef4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    1ef8:	6552664c 	ldrbvs	r6, [r2, #-1612]	; 0xfffff9b4
    1efc:	616c7567 	cmnvs	ip, r7, ror #10
    1f00:	41726f74 	cmnmi	r2, r4, ror pc
    1f04:	6d43646e 	cfstrdvs	mvd6, [r3, #-440]	; 0xfffffe48
    1f08:	77727269 	ldrbvc	r7, [r2, -r9, ror #4]!
    1f0c:	74615272 	strbtvc	r5, [r1], #-626	; 0xfffffd8e
    1f10:	61566f69 	cmpvs	r6, r9, ror #30
    1f14:	0065756c 	rsbeq	r7, r5, ip, ror #10
    1f18:	61696269 	cmnvs	r9, r9, ror #4
    1f1c:	696e4973 	stmdbvs	lr!, {r0, r1, r4, r5, r6, r8, fp, lr}^
    1f20:	4f4e0074 	svcmi	0x004e0074
    1f24:	5f4d4f52 	svcpl	0x004d4f52
    1f28:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
    1f2c:	74655370 	strbtvc	r5, [r5], #-880	; 0xfffffc90
    1f30:	526e6f41 	rsbpl	r6, lr, #260	; 0x104
    1f34:	75536374 	ldrbvc	r6, [r3, #-884]	; 0xfffffc8c
    1f38:	63655362 	cmnvs	r5, #-2013265919	; 0x88000001
    1f3c:	00636e49 	rsbeq	r6, r3, r9, asr #28
    1f40:	4f524f4e 	svcmi	0x00524f4e
    1f44:	65535f4d 	ldrbvs	r5, [r3, #-3917]	; 0xfffff0b3
    1f48:	47707574 			; <UNDEFINED> instruction: 0x47707574
    1f4c:	72547465 	subsvc	r7, r4, #1694498816	; 0x65000000
    1f50:	6f466d69 	svcvs	0x00466d69
    1f54:	706d4172 	rsbvc	r4, sp, r2, ror r1
    1f58:	706d6f63 	rsbvc	r6, sp, r3, ror #30
    1f5c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    1f60:	33697500 	cmncc	r9, #0, 10
    1f64:	736f5832 	cmnvc	pc, #3276800	; 0x320000
    1f68:	52664863 	rsbpl	r4, r6, #6488064	; 0x630000
    1f6c:	7500776f 	strvc	r7, [r0, #-1903]	; 0xfffff891
    1f70:	58323369 	ldmdapl	r2!, {r0, r3, r5, r6, r8, r9, ip, sp}
    1f74:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    1f78:	6c6f4366 	stclvs	3, cr4, [pc], #-408	; 1de8 <vscan+0x2f0>
    1f7c:	524f4e00 	subpl	r4, pc, #0, 28
    1f80:	535f4d4f 	cmppl	pc, #5056	; 0x13c0
    1f84:	70757465 	rsbsvc	r7, r5, r5, ror #8
    1f88:	56746553 			; <UNDEFINED> instruction: 0x56746553
    1f8c:	4c726464 	cfldrdmi	mvd6, [r2], #-400	; 0xfffffe70
    1f90:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
    1f94:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    1f98:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1f9c:	00776152 	rsbseq	r6, r7, r2, asr r1
    1fa0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    1fa4:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    1fa8:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    1fac:	33690065 	cmncc	r9, #101	; 0x65
    1fb0:	73754332 	cmnvc	r5, #-939524096	; 0xc8000000
    1fb4:	656d6f74 	strbvs	r6, [sp, #-3956]!	; 0xfffff08c
    1fb8:	6c654472 	cfstrdvs	mvd4, [r5], #-456	; 0xfffffe38
    1fbc:	64416174 	strbvs	r6, [r1], #-372	; 0xfffffe8c
    1fc0:	7473756a 	ldrbtvc	r7, [r3], #-1386	; 0xfffffa96
    1fc4:	32336900 	eorscc	r6, r3, #0, 18
    1fc8:	72646456 	rsbvc	r6, r4, #1442840576	; 0x56000000
    1fcc:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    1fd0:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    1fd4:	76006174 			; <UNDEFINED> instruction: 0x76006174
    1fd8:	54726464 	ldrbtpl	r6, [r2], #-1124	; 0xfffffb9c
    1fdc:	416d6972 	smcmi	54930	; 0xd692
    1fe0:	65767463 	ldrbvs	r7, [r6, #-1123]!	; 0xfffffb9d
    1fe4:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    1fe8:	4c465f52 	mcrrmi	15, 5, r5, r6, cr2
    1fec:	48435445 	stmdami	r3, {r0, r2, r6, sl, ip, lr}^
    1ff0:	32335245 	eorscc	r5, r3, #1342177284	; 0x50000004
    1ff4:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    1ff8:	5f525450 	svcpl	0x00525450
    1ffc:	44445453 	strbmi	r5, [r4], #-1107	; 0xfffffbad
    2000:	5f4c4156 	svcpl	0x004c4156
    2004:	75630054 	strbvc	r0, [r3, #-84]!	; 0xffffffac
    2008:	6d655472 	cfstrdvs	mvd5, [r5, #-456]!	; 0xfffffe38
    200c:	65530070 	ldrbvs	r0, [r3, #-112]	; 0xffffff90
    2010:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    2014:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2018:	66655242 	strbtvs	r5, [r5], -r2, asr #4
    201c:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2020:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2024:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2028:	5f344445 	svcpl	0x00344445
    202c:	69640054 	stmdbvs	r4!, {r2, r4, r6}^
    2030:	64566666 	ldrbvs	r6, [r6], #-1638	; 0xfffff99a
    2034:	63417264 	movtvs	r7, #4708	; 0x1264
    2038:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    203c:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    2040:	72700070 	rsbsvc	r0, r0, #112	; 0x70
    2044:	61526d63 	cmpvs	r2, r3, ror #26
    2048:	7465526d 	strbtvc	r5, [r5], #-621	; 0xfffffd93
    204c:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    2050:	6c006e6f 	stcvs	14, cr6, [r0], {111}	; 0x6f
    2054:	0064616f 	rsbeq	r6, r4, pc, ror #2
    2058:	4f524f4e 	svcmi	0x00524f4e
    205c:	79535f4d 	ldmdbvc	r3, {r0, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    2060:	72744373 	rsbsvc	r4, r4, #-872415231	; 0xcc000001
    2064:	6a64416c 	bvs	191261c <__ccfg+0x18f2674>
    2068:	52747375 	rsbspl	r7, r4, #-738197503	; 0xd4000001
    206c:	61686365 	cmnvs	r8, r5, ror #6
    2070:	41656772 	smcmi	22130	; 0x5672
    2074:	72657466 	rsbvc	r7, r5, #1711276032	; 0x66000000
    2078:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    207c:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    2080:	4f4e006e 	svcmi	0x004e006e
    2084:	5f4d4f52 	svcpl	0x004d4f52
    2088:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    208c:	536c7274 	cmnpl	ip, #116, 4	; 0x40000007
    2090:	65527465 	ldrbvs	r7, [r2, #-1125]	; 0xfffffb9b
    2094:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2098:	65426567 	strbvs	r6, [r2, #-1383]	; 0xfffffa99
    209c:	65726f66 	ldrbvs	r6, [r2, #-3942]!	; 0xfffff09a
    20a0:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xfffff0b0
    20a4:	776f4472 			; <UNDEFINED> instruction: 0x776f4472
    20a8:	2f2e006e 	svccs	0x002e006e
    20ac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20b0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20b4:	6972642f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, sp, lr}^
    20b8:	6c726576 	cfldr64vs	mvdx6, [r2], #-472	; 0xfffffe28
    20bc:	732f6269 			; <UNDEFINED> instruction: 0x732f6269
    20c0:	635f7379 	cmpvs	pc, #-469762047	; 0xe4000001
    20c4:	2e6c7274 	mcrcs	2, 3, r7, cr12, cr4, {3}
    20c8:	61530063 	cmpvs	r3, r3, rrx
    20cc:	61486566 	cmpvs	r8, r6, ror #10
    20d0:	6f566970 	svcvs	0x00566970
    20d4:	5f006469 	svcpl	0x00006469
    20d8:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
    20dc:	5f363174 	svcpl	0x00363174
    20e0:	50460074 	subpl	r0, r6, r4, ror r0
    20e4:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    20e8:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    20ec:	33444556 	movtcc	r4, #17750	; 0x4556
    20f0:	4e00545f 	cfmvsrmi	mvf0, r5
    20f4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 1fc0 <NOROM_SetupTrimDevice+0xc>
    20f8:	7379535f 	cmnvc	r9, #2080374785	; 0x7c000001
    20fc:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
    2100:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2104:	756f5374 	strbvc	r5, [pc, #-884]!	; 1d98 <vscan+0x2a0>
    2108:	47656372 			; <UNDEFINED> instruction: 0x47656372
    210c:	75007465 	strvc	r7, [r0, #-1125]	; 0xfffffb9b
    2110:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    2114:	69616d6f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
    2118:	7000736e 	andvc	r7, r0, lr, ror #6
    211c:	00457265 	subeq	r7, r5, r5, ror #4
    2120:	65546470 	ldrbvs	r6, [r4, #-1136]	; 0xfffffb90
    2124:	7500706d 	strvc	r7, [r0, #-109]	; 0xffffff93
    2128:	41323369 	teqmi	r2, r9, ror #6
    212c:	6c437875 	mcrrvs	8, 7, r7, r3, cr5
    2130:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    2134:	73655200 	cmnvc	r5, #0, 4
    2138:	65447465 	strbvs	r7, [r4, #-1125]	; 0xfffffb9b
    213c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
    2140:	43525000 	cmpmi	r2, #0
    2144:	6d6f444d 	cfstrdvs	mvd4, [pc, #-308]!	; 2018 <NOROM_SetupTrimDevice+0x64>
    2148:	456e6961 	strbmi	r6, [lr, #-2401]!	; 0xfffff69f
    214c:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    2150:	65700065 	ldrbvs	r0, [r0, #-101]!	; 0xffffff9b
    2154:	6e004d72 	mcrvs	13, 0, r4, cr0, cr2, {3}
    2158:	65527765 	ldrbvs	r7, [r2, #-1893]	; 0xfffff89b
    215c:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
    2160:	65506567 	ldrbvs	r6, [r0, #-1383]	; 0xfffffa99
    2164:	646f6972 	strbtvs	r6, [pc], #-2418	; 216c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0x98>
    2168:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    216c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2170:	44544553 	ldrbmi	r4, [r4], #-1363	; 0xfffffaad
    2174:	545f5645 	ldrbpl	r5, [pc], #-1605	; 217c <NOROM_SetupAfterColdResetWakeupFromShutDownCfg1+0xa8>
    2178:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    217c:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
    2180:	56524553 			; <UNDEFINED> instruction: 0x56524553
    2184:	5f324445 	svcpl	0x00324445
    2188:	65520054 	ldrbvs	r0, [r2, #-84]	; 0xffffffac
    218c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    2190:	6f4c6465 	svcvs	0x004c6465
    2194:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    2198:	00346e6f 	eorseq	r6, r4, pc, ror #28
    219c:	52545046 	subspl	r5, r4, #70	; 0x46
    21a0:	58414d5f 	stmdapl	r1, {r0, r1, r2, r3, r4, r6, r8, sl, fp, lr}^
    21a4:	5f4c4156 	svcpl	0x004c4156
    21a8:	64760054 	ldrbtvs	r0, [r6], #-84	; 0xffffffac
    21ac:	61437264 	cmpvs	r3, r4, ror #4
    21b0:	65530070 	ldrbvs	r0, [r3, #-112]	; 0xffffff90
    21b4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
    21b8:	43434441 	movtmi	r4, #13377	; 0x3441
    21bc:	42706d6f 	rsbsmi	r6, r0, #7104	; 0x1bc0
    21c0:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    21c4:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
    21c8:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    21cc:	00656d69 	rsbeq	r6, r5, r9, ror #26
    21d0:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    21d4:	00786449 	rsbseq	r6, r8, r9, asr #8
    21d8:	5678614d 	ldrbtpl	r6, [r8], -sp, asr #2
    21dc:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    21e0:	53647000 	cmnpl	r4, #0
    21e4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
    21e8:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; 12f0 <diag+0x3c>
    21ec:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
    21f0:	4d00745f 	cfstrsmi	mvf7, [r0, #-380]	; 0xfffffe84
    21f4:	566e6165 	strbtpl	r6, [lr], -r5, ror #2
    21f8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
    21fc:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
    2200:	74736567 	ldrbtvc	r6, [r3], #-1383	; 0xfffffa99
    2204:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    2208:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    220c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2210:	4600646f 	strmi	r6, [r0], -pc, ror #8
    2214:	5f525450 	svcpl	0x00525450
    2218:	45534552 	ldrbmi	r4, [r3, #-1362]	; 0xfffffaae
    221c:	44455652 	strbmi	r5, [r5], #-1618	; 0xfffff9ae
    2220:	00545f31 	subseq	r5, r4, r1, lsr pc
    2224:	746c6564 	strbtvc	r6, [ip], #-1380	; 0xfffffa9c
    2228:	64645661 	strbtvs	r5, [r4], #-1633	; 0xfffff99f
    222c:	656c5372 	strbvs	r5, [ip, #-882]!	; 0xfffffc8e
    2230:	72547065 	subsvc	r7, r4, #101	; 0x65
    2234:	43006d69 	movwmi	r6, #3433	; 0xd69
    2238:	32336372 	eorscc	r6, r3, #-939524095	; 0xc8000001
    223c:	53464800 	movtpl	r4, #26624	; 0x6800
    2240:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2244:	66615365 	strbtvs	r5, [r1], -r5, ror #6
    2248:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    224c:	00686374 	rsbeq	r6, r8, r4, ror r3
    2250:	74656c46 	strbtvc	r6, [r5], #-3142	; 0xfffff3ba
    2254:	72656863 	rsbvc	r6, r5, #6488064	; 0x630000
    2258:	47003233 	smladxmi	r0, r3, r2, r3
    225c:	68437465 	stmdavs	r3, {r0, r2, r5, r6, sl, ip, sp, lr}^
    2260:	64497069 	strbvs	r7, [r9], #-105	; 0xffffff97
    2264:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2268:	454d5f52 	strbmi	r5, [sp, #-3922]	; 0xfffff0ae
    226c:	41564e41 	cmpmi	r6, r1, asr #28
    2270:	00545f4c 	subseq	r5, r4, ip, asr #30
    2274:	54746162 	ldrbtpl	r6, [r4], #-354	; 0xfffffe9e
    2278:	73657268 	cmnvc	r5, #104, 4	; 0x80000006
    227c:	646c6f68 	strbtvs	r6, [ip], #-3944	; 0xfffff098
    2280:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2284:	44415f52 	strbmi	r5, [r1], #-3922	; 0xfffff0ae
    2288:	4d4f4343 	stclmi	3, cr4, [pc, #-268]	; 2184 <NOROM_SetupGetTrimForAnabypassValue1+0x4>
    228c:	4e494250 	mcrmi	2, 2, r4, cr9, cr0, {2}
    2290:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    2294:	5f525450 	svcpl	0x00525450
    2298:	504d4f43 	subpl	r4, sp, r3, asr #30
    229c:	46455242 	strbmi	r5, [r5], -r2, asr #4
    22a0:	7800545f 	stmdavc	r0, {r0, r1, r2, r3, r4, r6, sl, ip, lr}
    22a4:	5063736f 	rsbpl	r7, r3, pc, ror #6
    22a8:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    22ac:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
    22b0:	6c655300 	stclvs	3, cr5, [r5], #-0
    22b4:	43746365 	cmnmi	r4, #-1811939327	; 0x94000001
    22b8:	41706d6f 	cmnmi	r0, pc, ror #26
    22bc:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
    22c0:	50460074 	subpl	r0, r6, r4, ror r0
    22c4:	565f5254 			; <UNDEFINED> instruction: 0x565f5254
    22c8:	5f44494f 	svcpl	0x0044494f
    22cc:	44494f56 	strbmi	r4, [r9], #-3926	; 0xfffff0aa
    22d0:	4600545f 			; <UNDEFINED> instruction: 0x4600545f
    22d4:	5f525450 	svcpl	0x00525450
    22d8:	504d4f43 	subpl	r4, sp, r3, asr #30
    22dc:	5f4e4941 	svcpl	0x004e4941
    22e0:	52500054 	subspl	r0, r0, #84	; 0x54
    22e4:	6f4c4d43 	svcvs	0x004c4d43
    22e8:	65476461 	strbvs	r6, [r7, #-1121]	; 0xfffffb9f
    22ec:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
    22f0:	65746669 	ldrbvs	r6, [r4, #-1641]!	; 0xfffff997
    22f4:	6d655464 	cfstrdvs	mvd5, [r5, #-400]!	; 0xfffffe70
    22f8:	63740070 	cmnvs	r4, #112	; 0x70
    22fc:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    2300:	5f670061 	svcpl	0x00670061
    2304:	33697570 	cmncc	r9, #112, 10	; 0x1c000000
    2308:	646f4d32 	strbtvs	r4, [pc], #-3378	; 2310 <NOROM_SetupGetTrimForRadcExtCfg+0x20>
    230c:	43656c75 	cmnmi	r5, #29952	; 0x7500
    2310:	41480047 	cmpmi	r8, r7, asr #32
    2314:	415f4452 	cmpmi	pc, r2, asr r4	; <UNPREDICTABLE>
    2318:	545f4950 	ldrbpl	r4, [pc], #-2384	; 2320 <NOROM_SetupGetTrimForRcOscLfIBiasTrim+0x4>
    231c:	72756300 	rsbsvc	r6, r5, #0, 6
    2320:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    2324:	534f0065 	movtpl	r0, #61541	; 0xf065
    2328:	53664843 	cmnpl	r6, #4390912	; 0x430000
    232c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2330:	69775365 	ldmdbvs	r7!, {r0, r2, r5, r6, r8, r9, ip, lr}^
    2334:	00686374 	rsbeq	r6, r8, r4, ror r3
    2338:	52545046 	subspl	r5, r4, #70	; 0x46
    233c:	4352435f 	cmpmi	r2, #2080374785	; 0x7c000001
    2340:	545f3233 	ldrbpl	r3, [pc], #-563	; 2348 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x4>
    2344:	6e6f6100 	powvse	f6, f7, f0
    2348:	63737953 	cmnvs	r3, #1359872	; 0x14c000
    234c:	77506c74 			; <UNDEFINED> instruction: 0x77506c74
    2350:	6c746372 	ldclvs	3, cr6, [r4], #-456	; 0xfffffe38
    2354:	54647000 	strbtpl	r7, [r4], #-0
    2358:	00656d69 	rsbeq	r6, r5, r9, ror #26
    235c:	52545046 	subspl	r5, r4, #70	; 0x46
    2360:	4e494d5f 	mcrmi	13, 2, r4, cr9, cr15, {2}
    2364:	5f4c4156 	svcpl	0x004c4156
    2368:	4f4e0054 	svcmi	0x004e0054
    236c:	5f4d4f52 	svcpl	0x004d4f52
    2370:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    2374:	506c7274 	rsbpl	r7, ip, r4, ror r2
    2378:	7265776f 	rsbvc	r7, r5, #29097984	; 0x1bc0000
    237c:	72657645 	rsbvc	r7, r5, #72351744	; 0x4500000
    2380:	69687479 	stmdbvs	r8!, {r0, r3, r4, r5, r6, sl, ip, sp, lr}^
    2384:	4600676e 	strmi	r6, [r0], -lr, ror #14
    2388:	5f525450 	svcpl	0x00525450
    238c:	4f534648 	svcmi	0x00534648
    2390:	45435255 	strbmi	r5, [r3, #-597]	; 0xfffffdab
    2394:	45464153 	strbmi	r4, [r6, #-339]	; 0xfffffead
    2398:	54495753 	strbpl	r5, [r9], #-1875	; 0xfffff8ad
    239c:	545f4843 	ldrbpl	r4, [pc], #-2115	; 23a4 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0x60>
    23a0:	6e694d00 	cdpvs	13, 6, cr4, cr9, cr0, {0}
    23a4:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    23a8:	4c700065 	ldclmi	0, cr0, [r0], #-404	; 0xfffffe6c
    23ac:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
    23b0:	62615470 	rsbvs	r5, r1, #112, 8	; 0x70000000
    23b4:	5300656c 	movwpl	r6, #1388	; 0x56c
    23b8:	63656c65 	cmnvs	r5, #25856	; 0x6500
    23bc:	6d6f4374 	stclvs	3, cr4, [pc, #-464]!	; 21f4 <NOROM_SetupGetTrimForAmpcompTh2>
    23c0:	65524170 	ldrbvs	r4, [r2, #-368]	; 0xfffffe90
    23c4:	65520066 	ldrbvs	r0, [r2, #-102]	; 0xffffff9a
    23c8:	76726573 			; <UNDEFINED> instruction: 0x76726573
    23cc:	6f4c6465 	svcvs	0x004c6465
    23d0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    23d4:	00316e6f 	eorseq	r6, r1, pc, ror #28
    23d8:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    23dc:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    23e0:	61636f4c 	cmnvs	r3, ip, asr #30
    23e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    23e8:	65520032 	ldrbvs	r0, [r2, #-50]	; 0xffffffce
    23ec:	76726573 			; <UNDEFINED> instruction: 0x76726573
    23f0:	6f4c6465 	svcvs	0x004c6465
    23f4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
    23f8:	00336e6f 	eorseq	r6, r3, pc, ror #28
    23fc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    2400:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    2404:	61636f4c 	cmnvs	r3, ip, asr #30
    2408:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    240c:	74530035 	ldrbvc	r0, [r3], #-53	; 0xffffffcb
    2410:	44646e61 	strbtmi	r6, [r4], #-3681	; 0xfffff19f
    2414:	61697665 	cmnvs	r9, r5, ror #12
    2418:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    241c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0xfffffeaa
    2420:	64700065 	ldrbtvs	r0, [r0], #-101	; 0xffffff9b
    2424:	68636552 	stmdavs	r3!, {r1, r4, r6, r8, sl, sp, lr}^
    2428:	65677261 	strbvs	r7, [r7, #-609]!	; 0xfffffd9f
    242c:	69726550 	ldmdbvs	r2!, {r4, r6, r8, sl, sp, lr}^
    2430:	6100646f 	tstvs	r0, pc, ror #8
    2434:	61426e6f 	cmpvs	r2, pc, ror #28
    2438:	6e6f6d74 	mcrvs	13, 3, r6, cr15, cr4, {3}
    243c:	00746142 	rsbseq	r6, r4, r2, asr #2
    2440:	72646476 	rsbvc	r6, r4, #1979711488	; 0x76000000
    2444:	6d697254 	sfmvs	f7, 2, [r9, #-336]!	; 0xfffffeb0
    2448:	65656c53 	strbvs	r6, [r5, #-3155]!	; 0xfffff3ad
    244c:	6f500070 	svcvs	0x00500070
    2450:	51726577 	cmnpl	r2, r7, ror r5
    2454:	476c6175 			; <UNDEFINED> instruction: 0x476c6175
    2458:	61626f6c 	cmnvs	r2, ip, ror #30
    245c:	745f736c 	ldrbvc	r7, [pc], #-876	; 2464 <NOROM_SetupSetCacheModeAccordingToCcfgSetting+0x10>
    2460:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    2464:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
    2468:	534c4654 	movtpl	r4, #50772	; 0xc654
    246c:	5f455a49 	svcpl	0x00455a49
    2470:	4f4e0054 	svcmi	0x004e0054
    2474:	5f4d4f52 	svcpl	0x004d4f52
    2478:	43737953 	cmnmi	r3, #1359872	; 0x14c000
    247c:	5f6c7274 	svcpl	0x006c7274
    2480:	43444344 	movtmi	r4, #17220	; 0x4344
    2484:	6c6f565f 	stclvs	6, cr5, [pc], #-380	; 2310 <NOROM_SetupGetTrimForRadcExtCfg+0x20>
    2488:	65676174 	strbvs	r6, [r7, #-372]!	; 0xfffffe8c
    248c:	646e6f43 	strbtvs	r6, [lr], #-3907	; 0xfffff0bd
    2490:	6f697469 	svcvs	0x00697469
    2494:	436c616e 	cmnmi	ip, #-2147483621	; 0x8000001b
    2498:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
    249c:	46006c6f 	strmi	r6, [r0], -pc, ror #24
    24a0:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
    24a4:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    24a8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    24ac:	52545046 	subspl	r5, r4, #70	; 0x46
    24b0:	4d4f435f 	stclmi	3, cr4, [pc, #-380]	; 233c <NOROM_SetupGetTrimForXoscLfRegulatorAndCmirrwrRatio+0xc>
    24b4:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    24b8:	00545f46 	subseq	r5, r4, r6, asr #30
    24bc:	65776f70 	ldrbvs	r6, [r7, #-3952]!	; 0xfffff090
    24c0:	61755172 	cmnvs	r5, r2, ror r1
    24c4:	6f6c476c 	svcvs	0x006c476c
    24c8:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    24cc:	54504600 	ldrbpl	r4, [r0], #-1536	; 0xfffffa00
    24d0:	45475f52 	strbmi	r5, [r7, #-3922]	; 0xfffff0ae
    24d4:	49484354 	stmdbmi	r8, {r2, r4, r6, r8, r9, lr}^
    24d8:	5f444950 	svcpl	0x00444950
    24dc:	50460054 	subpl	r0, r6, r4, asr r0
    24e0:	525f5254 	subspl	r5, pc, #84, 4	; 0x40000005
    24e4:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    24e8:	35444556 	strbcc	r4, [r4, #-1366]	; 0xfffffaaa
    24ec:	5000545f 	andpl	r5, r0, pc, asr r4
    24f0:	4f544f52 	svcmi	0x00544f52
    24f4:	424c4f43 	submi	r4, ip, #268	; 0x10c
    24f8:	505f5449 	subspl	r5, pc, r9, asr #8
    24fc:	72706f72 	rsbsvc	r6, r0, #456	; 0x1c8
    2500:	61746569 	cmnvs	r4, r9, ror #10
    2504:	50007972 	andpl	r7, r0, r2, ror r9
    2508:	414b4341 	cmpmi	fp, r1, asr #6
    250c:	345f4547 	ldrbcc	r4, [pc], #-1351	; 2514 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0x34>
    2510:	43003478 	movwmi	r3, #1144	; 0x478
    2514:	5f504948 	svcpl	0x00504948
    2518:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    251c:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    2520:	00303436 	eorseq	r3, r0, r6, lsr r4
    2524:	65666177 	strbvs	r6, [r6, #-375]!	; 0xfffffe89
    2528:	00644972 	rsbeq	r4, r4, r2, ror r9
    252c:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    2530:	435f594c 	cmpmi	pc, #76, 18	; 0x130000
    2534:	78363243 	ldmdavc	r6!, {r0, r1, r6, r9, ip, sp}
    2538:	694c5f78 	stmdbvs	ip, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    253c:	4f4e007a 	svcmi	0x004e007a
    2540:	5f4d4f52 	svcpl	0x004d4f52
    2544:	70696843 	rsbvc	r6, r9, r3, asr #16
    2548:	6f666e49 	svcvs	0x00666e49
    254c:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2550:	70696843 	rsbvc	r6, r9, r3, asr #16
    2554:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    2558:	4e00796c 	vmlsmi.f16	s14, s0, s25	; <UNPREDICTABLE>
    255c:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2428 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg2+0xe4>
    2560:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2564:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    2568:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    256c:	63615074 	cmnvs	r1, #116	; 0x74
    2570:	6567616b 	strbvs	r6, [r7, #-363]!	; 0xfffffe95
    2574:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2578:	524f4e00 	subpl	r4, pc, #0, 28
    257c:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2580:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2584:	5f6f666e 	svcpl	0x006f666e
    2588:	48746547 	ldmdami	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
    258c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2590:	6f697369 	svcvs	0x00697369
    2594:	6170006e 	cmnvs	r0, lr, rrx
    2598:	79546b63 	ldmdbvc	r4, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    259c:	43006570 	movwmi	r6, #1392	; 0x570
    25a0:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    25a4:	5f657079 	svcpl	0x00657079
    25a8:	77480074 	smlsldxvc	r0, r8, r4, r0
    25ac:	69766552 	ldmdbvs	r6!, {r1, r4, r6, r8, sl, sp, lr}^
    25b0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
    25b4:	4300745f 	movwmi	r7, #1119	; 0x45f
    25b8:	5f504948 	svcpl	0x00504948
    25bc:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    25c0:	3143435f 	cmpcc	r3, pc, asr r3
    25c4:	00303133 	eorseq	r3, r0, r3, lsr r1
    25c8:	70696843 	rsbvc	r6, r9, r3, asr #16
    25cc:	696d6146 	stmdbvs	sp!, {r1, r2, r6, r8, sp, lr}^
    25d0:	745f796c 	ldrbvc	r7, [pc], #-2412	; 25d8 <NOROM_SetupAfterColdResetWakeupFromShutDownCfg3+0xf8>
    25d4:	52776800 	rsbspl	r6, r7, #0, 16
    25d8:	43007665 	movwmi	r7, #1637	; 0x665
    25dc:	5f504948 	svcpl	0x00504948
    25e0:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    25e4:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    25e8:	00303536 	eorseq	r3, r0, r6, lsr r5
    25ec:	4b434150 	blmi	10d2b34 <__ccfg+0x10b2b8c>
    25f0:	5f454741 	svcpl	0x00454741
    25f4:	50534357 	subspl	r4, r3, r7, asr r3
    25f8:	6e696d00 	cdpvs	13, 6, cr6, cr9, cr0, {0}
    25fc:	6552726f 	ldrbvs	r7, [r2, #-623]	; 0xfffffd91
    2600:	41460076 	hvcmi	24582	; 0x6006
    2604:	594c494d 	stmdbpl	ip, {r0, r2, r3, r6, r8, fp, lr}^
    2608:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    260c:	5f787836 	svcpl	0x00787836
    2610:	43003252 	movwmi	r3, #594	; 0x252
    2614:	5f504948 	svcpl	0x00504948
    2618:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    261c:	3143435f 	cmpcc	r3, pc, asr r3
    2620:	00303533 	eorseq	r3, r0, r3, lsr r5
    2624:	70696843 	rsbvc	r6, r9, r3, asr #16
    2628:	6f666e49 	svcvs	0x00666e49
    262c:	6968435f 	stmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, r9, lr}^
    2630:	6d614670 	stclvs	6, cr4, [r1, #-448]!	; 0xfffffe40
    2634:	49796c69 	ldmdbmi	r9!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    2638:	31434373 	hvccc	13363	; 0x3433
    263c:	00787833 	rsbseq	r7, r8, r3, lsr r8
    2640:	494d4146 	stmdbmi	sp, {r1, r2, r6, r8, lr}^
    2644:	555f594c 	ldrbpl	r5, [pc, #-2380]	; 1d00 <vscan+0x208>
    2648:	6f6e6b6e 	svcvs	0x006e6b6e
    264c:	43006e77 	movwmi	r6, #3703	; 0xe77
    2650:	5f504948 	svcpl	0x00504948
    2654:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    2658:	3243435f 	subcc	r4, r3, #2080374785	; 0x7c000001
    265c:	00303236 	eorseq	r3, r0, r6, lsr r2
    2660:	67666366 	strbvs	r6, [r6, -r6, ror #6]!
    2664:	76655231 			; <UNDEFINED> instruction: 0x76655231
    2668:	4d414600 	stclmi	6, cr4, [r1, #-0]
    266c:	5f594c49 	svcpl	0x00594c49
    2670:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    2674:	63007878 	movwvs	r7, #2168	; 0x878
    2678:	46706968 	ldrbtmi	r6, [r0], -r8, ror #18
    267c:	48006d61 	stmdami	r0, {r0, r5, r6, r8, sl, fp, sp, lr}
    2680:	56455257 			; <UNDEFINED> instruction: 0x56455257
    2684:	6b6e555f 	blvs	1b97c08 <__ccfg+0x1b77c60>
    2688:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    268c:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    2690:	72503167 	subsvc	r3, r0, #-1073741799	; 0xc0000019
    2694:	636f746f 	cmnvs	pc, #1862270976	; 0x6f000000
    2698:	50006c6f 	andpl	r6, r0, pc, ror #24
    269c:	6f746f72 	svcvs	0x00746f72
    26a0:	426c6f63 	rsbmi	r6, ip, #396	; 0x18c
    26a4:	65567469 	ldrbvs	r7, [r6, #-1129]	; 0xfffffb97
    26a8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
    26ac:	5000745f 	andpl	r7, r0, pc, asr r4
    26b0:	4f544f52 	svcmi	0x00544f52
    26b4:	424c4f43 	submi	r4, ip, #268	; 0x10c
    26b8:	495f5449 	ldmdbmi	pc, {r0, r3, r6, sl, ip, lr}^	; <UNPREDICTABLE>
    26bc:	5f454545 	svcpl	0x00454545
    26c0:	5f323038 	svcpl	0x00323038
    26c4:	345f3531 	ldrbcc	r3, [pc], #-1329	; 26cc <NOROM_SysCtrlSetRechargeBeforePowerDown+0x9c>
    26c8:	49484300 	stmdbmi	r8, {r8, r9, lr}^
    26cc:	59545f50 	ldmdbpl	r4, {r4, r6, r8, r9, sl, fp, ip, lr}^
    26d0:	555f4550 	ldrbpl	r4, [pc, #-1360]	; 2188 <NOROM_SetupGetTrimForAnabypassValue1+0x8>
    26d4:	6f6e6b6e 	svcvs	0x006e6b6e
    26d8:	48006e77 	stmdami	r0, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
    26dc:	56455257 			; <UNDEFINED> instruction: 0x56455257
    26e0:	325f325f 	subscc	r3, pc, #-268435451	; 0xf0000005
    26e4:	4d414600 	stclmi	6, cr4, [r1, #-0]
    26e8:	5f594c49 	svcpl	0x00594c49
    26ec:	33314343 	teqcc	r1, #201326593	; 0xc000001
    26f0:	50007878 	andpl	r7, r0, r8, ror r8
    26f4:	414b4341 	cmpmi	fp, r1, asr #6
    26f8:	375f4547 	ldrbcc	r4, [pc, -r7, asr #10]
    26fc:	50003778 	andpl	r3, r0, r8, ror r7
    2700:	4f544f52 	svcmi	0x00544f52
    2704:	5f4c4f43 	svcpl	0x004c4f43
    2708:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
    270c:	006e776f 	rsbeq	r7, lr, pc, ror #14
    2710:	45525748 	ldrbmi	r5, [r2, #-1864]	; 0xfffff8b8
    2714:	5f325f56 	svcpl	0x00325f56
    2718:	4f4e0030 	svcmi	0x004e0030
    271c:	5f4d4f52 	svcpl	0x004d4f52
    2720:	70696843 	rsbvc	r6, r9, r3, asr #16
    2724:	6f666e49 	svcvs	0x00666e49
    2728:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    272c:	70696843 	rsbvc	r6, r9, r3, asr #16
    2730:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
    2734:	52574800 	subspl	r4, r7, #0, 16
    2738:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    273c:	5000315f 	andpl	r3, r0, pc, asr r1
    2740:	4f544f52 	svcmi	0x00544f52
    2744:	424c4f43 	submi	r4, ip, #268	; 0x10c
    2748:	425f5449 	subsmi	r5, pc, #1224736768	; 0x49000000
    274c:	4600454c 	strmi	r4, [r0], -ip, asr #10
    2750:	4c494d41 	mcrrmi	13, 4, r4, r9, cr1
    2754:	43435f59 	movtmi	r5, #16217	; 0x3f59
    2758:	78783632 	ldmdavc	r8!, {r1, r4, r5, r9, sl, ip, sp}^
    275c:	6167415f 	cmnvs	r7, pc, asr r1
    2760:	52574800 	subspl	r4, r7, #0, 16
    2764:	325f5645 	subscc	r5, pc, #72351744	; 0x4500000
    2768:	6300335f 	movwvs	r3, #863	; 0x35f
    276c:	54706968 	ldrbtpl	r6, [r0], #-2408	; 0xfffff698
    2770:	00657079 	rsbeq	r7, r5, r9, ror r0
    2774:	50494843 	subpl	r4, r9, r3, asr #16
    2778:	5059545f 	subspl	r5, r9, pc, asr r4
    277c:	55435f45 	strbpl	r5, [r3, #-3909]	; 0xfffff0bb
    2780:	4d4f5453 	cfstrdmi	mvd5, [pc, #-332]	; 263c <NOROM_SysCtrlSetRechargeBeforePowerDown+0xc>
    2784:	4300305f 	movwmi	r3, #95	; 0x5f
    2788:	5f504948 	svcpl	0x00504948
    278c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    2790:	5355435f 	cmppl	r5, #2080374785	; 0x7c000001
    2794:	5f4d4f54 	svcpl	0x004d4f54
    2798:	48430031 	stmdami	r3, {r0, r4, r5}^
    279c:	545f5049 	ldrbpl	r5, [pc], #-73	; 27a4 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x174>
    27a0:	5f455059 	svcpl	0x00455059
    27a4:	36324343 	ldrtcc	r4, [r2], -r3, asr #6
    27a8:	48003033 	stmdami	r0, {r0, r1, r4, r5, ip, sp}
    27ac:	56455257 			; <UNDEFINED> instruction: 0x56455257
    27b0:	305f315f 	subscc	r3, pc, pc, asr r1	; <UNPREDICTABLE>
    27b4:	43415000 	movtmi	r5, #4096	; 0x1000
    27b8:	4547414b 	strbmi	r4, [r7, #-331]	; 0xfffffeb5
    27bc:	6b6e555f 	blvs	1b97d40 <__ccfg+0x1b77d98>
    27c0:	6e776f6e 	cdpvs	15, 7, cr6, cr7, cr14, {3}
    27c4:	2e2f2e00 	cdpcs	14, 2, cr2, cr15, cr0, {0}
    27c8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    27cc:	2f2e2e2f 	svccs	0x002e2e2f
    27d0:	76697264 	strbtvc	r7, [r9], -r4, ror #4
    27d4:	696c7265 	stmdbvs	ip!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    27d8:	68632f62 	stmdavs	r3!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    27dc:	6e697069 	cdpvs	0, 6, cr7, cr9, cr9, {3}
    27e0:	632e6f66 			; <UNDEFINED> instruction: 0x632e6f66
    27e4:	66636600 	strbtvs	r6, [r3], -r0, lsl #12
    27e8:	73553167 	cmpvc	r5, #-1073741799	; 0xc0000019
    27ec:	64497265 	strbvs	r7, [r9], #-613	; 0xfffffd9b
    27f0:	69684300 	stmdbvs	r8!, {r8, r9, lr}^
    27f4:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
    27f8:	65475f6f 	strbvs	r5, [r7, #-3951]	; 0xfffff091
    27fc:	76654474 			; <UNDEFINED> instruction: 0x76654474
    2800:	49656369 	stmdbmi	r5!, {r0, r3, r5, r6, r8, r9, sp, lr}^
    2804:	52774864 	rsbspl	r4, r7, #100, 16	; 0x640000
    2808:	6f437665 	svcvs	0x00437665
    280c:	43006564 	movwmi	r6, #1380	; 0x564
    2810:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    2814:	5f6f666e 	svcpl	0x006f666e
    2818:	4d746547 	cfldr64mi	mvdx6, [r4, #-284]!	; 0xfffffee4
    281c:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
    2820:	65527748 	ldrbvs	r7, [r2, #-1864]	; 0xfffff8b8
    2824:	696d0076 	stmdbvs	sp!, {r1, r2, r4, r5, r6}^
    2828:	48726f6e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    282c:	76655277 			; <UNDEFINED> instruction: 0x76655277
    2830:	524f4e00 	subpl	r4, pc, #0, 28
    2834:	435f4d4f 	cmpmi	pc, #5056	; 0x13c0
    2838:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    283c:	5f6f666e 	svcpl	0x006f666e
    2840:	53746547 	cmnpl	r4, #297795584	; 0x11c00000
    2844:	6f707075 	svcvs	0x00707075
    2848:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
    284c:	746f7250 	strbtvc	r7, [pc], #-592	; 2854 <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4>
    2850:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 269c <NOROM_SysCtrlSetRechargeBeforePowerDown+0x6c>
    2854:	0056425f 	subseq	r4, r6, pc, asr r2
    2858:	4b434150 	blmi	10d2da0 <__ccfg+0x10b2df8>
    285c:	5f454741 	svcpl	0x00454741
    2860:	45464157 	strbmi	r4, [r6, #-343]	; 0xfffffea9
    2864:	41500052 	cmpmi	r0, r2, asr r0
    2868:	47414b43 	strbmi	r4, [r1, -r3, asr #22]
    286c:	78355f45 	ldmdavc	r5!, {r0, r2, r6, r8, r9, sl, fp, ip, lr}
    2870:	61500035 	cmpvs	r0, r5, lsr r0
    2874:	67616b63 	strbvs	r6, [r1, -r3, ror #22]!
    2878:	70795465 	rsbsvc	r5, r9, r5, ror #8
    287c:	00745f65 	rsbseq	r5, r4, r5, ror #30
    2880:	70696843 	rsbvc	r6, r9, r3, asr #16
    2884:	6f666e49 	svcvs	0x00666e49
    2888:	5277485f 	rsbspl	r4, r7, #6225920	; 0x5f0000
    288c:	73697665 	cmnvc	r9, #105906176	; 0x6500000
    2890:	496e6f69 	stmdbmi	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    2894:	54475f73 	strbpl	r5, [r7], #-3955	; 0xfffff08d
    2898:	325f5145 	subscc	r5, pc, #1073741841	; 0x40000011
    289c:	4300305f 	movwmi	r3, #95	; 0x5f
    28a0:	49706968 	ldmdbmi	r0!, {r3, r5, r6, r8, fp, sp, lr}^
    28a4:	5f6f666e 	svcpl	0x006f666e
    28a8:	55746547 	ldrbpl	r6, [r4, #-1351]!	; 0xfffffab9
    28ac:	49726573 	ldmdbmi	r2!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
    28b0:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
    28b4:	65523233 	ldrbvs	r3, [r2, #-563]	; 0xfffffdcd
    28b8:	4f4e0067 	svcmi	0x004e0067
    28bc:	5f4d4f52 	svcpl	0x004d4f52
    28c0:	31494444 	cmpcc	r9, r4, asr #8
    28c4:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    28c8:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    28cc:	61655264 	cmnvs	r5, r4, ror #4
    28d0:	416e0064 	cmnmi	lr, r4, rrx
    28d4:	00726464 	rsbseq	r6, r2, r4, ror #8
    28d8:	4f524f4e 	svcmi	0x00524f4e
    28dc:	44445f4d 	strbmi	r5, [r4], #-3917	; 0xfffff0b3
    28e0:	42363149 	eorsmi	r3, r6, #1073741842	; 0x40000012
    28e4:	65527469 	ldrbvs	r7, [r2, #-1129]	; 0xfffffb97
    28e8:	6e006461 	cdpvs	4, 0, cr6, cr0, cr1, {3}
    28ec:	00746552 	rsbseq	r6, r4, r2, asr r5
    28f0:	41787541 	cmnmi	r8, r1, asr #10
    28f4:	64446964 	strbvs	r6, [r4], #-2404	; 0xfffff69c
    28f8:	66615369 	strbtvs	r5, [r1], -r9, ror #6
    28fc:	69725765 	ldmdbvs	r2!, {r0, r2, r5, r6, r8, r9, sl, ip, lr}^
    2900:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
    2904:	44363169 	ldrtmi	r3, [r6], #-361	; 0xfffffe97
    2908:	00617461 	rsbeq	r7, r1, r1, ror #8
    290c:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2910:	61447257 	cmpvs	r4, r7, asr r2
    2914:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
    2918:	44323369 	ldrtmi	r3, [r2], #-873	; 0xfffffc97
    291c:	00617461 	rsbeq	r7, r1, r1, ror #8
    2920:	32336975 	eorscc	r6, r3, #1916928	; 0x1d4000
    2924:	66696853 			; <UNDEFINED> instruction: 0x66696853
    2928:	4f4e0074 	svcmi	0x004e0074
    292c:	5f4d4f52 	svcpl	0x004d4f52
    2930:	31494444 	cmpcc	r9, r4, asr #8
    2934:	74694236 	strbtvc	r4, [r9], #-566	; 0xfffffdca
    2938:	6c656966 			; <UNDEFINED> instruction: 0x6c656966
    293c:	69725764 	ldmdbvs	r2!, {r2, r5, r6, r8, r9, sl, ip, lr}^
    2940:	6e006574 	cfrshl64vs	mvdx0, mvdx4, r6
    2944:	61746144 	cmnvs	r4, r4, asr #2
    2948:	33697500 	cmncc	r9, #0, 10
    294c:	6c615632 	stclvs	6, cr5, [r1], #-200	; 0xffffff38
    2950:	78754100 	ldmdavc	r5!, {r8, lr}^
    2954:	44696441 	strbtmi	r6, [r9], #-1089	; 0xfffffbbf
    2958:	61536964 	cmpvs	r3, r4, ror #18
    295c:	65526566 	ldrbvs	r6, [r2, #-1382]	; 0xfffffa9a
    2960:	4e006461 	cdpmi	4, 0, cr6, cr0, cr1, {3}
    2964:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2830 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x200>
    2968:	4944445f 	stmdbmi	r4, {r0, r1, r2, r3, r4, r6, sl, lr}^
    296c:	69423631 	stmdbvs	r2, {r0, r4, r5, r9, sl, ip, sp}^
    2970:	69725774 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, r9, sl, ip, lr}^
    2974:	2e006574 	cfrshl64cs	mvdx0, mvdx4, r6
    2978:	2f2e2e2f 	svccs	0x002e2e2f
    297c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2980:	72642f2e 	rsbvc	r2, r4, #46, 30	; 0xb8
    2984:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    2988:	2f62696c 	svccs	0x0062696c
    298c:	2e696464 	cdpcs	4, 6, cr6, cr9, cr4, {3}
    2990:	69750063 	ldmdbvs	r5!, {r0, r1, r5, r6}^
    2994:	614d3233 	cmpvs	sp, r3, lsr r2
    2998:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
    299c:	52323369 	eorspl	r3, r2, #-1543503871	; 0xa4000001
    29a0:	64416765 	strbvs	r6, [r1], #-1893	; 0xfffff89b
    29a4:	62007264 	andvs	r7, r0, #100, 4	; 0x40000006
    29a8:	45717249 	ldrbmi	r7, [r1, #-585]!	; 0xfffffdb7
    29ac:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    29b0:	6e006465 	cdpvs	4, 0, cr6, cr0, cr5, {3}
    29b4:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    29b8:	33697500 	cmncc	r9, #0, 10
    29bc:	63734f32 	cmnvs	r3, #50, 30	; 0xc8
    29c0:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    29c4:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    29c8:	5f6e4f63 	svcpl	0x006e4f63
    29cc:	4e005643 	cfmadd32mi	mvax2, mvfx5, mvfx0, mvfx3
    29d0:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 289c <NOROM_SysCtrlAdjustRechargeAfterPowerDown+0x4c>
    29d4:	43534f5f 	cmpmi	r3, #380	; 0x17c
    29d8:	415f4648 	cmpmi	pc, r8, asr #12
    29dc:	6d657474 	cfstrdvs	mvd7, [r5, #-464]!	; 0xfffffe30
    29e0:	6f547470 	svcvs	0x00547470
    29e4:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    29e8:	6f546863 	svcvs	0x00546863
    29ec:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    29f0:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    29f4:	736f5870 	cmnvc	pc, #112, 16	; 0x700000
    29f8:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    29fc:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
    2a00:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2a04:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    2a08:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a0c:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2a10:	61726170 	cmnvs	r2, r0, ror r1
    2a14:	0031506d 	eorseq	r5, r1, sp, rrx
    2a18:	61726170 	cmnvs	r2, r0, ror r1
    2a1c:	0032506d 	eorseq	r5, r2, sp, rrx
    2a20:	61726170 	cmnvs	r2, r0, ror r1
    2a24:	0033506d 	eorseq	r5, r3, sp, rrx
    2a28:	76657270 			; <UNDEFINED> instruction: 0x76657270
    2a2c:	73756f69 	cmnvc	r5, #420	; 0x1a4
    2a30:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2a34:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    2a38:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a3c:	0073556e 	rsbseq	r5, r3, lr, ror #10
    2a40:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2a44:	2f2e2e2f 	svccs	0x002e2e2f
    2a48:	642f2e2e 	strtvs	r2, [pc], #-3630	; 2a50 <NOROM_OSCClockSourceGet+0x2c>
    2a4c:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    2a50:	62696c72 	rsbvs	r6, r9, #29184	; 0x7200
    2a54:	63736f2f 	cmnvs	r3, #47, 30	; 0xbc
    2a58:	7400632e 	strvc	r6, [r0], #-814	; 0xfffffcd2
    2a5c:	58656d69 	stmdapl	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    2a60:	5363736f 	cmnpl	r3, #-1140850687	; 0xbc000001
    2a64:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    2a68:	56435f65 	strbpl	r5, [r3], -r5, ror #30
    2a6c:	6d657400 	cfstrdvs	mvd7, [r5, #-0]
    2a70:	6c654470 	cfstrdvs	mvd4, [r5], #-448	; 0xfffffe40
    2a74:	6c006174 	stfvss	f6, [r0], {116}	; 0x74
    2a78:	6854776f 	ldmdavs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
    2a7c:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    2a80:	00646c6f 	rsbeq	r6, r4, pc, ror #24
    2a84:	4f524f4e 	svcmi	0x00524f4e
    2a88:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2a8c:	5f464843 	svcpl	0x00464843
    2a90:	6e727554 	mrcvs	5, 3, r7, cr2, cr4, {2}
    2a94:	6f586e4f 	svcvs	0x00586e4f
    2a98:	61006373 	tstvs	r0, r3, ror r3
    2a9c:	6156706d 	cmpvs	r6, sp, rrx
    2aa0:	0065756c 	rsbeq	r7, r5, ip, ror #10
    2aa4:	4f524f4e 	svcmi	0x00524f4e
    2aa8:	534f5f4d 	movtpl	r5, #65357	; 0xff4d
    2aac:	5f464843 	svcpl	0x00464843
    2ab0:	74697753 	strbtvc	r7, [r9], #-1875	; 0xfffff8ad
    2ab4:	6f546863 	svcvs	0x00546863
    2ab8:	734f6352 	movtvc	r6, #62290	; 0xf352
    2abc:	72755463 	rsbsvc	r5, r5, #1660944384	; 0x63000000
    2ac0:	66664f6e 	strbtvs	r4, [r6], -lr, ror #30
    2ac4:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2ac8:	524f4e00 	subpl	r4, pc, #0, 28
    2acc:	4f5f4d4f 	svcmi	0x005f4d4f
    2ad0:	485f4353 	ldmdami	pc, {r0, r1, r4, r6, r8, r9, lr}^	; <UNPREDICTABLE>
    2ad4:	43534f50 	cmpmi	r3, #80, 30	; 0x140
    2ad8:	616c6552 	cmnvs	ip, r2, asr r5
    2adc:	65766974 	ldrbvs	r6, [r6, #-2420]!	; 0xfffff68c
    2ae0:	71657246 	cmnvc	r5, r6, asr #4
    2ae4:	636e6575 	cmnvs	lr, #490733568	; 0x1d400000
    2ae8:	66664f79 	uqsub16vs	r4, r6, r9
    2aec:	47746573 			; <UNDEFINED> instruction: 0x47746573
    2af0:	4e007465 	cdpmi	4, 0, cr7, cr0, cr5, {3}
    2af4:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 29c0 <NOROM_DDI32RegWrite>
    2af8:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2afc:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2b04 <NOROM_OSCClockSourceGet+0xe0>
    2b00:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    2b04:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
    2b08:	74737972 	ldrbtvc	r7, [r3], #-2418	; 0xfffff68e
    2b0c:	6d416c61 	stclvs	12, cr6, [r1, #-388]	; 0xfffffe7c
    2b10:	74696c70 	strbtvc	r6, [r9], #-3184	; 0xfffff390
    2b14:	00656475 	rsbeq	r6, r5, r5, ror r4
    2b18:	706d6574 	rsbvc	r6, sp, r4, ror r5
    2b1c:	746c6544 	strbtvc	r6, [ip], #-1348	; 0xfffffabc
    2b20:	00325861 	eorseq	r5, r2, r1, ror #16
    2b24:	4863736f 	stmdami	r3!, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
    2b28:	6f6c4766 	svcvs	0x006c4766
    2b2c:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    2b30:	4f504800 	svcmi	0x00504800
    2b34:	525f4353 	subspl	r4, pc, #1275068417	; 0x4c000001
    2b38:	72466c65 	subvc	r6, r6, #25856	; 0x6500
    2b3c:	664f7165 	strbvs	r7, [pc], -r5, ror #2
    2b40:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2b44:	6c656400 	cfstrdvs	mvd6, [r5], #-0
    2b48:	69546174 	ldmdbvs	r4, {r2, r4, r5, r6, r8, sp, lr}^
    2b4c:	6953656d 	ldmdbvs	r3, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
    2b50:	5865636e 	stmdapl	r5!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2b54:	4f63736f 	svcmi	0x0063736f
    2b58:	4d6e496e 			; <UNDEFINED> instruction: 0x4d6e496e
    2b5c:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
    2b60:	5461746c 	strbtpl	r7, [r1], #-1132	; 0xfffffb94
    2b64:	53706d65 	cmnpl	r0, #6464	; 0x1940
    2b68:	65636e69 	strbvs	r6, [r3, #-3689]!	; 0xfffff197
    2b6c:	63736f58 	cmnvs	r3, #88, 30	; 0x160
    2b70:	66006e4f 	strvs	r6, [r0], -pc, asr #28
    2b74:	61507469 	cmpvs	r0, r9, ror #8
    2b78:	736d6172 	cmnvc	sp, #-2147483620	; 0x8000001c
    2b7c:	61747300 	cmnvs	r4, r0, lsl #6
    2b80:	70757472 	rsbsvc	r7, r5, r2, ror r4
    2b84:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2b88:	73556e49 	cmpvc	r5, #1168	; 0x490
    2b8c:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
    2b90:	736f5865 	cmnvc	pc, #6619136	; 0x650000
    2b94:	66664f63 	strbtvs	r4, [r6], -r3, ror #30
    2b98:	0056435f 	subseq	r4, r6, pc, asr r3
    2b9c:	4843534f 	stmdami	r3, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^
    2ba0:	756f5366 	strbvc	r5, [pc, #-870]!	; 2842 <NOROM_SysCtrlSetRechargeBeforePowerDown+0x212>
    2ba4:	52656372 	rsbpl	r6, r5, #-939524095	; 0xc8000001
    2ba8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
    2bac:	706d6100 	rsbvc	r6, sp, r0, lsl #2
    2bb0:	706d6f43 	rsbvc	r6, sp, r3, asr #30
    2bb4:	00316854 	eorseq	r6, r1, r4, asr r8
    2bb8:	4863734f 	stmdami	r3!, {r0, r1, r2, r3, r6, r8, r9, ip, sp, lr}^
    2bbc:	6f6c4766 	svcvs	0x006c4766
    2bc0:	736c6162 	cmnvc	ip, #-2147483624	; 0x80000018
    2bc4:	7400745f 	strvc	r7, [r0], #-1119	; 0xfffffba1
    2bc8:	55656d69 	strbpl	r6, [r5, #-3433]!	; 0xfffff297
    2bcc:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	; 0xfffffe48
    2bd0:	656b6157 	strbvs	r6, [fp, #-343]!	; 0xfffffea9
    2bd4:	6e497075 	mcrvs	0, 2, r7, cr9, cr5, {3}
    2bd8:	7500734d 	strvc	r7, [r0, #-845]	; 0xfffffcb3
    2bdc:	53323369 	teqpl	r2, #-1543503871	; 0xa4000001
    2be0:	6c436372 	mcrrvs	3, 7, r6, r3, cr2
    2be4:	6574006b 	ldrbvs	r0, [r4, #-107]!	; 0xffffff95
    2be8:	6544706d 	strbvs	r7, [r4, #-109]	; 0xffffff93
    2bec:	73004367 	movwvc	r4, #871	; 0x367
    2bf0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
    2bf4:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
    2bf8:	65727000 	ldrbvs	r7, [r2, #-0]!
    2bfc:	6d694c76 	stclvs	12, cr4, [r9, #-472]!	; 0xfffffe28
    2c00:	3274696d 	rsbscc	r6, r4, #1785856	; 0x1b4000
    2c04:	556e4935 	strbpl	r4, [lr, #-2357]!	; 0xfffff6cb
    2c08:	4f4e0073 	svcmi	0x004e0073
    2c0c:	5f4d4f52 	svcpl	0x004d4f52
    2c10:	5f43534f 	svcpl	0x0043534f
    2c14:	534f5048 	movtpl	r5, #61512	; 0xf048
    2c18:	6c655243 	sfmvs	f5, 2, [r5], #-268	; 0xfffffef4
    2c1c:	76697461 	strbtvc	r7, [r9], -r1, ror #8
    2c20:	65724665 	ldrbvs	r4, [r2, #-1637]!	; 0xfffff99b
    2c24:	6e657571 	mcrvs	5, 3, r7, cr5, cr1, {3}
    2c28:	664f7963 	strbvs	r7, [pc], -r3, ror #18
    2c2c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2c30:	46526f54 	usaxmi	r6, r2, r4
    2c34:	65726f43 	ldrbvs	r6, [r2, #-3907]!	; 0xfffff0bd
    2c38:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
    2c3c:	6f437461 	svcvs	0x00437461
    2c40:	7265766e 	rsbvc	r7, r5, #115343360	; 0x6e00000
    2c44:	69750074 	ldmdbvs	r5!, {r2, r4, r5, r6}^
    2c48:	6c433233 	sfmvs	f3, 2, [r3], {51}	; 0x33
    2c4c:	536b636f 	cmnpl	fp, #-1140850687	; 0xbc000001
    2c50:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    2c54:	5f5f0065 	svcpl	0x005f0065
    2c58:	31746e69 	cmncc	r4, r9, ror #28
    2c5c:	00745f36 	rsbseq	r5, r4, r6, lsr pc
    2c60:	6f436672 	svcvs	0x00436672
    2c64:	72466572 	subvc	r6, r6, #478150656	; 0x1c800000
    2c68:	664f7165 	strbvs	r7, [pc], -r5, ror #2
    2c6c:	74657366 	strbtvc	r7, [r5], #-870	; 0xfffffc9a
    2c70:	67696800 	strbvs	r6, [r9, -r0, lsl #16]!
    2c74:	72685468 	rsbvc	r5, r8, #104, 8	; 0x68000000
    2c78:	6f687365 	svcvs	0x00687365
    2c7c:	4e00646c 	cdpmi	4, 0, cr6, cr0, cr12, {3}
    2c80:	4d4f524f 	sfmmi	f5, 2, [pc, #-316]	; 2b4c <NOROM_OSCClockSourceGet+0x128>
    2c84:	43534f5f 	cmpmi	r3, #380	; 0x17c
    2c88:	445f4648 	ldrbmi	r4, [pc], #-1608	; 2c90 <__exidx_end+0x10>
    2c8c:	67756265 	ldrbvs	r6, [r5, -r5, ror #4]!
    2c90:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0xfffffab9
    2c94:	63657078 	cmnvs	r5, #120	; 0x78
    2c98:	41646574 	smcmi	18004	; 0x4654
    2c9c:	61726576 	cmnvs	r2, r6, ror r5
    2ca0:	72436567 	subvc	r6, r3, #432013312	; 0x19c00000
    2ca4:	61747379 	cmnvs	r4, r9, ror r3
    2ca8:	706d416c 	rsbvc	r4, sp, ip, ror #2
    2cac:	7574696c 	ldrbvc	r6, [r4, #-2412]!	; 0xfffff694
    2cb0:	6f006564 	svcvs	0x00006564
    2cb4:	66436373 			; <UNDEFINED> instruction: 0x66436373
    2cb8:	67655267 	strbvs	r5, [r5, -r7, ror #4]!
    2cbc:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
    2cc0:	524f4e00 	subpl	r4, pc, #0, 28
    2cc4:	4f5f4d4f 	svcmi	0x005f4d4f
    2cc8:	46484353 			; <UNDEFINED> instruction: 0x46484353
    2ccc:	7465475f 	strbtvc	r4, [r5], #-1887	; 0xfffff8a1
    2cd0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    2cd4:	54707574 	ldrbtpl	r7, [r0], #-1396	; 0xfffffa8c
    2cd8:	00656d69 	rsbeq	r6, r5, r9, ror #26
    2cdc:	61726170 	cmnvs	r2, r0, ror r1
    2ce0:	0030506d 	eorseq	r5, r0, sp, rrx

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__ccfg+0x10b0d7c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	322d393a 	eorcc	r3, sp, #950272	; 0xe8000
   c:	2d393130 	ldfcss	f3, [r9, #-192]!	; 0xffffff40
  10:	302d3471 	eorcc	r3, sp, r1, ror r4
  14:	6e756275 	mrcvs	2, 3, r6, cr5, cr5, {3}
  18:	29317574 	ldmdbcs	r1!, {r2, r4, r5, r6, r8, sl, ip, sp, lr}
  1c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  20:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  24:	31393130 	teqcc	r9, r0, lsr r1
  28:	20353230 	eorscs	r3, r5, r0, lsr r2
  2c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  30:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  34:	415b2029 	cmpmi	fp, r9, lsr #32
  38:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  3c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
			i = k;
  40:	6172622d 	cmnvs	r2, sp, lsr #4
				j->Next = k;
  44:	2068636e 	rsbcs	r6, r8, lr, ror #6
  48:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
}
  4c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  50:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  54:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
		release;
  58:	43434700 	movtmi	r4, #14080	; 0x3700
  5c:	4728203a 			; <UNDEFINED> instruction: 0x4728203a
  60:	5420554e 	strtpl	r5, [r0], #-1358	; 0xfffffab2
  64:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  68:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
  6c:	4d524120 	ldfmie	f4, [r2, #-128]	; 0xffffff80
  70:	626d4520 	rsbvs	r4, sp, #32, 10	; 0x8000000
  74:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
  78:	72502064 	subsvc	r2, r0, #100	; 0x64
  7c:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
  80:	73726f73 	cmnvc	r2, #460	; 0x1cc
  84:	2e342029 	cdpcs	0, 3, cr2, cr4, cr9, {1}
  88:	20332e39 	eorscs	r2, r3, r9, lsr lr
  8c:	35313032 	ldrcc	r3, [r1, #-50]!	; 0xffffffce
	descriptors [fd] = s;
  90:	39323530 	ldmdbcc	r2!, {r4, r5, r8, sl, ip, sp}
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
  94:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  98:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
	if (s == NULL)
  9c:	5b202965 	blpl	80a638 <__ccfg+0x7ea690>
		syserror (EMALLOC, "tcv05");
  a0:	2f4d5241 	svccs	0x004d5241
  a4:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  a8:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  ac:	395f342d 	ldmdbcc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
  b0:	6172622d 	cmnvs	r2, sp, lsr #4
  b4:	2068636e 	rsbcs	r6, r8, lr, ror #6
  b8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  bc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  c0:	37323220 	ldrcc	r3, [r2, -r0, lsr #4]!
  c4:	5d373739 	ldcpl	7, cr3, [r7, #-228]!	; 0xffffff1c
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002c41 	andeq	r2, r0, r1, asr #24
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000022 	andeq	r0, r0, r2, lsr #32
  10:	4d2d3705 	stcmi	7, cr3, [sp, #-20]!	; 0xffffffec
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	1202094d 	andne	r0, r2, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <__ccfg+0x26488>
  28:	22041e01 	andcs	r1, r4, #1, 28
  2c:	Address 0x000000000000002c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	00000020 	andeq	r0, r0, r0, lsr #32
	...
      1c:	00000140 	andeq	r0, r0, r0, asr #2
      20:	83100e41 	tsthi	r0, #1040	; 0x410
      24:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
      28:	02018e02 	andeq	r8, r1, #2, 28
      2c:	c4c5ce8d 	strbgt	ip, [r5], #3725	; 0xe8d
      30:	00000ec3 	andeq	r0, r0, r3, asr #29
      34:	00000018 	andeq	r0, r0, r8, lsl r0
      38:	00000000 	andeq	r0, r0, r0
      3c:	000000c8 	andeq	r0, r0, r8, asr #1
			i = k;
      40:	00000048 	andeq	r0, r0, r8, asr #32
				j->Next = k;
      44:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
      48:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
}
      4c:	00000001 	andeq	r0, r0, r1
      50:	0000001c 	andeq	r0, r0, ip, lsl r0
      54:	00000000 	andeq	r0, r0, r0
      58:	00000110 	andeq	r0, r0, r0, lsl r1
      5c:	0000005c 	andeq	r0, r0, ip, asr r0
      60:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
      64:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
      68:	0e0a5e01 	cdpeq	14, 0, cr5, cr10, cr1, {0}
      6c:	000b410c 	andeq	r4, fp, ip, lsl #2
      70:	0000001c 	andeq	r0, r0, ip, lsl r0
      74:	00000000 	andeq	r0, r0, r0
      78:	0000016c 	andeq	r0, r0, ip, ror #2
      7c:	0000012c 	andeq	r0, r0, ip, lsr #2
      80:	8e040e41 	cdphi	14, 0, cr0, cr4, cr1, {2}
      84:	480e4101 	stmdami	lr, {r0, r8, lr}
      88:	0e0a6d02 	cdpeq	13, 0, cr6, cr10, cr2, {0}
      8c:	000b4204 	andeq	r4, fp, r4, lsl #4
	descriptors [fd] = s;
      90:	0000000c 	andeq	r0, r0, ip
	s = (sesdesc_t*) s_malloc (sizeof (sesdesc_t));
      94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      98:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (s == NULL)
      9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		syserror (EMALLOC, "tcv05");
      a0:	0000000c 	andeq	r0, r0, ip
      a4:	00000090 	muleq	r0, r0, r0
      a8:	00000298 	muleq	r0, r8, r2
      ac:	0000000c 	andeq	r0, r0, ip
      b0:	00000018 	andeq	r0, r0, r8, lsl r0
      b4:	00000090 	muleq	r0, r0, r0
      b8:	000002a4 	andeq	r0, r0, r4, lsr #5
      bc:	0000002c 	andeq	r0, r0, ip, lsr #32
      c0:	47080e41 	strmi	r0, [r8, -r1, asr #28]
      c4:	41000e0a 	tstmi	r0, sl, lsl #28
      c8:	0000000b 	andeq	r0, r0, fp
      cc:	00000018 	andeq	r0, r0, r8, lsl r0
      d0:	00000090 	muleq	r0, r0, r0
      d4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
      d8:	0000002a 	andeq	r0, r0, sl, lsr #32
      dc:	8e100e41 	cdphi	14, 1, cr0, cr0, cr1, {2}
      e0:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
      e4:	000b4204 	andeq	r4, fp, r4, lsl #4
      e8:	00000018 	andeq	r0, r0, r8, lsl r0
      ec:	00000090 	muleq	r0, r0, r0
      f0:	000002fc 	strdeq	r0, [r0], -ip
			wwait (st, 50);
      f4:	0000003c 	andeq	r0, r0, ip, lsr r0
			curr += 0x1000;
      f8:	83100e41 	tsthi	r0, #1040	; 0x410
      fc:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		if (from >= EE_SIZE || upto < from)
     100:	00018e02 	andeq	r8, r1, r2, lsl #28
     104:	00000018 	andeq	r0, r0, r8, lsl r0
			upto = EE_SIZE - 1;
     108:	00000090 	muleq	r0, r0, r0
     10c:	00000000 	andeq	r0, r0, r0
     110:	00000040 	andeq	r0, r0, r0, asr #32
     114:	83100e41 	tsthi	r0, #1040	; 0x410
     118:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     11c:	00018e02 	andeq	r8, r1, r2, lsl #28
     120:	00000014 	andeq	r0, r0, r4, lsl r0
     124:	00000090 	muleq	r0, r0, r0
}
     128:	00000000 	andeq	r0, r0, r0
     12c:	00000020 	andeq	r0, r0, r0, lsr #32
     130:	83080e42 	movwhi	r0, #36418	; 0x8e42
     134:	00018e02 	andeq	r8, r1, r2, lsl #28
     138:	00000014 	andeq	r0, r0, r4, lsl r0
     13c:	00000090 	muleq	r0, r0, r0
    cycles[0].offTime = numbers[1];
     140:	00000338 	andeq	r0, r0, r8, lsr r3
    cycles[1].onTime = numbers[2];
     144:	00000054 	andeq	r0, r0, r4, asr r0
    cycles[1].offTime = numbers[3];
     148:	87080e42 	strhi	r0, [r8, -r2, asr #28]
     14c:	00018e02 	andeq	r8, r1, r2, lsl #28
}
     150:	00000014 	andeq	r0, r0, r4, lsl r0
        } else if (settingsInput[i] >= '0' && settingsInput[i] <= '9') {
     154:	00000090 	muleq	r0, r0, r0
            number = number * 10;
     158:	0000038c 	andeq	r0, r0, ip, lsl #7
     15c:	00000040 	andeq	r0, r0, r0, asr #32
            number += settingsInput[i] - 48;
     160:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     164:	00018e02 	andeq	r8, r1, r2, lsl #28
     168:	00000014 	andeq	r0, r0, r4, lsl r0
fsm root {
     16c:	00000090 	muleq	r0, r0, r0
     170:	000003cc 	andeq	r0, r0, ip, asr #7
     174:	00000028 	andeq	r0, r0, r8, lsr #32
     178:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     17c:	00018e02 	andeq	r8, r1, r2, lsl #28
     180:	00000014 	andeq	r0, r0, r4, lsl r0
        initCycles();
     184:	00000090 	muleq	r0, r0, r0
        ser_outf(Initial, "Enter your name: ");
     188:	000003f4 	strdeq	r0, [r0], -r4
     18c:	00000114 	andeq	r0, r0, r4, lsl r1
        ser_in(Get_Name, username, NAME_LENGTH);
     190:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     194:	00018e02 	andeq	r8, r1, r2, lsl #28
        ser_outf(Show_Menu, "Welcome %s\n\r"
     198:	0000001c 	andeq	r0, r0, ip, lsl r0
     19c:	00000090 	muleq	r0, r0, r0
     1a0:	00000508 	andeq	r0, r0, r8, lsl #10
        ser_inf(Get_Choice, "%c", &choice);
     1a4:	00000050 	andeq	r0, r0, r0, asr r0
     1a8:	83180e41 	tsthi	r8, #1040	; 0x410
        if (choice == 'A' || choice == 'a'){
     1ac:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     1b0:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     1b4:	00018e02 	andeq	r8, r1, r2, lsl #28
            proceed Adjust_Intervals;
     1b8:	00000018 	andeq	r0, r0, r8, lsl r0
            proceed Monitor;
     1bc:	00000090 	muleq	r0, r0, r0
        proceed Show_Menu;
     1c0:	00000558 	andeq	r0, r0, r8, asr r5
        ser_outf(Initial, "Enter the intervals (Red ON, OFF, Green ON, OFF): ");
     1c4:	00000054 	andeq	r0, r0, r4, asr r0
     1c8:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
        ser_in(Set_Intervals, settings, SETTINGS_LENGTH);
     1cc:	86038504 	strhi	r8, [r3], -r4, lsl #10
     1d0:	00018e02 	andeq	r8, r1, r2, lsl #28
     1d4:	0000000c 	andeq	r0, r0, ip
        processSettingsInput(settings);
     1d8:	00000090 	muleq	r0, r0, r0
        proceed Show_Menu;
     1dc:	000005ac 	andeq	r0, r0, ip, lsr #11
     1e0:	00000038 	andeq	r0, r0, r8, lsr r0
        ser_outf(View_Settings, "(Red ON, OFF, Green ON, OFF) intervals: (%d, %d, %d, %d)\n\r",
     1e4:	00000020 	andeq	r0, r0, r0, lsr #32
     1e8:	00000090 	muleq	r0, r0, r0
     1ec:	000005e4 	andeq	r0, r0, r4, ror #11
     1f0:	00000110 	andeq	r0, r0, r0, lsl r1
     1f4:	83200e43 			; <UNDEFINED> instruction: 0x83200e43
        proceed Show_Menu;
     1f8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     1fc:	87058606 	strhi	r8, [r5, -r6, lsl #12]
        ser_outf(Monitor, "Monitor (press S to stop): ");
     200:	89038804 	stmdbhi	r3, {r2, fp, pc}
     204:	00018e02 	andeq	r8, r1, r2, lsl #28
        displayCycle = YES;
     208:	0000000c 	andeq	r0, r0, ip
        ser_inf(Await_Stop, "%c", ch);
     20c:	00000090 	muleq	r0, r0, r0
     210:	00000000 	andeq	r0, r0, r0
     214:	0000000c 	andeq	r0, r0, ip
        proceed Monitor;
     218:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     21c:	00000090 	muleq	r0, r0, r0
     220:	000006f4 	strdeq	r0, [r0], -r4
        leds(1, 0);
     224:	000000c0 	andeq	r0, r0, r0, asr #1
     228:	840c0e43 	strhi	r0, [ip], #-3651	; 0xfffff1bd
     22c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     230:	00000001 	andeq	r0, r0, r1
     234:	00000018 	andeq	r0, r0, r8, lsl r0
        leds(0, 0);
     238:	00000090 	muleq	r0, r0, r0
     23c:	000007b4 			; <UNDEFINED> instruction: 0x000007b4
     240:	00000044 	andeq	r0, r0, r4, asr #32
     244:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     248:	86038504 	strhi	r8, [r3], -r4, lsl #10
     24c:	00018e02 	andeq	r8, r1, r2, lsl #28
        } else if (choice == 'S' || choice == 's') {
     250:	0000001c 	andeq	r0, r0, ip, lsl r0
            proceed Stop;
     254:	00000090 	muleq	r0, r0, r0
        } else if (choice == 'V' || choice == 'v') {
     258:	000007f8 	strdeq	r0, [r0], -r8
            proceed View_Settings;
     25c:	0000003c 	andeq	r0, r0, ip, lsr r0
        } else if (choice == 'M' || choice == 'm') {
     260:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
            proceed Monitor;
     264:	86048505 	strhi	r8, [r4], -r5, lsl #10
     268:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     26c:	00000001 	andeq	r0, r0, r1
     270:	00000018 	andeq	r0, r0, r8, lsl r0
     274:	00000090 	muleq	r0, r0, r0
     278:	00000834 	andeq	r0, r0, r4, lsr r8
     27c:	000000a4 	andeq	r0, r0, r4, lsr #1
     280:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     284:	86038504 	strhi	r8, [r3], -r4, lsl #10
     288:	00018e02 	andeq	r8, r1, r2, lsl #28
     28c:	00000030 	andeq	r0, r0, r0, lsr r0
     290:	00000090 	muleq	r0, r0, r0
     294:	000008d8 	ldrdeq	r0, [r0], -r8
static void devinit_uart (int devnum) {
     298:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
	adddevfunc (ioreq_uart_a, devnum);
     29c:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     2a0:	86078508 	strhi	r8, [r7], -r8, lsl #10
void udelay (volatile word n) {
     2a4:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
     2a8:	8a038904 	bhi	e26c0 <__ccfg+0xc2718>
	while (n) {
     2ac:	02018e02 	andeq	r8, r1, #2, 28
     2b0:	cace0aa2 	bgt	ff382d40 <_estack+0xdf37dd40>
}
     2b4:	c6c7c8c9 	strbgt	ip, [r7], r9, asr #17
	while (n--);
     2b8:	000ec4c5 	andeq	ip, lr, r5, asr #9
     2bc:	00000b42 	andeq	r0, r0, r2, asr #22
     2c0:	0000000c 	andeq	r0, r0, ip
		n--;
     2c4:	00000090 	muleq	r0, r0, r0
     2c8:	00000000 	andeq	r0, r0, r0
     2cc:	00000024 	andeq	r0, r0, r4, lsr #32
void mdelay (volatile word n) {
     2d0:	0000000c 	andeq	r0, r0, ip
     2d4:	00000090 	muleq	r0, r0, r0
	while (n) {
     2d8:	00000000 	andeq	r0, r0, r0
     2dc:	00000028 	andeq	r0, r0, r8, lsr #32
}
     2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
		udelay (999);
     2e4:	00000090 	muleq	r0, r0, r0
     2e8:	00000a90 	muleq	r0, r0, sl
		n--;
     2ec:	00000258 	andeq	r0, r0, r8, asr r2
     2f0:	870c0e42 	strhi	r0, [ip, -r2, asr #28]
     2f4:	8e028b03 	vmlahi.f64	d8, d2, d3
     2f8:	180e4101 	stmdane	lr, {r0, r8, lr}
void __pi_ondomain (lword d) {
     2fc:	00070d42 	andeq	r0, r7, r2, asr #26
     300:	00000014 	andeq	r0, r0, r4, lsl r0
		if (__pi_systat.effpdm > 1)
     304:	00000090 	muleq	r0, r0, r0
     308:	00000000 	andeq	r0, r0, r0
			__pi_systat.effpdm = 1;
     30c:	00000030 	andeq	r0, r0, r0, lsr r0
	PRCMPowerDomainOn (d);
     310:	83080e42 	movwhi	r0, #36418	; 0x8e42
     314:	00018e02 	andeq	r8, r1, r2, lsl #28
     318:	00000018 	andeq	r0, r0, r8, lsl r0
	while (PRCMPowerDomainStatus (d) != PRCM_DOMAIN_POWER_ON);
     31c:	00000090 	muleq	r0, r0, r0
     320:	00000000 	andeq	r0, r0, r0
     324:	0000005c 	andeq	r0, r0, ip, asr r0
	__pi_systat.ondmns |= d;
     328:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     32c:	86038504 	strhi	r8, [r3], -r4, lsl #10
}
     330:	00018e02 	andeq	r8, r1, r2, lsl #28
     334:	00000014 	andeq	r0, r0, r4, lsl r0
void __pi_syserror (word ec, const char *m) {
     338:	00000090 	muleq	r0, r0, r0
	diag ("SYSERR: %x, %s", ec, m);
     33c:	00000ce8 	andeq	r0, r0, r8, ror #25
     340:	00000060 	andeq	r0, r0, r0, rrx
  __ASM volatile ("cpsid i" : : : "memory");
     344:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     348:	00018e02 	andeq	r8, r1, r2, lsl #28
     34c:	0000000c 	andeq	r0, r0, ip
     350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		all_leds_blink;
     354:	7c020001 	stcvc	0, cr0, [r2], {1}
     358:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     35c:	00000018 	andeq	r0, r0, r8, lsl r0
     360:	0000034c 	andeq	r0, r0, ip, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     364:	00000d48 	andeq	r0, r0, r8, asr #26
     368:	0000003c 	andeq	r0, r0, ip, lsr r0
     36c:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
     370:	86038504 	strhi	r8, [r3], -r4, lsl #10
     374:	00018e02 	andeq	r8, r1, r2, lsl #28
     378:	00000018 	andeq	r0, r0, r8, lsl r0
	while (1) {
     37c:	0000034c 	andeq	r0, r0, ip, asr #6
     380:	00000d84 	andeq	r0, r0, r4, lsl #27
     384:	00000080 	andeq	r0, r0, r0, lsl #1
     388:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
void tci_run_delay_timer () {
     38c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	setdel = __pi_mintk - __pi_old;
     390:	00000001 	andeq	r0, r0, r1
     394:	0000000c 	andeq	r0, r0, ip
     398:	0000034c 	andeq	r0, r0, ip, asr #6
     39c:	00000e04 	andeq	r0, r0, r4, lsl #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3a0:	00000018 	andeq	r0, r0, r8, lsl r0
     3a4:	00000014 	andeq	r0, r0, r4, lsl r0
     3a8:	0000034c 	andeq	r0, r0, ip, asr #6
     3ac:	00000000 	andeq	r0, r0, r0
	HWREG (AON_RTC_BASE + AON_RTC_O_CH0CMP) = settav (setdel);
     3b0:	00000024 	andeq	r0, r0, r4, lsr #32
	sti_tim;
     3b4:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
     3b8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3bc:	00000014 	andeq	r0, r0, r4, lsl r0
     3c0:	0000034c 	andeq	r0, r0, ip, asr #6
     3c4:	00000e1c 	andeq	r0, r0, ip, lsl lr
     3c8:	00000010 	andeq	r0, r0, r0, lsl r0
	cli_aux;
     3cc:	83080e42 	movwhi	r0, #36418	; 0x8e42
     3d0:	00018e02 	andeq	r8, r1, r2, lsl #28
	return (lword)(AONRTCCurrent64BitValueGet () >> 16) + TCI_TINCR (del);
     3d4:	00000014 	andeq	r0, r0, r4, lsl r0
     3d8:	0000034c 	andeq	r0, r0, ip, asr #6
     3dc:	00000000 	andeq	r0, r0, r0
     3e0:	0000002c 	andeq	r0, r0, ip, lsr #32
	sti_aux;
     3e4:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
}
     3e8:	00018e02 	andeq	r8, r1, r2, lsl #28
     3ec:	00000014 	andeq	r0, r0, r4, lsl r0
     3f0:	0000034c 	andeq	r0, r0, ip, asr #6
void AONRTCIntHandler () {
     3f4:	00000000 	andeq	r0, r0, r0
	events = HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) & 
     3f8:	0000004c 	andeq	r0, r0, ip, asr #32
     3fc:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
	HWREG (AON_RTC_BASE + AON_RTC_O_EVFLAGS) = events;
     400:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (__pi_utims [0] == 0)
     404:	0000000c 	andeq	r0, r0, ip
     408:	0000034c 	andeq	r0, r0, ip, asr #6
		if (*(__pi_utims [0])) {
     40c:	00000000 	andeq	r0, r0, r0
     410:	00000006 	andeq	r0, r0, r6
			(*(__pi_utims [0]))--;
     414:	00000028 	andeq	r0, r0, r8, lsr #32
		if (__pi_utims [1] == 0)
     418:	0000034c 	andeq	r0, r0, ip, asr #6
		if (*(__pi_utims [1])) {
     41c:	00000e2c 	andeq	r0, r0, ip, lsr #28
			aux_timer_inactive = 0;
     420:	000000cc 	andeq	r0, r0, ip, asr #1
			(*(__pi_utims [1]))--;
     424:	83180e41 	tsthi	r8, #1040	; 0x410
		if (__pi_utims [2] == 0)
     428:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
		if (*(__pi_utims [2])) {
     42c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
			(*(__pi_utims [2]))--;
     430:	02018e02 	andeq	r8, r1, #2, 28
		if (__pi_utims [3] != 0) {
     434:	c7ce0a59 			; <UNDEFINED> instruction: 0xc7ce0a59
			if (*(__pi_utims [3])) {
     438:	c3c4c5c6 	bicgt	ip, r4, #830472192	; 0x31800000
				aux_timer_inactive = 0;
     43c:	0b42000e 	bleq	108047c <__ccfg+0x10604d4>
				(*(__pi_utims [3]))--;
     440:	00000014 	andeq	r0, r0, r4, lsl r0
	if (__pi_systat.ledsts) {
     444:	0000034c 	andeq	r0, r0, ip, asr #6
     448:	00000ef8 	strdeq	r0, [r0], -r8
		if (__pi_systat.ledblc++ == 0) {
     44c:	00000014 	andeq	r0, r0, r4, lsl r0
     450:	83080e41 	movwhi	r0, #36417	; 0x8e41
			if (__pi_systat.ledblk) {
     454:	00018e02 	andeq	r8, r1, r2, lsl #28
     458:	00000014 	andeq	r0, r0, r4, lsl r0
     45c:	0000034c 	andeq	r0, r0, ip, asr #6
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     460:	00000f0c 	andeq	r0, r0, ip, lsl #30
     464:	00000034 	andeq	r0, r0, r4, lsr r0
				if (__pi_systat.ledsts & 0x2)
     468:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     46c:	00018e02 	andeq	r8, r1, r2, lsl #28
     470:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x4)
     474:	0000034c 	andeq	r0, r0, ip, asr #6
				__pi_systat.ledblk = 0;
     478:	00000f40 	andeq	r0, r0, r0, asr #30
     47c:	00000034 	andeq	r0, r0, r4, lsr r0
			if (__pi_systat.fstblk)
     480:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
     484:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
				__pi_systat.ledblc = 200;
     488:	00000001 	andeq	r0, r0, r1
	if (events & AON_RTC_EVFLAGS_CH0) {
     48c:	00000018 	andeq	r0, r0, r8, lsl r0
		cli_tim;
     490:	0000034c 	andeq	r0, r0, ip, asr #6
		__pi_new += setdel;
     494:	00000000 	andeq	r0, r0, r0
     498:	0000002c 	andeq	r0, r0, ip, lsr #32
		setdel = 0;
     49c:	83100e41 	tsthi	r0, #1040	; 0x410
		RISE_N_SHINE;
     4a0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
		__pi_new += setdel;
     4a4:	00018e02 	andeq	r8, r1, r2, lsl #28
		RISE_N_SHINE;
     4a8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ac:	0000034c 	andeq	r0, r0, ip, asr #6
		aux_timer_inactive = 1;
     4b0:	00000f74 	andeq	r0, r0, r4, ror pc
     4b4:	00000024 	andeq	r0, r0, r4, lsr #32
				if (__pi_systat.ledsts & 0x1)
     4b8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     4bc:	00018e02 	andeq	r8, r1, r2, lsl #28
     4c0:	00000018 	andeq	r0, r0, r8, lsl r0
				if (__pi_systat.ledsts & 0x2)
     4c4:	0000034c 	andeq	r0, r0, ip, asr #6
     4c8:	00000f98 	muleq	r0, r8, pc	; <UNPREDICTABLE>
     4cc:	00000038 	andeq	r0, r0, r8, lsr r0
				if (__pi_systat.ledsts & 0x8)
     4d0:	83100e41 	tsthi	r0, #1040	; 0x410
				__pi_systat.ledblk = 1;
     4d4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     4d8:	00018e02 	andeq	r8, r1, r2, lsl #28
		if (aux_timer_inactive) {
     4dc:	0000000c 	andeq	r0, r0, ip
			cli_aux;
     4e0:	0000034c 	andeq	r0, r0, ip, asr #6
     4e4:	00000000 	andeq	r0, r0, r0
     4e8:	00000014 	andeq	r0, r0, r4, lsl r0
     4ec:	00000014 	andeq	r0, r0, r4, lsl r0
     4f0:	0000034c 	andeq	r0, r0, ip, asr #6
     4f4:	00000000 	andeq	r0, r0, r0
     4f8:	00000040 	andeq	r0, r0, r0, asr #32
     4fc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     500:	00018e02 	andeq	r8, r1, r2, lsl #28
     504:	00000014 	andeq	r0, r0, r4, lsl r0
word tci_update_delay_ticks (Boolean force) {
     508:	0000034c 	andeq	r0, r0, ip, asr #6
	cli_tim;
     50c:	00000000 	andeq	r0, r0, r0
     510:	00000018 	andeq	r0, r0, r8, lsl r0
	if (setdel) {
     514:	83080e41 	movwhi	r0, #36417	; 0x8e41
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     518:	00018e02 	andeq	r8, r1, r2, lsl #28
	return (word)(AONRTCCurrent64BitValueGet () >> (32 - 10));
     51c:	0000000c 	andeq	r0, r0, ip
     520:	0000034c 	andeq	r0, r0, ip, asr #6
     524:	00000fd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     528:	00000024 	andeq	r0, r0, r4, lsr #32
				AON_RTC_O_CH0CMP)) - gettav ());
     52c:	0000000c 	andeq	r0, r0, ip
	return NO;
     530:	0000034c 	andeq	r0, r0, ip, asr #6
			setdel = 0;
     534:	00000000 	andeq	r0, r0, r0
			__pi_new += setdel - (TCI_INCRT (HWREG (AON_RTC_BASE +
     538:	00000020 	andeq	r0, r0, r0, lsr #32
     53c:	0000000c 	andeq	r0, r0, ip
}
     540:	0000034c 	andeq	r0, r0, ip, asr #6
		sti_tim;
     544:	00000ff4 	strdeq	r0, [r0], -r4
		return YES;
     548:	0000000e 	andeq	r0, r0, lr
     54c:	0000000c 	andeq	r0, r0, ip
     550:	0000034c 	andeq	r0, r0, ip, asr #6
     554:	00000000 	andeq	r0, r0, r0
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     558:	00000010 	andeq	r0, r0, r0, lsl r0
	UARTDisable (UART0_BASE);
     55c:	0000000c 	andeq	r0, r0, ip
Boolean __pi_uart_setrate (word rate, uart_t *ua) {
     560:	0000034c 	andeq	r0, r0, ip, asr #6
	UARTDisable (UART0_BASE);
     564:	00000000 	andeq	r0, r0, r0
	UARTConfigSetExpClk (UART0_BASE,
     568:	0000001c 	andeq	r0, r0, ip, lsl r0
     56c:	0000000c 	andeq	r0, r0, ip
     570:	0000034c 	andeq	r0, r0, ip, asr #6
     574:	00000000 	andeq	r0, r0, r0
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     578:	00000010 	andeq	r0, r0, r0, lsl r0
     57c:	0000000c 	andeq	r0, r0, ip
     580:	0000034c 	andeq	r0, r0, ip, asr #6
    HWREG(ui32Base + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
     584:	00000000 	andeq	r0, r0, r0
     588:	00000006 	andeq	r0, r0, r6
     58c:	0000000c 	andeq	r0, r0, ip
	urates [0] = rate;
     590:	0000034c 	andeq	r0, r0, ip, asr #6
}
     594:	00001002 	andeq	r1, r0, r2
     598:	00000014 	andeq	r0, r0, r4, lsl r0
     59c:	0000000c 	andeq	r0, r0, ip
     5a0:	0000034c 	andeq	r0, r0, ip, asr #6
     5a4:	00000000 	andeq	r0, r0, r0
     5a8:	0000000e 	andeq	r0, r0, lr
    HWREG(ui32Base + UART_O_LCRH) |= UART_LCRH_FEN;
     5ac:	00000014 	andeq	r0, r0, r4, lsl r0
     5b0:	0000034c 	andeq	r0, r0, ip, asr #6
     5b4:	00001018 	andeq	r1, r0, r8, lsl r0
    HWREG(ui32Base + UART_O_IFLS) = ui32TxLevel | ui32RxLevel;
     5b8:	00000024 	andeq	r0, r0, r4, lsr #32
     5bc:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREG( ui32Base + UART_O_CTL ) &= ~( UART_CTL_CTSEN | UART_CTL_RTSEN );
     5c0:	00018e02 	andeq	r8, r1, r2, lsl #28
     5c4:	00000020 	andeq	r0, r0, r0, lsr #32
	__pi_uart_setrate (urates [0], __pi_uart);
     5c8:	0000034c 	andeq	r0, r0, ip, asr #6
     5cc:	0000103c 	andeq	r1, r0, ip, lsr r0
     5d0:	0000009c 	muleq	r0, ip, r0
     5d4:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
     5d8:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     5dc:	87058606 	strhi	r8, [r5, -r6, lsl #12]
     5e0:	89038804 	stmdbhi	r3, {r2, fp, pc}
	switch (operation) {
     5e4:	00018e02 	andeq	r8, r1, r2, lsl #28
static int ioreq_uart_a (int operation, char *buf, int len) {
     5e8:	00000014 	andeq	r0, r0, r4, lsl r0
     5ec:	0000034c 	andeq	r0, r0, ip, asr #6
     5f0:	000010d8 	ldrdeq	r1, [r0], -r8
     5f4:	00000050 	andeq	r0, r0, r0, asr r0
     5f8:	83080e42 	movwhi	r0, #36418	; 0x8e42
				*buf++ = uart_a_read;
     5fc:	00018e02 	andeq	r8, r1, r2, lsl #28
     600:	00000014 	andeq	r0, r0, r4, lsl r0
			while (len && uart_a_char_available) {
     604:	0000034c 	andeq	r0, r0, ip, asr #6
     608:	00001128 	andeq	r1, r0, r8, lsr #2
     60c:	00000048 	andeq	r0, r0, r8, asr #32
			if (len != operation) {
     610:	83080e41 	movwhi	r0, #36417	; 0x8e41
}
     614:	00018e02 	andeq	r8, r1, r2, lsl #28
     618:	00000014 	andeq	r0, r0, r4, lsl r0
			uart_a_disable_int;
     61c:	0000034c 	andeq	r0, r0, ip, asr #6
			if (uart_a_char_available) {
     620:	00001170 	andeq	r1, r0, r0, ror r1
				*buf++ = uart_a_read;
     624:	00000050 	andeq	r0, r0, r0, asr r0
			uart_a_disable_int;
     628:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     62c:	00018e02 	andeq	r8, r1, r2, lsl #28
			if (uart_a_char_available) {
     630:	00000020 	andeq	r0, r0, r0, lsr #32
     634:	0000034c 	andeq	r0, r0, ip, asr #6
				uart_a_enable_int;
     638:	00000000 	andeq	r0, r0, r0
     63c:	00000058 	andeq	r0, r0, r8, asr r0
				goto Redo_rx;
     640:	83200e42 			; <UNDEFINED> instruction: 0x83200e42
			_BIS (__pi_uart->flags, UART_FLAGS_IN);
     644:	85078408 	strhi	r8, [r7, #-1032]	; 0xfffffbf8
     648:	87058606 	strhi	r8, [r5, -r6, lsl #12]
			return -2;
     64c:	89038804 	stmdbhi	r3, {r2, fp, pc}
     650:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_write (*buf);
     654:	00000018 	andeq	r0, r0, r8, lsl r0
     658:	0000034c 	andeq	r0, r0, ip, asr #6
			while (len && uart_a_room_in_tx) {
     65c:	000011c0 	andeq	r1, r0, r0, asr #3
     660:	000000a8 	andeq	r0, r0, r8, lsr #1
     664:	83100e44 	tsthi	r0, #68, 28	; 0x440
			if (len != operation) {
     668:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			uart_a_disable_int;
     66c:	00018e02 	andeq	r8, r1, r2, lsl #28
     670:	00000018 	andeq	r0, r0, r8, lsl r0
			if (uart_a_room_in_tx) {
     674:	0000034c 	andeq	r0, r0, ip, asr #6
     678:	00001268 	andeq	r1, r0, r8, ror #4
				uart_a_enable_int;
     67c:	00000034 	andeq	r0, r0, r4, lsr r0
     680:	83100e41 	tsthi	r0, #1040	; 0x410
				*buf++ = uart_a_read;
     684:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
			if (uart_a_room_in_tx) {
     688:	00018e02 	andeq	r8, r1, r2, lsl #28
				uart_a_write (*buf);
     68c:	0000000c 	andeq	r0, r0, ip
     690:	0000034c 	andeq	r0, r0, ip, asr #6
			_BIS (__pi_uart->flags, UART_FLAGS_OUT);
     694:	0000129c 	muleq	r0, ip, r2
     698:	00000018 	andeq	r0, r0, r8, lsl r0
			uart_a_enable_int;
     69c:	00000014 	andeq	r0, r0, r4, lsl r0
     6a0:	0000034c 	andeq	r0, r0, ip, asr #6
     6a4:	00000000 	andeq	r0, r0, r0
			return 0;
     6a8:	00000030 	andeq	r0, r0, r0, lsr r0
			if (len == UART_CNTRL_SETRATE) {
     6ac:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				if (__pi_uart_setrate (*((word*)buf),
     6b0:	00018e02 	andeq	r8, r1, r2, lsl #28
     6b4:	00000014 	andeq	r0, r0, r4, lsl r0
     6b8:	0000034c 	andeq	r0, r0, ip, asr #6
				syserror (EREQPAR, "uar");
     6bc:	00000000 	andeq	r0, r0, r0
			syserror (ENOOPER, "uai");
     6c0:	00000038 	andeq	r0, r0, r8, lsr r0
			if (len == UART_CNTRL_GETRATE) {
     6c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				return 1;
     6c8:	00018e02 	andeq	r8, r1, r2, lsl #28
				*((word*)buf) = __pi_uart_getrate (__pi_uart);
     6cc:	00000040 	andeq	r0, r0, r0, asr #32
			syserror (ENOOPER, "uai");
     6d0:	0000034c 	andeq	r0, r0, ip, asr #6
     6d4:	000012b4 			; <UNDEFINED> instruction: 0x000012b4
     6d8:	0000013c 	andeq	r0, r0, ip, lsr r1
     6dc:	80100e41 	andshi	r0, r0, r1, asr #28
     6e0:	82038104 	andhi	r8, r3, #4, 2
     6e4:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     6e8:	0b84380e 	bleq	fe10e728 <_estack+0xde109728>
     6ec:	09860a85 	stmibeq	r6, {r0, r2, r7, r9, fp}
     6f0:	07880887 	streq	r0, [r8, r7, lsl #17]
    HWREG(ui32Base + UART_O_ICR) = ui32IntFlags;
     6f4:	058e0689 	streq	r0, [lr, #1673]	; 0x689
void UART0IntHandler () {
     6f8:	2c0e0a5e 			; <UNDEFINED> instruction: 0x2c0e0a5e
	if (uart_a_char_available && (__pi_uart->flags & UART_FLAGS_IN)) {
     6fc:	c8c9ce42 	stmiagt	r9, {r1, r6, r9, sl, fp, lr, pc}^
     700:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
     704:	c341100e 	movtgt	r1, #4110	; 0x100e
     708:	0ec0c1c2 	acseqdm	f4, f2
     70c:	000b4100 	andeq	r4, fp, r0, lsl #2
		_BIC (__pi_uart->flags, UART_FLAGS_IN);
     710:	0000000c 	andeq	r0, r0, ip
     714:	0000034c 	andeq	r0, r0, ip, asr #6
		RISE_N_SHINE;
     718:	00000000 	andeq	r0, r0, r0
     71c:	00000024 	andeq	r0, r0, r4, lsr #32
		i_trigger (devevent (UART_A, READ));
     720:	0000000c 	andeq	r0, r0, ip
     724:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     728:	7c020001 	stcvc	0, cr0, [r2], {1}
     72c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     730:	00000014 	andeq	r0, r0, r4, lsl r0
     734:	00000720 	andeq	r0, r0, r0, lsr #14
     738:	00000000 	andeq	r0, r0, r0
     73c:	00000016 	andeq	r0, r0, r6, lsl r0
     740:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     744:	00018e02 	andeq	r8, r1, r2, lsl #28
     748:	0000000c 	andeq	r0, r0, ip
     74c:	00000720 	andeq	r0, r0, r0, lsr #14
	if (uart_a_room_in_tx && (__pi_uart->flags & UART_FLAGS_OUT)) {
     750:	00000000 	andeq	r0, r0, r0
     754:	0000001a 	andeq	r0, r0, sl, lsl r0
     758:	00000018 	andeq	r0, r0, r8, lsl r0
		i_trigger (devevent (UART_A, WRITE));
     75c:	00000720 	andeq	r0, r0, r0, lsr #14
		_BIC (__pi_uart->flags, UART_FLAGS_OUT);
     760:	00000000 	andeq	r0, r0, r0
     764:	0000000e 	andeq	r0, r0, lr
		RISE_N_SHINE;
     768:	83080e41 	movwhi	r0, #36417	; 0x8e41
     76c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
     770:	000ec3ce 	andeq	ip, lr, lr, asr #7
		i_trigger (devevent (UART_A, WRITE));
     774:	00000018 	andeq	r0, r0, r8, lsl r0
     778:	00000720 	andeq	r0, r0, r0, lsr #14
     77c:	00000000 	andeq	r0, r0, r0
     780:	0000004c 	andeq	r0, r0, ip, asr #32
     784:	83100e41 	tsthi	r0, #1040	; 0x410
     788:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     78c:	00018e02 	andeq	r8, r1, r2, lsl #28
     790:	00000020 	andeq	r0, r0, r0, lsr #32
     794:	00000720 	andeq	r0, r0, r0, lsr #14
     798:	00000000 	andeq	r0, r0, r0
     79c:	0000008c 	andeq	r0, r0, ip, lsl #1
}
     7a0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7a4:	5f018e02 	svcpl	0x00018e02
     7a8:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     7ac:	560b4200 	strpl	r4, [fp], -r0, lsl #4
     7b0:	000ec4ce 	andeq	ip, lr, lr, asr #9
void __buttons_setirq (int val) {
     7b4:	00000020 	andeq	r0, r0, r0, lsr #32
    HWREG( GPIO_BASE + GPIO_O_EVFLAGS31_0 ) = ( 1 << dioNumber );
     7b8:	00000720 	andeq	r0, r0, r0, lsr #14
     7bc:	00000000 	andeq	r0, r0, r0
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7c0:	00000070 	andeq	r0, r0, r0, ror r0
     7c4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     7c8:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
		bn = BUTTON_GPIO (__button_list [i]);
     7cc:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     7d0:	430b4200 	movwmi	r4, #45568	; 0xb200
     7d4:	000ec4ce 	andeq	ip, lr, lr, asr #9
     7d8:	0000003c 	andeq	r0, r0, ip, lsr r0
     7dc:	00000720 	andeq	r0, r0, r0, lsr #14
     7e0:	00000000 	andeq	r0, r0, r0
     7e4:	000000c0 	andeq	r0, r0, r0, asr #1
}
     7e8:	82080e41 	andhi	r0, r8, #1040	; 0x410
     7ec:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
     7f0:	0a84300e 	beq	fe10c830 <_estack+0xde107830>
     7f4:	08860985 	stmeq	r6, {r0, r2, r7, r8, fp}
void __pinlist_setirq (int val) {
     7f8:	06880787 	streq	r0, [r8], r7, lsl #15
	for (i = 0; i < N_PINLIST; i++) {
     7fc:	048a0589 	streq	r0, [sl], #1417	; 0x589
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     800:	0a6b038e 	beq	1ac1640 <__ccfg+0x1aa1698>
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     804:	ce42280e 	cdpgt	8, 4, cr2, cr2, cr14, {0}
	for (i = 0; i < N_PINLIST; i++) {
     808:	c7c8c9ca 	strbgt	ip, [r8, sl, asr #19]
		bn = INPUT_PINLIST_GPIO (__input_pins [i]);
     80c:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     810:	c2c34108 	sbcgt	r4, r3, #8, 2
		HWREGBITW (IOC_BASE + (bn << 2), IOC_IOCFG0_EDGE_IRQ_EN_BITN) =
     814:	0b41000e 	bleq	1040854 <__ccfg+0x10208ac>
     818:	0000001c 	andeq	r0, r0, ip, lsl r0
     81c:	00000720 	andeq	r0, r0, r0, lsr #14
	for (i = 0; i < N_PINLIST; i++) {
     820:	00000000 	andeq	r0, r0, r0
}
     824:	0000006c 	andeq	r0, r0, ip, rrx
     828:	83180e42 	tsthi	r8, #1056	; 0x420
     82c:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     830:	87038604 	strhi	r8, [r3, -r4, lsl #12]
void GPIOIntHandler () {
     834:	00018e02 	andeq	r8, r1, r2, lsl #28
if (buttons_int) {
     838:	0000000c 	andeq	r0, r0, ip
     83c:	00000720 	andeq	r0, r0, r0, lsr #14
	buttons_disable ();
     840:	00000000 	andeq	r0, r0, r0
     844:	00000024 	andeq	r0, r0, r4, lsr #32
	i_trigger ((aword)&__button_list);
     848:	00000018 	andeq	r0, r0, r8, lsl r0
     84c:	00000720 	andeq	r0, r0, r0, lsr #14
     850:	00000000 	andeq	r0, r0, r0
     854:	00000080 	andeq	r0, r0, r0, lsl #1
     858:	83100e42 	tsthi	r0, #1056	; 0x420
     85c:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     860:	00018e02 	andeq	r8, r1, r2, lsl #28
     864:	00000014 	andeq	r0, r0, r4, lsl r0
     868:	00000720 	andeq	r0, r0, r0, lsr #14
     86c:	00000000 	andeq	r0, r0, r0
     870:	00000070 	andeq	r0, r0, r0, ror r0
	RISE_N_SHINE;
     874:	83080e42 	movwhi	r0, #36418	; 0x8e42
     878:	00018e02 	andeq	r8, r1, r2, lsl #28
     87c:	00000018 	andeq	r0, r0, r8, lsl r0
if (pin_sensor_int) {
     880:	00000720 	andeq	r0, r0, r0, lsr #14
     884:	00000000 	andeq	r0, r0, r0
	i_trigger ((aword)(&__input_pins));
     888:	00000078 	andeq	r0, r0, r8, ror r0
     88c:	83100e42 	tsthi	r0, #1056	; 0x420
     890:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     894:	00018e02 	andeq	r8, r1, r2, lsl #28
     898:	00000020 	andeq	r0, r0, r0, lsr #32
     89c:	00000720 	andeq	r0, r0, r0, lsr #14
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	000000bc 	strheq	r0, [r0], -ip
     8a8:	84200e42 	strthi	r0, [r0], #-3650	; 0xfffff1be
     8ac:	86048505 	strhi	r8, [r4], -r5, lsl #10
     8b0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	__pinsen_disable_and_clear;
     8b4:	0e0a6701 	cdpeq	7, 0, cr6, cr10, cr1, {0}
	RISE_N_SHINE;
     8b8:	000b4114 	andeq	r4, fp, r4, lsl r1
     8bc:	00000018 	andeq	r0, r0, r8, lsl r0
     8c0:	00000720 	andeq	r0, r0, r0, lsr #14
}
     8c4:	00000000 	andeq	r0, r0, r0
     8c8:	0000003a 	andeq	r0, r0, sl, lsr r0
     8cc:	83100e41 	tsthi	r0, #1040	; 0x410
     8d0:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     8d4:	00018e02 	andeq	r8, r1, r2, lsl #28
void system_init () {
     8d8:	00000018 	andeq	r0, r0, r8, lsl r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8dc:	00000720 	andeq	r0, r0, r0, lsr #14
	__pi_ondomain (PRCM_DOMAIN_PERIPH);
     8e0:	00000000 	andeq	r0, r0, r0
	PRCMPeripheralRunEnable (PRCM_PERIPH_GPIO);
     8e4:	00000038 	andeq	r0, r0, r8, lsr r0
     8e8:	83100e41 	tsthi	r0, #1040	; 0x410
     8ec:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
	PRCMPeripheralSleepEnable (PRCM_PERIPH_GPIO);
     8f0:	00018e02 	andeq	r8, r1, r2, lsl #28
     8f4:	0000000c 	andeq	r0, r0, ip
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_GPIO);
     8f8:	00000720 	andeq	r0, r0, r0, lsr #14
     8fc:	00000000 	andeq	r0, r0, r0
     900:	0000000a 	andeq	r0, r0, sl
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     904:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     908:	00000720 	andeq	r0, r0, r0, lsr #14
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     90c:	00000000 	andeq	r0, r0, r0
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     910:	0000002c 	andeq	r0, r0, ip, lsr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     914:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     918:	4c018e02 	stcmi	14, cr8, [r1], {2}
		pin = (port_confs [i] >> 19) & 0x1f;
     91c:	000ec4ce 	andeq	ip, lr, lr, asr #9
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     920:	0000001c 	andeq	r0, r0, ip, lsl r0
		pin = (port_confs [i] >> 19) & 0x1f;
     924:	00000720 	andeq	r0, r0, r0, lsr #14
		HWREG (IOC_BASE + (pin << 2)) = port_confs [i] & 0x7f077f3f;
     928:	00000000 	andeq	r0, r0, r0
     92c:	00000060 	andeq	r0, r0, r0, rrx
     930:	83080e41 	movwhi	r0, #36417	; 0x8e41
     934:	61018e02 	tstvs	r1, r2, lsl #28
		if (port_confs [i] & 0x80)
     938:	0ec3ce0a 	cdpeq	14, 12, cr12, cr3, cr10, {0}
    HWREGBITW( GPIO_BASE + GPIO_O_DOE31_0, dioNumber ) = outputEnableValue;
     93c:	000b4300 	andeq	r4, fp, r0, lsl #6
     940:	00000014 	andeq	r0, r0, r4, lsl r0
		if (port_confs [i] & 0x40)
     944:	00000720 	andeq	r0, r0, r0, lsr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     948:	00000000 	andeq	r0, r0, r0
     94c:	00000040 	andeq	r0, r0, r0, asr #32
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     950:	83080e42 	movwhi	r0, #36418	; 0x8e42
	for (int i = 0; i < sizeof (port_confs) / sizeof (lword); i++) {
     954:	00018e02 	andeq	r8, r1, r2, lsl #28
    HWREG( GPIO_BASE + GPIO_O_DOUTSET31_0 ) = ( 1 << dioNumber );
     958:	00000014 	andeq	r0, r0, r4, lsl r0
	all_leds_blink;
     95c:	00000720 	andeq	r0, r0, r0, lsr #14
     960:	00000000 	andeq	r0, r0, r0
     964:	0000002c 	andeq	r0, r0, ip, lsr #32
     968:	83080e42 	movwhi	r0, #36418	; 0x8e42
     96c:	00018e02 	andeq	r8, r1, r2, lsl #28
     970:	0000001c 	andeq	r0, r0, ip, lsl r0
     974:	00000720 	andeq	r0, r0, r0, lsr #14
    HWREG( GPIO_BASE + GPIO_O_DOUTCLR31_0 ) = ( 1 << dioNumber );
     978:	00000000 	andeq	r0, r0, r0
     97c:	0000003c 	andeq	r0, r0, ip, lsr r0
     980:	83180e41 	tsthi	r8, #1040	; 0x410
     984:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     988:	87038604 	strhi	r8, [r3, -r4, lsl #12]
	HWREG (AON_RTC_BASE + AON_RTC_O_CTL) =
     98c:	00018e02 	andeq	r8, r1, r2, lsl #28
		AON_RTC_CHCTL_CH2_CONT_EN_BITN) = 1;
     990:	0000000c 	andeq	r0, r0, ip
     994:	00000720 	andeq	r0, r0, r0, lsr #14
	IntEnable (INT_AON_RTC_COMB);
     998:	00000000 	andeq	r0, r0, r0
     99c:	00000006 	andeq	r0, r0, r6
     9a0:	0000001c 	andeq	r0, r0, ip, lsl r0
	__pi_malloc_init ();
     9a4:	00000720 	andeq	r0, r0, r0, lsr #14
	IntEnable (INT_AON_GPIO_EDGE);
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	00000068 	andeq	r0, r0, r8, rrx
	__pi_ondomain (PRCM_DOMAIN_SERIAL);
     9b0:	83180e41 	tsthi	r8, #1040	; 0x410
	PRCMPeripheralRunEnable (PRCM_PERIPH_UART0);
     9b4:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     9b8:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     9bc:	00018e02 	andeq	r8, r1, r2, lsl #28
	PRCMPeripheralSleepEnable (PRCM_PERIPH_UART0);
     9c0:	00000014 	andeq	r0, r0, r4, lsl r0
     9c4:	00000720 	andeq	r0, r0, r0, lsr #14
	PRCMPeripheralDeepSleepEnable (PRCM_PERIPH_UART0);
     9c8:	00000000 	andeq	r0, r0, r0
     9cc:	00000050 	andeq	r0, r0, r0, asr r0
     9d0:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
	urates [0] = UART_RATE / 100;
     9d4:	00018e02 	andeq	r8, r1, r2, lsl #28
     9d8:	0000002c 	andeq	r0, r0, ip, lsr #32
	reinit_uart ();
     9dc:	00000720 	andeq	r0, r0, r0, lsr #14
	EXTRA_INITIALIZERS;
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0000009c 	muleq	r0, ip, r0
	if (SysCtrlResetSourceGet () == RSTSRC_WAKEUP_FROM_SHUTDOWN) {
     9e8:	84240e42 	strthi	r0, [r4], #-3650	; 0xfffff1be
     9ec:	86088509 	strhi	r8, [r8], -r9, lsl #10
     9f0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
    HWREG(AON_SYSCTL_BASE + AON_SYSCTL_O_SLEEPCTL) = 1;
     9f4:	8a048905 	bhi	122e10 <__ccfg+0x102e68>
     9f8:	8e028b03 	vmlahi.f64	d8, d2, d3
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     9fc:	380e4501 	stmdacc	lr, {r0, r8, sl, lr}
     a00:	240e0a56 	strcs	r0, [lr], #-2646	; 0xfffff5aa
			devinit [i] . init (devinit [i] . param);
     a04:	00000b42 	andeq	r0, r0, r2, asr #22
    HWREG(ui32Base + UART_O_IMSC) |= ui32IntFlags;
     a08:	00000014 	andeq	r0, r0, r4, lsl r0
     a0c:	00000720 	andeq	r0, r0, r0, lsr #14
     a10:	00000000 	andeq	r0, r0, r0
	IntEnable (INT_UART0_COMB);
     a14:	00000040 	andeq	r0, r0, r0, asr #32
     a18:	83080e42 	movwhi	r0, #36418	; 0x8e42
}
     a1c:	00018e02 	andeq	r8, r1, r2, lsl #28
	tci_run_auxiliary_timer ();
     a20:	00000014 	andeq	r0, r0, r4, lsl r0
		diag ("");
     a24:	00000720 	andeq	r0, r0, r0, lsr #14
     a28:	00000000 	andeq	r0, r0, r0
		diag ("PicOS v" SYSVER_S "/" SYSVER_R
     a2c:	00000034 	andeq	r0, r0, r4, lsr r0
			(word)((aword)STACK_END - (aword)(&__bss_end__)));
     a30:	83080e42 	movwhi	r0, #36418	; 0x8e42
		diag ("Leftover RAM: %d bytes",
     a34:	00018e02 	andeq	r8, r1, r2, lsl #28
     a38:	00000018 	andeq	r0, r0, r8, lsl r0
     a3c:	00000720 	andeq	r0, r0, r0, lsr #14
     a40:	00000000 	andeq	r0, r0, r0
     a44:	0000003c 	andeq	r0, r0, ip, lsr r0
     a48:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
     a4c:	57018e02 	strpl	r8, [r1, -r2, lsl #28]
     a50:	000ec4ce 	andeq	ip, lr, lr, asr #9
     a54:	00000018 	andeq	r0, r0, r8, lsl r0
     a58:	00000720 	andeq	r0, r0, r0, lsr #14
     a5c:	00000000 	andeq	r0, r0, r0
     a60:	0000003c 	andeq	r0, r0, ip, lsr r0
     a64:	83100e42 	tsthi	r0, #1056	; 0x420
     a68:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     a6c:	00018e02 	andeq	r8, r1, r2, lsl #28
     a70:	0000000c 	andeq	r0, r0, ip
     a74:	00000720 	andeq	r0, r0, r0, lsr #14
     a78:	000013f0 	strdeq	r1, [r0], -r0
     a7c:	00000002 	andeq	r0, r0, r2
     a80:	0000000c 	andeq	r0, r0, ip
     a84:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a88:	7c020001 	stcvc	0, cr0, [r2], {1}
     a8c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
__attribute__ ((noreturn)) void __pi_release () {
     a90:	0000000c 	andeq	r0, r0, ip
     a94:	00000a80 	andeq	r0, r0, r0, lsl #21
     a98:	000013f2 	strdeq	r1, [r0], -r2
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : "sp");
     a9c:	00000002 	andeq	r0, r0, r2
	check_stack_overflow;
     aa0:	0000000c 	andeq	r0, r0, ip
     aa4:	00000a80 	andeq	r0, r0, r0, lsl #21
     aa8:	000013f4 	strdeq	r1, [r0], -r4
	update_n_wake (MAX_WORD, NO);
     aac:	00000002 	andeq	r0, r0, r2
     ab0:	0000000c 	andeq	r0, r0, ip
     ab4:	00000a80 	andeq	r0, r0, r0, lsl #21
	for_all_tasks (__pi_curr) {
     ab8:	000013f6 	strdeq	r1, [r0], -r6
     abc:	00000002 	andeq	r0, r0, r2
     ac0:	00000014 	andeq	r0, r0, r4, lsl r0
  __ASM volatile ("cpsid i" : : : "memory");
     ac4:	00000a80 	andeq	r0, r0, r0, lsl #21
	__SLEEP;
     ac8:	000013f8 	strdeq	r1, [r0], -r8
     acc:	00000044 	andeq	r0, r0, r4, asr #32
     ad0:	83080e41 	movwhi	r0, #36417	; 0x8e41
     ad4:	00018e02 	andeq	r8, r1, r2, lsl #28
	system_event_count ++;
     ad8:	0000000c 	andeq	r0, r0, ip
     adc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	switch (__pi_systat.effpdm) {
     ae0:	7c020001 	stcvc	0, cr0, [r2], {1}
     ae4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ae8:	0000000c 	andeq	r0, r0, ip
     aec:	00000ad8 	ldrdeq	r0, [r0], -r8
			__WFI ();
     af0:	00000000 	andeq	r0, r0, r0
     af4:	00000002 	andeq	r0, r0, r2
     af8:	00000018 	andeq	r0, r0, r8, lsl r0
	check_stack_overflow;
     afc:	00000ad8 	ldrdeq	r0, [r0], -r8
     b00:	00000000 	andeq	r0, r0, r0
		if (__pi_curr->code != NULL && !waiting (__pi_curr)) {
     b04:	00000058 	andeq	r0, r0, r8, asr r0
     b08:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
			(__pi_curr->code) (tstate (__pi_curr));
     b0c:	86038504 	strhi	r8, [r3], -r4, lsl #10
			goto Redo;
     b10:	00018e02 	andeq	r8, r1, r2, lsl #28
	for_all_tasks (__pi_curr) {
     b14:	0000000c 	andeq	r0, r0, ip
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			HWREG (PRCM_BASE + PRCM_O_PDCTL1VIMS) |=
     b1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     b20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     b24:	0000002c 	andeq	r0, r0, ip, lsr #32
     b28:	00000b14 	andeq	r0, r0, r4, lsl fp
     b2c:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (PRCM_DOMAIN_CPU);
     b30:	000000cc 	andeq	r0, r0, ip, asr #1
     b34:	83100e42 	tsthi	r0, #1056	; 0x420
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     b38:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     b3c:	02018e02 	andeq	r8, r1, #2, 28
			__WFI ();
     b40:	c5ce0a54 	strbgt	r0, [lr, #2644]	; 0xa54
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     b44:	000ec3c4 	andeq	ip, lr, r4, asr #7
     b48:	ce420b44 	vmlsgt.f64	d16, d2, d4
}
     b4c:	0ec3c4c5 	cdpeq	4, 12, cr12, cr3, cr5, {6}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b50:	00000000 	andeq	r0, r0, r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = 0x0;
     b54:	00000024 	andeq	r0, r0, r4, lsr #32
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     b58:	00000b14 	andeq	r0, r0, r4, lsl fp
     b5c:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (__pi_systat.ondmns |
     b60:	00000038 	andeq	r0, r0, r8, lsr r0
     b64:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
     b68:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b6c:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
    HWREG(PRCM_NONBUF_BASE + PRCM_O_CLKLOADCTL) = PRCM_CLKLOADCTL_LOAD;
     b70:	4a0b4300 	bmi	2d1778 <__ccfg+0x2b17d0>
     b74:	0ec4ce0a 	cdpeq	14, 12, cr12, cr4, cr10, {0}
     b78:	000b4300 	andeq	r4, fp, r0, lsl #6
     b7c:	0000000c 	andeq	r0, r0, ip
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     b80:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b84:	7c020001 	stcvc	0, cr0, [r2], {1}
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) &= ~PRCM_RAMRETEN_VIMS_M;
     b88:	000d0c0e 	andeq	r0, sp, lr, lsl #24
			VIMSModeSet (VIMS_BASE, VIMS_MODE_OFF);
     b8c:	00000018 	andeq	r0, r0, r8, lsl r0
     b90:	00000b7c 	andeq	r0, r0, ip, ror fp
     b94:	00001444 	andeq	r1, r0, r4, asr #8
     b98:	00000034 	andeq	r0, r0, r4, lsr r0
     b9c:	84100e45 	ldrhi	r0, [r0], #-3653	; 0xfffff1bb
			SysCtrlSetRechargeBeforePowerDown
     ba0:	86038504 	strhi	r8, [r3], -r4, lsl #10
    HWREG(AON_RTC_BASE + AON_RTC_O_SYNC);
     ba4:	00018e02 	andeq	r8, r1, r2, lsl #28
			HWREG (NVIC_SYS_CTRL) |= NVIC_SYS_CTRL_SLEEPDEEP;
     ba8:	00000018 	andeq	r0, r0, r8, lsl r0
     bac:	00000b7c 	andeq	r0, r0, ip, ror fp
			HWREG (NVIC_SYS_CTRL) &= ~(NVIC_SYS_CTRL_SLEEPDEEP);
     bb0:	00001478 	andeq	r1, r0, r8, ror r4
     bb4:	00000030 	andeq	r0, r0, r0, lsr r0
     bb8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
			VIMSModeSet (VIMS_BASE, VIMS_MODE_ENABLED);
     bbc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
     bc0:	00000001 	andeq	r0, r0, r1
   HWREG( PRCM_BASE + PRCM_O_RAMRETEN ) |= PRCM_RAMRETEN_VIMS_M;
     bc4:	00000014 	andeq	r0, r0, r4, lsl r0
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     bc8:	00000b7c 	andeq	r0, r0, ip, ror fp
     bcc:	000014a8 	andeq	r1, r0, r8, lsr #9
     bd0:	00000018 	andeq	r0, r0, r8, lsl r0
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_AUXCTL, AON_WUC_AUXCTL_AUX_FORCE_ON_BITN) = ui32Mode;
     bd4:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
			while (!(AONWUCPowerStatusGet () &
     bd8:	00018e02 	andeq	r8, r1, r2, lsl #28
			PRCMPowerDomainOn (__pi_systat.ondmns);
     bdc:	0000001c 	andeq	r0, r0, ip, lsl r0
     be0:	00000b7c 	andeq	r0, r0, ip, ror fp
     be4:	000014c0 	andeq	r1, r0, r0, asr #9
			while (PRCMPowerDomainStatus (__pi_systat.ondmns) !=
     be8:	00000054 	andeq	r0, r0, r4, asr r0
     bec:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     bf0:	86058506 	strhi	r8, [r5], -r6, lsl #10
     bf4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_ULDO_BITN) = ui32Enable;
     bf8:	00018e02 	andeq	r8, r1, r2, lsl #28
     bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREG(AON_IOC_BASE + AON_IOC_O_IOCLATCH) = AON_IOC_IOCLATCH_EN;
     c00:	00000b7c 	andeq	r0, r0, ip, ror fp
     c04:	00001514 	andeq	r1, r0, r4, lsl r5
			SysCtrlAdjustRechargeAfterPowerDown ();
     c08:	00000040 	andeq	r0, r0, r0, asr #32
			reinit_uart ();
     c0c:	83180e41 	tsthi	r8, #1040	; 0x410
     c10:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c14:	87038604 	strhi	r8, [r3, -r4, lsl #12]
}
     c18:	00018e02 	andeq	r8, r1, r2, lsl #28
			AUXWUCPowerCtrl (AUX_WUC_POWER_OFF);
     c1c:	00000014 	andeq	r0, r0, r4, lsl r0
     c20:	00000b7c 	andeq	r0, r0, ip, ror fp
			HWREG (AON_WUC_BASE + AON_WUC_O_AUXCTL) &=
     c24:	00001554 	andeq	r1, r0, r4, asr r5
     c28:	00000024 	andeq	r0, r0, r4, lsr #32
     c2c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
			HWREG (AON_WUC_BASE + AON_WUC_O_JTAGCFG) &=
     c30:	00018e02 	andeq	r8, r1, r2, lsl #28
     c34:	00000014 	andeq	r0, r0, r4, lsl r0
     c38:	00000b7c 	andeq	r0, r0, ip, ror fp
			HWREG (AON_EVENT_BASE + AON_EVENT_O_MCUWUSEL) =
     c3c:	00001578 	andeq	r1, r0, r8, ror r5
			HWREG (AON_EVENT_BASE + AON_EVENT_O_AUXWUSEL) =
     c40:	00000014 	andeq	r0, r0, r4, lsl r0
    HWREG(AON_WUC_BASE + AON_WUC_O_JTAGCFG) = 0;
     c44:	83080e41 	movwhi	r0, #36417	; 0x8e41
    HWREGBITW(AON_WUC_BASE + AON_WUC_O_CTL0, AON_WUC_CTL0_PWR_DWN_DIS_BITN) = 0;
     c48:	00018e02 	andeq	r8, r1, r2, lsl #28
     c4c:	0000000c 	andeq	r0, r0, ip
    HWREG(AON_WUC_BASE + AON_WUC_O_SHUTDOWN) = AON_WUC_SHUTDOWN_EN;
     c50:	00000b7c 	andeq	r0, r0, ip, ror fp
     c54:	0000158c 	andeq	r1, r0, ip, lsl #11
    return (HWREG(AON_WUC_BASE + AON_WUC_O_PWRSTAT));
     c58:	00000014 	andeq	r0, r0, r4, lsl r0
			while (AONWUCPowerStatusGet () & AONWUC_AUX_POWER_ON);
     c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
    HWREGBITW(PRCM_BASE + PRCM_O_VDCTL, PRCM_VDCTL_MCU_VD_BITN) = 1;
     c60:	00000b7c 	andeq	r0, r0, ip, ror fp
     c64:	00000000 	andeq	r0, r0, r0
			PRCMPowerDomainOff (
     c68:	00000064 	andeq	r0, r0, r4, rrx
     c6c:	83180e41 	tsthi	r8, #1040	; 0x410
	__SLEEP;
     c70:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c74:	87038604 	strhi	r8, [r3, -r4, lsl #12]
  __ASM volatile ("cpsie i" : : : "memory");
     c78:	00018e02 	andeq	r8, r1, r2, lsl #28
	goto Redo;
     c7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c80:	00000b7c 	andeq	r0, r0, ip, ror fp
     c84:	00000000 	andeq	r0, r0, r0
     c88:	00000128 	andeq	r0, r0, r8, lsr #2
     c8c:	83180e41 	tsthi	r8, #1040	; 0x410
     c90:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     c94:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     c98:	00018e02 	andeq	r8, r1, r2, lsl #28
     c9c:	00000024 	andeq	r0, r0, r4, lsr #32
     ca0:	00000b7c 	andeq	r0, r0, ip, ror fp
     ca4:	00000000 	andeq	r0, r0, r0
     ca8:	000000ec 	andeq	r0, r0, ip, ror #1
     cac:	83280e42 			; <UNDEFINED> instruction: 0x83280e42
     cb0:	8509840a 	strhi	r8, [r9, #-1034]	; 0xfffffbf6
     cb4:	87078608 	strhi	r8, [r7, -r8, lsl #12]
     cb8:	89058806 	stmdbhi	r5, {r1, r2, fp, pc}
     cbc:	8b038a04 	blhi	e34d4 <__ccfg+0xc352c>
     cc0:	00018e02 	andeq	r8, r1, r2, lsl #28
     cc4:	0000000c 	andeq	r0, r0, ip
     cc8:	00000b7c 	andeq	r0, r0, ip, ror fp
     ccc:	00000000 	andeq	r0, r0, r0
     cd0:	00000002 	andeq	r0, r0, r2
     cd4:	0000000c 	andeq	r0, r0, ip
     cd8:	00000b7c 	andeq	r0, r0, ip, ror fp
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	00000004 	andeq	r0, r0, r4
     ce4:	0000000c 	andeq	r0, r0, ip
int main (void) {
     ce8:	00000b7c 	andeq	r0, r0, ip, ror fp
			*((((lword*)STACK_END) - 1) + i) = STACK_SENTINEL;
     cec:	00000000 	andeq	r0, r0, r0
     cf0:	00000014 	andeq	r0, r0, r4, lsl r0
		for (i = 0; i < (STACK_SIZE / sizeof (lword)) - 16; i++)
     cf4:	00000018 	andeq	r0, r0, r8, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     cf8:	00000b7c 	andeq	r0, r0, ip, ror fp
	system_init ();
     cfc:	00000000 	andeq	r0, r0, r0
	tcv_init ();
     d00:	0000001a 	andeq	r0, r0, sl, lsl r0
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT0, AON_EVENT_RTC_COMB_DLY);
     d04:	83080e41 	movwhi	r0, #36417	; 0x8e41
     d08:	4a018e02 	bmi	64518 <__ccfg+0x44570>
	AONEventMcuWakeUpSet (AON_EVENT_MCU_EVENT1, AON_EVENT_IO);
     d0c:	000ec3ce 	andeq	ip, lr, lr, asr #7
     d10:	0000000c 	andeq	r0, r0, ip
     d14:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	__pi_curr = (__pi_pcb_t*) fork (root, 0);
     d18:	7c020001 	stcvc	0, cr0, [r2], {1}
     d1c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	delay (16, 0);
     d20:	0000001c 	andeq	r0, r0, ip, lsl r0
     d24:	00000d10 	andeq	r0, r0, r0, lsl sp
     d28:	000015a0 	andeq	r1, r0, r0, lsr #11
	__pi_release ();
     d2c:	00000078 	andeq	r0, r0, r8, ror r0
     d30:	83180e41 	tsthi	r8, #1040	; 0x410
     d34:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
     d38:	87038604 	strhi	r8, [r3, -r4, lsl #12]
     d3c:	00018e02 	andeq	r8, r1, r2, lsl #28
     d40:	0000000c 	andeq	r0, r0, ip
     d44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
static void killev (__pi_pcb_t *pid) {
     d48:	7c020001 	stcvc	0, cr0, [r2], {1}
	wfun = (aword)(pid->code);
     d4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	for_all_tasks (i) {
     d50:	00000030 	andeq	r0, r0, r0, lsr r0
		for (j = 0; j < nevents (i); j++) {
     d54:	00000d40 	andeq	r0, r0, r0, asr #26
     d58:	00001618 	andeq	r1, r0, r8, lsl r6
     d5c:	00000054 	andeq	r0, r0, r4, asr r0
			    || i->Events [j] . Event == wfun
     d60:	810c0e41 	tsthi	ip, r1, asr #28
		for (j = 0; j < nevents (i); j++) {
     d64:	83028203 	movwhi	r8, #8707	; 0x2203
			if (i->Events [j] . Event == (aword)pid
     d68:	280e4101 	stmdacs	lr, {r0, r8, lr}
     d6c:	06850784 	streq	r0, [r5], r4, lsl #15
     d70:	048e0586 	streq	r0, [lr], #1414	; 0x586
				wakeupev (i, j);
     d74:	421c0e61 	andsmi	r0, ip, #1552	; 0x610
     d78:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
	for_all_tasks (i) {
     d7c:	c3410c0e 	movtgt	r0, #7182	; 0x1c0e
}
     d80:	000ec1c2 	andeq	ip, lr, r2, asr #3
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d84:	0000000c 	andeq	r0, r0, ip
static void qfree (aword *ch) {
     d88:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     d8c:	7c020001 	stcvc	0, cr0, [r2], {1}
	cc = (aword*)(mpools + MA_NP);
     d90:	000d0c0e 	andeq	r0, sp, lr, lsl #24
	m_setnextp (ch, chunk);
     d94:	00000030 	andeq	r0, r0, r0, lsr r0
	m_setnextp (cc, ch);
     d98:	00000d84 	andeq	r0, r0, r4, lsl #27
}
     d9c:	0000166c 	andeq	r1, r0, ip, ror #12
		if (chunk + m_size (chunk) + m_hdrlen == ch) {
     da0:	00000060 	andeq	r0, r0, r0, rrx
     da4:	810c0e41 	tsthi	ip, r1, asr #28
     da8:	83028203 	movwhi	r8, #8707	; 0x2203
			m_setnextp (cc, m_nextp (chunk));
     dac:	200e4101 	andcs	r4, lr, r1, lsl #2
			m_size (chunk) += m_hdrlen + m_size (ch);
     db0:	05850684 	streq	r0, [r5, #1668]	; 0x684
     db4:	0a64048e 	beq	1901ff4 <__ccfg+0x18e204c>
     db8:	ce42180e 	cdpgt	8, 4, cr1, cr2, cr14, {0}
     dbc:	0c0ec4c5 	cfstrseq	mvf12, [lr], {197}	; 0xc5
	for (chunk = mpools [MA_NP]; chunk != NULL; chunk = m_nextp (chunk)) {
     dc0:	c1c2c341 	bicgt	ip, r2, r1, asr #6
		} else if (ch + m_size (ch) + m_hdrlen == chunk) {
     dc4:	0b41000e 	bleq	1040e04 <__ccfg+0x1020e5c>
     dc8:	0000000c 	andeq	r0, r0, ip
     dcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
			m_setnextp (cc, m_nextp (chunk));
     dd0:	7c020001 	stcvc	0, cr0, [r2], {1}
			m_size (ch) += m_hdrlen + m_size (chunk);
     dd4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     dd8:	00000028 	andeq	r0, r0, r8, lsr #32
     ddc:	00000dc8 	andeq	r0, r0, r8, asr #27
     de0:	000016cc 	andeq	r1, r0, ip, asr #13
     de4:	00000070 	andeq	r0, r0, r0, ror r0
     de8:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
			if (m_size (chunk) >= m_size (ch))
     dec:	86048505 	strhi	r8, [r4], -r5, lsl #10
     df0:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
     df4:	0e0a4701 	cdpeq	7, 0, cr4, cr10, cr1, {0}
		chunk = m_nextp (chunk))
     df8:	c7ce4214 	bfigt	r4, r4, #4, #11
     dfc:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
     e00:	000b4200 	andeq	r4, fp, r0, lsl #4
    return((HWREG(ui32Base + UART_O_FR) & UART_FR_BUSY) ?
     e04:	0000000c 	andeq	r0, r0, ip
	diag_wait (a);
     e08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	diag_wchar (c, a);
     e0c:	7c020001 	stcvc	0, cr0, [r2], {1}
     e10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
}
     e14:	00000028 	andeq	r0, r0, r8, lsr #32
     e18:	00000e04 	andeq	r0, r0, r4, lsl #28
	syserror (ESTATE, "state");
     e1c:	0000173c 	andeq	r1, r0, ip, lsr r7
     e20:	0000011c 	andeq	r0, r0, ip, lsl r1
     e24:	84200e41 	strthi	r0, [r0], #-3649	; 0xfffff1bf
     e28:	86048505 	strhi	r8, [r4], -r5, lsl #10
void update_n_wake (word min, Boolean force) {
     e2c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
	if (TCI_UPDATE_DELAY_TICKS (force))
     e30:	0e7c0201 	cdpeq	2, 7, cr0, cr12, cr1, {0}
     e34:	c7ce4214 	bfigt	r4, r4, #4, #11
     e38:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
	if (twakecnd (__pi_old, znew, __pi_mintk)) {
     e3c:	00000000 	andeq	r0, r0, r0
     e40:	0000000c 	andeq	r0, r0, ip
     e44:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     e48:	7c020001 	stcvc	0, cr0, [r2], {1}
     e4c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     e50:	0000000c 	andeq	r0, r0, ip
     e54:	00000e40 	andeq	r0, r0, r0, asr #28
     e58:	00001858 	andeq	r1, r0, r8, asr r8
     e5c:	00000020 	andeq	r0, r0, r0, lsr #32
     e60:	00000028 	andeq	r0, r0, r8, lsr #32
     e64:	00000e40 	andeq	r0, r0, r0, asr #28
     e68:	00001878 	andeq	r1, r0, r8, ror r8
     e6c:	00000230 	andeq	r0, r0, r0, lsr r2
		for_all_tasks (i) {
     e70:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
	__pi_mintk = znew + min;
     e74:	86078508 	strhi	r8, [r7], -r8, lsl #10
     e78:	88058706 	stmdahi	r5, {r1, r2, r8, r9, sl, pc}
			if (!twaiting (i))
     e7c:	8a038904 	bhi	e3294 <__ccfg+0xc32ec>
     e80:	02018e02 	andeq	r8, r1, #2, 28
			if (twakecnd (__pi_old, znew, i->Timer)) {
     e84:	200e0a4f 	andcs	r0, lr, pc, asr #20
     e88:	00000b42 	andeq	r0, r0, r2, asr #22
     e8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     e90:	00000e40 	andeq	r0, r0, r0, asr #28
     e94:	00001aa8 	andeq	r1, r0, r8, lsr #21
     e98:	00000050 	andeq	r0, r0, r0, asr r0
     e9c:	84180e42 	ldrhi	r0, [r8], #-3650	; 0xfffff1be
     ea0:	86058506 	strhi	r8, [r5], -r6, lsl #10
     ea4:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
     ea8:	00018e02 	andeq	r8, r1, r2, lsl #28
     eac:	0000000c 	andeq	r0, r0, ip
     eb0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
				wakeuptm (i);
     eb4:	7c020001 	stcvc	0, cr0, [r2], {1}
     eb8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
		for_all_tasks (i) {
     ebc:	00000020 	andeq	r0, r0, r0, lsr #32
				d = i->Timer - znew;
     ec0:	00000eac 	andeq	r0, r0, ip, lsr #29
     ec4:	00001af8 	strdeq	r1, [r0], -r8
     ec8:	00000390 	muleq	r0, r0, r3
		if ((word)(__pi_mintk - znew) < min) 
     ecc:	841c0e43 	ldrhi	r0, [ip], #-3651	; 0xfffff1bd
     ed0:	86068507 	strhi	r8, [r6], -r7, lsl #10
     ed4:	88048705 	stmdahi	r4, {r0, r2, r8, r9, sl, pc}
	__pi_old = znew;
     ed8:	8e028903 	vmlahi.f16	s16, s4, s6	; <UNPREDICTABLE>
}
     edc:	00000001 	andeq	r0, r0, r1
	TCI_RUN_DELAY_TIMER;
     ee0:	0000000c 	andeq	r0, r0, ip
}
     ee4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     ee8:	7c020001 	stcvc	0, cr0, [r2], {1}
     eec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     ef0:	0000000c 	andeq	r0, r0, ip
     ef4:	00000ee0 	andeq	r0, r0, r0, ror #29
void proceed (word state) {
     ef8:	00001e88 	andeq	r1, r0, r8, lsl #29
	prcdstate (__pi_curr, state);
     efc:	00000030 	andeq	r0, r0, r0, lsr r0
     f00:	0000000c 	andeq	r0, r0, ip
	release;
     f04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f08:	7c020001 	stcvc	0, cr0, [r2], {1}
void __pi_wait (aword event, word state) {
     f0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f10:	0000000c 	andeq	r0, r0, ip
	if (j >= MAX_EVENTS_PER_TASK)
     f14:	00000f00 	andeq	r0, r0, r0, lsl #30
     f18:	00000000 	andeq	r0, r0, r0
     f1c:	00000020 	andeq	r0, r0, r0, lsr #32
		syserror (ENEVENTS, "sw");
     f20:	0000000c 	andeq	r0, r0, ip
     f24:	00000f00 	andeq	r0, r0, r0, lsl #30
	setestate (__pi_curr->Events [j], state, event);
     f28:	00001eb8 			; <UNDEFINED> instruction: 0x00001eb8
	incwait (__pi_curr);
     f2c:	00000018 	andeq	r0, r0, r8, lsl r0
	setestate (__pi_curr->Events [j], state, event);
     f30:	0000000c 	andeq	r0, r0, ip
}
     f34:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     f38:	7c020001 	stcvc	0, cr0, [r2], {1}
     f3c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     f40:	0000000c 	andeq	r0, r0, ip
	for_all_tasks (i) {
     f44:	00000f30 	andeq	r0, r0, r0, lsr pc
		for (j = 0; j < nevents (i); j++) {
     f48:	00001ed0 	ldrdeq	r1, [r0], -r0
     f4c:	00000008 	andeq	r0, r0, r8
     f50:	0000000c 	andeq	r0, r0, ip
     f54:	00000f30 	andeq	r0, r0, r0, lsr pc
			if (i->Events [j] . Event == event) {
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	00000006 	andeq	r0, r0, r6
     f60:	0000000c 	andeq	r0, r0, ip
				wakeupev (i, j);
     f64:	00000f30 	andeq	r0, r0, r0, lsr pc
     f68:	00001ed8 	ldrdeq	r1, [r0], -r8
	for_all_tasks (i) {
     f6c:	00000008 	andeq	r0, r0, r8
}
     f70:	0000000c 	andeq	r0, r0, ip
aword __pi_join (aword pid, word st) {
     f74:	00000f30 	andeq	r0, r0, r0, lsr pc
	for_all_tasks (i) {
     f78:	00000000 	andeq	r0, r0, r0
     f7c:	00000006 	andeq	r0, r0, r6
	return 0;
     f80:	0000000c 	andeq	r0, r0, ip
		if ((aword)i == pid) {
     f84:	00000f30 	andeq	r0, r0, r0, lsr pc
			__pi_wait (pid, st);
     f88:	00000000 	andeq	r0, r0, r0
}
     f8c:	00000008 	andeq	r0, r0, r8
	for_all_tasks (i) {
     f90:	0000000c 	andeq	r0, r0, ip
     f94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void delay (word d, word state) {
     f98:	7c020001 	stcvc	0, cr0, [r2], {1}
	settstate (__pi_curr, state);
     f9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fa0:	00000018 	andeq	r0, r0, r8, lsl r0
     fa4:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     fa8:	00001ee0 	andeq	r1, r0, r0, ror #29
	update_n_wake (d, YES);
     fac:	000000d4 	ldrdeq	r0, [r0], -r4
     fb0:	83100e41 	tsthi	r0, #1040	; 0x410
	__pi_curr->Timer = __pi_old + d;
     fb4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
     fb8:	00018e02 	andeq	r8, r1, r2, lsl #28
	inctimer (__pi_curr);
     fbc:	00000014 	andeq	r0, r0, r4, lsl r0
     fc0:	00000f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
     fc4:	00001fb4 			; <UNDEFINED> instruction: 0x00001fb4
}
     fc8:	000000a4 	andeq	r0, r0, r4, lsr #1
     fcc:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
	if (fun == NULL)
     fd0:	00018e02 	andeq	r8, r1, r2, lsl #28
		return (int) __pi_curr;
     fd4:	0000000c 	andeq	r0, r0, ip
     fd8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
	for_all_tasks (i)
     fdc:	7c020001 	stcvc	0, cr0, [r2], {1}
}
     fe0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     fe4:	00000018 	andeq	r0, r0, r8, lsl r0
	for_all_tasks (i)
     fe8:	00000fd4 	ldrdeq	r0, [r0], -r4
     fec:	00002058 	andeq	r2, r0, r8, asr r0
     ff0:	0000007c 	andeq	r0, r0, ip, ror r0
int __pi_strlen (const char *s) {
     ff4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
	for (i = 0; *(s+i) != '\0'; i++);
     ff8:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
}
     ffc:	00000001 	andeq	r0, r0, r1
	for (i = 0; *(s+i) != '\0'; i++);
    1000:	00000014 	andeq	r0, r0, r4, lsl r0
	while (n--)
    1004:	00000fd4 	ldrdeq	r0, [r0], -r4
    1008:	000020d4 	ldrdeq	r2, [r0], -r4
		*dest++ = *src++;
    100c:	000000ac 	andeq	r0, r0, ip, lsr #1
    1010:	84080e45 	strhi	r0, [r8], #-3653	; 0xfffff1bb
    1014:	00018e02 	andeq	r8, r1, r2, lsl #28
void adddevfunc (devreqfun_t rf, int loc) {
    1018:	0000000c 	andeq	r0, r0, ip
		syserror (EREQPAR, "addv");
    101c:	00000fd4 	ldrdeq	r0, [r0], -r4
		syserror (ERESOURCE, "addv");
    1020:	00002180 	andeq	r2, r0, r0, lsl #3
	if (ioreq [loc] != NULL)
    1024:	0000005c 	andeq	r0, r0, ip, asr r0
    1028:	0000000c 	andeq	r0, r0, ip
		syserror (ERESOURCE, "addv");
    102c:	00000fd4 	ldrdeq	r0, [r0], -r4
	ioreq [loc] = rf;
    1030:	000021dc 	ldrdeq	r2, [r0], -ip
}
    1034:	00000018 	andeq	r0, r0, r8, lsl r0
    1038:	0000000c 	andeq	r0, r0, ip
sint io (word retry, word dev, word operation, char *buf, word len) {
    103c:	00000fd4 	ldrdeq	r0, [r0], -r4
    1040:	00000000 	andeq	r0, r0, r0
    1044:	00000010 	andeq	r0, r0, r0, lsl r0
    1048:	0000000c 	andeq	r0, r0, ip
	if (dev >= MAX_DEVICES || ioreq [dev] == NULL)
    104c:	00000fd4 	ldrdeq	r0, [r0], -r4
    1050:	000021f4 	strdeq	r2, [r0], -r4
    1054:	00000010 	andeq	r0, r0, r0, lsl r0
		syserror (ENODEVICE, "io");
    1058:	0000000c 	andeq	r0, r0, ip
    105c:	00000fd4 	ldrdeq	r0, [r0], -r4
	if (len == 0)
    1060:	00002204 	andeq	r2, r0, r4, lsl #4
	ret = (ioreq [dev]) (operation, buf, len);
    1064:	00000014 	andeq	r0, r0, r4, lsl r0
    1068:	00000018 	andeq	r0, r0, r8, lsl r0
	if (ret >= 0)
    106c:	00000fd4 	ldrdeq	r0, [r0], -r4
	if (ret == -1) {
    1070:	00002218 	andeq	r2, r0, r8, lsl r2
    1074:	00000064 	andeq	r0, r0, r4, rrx
		if (retry == WNONE)
    1078:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
		iowait (dev, operation, retry);
    107c:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1080:	00018e02 	andeq	r8, r1, r2, lsl #28
    1084:	0000000c 	andeq	r0, r0, ip
			release;
    1088:	00000fd4 	ldrdeq	r0, [r0], -r4
	if (ret == -2) {
    108c:	0000227c 	andeq	r2, r0, ip, ror r2
		if (retry != WNONE) {
    1090:	00000014 	andeq	r0, r0, r4, lsl r0
    1094:	0000000c 	andeq	r0, r0, ip
			iowait (dev, operation, retry);
    1098:	00000fd4 	ldrdeq	r0, [r0], -r4
    109c:	00002290 	muleq	r0, r0, r2
			(ioreq [dev]) (NONE, buf, len);
    10a0:	00000014 	andeq	r0, r0, r4, lsl r0
    10a4:	0000000c 	andeq	r0, r0, ip
    10a8:	00000fd4 	ldrdeq	r0, [r0], -r4
		(ioreq [dev]) (NONE, buf, len);
    10ac:	000022a4 	andeq	r2, r0, r4, lsr #5
    10b0:	00000014 	andeq	r0, r0, r4, lsl r0
    10b4:	0000000c 	andeq	r0, r0, ip
}
    10b8:	00000fd4 	ldrdeq	r0, [r0], -r4
	if (retry != WNONE) {
    10bc:	000022b8 			; <UNDEFINED> instruction: 0x000022b8
		delay (-ret - 2, retry);
    10c0:	00000028 	andeq	r0, r0, r8, lsr #32
    10c4:	0000000c 	andeq	r0, r0, ip
    10c8:	00000fd4 	ldrdeq	r0, [r0], -r4
    10cc:	000022e0 	andeq	r2, r0, r0, ror #5
		release;
    10d0:	00000010 	andeq	r0, r0, r0, lsl r0
    10d4:	0000000c 	andeq	r0, r0, ip
	if ((mlen = (aword)MALLOC_LENGTH) < 256)
    10d8:	00000fd4 	ldrdeq	r0, [r0], -r4
    10dc:	000022f0 	strdeq	r2, [r0], -r0
    10e0:	0000002c 	andeq	r0, r0, ip, lsr #32
    10e4:	0000000c 	andeq	r0, r0, ip
    10e8:	00000fd4 	ldrdeq	r0, [r0], -r4
		syserror (ERESOURCE, "mal1");
    10ec:	0000231c 	andeq	r2, r0, ip, lsl r3
    10f0:	00000014 	andeq	r0, r0, r4, lsl r0
	mpools [0] = ((aword*)MALLOC_START) + m_hdrlen;
    10f4:	0000000c 	andeq	r0, r0, ip
    10f8:	00000fd4 	ldrdeq	r0, [r0], -r4
	m_magic (mpools [0]) = MALLOC_MAGIC;
    10fc:	00002330 	andeq	r2, r0, r0, lsr r3
	m_size (mpools [0]) = mlen - m_hdrlen;
    1100:	00000014 	andeq	r0, r0, r4, lsl r0
	m_magic (mpools [0]) = MALLOC_MAGIC;
    1104:	0000001c 	andeq	r0, r0, ip, lsl r0
	mnfree [0] = mcfree [0] = m_size (mpools [0]);
    1108:	00000fd4 	ldrdeq	r0, [r0], -r4
    110c:	00002344 	andeq	r2, r0, r4, asr #6
}
    1110:	00000110 	andeq	r0, r0, r0, lsl r1
    1114:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
    1118:	86038504 	strhi	r8, [r3], -r4, lsl #10
    111c:	02018e02 	andeq	r8, r1, #2, 28
    1120:	00100e76 	andseq	r0, r0, r6, ror lr
    1124:	00000018 	andeq	r0, r0, r8, lsl r0
void __pi_free (aword *ch) {
    1128:	00000fd4 	ldrdeq	r0, [r0], -r4
	if ((m_size (ch) & MALLOC_UMASK) == 0)
    112c:	00002454 	andeq	r2, r0, r4, asr r4
    1130:	00000064 	andeq	r0, r0, r4, rrx
		syserror (EMALLOC, "malg");
    1134:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    1138:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
	mcfree [MA_NP] += m_size (ch);
    113c:	00000001 	andeq	r0, r0, r1
		m_size (ch) ^= MALLOC_UMASK;
    1140:	0000000c 	andeq	r0, r0, ip
    1144:	00000fd4 	ldrdeq	r0, [r0], -r4
	mcfree [MA_NP] += m_size (ch);
    1148:	000024b8 			; <UNDEFINED> instruction: 0x000024b8
	QFREE;
    114c:	00000028 	andeq	r0, r0, r8, lsr #32
	if (mevent [MA_NP] . nwait) {
    1150:	00000014 	andeq	r0, r0, r4, lsl r0
    1154:	00000fd4 	ldrdeq	r0, [r0], -r4
		trigger ((aword)(&(mevent [MA_NP])));
    1158:	000024e0 	andeq	r2, r0, r0, ror #9
		mevent [MA_NP] . nwait --;
    115c:	00000150 	andeq	r0, r0, r0, asr r1
}
    1160:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    1164:	00018e02 	andeq	r8, r1, r2, lsl #28
    1168:	0000000c 	andeq	r0, r0, ip
    116c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
void kill (aword pid) {
    1170:	7c020001 	stcvc	0, cr0, [r2], {1}
		pid = (aword) __pi_curr;
    1174:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1178:	0000001c 	andeq	r0, r0, ip, lsl r0
	for_all_tasks (i) {
    117c:	00001168 	andeq	r1, r0, r8, ror #2
	syserror (EREQPAR, "kpi");
    1180:	00000000 	andeq	r0, r0, r0
    1184:	000000f4 	strdeq	r0, [r0], -r4
		if ((aword)i == pid) {
    1188:	84180e44 	ldrhi	r0, [r8], #-3652	; 0xfffff1bc
    118c:	86058506 	strhi	r8, [r5], -r6, lsl #10
				__PCB = i->Next;
    1190:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
			killev (i);
    1194:	00018e02 	andeq	r8, r1, r2, lsl #28
			ufree (i);
    1198:	00000028 	andeq	r0, r0, r8, lsr #32
			if (i == __pi_curr)
    119c:	00001168 	andeq	r1, r0, r8, ror #2
    11a0:	00002630 	andeq	r2, r0, r0, lsr r6
				release;
    11a4:	00000220 	andeq	r0, r0, r0, lsr #4
				j->Next = i->Next;
    11a8:	84300e42 	ldrthi	r0, [r0], #-3650	; 0xfffff1be
    11ac:	86088509 	strhi	r8, [r8], -r9, lsl #10
    11b0:	88068707 	stmdahi	r6, {r0, r1, r2, r8, r9, sl, pc}
}
    11b4:	8a048905 	bhi	1235d0 <__ccfg+0x103628>
    11b8:	8e028b03 	vmlahi.f64	d8, d2, d3
    11bc:	0eee0201 	cdpeq	2, 14, cr0, cr14, cr1, {0}
	if (size < 8)
    11c0:	00000024 	andeq	r0, r0, r4, lsr #32
		_size = 2;
    11c4:	00000014 	andeq	r0, r0, r4, lsl r0
	for (chunk = mpools [MA_NP]; chunk != NULL; cc = chunk,
    11c8:	00001168 	andeq	r1, r0, r8, ror #2
		_size = (((aword)size) + 3) >> 2;
    11cc:	00002850 	andeq	r2, r0, r0, asr r8
		if (m_magic (chunk) != MALLOC_MAGIC)
    11d0:	00000060 	andeq	r0, r0, r0, rrx
		_size = (((aword)size) + 3) >> 2;
    11d4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
		if (mevent [MA_NP] . nfail != 255)
    11d8:	00018e02 	andeq	r8, r1, r2, lsl #28
    11dc:	00000014 	andeq	r0, r0, r4, lsl r0
			mevent [MA_NP] . nfail ++;
    11e0:	00001168 	andeq	r1, r0, r8, ror #2
		mnfree [MA_NP] = 0;
    11e4:	00000000 	andeq	r0, r0, r0
    11e8:	00000078 	andeq	r0, r0, r8, ror r0
		if (m_magic (chunk) != MALLOC_MAGIC)
    11ec:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    11f0:	00018e02 	andeq	r8, r1, r2, lsl #28
			syserror (EMALLOC, "malc");
    11f4:	0000000c 	andeq	r0, r0, ip
    11f8:	00001168 	andeq	r1, r0, r8, ror #2
		if (m_size (chunk) >= _size)
    11fc:	000028b0 			; <UNDEFINED> instruction: 0x000028b0
    1200:	00000018 	andeq	r0, r0, r8, lsl r0
		chunk = m_nextp (chunk)) {
    1204:	0000000c 	andeq	r0, r0, ip
		m_setnextp (cc, m_nextp (chunk));
    1208:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
		if ((waste = m_size (chunk) - _size) > MAX_MALLOC_WASTE) {
    120c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1210:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1214:	0000000c 	andeq	r0, r0, ip
			cc = chunk + _size + m_hdrlen;
    1218:	00001204 	andeq	r1, r0, r4, lsl #4
    121c:	00000000 	andeq	r0, r0, r0
			m_size (cc) = waste - m_hdrlen;
    1220:	00000010 	andeq	r0, r0, r0, lsl r0
			QFREE;
    1224:	0000000c 	andeq	r0, r0, ip
		mevent [MA_NP] . nfail = 0;
    1228:	00001204 	andeq	r1, r0, r4, lsl #4
		mcfree [MA_NP] -= m_size (chunk);
    122c:	00000000 	andeq	r0, r0, r0
    1230:	00000018 	andeq	r0, r0, r8, lsl r0
    1234:	0000000c 	andeq	r0, r0, ip
    1238:	00001204 	andeq	r1, r0, r4, lsl #4
		m_size (chunk) |= MALLOC_UMASK;
    123c:	000028c8 	andeq	r2, r0, r8, asr #17
		if (mnfree [MA_NP] > mcfree [MA_NP])
    1240:	0000004c 	andeq	r0, r0, ip, asr #32
		m_size (chunk) |= MALLOC_UMASK;
    1244:	00000014 	andeq	r0, r0, r4, lsl r0
			mnfree [MA_NP] = mcfree [MA_NP];
    1248:	00001204 	andeq	r1, r0, r4, lsl #4
}
    124c:	00000000 	andeq	r0, r0, r0
    1250:	00000030 	andeq	r0, r0, r0, lsr r0
    1254:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    1258:	00018e02 	andeq	r8, r1, r2, lsl #28
    125c:	00000018 	andeq	r0, r0, r8, lsl r0
    1260:	00001204 	andeq	r1, r0, r4, lsl #4
    1264:	00002914 	andeq	r2, r0, r4, lsl r9
aword __pi_fork (fsmcode func, aword data) {
    1268:	0000006c 	andeq	r0, r0, ip, rrx
	if ((i = (__pi_pcb_t*) umalloc (sizeof (__pi_pcb_t))) == NULL)
    126c:	83100e41 	tsthi	r0, #1040	; 0x410
    1270:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    1274:	00018e02 	andeq	r8, r1, r2, lsl #28
		if ((j = __PCB) == NULL)
    1278:	00000014 	andeq	r0, r0, r4, lsl r0
	i->Next = NULL;
    127c:	00001204 	andeq	r1, r0, r4, lsl #4
	i->data = data;
    1280:	00002980 	andeq	r2, r0, r0, lsl #19
		if ((j = __PCB) == NULL)
    1284:	00000016 	andeq	r0, r0, r6, lsl r0
}
    1288:	83080e41 	movwhi	r0, #36417	; 0x8e41
			for (; j->Next != NULL; j = j->Next);
    128c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1290:	0000000c 	andeq	r0, r0, ip
	return (aword) i;
    1294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1298:	7c020001 	stcvc	0, cr0, [r2], {1}
	if (mevent [MA_NP] . nwait != 255)
    129c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    12a0:	00000024 	andeq	r0, r0, r4, lsr #32
    12a4:	00001290 	muleq	r0, r0, r2
		mevent [MA_NP] . nwait ++;
    12a8:	00002998 	muleq	r0, r8, r9
	wait ((aword)(&(mevent [MA_NP])), state);
    12ac:	00000028 	andeq	r0, r0, r8, lsr #32
    12b0:	83100e41 	tsthi	r0, #1040	; 0x410
void diag (const char *mess, ...) {
    12b4:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
    12b8:	4e018e02 	cdpmi	14, 0, cr8, cr1, cr2, {0}
    12bc:	c4c5ce0a 	strbgt	ip, [r5], #3594	; 0xe0a
	diag_disable_int (a, is);
    12c0:	42000ec3 	andmi	r0, r0, #3120	; 0xc30
    12c4:	0000000b 	andeq	r0, r0, fp
    12c8:	0000000c 	andeq	r0, r0, ip
				d = (bc == 16) ? 10000 : 1000000000;
    12cc:	00001290 	muleq	r0, r0, r2
	diag_disable_int (a, is);
    12d0:	000029c0 	andeq	r2, r0, r0, asr #19
	while (*mess != '\0') {
    12d4:	00000008 	andeq	r0, r0, r8
	dgout ('\r');
    12d8:	0000000c 	andeq	r0, r0, ip
	dgout ('\n');
    12dc:	00001290 	muleq	r0, r0, r2
    12e0:	00000000 	andeq	r0, r0, r0
    12e4:	00000022 	andeq	r0, r0, r2, lsr #32
	diag_wait (a);
    12e8:	00000018 	andeq	r0, r0, r8, lsl r0
	diag_enable_int (a, is);
    12ec:	00001290 	muleq	r0, r0, r2
    12f0:	00000000 	andeq	r0, r0, r0
}
    12f4:	0000002e 	andeq	r0, r0, lr, lsr #32
    12f8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    12fc:	54018e02 	strpl	r8, [r1], #-3586	; 0xfffff1fe
		if (*mess == '%') {
    1300:	000ec4ce 	andeq	ip, lr, lr, asr #9
    1304:	00000018 	andeq	r0, r0, r8, lsl r0
			if (*mess == 'l') {
    1308:	00001290 	muleq	r0, r0, r2
    130c:	00000000 	andeq	r0, r0, r0
				mess++;
    1310:	00000034 	andeq	r0, r0, r4, lsr r0
				val = va_arg (ap, lword);
    1314:	83100e41 	tsthi	r0, #1040	; 0x410
				bc = 32;
    1318:	85038404 	strhi	r8, [r3, #-1028]	; 0xfffffbfc
				bc = 16;
    131c:	00018e02 	andeq	r8, r1, r2, lsl #28
			switch (*mess) {
    1320:	00000018 	andeq	r0, r0, r8, lsl r0
    1324:	00001290 	muleq	r0, r0, r2
    1328:	00000000 	andeq	r0, r0, r0
				dgout ('%');
    132c:	00000040 	andeq	r0, r0, r0, asr #32
    1330:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
				dgout (*mess);
    1334:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1338:	00018e02 	andeq	r8, r1, r2, lsl #28
			switch (*mess) {
    133c:	0000000c 	andeq	r0, r0, ip
					v = __pi_hex_enc_table [
    1340:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
					i += 4;
    1344:	7c020001 	stcvc	0, cr0, [r2], {1}
					(val >> (bc - i)) & 0xf];
    1348:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    134c:	0000001c 	andeq	r0, r0, ip, lsl r0
					dgout (v);
    1350:	0000133c 	andeq	r1, r0, ip, lsr r3
    1354:	000029c8 	andeq	r2, r0, r8, asr #19
				while (i < bc) {
    1358:	0000005c 	andeq	r0, r0, ip, asr r0
			mess++;
    135c:	84180e41 	ldrhi	r0, [r8], #-3649	; 0xfffff1bf
					d /= 10;
    1360:	86038504 	strhi	r8, [r3], -r4, lsl #10
				if ((val >> (bc - 1)) & 1) {
    1364:	67018e02 	strvs	r8, [r1, -r2, lsl #28]
    1368:	0000100e 	andeq	r1, r0, lr
					dgout ('-');
    136c:	00000014 	andeq	r0, r0, r4, lsl r0
    1370:	0000133c 	andeq	r1, r0, ip, lsr r3
						val |= 0xffff0000;
    1374:	00002a24 	andeq	r2, r0, r4, lsr #20
    1378:	0000002c 	andeq	r0, r0, ip, lsr #32
    137c:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
				d = (bc == 16) ? 10000 : 1000000000;
    1380:	00018e02 	andeq	r8, r1, r2, lsl #28
    1384:	00000018 	andeq	r0, r0, r8, lsl r0
    1388:	0000133c 	andeq	r1, r0, ip, lsr r3
					v = (word) (val / d);
    138c:	00000000 	andeq	r0, r0, r0
					if (v || d == 1) break;
    1390:	00000090 	muleq	r0, r0, r0
    1394:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
					d /= 10;
    1398:	86038504 	strhi	r8, [r3], -r4, lsl #10
				d = (bc == 16) ? 10000 : 1000000000;
    139c:	00018e02 	andeq	r8, r1, r2, lsl #28
					dgout (v + '0');
    13a0:	00000014 	andeq	r0, r0, r4, lsl r0
    13a4:	0000133c 	andeq	r1, r0, ip, lsr r3
    13a8:	00000000 	andeq	r0, r0, r0
					d /= 10;
    13ac:	00000018 	andeq	r0, r0, r8, lsl r0
					val = val - (v * d);
    13b0:	83080e41 	movwhi	r0, #36417	; 0x8e41
					if (d == 0) break;
    13b4:	00018e02 	andeq	r8, r1, r2, lsl #28
					v = (word) (val / d);
    13b8:	00000014 	andeq	r0, r0, r4, lsl r0
    13bc:	0000133c 	andeq	r1, r0, ip, lsr r3
				if (bc == 16)
    13c0:	00000000 	andeq	r0, r0, r0
				d = (bc == 16) ? 10000 : 1000000000;
    13c4:	00000060 	andeq	r0, r0, r0, rrx
					val &= 0xffff;
    13c8:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
					dgout (*s);
    13cc:	00018e02 	andeq	r8, r1, r2, lsl #28
					s++;
    13d0:	00000014 	andeq	r0, r0, r4, lsl r0
				while (*s != '\0') {
    13d4:	0000133c 	andeq	r1, r0, ip, lsr r3
    13d8:	00000000 	andeq	r0, r0, r0
			dgout (*mess++);
    13dc:	00000034 	andeq	r0, r0, r4, lsr r0
    13e0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
    13e4:	00018e02 	andeq	r8, r1, r2, lsl #28
    13e8:	00000018 	andeq	r0, r0, r8, lsl r0
    13ec:	0000133c 	andeq	r1, r0, ip, lsr r3
}
    13f0:	00000000 	andeq	r0, r0, r0
    while(1)
    13f4:	00000038 	andeq	r0, r0, r8, lsr r0
{
    13f8:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
    SetupTrimDevice();
    13fc:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    pui32Src = &_etext;
    1400:	00000001 	andeq	r0, r0, r1
    for(pui32Dest = &_data; pui32Dest < &_edata; )
    1404:	0000000c 	andeq	r0, r0, ip
    __asm("    ldr     r0, =_bss\n"
    1408:	0000133c 	andeq	r1, r0, ip, lsr r3
    140c:	00000000 	andeq	r0, r0, r0
    1410:	0000000c 	andeq	r0, r0, ip
    1414:	00000018 	andeq	r0, r0, r8, lsl r0
    1418:	0000133c 	andeq	r1, r0, ip, lsr r3
   main();
    141c:	00000000 	andeq	r0, r0, r0
    FaultISR();
    1420:	00000034 	andeq	r0, r0, r4, lsr r0
        *pui32Dest++ = *pui32Src++;
    1424:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
    1428:	86038504 	strhi	r8, [r3], -r4, lsl #10
    142c:	00018e02 	andeq	r8, r1, r2, lsl #28
    1430:	0000000c 	andeq	r0, r0, ip
    1434:	0000133c 	andeq	r1, r0, ip, lsr r3
    1438:	00000000 	andeq	r0, r0, r0
    143c:	0000001c 	andeq	r0, r0, ip, lsl r0
